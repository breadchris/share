{
  "version": 3,
  "sources": ["../../node_modules/@codemirror/legacy-modes/mode/commonlisp.js"],
  "sourcesContent": ["var specialForm = /^(block|let*|return-from|catch|load-time-value|setq|eval-when|locally|symbol-macrolet|flet|macrolet|tagbody|function|multiple-value-call|the|go|multiple-value-prog1|throw|if|progn|unwind-protect|labels|progv|let|quote)$/;\nvar assumeBody = /^with|^def|^do|^prog|case$|^cond$|bind$|when$|unless$/;\nvar numLiteral = /^(?:[+\\-]?(?:\\d+|\\d*\\.\\d+)(?:[efd][+\\-]?\\d+)?|[+\\-]?\\d+(?:\\/[+\\-]?\\d+)?|#b[+\\-]?[01]+|#o[+\\-]?[0-7]+|#x[+\\-]?[\\da-f]+)/;\nvar symbol = /[^\\s'`,@()\\[\\]\";]/;\nvar type;\n\nfunction readSym(stream) {\n  var ch;\n  while (ch = stream.next()) {\n    if (ch == \"\\\\\") stream.next();\n    else if (!symbol.test(ch)) { stream.backUp(1); break; }\n  }\n  return stream.current();\n}\n\nfunction base(stream, state) {\n  if (stream.eatSpace()) {type = \"ws\"; return null;}\n  if (stream.match(numLiteral)) return \"number\";\n  var ch = stream.next();\n  if (ch == \"\\\\\") ch = stream.next();\n\n  if (ch == '\"') return (state.tokenize = inString)(stream, state);\n  else if (ch == \"(\") { type = \"open\"; return \"bracket\"; }\n  else if (ch == \")\") { type = \"close\"; return \"bracket\"; }\n  else if (ch == \";\") { stream.skipToEnd(); type = \"ws\"; return \"comment\"; }\n  else if (/['`,@]/.test(ch)) return null;\n  else if (ch == \"|\") {\n    if (stream.skipTo(\"|\")) { stream.next(); return \"variableName\"; }\n    else { stream.skipToEnd(); return \"error\"; }\n  } else if (ch == \"#\") {\n    var ch = stream.next();\n    if (ch == \"(\") { type = \"open\"; return \"bracket\"; }\n    else if (/[+\\-=\\.']/.test(ch)) return null;\n    else if (/\\d/.test(ch) && stream.match(/^\\d*#/)) return null;\n    else if (ch == \"|\") return (state.tokenize = inComment)(stream, state);\n    else if (ch == \":\") { readSym(stream); return \"meta\"; }\n    else if (ch == \"\\\\\") { stream.next(); readSym(stream); return \"string.special\" }\n    else return \"error\";\n  } else {\n    var name = readSym(stream);\n    if (name == \".\") return null;\n    type = \"symbol\";\n    if (name == \"nil\" || name == \"t\" || name.charAt(0) == \":\") return \"atom\";\n    if (state.lastType == \"open\" && (specialForm.test(name) || assumeBody.test(name))) return \"keyword\";\n    if (name.charAt(0) == \"&\") return \"variableName.special\";\n    return \"variableName\";\n  }\n}\n\nfunction inString(stream, state) {\n  var escaped = false, next;\n  while (next = stream.next()) {\n    if (next == '\"' && !escaped) { state.tokenize = base; break; }\n    escaped = !escaped && next == \"\\\\\";\n  }\n  return \"string\";\n}\n\nfunction inComment(stream, state) {\n  var next, last;\n  while (next = stream.next()) {\n    if (next == \"#\" && last == \"|\") { state.tokenize = base; break; }\n    last = next;\n  }\n  type = \"ws\";\n  return \"comment\";\n}\n\nexport const commonLisp = {\n  name: \"commonlisp\",\n  startState: function () {\n    return {ctx: {prev: null, start: 0, indentTo: 0}, lastType: null, tokenize: base};\n  },\n\n  token: function (stream, state) {\n    if (stream.sol() && typeof state.ctx.indentTo != \"number\")\n      state.ctx.indentTo = state.ctx.start + 1;\n\n    type = null;\n    var style = state.tokenize(stream, state);\n    if (type != \"ws\") {\n      if (state.ctx.indentTo == null) {\n        if (type == \"symbol\" && assumeBody.test(stream.current()))\n          state.ctx.indentTo = state.ctx.start + stream.indentUnit;\n        else\n          state.ctx.indentTo = \"next\";\n      } else if (state.ctx.indentTo == \"next\") {\n        state.ctx.indentTo = stream.column();\n      }\n      state.lastType = type;\n    }\n    if (type == \"open\") state.ctx = {prev: state.ctx, start: stream.column(), indentTo: null};\n    else if (type == \"close\") state.ctx = state.ctx.prev || state.ctx;\n    return style;\n  },\n\n  indent: function (state) {\n    var i = state.ctx.indentTo;\n    return typeof i == \"number\" ? i : state.ctx.start + 1;\n  },\n\n  languageData: {\n    commentTokens: {line: \";;\", block: {open: \"#|\", close: \"|#\"}},\n    closeBrackets: {brackets: [\"(\", \"[\", \"{\", '\"']}\n  }\n};\n\n"],
  "mappings": "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",
  "names": ["specialForm", "assumeBody", "numLiteral", "symbol", "type", "readSym", "stream", "ch", "base", "state", "inString", "inComment", "name", "escaped", "next", "last", "commonLisp", "style", "i"]
}
