{
  "version": 3,
  "sources": ["../../node_modules/@codemirror/legacy-modes/mode/dylan.js"],
  "sourcesContent": ["function forEach(arr, f) {\n  for (var i = 0; i < arr.length; i++) f(arr[i], i)\n}\nfunction some(arr, f) {\n  for (var i = 0; i < arr.length; i++) if (f(arr[i], i)) return true\n  return false\n}\n\n// Words\nvar words = {\n  // Words that introduce unnamed definitions like \"define interface\"\n  unnamedDefinition: [\"interface\"],\n\n  // Words that introduce simple named definitions like \"define library\"\n  namedDefinition: [\"module\", \"library\", \"macro\",\n                    \"C-struct\", \"C-union\",\n                    \"C-function\", \"C-callable-wrapper\"\n                   ],\n\n  // Words that introduce type definitions like \"define class\".\n  // These are also parameterized like \"define method\" and are\n  // appended to otherParameterizedDefinitionWords\n  typeParameterizedDefinition: [\"class\", \"C-subtype\", \"C-mapped-subtype\"],\n\n  // Words that introduce trickier definitions like \"define method\".\n  // These require special definitions to be added to startExpressions\n  otherParameterizedDefinition: [\"method\", \"function\",\n                                 \"C-variable\", \"C-address\"\n                                ],\n\n  // Words that introduce module constant definitions.\n  // These must also be simple definitions and are\n  // appended to otherSimpleDefinitionWords\n  constantSimpleDefinition: [\"constant\"],\n\n  // Words that introduce module variable definitions.\n  // These must also be simple definitions and are\n  // appended to otherSimpleDefinitionWords\n  variableSimpleDefinition: [\"variable\"],\n\n  // Other words that introduce simple definitions\n  // (without implicit bodies).\n  otherSimpleDefinition: [\"generic\", \"domain\",\n                          \"C-pointer-type\",\n                          \"table\"\n                         ],\n\n  // Words that begin statements with implicit bodies.\n  statement: [\"if\", \"block\", \"begin\", \"method\", \"case\",\n              \"for\", \"select\", \"when\", \"unless\", \"until\",\n              \"while\", \"iterate\", \"profiling\", \"dynamic-bind\"\n             ],\n\n  // Patterns that act as separators in compound statements.\n  // This may include any general pattern that must be indented\n  // specially.\n  separator: [\"finally\", \"exception\", \"cleanup\", \"else\",\n              \"elseif\", \"afterwards\"\n             ],\n\n  // Keywords that do not require special indentation handling,\n  // but which should be highlighted\n  other: [\"above\", \"below\", \"by\", \"from\", \"handler\", \"in\",\n          \"instance\", \"let\", \"local\", \"otherwise\", \"slot\",\n          \"subclass\", \"then\", \"to\", \"keyed-by\", \"virtual\"\n         ],\n\n  // Condition signaling function calls\n  signalingCalls: [\"signal\", \"error\", \"cerror\",\n                   \"break\", \"check-type\", \"abort\"\n                  ]\n};\n\nwords[\"otherDefinition\"] =\n  words[\"unnamedDefinition\"]\n  .concat(words[\"namedDefinition\"])\n  .concat(words[\"otherParameterizedDefinition\"]);\n\nwords[\"definition\"] =\n  words[\"typeParameterizedDefinition\"]\n  .concat(words[\"otherDefinition\"]);\n\nwords[\"parameterizedDefinition\"] =\n  words[\"typeParameterizedDefinition\"]\n  .concat(words[\"otherParameterizedDefinition\"]);\n\nwords[\"simpleDefinition\"] =\n  words[\"constantSimpleDefinition\"]\n  .concat(words[\"variableSimpleDefinition\"])\n  .concat(words[\"otherSimpleDefinition\"]);\n\nwords[\"keyword\"] =\n  words[\"statement\"]\n  .concat(words[\"separator\"])\n  .concat(words[\"other\"]);\n\n// Patterns\nvar symbolPattern = \"[-_a-zA-Z?!*@<>$%]+\";\nvar symbol = new RegExp(\"^\" + symbolPattern);\nvar patterns = {\n  // Symbols with special syntax\n  symbolKeyword: symbolPattern + \":\",\n  symbolClass: \"<\" + symbolPattern + \">\",\n  symbolGlobal: \"\\\\*\" + symbolPattern + \"\\\\*\",\n  symbolConstant: \"\\\\$\" + symbolPattern\n};\nvar patternStyles = {\n  symbolKeyword: \"atom\",\n  symbolClass: \"tag\",\n  symbolGlobal: \"variableName.standard\",\n  symbolConstant: \"variableName.constant\"\n};\n\n// Compile all patterns to regular expressions\nfor (var patternName in patterns)\n  if (patterns.hasOwnProperty(patternName))\n    patterns[patternName] = new RegExp(\"^\" + patterns[patternName]);\n\n// Names beginning \"with-\" and \"without-\" are commonly\n// used as statement macro\npatterns[\"keyword\"] = [/^with(?:out)?-[-_a-zA-Z?!*@<>$%]+/];\n\nvar styles = {};\nstyles[\"keyword\"] = \"keyword\";\nstyles[\"definition\"] = \"def\";\nstyles[\"simpleDefinition\"] = \"def\";\nstyles[\"signalingCalls\"] = \"builtin\";\n\n// protected words lookup table\nvar wordLookup = {};\nvar styleLookup = {};\n\nforEach([\n  \"keyword\",\n  \"definition\",\n  \"simpleDefinition\",\n  \"signalingCalls\"\n], function(type) {\n  forEach(words[type], function(word) {\n    wordLookup[word] = type;\n    styleLookup[word] = styles[type];\n  });\n});\n\n\nfunction chain(stream, state, f) {\n  state.tokenize = f;\n  return f(stream, state);\n}\n\nfunction tokenBase(stream, state) {\n  // String\n  var ch = stream.peek();\n  if (ch == \"'\" || ch == '\"') {\n    stream.next();\n    return chain(stream, state, tokenString(ch, \"string\"));\n  }\n  // Comment\n  else if (ch == \"/\") {\n    stream.next();\n    if (stream.eat(\"*\")) {\n      return chain(stream, state, tokenComment);\n    } else if (stream.eat(\"/\")) {\n      stream.skipToEnd();\n      return \"comment\";\n    }\n    stream.backUp(1);\n  }\n  // Decimal\n  else if (/[+\\-\\d\\.]/.test(ch)) {\n    if (stream.match(/^[+-]?[0-9]*\\.[0-9]*([esdx][+-]?[0-9]+)?/i) ||\n        stream.match(/^[+-]?[0-9]+([esdx][+-]?[0-9]+)/i) ||\n        stream.match(/^[+-]?\\d+/)) {\n      return \"number\";\n    }\n  }\n  // Hash\n  else if (ch == \"#\") {\n    stream.next();\n    // Symbol with string syntax\n    ch = stream.peek();\n    if (ch == '\"') {\n      stream.next();\n      return chain(stream, state, tokenString('\"', \"string\"));\n    }\n    // Binary number\n    else if (ch == \"b\") {\n      stream.next();\n      stream.eatWhile(/[01]/);\n      return \"number\";\n    }\n    // Hex number\n    else if (ch == \"x\") {\n      stream.next();\n      stream.eatWhile(/[\\da-f]/i);\n      return \"number\";\n    }\n    // Octal number\n    else if (ch == \"o\") {\n      stream.next();\n      stream.eatWhile(/[0-7]/);\n      return \"number\";\n    }\n    // Token concatenation in macros\n    else if (ch == '#') {\n      stream.next();\n      return \"punctuation\";\n    }\n    // Sequence literals\n    else if ((ch == '[') || (ch == '(')) {\n      stream.next();\n      return \"bracket\";\n      // Hash symbol\n    } else if (stream.match(/f|t|all-keys|include|key|next|rest/i)) {\n      return \"atom\";\n    } else {\n      stream.eatWhile(/[-a-zA-Z]/);\n      return \"error\";\n    }\n  } else if (ch == \"~\") {\n    stream.next();\n    ch = stream.peek();\n    if (ch == \"=\") {\n      stream.next();\n      ch = stream.peek();\n      if (ch == \"=\") {\n        stream.next();\n        return \"operator\";\n      }\n      return \"operator\";\n    }\n    return \"operator\";\n  } else if (ch == \":\") {\n    stream.next();\n    ch = stream.peek();\n    if (ch == \"=\") {\n      stream.next();\n      return \"operator\";\n    } else if (ch == \":\") {\n      stream.next();\n      return \"punctuation\";\n    }\n  } else if (\"[](){}\".indexOf(ch) != -1) {\n    stream.next();\n    return \"bracket\";\n  } else if (\".,\".indexOf(ch) != -1) {\n    stream.next();\n    return \"punctuation\";\n  } else if (stream.match(\"end\")) {\n    return \"keyword\";\n  }\n  for (var name in patterns) {\n    if (patterns.hasOwnProperty(name)) {\n      var pattern = patterns[name];\n      if ((pattern instanceof Array && some(pattern, function(p) {\n        return stream.match(p);\n      })) || stream.match(pattern))\n        return patternStyles[name];\n    }\n  }\n  if (/[+\\-*\\/^=<>&|]/.test(ch)) {\n    stream.next();\n    return \"operator\";\n  }\n  if (stream.match(\"define\")) {\n    return \"def\";\n  } else {\n    stream.eatWhile(/[\\w\\-]/);\n    // Keyword\n    if (wordLookup.hasOwnProperty(stream.current())) {\n      return styleLookup[stream.current()];\n    } else if (stream.current().match(symbol)) {\n      return \"variable\";\n    } else {\n      stream.next();\n      return \"variableName.standard\";\n    }\n  }\n}\n\nfunction tokenComment(stream, state) {\n  var maybeEnd = false, maybeNested = false, nestedCount = 0, ch;\n  while ((ch = stream.next())) {\n    if (ch == \"/\" && maybeEnd) {\n      if (nestedCount > 0) {\n        nestedCount--;\n      } else {\n        state.tokenize = tokenBase;\n        break;\n      }\n    } else if (ch == \"*\" && maybeNested) {\n      nestedCount++;\n    }\n    maybeEnd = (ch == \"*\");\n    maybeNested = (ch == \"/\");\n  }\n  return \"comment\";\n}\n\nfunction tokenString(quote, style) {\n  return function(stream, state) {\n    var escaped = false, next, end = false;\n    while ((next = stream.next()) != null) {\n      if (next == quote && !escaped) {\n        end = true;\n        break;\n      }\n      escaped = !escaped && next == \"\\\\\";\n    }\n    if (end || !escaped) {\n      state.tokenize = tokenBase;\n    }\n    return style;\n  };\n}\n\n// Interface\nexport const dylan = {\n  name: \"dylan\",\n  startState: function() {\n    return {\n      tokenize: tokenBase,\n      currentIndent: 0\n    };\n  },\n  token: function(stream, state) {\n    if (stream.eatSpace())\n      return null;\n    var style = state.tokenize(stream, state);\n    return style;\n  },\n  languageData: {\n    commentTokens: {block: {open: \"/*\", close: \"*/\"}}\n  }\n};\n\n"],
  "mappings": "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",
  "names": ["forEach", "arr", "f", "i", "some", "words", "symbolPattern", "symbol", "patterns", "patternStyles", "patternName", "styles", "wordLookup", "styleLookup", "type", "word", "chain", "stream", "state", "tokenBase", "ch", "tokenString", "tokenComment", "name", "pattern", "p", "maybeEnd", "maybeNested", "nestedCount", "quote", "style", "escaped", "next", "end", "dylan"]
}
