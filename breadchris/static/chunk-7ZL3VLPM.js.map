{
  "version": 3,
  "sources": ["../../node_modules/@codemirror/legacy-modes/mode/solr.js"],
  "sourcesContent": ["var isStringChar = /[^\\s\\|\\!\\+\\-\\*\\?\\~\\^\\&\\:\\(\\)\\[\\]\\{\\}\\\"\\\\]/;\nvar isOperatorChar = /[\\|\\!\\+\\-\\*\\?\\~\\^\\&]/;\nvar isOperatorString = /^(OR|AND|NOT|TO)$/;\n\nfunction isNumber(word) {\n  return parseFloat(word).toString() === word;\n}\n\nfunction tokenString(quote) {\n  return function(stream, state) {\n    var escaped = false, next;\n    while ((next = stream.next()) != null) {\n      if (next == quote && !escaped) break;\n      escaped = !escaped && next == \"\\\\\";\n    }\n\n    if (!escaped) state.tokenize = tokenBase;\n    return \"string\";\n  };\n}\n\nfunction tokenOperator(operator) {\n  return function(stream, state) {\n    if (operator == \"|\")\n      stream.eat(/\\|/);\n    else if (operator == \"&\")\n      stream.eat(/\\&/);\n\n    state.tokenize = tokenBase;\n    return \"operator\";\n  };\n}\n\nfunction tokenWord(ch) {\n  return function(stream, state) {\n    var word = ch;\n    while ((ch = stream.peek()) && ch.match(isStringChar) != null) {\n      word += stream.next();\n    }\n\n    state.tokenize = tokenBase;\n    if (isOperatorString.test(word))\n      return \"operator\";\n    else if (isNumber(word))\n      return \"number\";\n    else if (stream.peek() == \":\")\n      return \"propertyName\";\n    else\n      return \"string\";\n  };\n}\n\nfunction tokenBase(stream, state) {\n  var ch = stream.next();\n  if (ch == '\"')\n    state.tokenize = tokenString(ch);\n  else if (isOperatorChar.test(ch))\n    state.tokenize = tokenOperator(ch);\n  else if (isStringChar.test(ch))\n    state.tokenize = tokenWord(ch);\n\n  return (state.tokenize != tokenBase) ? state.tokenize(stream, state) : null;\n}\n\nexport const solr = {\n  name: \"solr\",\n\n  startState: function() {\n    return {\n      tokenize: tokenBase\n    };\n  },\n\n  token: function(stream, state) {\n    if (stream.eatSpace()) return null;\n    return state.tokenize(stream, state);\n  }\n};\n"],
  "mappings": "AAAA,IAAIA,EAAe,4CACfC,EAAiB,uBACjBC,EAAmB,oBAEvB,SAASC,EAASC,EAAM,CACtB,OAAO,WAAWA,CAAI,EAAE,SAAS,IAAMA,CACzC,CAEA,SAASC,EAAYC,EAAO,CAC1B,OAAO,SAASC,EAAQC,EAAO,CAE7B,QADIC,EAAU,GAAOC,GACbA,EAAOH,EAAO,KAAK,IAAM,MAC3B,EAAAG,GAAQJ,GAAS,CAACG,IACtBA,EAAU,CAACA,GAAWC,GAAQ,KAGhC,OAAKD,IAASD,EAAM,SAAWG,GACxB,QACT,CACF,CAEA,SAASC,EAAcC,EAAU,CAC/B,OAAO,SAASN,EAAQC,EAAO,CAC7B,OAAIK,GAAY,IACdN,EAAO,IAAI,IAAI,EACRM,GAAY,KACnBN,EAAO,IAAI,IAAI,EAEjBC,EAAM,SAAWG,EACV,UACT,CACF,CAEA,SAASG,EAAUC,EAAI,CACrB,OAAO,SAASR,EAAQC,EAAO,CAE7B,QADIJ,EAAOW,GACHA,EAAKR,EAAO,KAAK,IAAMQ,EAAG,MAAMf,CAAY,GAAK,MACvDI,GAAQG,EAAO,KAAK,EAItB,OADAC,EAAM,SAAWG,EACbT,EAAiB,KAAKE,CAAI,EACrB,WACAD,EAASC,CAAI,EACb,SACAG,EAAO,KAAK,GAAK,IACjB,eAEA,QACX,CACF,CAEA,SAASI,EAAUJ,EAAQC,EAAO,CAChC,IAAIO,EAAKR,EAAO,KAAK,EACrB,OAAIQ,GAAM,IACRP,EAAM,SAAWH,EAAYU,CAAE,EACxBd,EAAe,KAAKc,CAAE,EAC7BP,EAAM,SAAWI,EAAcG,CAAE,EAC1Bf,EAAa,KAAKe,CAAE,IAC3BP,EAAM,SAAWM,EAAUC,CAAE,GAEvBP,EAAM,UAAYG,EAAaH,EAAM,SAASD,EAAQC,CAAK,EAAI,IACzE,CAEO,IAAMQ,EAAO,CAClB,KAAM,OAEN,WAAY,UAAW,CACrB,MAAO,CACL,SAAUL,CACZ,CACF,EAEA,MAAO,SAASJ,EAAQC,EAAO,CAC7B,OAAID,EAAO,SAAS,EAAU,KACvBC,EAAM,SAASD,EAAQC,CAAK,CACrC,CACF",
  "names": ["isStringChar", "isOperatorChar", "isOperatorString", "isNumber", "word", "tokenString", "quote", "stream", "state", "escaped", "next", "tokenBase", "tokenOperator", "operator", "tokenWord", "ch", "solr"]
}
