{
  "version": 3,
  "sources": ["../../node_modules/hast-util-from-dom/lib/index.js"],
  "sourcesContent": ["/**\n * @typedef {import('hast').Root} HastRoot\n * @typedef {import('hast').DocType} HastDoctype\n * @typedef {import('hast').Element} HastElement\n * @typedef {import('hast').Text} HastText\n * @typedef {import('hast').Comment} HastComment\n * @typedef {import('hast').Content} HastContent\n */\n\n/**\n * @typedef {HastContent | HastRoot} HastNode\n *\n * @callback AfterTransform\n *   Callback called when each node is transformed.\n * @param {Node} domNode\n *   DOM node that was handled.\n * @param {HastNode} hastNode\n *   Corresponding hast node.\n * @returns {void}\n *   Nothing.\n *\n * @typedef Options\n *   Configuration.\n * @property {AfterTransform | null | undefined} [afterTransform]\n *   Callback called when each node is transformed.\n */\n\nimport {webNamespaces} from 'web-namespaces'\nimport {h, s} from 'hastscript'\n\n/**\n * Transform a DOM tree to a hast tree.\n *\n * @param {Node} tree\n *   DOM tree to transform.\n * @param {Options | null | undefined} [options]\n *   Configuration (optional).\n * @returns {HastNode}\n *   Equivalent hast node.\n */\nexport function fromDom(tree, options) {\n  const result = tree ? transform(tree, options || {}) : undefined\n  return result || {type: 'root', children: []}\n}\n\n/**\n * @param {Node} node\n *   DOM node to transform.\n * @param {Options} options\n *   Configuration.\n * @returns {HastNode | undefined}\n *   Equivalent hast node.\n *\n *   Note that certain legacy DOM nodes (i.e., Attr nodes (2),  CDATA, processing instructions)\n */\nfunction transform(node, options) {\n  const transformed = one(node, options)\n  if (transformed && options.afterTransform)\n    options.afterTransform(node, transformed)\n  return transformed\n}\n\n/**\n * @param {Node} node\n *   DOM node to transform.\n * @param {Options} options\n *   Configuration.\n * @returns {HastNode | undefined}\n *   Equivalent hast node.\n */\nfunction one(node, options) {\n  switch (node.nodeType) {\n    case 1 /* Element */: {\n      // @ts-expect-error TypeScript is wrong.\n      return element(node, options)\n    }\n\n    // Ignore: Attr (2).\n\n    case 3 /* Text */: {\n      // @ts-expect-error TypeScript is wrong.\n      return text(node)\n    }\n\n    // Ignore: CDATA (4).\n    // Removed: Entity reference (5)\n    // Removed: Entity (6)\n    // Ignore: Processing instruction (7).\n\n    case 8 /* Comment */: {\n      // @ts-expect-error TypeScript is wrong.\n      return comment(node)\n    }\n\n    case 9 /* Document */: {\n      // @ts-expect-error TypeScript is wrong.\n      return root(node, options)\n    }\n\n    case 10 /* Document type */: {\n      return doctype()\n    }\n\n    case 11 /* Document fragment */: {\n      // @ts-expect-error TypeScript is wrong.\n      return root(node, options)\n    }\n\n    default: {\n      return undefined\n    }\n  }\n}\n\n/**\n * Transform a document.\n *\n * @param {Document | DocumentFragment} node\n *   DOM node to transform.\n * @param {Options} options\n *   Configuration.\n * @returns {HastRoot}\n *   Equivalent hast node.\n */\nfunction root(node, options) {\n  return {type: 'root', children: all(node, options)}\n}\n\n/**\n * Transform a doctype.\n *\n * @returns {HastDoctype}\n *   Equivalent hast node.\n */\nfunction doctype() {\n  // @ts-expect-error hast types out of date.\n  return {type: 'doctype'}\n}\n\n/**\n * Transform a text.\n *\n * @param {Text} node\n *   DOM node to transform.\n * @returns {HastText}\n *   Equivalent hast node.\n */\nfunction text(node) {\n  return {type: 'text', value: node.nodeValue || ''}\n}\n\n/**\n * Transform a comment.\n *\n * @param {Comment} node\n *   DOM node to transform.\n * @returns {HastComment}\n *   Equivalent hast node.\n */\nfunction comment(node) {\n  return {type: 'comment', value: node.nodeValue || ''}\n}\n\n/**\n * Transform an element.\n *\n * @param {Element} node\n *   DOM node to transform.\n * @param {Options} options\n *   Configuration.\n * @returns {HastElement}\n *   Equivalent hast node.\n */\nfunction element(node, options) {\n  const space = node.namespaceURI\n  const fn = space === webNamespaces.svg ? s : h\n  const tagName =\n    space === webNamespaces.html ? node.tagName.toLowerCase() : node.tagName\n  /** @type {DocumentFragment | Element} */\n  const content =\n    // @ts-expect-error Types are wrong.\n    space === webNamespaces.html && tagName === 'template' ? node.content : node\n  const attributes = node.getAttributeNames()\n  /** @type {Record<string, string>} */\n  const props = {}\n  let index = -1\n\n  while (++index < attributes.length) {\n    props[attributes[index]] = node.getAttribute(attributes[index]) || ''\n  }\n\n  return fn(tagName, props, all(content, options))\n}\n\n/**\n * Transform child nodes in a parent.\n *\n * @param {Document | DocumentFragment | Element} node\n *   DOM node to transform.\n * @param {Options} options\n *   Configuration.\n * @returns {Array<HastContent>}\n *   Equivalent hast nodes.\n */\nfunction all(node, options) {\n  const nodes = node.childNodes\n  /** @type {Array<HastContent>} */\n  const children = []\n  let index = -1\n\n  while (++index < nodes.length) {\n    const child = transform(nodes[index], options)\n\n    if (child !== undefined) {\n      // @ts-expect-error Assume no document inside document.\n      children.push(child)\n    }\n  }\n\n  return children\n}\n"],
  "mappings": "8GAwCO,SAASA,EAAQC,EAAMC,EAAS,CAErC,OADeD,EAAOE,EAAUF,EAAMC,GAAW,CAAC,CAAC,EAAI,SACtC,CAAC,KAAM,OAAQ,SAAU,CAAC,CAAC,CAC9C,CAYA,SAASC,EAAUC,EAAMF,EAAS,CAChC,IAAMG,EAAcC,EAAIF,EAAMF,CAAO,EACrC,OAAIG,GAAeH,EAAQ,gBACzBA,EAAQ,eAAeE,EAAMC,CAAW,EACnCA,CACT,CAUA,SAASC,EAAIF,EAAMF,EAAS,CAC1B,OAAQE,EAAK,SAAU,CACrB,IAAK,GAEH,OAAOG,EAAQH,EAAMF,CAAO,EAK9B,IAAK,GAEH,OAAOM,EAAKJ,CAAI,EAQlB,IAAK,GAEH,OAAOK,EAAQL,CAAI,EAGrB,IAAK,GAEH,OAAOM,EAAKN,EAAMF,CAAO,EAG3B,IAAK,IACH,OAAOS,EAAQ,EAGjB,IAAK,IAEH,OAAOD,EAAKN,EAAMF,CAAO,EAG3B,QACE,MAEJ,CACF,CAYA,SAASQ,EAAKN,EAAMF,EAAS,CAC3B,MAAO,CAAC,KAAM,OAAQ,SAAUU,EAAIR,EAAMF,CAAO,CAAC,CACpD,CAQA,SAASS,GAAU,CAEjB,MAAO,CAAC,KAAM,SAAS,CACzB,CAUA,SAASH,EAAKJ,EAAM,CAClB,MAAO,CAAC,KAAM,OAAQ,MAAOA,EAAK,WAAa,EAAE,CACnD,CAUA,SAASK,EAAQL,EAAM,CACrB,MAAO,CAAC,KAAM,UAAW,MAAOA,EAAK,WAAa,EAAE,CACtD,CAYA,SAASG,EAAQH,EAAMF,EAAS,CAC9B,IAAMW,EAAQT,EAAK,aACbU,EAAKD,IAAUE,EAAc,IAAMC,EAAIC,EACvCC,EACJL,IAAUE,EAAc,KAAOX,EAAK,QAAQ,YAAY,EAAIA,EAAK,QAE7De,EAEJN,IAAUE,EAAc,MAAQG,IAAY,WAAad,EAAK,QAAUA,EACpEgB,EAAahB,EAAK,kBAAkB,EAEpCiB,EAAQ,CAAC,EACXC,EAAQ,GAEZ,KAAO,EAAEA,EAAQF,EAAW,QAC1BC,EAAMD,EAAWE,CAAK,CAAC,EAAIlB,EAAK,aAAagB,EAAWE,CAAK,CAAC,GAAK,GAGrE,OAAOR,EAAGI,EAASG,EAAOT,EAAIO,EAASjB,CAAO,CAAC,CACjD,CAYA,SAASU,EAAIR,EAAMF,EAAS,CAC1B,IAAMqB,EAAQnB,EAAK,WAEboB,EAAW,CAAC,EACdF,EAAQ,GAEZ,KAAO,EAAEA,EAAQC,EAAM,QAAQ,CAC7B,IAAME,EAAQtB,EAAUoB,EAAMD,CAAK,EAAGpB,CAAO,EAEzCuB,IAAU,QAEZD,EAAS,KAAKC,CAAK,CAEvB,CAEA,OAAOD,CACT",
  "names": ["fromDom", "tree", "options", "transform", "node", "transformed", "one", "element", "text", "comment", "root", "doctype", "all", "space", "fn", "webNamespaces", "s", "h", "tagName", "content", "attributes", "props", "index", "nodes", "children", "child"]
}
