{
  "version": 3,
  "sources": ["../../../node_modules/comlink/src/comlink.ts", "../../../wasmcode/lib/go/wasm_exec.js", "../../../wasmcode/lib/go/debug/utils.ts", "../../../wasmcode/lib/go/common.ts", "../../../wasmcode/lib/go/types/common.ts", "../../../wasmcode/lib/go/types/spec.ts", "../../../wasmcode/lib/go/types/basic/boolean.ts", "../../../wasmcode/lib/go/types/basic/uint64.ts", "../../../wasmcode/lib/go/types/basic/dataview.ts", "../../../wasmcode/lib/go/types/basic/index.ts", "../../../wasmcode/lib/go/types/complex/struct.ts", "../../../wasmcode/lib/go/types/complex/array.ts", "../../../wasmcode/lib/go/types/refs/string.ts", "../../../wasmcode/lib/go/types/refs/slice.ts", "../../../wasmcode/lib/go/pkg/syscall/js/value.ts", "../../../wasmcode/lib/go/pkg/syscall/js/ref.ts", "../../../wasmcode/analyzer/bootstrap.ts", "../../../wasmcode/analyzer/analyzer.worker.ts"],
  "sourcesContent": ["/**\n * @license\n * Copyright 2019 Google LLC\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport {\n  Endpoint,\n  EventSource,\n  Message,\n  MessageType,\n  PostMessageWithOrigin,\n  WireValue,\n  WireValueType,\n} from \"./protocol\";\nexport type { Endpoint };\n\nexport const proxyMarker = Symbol(\"Comlink.proxy\");\nexport const createEndpoint = Symbol(\"Comlink.endpoint\");\nexport const releaseProxy = Symbol(\"Comlink.releaseProxy\");\nexport const finalizer = Symbol(\"Comlink.finalizer\");\n\nconst throwMarker = Symbol(\"Comlink.thrown\");\n\n/**\n * Interface of values that were marked to be proxied with `comlink.proxy()`.\n * Can also be implemented by classes.\n */\nexport interface ProxyMarked {\n  [proxyMarker]: true;\n}\n\n/**\n * Takes a type and wraps it in a Promise, if it not already is one.\n * This is to avoid `Promise<Promise<T>>`.\n *\n * This is the inverse of `Unpromisify<T>`.\n */\ntype Promisify<T> = T extends Promise<unknown> ? T : Promise<T>;\n/**\n * Takes a type that may be Promise and unwraps the Promise type.\n * If `P` is not a Promise, it returns `P`.\n *\n * This is the inverse of `Promisify<T>`.\n */\ntype Unpromisify<P> = P extends Promise<infer T> ? T : P;\n\n/**\n * Takes the raw type of a remote property and returns the type that is visible to the local thread on the proxy.\n *\n * Note: This needs to be its own type alias, otherwise it will not distribute over unions.\n * See https://www.typescriptlang.org/docs/handbook/advanced-types.html#distributive-conditional-types\n */\ntype RemoteProperty<T> =\n  // If the value is a method, comlink will proxy it automatically.\n  // Objects are only proxied if they are marked to be proxied.\n  // Otherwise, the property is converted to a Promise that resolves the cloned value.\n  T extends Function | ProxyMarked ? Remote<T> : Promisify<T>;\n\n/**\n * Takes the raw type of a property as a remote thread would see it through a proxy (e.g. when passed in as a function\n * argument) and returns the type that the local thread has to supply.\n *\n * This is the inverse of `RemoteProperty<T>`.\n *\n * Note: This needs to be its own type alias, otherwise it will not distribute over unions. See\n * https://www.typescriptlang.org/docs/handbook/advanced-types.html#distributive-conditional-types\n */\ntype LocalProperty<T> = T extends Function | ProxyMarked\n  ? Local<T>\n  : Unpromisify<T>;\n\n/**\n * Proxies `T` if it is a `ProxyMarked`, clones it otherwise (as handled by structured cloning and transfer handlers).\n */\nexport type ProxyOrClone<T> = T extends ProxyMarked ? Remote<T> : T;\n/**\n * Inverse of `ProxyOrClone<T>`.\n */\nexport type UnproxyOrClone<T> = T extends RemoteObject<ProxyMarked>\n  ? Local<T>\n  : T;\n\n/**\n * Takes the raw type of a remote object in the other thread and returns the type as it is visible to the local thread\n * when proxied with `Comlink.proxy()`.\n *\n * This does not handle call signatures, which is handled by the more general `Remote<T>` type.\n *\n * @template T The raw type of a remote object as seen in the other thread.\n */\nexport type RemoteObject<T> = { [P in keyof T]: RemoteProperty<T[P]> };\n/**\n * Takes the type of an object as a remote thread would see it through a proxy (e.g. when passed in as a function\n * argument) and returns the type that the local thread has to supply.\n *\n * This does not handle call signatures, which is handled by the more general `Local<T>` type.\n *\n * This is the inverse of `RemoteObject<T>`.\n *\n * @template T The type of a proxied object.\n */\nexport type LocalObject<T> = { [P in keyof T]: LocalProperty<T[P]> };\n\n/**\n * Additional special comlink methods available on each proxy returned by `Comlink.wrap()`.\n */\nexport interface ProxyMethods {\n  [createEndpoint]: () => Promise<MessagePort>;\n  [releaseProxy]: () => void;\n}\n\n/**\n * Takes the raw type of a remote object, function or class in the other thread and returns the type as it is visible to\n * the local thread from the proxy return value of `Comlink.wrap()` or `Comlink.proxy()`.\n */\nexport type Remote<T> =\n  // Handle properties\n  RemoteObject<T> &\n    // Handle call signature (if present)\n    (T extends (...args: infer TArguments) => infer TReturn\n      ? (\n          ...args: { [I in keyof TArguments]: UnproxyOrClone<TArguments[I]> }\n        ) => Promisify<ProxyOrClone<Unpromisify<TReturn>>>\n      : unknown) &\n    // Handle construct signature (if present)\n    // The return of construct signatures is always proxied (whether marked or not)\n    (T extends { new (...args: infer TArguments): infer TInstance }\n      ? {\n          new (\n            ...args: {\n              [I in keyof TArguments]: UnproxyOrClone<TArguments[I]>;\n            }\n          ): Promisify<Remote<TInstance>>;\n        }\n      : unknown) &\n    // Include additional special comlink methods available on the proxy.\n    ProxyMethods;\n\n/**\n * Expresses that a type can be either a sync or async.\n */\ntype MaybePromise<T> = Promise<T> | T;\n\n/**\n * Takes the raw type of a remote object, function or class as a remote thread would see it through a proxy (e.g. when\n * passed in as a function argument) and returns the type the local thread has to supply.\n *\n * This is the inverse of `Remote<T>`. It takes a `Remote<T>` and returns its original input `T`.\n */\nexport type Local<T> =\n  // Omit the special proxy methods (they don't need to be supplied, comlink adds them)\n  Omit<LocalObject<T>, keyof ProxyMethods> &\n    // Handle call signatures (if present)\n    (T extends (...args: infer TArguments) => infer TReturn\n      ? (\n          ...args: { [I in keyof TArguments]: ProxyOrClone<TArguments[I]> }\n        ) => // The raw function could either be sync or async, but is always proxied automatically\n        MaybePromise<UnproxyOrClone<Unpromisify<TReturn>>>\n      : unknown) &\n    // Handle construct signature (if present)\n    // The return of construct signatures is always proxied (whether marked or not)\n    (T extends { new (...args: infer TArguments): infer TInstance }\n      ? {\n          new (\n            ...args: {\n              [I in keyof TArguments]: ProxyOrClone<TArguments[I]>;\n            }\n          ): // The raw constructor could either be sync or async, but is always proxied automatically\n          MaybePromise<Local<Unpromisify<TInstance>>>;\n        }\n      : unknown);\n\nconst isObject = (val: unknown): val is object =>\n  (typeof val === \"object\" && val !== null) || typeof val === \"function\";\n\n/**\n * Customizes the serialization of certain values as determined by `canHandle()`.\n *\n * @template T The input type being handled by this transfer handler.\n * @template S The serialized type sent over the wire.\n */\nexport interface TransferHandler<T, S> {\n  /**\n   * Gets called for every value to determine whether this transfer handler\n   * should serialize the value, which includes checking that it is of the right\n   * type (but can perform checks beyond that as well).\n   */\n  canHandle(value: unknown): value is T;\n\n  /**\n   * Gets called with the value if `canHandle()` returned `true` to produce a\n   * value that can be sent in a message, consisting of structured-cloneable\n   * values and/or transferrable objects.\n   */\n  serialize(value: T): [S, Transferable[]];\n\n  /**\n   * Gets called to deserialize an incoming value that was serialized in the\n   * other thread with this transfer handler (known through the name it was\n   * registered under).\n   */\n  deserialize(value: S): T;\n}\n\n/**\n * Internal transfer handle to handle objects marked to proxy.\n */\nconst proxyTransferHandler: TransferHandler<object, MessagePort> = {\n  canHandle: (val): val is ProxyMarked =>\n    isObject(val) && (val as ProxyMarked)[proxyMarker],\n  serialize(obj) {\n    const { port1, port2 } = new MessageChannel();\n    expose(obj, port1);\n    return [port2, [port2]];\n  },\n  deserialize(port) {\n    port.start();\n    return wrap(port);\n  },\n};\n\ninterface ThrownValue {\n  [throwMarker]: unknown; // just needs to be present\n  value: unknown;\n}\ntype SerializedThrownValue =\n  | { isError: true; value: Error }\n  | { isError: false; value: unknown };\n\n/**\n * Internal transfer handler to handle thrown exceptions.\n */\nconst throwTransferHandler: TransferHandler<\n  ThrownValue,\n  SerializedThrownValue\n> = {\n  canHandle: (value): value is ThrownValue =>\n    isObject(value) && throwMarker in value,\n  serialize({ value }) {\n    let serialized: SerializedThrownValue;\n    if (value instanceof Error) {\n      serialized = {\n        isError: true,\n        value: {\n          message: value.message,\n          name: value.name,\n          stack: value.stack,\n        },\n      };\n    } else {\n      serialized = { isError: false, value };\n    }\n    return [serialized, []];\n  },\n  deserialize(serialized) {\n    if (serialized.isError) {\n      throw Object.assign(\n        new Error(serialized.value.message),\n        serialized.value\n      );\n    }\n    throw serialized.value;\n  },\n};\n\n/**\n * Allows customizing the serialization of certain values.\n */\nexport const transferHandlers = new Map<\n  string,\n  TransferHandler<unknown, unknown>\n>([\n  [\"proxy\", proxyTransferHandler],\n  [\"throw\", throwTransferHandler],\n]);\n\nfunction isAllowedOrigin(\n  allowedOrigins: (string | RegExp)[],\n  origin: string\n): boolean {\n  for (const allowedOrigin of allowedOrigins) {\n    if (origin === allowedOrigin || allowedOrigin === \"*\") {\n      return true;\n    }\n    if (allowedOrigin instanceof RegExp && allowedOrigin.test(origin)) {\n      return true;\n    }\n  }\n  return false;\n}\n\nexport function expose(\n  obj: any,\n  ep: Endpoint = globalThis as any,\n  allowedOrigins: (string | RegExp)[] = [\"*\"]\n) {\n  ep.addEventListener(\"message\", function callback(ev: MessageEvent) {\n    if (!ev || !ev.data) {\n      return;\n    }\n    if (!isAllowedOrigin(allowedOrigins, ev.origin)) {\n      console.warn(`Invalid origin '${ev.origin}' for comlink proxy`);\n      return;\n    }\n    const { id, type, path } = {\n      path: [] as string[],\n      ...(ev.data as Message),\n    };\n    const argumentList = (ev.data.argumentList || []).map(fromWireValue);\n    let returnValue;\n    try {\n      const parent = path.slice(0, -1).reduce((obj, prop) => obj[prop], obj);\n      const rawValue = path.reduce((obj, prop) => obj[prop], obj);\n      switch (type) {\n        case MessageType.GET:\n          {\n            returnValue = rawValue;\n          }\n          break;\n        case MessageType.SET:\n          {\n            parent[path.slice(-1)[0]] = fromWireValue(ev.data.value);\n            returnValue = true;\n          }\n          break;\n        case MessageType.APPLY:\n          {\n            returnValue = rawValue.apply(parent, argumentList);\n          }\n          break;\n        case MessageType.CONSTRUCT:\n          {\n            const value = new rawValue(...argumentList);\n            returnValue = proxy(value);\n          }\n          break;\n        case MessageType.ENDPOINT:\n          {\n            const { port1, port2 } = new MessageChannel();\n            expose(obj, port2);\n            returnValue = transfer(port1, [port1]);\n          }\n          break;\n        case MessageType.RELEASE:\n          {\n            returnValue = undefined;\n          }\n          break;\n        default:\n          return;\n      }\n    } catch (value) {\n      returnValue = { value, [throwMarker]: 0 };\n    }\n    Promise.resolve(returnValue)\n      .catch((value) => {\n        return { value, [throwMarker]: 0 };\n      })\n      .then((returnValue) => {\n        const [wireValue, transferables] = toWireValue(returnValue);\n        ep.postMessage({ ...wireValue, id }, transferables);\n        if (type === MessageType.RELEASE) {\n          // detach and deactive after sending release response above.\n          ep.removeEventListener(\"message\", callback as any);\n          closeEndPoint(ep);\n          if (finalizer in obj && typeof obj[finalizer] === \"function\") {\n            obj[finalizer]();\n          }\n        }\n      })\n      .catch((error) => {\n        // Send Serialization Error To Caller\n        const [wireValue, transferables] = toWireValue({\n          value: new TypeError(\"Unserializable return value\"),\n          [throwMarker]: 0,\n        });\n        ep.postMessage({ ...wireValue, id }, transferables);\n      });\n  } as any);\n  if (ep.start) {\n    ep.start();\n  }\n}\n\nfunction isMessagePort(endpoint: Endpoint): endpoint is MessagePort {\n  return endpoint.constructor.name === \"MessagePort\";\n}\n\nfunction closeEndPoint(endpoint: Endpoint) {\n  if (isMessagePort(endpoint)) endpoint.close();\n}\n\nexport function wrap<T>(ep: Endpoint, target?: any): Remote<T> {\n  return createProxy<T>(ep, [], target) as any;\n}\n\nfunction throwIfProxyReleased(isReleased: boolean) {\n  if (isReleased) {\n    throw new Error(\"Proxy has been released and is not useable\");\n  }\n}\n\nfunction releaseEndpoint(ep: Endpoint) {\n  return requestResponseMessage(ep, {\n    type: MessageType.RELEASE,\n  }).then(() => {\n    closeEndPoint(ep);\n  });\n}\n\ninterface FinalizationRegistry<T> {\n  new (cb: (heldValue: T) => void): FinalizationRegistry<T>;\n  register(\n    weakItem: object,\n    heldValue: T,\n    unregisterToken?: object | undefined\n  ): void;\n  unregister(unregisterToken: object): void;\n}\ndeclare var FinalizationRegistry: FinalizationRegistry<Endpoint>;\n\nconst proxyCounter = new WeakMap<Endpoint, number>();\nconst proxyFinalizers =\n  \"FinalizationRegistry\" in globalThis &&\n  new FinalizationRegistry((ep: Endpoint) => {\n    const newCount = (proxyCounter.get(ep) || 0) - 1;\n    proxyCounter.set(ep, newCount);\n    if (newCount === 0) {\n      releaseEndpoint(ep);\n    }\n  });\n\nfunction registerProxy(proxy: object, ep: Endpoint) {\n  const newCount = (proxyCounter.get(ep) || 0) + 1;\n  proxyCounter.set(ep, newCount);\n  if (proxyFinalizers) {\n    proxyFinalizers.register(proxy, ep, proxy);\n  }\n}\n\nfunction unregisterProxy(proxy: object) {\n  if (proxyFinalizers) {\n    proxyFinalizers.unregister(proxy);\n  }\n}\n\nfunction createProxy<T>(\n  ep: Endpoint,\n  path: (string | number | symbol)[] = [],\n  target: object = function () {}\n): Remote<T> {\n  let isProxyReleased = false;\n  const proxy = new Proxy(target, {\n    get(_target, prop) {\n      throwIfProxyReleased(isProxyReleased);\n      if (prop === releaseProxy) {\n        return () => {\n          unregisterProxy(proxy);\n          releaseEndpoint(ep);\n          isProxyReleased = true;\n        };\n      }\n      if (prop === \"then\") {\n        if (path.length === 0) {\n          return { then: () => proxy };\n        }\n        const r = requestResponseMessage(ep, {\n          type: MessageType.GET,\n          path: path.map((p) => p.toString()),\n        }).then(fromWireValue);\n        return r.then.bind(r);\n      }\n      return createProxy(ep, [...path, prop]);\n    },\n    set(_target, prop, rawValue) {\n      throwIfProxyReleased(isProxyReleased);\n      // FIXME: ES6 Proxy Handler `set` methods are supposed to return a\n      // boolean. To show good will, we return true asynchronously \u00AF\\_(\u30C4)_/\u00AF\n      const [value, transferables] = toWireValue(rawValue);\n      return requestResponseMessage(\n        ep,\n        {\n          type: MessageType.SET,\n          path: [...path, prop].map((p) => p.toString()),\n          value,\n        },\n        transferables\n      ).then(fromWireValue) as any;\n    },\n    apply(_target, _thisArg, rawArgumentList) {\n      throwIfProxyReleased(isProxyReleased);\n      const last = path[path.length - 1];\n      if ((last as any) === createEndpoint) {\n        return requestResponseMessage(ep, {\n          type: MessageType.ENDPOINT,\n        }).then(fromWireValue);\n      }\n      // We just pretend that `bind()` didn\u2019t happen.\n      if (last === \"bind\") {\n        return createProxy(ep, path.slice(0, -1));\n      }\n      const [argumentList, transferables] = processArguments(rawArgumentList);\n      return requestResponseMessage(\n        ep,\n        {\n          type: MessageType.APPLY,\n          path: path.map((p) => p.toString()),\n          argumentList,\n        },\n        transferables\n      ).then(fromWireValue);\n    },\n    construct(_target, rawArgumentList) {\n      throwIfProxyReleased(isProxyReleased);\n      const [argumentList, transferables] = processArguments(rawArgumentList);\n      return requestResponseMessage(\n        ep,\n        {\n          type: MessageType.CONSTRUCT,\n          path: path.map((p) => p.toString()),\n          argumentList,\n        },\n        transferables\n      ).then(fromWireValue);\n    },\n  });\n  registerProxy(proxy, ep);\n  return proxy as any;\n}\n\nfunction myFlat<T>(arr: (T | T[])[]): T[] {\n  return Array.prototype.concat.apply([], arr);\n}\n\nfunction processArguments(argumentList: any[]): [WireValue[], Transferable[]] {\n  const processed = argumentList.map(toWireValue);\n  return [processed.map((v) => v[0]), myFlat(processed.map((v) => v[1]))];\n}\n\nconst transferCache = new WeakMap<any, Transferable[]>();\nexport function transfer<T>(obj: T, transfers: Transferable[]): T {\n  transferCache.set(obj, transfers);\n  return obj;\n}\n\nexport function proxy<T extends {}>(obj: T): T & ProxyMarked {\n  return Object.assign(obj, { [proxyMarker]: true }) as any;\n}\n\nexport function windowEndpoint(\n  w: PostMessageWithOrigin,\n  context: EventSource = globalThis,\n  targetOrigin = \"*\"\n): Endpoint {\n  return {\n    postMessage: (msg: any, transferables: Transferable[]) =>\n      w.postMessage(msg, targetOrigin, transferables),\n    addEventListener: context.addEventListener.bind(context),\n    removeEventListener: context.removeEventListener.bind(context),\n  };\n}\n\nfunction toWireValue(value: any): [WireValue, Transferable[]] {\n  for (const [name, handler] of transferHandlers) {\n    if (handler.canHandle(value)) {\n      const [serializedValue, transferables] = handler.serialize(value);\n      return [\n        {\n          type: WireValueType.HANDLER,\n          name,\n          value: serializedValue,\n        },\n        transferables,\n      ];\n    }\n  }\n  return [\n    {\n      type: WireValueType.RAW,\n      value,\n    },\n    transferCache.get(value) || [],\n  ];\n}\n\nfunction fromWireValue(value: WireValue): any {\n  switch (value.type) {\n    case WireValueType.HANDLER:\n      return transferHandlers.get(value.name)!.deserialize(value.value);\n    case WireValueType.RAW:\n      return value.value;\n  }\n}\n\nfunction requestResponseMessage(\n  ep: Endpoint,\n  msg: Message,\n  transfers?: Transferable[]\n): Promise<WireValue> {\n  return new Promise((resolve) => {\n    const id = generateUUID();\n    ep.addEventListener(\"message\", function l(ev: MessageEvent) {\n      if (!ev.data || !ev.data.id || ev.data.id !== id) {\n        return;\n      }\n      ep.removeEventListener(\"message\", l as any);\n      resolve(ev.data);\n    } as any);\n    if (ep.start) {\n      ep.start();\n    }\n    ep.postMessage({ id, ...msg }, transfers);\n  });\n}\n\nfunction generateUUID(): string {\n  return new Array(4)\n    .fill(0)\n    .map(() => Math.floor(Math.random() * Number.MAX_SAFE_INTEGER).toString(16))\n    .join(\"-\");\n}\n", "// Copyright 2018 The Go Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style\n// license that can be found in the LICENSE file.\n\n\"use strict\";\n\n(() => {\n\tconst enosys = () => {\n\t\tconst err = new Error(\"not implemented\");\n\t\terr.code = \"ENOSYS\";\n\t\treturn err;\n\t};\n\n\tif (!globalThis.fs) {\n\t\tlet outputBuf = \"\";\n\t\tglobalThis.fs = {\n\t\t\tconstants: { O_WRONLY: -1, O_RDWR: -1, O_CREAT: -1, O_TRUNC: -1, O_APPEND: -1, O_EXCL: -1 }, // unused\n\t\t\twriteSync(fd, buf) {\n\t\t\t\toutputBuf += decoder.decode(buf);\n\t\t\t\tconst nl = outputBuf.lastIndexOf(\"\\n\");\n\t\t\t\tif (nl != -1) {\n\t\t\t\t\tconsole.log(outputBuf.substring(0, nl));\n\t\t\t\t\toutputBuf = outputBuf.substring(nl + 1);\n\t\t\t\t}\n\t\t\t\treturn buf.length;\n\t\t\t},\n\t\t\twrite(fd, buf, offset, length, position, callback) {\n\t\t\t\tif (offset !== 0 || length !== buf.length || position !== null) {\n\t\t\t\t\tcallback(enosys());\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tconst n = this.writeSync(fd, buf);\n\t\t\t\tcallback(null, n);\n\t\t\t},\n\t\t\tchmod(path, mode, callback) { callback(enosys()); },\n\t\t\tchown(path, uid, gid, callback) { callback(enosys()); },\n\t\t\tclose(fd, callback) { callback(enosys()); },\n\t\t\tfchmod(fd, mode, callback) { callback(enosys()); },\n\t\t\tfchown(fd, uid, gid, callback) { callback(enosys()); },\n\t\t\tfstat(fd, callback) { callback(enosys()); },\n\t\t\tfsync(fd, callback) { callback(null); },\n\t\t\tftruncate(fd, length, callback) { callback(enosys()); },\n\t\t\tlchown(path, uid, gid, callback) { callback(enosys()); },\n\t\t\tlink(path, link, callback) { callback(enosys()); },\n\t\t\tlstat(path, callback) { callback(enosys()); },\n\t\t\tmkdir(path, perm, callback) { callback(enosys()); },\n\t\t\topen(path, flags, mode, callback) { callback(enosys()); },\n\t\t\tread(fd, buffer, offset, length, position, callback) { callback(enosys()); },\n\t\t\treaddir(path, callback) { callback(enosys()); },\n\t\t\treadlink(path, callback) { callback(enosys()); },\n\t\t\trename(from, to, callback) { callback(enosys()); },\n\t\t\trmdir(path, callback) { callback(enosys()); },\n\t\t\tstat(path, callback) { callback(enosys()); },\n\t\t\tsymlink(path, link, callback) { callback(enosys()); },\n\t\t\ttruncate(path, length, callback) { callback(enosys()); },\n\t\t\tunlink(path, callback) { callback(enosys()); },\n\t\t\tutimes(path, atime, mtime, callback) { callback(enosys()); },\n\t\t};\n\t}\n\n\tif (!globalThis.process) {\n\t\tglobalThis.process = {\n\t\t\tgetuid() { return -1; },\n\t\t\tgetgid() { return -1; },\n\t\t\tgeteuid() { return -1; },\n\t\t\tgetegid() { return -1; },\n\t\t\tgetgroups() { throw enosys(); },\n\t\t\tpid: -1,\n\t\t\tppid: -1,\n\t\t\tumask() { throw enosys(); },\n\t\t\tcwd() { throw enosys(); },\n\t\t\tchdir() { throw enosys(); },\n\t\t}\n\t}\n\n\tif (!globalThis.crypto) {\n\t\tthrow new Error(\"globalThis.crypto is not available, polyfill required (crypto.getRandomValues only)\");\n\t}\n\n\tif (!globalThis.performance) {\n\t\tthrow new Error(\"globalThis.performance is not available, polyfill required (performance.now only)\");\n\t}\n\n\tif (!globalThis.TextEncoder) {\n\t\tthrow new Error(\"globalThis.TextEncoder is not available, polyfill required\");\n\t}\n\n\tif (!globalThis.TextDecoder) {\n\t\tthrow new Error(\"globalThis.TextDecoder is not available, polyfill required\");\n\t}\n\n\tconst encoder = new TextEncoder(\"utf-8\");\n\tconst decoder = new TextDecoder(\"utf-8\");\n\n\tglobalThis.Go = class {\n\t\tconstructor() {\n\t\t\tthis.argv = [\"js\"];\n\t\t\tthis.env = {};\n\t\t\tthis.exit = (code) => {\n\t\t\t\tif (code !== 0) {\n\t\t\t\t\tconsole.warn(\"exit code:\", code);\n\t\t\t\t}\n\t\t\t};\n\t\t\tthis._exitPromise = new Promise((resolve) => {\n\t\t\t\tthis._resolveExitPromise = resolve;\n\t\t\t});\n\t\t\tthis._pendingEvent = null;\n\t\t\tthis._scheduledTimeouts = new Map();\n\t\t\tthis._nextCallbackTimeoutID = 1;\n\n\t\t\tconst setInt64 = (addr, v) => {\n\t\t\t\tthis.mem.setUint32(addr + 0, v, true);\n\t\t\t\tthis.mem.setUint32(addr + 4, Math.floor(v / 4294967296), true);\n\t\t\t}\n\n\t\t\tconst setInt32 = (addr, v) => {\n\t\t\t\tthis.mem.setUint32(addr + 0, v, true);\n\t\t\t}\n\n\t\t\tconst getInt64 = (addr) => {\n\t\t\t\tconst low = this.mem.getUint32(addr + 0, true);\n\t\t\t\tconst high = this.mem.getInt32(addr + 4, true);\n\t\t\t\treturn low + high * 4294967296;\n\t\t\t}\n\n\t\t\tconst loadValue = (addr) => {\n\t\t\t\tconst f = this.mem.getFloat64(addr, true);\n\t\t\t\tif (f === 0) {\n\t\t\t\t\treturn undefined;\n\t\t\t\t}\n\t\t\t\tif (!isNaN(f)) {\n\t\t\t\t\treturn f;\n\t\t\t\t}\n\n\t\t\t\tconst id = this.mem.getUint32(addr, true);\n\t\t\t\treturn this._values[id];\n\t\t\t}\n\n\t\t\tconst storeValue = (addr, v) => {\n\t\t\t\tconst nanHead = 0x7FF80000;\n\n\t\t\t\tif (typeof v === \"number\" && v !== 0) {\n\t\t\t\t\tif (isNaN(v)) {\n\t\t\t\t\t\tthis.mem.setUint32(addr + 4, nanHead, true);\n\t\t\t\t\t\tthis.mem.setUint32(addr, 0, true);\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t\tthis.mem.setFloat64(addr, v, true);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tif (v === undefined) {\n\t\t\t\t\tthis.mem.setFloat64(addr, 0, true);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tlet id = this._ids.get(v);\n\t\t\t\tif (id === undefined) {\n\t\t\t\t\tid = this._idPool.pop();\n\t\t\t\t\tif (id === undefined) {\n\t\t\t\t\t\tid = this._values.length;\n\t\t\t\t\t}\n\t\t\t\t\tthis._values[id] = v;\n\t\t\t\t\tthis._goRefCounts[id] = 0;\n\t\t\t\t\tthis._ids.set(v, id);\n\t\t\t\t}\n\t\t\t\tthis._goRefCounts[id]++;\n\t\t\t\tlet typeFlag = 0;\n\t\t\t\tswitch (typeof v) {\n\t\t\t\t\tcase \"object\":\n\t\t\t\t\t\tif (v !== null) {\n\t\t\t\t\t\t\ttypeFlag = 1;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase \"string\":\n\t\t\t\t\t\ttypeFlag = 2;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase \"symbol\":\n\t\t\t\t\t\ttypeFlag = 3;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase \"function\":\n\t\t\t\t\t\ttypeFlag = 4;\n\t\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tthis.mem.setUint32(addr + 4, nanHead | typeFlag, true);\n\t\t\t\tthis.mem.setUint32(addr, id, true);\n\t\t\t}\n\n\t\t\tconst loadSlice = (addr) => {\n\t\t\t\tconst array = getInt64(addr + 0);\n\t\t\t\tconst len = getInt64(addr + 8);\n\t\t\t\treturn new Uint8Array(this._inst.exports.mem.buffer, array, len);\n\t\t\t}\n\n\t\t\tconst loadSliceOfValues = (addr) => {\n\t\t\t\tconst array = getInt64(addr + 0);\n\t\t\t\tconst len = getInt64(addr + 8);\n\t\t\t\tconst a = new Array(len);\n\t\t\t\tfor (let i = 0; i < len; i++) {\n\t\t\t\t\ta[i] = loadValue(array + i * 8);\n\t\t\t\t}\n\t\t\t\treturn a;\n\t\t\t}\n\n\t\t\tconst loadString = (addr) => {\n\t\t\t\tconst saddr = getInt64(addr + 0);\n\t\t\t\tconst len = getInt64(addr + 8);\n\t\t\t\treturn decoder.decode(new DataView(this._inst.exports.mem.buffer, saddr, len));\n\t\t\t}\n\n\t\t\tconst timeOrigin = Date.now() - performance.now();\n\t\t\tthis.importObject = {\n\t\t\t\t_gotest: {\n\t\t\t\t\tadd: (a, b) => a + b,\n\t\t\t\t},\n\t\t\t\tgojs: {\n\t\t\t\t\t// Go's SP does not change as long as no Go code is running. Some operations (e.g. calls, getters and setters)\n\t\t\t\t\t// may synchronously trigger a Go event handler. This makes Go code get executed in the middle of the imported\n\t\t\t\t\t// function. A goroutine can switch to a new stack if the current stack is too small (see morestack function).\n\t\t\t\t\t// This changes the SP, thus we have to update the SP used by the imported function.\n\n\t\t\t\t\t// func wasmExit(code int32)\n\t\t\t\t\t\"runtime.wasmExit\": (sp) => {\n\t\t\t\t\t\tsp >>>= 0;\n\t\t\t\t\t\tconst code = this.mem.getInt32(sp + 8, true);\n\t\t\t\t\t\tthis.exited = true;\n\t\t\t\t\t\tdelete this._inst;\n\t\t\t\t\t\tdelete this._values;\n\t\t\t\t\t\tdelete this._goRefCounts;\n\t\t\t\t\t\tdelete this._ids;\n\t\t\t\t\t\tdelete this._idPool;\n\t\t\t\t\t\tthis.exit(code);\n\t\t\t\t\t},\n\n\t\t\t\t\t// func wasmWrite(fd uintptr, p unsafe.Pointer, n int32)\n\t\t\t\t\t\"runtime.wasmWrite\": (sp) => {\n\t\t\t\t\t\tsp >>>= 0;\n\t\t\t\t\t\tconst fd = getInt64(sp + 8);\n\t\t\t\t\t\tconst p = getInt64(sp + 16);\n\t\t\t\t\t\tconst n = this.mem.getInt32(sp + 24, true);\n\t\t\t\t\t\tfs.writeSync(fd, new Uint8Array(this._inst.exports.mem.buffer, p, n));\n\t\t\t\t\t},\n\n\t\t\t\t\t// func resetMemoryDataView()\n\t\t\t\t\t\"runtime.resetMemoryDataView\": (sp) => {\n\t\t\t\t\t\tsp >>>= 0;\n\t\t\t\t\t\tthis.mem = new DataView(this._inst.exports.mem.buffer);\n\t\t\t\t\t},\n\n\t\t\t\t\t// func nanotime1() int64\n\t\t\t\t\t\"runtime.nanotime1\": (sp) => {\n\t\t\t\t\t\tsp >>>= 0;\n\t\t\t\t\t\tsetInt64(sp + 8, (timeOrigin + performance.now()) * 1000000);\n\t\t\t\t\t},\n\n\t\t\t\t\t// func walltime() (sec int64, nsec int32)\n\t\t\t\t\t\"runtime.walltime\": (sp) => {\n\t\t\t\t\t\tsp >>>= 0;\n\t\t\t\t\t\tconst msec = (new Date).getTime();\n\t\t\t\t\t\tsetInt64(sp + 8, msec / 1000);\n\t\t\t\t\t\tthis.mem.setInt32(sp + 16, (msec % 1000) * 1000000, true);\n\t\t\t\t\t},\n\n\t\t\t\t\t// func scheduleTimeoutEvent(delay int64) int32\n\t\t\t\t\t\"runtime.scheduleTimeoutEvent\": (sp) => {\n\t\t\t\t\t\tsp >>>= 0;\n\t\t\t\t\t\tconst id = this._nextCallbackTimeoutID;\n\t\t\t\t\t\tthis._nextCallbackTimeoutID++;\n\t\t\t\t\t\tthis._scheduledTimeouts.set(id, setTimeout(\n\t\t\t\t\t\t\t() => {\n\t\t\t\t\t\t\t\tthis._resume();\n\t\t\t\t\t\t\t\twhile (this._scheduledTimeouts.has(id)) {\n\t\t\t\t\t\t\t\t\t// for some reason Go failed to register the timeout event, log and try again\n\t\t\t\t\t\t\t\t\t// (temporary workaround for https://github.com/golang/go/issues/28975)\n\t\t\t\t\t\t\t\t\tconsole.warn(\"scheduleTimeoutEvent: missed timeout event\");\n\t\t\t\t\t\t\t\t\tthis._resume();\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\tgetInt64(sp + 8),\n\t\t\t\t\t\t));\n\t\t\t\t\t\tthis.mem.setInt32(sp + 16, id, true);\n\t\t\t\t\t},\n\n\t\t\t\t\t// func clearTimeoutEvent(id int32)\n\t\t\t\t\t\"runtime.clearTimeoutEvent\": (sp) => {\n\t\t\t\t\t\tsp >>>= 0;\n\t\t\t\t\t\tconst id = this.mem.getInt32(sp + 8, true);\n\t\t\t\t\t\tclearTimeout(this._scheduledTimeouts.get(id));\n\t\t\t\t\t\tthis._scheduledTimeouts.delete(id);\n\t\t\t\t\t},\n\n\t\t\t\t\t// func getRandomData(r []byte)\n\t\t\t\t\t\"runtime.getRandomData\": (sp) => {\n\t\t\t\t\t\tsp >>>= 0;\n\t\t\t\t\t\tcrypto.getRandomValues(loadSlice(sp + 8));\n\t\t\t\t\t},\n\n\t\t\t\t\t// func finalizeRef(v ref)\n\t\t\t\t\t\"syscall/js.finalizeRef\": (sp) => {\n\t\t\t\t\t\tsp >>>= 0;\n\t\t\t\t\t\tconst id = this.mem.getUint32(sp + 8, true);\n\t\t\t\t\t\tthis._goRefCounts[id]--;\n\t\t\t\t\t\tif (this._goRefCounts[id] === 0) {\n\t\t\t\t\t\t\tconst v = this._values[id];\n\t\t\t\t\t\t\tthis._values[id] = null;\n\t\t\t\t\t\t\tthis._ids.delete(v);\n\t\t\t\t\t\t\tthis._idPool.push(id);\n\t\t\t\t\t\t}\n\t\t\t\t\t},\n\n\t\t\t\t\t// func stringVal(value string) ref\n\t\t\t\t\t\"syscall/js.stringVal\": (sp) => {\n\t\t\t\t\t\tsp >>>= 0;\n\t\t\t\t\t\tstoreValue(sp + 24, loadString(sp + 8));\n\t\t\t\t\t},\n\n\t\t\t\t\t// func valueGet(v ref, p string) ref\n\t\t\t\t\t\"syscall/js.valueGet\": (sp) => {\n\t\t\t\t\t\tsp >>>= 0;\n\t\t\t\t\t\tconst result = Reflect.get(loadValue(sp + 8), loadString(sp + 16));\n\t\t\t\t\t\tsp = this._inst.exports.getsp() >>> 0; // see comment above\n\t\t\t\t\t\tstoreValue(sp + 32, result);\n\t\t\t\t\t},\n\n\t\t\t\t\t// func valueSet(v ref, p string, x ref)\n\t\t\t\t\t\"syscall/js.valueSet\": (sp) => {\n\t\t\t\t\t\tsp >>>= 0;\n\t\t\t\t\t\tReflect.set(loadValue(sp + 8), loadString(sp + 16), loadValue(sp + 32));\n\t\t\t\t\t},\n\n\t\t\t\t\t// func valueDelete(v ref, p string)\n\t\t\t\t\t\"syscall/js.valueDelete\": (sp) => {\n\t\t\t\t\t\tsp >>>= 0;\n\t\t\t\t\t\tReflect.deleteProperty(loadValue(sp + 8), loadString(sp + 16));\n\t\t\t\t\t},\n\n\t\t\t\t\t// func valueIndex(v ref, i int) ref\n\t\t\t\t\t\"syscall/js.valueIndex\": (sp) => {\n\t\t\t\t\t\tsp >>>= 0;\n\t\t\t\t\t\tstoreValue(sp + 24, Reflect.get(loadValue(sp + 8), getInt64(sp + 16)));\n\t\t\t\t\t},\n\n\t\t\t\t\t// valueSetIndex(v ref, i int, x ref)\n\t\t\t\t\t\"syscall/js.valueSetIndex\": (sp) => {\n\t\t\t\t\t\tsp >>>= 0;\n\t\t\t\t\t\tReflect.set(loadValue(sp + 8), getInt64(sp + 16), loadValue(sp + 24));\n\t\t\t\t\t},\n\n\t\t\t\t\t// func valueCall(v ref, m string, args []ref) (ref, bool)\n\t\t\t\t\t\"syscall/js.valueCall\": (sp) => {\n\t\t\t\t\t\tsp >>>= 0;\n\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\tconst v = loadValue(sp + 8);\n\t\t\t\t\t\t\tconst m = Reflect.get(v, loadString(sp + 16));\n\t\t\t\t\t\t\tconst args = loadSliceOfValues(sp + 32);\n\t\t\t\t\t\t\tconst result = Reflect.apply(m, v, args);\n\t\t\t\t\t\t\tsp = this._inst.exports.getsp() >>> 0; // see comment above\n\t\t\t\t\t\t\tstoreValue(sp + 56, result);\n\t\t\t\t\t\t\tthis.mem.setUint8(sp + 64, 1);\n\t\t\t\t\t\t} catch (err) {\n\t\t\t\t\t\t\tsp = this._inst.exports.getsp() >>> 0; // see comment above\n\t\t\t\t\t\t\tstoreValue(sp + 56, err);\n\t\t\t\t\t\t\tthis.mem.setUint8(sp + 64, 0);\n\t\t\t\t\t\t}\n\t\t\t\t\t},\n\n\t\t\t\t\t// func valueInvoke(v ref, args []ref) (ref, bool)\n\t\t\t\t\t\"syscall/js.valueInvoke\": (sp) => {\n\t\t\t\t\t\tsp >>>= 0;\n\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\tconst v = loadValue(sp + 8);\n\t\t\t\t\t\t\tconst args = loadSliceOfValues(sp + 16);\n\t\t\t\t\t\t\tconst result = Reflect.apply(v, undefined, args);\n\t\t\t\t\t\t\tsp = this._inst.exports.getsp() >>> 0; // see comment above\n\t\t\t\t\t\t\tstoreValue(sp + 40, result);\n\t\t\t\t\t\t\tthis.mem.setUint8(sp + 48, 1);\n\t\t\t\t\t\t} catch (err) {\n\t\t\t\t\t\t\tsp = this._inst.exports.getsp() >>> 0; // see comment above\n\t\t\t\t\t\t\tstoreValue(sp + 40, err);\n\t\t\t\t\t\t\tthis.mem.setUint8(sp + 48, 0);\n\t\t\t\t\t\t}\n\t\t\t\t\t},\n\n\t\t\t\t\t// func valueNew(v ref, args []ref) (ref, bool)\n\t\t\t\t\t\"syscall/js.valueNew\": (sp) => {\n\t\t\t\t\t\tsp >>>= 0;\n\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\tconst v = loadValue(sp + 8);\n\t\t\t\t\t\t\tconst args = loadSliceOfValues(sp + 16);\n\t\t\t\t\t\t\tconst result = Reflect.construct(v, args);\n\t\t\t\t\t\t\tsp = this._inst.exports.getsp() >>> 0; // see comment above\n\t\t\t\t\t\t\tstoreValue(sp + 40, result);\n\t\t\t\t\t\t\tthis.mem.setUint8(sp + 48, 1);\n\t\t\t\t\t\t} catch (err) {\n\t\t\t\t\t\t\tsp = this._inst.exports.getsp() >>> 0; // see comment above\n\t\t\t\t\t\t\tstoreValue(sp + 40, err);\n\t\t\t\t\t\t\tthis.mem.setUint8(sp + 48, 0);\n\t\t\t\t\t\t}\n\t\t\t\t\t},\n\n\t\t\t\t\t// func valueLength(v ref) int\n\t\t\t\t\t\"syscall/js.valueLength\": (sp) => {\n\t\t\t\t\t\tsp >>>= 0;\n\t\t\t\t\t\tsetInt64(sp + 16, parseInt(loadValue(sp + 8).length));\n\t\t\t\t\t},\n\n\t\t\t\t\t// valuePrepareString(v ref) (ref, int)\n\t\t\t\t\t\"syscall/js.valuePrepareString\": (sp) => {\n\t\t\t\t\t\tsp >>>= 0;\n\t\t\t\t\t\tconst str = encoder.encode(String(loadValue(sp + 8)));\n\t\t\t\t\t\tstoreValue(sp + 16, str);\n\t\t\t\t\t\tsetInt64(sp + 24, str.length);\n\t\t\t\t\t},\n\n\t\t\t\t\t// valueLoadString(v ref, b []byte)\n\t\t\t\t\t\"syscall/js.valueLoadString\": (sp) => {\n\t\t\t\t\t\tsp >>>= 0;\n\t\t\t\t\t\tconst str = loadValue(sp + 8);\n\t\t\t\t\t\tloadSlice(sp + 16).set(str);\n\t\t\t\t\t},\n\n\t\t\t\t\t// func valueInstanceOf(v ref, t ref) bool\n\t\t\t\t\t\"syscall/js.valueInstanceOf\": (sp) => {\n\t\t\t\t\t\tsp >>>= 0;\n\t\t\t\t\t\tthis.mem.setUint8(sp + 24, (loadValue(sp + 8) instanceof loadValue(sp + 16)) ? 1 : 0);\n\t\t\t\t\t},\n\n\t\t\t\t\t// func copyBytesToGo(dst []byte, src ref) (int, bool)\n\t\t\t\t\t\"syscall/js.copyBytesToGo\": (sp) => {\n\t\t\t\t\t\tsp >>>= 0;\n\t\t\t\t\t\tconst dst = loadSlice(sp + 8);\n\t\t\t\t\t\tconst src = loadValue(sp + 32);\n\t\t\t\t\t\tif (!(src instanceof Uint8Array || src instanceof Uint8ClampedArray)) {\n\t\t\t\t\t\t\tthis.mem.setUint8(sp + 48, 0);\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tconst toCopy = src.subarray(0, dst.length);\n\t\t\t\t\t\tdst.set(toCopy);\n\t\t\t\t\t\tsetInt64(sp + 40, toCopy.length);\n\t\t\t\t\t\tthis.mem.setUint8(sp + 48, 1);\n\t\t\t\t\t},\n\n\t\t\t\t\t// func copyBytesToJS(dst ref, src []byte) (int, bool)\n\t\t\t\t\t\"syscall/js.copyBytesToJS\": (sp) => {\n\t\t\t\t\t\tsp >>>= 0;\n\t\t\t\t\t\tconst dst = loadValue(sp + 8);\n\t\t\t\t\t\tconst src = loadSlice(sp + 16);\n\t\t\t\t\t\tif (!(dst instanceof Uint8Array || dst instanceof Uint8ClampedArray)) {\n\t\t\t\t\t\t\tthis.mem.setUint8(sp + 48, 0);\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tconst toCopy = src.subarray(0, dst.length);\n\t\t\t\t\t\tdst.set(toCopy);\n\t\t\t\t\t\tsetInt64(sp + 40, toCopy.length);\n\t\t\t\t\t\tthis.mem.setUint8(sp + 48, 1);\n\t\t\t\t\t},\n\n\t\t\t\t\t\"debug\": (value) => {\n\t\t\t\t\t\tconsole.log(value);\n\t\t\t\t\t},\n\t\t\t\t}\n\t\t\t};\n\t\t}\n\n\t\tasync run(instance) {\n\t\t\tif (!(instance instanceof WebAssembly.Instance)) {\n\t\t\t\tthrow new Error(\"Go.run: WebAssembly.Instance expected\");\n\t\t\t}\n\t\t\tthis._inst = instance;\n\t\t\tthis.mem = new DataView(this._inst.exports.mem.buffer);\n\t\t\tthis._values = [ // JS values that Go currently has references to, indexed by reference id\n\t\t\t\tNaN,\n\t\t\t\t0,\n\t\t\t\tnull,\n\t\t\t\ttrue,\n\t\t\t\tfalse,\n\t\t\t\tglobalThis,\n\t\t\t\tthis,\n\t\t\t];\n\t\t\tthis._goRefCounts = new Array(this._values.length).fill(Infinity); // number of references that Go has to a JS value, indexed by reference id\n\t\t\tthis._ids = new Map([ // mapping from JS values to reference ids\n\t\t\t\t[0, 1],\n\t\t\t\t[null, 2],\n\t\t\t\t[true, 3],\n\t\t\t\t[false, 4],\n\t\t\t\t[globalThis, 5],\n\t\t\t\t[this, 6],\n\t\t\t]);\n\t\t\tthis._idPool = [];   // unused ids that have been garbage collected\n\t\t\tthis.exited = false; // whether the Go program has exited\n\n\t\t\t// Pass command line arguments and environment variables to WebAssembly by writing them to the linear memory.\n\t\t\tlet offset = 4096;\n\n\t\t\tconst strPtr = (str) => {\n\t\t\t\tconst ptr = offset;\n\t\t\t\tconst bytes = encoder.encode(str + \"\\0\");\n\t\t\t\tnew Uint8Array(this.mem.buffer, offset, bytes.length).set(bytes);\n\t\t\t\toffset += bytes.length;\n\t\t\t\tif (offset % 8 !== 0) {\n\t\t\t\t\toffset += 8 - (offset % 8);\n\t\t\t\t}\n\t\t\t\treturn ptr;\n\t\t\t};\n\n\t\t\tconst argc = this.argv.length;\n\n\t\t\tconst argvPtrs = [];\n\t\t\tthis.argv.forEach((arg) => {\n\t\t\t\targvPtrs.push(strPtr(arg));\n\t\t\t});\n\t\t\targvPtrs.push(0);\n\n\t\t\tconst keys = Object.keys(this.env).sort();\n\t\t\tkeys.forEach((key) => {\n\t\t\t\targvPtrs.push(strPtr(`${key}=${this.env[key]}`));\n\t\t\t});\n\t\t\targvPtrs.push(0);\n\n\t\t\tconst argv = offset;\n\t\t\targvPtrs.forEach((ptr) => {\n\t\t\t\tthis.mem.setUint32(offset, ptr, true);\n\t\t\t\tthis.mem.setUint32(offset + 4, 0, true);\n\t\t\t\toffset += 8;\n\t\t\t});\n\n\t\t\t// The linker guarantees global data starts from at least wasmMinDataAddr.\n\t\t\t// Keep in sync with cmd/link/internal/ld/data.go:wasmMinDataAddr.\n\t\t\tconst wasmMinDataAddr = 4096 + 8192;\n\t\t\tif (offset >= wasmMinDataAddr) {\n\t\t\t\tthrow new Error(\"total length of command line and environment variables exceeds limit\");\n\t\t\t}\n\n\t\t\tthis._inst.exports.run(argc, argv);\n\t\t\tif (this.exited) {\n\t\t\t\tthis._resolveExitPromise();\n\t\t\t}\n\t\t\tawait this._exitPromise;\n\t\t}\n\n\t\t_resume() {\n\t\t\tif (this.exited) {\n\t\t\t\tthrow new Error(\"Go program has already exited\");\n\t\t\t}\n\t\t\tthis._inst.exports.resume();\n\t\t\tif (this.exited) {\n\t\t\t\tthis._resolveExitPromise();\n\t\t\t}\n\t\t}\n\n\t\t_makeFuncWrapper(id) {\n\t\t\tconst go = this;\n\t\t\treturn function () {\n\t\t\t\tconst event = { id: id, this: this, args: arguments };\n\t\t\t\tgo._pendingEvent = event;\n\t\t\t\tgo._resume();\n\t\t\t\treturn event.result;\n\t\t\t};\n\t\t}\n\t}\n})();\n", "export const whitespaceChars = new Set(\n  [\n    '\\n',\n    '\\t',\n    '\\r',\n    '\\f',\n    '\\v',\n    '\\u00a0',\n    '\\u1680',\n    '\\u2000',\n    '\\u200a',\n    '\\u2028',\n    '\\u2029',\n    '\\u202f',\n    '\\u205f',\n    '\\u3000',\n    '\\ufeff',\n  ].map((s) => s.charCodeAt(0)),\n)\n\nexport const pad = (str: string, count: number, isLeft = false, char = ' ') => {\n  if (str.length >= count) {\n    return str\n  }\n\n  const padding = char.repeat(count - str.length)\n  return isLeft ? padding + str : str + padding\n}\n\nexport const padRight = (str: string, count: number, char = ' ') => pad(str, count, false, char)\n\nexport const padLeft = (str: string, count: number, char = ' ') => pad(str, count, true, char)\n", "export const toHex = (v: number) => v.toString(16)\nexport const fromHex = (v: string) => parseInt(v, 16)\n\n/**\n * Formats number to hex or parses number from hex string.\n * @param v\n */\nexport const hex = (v: number | bigint | string) => {\n  switch (typeof v) {\n    case 'number':\n      return toHex(v)\n    case 'bigint':\n      return toHex(Number(v))\n    case 'string':\n      return fromHex(v)\n    default:\n      throw new Error(`hex: invalid argument type ${typeof v}`)\n  }\n}\n\nexport interface DebugOptions {\n  debug?: boolean\n}\n\nexport const instantiateStreaming = async (resp: Response | PromiseLike<Response>, importObject) => {\n  const r: Response = resp instanceof Promise ? await resp : resp\n  if (r.status !== 200) {\n    throw new Error(\n      'Cannot instantiate WebAssembly streaming, invalid HTTP response: ' +\n        `'${r.status} ${r.statusText}' (URL: ${r.url})`,\n    )\n  }\n\n  if ('instantiateStreaming' in WebAssembly) {\n    return await WebAssembly.instantiateStreaming(r, importObject)\n  }\n\n  const source = await r.arrayBuffer()\n  return await WebAssembly.instantiate(source, importObject)\n}\n", "/**\n * Aligns memory address using provided alignment\n *\n * @param addr Address\n * @param alignment Alignment\n */\nexport const alignAddr = (addr: number, alignment: number) => {\n  // Calculate the offset required to align the address\n  const offset = alignment - (addr % alignment)\n\n  // Add the offset to the address to align it\n  return addr + offset\n}\n", "import {alignAddr} from \"./common\";\n\nexport interface WriteResult {\n  address: number\n  endOffset: number\n}\n\nexport interface ReadResult<T = any> extends WriteResult {\n  value: T\n}\n\nexport interface TypeDescriptor {\n  size: number\n  alignment: number\n  padding: number\n}\n\n/**\n * Base class for type read and write implementation.\n *\n * @abstract\n */\nexport abstract class AbstractTypeSpec<T = any> {\n  private _size = 0\n  private _align = 1\n  private _skip = 0\n  private readonly _name: string = ''\n\n  /**\n   * @param name Original type name.\n   * @param size Type size.\n   * @param align Type alignment.\n   * @param skip Number of bytes to skip.\n   */\n  protected constructor(name: string, size: number, align = 1, skip = 0) {\n    this._size = size\n    this._align = align\n    this._skip = skip\n    this._name = name\n  }\n\n  protected setTypeDescriptor({ size, alignment, padding }: TypeDescriptor) {\n    this._size = size\n    this._align = alignment\n    this._skip = padding\n  }\n\n  /**\n   * Number of bytes reserved after value contents.\n   * @returns {number}\n   */\n  get padding() {\n    return this._skip\n  }\n\n  /**\n   * Returns value type size.\n   * @returns {number}\n   */\n  get size() {\n    return this._size\n  }\n\n  /**\n   * @type {string}\n   */\n  get name() {\n    return this._name\n  }\n\n  /**\n   * Returns type alignment\n   * @returns {number}\n   */\n  get alignment() {\n    return this._align\n  }\n\n  /**\n   * Align pointer address\n   * @param addr\n   * @returns Aligned address\n   */\n  alignAddress(addr: number): number {\n    if (addr % this._align === 0) {\n      // Address is aligned\n      return addr\n    }\n\n    return alignAddr(addr, this._align)\n  }\n\n  /**\n   * Decodes a value from DataView at passed address and returns a value.\n   * Passed address should be aligned.\n   *\n   * Please consider `read()` for general-purpose use.\n   *\n   * @abstract\n   * @param view Memory view\n   * @param addr Address\n   * @returns {*}\n   */\n  decode(view: DataView, addr: number): T {\n    throw new Error(`${this.constructor.name}.decode: not implemented`)\n  }\n\n  /**\n   * Encodes and puts value to DataView at passed address.\n   * Passed address should be aligned.\n   *\n   * Please consider `write()` for general-purpose use.\n   *\n   * @abstract\n   * @param view Memory view\n   * @param addr Address\n   * @param {*} val\n   */\n  encode(view: DataView, addr: number, val: T) {\n    throw new Error(`${this.constructor.name}.encode: not implemented`)\n  }\n\n  /**\n   * Reads value at specified offset in memory and returns\n   * a value with end offset address.\n   *\n   * Passed offset address will be aligned before read.\n   *\n   * @param view Memory\n   * @param addr Stack pointer\n   * @param buff Original memory buffer\n   * @returns {ReadResult}\n   */\n  read(view: DataView, addr: number, buff: ArrayBufferLike): ReadResult<T> {\n    const address = this.alignAddress(addr)\n    const value = this.decode(view, address)\n    return {\n      value,\n      address,\n      endOffset: address + this.size + this.padding,\n    }\n  }\n\n  /**\n   * Encodes and writes a value to DataView at specifying address.\n   * Passed address will be aligned before write.\n   *\n   * @param view\n   * @param addr\n   * @param val\n   * @param buff Original memory buffer\n   * @returns {WriteResult}\n   */\n  write(view: DataView, addr: number, val: T, buff: ArrayBufferLike): WriteResult {\n    const address = this.alignAddress(addr)\n    this.encode(view, address, val)\n    return {\n      address,\n      endOffset: address + this.size + this.padding,\n    }\n  }\n}\n", "import {AbstractTypeSpec} from \"../spec\";\n\nexport class BooleanTypeSpec extends AbstractTypeSpec {\n  constructor() {\n    super('bool', 1, 1, 0)\n  }\n\n  decode(view, addr) {\n    const val = view.getUint8(addr)\n    return !!val\n  }\n\n  encode(view, addr, data) {\n    view.setUint8(addr, +data)\n  }\n}\n", "import {AbstractTypeSpec} from \"../spec\";\n\nconst MAX_INT32 = 4294967296\n\nexport class UInt64TypeSpec extends AbstractTypeSpec<boolean> {\n  constructor(name) {\n    super(name, 8, 8, 0)\n  }\n\n  decode(view, addr) {\n    const low = view.getUint32(addr, true)\n    const high = view.getInt32(addr + 4, true)\n\n    return low + high * MAX_INT32\n  }\n\n  encode(view, addr, val) {\n    view.setUint32(addr, val, true)\n    view.setUint32(addr + 4, Math.floor(val / MAX_INT32), true)\n  }\n}\n\nexport class Int64TypeSpec extends AbstractTypeSpec<number> {\n  constructor(name) {\n    super(name, 8, 8, 0)\n  }\n\n  decode(view, addr) {\n    const low = view.getUint32(addr, true)\n    const high = view.getInt32(addr + 4, true)\n\n    return low + high * MAX_INT32\n  }\n\n  encode(view, addr, val) {\n    view.setUint32(addr, val, true)\n    view.setUint32(addr + 4, Math.floor(val / MAX_INT32), true)\n  }\n}\n", "import {AbstractTypeSpec} from \"../spec\";\n\ninterface DataViewReader<T = number> {\n  call: (thisArg: DataView, address: number, leftEndian?: boolean) => T\n}\n\ninterface DataViewWriter<T = number> {\n  call: (thisArg: DataView, address: number, value: T, leftEndian?: boolean) => T\n}\n\nexport interface DataViewDescriptor<T = number> {\n  read: DataViewReader<T>\n  write: DataViewWriter<T>\n}\n\n/**\n * DataViewableTypeSpec is a type wrapper for numeric values that can be read\n * using raw DataView methods.\n */\nexport class DataViewableTypeSpec<T = number | bigint> extends AbstractTypeSpec<T> {\n  _readMethod: DataViewReader<T>\n  _writeMethod: DataViewWriter<T>\n\n  constructor(name, size: number, align: number, skip: number, rwObj: DataViewDescriptor<T>) {\n    super(name, size, align, skip)\n    this._readMethod = rwObj.read\n    this._writeMethod = rwObj.write\n  }\n\n  decode(view, addr): T {\n    return this._readMethod.call(view, addr, true)\n  }\n\n  encode(view, addr, data) {\n    this._writeMethod.call(view, addr, data, true)\n  }\n}\n", "\n// Common type aliases\nimport {BooleanTypeSpec} from \"./boolean\";\nimport {Int64TypeSpec, UInt64TypeSpec} from \"./uint64\";\nimport {DataViewableTypeSpec} from \"./dataview\";\n\nexport const Bool = new BooleanTypeSpec()\n// FIXME: fix UInt spec definitions\nexport const Int = new UInt64TypeSpec('int')\nexport const Int64 = new Int64TypeSpec('int64')\nexport const Uint = new UInt64TypeSpec('uint')\nexport const UintPtr = new UInt64TypeSpec('uintptr')\nexport const Byte = new DataViewableTypeSpec('byte', 1, 1, 0, {\n  // eslint-disable-next-line @typescript-eslint/unbound-method\n  read: DataView.prototype.getUint8,\n  // eslint-disable-next-line @typescript-eslint/unbound-method\n  write: DataView.prototype.setUint8,\n})\n\n// Go stores int8 with padding because minimal supported data type by assembly is uint32.\nexport const Uint8 = new DataViewableTypeSpec('uint8', 1, 1, 0, {\n  // eslint-disable-next-line @typescript-eslint/unbound-method\n  read: DataView.prototype.getUint8,\n  // eslint-disable-next-line @typescript-eslint/unbound-method\n  write: DataView.prototype.setUint8,\n})\n\nexport const Int8 = new DataViewableTypeSpec('int8', 1, 1, 3, {\n  // eslint-disable-next-line @typescript-eslint/unbound-method\n  read: DataView.prototype.getInt8,\n  // eslint-disable-next-line @typescript-eslint/unbound-method\n  write: DataView.prototype.setInt8,\n})\n\nexport const Uint32 = new DataViewableTypeSpec('uint32', 4, 4, 0, {\n  // eslint-disable-next-line @typescript-eslint/unbound-method\n  read: DataView.prototype.getUint32,\n  // eslint-disable-next-line @typescript-eslint/unbound-method\n  write: DataView.prototype.setUint32,\n})\n\nexport const Int32 = new DataViewableTypeSpec('int32', 4, 4, 0, {\n  // eslint-disable-next-line @typescript-eslint/unbound-method\n  read: DataView.prototype.getInt32,\n  // eslint-disable-next-line @typescript-eslint/unbound-method\n  write: DataView.prototype.setInt32,\n})\n\n// FIXME: replace BigInt decoding with manual\nexport const Uint64 = new DataViewableTypeSpec('uint64', 8, 8, 0, {\n  // eslint-disable-next-line @typescript-eslint/unbound-method\n  read: DataView.prototype.getBigUint64,\n  // eslint-disable-next-line @typescript-eslint/unbound-method\n  write: DataView.prototype.setBigUint64,\n})\n\nexport const Float32 = new DataViewableTypeSpec('float32', 4, 4, 0, {\n  // eslint-disable-next-line @typescript-eslint/unbound-method\n  read: DataView.prototype.getFloat32,\n  // eslint-disable-next-line @typescript-eslint/unbound-method\n  write: DataView.prototype.setFloat32,\n})\n\nexport const Float64 = new DataViewableTypeSpec('float64', 8, 8, 0, {\n  // eslint-disable-next-line @typescript-eslint/unbound-method\n  read: DataView.prototype.getFloat64,\n  // eslint-disable-next-line @typescript-eslint/unbound-method\n  write: DataView.prototype.setFloat64,\n})\n", "import { AbstractTypeSpec } from '../spec'\n\nexport interface AttributeDescriptor {\n  key: string\n  type: AbstractTypeSpec\n}\n\nexport class StructTypeSpec<T = object> extends AbstractTypeSpec {\n  private readonly _attributes: AttributeDescriptor[]\n  private readonly _firstAttr: AbstractTypeSpec\n\n  /**\n   *\n   * @param name Struct name\n   * @param {AttributeDescriptor[]} attrs attribute descriptors\n   */\n  constructor(name: string, attrs: AttributeDescriptor[]) {\n    super(name, 0, 0, 0)\n\n    if (attrs.length === 0) {\n      throw new ReferenceError(`${this.constructor.name}: missing struct attributes`)\n    }\n\n    const [firstElem] = attrs\n    const totalSize = attrs.map(({ type }) => type.size + type.padding).reduce((total, size) => total + size, 0)\n\n    this.setTypeDescriptor({\n      size: totalSize,\n      alignment: firstElem.type.alignment,\n      padding: 0,\n    })\n\n    this._attributes = attrs\n    this._firstAttr = firstElem.type\n  }\n\n  get alignment() {\n    return this._firstAttr.alignment\n  }\n\n  alignAddress(addr) {\n    return this._firstAttr.alignAddress(addr)\n  }\n\n  read(view, addr, buff: ArrayBufferLike) {\n    const address = this._firstAttr.alignAddress(addr)\n    let offset = address\n\n    const entries: Array<[string, any]> = []\n    for (const attr of this._attributes) {\n      const { key, type } = attr\n      const fieldAddr = type.alignAddress(offset)\n      const { value, endOffset } = type.read(view, fieldAddr, buff)\n      entries.push([key, value])\n      offset = endOffset\n    }\n\n    const structObj = Object.fromEntries(entries) as T\n    return {\n      address,\n      endOffset: offset,\n      value: this.valueFromStruct(buff, structObj),\n    }\n  }\n\n  write(view, addr, val, buff: ArrayBufferLike) {\n    const address = this._firstAttr.alignAddress(addr)\n    let offset = address\n    if (typeof val !== 'object') {\n      throw new ReferenceError(\n        `${this.constructor.name}.write: invalid value passed (${typeof val} ${val}). ` +\n          `Value should be an object with attributes (${this._attributes.map((a) => a.key).join(', ')}) ` +\n          `(struct ${this.name})`,\n      )\n    }\n\n    for (const attr of this._attributes) {\n      const { key, type } = attr\n      if (!(key in val)) {\n        throw new ReferenceError(\n          `${this.constructor.name}.write: missing object property \"${key}\" (struct ${this.name})`,\n        )\n      }\n\n      const fieldAddr = type.alignAddress(offset)\n      const { endOffset } = type.write(view, fieldAddr, val[key], buff)\n      offset = endOffset\n    }\n\n    return {\n      address,\n      endOffset: offset,\n    }\n  }\n\n  /**\n   * Returns an original value from struct.\n   *\n   * This method can be overloaded to return an original value\n   * pointed by an original struct.\n   *\n   * This is useful for obtaining an original slice or string contents\n   * from `reflect.StringHeader` or `reflect.SliceHeader` structs.\n   *\n   * @param buff Raw memory buffer\n   * @param structVal original struct value\n   * @protected\n   */\n  protected valueFromStruct(buff: ArrayBufferLike, structVal: T): any {\n    return structVal\n  }\n\n  encode(view, addr, val) {\n    throw new Error(`${this.constructor.name}.encode: not supported, use write() instead`)\n  }\n\n  decode(view, addr) {\n    throw new Error(`${this.constructor.name}.decode: not supported, use read() instead`)\n  }\n}\n\n/**\n * Constructs a new struct type\n * @param name Struct type name\n * @param fields Array of field definitions\n * @constructor\n */\nexport const Struct = <T = object>(name: string, fields: AttributeDescriptor[]) => new StructTypeSpec<T>(name, fields)\n", "import {AbstractTypeSpec} from \"../spec\";\n\nexport class ArrayTypeSpec extends AbstractTypeSpec {\n  private readonly _elemType: AbstractTypeSpec\n  private readonly _length = 0\n\n  /**\n   * @param {AbstractTypeSpec} elemType Array item type\n   * @param {number} length Array size\n   */\n  constructor(elemType, length) {\n    super(`[${length}]${elemType.name}`, (elemType.size + elemType.padding) * length, elemType.alignment, 0)\n\n    if (length < 0) {\n      throw new Error(`${this.constructor.name}: array item count should be greater than zero`)\n    }\n\n    this._elemType = elemType\n    this._length = length\n  }\n\n  /**\n   * Returns array element type.\n   * @returns {AbstractTypeSpec}\n   */\n  get elemType() {\n    return this._elemType\n  }\n\n  get length() {\n    return this._length\n  }\n\n  get alignment() {\n    return this._elemType.alignment\n  }\n\n  alignAddress(addr) {\n    return this._elemType.alignAddress(addr)\n  }\n\n  read(view, addr, buff) {\n    const address = this._elemType.alignAddress(addr)\n    let offset = address\n    const entries: any[] = []\n\n    for (let i = 0; i < this._length; i++) {\n      const elemAddr = this._elemType.alignAddress(offset)\n      const { value, endOffset } = this._elemType.read(view, elemAddr, buff)\n      entries.push(value)\n      offset = endOffset\n    }\n\n    return {\n      address,\n      endOffset: offset,\n      value: entries,\n    }\n  }\n\n  write(view, addr, val, buff) {\n    if (val.length !== this._length) {\n      throw new Error(`${this.constructor.name}.write: array length should be ${this._length} (got: ${val.length})`)\n    }\n\n    const address = this._elemType.alignAddress(addr)\n    let offset = address\n\n    for (let i = 0; i < this._length; i++) {\n      const itemAddr = this._elemType.alignAddress(offset)\n      const { endOffset } = this._elemType.write(view, itemAddr, val[i], buff)\n      offset = endOffset\n    }\n\n    return {\n      address,\n      endOffset: offset,\n    }\n  }\n\n  encode(view, addr, val) {\n    throw new Error(`${this.constructor.name}.encode: not supported, use write() instead`)\n  }\n\n  decode(view, addr) {\n    throw new Error(`${this.constructor.name}.decode: not supported, use read() instead`)\n  }\n}\n", "import { UintPtr, Int } from '../basic'\nimport { StructTypeSpec } from '../complex'\n\nexport const stringEncoder = new TextEncoder()\nexport const stringDecoder = new TextDecoder('utf-8')\n\nconst stringStructDescriptor = [\n  { key: 'data', type: UintPtr },\n  { key: 'len', type: Int },\n]\n\nexport interface StringHeader {\n  data: number\n  len: number\n}\n\nclass GoStringTypeSpec extends StructTypeSpec<StringHeader> {\n  constructor() {\n    super('string', stringStructDescriptor)\n  }\n\n  protected valueFromStruct(mem: ArrayBufferLike, structVal: StringHeader) {\n    const { data, len } = structVal\n    if (!len) {\n      return ''\n    }\n\n    return stringDecoder.decode(new DataView(mem, data, len))\n  }\n}\n\nexport const GoStringType = new GoStringTypeSpec()\nexport const StringHeaderType = new StructTypeSpec('reflect.StringHeader', stringStructDescriptor)\n", "import { GoStringType } from './string'\nimport { type AbstractTypeSpec } from '../spec'\nimport { type AttributeDescriptor, StructTypeSpec, ArrayTypeSpec } from '../complex'\nimport { Bool, Int, Int32, Int64, Uint, Uint32, Uint64, UintPtr } from '../basic'\n\nconst sliceHeaderAttrs: AttributeDescriptor[] = [\n  { key: 'data', type: UintPtr },\n  { key: 'len', type: Int },\n  { key: 'cap', type: Int },\n]\n\nexport const SliceHeaderType = new StructTypeSpec('reflect.SliceHeader', sliceHeaderAttrs)\n\n/**\n * SliceHeader represents a `reflect.SliceHeader` Go structure.\n */\nexport interface SliceHeader {\n  /**\n   * Array pointer\n   */\n  data: number\n\n  /**\n   * Slice length\n   */\n  len: number\n\n  /**\n   * Slice capacity\n   */\n  cap: number\n}\n\n/**\n * Represents a `[]T` Go slice struct reader.\n *\n * Returns an array of items during decode.\n */\nclass SliceTypeSpec<T = number> extends StructTypeSpec<SliceHeader> {\n  constructor(private readonly elemType: AbstractTypeSpec) {\n    super(`[]${elemType.name}`, sliceHeaderAttrs)\n  }\n\n  protected valueFromStruct(buff: ArrayBufferLike, header: SliceHeader): T[] {\n    const { data, len } = header\n    if (!data || !len) {\n      return [] as T[]\n    }\n\n    const t = new ArrayTypeSpec(this.elemType, len)\n    const { value } = t.read(new DataView(buff), data, buff)\n    return value as T[]\n  }\n}\n\n/**\n * Constructs a new slice type.\n * @param itemType Slice item type\n * @constructor\n */\nexport const SliceOf = <T = number>(itemType: AbstractTypeSpec) => new SliceTypeSpec<T>(itemType)\n\nexport const StringSlice = SliceOf<string>(GoStringType)\nexport const IntSlice = SliceOf<number>(Int)\nexport const Int32Slice = SliceOf<number>(Int32)\nexport const Int64Slice = SliceOf<number>(Int64)\nexport const UintSlice = SliceOf<number>(Uint)\nexport const Uint32Slice = SliceOf<number>(Uint32)\nexport const Uint64Slice = SliceOf<number>(Uint64)\nexport const UintPtrSlice = SliceOf<number>(UintPtr)\nexport const BoolSlice = SliceOf<boolean>(Bool)\n", "import { SliceOf, Struct, Uint32, UintPtr } from '../../../types'\n\nexport interface Value {\n  ref: number\n  gcPtr: number\n}\n\nexport interface Func {\n  value: Value\n  id: number\n}\n\n/**\n * `syscall/js.Value` type.\n */\nexport const ValueType = Struct('syscall/js.Value', [\n  { key: 'ref', type: UintPtr },\n  { key: 'gcPtr', type: UintPtr },\n])\n\n/**\n * `syscall/js.Func` type.\n */\nexport const FuncType = Struct('syscall/js.Func', [\n  { key: 'value', type: ValueType },\n  { key: 'id', type: Uint32 },\n])\n\nexport const ValueSlice = SliceOf<Value>(ValueType)\n", "import { SliceOf, Uint32 } from '../../../types'\nimport { type JSValuesTable } from '../../../wrapper/interface'\nimport {AbstractTypeSpec} from \"../../../types/spec\";\n\nexport const NAN_HEAD = 0x7ff80000\n\nenum TypeFlag {\n  Empty = 0,\n  Object = 1,\n  String = 2,\n  Symbol = 3,\n  Function = 4,\n}\n\n/**\n * Returns function type flag.\n * @param v\n */\nconst getTypeFlag = (v: any): TypeFlag => {\n  switch (typeof v) {\n    case 'object':\n      return v === null ? TypeFlag.Empty : TypeFlag.Object\n    case 'string':\n      return TypeFlag.String\n    case 'symbol':\n      return TypeFlag.Symbol\n    case 'function':\n      return TypeFlag.Function\n    default:\n      return TypeFlag.Empty\n  }\n}\n\n/**\n * RefKind is Ref type.\n */\nexport enum RefKind {\n  /**\n   * Invalid ref\n   */\n  Invalid,\n\n  /**\n   * Literal value\n   */\n  Value,\n\n  /**\n   * Reference to values table\n   */\n  ID,\n}\n\n/**\n * Ref is wrapper type around `syscall/js.ref` value.\n *\n * `js.ref` is a pointer to JavaScript value registered\n * in Go values mapping table (`Go._values`).\n */\nexport class Ref {\n  /**\n   * Ref constructor\n   * @param kind Reference source type, used to decode JS value from reference.\n   * @param ref Reference ID\n   * @param data Extra data for write on encode.\n   */\n  constructor(\n    public readonly kind: RefKind,\n    public readonly ref: number = -1,\n    public readonly data?: number[],\n  ) {}\n\n  /**\n   * Returns a resolved JS value from ref.\n   * @param values Values table\n   */\n  toValue(values: JSValuesTable) {\n    switch (this.kind) {\n      case RefKind.ID:\n        return values[this.ref]\n      case RefKind.Value:\n        return this.ref\n      default:\n        return undefined\n    }\n  }\n\n  /**\n   * Creates a new writable Ref from value and ref ID.\n   *\n   * @param v Value\n   * @param valId Ref ID\n   */\n  static fromValue(v: Exclude<any, Ref>, valId: number) {\n    // Copied from `storeValue`.\n    if (v instanceof Ref) {\n      throw new Error(`Ref.fromValue: value is already a Ref (${v.ref})`)\n    }\n\n    if (typeof v === 'number' && v !== 0) {\n      // See: storeValue - wasm_exec.js:129\n      const kind = isNaN(v) ? RefKind.ID : RefKind.Value\n      return new Ref(kind, valId, isNaN(v) ? [0, NAN_HEAD] : [v])\n    }\n\n    if (v === undefined) {\n      return new Ref(RefKind.Value, valId, [0])\n    }\n\n    const typeFlag = getTypeFlag(v)\n    const head = NAN_HEAD | typeFlag\n    return new Ref(RefKind.ID, valId, [valId, head])\n  }\n\n  /**\n   * Reports whenever value should be referenced\n   * by values table or can be stored as Ref value.\n   *\n   * Used by writer to decide if necessary to allocate\n   * a new ref id or not.\n   *\n   * @param v\n   */\n  static isReferenceableValue(v: Exclude<any, Ref>) {\n    if (typeof v === 'number' && v !== 0) {\n      return false\n    }\n\n    return v !== undefined\n  }\n}\n\nclass RefTypeSpec extends AbstractTypeSpec<Ref> {\n  constructor() {\n    super('syscall.js/ref', 8, 8, 0)\n  }\n\n  decode(view, addr): Ref {\n    const value = view.getFloat64(addr, true)\n    if (value === 0) {\n      return new Ref(RefKind.Invalid)\n    }\n\n    if (!isNaN(value)) {\n      return new Ref(RefKind.Value, value)\n    }\n\n    const id = view.getUint32(addr, true)\n    return new Ref(RefKind.ID, id)\n  }\n\n  encode(view: DataView, addr: number, ref: Ref) {\n    if (!ref.data?.length) {\n      throw new Error(\n        `${this.constructor.name}.encode: Ref value is not writable. ` +\n          `Ref should be created using Ref.fromValue() method.`,\n      )\n    }\n\n    // See: storeValue - wasm_exec.js:140\n    const [high, low] = ref.data\n    switch (ref.data.length) {\n      case 1:\n        view.setFloat64(addr, high, true)\n        return\n      case 2:\n        view.setUint32(addr, high, true)\n        view.setUint32(addr + Uint32.size, low, true)\n        return\n      default:\n        throw new Error(`${this.constructor.name}.encode: invalid Ref data size: ${ref.data.length}`)\n    }\n  }\n}\n\nexport const RefType = new RefTypeSpec()\nexport const RefSlice = SliceOf<Ref>(RefType)\n", "import type * as monaco from 'monaco-editor'\nimport '../lib/go/wasm_exec.js'\nimport {instantiateStreaming} from \"../lib/go\";\n\n// TODO breadchris should be dist\nexport const getWasmUrl = (name) => `/static/${name}@v1.wasm`\n\ntype JSONCallback = (rsp: string) => void\ntype CallArgs = [...any[], JSONCallback]\n\ninterface GoModule {\n  analyzeCode: (code: string, cb: JSONCallback) => void\n  runCode: (code: string, cb: JSONCallback) => void\n  exit: () => void\n}\n\ninterface AnalyzeResult {\n  hasErrors: boolean\n  markers: monaco.editor.IMarkerData[] | null\n}\n\nexport interface ParseRequest {\n  contents: string\n}\n\nexport interface ParseResponse {\n  error: string\n  functions: string[]\n}\n\nexport interface RunRequest {\n  func: string\n  code: string\n}\n\nexport interface RunResponse {\n  output: string\n  error: string\n}\n\nexport interface WrappedGoModule {\n  analyzeCode: (code: string) => Promise<AnalyzeResult>\n  runCode: (r: RunRequest) => Promise<RunResponse>\n  parseCode: (code: string) => Promise<ParseResponse>\n  exit: () => Promise<void>\n}\n\ninterface GoResponse<T = any> {\n  error: string\n  result: T\n}\n\nconst wrapModule = (mod: GoModule) => {\n  const wrapped = {\n    // eslint-disable-next-line no-useless-call\n    exit: () => mod.exit.call(mod),\n  }\n  // eslint-disable-next-line @typescript-eslint/no-unsafe-argument\n  Object.keys(mod)\n    .filter((k) => k !== 'exit')\n    .forEach((fnName) => {\n      wrapped[fnName] = async (...args) =>\n        await new Promise((resolve, reject) => {\n          const cb = (rawResp) => {\n            try {\n              const resp: GoResponse = JSON.parse(rawResp)\n              if (resp.error) {\n                reject(new Error(`${fnName}: ${resp.error}`))\n                return\n              }\n\n              resolve(resp.result)\n            } catch (ex) {\n              console.error(`analyzer: \"${fnName}\" returned and error`, ex)\n              reject(new Error(`${fnName}: ${ex}`))\n            }\n          }\n\n          const newArgs = args.concat(cb) as CallArgs\n          mod[fnName].apply(self, newArgs)\n        })\n    })\n  return wrapped as WrappedGoModule\n}\n\nexport const startAnalyzer = async (): Promise<WrappedGoModule> => {\n  const workerUrl = getWasmUrl('analyzer')\n  const go = new globalThis.Go()\n\n  // Pass the entrypoint via argv.\n  go.argv = ['js', 'onModuleInit']\n\n  const rsp = await fetch(workerUrl)\n  if (!rsp.ok) {\n    throw new Error(`Failed to fetch worker: ${rsp.status} ${rsp.statusText}`)\n  }\n\n  const { instance } = await instantiateStreaming(rsp, go.importObject)\n  return await new Promise((resolve, reject) => {\n    // Hook called by Go program\n    globalThis.onModuleInit = (goMod: GoModule) => {\n      console.log('analyzer: started')\n      const wrapped = wrapModule(goMod)\n      return resolve(wrapped)\n    }\n\n    go.run(instance).catch((err: Error) => {\n      reject(err)\n    })\n  })\n}\n", "import * as Comlink from 'comlink'\nimport {type WrappedGoModule, startAnalyzer, RunRequest, RunResponse, ParseRequest, ParseResponse} from './bootstrap'\nimport type * as monaco from 'monaco-editor'\n\nexport interface AnalyzeRequest {\n  fileName: string\n  contents: string\n  modelVersionId: number\n}\n\nexport interface AnalyzeResponse {\n  fileName: string\n  modelVersionId: number\n  markers: monaco.editor.IMarkerData[] | null\n}\n\n// TODO: refactor this together with the Go worker API\n\nconst appendModelVersion = (markers: AnalyzeResponse['markers'], modelVersionId: number) => {\n  if (!markers) {\n    return null\n  }\n\n  return markers.map((marker) => ({ ...marker, modelVersionId }))\n}\n\nexport class WorkerHandler {\n  private mod?: WrappedGoModule\n  private readonly initPromise = startAnalyzer()\n\n  private async getModule() {\n    this.mod ??= await this.initPromise\n    return this.mod\n  }\n\n  async runCode(r: RunRequest): Promise<RunResponse> {\n    const mod = await this.getModule()\n    try {\n        return await mod.runCode(r)\n    } catch (e) {\n        return {\n          output: '',\n          error: e.toString(),\n        }\n    }\n  }\n\n  async parseCode({ contents }: ParseRequest): Promise<ParseResponse> {\n    const mod = await this.getModule()\n    try {\n        return await mod.parseCode(contents)\n    } catch (e) {\n        return {\n          error: e.toString(),\n          functions: [],\n        }\n    }\n  }\n\n  async checkSyntaxErrors({ fileName, modelVersionId, contents }: AnalyzeRequest): Promise<AnalyzeResponse> {\n    const mod = await this.getModule()\n    const { markers } = await mod.analyzeCode(contents)\n    return {\n      fileName,\n      modelVersionId,\n      markers: appendModelVersion(markers, modelVersionId),\n    }\n  }\n}\n\nComlink.expose(new WorkerHandler())\n"],
  "mappings": "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",
  "names": ["proxyMarker", "createEndpoint", "releaseProxy", "finalizer", "throwMarker", "isObject", "val", "proxyTransferHandler", "obj", "port1", "port2", "expose", "port", "wrap", "throwTransferHandler", "value", "serialized", "transferHandlers", "isAllowedOrigin", "allowedOrigins", "origin", "allowedOrigin", "ep", "callback", "ev", "id", "type", "path", "argumentList", "fromWireValue", "returnValue", "parent", "prop", "rawValue", "proxy", "transfer", "wireValue", "transferables", "toWireValue", "closeEndPoint", "error", "isMessagePort", "endpoint", "target", "createProxy", "throwIfProxyReleased", "isReleased", "releaseEndpoint", "requestResponseMessage", "proxyCounter", "proxyFinalizers", "newCount", "registerProxy", "unregisterProxy", "isProxyReleased", "_target", "r", "p", "_thisArg", "rawArgumentList", "last", "processArguments", "myFlat", "arr", "processed", "v", "transferCache", "transfers", "toWireValue", "value", "name", "handler", "transferHandlers", "serializedValue", "transferables", "transferCache", "fromWireValue", "requestResponseMessage", "ep", "msg", "transfers", "resolve", "id", "generateUUID", "l", "ev", "enosys", "err", "outputBuf", "fd", "buf", "decoder", "nl", "offset", "length", "position", "callback", "n", "path", "mode", "uid", "gid", "link", "perm", "flags", "buffer", "from", "to", "atime", "mtime", "encoder", "code", "resolve", "setInt64", "addr", "v", "setInt32", "getInt64", "low", "high", "loadValue", "f", "id", "storeValue", "typeFlag", "loadSlice", "array", "len", "loadSliceOfValues", "a", "i", "loadString", "saddr", "timeOrigin", "b", "sp", "p", "msec", "result", "m", "args", "str", "dst", "src", "toCopy", "value", "instance", "strPtr", "ptr", "bytes", "argc", "argvPtrs", "arg", "key", "argv", "go", "event", "whitespaceChars", "s", "instantiateStreaming", "resp", "importObject", "r", "source", "alignAddr", "addr", "alignment", "offset", "AbstractTypeSpec", "name", "size", "align", "skip", "alignment", "padding", "addr", "alignAddr", "view", "val", "buff", "address", "BooleanTypeSpec", "AbstractTypeSpec", "view", "addr", "data", "MAX_INT32", "UInt64TypeSpec", "AbstractTypeSpec", "name", "view", "addr", "low", "high", "val", "Int64TypeSpec", "DataViewableTypeSpec", "AbstractTypeSpec", "name", "size", "align", "skip", "rwObj", "view", "addr", "data", "Bool", "BooleanTypeSpec", "Int", "UInt64TypeSpec", "Int64", "Int64TypeSpec", "Uint", "UintPtr", "Byte", "DataViewableTypeSpec", "Uint8", "Int8", "Uint32", "Int32", "Uint64", "Float32", "Float64", "StructTypeSpec", "AbstractTypeSpec", "name", "attrs", "firstElem", "totalSize", "type", "total", "size", "addr", "view", "buff", "address", "offset", "entries", "attr", "key", "fieldAddr", "value", "endOffset", "structObj", "val", "a", "structVal", "Struct", "fields", "ArrayTypeSpec", "AbstractTypeSpec", "elemType", "length", "addr", "view", "buff", "address", "offset", "entries", "i", "elemAddr", "value", "endOffset", "val", "itemAddr", "stringEncoder", "stringDecoder", "stringStructDescriptor", "UintPtr", "Int", "GoStringTypeSpec", "StructTypeSpec", "mem", "structVal", "data", "len", "GoStringType", "StringHeaderType", "sliceHeaderAttrs", "UintPtr", "Int", "SliceHeaderType", "StructTypeSpec", "SliceTypeSpec", "elemType", "buff", "header", "data", "len", "t", "ArrayTypeSpec", "value", "SliceOf", "itemType", "StringSlice", "GoStringType", "IntSlice", "Int32Slice", "Int32", "Int64Slice", "Int64", "UintSlice", "Uint", "Uint32Slice", "Uint32", "Uint64Slice", "Uint64", "UintPtrSlice", "BoolSlice", "Bool", "ValueType", "Struct", "UintPtr", "FuncType", "Uint32", "ValueSlice", "SliceOf", "NAN_HEAD", "getTypeFlag", "v", "Ref", "_Ref", "kind", "ref", "data", "values", "v", "valId", "NAN_HEAD", "typeFlag", "getTypeFlag", "head", "RefTypeSpec", "AbstractTypeSpec", "view", "addr", "value", "id", "high", "low", "Uint32", "RefType", "RefSlice", "SliceOf", "getWasmUrl", "name", "wrapModule", "mod", "wrapped", "k", "fnName", "args", "resolve", "reject", "cb", "rawResp", "resp", "ex", "newArgs", "startAnalyzer", "workerUrl", "go", "rsp", "instance", "instantiateStreaming", "goMod", "err", "appendModelVersion", "markers", "modelVersionId", "marker", "WorkerHandler", "startAnalyzer", "mod", "e", "contents", "fileName", "expose"]
}
