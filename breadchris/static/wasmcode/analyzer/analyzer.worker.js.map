{
  "version": 3,
  "sources": ["../../../node_modules/comlink/src/comlink.ts", "../../../wasmcode/lib/go/wasm_exec.js", "../../../wasmcode/lib/go/debug/utils.ts", "../../../wasmcode/lib/go/debug/memory.ts", "../../../wasmcode/lib/go/common.ts", "../../../wasmcode/lib/go/types/common.ts", "../../../wasmcode/lib/go/types/spec.ts", "../../../wasmcode/lib/go/types/basic/boolean.ts", "../../../wasmcode/lib/go/types/basic/uint64.ts", "../../../wasmcode/lib/go/types/basic/dataview.ts", "../../../wasmcode/lib/go/types/basic/index.ts", "../../../wasmcode/lib/go/types/complex/struct.ts", "../../../wasmcode/lib/go/types/complex/array.ts", "../../../wasmcode/lib/go/types/refs/string.ts", "../../../wasmcode/lib/go/types/refs/slice.ts", "../../../wasmcode/lib/go/pkg/syscall/js/value.ts", "../../../wasmcode/lib/go/pkg/syscall/js/ref.ts", "../../../wasmcode/analyzer/bootstrap.ts", "../../../wasmcode/analyzer/analyzer.worker.ts"],
  "sourcesContent": ["/**\n * @license\n * Copyright 2019 Google LLC\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport {\n  Endpoint,\n  EventSource,\n  Message,\n  MessageType,\n  PostMessageWithOrigin,\n  WireValue,\n  WireValueType,\n} from \"./protocol\";\nexport type { Endpoint };\n\nexport const proxyMarker = Symbol(\"Comlink.proxy\");\nexport const createEndpoint = Symbol(\"Comlink.endpoint\");\nexport const releaseProxy = Symbol(\"Comlink.releaseProxy\");\nexport const finalizer = Symbol(\"Comlink.finalizer\");\n\nconst throwMarker = Symbol(\"Comlink.thrown\");\n\n/**\n * Interface of values that were marked to be proxied with `comlink.proxy()`.\n * Can also be implemented by classes.\n */\nexport interface ProxyMarked {\n  [proxyMarker]: true;\n}\n\n/**\n * Takes a type and wraps it in a Promise, if it not already is one.\n * This is to avoid `Promise<Promise<T>>`.\n *\n * This is the inverse of `Unpromisify<T>`.\n */\ntype Promisify<T> = T extends Promise<unknown> ? T : Promise<T>;\n/**\n * Takes a type that may be Promise and unwraps the Promise type.\n * If `P` is not a Promise, it returns `P`.\n *\n * This is the inverse of `Promisify<T>`.\n */\ntype Unpromisify<P> = P extends Promise<infer T> ? T : P;\n\n/**\n * Takes the raw type of a remote property and returns the type that is visible to the local thread on the proxy.\n *\n * Note: This needs to be its own type alias, otherwise it will not distribute over unions.\n * See https://www.typescriptlang.org/docs/handbook/advanced-types.html#distributive-conditional-types\n */\ntype RemoteProperty<T> =\n  // If the value is a method, comlink will proxy it automatically.\n  // Objects are only proxied if they are marked to be proxied.\n  // Otherwise, the property is converted to a Promise that resolves the cloned value.\n  T extends Function | ProxyMarked ? Remote<T> : Promisify<T>;\n\n/**\n * Takes the raw type of a property as a remote thread would see it through a proxy (e.g. when passed in as a function\n * argument) and returns the type that the local thread has to supply.\n *\n * This is the inverse of `RemoteProperty<T>`.\n *\n * Note: This needs to be its own type alias, otherwise it will not distribute over unions. See\n * https://www.typescriptlang.org/docs/handbook/advanced-types.html#distributive-conditional-types\n */\ntype LocalProperty<T> = T extends Function | ProxyMarked\n  ? Local<T>\n  : Unpromisify<T>;\n\n/**\n * Proxies `T` if it is a `ProxyMarked`, clones it otherwise (as handled by structured cloning and transfer handlers).\n */\nexport type ProxyOrClone<T> = T extends ProxyMarked ? Remote<T> : T;\n/**\n * Inverse of `ProxyOrClone<T>`.\n */\nexport type UnproxyOrClone<T> = T extends RemoteObject<ProxyMarked>\n  ? Local<T>\n  : T;\n\n/**\n * Takes the raw type of a remote object in the other thread and returns the type as it is visible to the local thread\n * when proxied with `Comlink.proxy()`.\n *\n * This does not handle call signatures, which is handled by the more general `Remote<T>` type.\n *\n * @template T The raw type of a remote object as seen in the other thread.\n */\nexport type RemoteObject<T> = { [P in keyof T]: RemoteProperty<T[P]> };\n/**\n * Takes the type of an object as a remote thread would see it through a proxy (e.g. when passed in as a function\n * argument) and returns the type that the local thread has to supply.\n *\n * This does not handle call signatures, which is handled by the more general `Local<T>` type.\n *\n * This is the inverse of `RemoteObject<T>`.\n *\n * @template T The type of a proxied object.\n */\nexport type LocalObject<T> = { [P in keyof T]: LocalProperty<T[P]> };\n\n/**\n * Additional special comlink methods available on each proxy returned by `Comlink.wrap()`.\n */\nexport interface ProxyMethods {\n  [createEndpoint]: () => Promise<MessagePort>;\n  [releaseProxy]: () => void;\n}\n\n/**\n * Takes the raw type of a remote object, function or class in the other thread and returns the type as it is visible to\n * the local thread from the proxy return value of `Comlink.wrap()` or `Comlink.proxy()`.\n */\nexport type Remote<T> =\n  // Handle properties\n  RemoteObject<T> &\n    // Handle call signature (if present)\n    (T extends (...args: infer TArguments) => infer TReturn\n      ? (\n          ...args: { [I in keyof TArguments]: UnproxyOrClone<TArguments[I]> }\n        ) => Promisify<ProxyOrClone<Unpromisify<TReturn>>>\n      : unknown) &\n    // Handle construct signature (if present)\n    // The return of construct signatures is always proxied (whether marked or not)\n    (T extends { new (...args: infer TArguments): infer TInstance }\n      ? {\n          new (\n            ...args: {\n              [I in keyof TArguments]: UnproxyOrClone<TArguments[I]>;\n            }\n          ): Promisify<Remote<TInstance>>;\n        }\n      : unknown) &\n    // Include additional special comlink methods available on the proxy.\n    ProxyMethods;\n\n/**\n * Expresses that a type can be either a sync or async.\n */\ntype MaybePromise<T> = Promise<T> | T;\n\n/**\n * Takes the raw type of a remote object, function or class as a remote thread would see it through a proxy (e.g. when\n * passed in as a function argument) and returns the type the local thread has to supply.\n *\n * This is the inverse of `Remote<T>`. It takes a `Remote<T>` and returns its original input `T`.\n */\nexport type Local<T> =\n  // Omit the special proxy methods (they don't need to be supplied, comlink adds them)\n  Omit<LocalObject<T>, keyof ProxyMethods> &\n    // Handle call signatures (if present)\n    (T extends (...args: infer TArguments) => infer TReturn\n      ? (\n          ...args: { [I in keyof TArguments]: ProxyOrClone<TArguments[I]> }\n        ) => // The raw function could either be sync or async, but is always proxied automatically\n        MaybePromise<UnproxyOrClone<Unpromisify<TReturn>>>\n      : unknown) &\n    // Handle construct signature (if present)\n    // The return of construct signatures is always proxied (whether marked or not)\n    (T extends { new (...args: infer TArguments): infer TInstance }\n      ? {\n          new (\n            ...args: {\n              [I in keyof TArguments]: ProxyOrClone<TArguments[I]>;\n            }\n          ): // The raw constructor could either be sync or async, but is always proxied automatically\n          MaybePromise<Local<Unpromisify<TInstance>>>;\n        }\n      : unknown);\n\nconst isObject = (val: unknown): val is object =>\n  (typeof val === \"object\" && val !== null) || typeof val === \"function\";\n\n/**\n * Customizes the serialization of certain values as determined by `canHandle()`.\n *\n * @template T The input type being handled by this transfer handler.\n * @template S The serialized type sent over the wire.\n */\nexport interface TransferHandler<T, S> {\n  /**\n   * Gets called for every value to determine whether this transfer handler\n   * should serialize the value, which includes checking that it is of the right\n   * type (but can perform checks beyond that as well).\n   */\n  canHandle(value: unknown): value is T;\n\n  /**\n   * Gets called with the value if `canHandle()` returned `true` to produce a\n   * value that can be sent in a message, consisting of structured-cloneable\n   * values and/or transferrable objects.\n   */\n  serialize(value: T): [S, Transferable[]];\n\n  /**\n   * Gets called to deserialize an incoming value that was serialized in the\n   * other thread with this transfer handler (known through the name it was\n   * registered under).\n   */\n  deserialize(value: S): T;\n}\n\n/**\n * Internal transfer handle to handle objects marked to proxy.\n */\nconst proxyTransferHandler: TransferHandler<object, MessagePort> = {\n  canHandle: (val): val is ProxyMarked =>\n    isObject(val) && (val as ProxyMarked)[proxyMarker],\n  serialize(obj) {\n    const { port1, port2 } = new MessageChannel();\n    expose(obj, port1);\n    return [port2, [port2]];\n  },\n  deserialize(port) {\n    port.start();\n    return wrap(port);\n  },\n};\n\ninterface ThrownValue {\n  [throwMarker]: unknown; // just needs to be present\n  value: unknown;\n}\ntype SerializedThrownValue =\n  | { isError: true; value: Error }\n  | { isError: false; value: unknown };\n\n/**\n * Internal transfer handler to handle thrown exceptions.\n */\nconst throwTransferHandler: TransferHandler<\n  ThrownValue,\n  SerializedThrownValue\n> = {\n  canHandle: (value): value is ThrownValue =>\n    isObject(value) && throwMarker in value,\n  serialize({ value }) {\n    let serialized: SerializedThrownValue;\n    if (value instanceof Error) {\n      serialized = {\n        isError: true,\n        value: {\n          message: value.message,\n          name: value.name,\n          stack: value.stack,\n        },\n      };\n    } else {\n      serialized = { isError: false, value };\n    }\n    return [serialized, []];\n  },\n  deserialize(serialized) {\n    if (serialized.isError) {\n      throw Object.assign(\n        new Error(serialized.value.message),\n        serialized.value\n      );\n    }\n    throw serialized.value;\n  },\n};\n\n/**\n * Allows customizing the serialization of certain values.\n */\nexport const transferHandlers = new Map<\n  string,\n  TransferHandler<unknown, unknown>\n>([\n  [\"proxy\", proxyTransferHandler],\n  [\"throw\", throwTransferHandler],\n]);\n\nfunction isAllowedOrigin(\n  allowedOrigins: (string | RegExp)[],\n  origin: string\n): boolean {\n  for (const allowedOrigin of allowedOrigins) {\n    if (origin === allowedOrigin || allowedOrigin === \"*\") {\n      return true;\n    }\n    if (allowedOrigin instanceof RegExp && allowedOrigin.test(origin)) {\n      return true;\n    }\n  }\n  return false;\n}\n\nexport function expose(\n  obj: any,\n  ep: Endpoint = globalThis as any,\n  allowedOrigins: (string | RegExp)[] = [\"*\"]\n) {\n  ep.addEventListener(\"message\", function callback(ev: MessageEvent) {\n    if (!ev || !ev.data) {\n      return;\n    }\n    if (!isAllowedOrigin(allowedOrigins, ev.origin)) {\n      console.warn(`Invalid origin '${ev.origin}' for comlink proxy`);\n      return;\n    }\n    const { id, type, path } = {\n      path: [] as string[],\n      ...(ev.data as Message),\n    };\n    const argumentList = (ev.data.argumentList || []).map(fromWireValue);\n    let returnValue;\n    try {\n      const parent = path.slice(0, -1).reduce((obj, prop) => obj[prop], obj);\n      const rawValue = path.reduce((obj, prop) => obj[prop], obj);\n      switch (type) {\n        case MessageType.GET:\n          {\n            returnValue = rawValue;\n          }\n          break;\n        case MessageType.SET:\n          {\n            parent[path.slice(-1)[0]] = fromWireValue(ev.data.value);\n            returnValue = true;\n          }\n          break;\n        case MessageType.APPLY:\n          {\n            returnValue = rawValue.apply(parent, argumentList);\n          }\n          break;\n        case MessageType.CONSTRUCT:\n          {\n            const value = new rawValue(...argumentList);\n            returnValue = proxy(value);\n          }\n          break;\n        case MessageType.ENDPOINT:\n          {\n            const { port1, port2 } = new MessageChannel();\n            expose(obj, port2);\n            returnValue = transfer(port1, [port1]);\n          }\n          break;\n        case MessageType.RELEASE:\n          {\n            returnValue = undefined;\n          }\n          break;\n        default:\n          return;\n      }\n    } catch (value) {\n      returnValue = { value, [throwMarker]: 0 };\n    }\n    Promise.resolve(returnValue)\n      .catch((value) => {\n        return { value, [throwMarker]: 0 };\n      })\n      .then((returnValue) => {\n        const [wireValue, transferables] = toWireValue(returnValue);\n        ep.postMessage({ ...wireValue, id }, transferables);\n        if (type === MessageType.RELEASE) {\n          // detach and deactive after sending release response above.\n          ep.removeEventListener(\"message\", callback as any);\n          closeEndPoint(ep);\n          if (finalizer in obj && typeof obj[finalizer] === \"function\") {\n            obj[finalizer]();\n          }\n        }\n      })\n      .catch((error) => {\n        // Send Serialization Error To Caller\n        const [wireValue, transferables] = toWireValue({\n          value: new TypeError(\"Unserializable return value\"),\n          [throwMarker]: 0,\n        });\n        ep.postMessage({ ...wireValue, id }, transferables);\n      });\n  } as any);\n  if (ep.start) {\n    ep.start();\n  }\n}\n\nfunction isMessagePort(endpoint: Endpoint): endpoint is MessagePort {\n  return endpoint.constructor.name === \"MessagePort\";\n}\n\nfunction closeEndPoint(endpoint: Endpoint) {\n  if (isMessagePort(endpoint)) endpoint.close();\n}\n\nexport function wrap<T>(ep: Endpoint, target?: any): Remote<T> {\n  return createProxy<T>(ep, [], target) as any;\n}\n\nfunction throwIfProxyReleased(isReleased: boolean) {\n  if (isReleased) {\n    throw new Error(\"Proxy has been released and is not useable\");\n  }\n}\n\nfunction releaseEndpoint(ep: Endpoint) {\n  return requestResponseMessage(ep, {\n    type: MessageType.RELEASE,\n  }).then(() => {\n    closeEndPoint(ep);\n  });\n}\n\ninterface FinalizationRegistry<T> {\n  new (cb: (heldValue: T) => void): FinalizationRegistry<T>;\n  register(\n    weakItem: object,\n    heldValue: T,\n    unregisterToken?: object | undefined\n  ): void;\n  unregister(unregisterToken: object): void;\n}\ndeclare var FinalizationRegistry: FinalizationRegistry<Endpoint>;\n\nconst proxyCounter = new WeakMap<Endpoint, number>();\nconst proxyFinalizers =\n  \"FinalizationRegistry\" in globalThis &&\n  new FinalizationRegistry((ep: Endpoint) => {\n    const newCount = (proxyCounter.get(ep) || 0) - 1;\n    proxyCounter.set(ep, newCount);\n    if (newCount === 0) {\n      releaseEndpoint(ep);\n    }\n  });\n\nfunction registerProxy(proxy: object, ep: Endpoint) {\n  const newCount = (proxyCounter.get(ep) || 0) + 1;\n  proxyCounter.set(ep, newCount);\n  if (proxyFinalizers) {\n    proxyFinalizers.register(proxy, ep, proxy);\n  }\n}\n\nfunction unregisterProxy(proxy: object) {\n  if (proxyFinalizers) {\n    proxyFinalizers.unregister(proxy);\n  }\n}\n\nfunction createProxy<T>(\n  ep: Endpoint,\n  path: (string | number | symbol)[] = [],\n  target: object = function () {}\n): Remote<T> {\n  let isProxyReleased = false;\n  const proxy = new Proxy(target, {\n    get(_target, prop) {\n      throwIfProxyReleased(isProxyReleased);\n      if (prop === releaseProxy) {\n        return () => {\n          unregisterProxy(proxy);\n          releaseEndpoint(ep);\n          isProxyReleased = true;\n        };\n      }\n      if (prop === \"then\") {\n        if (path.length === 0) {\n          return { then: () => proxy };\n        }\n        const r = requestResponseMessage(ep, {\n          type: MessageType.GET,\n          path: path.map((p) => p.toString()),\n        }).then(fromWireValue);\n        return r.then.bind(r);\n      }\n      return createProxy(ep, [...path, prop]);\n    },\n    set(_target, prop, rawValue) {\n      throwIfProxyReleased(isProxyReleased);\n      // FIXME: ES6 Proxy Handler `set` methods are supposed to return a\n      // boolean. To show good will, we return true asynchronously \u00AF\\_(\u30C4)_/\u00AF\n      const [value, transferables] = toWireValue(rawValue);\n      return requestResponseMessage(\n        ep,\n        {\n          type: MessageType.SET,\n          path: [...path, prop].map((p) => p.toString()),\n          value,\n        },\n        transferables\n      ).then(fromWireValue) as any;\n    },\n    apply(_target, _thisArg, rawArgumentList) {\n      throwIfProxyReleased(isProxyReleased);\n      const last = path[path.length - 1];\n      if ((last as any) === createEndpoint) {\n        return requestResponseMessage(ep, {\n          type: MessageType.ENDPOINT,\n        }).then(fromWireValue);\n      }\n      // We just pretend that `bind()` didn\u2019t happen.\n      if (last === \"bind\") {\n        return createProxy(ep, path.slice(0, -1));\n      }\n      const [argumentList, transferables] = processArguments(rawArgumentList);\n      return requestResponseMessage(\n        ep,\n        {\n          type: MessageType.APPLY,\n          path: path.map((p) => p.toString()),\n          argumentList,\n        },\n        transferables\n      ).then(fromWireValue);\n    },\n    construct(_target, rawArgumentList) {\n      throwIfProxyReleased(isProxyReleased);\n      const [argumentList, transferables] = processArguments(rawArgumentList);\n      return requestResponseMessage(\n        ep,\n        {\n          type: MessageType.CONSTRUCT,\n          path: path.map((p) => p.toString()),\n          argumentList,\n        },\n        transferables\n      ).then(fromWireValue);\n    },\n  });\n  registerProxy(proxy, ep);\n  return proxy as any;\n}\n\nfunction myFlat<T>(arr: (T | T[])[]): T[] {\n  return Array.prototype.concat.apply([], arr);\n}\n\nfunction processArguments(argumentList: any[]): [WireValue[], Transferable[]] {\n  const processed = argumentList.map(toWireValue);\n  return [processed.map((v) => v[0]), myFlat(processed.map((v) => v[1]))];\n}\n\nconst transferCache = new WeakMap<any, Transferable[]>();\nexport function transfer<T>(obj: T, transfers: Transferable[]): T {\n  transferCache.set(obj, transfers);\n  return obj;\n}\n\nexport function proxy<T extends {}>(obj: T): T & ProxyMarked {\n  return Object.assign(obj, { [proxyMarker]: true }) as any;\n}\n\nexport function windowEndpoint(\n  w: PostMessageWithOrigin,\n  context: EventSource = globalThis,\n  targetOrigin = \"*\"\n): Endpoint {\n  return {\n    postMessage: (msg: any, transferables: Transferable[]) =>\n      w.postMessage(msg, targetOrigin, transferables),\n    addEventListener: context.addEventListener.bind(context),\n    removeEventListener: context.removeEventListener.bind(context),\n  };\n}\n\nfunction toWireValue(value: any): [WireValue, Transferable[]] {\n  for (const [name, handler] of transferHandlers) {\n    if (handler.canHandle(value)) {\n      const [serializedValue, transferables] = handler.serialize(value);\n      return [\n        {\n          type: WireValueType.HANDLER,\n          name,\n          value: serializedValue,\n        },\n        transferables,\n      ];\n    }\n  }\n  return [\n    {\n      type: WireValueType.RAW,\n      value,\n    },\n    transferCache.get(value) || [],\n  ];\n}\n\nfunction fromWireValue(value: WireValue): any {\n  switch (value.type) {\n    case WireValueType.HANDLER:\n      return transferHandlers.get(value.name)!.deserialize(value.value);\n    case WireValueType.RAW:\n      return value.value;\n  }\n}\n\nfunction requestResponseMessage(\n  ep: Endpoint,\n  msg: Message,\n  transfers?: Transferable[]\n): Promise<WireValue> {\n  return new Promise((resolve) => {\n    const id = generateUUID();\n    ep.addEventListener(\"message\", function l(ev: MessageEvent) {\n      if (!ev.data || !ev.data.id || ev.data.id !== id) {\n        return;\n      }\n      ep.removeEventListener(\"message\", l as any);\n      resolve(ev.data);\n    } as any);\n    if (ep.start) {\n      ep.start();\n    }\n    ep.postMessage({ id, ...msg }, transfers);\n  });\n}\n\nfunction generateUUID(): string {\n  return new Array(4)\n    .fill(0)\n    .map(() => Math.floor(Math.random() * Number.MAX_SAFE_INTEGER).toString(16))\n    .join(\"-\");\n}\n", "// Copyright 2018 The Go Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style\n// license that can be found in the LICENSE file.\n\n\"use strict\";\n\n(() => {\n\tconst enosys = () => {\n\t\tconst err = new Error(\"not implemented\");\n\t\terr.code = \"ENOSYS\";\n\t\treturn err;\n\t};\n\n\tif (!globalThis.fs) {\n\t\tlet outputBuf = \"\";\n\t\tglobalThis.fs = {\n\t\t\tconstants: { O_WRONLY: -1, O_RDWR: -1, O_CREAT: -1, O_TRUNC: -1, O_APPEND: -1, O_EXCL: -1 }, // unused\n\t\t\twriteSync(fd, buf) {\n\t\t\t\toutputBuf += decoder.decode(buf);\n\t\t\t\tconst nl = outputBuf.lastIndexOf(\"\\n\");\n\t\t\t\tif (nl != -1) {\n\t\t\t\t\tconsole.log(outputBuf.substring(0, nl));\n\t\t\t\t\toutputBuf = outputBuf.substring(nl + 1);\n\t\t\t\t}\n\t\t\t\treturn buf.length;\n\t\t\t},\n\t\t\twrite(fd, buf, offset, length, position, callback) {\n\t\t\t\tif (offset !== 0 || length !== buf.length || position !== null) {\n\t\t\t\t\tcallback(enosys());\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tconst n = this.writeSync(fd, buf);\n\t\t\t\tcallback(null, n);\n\t\t\t},\n\t\t\tchmod(path, mode, callback) { callback(enosys()); },\n\t\t\tchown(path, uid, gid, callback) { callback(enosys()); },\n\t\t\tclose(fd, callback) { callback(enosys()); },\n\t\t\tfchmod(fd, mode, callback) { callback(enosys()); },\n\t\t\tfchown(fd, uid, gid, callback) { callback(enosys()); },\n\t\t\tfstat(fd, callback) { callback(enosys()); },\n\t\t\tfsync(fd, callback) { callback(null); },\n\t\t\tftruncate(fd, length, callback) { callback(enosys()); },\n\t\t\tlchown(path, uid, gid, callback) { callback(enosys()); },\n\t\t\tlink(path, link, callback) { callback(enosys()); },\n\t\t\tlstat(path, callback) { callback(enosys()); },\n\t\t\tmkdir(path, perm, callback) { callback(enosys()); },\n\t\t\topen(path, flags, mode, callback) { callback(enosys()); },\n\t\t\tread(fd, buffer, offset, length, position, callback) { callback(enosys()); },\n\t\t\treaddir(path, callback) { callback(enosys()); },\n\t\t\treadlink(path, callback) { callback(enosys()); },\n\t\t\trename(from, to, callback) { callback(enosys()); },\n\t\t\trmdir(path, callback) { callback(enosys()); },\n\t\t\tstat(path, callback) { callback(enosys()); },\n\t\t\tsymlink(path, link, callback) { callback(enosys()); },\n\t\t\ttruncate(path, length, callback) { callback(enosys()); },\n\t\t\tunlink(path, callback) { callback(enosys()); },\n\t\t\tutimes(path, atime, mtime, callback) { callback(enosys()); },\n\t\t};\n\t}\n\n\tif (!globalThis.process) {\n\t\tglobalThis.process = {\n\t\t\tgetuid() { return -1; },\n\t\t\tgetgid() { return -1; },\n\t\t\tgeteuid() { return -1; },\n\t\t\tgetegid() { return -1; },\n\t\t\tgetgroups() { throw enosys(); },\n\t\t\tpid: -1,\n\t\t\tppid: -1,\n\t\t\tumask() { throw enosys(); },\n\t\t\tcwd() { throw enosys(); },\n\t\t\tchdir() { throw enosys(); },\n\t\t}\n\t}\n\n\tif (!globalThis.crypto) {\n\t\tthrow new Error(\"globalThis.crypto is not available, polyfill required (crypto.getRandomValues only)\");\n\t}\n\n\tif (!globalThis.performance) {\n\t\tthrow new Error(\"globalThis.performance is not available, polyfill required (performance.now only)\");\n\t}\n\n\tif (!globalThis.TextEncoder) {\n\t\tthrow new Error(\"globalThis.TextEncoder is not available, polyfill required\");\n\t}\n\n\tif (!globalThis.TextDecoder) {\n\t\tthrow new Error(\"globalThis.TextDecoder is not available, polyfill required\");\n\t}\n\n\tconst encoder = new TextEncoder(\"utf-8\");\n\tconst decoder = new TextDecoder(\"utf-8\");\n\n\tglobalThis.Go = class {\n\t\tconstructor() {\n\t\t\tthis.argv = [\"js\"];\n\t\t\tthis.env = {};\n\t\t\tthis.exit = (code) => {\n\t\t\t\tif (code !== 0) {\n\t\t\t\t\tconsole.warn(\"exit code:\", code);\n\t\t\t\t}\n\t\t\t};\n\t\t\tthis._exitPromise = new Promise((resolve) => {\n\t\t\t\tthis._resolveExitPromise = resolve;\n\t\t\t});\n\t\t\tthis._pendingEvent = null;\n\t\t\tthis._scheduledTimeouts = new Map();\n\t\t\tthis._nextCallbackTimeoutID = 1;\n\n\t\t\tconst setInt64 = (addr, v) => {\n\t\t\t\tthis.mem.setUint32(addr + 0, v, true);\n\t\t\t\tthis.mem.setUint32(addr + 4, Math.floor(v / 4294967296), true);\n\t\t\t}\n\n\t\t\tconst setInt32 = (addr, v) => {\n\t\t\t\tthis.mem.setUint32(addr + 0, v, true);\n\t\t\t}\n\n\t\t\tconst getInt64 = (addr) => {\n\t\t\t\tconst low = this.mem.getUint32(addr + 0, true);\n\t\t\t\tconst high = this.mem.getInt32(addr + 4, true);\n\t\t\t\treturn low + high * 4294967296;\n\t\t\t}\n\n\t\t\tconst loadValue = (addr) => {\n\t\t\t\tconst f = this.mem.getFloat64(addr, true);\n\t\t\t\tif (f === 0) {\n\t\t\t\t\treturn undefined;\n\t\t\t\t}\n\t\t\t\tif (!isNaN(f)) {\n\t\t\t\t\treturn f;\n\t\t\t\t}\n\n\t\t\t\tconst id = this.mem.getUint32(addr, true);\n\t\t\t\treturn this._values[id];\n\t\t\t}\n\n\t\t\tconst storeValue = (addr, v) => {\n\t\t\t\tconst nanHead = 0x7FF80000;\n\n\t\t\t\tif (typeof v === \"number\" && v !== 0) {\n\t\t\t\t\tif (isNaN(v)) {\n\t\t\t\t\t\tthis.mem.setUint32(addr + 4, nanHead, true);\n\t\t\t\t\t\tthis.mem.setUint32(addr, 0, true);\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t\tthis.mem.setFloat64(addr, v, true);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tif (v === undefined) {\n\t\t\t\t\tthis.mem.setFloat64(addr, 0, true);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tlet id = this._ids.get(v);\n\t\t\t\tif (id === undefined) {\n\t\t\t\t\tid = this._idPool.pop();\n\t\t\t\t\tif (id === undefined) {\n\t\t\t\t\t\tid = this._values.length;\n\t\t\t\t\t}\n\t\t\t\t\tthis._values[id] = v;\n\t\t\t\t\tthis._goRefCounts[id] = 0;\n\t\t\t\t\tthis._ids.set(v, id);\n\t\t\t\t}\n\t\t\t\tthis._goRefCounts[id]++;\n\t\t\t\tlet typeFlag = 0;\n\t\t\t\tswitch (typeof v) {\n\t\t\t\t\tcase \"object\":\n\t\t\t\t\t\tif (v !== null) {\n\t\t\t\t\t\t\ttypeFlag = 1;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase \"string\":\n\t\t\t\t\t\ttypeFlag = 2;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase \"symbol\":\n\t\t\t\t\t\ttypeFlag = 3;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase \"function\":\n\t\t\t\t\t\ttypeFlag = 4;\n\t\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tthis.mem.setUint32(addr + 4, nanHead | typeFlag, true);\n\t\t\t\tthis.mem.setUint32(addr, id, true);\n\t\t\t}\n\n\t\t\tconst loadSlice = (addr) => {\n\t\t\t\tconst array = getInt64(addr + 0);\n\t\t\t\tconst len = getInt64(addr + 8);\n\t\t\t\treturn new Uint8Array(this._inst.exports.mem.buffer, array, len);\n\t\t\t}\n\n\t\t\tconst loadSliceOfValues = (addr) => {\n\t\t\t\tconst array = getInt64(addr + 0);\n\t\t\t\tconst len = getInt64(addr + 8);\n\t\t\t\tconst a = new Array(len);\n\t\t\t\tfor (let i = 0; i < len; i++) {\n\t\t\t\t\ta[i] = loadValue(array + i * 8);\n\t\t\t\t}\n\t\t\t\treturn a;\n\t\t\t}\n\n\t\t\tconst loadString = (addr) => {\n\t\t\t\tconst saddr = getInt64(addr + 0);\n\t\t\t\tconst len = getInt64(addr + 8);\n\t\t\t\treturn decoder.decode(new DataView(this._inst.exports.mem.buffer, saddr, len));\n\t\t\t}\n\n\t\t\tconst timeOrigin = Date.now() - performance.now();\n\t\t\tthis.importObject = {\n\t\t\t\t_gotest: {\n\t\t\t\t\tadd: (a, b) => a + b,\n\t\t\t\t},\n\t\t\t\tgojs: {\n\t\t\t\t\t// Go's SP does not change as long as no Go code is running. Some operations (e.g. calls, getters and setters)\n\t\t\t\t\t// may synchronously trigger a Go event handler. This makes Go code get executed in the middle of the imported\n\t\t\t\t\t// function. A goroutine can switch to a new stack if the current stack is too small (see morestack function).\n\t\t\t\t\t// This changes the SP, thus we have to update the SP used by the imported function.\n\n\t\t\t\t\t// func wasmExit(code int32)\n\t\t\t\t\t\"runtime.wasmExit\": (sp) => {\n\t\t\t\t\t\tsp >>>= 0;\n\t\t\t\t\t\tconst code = this.mem.getInt32(sp + 8, true);\n\t\t\t\t\t\tthis.exited = true;\n\t\t\t\t\t\tdelete this._inst;\n\t\t\t\t\t\tdelete this._values;\n\t\t\t\t\t\tdelete this._goRefCounts;\n\t\t\t\t\t\tdelete this._ids;\n\t\t\t\t\t\tdelete this._idPool;\n\t\t\t\t\t\tthis.exit(code);\n\t\t\t\t\t},\n\n\t\t\t\t\t// func wasmWrite(fd uintptr, p unsafe.Pointer, n int32)\n\t\t\t\t\t\"runtime.wasmWrite\": (sp) => {\n\t\t\t\t\t\tsp >>>= 0;\n\t\t\t\t\t\tconst fd = getInt64(sp + 8);\n\t\t\t\t\t\tconst p = getInt64(sp + 16);\n\t\t\t\t\t\tconst n = this.mem.getInt32(sp + 24, true);\n\t\t\t\t\t\tfs.writeSync(fd, new Uint8Array(this._inst.exports.mem.buffer, p, n));\n\t\t\t\t\t},\n\n\t\t\t\t\t// func resetMemoryDataView()\n\t\t\t\t\t\"runtime.resetMemoryDataView\": (sp) => {\n\t\t\t\t\t\tsp >>>= 0;\n\t\t\t\t\t\tthis.mem = new DataView(this._inst.exports.mem.buffer);\n\t\t\t\t\t},\n\n\t\t\t\t\t// func nanotime1() int64\n\t\t\t\t\t\"runtime.nanotime1\": (sp) => {\n\t\t\t\t\t\tsp >>>= 0;\n\t\t\t\t\t\tsetInt64(sp + 8, (timeOrigin + performance.now()) * 1000000);\n\t\t\t\t\t},\n\n\t\t\t\t\t// func walltime() (sec int64, nsec int32)\n\t\t\t\t\t\"runtime.walltime\": (sp) => {\n\t\t\t\t\t\tsp >>>= 0;\n\t\t\t\t\t\tconst msec = (new Date).getTime();\n\t\t\t\t\t\tsetInt64(sp + 8, msec / 1000);\n\t\t\t\t\t\tthis.mem.setInt32(sp + 16, (msec % 1000) * 1000000, true);\n\t\t\t\t\t},\n\n\t\t\t\t\t// func scheduleTimeoutEvent(delay int64) int32\n\t\t\t\t\t\"runtime.scheduleTimeoutEvent\": (sp) => {\n\t\t\t\t\t\tsp >>>= 0;\n\t\t\t\t\t\tconst id = this._nextCallbackTimeoutID;\n\t\t\t\t\t\tthis._nextCallbackTimeoutID++;\n\t\t\t\t\t\tthis._scheduledTimeouts.set(id, setTimeout(\n\t\t\t\t\t\t\t() => {\n\t\t\t\t\t\t\t\tthis._resume();\n\t\t\t\t\t\t\t\twhile (this._scheduledTimeouts.has(id)) {\n\t\t\t\t\t\t\t\t\t// for some reason Go failed to register the timeout event, log and try again\n\t\t\t\t\t\t\t\t\t// (temporary workaround for https://github.com/golang/go/issues/28975)\n\t\t\t\t\t\t\t\t\tconsole.warn(\"scheduleTimeoutEvent: missed timeout event\");\n\t\t\t\t\t\t\t\t\tthis._resume();\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\tgetInt64(sp + 8),\n\t\t\t\t\t\t));\n\t\t\t\t\t\tthis.mem.setInt32(sp + 16, id, true);\n\t\t\t\t\t},\n\n\t\t\t\t\t// func clearTimeoutEvent(id int32)\n\t\t\t\t\t\"runtime.clearTimeoutEvent\": (sp) => {\n\t\t\t\t\t\tsp >>>= 0;\n\t\t\t\t\t\tconst id = this.mem.getInt32(sp + 8, true);\n\t\t\t\t\t\tclearTimeout(this._scheduledTimeouts.get(id));\n\t\t\t\t\t\tthis._scheduledTimeouts.delete(id);\n\t\t\t\t\t},\n\n\t\t\t\t\t// func getRandomData(r []byte)\n\t\t\t\t\t\"runtime.getRandomData\": (sp) => {\n\t\t\t\t\t\tsp >>>= 0;\n\t\t\t\t\t\tcrypto.getRandomValues(loadSlice(sp + 8));\n\t\t\t\t\t},\n\n\t\t\t\t\t// func finalizeRef(v ref)\n\t\t\t\t\t\"syscall/js.finalizeRef\": (sp) => {\n\t\t\t\t\t\tsp >>>= 0;\n\t\t\t\t\t\tconst id = this.mem.getUint32(sp + 8, true);\n\t\t\t\t\t\tthis._goRefCounts[id]--;\n\t\t\t\t\t\tif (this._goRefCounts[id] === 0) {\n\t\t\t\t\t\t\tconst v = this._values[id];\n\t\t\t\t\t\t\tthis._values[id] = null;\n\t\t\t\t\t\t\tthis._ids.delete(v);\n\t\t\t\t\t\t\tthis._idPool.push(id);\n\t\t\t\t\t\t}\n\t\t\t\t\t},\n\n\t\t\t\t\t// func stringVal(value string) ref\n\t\t\t\t\t\"syscall/js.stringVal\": (sp) => {\n\t\t\t\t\t\tsp >>>= 0;\n\t\t\t\t\t\tstoreValue(sp + 24, loadString(sp + 8));\n\t\t\t\t\t},\n\n\t\t\t\t\t// func valueGet(v ref, p string) ref\n\t\t\t\t\t\"syscall/js.valueGet\": (sp) => {\n\t\t\t\t\t\tsp >>>= 0;\n\t\t\t\t\t\tconst result = Reflect.get(loadValue(sp + 8), loadString(sp + 16));\n\t\t\t\t\t\tsp = this._inst.exports.getsp() >>> 0; // see comment above\n\t\t\t\t\t\tstoreValue(sp + 32, result);\n\t\t\t\t\t},\n\n\t\t\t\t\t// func valueSet(v ref, p string, x ref)\n\t\t\t\t\t\"syscall/js.valueSet\": (sp) => {\n\t\t\t\t\t\tsp >>>= 0;\n\t\t\t\t\t\tReflect.set(loadValue(sp + 8), loadString(sp + 16), loadValue(sp + 32));\n\t\t\t\t\t},\n\n\t\t\t\t\t// func valueDelete(v ref, p string)\n\t\t\t\t\t\"syscall/js.valueDelete\": (sp) => {\n\t\t\t\t\t\tsp >>>= 0;\n\t\t\t\t\t\tReflect.deleteProperty(loadValue(sp + 8), loadString(sp + 16));\n\t\t\t\t\t},\n\n\t\t\t\t\t// func valueIndex(v ref, i int) ref\n\t\t\t\t\t\"syscall/js.valueIndex\": (sp) => {\n\t\t\t\t\t\tsp >>>= 0;\n\t\t\t\t\t\tstoreValue(sp + 24, Reflect.get(loadValue(sp + 8), getInt64(sp + 16)));\n\t\t\t\t\t},\n\n\t\t\t\t\t// valueSetIndex(v ref, i int, x ref)\n\t\t\t\t\t\"syscall/js.valueSetIndex\": (sp) => {\n\t\t\t\t\t\tsp >>>= 0;\n\t\t\t\t\t\tReflect.set(loadValue(sp + 8), getInt64(sp + 16), loadValue(sp + 24));\n\t\t\t\t\t},\n\n\t\t\t\t\t// func valueCall(v ref, m string, args []ref) (ref, bool)\n\t\t\t\t\t\"syscall/js.valueCall\": (sp) => {\n\t\t\t\t\t\tsp >>>= 0;\n\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\tconst v = loadValue(sp + 8);\n\t\t\t\t\t\t\tconst m = Reflect.get(v, loadString(sp + 16));\n\t\t\t\t\t\t\tconst args = loadSliceOfValues(sp + 32);\n\t\t\t\t\t\t\tconst result = Reflect.apply(m, v, args);\n\t\t\t\t\t\t\tsp = this._inst.exports.getsp() >>> 0; // see comment above\n\t\t\t\t\t\t\tstoreValue(sp + 56, result);\n\t\t\t\t\t\t\tthis.mem.setUint8(sp + 64, 1);\n\t\t\t\t\t\t} catch (err) {\n\t\t\t\t\t\t\tsp = this._inst.exports.getsp() >>> 0; // see comment above\n\t\t\t\t\t\t\tstoreValue(sp + 56, err);\n\t\t\t\t\t\t\tthis.mem.setUint8(sp + 64, 0);\n\t\t\t\t\t\t}\n\t\t\t\t\t},\n\n\t\t\t\t\t// func valueInvoke(v ref, args []ref) (ref, bool)\n\t\t\t\t\t\"syscall/js.valueInvoke\": (sp) => {\n\t\t\t\t\t\tsp >>>= 0;\n\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\tconst v = loadValue(sp + 8);\n\t\t\t\t\t\t\tconst args = loadSliceOfValues(sp + 16);\n\t\t\t\t\t\t\tconst result = Reflect.apply(v, undefined, args);\n\t\t\t\t\t\t\tsp = this._inst.exports.getsp() >>> 0; // see comment above\n\t\t\t\t\t\t\tstoreValue(sp + 40, result);\n\t\t\t\t\t\t\tthis.mem.setUint8(sp + 48, 1);\n\t\t\t\t\t\t} catch (err) {\n\t\t\t\t\t\t\tsp = this._inst.exports.getsp() >>> 0; // see comment above\n\t\t\t\t\t\t\tstoreValue(sp + 40, err);\n\t\t\t\t\t\t\tthis.mem.setUint8(sp + 48, 0);\n\t\t\t\t\t\t}\n\t\t\t\t\t},\n\n\t\t\t\t\t// func valueNew(v ref, args []ref) (ref, bool)\n\t\t\t\t\t\"syscall/js.valueNew\": (sp) => {\n\t\t\t\t\t\tsp >>>= 0;\n\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\tconst v = loadValue(sp + 8);\n\t\t\t\t\t\t\tconst args = loadSliceOfValues(sp + 16);\n\t\t\t\t\t\t\tconst result = Reflect.construct(v, args);\n\t\t\t\t\t\t\tsp = this._inst.exports.getsp() >>> 0; // see comment above\n\t\t\t\t\t\t\tstoreValue(sp + 40, result);\n\t\t\t\t\t\t\tthis.mem.setUint8(sp + 48, 1);\n\t\t\t\t\t\t} catch (err) {\n\t\t\t\t\t\t\tsp = this._inst.exports.getsp() >>> 0; // see comment above\n\t\t\t\t\t\t\tstoreValue(sp + 40, err);\n\t\t\t\t\t\t\tthis.mem.setUint8(sp + 48, 0);\n\t\t\t\t\t\t}\n\t\t\t\t\t},\n\n\t\t\t\t\t// func valueLength(v ref) int\n\t\t\t\t\t\"syscall/js.valueLength\": (sp) => {\n\t\t\t\t\t\tsp >>>= 0;\n\t\t\t\t\t\tsetInt64(sp + 16, parseInt(loadValue(sp + 8).length));\n\t\t\t\t\t},\n\n\t\t\t\t\t// valuePrepareString(v ref) (ref, int)\n\t\t\t\t\t\"syscall/js.valuePrepareString\": (sp) => {\n\t\t\t\t\t\tsp >>>= 0;\n\t\t\t\t\t\tconst str = encoder.encode(String(loadValue(sp + 8)));\n\t\t\t\t\t\tstoreValue(sp + 16, str);\n\t\t\t\t\t\tsetInt64(sp + 24, str.length);\n\t\t\t\t\t},\n\n\t\t\t\t\t// valueLoadString(v ref, b []byte)\n\t\t\t\t\t\"syscall/js.valueLoadString\": (sp) => {\n\t\t\t\t\t\tsp >>>= 0;\n\t\t\t\t\t\tconst str = loadValue(sp + 8);\n\t\t\t\t\t\tloadSlice(sp + 16).set(str);\n\t\t\t\t\t},\n\n\t\t\t\t\t// func valueInstanceOf(v ref, t ref) bool\n\t\t\t\t\t\"syscall/js.valueInstanceOf\": (sp) => {\n\t\t\t\t\t\tsp >>>= 0;\n\t\t\t\t\t\tthis.mem.setUint8(sp + 24, (loadValue(sp + 8) instanceof loadValue(sp + 16)) ? 1 : 0);\n\t\t\t\t\t},\n\n\t\t\t\t\t// func copyBytesToGo(dst []byte, src ref) (int, bool)\n\t\t\t\t\t\"syscall/js.copyBytesToGo\": (sp) => {\n\t\t\t\t\t\tsp >>>= 0;\n\t\t\t\t\t\tconst dst = loadSlice(sp + 8);\n\t\t\t\t\t\tconst src = loadValue(sp + 32);\n\t\t\t\t\t\tif (!(src instanceof Uint8Array || src instanceof Uint8ClampedArray)) {\n\t\t\t\t\t\t\tthis.mem.setUint8(sp + 48, 0);\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tconst toCopy = src.subarray(0, dst.length);\n\t\t\t\t\t\tdst.set(toCopy);\n\t\t\t\t\t\tsetInt64(sp + 40, toCopy.length);\n\t\t\t\t\t\tthis.mem.setUint8(sp + 48, 1);\n\t\t\t\t\t},\n\n\t\t\t\t\t// func copyBytesToJS(dst ref, src []byte) (int, bool)\n\t\t\t\t\t\"syscall/js.copyBytesToJS\": (sp) => {\n\t\t\t\t\t\tsp >>>= 0;\n\t\t\t\t\t\tconst dst = loadValue(sp + 8);\n\t\t\t\t\t\tconst src = loadSlice(sp + 16);\n\t\t\t\t\t\tif (!(dst instanceof Uint8Array || dst instanceof Uint8ClampedArray)) {\n\t\t\t\t\t\t\tthis.mem.setUint8(sp + 48, 0);\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tconst toCopy = src.subarray(0, dst.length);\n\t\t\t\t\t\tdst.set(toCopy);\n\t\t\t\t\t\tsetInt64(sp + 40, toCopy.length);\n\t\t\t\t\t\tthis.mem.setUint8(sp + 48, 1);\n\t\t\t\t\t},\n\n\t\t\t\t\t\"debug\": (value) => {\n\t\t\t\t\t\tconsole.log(value);\n\t\t\t\t\t},\n\t\t\t\t}\n\t\t\t};\n\t\t}\n\n\t\tasync run(instance) {\n\t\t\tif (!(instance instanceof WebAssembly.Instance)) {\n\t\t\t\tthrow new Error(\"Go.run: WebAssembly.Instance expected\");\n\t\t\t}\n\t\t\tthis._inst = instance;\n\t\t\tthis.mem = new DataView(this._inst.exports.mem.buffer);\n\t\t\tthis._values = [ // JS values that Go currently has references to, indexed by reference id\n\t\t\t\tNaN,\n\t\t\t\t0,\n\t\t\t\tnull,\n\t\t\t\ttrue,\n\t\t\t\tfalse,\n\t\t\t\tglobalThis,\n\t\t\t\tthis,\n\t\t\t];\n\t\t\tthis._goRefCounts = new Array(this._values.length).fill(Infinity); // number of references that Go has to a JS value, indexed by reference id\n\t\t\tthis._ids = new Map([ // mapping from JS values to reference ids\n\t\t\t\t[0, 1],\n\t\t\t\t[null, 2],\n\t\t\t\t[true, 3],\n\t\t\t\t[false, 4],\n\t\t\t\t[globalThis, 5],\n\t\t\t\t[this, 6],\n\t\t\t]);\n\t\t\tthis._idPool = [];   // unused ids that have been garbage collected\n\t\t\tthis.exited = false; // whether the Go program has exited\n\n\t\t\t// Pass command line arguments and environment variables to WebAssembly by writing them to the linear memory.\n\t\t\tlet offset = 4096;\n\n\t\t\tconst strPtr = (str) => {\n\t\t\t\tconst ptr = offset;\n\t\t\t\tconst bytes = encoder.encode(str + \"\\0\");\n\t\t\t\tnew Uint8Array(this.mem.buffer, offset, bytes.length).set(bytes);\n\t\t\t\toffset += bytes.length;\n\t\t\t\tif (offset % 8 !== 0) {\n\t\t\t\t\toffset += 8 - (offset % 8);\n\t\t\t\t}\n\t\t\t\treturn ptr;\n\t\t\t};\n\n\t\t\tconst argc = this.argv.length;\n\n\t\t\tconst argvPtrs = [];\n\t\t\tthis.argv.forEach((arg) => {\n\t\t\t\targvPtrs.push(strPtr(arg));\n\t\t\t});\n\t\t\targvPtrs.push(0);\n\n\t\t\tconst keys = Object.keys(this.env).sort();\n\t\t\tkeys.forEach((key) => {\n\t\t\t\targvPtrs.push(strPtr(`${key}=${this.env[key]}`));\n\t\t\t});\n\t\t\targvPtrs.push(0);\n\n\t\t\tconst argv = offset;\n\t\t\targvPtrs.forEach((ptr) => {\n\t\t\t\tthis.mem.setUint32(offset, ptr, true);\n\t\t\t\tthis.mem.setUint32(offset + 4, 0, true);\n\t\t\t\toffset += 8;\n\t\t\t});\n\n\t\t\t// The linker guarantees global data starts from at least wasmMinDataAddr.\n\t\t\t// Keep in sync with cmd/link/internal/ld/data.go:wasmMinDataAddr.\n\t\t\tconst wasmMinDataAddr = 4096 + 8192;\n\t\t\tif (offset >= wasmMinDataAddr) {\n\t\t\t\tthrow new Error(\"total length of command line and environment variables exceeds limit\");\n\t\t\t}\n\n\t\t\tthis._inst.exports.run(argc, argv);\n\t\t\tif (this.exited) {\n\t\t\t\tthis._resolveExitPromise();\n\t\t\t}\n\t\t\tawait this._exitPromise;\n\t\t}\n\n\t\t_resume() {\n\t\t\tif (this.exited) {\n\t\t\t\tthrow new Error(\"Go program has already exited\");\n\t\t\t}\n\t\t\tthis._inst.exports.resume();\n\t\t\tif (this.exited) {\n\t\t\t\tthis._resolveExitPromise();\n\t\t\t}\n\t\t}\n\n\t\t_makeFuncWrapper(id) {\n\t\t\tconst go = this;\n\t\t\treturn function () {\n\t\t\t\tconst event = { id: id, this: this, args: arguments };\n\t\t\t\tgo._pendingEvent = event;\n\t\t\t\tgo._resume();\n\t\t\t\treturn event.result;\n\t\t\t};\n\t\t}\n\t}\n})();\n", "export const whitespaceChars = new Set(\n  [\n    '\\n',\n    '\\t',\n    '\\r',\n    '\\f',\n    '\\v',\n    '\\u00a0',\n    '\\u1680',\n    '\\u2000',\n    '\\u200a',\n    '\\u2028',\n    '\\u2029',\n    '\\u202f',\n    '\\u205f',\n    '\\u3000',\n    '\\ufeff',\n  ].map((s) => s.charCodeAt(0)),\n)\n\nexport const pad = (str: string, count: number, isLeft = false, char = ' ') => {\n  if (str.length >= count) {\n    return str\n  }\n\n  const padding = char.repeat(count - str.length)\n  return isLeft ? padding + str : str + padding\n}\n\nexport const padRight = (str: string, count: number, char = ' ') => pad(str, count, false, char)\n\nexport const padLeft = (str: string, count: number, char = ' ') => pad(str, count, true, char)\n", "import { whitespaceChars, padRight } from './utils'\n\nconst WHITESPACE_PLACEHOLDER = 'W'.charCodeAt(0)\nconst ZERO_CHAR_PLACEHOLDER = '\u30FB'.charCodeAt(0)\nconst ROW_SEPARATOR = '\uFF5C'\n\nexport class MemoryInspector {\n  constructor(private readonly mem: WebAssembly.Memory) {}\n\n  /**\n   * Returns memory inspector from WebAssembly module instance.\n   *\n   * @param instance Module instance\n   */\n  static fromInstance(instance: WebAssembly.Instance) {\n    const { mem } = instance.exports\n    if (!mem) {\n      throw new ReferenceError('Missing exported symbol \"buffer\" in instance')\n    }\n\n    return new MemoryInspector(mem as WebAssembly.Memory)\n  }\n\n  dump(offset: number, count: number, colCount = 8) {\n    const view = new DataView(this.mem.buffer)\n\n    count = count < colCount ? colCount : count\n    let rowCount = Math.floor(count / colCount)\n    if (count % colCount > 0) {\n      rowCount++\n    }\n\n    let maxAddrLen = 0\n    const lines: Array<[string, string, string]> = []\n    for (let row = 0; row < rowCount; row++) {\n      const rowOffset = offset + row * colCount\n      const bytes: number[] = []\n      for (let i = 0; i < colCount; i++) {\n        const byte = view.getUint8(rowOffset + i)\n        bytes.push(byte)\n      }\n\n      const strAddr = rowOffset.toString(16)\n      const hexBytes = bytes.map((b) => padRight(b.toString(16), 2, '0')).join(' ')\n\n      const strBytes = String.fromCharCode(\n        ...bytes\n          .map((b) => (whitespaceChars.has(b) ? WHITESPACE_PLACEHOLDER : b))\n          .map((b) => (b === 0 ? ZERO_CHAR_PLACEHOLDER : b)),\n      )\n      lines.push([strAddr, hexBytes, strBytes])\n      if (maxAddrLen < strAddr.length) {\n        maxAddrLen = strAddr.length\n      }\n    }\n\n    return lines\n      .map(([addr, bytes, str]) => `${padRight(addr, maxAddrLen)} ${ROW_SEPARATOR} ${bytes} ${ROW_SEPARATOR} ${str}`)\n      .join('\\n')\n  }\n}\n", "export const toHex = (v: number) => v.toString(16)\nexport const fromHex = (v: string) => parseInt(v, 16)\n\n/**\n * Formats number to hex or parses number from hex string.\n * @param v\n */\nexport const hex = (v: number | bigint | string) => {\n  switch (typeof v) {\n    case 'number':\n      return toHex(v)\n    case 'bigint':\n      return toHex(Number(v))\n    case 'string':\n      return fromHex(v)\n    default:\n      throw new Error(`hex: invalid argument type ${typeof v}`)\n  }\n}\n\nexport interface DebugOptions {\n  debug?: boolean\n}\n\nexport const instantiateStreaming = async (resp: Response | PromiseLike<Response>, importObject) => {\n  const r: Response = resp instanceof Promise ? await resp : resp\n  if (r.status !== 200) {\n    throw new Error(\n      'Cannot instantiate WebAssembly streaming, invalid HTTP response: ' +\n        `'${r.status} ${r.statusText}' (URL: ${r.url})`,\n    )\n  }\n\n  if ('instantiateStreaming' in WebAssembly) {\n    return await WebAssembly.instantiateStreaming(r, importObject)\n  }\n\n  const source = await r.arrayBuffer()\n  return await WebAssembly.instantiate(source, importObject)\n}\n", "/**\n * Aligns memory address using provided alignment\n *\n * @param addr Address\n * @param alignment Alignment\n */\nexport const alignAddr = (addr: number, alignment: number) => {\n  // Calculate the offset required to align the address\n  const offset = alignment - (addr % alignment)\n\n  // Add the offset to the address to align it\n  return addr + offset\n}\n", "import {alignAddr} from \"./common\";\n\nexport interface WriteResult {\n  address: number\n  endOffset: number\n}\n\nexport interface ReadResult<T = any> extends WriteResult {\n  value: T\n}\n\nexport interface TypeDescriptor {\n  size: number\n  alignment: number\n  padding: number\n}\n\n/**\n * Base class for type read and write implementation.\n *\n * @abstract\n */\nexport abstract class AbstractTypeSpec<T = any> {\n  private _size = 0\n  private _align = 1\n  private _skip = 0\n  private readonly _name: string = ''\n\n  /**\n   * @param name Original type name.\n   * @param size Type size.\n   * @param align Type alignment.\n   * @param skip Number of bytes to skip.\n   */\n  protected constructor(name: string, size: number, align = 1, skip = 0) {\n    this._size = size\n    this._align = align\n    this._skip = skip\n    this._name = name\n  }\n\n  protected setTypeDescriptor({ size, alignment, padding }: TypeDescriptor) {\n    this._size = size\n    this._align = alignment\n    this._skip = padding\n  }\n\n  /**\n   * Number of bytes reserved after value contents.\n   * @returns {number}\n   */\n  get padding() {\n    return this._skip\n  }\n\n  /**\n   * Returns value type size.\n   * @returns {number}\n   */\n  get size() {\n    return this._size\n  }\n\n  /**\n   * @type {string}\n   */\n  get name() {\n    return this._name\n  }\n\n  /**\n   * Returns type alignment\n   * @returns {number}\n   */\n  get alignment() {\n    return this._align\n  }\n\n  /**\n   * Align pointer address\n   * @param addr\n   * @returns Aligned address\n   */\n  alignAddress(addr: number): number {\n    if (addr % this._align === 0) {\n      // Address is aligned\n      return addr\n    }\n\n    return alignAddr(addr, this._align)\n  }\n\n  /**\n   * Decodes a value from DataView at passed address and returns a value.\n   * Passed address should be aligned.\n   *\n   * Please consider `read()` for general-purpose use.\n   *\n   * @abstract\n   * @param view Memory view\n   * @param addr Address\n   * @returns {*}\n   */\n  decode(view: DataView, addr: number): T {\n    throw new Error(`${this.constructor.name}.decode: not implemented`)\n  }\n\n  /**\n   * Encodes and puts value to DataView at passed address.\n   * Passed address should be aligned.\n   *\n   * Please consider `write()` for general-purpose use.\n   *\n   * @abstract\n   * @param view Memory view\n   * @param addr Address\n   * @param {*} val\n   */\n  encode(view: DataView, addr: number, val: T) {\n    throw new Error(`${this.constructor.name}.encode: not implemented`)\n  }\n\n  /**\n   * Reads value at specified offset in memory and returns\n   * a value with end offset address.\n   *\n   * Passed offset address will be aligned before read.\n   *\n   * @param view Memory\n   * @param addr Stack pointer\n   * @param buff Original memory buffer\n   * @returns {ReadResult}\n   */\n  read(view: DataView, addr: number, buff: ArrayBufferLike): ReadResult<T> {\n    const address = this.alignAddress(addr)\n    const value = this.decode(view, address)\n    return {\n      value,\n      address,\n      endOffset: address + this.size + this.padding,\n    }\n  }\n\n  /**\n   * Encodes and writes a value to DataView at specifying address.\n   * Passed address will be aligned before write.\n   *\n   * @param view\n   * @param addr\n   * @param val\n   * @param buff Original memory buffer\n   * @returns {WriteResult}\n   */\n  write(view: DataView, addr: number, val: T, buff: ArrayBufferLike): WriteResult {\n    const address = this.alignAddress(addr)\n    this.encode(view, address, val)\n    return {\n      address,\n      endOffset: address + this.size + this.padding,\n    }\n  }\n}\n", "import {AbstractTypeSpec} from \"../spec\";\n\nexport class BooleanTypeSpec extends AbstractTypeSpec {\n  constructor() {\n    super('bool', 1, 1, 0)\n  }\n\n  decode(view, addr) {\n    const val = view.getUint8(addr)\n    return !!val\n  }\n\n  encode(view, addr, data) {\n    view.setUint8(addr, +data)\n  }\n}\n", "import {AbstractTypeSpec} from \"../spec\";\n\nconst MAX_INT32 = 4294967296\n\nexport class UInt64TypeSpec extends AbstractTypeSpec<boolean> {\n  constructor(name) {\n    super(name, 8, 8, 0)\n  }\n\n  decode(view, addr) {\n    const low = view.getUint32(addr, true)\n    const high = view.getInt32(addr + 4, true)\n\n    return low + high * MAX_INT32\n  }\n\n  encode(view, addr, val) {\n    view.setUint32(addr, val, true)\n    view.setUint32(addr + 4, Math.floor(val / MAX_INT32), true)\n  }\n}\n\nexport class Int64TypeSpec extends AbstractTypeSpec<number> {\n  constructor(name) {\n    super(name, 8, 8, 0)\n  }\n\n  decode(view, addr) {\n    const low = view.getUint32(addr, true)\n    const high = view.getInt32(addr + 4, true)\n\n    return low + high * MAX_INT32\n  }\n\n  encode(view, addr, val) {\n    view.setUint32(addr, val, true)\n    view.setUint32(addr + 4, Math.floor(val / MAX_INT32), true)\n  }\n}\n", "import {AbstractTypeSpec} from \"../spec\";\n\ninterface DataViewReader<T = number> {\n  call: (thisArg: DataView, address: number, leftEndian?: boolean) => T\n}\n\ninterface DataViewWriter<T = number> {\n  call: (thisArg: DataView, address: number, value: T, leftEndian?: boolean) => T\n}\n\nexport interface DataViewDescriptor<T = number> {\n  read: DataViewReader<T>\n  write: DataViewWriter<T>\n}\n\n/**\n * DataViewableTypeSpec is a type wrapper for numeric values that can be read\n * using raw DataView methods.\n */\nexport class DataViewableTypeSpec<T = number | bigint> extends AbstractTypeSpec<T> {\n  _readMethod: DataViewReader<T>\n  _writeMethod: DataViewWriter<T>\n\n  constructor(name, size: number, align: number, skip: number, rwObj: DataViewDescriptor<T>) {\n    super(name, size, align, skip)\n    this._readMethod = rwObj.read\n    this._writeMethod = rwObj.write\n  }\n\n  decode(view, addr): T {\n    return this._readMethod.call(view, addr, true)\n  }\n\n  encode(view, addr, data) {\n    this._writeMethod.call(view, addr, data, true)\n  }\n}\n", "\n// Common type aliases\nimport {BooleanTypeSpec} from \"./boolean\";\nimport {Int64TypeSpec, UInt64TypeSpec} from \"./uint64\";\nimport {DataViewableTypeSpec} from \"./dataview\";\n\nexport const Bool = new BooleanTypeSpec()\n// FIXME: fix UInt spec definitions\nexport const Int = new UInt64TypeSpec('int')\nexport const Int64 = new Int64TypeSpec('int64')\nexport const Uint = new UInt64TypeSpec('uint')\nexport const UintPtr = new UInt64TypeSpec('uintptr')\nexport const Byte = new DataViewableTypeSpec('byte', 1, 1, 0, {\n  // eslint-disable-next-line @typescript-eslint/unbound-method\n  read: DataView.prototype.getUint8,\n  // eslint-disable-next-line @typescript-eslint/unbound-method\n  write: DataView.prototype.setUint8,\n})\n\n// Go stores int8 with padding because minimal supported data type by assembly is uint32.\nexport const Uint8 = new DataViewableTypeSpec('uint8', 1, 1, 0, {\n  // eslint-disable-next-line @typescript-eslint/unbound-method\n  read: DataView.prototype.getUint8,\n  // eslint-disable-next-line @typescript-eslint/unbound-method\n  write: DataView.prototype.setUint8,\n})\n\nexport const Int8 = new DataViewableTypeSpec('int8', 1, 1, 3, {\n  // eslint-disable-next-line @typescript-eslint/unbound-method\n  read: DataView.prototype.getInt8,\n  // eslint-disable-next-line @typescript-eslint/unbound-method\n  write: DataView.prototype.setInt8,\n})\n\nexport const Uint32 = new DataViewableTypeSpec('uint32', 4, 4, 0, {\n  // eslint-disable-next-line @typescript-eslint/unbound-method\n  read: DataView.prototype.getUint32,\n  // eslint-disable-next-line @typescript-eslint/unbound-method\n  write: DataView.prototype.setUint32,\n})\n\nexport const Int32 = new DataViewableTypeSpec('int32', 4, 4, 0, {\n  // eslint-disable-next-line @typescript-eslint/unbound-method\n  read: DataView.prototype.getInt32,\n  // eslint-disable-next-line @typescript-eslint/unbound-method\n  write: DataView.prototype.setInt32,\n})\n\n// FIXME: replace BigInt decoding with manual\nexport const Uint64 = new DataViewableTypeSpec('uint64', 8, 8, 0, {\n  // eslint-disable-next-line @typescript-eslint/unbound-method\n  read: DataView.prototype.getBigUint64,\n  // eslint-disable-next-line @typescript-eslint/unbound-method\n  write: DataView.prototype.setBigUint64,\n})\n\nexport const Float32 = new DataViewableTypeSpec('float32', 4, 4, 0, {\n  // eslint-disable-next-line @typescript-eslint/unbound-method\n  read: DataView.prototype.getFloat32,\n  // eslint-disable-next-line @typescript-eslint/unbound-method\n  write: DataView.prototype.setFloat32,\n})\n\nexport const Float64 = new DataViewableTypeSpec('float64', 8, 8, 0, {\n  // eslint-disable-next-line @typescript-eslint/unbound-method\n  read: DataView.prototype.getFloat64,\n  // eslint-disable-next-line @typescript-eslint/unbound-method\n  write: DataView.prototype.setFloat64,\n})\n", "import { AbstractTypeSpec } from '../spec'\n\nexport interface AttributeDescriptor {\n  key: string\n  type: AbstractTypeSpec\n}\n\nexport class StructTypeSpec<T = object> extends AbstractTypeSpec {\n  private readonly _attributes: AttributeDescriptor[]\n  private readonly _firstAttr: AbstractTypeSpec\n\n  /**\n   *\n   * @param name Struct name\n   * @param {AttributeDescriptor[]} attrs attribute descriptors\n   */\n  constructor(name: string, attrs: AttributeDescriptor[]) {\n    super(name, 0, 0, 0)\n\n    if (attrs.length === 0) {\n      throw new ReferenceError(`${this.constructor.name}: missing struct attributes`)\n    }\n\n    const [firstElem] = attrs\n    const totalSize = attrs.map(({ type }) => type.size + type.padding).reduce((total, size) => total + size, 0)\n\n    this.setTypeDescriptor({\n      size: totalSize,\n      alignment: firstElem.type.alignment,\n      padding: 0,\n    })\n\n    this._attributes = attrs\n    this._firstAttr = firstElem.type\n  }\n\n  get alignment() {\n    return this._firstAttr.alignment\n  }\n\n  alignAddress(addr) {\n    return this._firstAttr.alignAddress(addr)\n  }\n\n  read(view, addr, buff: ArrayBufferLike) {\n    const address = this._firstAttr.alignAddress(addr)\n    let offset = address\n\n    const entries: Array<[string, any]> = []\n    for (const attr of this._attributes) {\n      const { key, type } = attr\n      const fieldAddr = type.alignAddress(offset)\n      const { value, endOffset } = type.read(view, fieldAddr, buff)\n      entries.push([key, value])\n      offset = endOffset\n    }\n\n    const structObj = Object.fromEntries(entries) as T\n    return {\n      address,\n      endOffset: offset,\n      value: this.valueFromStruct(buff, structObj),\n    }\n  }\n\n  write(view, addr, val, buff: ArrayBufferLike) {\n    const address = this._firstAttr.alignAddress(addr)\n    let offset = address\n    if (typeof val !== 'object') {\n      throw new ReferenceError(\n        `${this.constructor.name}.write: invalid value passed (${typeof val} ${val}). ` +\n          `Value should be an object with attributes (${this._attributes.map((a) => a.key).join(', ')}) ` +\n          `(struct ${this.name})`,\n      )\n    }\n\n    for (const attr of this._attributes) {\n      const { key, type } = attr\n      if (!(key in val)) {\n        throw new ReferenceError(\n          `${this.constructor.name}.write: missing object property \"${key}\" (struct ${this.name})`,\n        )\n      }\n\n      const fieldAddr = type.alignAddress(offset)\n      const { endOffset } = type.write(view, fieldAddr, val[key], buff)\n      offset = endOffset\n    }\n\n    return {\n      address,\n      endOffset: offset,\n    }\n  }\n\n  /**\n   * Returns an original value from struct.\n   *\n   * This method can be overloaded to return an original value\n   * pointed by an original struct.\n   *\n   * This is useful for obtaining an original slice or string contents\n   * from `reflect.StringHeader` or `reflect.SliceHeader` structs.\n   *\n   * @param buff Raw memory buffer\n   * @param structVal original struct value\n   * @protected\n   */\n  protected valueFromStruct(buff: ArrayBufferLike, structVal: T): any {\n    return structVal\n  }\n\n  encode(view, addr, val) {\n    throw new Error(`${this.constructor.name}.encode: not supported, use write() instead`)\n  }\n\n  decode(view, addr) {\n    throw new Error(`${this.constructor.name}.decode: not supported, use read() instead`)\n  }\n}\n\n/**\n * Constructs a new struct type\n * @param name Struct type name\n * @param fields Array of field definitions\n * @constructor\n */\nexport const Struct = <T = object>(name: string, fields: AttributeDescriptor[]) => new StructTypeSpec<T>(name, fields)\n", "import {AbstractTypeSpec} from \"../spec\";\n\nexport class ArrayTypeSpec extends AbstractTypeSpec {\n  private readonly _elemType: AbstractTypeSpec\n  private readonly _length = 0\n\n  /**\n   * @param {AbstractTypeSpec} elemType Array item type\n   * @param {number} length Array size\n   */\n  constructor(elemType, length) {\n    super(`[${length}]${elemType.name}`, (elemType.size + elemType.padding) * length, elemType.alignment, 0)\n\n    if (length < 0) {\n      throw new Error(`${this.constructor.name}: array item count should be greater than zero`)\n    }\n\n    this._elemType = elemType\n    this._length = length\n  }\n\n  /**\n   * Returns array element type.\n   * @returns {AbstractTypeSpec}\n   */\n  get elemType() {\n    return this._elemType\n  }\n\n  get length() {\n    return this._length\n  }\n\n  get alignment() {\n    return this._elemType.alignment\n  }\n\n  alignAddress(addr) {\n    return this._elemType.alignAddress(addr)\n  }\n\n  read(view, addr, buff) {\n    const address = this._elemType.alignAddress(addr)\n    let offset = address\n    const entries: any[] = []\n\n    for (let i = 0; i < this._length; i++) {\n      const elemAddr = this._elemType.alignAddress(offset)\n      const { value, endOffset } = this._elemType.read(view, elemAddr, buff)\n      entries.push(value)\n      offset = endOffset\n    }\n\n    return {\n      address,\n      endOffset: offset,\n      value: entries,\n    }\n  }\n\n  write(view, addr, val, buff) {\n    if (val.length !== this._length) {\n      throw new Error(`${this.constructor.name}.write: array length should be ${this._length} (got: ${val.length})`)\n    }\n\n    const address = this._elemType.alignAddress(addr)\n    let offset = address\n\n    for (let i = 0; i < this._length; i++) {\n      const itemAddr = this._elemType.alignAddress(offset)\n      const { endOffset } = this._elemType.write(view, itemAddr, val[i], buff)\n      offset = endOffset\n    }\n\n    return {\n      address,\n      endOffset: offset,\n    }\n  }\n\n  encode(view, addr, val) {\n    throw new Error(`${this.constructor.name}.encode: not supported, use write() instead`)\n  }\n\n  decode(view, addr) {\n    throw new Error(`${this.constructor.name}.decode: not supported, use read() instead`)\n  }\n}\n", "import { UintPtr, Int } from '../basic'\nimport { StructTypeSpec } from '../complex'\n\nexport const stringEncoder = new TextEncoder()\nexport const stringDecoder = new TextDecoder('utf-8')\n\nconst stringStructDescriptor = [\n  { key: 'data', type: UintPtr },\n  { key: 'len', type: Int },\n]\n\nexport interface StringHeader {\n  data: number\n  len: number\n}\n\nclass GoStringTypeSpec extends StructTypeSpec<StringHeader> {\n  constructor() {\n    super('string', stringStructDescriptor)\n  }\n\n  protected valueFromStruct(mem: ArrayBufferLike, structVal: StringHeader) {\n    const { data, len } = structVal\n    if (!len) {\n      return ''\n    }\n\n    return stringDecoder.decode(new DataView(mem, data, len))\n  }\n}\n\nexport const GoStringType = new GoStringTypeSpec()\nexport const StringHeaderType = new StructTypeSpec('reflect.StringHeader', stringStructDescriptor)\n", "import { GoStringType } from './string'\nimport { type AbstractTypeSpec } from '../spec'\nimport { type AttributeDescriptor, StructTypeSpec, ArrayTypeSpec } from '../complex'\nimport { Bool, Int, Int32, Int64, Uint, Uint32, Uint64, UintPtr } from '../basic'\n\nconst sliceHeaderAttrs: AttributeDescriptor[] = [\n  { key: 'data', type: UintPtr },\n  { key: 'len', type: Int },\n  { key: 'cap', type: Int },\n]\n\nexport const SliceHeaderType = new StructTypeSpec('reflect.SliceHeader', sliceHeaderAttrs)\n\n/**\n * SliceHeader represents a `reflect.SliceHeader` Go structure.\n */\nexport interface SliceHeader {\n  /**\n   * Array pointer\n   */\n  data: number\n\n  /**\n   * Slice length\n   */\n  len: number\n\n  /**\n   * Slice capacity\n   */\n  cap: number\n}\n\n/**\n * Represents a `[]T` Go slice struct reader.\n *\n * Returns an array of items during decode.\n */\nclass SliceTypeSpec<T = number> extends StructTypeSpec<SliceHeader> {\n  constructor(private readonly elemType: AbstractTypeSpec) {\n    super(`[]${elemType.name}`, sliceHeaderAttrs)\n  }\n\n  protected valueFromStruct(buff: ArrayBufferLike, header: SliceHeader): T[] {\n    const { data, len } = header\n    if (!data || !len) {\n      return [] as T[]\n    }\n\n    const t = new ArrayTypeSpec(this.elemType, len)\n    const { value } = t.read(new DataView(buff), data, buff)\n    return value as T[]\n  }\n}\n\n/**\n * Constructs a new slice type.\n * @param itemType Slice item type\n * @constructor\n */\nexport const SliceOf = <T = number>(itemType: AbstractTypeSpec) => new SliceTypeSpec<T>(itemType)\n\nexport const StringSlice = SliceOf<string>(GoStringType)\nexport const IntSlice = SliceOf<number>(Int)\nexport const Int32Slice = SliceOf<number>(Int32)\nexport const Int64Slice = SliceOf<number>(Int64)\nexport const UintSlice = SliceOf<number>(Uint)\nexport const Uint32Slice = SliceOf<number>(Uint32)\nexport const Uint64Slice = SliceOf<number>(Uint64)\nexport const UintPtrSlice = SliceOf<number>(UintPtr)\nexport const BoolSlice = SliceOf<boolean>(Bool)\n", "import { SliceOf, Struct, Uint32, UintPtr } from '../../../types'\n\nexport interface Value {\n  ref: number\n  gcPtr: number\n}\n\nexport interface Func {\n  value: Value\n  id: number\n}\n\n/**\n * `syscall/js.Value` type.\n */\nexport const ValueType = Struct('syscall/js.Value', [\n  { key: 'ref', type: UintPtr },\n  { key: 'gcPtr', type: UintPtr },\n])\n\n/**\n * `syscall/js.Func` type.\n */\nexport const FuncType = Struct('syscall/js.Func', [\n  { key: 'value', type: ValueType },\n  { key: 'id', type: Uint32 },\n])\n\nexport const ValueSlice = SliceOf<Value>(ValueType)\n", "import { SliceOf, Uint32 } from '../../../types'\nimport { type JSValuesTable } from '../../../wrapper/interface'\nimport {AbstractTypeSpec} from \"../../../types/spec\";\n\nexport const NAN_HEAD = 0x7ff80000\n\nenum TypeFlag {\n  Empty = 0,\n  Object = 1,\n  String = 2,\n  Symbol = 3,\n  Function = 4,\n}\n\n/**\n * Returns function type flag.\n * @param v\n */\nconst getTypeFlag = (v: any): TypeFlag => {\n  switch (typeof v) {\n    case 'object':\n      return v === null ? TypeFlag.Empty : TypeFlag.Object\n    case 'string':\n      return TypeFlag.String\n    case 'symbol':\n      return TypeFlag.Symbol\n    case 'function':\n      return TypeFlag.Function\n    default:\n      return TypeFlag.Empty\n  }\n}\n\n/**\n * RefKind is Ref type.\n */\nexport enum RefKind {\n  /**\n   * Invalid ref\n   */\n  Invalid,\n\n  /**\n   * Literal value\n   */\n  Value,\n\n  /**\n   * Reference to values table\n   */\n  ID,\n}\n\n/**\n * Ref is wrapper type around `syscall/js.ref` value.\n *\n * `js.ref` is a pointer to JavaScript value registered\n * in Go values mapping table (`Go._values`).\n */\nexport class Ref {\n  /**\n   * Ref constructor\n   * @param kind Reference source type, used to decode JS value from reference.\n   * @param ref Reference ID\n   * @param data Extra data for write on encode.\n   */\n  constructor(\n    public readonly kind: RefKind,\n    public readonly ref: number = -1,\n    public readonly data?: number[],\n  ) {}\n\n  /**\n   * Returns a resolved JS value from ref.\n   * @param values Values table\n   */\n  toValue(values: JSValuesTable) {\n    switch (this.kind) {\n      case RefKind.ID:\n        return values[this.ref]\n      case RefKind.Value:\n        return this.ref\n      default:\n        return undefined\n    }\n  }\n\n  /**\n   * Creates a new writable Ref from value and ref ID.\n   *\n   * @param v Value\n   * @param valId Ref ID\n   */\n  static fromValue(v: Exclude<any, Ref>, valId: number) {\n    // Copied from `storeValue`.\n    if (v instanceof Ref) {\n      throw new Error(`Ref.fromValue: value is already a Ref (${v.ref})`)\n    }\n\n    if (typeof v === 'number' && v !== 0) {\n      // See: storeValue - wasm_exec.js:129\n      const kind = isNaN(v) ? RefKind.ID : RefKind.Value\n      return new Ref(kind, valId, isNaN(v) ? [0, NAN_HEAD] : [v])\n    }\n\n    if (v === undefined) {\n      return new Ref(RefKind.Value, valId, [0])\n    }\n\n    const typeFlag = getTypeFlag(v)\n    const head = NAN_HEAD | typeFlag\n    return new Ref(RefKind.ID, valId, [valId, head])\n  }\n\n  /**\n   * Reports whenever value should be referenced\n   * by values table or can be stored as Ref value.\n   *\n   * Used by writer to decide if necessary to allocate\n   * a new ref id or not.\n   *\n   * @param v\n   */\n  static isReferenceableValue(v: Exclude<any, Ref>) {\n    if (typeof v === 'number' && v !== 0) {\n      return false\n    }\n\n    return v !== undefined\n  }\n}\n\nclass RefTypeSpec extends AbstractTypeSpec<Ref> {\n  constructor() {\n    super('syscall.js/ref', 8, 8, 0)\n  }\n\n  decode(view, addr): Ref {\n    const value = view.getFloat64(addr, true)\n    if (value === 0) {\n      return new Ref(RefKind.Invalid)\n    }\n\n    if (!isNaN(value)) {\n      return new Ref(RefKind.Value, value)\n    }\n\n    const id = view.getUint32(addr, true)\n    return new Ref(RefKind.ID, id)\n  }\n\n  encode(view: DataView, addr: number, ref: Ref) {\n    if (!ref.data?.length) {\n      throw new Error(\n        `${this.constructor.name}.encode: Ref value is not writable. ` +\n          `Ref should be created using Ref.fromValue() method.`,\n      )\n    }\n\n    // See: storeValue - wasm_exec.js:140\n    const [high, low] = ref.data\n    switch (ref.data.length) {\n      case 1:\n        view.setFloat64(addr, high, true)\n        return\n      case 2:\n        view.setUint32(addr, high, true)\n        view.setUint32(addr + Uint32.size, low, true)\n        return\n      default:\n        throw new Error(`${this.constructor.name}.encode: invalid Ref data size: ${ref.data.length}`)\n    }\n  }\n}\n\nexport const RefType = new RefTypeSpec()\nexport const RefSlice = SliceOf<Ref>(RefType)\n", "import type * as monaco from 'monaco-editor'\nimport '../lib/go/wasm_exec.js'\nimport {instantiateStreaming} from \"../lib/go\";\n\n// TODO breadchris should be dist\nexport const getWasmUrl = (name) => `/static/${name}@v1.wasm`\n\ntype JSONCallback = (rsp: string) => void\ntype CallArgs = [...any[], JSONCallback]\n\ninterface GoModule {\n  analyzeCode: (code: string, cb: JSONCallback) => void\n  runCode: (code: string, cb: JSONCallback) => void\n  exit: () => void\n}\n\ninterface AnalyzeResult {\n  hasErrors: boolean\n  markers: monaco.editor.IMarkerData[] | null\n}\n\nexport interface ParseRequest {\n  contents: string\n}\n\nexport interface ParseResponse {\n  error: string\n  functions: string[]\n}\n\nexport interface RunRequest {\n  func: string\n  code: string\n}\n\nexport interface RunResponse {\n  output: string\n  error: string\n}\n\nexport interface WrappedGoModule {\n  analyzeCode: (code: string) => Promise<AnalyzeResult>\n  runCode: (r: RunRequest) => Promise<RunResponse>\n  parseCode: (code: string) => Promise<ParseResponse>\n  exit: () => Promise<void>\n}\n\ninterface GoResponse<T = any> {\n  error: string\n  result: T\n}\n\nconst wrapModule = (mod: GoModule) => {\n  const wrapped = {\n    // eslint-disable-next-line no-useless-call\n    exit: () => mod.exit.call(mod),\n  }\n  // eslint-disable-next-line @typescript-eslint/no-unsafe-argument\n  Object.keys(mod)\n    .filter((k) => k !== 'exit')\n    .forEach((fnName) => {\n      wrapped[fnName] = async (...args) =>\n        await new Promise((resolve, reject) => {\n          const cb = (rawResp) => {\n            try {\n              const resp: GoResponse = JSON.parse(rawResp)\n              if (resp.error) {\n                reject(new Error(`${fnName}: ${resp.error}`))\n                return\n              }\n\n              resolve(resp.result)\n            } catch (ex) {\n              console.error(`analyzer: \"${fnName}\" returned and error`, ex)\n              reject(new Error(`${fnName}: ${ex}`))\n            }\n          }\n\n          const newArgs = args.concat(cb) as CallArgs\n          mod[fnName].apply(self, newArgs)\n        })\n    })\n  return wrapped as WrappedGoModule\n}\n\nexport const startAnalyzer = async (): Promise<WrappedGoModule> => {\n  const workerUrl = getWasmUrl('analyzer')\n  const go = new globalThis.Go()\n\n  // Pass the entrypoint via argv.\n  go.argv = ['js', 'onModuleInit']\n\n  const rsp = await fetch(workerUrl)\n  if (!rsp.ok) {\n    throw new Error(`Failed to fetch worker: ${rsp.status} ${rsp.statusText}`)\n  }\n\n  const { instance } = await instantiateStreaming(rsp, go.importObject)\n  return await new Promise((resolve, reject) => {\n    // Hook called by Go program\n    globalThis.onModuleInit = (goMod: GoModule) => {\n      console.log('analyzer: started')\n      const wrapped = wrapModule(goMod)\n      return resolve(wrapped)\n    }\n\n    go.run(instance).catch((err: Error) => {\n      reject(err)\n    })\n  })\n}\n", "import * as Comlink from 'comlink'\nimport {type WrappedGoModule, startAnalyzer, RunRequest, RunResponse, ParseRequest, ParseResponse} from './bootstrap'\nimport type * as monaco from 'monaco-editor'\n\nexport interface AnalyzeRequest {\n  fileName: string\n  contents: string\n  modelVersionId: number\n}\n\nexport interface AnalyzeResponse {\n  fileName: string\n  modelVersionId: number\n  markers: monaco.editor.IMarkerData[] | null\n}\n\n// TODO: refactor this together with the Go worker API\n\nconst appendModelVersion = (markers: AnalyzeResponse['markers'], modelVersionId: number) => {\n  if (!markers) {\n    return null\n  }\n\n  return markers.map((marker) => ({ ...marker, modelVersionId }))\n}\n\nexport class WorkerHandler {\n  private mod?: WrappedGoModule\n  private readonly initPromise = startAnalyzer()\n\n  private async getModule() {\n    this.mod ??= await this.initPromise\n    return this.mod\n  }\n\n  async runCode(r: RunRequest): Promise<RunResponse> {\n    const mod = await this.getModule()\n    try {\n        return await mod.runCode(r)\n    } catch (e) {\n        return {\n          output: '',\n          error: e.toString(),\n        }\n    }\n  }\n\n  async parseCode({ contents }: ParseRequest): Promise<ParseResponse> {\n    const mod = await this.getModule()\n    try {\n        return await mod.parseCode(contents)\n    } catch (e) {\n        return {\n          error: e.toString(),\n          functions: [],\n        }\n    }\n  }\n\n  async checkSyntaxErrors({ fileName, modelVersionId, contents }: AnalyzeRequest): Promise<AnalyzeResponse> {\n    const mod = await this.getModule()\n    const { markers } = await mod.analyzeCode(contents)\n    return {\n      fileName,\n      modelVersionId,\n      markers: appendModelVersion(markers, modelVersionId),\n    }\n  }\n}\n\nComlink.expose(new WorkerHandler())\n"],
  "mappings": "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",
  "names": ["obj", "returnValue", "proxy"]
}
