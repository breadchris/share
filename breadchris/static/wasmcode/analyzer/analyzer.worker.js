var X=Symbol("Comlink.proxy"),pe=Symbol("Comlink.endpoint"),he=Symbol("Comlink.releaseProxy"),W=Symbol("Comlink.finalizer"),k=Symbol("Comlink.thrown"),Z=t=>typeof t=="object"&&t!==null||typeof t=="function",ge={canHandle:t=>Z(t)&&t[X],serialize(t){let{port1:r,port2:n}=new MessageChannel;return U(t,r),[n,[n]]},deserialize(t){return t.start(),xe(t)}},ye={canHandle:t=>Z(t)&&k in t,serialize({value:t}){let r;return t instanceof Error?r={isError:!0,value:{message:t.message,name:t.name,stack:t.stack}}:r={isError:!1,value:t},[r,[]]},deserialize(t){throw t.isError?Object.assign(new Error(t.value.message),t.value):t.value}},Q=new Map([["proxy",ge],["throw",ye]]);function be(t,r){for(let n of t)if(r===n||n==="*"||n instanceof RegExp&&n.test(r))return!0;return!1}function U(t,r=globalThis,n=["*"]){r.addEventListener("message",function s(i){if(!i||!i.data)return;if(!be(n,i.origin)){console.warn(`Invalid origin '${i.origin}' for comlink proxy`);return}let{id:o,type:a,path:l}=Object.assign({path:[]},i.data),m=(i.data.argumentList||[]).map(T),u;try{let f=l.slice(0,-1).reduce((e,c)=>e[c],t),h=l.reduce((e,c)=>e[c],t);switch(a){case"GET":u=h;break;case"SET":f[l.slice(-1)[0]]=T(i.data.value),u=!0;break;case"APPLY":u=h.apply(f,m);break;case"CONSTRUCT":{let e=new h(...m);u=Ee(e)}break;case"ENDPOINT":{let{port1:e,port2:c}=new MessageChannel;U(t,c),u=Re(e,[e])}break;case"RELEASE":u=void 0;break;default:return}}catch(f){u={value:f,[k]:0}}Promise.resolve(u).catch(f=>({value:f,[k]:0})).then(f=>{let[h,e]=O(f);r.postMessage(Object.assign(Object.assign({},h),{id:o}),e),a==="RELEASE"&&(r.removeEventListener("message",s),ee(r),W in t&&typeof t[W]=="function"&&t[W]())}).catch(f=>{let[h,e]=O({value:new TypeError("Unserializable return value"),[k]:0});r.postMessage(Object.assign(Object.assign({},h),{id:o}),e)})}),r.start&&r.start()}function we(t){return t.constructor.name==="MessagePort"}function ee(t){we(t)&&t.close()}function xe(t,r){return z(t,[],r)}function V(t){if(t)throw new Error("Proxy has been released and is not useable")}function te(t){return A(t,{type:"RELEASE"}).then(()=>{ee(t)})}var D=new WeakMap,I="FinalizationRegistry"in globalThis&&new FinalizationRegistry(t=>{let r=(D.get(t)||0)-1;D.set(t,r),r===0&&te(t)});function _e(t,r){let n=(D.get(r)||0)+1;D.set(r,n),I&&I.register(t,r,t)}function Te(t){I&&I.unregister(t)}function z(t,r=[],n=function(){}){let s=!1,i=new Proxy(n,{get(o,a){if(V(s),a===he)return()=>{Te(i),te(t),s=!0};if(a==="then"){if(r.length===0)return{then:()=>i};let l=A(t,{type:"GET",path:r.map(m=>m.toString())}).then(T);return l.then.bind(l)}return z(t,[...r,a])},set(o,a,l){V(s);let[m,u]=O(l);return A(t,{type:"SET",path:[...r,a].map(f=>f.toString()),value:m},u).then(T)},apply(o,a,l){V(s);let m=r[r.length-1];if(m===pe)return A(t,{type:"ENDPOINT"}).then(T);if(m==="bind")return z(t,r.slice(0,-1));let[u,f]=Y(l);return A(t,{type:"APPLY",path:r.map(h=>h.toString()),argumentList:u},f).then(T)},construct(o,a){V(s);let[l,m]=Y(a);return A(t,{type:"CONSTRUCT",path:r.map(u=>u.toString()),argumentList:l},m).then(T)}});return _e(i,t),i}function Ae(t){return Array.prototype.concat.apply([],t)}function Y(t){let r=t.map(O);return[r.map(n=>n[0]),Ae(r.map(n=>n[1]))]}var re=new WeakMap;function Re(t,r){return re.set(t,r),t}function Ee(t){return Object.assign(t,{[X]:!0})}function O(t){for(let[r,n]of Q)if(n.canHandle(t)){let[s,i]=n.serialize(t);return[{type:"HANDLER",name:r,value:s},i]}return[{type:"RAW",value:t},re.get(t)||[]]}function T(t){switch(t.type){case"HANDLER":return Q.get(t.name).deserialize(t.value);case"RAW":return t.value}}function A(t,r,n){return new Promise(s=>{let i=ve();t.addEventListener("message",function o(a){!a.data||!a.data.id||a.data.id!==i||(t.removeEventListener("message",o),s(a.data))}),t.start&&t.start(),t.postMessage(Object.assign({id:i},r),n)})}function ve(){return new Array(4).fill(0).map(()=>Math.floor(Math.random()*Number.MAX_SAFE_INTEGER).toString(16)).join("-")}(()=>{let t=()=>{let s=new Error("not implemented");return s.code="ENOSYS",s};if(!globalThis.fs){let s="";globalThis.fs={constants:{O_WRONLY:-1,O_RDWR:-1,O_CREAT:-1,O_TRUNC:-1,O_APPEND:-1,O_EXCL:-1},writeSync(i,o){s+=n.decode(o);let a=s.lastIndexOf(`
`);return a!=-1&&(console.log(s.substring(0,a)),s=s.substring(a+1)),o.length},write(i,o,a,l,m,u){if(a!==0||l!==o.length||m!==null){u(t());return}let f=this.writeSync(i,o);u(null,f)},chmod(i,o,a){a(t())},chown(i,o,a,l){l(t())},close(i,o){o(t())},fchmod(i,o,a){a(t())},fchown(i,o,a,l){l(t())},fstat(i,o){o(t())},fsync(i,o){o(null)},ftruncate(i,o,a){a(t())},lchown(i,o,a,l){l(t())},link(i,o,a){a(t())},lstat(i,o){o(t())},mkdir(i,o,a){a(t())},open(i,o,a,l){l(t())},read(i,o,a,l,m,u){u(t())},readdir(i,o){o(t())},readlink(i,o){o(t())},rename(i,o,a){a(t())},rmdir(i,o){o(t())},stat(i,o){o(t())},symlink(i,o,a){a(t())},truncate(i,o,a){a(t())},unlink(i,o){o(t())},utimes(i,o,a,l){l(t())}}}if(globalThis.process||(globalThis.process={getuid(){return-1},getgid(){return-1},geteuid(){return-1},getegid(){return-1},getgroups(){throw t()},pid:-1,ppid:-1,umask(){throw t()},cwd(){throw t()},chdir(){throw t()}}),!globalThis.crypto)throw new Error("globalThis.crypto is not available, polyfill required (crypto.getRandomValues only)");if(!globalThis.performance)throw new Error("globalThis.performance is not available, polyfill required (performance.now only)");if(!globalThis.TextEncoder)throw new Error("globalThis.TextEncoder is not available, polyfill required");if(!globalThis.TextDecoder)throw new Error("globalThis.TextDecoder is not available, polyfill required");let r=new TextEncoder("utf-8"),n=new TextDecoder("utf-8");globalThis.Go=class{constructor(){this.argv=["js"],this.env={},this.exit=e=>{e!==0&&console.warn("exit code:",e)},this._exitPromise=new Promise(e=>{this._resolveExitPromise=e}),this._pendingEvent=null,this._scheduledTimeouts=new Map,this._nextCallbackTimeoutID=1;let s=(e,c)=>{this.mem.setUint32(e+0,c,!0),this.mem.setUint32(e+4,Math.floor(c/4294967296),!0)},i=(e,c)=>{this.mem.setUint32(e+0,c,!0)},o=e=>{let c=this.mem.getUint32(e+0,!0),d=this.mem.getInt32(e+4,!0);return c+d*4294967296},a=e=>{let c=this.mem.getFloat64(e,!0);if(c===0)return;if(!isNaN(c))return c;let d=this.mem.getUint32(e,!0);return this._values[d]},l=(e,c)=>{if(typeof c=="number"&&c!==0){if(isNaN(c)){this.mem.setUint32(e+4,2146959360,!0),this.mem.setUint32(e,0,!0);return}this.mem.setFloat64(e,c,!0);return}if(c===void 0){this.mem.setFloat64(e,0,!0);return}let p=this._ids.get(c);p===void 0&&(p=this._idPool.pop(),p===void 0&&(p=this._values.length),this._values[p]=c,this._goRefCounts[p]=0,this._ids.set(c,p)),this._goRefCounts[p]++;let b=0;switch(typeof c){case"object":c!==null&&(b=1);break;case"string":b=2;break;case"symbol":b=3;break;case"function":b=4;break}this.mem.setUint32(e+4,2146959360|b,!0),this.mem.setUint32(e,p,!0)},m=e=>{let c=o(e+0),d=o(e+8);return new Uint8Array(this._inst.exports.mem.buffer,c,d)},u=e=>{let c=o(e+0),d=o(e+8),p=new Array(d);for(let b=0;b<d;b++)p[b]=a(c+b*8);return p},f=e=>{let c=o(e+0),d=o(e+8);return n.decode(new DataView(this._inst.exports.mem.buffer,c,d))},h=Date.now()-performance.now();this.importObject={_gotest:{add:(e,c)=>e+c},gojs:{"runtime.wasmExit":e=>{e>>>=0;let c=this.mem.getInt32(e+8,!0);this.exited=!0,delete this._inst,delete this._values,delete this._goRefCounts,delete this._ids,delete this._idPool,this.exit(c)},"runtime.wasmWrite":e=>{e>>>=0;let c=o(e+8),d=o(e+16),p=this.mem.getInt32(e+24,!0);fs.writeSync(c,new Uint8Array(this._inst.exports.mem.buffer,d,p))},"runtime.resetMemoryDataView":e=>{e>>>=0,this.mem=new DataView(this._inst.exports.mem.buffer)},"runtime.nanotime1":e=>{e>>>=0,s(e+8,(h+performance.now())*1e6)},"runtime.walltime":e=>{e>>>=0;let c=new Date().getTime();s(e+8,c/1e3),this.mem.setInt32(e+16,c%1e3*1e6,!0)},"runtime.scheduleTimeoutEvent":e=>{e>>>=0;let c=this._nextCallbackTimeoutID;this._nextCallbackTimeoutID++,this._scheduledTimeouts.set(c,setTimeout(()=>{for(this._resume();this._scheduledTimeouts.has(c);)console.warn("scheduleTimeoutEvent: missed timeout event"),this._resume()},o(e+8))),this.mem.setInt32(e+16,c,!0)},"runtime.clearTimeoutEvent":e=>{e>>>=0;let c=this.mem.getInt32(e+8,!0);clearTimeout(this._scheduledTimeouts.get(c)),this._scheduledTimeouts.delete(c)},"runtime.getRandomData":e=>{e>>>=0,crypto.getRandomValues(m(e+8))},"syscall/js.finalizeRef":e=>{e>>>=0;let c=this.mem.getUint32(e+8,!0);if(this._goRefCounts[c]--,this._goRefCounts[c]===0){let d=this._values[c];this._values[c]=null,this._ids.delete(d),this._idPool.push(c)}},"syscall/js.stringVal":e=>{e>>>=0,l(e+24,f(e+8))},"syscall/js.valueGet":e=>{e>>>=0;let c=Reflect.get(a(e+8),f(e+16));e=this._inst.exports.getsp()>>>0,l(e+32,c)},"syscall/js.valueSet":e=>{e>>>=0,Reflect.set(a(e+8),f(e+16),a(e+32))},"syscall/js.valueDelete":e=>{e>>>=0,Reflect.deleteProperty(a(e+8),f(e+16))},"syscall/js.valueIndex":e=>{e>>>=0,l(e+24,Reflect.get(a(e+8),o(e+16)))},"syscall/js.valueSetIndex":e=>{e>>>=0,Reflect.set(a(e+8),o(e+16),a(e+24))},"syscall/js.valueCall":e=>{e>>>=0;try{let c=a(e+8),d=Reflect.get(c,f(e+16)),p=u(e+32),b=Reflect.apply(d,c,p);e=this._inst.exports.getsp()>>>0,l(e+56,b),this.mem.setUint8(e+64,1)}catch(c){e=this._inst.exports.getsp()>>>0,l(e+56,c),this.mem.setUint8(e+64,0)}},"syscall/js.valueInvoke":e=>{e>>>=0;try{let c=a(e+8),d=u(e+16),p=Reflect.apply(c,void 0,d);e=this._inst.exports.getsp()>>>0,l(e+40,p),this.mem.setUint8(e+48,1)}catch(c){e=this._inst.exports.getsp()>>>0,l(e+40,c),this.mem.setUint8(e+48,0)}},"syscall/js.valueNew":e=>{e>>>=0;try{let c=a(e+8),d=u(e+16),p=Reflect.construct(c,d);e=this._inst.exports.getsp()>>>0,l(e+40,p),this.mem.setUint8(e+48,1)}catch(c){e=this._inst.exports.getsp()>>>0,l(e+40,c),this.mem.setUint8(e+48,0)}},"syscall/js.valueLength":e=>{e>>>=0,s(e+16,parseInt(a(e+8).length))},"syscall/js.valuePrepareString":e=>{e>>>=0;let c=r.encode(String(a(e+8)));l(e+16,c),s(e+24,c.length)},"syscall/js.valueLoadString":e=>{e>>>=0;let c=a(e+8);m(e+16).set(c)},"syscall/js.valueInstanceOf":e=>{e>>>=0,this.mem.setUint8(e+24,a(e+8)instanceof a(e+16)?1:0)},"syscall/js.copyBytesToGo":e=>{e>>>=0;let c=m(e+8),d=a(e+32);if(!(d instanceof Uint8Array||d instanceof Uint8ClampedArray)){this.mem.setUint8(e+48,0);return}let p=d.subarray(0,c.length);c.set(p),s(e+40,p.length),this.mem.setUint8(e+48,1)},"syscall/js.copyBytesToJS":e=>{e>>>=0;let c=a(e+8),d=m(e+16);if(!(c instanceof Uint8Array||c instanceof Uint8ClampedArray)){this.mem.setUint8(e+48,0);return}let p=d.subarray(0,c.length);c.set(p),s(e+40,p.length),this.mem.setUint8(e+48,1)},debug:e=>{console.log(e)}}}}async run(s){if(!(s instanceof WebAssembly.Instance))throw new Error("Go.run: WebAssembly.Instance expected");this._inst=s,this.mem=new DataView(this._inst.exports.mem.buffer),this._values=[NaN,0,null,!0,!1,globalThis,this],this._goRefCounts=new Array(this._values.length).fill(1/0),this._ids=new Map([[0,1],[null,2],[!0,3],[!1,4],[globalThis,5],[this,6]]),this._idPool=[],this.exited=!1;let i=4096,o=h=>{let e=i,c=r.encode(h+"\0");return new Uint8Array(this.mem.buffer,i,c.length).set(c),i+=c.length,i%8!==0&&(i+=8-i%8),e},a=this.argv.length,l=[];this.argv.forEach(h=>{l.push(o(h))}),l.push(0),Object.keys(this.env).sort().forEach(h=>{l.push(o(`${h}=${this.env[h]}`))}),l.push(0);let u=i;if(l.forEach(h=>{this.mem.setUint32(i,h,!0),this.mem.setUint32(i+4,0,!0),i+=8}),i>=12288)throw new Error("total length of command line and environment variables exceeds limit");this._inst.exports.run(a,u),this.exited&&this._resolveExitPromise(),await this._exitPromise}_resume(){if(this.exited)throw new Error("Go program has already exited");this._inst.exports.resume(),this.exited&&this._resolveExitPromise()}_makeFuncWrapper(s){let i=this;return function(){let o={id:s,this:this,args:arguments};return i._pendingEvent=o,i._resume(),o.result}}}})();var Ve=new Set([`
`,"	","\r","\f","\v","\xA0","\u1680","\u2000","\u200A","\u2028","\u2029","\u202F","\u205F","\u3000","\uFEFF"].map(t=>t.charCodeAt(0)));var N=async(t,r)=>{let n=t instanceof Promise?await t:t;if(n.status!==200)throw new Error(`Cannot instantiate WebAssembly streaming, invalid HTTP response: '${n.status} ${n.statusText}' (URL: ${n.url})`);if("instantiateStreaming"in WebAssembly)return await WebAssembly.instantiateStreaming(n,r);let s=await n.arrayBuffer();return await WebAssembly.instantiate(s,r)};var se=(t,r)=>{let n=r-t%r;return t+n};var g=class{_size=0;_align=1;_skip=0;_name="";constructor(r,n,s=1,i=0){this._size=n,this._align=s,this._skip=i,this._name=r}setTypeDescriptor({size:r,alignment:n,padding:s}){this._size=r,this._align=n,this._skip=s}get padding(){return this._skip}get size(){return this._size}get name(){return this._name}get alignment(){return this._align}alignAddress(r){return r%this._align===0?r:se(r,this._align)}decode(r,n){throw new Error(`${this.constructor.name}.decode: not implemented`)}encode(r,n,s){throw new Error(`${this.constructor.name}.encode: not implemented`)}read(r,n,s){let i=this.alignAddress(n);return{value:this.decode(r,i),address:i,endOffset:i+this.size+this.padding}}write(r,n,s,i){let o=this.alignAddress(n);return this.encode(r,o,s),{address:o,endOffset:o+this.size+this.padding}}};var C=class extends g{constructor(){super("bool",1,1,0)}decode(r,n){return!!r.getUint8(n)}encode(r,n,s){r.setUint8(n,+s)}};var P=4294967296,R=class extends g{constructor(r){super(r,8,8,0)}decode(r,n){let s=r.getUint32(n,!0),i=r.getInt32(n+4,!0);return s+i*P}encode(r,n,s){r.setUint32(n,s,!0),r.setUint32(n+4,Math.floor(s/P),!0)}},$=class extends g{constructor(r){super(r,8,8,0)}decode(r,n){let s=r.getUint32(n,!0),i=r.getInt32(n+4,!0);return s+i*P}encode(r,n,s){r.setUint32(n,s,!0),r.setUint32(n+4,Math.floor(s/P),!0)}};var w=class extends g{_readMethod;_writeMethod;constructor(r,n,s,i,o){super(r,n,s,i),this._readMethod=o.read,this._writeMethod=o.write}decode(r,n){return this._readMethod.call(r,n,!0)}encode(r,n,s){this._writeMethod.call(r,n,s,!0)}};var F=new C,E=new R("int"),oe=new $("int64"),ie=new R("uint"),_=new R("uintptr"),ot=new w("byte",1,1,0,{read:DataView.prototype.getUint8,write:DataView.prototype.setUint8}),ke=new w("uint8",1,1,0,{read:DataView.prototype.getUint8,write:DataView.prototype.setUint8}),it=new w("int8",1,1,3,{read:DataView.prototype.getInt8,write:DataView.prototype.setInt8}),v=new w("uint32",4,4,0,{read:DataView.prototype.getUint32,write:DataView.prototype.setUint32}),G=new w("int32",4,4,0,{read:DataView.prototype.getInt32,write:DataView.prototype.setInt32}),ae=new w("uint64",8,8,0,{read:DataView.prototype.getBigUint64,write:DataView.prototype.setBigUint64}),at=new w("float32",4,4,0,{read:DataView.prototype.getFloat32,write:DataView.prototype.setFloat32}),ct=new w("float64",8,8,0,{read:DataView.prototype.getFloat64,write:DataView.prototype.setFloat64});var x=class extends g{_attributes;_firstAttr;constructor(r,n){if(super(r,0,0,0),n.length===0)throw new ReferenceError(`${this.constructor.name}: missing struct attributes`);let[s]=n,i=n.map(({type:o})=>o.size+o.padding).reduce((o,a)=>o+a,0);this.setTypeDescriptor({size:i,alignment:s.type.alignment,padding:0}),this._attributes=n,this._firstAttr=s.type}get alignment(){return this._firstAttr.alignment}alignAddress(r){return this._firstAttr.alignAddress(r)}read(r,n,s){let i=this._firstAttr.alignAddress(n),o=i,a=[];for(let m of this._attributes){let{key:u,type:f}=m,h=f.alignAddress(o),{value:e,endOffset:c}=f.read(r,h,s);a.push([u,e]),o=c}let l=Object.fromEntries(a);return{address:i,endOffset:o,value:this.valueFromStruct(s,l)}}write(r,n,s,i){let o=this._firstAttr.alignAddress(n),a=o;if(typeof s!="object")throw new ReferenceError(`${this.constructor.name}.write: invalid value passed (${typeof s} ${s}). Value should be an object with attributes (${this._attributes.map(l=>l.key).join(", ")}) (struct ${this.name})`);for(let l of this._attributes){let{key:m,type:u}=l;if(!(m in s))throw new ReferenceError(`${this.constructor.name}.write: missing object property "${m}" (struct ${this.name})`);let f=u.alignAddress(a),{endOffset:h}=u.write(r,f,s[m],i);a=h}return{address:o,endOffset:a}}valueFromStruct(r,n){return n}encode(r,n,s){throw new Error(`${this.constructor.name}.encode: not supported, use write() instead`)}decode(r,n){throw new Error(`${this.constructor.name}.decode: not supported, use read() instead`)}},L=(t,r)=>new x(t,r);var j=class extends g{_elemType;_length=0;constructor(r,n){if(super(`[${n}]${r.name}`,(r.size+r.padding)*n,r.alignment,0),n<0)throw new Error(`${this.constructor.name}: array item count should be greater than zero`);this._elemType=r,this._length=n}get elemType(){return this._elemType}get length(){return this._length}get alignment(){return this._elemType.alignment}alignAddress(r){return this._elemType.alignAddress(r)}read(r,n,s){let i=this._elemType.alignAddress(n),o=i,a=[];for(let l=0;l<this._length;l++){let m=this._elemType.alignAddress(o),{value:u,endOffset:f}=this._elemType.read(r,m,s);a.push(u),o=f}return{address:i,endOffset:o,value:a}}write(r,n,s,i){if(s.length!==this._length)throw new Error(`${this.constructor.name}.write: array length should be ${this._length} (got: ${s.length})`);let o=this._elemType.alignAddress(n),a=o;for(let l=0;l<this._length;l++){let m=this._elemType.alignAddress(a),{endOffset:u}=this._elemType.write(r,m,s[l],i);a=u}return{address:o,endOffset:a}}encode(r,n,s){throw new Error(`${this.constructor.name}.encode: not supported, use write() instead`)}decode(r,n){throw new Error(`${this.constructor.name}.decode: not supported, use read() instead`)}};var Rt=new TextEncoder,De=new TextDecoder("utf-8"),ce=[{key:"data",type:_},{key:"len",type:E}],H=class extends x{constructor(){super("string",ce)}valueFromStruct(r,n){let{data:s,len:i}=n;return i?De.decode(new DataView(r,s,i)):""}},B=new H,Et=new x("reflect.StringHeader",ce);var le=[{key:"data",type:_},{key:"len",type:E},{key:"cap",type:E}],Dt=new x("reflect.SliceHeader",le),q=class extends x{constructor(n){super(`[]${n.name}`,le);this.elemType=n}valueFromStruct(n,s){let{data:i,len:o}=s;if(!i||!o)return[];let a=new j(this.elemType,o),{value:l}=a.read(new DataView(n),i,n);return l}},y=t=>new q(t),It=y(B),Ot=y(E),Ut=y(G),Ct=y(oe),Pt=y(ie),$t=y(v),jt=y(ae),Mt=y(_),Wt=y(F);var ue=L("syscall/js.Value",[{key:"ref",type:_},{key:"gcPtr",type:_}]),Yt=L("syscall/js.Func",[{key:"value",type:ue},{key:"id",type:v}]),Xt=y(ue);var me=2146959360;var Ie=t=>{switch(typeof t){case"object":return t===null?0:1;case"string":return 2;case"symbol":return 3;case"function":return 4;default:return 0}};var S=class t{constructor(r,n=-1,s){this.kind=r;this.ref=n;this.data=s}toValue(r){switch(this.kind){case 2:return r[this.ref];case 1:return this.ref;default:return}}static fromValue(r,n){if(r instanceof t)throw new Error(`Ref.fromValue: value is already a Ref (${r.ref})`);if(typeof r=="number"&&r!==0){let o=isNaN(r)?2:1;return new t(o,n,isNaN(r)?[0,me]:[r])}if(r===void 0)return new t(1,n,[0]);let s=Ie(r),i=me|s;return new t(2,n,[n,i])}static isReferenceableValue(r){return typeof r=="number"&&r!==0?!1:r!==void 0}},J=class extends g{constructor(){super("syscall.js/ref",8,8,0)}decode(r,n){let s=r.getFloat64(n,!0);if(s===0)return new S(0);if(!isNaN(s))return new S(1,s);let i=r.getUint32(n,!0);return new S(2,i)}encode(r,n,s){if(!s.data?.length)throw new Error(`${this.constructor.name}.encode: Ref value is not writable. Ref should be created using Ref.fromValue() method.`);let[i,o]=s.data;switch(s.data.length){case 1:r.setFloat64(n,i,!0);return;case 2:r.setUint32(n,i,!0),r.setUint32(n+v.size,o,!0);return;default:throw new Error(`${this.constructor.name}.encode: invalid Ref data size: ${s.data.length}`)}}},M=new J,fe=y(M);var Ce=t=>`/static/${t}@v1.wasm`,Pe=t=>{let r={exit:()=>t.exit.call(t)};return Object.keys(t).filter(n=>n!=="exit").forEach(n=>{r[n]=async(...s)=>await new Promise((i,o)=>{let a=m=>{try{let u=JSON.parse(m);if(u.error){o(new Error(`${n}: ${u.error}`));return}i(u.result)}catch(u){console.error(`analyzer: "${n}" returned and error`,u),o(new Error(`${n}: ${u}`))}},l=s.concat(a);t[n].apply(self,l)})}),r},de=async()=>{let t=Ce("analyzer"),r=new globalThis.Go;r.argv=["js","onModuleInit"];let n=await fetch(t);if(!n.ok)throw new Error(`Failed to fetch worker: ${n.status} ${n.statusText}`);let{instance:s}=await N(n,r.importObject);return await new Promise((i,o)=>{globalThis.onModuleInit=a=>{console.log("analyzer: started");let l=Pe(a);return i(l)},r.run(s).catch(a=>{o(a)})})};var $e=(t,r)=>t?t.map(n=>({...n,modelVersionId:r})):null,K=class{mod;initPromise=de();async getModule(){return this.mod??=await this.initPromise,this.mod}async runCode(r){let n=await this.getModule();try{return await n.runCode(r)}catch(s){return{output:"",error:s.toString()}}}async parseCode({contents:r}){let n=await this.getModule();try{return await n.parseCode(r)}catch(s){return{error:s.toString(),functions:[]}}}async checkSyntaxErrors({fileName:r,modelVersionId:n,contents:s}){let i=await this.getModule(),{markers:o}=await i.analyzeCode(s);return{fileName:r,modelVersionId:n,markers:$e(o,n)}}};U(new K);export{K as WorkerHandler};
/*! Bundled license information:

comlink/dist/esm/comlink.mjs:
  (**
   * @license
   * Copyright 2019 Google LLC
   * SPDX-License-Identifier: Apache-2.0
   *)
*/
//# sourceMappingURL=data:application/json;base64,
