{
  "version": 3,
  "sources": ["../../node_modules/hast-util-parse-selector/lib/index.js", "../../node_modules/hastscript/lib/core.js", "../../node_modules/hastscript/lib/html.js", "../../node_modules/hastscript/lib/svg-case-sensitive-tag-names.js", "../../node_modules/hastscript/lib/svg.js", "../../node_modules/web-namespaces/index.js"],
  "sourcesContent": ["/**\n * @typedef {import('hast').Properties} Properties\n * @typedef {import('hast').Element} Element\n */\n\nconst search = /[#.]/g\n\n/**\n * Create a hast element from a simple CSS selector.\n *\n * @template {string} Selector\n *   Type of selector.\n * @template {string} [DefaultTagName='div']\n *   Type of default tag name.\n * @param {Selector | null | undefined} [selector]\n *   Simple CSS selector.\n *\n *   Can contain a tag name (`foo`), classes (`.bar`), and an ID (`#baz`).\n *   Multiple classes are allowed.\n *   Uses the last ID if multiple IDs are found.\n * @param {DefaultTagName | null | undefined} [defaultTagName='div']\n *   Tag name to use if `selector` does not specify one (default: `'div'`).\n * @returns {Element & {tagName: import('./extract.js').ExtractTagName<Selector, DefaultTagName>}}\n *   Built element.\n */\nexport function parseSelector(selector, defaultTagName) {\n  const value = selector || ''\n  /** @type {Properties} */\n  const props = {}\n  let start = 0\n  /** @type {string | undefined} */\n  let previous\n  /** @type {string | undefined} */\n  let tagName\n\n  while (start < value.length) {\n    search.lastIndex = start\n    const match = search.exec(value)\n    const subvalue = value.slice(start, match ? match.index : value.length)\n\n    if (subvalue) {\n      if (!previous) {\n        tagName = subvalue\n      } else if (previous === '#') {\n        props.id = subvalue\n      } else if (Array.isArray(props.className)) {\n        props.className.push(subvalue)\n      } else {\n        props.className = [subvalue]\n      }\n\n      start += subvalue.length\n    }\n\n    if (match) {\n      previous = match[0]\n      start++\n    }\n  }\n\n  return {\n    type: 'element',\n    // @ts-expect-error: fine.\n    tagName: tagName || defaultTagName || 'div',\n    properties: props,\n    children: []\n  }\n}\n", "/**\n * @typedef {import('hast').Root} Root\n * @typedef {import('hast').Content} Content\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').Properties} Properties\n * @typedef {import('property-information').Info} Info\n * @typedef {import('property-information').Schema} Schema\n */\n\n/**\n * @typedef {Content | Root} Node\n *   Any concrete `hast` node.\n * @typedef {Root | Element} HResult\n *   Result from a `h` (or `s`) call.\n *\n * @typedef {string | number} HStyleValue\n *   Value for a CSS style field.\n * @typedef {Record<string, HStyleValue>} HStyle\n *   Supported value of a `style` prop.\n * @typedef {string | number | boolean | null | undefined} HPrimitiveValue\n *   Primitive property value.\n * @typedef {Array<string | number>} HArrayValue\n *   List of property values for space- or comma separated values (such as `className`).\n * @typedef {HPrimitiveValue | HArrayValue} HPropertyValue\n *   Primitive value or list value.\n * @typedef {{[property: string]: HPropertyValue | HStyle}} HProperties\n *   Acceptable value for element properties.\n *\n * @typedef {string | number | null | undefined} HPrimitiveChild\n *   Primitive children, either ignored (nullish), or turned into text nodes.\n * @typedef {Array<Node | HPrimitiveChild>} HArrayChild\n *   List of children.\n * @typedef {Node | HPrimitiveChild | HArrayChild} HChild\n *   Acceptable child value.\n */\n\nimport {find, normalize} from 'property-information'\nimport {parseSelector} from 'hast-util-parse-selector'\nimport {parse as spaces} from 'space-separated-tokens'\nimport {parse as commas} from 'comma-separated-tokens'\n\nconst buttonTypes = new Set(['menu', 'submit', 'reset', 'button'])\n\nconst own = {}.hasOwnProperty\n\n/**\n * @param {Schema} schema\n * @param {string} defaultTagName\n * @param {Array<string>} [caseSensitive]\n */\nexport function core(schema, defaultTagName, caseSensitive) {\n  const adjust = caseSensitive && createAdjustMap(caseSensitive)\n\n  const h =\n    /**\n     * @type {{\n     *   (): Root\n     *   (selector: null | undefined, ...children: Array<HChild>): Root\n     *   (selector: string, properties?: HProperties, ...children: Array<HChild>): Element\n     *   (selector: string, ...children: Array<HChild>): Element\n     * }}\n     */\n    (\n      /**\n       * Hyperscript compatible DSL for creating virtual hast trees.\n       *\n       * @param {string | null} [selector]\n       * @param {HProperties | HChild} [properties]\n       * @param {Array<HChild>} children\n       * @returns {HResult}\n       */\n      function (selector, properties, ...children) {\n        let index = -1\n        /** @type {HResult} */\n        let node\n\n        if (selector === undefined || selector === null) {\n          node = {type: 'root', children: []}\n          // @ts-expect-error Properties are not supported for roots.\n          children.unshift(properties)\n        } else {\n          node = parseSelector(selector, defaultTagName)\n          // Normalize the name.\n          node.tagName = node.tagName.toLowerCase()\n          if (adjust && own.call(adjust, node.tagName)) {\n            node.tagName = adjust[node.tagName]\n          }\n\n          // Handle props.\n          if (isProperties(properties, node.tagName)) {\n            /** @type {string} */\n            let key\n\n            for (key in properties) {\n              if (own.call(properties, key)) {\n                // @ts-expect-error `node.properties` is set.\n                addProperty(schema, node.properties, key, properties[key])\n              }\n            }\n          } else {\n            children.unshift(properties)\n          }\n        }\n\n        // Handle children.\n        while (++index < children.length) {\n          addChild(node.children, children[index])\n        }\n\n        if (node.type === 'element' && node.tagName === 'template') {\n          node.content = {type: 'root', children: node.children}\n          node.children = []\n        }\n\n        return node\n      }\n    )\n\n  return h\n}\n\n/**\n * @param {HProperties | HChild} value\n * @param {string} name\n * @returns {value is HProperties}\n */\nfunction isProperties(value, name) {\n  if (\n    value === null ||\n    value === undefined ||\n    typeof value !== 'object' ||\n    Array.isArray(value)\n  ) {\n    return false\n  }\n\n  if (name === 'input' || !value.type || typeof value.type !== 'string') {\n    return true\n  }\n\n  if ('children' in value && Array.isArray(value.children)) {\n    return false\n  }\n\n  if (name === 'button') {\n    return buttonTypes.has(value.type.toLowerCase())\n  }\n\n  return !('value' in value)\n}\n\n/**\n * @param {Schema} schema\n * @param {Properties} properties\n * @param {string} key\n * @param {HStyle | HPropertyValue} value\n * @returns {void}\n */\nfunction addProperty(schema, properties, key, value) {\n  const info = find(schema, key)\n  let index = -1\n  /** @type {HPropertyValue} */\n  let result\n\n  // Ignore nullish and NaN values.\n  if (value === undefined || value === null) return\n\n  if (typeof value === 'number') {\n    // Ignore NaN.\n    if (Number.isNaN(value)) return\n\n    result = value\n  }\n  // Booleans.\n  else if (typeof value === 'boolean') {\n    result = value\n  }\n  // Handle list values.\n  else if (typeof value === 'string') {\n    if (info.spaceSeparated) {\n      result = spaces(value)\n    } else if (info.commaSeparated) {\n      result = commas(value)\n    } else if (info.commaOrSpaceSeparated) {\n      result = spaces(commas(value).join(' '))\n    } else {\n      result = parsePrimitive(info, info.property, value)\n    }\n  } else if (Array.isArray(value)) {\n    result = value.concat()\n  } else {\n    result = info.property === 'style' ? style(value) : String(value)\n  }\n\n  if (Array.isArray(result)) {\n    /** @type {Array<string | number>} */\n    const finalResult = []\n\n    while (++index < result.length) {\n      // @ts-expect-error Assume no booleans in array.\n      finalResult[index] = parsePrimitive(info, info.property, result[index])\n    }\n\n    result = finalResult\n  }\n\n  // Class names (which can be added both on the `selector` and here).\n  if (info.property === 'className' && Array.isArray(properties.className)) {\n    // @ts-expect-error Assume no booleans in `className`.\n    result = properties.className.concat(result)\n  }\n\n  properties[info.property] = result\n}\n\n/**\n * @param {Array<Content>} nodes\n * @param {HChild} value\n * @returns {void}\n */\nfunction addChild(nodes, value) {\n  let index = -1\n\n  if (value === undefined || value === null) {\n    // Empty.\n  } else if (typeof value === 'string' || typeof value === 'number') {\n    nodes.push({type: 'text', value: String(value)})\n  } else if (Array.isArray(value)) {\n    while (++index < value.length) {\n      addChild(nodes, value[index])\n    }\n  } else if (typeof value === 'object' && 'type' in value) {\n    if (value.type === 'root') {\n      addChild(nodes, value.children)\n    } else {\n      nodes.push(value)\n    }\n  } else {\n    throw new Error('Expected node, nodes, or string, got `' + value + '`')\n  }\n}\n\n/**\n * Parse a single primitives.\n *\n * @param {Info} info\n * @param {string} name\n * @param {HPrimitiveValue} value\n * @returns {HPrimitiveValue}\n */\nfunction parsePrimitive(info, name, value) {\n  if (typeof value === 'string') {\n    if (info.number && value && !Number.isNaN(Number(value))) {\n      return Number(value)\n    }\n\n    if (\n      (info.boolean || info.overloadedBoolean) &&\n      (value === '' || normalize(value) === normalize(name))\n    ) {\n      return true\n    }\n  }\n\n  return value\n}\n\n/**\n * Serialize a `style` object as a string.\n *\n * @param {HStyle} value\n *   Style object.\n * @returns {string}\n *   CSS string.\n */\nfunction style(value) {\n  /** @type {Array<string>} */\n  const result = []\n  /** @type {string} */\n  let key\n\n  for (key in value) {\n    if (own.call(value, key)) {\n      result.push([key, value[key]].join(': '))\n    }\n  }\n\n  return result.join('; ')\n}\n\n/**\n * Create a map to adjust casing.\n *\n * @param {Array<string>} values\n *   List of properly cased keys.\n * @returns {Record<string, string>}\n *   Map of lowercase keys to uppercase keys.\n */\nfunction createAdjustMap(values) {\n  /** @type {Record<string, string>} */\n  const result = {}\n  let index = -1\n\n  while (++index < values.length) {\n    result[values[index].toLowerCase()] = values[index]\n  }\n\n  return result\n}\n", "/**\n * @typedef {import('./core.js').HChild} Child\n *   Acceptable child value.\n * @typedef {import('./core.js').HProperties} Properties\n *   Acceptable value for element properties.\n * @typedef {import('./core.js').HResult} Result\n *   Result from a `h` (or `s`) call.\n *\n * @typedef {import('./jsx-classic.js').Element} h.JSX.Element\n * @typedef {import('./jsx-classic.js').IntrinsicAttributes} h.JSX.IntrinsicAttributes\n * @typedef {import('./jsx-classic.js').IntrinsicElements} h.JSX.IntrinsicElements\n * @typedef {import('./jsx-classic.js').ElementChildrenAttribute} h.JSX.ElementChildrenAttribute\n */\n\nimport {html} from 'property-information'\nimport {core} from './core.js'\n\nexport const h = core(html, 'div')\n", "export const svgCaseSensitiveTagNames = [\n  'altGlyph',\n  'altGlyphDef',\n  'altGlyphItem',\n  'animateColor',\n  'animateMotion',\n  'animateTransform',\n  'clipPath',\n  'feBlend',\n  'feColorMatrix',\n  'feComponentTransfer',\n  'feComposite',\n  'feConvolveMatrix',\n  'feDiffuseLighting',\n  'feDisplacementMap',\n  'feDistantLight',\n  'feDropShadow',\n  'feFlood',\n  'feFuncA',\n  'feFuncB',\n  'feFuncG',\n  'feFuncR',\n  'feGaussianBlur',\n  'feImage',\n  'feMerge',\n  'feMergeNode',\n  'feMorphology',\n  'feOffset',\n  'fePointLight',\n  'feSpecularLighting',\n  'feSpotLight',\n  'feTile',\n  'feTurbulence',\n  'foreignObject',\n  'glyphRef',\n  'linearGradient',\n  'radialGradient',\n  'solidColor',\n  'textArea',\n  'textPath'\n]\n", "/**\n * @typedef {import('./core.js').HChild} Child\n *   Acceptable child value.\n * @typedef {import('./core.js').HProperties} Properties\n *   Acceptable value for element properties.\n * @typedef {import('./core.js').HResult} Result\n *   Result from a `h` (or `s`) call.\n *\n * @typedef {import('./jsx-classic.js').Element} s.JSX.Element\n * @typedef {import('./jsx-classic.js').IntrinsicAttributes} s.JSX.IntrinsicAttributes\n * @typedef {import('./jsx-classic.js').IntrinsicElements} s.JSX.IntrinsicElements\n * @typedef {import('./jsx-classic.js').ElementChildrenAttribute} s.JSX.ElementChildrenAttribute\n */\n\nimport {svg} from 'property-information'\nimport {core} from './core.js'\nimport {svgCaseSensitiveTagNames} from './svg-case-sensitive-tag-names.js'\n\nexport const s = core(svg, 'g', svgCaseSensitiveTagNames)\n", "/**\n * Map of web namespaces.\n *\n * @type {Record<string, string>}\n */\nexport const webNamespaces = {\n  html: 'http://www.w3.org/1999/xhtml',\n  mathml: 'http://www.w3.org/1998/Math/MathML',\n  svg: 'http://www.w3.org/2000/svg',\n  xlink: 'http://www.w3.org/1999/xlink',\n  xml: 'http://www.w3.org/XML/1998/namespace',\n  xmlns: 'http://www.w3.org/2000/xmlns/'\n}\n"],
  "mappings": "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",
  "names": ["search", "parseSelector", "selector", "defaultTagName", "value", "props", "start", "previous", "tagName", "match", "subvalue", "buttonTypes", "own", "core", "schema", "defaultTagName", "caseSensitive", "adjust", "createAdjustMap", "selector", "properties", "children", "index", "node", "parseSelector", "isProperties", "key", "addProperty", "addChild", "value", "name", "info", "find", "result", "parse", "parsePrimitive", "style", "finalResult", "nodes", "normalize", "values", "h", "core", "html", "svgCaseSensitiveTagNames", "s", "core", "svg", "svgCaseSensitiveTagNames", "webNamespaces"]
}
