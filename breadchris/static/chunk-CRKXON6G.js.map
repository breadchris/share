{
  "version": 3,
  "sources": ["../../node_modules/@codemirror/legacy-modes/mode/dockerfile.js"],
  "sourcesContent": ["import {simpleMode} from \"./simple-mode.js\"\n\nvar from = \"from\";\nvar fromRegex = new RegExp(\"^(\\\\s*)\\\\b(\" + from + \")\\\\b\", \"i\");\n\nvar shells = [\"run\", \"cmd\", \"entrypoint\", \"shell\"];\nvar shellsAsArrayRegex = new RegExp(\"^(\\\\s*)(\" + shells.join('|') + \")(\\\\s+\\\\[)\", \"i\");\n\nvar expose = \"expose\";\nvar exposeRegex = new RegExp(\"^(\\\\s*)(\" + expose + \")(\\\\s+)\", \"i\");\n\nvar others = [\n  \"arg\", \"from\", \"maintainer\", \"label\", \"env\",\n  \"add\", \"copy\", \"volume\", \"user\",\n  \"workdir\", \"onbuild\", \"stopsignal\", \"healthcheck\", \"shell\"\n];\n\n// Collect all Dockerfile directives\nvar instructions = [from, expose].concat(shells).concat(others),\n    instructionRegex = \"(\" + instructions.join('|') + \")\",\n    instructionOnlyLine = new RegExp(\"^(\\\\s*)\" + instructionRegex + \"(\\\\s*)(#.*)?$\", \"i\"),\n    instructionWithArguments = new RegExp(\"^(\\\\s*)\" + instructionRegex + \"(\\\\s+)\", \"i\");\n\nexport const dockerFile = simpleMode({\n  start: [\n    // Block comment: This is a line starting with a comment\n    {\n      regex: /^\\s*#.*$/,\n      sol: true,\n      token: \"comment\"\n    },\n    {\n      regex: fromRegex,\n      token: [null, \"keyword\"],\n      sol: true,\n      next: \"from\"\n    },\n    // Highlight an instruction without any arguments (for convenience)\n    {\n      regex: instructionOnlyLine,\n      token: [null, \"keyword\", null, \"error\"],\n      sol: true\n    },\n    {\n      regex: shellsAsArrayRegex,\n      token: [null, \"keyword\", null],\n      sol: true,\n      next: \"array\"\n    },\n    {\n      regex: exposeRegex,\n      token: [null, \"keyword\", null],\n      sol: true,\n      next: \"expose\"\n    },\n    // Highlight an instruction followed by arguments\n    {\n      regex: instructionWithArguments,\n      token: [null, \"keyword\", null],\n      sol: true,\n      next: \"arguments\"\n    },\n    {\n      regex: /./,\n      token: null\n    }\n  ],\n  from: [\n    {\n      regex: /\\s*$/,\n      token: null,\n      next: \"start\"\n    },\n    {\n      // Line comment without instruction arguments is an error\n      regex: /(\\s*)(#.*)$/,\n      token: [null, \"error\"],\n      next: \"start\"\n    },\n    {\n      regex: /(\\s*\\S+\\s+)(as)/i,\n      token: [null, \"keyword\"],\n      next: \"start\"\n    },\n    // Fail safe return to start\n    {\n      token: null,\n      next: \"start\"\n    }\n  ],\n  single: [\n    {\n      regex: /(?:[^\\\\']|\\\\.)/,\n      token: \"string\"\n    },\n    {\n      regex: /'/,\n      token: \"string\",\n      pop: true\n    }\n  ],\n  double: [\n    {\n      regex: /(?:[^\\\\\"]|\\\\.)/,\n      token: \"string\"\n    },\n    {\n      regex: /\"/,\n      token: \"string\",\n      pop: true\n    }\n  ],\n  array: [\n    {\n      regex: /\\]/,\n      token: null,\n      next: \"start\"\n    },\n    {\n      regex: /\"(?:[^\\\\\"]|\\\\.)*\"?/,\n      token: \"string\"\n    }\n  ],\n  expose: [\n    {\n      regex: /\\d+$/,\n      token: \"number\",\n      next: \"start\"\n    },\n    {\n      regex: /[^\\d]+$/,\n      token: null,\n      next: \"start\"\n    },\n    {\n      regex: /\\d+/,\n      token: \"number\"\n    },\n    {\n      regex: /[^\\d]+/,\n      token: null\n    },\n    // Fail safe return to start\n    {\n      token: null,\n      next: \"start\"\n    }\n  ],\n  arguments: [\n    {\n      regex: /^\\s*#.*$/,\n      sol: true,\n      token: \"comment\"\n    },\n    {\n      regex: /\"(?:[^\\\\\"]|\\\\.)*\"?$/,\n      token: \"string\",\n      next: \"start\"\n    },\n    {\n      regex: /\"/,\n      token: \"string\",\n      push: \"double\"\n    },\n    {\n      regex: /'(?:[^\\\\']|\\\\.)*'?$/,\n      token: \"string\",\n      next: \"start\"\n    },\n    {\n      regex: /'/,\n      token: \"string\",\n      push: \"single\"\n    },\n    {\n      regex: /[^#\"']+[\\\\`]$/,\n      token: null\n    },\n    {\n      regex: /[^#\"']+$/,\n      token: null,\n      next: \"start\"\n    },\n    {\n      regex: /[^#\"']+/,\n      token: null\n    },\n    // Fail safe return to start\n    {\n      token: null,\n      next: \"start\"\n    }\n  ],\n  languageData: {\n    commentTokens: {line: \"#\"}\n  }\n});\n\n"],
  "mappings": "wCAEA,IAAIA,EAAO,OACPC,EAAY,IAAI,OAAO,cAAgBD,EAAO,OAAQ,GAAG,EAEzDE,EAAS,CAAC,MAAO,MAAO,aAAc,OAAO,EAC7CC,EAAqB,IAAI,OAAO,WAAaD,EAAO,KAAK,GAAG,EAAI,aAAc,GAAG,EAEjFE,EAAS,SACTC,EAAc,IAAI,OAAO,WAAaD,EAAS,UAAW,GAAG,EAE7DE,EAAS,CACX,MAAO,OAAQ,aAAc,QAAS,MACtC,MAAO,OAAQ,SAAU,OACzB,UAAW,UAAW,aAAc,cAAe,OACrD,EAGIC,EAAe,CAACP,EAAMI,CAAM,EAAE,OAAOF,CAAM,EAAE,OAAOI,CAAM,EAC1DE,EAAmB,IAAMD,EAAa,KAAK,GAAG,EAAI,IAClDE,EAAsB,IAAI,OAAO,UAAYD,EAAmB,gBAAiB,GAAG,EACpFE,EAA2B,IAAI,OAAO,UAAYF,EAAmB,SAAU,GAAG,EAEzEG,EAAaC,EAAW,CACnC,MAAO,CAEL,CACE,MAAO,WACP,IAAK,GACL,MAAO,SACT,EACA,CACE,MAAOX,EACP,MAAO,CAAC,KAAM,SAAS,EACvB,IAAK,GACL,KAAM,MACR,EAEA,CACE,MAAOQ,EACP,MAAO,CAAC,KAAM,UAAW,KAAM,OAAO,EACtC,IAAK,EACP,EACA,CACE,MAAON,EACP,MAAO,CAAC,KAAM,UAAW,IAAI,EAC7B,IAAK,GACL,KAAM,OACR,EACA,CACE,MAAOE,EACP,MAAO,CAAC,KAAM,UAAW,IAAI,EAC7B,IAAK,GACL,KAAM,QACR,EAEA,CACE,MAAOK,EACP,MAAO,CAAC,KAAM,UAAW,IAAI,EAC7B,IAAK,GACL,KAAM,WACR,EACA,CACE,MAAO,IACP,MAAO,IACT,CACF,EACA,KAAM,CACJ,CACE,MAAO,OACP,MAAO,KACP,KAAM,OACR,EACA,CAEE,MAAO,cACP,MAAO,CAAC,KAAM,OAAO,EACrB,KAAM,OACR,EACA,CACE,MAAO,mBACP,MAAO,CAAC,KAAM,SAAS,EACvB,KAAM,OACR,EAEA,CACE,MAAO,KACP,KAAM,OACR,CACF,EACA,OAAQ,CACN,CACE,MAAO,iBACP,MAAO,QACT,EACA,CACE,MAAO,IACP,MAAO,SACP,IAAK,EACP,CACF,EACA,OAAQ,CACN,CACE,MAAO,iBACP,MAAO,QACT,EACA,CACE,MAAO,IACP,MAAO,SACP,IAAK,EACP,CACF,EACA,MAAO,CACL,CACE,MAAO,KACP,MAAO,KACP,KAAM,OACR,EACA,CACE,MAAO,qBACP,MAAO,QACT,CACF,EACA,OAAQ,CACN,CACE,MAAO,OACP,MAAO,SACP,KAAM,OACR,EACA,CACE,MAAO,UACP,MAAO,KACP,KAAM,OACR,EACA,CACE,MAAO,MACP,MAAO,QACT,EACA,CACE,MAAO,SACP,MAAO,IACT,EAEA,CACE,MAAO,KACP,KAAM,OACR,CACF,EACA,UAAW,CACT,CACE,MAAO,WACP,IAAK,GACL,MAAO,SACT,EACA,CACE,MAAO,sBACP,MAAO,SACP,KAAM,OACR,EACA,CACE,MAAO,IACP,MAAO,SACP,KAAM,QACR,EACA,CACE,MAAO,sBACP,MAAO,SACP,KAAM,OACR,EACA,CACE,MAAO,IACP,MAAO,SACP,KAAM,QACR,EACA,CACE,MAAO,gBACP,MAAO,IACT,EACA,CACE,MAAO,WACP,MAAO,KACP,KAAM,OACR,EACA,CACE,MAAO,UACP,MAAO,IACT,EAEA,CACE,MAAO,KACP,KAAM,OACR,CACF,EACA,aAAc,CACZ,cAAe,CAAC,KAAM,GAAG,CAC3B,CACF,CAAC",
  "names": ["from", "fromRegex", "shells", "shellsAsArrayRegex", "expose", "exposeRegex", "others", "instructions", "instructionRegex", "instructionOnlyLine", "instructionWithArguments", "dockerFile", "simpleMode"]
}
