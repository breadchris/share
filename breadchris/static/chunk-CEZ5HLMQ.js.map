{
  "version": 3,
  "sources": ["../../node_modules/@codemirror/legacy-modes/mode/http.js"],
  "sourcesContent": ["function failFirstLine(stream, state) {\n  stream.skipToEnd();\n  state.cur = header;\n  return \"error\";\n}\n\nfunction start(stream, state) {\n  if (stream.match(/^HTTP\\/\\d\\.\\d/)) {\n    state.cur = responseStatusCode;\n    return \"keyword\";\n  } else if (stream.match(/^[A-Z]+/) && /[ \\t]/.test(stream.peek())) {\n    state.cur = requestPath;\n    return \"keyword\";\n  } else {\n    return failFirstLine(stream, state);\n  }\n}\n\nfunction responseStatusCode(stream, state) {\n  var code = stream.match(/^\\d+/);\n  if (!code) return failFirstLine(stream, state);\n\n  state.cur = responseStatusText;\n  var status = Number(code[0]);\n  if (status >= 100 && status < 400) {\n    return \"atom\";\n  } else {\n    return \"error\";\n  }\n}\n\nfunction responseStatusText(stream, state) {\n  stream.skipToEnd();\n  state.cur = header;\n  return null;\n}\n\nfunction requestPath(stream, state) {\n  stream.eatWhile(/\\S/);\n  state.cur = requestProtocol;\n  return \"string.special\";\n}\n\nfunction requestProtocol(stream, state) {\n  if (stream.match(/^HTTP\\/\\d\\.\\d$/)) {\n    state.cur = header;\n    return \"keyword\";\n  } else {\n    return failFirstLine(stream, state);\n  }\n}\n\nfunction header(stream) {\n  if (stream.sol() && !stream.eat(/[ \\t]/)) {\n    if (stream.match(/^.*?:/)) {\n      return \"atom\";\n    } else {\n      stream.skipToEnd();\n      return \"error\";\n    }\n  } else {\n    stream.skipToEnd();\n    return \"string\";\n  }\n}\n\nfunction body(stream) {\n  stream.skipToEnd();\n  return null;\n}\n\nexport const http = {\n  name: \"http\",\n  token: function(stream, state) {\n    var cur = state.cur;\n    if (cur != header && cur != body && stream.eatSpace()) return null;\n    return cur(stream, state);\n  },\n\n  blankLine: function(state) {\n    state.cur = body;\n  },\n\n  startState: function() {\n    return {cur: start};\n  }\n};\n"],
  "mappings": "AAAA,SAASA,EAAcC,EAAQC,EAAO,CACpC,OAAAD,EAAO,UAAU,EACjBC,EAAM,IAAMC,EACL,OACT,CAEA,SAASC,EAAMH,EAAQC,EAAO,CAC5B,OAAID,EAAO,MAAM,eAAe,GAC9BC,EAAM,IAAMG,EACL,WACEJ,EAAO,MAAM,SAAS,GAAK,QAAQ,KAAKA,EAAO,KAAK,CAAC,GAC9DC,EAAM,IAAMI,EACL,WAEAN,EAAcC,EAAQC,CAAK,CAEtC,CAEA,SAASG,EAAmBJ,EAAQC,EAAO,CACzC,IAAIK,EAAON,EAAO,MAAM,MAAM,EAC9B,GAAI,CAACM,EAAM,OAAOP,EAAcC,EAAQC,CAAK,EAE7CA,EAAM,IAAMM,EACZ,IAAIC,EAAS,OAAOF,EAAK,CAAC,CAAC,EAC3B,OAAIE,GAAU,KAAOA,EAAS,IACrB,OAEA,OAEX,CAEA,SAASD,EAAmBP,EAAQC,EAAO,CACzC,OAAAD,EAAO,UAAU,EACjBC,EAAM,IAAMC,EACL,IACT,CAEA,SAASG,EAAYL,EAAQC,EAAO,CAClC,OAAAD,EAAO,SAAS,IAAI,EACpBC,EAAM,IAAMQ,EACL,gBACT,CAEA,SAASA,EAAgBT,EAAQC,EAAO,CACtC,OAAID,EAAO,MAAM,gBAAgB,GAC/BC,EAAM,IAAMC,EACL,WAEAH,EAAcC,EAAQC,CAAK,CAEtC,CAEA,SAASC,EAAOF,EAAQ,CACtB,OAAIA,EAAO,IAAI,GAAK,CAACA,EAAO,IAAI,OAAO,EACjCA,EAAO,MAAM,OAAO,EACf,QAEPA,EAAO,UAAU,EACV,UAGTA,EAAO,UAAU,EACV,SAEX,CAEA,SAASU,EAAKV,EAAQ,CACpB,OAAAA,EAAO,UAAU,EACV,IACT,CAEO,IAAMW,EAAO,CAClB,KAAM,OACN,MAAO,SAASX,EAAQC,EAAO,CAC7B,IAAIW,EAAMX,EAAM,IAChB,OAAIW,GAAOV,GAAUU,GAAOF,GAAQV,EAAO,SAAS,EAAU,KACvDY,EAAIZ,EAAQC,CAAK,CAC1B,EAEA,UAAW,SAASA,EAAO,CACzBA,EAAM,IAAMS,CACd,EAEA,WAAY,UAAW,CACrB,MAAO,CAAC,IAAKP,CAAK,CACpB,CACF",
  "names": ["failFirstLine", "stream", "state", "header", "start", "responseStatusCode", "requestPath", "code", "responseStatusText", "status", "requestProtocol", "body", "http", "cur"]
}
