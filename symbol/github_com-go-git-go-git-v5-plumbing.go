// Code generated by 'yaegi extract github.com/go-git/go-git/v5/plumbing'. DO NOT EDIT.

package symbol

import (
	"github.com/go-git/go-git/v5/plumbing"
	"io"
	"reflect"
)

func init() {
	Symbols["github.com/go-git/go-git/v5/plumbing/plumbing"] = map[string]reflect.Value{
		// function, constant and variable definitions
		"AnyObject":                  reflect.ValueOf(plumbing.AnyObject),
		"BlobObject":                 reflect.ValueOf(plumbing.BlobObject),
		"CommitObject":               reflect.ValueOf(plumbing.CommitObject),
		"ComputeHash":                reflect.ValueOf(plumbing.ComputeHash),
		"ErrInvalidReferenceName":    reflect.ValueOf(&plumbing.ErrInvalidReferenceName).Elem(),
		"ErrInvalidType":             reflect.ValueOf(&plumbing.ErrInvalidType).Elem(),
		"ErrObjectNotFound":          reflect.ValueOf(&plumbing.ErrObjectNotFound).Elem(),
		"ErrReferenceNotFound":       reflect.ValueOf(&plumbing.ErrReferenceNotFound).Elem(),
		"HEAD":                       reflect.ValueOf(plumbing.HEAD),
		"HashReference":              reflect.ValueOf(plumbing.HashReference),
		"HashesSort":                 reflect.ValueOf(plumbing.HashesSort),
		"InvalidObject":              reflect.ValueOf(plumbing.InvalidObject),
		"InvalidReference":           reflect.ValueOf(plumbing.InvalidReference),
		"IsHash":                     reflect.ValueOf(plumbing.IsHash),
		"Main":                       reflect.ValueOf(plumbing.Main),
		"Master":                     reflect.ValueOf(plumbing.Master),
		"NewBranchReferenceName":     reflect.ValueOf(plumbing.NewBranchReferenceName),
		"NewHash":                    reflect.ValueOf(plumbing.NewHash),
		"NewHashReference":           reflect.ValueOf(plumbing.NewHashReference),
		"NewHasher":                  reflect.ValueOf(plumbing.NewHasher),
		"NewNoteReferenceName":       reflect.ValueOf(plumbing.NewNoteReferenceName),
		"NewPermanentError":          reflect.ValueOf(plumbing.NewPermanentError),
		"NewReferenceFromStrings":    reflect.ValueOf(plumbing.NewReferenceFromStrings),
		"NewRemoteHEADReferenceName": reflect.ValueOf(plumbing.NewRemoteHEADReferenceName),
		"NewRemoteReferenceName":     reflect.ValueOf(plumbing.NewRemoteReferenceName),
		"NewSymbolicReference":       reflect.ValueOf(plumbing.NewSymbolicReference),
		"NewTagReferenceName":        reflect.ValueOf(plumbing.NewTagReferenceName),
		"NewUnexpectedError":         reflect.ValueOf(plumbing.NewUnexpectedError),
		"OFSDeltaObject":             reflect.ValueOf(plumbing.OFSDeltaObject),
		"ParseObjectType":            reflect.ValueOf(plumbing.ParseObjectType),
		"REFDeltaObject":             reflect.ValueOf(plumbing.REFDeltaObject),
		"RefRevParseRules":           reflect.ValueOf(&plumbing.RefRevParseRules).Elem(),
		"SymbolicReference":          reflect.ValueOf(plumbing.SymbolicReference),
		"TagObject":                  reflect.ValueOf(plumbing.TagObject),
		"TreeObject":                 reflect.ValueOf(plumbing.TreeObject),
		"ZeroHash":                   reflect.ValueOf(&plumbing.ZeroHash).Elem(),

		// type definitions
		"DeltaObject":     reflect.ValueOf((*plumbing.DeltaObject)(nil)),
		"EncodedObject":   reflect.ValueOf((*plumbing.EncodedObject)(nil)),
		"Hash":            reflect.ValueOf((*plumbing.Hash)(nil)),
		"HashSlice":       reflect.ValueOf((*plumbing.HashSlice)(nil)),
		"Hasher":          reflect.ValueOf((*plumbing.Hasher)(nil)),
		"MemoryObject":    reflect.ValueOf((*plumbing.MemoryObject)(nil)),
		"ObjectType":      reflect.ValueOf((*plumbing.ObjectType)(nil)),
		"PermanentError":  reflect.ValueOf((*plumbing.PermanentError)(nil)),
		"Reference":       reflect.ValueOf((*plumbing.Reference)(nil)),
		"ReferenceName":   reflect.ValueOf((*plumbing.ReferenceName)(nil)),
		"ReferenceType":   reflect.ValueOf((*plumbing.ReferenceType)(nil)),
		"Revision":        reflect.ValueOf((*plumbing.Revision)(nil)),
		"UnexpectedError": reflect.ValueOf((*plumbing.UnexpectedError)(nil)),

		// interface wrapper definitions
		"_DeltaObject":   reflect.ValueOf((*_github_com_go_git_go_git_v5_plumbing_DeltaObject)(nil)),
		"_EncodedObject": reflect.ValueOf((*_github_com_go_git_go_git_v5_plumbing_EncodedObject)(nil)),
	}
}

// _github_com_go_git_go_git_v5_plumbing_DeltaObject is an interface wrapper for DeltaObject type
type _github_com_go_git_go_git_v5_plumbing_DeltaObject struct {
	IValue      interface{}
	WActualHash func() plumbing.Hash
	WActualSize func() int64
	WBaseHash   func() plumbing.Hash
	WHash       func() plumbing.Hash
	WReader     func() (io.ReadCloser, error)
	WSetSize    func(a0 int64)
	WSetType    func(a0 plumbing.ObjectType)
	WSize       func() int64
	WType       func() plumbing.ObjectType
	WWriter     func() (io.WriteCloser, error)
}

func (W _github_com_go_git_go_git_v5_plumbing_DeltaObject) ActualHash() plumbing.Hash {
	return W.WActualHash()
}
func (W _github_com_go_git_go_git_v5_plumbing_DeltaObject) ActualSize() int64 { return W.WActualSize() }
func (W _github_com_go_git_go_git_v5_plumbing_DeltaObject) BaseHash() plumbing.Hash {
	return W.WBaseHash()
}
func (W _github_com_go_git_go_git_v5_plumbing_DeltaObject) Hash() plumbing.Hash { return W.WHash() }
func (W _github_com_go_git_go_git_v5_plumbing_DeltaObject) Reader() (io.ReadCloser, error) {
	return W.WReader()
}
func (W _github_com_go_git_go_git_v5_plumbing_DeltaObject) SetSize(a0 int64) { W.WSetSize(a0) }
func (W _github_com_go_git_go_git_v5_plumbing_DeltaObject) SetType(a0 plumbing.ObjectType) {
	W.WSetType(a0)
}
func (W _github_com_go_git_go_git_v5_plumbing_DeltaObject) Size() int64 { return W.WSize() }
func (W _github_com_go_git_go_git_v5_plumbing_DeltaObject) Type() plumbing.ObjectType {
	return W.WType()
}
func (W _github_com_go_git_go_git_v5_plumbing_DeltaObject) Writer() (io.WriteCloser, error) {
	return W.WWriter()
}

// _github_com_go_git_go_git_v5_plumbing_EncodedObject is an interface wrapper for EncodedObject type
type _github_com_go_git_go_git_v5_plumbing_EncodedObject struct {
	IValue   interface{}
	WHash    func() plumbing.Hash
	WReader  func() (io.ReadCloser, error)
	WSetSize func(a0 int64)
	WSetType func(a0 plumbing.ObjectType)
	WSize    func() int64
	WType    func() plumbing.ObjectType
	WWriter  func() (io.WriteCloser, error)
}

func (W _github_com_go_git_go_git_v5_plumbing_EncodedObject) Hash() plumbing.Hash { return W.WHash() }
func (W _github_com_go_git_go_git_v5_plumbing_EncodedObject) Reader() (io.ReadCloser, error) {
	return W.WReader()
}
func (W _github_com_go_git_go_git_v5_plumbing_EncodedObject) SetSize(a0 int64) { W.WSetSize(a0) }
func (W _github_com_go_git_go_git_v5_plumbing_EncodedObject) SetType(a0 plumbing.ObjectType) {
	W.WSetType(a0)
}
func (W _github_com_go_git_go_git_v5_plumbing_EncodedObject) Size() int64 { return W.WSize() }
func (W _github_com_go_git_go_git_v5_plumbing_EncodedObject) Type() plumbing.ObjectType {
	return W.WType()
}
func (W _github_com_go_git_go_git_v5_plumbing_EncodedObject) Writer() (io.WriteCloser, error) {
	return W.WWriter()
}
