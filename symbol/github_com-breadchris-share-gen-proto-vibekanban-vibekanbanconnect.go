// Code generated by 'yaegi extract github.com/breadchris/share/gen/proto/vibekanban/vibekanbanconnect'. DO NOT EDIT.

package symbol

import (
	"connectrpc.com/connect"
	"context"
	"github.com/breadchris/share/gen/proto/vibekanban"
	"github.com/breadchris/share/gen/proto/vibekanban/vibekanbanconnect"
	"go/constant"
	"go/token"
	"google.golang.org/protobuf/types/known/emptypb"
	"reflect"
)

func init() {
	Symbols["github.com/breadchris/share/gen/proto/vibekanban/vibekanbanconnect/vibekanbanconnect"] = map[string]reflect.Value{
		// function, constant and variable definitions
		"NewVibeKanbanServiceClient":                    reflect.ValueOf(vibekanbanconnect.NewVibeKanbanServiceClient),
		"NewVibeKanbanServiceHandler":                   reflect.ValueOf(vibekanbanconnect.NewVibeKanbanServiceHandler),
		"VibeKanbanServiceCreateProjectBranchProcedure": reflect.ValueOf(constant.MakeFromLiteral("\"/vibekanban.VibeKanbanService/CreateProjectBranch\"", token.STRING, 0)),
		"VibeKanbanServiceCreateProjectProcedure":       reflect.ValueOf(constant.MakeFromLiteral("\"/vibekanban.VibeKanbanService/CreateProject\"", token.STRING, 0)),
		"VibeKanbanServiceCreateTaskAttemptProcedure":   reflect.ValueOf(constant.MakeFromLiteral("\"/vibekanban.VibeKanbanService/CreateTaskAttempt\"", token.STRING, 0)),
		"VibeKanbanServiceCreateTaskProcedure":          reflect.ValueOf(constant.MakeFromLiteral("\"/vibekanban.VibeKanbanService/CreateTask\"", token.STRING, 0)),
		"VibeKanbanServiceDeleteProjectProcedure":       reflect.ValueOf(constant.MakeFromLiteral("\"/vibekanban.VibeKanbanService/DeleteProject\"", token.STRING, 0)),
		"VibeKanbanServiceDeleteTaskProcedure":          reflect.ValueOf(constant.MakeFromLiteral("\"/vibekanban.VibeKanbanService/DeleteTask\"", token.STRING, 0)),
		"VibeKanbanServiceGetAttemptDiffProcedure":      reflect.ValueOf(constant.MakeFromLiteral("\"/vibekanban.VibeKanbanService/GetAttemptDiff\"", token.STRING, 0)),
		"VibeKanbanServiceGetAttemptStatusProcedure":    reflect.ValueOf(constant.MakeFromLiteral("\"/vibekanban.VibeKanbanService/GetAttemptStatus\"", token.STRING, 0)),
		"VibeKanbanServiceGetDebugProcessesProcedure":   reflect.ValueOf(constant.MakeFromLiteral("\"/vibekanban.VibeKanbanService/GetDebugProcesses\"", token.STRING, 0)),
		"VibeKanbanServiceGetProcessesProcedure":        reflect.ValueOf(constant.MakeFromLiteral("\"/vibekanban.VibeKanbanService/GetProcesses\"", token.STRING, 0)),
		"VibeKanbanServiceGetProjectBranchesProcedure":  reflect.ValueOf(constant.MakeFromLiteral("\"/vibekanban.VibeKanbanService/GetProjectBranches\"", token.STRING, 0)),
		"VibeKanbanServiceGetProjectProcedure":          reflect.ValueOf(constant.MakeFromLiteral("\"/vibekanban.VibeKanbanService/GetProject\"", token.STRING, 0)),
		"VibeKanbanServiceGetTaskAttemptsProcedure":     reflect.ValueOf(constant.MakeFromLiteral("\"/vibekanban.VibeKanbanService/GetTaskAttempts\"", token.STRING, 0)),
		"VibeKanbanServiceGetTasksProcedure":            reflect.ValueOf(constant.MakeFromLiteral("\"/vibekanban.VibeKanbanService/GetTasks\"", token.STRING, 0)),
		"VibeKanbanServiceKillProcessProcedure":         reflect.ValueOf(constant.MakeFromLiteral("\"/vibekanban.VibeKanbanService/KillProcess\"", token.STRING, 0)),
		"VibeKanbanServiceListProjectsProcedure":        reflect.ValueOf(constant.MakeFromLiteral("\"/vibekanban.VibeKanbanService/ListProjects\"", token.STRING, 0)),
		"VibeKanbanServiceMergeAttemptProcedure":        reflect.ValueOf(constant.MakeFromLiteral("\"/vibekanban.VibeKanbanService/MergeAttempt\"", token.STRING, 0)),
		"VibeKanbanServiceName":                         reflect.ValueOf(constant.MakeFromLiteral("\"vibekanban.VibeKanbanService\"", token.STRING, 0)),
		"VibeKanbanServiceStartTaskAttemptProcedure":    reflect.ValueOf(constant.MakeFromLiteral("\"/vibekanban.VibeKanbanService/StartTaskAttempt\"", token.STRING, 0)),
		"VibeKanbanServiceUpdateProjectProcedure":       reflect.ValueOf(constant.MakeFromLiteral("\"/vibekanban.VibeKanbanService/UpdateProject\"", token.STRING, 0)),
		"VibeKanbanServiceUpdateTaskProcedure":          reflect.ValueOf(constant.MakeFromLiteral("\"/vibekanban.VibeKanbanService/UpdateTask\"", token.STRING, 0)),

		// type definitions
		"UnimplementedVibeKanbanServiceHandler": reflect.ValueOf((*vibekanbanconnect.UnimplementedVibeKanbanServiceHandler)(nil)),
		"VibeKanbanServiceClient":               reflect.ValueOf((*vibekanbanconnect.VibeKanbanServiceClient)(nil)),
		"VibeKanbanServiceHandler":              reflect.ValueOf((*vibekanbanconnect.VibeKanbanServiceHandler)(nil)),

		// interface wrapper definitions
		"_VibeKanbanServiceClient":  reflect.ValueOf((*_github_com_breadchris_share_gen_proto_vibekanban_vibekanbanconnect_VibeKanbanServiceClient)(nil)),
		"_VibeKanbanServiceHandler": reflect.ValueOf((*_github_com_breadchris_share_gen_proto_vibekanban_vibekanbanconnect_VibeKanbanServiceHandler)(nil)),
	}
}

// _github_com_breadchris_share_gen_proto_vibekanban_vibekanbanconnect_VibeKanbanServiceClient is an interface wrapper for VibeKanbanServiceClient type
type _github_com_breadchris_share_gen_proto_vibekanban_vibekanbanconnect_VibeKanbanServiceClient struct {
	IValue               interface{}
	WCreateProject       func(a0 context.Context, a1 *connect.Request[vibekanban.CreateProjectRequest]) (*connect.Response[vibekanban.CreateProjectResponse], error)
	WCreateProjectBranch func(a0 context.Context, a1 *connect.Request[vibekanban.CreateProjectBranchRequest]) (*connect.Response[vibekanban.CreateProjectBranchResponse], error)
	WCreateTask          func(a0 context.Context, a1 *connect.Request[vibekanban.CreateTaskRequest]) (*connect.Response[vibekanban.CreateTaskResponse], error)
	WCreateTaskAttempt   func(a0 context.Context, a1 *connect.Request[vibekanban.CreateTaskAttemptRequest]) (*connect.Response[vibekanban.CreateTaskAttemptResponse], error)
	WDeleteProject       func(a0 context.Context, a1 *connect.Request[vibekanban.DeleteProjectRequest]) (*connect.Response[emptypb.Empty], error)
	WDeleteTask          func(a0 context.Context, a1 *connect.Request[vibekanban.DeleteTaskRequest]) (*connect.Response[emptypb.Empty], error)
	WGetAttemptDiff      func(a0 context.Context, a1 *connect.Request[vibekanban.GetAttemptDiffRequest]) (*connect.Response[vibekanban.GetAttemptDiffResponse], error)
	WGetAttemptStatus    func(a0 context.Context, a1 *connect.Request[vibekanban.GetAttemptStatusRequest]) (*connect.Response[vibekanban.GetAttemptStatusResponse], error)
	WGetDebugProcesses   func(a0 context.Context, a1 *connect.Request[vibekanban.GetDebugProcessesRequest]) (*connect.Response[vibekanban.GetDebugProcessesResponse], error)
	WGetProcesses        func(a0 context.Context, a1 *connect.Request[vibekanban.GetProcessesRequest]) (*connect.Response[vibekanban.GetProcessesResponse], error)
	WGetProject          func(a0 context.Context, a1 *connect.Request[vibekanban.GetProjectRequest]) (*connect.Response[vibekanban.GetProjectResponse], error)
	WGetProjectBranches  func(a0 context.Context, a1 *connect.Request[vibekanban.GetProjectBranchesRequest]) (*connect.Response[vibekanban.GetProjectBranchesResponse], error)
	WGetTaskAttempts     func(a0 context.Context, a1 *connect.Request[vibekanban.GetTaskAttemptsRequest]) (*connect.Response[vibekanban.GetTaskAttemptsResponse], error)
	WGetTasks            func(a0 context.Context, a1 *connect.Request[vibekanban.GetTasksRequest]) (*connect.Response[vibekanban.GetTasksResponse], error)
	WKillProcess         func(a0 context.Context, a1 *connect.Request[vibekanban.KillProcessRequest]) (*connect.Response[emptypb.Empty], error)
	WListProjects        func(a0 context.Context, a1 *connect.Request[vibekanban.ListProjectsRequest]) (*connect.Response[vibekanban.ListProjectsResponse], error)
	WMergeAttempt        func(a0 context.Context, a1 *connect.Request[vibekanban.MergeAttemptRequest]) (*connect.Response[vibekanban.MergeAttemptResponse], error)
	WStartTaskAttempt    func(a0 context.Context, a1 *connect.Request[vibekanban.StartTaskAttemptRequest]) (*connect.Response[vibekanban.StartTaskAttemptResponse], error)
	WUpdateProject       func(a0 context.Context, a1 *connect.Request[vibekanban.UpdateProjectRequest]) (*connect.Response[vibekanban.UpdateProjectResponse], error)
	WUpdateTask          func(a0 context.Context, a1 *connect.Request[vibekanban.UpdateTaskRequest]) (*connect.Response[vibekanban.UpdateTaskResponse], error)
}

func (W _github_com_breadchris_share_gen_proto_vibekanban_vibekanbanconnect_VibeKanbanServiceClient) CreateProject(a0 context.Context, a1 *connect.Request[vibekanban.CreateProjectRequest]) (*connect.Response[vibekanban.CreateProjectResponse], error) {
	return W.WCreateProject(a0, a1)
}
func (W _github_com_breadchris_share_gen_proto_vibekanban_vibekanbanconnect_VibeKanbanServiceClient) CreateProjectBranch(a0 context.Context, a1 *connect.Request[vibekanban.CreateProjectBranchRequest]) (*connect.Response[vibekanban.CreateProjectBranchResponse], error) {
	return W.WCreateProjectBranch(a0, a1)
}
func (W _github_com_breadchris_share_gen_proto_vibekanban_vibekanbanconnect_VibeKanbanServiceClient) CreateTask(a0 context.Context, a1 *connect.Request[vibekanban.CreateTaskRequest]) (*connect.Response[vibekanban.CreateTaskResponse], error) {
	return W.WCreateTask(a0, a1)
}
func (W _github_com_breadchris_share_gen_proto_vibekanban_vibekanbanconnect_VibeKanbanServiceClient) CreateTaskAttempt(a0 context.Context, a1 *connect.Request[vibekanban.CreateTaskAttemptRequest]) (*connect.Response[vibekanban.CreateTaskAttemptResponse], error) {
	return W.WCreateTaskAttempt(a0, a1)
}
func (W _github_com_breadchris_share_gen_proto_vibekanban_vibekanbanconnect_VibeKanbanServiceClient) DeleteProject(a0 context.Context, a1 *connect.Request[vibekanban.DeleteProjectRequest]) (*connect.Response[emptypb.Empty], error) {
	return W.WDeleteProject(a0, a1)
}
func (W _github_com_breadchris_share_gen_proto_vibekanban_vibekanbanconnect_VibeKanbanServiceClient) DeleteTask(a0 context.Context, a1 *connect.Request[vibekanban.DeleteTaskRequest]) (*connect.Response[emptypb.Empty], error) {
	return W.WDeleteTask(a0, a1)
}
func (W _github_com_breadchris_share_gen_proto_vibekanban_vibekanbanconnect_VibeKanbanServiceClient) GetAttemptDiff(a0 context.Context, a1 *connect.Request[vibekanban.GetAttemptDiffRequest]) (*connect.Response[vibekanban.GetAttemptDiffResponse], error) {
	return W.WGetAttemptDiff(a0, a1)
}
func (W _github_com_breadchris_share_gen_proto_vibekanban_vibekanbanconnect_VibeKanbanServiceClient) GetAttemptStatus(a0 context.Context, a1 *connect.Request[vibekanban.GetAttemptStatusRequest]) (*connect.Response[vibekanban.GetAttemptStatusResponse], error) {
	return W.WGetAttemptStatus(a0, a1)
}
func (W _github_com_breadchris_share_gen_proto_vibekanban_vibekanbanconnect_VibeKanbanServiceClient) GetDebugProcesses(a0 context.Context, a1 *connect.Request[vibekanban.GetDebugProcessesRequest]) (*connect.Response[vibekanban.GetDebugProcessesResponse], error) {
	return W.WGetDebugProcesses(a0, a1)
}
func (W _github_com_breadchris_share_gen_proto_vibekanban_vibekanbanconnect_VibeKanbanServiceClient) GetProcesses(a0 context.Context, a1 *connect.Request[vibekanban.GetProcessesRequest]) (*connect.Response[vibekanban.GetProcessesResponse], error) {
	return W.WGetProcesses(a0, a1)
}
func (W _github_com_breadchris_share_gen_proto_vibekanban_vibekanbanconnect_VibeKanbanServiceClient) GetProject(a0 context.Context, a1 *connect.Request[vibekanban.GetProjectRequest]) (*connect.Response[vibekanban.GetProjectResponse], error) {
	return W.WGetProject(a0, a1)
}
func (W _github_com_breadchris_share_gen_proto_vibekanban_vibekanbanconnect_VibeKanbanServiceClient) GetProjectBranches(a0 context.Context, a1 *connect.Request[vibekanban.GetProjectBranchesRequest]) (*connect.Response[vibekanban.GetProjectBranchesResponse], error) {
	return W.WGetProjectBranches(a0, a1)
}
func (W _github_com_breadchris_share_gen_proto_vibekanban_vibekanbanconnect_VibeKanbanServiceClient) GetTaskAttempts(a0 context.Context, a1 *connect.Request[vibekanban.GetTaskAttemptsRequest]) (*connect.Response[vibekanban.GetTaskAttemptsResponse], error) {
	return W.WGetTaskAttempts(a0, a1)
}
func (W _github_com_breadchris_share_gen_proto_vibekanban_vibekanbanconnect_VibeKanbanServiceClient) GetTasks(a0 context.Context, a1 *connect.Request[vibekanban.GetTasksRequest]) (*connect.Response[vibekanban.GetTasksResponse], error) {
	return W.WGetTasks(a0, a1)
}
func (W _github_com_breadchris_share_gen_proto_vibekanban_vibekanbanconnect_VibeKanbanServiceClient) KillProcess(a0 context.Context, a1 *connect.Request[vibekanban.KillProcessRequest]) (*connect.Response[emptypb.Empty], error) {
	return W.WKillProcess(a0, a1)
}
func (W _github_com_breadchris_share_gen_proto_vibekanban_vibekanbanconnect_VibeKanbanServiceClient) ListProjects(a0 context.Context, a1 *connect.Request[vibekanban.ListProjectsRequest]) (*connect.Response[vibekanban.ListProjectsResponse], error) {
	return W.WListProjects(a0, a1)
}
func (W _github_com_breadchris_share_gen_proto_vibekanban_vibekanbanconnect_VibeKanbanServiceClient) MergeAttempt(a0 context.Context, a1 *connect.Request[vibekanban.MergeAttemptRequest]) (*connect.Response[vibekanban.MergeAttemptResponse], error) {
	return W.WMergeAttempt(a0, a1)
}
func (W _github_com_breadchris_share_gen_proto_vibekanban_vibekanbanconnect_VibeKanbanServiceClient) StartTaskAttempt(a0 context.Context, a1 *connect.Request[vibekanban.StartTaskAttemptRequest]) (*connect.Response[vibekanban.StartTaskAttemptResponse], error) {
	return W.WStartTaskAttempt(a0, a1)
}
func (W _github_com_breadchris_share_gen_proto_vibekanban_vibekanbanconnect_VibeKanbanServiceClient) UpdateProject(a0 context.Context, a1 *connect.Request[vibekanban.UpdateProjectRequest]) (*connect.Response[vibekanban.UpdateProjectResponse], error) {
	return W.WUpdateProject(a0, a1)
}
func (W _github_com_breadchris_share_gen_proto_vibekanban_vibekanbanconnect_VibeKanbanServiceClient) UpdateTask(a0 context.Context, a1 *connect.Request[vibekanban.UpdateTaskRequest]) (*connect.Response[vibekanban.UpdateTaskResponse], error) {
	return W.WUpdateTask(a0, a1)
}

// _github_com_breadchris_share_gen_proto_vibekanban_vibekanbanconnect_VibeKanbanServiceHandler is an interface wrapper for VibeKanbanServiceHandler type
type _github_com_breadchris_share_gen_proto_vibekanban_vibekanbanconnect_VibeKanbanServiceHandler struct {
	IValue               interface{}
	WCreateProject       func(a0 context.Context, a1 *connect.Request[vibekanban.CreateProjectRequest]) (*connect.Response[vibekanban.CreateProjectResponse], error)
	WCreateProjectBranch func(a0 context.Context, a1 *connect.Request[vibekanban.CreateProjectBranchRequest]) (*connect.Response[vibekanban.CreateProjectBranchResponse], error)
	WCreateTask          func(a0 context.Context, a1 *connect.Request[vibekanban.CreateTaskRequest]) (*connect.Response[vibekanban.CreateTaskResponse], error)
	WCreateTaskAttempt   func(a0 context.Context, a1 *connect.Request[vibekanban.CreateTaskAttemptRequest]) (*connect.Response[vibekanban.CreateTaskAttemptResponse], error)
	WDeleteProject       func(a0 context.Context, a1 *connect.Request[vibekanban.DeleteProjectRequest]) (*connect.Response[emptypb.Empty], error)
	WDeleteTask          func(a0 context.Context, a1 *connect.Request[vibekanban.DeleteTaskRequest]) (*connect.Response[emptypb.Empty], error)
	WGetAttemptDiff      func(a0 context.Context, a1 *connect.Request[vibekanban.GetAttemptDiffRequest]) (*connect.Response[vibekanban.GetAttemptDiffResponse], error)
	WGetAttemptStatus    func(a0 context.Context, a1 *connect.Request[vibekanban.GetAttemptStatusRequest]) (*connect.Response[vibekanban.GetAttemptStatusResponse], error)
	WGetDebugProcesses   func(a0 context.Context, a1 *connect.Request[vibekanban.GetDebugProcessesRequest]) (*connect.Response[vibekanban.GetDebugProcessesResponse], error)
	WGetProcesses        func(a0 context.Context, a1 *connect.Request[vibekanban.GetProcessesRequest]) (*connect.Response[vibekanban.GetProcessesResponse], error)
	WGetProject          func(a0 context.Context, a1 *connect.Request[vibekanban.GetProjectRequest]) (*connect.Response[vibekanban.GetProjectResponse], error)
	WGetProjectBranches  func(a0 context.Context, a1 *connect.Request[vibekanban.GetProjectBranchesRequest]) (*connect.Response[vibekanban.GetProjectBranchesResponse], error)
	WGetTaskAttempts     func(a0 context.Context, a1 *connect.Request[vibekanban.GetTaskAttemptsRequest]) (*connect.Response[vibekanban.GetTaskAttemptsResponse], error)
	WGetTasks            func(a0 context.Context, a1 *connect.Request[vibekanban.GetTasksRequest]) (*connect.Response[vibekanban.GetTasksResponse], error)
	WKillProcess         func(a0 context.Context, a1 *connect.Request[vibekanban.KillProcessRequest]) (*connect.Response[emptypb.Empty], error)
	WListProjects        func(a0 context.Context, a1 *connect.Request[vibekanban.ListProjectsRequest]) (*connect.Response[vibekanban.ListProjectsResponse], error)
	WMergeAttempt        func(a0 context.Context, a1 *connect.Request[vibekanban.MergeAttemptRequest]) (*connect.Response[vibekanban.MergeAttemptResponse], error)
	WStartTaskAttempt    func(a0 context.Context, a1 *connect.Request[vibekanban.StartTaskAttemptRequest]) (*connect.Response[vibekanban.StartTaskAttemptResponse], error)
	WUpdateProject       func(a0 context.Context, a1 *connect.Request[vibekanban.UpdateProjectRequest]) (*connect.Response[vibekanban.UpdateProjectResponse], error)
	WUpdateTask          func(a0 context.Context, a1 *connect.Request[vibekanban.UpdateTaskRequest]) (*connect.Response[vibekanban.UpdateTaskResponse], error)
}

func (W _github_com_breadchris_share_gen_proto_vibekanban_vibekanbanconnect_VibeKanbanServiceHandler) CreateProject(a0 context.Context, a1 *connect.Request[vibekanban.CreateProjectRequest]) (*connect.Response[vibekanban.CreateProjectResponse], error) {
	return W.WCreateProject(a0, a1)
}
func (W _github_com_breadchris_share_gen_proto_vibekanban_vibekanbanconnect_VibeKanbanServiceHandler) CreateProjectBranch(a0 context.Context, a1 *connect.Request[vibekanban.CreateProjectBranchRequest]) (*connect.Response[vibekanban.CreateProjectBranchResponse], error) {
	return W.WCreateProjectBranch(a0, a1)
}
func (W _github_com_breadchris_share_gen_proto_vibekanban_vibekanbanconnect_VibeKanbanServiceHandler) CreateTask(a0 context.Context, a1 *connect.Request[vibekanban.CreateTaskRequest]) (*connect.Response[vibekanban.CreateTaskResponse], error) {
	return W.WCreateTask(a0, a1)
}
func (W _github_com_breadchris_share_gen_proto_vibekanban_vibekanbanconnect_VibeKanbanServiceHandler) CreateTaskAttempt(a0 context.Context, a1 *connect.Request[vibekanban.CreateTaskAttemptRequest]) (*connect.Response[vibekanban.CreateTaskAttemptResponse], error) {
	return W.WCreateTaskAttempt(a0, a1)
}
func (W _github_com_breadchris_share_gen_proto_vibekanban_vibekanbanconnect_VibeKanbanServiceHandler) DeleteProject(a0 context.Context, a1 *connect.Request[vibekanban.DeleteProjectRequest]) (*connect.Response[emptypb.Empty], error) {
	return W.WDeleteProject(a0, a1)
}
func (W _github_com_breadchris_share_gen_proto_vibekanban_vibekanbanconnect_VibeKanbanServiceHandler) DeleteTask(a0 context.Context, a1 *connect.Request[vibekanban.DeleteTaskRequest]) (*connect.Response[emptypb.Empty], error) {
	return W.WDeleteTask(a0, a1)
}
func (W _github_com_breadchris_share_gen_proto_vibekanban_vibekanbanconnect_VibeKanbanServiceHandler) GetAttemptDiff(a0 context.Context, a1 *connect.Request[vibekanban.GetAttemptDiffRequest]) (*connect.Response[vibekanban.GetAttemptDiffResponse], error) {
	return W.WGetAttemptDiff(a0, a1)
}
func (W _github_com_breadchris_share_gen_proto_vibekanban_vibekanbanconnect_VibeKanbanServiceHandler) GetAttemptStatus(a0 context.Context, a1 *connect.Request[vibekanban.GetAttemptStatusRequest]) (*connect.Response[vibekanban.GetAttemptStatusResponse], error) {
	return W.WGetAttemptStatus(a0, a1)
}
func (W _github_com_breadchris_share_gen_proto_vibekanban_vibekanbanconnect_VibeKanbanServiceHandler) GetDebugProcesses(a0 context.Context, a1 *connect.Request[vibekanban.GetDebugProcessesRequest]) (*connect.Response[vibekanban.GetDebugProcessesResponse], error) {
	return W.WGetDebugProcesses(a0, a1)
}
func (W _github_com_breadchris_share_gen_proto_vibekanban_vibekanbanconnect_VibeKanbanServiceHandler) GetProcesses(a0 context.Context, a1 *connect.Request[vibekanban.GetProcessesRequest]) (*connect.Response[vibekanban.GetProcessesResponse], error) {
	return W.WGetProcesses(a0, a1)
}
func (W _github_com_breadchris_share_gen_proto_vibekanban_vibekanbanconnect_VibeKanbanServiceHandler) GetProject(a0 context.Context, a1 *connect.Request[vibekanban.GetProjectRequest]) (*connect.Response[vibekanban.GetProjectResponse], error) {
	return W.WGetProject(a0, a1)
}
func (W _github_com_breadchris_share_gen_proto_vibekanban_vibekanbanconnect_VibeKanbanServiceHandler) GetProjectBranches(a0 context.Context, a1 *connect.Request[vibekanban.GetProjectBranchesRequest]) (*connect.Response[vibekanban.GetProjectBranchesResponse], error) {
	return W.WGetProjectBranches(a0, a1)
}
func (W _github_com_breadchris_share_gen_proto_vibekanban_vibekanbanconnect_VibeKanbanServiceHandler) GetTaskAttempts(a0 context.Context, a1 *connect.Request[vibekanban.GetTaskAttemptsRequest]) (*connect.Response[vibekanban.GetTaskAttemptsResponse], error) {
	return W.WGetTaskAttempts(a0, a1)
}
func (W _github_com_breadchris_share_gen_proto_vibekanban_vibekanbanconnect_VibeKanbanServiceHandler) GetTasks(a0 context.Context, a1 *connect.Request[vibekanban.GetTasksRequest]) (*connect.Response[vibekanban.GetTasksResponse], error) {
	return W.WGetTasks(a0, a1)
}
func (W _github_com_breadchris_share_gen_proto_vibekanban_vibekanbanconnect_VibeKanbanServiceHandler) KillProcess(a0 context.Context, a1 *connect.Request[vibekanban.KillProcessRequest]) (*connect.Response[emptypb.Empty], error) {
	return W.WKillProcess(a0, a1)
}
func (W _github_com_breadchris_share_gen_proto_vibekanban_vibekanbanconnect_VibeKanbanServiceHandler) ListProjects(a0 context.Context, a1 *connect.Request[vibekanban.ListProjectsRequest]) (*connect.Response[vibekanban.ListProjectsResponse], error) {
	return W.WListProjects(a0, a1)
}
func (W _github_com_breadchris_share_gen_proto_vibekanban_vibekanbanconnect_VibeKanbanServiceHandler) MergeAttempt(a0 context.Context, a1 *connect.Request[vibekanban.MergeAttemptRequest]) (*connect.Response[vibekanban.MergeAttemptResponse], error) {
	return W.WMergeAttempt(a0, a1)
}
func (W _github_com_breadchris_share_gen_proto_vibekanban_vibekanbanconnect_VibeKanbanServiceHandler) StartTaskAttempt(a0 context.Context, a1 *connect.Request[vibekanban.StartTaskAttemptRequest]) (*connect.Response[vibekanban.StartTaskAttemptResponse], error) {
	return W.WStartTaskAttempt(a0, a1)
}
func (W _github_com_breadchris_share_gen_proto_vibekanban_vibekanbanconnect_VibeKanbanServiceHandler) UpdateProject(a0 context.Context, a1 *connect.Request[vibekanban.UpdateProjectRequest]) (*connect.Response[vibekanban.UpdateProjectResponse], error) {
	return W.WUpdateProject(a0, a1)
}
func (W _github_com_breadchris_share_gen_proto_vibekanban_vibekanbanconnect_VibeKanbanServiceHandler) UpdateTask(a0 context.Context, a1 *connect.Request[vibekanban.UpdateTaskRequest]) (*connect.Response[vibekanban.UpdateTaskResponse], error) {
	return W.WUpdateTask(a0, a1)
}
