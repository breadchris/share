// Code generated by 'yaegi extract connectrpc.com/connect'. DO NOT EDIT.

package symbol

import (
	"connectrpc.com/connect"
	"go/constant"
	"go/token"
	"io"
	"net/http"
	"reflect"
)

func init() {
	Symbols["connectrpc.com/connect/connect"] = map[string]reflect.Value{
		// function, constant and variable definitions
		"CodeAborted":                      reflect.ValueOf(connect.CodeAborted),
		"CodeAlreadyExists":                reflect.ValueOf(connect.CodeAlreadyExists),
		"CodeCanceled":                     reflect.ValueOf(connect.CodeCanceled),
		"CodeDataLoss":                     reflect.ValueOf(connect.CodeDataLoss),
		"CodeDeadlineExceeded":             reflect.ValueOf(connect.CodeDeadlineExceeded),
		"CodeFailedPrecondition":           reflect.ValueOf(connect.CodeFailedPrecondition),
		"CodeInternal":                     reflect.ValueOf(connect.CodeInternal),
		"CodeInvalidArgument":              reflect.ValueOf(connect.CodeInvalidArgument),
		"CodeNotFound":                     reflect.ValueOf(connect.CodeNotFound),
		"CodeOf":                           reflect.ValueOf(connect.CodeOf),
		"CodeOutOfRange":                   reflect.ValueOf(connect.CodeOutOfRange),
		"CodePermissionDenied":             reflect.ValueOf(connect.CodePermissionDenied),
		"CodeResourceExhausted":            reflect.ValueOf(connect.CodeResourceExhausted),
		"CodeUnauthenticated":              reflect.ValueOf(connect.CodeUnauthenticated),
		"CodeUnavailable":                  reflect.ValueOf(connect.CodeUnavailable),
		"CodeUnimplemented":                reflect.ValueOf(connect.CodeUnimplemented),
		"CodeUnknown":                      reflect.ValueOf(connect.CodeUnknown),
		"DecodeBinaryHeader":               reflect.ValueOf(connect.DecodeBinaryHeader),
		"EncodeBinaryHeader":               reflect.ValueOf(connect.EncodeBinaryHeader),
		"IdempotencyIdempotent":            reflect.ValueOf(connect.IdempotencyIdempotent),
		"IdempotencyNoSideEffects":         reflect.ValueOf(connect.IdempotencyNoSideEffects),
		"IdempotencyUnknown":               reflect.ValueOf(connect.IdempotencyUnknown),
		"IsAtLeastVersion0_0_1":            reflect.ValueOf(connect.IsAtLeastVersion0_0_1),
		"IsAtLeastVersion0_1_0":            reflect.ValueOf(connect.IsAtLeastVersion0_1_0),
		"IsAtLeastVersion1_13_0":           reflect.ValueOf(connect.IsAtLeastVersion1_13_0),
		"IsAtLeastVersion1_7_0":            reflect.ValueOf(connect.IsAtLeastVersion1_7_0),
		"IsNotModifiedError":               reflect.ValueOf(connect.IsNotModifiedError),
		"IsWireError":                      reflect.ValueOf(connect.IsWireError),
		"NewError":                         reflect.ValueOf(connect.NewError),
		"NewErrorDetail":                   reflect.ValueOf(connect.NewErrorDetail),
		"NewErrorWriter":                   reflect.ValueOf(connect.NewErrorWriter),
		"NewNotModifiedError":              reflect.ValueOf(connect.NewNotModifiedError),
		"NewWireError":                     reflect.ValueOf(connect.NewWireError),
		"ProtocolConnect":                  reflect.ValueOf(constant.MakeFromLiteral("\"connect\"", token.STRING, 0)),
		"ProtocolGRPC":                     reflect.ValueOf(constant.MakeFromLiteral("\"grpc\"", token.STRING, 0)),
		"ProtocolGRPCWeb":                  reflect.ValueOf(constant.MakeFromLiteral("\"grpcweb\"", token.STRING, 0)),
		"StreamTypeBidi":                   reflect.ValueOf(connect.StreamTypeBidi),
		"StreamTypeClient":                 reflect.ValueOf(connect.StreamTypeClient),
		"StreamTypeServer":                 reflect.ValueOf(connect.StreamTypeServer),
		"StreamTypeUnary":                  reflect.ValueOf(connect.StreamTypeUnary),
		"Version":                          reflect.ValueOf(constant.MakeFromLiteral("\"1.18.1\"", token.STRING, 0)),
		"WithAcceptCompression":            reflect.ValueOf(connect.WithAcceptCompression),
		"WithClientOptions":                reflect.ValueOf(connect.WithClientOptions),
		"WithCodec":                        reflect.ValueOf(connect.WithCodec),
		"WithCompressMinBytes":             reflect.ValueOf(connect.WithCompressMinBytes),
		"WithCompression":                  reflect.ValueOf(connect.WithCompression),
		"WithConditionalHandlerOptions":    reflect.ValueOf(connect.WithConditionalHandlerOptions),
		"WithGRPC":                         reflect.ValueOf(connect.WithGRPC),
		"WithGRPCWeb":                      reflect.ValueOf(connect.WithGRPCWeb),
		"WithHTTPGet":                      reflect.ValueOf(connect.WithHTTPGet),
		"WithHTTPGetMaxURLSize":            reflect.ValueOf(connect.WithHTTPGetMaxURLSize),
		"WithHandlerOptions":               reflect.ValueOf(connect.WithHandlerOptions),
		"WithIdempotency":                  reflect.ValueOf(connect.WithIdempotency),
		"WithInterceptors":                 reflect.ValueOf(connect.WithInterceptors),
		"WithOptions":                      reflect.ValueOf(connect.WithOptions),
		"WithProtoJSON":                    reflect.ValueOf(connect.WithProtoJSON),
		"WithReadMaxBytes":                 reflect.ValueOf(connect.WithReadMaxBytes),
		"WithRecover":                      reflect.ValueOf(connect.WithRecover),
		"WithRequestInitializer":           reflect.ValueOf(connect.WithRequestInitializer),
		"WithRequireConnectProtocolHeader": reflect.ValueOf(connect.WithRequireConnectProtocolHeader),
		"WithResponseInitializer":          reflect.ValueOf(connect.WithResponseInitializer),
		"WithSchema":                       reflect.ValueOf(connect.WithSchema),
		"WithSendCompression":              reflect.ValueOf(connect.WithSendCompression),
		"WithSendGzip":                     reflect.ValueOf(connect.WithSendGzip),
		"WithSendMaxBytes":                 reflect.ValueOf(connect.WithSendMaxBytes),

		// type definitions
		"AnyRequest":           reflect.ValueOf((*connect.AnyRequest)(nil)),
		"AnyResponse":          reflect.ValueOf((*connect.AnyResponse)(nil)),
		"ClientOption":         reflect.ValueOf((*connect.ClientOption)(nil)),
		"Code":                 reflect.ValueOf((*connect.Code)(nil)),
		"Codec":                reflect.ValueOf((*connect.Codec)(nil)),
		"Compressor":           reflect.ValueOf((*connect.Compressor)(nil)),
		"Decompressor":         reflect.ValueOf((*connect.Decompressor)(nil)),
		"Error":                reflect.ValueOf((*connect.Error)(nil)),
		"ErrorDetail":          reflect.ValueOf((*connect.ErrorDetail)(nil)),
		"ErrorWriter":          reflect.ValueOf((*connect.ErrorWriter)(nil)),
		"HTTPClient":           reflect.ValueOf((*connect.HTTPClient)(nil)),
		"Handler":              reflect.ValueOf((*connect.Handler)(nil)),
		"HandlerOption":        reflect.ValueOf((*connect.HandlerOption)(nil)),
		"IdempotencyLevel":     reflect.ValueOf((*connect.IdempotencyLevel)(nil)),
		"Interceptor":          reflect.ValueOf((*connect.Interceptor)(nil)),
		"Option":               reflect.ValueOf((*connect.Option)(nil)),
		"Peer":                 reflect.ValueOf((*connect.Peer)(nil)),
		"Spec":                 reflect.ValueOf((*connect.Spec)(nil)),
		"StreamType":           reflect.ValueOf((*connect.StreamType)(nil)),
		"StreamingClientConn":  reflect.ValueOf((*connect.StreamingClientConn)(nil)),
		"StreamingClientFunc":  reflect.ValueOf((*connect.StreamingClientFunc)(nil)),
		"StreamingHandlerConn": reflect.ValueOf((*connect.StreamingHandlerConn)(nil)),
		"StreamingHandlerFunc": reflect.ValueOf((*connect.StreamingHandlerFunc)(nil)),
		"UnaryFunc":            reflect.ValueOf((*connect.UnaryFunc)(nil)),
		"UnaryInterceptorFunc": reflect.ValueOf((*connect.UnaryInterceptorFunc)(nil)),

		// interface wrapper definitions
		"_AnyRequest":           reflect.ValueOf((*_connectrpc_com_connect_AnyRequest)(nil)),
		"_AnyResponse":          reflect.ValueOf((*_connectrpc_com_connect_AnyResponse)(nil)),
		"_ClientOption":         reflect.ValueOf((*_connectrpc_com_connect_ClientOption)(nil)),
		"_Codec":                reflect.ValueOf((*_connectrpc_com_connect_Codec)(nil)),
		"_Compressor":           reflect.ValueOf((*_connectrpc_com_connect_Compressor)(nil)),
		"_Decompressor":         reflect.ValueOf((*_connectrpc_com_connect_Decompressor)(nil)),
		"_HTTPClient":           reflect.ValueOf((*_connectrpc_com_connect_HTTPClient)(nil)),
		"_HandlerOption":        reflect.ValueOf((*_connectrpc_com_connect_HandlerOption)(nil)),
		"_Interceptor":          reflect.ValueOf((*_connectrpc_com_connect_Interceptor)(nil)),
		"_Option":               reflect.ValueOf((*_connectrpc_com_connect_Option)(nil)),
		"_StreamingClientConn":  reflect.ValueOf((*_connectrpc_com_connect_StreamingClientConn)(nil)),
		"_StreamingHandlerConn": reflect.ValueOf((*_connectrpc_com_connect_StreamingHandlerConn)(nil)),
	}
}

// _connectrpc_com_connect_AnyRequest is an interface wrapper for AnyRequest type
type _connectrpc_com_connect_AnyRequest struct {
	IValue      interface{}
	WAny        func() any
	WHTTPMethod func() string
	WHeader     func() http.Header
	WPeer       func() connect.Peer
	WSpec       func() connect.Spec
}

func (W _connectrpc_com_connect_AnyRequest) Any() any            { return W.WAny() }
func (W _connectrpc_com_connect_AnyRequest) HTTPMethod() string  { return W.WHTTPMethod() }
func (W _connectrpc_com_connect_AnyRequest) Header() http.Header { return W.WHeader() }
func (W _connectrpc_com_connect_AnyRequest) Peer() connect.Peer  { return W.WPeer() }
func (W _connectrpc_com_connect_AnyRequest) Spec() connect.Spec  { return W.WSpec() }

// _connectrpc_com_connect_AnyResponse is an interface wrapper for AnyResponse type
type _connectrpc_com_connect_AnyResponse struct {
	IValue   interface{}
	WAny     func() any
	WHeader  func() http.Header
	WTrailer func() http.Header
}

func (W _connectrpc_com_connect_AnyResponse) Any() any             { return W.WAny() }
func (W _connectrpc_com_connect_AnyResponse) Header() http.Header  { return W.WHeader() }
func (W _connectrpc_com_connect_AnyResponse) Trailer() http.Header { return W.WTrailer() }

// _connectrpc_com_connect_ClientOption is an interface wrapper for ClientOption type
type _connectrpc_com_connect_ClientOption struct {
	IValue interface{}
}

// _connectrpc_com_connect_Codec is an interface wrapper for Codec type
type _connectrpc_com_connect_Codec struct {
	IValue     interface{}
	WMarshal   func(a0 any) ([]byte, error)
	WName      func() string
	WUnmarshal func(a0 []byte, a1 any) error
}

func (W _connectrpc_com_connect_Codec) Marshal(a0 any) ([]byte, error) { return W.WMarshal(a0) }
func (W _connectrpc_com_connect_Codec) Name() string                   { return W.WName() }
func (W _connectrpc_com_connect_Codec) Unmarshal(a0 []byte, a1 any) error {
	return W.WUnmarshal(a0, a1)
}

// _connectrpc_com_connect_Compressor is an interface wrapper for Compressor type
type _connectrpc_com_connect_Compressor struct {
	IValue interface{}
	WClose func() error
	WReset func(a0 io.Writer)
	WWrite func(p []byte) (n int, err error)
}

func (W _connectrpc_com_connect_Compressor) Close() error                      { return W.WClose() }
func (W _connectrpc_com_connect_Compressor) Reset(a0 io.Writer)                { W.WReset(a0) }
func (W _connectrpc_com_connect_Compressor) Write(p []byte) (n int, err error) { return W.WWrite(p) }

// _connectrpc_com_connect_Decompressor is an interface wrapper for Decompressor type
type _connectrpc_com_connect_Decompressor struct {
	IValue interface{}
	WClose func() error
	WRead  func(p []byte) (n int, err error)
	WReset func(a0 io.Reader) error
}

func (W _connectrpc_com_connect_Decompressor) Close() error                     { return W.WClose() }
func (W _connectrpc_com_connect_Decompressor) Read(p []byte) (n int, err error) { return W.WRead(p) }
func (W _connectrpc_com_connect_Decompressor) Reset(a0 io.Reader) error         { return W.WReset(a0) }

// _connectrpc_com_connect_HTTPClient is an interface wrapper for HTTPClient type
type _connectrpc_com_connect_HTTPClient struct {
	IValue interface{}
	WDo    func(a0 *http.Request) (*http.Response, error)
}

func (W _connectrpc_com_connect_HTTPClient) Do(a0 *http.Request) (*http.Response, error) {
	return W.WDo(a0)
}

// _connectrpc_com_connect_HandlerOption is an interface wrapper for HandlerOption type
type _connectrpc_com_connect_HandlerOption struct {
	IValue interface{}
}

// _connectrpc_com_connect_Interceptor is an interface wrapper for Interceptor type
type _connectrpc_com_connect_Interceptor struct {
	IValue                interface{}
	WWrapStreamingClient  func(a0 connect.StreamingClientFunc) connect.StreamingClientFunc
	WWrapStreamingHandler func(a0 connect.StreamingHandlerFunc) connect.StreamingHandlerFunc
	WWrapUnary            func(a0 connect.UnaryFunc) connect.UnaryFunc
}

func (W _connectrpc_com_connect_Interceptor) WrapStreamingClient(a0 connect.StreamingClientFunc) connect.StreamingClientFunc {
	return W.WWrapStreamingClient(a0)
}
func (W _connectrpc_com_connect_Interceptor) WrapStreamingHandler(a0 connect.StreamingHandlerFunc) connect.StreamingHandlerFunc {
	return W.WWrapStreamingHandler(a0)
}
func (W _connectrpc_com_connect_Interceptor) WrapUnary(a0 connect.UnaryFunc) connect.UnaryFunc {
	return W.WWrapUnary(a0)
}

// _connectrpc_com_connect_Option is an interface wrapper for Option type
type _connectrpc_com_connect_Option struct {
	IValue interface{}
}

// _connectrpc_com_connect_StreamingClientConn is an interface wrapper for StreamingClientConn type
type _connectrpc_com_connect_StreamingClientConn struct {
	IValue           interface{}
	WCloseRequest    func() error
	WCloseResponse   func() error
	WPeer            func() connect.Peer
	WReceive         func(a0 any) error
	WRequestHeader   func() http.Header
	WResponseHeader  func() http.Header
	WResponseTrailer func() http.Header
	WSend            func(a0 any) error
	WSpec            func() connect.Spec
}

func (W _connectrpc_com_connect_StreamingClientConn) CloseRequest() error  { return W.WCloseRequest() }
func (W _connectrpc_com_connect_StreamingClientConn) CloseResponse() error { return W.WCloseResponse() }
func (W _connectrpc_com_connect_StreamingClientConn) Peer() connect.Peer   { return W.WPeer() }
func (W _connectrpc_com_connect_StreamingClientConn) Receive(a0 any) error { return W.WReceive(a0) }
func (W _connectrpc_com_connect_StreamingClientConn) RequestHeader() http.Header {
	return W.WRequestHeader()
}
func (W _connectrpc_com_connect_StreamingClientConn) ResponseHeader() http.Header {
	return W.WResponseHeader()
}
func (W _connectrpc_com_connect_StreamingClientConn) ResponseTrailer() http.Header {
	return W.WResponseTrailer()
}
func (W _connectrpc_com_connect_StreamingClientConn) Send(a0 any) error  { return W.WSend(a0) }
func (W _connectrpc_com_connect_StreamingClientConn) Spec() connect.Spec { return W.WSpec() }

// _connectrpc_com_connect_StreamingHandlerConn is an interface wrapper for StreamingHandlerConn type
type _connectrpc_com_connect_StreamingHandlerConn struct {
	IValue           interface{}
	WPeer            func() connect.Peer
	WReceive         func(a0 any) error
	WRequestHeader   func() http.Header
	WResponseHeader  func() http.Header
	WResponseTrailer func() http.Header
	WSend            func(a0 any) error
	WSpec            func() connect.Spec
}

func (W _connectrpc_com_connect_StreamingHandlerConn) Peer() connect.Peer   { return W.WPeer() }
func (W _connectrpc_com_connect_StreamingHandlerConn) Receive(a0 any) error { return W.WReceive(a0) }
func (W _connectrpc_com_connect_StreamingHandlerConn) RequestHeader() http.Header {
	return W.WRequestHeader()
}
func (W _connectrpc_com_connect_StreamingHandlerConn) ResponseHeader() http.Header {
	return W.WResponseHeader()
}
func (W _connectrpc_com_connect_StreamingHandlerConn) ResponseTrailer() http.Header {
	return W.WResponseTrailer()
}
func (W _connectrpc_com_connect_StreamingHandlerConn) Send(a0 any) error  { return W.WSend(a0) }
func (W _connectrpc_com_connect_StreamingHandlerConn) Spec() connect.Spec { return W.WSpec() }
