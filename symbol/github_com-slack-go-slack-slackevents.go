// Code generated by 'yaegi extract github.com/slack-go/slack/slackevents'. DO NOT EDIT.

package symbol

import (
	"github.com/slack-go/slack/slackevents"
	"go/constant"
	"go/token"
	"reflect"
)

func init() {
	Symbols["github.com/slack-go/slack/slackevents/slackevents"] = map[string]reflect.Value{
		// function, constant and variable definitions
		"AppHomeOpened":              reflect.ValueOf(slackevents.AppHomeOpened),
		"AppMention":                 reflect.ValueOf(slackevents.AppMention),
		"AppRateLimited":             reflect.ValueOf(constant.MakeFromLiteral("\"app_rate_limited\"", token.STRING, 0)),
		"AppUninstalled":             reflect.ValueOf(slackevents.AppUninstalled),
		"CallbackEvent":              reflect.ValueOf(constant.MakeFromLiteral("\"event_callback\"", token.STRING, 0)),
		"ChannelArchive":             reflect.ValueOf(slackevents.ChannelArchive),
		"ChannelCreated":             reflect.ValueOf(slackevents.ChannelCreated),
		"ChannelDeleted":             reflect.ValueOf(slackevents.ChannelDeleted),
		"ChannelIDChanged":           reflect.ValueOf(slackevents.ChannelIDChanged),
		"ChannelLeft":                reflect.ValueOf(slackevents.ChannelLeft),
		"ChannelRename":              reflect.ValueOf(slackevents.ChannelRename),
		"ChannelUnarchive":           reflect.ValueOf(slackevents.ChannelUnarchive),
		"EmojiChanged":               reflect.ValueOf(slackevents.EmojiChanged),
		"EventsAPIEventMap":          reflect.ValueOf(&slackevents.EventsAPIEventMap).Elem(),
		"EventsAPIInnerEventMapping": reflect.ValueOf(&slackevents.EventsAPIInnerEventMapping).Elem(),
		"FileChange":                 reflect.ValueOf(slackevents.FileChange),
		"FileDeleted":                reflect.ValueOf(slackevents.FileDeleted),
		"FileShared":                 reflect.ValueOf(slackevents.FileShared),
		"FileUnshared":               reflect.ValueOf(slackevents.FileUnshared),
		"GridMigrationFinished":      reflect.ValueOf(slackevents.GridMigrationFinished),
		"GridMigrationStarted":       reflect.ValueOf(slackevents.GridMigrationStarted),
		"GroupArchive":               reflect.ValueOf(slackevents.GroupArchive),
		"GroupDeleted":               reflect.ValueOf(slackevents.GroupDeleted),
		"GroupLeft":                  reflect.ValueOf(slackevents.GroupLeft),
		"GroupRename":                reflect.ValueOf(slackevents.GroupRename),
		"GroupUnarchive":             reflect.ValueOf(slackevents.GroupUnarchive),
		"LinkShared":                 reflect.ValueOf(slackevents.LinkShared),
		"MemberJoinedChannel":        reflect.ValueOf(slackevents.MemberJoinedChannel),
		"MemberLeftChannel":          reflect.ValueOf(slackevents.MemberLeftChannel),
		"Message":                    reflect.ValueOf(slackevents.Message),
		"MessageMetadataDeleted":     reflect.ValueOf(slackevents.MessageMetadataDeleted),
		"MessageMetadataPosted":      reflect.ValueOf(slackevents.MessageMetadataPosted),
		"MessageMetadataUpdated":     reflect.ValueOf(slackevents.MessageMetadataUpdated),
		"OptionNoVerifyToken":        reflect.ValueOf(slackevents.OptionNoVerifyToken),
		"OptionVerifyToken":          reflect.ValueOf(slackevents.OptionVerifyToken),
		"ParseActionEvent":           reflect.ValueOf(slackevents.ParseActionEvent),
		"ParseEvent":                 reflect.ValueOf(slackevents.ParseEvent),
		"PinAdded":                   reflect.ValueOf(slackevents.PinAdded),
		"PinRemoved":                 reflect.ValueOf(slackevents.PinRemoved),
		"ReactionAdded":              reflect.ValueOf(slackevents.ReactionAdded),
		"ReactionRemoved":            reflect.ValueOf(slackevents.ReactionRemoved),
		"TeamAccessGranted":          reflect.ValueOf(slackevents.TeamAccessGranted),
		"TeamAccessRevoked":          reflect.ValueOf(slackevents.TeamAccessRevoked),
		"TeamJoin":                   reflect.ValueOf(slackevents.TeamJoin),
		"TokensRevoked":              reflect.ValueOf(slackevents.TokensRevoked),
		"URLVerification":            reflect.ValueOf(constant.MakeFromLiteral("\"url_verification\"", token.STRING, 0)),
		"UserProfileChanged":         reflect.ValueOf(slackevents.UserProfileChanged),
		"WorkflowStepExecute":        reflect.ValueOf(slackevents.WorkflowStepExecute),

		// type definitions
		"AppHomeOpenedEvent":            reflect.ValueOf((*slackevents.AppHomeOpenedEvent)(nil)),
		"AppMentionEvent":               reflect.ValueOf((*slackevents.AppMentionEvent)(nil)),
		"AppUninstalledEvent":           reflect.ValueOf((*slackevents.AppUninstalledEvent)(nil)),
		"ChallengeResponse":             reflect.ValueOf((*slackevents.ChallengeResponse)(nil)),
		"ChannelArchiveEvent":           reflect.ValueOf((*slackevents.ChannelArchiveEvent)(nil)),
		"ChannelCreatedEvent":           reflect.ValueOf((*slackevents.ChannelCreatedEvent)(nil)),
		"ChannelCreatedInfo":            reflect.ValueOf((*slackevents.ChannelCreatedInfo)(nil)),
		"ChannelDeletedEvent":           reflect.ValueOf((*slackevents.ChannelDeletedEvent)(nil)),
		"ChannelIDChangedEvent":         reflect.ValueOf((*slackevents.ChannelIDChangedEvent)(nil)),
		"ChannelLeftEvent":              reflect.ValueOf((*slackevents.ChannelLeftEvent)(nil)),
		"ChannelRenameEvent":            reflect.ValueOf((*slackevents.ChannelRenameEvent)(nil)),
		"ChannelRenameInfo":             reflect.ValueOf((*slackevents.ChannelRenameInfo)(nil)),
		"ChannelUnarchiveEvent":         reflect.ValueOf((*slackevents.ChannelUnarchiveEvent)(nil)),
		"Comment":                       reflect.ValueOf((*slackevents.Comment)(nil)),
		"Config":                        reflect.ValueOf((*slackevents.Config)(nil)),
		"Edited":                        reflect.ValueOf((*slackevents.Edited)(nil)),
		"EmojiChangedEvent":             reflect.ValueOf((*slackevents.EmojiChangedEvent)(nil)),
		"EventWorkflowStep":             reflect.ValueOf((*slackevents.EventWorkflowStep)(nil)),
		"EventsAPIAppRateLimited":       reflect.ValueOf((*slackevents.EventsAPIAppRateLimited)(nil)),
		"EventsAPICallbackEvent":        reflect.ValueOf((*slackevents.EventsAPICallbackEvent)(nil)),
		"EventsAPIEvent":                reflect.ValueOf((*slackevents.EventsAPIEvent)(nil)),
		"EventsAPIInnerEvent":           reflect.ValueOf((*slackevents.EventsAPIInnerEvent)(nil)),
		"EventsAPIType":                 reflect.ValueOf((*slackevents.EventsAPIType)(nil)),
		"EventsAPIURLVerificationEvent": reflect.ValueOf((*slackevents.EventsAPIURLVerificationEvent)(nil)),
		"File":                          reflect.ValueOf((*slackevents.File)(nil)),
		"FileChangeEvent":               reflect.ValueOf((*slackevents.FileChangeEvent)(nil)),
		"FileDeletedEvent":              reflect.ValueOf((*slackevents.FileDeletedEvent)(nil)),
		"FileEventFile":                 reflect.ValueOf((*slackevents.FileEventFile)(nil)),
		"FileSharedEvent":               reflect.ValueOf((*slackevents.FileSharedEvent)(nil)),
		"FileUnsharedEvent":             reflect.ValueOf((*slackevents.FileUnsharedEvent)(nil)),
		"GridMigrationFinishedEvent":    reflect.ValueOf((*slackevents.GridMigrationFinishedEvent)(nil)),
		"GridMigrationStartedEvent":     reflect.ValueOf((*slackevents.GridMigrationStartedEvent)(nil)),
		"GroupArchiveEvent":             reflect.ValueOf((*slackevents.GroupArchiveEvent)(nil)),
		"GroupDeletedEvent":             reflect.ValueOf((*slackevents.GroupDeletedEvent)(nil)),
		"GroupLeftEvent":                reflect.ValueOf((*slackevents.GroupLeftEvent)(nil)),
		"GroupRenameEvent":              reflect.ValueOf((*slackevents.GroupRenameEvent)(nil)),
		"GroupRenameInfo":               reflect.ValueOf((*slackevents.GroupRenameInfo)(nil)),
		"GroupUnarchiveEvent":           reflect.ValueOf((*slackevents.GroupUnarchiveEvent)(nil)),
		"Icon":                          reflect.ValueOf((*slackevents.Icon)(nil)),
		"Item":                          reflect.ValueOf((*slackevents.Item)(nil)),
		"ItemMessage":                   reflect.ValueOf((*slackevents.ItemMessage)(nil)),
		"JSONTime":                      reflect.ValueOf((*slackevents.JSONTime)(nil)),
		"LinkSharedEvent":               reflect.ValueOf((*slackevents.LinkSharedEvent)(nil)),
		"MemberJoinedChannelEvent":      reflect.ValueOf((*slackevents.MemberJoinedChannelEvent)(nil)),
		"MemberLeftChannelEvent":        reflect.ValueOf((*slackevents.MemberLeftChannelEvent)(nil)),
		"MessageAction":                 reflect.ValueOf((*slackevents.MessageAction)(nil)),
		"MessageActionEntity":           reflect.ValueOf((*slackevents.MessageActionEntity)(nil)),
		"MessageActionResponse":         reflect.ValueOf((*slackevents.MessageActionResponse)(nil)),
		"MessageEvent":                  reflect.ValueOf((*slackevents.MessageEvent)(nil)),
		"MessageMetadataDeletedEvent":   reflect.ValueOf((*slackevents.MessageMetadataDeletedEvent)(nil)),
		"MessageMetadataPostedEvent":    reflect.ValueOf((*slackevents.MessageMetadataPostedEvent)(nil)),
		"MessageMetadataUpdatedEvent":   reflect.ValueOf((*slackevents.MessageMetadataUpdatedEvent)(nil)),
		"Option":                        reflect.ValueOf((*slackevents.Option)(nil)),
		"PinAddedEvent":                 reflect.ValueOf((*slackevents.PinAddedEvent)(nil)),
		"PinRemovedEvent":               reflect.ValueOf((*slackevents.PinRemovedEvent)(nil)),
		"ReactionAddedEvent":            reflect.ValueOf((*slackevents.ReactionAddedEvent)(nil)),
		"ReactionRemovedEvent":          reflect.ValueOf((*slackevents.ReactionRemovedEvent)(nil)),
		"SharedLinks":                   reflect.ValueOf((*slackevents.SharedLinks)(nil)),
		"TeamAccessGrantedEvent":        reflect.ValueOf((*slackevents.TeamAccessGrantedEvent)(nil)),
		"TeamAccessRevokedEvent":        reflect.ValueOf((*slackevents.TeamAccessRevokedEvent)(nil)),
		"TeamJoinEvent":                 reflect.ValueOf((*slackevents.TeamJoinEvent)(nil)),
		"TokenComparator":               reflect.ValueOf((*slackevents.TokenComparator)(nil)),
		"TokensRevokedEvent":            reflect.ValueOf((*slackevents.TokensRevokedEvent)(nil)),
		"UserProfileChangedEvent":       reflect.ValueOf((*slackevents.UserProfileChangedEvent)(nil)),
		"WorkflowStepExecuteEvent":      reflect.ValueOf((*slackevents.WorkflowStepExecuteEvent)(nil)),
	}
}
