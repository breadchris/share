// Code generated by 'yaegi extract github.com/breadchris/share/vibekanban/process'. DO NOT EDIT.

package symbol

import (
	"context"
	"github.com/breadchris/share/vibekanban/process"
	"github.com/google/uuid"
	"os/exec"
	"reflect"
)

func init() {
	Symbols["github.com/breadchris/share/vibekanban/process/process"] = map[string]reflect.Value{
		// function, constant and variable definitions
		"CreateExecutor":             reflect.ValueOf(process.CreateExecutor),
		"CreateFollowupExecutor":     reflect.ValueOf(process.CreateFollowupExecutor),
		"ExecutorAmp":                reflect.ValueOf(process.ExecutorAmp),
		"ExecutorClaude":             reflect.ValueOf(process.ExecutorClaude),
		"ExecutorEcho":               reflect.ValueOf(process.ExecutorEcho),
		"ExecutorGemini":             reflect.ValueOf(process.ExecutorGemini),
		"ExecutorOpencode":           reflect.ValueOf(process.ExecutorOpencode),
		"NewCommandRunAction":        reflect.ValueOf(process.NewCommandRunAction),
		"NewExecutorError":           reflect.ValueOf(process.NewExecutorError),
		"NewFileReadAction":          reflect.ValueOf(process.NewFileReadAction),
		"NewFileWriteAction":         reflect.ValueOf(process.NewFileWriteAction),
		"NewOtherAction":             reflect.ValueOf(process.NewOtherAction),
		"NewProcessManager":          reflect.ValueOf(process.NewProcessManager),
		"NewProcessOutput":           reflect.ValueOf(process.NewProcessOutput),
		"NewSearchAction":            reflect.ValueOf(process.NewSearchAction),
		"NewSpawnContextFromCommand": reflect.ValueOf(process.NewSpawnContextFromCommand),
		"NewSpawnFailedError":        reflect.ValueOf(process.NewSpawnFailedError),
		"NewTaskCreateAction":        reflect.ValueOf(process.NewTaskCreateAction),
		"NewWebFetchAction":          reflect.ValueOf(process.NewWebFetchAction),

		// type definitions
		"ActionType":              reflect.ValueOf((*process.ActionType)(nil)),
		"AutoSetupConfig":         reflect.ValueOf((*process.AutoSetupConfig)(nil)),
		"ClaudeContentBlock":      reflect.ValueOf((*process.ClaudeContentBlock)(nil)),
		"ClaudeExecutor":          reflect.ValueOf((*process.ClaudeExecutor)(nil)),
		"ClaudeFollowupExecutor":  reflect.ValueOf((*process.ClaudeFollowupExecutor)(nil)),
		"ClaudeMessage":           reflect.ValueOf((*process.ClaudeMessage)(nil)),
		"ClaudeStreamMessage":     reflect.ValueOf((*process.ClaudeStreamMessage)(nil)),
		"CodingAgentType":         reflect.ValueOf((*process.CodingAgentType)(nil)),
		"DelegationContext":       reflect.ValueOf((*process.DelegationContext)(nil)),
		"DevServerType":           reflect.ValueOf((*process.DevServerType)(nil)),
		"EchoExecutor":            reflect.ValueOf((*process.EchoExecutor)(nil)),
		"Executor":                reflect.ValueOf((*process.Executor)(nil)),
		"ExecutorConfig":          reflect.ValueOf((*process.ExecutorConfig)(nil)),
		"ExecutorError":           reflect.ValueOf((*process.ExecutorError)(nil)),
		"ExecutorType":            reflect.ValueOf((*process.ExecutorType)(nil)),
		"FollowupCodingAgentType": reflect.ValueOf((*process.FollowupCodingAgentType)(nil)),
		"ManagedProcess":          reflect.ValueOf((*process.ManagedProcess)(nil)),
		"NormalizedConversation":  reflect.ValueOf((*process.NormalizedConversation)(nil)),
		"NormalizedEntry":         reflect.ValueOf((*process.NormalizedEntry)(nil)),
		"NormalizedEntryType":     reflect.ValueOf((*process.NormalizedEntryType)(nil)),
		"ProcessManager":          reflect.ValueOf((*process.ProcessManager)(nil)),
		"ProcessOutput":           reflect.ValueOf((*process.ProcessOutput)(nil)),
		"SetupScriptType":         reflect.ValueOf((*process.SetupScriptType)(nil)),
		"SpawnContext":            reflect.ValueOf((*process.SpawnContext)(nil)),

		// interface wrapper definitions
		"_Executor":     reflect.ValueOf((*_github_com_breadchris_share_vibekanban_process_Executor)(nil)),
		"_ExecutorType": reflect.ValueOf((*_github_com_breadchris_share_vibekanban_process_ExecutorType)(nil)),
	}
}

// _github_com_breadchris_share_vibekanban_process_Executor is an interface wrapper for Executor type
type _github_com_breadchris_share_vibekanban_process_Executor struct {
	IValue           interface{}
	WGetExecutorType func() process.ExecutorConfig
	WNormalizeLogs   func(logs string, worktreePath string) (*process.NormalizedConversation, error)
	WSpawn           func(ctx context.Context, taskID uuid.UUID, worktreePath string) (*exec.Cmd, error)
}

func (W _github_com_breadchris_share_vibekanban_process_Executor) GetExecutorType() process.ExecutorConfig {
	return W.WGetExecutorType()
}
func (W _github_com_breadchris_share_vibekanban_process_Executor) NormalizeLogs(logs string, worktreePath string) (*process.NormalizedConversation, error) {
	return W.WNormalizeLogs(logs, worktreePath)
}
func (W _github_com_breadchris_share_vibekanban_process_Executor) Spawn(ctx context.Context, taskID uuid.UUID, worktreePath string) (*exec.Cmd, error) {
	return W.WSpawn(ctx, taskID, worktreePath)
}

// _github_com_breadchris_share_vibekanban_process_ExecutorType is an interface wrapper for ExecutorType type
type _github_com_breadchris_share_vibekanban_process_ExecutorType struct {
	IValue      interface{}
	WConfig     func() process.ExecutorConfig
	WIsFollowup func() bool
}

func (W _github_com_breadchris_share_vibekanban_process_ExecutorType) Config() process.ExecutorConfig {
	return W.WConfig()
}
func (W _github_com_breadchris_share_vibekanban_process_ExecutorType) IsFollowup() bool {
	return W.WIsFollowup()
}
