// Code generated by 'yaegi extract github.com/yuin/goldmark'. DO NOT EDIT.

package symbol

import (
	"github.com/yuin/goldmark"
	"github.com/yuin/goldmark/parser"
	"github.com/yuin/goldmark/renderer"
	"io"
	"reflect"
)

func init() {
	Symbols["github.com/yuin/goldmark/goldmark"] = map[string]reflect.Value{
		// function, constant and variable definitions
		"Convert":             reflect.ValueOf(goldmark.Convert),
		"DefaultParser":       reflect.ValueOf(goldmark.DefaultParser),
		"DefaultRenderer":     reflect.ValueOf(goldmark.DefaultRenderer),
		"New":                 reflect.ValueOf(goldmark.New),
		"WithExtensions":      reflect.ValueOf(goldmark.WithExtensions),
		"WithParser":          reflect.ValueOf(goldmark.WithParser),
		"WithParserOptions":   reflect.ValueOf(goldmark.WithParserOptions),
		"WithRenderer":        reflect.ValueOf(goldmark.WithRenderer),
		"WithRendererOptions": reflect.ValueOf(goldmark.WithRendererOptions),

		// type definitions
		"Extender": reflect.ValueOf((*goldmark.Extender)(nil)),
		"Markdown": reflect.ValueOf((*goldmark.Markdown)(nil)),
		"Option":   reflect.ValueOf((*goldmark.Option)(nil)),

		// interface wrapper definitions
		"_Extender": reflect.ValueOf((*_github_com_yuin_goldmark_Extender)(nil)),
		"_Markdown": reflect.ValueOf((*_github_com_yuin_goldmark_Markdown)(nil)),
	}
}

// _github_com_yuin_goldmark_Extender is an interface wrapper for Extender type
type _github_com_yuin_goldmark_Extender struct {
	IValue  interface{}
	WExtend func(a0 goldmark.Markdown)
}

func (W _github_com_yuin_goldmark_Extender) Extend(a0 goldmark.Markdown) { W.WExtend(a0) }

// _github_com_yuin_goldmark_Markdown is an interface wrapper for Markdown type
type _github_com_yuin_goldmark_Markdown struct {
	IValue       interface{}
	WConvert     func(source []byte, writer io.Writer, opts ...parser.ParseOption) error
	WParser      func() parser.Parser
	WRenderer    func() renderer.Renderer
	WSetParser   func(a0 parser.Parser)
	WSetRenderer func(a0 renderer.Renderer)
}

func (W _github_com_yuin_goldmark_Markdown) Convert(source []byte, writer io.Writer, opts ...parser.ParseOption) error {
	return W.WConvert(source, writer, opts...)
}
func (W _github_com_yuin_goldmark_Markdown) Parser() parser.Parser            { return W.WParser() }
func (W _github_com_yuin_goldmark_Markdown) Renderer() renderer.Renderer      { return W.WRenderer() }
func (W _github_com_yuin_goldmark_Markdown) SetParser(a0 parser.Parser)       { W.WSetParser(a0) }
func (W _github_com_yuin_goldmark_Markdown) SetRenderer(a0 renderer.Renderer) { W.WSetRenderer(a0) }
