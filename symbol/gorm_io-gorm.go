// Code generated by 'yaegi extract gorm.io/gorm'. DO NOT EDIT.

package symbol

import (
	"context"
	"database/sql"
	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"
	"reflect"
)

func init() {
	Symbols["gorm.io/gorm/gorm"] = map[string]reflect.Value{
		// function, constant and variable definitions
		"ErrCheckConstraintViolated":       reflect.ValueOf(&gorm.ErrCheckConstraintViolated).Elem(),
		"ErrDryRunModeUnsupported":         reflect.ValueOf(&gorm.ErrDryRunModeUnsupported).Elem(),
		"ErrDuplicatedKey":                 reflect.ValueOf(&gorm.ErrDuplicatedKey).Elem(),
		"ErrEmptySlice":                    reflect.ValueOf(&gorm.ErrEmptySlice).Elem(),
		"ErrForeignKeyViolated":            reflect.ValueOf(&gorm.ErrForeignKeyViolated).Elem(),
		"ErrInvalidDB":                     reflect.ValueOf(&gorm.ErrInvalidDB).Elem(),
		"ErrInvalidData":                   reflect.ValueOf(&gorm.ErrInvalidData).Elem(),
		"ErrInvalidField":                  reflect.ValueOf(&gorm.ErrInvalidField).Elem(),
		"ErrInvalidTransaction":            reflect.ValueOf(&gorm.ErrInvalidTransaction).Elem(),
		"ErrInvalidValue":                  reflect.ValueOf(&gorm.ErrInvalidValue).Elem(),
		"ErrInvalidValueOfLength":          reflect.ValueOf(&gorm.ErrInvalidValueOfLength).Elem(),
		"ErrMissingWhereClause":            reflect.ValueOf(&gorm.ErrMissingWhereClause).Elem(),
		"ErrModelAccessibleFieldsRequired": reflect.ValueOf(&gorm.ErrModelAccessibleFieldsRequired).Elem(),
		"ErrModelValueRequired":            reflect.ValueOf(&gorm.ErrModelValueRequired).Elem(),
		"ErrNotImplemented":                reflect.ValueOf(&gorm.ErrNotImplemented).Elem(),
		"ErrPreloadNotAllowed":             reflect.ValueOf(&gorm.ErrPreloadNotAllowed).Elem(),
		"ErrPrimaryKeyRequired":            reflect.ValueOf(&gorm.ErrPrimaryKeyRequired).Elem(),
		"ErrRecordNotFound":                reflect.ValueOf(&gorm.ErrRecordNotFound).Elem(),
		"ErrRegistered":                    reflect.ValueOf(&gorm.ErrRegistered).Elem(),
		"ErrSubQueryRequired":              reflect.ValueOf(&gorm.ErrSubQueryRequired).Elem(),
		"ErrUnsupportedDriver":             reflect.ValueOf(&gorm.ErrUnsupportedDriver).Elem(),
		"ErrUnsupportedRelation":           reflect.ValueOf(&gorm.ErrUnsupportedRelation).Elem(),
		"Expr":                             reflect.ValueOf(gorm.Expr),
		"NewPreparedStmtDB":                reflect.ValueOf(gorm.NewPreparedStmtDB),
		"Open":                             reflect.ValueOf(gorm.Open),
		"Scan":                             reflect.ValueOf(gorm.Scan),
		"ScanInitialized":                  reflect.ValueOf(gorm.ScanInitialized),
		"ScanOnConflictDoNothing":          reflect.ValueOf(gorm.ScanOnConflictDoNothing),
		"ScanUpdate":                       reflect.ValueOf(gorm.ScanUpdate),
		"WithResult":                       reflect.ValueOf(gorm.WithResult),

		// type definitions
		"Association":                   reflect.ValueOf((*gorm.Association)(nil)),
		"ColumnType":                    reflect.ValueOf((*gorm.ColumnType)(nil)),
		"Config":                        reflect.ValueOf((*gorm.Config)(nil)),
		"ConnPool":                      reflect.ValueOf((*gorm.ConnPool)(nil)),
		"ConnPoolBeginner":              reflect.ValueOf((*gorm.ConnPoolBeginner)(nil)),
		"DB":                            reflect.ValueOf((*gorm.DB)(nil)),
		"DeletedAt":                     reflect.ValueOf((*gorm.DeletedAt)(nil)),
		"Dialector":                     reflect.ValueOf((*gorm.Dialector)(nil)),
		"ErrorTranslator":               reflect.ValueOf((*gorm.ErrorTranslator)(nil)),
		"GetDBConnector":                reflect.ValueOf((*gorm.GetDBConnector)(nil)),
		"Index":                         reflect.ValueOf((*gorm.Index)(nil)),
		"JoinBuilder":                   reflect.ValueOf((*gorm.JoinBuilder)(nil)),
		"Migrator":                      reflect.ValueOf((*gorm.Migrator)(nil)),
		"Model":                         reflect.ValueOf((*gorm.Model)(nil)),
		"Option":                        reflect.ValueOf((*gorm.Option)(nil)),
		"ParamsFilter":                  reflect.ValueOf((*gorm.ParamsFilter)(nil)),
		"Plugin":                        reflect.ValueOf((*gorm.Plugin)(nil)),
		"PreloadBuilder":                reflect.ValueOf((*gorm.PreloadBuilder)(nil)),
		"PreparedStmtDB":                reflect.ValueOf((*gorm.PreparedStmtDB)(nil)),
		"PreparedStmtTX":                reflect.ValueOf((*gorm.PreparedStmtTX)(nil)),
		"Rows":                          reflect.ValueOf((*gorm.Rows)(nil)),
		"SavePointerDialectorInterface": reflect.ValueOf((*gorm.SavePointerDialectorInterface)(nil)),
		"ScanMode":                      reflect.ValueOf((*gorm.ScanMode)(nil)),
		"Session":                       reflect.ValueOf((*gorm.Session)(nil)),
		"SoftDeleteDeleteClause":        reflect.ValueOf((*gorm.SoftDeleteDeleteClause)(nil)),
		"SoftDeleteQueryClause":         reflect.ValueOf((*gorm.SoftDeleteQueryClause)(nil)),
		"SoftDeleteUpdateClause":        reflect.ValueOf((*gorm.SoftDeleteUpdateClause)(nil)),
		"Statement":                     reflect.ValueOf((*gorm.Statement)(nil)),
		"StatementModifier":             reflect.ValueOf((*gorm.StatementModifier)(nil)),
		"TableType":                     reflect.ValueOf((*gorm.TableType)(nil)),
		"Tx":                            reflect.ValueOf((*gorm.Tx)(nil)),
		"TxBeginner":                    reflect.ValueOf((*gorm.TxBeginner)(nil)),
		"TxCommitter":                   reflect.ValueOf((*gorm.TxCommitter)(nil)),
		"Valuer":                        reflect.ValueOf((*gorm.Valuer)(nil)),
		"ViewOption":                    reflect.ValueOf((*gorm.ViewOption)(nil)),

		// interface wrapper definitions
		"_ColumnType":                    reflect.ValueOf((*_gorm_io_gorm_ColumnType)(nil)),
		"_ConnPool":                      reflect.ValueOf((*_gorm_io_gorm_ConnPool)(nil)),
		"_ConnPoolBeginner":              reflect.ValueOf((*_gorm_io_gorm_ConnPoolBeginner)(nil)),
		"_Dialector":                     reflect.ValueOf((*_gorm_io_gorm_Dialector)(nil)),
		"_ErrorTranslator":               reflect.ValueOf((*_gorm_io_gorm_ErrorTranslator)(nil)),
		"_GetDBConnector":                reflect.ValueOf((*_gorm_io_gorm_GetDBConnector)(nil)),
		"_Index":                         reflect.ValueOf((*_gorm_io_gorm_Index)(nil)),
		"_JoinBuilder":                   reflect.ValueOf((*_gorm_io_gorm_JoinBuilder)(nil)),
		"_Migrator":                      reflect.ValueOf((*_gorm_io_gorm_Migrator)(nil)),
		"_Option":                        reflect.ValueOf((*_gorm_io_gorm_Option)(nil)),
		"_ParamsFilter":                  reflect.ValueOf((*_gorm_io_gorm_ParamsFilter)(nil)),
		"_Plugin":                        reflect.ValueOf((*_gorm_io_gorm_Plugin)(nil)),
		"_PreloadBuilder":                reflect.ValueOf((*_gorm_io_gorm_PreloadBuilder)(nil)),
		"_Rows":                          reflect.ValueOf((*_gorm_io_gorm_Rows)(nil)),
		"_SavePointerDialectorInterface": reflect.ValueOf((*_gorm_io_gorm_SavePointerDialectorInterface)(nil)),
		"_StatementModifier":             reflect.ValueOf((*_gorm_io_gorm_StatementModifier)(nil)),
		"_TableType":                     reflect.ValueOf((*_gorm_io_gorm_TableType)(nil)),
		"_Tx":                            reflect.ValueOf((*_gorm_io_gorm_Tx)(nil)),
		"_TxBeginner":                    reflect.ValueOf((*_gorm_io_gorm_TxBeginner)(nil)),
		"_TxCommitter":                   reflect.ValueOf((*_gorm_io_gorm_TxCommitter)(nil)),
		"_Valuer":                        reflect.ValueOf((*_gorm_io_gorm_Valuer)(nil)),
	}
}

// _gorm_io_gorm_ColumnType is an interface wrapper for ColumnType type
type _gorm_io_gorm_ColumnType struct {
	IValue            interface{}
	WAutoIncrement    func() (isAutoIncrement bool, ok bool)
	WColumnType       func() (columnType string, ok bool)
	WComment          func() (value string, ok bool)
	WDatabaseTypeName func() string
	WDecimalSize      func() (precision int64, scale int64, ok bool)
	WDefaultValue     func() (value string, ok bool)
	WLength           func() (length int64, ok bool)
	WName             func() string
	WNullable         func() (nullable bool, ok bool)
	WPrimaryKey       func() (isPrimaryKey bool, ok bool)
	WScanType         func() reflect.Type
	WUnique           func() (unique bool, ok bool)
}

func (W _gorm_io_gorm_ColumnType) AutoIncrement() (isAutoIncrement bool, ok bool) {
	return W.WAutoIncrement()
}
func (W _gorm_io_gorm_ColumnType) ColumnType() (columnType string, ok bool) { return W.WColumnType() }
func (W _gorm_io_gorm_ColumnType) Comment() (value string, ok bool)         { return W.WComment() }
func (W _gorm_io_gorm_ColumnType) DatabaseTypeName() string                 { return W.WDatabaseTypeName() }
func (W _gorm_io_gorm_ColumnType) DecimalSize() (precision int64, scale int64, ok bool) {
	return W.WDecimalSize()
}
func (W _gorm_io_gorm_ColumnType) DefaultValue() (value string, ok bool)    { return W.WDefaultValue() }
func (W _gorm_io_gorm_ColumnType) Length() (length int64, ok bool)          { return W.WLength() }
func (W _gorm_io_gorm_ColumnType) Name() string                             { return W.WName() }
func (W _gorm_io_gorm_ColumnType) Nullable() (nullable bool, ok bool)       { return W.WNullable() }
func (W _gorm_io_gorm_ColumnType) PrimaryKey() (isPrimaryKey bool, ok bool) { return W.WPrimaryKey() }
func (W _gorm_io_gorm_ColumnType) ScanType() reflect.Type                   { return W.WScanType() }
func (W _gorm_io_gorm_ColumnType) Unique() (unique bool, ok bool)           { return W.WUnique() }

// _gorm_io_gorm_ConnPool is an interface wrapper for ConnPool type
type _gorm_io_gorm_ConnPool struct {
	IValue           interface{}
	WExecContext     func(ctx context.Context, query string, args ...interface{}) (sql.Result, error)
	WPrepareContext  func(ctx context.Context, query string) (*sql.Stmt, error)
	WQueryContext    func(ctx context.Context, query string, args ...interface{}) (*sql.Rows, error)
	WQueryRowContext func(ctx context.Context, query string, args ...interface{}) *sql.Row
}

func (W _gorm_io_gorm_ConnPool) ExecContext(ctx context.Context, query string, args ...interface{}) (sql.Result, error) {
	return W.WExecContext(ctx, query, args...)
}
func (W _gorm_io_gorm_ConnPool) PrepareContext(ctx context.Context, query string) (*sql.Stmt, error) {
	return W.WPrepareContext(ctx, query)
}
func (W _gorm_io_gorm_ConnPool) QueryContext(ctx context.Context, query string, args ...interface{}) (*sql.Rows, error) {
	return W.WQueryContext(ctx, query, args...)
}
func (W _gorm_io_gorm_ConnPool) QueryRowContext(ctx context.Context, query string, args ...interface{}) *sql.Row {
	return W.WQueryRowContext(ctx, query, args...)
}

// _gorm_io_gorm_ConnPoolBeginner is an interface wrapper for ConnPoolBeginner type
type _gorm_io_gorm_ConnPoolBeginner struct {
	IValue   interface{}
	WBeginTx func(ctx context.Context, opts *sql.TxOptions) (gorm.ConnPool, error)
}

func (W _gorm_io_gorm_ConnPoolBeginner) BeginTx(ctx context.Context, opts *sql.TxOptions) (gorm.ConnPool, error) {
	return W.WBeginTx(ctx, opts)
}

// _gorm_io_gorm_Dialector is an interface wrapper for Dialector type
type _gorm_io_gorm_Dialector struct {
	IValue          interface{}
	WBindVarTo      func(writer clause.Writer, stmt *gorm.Statement, v interface{})
	WDataTypeOf     func(a0 *schema.Field) string
	WDefaultValueOf func(a0 *schema.Field) clause.Expression
	WExplain        func(sql string, vars ...interface{}) string
	WInitialize     func(a0 *gorm.DB) error
	WMigrator       func(db *gorm.DB) gorm.Migrator
	WName           func() string
	WQuoteTo        func(a0 clause.Writer, a1 string)
}

func (W _gorm_io_gorm_Dialector) BindVarTo(writer clause.Writer, stmt *gorm.Statement, v interface{}) {
	W.WBindVarTo(writer, stmt, v)
}
func (W _gorm_io_gorm_Dialector) DataTypeOf(a0 *schema.Field) string { return W.WDataTypeOf(a0) }
func (W _gorm_io_gorm_Dialector) DefaultValueOf(a0 *schema.Field) clause.Expression {
	return W.WDefaultValueOf(a0)
}
func (W _gorm_io_gorm_Dialector) Explain(sql string, vars ...interface{}) string {
	return W.WExplain(sql, vars...)
}
func (W _gorm_io_gorm_Dialector) Initialize(a0 *gorm.DB) error        { return W.WInitialize(a0) }
func (W _gorm_io_gorm_Dialector) Migrator(db *gorm.DB) gorm.Migrator  { return W.WMigrator(db) }
func (W _gorm_io_gorm_Dialector) Name() string                        { return W.WName() }
func (W _gorm_io_gorm_Dialector) QuoteTo(a0 clause.Writer, a1 string) { W.WQuoteTo(a0, a1) }

// _gorm_io_gorm_ErrorTranslator is an interface wrapper for ErrorTranslator type
type _gorm_io_gorm_ErrorTranslator struct {
	IValue     interface{}
	WTranslate func(err error) error
}

func (W _gorm_io_gorm_ErrorTranslator) Translate(err error) error { return W.WTranslate(err) }

// _gorm_io_gorm_GetDBConnector is an interface wrapper for GetDBConnector type
type _gorm_io_gorm_GetDBConnector struct {
	IValue     interface{}
	WGetDBConn func() (*sql.DB, error)
}

func (W _gorm_io_gorm_GetDBConnector) GetDBConn() (*sql.DB, error) { return W.WGetDBConn() }

// _gorm_io_gorm_Index is an interface wrapper for Index type
type _gorm_io_gorm_Index struct {
	IValue      interface{}
	WColumns    func() []string
	WName       func() string
	WOption     func() string
	WPrimaryKey func() (isPrimaryKey bool, ok bool)
	WTable      func() string
	WUnique     func() (unique bool, ok bool)
}

func (W _gorm_io_gorm_Index) Columns() []string                        { return W.WColumns() }
func (W _gorm_io_gorm_Index) Name() string                             { return W.WName() }
func (W _gorm_io_gorm_Index) Option() string                           { return W.WOption() }
func (W _gorm_io_gorm_Index) PrimaryKey() (isPrimaryKey bool, ok bool) { return W.WPrimaryKey() }
func (W _gorm_io_gorm_Index) Table() string                            { return W.WTable() }
func (W _gorm_io_gorm_Index) Unique() (unique bool, ok bool)           { return W.WUnique() }

// _gorm_io_gorm_JoinBuilder is an interface wrapper for JoinBuilder type
type _gorm_io_gorm_JoinBuilder struct {
	IValue  interface{}
	WNot    func(query interface{}, args ...interface{}) gorm.JoinBuilder
	WOmit   func(a0 ...string) gorm.JoinBuilder
	WOr     func(query interface{}, args ...interface{}) gorm.JoinBuilder
	WSelect func(a0 ...string) gorm.JoinBuilder
	WWhere  func(query interface{}, args ...interface{}) gorm.JoinBuilder
}

func (W _gorm_io_gorm_JoinBuilder) Not(query interface{}, args ...interface{}) gorm.JoinBuilder {
	return W.WNot(query, args...)
}
func (W _gorm_io_gorm_JoinBuilder) Omit(a0 ...string) gorm.JoinBuilder { return W.WOmit(a0...) }
func (W _gorm_io_gorm_JoinBuilder) Or(query interface{}, args ...interface{}) gorm.JoinBuilder {
	return W.WOr(query, args...)
}
func (W _gorm_io_gorm_JoinBuilder) Select(a0 ...string) gorm.JoinBuilder { return W.WSelect(a0...) }
func (W _gorm_io_gorm_JoinBuilder) Where(query interface{}, args ...interface{}) gorm.JoinBuilder {
	return W.WWhere(query, args...)
}

// _gorm_io_gorm_Migrator is an interface wrapper for Migrator type
type _gorm_io_gorm_Migrator struct {
	IValue               interface{}
	WAddColumn           func(dst interface{}, field string) error
	WAlterColumn         func(dst interface{}, field string) error
	WAutoMigrate         func(dst ...interface{}) error
	WColumnTypes         func(dst interface{}) ([]gorm.ColumnType, error)
	WCreateConstraint    func(dst interface{}, name string) error
	WCreateIndex         func(dst interface{}, name string) error
	WCreateTable         func(dst ...interface{}) error
	WCreateView          func(name string, option gorm.ViewOption) error
	WCurrentDatabase     func() string
	WDropColumn          func(dst interface{}, field string) error
	WDropConstraint      func(dst interface{}, name string) error
	WDropIndex           func(dst interface{}, name string) error
	WDropTable           func(dst ...interface{}) error
	WDropView            func(name string) error
	WFullDataTypeOf      func(a0 *schema.Field) clause.Expr
	WGetIndexes          func(dst interface{}) ([]gorm.Index, error)
	WGetTables           func() (tableList []string, err error)
	WGetTypeAliases      func(databaseTypeName string) []string
	WHasColumn           func(dst interface{}, field string) bool
	WHasConstraint       func(dst interface{}, name string) bool
	WHasIndex            func(dst interface{}, name string) bool
	WHasTable            func(dst interface{}) bool
	WMigrateColumn       func(dst interface{}, field *schema.Field, columnType gorm.ColumnType) error
	WMigrateColumnUnique func(dst interface{}, field *schema.Field, columnType gorm.ColumnType) error
	WRenameColumn        func(dst interface{}, oldName string, field string) error
	WRenameIndex         func(dst interface{}, oldName string, newName string) error
	WRenameTable         func(oldName interface{}, newName interface{}) error
	WTableType           func(dst interface{}) (gorm.TableType, error)
}

func (W _gorm_io_gorm_Migrator) AddColumn(dst interface{}, field string) error {
	return W.WAddColumn(dst, field)
}
func (W _gorm_io_gorm_Migrator) AlterColumn(dst interface{}, field string) error {
	return W.WAlterColumn(dst, field)
}
func (W _gorm_io_gorm_Migrator) AutoMigrate(dst ...interface{}) error { return W.WAutoMigrate(dst...) }
func (W _gorm_io_gorm_Migrator) ColumnTypes(dst interface{}) ([]gorm.ColumnType, error) {
	return W.WColumnTypes(dst)
}
func (W _gorm_io_gorm_Migrator) CreateConstraint(dst interface{}, name string) error {
	return W.WCreateConstraint(dst, name)
}
func (W _gorm_io_gorm_Migrator) CreateIndex(dst interface{}, name string) error {
	return W.WCreateIndex(dst, name)
}
func (W _gorm_io_gorm_Migrator) CreateTable(dst ...interface{}) error { return W.WCreateTable(dst...) }
func (W _gorm_io_gorm_Migrator) CreateView(name string, option gorm.ViewOption) error {
	return W.WCreateView(name, option)
}
func (W _gorm_io_gorm_Migrator) CurrentDatabase() string { return W.WCurrentDatabase() }
func (W _gorm_io_gorm_Migrator) DropColumn(dst interface{}, field string) error {
	return W.WDropColumn(dst, field)
}
func (W _gorm_io_gorm_Migrator) DropConstraint(dst interface{}, name string) error {
	return W.WDropConstraint(dst, name)
}
func (W _gorm_io_gorm_Migrator) DropIndex(dst interface{}, name string) error {
	return W.WDropIndex(dst, name)
}
func (W _gorm_io_gorm_Migrator) DropTable(dst ...interface{}) error { return W.WDropTable(dst...) }
func (W _gorm_io_gorm_Migrator) DropView(name string) error         { return W.WDropView(name) }
func (W _gorm_io_gorm_Migrator) FullDataTypeOf(a0 *schema.Field) clause.Expr {
	return W.WFullDataTypeOf(a0)
}
func (W _gorm_io_gorm_Migrator) GetIndexes(dst interface{}) ([]gorm.Index, error) {
	return W.WGetIndexes(dst)
}
func (W _gorm_io_gorm_Migrator) GetTables() (tableList []string, err error) { return W.WGetTables() }
func (W _gorm_io_gorm_Migrator) GetTypeAliases(databaseTypeName string) []string {
	return W.WGetTypeAliases(databaseTypeName)
}
func (W _gorm_io_gorm_Migrator) HasColumn(dst interface{}, field string) bool {
	return W.WHasColumn(dst, field)
}
func (W _gorm_io_gorm_Migrator) HasConstraint(dst interface{}, name string) bool {
	return W.WHasConstraint(dst, name)
}
func (W _gorm_io_gorm_Migrator) HasIndex(dst interface{}, name string) bool {
	return W.WHasIndex(dst, name)
}
func (W _gorm_io_gorm_Migrator) HasTable(dst interface{}) bool { return W.WHasTable(dst) }
func (W _gorm_io_gorm_Migrator) MigrateColumn(dst interface{}, field *schema.Field, columnType gorm.ColumnType) error {
	return W.WMigrateColumn(dst, field, columnType)
}
func (W _gorm_io_gorm_Migrator) MigrateColumnUnique(dst interface{}, field *schema.Field, columnType gorm.ColumnType) error {
	return W.WMigrateColumnUnique(dst, field, columnType)
}
func (W _gorm_io_gorm_Migrator) RenameColumn(dst interface{}, oldName string, field string) error {
	return W.WRenameColumn(dst, oldName, field)
}
func (W _gorm_io_gorm_Migrator) RenameIndex(dst interface{}, oldName string, newName string) error {
	return W.WRenameIndex(dst, oldName, newName)
}
func (W _gorm_io_gorm_Migrator) RenameTable(oldName interface{}, newName interface{}) error {
	return W.WRenameTable(oldName, newName)
}
func (W _gorm_io_gorm_Migrator) TableType(dst interface{}) (gorm.TableType, error) {
	return W.WTableType(dst)
}

// _gorm_io_gorm_Option is an interface wrapper for Option type
type _gorm_io_gorm_Option struct {
	IValue           interface{}
	WAfterInitialize func(a0 *gorm.DB) error
	WApply           func(a0 *gorm.Config) error
}

func (W _gorm_io_gorm_Option) AfterInitialize(a0 *gorm.DB) error { return W.WAfterInitialize(a0) }
func (W _gorm_io_gorm_Option) Apply(a0 *gorm.Config) error       { return W.WApply(a0) }

// _gorm_io_gorm_ParamsFilter is an interface wrapper for ParamsFilter type
type _gorm_io_gorm_ParamsFilter struct {
	IValue        interface{}
	WParamsFilter func(ctx context.Context, sql string, params ...interface{}) (string, []interface{})
}

func (W _gorm_io_gorm_ParamsFilter) ParamsFilter(ctx context.Context, sql string, params ...interface{}) (string, []interface{}) {
	return W.WParamsFilter(ctx, sql, params...)
}

// _gorm_io_gorm_Plugin is an interface wrapper for Plugin type
type _gorm_io_gorm_Plugin struct {
	IValue      interface{}
	WInitialize func(a0 *gorm.DB) error
	WName       func() string
}

func (W _gorm_io_gorm_Plugin) Initialize(a0 *gorm.DB) error { return W.WInitialize(a0) }
func (W _gorm_io_gorm_Plugin) Name() string                 { return W.WName() }

// _gorm_io_gorm_PreloadBuilder is an interface wrapper for PreloadBuilder type
type _gorm_io_gorm_PreloadBuilder struct {
	IValue          interface{}
	WLimit          func(offset int) gorm.PreloadBuilder
	WLimitPerRecord func(num int) gorm.PreloadBuilder
	WNot            func(query interface{}, args ...interface{}) gorm.PreloadBuilder
	WOffset         func(offset int) gorm.PreloadBuilder
	WOmit           func(a0 ...string) gorm.PreloadBuilder
	WOr             func(query interface{}, args ...interface{}) gorm.PreloadBuilder
	WOrder          func(value interface{}) gorm.PreloadBuilder
	WSelect         func(a0 ...string) gorm.PreloadBuilder
	WWhere          func(query interface{}, args ...interface{}) gorm.PreloadBuilder
}

func (W _gorm_io_gorm_PreloadBuilder) Limit(offset int) gorm.PreloadBuilder { return W.WLimit(offset) }
func (W _gorm_io_gorm_PreloadBuilder) LimitPerRecord(num int) gorm.PreloadBuilder {
	return W.WLimitPerRecord(num)
}
func (W _gorm_io_gorm_PreloadBuilder) Not(query interface{}, args ...interface{}) gorm.PreloadBuilder {
	return W.WNot(query, args...)
}
func (W _gorm_io_gorm_PreloadBuilder) Offset(offset int) gorm.PreloadBuilder {
	return W.WOffset(offset)
}
func (W _gorm_io_gorm_PreloadBuilder) Omit(a0 ...string) gorm.PreloadBuilder { return W.WOmit(a0...) }
func (W _gorm_io_gorm_PreloadBuilder) Or(query interface{}, args ...interface{}) gorm.PreloadBuilder {
	return W.WOr(query, args...)
}
func (W _gorm_io_gorm_PreloadBuilder) Order(value interface{}) gorm.PreloadBuilder {
	return W.WOrder(value)
}
func (W _gorm_io_gorm_PreloadBuilder) Select(a0 ...string) gorm.PreloadBuilder {
	return W.WSelect(a0...)
}
func (W _gorm_io_gorm_PreloadBuilder) Where(query interface{}, args ...interface{}) gorm.PreloadBuilder {
	return W.WWhere(query, args...)
}

// _gorm_io_gorm_Rows is an interface wrapper for Rows type
type _gorm_io_gorm_Rows struct {
	IValue       interface{}
	WClose       func() error
	WColumnTypes func() ([]*sql.ColumnType, error)
	WColumns     func() ([]string, error)
	WErr         func() error
	WNext        func() bool
	WScan        func(dest ...interface{}) error
}

func (W _gorm_io_gorm_Rows) Close() error                            { return W.WClose() }
func (W _gorm_io_gorm_Rows) ColumnTypes() ([]*sql.ColumnType, error) { return W.WColumnTypes() }
func (W _gorm_io_gorm_Rows) Columns() ([]string, error)              { return W.WColumns() }
func (W _gorm_io_gorm_Rows) Err() error                              { return W.WErr() }
func (W _gorm_io_gorm_Rows) Next() bool                              { return W.WNext() }
func (W _gorm_io_gorm_Rows) Scan(dest ...interface{}) error          { return W.WScan(dest...) }

// _gorm_io_gorm_SavePointerDialectorInterface is an interface wrapper for SavePointerDialectorInterface type
type _gorm_io_gorm_SavePointerDialectorInterface struct {
	IValue      interface{}
	WRollbackTo func(tx *gorm.DB, name string) error
	WSavePoint  func(tx *gorm.DB, name string) error
}

func (W _gorm_io_gorm_SavePointerDialectorInterface) RollbackTo(tx *gorm.DB, name string) error {
	return W.WRollbackTo(tx, name)
}
func (W _gorm_io_gorm_SavePointerDialectorInterface) SavePoint(tx *gorm.DB, name string) error {
	return W.WSavePoint(tx, name)
}

// _gorm_io_gorm_StatementModifier is an interface wrapper for StatementModifier type
type _gorm_io_gorm_StatementModifier struct {
	IValue           interface{}
	WModifyStatement func(a0 *gorm.Statement)
}

func (W _gorm_io_gorm_StatementModifier) ModifyStatement(a0 *gorm.Statement) { W.WModifyStatement(a0) }

// _gorm_io_gorm_TableType is an interface wrapper for TableType type
type _gorm_io_gorm_TableType struct {
	IValue   interface{}
	WComment func() (comment string, ok bool)
	WName    func() string
	WSchema  func() string
	WType    func() string
}

func (W _gorm_io_gorm_TableType) Comment() (comment string, ok bool) { return W.WComment() }
func (W _gorm_io_gorm_TableType) Name() string                       { return W.WName() }
func (W _gorm_io_gorm_TableType) Schema() string                     { return W.WSchema() }
func (W _gorm_io_gorm_TableType) Type() string                       { return W.WType() }

// _gorm_io_gorm_Tx is an interface wrapper for Tx type
type _gorm_io_gorm_Tx struct {
	IValue           interface{}
	WCommit          func() error
	WExecContext     func(ctx context.Context, query string, args ...interface{}) (sql.Result, error)
	WPrepareContext  func(ctx context.Context, query string) (*sql.Stmt, error)
	WQueryContext    func(ctx context.Context, query string, args ...interface{}) (*sql.Rows, error)
	WQueryRowContext func(ctx context.Context, query string, args ...interface{}) *sql.Row
	WRollback        func() error
	WStmtContext     func(ctx context.Context, stmt *sql.Stmt) *sql.Stmt
}

func (W _gorm_io_gorm_Tx) Commit() error { return W.WCommit() }
func (W _gorm_io_gorm_Tx) ExecContext(ctx context.Context, query string, args ...interface{}) (sql.Result, error) {
	return W.WExecContext(ctx, query, args...)
}
func (W _gorm_io_gorm_Tx) PrepareContext(ctx context.Context, query string) (*sql.Stmt, error) {
	return W.WPrepareContext(ctx, query)
}
func (W _gorm_io_gorm_Tx) QueryContext(ctx context.Context, query string, args ...interface{}) (*sql.Rows, error) {
	return W.WQueryContext(ctx, query, args...)
}
func (W _gorm_io_gorm_Tx) QueryRowContext(ctx context.Context, query string, args ...interface{}) *sql.Row {
	return W.WQueryRowContext(ctx, query, args...)
}
func (W _gorm_io_gorm_Tx) Rollback() error { return W.WRollback() }
func (W _gorm_io_gorm_Tx) StmtContext(ctx context.Context, stmt *sql.Stmt) *sql.Stmt {
	return W.WStmtContext(ctx, stmt)
}

// _gorm_io_gorm_TxBeginner is an interface wrapper for TxBeginner type
type _gorm_io_gorm_TxBeginner struct {
	IValue   interface{}
	WBeginTx func(ctx context.Context, opts *sql.TxOptions) (*sql.Tx, error)
}

func (W _gorm_io_gorm_TxBeginner) BeginTx(ctx context.Context, opts *sql.TxOptions) (*sql.Tx, error) {
	return W.WBeginTx(ctx, opts)
}

// _gorm_io_gorm_TxCommitter is an interface wrapper for TxCommitter type
type _gorm_io_gorm_TxCommitter struct {
	IValue    interface{}
	WCommit   func() error
	WRollback func() error
}

func (W _gorm_io_gorm_TxCommitter) Commit() error   { return W.WCommit() }
func (W _gorm_io_gorm_TxCommitter) Rollback() error { return W.WRollback() }

// _gorm_io_gorm_Valuer is an interface wrapper for Valuer type
type _gorm_io_gorm_Valuer struct {
	IValue     interface{}
	WGormValue func(a0 context.Context, a1 *gorm.DB) clause.Expr
}

func (W _gorm_io_gorm_Valuer) GormValue(a0 context.Context, a1 *gorm.DB) clause.Expr {
	return W.WGormValue(a0, a1)
}
