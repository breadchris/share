// Code generated by 'yaegi extract github.com/slack-go/slack/socketmode'. DO NOT EDIT.

package symbol

import (
	"github.com/slack-go/slack/socketmode"
	"go/constant"
	"go/token"
	"reflect"
)

func init() {
	Symbols["github.com/slack-go/slack/socketmode/socketmode"] = map[string]reflect.Value{
		// function, constant and variable definitions
		"EventTypeConnected":        reflect.ValueOf(socketmode.EventTypeConnected),
		"EventTypeConnecting":       reflect.ValueOf(socketmode.EventTypeConnecting),
		"EventTypeConnectionError":  reflect.ValueOf(socketmode.EventTypeConnectionError),
		"EventTypeDisconnect":       reflect.ValueOf(socketmode.EventTypeDisconnect),
		"EventTypeErrorBadMessage":  reflect.ValueOf(socketmode.EventTypeErrorBadMessage),
		"EventTypeErrorWriteFailed": reflect.ValueOf(socketmode.EventTypeErrorWriteFailed),
		"EventTypeEventsAPI":        reflect.ValueOf(socketmode.EventTypeEventsAPI),
		"EventTypeHello":            reflect.ValueOf(socketmode.EventTypeHello),
		"EventTypeIncomingError":    reflect.ValueOf(socketmode.EventTypeIncomingError),
		"EventTypeInteractive":      reflect.ValueOf(socketmode.EventTypeInteractive),
		"EventTypeInvalidAuth":      reflect.ValueOf(socketmode.EventTypeInvalidAuth),
		"EventTypeSlashCommand":     reflect.ValueOf(socketmode.EventTypeSlashCommand),
		"New":                       reflect.ValueOf(socketmode.New),
		"NewSocketmodeHandler":      reflect.ValueOf(socketmode.NewSocketmodeHandler),
		"OptionDebug":               reflect.ValueOf(socketmode.OptionDebug),
		"OptionDialer":              reflect.ValueOf(socketmode.OptionDialer),
		"OptionLog":                 reflect.ValueOf(socketmode.OptionLog),
		"OptionPingInterval":        reflect.ValueOf(socketmode.OptionPingInterval),
		"RequestTypeDisconnect":     reflect.ValueOf(constant.MakeFromLiteral("\"disconnect\"", token.STRING, 0)),
		"RequestTypeEventsAPI":      reflect.ValueOf(constant.MakeFromLiteral("\"events_api\"", token.STRING, 0)),
		"RequestTypeHello":          reflect.ValueOf(constant.MakeFromLiteral("\"hello\"", token.STRING, 0)),
		"RequestTypeInteractive":    reflect.ValueOf(constant.MakeFromLiteral("\"interactive\"", token.STRING, 0)),
		"RequestTypeSlashCommands":  reflect.ValueOf(constant.MakeFromLiteral("\"slash_commands\"", token.STRING, 0)),

		// type definitions
		"Client":                   reflect.ValueOf((*socketmode.Client)(nil)),
		"ConnectedEvent":           reflect.ValueOf((*socketmode.ConnectedEvent)(nil)),
		"ConnectionInfo":           reflect.ValueOf((*socketmode.ConnectionInfo)(nil)),
		"DebugInfo":                reflect.ValueOf((*socketmode.DebugInfo)(nil)),
		"ErrorBadMessage":          reflect.ValueOf((*socketmode.ErrorBadMessage)(nil)),
		"ErrorWriteFailed":         reflect.ValueOf((*socketmode.ErrorWriteFailed)(nil)),
		"Event":                    reflect.ValueOf((*socketmode.Event)(nil)),
		"EventType":                reflect.ValueOf((*socketmode.EventType)(nil)),
		"Option":                   reflect.ValueOf((*socketmode.Option)(nil)),
		"Request":                  reflect.ValueOf((*socketmode.Request)(nil)),
		"Response":                 reflect.ValueOf((*socketmode.Response)(nil)),
		"SocketModeMessagePayload": reflect.ValueOf((*socketmode.SocketModeMessagePayload)(nil)),
		"SocketmodeHandler":        reflect.ValueOf((*socketmode.SocketmodeHandler)(nil)),
		"SocketmodeHandlerFunc":    reflect.ValueOf((*socketmode.SocketmodeHandlerFunc)(nil)),
		"SocketmodeMiddlewareFunc": reflect.ValueOf((*socketmode.SocketmodeMiddlewareFunc)(nil)),
	}
}
