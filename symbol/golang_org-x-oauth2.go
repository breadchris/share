// Code generated by 'yaegi extract golang.org/x/oauth2'. DO NOT EDIT.

package symbol

import (
	"golang.org/x/oauth2"
	"reflect"
)

func init() {
	Symbols["golang.org/x/oauth2/oauth2"] = map[string]reflect.Value{
		// function, constant and variable definitions
		"AccessTypeOffline":                reflect.ValueOf(&oauth2.AccessTypeOffline).Elem(),
		"AccessTypeOnline":                 reflect.ValueOf(&oauth2.AccessTypeOnline).Elem(),
		"ApprovalForce":                    reflect.ValueOf(&oauth2.ApprovalForce).Elem(),
		"AuthStyleAutoDetect":              reflect.ValueOf(oauth2.AuthStyleAutoDetect),
		"AuthStyleInHeader":                reflect.ValueOf(oauth2.AuthStyleInHeader),
		"AuthStyleInParams":                reflect.ValueOf(oauth2.AuthStyleInParams),
		"GenerateVerifier":                 reflect.ValueOf(oauth2.GenerateVerifier),
		"HTTPClient":                       reflect.ValueOf(&oauth2.HTTPClient).Elem(),
		"NewClient":                        reflect.ValueOf(oauth2.NewClient),
		"NoContext":                        reflect.ValueOf(&oauth2.NoContext).Elem(),
		"RegisterBrokenAuthHeaderProvider": reflect.ValueOf(oauth2.RegisterBrokenAuthHeaderProvider),
		"ReuseTokenSource":                 reflect.ValueOf(oauth2.ReuseTokenSource),
		"ReuseTokenSourceWithExpiry":       reflect.ValueOf(oauth2.ReuseTokenSourceWithExpiry),
		"S256ChallengeFromVerifier":        reflect.ValueOf(oauth2.S256ChallengeFromVerifier),
		"S256ChallengeOption":              reflect.ValueOf(oauth2.S256ChallengeOption),
		"SetAuthURLParam":                  reflect.ValueOf(oauth2.SetAuthURLParam),
		"StaticTokenSource":                reflect.ValueOf(oauth2.StaticTokenSource),
		"VerifierOption":                   reflect.ValueOf(oauth2.VerifierOption),

		// type definitions
		"AuthCodeOption":     reflect.ValueOf((*oauth2.AuthCodeOption)(nil)),
		"AuthStyle":          reflect.ValueOf((*oauth2.AuthStyle)(nil)),
		"Config":             reflect.ValueOf((*oauth2.Config)(nil)),
		"DeviceAuthResponse": reflect.ValueOf((*oauth2.DeviceAuthResponse)(nil)),
		"Endpoint":           reflect.ValueOf((*oauth2.Endpoint)(nil)),
		"RetrieveError":      reflect.ValueOf((*oauth2.RetrieveError)(nil)),
		"Token":              reflect.ValueOf((*oauth2.Token)(nil)),
		"TokenSource":        reflect.ValueOf((*oauth2.TokenSource)(nil)),
		"Transport":          reflect.ValueOf((*oauth2.Transport)(nil)),

		// interface wrapper definitions
		"_AuthCodeOption": reflect.ValueOf((*_golang_org_x_oauth2_AuthCodeOption)(nil)),
		"_TokenSource":    reflect.ValueOf((*_golang_org_x_oauth2_TokenSource)(nil)),
	}
}

// _golang_org_x_oauth2_AuthCodeOption is an interface wrapper for AuthCodeOption type
type _golang_org_x_oauth2_AuthCodeOption struct {
	IValue interface{}
}

// _golang_org_x_oauth2_TokenSource is an interface wrapper for TokenSource type
type _golang_org_x_oauth2_TokenSource struct {
	IValue interface{}
	WToken func() (*oauth2.Token, error)
}

func (W _golang_org_x_oauth2_TokenSource) Token() (*oauth2.Token, error) { return W.WToken() }
