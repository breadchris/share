// Code generated by 'yaegi extract github.com/go-shiori/dom'. DO NOT EDIT.

package symbol

import (
	"github.com/go-shiori/dom"
	"reflect"
)

func init() {
	Symbols["github.com/go-shiori/dom/dom"] = map[string]reflect.Value{
		// function, constant and variable definitions
		"AppendChild":            reflect.ValueOf(dom.AppendChild),
		"ChildNodes":             reflect.ValueOf(dom.ChildNodes),
		"Children":               reflect.ValueOf(dom.Children),
		"ClassName":              reflect.ValueOf(dom.ClassName),
		"Clone":                  reflect.ValueOf(dom.Clone),
		"CreateElement":          reflect.ValueOf(dom.CreateElement),
		"CreateTextNode":         reflect.ValueOf(dom.CreateTextNode),
		"DetachChild":            reflect.ValueOf(dom.DetachChild),
		"DocumentElement":        reflect.ValueOf(dom.DocumentElement),
		"FastParse":              reflect.ValueOf(dom.FastParse),
		"FirstElementChild":      reflect.ValueOf(dom.FirstElementChild),
		"ForEachNode":            reflect.ValueOf(dom.ForEachNode),
		"GetAllNodesWithTag":     reflect.ValueOf(dom.GetAllNodesWithTag),
		"GetAttribute":           reflect.ValueOf(dom.GetAttribute),
		"GetElementByID":         reflect.ValueOf(dom.GetElementByID),
		"GetElementsByClassName": reflect.ValueOf(dom.GetElementsByClassName),
		"GetElementsByTagName":   reflect.ValueOf(dom.GetElementsByTagName),
		"HasAttribute":           reflect.ValueOf(dom.HasAttribute),
		"ID":                     reflect.ValueOf(dom.ID),
		"IncludeNode":            reflect.ValueOf(dom.IncludeNode),
		"InnerHTML":              reflect.ValueOf(dom.InnerHTML),
		"InnerText":              reflect.ValueOf(dom.InnerText),
		"IsVoidElement":          reflect.ValueOf(dom.IsVoidElement),
		"NextElementSibling":     reflect.ValueOf(dom.NextElementSibling),
		"OuterHTML":              reflect.ValueOf(dom.OuterHTML),
		"Parse":                  reflect.ValueOf(dom.Parse),
		"PrependChild":           reflect.ValueOf(dom.PrependChild),
		"PreviousElementSibling": reflect.ValueOf(dom.PreviousElementSibling),
		"QuerySelector":          reflect.ValueOf(dom.QuerySelector),
		"QuerySelectorAll":       reflect.ValueOf(dom.QuerySelectorAll),
		"RemoveAttribute":        reflect.ValueOf(dom.RemoveAttribute),
		"RemoveNodes":            reflect.ValueOf(dom.RemoveNodes),
		"ReplaceChild":           reflect.ValueOf(dom.ReplaceChild),
		"SetAttribute":           reflect.ValueOf(dom.SetAttribute),
		"SetInnerHTML":           reflect.ValueOf(dom.SetInnerHTML),
		"SetTextContent":         reflect.ValueOf(dom.SetTextContent),
		"TagName":                reflect.ValueOf(dom.TagName),
		"TextContent":            reflect.ValueOf(dom.TextContent),
	}
}
