// Code generated by 'yaegi extract github.com/breadchris/flow/slackbot'. DO NOT EDIT.

package symbol

import (
	"context"
	"github.com/breadchris/flow/slackbot"
	"github.com/slack-go/slack/socketmode"
	"reflect"
	"time"
)

func init() {
	Symbols["github.com/breadchris/flow/slackbot/slackbot"] = map[string]reflect.Value{
		// function, constant and variable definitions
		"DefaultRegistryConfig":       reflect.ValueOf(slackbot.DefaultRegistryConfig),
		"DefaultYaegiConfig":          reflect.ValueOf(slackbot.DefaultYaegiConfig),
		"IntegratedEventRouter":       reflect.ValueOf(slackbot.IntegratedEventRouter),
		"IntegrationTest":             reflect.ValueOf(slackbot.IntegrationTest),
		"LoadConfig":                  reflect.ValueOf(slackbot.LoadConfig),
		"New":                         reflect.ValueOf(slackbot.New),
		"NewAppMentionHandler":        reflect.ValueOf(slackbot.NewAppMentionHandler),
		"NewChannelWhitelist":         reflect.ValueOf(slackbot.NewChannelWhitelist),
		"NewChatGPTService":           reflect.ValueOf(slackbot.NewChatGPTService),
		"NewContextDBService":         reflect.ValueOf(slackbot.NewContextDBService),
		"NewContextManager":           reflect.ValueOf(slackbot.NewContextManager),
		"NewDefaultEventHandler":      reflect.ValueOf(slackbot.NewDefaultEventHandler),
		"NewEventRouter":              reflect.ValueOf(slackbot.NewEventRouter),
		"NewExampleCustomHandler":     reflect.ValueOf(slackbot.NewExampleCustomHandler),
		"NewFileManager":              reflect.ValueOf(slackbot.NewFileManager),
		"NewFileSharedHandler":        reflect.ValueOf(slackbot.NewFileSharedHandler),
		"NewHTTPEventRouter":          reflect.ValueOf(slackbot.NewHTTPEventRouter),
		"NewHTTPHandlerRegistry":      reflect.ValueOf(slackbot.NewHTTPHandlerRegistry),
		"NewHTTPYaegiAdapter":         reflect.ValueOf(slackbot.NewHTTPYaegiAdapter),
		"NewHandlerFactory":           reflect.ValueOf(slackbot.NewHandlerFactory),
		"NewHandlerRegistry":          reflect.ValueOf(slackbot.NewHandlerRegistry),
		"NewIdeationManager":          reflect.ValueOf(slackbot.NewIdeationManager),
		"NewLoggingInterceptor":       reflect.ValueOf(slackbot.NewLoggingInterceptor),
		"NewMessageEventHandler":      reflect.ValueOf(slackbot.NewMessageEventHandler),
		"NewMessageRateLimiter":       reflect.ValueOf(slackbot.NewMessageRateLimiter),
		"NewMetricsInterceptor":       reflect.ValueOf(slackbot.NewMetricsInterceptor),
		"NewReactionEventHandler":     reflect.ValueOf(slackbot.NewReactionEventHandler),
		"NewSessionActivityManager":   reflect.ValueOf(slackbot.NewSessionActivityManager),
		"NewSessionDBService":         reflect.ValueOf(slackbot.NewSessionDBService),
		"NewSlackBotSessionCache":     reflect.ValueOf(slackbot.NewSlackBotSessionCache),
		"NewSlashCommandHandler":      reflect.ValueOf(slackbot.NewSlashCommandHandler),
		"NewYaegiEventHandlerFactory": reflect.ValueOf(slackbot.NewYaegiEventHandlerFactory),
		"NewYaegiSlackBotAdapter":     reflect.ValueOf(slackbot.NewYaegiSlackBotAdapter),
		"RegistryMux":                 reflect.ValueOf(slackbot.RegistryMux),
		"YaegiIntegrationMux":         reflect.ValueOf(slackbot.YaegiIntegrationMux),

		// type definitions
		"AppMentionHandler":        reflect.ValueOf((*slackbot.AppMentionHandler)(nil)),
		"BaseSlackEventHandler":    reflect.ValueOf((*slackbot.BaseSlackEventHandler)(nil)),
		"ChannelWhitelist":         reflect.ValueOf((*slackbot.ChannelWhitelist)(nil)),
		"ChatGPTService":           reflect.ValueOf((*slackbot.ChatGPTService)(nil)),
		"ChatGPTSummaryResponse":   reflect.ValueOf((*slackbot.ChatGPTSummaryResponse)(nil)),
		"ChatMessage":              reflect.ValueOf((*slackbot.ChatMessage)(nil)),
		"Config":                   reflect.ValueOf((*slackbot.Config)(nil)),
		"ContextConfig":            reflect.ValueOf((*slackbot.ContextConfig)(nil)),
		"ContextDBService":         reflect.ValueOf((*slackbot.ContextDBService)(nil)),
		"ContextManager":           reflect.ValueOf((*slackbot.ContextManager)(nil)),
		"ContextSummaryResponse":   reflect.ValueOf((*slackbot.ContextSummaryResponse)(nil)),
		"CustomHandlerConfig":      reflect.ValueOf((*slackbot.CustomHandlerConfig)(nil)),
		"DefaultEventHandler":      reflect.ValueOf((*slackbot.DefaultEventHandler)(nil)),
		"EventInterceptor":         reflect.ValueOf((*slackbot.EventInterceptor)(nil)),
		"EventRouter":              reflect.ValueOf((*slackbot.EventRouter)(nil)),
		"EventRouterConfig":        reflect.ValueOf((*slackbot.EventRouterConfig)(nil)),
		"ExampleCustomHandler":     reflect.ValueOf((*slackbot.ExampleCustomHandler)(nil)),
		"Feature":                  reflect.ValueOf((*slackbot.Feature)(nil)),
		"FeatureReaction":          reflect.ValueOf((*slackbot.FeatureReaction)(nil)),
		"FileManager":              reflect.ValueOf((*slackbot.FileManager)(nil)),
		"FileSharedHandler":        reflect.ValueOf((*slackbot.FileSharedHandler)(nil)),
		"HTTPEventRouter":          reflect.ValueOf((*slackbot.HTTPEventRouter)(nil)),
		"HTTPHandlerRegistry":      reflect.ValueOf((*slackbot.HTTPHandlerRegistry)(nil)),
		"HTTPSlackEventHandler":    reflect.ValueOf((*slackbot.HTTPSlackEventHandler)(nil)),
		"HTTPYaegiAdapter":         reflect.ValueOf((*slackbot.HTTPYaegiAdapter)(nil)),
		"HandlerFactory":           reflect.ValueOf((*slackbot.HandlerFactory)(nil)),
		"HandlerInfo":              reflect.ValueOf((*slackbot.HandlerInfo)(nil)),
		"HandlerMetadata":          reflect.ValueOf((*slackbot.HandlerMetadata)(nil)),
		"HandlerRegistry":          reflect.ValueOf((*slackbot.HandlerRegistry)(nil)),
		"IdeationManager":          reflect.ValueOf((*slackbot.IdeationManager)(nil)),
		"IdeationResponse":         reflect.ValueOf((*slackbot.IdeationResponse)(nil)),
		"IdeationSession":          reflect.ValueOf((*slackbot.IdeationSession)(nil)),
		"LoggingInterceptor":       reflect.ValueOf((*slackbot.LoggingInterceptor)(nil)),
		"MessageEventHandler":      reflect.ValueOf((*slackbot.MessageEventHandler)(nil)),
		"MessageRateLimiter":       reflect.ValueOf((*slackbot.MessageRateLimiter)(nil)),
		"MetricsInterceptor":       reflect.ValueOf((*slackbot.MetricsInterceptor)(nil)),
		"ReactionEventHandler":     reflect.ValueOf((*slackbot.ReactionEventHandler)(nil)),
		"RealTimeProvider":         reflect.ValueOf((*slackbot.RealTimeProvider)(nil)),
		"RegisteredHandler":        reflect.ValueOf((*slackbot.RegisteredHandler)(nil)),
		"RegistryConfig":           reflect.ValueOf((*slackbot.RegistryConfig)(nil)),
		"RegistryMetrics":          reflect.ValueOf((*slackbot.RegistryMetrics)(nil)),
		"RouterMetrics":            reflect.ValueOf((*slackbot.RouterMetrics)(nil)),
		"SessionActivityManager":   reflect.ValueOf((*slackbot.SessionActivityManager)(nil)),
		"SessionCache":             reflect.ValueOf((*slackbot.SessionCache)(nil)),
		"SessionDB":                reflect.ValueOf((*slackbot.SessionDB)(nil)),
		"SessionDBService":         reflect.ValueOf((*slackbot.SessionDBService)(nil)),
		"SlackBot":                 reflect.ValueOf((*slackbot.SlackBot)(nil)),
		"SlackBotSessionCache":     reflect.ValueOf((*slackbot.SlackBotSessionCache)(nil)),
		"SlackClaudeSession":       reflect.ValueOf((*slackbot.SlackClaudeSession)(nil)),
		"SlackEventHandler":        reflect.ValueOf((*slackbot.SlackEventHandler)(nil)),
		"SlashCommandHandler":      reflect.ValueOf((*slackbot.SlashCommandHandler)(nil)),
		"ThreadContextSummary":     reflect.ValueOf((*slackbot.ThreadContextSummary)(nil)),
		"TimeProvider":             reflect.ValueOf((*slackbot.TimeProvider)(nil)),
		"UserActivity":             reflect.ValueOf((*slackbot.UserActivity)(nil)),
		"UserRateLimit":            reflect.ValueOf((*slackbot.UserRateLimit)(nil)),
		"YaegiConfig":              reflect.ValueOf((*slackbot.YaegiConfig)(nil)),
		"YaegiEventHandlerFactory": reflect.ValueOf((*slackbot.YaegiEventHandlerFactory)(nil)),
		"YaegiSlackBotAdapter":     reflect.ValueOf((*slackbot.YaegiSlackBotAdapter)(nil)),

		// interface wrapper definitions
		"_EventInterceptor":  reflect.ValueOf((*_github_com_breadchris_flow_slackbot_EventInterceptor)(nil)),
		"_SessionCache":      reflect.ValueOf((*_github_com_breadchris_flow_slackbot_SessionCache)(nil)),
		"_SessionDB":         reflect.ValueOf((*_github_com_breadchris_flow_slackbot_SessionDB)(nil)),
		"_SlackEventHandler": reflect.ValueOf((*_github_com_breadchris_flow_slackbot_SlackEventHandler)(nil)),
		"_TimeProvider":      reflect.ValueOf((*_github_com_breadchris_flow_slackbot_TimeProvider)(nil)),
	}
}

// _github_com_breadchris_flow_slackbot_EventInterceptor is an interface wrapper for EventInterceptor type
type _github_com_breadchris_flow_slackbot_EventInterceptor struct {
	IValue       interface{}
	WPostProcess func(ctx context.Context, evt socketmode.Event, err error) error
	WPreProcess  func(ctx context.Context, evt socketmode.Event) (context.Context, error)
}

func (W _github_com_breadchris_flow_slackbot_EventInterceptor) PostProcess(ctx context.Context, evt socketmode.Event, err error) error {
	return W.WPostProcess(ctx, evt, err)
}
func (W _github_com_breadchris_flow_slackbot_EventInterceptor) PreProcess(ctx context.Context, evt socketmode.Event) (context.Context, error) {
	return W.WPreProcess(ctx, evt)
}

// _github_com_breadchris_flow_slackbot_SessionCache is an interface wrapper for SessionCache type
type _github_com_breadchris_flow_slackbot_SessionCache struct {
	IValue                 interface{}
	WGetSession            func(threadTS string) (*slackbot.SlackClaudeSession, bool)
	WSetSession            func(threadTS string, session *slackbot.SlackClaudeSession)
	WUpdateSessionActivity func(threadTS string)
}

func (W _github_com_breadchris_flow_slackbot_SessionCache) GetSession(threadTS string) (*slackbot.SlackClaudeSession, bool) {
	return W.WGetSession(threadTS)
}
func (W _github_com_breadchris_flow_slackbot_SessionCache) SetSession(threadTS string, session *slackbot.SlackClaudeSession) {
	W.WSetSession(threadTS, session)
}
func (W _github_com_breadchris_flow_slackbot_SessionCache) UpdateSessionActivity(threadTS string) {
	W.WUpdateSessionActivity(threadTS)
}

// _github_com_breadchris_flow_slackbot_SessionDB is an interface wrapper for SessionDB type
type _github_com_breadchris_flow_slackbot_SessionDB struct {
	IValue                 interface{}
	WGetSession            func(threadTS string) (*slackbot.SlackClaudeSession, error)
	WSessionExists         func(threadTS string) (bool, error)
	WSetSession            func(session *slackbot.SlackClaudeSession) error
	WUpdateSessionActivity func(threadTS string) error
}

func (W _github_com_breadchris_flow_slackbot_SessionDB) GetSession(threadTS string) (*slackbot.SlackClaudeSession, error) {
	return W.WGetSession(threadTS)
}
func (W _github_com_breadchris_flow_slackbot_SessionDB) SessionExists(threadTS string) (bool, error) {
	return W.WSessionExists(threadTS)
}
func (W _github_com_breadchris_flow_slackbot_SessionDB) SetSession(session *slackbot.SlackClaudeSession) error {
	return W.WSetSession(session)
}
func (W _github_com_breadchris_flow_slackbot_SessionDB) UpdateSessionActivity(threadTS string) error {
	return W.WUpdateSessionActivity(threadTS)
}

// _github_com_breadchris_flow_slackbot_SlackEventHandler is an interface wrapper for SlackEventHandler type
type _github_com_breadchris_flow_slackbot_SlackEventHandler struct {
	IValue        interface{}
	WGetEventType func() string
	WGetPriority  func() int
	WHandleEvent  func(ctx context.Context, evt socketmode.Event) error
}

func (W _github_com_breadchris_flow_slackbot_SlackEventHandler) GetEventType() string {
	return W.WGetEventType()
}
func (W _github_com_breadchris_flow_slackbot_SlackEventHandler) GetPriority() int {
	return W.WGetPriority()
}
func (W _github_com_breadchris_flow_slackbot_SlackEventHandler) HandleEvent(ctx context.Context, evt socketmode.Event) error {
	return W.WHandleEvent(ctx, evt)
}

// _github_com_breadchris_flow_slackbot_TimeProvider is an interface wrapper for TimeProvider type
type _github_com_breadchris_flow_slackbot_TimeProvider struct {
	IValue interface{}
	WNow   func() time.Time
}

func (W _github_com_breadchris_flow_slackbot_TimeProvider) Now() time.Time { return W.WNow() }
