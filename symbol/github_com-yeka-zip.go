// Code generated by 'yaegi extract github.com/yeka/zip'. DO NOT EDIT.

package symbol

import (
	"github.com/yeka/zip"
	"reflect"
)

func init() {
	Symbols["github.com/yeka/zip/zip"] = map[string]reflect.Value{
		// function, constant and variable definitions
		"AES128Encryption":     reflect.ValueOf(zip.AES128Encryption),
		"AES192Encryption":     reflect.ValueOf(zip.AES192Encryption),
		"AES256Encryption":     reflect.ValueOf(zip.AES256Encryption),
		"Deflate":              reflect.ValueOf(zip.Deflate),
		"ErrAlgorithm":         reflect.ValueOf(&zip.ErrAlgorithm).Elem(),
		"ErrAuthentication":    reflect.ValueOf(&zip.ErrAuthentication).Elem(),
		"ErrChecksum":          reflect.ValueOf(&zip.ErrChecksum).Elem(),
		"ErrDecryption":        reflect.ValueOf(&zip.ErrDecryption).Elem(),
		"ErrFormat":            reflect.ValueOf(&zip.ErrFormat).Elem(),
		"ErrPassword":          reflect.ValueOf(&zip.ErrPassword).Elem(),
		"FileInfoHeader":       reflect.ValueOf(zip.FileInfoHeader),
		"NewReader":            reflect.ValueOf(zip.NewReader),
		"NewWriter":            reflect.ValueOf(zip.NewWriter),
		"NewZipCrypto":         reflect.ValueOf(zip.NewZipCrypto),
		"OpenReader":           reflect.ValueOf(zip.OpenReader),
		"RegisterCompressor":   reflect.ValueOf(zip.RegisterCompressor),
		"RegisterDecompressor": reflect.ValueOf(zip.RegisterDecompressor),
		"StandardEncryption":   reflect.ValueOf(zip.StandardEncryption),
		"Store":                reflect.ValueOf(zip.Store),
		"ZipCryptoDecryptor":   reflect.ValueOf(zip.ZipCryptoDecryptor),
		"ZipCryptoEncryptor":   reflect.ValueOf(zip.ZipCryptoEncryptor),

		// type definitions
		"Compressor":       reflect.ValueOf((*zip.Compressor)(nil)),
		"Decompressor":     reflect.ValueOf((*zip.Decompressor)(nil)),
		"EncryptionMethod": reflect.ValueOf((*zip.EncryptionMethod)(nil)),
		"File":             reflect.ValueOf((*zip.File)(nil)),
		"FileHeader":       reflect.ValueOf((*zip.FileHeader)(nil)),
		"ReadCloser":       reflect.ValueOf((*zip.ReadCloser)(nil)),
		"Reader":           reflect.ValueOf((*zip.Reader)(nil)),
		"Writer":           reflect.ValueOf((*zip.Writer)(nil)),
		"ZipCrypto":        reflect.ValueOf((*zip.ZipCrypto)(nil)),
	}
}
