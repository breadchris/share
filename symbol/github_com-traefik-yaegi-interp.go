// Code generated by 'yaegi extract github.com/traefik/yaegi/interp'. DO NOT EDIT.

package symbol

import (
	"github.com/traefik/yaegi/interp"
	"go/constant"
	"go/token"
	"reflect"
)

func init() {
	Symbols["github.com/traefik/yaegi/interp/interp"] = map[string]reflect.Value{
		// function, constant and variable definitions
		"AllBreakpointTarget":     reflect.ValueOf(interp.AllBreakpointTarget),
		"DebugBreak":              reflect.ValueOf(interp.DebugBreak),
		"DebugEnterGoRoutine":     reflect.ValueOf(interp.DebugEnterGoRoutine),
		"DebugEntry":              reflect.ValueOf(interp.DebugEntry),
		"DebugExitGoRoutine":      reflect.ValueOf(interp.DebugExitGoRoutine),
		"DebugPause":              reflect.ValueOf(interp.DebugPause),
		"DebugStepInto":           reflect.ValueOf(interp.DebugStepInto),
		"DebugStepOut":            reflect.ValueOf(interp.DebugStepOut),
		"DebugStepOver":           reflect.ValueOf(interp.DebugStepOver),
		"DebugTerminate":          reflect.ValueOf(interp.DebugTerminate),
		"DefaultSourceName":       reflect.ValueOf(constant.MakeFromLiteral("\"_.go\"", token.STRING, 0)),
		"ErrNotLive":              reflect.ValueOf(&interp.ErrNotLive).Elem(),
		"ErrNotRunning":           reflect.ValueOf(&interp.ErrNotRunning).Elem(),
		"ErrRunning":              reflect.ValueOf(&interp.ErrRunning).Elem(),
		"FunctionBreakpoint":      reflect.ValueOf(interp.FunctionBreakpoint),
		"LineBreakpoint":          reflect.ValueOf(interp.LineBreakpoint),
		"New":                     reflect.ValueOf(interp.New),
		"NoTest":                  reflect.ValueOf(interp.NoTest),
		"PathBreakpointTarget":    reflect.ValueOf(interp.PathBreakpointTarget),
		"ProgramBreakpointTarget": reflect.ValueOf(interp.ProgramBreakpointTarget),
		"Self":                    reflect.ValueOf(&interp.Self).Elem(),
		"Symbols":                 reflect.ValueOf(&interp.Symbols).Elem(),
		"Test":                    reflect.ValueOf(interp.Test),

		// type definitions
		"Breakpoint":        reflect.ValueOf((*interp.Breakpoint)(nil)),
		"BreakpointRequest": reflect.ValueOf((*interp.BreakpointRequest)(nil)),
		"BreakpointTarget":  reflect.ValueOf((*interp.BreakpointTarget)(nil)),
		"DebugEvent":        reflect.ValueOf((*interp.DebugEvent)(nil)),
		"DebugEventReason":  reflect.ValueOf((*interp.DebugEventReason)(nil)),
		"DebugFrame":        reflect.ValueOf((*interp.DebugFrame)(nil)),
		"DebugFrameScope":   reflect.ValueOf((*interp.DebugFrameScope)(nil)),
		"DebugGoRoutine":    reflect.ValueOf((*interp.DebugGoRoutine)(nil)),
		"DebugOptions":      reflect.ValueOf((*interp.DebugOptions)(nil)),
		"DebugVariable":     reflect.ValueOf((*interp.DebugVariable)(nil)),
		"Debugger":          reflect.ValueOf((*interp.Debugger)(nil)),
		"Exports":           reflect.ValueOf((*interp.Exports)(nil)),
		"Interpreter":       reflect.ValueOf((*interp.Interpreter)(nil)),
		"Options":           reflect.ValueOf((*interp.Options)(nil)),
		"Panic":             reflect.ValueOf((*interp.Panic)(nil)),
		"Program":           reflect.ValueOf((*interp.Program)(nil)),
	}
}
