// Code generated by 'yaegi extract github.com/gorilla/websocket'. DO NOT EDIT.

package symbol

import (
	"github.com/gorilla/websocket"
	"go/constant"
	"go/token"
	"reflect"
)

func init() {
	Symbols["github.com/gorilla/websocket/websocket"] = map[string]reflect.Value{
		// function, constant and variable definitions
		"BinaryMessage":                reflect.ValueOf(constant.MakeFromLiteral("2", token.INT, 0)),
		"CloseAbnormalClosure":         reflect.ValueOf(constant.MakeFromLiteral("1006", token.INT, 0)),
		"CloseGoingAway":               reflect.ValueOf(constant.MakeFromLiteral("1001", token.INT, 0)),
		"CloseInternalServerErr":       reflect.ValueOf(constant.MakeFromLiteral("1011", token.INT, 0)),
		"CloseInvalidFramePayloadData": reflect.ValueOf(constant.MakeFromLiteral("1007", token.INT, 0)),
		"CloseMandatoryExtension":      reflect.ValueOf(constant.MakeFromLiteral("1010", token.INT, 0)),
		"CloseMessage":                 reflect.ValueOf(constant.MakeFromLiteral("8", token.INT, 0)),
		"CloseMessageTooBig":           reflect.ValueOf(constant.MakeFromLiteral("1009", token.INT, 0)),
		"CloseNoStatusReceived":        reflect.ValueOf(constant.MakeFromLiteral("1005", token.INT, 0)),
		"CloseNormalClosure":           reflect.ValueOf(constant.MakeFromLiteral("1000", token.INT, 0)),
		"ClosePolicyViolation":         reflect.ValueOf(constant.MakeFromLiteral("1008", token.INT, 0)),
		"CloseProtocolError":           reflect.ValueOf(constant.MakeFromLiteral("1002", token.INT, 0)),
		"CloseServiceRestart":          reflect.ValueOf(constant.MakeFromLiteral("1012", token.INT, 0)),
		"CloseTLSHandshake":            reflect.ValueOf(constant.MakeFromLiteral("1015", token.INT, 0)),
		"CloseTryAgainLater":           reflect.ValueOf(constant.MakeFromLiteral("1013", token.INT, 0)),
		"CloseUnsupportedData":         reflect.ValueOf(constant.MakeFromLiteral("1003", token.INT, 0)),
		"DefaultDialer":                reflect.ValueOf(&websocket.DefaultDialer).Elem(),
		"ErrBadHandshake":              reflect.ValueOf(&websocket.ErrBadHandshake).Elem(),
		"ErrCloseSent":                 reflect.ValueOf(&websocket.ErrCloseSent).Elem(),
		"ErrReadLimit":                 reflect.ValueOf(&websocket.ErrReadLimit).Elem(),
		"FormatCloseMessage":           reflect.ValueOf(websocket.FormatCloseMessage),
		"IsCloseError":                 reflect.ValueOf(websocket.IsCloseError),
		"IsUnexpectedCloseError":       reflect.ValueOf(websocket.IsUnexpectedCloseError),
		"IsWebSocketUpgrade":           reflect.ValueOf(websocket.IsWebSocketUpgrade),
		"JoinMessages":                 reflect.ValueOf(websocket.JoinMessages),
		"NewClient":                    reflect.ValueOf(websocket.NewClient),
		"NewPreparedMessage":           reflect.ValueOf(websocket.NewPreparedMessage),
		"PingMessage":                  reflect.ValueOf(constant.MakeFromLiteral("9", token.INT, 0)),
		"PongMessage":                  reflect.ValueOf(constant.MakeFromLiteral("10", token.INT, 0)),
		"ReadJSON":                     reflect.ValueOf(websocket.ReadJSON),
		"Subprotocols":                 reflect.ValueOf(websocket.Subprotocols),
		"TextMessage":                  reflect.ValueOf(constant.MakeFromLiteral("1", token.INT, 0)),
		"Upgrade":                      reflect.ValueOf(websocket.Upgrade),
		"WriteJSON":                    reflect.ValueOf(websocket.WriteJSON),

		// type definitions
		"BufferPool":      reflect.ValueOf((*websocket.BufferPool)(nil)),
		"CloseError":      reflect.ValueOf((*websocket.CloseError)(nil)),
		"Conn":            reflect.ValueOf((*websocket.Conn)(nil)),
		"Dialer":          reflect.ValueOf((*websocket.Dialer)(nil)),
		"HandshakeError":  reflect.ValueOf((*websocket.HandshakeError)(nil)),
		"PreparedMessage": reflect.ValueOf((*websocket.PreparedMessage)(nil)),
		"Upgrader":        reflect.ValueOf((*websocket.Upgrader)(nil)),

		// interface wrapper definitions
		"_BufferPool": reflect.ValueOf((*_github_com_gorilla_websocket_BufferPool)(nil)),
	}
}

// _github_com_gorilla_websocket_BufferPool is an interface wrapper for BufferPool type
type _github_com_gorilla_websocket_BufferPool struct {
	IValue interface{}
	WGet   func() interface{}
	WPut   func(a0 interface{})
}

func (W _github_com_gorilla_websocket_BufferPool) Get() interface{}   { return W.WGet() }
func (W _github_com_gorilla_websocket_BufferPool) Put(a0 interface{}) { W.WPut(a0) }
