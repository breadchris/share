// Code generated by 'yaegi extract github.com/yuin/goldmark/parser'. DO NOT EDIT.

package symbol

import (
	"github.com/yuin/goldmark/ast"
	"github.com/yuin/goldmark/parser"
	"github.com/yuin/goldmark/text"
	"reflect"
)

func init() {
	Symbols["github.com/yuin/goldmark/parser/parser"] = map[string]reflect.Value{
		// function, constant and variable definitions
		"Close":                             reflect.ValueOf(parser.Close),
		"ContextKeyMax":                     reflect.ValueOf(&parser.ContextKeyMax).Elem(),
		"Continue":                          reflect.ValueOf(parser.Continue),
		"DefaultBlockParsers":               reflect.ValueOf(parser.DefaultBlockParsers),
		"DefaultInlineParsers":              reflect.ValueOf(parser.DefaultInlineParsers),
		"DefaultParagraphTransformers":      reflect.ValueOf(parser.DefaultParagraphTransformers),
		"HasChildren":                       reflect.ValueOf(parser.HasChildren),
		"LinkReferenceParagraphTransformer": reflect.ValueOf(&parser.LinkReferenceParagraphTransformer).Elem(),
		"NewATXHeadingParser":               reflect.ValueOf(parser.NewATXHeadingParser),
		"NewAutoLinkParser":                 reflect.ValueOf(parser.NewAutoLinkParser),
		"NewBlockquoteParser":               reflect.ValueOf(parser.NewBlockquoteParser),
		"NewCodeBlockParser":                reflect.ValueOf(parser.NewCodeBlockParser),
		"NewCodeSpanParser":                 reflect.ValueOf(parser.NewCodeSpanParser),
		"NewConfig":                         reflect.ValueOf(parser.NewConfig),
		"NewContext":                        reflect.ValueOf(parser.NewContext),
		"NewContextKey":                     reflect.ValueOf(parser.NewContextKey),
		"NewDelimiter":                      reflect.ValueOf(parser.NewDelimiter),
		"NewEmphasisParser":                 reflect.ValueOf(parser.NewEmphasisParser),
		"NewFencedCodeBlockParser":          reflect.ValueOf(parser.NewFencedCodeBlockParser),
		"NewHTMLBlockParser":                reflect.ValueOf(parser.NewHTMLBlockParser),
		"NewLinkParser":                     reflect.ValueOf(parser.NewLinkParser),
		"NewListItemParser":                 reflect.ValueOf(parser.NewListItemParser),
		"NewListParser":                     reflect.ValueOf(parser.NewListParser),
		"NewParagraphParser":                reflect.ValueOf(parser.NewParagraphParser),
		"NewParser":                         reflect.ValueOf(parser.NewParser),
		"NewRawHTMLParser":                  reflect.ValueOf(parser.NewRawHTMLParser),
		"NewReference":                      reflect.ValueOf(parser.NewReference),
		"NewSetextHeadingParser":            reflect.ValueOf(parser.NewSetextHeadingParser),
		"NewThematicBreakParser":            reflect.ValueOf(parser.NewThematicBreakParser),
		"NoChildren":                        reflect.ValueOf(parser.NoChildren),
		"None":                              reflect.ValueOf(parser.None),
		"ParseAttributes":                   reflect.ValueOf(parser.ParseAttributes),
		"ProcessDelimiters":                 reflect.ValueOf(parser.ProcessDelimiters),
		"RequireParagraph":                  reflect.ValueOf(parser.RequireParagraph),
		"ScanDelimiter":                     reflect.ValueOf(parser.ScanDelimiter),
		"WithASTTransformers":               reflect.ValueOf(parser.WithASTTransformers),
		"WithAttribute":                     reflect.ValueOf(parser.WithAttribute),
		"WithAutoHeadingID":                 reflect.ValueOf(parser.WithAutoHeadingID),
		"WithBlockParsers":                  reflect.ValueOf(parser.WithBlockParsers),
		"WithContext":                       reflect.ValueOf(parser.WithContext),
		"WithEscapedSpace":                  reflect.ValueOf(parser.WithEscapedSpace),
		"WithHeadingAttribute":              reflect.ValueOf(parser.WithHeadingAttribute),
		"WithIDs":                           reflect.ValueOf(parser.WithIDs),
		"WithInlineParsers":                 reflect.ValueOf(parser.WithInlineParsers),
		"WithOption":                        reflect.ValueOf(parser.WithOption),
		"WithParagraphTransformers":         reflect.ValueOf(parser.WithParagraphTransformers),

		// type definitions
		"ASTTransformer":       reflect.ValueOf((*parser.ASTTransformer)(nil)),
		"Attribute":            reflect.ValueOf((*parser.Attribute)(nil)),
		"Attributes":           reflect.ValueOf((*parser.Attributes)(nil)),
		"Block":                reflect.ValueOf((*parser.Block)(nil)),
		"BlockParser":          reflect.ValueOf((*parser.BlockParser)(nil)),
		"CloseBlocker":         reflect.ValueOf((*parser.CloseBlocker)(nil)),
		"Config":               reflect.ValueOf((*parser.Config)(nil)),
		"Context":              reflect.ValueOf((*parser.Context)(nil)),
		"ContextConfig":        reflect.ValueOf((*parser.ContextConfig)(nil)),
		"ContextKey":           reflect.ValueOf((*parser.ContextKey)(nil)),
		"ContextOption":        reflect.ValueOf((*parser.ContextOption)(nil)),
		"Delimiter":            reflect.ValueOf((*parser.Delimiter)(nil)),
		"DelimiterProcessor":   reflect.ValueOf((*parser.DelimiterProcessor)(nil)),
		"HeadingConfig":        reflect.ValueOf((*parser.HeadingConfig)(nil)),
		"HeadingOption":        reflect.ValueOf((*parser.HeadingOption)(nil)),
		"IDs":                  reflect.ValueOf((*parser.IDs)(nil)),
		"InlineParser":         reflect.ValueOf((*parser.InlineParser)(nil)),
		"Option":               reflect.ValueOf((*parser.Option)(nil)),
		"OptionName":           reflect.ValueOf((*parser.OptionName)(nil)),
		"ParagraphTransformer": reflect.ValueOf((*parser.ParagraphTransformer)(nil)),
		"ParseConfig":          reflect.ValueOf((*parser.ParseConfig)(nil)),
		"ParseOption":          reflect.ValueOf((*parser.ParseOption)(nil)),
		"Parser":               reflect.ValueOf((*parser.Parser)(nil)),
		"Reference":            reflect.ValueOf((*parser.Reference)(nil)),
		"SetOptioner":          reflect.ValueOf((*parser.SetOptioner)(nil)),
		"State":                reflect.ValueOf((*parser.State)(nil)),

		// interface wrapper definitions
		"_ASTTransformer":       reflect.ValueOf((*_github_com_yuin_goldmark_parser_ASTTransformer)(nil)),
		"_BlockParser":          reflect.ValueOf((*_github_com_yuin_goldmark_parser_BlockParser)(nil)),
		"_CloseBlocker":         reflect.ValueOf((*_github_com_yuin_goldmark_parser_CloseBlocker)(nil)),
		"_Context":              reflect.ValueOf((*_github_com_yuin_goldmark_parser_Context)(nil)),
		"_DelimiterProcessor":   reflect.ValueOf((*_github_com_yuin_goldmark_parser_DelimiterProcessor)(nil)),
		"_HeadingOption":        reflect.ValueOf((*_github_com_yuin_goldmark_parser_HeadingOption)(nil)),
		"_IDs":                  reflect.ValueOf((*_github_com_yuin_goldmark_parser_IDs)(nil)),
		"_InlineParser":         reflect.ValueOf((*_github_com_yuin_goldmark_parser_InlineParser)(nil)),
		"_Option":               reflect.ValueOf((*_github_com_yuin_goldmark_parser_Option)(nil)),
		"_ParagraphTransformer": reflect.ValueOf((*_github_com_yuin_goldmark_parser_ParagraphTransformer)(nil)),
		"_Parser":               reflect.ValueOf((*_github_com_yuin_goldmark_parser_Parser)(nil)),
		"_Reference":            reflect.ValueOf((*_github_com_yuin_goldmark_parser_Reference)(nil)),
		"_SetOptioner":          reflect.ValueOf((*_github_com_yuin_goldmark_parser_SetOptioner)(nil)),
	}
}

// _github_com_yuin_goldmark_parser_ASTTransformer is an interface wrapper for ASTTransformer type
type _github_com_yuin_goldmark_parser_ASTTransformer struct {
	IValue     interface{}
	WTransform func(node *ast.Document, reader text.Reader, pc parser.Context)
}

func (W _github_com_yuin_goldmark_parser_ASTTransformer) Transform(node *ast.Document, reader text.Reader, pc parser.Context) {
	W.WTransform(node, reader, pc)
}

// _github_com_yuin_goldmark_parser_BlockParser is an interface wrapper for BlockParser type
type _github_com_yuin_goldmark_parser_BlockParser struct {
	IValue                 interface{}
	WCanAcceptIndentedLine func() bool
	WCanInterruptParagraph func() bool
	WClose                 func(node ast.Node, reader text.Reader, pc parser.Context)
	WContinue              func(node ast.Node, reader text.Reader, pc parser.Context) parser.State
	WOpen                  func(parent ast.Node, reader text.Reader, pc parser.Context) (ast.Node, parser.State)
	WTrigger               func() []byte
}

func (W _github_com_yuin_goldmark_parser_BlockParser) CanAcceptIndentedLine() bool {
	return W.WCanAcceptIndentedLine()
}
func (W _github_com_yuin_goldmark_parser_BlockParser) CanInterruptParagraph() bool {
	return W.WCanInterruptParagraph()
}
func (W _github_com_yuin_goldmark_parser_BlockParser) Close(node ast.Node, reader text.Reader, pc parser.Context) {
	W.WClose(node, reader, pc)
}
func (W _github_com_yuin_goldmark_parser_BlockParser) Continue(node ast.Node, reader text.Reader, pc parser.Context) parser.State {
	return W.WContinue(node, reader, pc)
}
func (W _github_com_yuin_goldmark_parser_BlockParser) Open(parent ast.Node, reader text.Reader, pc parser.Context) (ast.Node, parser.State) {
	return W.WOpen(parent, reader, pc)
}
func (W _github_com_yuin_goldmark_parser_BlockParser) Trigger() []byte { return W.WTrigger() }

// _github_com_yuin_goldmark_parser_CloseBlocker is an interface wrapper for CloseBlocker type
type _github_com_yuin_goldmark_parser_CloseBlocker struct {
	IValue      interface{}
	WCloseBlock func(parent ast.Node, block text.Reader, pc parser.Context)
}

func (W _github_com_yuin_goldmark_parser_CloseBlocker) CloseBlock(parent ast.Node, block text.Reader, pc parser.Context) {
	W.WCloseBlock(parent, block, pc)
}

// _github_com_yuin_goldmark_parser_Context is an interface wrapper for Context type
type _github_com_yuin_goldmark_parser_Context struct {
	IValue           interface{}
	WAddReference    func(a0 parser.Reference)
	WBlockIndent     func() int
	WBlockOffset     func() int
	WClearDelimiters func(bottom ast.Node)
	WComputeIfAbsent func(a0 parser.ContextKey, a1 func() interface{}) interface{}
	WFirstDelimiter  func() *parser.Delimiter
	WGet             func(a0 parser.ContextKey) interface{}
	WIDs             func() parser.IDs
	WIsInLinkLabel   func() bool
	WLastDelimiter   func() *parser.Delimiter
	WLastOpenedBlock func() parser.Block
	WOpenedBlocks    func() []parser.Block
	WPushDelimiter   func(delimiter *parser.Delimiter)
	WReference       func(label string) (parser.Reference, bool)
	WReferences      func() []parser.Reference
	WRemoveDelimiter func(d *parser.Delimiter)
	WSet             func(a0 parser.ContextKey, a1 interface{})
	WSetBlockIndent  func(a0 int)
	WSetBlockOffset  func(a0 int)
	WSetOpenedBlocks func(a0 []parser.Block)
	WString          func() string
}

func (W _github_com_yuin_goldmark_parser_Context) AddReference(a0 parser.Reference) {
	W.WAddReference(a0)
}
func (W _github_com_yuin_goldmark_parser_Context) BlockIndent() int { return W.WBlockIndent() }
func (W _github_com_yuin_goldmark_parser_Context) BlockOffset() int { return W.WBlockOffset() }
func (W _github_com_yuin_goldmark_parser_Context) ClearDelimiters(bottom ast.Node) {
	W.WClearDelimiters(bottom)
}
func (W _github_com_yuin_goldmark_parser_Context) ComputeIfAbsent(a0 parser.ContextKey, a1 func() interface{}) interface{} {
	return W.WComputeIfAbsent(a0, a1)
}
func (W _github_com_yuin_goldmark_parser_Context) FirstDelimiter() *parser.Delimiter {
	return W.WFirstDelimiter()
}
func (W _github_com_yuin_goldmark_parser_Context) Get(a0 parser.ContextKey) interface{} {
	return W.WGet(a0)
}
func (W _github_com_yuin_goldmark_parser_Context) IDs() parser.IDs     { return W.WIDs() }
func (W _github_com_yuin_goldmark_parser_Context) IsInLinkLabel() bool { return W.WIsInLinkLabel() }
func (W _github_com_yuin_goldmark_parser_Context) LastDelimiter() *parser.Delimiter {
	return W.WLastDelimiter()
}
func (W _github_com_yuin_goldmark_parser_Context) LastOpenedBlock() parser.Block {
	return W.WLastOpenedBlock()
}
func (W _github_com_yuin_goldmark_parser_Context) OpenedBlocks() []parser.Block {
	return W.WOpenedBlocks()
}
func (W _github_com_yuin_goldmark_parser_Context) PushDelimiter(delimiter *parser.Delimiter) {
	W.WPushDelimiter(delimiter)
}
func (W _github_com_yuin_goldmark_parser_Context) Reference(label string) (parser.Reference, bool) {
	return W.WReference(label)
}
func (W _github_com_yuin_goldmark_parser_Context) References() []parser.Reference {
	return W.WReferences()
}
func (W _github_com_yuin_goldmark_parser_Context) RemoveDelimiter(d *parser.Delimiter) {
	W.WRemoveDelimiter(d)
}
func (W _github_com_yuin_goldmark_parser_Context) Set(a0 parser.ContextKey, a1 interface{}) {
	W.WSet(a0, a1)
}
func (W _github_com_yuin_goldmark_parser_Context) SetBlockIndent(a0 int) { W.WSetBlockIndent(a0) }
func (W _github_com_yuin_goldmark_parser_Context) SetBlockOffset(a0 int) { W.WSetBlockOffset(a0) }
func (W _github_com_yuin_goldmark_parser_Context) SetOpenedBlocks(a0 []parser.Block) {
	W.WSetOpenedBlocks(a0)
}
func (W _github_com_yuin_goldmark_parser_Context) String() string {
	if W.WString == nil {
		return ""
	}
	return W.WString()
}

// _github_com_yuin_goldmark_parser_DelimiterProcessor is an interface wrapper for DelimiterProcessor type
type _github_com_yuin_goldmark_parser_DelimiterProcessor struct {
	IValue         interface{}
	WCanOpenCloser func(opener *parser.Delimiter, closer *parser.Delimiter) bool
	WIsDelimiter   func(a0 byte) bool
	WOnMatch       func(consumes int) ast.Node
}

func (W _github_com_yuin_goldmark_parser_DelimiterProcessor) CanOpenCloser(opener *parser.Delimiter, closer *parser.Delimiter) bool {
	return W.WCanOpenCloser(opener, closer)
}
func (W _github_com_yuin_goldmark_parser_DelimiterProcessor) IsDelimiter(a0 byte) bool {
	return W.WIsDelimiter(a0)
}
func (W _github_com_yuin_goldmark_parser_DelimiterProcessor) OnMatch(consumes int) ast.Node {
	return W.WOnMatch(consumes)
}

// _github_com_yuin_goldmark_parser_HeadingOption is an interface wrapper for HeadingOption type
type _github_com_yuin_goldmark_parser_HeadingOption struct {
	IValue            interface{}
	WSetHeadingOption func(a0 *parser.HeadingConfig)
	WSetParserOption  func(a0 *parser.Config)
}

func (W _github_com_yuin_goldmark_parser_HeadingOption) SetHeadingOption(a0 *parser.HeadingConfig) {
	W.WSetHeadingOption(a0)
}
func (W _github_com_yuin_goldmark_parser_HeadingOption) SetParserOption(a0 *parser.Config) {
	W.WSetParserOption(a0)
}

// _github_com_yuin_goldmark_parser_IDs is an interface wrapper for IDs type
type _github_com_yuin_goldmark_parser_IDs struct {
	IValue    interface{}
	WGenerate func(value []byte, kind ast.NodeKind) []byte
	WPut      func(value []byte)
}

func (W _github_com_yuin_goldmark_parser_IDs) Generate(value []byte, kind ast.NodeKind) []byte {
	return W.WGenerate(value, kind)
}
func (W _github_com_yuin_goldmark_parser_IDs) Put(value []byte) { W.WPut(value) }

// _github_com_yuin_goldmark_parser_InlineParser is an interface wrapper for InlineParser type
type _github_com_yuin_goldmark_parser_InlineParser struct {
	IValue   interface{}
	WParse   func(parent ast.Node, block text.Reader, pc parser.Context) ast.Node
	WTrigger func() []byte
}

func (W _github_com_yuin_goldmark_parser_InlineParser) Parse(parent ast.Node, block text.Reader, pc parser.Context) ast.Node {
	return W.WParse(parent, block, pc)
}
func (W _github_com_yuin_goldmark_parser_InlineParser) Trigger() []byte { return W.WTrigger() }

// _github_com_yuin_goldmark_parser_Option is an interface wrapper for Option type
type _github_com_yuin_goldmark_parser_Option struct {
	IValue           interface{}
	WSetParserOption func(a0 *parser.Config)
}

func (W _github_com_yuin_goldmark_parser_Option) SetParserOption(a0 *parser.Config) {
	W.WSetParserOption(a0)
}

// _github_com_yuin_goldmark_parser_ParagraphTransformer is an interface wrapper for ParagraphTransformer type
type _github_com_yuin_goldmark_parser_ParagraphTransformer struct {
	IValue     interface{}
	WTransform func(node *ast.Paragraph, reader text.Reader, pc parser.Context)
}

func (W _github_com_yuin_goldmark_parser_ParagraphTransformer) Transform(node *ast.Paragraph, reader text.Reader, pc parser.Context) {
	W.WTransform(node, reader, pc)
}

// _github_com_yuin_goldmark_parser_Parser is an interface wrapper for Parser type
type _github_com_yuin_goldmark_parser_Parser struct {
	IValue      interface{}
	WAddOptions func(a0 ...parser.Option)
	WParse      func(reader text.Reader, opts ...parser.ParseOption) ast.Node
}

func (W _github_com_yuin_goldmark_parser_Parser) AddOptions(a0 ...parser.Option) {
	W.WAddOptions(a0...)
}
func (W _github_com_yuin_goldmark_parser_Parser) Parse(reader text.Reader, opts ...parser.ParseOption) ast.Node {
	return W.WParse(reader, opts...)
}

// _github_com_yuin_goldmark_parser_Reference is an interface wrapper for Reference type
type _github_com_yuin_goldmark_parser_Reference struct {
	IValue       interface{}
	WDestination func() []byte
	WLabel       func() []byte
	WString      func() string
	WTitle       func() []byte
}

func (W _github_com_yuin_goldmark_parser_Reference) Destination() []byte { return W.WDestination() }
func (W _github_com_yuin_goldmark_parser_Reference) Label() []byte       { return W.WLabel() }
func (W _github_com_yuin_goldmark_parser_Reference) String() string {
	if W.WString == nil {
		return ""
	}
	return W.WString()
}
func (W _github_com_yuin_goldmark_parser_Reference) Title() []byte { return W.WTitle() }

// _github_com_yuin_goldmark_parser_SetOptioner is an interface wrapper for SetOptioner type
type _github_com_yuin_goldmark_parser_SetOptioner struct {
	IValue     interface{}
	WSetOption func(name parser.OptionName, value interface{})
}

func (W _github_com_yuin_goldmark_parser_SetOptioner) SetOption(name parser.OptionName, value interface{}) {
	W.WSetOption(name, value)
}
