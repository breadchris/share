// Code generated by 'yaegi extract github.com/breadchris/flow/claude'. DO NOT EDIT.

package symbol

import (
	"github.com/breadchris/flow/claude"
	"reflect"
)

func init() {
	Symbols["github.com/breadchris/flow/claude/claude"] = map[string]reflect.Value{
		// function, constant and variable definitions
		"NewClaudeService": reflect.ValueOf(claude.NewClaudeService),
		"NewGitService":    reflect.ValueOf(claude.NewGitService),
		"NewHTTP":          reflect.ValueOf(claude.NewHTTP),
		"NewService":       reflect.ValueOf(claude.NewService),

		// type definitions
		"ClaudeMDConfig":             reflect.ValueOf((*claude.ClaudeMDConfig)(nil)),
		"ClaudeMDConfigListResponse": reflect.ValueOf((*claude.ClaudeMDConfigListResponse)(nil)),
		"ClaudeMDCreateRequest":      reflect.ValueOf((*claude.ClaudeMDCreateRequest)(nil)),
		"ClaudeMDUpdateRequest":      reflect.ValueOf((*claude.ClaudeMDUpdateRequest)(nil)),
		"ClaudeMessage":              reflect.ValueOf((*claude.ClaudeMessage)(nil)),
		"ClaudeService":              reflect.ValueOf((*claude.ClaudeService)(nil)),
		"CommitInfo":                 reflect.ValueOf((*claude.CommitInfo)(nil)),
		"Config":                     reflect.ValueOf((*claude.Config)(nil)),
		"GitService":                 reflect.ValueOf((*claude.GitService)(nil)),
		"GitSessionInfo":             reflect.ValueOf((*claude.GitSessionInfo)(nil)),
		"Input":                      reflect.ValueOf((*claude.Input)(nil)),
		"InputMessage":               reflect.ValueOf((*claude.InputMessage)(nil)),
		"InputMessageContent":        reflect.ValueOf((*claude.InputMessageContent)(nil)),
		"Message":                    reflect.ValueOf((*claude.Message)(nil)),
		"Process":                    reflect.ValueOf((*claude.Process)(nil)),
		"ProcessWithCallback":        reflect.ValueOf((*claude.ProcessWithCallback)(nil)),
		"RepositoryStatus":           reflect.ValueOf((*claude.RepositoryStatus)(nil)),
		"Service":                    reflect.ValueOf((*claude.Service)(nil)),
		"SessionIDCallback":          reflect.ValueOf((*claude.SessionIDCallback)(nil)),
		"SessionIDMismatchError":     reflect.ValueOf((*claude.SessionIDMismatchError)(nil)),
		"SessionInfo":                reflect.ValueOf((*claude.SessionInfo)(nil)),
		"WSMessage":                  reflect.ValueOf((*claude.WSMessage)(nil)),
	}
}
