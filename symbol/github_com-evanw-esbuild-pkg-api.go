// Code generated by 'yaegi extract github.com/evanw/esbuild/pkg/api'. DO NOT EDIT.

package symbol

import (
	"github.com/evanw/esbuild/pkg/api"
	"reflect"
)

func init() {
	Symbols["github.com/evanw/esbuild/pkg/api/api"] = map[string]reflect.Value{
		// function, constant and variable definitions
		"AnalyzeMetafile":            reflect.ValueOf(api.AnalyzeMetafile),
		"Build":                      reflect.ValueOf(api.Build),
		"CharsetASCII":               reflect.ValueOf(api.CharsetASCII),
		"CharsetDefault":             reflect.ValueOf(api.CharsetDefault),
		"CharsetUTF8":                reflect.ValueOf(api.CharsetUTF8),
		"ColorAlways":                reflect.ValueOf(api.ColorAlways),
		"ColorIfTerminal":            reflect.ValueOf(api.ColorIfTerminal),
		"ColorNever":                 reflect.ValueOf(api.ColorNever),
		"Context":                    reflect.ValueOf(api.Context),
		"DefaultTarget":              reflect.ValueOf(api.DefaultTarget),
		"DropConsole":                reflect.ValueOf(api.DropConsole),
		"DropDebugger":               reflect.ValueOf(api.DropDebugger),
		"ES2015":                     reflect.ValueOf(api.ES2015),
		"ES2016":                     reflect.ValueOf(api.ES2016),
		"ES2017":                     reflect.ValueOf(api.ES2017),
		"ES2018":                     reflect.ValueOf(api.ES2018),
		"ES2019":                     reflect.ValueOf(api.ES2019),
		"ES2020":                     reflect.ValueOf(api.ES2020),
		"ES2021":                     reflect.ValueOf(api.ES2021),
		"ES2022":                     reflect.ValueOf(api.ES2022),
		"ES2023":                     reflect.ValueOf(api.ES2023),
		"ES2024":                     reflect.ValueOf(api.ES2024),
		"ES5":                        reflect.ValueOf(api.ES5),
		"ESNext":                     reflect.ValueOf(api.ESNext),
		"EngineChrome":               reflect.ValueOf(api.EngineChrome),
		"EngineDeno":                 reflect.ValueOf(api.EngineDeno),
		"EngineEdge":                 reflect.ValueOf(api.EngineEdge),
		"EngineFirefox":              reflect.ValueOf(api.EngineFirefox),
		"EngineHermes":               reflect.ValueOf(api.EngineHermes),
		"EngineIE":                   reflect.ValueOf(api.EngineIE),
		"EngineIOS":                  reflect.ValueOf(api.EngineIOS),
		"EngineNode":                 reflect.ValueOf(api.EngineNode),
		"EngineOpera":                reflect.ValueOf(api.EngineOpera),
		"EngineRhino":                reflect.ValueOf(api.EngineRhino),
		"EngineSafari":               reflect.ValueOf(api.EngineSafari),
		"ErrorMessage":               reflect.ValueOf(api.ErrorMessage),
		"FormatCommonJS":             reflect.ValueOf(api.FormatCommonJS),
		"FormatDefault":              reflect.ValueOf(api.FormatDefault),
		"FormatESModule":             reflect.ValueOf(api.FormatESModule),
		"FormatIIFE":                 reflect.ValueOf(api.FormatIIFE),
		"FormatMessages":             reflect.ValueOf(api.FormatMessages),
		"JSXAutomatic":               reflect.ValueOf(api.JSXAutomatic),
		"JSXPreserve":                reflect.ValueOf(api.JSXPreserve),
		"JSXTransform":               reflect.ValueOf(api.JSXTransform),
		"LegalCommentsDefault":       reflect.ValueOf(api.LegalCommentsDefault),
		"LegalCommentsEndOfFile":     reflect.ValueOf(api.LegalCommentsEndOfFile),
		"LegalCommentsExternal":      reflect.ValueOf(api.LegalCommentsExternal),
		"LegalCommentsInline":        reflect.ValueOf(api.LegalCommentsInline),
		"LegalCommentsLinked":        reflect.ValueOf(api.LegalCommentsLinked),
		"LegalCommentsNone":          reflect.ValueOf(api.LegalCommentsNone),
		"LoaderBase64":               reflect.ValueOf(api.LoaderBase64),
		"LoaderBinary":               reflect.ValueOf(api.LoaderBinary),
		"LoaderCSS":                  reflect.ValueOf(api.LoaderCSS),
		"LoaderCopy":                 reflect.ValueOf(api.LoaderCopy),
		"LoaderDataURL":              reflect.ValueOf(api.LoaderDataURL),
		"LoaderDefault":              reflect.ValueOf(api.LoaderDefault),
		"LoaderEmpty":                reflect.ValueOf(api.LoaderEmpty),
		"LoaderFile":                 reflect.ValueOf(api.LoaderFile),
		"LoaderGlobalCSS":            reflect.ValueOf(api.LoaderGlobalCSS),
		"LoaderJS":                   reflect.ValueOf(api.LoaderJS),
		"LoaderJSON":                 reflect.ValueOf(api.LoaderJSON),
		"LoaderJSX":                  reflect.ValueOf(api.LoaderJSX),
		"LoaderLocalCSS":             reflect.ValueOf(api.LoaderLocalCSS),
		"LoaderNone":                 reflect.ValueOf(api.LoaderNone),
		"LoaderTS":                   reflect.ValueOf(api.LoaderTS),
		"LoaderTSX":                  reflect.ValueOf(api.LoaderTSX),
		"LoaderText":                 reflect.ValueOf(api.LoaderText),
		"LogLevelDebug":              reflect.ValueOf(api.LogLevelDebug),
		"LogLevelError":              reflect.ValueOf(api.LogLevelError),
		"LogLevelInfo":               reflect.ValueOf(api.LogLevelInfo),
		"LogLevelSilent":             reflect.ValueOf(api.LogLevelSilent),
		"LogLevelVerbose":            reflect.ValueOf(api.LogLevelVerbose),
		"LogLevelWarning":            reflect.ValueOf(api.LogLevelWarning),
		"MangleQuotedFalse":          reflect.ValueOf(api.MangleQuotedFalse),
		"MangleQuotedTrue":           reflect.ValueOf(api.MangleQuotedTrue),
		"PackagesBundle":             reflect.ValueOf(api.PackagesBundle),
		"PackagesDefault":            reflect.ValueOf(api.PackagesDefault),
		"PackagesExternal":           reflect.ValueOf(api.PackagesExternal),
		"PlatformBrowser":            reflect.ValueOf(api.PlatformBrowser),
		"PlatformDefault":            reflect.ValueOf(api.PlatformDefault),
		"PlatformNeutral":            reflect.ValueOf(api.PlatformNeutral),
		"PlatformNode":               reflect.ValueOf(api.PlatformNode),
		"ResolveCSSComposesFrom":     reflect.ValueOf(api.ResolveCSSComposesFrom),
		"ResolveCSSImportRule":       reflect.ValueOf(api.ResolveCSSImportRule),
		"ResolveCSSURLToken":         reflect.ValueOf(api.ResolveCSSURLToken),
		"ResolveEntryPoint":          reflect.ValueOf(api.ResolveEntryPoint),
		"ResolveJSDynamicImport":     reflect.ValueOf(api.ResolveJSDynamicImport),
		"ResolveJSImportStatement":   reflect.ValueOf(api.ResolveJSImportStatement),
		"ResolveJSRequireCall":       reflect.ValueOf(api.ResolveJSRequireCall),
		"ResolveJSRequireResolve":    reflect.ValueOf(api.ResolveJSRequireResolve),
		"ResolveNone":                reflect.ValueOf(api.ResolveNone),
		"SideEffectsFalse":           reflect.ValueOf(api.SideEffectsFalse),
		"SideEffectsTrue":            reflect.ValueOf(api.SideEffectsTrue),
		"SourceMapExternal":          reflect.ValueOf(api.SourceMapExternal),
		"SourceMapInline":            reflect.ValueOf(api.SourceMapInline),
		"SourceMapInlineAndExternal": reflect.ValueOf(api.SourceMapInlineAndExternal),
		"SourceMapLinked":            reflect.ValueOf(api.SourceMapLinked),
		"SourceMapNone":              reflect.ValueOf(api.SourceMapNone),
		"SourcesContentExclude":      reflect.ValueOf(api.SourcesContentExclude),
		"SourcesContentInclude":      reflect.ValueOf(api.SourcesContentInclude),
		"Transform":                  reflect.ValueOf(api.Transform),
		"TreeShakingDefault":         reflect.ValueOf(api.TreeShakingDefault),
		"TreeShakingFalse":           reflect.ValueOf(api.TreeShakingFalse),
		"TreeShakingTrue":            reflect.ValueOf(api.TreeShakingTrue),
		"WarningMessage":             reflect.ValueOf(api.WarningMessage),

		// type definitions
		"AnalyzeMetafileOptions": reflect.ValueOf((*api.AnalyzeMetafileOptions)(nil)),
		"BuildContext":           reflect.ValueOf((*api.BuildContext)(nil)),
		"BuildOptions":           reflect.ValueOf((*api.BuildOptions)(nil)),
		"BuildResult":            reflect.ValueOf((*api.BuildResult)(nil)),
		"CORSOptions":            reflect.ValueOf((*api.CORSOptions)(nil)),
		"Charset":                reflect.ValueOf((*api.Charset)(nil)),
		"ContextError":           reflect.ValueOf((*api.ContextError)(nil)),
		"Drop":                   reflect.ValueOf((*api.Drop)(nil)),
		"Engine":                 reflect.ValueOf((*api.Engine)(nil)),
		"EngineName":             reflect.ValueOf((*api.EngineName)(nil)),
		"EntryPoint":             reflect.ValueOf((*api.EntryPoint)(nil)),
		"Format":                 reflect.ValueOf((*api.Format)(nil)),
		"FormatMessagesOptions":  reflect.ValueOf((*api.FormatMessagesOptions)(nil)),
		"JSX":                    reflect.ValueOf((*api.JSX)(nil)),
		"LegalComments":          reflect.ValueOf((*api.LegalComments)(nil)),
		"Loader":                 reflect.ValueOf((*api.Loader)(nil)),
		"Location":               reflect.ValueOf((*api.Location)(nil)),
		"LogLevel":               reflect.ValueOf((*api.LogLevel)(nil)),
		"MangleQuoted":           reflect.ValueOf((*api.MangleQuoted)(nil)),
		"Message":                reflect.ValueOf((*api.Message)(nil)),
		"MessageKind":            reflect.ValueOf((*api.MessageKind)(nil)),
		"Note":                   reflect.ValueOf((*api.Note)(nil)),
		"OnEndResult":            reflect.ValueOf((*api.OnEndResult)(nil)),
		"OnLoadArgs":             reflect.ValueOf((*api.OnLoadArgs)(nil)),
		"OnLoadOptions":          reflect.ValueOf((*api.OnLoadOptions)(nil)),
		"OnLoadResult":           reflect.ValueOf((*api.OnLoadResult)(nil)),
		"OnResolveArgs":          reflect.ValueOf((*api.OnResolveArgs)(nil)),
		"OnResolveOptions":       reflect.ValueOf((*api.OnResolveOptions)(nil)),
		"OnResolveResult":        reflect.ValueOf((*api.OnResolveResult)(nil)),
		"OnStartResult":          reflect.ValueOf((*api.OnStartResult)(nil)),
		"OutputFile":             reflect.ValueOf((*api.OutputFile)(nil)),
		"Packages":               reflect.ValueOf((*api.Packages)(nil)),
		"Platform":               reflect.ValueOf((*api.Platform)(nil)),
		"Plugin":                 reflect.ValueOf((*api.Plugin)(nil)),
		"PluginBuild":            reflect.ValueOf((*api.PluginBuild)(nil)),
		"ResolveKind":            reflect.ValueOf((*api.ResolveKind)(nil)),
		"ResolveOptions":         reflect.ValueOf((*api.ResolveOptions)(nil)),
		"ResolveResult":          reflect.ValueOf((*api.ResolveResult)(nil)),
		"ServeOnRequestArgs":     reflect.ValueOf((*api.ServeOnRequestArgs)(nil)),
		"ServeOptions":           reflect.ValueOf((*api.ServeOptions)(nil)),
		"ServeResult":            reflect.ValueOf((*api.ServeResult)(nil)),
		"SideEffects":            reflect.ValueOf((*api.SideEffects)(nil)),
		"SourceMap":              reflect.ValueOf((*api.SourceMap)(nil)),
		"SourcesContent":         reflect.ValueOf((*api.SourcesContent)(nil)),
		"StderrColor":            reflect.ValueOf((*api.StderrColor)(nil)),
		"StdinOptions":           reflect.ValueOf((*api.StdinOptions)(nil)),
		"Target":                 reflect.ValueOf((*api.Target)(nil)),
		"TransformOptions":       reflect.ValueOf((*api.TransformOptions)(nil)),
		"TransformResult":        reflect.ValueOf((*api.TransformResult)(nil)),
		"TreeShaking":            reflect.ValueOf((*api.TreeShaking)(nil)),
		"WatchOptions":           reflect.ValueOf((*api.WatchOptions)(nil)),

		// interface wrapper definitions
		"_BuildContext": reflect.ValueOf((*_github_com_evanw_esbuild_pkg_api_BuildContext)(nil)),
	}
}

// _github_com_evanw_esbuild_pkg_api_BuildContext is an interface wrapper for BuildContext type
type _github_com_evanw_esbuild_pkg_api_BuildContext struct {
	IValue   interface{}
	WCancel  func()
	WDispose func()
	WRebuild func() api.BuildResult
	WServe   func(options api.ServeOptions) (api.ServeResult, error)
	WWatch   func(options api.WatchOptions) error
}

func (W _github_com_evanw_esbuild_pkg_api_BuildContext) Cancel()  { W.WCancel() }
func (W _github_com_evanw_esbuild_pkg_api_BuildContext) Dispose() { W.WDispose() }
func (W _github_com_evanw_esbuild_pkg_api_BuildContext) Rebuild() api.BuildResult {
	return W.WRebuild()
}
func (W _github_com_evanw_esbuild_pkg_api_BuildContext) Serve(options api.ServeOptions) (api.ServeResult, error) {
	return W.WServe(options)
}
func (W _github_com_evanw_esbuild_pkg_api_BuildContext) Watch(options api.WatchOptions) error {
	return W.WWatch(options)
}
