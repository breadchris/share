// Code generated by 'yaegi extract gorm.io/gorm/schema'. DO NOT EDIT.

package symbol

import (
	"context"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"
	"reflect"
)

func init() {
	Symbols["gorm.io/gorm/schema/schema"] = map[string]reflect.Value{
		// function, constant and variable definitions
		"BelongsTo":                           reflect.ValueOf(schema.BelongsTo),
		"Bool":                                reflect.ValueOf(schema.Bool),
		"ByteReflectType":                     reflect.ValueOf(&schema.ByteReflectType).Elem(),
		"Bytes":                               reflect.ValueOf(schema.Bytes),
		"DefaultAutoIncrementIncrement":       reflect.ValueOf(schema.DefaultAutoIncrementIncrement),
		"ErrUnsupportedDataType":              reflect.ValueOf(&schema.ErrUnsupportedDataType).Elem(),
		"Float":                               reflect.ValueOf(schema.Float),
		"GetIdentityFieldValuesMap":           reflect.ValueOf(schema.GetIdentityFieldValuesMap),
		"GetIdentityFieldValuesMapFromValues": reflect.ValueOf(schema.GetIdentityFieldValuesMapFromValues),
		"GetRelationsValues":                  reflect.ValueOf(schema.GetRelationsValues),
		"GetSerializer":                       reflect.ValueOf(schema.GetSerializer),
		"HasMany":                             reflect.ValueOf(schema.HasMany),
		"HasOne":                              reflect.ValueOf(schema.HasOne),
		"Int":                                 reflect.ValueOf(schema.Int),
		"Many2Many":                           reflect.ValueOf(schema.Many2Many),
		"Parse":                               reflect.ValueOf(schema.Parse),
		"ParseTagSetting":                     reflect.ValueOf(schema.ParseTagSetting),
		"ParseWithSpecialTableName":           reflect.ValueOf(schema.ParseWithSpecialTableName),
		"RegisterSerializer":                  reflect.ValueOf(schema.RegisterSerializer),
		"String":                              reflect.ValueOf(schema.String),
		"Time":                                reflect.ValueOf(schema.Time),
		"TimePtrReflectType":                  reflect.ValueOf(&schema.TimePtrReflectType).Elem(),
		"TimeReflectType":                     reflect.ValueOf(&schema.TimeReflectType).Elem(),
		"ToQueryValues":                       reflect.ValueOf(schema.ToQueryValues),
		"Uint":                                reflect.ValueOf(schema.Uint),
		"UnixMillisecond":                     reflect.ValueOf(schema.UnixMillisecond),
		"UnixNanosecond":                      reflect.ValueOf(schema.UnixNanosecond),
		"UnixSecond":                          reflect.ValueOf(schema.UnixSecond),
		"UnixTime":                            reflect.ValueOf(schema.UnixTime),

		// type definitions
		"CheckConstraint":           reflect.ValueOf((*schema.CheckConstraint)(nil)),
		"Constraint":                reflect.ValueOf((*schema.Constraint)(nil)),
		"ConstraintInterface":       reflect.ValueOf((*schema.ConstraintInterface)(nil)),
		"CreateClausesInterface":    reflect.ValueOf((*schema.CreateClausesInterface)(nil)),
		"DataType":                  reflect.ValueOf((*schema.DataType)(nil)),
		"DeleteClausesInterface":    reflect.ValueOf((*schema.DeleteClausesInterface)(nil)),
		"Field":                     reflect.ValueOf((*schema.Field)(nil)),
		"FieldNewValuePool":         reflect.ValueOf((*schema.FieldNewValuePool)(nil)),
		"GobSerializer":             reflect.ValueOf((*schema.GobSerializer)(nil)),
		"GormDataTypeInterface":     reflect.ValueOf((*schema.GormDataTypeInterface)(nil)),
		"Index":                     reflect.ValueOf((*schema.Index)(nil)),
		"IndexOption":               reflect.ValueOf((*schema.IndexOption)(nil)),
		"JSONSerializer":            reflect.ValueOf((*schema.JSONSerializer)(nil)),
		"Namer":                     reflect.ValueOf((*schema.Namer)(nil)),
		"NamingStrategy":            reflect.ValueOf((*schema.NamingStrategy)(nil)),
		"Polymorphic":               reflect.ValueOf((*schema.Polymorphic)(nil)),
		"QueryClausesInterface":     reflect.ValueOf((*schema.QueryClausesInterface)(nil)),
		"Reference":                 reflect.ValueOf((*schema.Reference)(nil)),
		"Relationship":              reflect.ValueOf((*schema.Relationship)(nil)),
		"RelationshipType":          reflect.ValueOf((*schema.RelationshipType)(nil)),
		"Relationships":             reflect.ValueOf((*schema.Relationships)(nil)),
		"Replacer":                  reflect.ValueOf((*schema.Replacer)(nil)),
		"Schema":                    reflect.ValueOf((*schema.Schema)(nil)),
		"SerializerInterface":       reflect.ValueOf((*schema.SerializerInterface)(nil)),
		"SerializerValuerInterface": reflect.ValueOf((*schema.SerializerValuerInterface)(nil)),
		"Tabler":                    reflect.ValueOf((*schema.Tabler)(nil)),
		"TablerWithNamer":           reflect.ValueOf((*schema.TablerWithNamer)(nil)),
		"TimeType":                  reflect.ValueOf((*schema.TimeType)(nil)),
		"UniqueConstraint":          reflect.ValueOf((*schema.UniqueConstraint)(nil)),
		"UnixSecondSerializer":      reflect.ValueOf((*schema.UnixSecondSerializer)(nil)),
		"UpdateClausesInterface":    reflect.ValueOf((*schema.UpdateClausesInterface)(nil)),

		// interface wrapper definitions
		"_ConstraintInterface":       reflect.ValueOf((*_gorm_io_gorm_schema_ConstraintInterface)(nil)),
		"_CreateClausesInterface":    reflect.ValueOf((*_gorm_io_gorm_schema_CreateClausesInterface)(nil)),
		"_DeleteClausesInterface":    reflect.ValueOf((*_gorm_io_gorm_schema_DeleteClausesInterface)(nil)),
		"_FieldNewValuePool":         reflect.ValueOf((*_gorm_io_gorm_schema_FieldNewValuePool)(nil)),
		"_GormDataTypeInterface":     reflect.ValueOf((*_gorm_io_gorm_schema_GormDataTypeInterface)(nil)),
		"_Namer":                     reflect.ValueOf((*_gorm_io_gorm_schema_Namer)(nil)),
		"_QueryClausesInterface":     reflect.ValueOf((*_gorm_io_gorm_schema_QueryClausesInterface)(nil)),
		"_Replacer":                  reflect.ValueOf((*_gorm_io_gorm_schema_Replacer)(nil)),
		"_SerializerInterface":       reflect.ValueOf((*_gorm_io_gorm_schema_SerializerInterface)(nil)),
		"_SerializerValuerInterface": reflect.ValueOf((*_gorm_io_gorm_schema_SerializerValuerInterface)(nil)),
		"_Tabler":                    reflect.ValueOf((*_gorm_io_gorm_schema_Tabler)(nil)),
		"_TablerWithNamer":           reflect.ValueOf((*_gorm_io_gorm_schema_TablerWithNamer)(nil)),
		"_UpdateClausesInterface":    reflect.ValueOf((*_gorm_io_gorm_schema_UpdateClausesInterface)(nil)),
	}
}

// _gorm_io_gorm_schema_ConstraintInterface is an interface wrapper for ConstraintInterface type
type _gorm_io_gorm_schema_ConstraintInterface struct {
	IValue   interface{}
	WBuild   func() (sql string, vars []interface{})
	WGetName func() string
}

func (W _gorm_io_gorm_schema_ConstraintInterface) Build() (sql string, vars []interface{}) {
	return W.WBuild()
}
func (W _gorm_io_gorm_schema_ConstraintInterface) GetName() string { return W.WGetName() }

// _gorm_io_gorm_schema_CreateClausesInterface is an interface wrapper for CreateClausesInterface type
type _gorm_io_gorm_schema_CreateClausesInterface struct {
	IValue         interface{}
	WCreateClauses func(a0 *schema.Field) []clause.Interface
}

func (W _gorm_io_gorm_schema_CreateClausesInterface) CreateClauses(a0 *schema.Field) []clause.Interface {
	return W.WCreateClauses(a0)
}

// _gorm_io_gorm_schema_DeleteClausesInterface is an interface wrapper for DeleteClausesInterface type
type _gorm_io_gorm_schema_DeleteClausesInterface struct {
	IValue         interface{}
	WDeleteClauses func(a0 *schema.Field) []clause.Interface
}

func (W _gorm_io_gorm_schema_DeleteClausesInterface) DeleteClauses(a0 *schema.Field) []clause.Interface {
	return W.WDeleteClauses(a0)
}

// _gorm_io_gorm_schema_FieldNewValuePool is an interface wrapper for FieldNewValuePool type
type _gorm_io_gorm_schema_FieldNewValuePool struct {
	IValue interface{}
	WGet   func() interface{}
	WPut   func(a0 interface{})
}

func (W _gorm_io_gorm_schema_FieldNewValuePool) Get() interface{}   { return W.WGet() }
func (W _gorm_io_gorm_schema_FieldNewValuePool) Put(a0 interface{}) { W.WPut(a0) }

// _gorm_io_gorm_schema_GormDataTypeInterface is an interface wrapper for GormDataTypeInterface type
type _gorm_io_gorm_schema_GormDataTypeInterface struct {
	IValue        interface{}
	WGormDataType func() string
}

func (W _gorm_io_gorm_schema_GormDataTypeInterface) GormDataType() string { return W.WGormDataType() }

// _gorm_io_gorm_schema_Namer is an interface wrapper for Namer type
type _gorm_io_gorm_schema_Namer struct {
	IValue              interface{}
	WCheckerName        func(table string, column string) string
	WColumnName         func(table string, column string) string
	WIndexName          func(table string, column string) string
	WJoinTableName      func(joinTable string) string
	WRelationshipFKName func(a0 schema.Relationship) string
	WSchemaName         func(table string) string
	WTableName          func(table string) string
	WUniqueName         func(table string, column string) string
}

func (W _gorm_io_gorm_schema_Namer) CheckerName(table string, column string) string {
	return W.WCheckerName(table, column)
}
func (W _gorm_io_gorm_schema_Namer) ColumnName(table string, column string) string {
	return W.WColumnName(table, column)
}
func (W _gorm_io_gorm_schema_Namer) IndexName(table string, column string) string {
	return W.WIndexName(table, column)
}
func (W _gorm_io_gorm_schema_Namer) JoinTableName(joinTable string) string {
	return W.WJoinTableName(joinTable)
}
func (W _gorm_io_gorm_schema_Namer) RelationshipFKName(a0 schema.Relationship) string {
	return W.WRelationshipFKName(a0)
}
func (W _gorm_io_gorm_schema_Namer) SchemaName(table string) string { return W.WSchemaName(table) }
func (W _gorm_io_gorm_schema_Namer) TableName(table string) string  { return W.WTableName(table) }
func (W _gorm_io_gorm_schema_Namer) UniqueName(table string, column string) string {
	return W.WUniqueName(table, column)
}

// _gorm_io_gorm_schema_QueryClausesInterface is an interface wrapper for QueryClausesInterface type
type _gorm_io_gorm_schema_QueryClausesInterface struct {
	IValue        interface{}
	WQueryClauses func(a0 *schema.Field) []clause.Interface
}

func (W _gorm_io_gorm_schema_QueryClausesInterface) QueryClauses(a0 *schema.Field) []clause.Interface {
	return W.WQueryClauses(a0)
}

// _gorm_io_gorm_schema_Replacer is an interface wrapper for Replacer type
type _gorm_io_gorm_schema_Replacer struct {
	IValue   interface{}
	WReplace func(name string) string
}

func (W _gorm_io_gorm_schema_Replacer) Replace(name string) string { return W.WReplace(name) }

// _gorm_io_gorm_schema_SerializerInterface is an interface wrapper for SerializerInterface type
type _gorm_io_gorm_schema_SerializerInterface struct {
	IValue interface{}
	WScan  func(ctx context.Context, field *schema.Field, dst reflect.Value, dbValue interface{}) error
	WValue func(ctx context.Context, field *schema.Field, dst reflect.Value, fieldValue interface{}) (interface{}, error)
}

func (W _gorm_io_gorm_schema_SerializerInterface) Scan(ctx context.Context, field *schema.Field, dst reflect.Value, dbValue interface{}) error {
	return W.WScan(ctx, field, dst, dbValue)
}
func (W _gorm_io_gorm_schema_SerializerInterface) Value(ctx context.Context, field *schema.Field, dst reflect.Value, fieldValue interface{}) (interface{}, error) {
	return W.WValue(ctx, field, dst, fieldValue)
}

// _gorm_io_gorm_schema_SerializerValuerInterface is an interface wrapper for SerializerValuerInterface type
type _gorm_io_gorm_schema_SerializerValuerInterface struct {
	IValue interface{}
	WValue func(ctx context.Context, field *schema.Field, dst reflect.Value, fieldValue interface{}) (interface{}, error)
}

func (W _gorm_io_gorm_schema_SerializerValuerInterface) Value(ctx context.Context, field *schema.Field, dst reflect.Value, fieldValue interface{}) (interface{}, error) {
	return W.WValue(ctx, field, dst, fieldValue)
}

// _gorm_io_gorm_schema_Tabler is an interface wrapper for Tabler type
type _gorm_io_gorm_schema_Tabler struct {
	IValue     interface{}
	WTableName func() string
}

func (W _gorm_io_gorm_schema_Tabler) TableName() string { return W.WTableName() }

// _gorm_io_gorm_schema_TablerWithNamer is an interface wrapper for TablerWithNamer type
type _gorm_io_gorm_schema_TablerWithNamer struct {
	IValue     interface{}
	WTableName func(a0 schema.Namer) string
}

func (W _gorm_io_gorm_schema_TablerWithNamer) TableName(a0 schema.Namer) string {
	return W.WTableName(a0)
}

// _gorm_io_gorm_schema_UpdateClausesInterface is an interface wrapper for UpdateClausesInterface type
type _gorm_io_gorm_schema_UpdateClausesInterface struct {
	IValue         interface{}
	WUpdateClauses func(a0 *schema.Field) []clause.Interface
}

func (W _gorm_io_gorm_schema_UpdateClausesInterface) UpdateClauses(a0 *schema.Field) []clause.Interface {
	return W.WUpdateClauses(a0)
}
