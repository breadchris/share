// Code generated by 'yaegi extract github.com/evanphx/json-patch/v5'. DO NOT EDIT.

package symbol

import (
	"github.com/evanphx/json-patch/v5"
	"reflect"
)

func init() {
	Symbols["github.com/evanphx/json-patch/v5/jsonpatch"] = map[string]reflect.Value{
		// function, constant and variable definitions
		"AccumulatedCopySizeLimit":    reflect.ValueOf(&jsonpatch.AccumulatedCopySizeLimit).Elem(),
		"CreateMergePatch":            reflect.ValueOf(jsonpatch.CreateMergePatch),
		"DecodePatch":                 reflect.ValueOf(jsonpatch.DecodePatch),
		"Equal":                       reflect.ValueOf(jsonpatch.Equal),
		"ErrExpectedObject":           reflect.ValueOf(&jsonpatch.ErrExpectedObject).Elem(),
		"ErrInvalid":                  reflect.ValueOf(&jsonpatch.ErrInvalid).Elem(),
		"ErrInvalidIndex":             reflect.ValueOf(&jsonpatch.ErrInvalidIndex).Elem(),
		"ErrMissing":                  reflect.ValueOf(&jsonpatch.ErrMissing).Elem(),
		"ErrTestFailed":               reflect.ValueOf(&jsonpatch.ErrTestFailed).Elem(),
		"ErrUnknownType":              reflect.ValueOf(&jsonpatch.ErrUnknownType).Elem(),
		"MergeMergePatches":           reflect.ValueOf(jsonpatch.MergeMergePatches),
		"MergePatch":                  reflect.ValueOf(jsonpatch.MergePatch),
		"NewAccumulatedCopySizeError": reflect.ValueOf(jsonpatch.NewAccumulatedCopySizeError),
		"NewApplyOptions":             reflect.ValueOf(jsonpatch.NewApplyOptions),
		"NewArraySizeError":           reflect.ValueOf(jsonpatch.NewArraySizeError),
		"SupportNegativeIndices":      reflect.ValueOf(&jsonpatch.SupportNegativeIndices).Elem(),

		// type definitions
		"AccumulatedCopySizeError": reflect.ValueOf((*jsonpatch.AccumulatedCopySizeError)(nil)),
		"ApplyOptions":             reflect.ValueOf((*jsonpatch.ApplyOptions)(nil)),
		"ArraySizeError":           reflect.ValueOf((*jsonpatch.ArraySizeError)(nil)),
		"Operation":                reflect.ValueOf((*jsonpatch.Operation)(nil)),
		"Patch":                    reflect.ValueOf((*jsonpatch.Patch)(nil)),
	}
}
