// Code generated by 'yaegi extract github.com/breadchris/share/html'. DO NOT EDIT.

package symbol

import (
	"github.com/breadchris/share/html"
	"github.com/cogentcore/yaegi/interp"
	"reflect"
)

func init() {
	Symbols["github.com/breadchris/share/html/html"] = map[string]reflect.Value{
		// function, constant and variable definitions
		"A":                       reflect.ValueOf(html.A),
		"Accesskey":               reflect.ValueOf(html.Accesskey),
		"Action":                  reflect.ValueOf(html.Action),
		"Alt":                     reflect.ValueOf(html.Alt),
		"AriaExpanded":            reflect.ValueOf(html.AriaExpanded),
		"AriaHaspopup":            reflect.ValueOf(html.AriaHaspopup),
		"AriaHidden":              reflect.ValueOf(html.AriaHidden),
		"AriaLabel":               reflect.ValueOf(html.AriaLabel),
		"AriaLabelledby":          reflect.ValueOf(html.AriaLabelledby),
		"AriaOrientation":         reflect.ValueOf(html.AriaOrientation),
		"Article":                 reflect.ValueOf(html.Article),
		"Attr":                    reflect.ValueOf(html.Attr),
		"AttrCtx":                 reflect.ValueOf(html.AttrCtx),
		"Attrs":                   reflect.ValueOf(html.Attrs),
		"Body":                    reflect.ValueOf(html.Body),
		"BuildForm":               reflect.ValueOf(html.BuildForm),
		"BuildFormCtx":            reflect.ValueOf(html.BuildFormCtx),
		"Button":                  reflect.ValueOf(html.Button),
		"Ch":                      reflect.ValueOf(html.Ch),
		"Charset":                 reflect.ValueOf(html.Charset),
		"Checked":                 reflect.ValueOf(html.Checked),
		"Chl":                     reflect.ValueOf(html.Chl),
		"Class":                   reflect.ValueOf(html.Class),
		"ClipRule":                reflect.ValueOf(html.ClipRule),
		"Contains":                reflect.ValueOf(interp.GenericFunc("func Contains[T comparable](collection []T, element T) bool { //yaegi:add\n\tfor i := range collection {\n\t\tif collection[i] == element {\n\t\t\treturn true\n\t\t}\n\t}\n\n\treturn false\n}")),
		"Content":                 reflect.ValueOf(html.Content),
		"Crossorigin":             reflect.ValueOf(html.Crossorigin),
		"D":                       reflect.ValueOf(html.D),
		"DaisyUI":                 reflect.ValueOf(&html.DaisyUI).Elem(),
		"DataSlot":                reflect.ValueOf(html.DataSlot),
		"Datetime":                reflect.ValueOf(html.Datetime),
		"Dd":                      reflect.ValueOf(html.Dd),
		"DefaultLayout":           reflect.ValueOf(html.DefaultLayout),
		"Details":                 reflect.ValueOf(html.Details),
		"Dialog":                  reflect.ValueOf(html.Dialog),
		"Div":                     reflect.ValueOf(html.Div),
		"Dl":                      reflect.ValueOf(html.Dl),
		"Dt":                      reflect.ValueOf(html.Dt),
		"FileRule":                reflect.ValueOf(html.FileRule),
		"Fill":                    reflect.ValueOf(html.Fill),
		"FillRule":                reflect.ValueOf(html.FillRule),
		"Filter":                  reflect.ValueOf(interp.GenericFunc("func Filter[T any, Slice ~[]T](collection Slice, predicate func(item T, index int) bool) Slice { //yaegi:add\n\tresult := make(Slice, 0, len(collection))\n\n\tfor i := range collection {\n\t\tif predicate(collection[i], i) {\n\t\t\tresult = append(result, collection[i])\n\t\t}\n\t}\n\n\treturn result\n}")),
		"Footer":                  reflect.ValueOf(html.Footer),
		"For":                     reflect.ValueOf(html.For),
		"Form":                    reflect.ValueOf(html.Form),
		"GenerateRenderDirectory": reflect.ValueOf(html.GenerateRenderDirectory),
		"H1":                      reflect.ValueOf(html.H1),
		"H2":                      reflect.ValueOf(html.H2),
		"H3":                      reflect.ValueOf(html.H3),
		"H4":                      reflect.ValueOf(html.H4),
		"H5":                      reflect.ValueOf(html.H5),
		"HTMX":                    reflect.ValueOf(&html.HTMX).Elem(),
		"Head":                    reflect.ValueOf(html.Head),
		"Header":                  reflect.ValueOf(html.Header),
		"Hr":                      reflect.ValueOf(html.Hr),
		"Href":                    reflect.ValueOf(html.Href),
		"Html":                    reflect.ValueOf(html.Html),
		"HttpEquiv":               reflect.ValueOf(html.HttpEquiv),
		"HxDelete":                reflect.ValueOf(html.HxDelete),
		"HxGet":                   reflect.ValueOf(html.HxGet),
		"HxPost":                  reflect.ValueOf(html.HxPost),
		"HxPut":                   reflect.ValueOf(html.HxPut),
		"HxSwap":                  reflect.ValueOf(html.HxSwap),
		"HxTarget":                reflect.ValueOf(html.HxTarget),
		"HxTrigger":               reflect.ValueOf(html.HxTrigger),
		"Id":                      reflect.ValueOf(html.Id),
		"If":                      reflect.ValueOf(html.If),
		"Iframe":                  reflect.ValueOf(html.Iframe),
		"Img":                     reflect.ValueOf(html.Img),
		"Input":                   reflect.ValueOf(html.Input),
		"Keys":                    reflect.ValueOf(interp.GenericFunc("func Keys[K comparable, V any](in map[K]V) []K { //yaegi:add\n\tresult := make([]K, 0, len(in))\n\n\tfor k := range in {\n\t\tresult = append(result, k)\n\t}\n\n\treturn result\n}")),
		"Label":                   reflect.ValueOf(html.Label),
		"Li":                      reflect.ValueOf(html.Li),
		"Link":                    reflect.ValueOf(html.Link),
		"Main":                    reflect.ValueOf(html.Main),
		"Map":                     reflect.ValueOf(interp.GenericFunc("func Map[T any, R any](collection []T, iteratee func(item T, index int) R) []R { //yaegi:add\n\tresult := make([]R, len(collection))\n\n\tfor i := range collection {\n\t\tresult[i] = iteratee(collection[i], i)\n\t}\n\n\treturn result\n}")),
		"Max":                     reflect.ValueOf(html.Max),
		"Meta":                    reflect.ValueOf(html.Meta),
		"Method":                  reflect.ValueOf(html.Method),
		"ModifyFunction":          reflect.ValueOf(html.ModifyFunction),
		"Name":                    reflect.ValueOf(html.Name),
		"Nav":                     reflect.ValueOf(html.Nav),
		"NewAttrNode":             reflect.ValueOf(html.NewAttrNode),
		"NewNode":                 reflect.ValueOf(html.NewNode),
		"Nil":                     reflect.ValueOf(html.Nil),
		"Ol":                      reflect.ValueOf(html.Ol),
		"OnClick":                 reflect.ValueOf(html.OnClick),
		"Open":                    reflect.ValueOf(html.Open),
		"Option":                  reflect.ValueOf(html.Option),
		"P":                       reflect.ValueOf(html.P),
		"ParseFilePaths":          reflect.ValueOf(html.ParseFilePaths),
		"ParseHTML":               reflect.ValueOf(html.ParseHTML),
		"ParseHTMLString":         reflect.ValueOf(html.ParseHTMLString),
		"Path":                    reflect.ValueOf(html.Path),
		"Placeholder":             reflect.ValueOf(html.Placeholder),
		"Pre":                     reflect.ValueOf(html.Pre),
		"Progress":                reflect.ValueOf(html.Progress),
		"Property":                reflect.ValueOf(html.Property),
		"Rel":                     reflect.ValueOf(html.Rel),
		"ReloadNode":              reflect.ValueOf(html.ReloadNode),
		"RenderDirectory":         reflect.ValueOf(html.RenderDirectory),
		"RenderGoFunction":        reflect.ValueOf(html.RenderGoFunction),
		"RenderHTML":              reflect.ValueOf(html.RenderHTML),
		"RenderLanding":           reflect.ValueOf(html.RenderLanding),
		"RenderPricingPage":       reflect.ValueOf(html.RenderPricingPage),
		"RenderTabs":              reflect.ValueOf(html.RenderTabs),
		"Role":                    reflect.ValueOf(html.Role),
		"Rows":                    reflect.ValueOf(html.Rows),
		"Script":                  reflect.ValueOf(html.Script),
		"Section":                 reflect.ValueOf(html.Section),
		"Select":                  reflect.ValueOf(html.Select),
		"ServeNode":               reflect.ValueOf(html.ServeNode),
		"ServeNodeCtx":            reflect.ValueOf(html.ServeNodeCtx),
		"Sizes":                   reflect.ValueOf(html.Sizes),
		"Span":                    reflect.ValueOf(html.Span),
		"Src":                     reflect.ValueOf(html.Src),
		"Stroke":                  reflect.ValueOf(html.Stroke),
		"StrokeLinecap":           reflect.ValueOf(html.StrokeLinecap),
		"StrokeLinejoin":          reflect.ValueOf(html.StrokeLinejoin),
		"StrokeWidth":             reflect.ValueOf(html.StrokeWidth),
		"Style":                   reflect.ValueOf(html.Style),
		"Style_":                  reflect.ValueOf(html.Style_),
		"Summary":                 reflect.ValueOf(html.Summary),
		"Svg":                     reflect.ValueOf(html.Svg),
		"T":                       reflect.ValueOf(html.T),
		"Tabindex":                reflect.ValueOf(html.Tabindex),
		"TailwindCSS":             reflect.ValueOf(&html.TailwindCSS).Elem(),
		"Target":                  reflect.ValueOf(html.Target),
		"Text":                    reflect.ValueOf(html.Text),
		"TextArea":                reflect.ValueOf(html.TextArea),
		"Time":                    reflect.ValueOf(html.Time),
		"Title":                   reflect.ValueOf(html.Title),
		"Type":                    reflect.ValueOf(html.Type),
		"Ul":                      reflect.ValueOf(html.Ul),
		"Upload":                  reflect.ValueOf(html.Upload),
		"Value":                   reflect.ValueOf(html.Value),
		"ViewBox":                 reflect.ValueOf(html.ViewBox),
		"Xmlns":                   reflect.ValueOf(html.Xmlns),

		// type definitions
		"BuildCtx":  reflect.ValueOf((*html.BuildCtx)(nil)),
		"Directory": reflect.ValueOf((*html.Directory)(nil)),
		"File":      reflect.ValueOf((*html.File)(nil)),
		"NilNode":   reflect.ValueOf((*html.NilNode)(nil)),
		"Node":      reflect.ValueOf((*html.Node)(nil)),
		"Tab":       reflect.ValueOf((*html.Tab)(nil)),
	}
}
