// Code generated by 'yaegi extract github.com/go-git/go-git/v5'. DO NOT EDIT.

package symbol

import (
	"github.com/go-git/go-git/v5"
	"go/constant"
	"go/token"
	"io"
	"reflect"
)

func init() {
	Symbols["github.com/go-git/go-git/v5/git"] = map[string]reflect.Value{
		// function, constant and variable definitions
		"Added":                          reflect.ValueOf(git.Added),
		"AllTags":                        reflect.ValueOf(git.AllTags),
		"AppendPeeled":                   reflect.ValueOf(git.AppendPeeled),
		"Blame":                          reflect.ValueOf(git.Blame),
		"Clone":                          reflect.ValueOf(git.Clone),
		"CloneContext":                   reflect.ValueOf(git.CloneContext),
		"Copied":                         reflect.ValueOf(git.Copied),
		"DefaultRemoteName":              reflect.ValueOf(constant.MakeFromLiteral("\"origin\"", token.STRING, 0)),
		"DefaultSubmoduleRecursionDepth": reflect.ValueOf(git.DefaultSubmoduleRecursionDepth),
		"Deleted":                        reflect.ValueOf(git.Deleted),
		"ErrAlternatePathNotSupported":   reflect.ValueOf(&git.ErrAlternatePathNotSupported).Elem(),
		"ErrAnonymousRemoteName":         reflect.ValueOf(&git.ErrAnonymousRemoteName).Elem(),
		"ErrBranchExists":                reflect.ValueOf(&git.ErrBranchExists).Elem(),
		"ErrBranchHashExclusive":         reflect.ValueOf(&git.ErrBranchHashExclusive).Elem(),
		"ErrBranchNotFound":              reflect.ValueOf(&git.ErrBranchNotFound).Elem(),
		"ErrCreateRequiresBranch":        reflect.ValueOf(&git.ErrCreateRequiresBranch).Elem(),
		"ErrDeleteRefNotSupported":       reflect.ValueOf(&git.ErrDeleteRefNotSupported).Elem(),
		"ErrDestinationExists":           reflect.ValueOf(&git.ErrDestinationExists).Elem(),
		"ErrEmptyCommit":                 reflect.ValueOf(&git.ErrEmptyCommit).Elem(),
		"ErrEmptyUrls":                   reflect.ValueOf(&git.ErrEmptyUrls).Elem(),
		"ErrExactSHA1NotSupported":       reflect.ValueOf(&git.ErrExactSHA1NotSupported).Elem(),
		"ErrFastForwardMergeNotPossible": reflect.ValueOf(&git.ErrFastForwardMergeNotPossible).Elem(),
		"ErrFetching":                    reflect.ValueOf(&git.ErrFetching).Elem(),
		"ErrForceNeeded":                 reflect.ValueOf(&git.ErrForceNeeded).Elem(),
		"ErrGitModulesSymlink":           reflect.ValueOf(&git.ErrGitModulesSymlink).Elem(),
		"ErrGlobNoMatches":               reflect.ValueOf(&git.ErrGlobNoMatches).Elem(),
		"ErrHashOrReference":             reflect.ValueOf(&git.ErrHashOrReference).Elem(),
		"ErrInvalidReference":            reflect.ValueOf(&git.ErrInvalidReference).Elem(),
		"ErrIsBareRepository":            reflect.ValueOf(&git.ErrIsBareRepository).Elem(),
		"ErrLooseObjectsNotSupported":    reflect.ValueOf(&git.ErrLooseObjectsNotSupported).Elem(),
		"ErrMissingAuthor":               reflect.ValueOf(&git.ErrMissingAuthor).Elem(),
		"ErrMissingMessage":              reflect.ValueOf(&git.ErrMissingMessage).Elem(),
		"ErrMissingName":                 reflect.ValueOf(&git.ErrMissingName).Elem(),
		"ErrMissingTagger":               reflect.ValueOf(&git.ErrMissingTagger).Elem(),
		"ErrMissingURL":                  reflect.ValueOf(&git.ErrMissingURL).Elem(),
		"ErrNonFastForwardUpdate":        reflect.ValueOf(&git.ErrNonFastForwardUpdate).Elem(),
		"ErrPackedObjectsNotSupported":   reflect.ValueOf(&git.ErrPackedObjectsNotSupported).Elem(),
		"ErrRemoteExists":                reflect.ValueOf(&git.ErrRemoteExists).Elem(),
		"ErrRemoteNotFound":              reflect.ValueOf(&git.ErrRemoteNotFound).Elem(),
		"ErrRepositoryAlreadyExists":     reflect.ValueOf(&git.ErrRepositoryAlreadyExists).Elem(),
		"ErrRepositoryIncomplete":        reflect.ValueOf(&git.ErrRepositoryIncomplete).Elem(),
		"ErrRepositoryNotExists":         reflect.ValueOf(&git.ErrRepositoryNotExists).Elem(),
		"ErrSHA256NotSupported":          reflect.ValueOf(&git.ErrSHA256NotSupported).Elem(),
		"ErrSubmoduleAlreadyInitialized": reflect.ValueOf(&git.ErrSubmoduleAlreadyInitialized).Elem(),
		"ErrSubmoduleNotFound":           reflect.ValueOf(&git.ErrSubmoduleNotFound).Elem(),
		"ErrSubmoduleNotInitialized":     reflect.ValueOf(&git.ErrSubmoduleNotInitialized).Elem(),
		"ErrTagExists":                   reflect.ValueOf(&git.ErrTagExists).Elem(),
		"ErrTagNotFound":                 reflect.ValueOf(&git.ErrTagNotFound).Elem(),
		"ErrUnableToResolveCommit":       reflect.ValueOf(&git.ErrUnableToResolveCommit).Elem(),
		"ErrUnstagedChanges":             reflect.ValueOf(&git.ErrUnstagedChanges).Elem(),
		"ErrUnsupportedMergeStrategy":    reflect.ValueOf(&git.ErrUnsupportedMergeStrategy).Elem(),
		"ErrWorktreeNotClean":            reflect.ValueOf(&git.ErrWorktreeNotClean).Elem(),
		"ErrWorktreeNotProvided":         reflect.ValueOf(&git.ErrWorktreeNotProvided).Elem(),
		"FastForwardMerge":               reflect.ValueOf(git.FastForwardMerge),
		"GitDirName":                     reflect.ValueOf(constant.MakeFromLiteral("\".git\"", token.STRING, 0)),
		"HardReset":                      reflect.ValueOf(git.HardReset),
		"IgnorePeeled":                   reflect.ValueOf(git.IgnorePeeled),
		"Init":                           reflect.ValueOf(git.Init),
		"InitWithOptions":                reflect.ValueOf(git.InitWithOptions),
		"InvalidTagMode":                 reflect.ValueOf(git.InvalidTagMode),
		"LogOrderBSF":                    reflect.ValueOf(git.LogOrderBSF),
		"LogOrderCommitterTime":          reflect.ValueOf(git.LogOrderCommitterTime),
		"LogOrderDFS":                    reflect.ValueOf(git.LogOrderDFS),
		"LogOrderDFSPost":                reflect.ValueOf(git.LogOrderDFSPost),
		"LogOrderDefault":                reflect.ValueOf(git.LogOrderDefault),
		"MergeReset":                     reflect.ValueOf(git.MergeReset),
		"MixedReset":                     reflect.ValueOf(git.MixedReset),
		"Modified":                       reflect.ValueOf(git.Modified),
		"NewRemote":                      reflect.ValueOf(git.NewRemote),
		"NoErrAlreadyUpToDate":           reflect.ValueOf(&git.NoErrAlreadyUpToDate).Elem(),
		"NoRecurseSubmodules":            reflect.ValueOf(git.NoRecurseSubmodules),
		"NoTags":                         reflect.ValueOf(git.NoTags),
		"OnlyPeeled":                     reflect.ValueOf(git.OnlyPeeled),
		"Open":                           reflect.ValueOf(git.Open),
		"PlainClone":                     reflect.ValueOf(git.PlainClone),
		"PlainCloneContext":              reflect.ValueOf(git.PlainCloneContext),
		"PlainInit":                      reflect.ValueOf(git.PlainInit),
		"PlainInitWithOptions":           reflect.ValueOf(git.PlainInitWithOptions),
		"PlainOpen":                      reflect.ValueOf(git.PlainOpen),
		"PlainOpenWithOptions":           reflect.ValueOf(git.PlainOpenWithOptions),
		"Renamed":                        reflect.ValueOf(git.Renamed),
		"SoftReset":                      reflect.ValueOf(git.SoftReset),
		"TagFollowing":                   reflect.ValueOf(git.TagFollowing),
		"Unmodified":                     reflect.ValueOf(git.Unmodified),
		"Untracked":                      reflect.ValueOf(git.Untracked),
		"UpdatedButUnmerged":             reflect.ValueOf(git.UpdatedButUnmerged),

		// type definitions
		"AddOptions":             reflect.ValueOf((*git.AddOptions)(nil)),
		"BlameResult":            reflect.ValueOf((*git.BlameResult)(nil)),
		"CheckoutOptions":        reflect.ValueOf((*git.CheckoutOptions)(nil)),
		"CleanOptions":           reflect.ValueOf((*git.CleanOptions)(nil)),
		"CloneOptions":           reflect.ValueOf((*git.CloneOptions)(nil)),
		"CommitOptions":          reflect.ValueOf((*git.CommitOptions)(nil)),
		"CreateTagOptions":       reflect.ValueOf((*git.CreateTagOptions)(nil)),
		"FetchOptions":           reflect.ValueOf((*git.FetchOptions)(nil)),
		"FileStatus":             reflect.ValueOf((*git.FileStatus)(nil)),
		"ForceWithLease":         reflect.ValueOf((*git.ForceWithLease)(nil)),
		"GrepOptions":            reflect.ValueOf((*git.GrepOptions)(nil)),
		"GrepResult":             reflect.ValueOf((*git.GrepResult)(nil)),
		"InitOptions":            reflect.ValueOf((*git.InitOptions)(nil)),
		"Line":                   reflect.ValueOf((*git.Line)(nil)),
		"ListOptions":            reflect.ValueOf((*git.ListOptions)(nil)),
		"LogOptions":             reflect.ValueOf((*git.LogOptions)(nil)),
		"LogOrder":               reflect.ValueOf((*git.LogOrder)(nil)),
		"MergeOptions":           reflect.ValueOf((*git.MergeOptions)(nil)),
		"MergeStrategy":          reflect.ValueOf((*git.MergeStrategy)(nil)),
		"NoMatchingRefSpecError": reflect.ValueOf((*git.NoMatchingRefSpecError)(nil)),
		"PeelingOption":          reflect.ValueOf((*git.PeelingOption)(nil)),
		"PlainInitOptions":       reflect.ValueOf((*git.PlainInitOptions)(nil)),
		"PlainOpenOptions":       reflect.ValueOf((*git.PlainOpenOptions)(nil)),
		"PruneHandler":           reflect.ValueOf((*git.PruneHandler)(nil)),
		"PruneOptions":           reflect.ValueOf((*git.PruneOptions)(nil)),
		"PullOptions":            reflect.ValueOf((*git.PullOptions)(nil)),
		"PushOptions":            reflect.ValueOf((*git.PushOptions)(nil)),
		"Remote":                 reflect.ValueOf((*git.Remote)(nil)),
		"RepackConfig":           reflect.ValueOf((*git.RepackConfig)(nil)),
		"Repository":             reflect.ValueOf((*git.Repository)(nil)),
		"ResetMode":              reflect.ValueOf((*git.ResetMode)(nil)),
		"ResetOptions":           reflect.ValueOf((*git.ResetOptions)(nil)),
		"Signer":                 reflect.ValueOf((*git.Signer)(nil)),
		"Status":                 reflect.ValueOf((*git.Status)(nil)),
		"StatusCode":             reflect.ValueOf((*git.StatusCode)(nil)),
		"Submodule":              reflect.ValueOf((*git.Submodule)(nil)),
		"SubmoduleRescursivity":  reflect.ValueOf((*git.SubmoduleRescursivity)(nil)),
		"SubmoduleStatus":        reflect.ValueOf((*git.SubmoduleStatus)(nil)),
		"SubmoduleUpdateOptions": reflect.ValueOf((*git.SubmoduleUpdateOptions)(nil)),
		"Submodules":             reflect.ValueOf((*git.Submodules)(nil)),
		"SubmodulesStatus":       reflect.ValueOf((*git.SubmodulesStatus)(nil)),
		"TagMode":                reflect.ValueOf((*git.TagMode)(nil)),
		"Worktree":               reflect.ValueOf((*git.Worktree)(nil)),

		// interface wrapper definitions
		"_Signer": reflect.ValueOf((*_github_com_go_git_go_git_v5_Signer)(nil)),
	}
}

// _github_com_go_git_go_git_v5_Signer is an interface wrapper for Signer type
type _github_com_go_git_go_git_v5_Signer struct {
	IValue interface{}
	WSign  func(message io.Reader) ([]byte, error)
}

func (W _github_com_go_git_go_git_v5_Signer) Sign(message io.Reader) ([]byte, error) {
	return W.WSign(message)
}
