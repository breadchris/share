// Code generated by 'yaegi extract github.com/gorilla/sessions'. DO NOT EDIT.

package symbol

import (
	"github.com/gorilla/sessions"
	"net/http"
	"reflect"
)

func init() {
	Symbols["github.com/gorilla/sessions/sessions"] = map[string]reflect.Value{
		// function, constant and variable definitions
		"GetRegistry":        reflect.ValueOf(sessions.GetRegistry),
		"NewCookie":          reflect.ValueOf(sessions.NewCookie),
		"NewCookieStore":     reflect.ValueOf(sessions.NewCookieStore),
		"NewFilesystemStore": reflect.ValueOf(sessions.NewFilesystemStore),
		"NewSession":         reflect.ValueOf(sessions.NewSession),
		"Save":               reflect.ValueOf(sessions.Save),

		// type definitions
		"CookieStore":     reflect.ValueOf((*sessions.CookieStore)(nil)),
		"FilesystemStore": reflect.ValueOf((*sessions.FilesystemStore)(nil)),
		"MultiError":      reflect.ValueOf((*sessions.MultiError)(nil)),
		"Options":         reflect.ValueOf((*sessions.Options)(nil)),
		"Registry":        reflect.ValueOf((*sessions.Registry)(nil)),
		"Session":         reflect.ValueOf((*sessions.Session)(nil)),
		"Store":           reflect.ValueOf((*sessions.Store)(nil)),

		// interface wrapper definitions
		"_Store": reflect.ValueOf((*_github_com_gorilla_sessions_Store)(nil)),
	}
}

// _github_com_gorilla_sessions_Store is an interface wrapper for Store type
type _github_com_gorilla_sessions_Store struct {
	IValue interface{}
	WGet   func(r *http.Request, name string) (*sessions.Session, error)
	WNew   func(r *http.Request, name string) (*sessions.Session, error)
	WSave  func(r *http.Request, w http.ResponseWriter, s *sessions.Session) error
}

func (W _github_com_gorilla_sessions_Store) Get(r *http.Request, name string) (*sessions.Session, error) {
	return W.WGet(r, name)
}
func (W _github_com_gorilla_sessions_Store) New(r *http.Request, name string) (*sessions.Session, error) {
	return W.WNew(r, name)
}
func (W _github_com_gorilla_sessions_Store) Save(r *http.Request, w http.ResponseWriter, s *sessions.Session) error {
	return W.WSave(r, w, s)
}
