// Code generated by 'yaegi extract github.com/kkdai/youtube/v2'. DO NOT EDIT.

package symbol

import (
	"github.com/kkdai/youtube/v2"
	"go/constant"
	"go/token"
	"reflect"
)

func init() {
	Symbols["github.com/kkdai/youtube/v2/youtube"] = map[string]reflect.Value{
		// function, constant and variable definitions
		"AndroidClient":                 reflect.ValueOf(&youtube.AndroidClient).Elem(),
		"DefaultClient":                 reflect.ValueOf(&youtube.DefaultClient).Elem(),
		"EmbeddedClient":                reflect.ValueOf(&youtube.EmbeddedClient).Elem(),
		"ErrCipherNotFound":             reflect.ValueOf(youtube.ErrCipherNotFound),
		"ErrInvalidCharactersInVideoID": reflect.ValueOf(youtube.ErrInvalidCharactersInVideoID),
		"ErrInvalidPlaylist":            reflect.ValueOf(youtube.ErrInvalidPlaylist),
		"ErrLoginRequired":              reflect.ValueOf(youtube.ErrLoginRequired),
		"ErrNoFormat":                   reflect.ValueOf(&youtube.ErrNoFormat).Elem(),
		"ErrNotPlayableInEmbed":         reflect.ValueOf(youtube.ErrNotPlayableInEmbed),
		"ErrReadOnClosedResBody":        reflect.ValueOf(youtube.ErrReadOnClosedResBody),
		"ErrSignatureTimestampNotFound": reflect.ValueOf(youtube.ErrSignatureTimestampNotFound),
		"ErrTranscriptDisabled":         reflect.ValueOf(&youtube.ErrTranscriptDisabled).Elem(),
		"ErrVideoIDMinLength":           reflect.ValueOf(youtube.ErrVideoIDMinLength),
		"ErrVideoPrivate":               reflect.ValueOf(youtube.ErrVideoPrivate),
		"ExtractVideoID":                reflect.ValueOf(youtube.ExtractVideoID),
		"Logger":                        reflect.ValueOf(&youtube.Logger).Elem(),
		"SetLogLevel":                   reflect.ValueOf(youtube.SetLogLevel),
		"Size10Mb":                      reflect.ValueOf(constant.MakeFromLiteral("10485760", token.INT, 0)),
		"Size1Kb":                       reflect.ValueOf(constant.MakeFromLiteral("1024", token.INT, 0)),
		"Size1Mb":                       reflect.ValueOf(constant.MakeFromLiteral("1048576", token.INT, 0)),
		"WebClient":                     reflect.ValueOf(&youtube.WebClient).Elem(),

		// type definitions
		"CaptionTrack":            reflect.ValueOf((*youtube.CaptionTrack)(nil)),
		"Client":                  reflect.ValueOf((*youtube.Client)(nil)),
		"DecipherOperation":       reflect.ValueOf((*youtube.DecipherOperation)(nil)),
		"ErrPlayabiltyStatus":     reflect.ValueOf((*youtube.ErrPlayabiltyStatus)(nil)),
		"ErrPlaylistStatus":       reflect.ValueOf((*youtube.ErrPlaylistStatus)(nil)),
		"ErrUnexpectedStatusCode": reflect.ValueOf((*youtube.ErrUnexpectedStatusCode)(nil)),
		"Format":                  reflect.ValueOf((*youtube.Format)(nil)),
		"FormatList":              reflect.ValueOf((*youtube.FormatList)(nil)),
		"Playlist":                reflect.ValueOf((*youtube.Playlist)(nil)),
		"PlaylistEntry":           reflect.ValueOf((*youtube.PlaylistEntry)(nil)),
		"Thumbnail":               reflect.ValueOf((*youtube.Thumbnail)(nil)),
		"Thumbnails":              reflect.ValueOf((*youtube.Thumbnails)(nil)),
		"TranscriptSegment":       reflect.ValueOf((*youtube.TranscriptSegment)(nil)),
		"Video":                   reflect.ValueOf((*youtube.Video)(nil)),
		"VideoTranscript":         reflect.ValueOf((*youtube.VideoTranscript)(nil)),
	}
}
