// Code generated by 'yaegi extract github.com/slack-go/slack'. DO NOT EDIT.

package symbol

import (
	"github.com/slack-go/slack"
	"go/constant"
	"go/token"
	"reflect"
)

func init() {
	Symbols["github.com/slack-go/slack/slack"] = map[string]reflect.Value{
		// function, constant and variable definitions
		"APIURL":                                   reflect.ValueOf(constant.MakeFromLiteral("\"https://slack.com/api/\"", token.STRING, 0)),
		"AddBlockMessage":                          reflect.ValueOf(slack.AddBlockMessage),
		"DEFAULT_FILES_CHANNEL":                    reflect.ValueOf(constant.MakeFromLiteral("\"\"", token.STRING, 0)),
		"DEFAULT_FILES_COUNT":                      reflect.ValueOf(constant.MakeFromLiteral("100", token.INT, 0)),
		"DEFAULT_FILES_PAGE":                       reflect.ValueOf(constant.MakeFromLiteral("1", token.INT, 0)),
		"DEFAULT_FILES_SHOW_HIDDEN":                reflect.ValueOf(slack.DEFAULT_FILES_SHOW_HIDDEN),
		"DEFAULT_FILES_TS_FROM":                    reflect.ValueOf(constant.MakeFromLiteral("0", token.INT, 0)),
		"DEFAULT_FILES_TS_TO":                      reflect.ValueOf(constant.MakeFromLiteral("-1", token.INT, 0)),
		"DEFAULT_FILES_TYPES":                      reflect.ValueOf(constant.MakeFromLiteral("\"all\"", token.STRING, 0)),
		"DEFAULT_FILES_USER":                       reflect.ValueOf(constant.MakeFromLiteral("\"\"", token.STRING, 0)),
		"DEFAULT_HISTORY_COUNT":                    reflect.ValueOf(constant.MakeFromLiteral("100", token.INT, 0)),
		"DEFAULT_HISTORY_INCLUSIVE":                reflect.ValueOf(slack.DEFAULT_HISTORY_INCLUSIVE),
		"DEFAULT_HISTORY_LATEST":                   reflect.ValueOf(constant.MakeFromLiteral("\"\"", token.STRING, 0)),
		"DEFAULT_HISTORY_OLDEST":                   reflect.ValueOf(constant.MakeFromLiteral("\"0\"", token.STRING, 0)),
		"DEFAULT_HISTORY_UNREADS":                  reflect.ValueOf(slack.DEFAULT_HISTORY_UNREADS),
		"DEFAULT_LOGINS_COUNT":                     reflect.ValueOf(constant.MakeFromLiteral("100", token.INT, 0)),
		"DEFAULT_LOGINS_PAGE":                      reflect.ValueOf(constant.MakeFromLiteral("1", token.INT, 0)),
		"DEFAULT_MESSAGE_ASUSER":                   reflect.ValueOf(slack.DEFAULT_MESSAGE_ASUSER),
		"DEFAULT_MESSAGE_ESCAPE_TEXT":              reflect.ValueOf(slack.DEFAULT_MESSAGE_ESCAPE_TEXT),
		"DEFAULT_MESSAGE_ICON_EMOJI":               reflect.ValueOf(constant.MakeFromLiteral("\"\"", token.STRING, 0)),
		"DEFAULT_MESSAGE_ICON_URL":                 reflect.ValueOf(constant.MakeFromLiteral("\"\"", token.STRING, 0)),
		"DEFAULT_MESSAGE_LINK_NAMES":               reflect.ValueOf(constant.MakeFromLiteral("0", token.INT, 0)),
		"DEFAULT_MESSAGE_MARKDOWN":                 reflect.ValueOf(slack.DEFAULT_MESSAGE_MARKDOWN),
		"DEFAULT_MESSAGE_PARSE":                    reflect.ValueOf(constant.MakeFromLiteral("\"\"", token.STRING, 0)),
		"DEFAULT_MESSAGE_REPLY_BROADCAST":          reflect.ValueOf(slack.DEFAULT_MESSAGE_REPLY_BROADCAST),
		"DEFAULT_MESSAGE_THREAD_TIMESTAMP":         reflect.ValueOf(constant.MakeFromLiteral("\"\"", token.STRING, 0)),
		"DEFAULT_MESSAGE_UNFURL_LINKS":             reflect.ValueOf(slack.DEFAULT_MESSAGE_UNFURL_LINKS),
		"DEFAULT_MESSAGE_UNFURL_MEDIA":             reflect.ValueOf(slack.DEFAULT_MESSAGE_UNFURL_MEDIA),
		"DEFAULT_MESSAGE_USERNAME":                 reflect.ValueOf(constant.MakeFromLiteral("\"\"", token.STRING, 0)),
		"DEFAULT_REACTIONS_COUNT":                  reflect.ValueOf(constant.MakeFromLiteral("100", token.INT, 0)),
		"DEFAULT_REACTIONS_FULL":                   reflect.ValueOf(slack.DEFAULT_REACTIONS_FULL),
		"DEFAULT_REACTIONS_PAGE":                   reflect.ValueOf(constant.MakeFromLiteral("1", token.INT, 0)),
		"DEFAULT_REACTIONS_USER":                   reflect.ValueOf(constant.MakeFromLiteral("\"\"", token.STRING, 0)),
		"DEFAULT_REMOTE_FILES_CHANNEL":             reflect.ValueOf(constant.MakeFromLiteral("\"\"", token.STRING, 0)),
		"DEFAULT_REMOTE_FILES_COUNT":               reflect.ValueOf(constant.MakeFromLiteral("100", token.INT, 0)),
		"DEFAULT_REMOTE_FILES_TS_FROM":             reflect.ValueOf(constant.MakeFromLiteral("0", token.INT, 0)),
		"DEFAULT_REMOTE_FILES_TS_TO":               reflect.ValueOf(constant.MakeFromLiteral("-1", token.INT, 0)),
		"DEFAULT_SEARCH_COUNT":                     reflect.ValueOf(constant.MakeFromLiteral("20", token.INT, 0)),
		"DEFAULT_SEARCH_HIGHLIGHT":                 reflect.ValueOf(slack.DEFAULT_SEARCH_HIGHLIGHT),
		"DEFAULT_SEARCH_PAGE":                      reflect.ValueOf(constant.MakeFromLiteral("1", token.INT, 0)),
		"DEFAULT_SEARCH_SORT":                      reflect.ValueOf(constant.MakeFromLiteral("\"score\"", token.STRING, 0)),
		"DEFAULT_SEARCH_SORT_DIR":                  reflect.ValueOf(constant.MakeFromLiteral("\"desc\"", token.STRING, 0)),
		"DEFAULT_STARS_COUNT":                      reflect.ValueOf(constant.MakeFromLiteral("100", token.INT, 0)),
		"DEFAULT_STARS_PAGE":                       reflect.ValueOf(constant.MakeFromLiteral("1", token.INT, 0)),
		"DEFAULT_STARS_USER":                       reflect.ValueOf(constant.MakeFromLiteral("\"\"", token.STRING, 0)),
		"DEFAULT_USER_PHOTO_CROP_W":                reflect.ValueOf(constant.MakeFromLiteral("-1", token.INT, 0)),
		"DEFAULT_USER_PHOTO_CROP_X":                reflect.ValueOf(constant.MakeFromLiteral("-1", token.INT, 0)),
		"DEFAULT_USER_PHOTO_CROP_Y":                reflect.ValueOf(constant.MakeFromLiteral("-1", token.INT, 0)),
		"DialogDataSourceChannels":                 reflect.ValueOf(slack.DialogDataSourceChannels),
		"DialogDataSourceConversations":            reflect.ValueOf(slack.DialogDataSourceConversations),
		"DialogDataSourceExternal":                 reflect.ValueOf(slack.DialogDataSourceExternal),
		"DialogDataSourceStatic":                   reflect.ValueOf(slack.DialogDataSourceStatic),
		"DialogDataSourceUsers":                    reflect.ValueOf(slack.DialogDataSourceUsers),
		"ErrAlreadyDisconnected":                   reflect.ValueOf(slack.ErrAlreadyDisconnected),
		"ErrBlockIDNotUnique":                      reflect.ValueOf(slack.ErrBlockIDNotUnique),
		"ErrExpiredTimestamp":                      reflect.ValueOf(slack.ErrExpiredTimestamp),
		"ErrInvalidConfiguration":                  reflect.ValueOf(slack.ErrInvalidConfiguration),
		"ErrMissingHeaders":                        reflect.ValueOf(slack.ErrMissingHeaders),
		"ErrParametersMissing":                     reflect.ValueOf(slack.ErrParametersMissing),
		"ErrRTMDeadman":                            reflect.ValueOf(slack.ErrRTMDeadman),
		"ErrRTMDisconnected":                       reflect.ValueOf(slack.ErrRTMDisconnected),
		"ErrRTMGoodbye":                            reflect.ValueOf(slack.ErrRTMGoodbye),
		"EventMapping":                             reflect.ValueOf(&slack.EventMapping).Elem(),
		"GetBotOAuthToken":                         reflect.ValueOf(slack.GetBotOAuthToken),
		"GetBotOAuthTokenContext":                  reflect.ValueOf(slack.GetBotOAuthTokenContext),
		"GetInitialOptionFromWorkflowStepInput":    reflect.ValueOf(slack.GetInitialOptionFromWorkflowStepInput),
		"GetOAuthResponse":                         reflect.ValueOf(slack.GetOAuthResponse),
		"GetOAuthResponseContext":                  reflect.ValueOf(slack.GetOAuthResponseContext),
		"GetOAuthToken":                            reflect.ValueOf(slack.GetOAuthToken),
		"GetOAuthTokenContext":                     reflect.ValueOf(slack.GetOAuthTokenContext),
		"GetOAuthV2Response":                       reflect.ValueOf(slack.GetOAuthV2Response),
		"GetOAuthV2ResponseContext":                reflect.ValueOf(slack.GetOAuthV2ResponseContext),
		"GetUserGroupsOptionIncludeCount":          reflect.ValueOf(slack.GetUserGroupsOptionIncludeCount),
		"GetUserGroupsOptionIncludeDisabled":       reflect.ValueOf(slack.GetUserGroupsOptionIncludeDisabled),
		"GetUserGroupsOptionIncludeUsers":          reflect.ValueOf(slack.GetUserGroupsOptionIncludeUsers),
		"GetUsersOptionLimit":                      reflect.ValueOf(slack.GetUsersOptionLimit),
		"GetUsersOptionPresence":                   reflect.ValueOf(slack.GetUsersOptionPresence),
		"GetUsersOptionTeamID":                     reflect.ValueOf(slack.GetUsersOptionTeamID),
		"GlobalShortcut":                           reflect.ValueOf(slack.GlobalShortcut),
		"HeaderBlockOptionBlockID":                 reflect.ValueOf(slack.HeaderBlockOptionBlockID),
		"InputSubtypeEmail":                        reflect.ValueOf(slack.InputSubtypeEmail),
		"InputSubtypeNumber":                       reflect.ValueOf(slack.InputSubtypeNumber),
		"InputSubtypeTel":                          reflect.ValueOf(slack.InputSubtypeTel),
		"InputSubtypeURL":                          reflect.ValueOf(slack.InputSubtypeURL),
		"InputTypeSelect":                          reflect.ValueOf(slack.InputTypeSelect),
		"InputTypeText":                            reflect.ValueOf(slack.InputTypeText),
		"InputTypeTextArea":                        reflect.ValueOf(slack.InputTypeTextArea),
		"InteractionTypeBlockActions":              reflect.ValueOf(slack.InteractionTypeBlockActions),
		"InteractionTypeBlockSuggestion":           reflect.ValueOf(slack.InteractionTypeBlockSuggestion),
		"InteractionTypeDialogCancellation":        reflect.ValueOf(slack.InteractionTypeDialogCancellation),
		"InteractionTypeDialogSubmission":          reflect.ValueOf(slack.InteractionTypeDialogSubmission),
		"InteractionTypeDialogSuggestion":          reflect.ValueOf(slack.InteractionTypeDialogSuggestion),
		"InteractionTypeInteractionMessage":        reflect.ValueOf(slack.InteractionTypeInteractionMessage),
		"InteractionTypeMessageAction":             reflect.ValueOf(slack.InteractionTypeMessageAction),
		"InteractionTypeShortcut":                  reflect.ValueOf(slack.InteractionTypeShortcut),
		"InteractionTypeViewClosed":                reflect.ValueOf(slack.InteractionTypeViewClosed),
		"InteractionTypeViewSubmission":            reflect.ValueOf(slack.InteractionTypeViewSubmission),
		"InteractionTypeWorkflowStepEdit":          reflect.ValueOf(slack.InteractionTypeWorkflowStepEdit),
		"MBTAction":                                reflect.ValueOf(slack.MBTAction),
		"MBTContext":                               reflect.ValueOf(slack.MBTContext),
		"MBTDivider":                               reflect.ValueOf(slack.MBTDivider),
		"MBTFile":                                  reflect.ValueOf(slack.MBTFile),
		"MBTHeader":                                reflect.ValueOf(slack.MBTHeader),
		"MBTImage":                                 reflect.ValueOf(slack.MBTImage),
		"MBTInput":                                 reflect.ValueOf(slack.MBTInput),
		"MBTRichText":                              reflect.ValueOf(slack.MBTRichText),
		"MBTSection":                               reflect.ValueOf(slack.MBTSection),
		"METButton":                                reflect.ValueOf(slack.METButton),
		"METCheckboxGroups":                        reflect.ValueOf(slack.METCheckboxGroups),
		"METDatepicker":                            reflect.ValueOf(slack.METDatepicker),
		"METDatetimepicker":                        reflect.ValueOf(slack.METDatetimepicker),
		"METEmailTextInput":                        reflect.ValueOf(slack.METEmailTextInput),
		"METImage":                                 reflect.ValueOf(slack.METImage),
		"METNumber":                                reflect.ValueOf(slack.METNumber),
		"METOverflow":                              reflect.ValueOf(slack.METOverflow),
		"METPlainTextInput":                        reflect.ValueOf(slack.METPlainTextInput),
		"METRadioButtons":                          reflect.ValueOf(slack.METRadioButtons),
		"METTimepicker":                            reflect.ValueOf(slack.METTimepicker),
		"METURLTextInput":                          reflect.ValueOf(slack.METURLTextInput),
		"MarkdownType":                             reflect.ValueOf(constant.MakeFromLiteral("\"mrkdwn\"", token.STRING, 0)),
		"MaxMessageTextLength":                     reflect.ValueOf(constant.MakeFromLiteral("4000", token.INT, 0)),
		"MessageShortcut":                          reflect.ValueOf(slack.MessageShortcut),
		"MixedElementImage":                        reflect.ValueOf(slack.MixedElementImage),
		"MixedElementText":                         reflect.ValueOf(slack.MixedElementText),
		"MsgOptionAsUser":                          reflect.ValueOf(slack.MsgOptionAsUser),
		"MsgOptionAttachments":                     reflect.ValueOf(slack.MsgOptionAttachments),
		"MsgOptionBlocks":                          reflect.ValueOf(slack.MsgOptionBlocks),
		"MsgOptionBroadcast":                       reflect.ValueOf(slack.MsgOptionBroadcast),
		"MsgOptionCompose":                         reflect.ValueOf(slack.MsgOptionCompose),
		"MsgOptionDelete":                          reflect.ValueOf(slack.MsgOptionDelete),
		"MsgOptionDeleteOriginal":                  reflect.ValueOf(slack.MsgOptionDeleteOriginal),
		"MsgOptionDisableLinkUnfurl":               reflect.ValueOf(slack.MsgOptionDisableLinkUnfurl),
		"MsgOptionDisableMarkdown":                 reflect.ValueOf(slack.MsgOptionDisableMarkdown),
		"MsgOptionDisableMediaUnfurl":              reflect.ValueOf(slack.MsgOptionDisableMediaUnfurl),
		"MsgOptionEnableLinkUnfurl":                reflect.ValueOf(slack.MsgOptionEnableLinkUnfurl),
		"MsgOptionIconEmoji":                       reflect.ValueOf(slack.MsgOptionIconEmoji),
		"MsgOptionIconURL":                         reflect.ValueOf(slack.MsgOptionIconURL),
		"MsgOptionMeMessage":                       reflect.ValueOf(slack.MsgOptionMeMessage),
		"MsgOptionMetadata":                        reflect.ValueOf(slack.MsgOptionMetadata),
		"MsgOptionParse":                           reflect.ValueOf(slack.MsgOptionParse),
		"MsgOptionPost":                            reflect.ValueOf(slack.MsgOptionPost),
		"MsgOptionPostEphemeral":                   reflect.ValueOf(slack.MsgOptionPostEphemeral),
		"MsgOptionPostMessageParameters":           reflect.ValueOf(slack.MsgOptionPostMessageParameters),
		"MsgOptionReplaceOriginal":                 reflect.ValueOf(slack.MsgOptionReplaceOriginal),
		"MsgOptionResponseURL":                     reflect.ValueOf(slack.MsgOptionResponseURL),
		"MsgOptionSchedule":                        reflect.ValueOf(slack.MsgOptionSchedule),
		"MsgOptionTS":                              reflect.ValueOf(slack.MsgOptionTS),
		"MsgOptionText":                            reflect.ValueOf(slack.MsgOptionText),
		"MsgOptionUnfurl":                          reflect.ValueOf(slack.MsgOptionUnfurl),
		"MsgOptionUnfurlAuthMessage":               reflect.ValueOf(slack.MsgOptionUnfurlAuthMessage),
		"MsgOptionUnfurlAuthRequired":              reflect.ValueOf(slack.MsgOptionUnfurlAuthRequired),
		"MsgOptionUnfurlAuthURL":                   reflect.ValueOf(slack.MsgOptionUnfurlAuthURL),
		"MsgOptionUpdate":                          reflect.ValueOf(slack.MsgOptionUpdate),
		"MsgOptionUser":                            reflect.ValueOf(slack.MsgOptionUser),
		"MsgOptionUsername":                        reflect.ValueOf(slack.MsgOptionUsername),
		"MsgSubTypeBotMessage":                     reflect.ValueOf(constant.MakeFromLiteral("\"bot_message\"", token.STRING, 0)),
		"MsgSubTypeChannelArchive":                 reflect.ValueOf(constant.MakeFromLiteral("\"channel_archive\"", token.STRING, 0)),
		"MsgSubTypeChannelJoin":                    reflect.ValueOf(constant.MakeFromLiteral("\"channel_join\"", token.STRING, 0)),
		"MsgSubTypeChannelLeave":                   reflect.ValueOf(constant.MakeFromLiteral("\"channel_leave\"", token.STRING, 0)),
		"MsgSubTypeChannelName":                    reflect.ValueOf(constant.MakeFromLiteral("\"channel_name\"", token.STRING, 0)),
		"MsgSubTypeChannelPostingPermissions":      reflect.ValueOf(constant.MakeFromLiteral("\"channel_posting_permissions\"", token.STRING, 0)),
		"MsgSubTypeChannelPurpose":                 reflect.ValueOf(constant.MakeFromLiteral("\"channel_purpose\"", token.STRING, 0)),
		"MsgSubTypeChannelTopic":                   reflect.ValueOf(constant.MakeFromLiteral("\"channel_topic\"", token.STRING, 0)),
		"MsgSubTypeChannelUnarchive":               reflect.ValueOf(constant.MakeFromLiteral("\"channel_unarchive\"", token.STRING, 0)),
		"MsgSubTypeEkmAccessDenied":                reflect.ValueOf(constant.MakeFromLiteral("\"ekm_access_denied\"", token.STRING, 0)),
		"MsgSubTypeFileComment":                    reflect.ValueOf(constant.MakeFromLiteral("\"file_comment\"", token.STRING, 0)),
		"MsgSubTypeFileShare":                      reflect.ValueOf(constant.MakeFromLiteral("\"file_share\"", token.STRING, 0)),
		"MsgSubTypeGileMention":                    reflect.ValueOf(constant.MakeFromLiteral("\"file_mention\"", token.STRING, 0)),
		"MsgSubTypeGroupArchive":                   reflect.ValueOf(constant.MakeFromLiteral("\"group_archive\"", token.STRING, 0)),
		"MsgSubTypeGroupJoin":                      reflect.ValueOf(constant.MakeFromLiteral("\"group_join\"", token.STRING, 0)),
		"MsgSubTypeGroupLeave":                     reflect.ValueOf(constant.MakeFromLiteral("\"group_leave\"", token.STRING, 0)),
		"MsgSubTypeGroupName":                      reflect.ValueOf(constant.MakeFromLiteral("\"group_name\"", token.STRING, 0)),
		"MsgSubTypeGroupPurpose":                   reflect.ValueOf(constant.MakeFromLiteral("\"group_purpose\"", token.STRING, 0)),
		"MsgSubTypeGroupTopic":                     reflect.ValueOf(constant.MakeFromLiteral("\"group_topic\"", token.STRING, 0)),
		"MsgSubTypeGroupUnarchive":                 reflect.ValueOf(constant.MakeFromLiteral("\"group_unarchive\"", token.STRING, 0)),
		"MsgSubTypeMeMessage":                      reflect.ValueOf(constant.MakeFromLiteral("\"me_message\"", token.STRING, 0)),
		"MsgSubTypeMessageChanged":                 reflect.ValueOf(constant.MakeFromLiteral("\"message_changed\"", token.STRING, 0)),
		"MsgSubTypeMessageDeleted":                 reflect.ValueOf(constant.MakeFromLiteral("\"message_deleted\"", token.STRING, 0)),
		"MsgSubTypeMessageReplied":                 reflect.ValueOf(constant.MakeFromLiteral("\"message_replied\"", token.STRING, 0)),
		"MsgSubTypePinnedItem":                     reflect.ValueOf(constant.MakeFromLiteral("\"pinned_item\"", token.STRING, 0)),
		"MsgSubTypeReplyBroadcast":                 reflect.ValueOf(constant.MakeFromLiteral("\"reply_broadcast\"", token.STRING, 0)),
		"MsgSubTypeThreadBroadcast":                reflect.ValueOf(constant.MakeFromLiteral("\"thread_broadcast\"", token.STRING, 0)),
		"MsgSubTypeUnpinnedItem":                   reflect.ValueOf(constant.MakeFromLiteral("\"unpinned_item\"", token.STRING, 0)),
		"MultiOptTypeChannels":                     reflect.ValueOf(slack.MultiOptTypeChannels),
		"MultiOptTypeConversations":                reflect.ValueOf(slack.MultiOptTypeConversations),
		"MultiOptTypeExternal":                     reflect.ValueOf(slack.MultiOptTypeExternal),
		"MultiOptTypeStatic":                       reflect.ValueOf(slack.MultiOptTypeStatic),
		"MultiOptTypeUser":                         reflect.ValueOf(slack.MultiOptTypeUser),
		"New":                                      reflect.ValueOf(slack.New),
		"NewAccessLogParameters":                   reflect.ValueOf(slack.NewAccessLogParameters),
		"NewAccessory":                             reflect.ValueOf(slack.NewAccessory),
		"NewActionBlock":                           reflect.ValueOf(slack.NewActionBlock),
		"NewBlockMessage":                          reflect.ValueOf(slack.NewBlockMessage),
		"NewButtonBlockElement":                    reflect.ValueOf(slack.NewButtonBlockElement),
		"NewChannelItem":                           reflect.ValueOf(slack.NewChannelItem),
		"NewChannelsSelect":                        reflect.ValueOf(slack.NewChannelsSelect),
		"NewCheckboxGroupsBlockElement":            reflect.ValueOf(slack.NewCheckboxGroupsBlockElement),
		"NewClearViewSubmissionResponse":           reflect.ValueOf(slack.NewClearViewSubmissionResponse),
		"NewConfigurationModalRequest":             reflect.ValueOf(slack.NewConfigurationModalRequest),
		"NewConfirmationBlockObject":               reflect.ValueOf(slack.NewConfirmationBlockObject),
		"NewContextBlock":                          reflect.ValueOf(slack.NewContextBlock),
		"NewConversationsSelect":                   reflect.ValueOf(slack.NewConversationsSelect),
		"NewDatePickerBlockElement":                reflect.ValueOf(slack.NewDatePickerBlockElement),
		"NewDateTimePickerBlockElement":            reflect.ValueOf(slack.NewDateTimePickerBlockElement),
		"NewDialogOptionGroup":                     reflect.ValueOf(slack.NewDialogOptionGroup),
		"NewDividerBlock":                          reflect.ValueOf(slack.NewDividerBlock),
		"NewEmailTextInputBlockElement":            reflect.ValueOf(slack.NewEmailTextInputBlockElement),
		"NewErrorsViewSubmissionResponse":          reflect.ValueOf(slack.NewErrorsViewSubmissionResponse),
		"NewExternalSelectDialogInput":             reflect.ValueOf(slack.NewExternalSelectDialogInput),
		"NewFileBlock":                             reflect.ValueOf(slack.NewFileBlock),
		"NewFileCommentItem":                       reflect.ValueOf(slack.NewFileCommentItem),
		"NewFileItem":                              reflect.ValueOf(slack.NewFileItem),
		"NewGetFilesParameters":                    reflect.ValueOf(slack.NewGetFilesParameters),
		"NewGetReactionsParameters":                reflect.ValueOf(slack.NewGetReactionsParameters),
		"NewGroupItem":                             reflect.ValueOf(slack.NewGroupItem),
		"NewGroupedSelectDialogInput":              reflect.ValueOf(slack.NewGroupedSelectDialogInput),
		"NewHeaderBlock":                           reflect.ValueOf(slack.NewHeaderBlock),
		"NewHistoryParameters":                     reflect.ValueOf(slack.NewHistoryParameters),
		"NewIMItem":                                reflect.ValueOf(slack.NewIMItem),
		"NewImageBlock":                            reflect.ValueOf(slack.NewImageBlock),
		"NewImageBlockElement":                     reflect.ValueOf(slack.NewImageBlockElement),
		"NewInputBlock":                            reflect.ValueOf(slack.NewInputBlock),
		"NewListReactionsParameters":               reflect.ValueOf(slack.NewListReactionsParameters),
		"NewMessageItem":                           reflect.ValueOf(slack.NewMessageItem),
		"NewNumberInputBlockElement":               reflect.ValueOf(slack.NewNumberInputBlockElement),
		"NewOptionBlockObject":                     reflect.ValueOf(slack.NewOptionBlockObject),
		"NewOptionGroupBlockElement":               reflect.ValueOf(slack.NewOptionGroupBlockElement),
		"NewOptionsGroupMultiSelectBlockElement":   reflect.ValueOf(slack.NewOptionsGroupMultiSelectBlockElement),
		"NewOptionsGroupSelectBlockElement":        reflect.ValueOf(slack.NewOptionsGroupSelectBlockElement),
		"NewOptionsMultiSelectBlockElement":        reflect.ValueOf(slack.NewOptionsMultiSelectBlockElement),
		"NewOptionsSelectBlockElement":             reflect.ValueOf(slack.NewOptionsSelectBlockElement),
		"NewOverflowBlockElement":                  reflect.ValueOf(slack.NewOverflowBlockElement),
		"NewPlainTextInputBlockElement":            reflect.ValueOf(slack.NewPlainTextInputBlockElement),
		"NewPostMessageParameters":                 reflect.ValueOf(slack.NewPostMessageParameters),
		"NewPushViewSubmissionResponse":            reflect.ValueOf(slack.NewPushViewSubmissionResponse),
		"NewRadioButtonsBlockElement":              reflect.ValueOf(slack.NewRadioButtonsBlockElement),
		"NewRefToComment":                          reflect.ValueOf(slack.NewRefToComment),
		"NewRefToFile":                             reflect.ValueOf(slack.NewRefToFile),
		"NewRefToMessage":                          reflect.ValueOf(slack.NewRefToMessage),
		"NewRichTextBlock":                         reflect.ValueOf(slack.NewRichTextBlock),
		"NewRichTextSection":                       reflect.ValueOf(slack.NewRichTextSection),
		"NewRichTextSectionBroadcastElement":       reflect.ValueOf(slack.NewRichTextSectionBroadcastElement),
		"NewRichTextSectionChannelElement":         reflect.ValueOf(slack.NewRichTextSectionChannelElement),
		"NewRichTextSectionColorElement":           reflect.ValueOf(slack.NewRichTextSectionColorElement),
		"NewRichTextSectionDateElement":            reflect.ValueOf(slack.NewRichTextSectionDateElement),
		"NewRichTextSectionEmojiElement":           reflect.ValueOf(slack.NewRichTextSectionEmojiElement),
		"NewRichTextSectionLinkElement":            reflect.ValueOf(slack.NewRichTextSectionLinkElement),
		"NewRichTextSectionTeamElement":            reflect.ValueOf(slack.NewRichTextSectionTeamElement),
		"NewRichTextSectionTextElement":            reflect.ValueOf(slack.NewRichTextSectionTextElement),
		"NewRichTextSectionUserElement":            reflect.ValueOf(slack.NewRichTextSectionUserElement),
		"NewRichTextSectionUserGroupElement":       reflect.ValueOf(slack.NewRichTextSectionUserGroupElement),
		"NewSafeID":                                reflect.ValueOf(slack.NewSafeID),
		"NewSearchParameters":                      reflect.ValueOf(slack.NewSearchParameters),
		"NewSecretsVerifier":                       reflect.ValueOf(slack.NewSecretsVerifier),
		"NewSectionBlock":                          reflect.ValueOf(slack.NewSectionBlock),
		"NewStarsParameters":                       reflect.ValueOf(slack.NewStarsParameters),
		"NewStaticSelectDialogInput":               reflect.ValueOf(slack.NewStaticSelectDialogInput),
		"NewTextAreaInput":                         reflect.ValueOf(slack.NewTextAreaInput),
		"NewTextBlockObject":                       reflect.ValueOf(slack.NewTextBlockObject),
		"NewTextInput":                             reflect.ValueOf(slack.NewTextInput),
		"NewTimePickerBlockElement":                reflect.ValueOf(slack.NewTimePickerBlockElement),
		"NewURLTextInputBlockElement":              reflect.ValueOf(slack.NewURLTextInputBlockElement),
		"NewUnmappedError":                         reflect.ValueOf(slack.NewUnmappedError),
		"NewUpdateViewSubmissionResponse":          reflect.ValueOf(slack.NewUpdateViewSubmissionResponse),
		"NewUserSetPhotoParams":                    reflect.ValueOf(slack.NewUserSetPhotoParams),
		"NewUsersSelect":                           reflect.ValueOf(slack.NewUsersSelect),
		"OptTypeChannels":                          reflect.ValueOf(slack.OptTypeChannels),
		"OptTypeConversations":                     reflect.ValueOf(slack.OptTypeConversations),
		"OptTypeExternal":                          reflect.ValueOf(slack.OptTypeExternal),
		"OptTypeStatic":                            reflect.ValueOf(slack.OptTypeStatic),
		"OptTypeUser":                              reflect.ValueOf(slack.OptTypeUser),
		"OptionAPIURL":                             reflect.ValueOf(slack.OptionAPIURL),
		"OptionAppLevelToken":                      reflect.ValueOf(slack.OptionAppLevelToken),
		"OptionConfigRefreshToken":                 reflect.ValueOf(slack.OptionConfigRefreshToken),
		"OptionConfigToken":                        reflect.ValueOf(slack.OptionConfigToken),
		"OptionDebug":                              reflect.ValueOf(slack.OptionDebug),
		"OptionHTTPClient":                         reflect.ValueOf(slack.OptionHTTPClient),
		"OptionLog":                                reflect.ValueOf(slack.OptionLog),
		"PlainTextType":                            reflect.ValueOf(constant.MakeFromLiteral("\"plain_text\"", token.STRING, 0)),
		"PostWebhook":                              reflect.ValueOf(slack.PostWebhook),
		"PostWebhookContext":                       reflect.ValueOf(slack.PostWebhookContext),
		"PostWebhookCustomHTTP":                    reflect.ValueOf(slack.PostWebhookCustomHTTP),
		"PostWebhookCustomHTTPContext":             reflect.ValueOf(slack.PostWebhookCustomHTTPContext),
		"RAClear":                                  reflect.ValueOf(slack.RAClear),
		"RAErrors":                                 reflect.ValueOf(slack.RAErrors),
		"RAPush":                                   reflect.ValueOf(slack.RAPush),
		"RAUpdate":                                 reflect.ValueOf(slack.RAUpdate),
		"RTEList":                                  reflect.ValueOf(slack.RTEList),
		"RTEPreformatted":                          reflect.ValueOf(slack.RTEPreformatted),
		"RTEQuote":                                 reflect.ValueOf(slack.RTEQuote),
		"RTESection":                               reflect.ValueOf(slack.RTESection),
		"RTEUnknown":                               reflect.ValueOf(slack.RTEUnknown),
		"RTMOptionConnParams":                      reflect.ValueOf(slack.RTMOptionConnParams),
		"RTMOptionDialer":                          reflect.ValueOf(slack.RTMOptionDialer),
		"RTMOptionPingInterval":                    reflect.ValueOf(slack.RTMOptionPingInterval),
		"RTMOptionUseStart":                        reflect.ValueOf(slack.RTMOptionUseStart),
		"RTMsgOptionBroadcast":                     reflect.ValueOf(slack.RTMsgOptionBroadcast),
		"RTMsgOptionTS":                            reflect.ValueOf(slack.RTMsgOptionTS),
		"RTSEBroadcast":                            reflect.ValueOf(slack.RTSEBroadcast),
		"RTSEChannel":                              reflect.ValueOf(slack.RTSEChannel),
		"RTSEColor":                                reflect.ValueOf(slack.RTSEColor),
		"RTSEDate":                                 reflect.ValueOf(slack.RTSEDate),
		"RTSEEmoji":                                reflect.ValueOf(slack.RTSEEmoji),
		"RTSELink":                                 reflect.ValueOf(slack.RTSELink),
		"RTSETeam":                                 reflect.ValueOf(slack.RTSETeam),
		"RTSEText":                                 reflect.ValueOf(slack.RTSEText),
		"RTSEUnknown":                              reflect.ValueOf(slack.RTSEUnknown),
		"RTSEUser":                                 reflect.ValueOf(slack.RTSEUser),
		"RTSEUserGroup":                            reflect.ValueOf(slack.RTSEUserGroup),
		"RefreshOAuthV2Token":                      reflect.ValueOf(slack.RefreshOAuthV2Token),
		"RefreshOAuthV2TokenContext":               reflect.ValueOf(slack.RefreshOAuthV2TokenContext),
		"ResponseTypeEphemeral":                    reflect.ValueOf(constant.MakeFromLiteral("\"ephemeral\"", token.STRING, 0)),
		"ResponseTypeInChannel":                    reflect.ValueOf(constant.MakeFromLiteral("\"in_channel\"", token.STRING, 0)),
		"SectionBlockOptionBlockID":                reflect.ValueOf(slack.SectionBlockOptionBlockID),
		"SlashCommandParse":                        reflect.ValueOf(slack.SlashCommandParse),
		"StyleDanger":                              reflect.ValueOf(slack.StyleDanger),
		"StyleDefault":                             reflect.ValueOf(slack.StyleDefault),
		"StylePrimary":                             reflect.ValueOf(slack.StylePrimary),
		"TYPE_CHANNEL":                             reflect.ValueOf(constant.MakeFromLiteral("\"channel\"", token.STRING, 0)),
		"TYPE_FILE":                                reflect.ValueOf(constant.MakeFromLiteral("\"file\"", token.STRING, 0)),
		"TYPE_FILE_COMMENT":                        reflect.ValueOf(constant.MakeFromLiteral("\"file_comment\"", token.STRING, 0)),
		"TYPE_GROUP":                               reflect.ValueOf(constant.MakeFromLiteral("\"group\"", token.STRING, 0)),
		"TYPE_IM":                                  reflect.ValueOf(constant.MakeFromLiteral("\"im\"", token.STRING, 0)),
		"TYPE_MESSAGE":                             reflect.ValueOf(constant.MakeFromLiteral("\"message\"", token.STRING, 0)),
		"UnsafeApplyMsgOptions":                    reflect.ValueOf(slack.UnsafeApplyMsgOptions),
		"UnsafeMsgOptionEndpoint":                  reflect.ValueOf(slack.UnsafeMsgOptionEndpoint),
		"UpdateUserGroupsOptionChannels":           reflect.ValueOf(slack.UpdateUserGroupsOptionChannels),
		"UpdateUserGroupsOptionDescription":        reflect.ValueOf(slack.UpdateUserGroupsOptionDescription),
		"UpdateUserGroupsOptionHandle":             reflect.ValueOf(slack.UpdateUserGroupsOptionHandle),
		"UpdateUserGroupsOptionName":               reflect.ValueOf(slack.UpdateUserGroupsOptionName),
		"VTHomeTab":                                reflect.ValueOf(slack.VTHomeTab),
		"VTModal":                                  reflect.ValueOf(slack.VTModal),
		"VTWorkflowStep":                           reflect.ValueOf(slack.VTWorkflowStep),
		"ValidateUniqueBlockID":                    reflect.ValueOf(slack.ValidateUniqueBlockID),
		"WEBAPIURLFormat":                          reflect.ValueOf(constant.MakeFromLiteral("\"https://%s.slack.com/api/users.admin.%s?t=%d\"", token.STRING, 0)),
		"WorkflowStepCompletedRequestOptionOutput": reflect.ValueOf(slack.WorkflowStepCompletedRequestOptionOutput),

		// type definitions
		"AccessLogParameters":                reflect.ValueOf((*slack.AccessLogParameters)(nil)),
		"Accessory":                          reflect.ValueOf((*slack.Accessory)(nil)),
		"AccountsChangedEvent":               reflect.ValueOf((*slack.AccountsChangedEvent)(nil)),
		"AckErrorEvent":                      reflect.ValueOf((*slack.AckErrorEvent)(nil)),
		"AckMessage":                         reflect.ValueOf((*slack.AckMessage)(nil)),
		"ActionBlock":                        reflect.ValueOf((*slack.ActionBlock)(nil)),
		"ActionCallbacks":                    reflect.ValueOf((*slack.ActionCallbacks)(nil)),
		"ActionType":                         reflect.ValueOf((*slack.ActionType)(nil)),
		"AddBookmarkParameters":              reflect.ValueOf((*slack.AddBookmarkParameters)(nil)),
		"AppHome":                            reflect.ValueOf((*slack.AppHome)(nil)),
		"Attachment":                         reflect.ValueOf((*slack.Attachment)(nil)),
		"AttachmentAction":                   reflect.ValueOf((*slack.AttachmentAction)(nil)),
		"AttachmentActionCallback":           reflect.ValueOf((*slack.AttachmentActionCallback)(nil)),
		"AttachmentActionOption":             reflect.ValueOf((*slack.AttachmentActionOption)(nil)),
		"AttachmentActionOptionGroup":        reflect.ValueOf((*slack.AttachmentActionOptionGroup)(nil)),
		"AttachmentField":                    reflect.ValueOf((*slack.AttachmentField)(nil)),
		"AuditApp":                           reflect.ValueOf((*slack.AuditApp)(nil)),
		"AuditChannel":                       reflect.ValueOf((*slack.AuditChannel)(nil)),
		"AuditEnterprise":                    reflect.ValueOf((*slack.AuditEnterprise)(nil)),
		"AuditEntry":                         reflect.ValueOf((*slack.AuditEntry)(nil)),
		"AuditFile":                          reflect.ValueOf((*slack.AuditFile)(nil)),
		"AuditLogParameters":                 reflect.ValueOf((*slack.AuditLogParameters)(nil)),
		"AuditLogResponse":                   reflect.ValueOf((*slack.AuditLogResponse)(nil)),
		"AuditUser":                          reflect.ValueOf((*slack.AuditUser)(nil)),
		"AuditWorkspace":                     reflect.ValueOf((*slack.AuditWorkspace)(nil)),
		"AuthRevokeResponse":                 reflect.ValueOf((*slack.AuthRevokeResponse)(nil)),
		"AuthTestResponse":                   reflect.ValueOf((*slack.AuthTestResponse)(nil)),
		"BillableInfoResponse":               reflect.ValueOf((*slack.BillableInfoResponse)(nil)),
		"BillingActive":                      reflect.ValueOf((*slack.BillingActive)(nil)),
		"Block":                              reflect.ValueOf((*slack.Block)(nil)),
		"BlockAction":                        reflect.ValueOf((*slack.BlockAction)(nil)),
		"BlockActionStates":                  reflect.ValueOf((*slack.BlockActionStates)(nil)),
		"BlockElement":                       reflect.ValueOf((*slack.BlockElement)(nil)),
		"BlockElements":                      reflect.ValueOf((*slack.BlockElements)(nil)),
		"BlockObjects":                       reflect.ValueOf((*slack.BlockObjects)(nil)),
		"Blocks":                             reflect.ValueOf((*slack.Blocks)(nil)),
		"Bookmark":                           reflect.ValueOf((*slack.Bookmark)(nil)),
		"Bot":                                reflect.ValueOf((*slack.Bot)(nil)),
		"BotAddedEvent":                      reflect.ValueOf((*slack.BotAddedEvent)(nil)),
		"BotChangedEvent":                    reflect.ValueOf((*slack.BotChangedEvent)(nil)),
		"BotProfile":                         reflect.ValueOf((*slack.BotProfile)(nil)),
		"BotUser":                            reflect.ValueOf((*slack.BotUser)(nil)),
		"ButtonBlockElement":                 reflect.ValueOf((*slack.ButtonBlockElement)(nil)),
		"Channel":                            reflect.ValueOf((*slack.Channel)(nil)),
		"ChannelArchiveEvent":                reflect.ValueOf((*slack.ChannelArchiveEvent)(nil)),
		"ChannelCreatedEvent":                reflect.ValueOf((*slack.ChannelCreatedEvent)(nil)),
		"ChannelCreatedInfo":                 reflect.ValueOf((*slack.ChannelCreatedInfo)(nil)),
		"ChannelDeletedEvent":                reflect.ValueOf((*slack.ChannelDeletedEvent)(nil)),
		"ChannelHistoryChangedEvent":         reflect.ValueOf((*slack.ChannelHistoryChangedEvent)(nil)),
		"ChannelInfoEvent":                   reflect.ValueOf((*slack.ChannelInfoEvent)(nil)),
		"ChannelJoinedEvent":                 reflect.ValueOf((*slack.ChannelJoinedEvent)(nil)),
		"ChannelLeftEvent":                   reflect.ValueOf((*slack.ChannelLeftEvent)(nil)),
		"ChannelMarkedEvent":                 reflect.ValueOf((*slack.ChannelMarkedEvent)(nil)),
		"ChannelRenameEvent":                 reflect.ValueOf((*slack.ChannelRenameEvent)(nil)),
		"ChannelRenameInfo":                  reflect.ValueOf((*slack.ChannelRenameInfo)(nil)),
		"ChannelUnarchiveEvent":              reflect.ValueOf((*slack.ChannelUnarchiveEvent)(nil)),
		"CheckboxGroupsBlockElement":         reflect.ValueOf((*slack.CheckboxGroupsBlockElement)(nil)),
		"Client":                             reflect.ValueOf((*slack.Client)(nil)),
		"CommandsChangedEvent":               reflect.ValueOf((*slack.CommandsChangedEvent)(nil)),
		"Comment":                            reflect.ValueOf((*slack.Comment)(nil)),
		"ConfigurationModalRequest":          reflect.ValueOf((*slack.ConfigurationModalRequest)(nil)),
		"ConfirmationBlockObject":            reflect.ValueOf((*slack.ConfirmationBlockObject)(nil)),
		"ConfirmationField":                  reflect.ValueOf((*slack.ConfirmationField)(nil)),
		"ConnectedEvent":                     reflect.ValueOf((*slack.ConnectedEvent)(nil)),
		"ConnectingEvent":                    reflect.ValueOf((*slack.ConnectingEvent)(nil)),
		"ConnectionErrorEvent":               reflect.ValueOf((*slack.ConnectionErrorEvent)(nil)),
		"Container":                          reflect.ValueOf((*slack.Container)(nil)),
		"ContextBlock":                       reflect.ValueOf((*slack.ContextBlock)(nil)),
		"ContextElements":                    reflect.ValueOf((*slack.ContextElements)(nil)),
		"Conversation":                       reflect.ValueOf((*slack.Conversation)(nil)),
		"CreateConversationParams":           reflect.ValueOf((*slack.CreateConversationParams)(nil)),
		"CtxChannel":                         reflect.ValueOf((*slack.CtxChannel)(nil)),
		"CtxMessage":                         reflect.ValueOf((*slack.CtxMessage)(nil)),
		"DNDStatus":                          reflect.ValueOf((*slack.DNDStatus)(nil)),
		"DNDUpdatedEvent":                    reflect.ValueOf((*slack.DNDUpdatedEvent)(nil)),
		"DatePickerBlockElement":             reflect.ValueOf((*slack.DatePickerBlockElement)(nil)),
		"DateTimePickerBlockElement":         reflect.ValueOf((*slack.DateTimePickerBlockElement)(nil)),
		"Debug":                              reflect.ValueOf((*slack.Debug)(nil)),
		"DeleteScheduledMessageParameters":   reflect.ValueOf((*slack.DeleteScheduledMessageParameters)(nil)),
		"DesktopNotificationEvent":           reflect.ValueOf((*slack.DesktopNotificationEvent)(nil)),
		"Dialog":                             reflect.ValueOf((*slack.Dialog)(nil)),
		"DialogCallback":                     reflect.ValueOf((*slack.DialogCallback)(nil)),
		"DialogElement":                      reflect.ValueOf((*slack.DialogElement)(nil)),
		"DialogInput":                        reflect.ValueOf((*slack.DialogInput)(nil)),
		"DialogInputSelect":                  reflect.ValueOf((*slack.DialogInputSelect)(nil)),
		"DialogInputValidationError":         reflect.ValueOf((*slack.DialogInputValidationError)(nil)),
		"DialogInputValidationErrors":        reflect.ValueOf((*slack.DialogInputValidationErrors)(nil)),
		"DialogOpenResponse":                 reflect.ValueOf((*slack.DialogOpenResponse)(nil)),
		"DialogOptionGroup":                  reflect.ValueOf((*slack.DialogOptionGroup)(nil)),
		"DialogResponseMetadata":             reflect.ValueOf((*slack.DialogResponseMetadata)(nil)),
		"DialogSelectOption":                 reflect.ValueOf((*slack.DialogSelectOption)(nil)),
		"DialogSubmissionCallback":           reflect.ValueOf((*slack.DialogSubmissionCallback)(nil)),
		"DialogTrigger":                      reflect.ValueOf((*slack.DialogTrigger)(nil)),
		"DisconnectedEvent":                  reflect.ValueOf((*slack.DisconnectedEvent)(nil)),
		"DispatchActionConfig":               reflect.ValueOf((*slack.DispatchActionConfig)(nil)),
		"Display":                            reflect.ValueOf((*slack.Display)(nil)),
		"DividerBlock":                       reflect.ValueOf((*slack.DividerBlock)(nil)),
		"EditBookmarkParameters":             reflect.ValueOf((*slack.EditBookmarkParameters)(nil)),
		"Edited":                             reflect.ValueOf((*slack.Edited)(nil)),
		"EmailDomainChangedEvent":            reflect.ValueOf((*slack.EmailDomainChangedEvent)(nil)),
		"EmailTextInputBlockElement":         reflect.ValueOf((*slack.EmailTextInputBlockElement)(nil)),
		"EmojiChangedEvent":                  reflect.ValueOf((*slack.EmojiChangedEvent)(nil)),
		"Enterprise":                         reflect.ValueOf((*slack.Enterprise)(nil)),
		"EnterpriseUser":                     reflect.ValueOf((*slack.EnterpriseUser)(nil)),
		"Event":                              reflect.ValueOf((*slack.Event)(nil)),
		"EventAuthorization":                 reflect.ValueOf((*slack.EventAuthorization)(nil)),
		"EventSubscriptions":                 reflect.ValueOf((*slack.EventSubscriptions)(nil)),
		"ExportManifestResponse":             reflect.ValueOf((*slack.ExportManifestResponse)(nil)),
		"Features":                           reflect.ValueOf((*slack.Features)(nil)),
		"File":                               reflect.ValueOf((*slack.File)(nil)),
		"FileBlock":                          reflect.ValueOf((*slack.FileBlock)(nil)),
		"FileChangeEvent":                    reflect.ValueOf((*slack.FileChangeEvent)(nil)),
		"FileCommentAddedEvent":              reflect.ValueOf((*slack.FileCommentAddedEvent)(nil)),
		"FileCommentDeletedEvent":            reflect.ValueOf((*slack.FileCommentDeletedEvent)(nil)),
		"FileCommentEditedEvent":             reflect.ValueOf((*slack.FileCommentEditedEvent)(nil)),
		"FileCreatedEvent":                   reflect.ValueOf((*slack.FileCreatedEvent)(nil)),
		"FileDeletedEvent":                   reflect.ValueOf((*slack.FileDeletedEvent)(nil)),
		"FilePrivateEvent":                   reflect.ValueOf((*slack.FilePrivateEvent)(nil)),
		"FilePublicEvent":                    reflect.ValueOf((*slack.FilePublicEvent)(nil)),
		"FileSharedEvent":                    reflect.ValueOf((*slack.FileSharedEvent)(nil)),
		"FileSummary":                        reflect.ValueOf((*slack.FileSummary)(nil)),
		"FileUnsharedEvent":                  reflect.ValueOf((*slack.FileUnsharedEvent)(nil)),
		"FileUploadParameters":               reflect.ValueOf((*slack.FileUploadParameters)(nil)),
		"GetConversationHistoryParameters":   reflect.ValueOf((*slack.GetConversationHistoryParameters)(nil)),
		"GetConversationHistoryResponse":     reflect.ValueOf((*slack.GetConversationHistoryResponse)(nil)),
		"GetConversationInfoInput":           reflect.ValueOf((*slack.GetConversationInfoInput)(nil)),
		"GetConversationRepliesParameters":   reflect.ValueOf((*slack.GetConversationRepliesParameters)(nil)),
		"GetConversationsForUserParameters":  reflect.ValueOf((*slack.GetConversationsForUserParameters)(nil)),
		"GetConversationsParameters":         reflect.ValueOf((*slack.GetConversationsParameters)(nil)),
		"GetFilesParameters":                 reflect.ValueOf((*slack.GetFilesParameters)(nil)),
		"GetReactionsParameters":             reflect.ValueOf((*slack.GetReactionsParameters)(nil)),
		"GetScheduledMessagesParameters":     reflect.ValueOf((*slack.GetScheduledMessagesParameters)(nil)),
		"GetUserGroupsOption":                reflect.ValueOf((*slack.GetUserGroupsOption)(nil)),
		"GetUserGroupsParams":                reflect.ValueOf((*slack.GetUserGroupsParams)(nil)),
		"GetUserProfileParameters":           reflect.ValueOf((*slack.GetUserProfileParameters)(nil)),
		"GetUsersInConversationParameters":   reflect.ValueOf((*slack.GetUsersInConversationParameters)(nil)),
		"GetUsersOption":                     reflect.ValueOf((*slack.GetUsersOption)(nil)),
		"Group":                              reflect.ValueOf((*slack.Group)(nil)),
		"GroupArchiveEvent":                  reflect.ValueOf((*slack.GroupArchiveEvent)(nil)),
		"GroupCloseEvent":                    reflect.ValueOf((*slack.GroupCloseEvent)(nil)),
		"GroupConversation":                  reflect.ValueOf((*slack.GroupConversation)(nil)),
		"GroupCreatedEvent":                  reflect.ValueOf((*slack.GroupCreatedEvent)(nil)),
		"GroupHistoryChangedEvent":           reflect.ValueOf((*slack.GroupHistoryChangedEvent)(nil)),
		"GroupJoinedEvent":                   reflect.ValueOf((*slack.GroupJoinedEvent)(nil)),
		"GroupLeftEvent":                     reflect.ValueOf((*slack.GroupLeftEvent)(nil)),
		"GroupMarkedEvent":                   reflect.ValueOf((*slack.GroupMarkedEvent)(nil)),
		"GroupOpenEvent":                     reflect.ValueOf((*slack.GroupOpenEvent)(nil)),
		"GroupRenameEvent":                   reflect.ValueOf((*slack.GroupRenameEvent)(nil)),
		"GroupRenameInfo":                    reflect.ValueOf((*slack.GroupRenameInfo)(nil)),
		"GroupUnarchiveEvent":                reflect.ValueOf((*slack.GroupUnarchiveEvent)(nil)),
		"HeaderBlock":                        reflect.ValueOf((*slack.HeaderBlock)(nil)),
		"HeaderBlockOption":                  reflect.ValueOf((*slack.HeaderBlockOption)(nil)),
		"HelloEvent":                         reflect.ValueOf((*slack.HelloEvent)(nil)),
		"History":                            reflect.ValueOf((*slack.History)(nil)),
		"HistoryParameters":                  reflect.ValueOf((*slack.HistoryParameters)(nil)),
		"HomeTabViewRequest":                 reflect.ValueOf((*slack.HomeTabViewRequest)(nil)),
		"IDGenerator":                        reflect.ValueOf((*slack.IDGenerator)(nil)),
		"IM":                                 reflect.ValueOf((*slack.IM)(nil)),
		"IMCloseEvent":                       reflect.ValueOf((*slack.IMCloseEvent)(nil)),
		"IMCreatedEvent":                     reflect.ValueOf((*slack.IMCreatedEvent)(nil)),
		"IMHistoryChangedEvent":              reflect.ValueOf((*slack.IMHistoryChangedEvent)(nil)),
		"IMMarkedEvent":                      reflect.ValueOf((*slack.IMMarkedEvent)(nil)),
		"IMMarkedHistoryChanged":             reflect.ValueOf((*slack.IMMarkedHistoryChanged)(nil)),
		"IMOpenEvent":                        reflect.ValueOf((*slack.IMOpenEvent)(nil)),
		"Icon":                               reflect.ValueOf((*slack.Icon)(nil)),
		"Icons":                              reflect.ValueOf((*slack.Icons)(nil)),
		"ImageBlock":                         reflect.ValueOf((*slack.ImageBlock)(nil)),
		"ImageBlockElement":                  reflect.ValueOf((*slack.ImageBlockElement)(nil)),
		"IncomingEventError":                 reflect.ValueOf((*slack.IncomingEventError)(nil)),
		"Info":                               reflect.ValueOf((*slack.Info)(nil)),
		"InputBlock":                         reflect.ValueOf((*slack.InputBlock)(nil)),
		"InputType":                          reflect.ValueOf((*slack.InputType)(nil)),
		"InteractionCallback":                reflect.ValueOf((*slack.InteractionCallback)(nil)),
		"InteractionType":                    reflect.ValueOf((*slack.InteractionType)(nil)),
		"InteractionWorkflowStep":            reflect.ValueOf((*slack.InteractionWorkflowStep)(nil)),
		"Interactivity":                      reflect.ValueOf((*slack.Interactivity)(nil)),
		"InvalidAuthEvent":                   reflect.ValueOf((*slack.InvalidAuthEvent)(nil)),
		"Item":                               reflect.ValueOf((*slack.Item)(nil)),
		"ItemReaction":                       reflect.ValueOf((*slack.ItemReaction)(nil)),
		"ItemRef":                            reflect.ValueOf((*slack.ItemRef)(nil)),
		"JSONTime":                           reflect.ValueOf((*slack.JSONTime)(nil)),
		"LatencyReport":                      reflect.ValueOf((*slack.LatencyReport)(nil)),
		"ListFilesParameters":                reflect.ValueOf((*slack.ListFilesParameters)(nil)),
		"ListReactionsParameters":            reflect.ValueOf((*slack.ListReactionsParameters)(nil)),
		"ListRemoteFilesParameters":          reflect.ValueOf((*slack.ListRemoteFilesParameters)(nil)),
		"ListStarsOption":                    reflect.ValueOf((*slack.ListStarsOption)(nil)),
		"ListTeamsParameters":                reflect.ValueOf((*slack.ListTeamsParameters)(nil)),
		"Login":                              reflect.ValueOf((*slack.Login)(nil)),
		"LoginResponse":                      reflect.ValueOf((*slack.LoginResponse)(nil)),
		"Manifest":                           reflect.ValueOf((*slack.Manifest)(nil)),
		"ManifestMetadata":                   reflect.ValueOf((*slack.ManifestMetadata)(nil)),
		"ManifestResponse":                   reflect.ValueOf((*slack.ManifestResponse)(nil)),
		"ManifestSlashCommand":               reflect.ValueOf((*slack.ManifestSlashCommand)(nil)),
		"ManifestValidationError":            reflect.ValueOf((*slack.ManifestValidationError)(nil)),
		"ManualPresenceChangeEvent":          reflect.ValueOf((*slack.ManualPresenceChangeEvent)(nil)),
		"MemberJoinedChannelEvent":           reflect.ValueOf((*slack.MemberJoinedChannelEvent)(nil)),
		"MemberLeftChannelEvent":             reflect.ValueOf((*slack.MemberLeftChannelEvent)(nil)),
		"Message":                            reflect.ValueOf((*slack.Message)(nil)),
		"MessageBlockType":                   reflect.ValueOf((*slack.MessageBlockType)(nil)),
		"MessageElementType":                 reflect.ValueOf((*slack.MessageElementType)(nil)),
		"MessageEvent":                       reflect.ValueOf((*slack.MessageEvent)(nil)),
		"MessageObjectType":                  reflect.ValueOf((*slack.MessageObjectType)(nil)),
		"MessageTooLongEvent":                reflect.ValueOf((*slack.MessageTooLongEvent)(nil)),
		"MixedElement":                       reflect.ValueOf((*slack.MixedElement)(nil)),
		"MixedElementType":                   reflect.ValueOf((*slack.MixedElementType)(nil)),
		"MobileInAppNotificationEvent":       reflect.ValueOf((*slack.MobileInAppNotificationEvent)(nil)),
		"ModalViewRequest":                   reflect.ValueOf((*slack.ModalViewRequest)(nil)),
		"Msg":                                reflect.ValueOf((*slack.Msg)(nil)),
		"MsgOption":                          reflect.ValueOf((*slack.MsgOption)(nil)),
		"MultiSelectBlockElement":            reflect.ValueOf((*slack.MultiSelectBlockElement)(nil)),
		"NumberInputBlockElement":            reflect.ValueOf((*slack.NumberInputBlockElement)(nil)),
		"OAuthConfig":                        reflect.ValueOf((*slack.OAuthConfig)(nil)),
		"OAuthResponse":                      reflect.ValueOf((*slack.OAuthResponse)(nil)),
		"OAuthResponseBot":                   reflect.ValueOf((*slack.OAuthResponseBot)(nil)),
		"OAuthResponseIncomingWebhook":       reflect.ValueOf((*slack.OAuthResponseIncomingWebhook)(nil)),
		"OAuthScopes":                        reflect.ValueOf((*slack.OAuthScopes)(nil)),
		"OAuthV2Response":                    reflect.ValueOf((*slack.OAuthV2Response)(nil)),
		"OAuthV2ResponseAuthedUser":          reflect.ValueOf((*slack.OAuthV2ResponseAuthedUser)(nil)),
		"OAuthV2ResponseEnterprise":          reflect.ValueOf((*slack.OAuthV2ResponseEnterprise)(nil)),
		"OAuthV2ResponseTeam":                reflect.ValueOf((*slack.OAuthV2ResponseTeam)(nil)),
		"OpenConversationParameters":         reflect.ValueOf((*slack.OpenConversationParameters)(nil)),
		"Option":                             reflect.ValueOf((*slack.Option)(nil)),
		"OptionBlockObject":                  reflect.ValueOf((*slack.OptionBlockObject)(nil)),
		"OptionGroupBlockObject":             reflect.ValueOf((*slack.OptionGroupBlockObject)(nil)),
		"OptionGroupsResponse":               reflect.ValueOf((*slack.OptionGroupsResponse)(nil)),
		"OptionsResponse":                    reflect.ValueOf((*slack.OptionsResponse)(nil)),
		"OutgoingErrorEvent":                 reflect.ValueOf((*slack.OutgoingErrorEvent)(nil)),
		"OutgoingMessage":                    reflect.ValueOf((*slack.OutgoingMessage)(nil)),
		"OverflowBlockElement":               reflect.ValueOf((*slack.OverflowBlockElement)(nil)),
		"Pagination":                         reflect.ValueOf((*slack.Pagination)(nil)),
		"Paging":                             reflect.ValueOf((*slack.Paging)(nil)),
		"ParamOption":                        reflect.ValueOf((*slack.ParamOption)(nil)),
		"PermalinkParameters":                reflect.ValueOf((*slack.PermalinkParameters)(nil)),
		"PinAddedEvent":                      reflect.ValueOf((*slack.PinAddedEvent)(nil)),
		"PinRemovedEvent":                    reflect.ValueOf((*slack.PinRemovedEvent)(nil)),
		"Ping":                               reflect.ValueOf((*slack.Ping)(nil)),
		"PlainTextInputBlockElement":         reflect.ValueOf((*slack.PlainTextInputBlockElement)(nil)),
		"Pong":                               reflect.ValueOf((*slack.Pong)(nil)),
		"PostMessageParameters":              reflect.ValueOf((*slack.PostMessageParameters)(nil)),
		"PrefChangeEvent":                    reflect.ValueOf((*slack.PrefChangeEvent)(nil)),
		"PresenceChangeEvent":                reflect.ValueOf((*slack.PresenceChangeEvent)(nil)),
		"Purpose":                            reflect.ValueOf((*slack.Purpose)(nil)),
		"RTM":                                reflect.ValueOf((*slack.RTM)(nil)),
		"RTMError":                           reflect.ValueOf((*slack.RTMError)(nil)),
		"RTMEvent":                           reflect.ValueOf((*slack.RTMEvent)(nil)),
		"RTMOption":                          reflect.ValueOf((*slack.RTMOption)(nil)),
		"RTMResponse":                        reflect.ValueOf((*slack.RTMResponse)(nil)),
		"RTMsgOption":                        reflect.ValueOf((*slack.RTMsgOption)(nil)),
		"RadioButtonsBlockElement":           reflect.ValueOf((*slack.RadioButtonsBlockElement)(nil)),
		"RateLimitEvent":                     reflect.ValueOf((*slack.RateLimitEvent)(nil)),
		"RateLimitedError":                   reflect.ValueOf((*slack.RateLimitedError)(nil)),
		"ReactedItem":                        reflect.ValueOf((*slack.ReactedItem)(nil)),
		"ReactionAddedEvent":                 reflect.ValueOf((*slack.ReactionAddedEvent)(nil)),
		"ReactionEvent":                      reflect.ValueOf((*slack.ReactionEvent)(nil)),
		"ReactionItem":                       reflect.ValueOf((*slack.ReactionItem)(nil)),
		"ReactionRemovedEvent":               reflect.ValueOf((*slack.ReactionRemovedEvent)(nil)),
		"ReconnectUrlEvent":                  reflect.ValueOf((*slack.ReconnectUrlEvent)(nil)),
		"Reminder":                           reflect.ValueOf((*slack.Reminder)(nil)),
		"RemoteFile":                         reflect.ValueOf((*slack.RemoteFile)(nil)),
		"RemoteFileParameters":               reflect.ValueOf((*slack.RemoteFileParameters)(nil)),
		"Reply":                              reflect.ValueOf((*slack.Reply)(nil)),
		"ResponseMetadata":                   reflect.ValueOf((*slack.ResponseMetadata)(nil)),
		"RichTextBlock":                      reflect.ValueOf((*slack.RichTextBlock)(nil)),
		"RichTextElement":                    reflect.ValueOf((*slack.RichTextElement)(nil)),
		"RichTextElementType":                reflect.ValueOf((*slack.RichTextElementType)(nil)),
		"RichTextSection":                    reflect.ValueOf((*slack.RichTextSection)(nil)),
		"RichTextSectionBroadcastElement":    reflect.ValueOf((*slack.RichTextSectionBroadcastElement)(nil)),
		"RichTextSectionChannelElement":      reflect.ValueOf((*slack.RichTextSectionChannelElement)(nil)),
		"RichTextSectionColorElement":        reflect.ValueOf((*slack.RichTextSectionColorElement)(nil)),
		"RichTextSectionDateElement":         reflect.ValueOf((*slack.RichTextSectionDateElement)(nil)),
		"RichTextSectionElement":             reflect.ValueOf((*slack.RichTextSectionElement)(nil)),
		"RichTextSectionElementType":         reflect.ValueOf((*slack.RichTextSectionElementType)(nil)),
		"RichTextSectionEmojiElement":        reflect.ValueOf((*slack.RichTextSectionEmojiElement)(nil)),
		"RichTextSectionLinkElement":         reflect.ValueOf((*slack.RichTextSectionLinkElement)(nil)),
		"RichTextSectionTeamElement":         reflect.ValueOf((*slack.RichTextSectionTeamElement)(nil)),
		"RichTextSectionTextElement":         reflect.ValueOf((*slack.RichTextSectionTextElement)(nil)),
		"RichTextSectionTextStyle":           reflect.ValueOf((*slack.RichTextSectionTextStyle)(nil)),
		"RichTextSectionUnknownElement":      reflect.ValueOf((*slack.RichTextSectionUnknownElement)(nil)),
		"RichTextSectionUserElement":         reflect.ValueOf((*slack.RichTextSectionUserElement)(nil)),
		"RichTextSectionUserGroupElement":    reflect.ValueOf((*slack.RichTextSectionUserGroupElement)(nil)),
		"RichTextUnknown":                    reflect.ValueOf((*slack.RichTextUnknown)(nil)),
		"ScheduledMessage":                   reflect.ValueOf((*slack.ScheduledMessage)(nil)),
		"SearchFiles":                        reflect.ValueOf((*slack.SearchFiles)(nil)),
		"SearchMessage":                      reflect.ValueOf((*slack.SearchMessage)(nil)),
		"SearchMessages":                     reflect.ValueOf((*slack.SearchMessages)(nil)),
		"SearchParameters":                   reflect.ValueOf((*slack.SearchParameters)(nil)),
		"SecretsVerifier":                    reflect.ValueOf((*slack.SecretsVerifier)(nil)),
		"SectionBlock":                       reflect.ValueOf((*slack.SectionBlock)(nil)),
		"SectionBlockOption":                 reflect.ValueOf((*slack.SectionBlockOption)(nil)),
		"SelectBlockElement":                 reflect.ValueOf((*slack.SelectBlockElement)(nil)),
		"SelectBlockElementFilter":           reflect.ValueOf((*slack.SelectBlockElementFilter)(nil)),
		"SelectDataSource":                   reflect.ValueOf((*slack.SelectDataSource)(nil)),
		"Settings":                           reflect.ValueOf((*slack.Settings)(nil)),
		"Share":                              reflect.ValueOf((*slack.Share)(nil)),
		"ShareFileInfo":                      reflect.ValueOf((*slack.ShareFileInfo)(nil)),
		"Shortcut":                           reflect.ValueOf((*slack.Shortcut)(nil)),
		"ShortcutType":                       reflect.ValueOf((*slack.ShortcutType)(nil)),
		"SlackErrorResponse":                 reflect.ValueOf((*slack.SlackErrorResponse)(nil)),
		"SlackMetadata":                      reflect.ValueOf((*slack.SlackMetadata)(nil)),
		"SlackResponse":                      reflect.ValueOf((*slack.SlackResponse)(nil)),
		"SlashCommand":                       reflect.ValueOf((*slack.SlashCommand)(nil)),
		"SnoozeDebug":                        reflect.ValueOf((*slack.SnoozeDebug)(nil)),
		"SnoozeInfo":                         reflect.ValueOf((*slack.SnoozeInfo)(nil)),
		"SocketModeConnection":               reflect.ValueOf((*slack.SocketModeConnection)(nil)),
		"StarAddedEvent":                     reflect.ValueOf((*slack.StarAddedEvent)(nil)),
		"StarRemovedEvent":                   reflect.ValueOf((*slack.StarRemovedEvent)(nil)),
		"StarredItem":                        reflect.ValueOf((*slack.StarredItem)(nil)),
		"StarredItemPagination":              reflect.ValueOf((*slack.StarredItemPagination)(nil)),
		"StarsParameters":                    reflect.ValueOf((*slack.StarsParameters)(nil)),
		"StatusCodeError":                    reflect.ValueOf((*slack.StatusCodeError)(nil)),
		"Style":                              reflect.ValueOf((*slack.Style)(nil)),
		"SubteamCreatedEvent":                reflect.ValueOf((*slack.SubteamCreatedEvent)(nil)),
		"SubteamMembersChangedEvent":         reflect.ValueOf((*slack.SubteamMembersChangedEvent)(nil)),
		"SubteamSelfAddedEvent":              reflect.ValueOf((*slack.SubteamSelfAddedEvent)(nil)),
		"SubteamSelfRemovedEvent":            reflect.ValueOf((*slack.SubteamSelfRemovedEvent)(nil)),
		"SubteamUpdatedEvent":                reflect.ValueOf((*slack.SubteamUpdatedEvent)(nil)),
		"Team":                               reflect.ValueOf((*slack.Team)(nil)),
		"TeamDomainChangeEvent":              reflect.ValueOf((*slack.TeamDomainChangeEvent)(nil)),
		"TeamIdentity":                       reflect.ValueOf((*slack.TeamIdentity)(nil)),
		"TeamInfo":                           reflect.ValueOf((*slack.TeamInfo)(nil)),
		"TeamJoinEvent":                      reflect.ValueOf((*slack.TeamJoinEvent)(nil)),
		"TeamMigrationStartedEvent":          reflect.ValueOf((*slack.TeamMigrationStartedEvent)(nil)),
		"TeamPrefChangeEvent":                reflect.ValueOf((*slack.TeamPrefChangeEvent)(nil)),
		"TeamProfile":                        reflect.ValueOf((*slack.TeamProfile)(nil)),
		"TeamProfileField":                   reflect.ValueOf((*slack.TeamProfileField)(nil)),
		"TeamProfileResponse":                reflect.ValueOf((*slack.TeamProfileResponse)(nil)),
		"TeamRenameEvent":                    reflect.ValueOf((*slack.TeamRenameEvent)(nil)),
		"TeamResponse":                       reflect.ValueOf((*slack.TeamResponse)(nil)),
		"TextBlockObject":                    reflect.ValueOf((*slack.TextBlockObject)(nil)),
		"TextInputElement":                   reflect.ValueOf((*slack.TextInputElement)(nil)),
		"TextInputOption":                    reflect.ValueOf((*slack.TextInputOption)(nil)),
		"TextInputSubtype":                   reflect.ValueOf((*slack.TextInputSubtype)(nil)),
		"TimePickerBlockElement":             reflect.ValueOf((*slack.TimePickerBlockElement)(nil)),
		"TokenResponse":                      reflect.ValueOf((*slack.TokenResponse)(nil)),
		"Topic":                              reflect.ValueOf((*slack.Topic)(nil)),
		"URLTextInputBlockElement":           reflect.ValueOf((*slack.URLTextInputBlockElement)(nil)),
		"UnknownBlock":                       reflect.ValueOf((*slack.UnknownBlock)(nil)),
		"UnknownBlockElement":                reflect.ValueOf((*slack.UnknownBlockElement)(nil)),
		"UnmappedError":                      reflect.ValueOf((*slack.UnmappedError)(nil)),
		"UnmarshallingErrorEvent":            reflect.ValueOf((*slack.UnmarshallingErrorEvent)(nil)),
		"UpdateManifestResponse":             reflect.ValueOf((*slack.UpdateManifestResponse)(nil)),
		"UpdateUserGroupsOption":             reflect.ValueOf((*slack.UpdateUserGroupsOption)(nil)),
		"UpdateUserGroupsParams":             reflect.ValueOf((*slack.UpdateUserGroupsParams)(nil)),
		"UploadFileV2Parameters":             reflect.ValueOf((*slack.UploadFileV2Parameters)(nil)),
		"User":                               reflect.ValueOf((*slack.User)(nil)),
		"UserChangeEvent":                    reflect.ValueOf((*slack.UserChangeEvent)(nil)),
		"UserDetails":                        reflect.ValueOf((*slack.UserDetails)(nil)),
		"UserGroup":                          reflect.ValueOf((*slack.UserGroup)(nil)),
		"UserGroupPrefs":                     reflect.ValueOf((*slack.UserGroupPrefs)(nil)),
		"UserIdentity":                       reflect.ValueOf((*slack.UserIdentity)(nil)),
		"UserIdentityResponse":               reflect.ValueOf((*slack.UserIdentityResponse)(nil)),
		"UserPagination":                     reflect.ValueOf((*slack.UserPagination)(nil)),
		"UserPrefs":                          reflect.ValueOf((*slack.UserPrefs)(nil)),
		"UserPrefsCarrier":                   reflect.ValueOf((*slack.UserPrefsCarrier)(nil)),
		"UserPresence":                       reflect.ValueOf((*slack.UserPresence)(nil)),
		"UserProfile":                        reflect.ValueOf((*slack.UserProfile)(nil)),
		"UserProfileCustomField":             reflect.ValueOf((*slack.UserProfileCustomField)(nil)),
		"UserProfileCustomFields":            reflect.ValueOf((*slack.UserProfileCustomFields)(nil)),
		"UserProfileStatusEmojiDisplayInfo":  reflect.ValueOf((*slack.UserProfileStatusEmojiDisplayInfo)(nil)),
		"UserSetPhotoParams":                 reflect.ValueOf((*slack.UserSetPhotoParams)(nil)),
		"UserTypingEvent":                    reflect.ValueOf((*slack.UserTypingEvent)(nil)),
		"View":                               reflect.ValueOf((*slack.View)(nil)),
		"ViewClosedCallback":                 reflect.ValueOf((*slack.ViewClosedCallback)(nil)),
		"ViewResponse":                       reflect.ValueOf((*slack.ViewResponse)(nil)),
		"ViewResponseAction":                 reflect.ValueOf((*slack.ViewResponseAction)(nil)),
		"ViewState":                          reflect.ValueOf((*slack.ViewState)(nil)),
		"ViewSubmissionCallback":             reflect.ValueOf((*slack.ViewSubmissionCallback)(nil)),
		"ViewSubmissionCallbackResponseURL":  reflect.ValueOf((*slack.ViewSubmissionCallbackResponseURL)(nil)),
		"ViewSubmissionResponse":             reflect.ValueOf((*slack.ViewSubmissionResponse)(nil)),
		"ViewType":                           reflect.ValueOf((*slack.ViewType)(nil)),
		"WebhookMessage":                     reflect.ValueOf((*slack.WebhookMessage)(nil)),
		"WorkflowStep":                       reflect.ValueOf((*slack.WorkflowStep)(nil)),
		"WorkflowStepCompleteResponse":       reflect.ValueOf((*slack.WorkflowStepCompleteResponse)(nil)),
		"WorkflowStepCompletedRequest":       reflect.ValueOf((*slack.WorkflowStepCompletedRequest)(nil)),
		"WorkflowStepCompletedRequestOption": reflect.ValueOf((*slack.WorkflowStepCompletedRequestOption)(nil)),
		"WorkflowStepFailedRequest":          reflect.ValueOf((*slack.WorkflowStepFailedRequest)(nil)),
		"WorkflowStepInputElement":           reflect.ValueOf((*slack.WorkflowStepInputElement)(nil)),
		"WorkflowStepInputs":                 reflect.ValueOf((*slack.WorkflowStepInputs)(nil)),
		"WorkflowStepOutput":                 reflect.ValueOf((*slack.WorkflowStepOutput)(nil)),

		// interface wrapper definitions
		"_Block":                  reflect.ValueOf((*_github_com_slack_go_slack_Block)(nil)),
		"_BlockElement":           reflect.ValueOf((*_github_com_slack_go_slack_BlockElement)(nil)),
		"_Debug":                  reflect.ValueOf((*_github_com_slack_go_slack_Debug)(nil)),
		"_DialogElement":          reflect.ValueOf((*_github_com_slack_go_slack_DialogElement)(nil)),
		"_IDGenerator":            reflect.ValueOf((*_github_com_slack_go_slack_IDGenerator)(nil)),
		"_MixedElement":           reflect.ValueOf((*_github_com_slack_go_slack_MixedElement)(nil)),
		"_RichTextElement":        reflect.ValueOf((*_github_com_slack_go_slack_RichTextElement)(nil)),
		"_RichTextSectionElement": reflect.ValueOf((*_github_com_slack_go_slack_RichTextSectionElement)(nil)),
	}
}

// _github_com_slack_go_slack_Block is an interface wrapper for Block type
type _github_com_slack_go_slack_Block struct {
	IValue     interface{}
	WBlockType func() slack.MessageBlockType
}

func (W _github_com_slack_go_slack_Block) BlockType() slack.MessageBlockType { return W.WBlockType() }

// _github_com_slack_go_slack_BlockElement is an interface wrapper for BlockElement type
type _github_com_slack_go_slack_BlockElement struct {
	IValue       interface{}
	WElementType func() slack.MessageElementType
}

func (W _github_com_slack_go_slack_BlockElement) ElementType() slack.MessageElementType {
	return W.WElementType()
}

// _github_com_slack_go_slack_Debug is an interface wrapper for Debug type
type _github_com_slack_go_slack_Debug struct {
	IValue   interface{}
	WDebug   func() bool
	WDebugf  func(format string, v ...interface{})
	WDebugln func(v ...interface{})
}

func (W _github_com_slack_go_slack_Debug) Debug() bool { return W.WDebug() }
func (W _github_com_slack_go_slack_Debug) Debugf(format string, v ...interface{}) {
	W.WDebugf(format, v...)
}
func (W _github_com_slack_go_slack_Debug) Debugln(v ...interface{}) { W.WDebugln(v...) }

// _github_com_slack_go_slack_DialogElement is an interface wrapper for DialogElement type
type _github_com_slack_go_slack_DialogElement struct {
	IValue interface{}
}

// _github_com_slack_go_slack_IDGenerator is an interface wrapper for IDGenerator type
type _github_com_slack_go_slack_IDGenerator struct {
	IValue interface{}
	WNext  func() int
}

func (W _github_com_slack_go_slack_IDGenerator) Next() int { return W.WNext() }

// _github_com_slack_go_slack_MixedElement is an interface wrapper for MixedElement type
type _github_com_slack_go_slack_MixedElement struct {
	IValue            interface{}
	WMixedElementType func() slack.MixedElementType
}

func (W _github_com_slack_go_slack_MixedElement) MixedElementType() slack.MixedElementType {
	return W.WMixedElementType()
}

// _github_com_slack_go_slack_RichTextElement is an interface wrapper for RichTextElement type
type _github_com_slack_go_slack_RichTextElement struct {
	IValue               interface{}
	WRichTextElementType func() slack.RichTextElementType
}

func (W _github_com_slack_go_slack_RichTextElement) RichTextElementType() slack.RichTextElementType {
	return W.WRichTextElementType()
}

// _github_com_slack_go_slack_RichTextSectionElement is an interface wrapper for RichTextSectionElement type
type _github_com_slack_go_slack_RichTextSectionElement struct {
	IValue                      interface{}
	WRichTextSectionElementType func() slack.RichTextSectionElementType
}

func (W _github_com_slack_go_slack_RichTextSectionElement) RichTextSectionElementType() slack.RichTextSectionElementType {
	return W.WRichTextSectionElementType()
}
