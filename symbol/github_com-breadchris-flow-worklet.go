// Code generated by 'yaegi extract github.com/breadchris/flow/worklet'. DO NOT EDIT.

package symbol

import (
	"github.com/breadchris/flow/worklet"
	"reflect"
)

func init() {
	Symbols["github.com/breadchris/flow/worklet/worklet"] = map[string]reflect.Value{
		// function, constant and variable definitions
		"New":               reflect.ValueOf(worklet.New),
		"NewClaudeClient":   reflect.ValueOf(worklet.NewClaudeClient),
		"NewDockerClient":   reflect.ValueOf(worklet.NewDockerClient),
		"NewGitClient":      reflect.ValueOf(worklet.NewGitClient),
		"NewManager":        reflect.ValueOf(worklet.NewManager),
		"NewWebServer":      reflect.ValueOf(worklet.NewWebServer),
		"NewWorklet":        reflect.ValueOf(worklet.NewWorklet),
		"NewWorkletHandler": reflect.ValueOf(worklet.NewWorkletHandler),
		"StatusBuilding":    reflect.ValueOf(worklet.StatusBuilding),
		"StatusCreating":    reflect.ValueOf(worklet.StatusCreating),
		"StatusDeploying":   reflect.ValueOf(worklet.StatusDeploying),
		"StatusError":       reflect.ValueOf(worklet.StatusError),
		"StatusRunning":     reflect.ValueOf(worklet.StatusRunning),
		"StatusStopped":     reflect.ValueOf(worklet.StatusStopped),

		// type definitions
		"ClaudeClient":         reflect.ValueOf((*worklet.ClaudeClient)(nil)),
		"CreateWorkletRequest": reflect.ValueOf((*worklet.CreateWorkletRequest)(nil)),
		"DockerClient":         reflect.ValueOf((*worklet.DockerClient)(nil)),
		"GitClient":            reflect.ValueOf((*worklet.GitClient)(nil)),
		"Manager":              reflect.ValueOf((*worklet.Manager)(nil)),
		"PromptRequest":        reflect.ValueOf((*worklet.PromptRequest)(nil)),
		"Status":               reflect.ValueOf((*worklet.Status)(nil)),
		"WebServer":            reflect.ValueOf((*worklet.WebServer)(nil)),
		"Worklet":              reflect.ValueOf((*worklet.Worklet)(nil)),
		"WorkletHandler":       reflect.ValueOf((*worklet.WorkletHandler)(nil)),
		"WorkletPrompt":        reflect.ValueOf((*worklet.WorkletPrompt)(nil)),
		"WorkletResponse":      reflect.ValueOf((*worklet.WorkletResponse)(nil)),
	}
}
