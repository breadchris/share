// Code generated by 'yaegi extract github.com/dsoprea/go-exif/v3'. DO NOT EDIT.

package symbol

import (
	"github.com/dsoprea/go-exif/v3"
	"go/constant"
	"go/token"
	"io"
	"reflect"
)

func init() {
	Symbols["github.com/dsoprea/go-exif/v3/exif"] = map[string]reflect.Value{
		// function, constant and variable definitions
		"BuildExifHeader":                              reflect.ValueOf(exif.BuildExifHeader),
		"Collect":                                      reflect.ValueOf(exif.Collect),
		"ErrChildIbNotFound":                           reflect.ValueOf(&exif.ErrChildIbNotFound).Elem(),
		"ErrExifHeaderError":                           reflect.ValueOf(&exif.ErrExifHeaderError).Elem(),
		"ErrGpsCoordinatesNotValid":                    reflect.ValueOf(&exif.ErrGpsCoordinatesNotValid).Elem(),
		"ErrNoExif":                                    reflect.ValueOf(&exif.ErrNoExif).Elem(),
		"ErrNoGpsTags":                                 reflect.ValueOf(&exif.ErrNoGpsTags).Elem(),
		"ErrNoThumbnail":                               reflect.ValueOf(&exif.ErrNoThumbnail).Elem(),
		"ErrOffsetInvalid":                             reflect.ValueOf(&exif.ErrOffsetInvalid).Elem(),
		"ErrTagEntryNotFound":                          reflect.ValueOf(&exif.ErrTagEntryNotFound).Elem(),
		"ErrTagNotFound":                               reflect.ValueOf(&exif.ErrTagNotFound).Elem(),
		"ErrTagNotKnown":                               reflect.ValueOf(&exif.ErrTagNotKnown).Elem(),
		"ErrTagTypeNotValid":                           reflect.ValueOf(&exif.ErrTagTypeNotValid).Elem(),
		"ExifAddressableAreaStart":                     reflect.ValueOf(exif.ExifAddressableAreaStart),
		"ExifBigEndianSignature":                       reflect.ValueOf(&exif.ExifBigEndianSignature).Elem(),
		"ExifDefaultFirstIfdOffset":                    reflect.ValueOf(exif.ExifDefaultFirstIfdOffset),
		"ExifLittleEndianSignature":                    reflect.ValueOf(&exif.ExifLittleEndianSignature).Elem(),
		"ExifSignatureLength":                          reflect.ValueOf(constant.MakeFromLiteral("8", token.INT, 0)),
		"FindIfdFromRootIfd":                           reflect.ValueOf(exif.FindIfdFromRootIfd),
		"GetFlatExifData":                              reflect.ValueOf(exif.GetFlatExifData),
		"GetFlatExifDataUniversalSearch":               reflect.ValueOf(exif.GetFlatExifDataUniversalSearch),
		"GetFlatExifDataUniversalSearchWithReadSeeker": reflect.ValueOf(exif.GetFlatExifDataUniversalSearchWithReadSeeker),
		"GetOrCreateIbFromRootIb":                      reflect.ValueOf(exif.GetOrCreateIbFromRootIb),
		"GpsDegreesEquals":                             reflect.ValueOf(exif.GpsDegreesEquals),
		"IfdTagEntrySize":                              reflect.ValueOf(exif.IfdTagEntrySize),
		"LoadStandardTags":                             reflect.ValueOf(exif.LoadStandardTags),
		"NewBuilderTag":                                reflect.ValueOf(exif.NewBuilderTag),
		"NewByteWriter":                                reflect.ValueOf(exif.NewByteWriter),
		"NewChildIfdBuilderTag":                        reflect.ValueOf(exif.NewChildIfdBuilderTag),
		"NewExifReadSeeker":                            reflect.ValueOf(exif.NewExifReadSeeker),
		"NewExifReadSeekerWithBytes":                   reflect.ValueOf(exif.NewExifReadSeekerWithBytes),
		"NewGpsDegreesFromRationals":                   reflect.ValueOf(exif.NewGpsDegreesFromRationals),
		"NewIfdBuilder":                                reflect.ValueOf(exif.NewIfdBuilder),
		"NewIfdBuilderFromExistingChain":               reflect.ValueOf(exif.NewIfdBuilderFromExistingChain),
		"NewIfdBuilderTagValueFromBytes":               reflect.ValueOf(exif.NewIfdBuilderTagValueFromBytes),
		"NewIfdBuilderTagValueFromIfdBuilder":          reflect.ValueOf(exif.NewIfdBuilderTagValueFromIfdBuilder),
		"NewIfdBuilderWithExistingIfd":                 reflect.ValueOf(exif.NewIfdBuilderWithExistingIfd),
		"NewIfdByteEncoder":                            reflect.ValueOf(exif.NewIfdByteEncoder),
		"NewIfdEnumerate":                              reflect.ValueOf(exif.NewIfdEnumerate),
		"NewStandardBuilderTag":                        reflect.ValueOf(exif.NewStandardBuilderTag),
		"NewTagIndex":                                  reflect.ValueOf(exif.NewTagIndex),
		"ParseExifHeader":                              reflect.ValueOf(exif.ParseExifHeader),
		"SearchAndExtractExif":                         reflect.ValueOf(exif.SearchAndExtractExif),
		"SearchAndExtractExifN":                        reflect.ValueOf(exif.SearchAndExtractExifN),
		"SearchAndExtractExifWithReader":               reflect.ValueOf(exif.SearchAndExtractExifWithReader),
		"SearchFileAndExtractExif":                     reflect.ValueOf(exif.SearchFileAndExtractExif),
		"TagAltitudeId":                                reflect.ValueOf(constant.MakeFromLiteral("6", token.INT, 0)),
		"TagAltitudeRefId":                             reflect.ValueOf(constant.MakeFromLiteral("5", token.INT, 0)),
		"TagDatestampId":                               reflect.ValueOf(constant.MakeFromLiteral("29", token.INT, 0)),
		"TagGpsVersionId":                              reflect.ValueOf(constant.MakeFromLiteral("0", token.INT, 0)),
		"TagLatitudeId":                                reflect.ValueOf(constant.MakeFromLiteral("2", token.INT, 0)),
		"TagLatitudeRefId":                             reflect.ValueOf(constant.MakeFromLiteral("1", token.INT, 0)),
		"TagLongitudeId":                               reflect.ValueOf(constant.MakeFromLiteral("4", token.INT, 0)),
		"TagLongitudeRefId":                            reflect.ValueOf(constant.MakeFromLiteral("3", token.INT, 0)),
		"TagTimestampId":                               reflect.ValueOf(constant.MakeFromLiteral("7", token.INT, 0)),
		"ThumbnailFqIfdPath":                           reflect.ValueOf(constant.MakeFromLiteral("\"IFD1\"", token.STRING, 0)),
		"ThumbnailOffsetTagId":                         reflect.ValueOf(constant.MakeFromLiteral("513", token.INT, 0)),
		"ThumbnailSizeTagId":                           reflect.ValueOf(constant.MakeFromLiteral("514", token.INT, 0)),
		"ValidGpsVersions":                             reflect.ValueOf(&exif.ValidGpsVersions).Elem(),
		"Visit":                                        reflect.ValueOf(exif.Visit),

		// type definitions
		"BuilderTag":            reflect.ValueOf((*exif.BuilderTag)(nil)),
		"ByteWriter":            reflect.ValueOf((*exif.ByteWriter)(nil)),
		"ExifBlobSeeker":        reflect.ValueOf((*exif.ExifBlobSeeker)(nil)),
		"ExifHeader":            reflect.ValueOf((*exif.ExifHeader)(nil)),
		"ExifReadSeeker":        reflect.ValueOf((*exif.ExifReadSeeker)(nil)),
		"ExifTag":               reflect.ValueOf((*exif.ExifTag)(nil)),
		"GpsDegrees":            reflect.ValueOf((*exif.GpsDegrees)(nil)),
		"GpsInfo":               reflect.ValueOf((*exif.GpsInfo)(nil)),
		"Ifd":                   reflect.ValueOf((*exif.Ifd)(nil)),
		"IfdBuilder":            reflect.ValueOf((*exif.IfdBuilder)(nil)),
		"IfdBuilderTagValue":    reflect.ValueOf((*exif.IfdBuilderTagValue)(nil)),
		"IfdByteEncoder":        reflect.ValueOf((*exif.IfdByteEncoder)(nil)),
		"IfdEnumerate":          reflect.ValueOf((*exif.IfdEnumerate)(nil)),
		"IfdIndex":              reflect.ValueOf((*exif.IfdIndex)(nil)),
		"IfdTagEntry":           reflect.ValueOf((*exif.IfdTagEntry)(nil)),
		"IndexedTag":            reflect.ValueOf((*exif.IndexedTag)(nil)),
		"MiscellaneousExifData": reflect.ValueOf((*exif.MiscellaneousExifData)(nil)),
		"ParsedTagVisitor":      reflect.ValueOf((*exif.ParsedTagVisitor)(nil)),
		"QueuedIfd":             reflect.ValueOf((*exif.QueuedIfd)(nil)),
		"ScanOptions":           reflect.ValueOf((*exif.ScanOptions)(nil)),
		"TagIndex":              reflect.ValueOf((*exif.TagIndex)(nil)),
		"TagVisitorFn":          reflect.ValueOf((*exif.TagVisitorFn)(nil)),

		// interface wrapper definitions
		"_ExifBlobSeeker": reflect.ValueOf((*_github_com_dsoprea_go_exif_v3_ExifBlobSeeker)(nil)),
	}
}

// _github_com_dsoprea_go_exif_v3_ExifBlobSeeker is an interface wrapper for ExifBlobSeeker type
type _github_com_dsoprea_go_exif_v3_ExifBlobSeeker struct {
	IValue         interface{}
	WGetReadSeeker func(initialOffset int64) (rs io.ReadSeeker, err error)
}

func (W _github_com_dsoprea_go_exif_v3_ExifBlobSeeker) GetReadSeeker(initialOffset int64) (rs io.ReadSeeker, err error) {
	return W.WGetReadSeeker(initialOffset)
}
