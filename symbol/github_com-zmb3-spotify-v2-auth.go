// Code generated by 'yaegi extract github.com/zmb3/spotify/v2/auth'. DO NOT EDIT.

package symbol

import (
	"github.com/zmb3/spotify/v2/auth"
	"go/constant"
	"go/token"
	"reflect"
)

func init() {
	Symbols["github.com/zmb3/spotify/v2/auth/spotifyauth"] = map[string]reflect.Value{
		// function, constant and variable definitions
		"AuthURL":                        reflect.ValueOf(constant.MakeFromLiteral("\"https://accounts.spotify.com/authorize\"", token.STRING, 0)),
		"New":                            reflect.ValueOf(spotifyauth.New),
		"ScopeImageUpload":               reflect.ValueOf(constant.MakeFromLiteral("\"ugc-image-upload\"", token.STRING, 0)),
		"ScopePlaylistModifyPrivate":     reflect.ValueOf(constant.MakeFromLiteral("\"playlist-modify-private\"", token.STRING, 0)),
		"ScopePlaylistModifyPublic":      reflect.ValueOf(constant.MakeFromLiteral("\"playlist-modify-public\"", token.STRING, 0)),
		"ScopePlaylistReadCollaborative": reflect.ValueOf(constant.MakeFromLiteral("\"playlist-read-collaborative\"", token.STRING, 0)),
		"ScopePlaylistReadPrivate":       reflect.ValueOf(constant.MakeFromLiteral("\"playlist-read-private\"", token.STRING, 0)),
		"ScopeStreaming":                 reflect.ValueOf(constant.MakeFromLiteral("\"streaming\"", token.STRING, 0)),
		"ScopeUserFollowModify":          reflect.ValueOf(constant.MakeFromLiteral("\"user-follow-modify\"", token.STRING, 0)),
		"ScopeUserFollowRead":            reflect.ValueOf(constant.MakeFromLiteral("\"user-follow-read\"", token.STRING, 0)),
		"ScopeUserLibraryModify":         reflect.ValueOf(constant.MakeFromLiteral("\"user-library-modify\"", token.STRING, 0)),
		"ScopeUserLibraryRead":           reflect.ValueOf(constant.MakeFromLiteral("\"user-library-read\"", token.STRING, 0)),
		"ScopeUserModifyPlaybackState":   reflect.ValueOf(constant.MakeFromLiteral("\"user-modify-playback-state\"", token.STRING, 0)),
		"ScopeUserReadCurrentlyPlaying":  reflect.ValueOf(constant.MakeFromLiteral("\"user-read-currently-playing\"", token.STRING, 0)),
		"ScopeUserReadEmail":             reflect.ValueOf(constant.MakeFromLiteral("\"user-read-email\"", token.STRING, 0)),
		"ScopeUserReadPlaybackState":     reflect.ValueOf(constant.MakeFromLiteral("\"user-read-playback-state\"", token.STRING, 0)),
		"ScopeUserReadPrivate":           reflect.ValueOf(constant.MakeFromLiteral("\"user-read-private\"", token.STRING, 0)),
		"ScopeUserReadRecentlyPlayed":    reflect.ValueOf(constant.MakeFromLiteral("\"user-read-recently-played\"", token.STRING, 0)),
		"ScopeUserTopRead":               reflect.ValueOf(constant.MakeFromLiteral("\"user-top-read\"", token.STRING, 0)),
		"ShowDialog":                     reflect.ValueOf(&spotifyauth.ShowDialog).Elem(),
		"TokenURL":                       reflect.ValueOf(constant.MakeFromLiteral("\"https://accounts.spotify.com/api/token\"", token.STRING, 0)),
		"WithClientID":                   reflect.ValueOf(spotifyauth.WithClientID),
		"WithClientSecret":               reflect.ValueOf(spotifyauth.WithClientSecret),
		"WithRedirectURL":                reflect.ValueOf(spotifyauth.WithRedirectURL),
		"WithScopes":                     reflect.ValueOf(spotifyauth.WithScopes),

		// type definitions
		"Authenticator":       reflect.ValueOf((*spotifyauth.Authenticator)(nil)),
		"AuthenticatorOption": reflect.ValueOf((*spotifyauth.AuthenticatorOption)(nil)),
	}
}
