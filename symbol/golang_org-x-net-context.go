// Code generated by 'yaegi extract golang.org/x/net/context'. DO NOT EDIT.

package symbol

import (
	"golang.org/x/net/context"
	"reflect"
	"time"
)

func init() {
	Symbols["golang.org/x/net/context"] = map[string]reflect.Value{
		// function, constant and variable definitions
		"Background":       reflect.ValueOf(context.Background),
		"Canceled":         reflect.ValueOf(&context.Canceled).Elem(),
		"DeadlineExceeded": reflect.ValueOf(&context.DeadlineExceeded).Elem(),
		"TODO":             reflect.ValueOf(context.TODO),
		"WithCancel":       reflect.ValueOf(context.WithCancel),
		"WithDeadline":     reflect.ValueOf(context.WithDeadline),
		"WithTimeout":      reflect.ValueOf(context.WithTimeout),
		"WithValue":        reflect.ValueOf(context.WithValue),

		// type definitions
		"CancelFunc": reflect.ValueOf((*context.CancelFunc)(nil)),
		"Context":    reflect.ValueOf((*context.Context)(nil)),

		// interface wrapper definitions
		"_Context": reflect.ValueOf((*_golang_org_x_net_context_Context)(nil)),
	}
}

// _golang_org_x_net_context_Context is an interface wrapper for Context type
type _golang_org_x_net_context_Context struct {
	IValue    interface{}
	WDeadline func() (deadline time.Time, ok bool)
	WDone     func() <-chan struct{}
	WErr      func() error
	WValue    func(key any) any
}

func (W _golang_org_x_net_context_Context) Deadline() (deadline time.Time, ok bool) {
	return W.WDeadline()
}
func (W _golang_org_x_net_context_Context) Done() <-chan struct{} {
	return W.WDone()
}
func (W _golang_org_x_net_context_Context) Err() error {
	return W.WErr()
}
func (W _golang_org_x_net_context_Context) Value(key any) any {
	return W.WValue(key)
}
