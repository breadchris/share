// Generated TypeScript API bindings
// DO NOT EDIT - This file is automatically generated

export type TodoStatus = string;

export interface ListTodosResponse {
    todos: Todo[];
    total: number;
}

export interface UpdateTodoResponse {
    todo: Todo;
}

export interface DeleteTodoRequest {
    id: string;
}

export interface Todo {
    id: string;
    title: string;
    description: string;
    status: TodoStatus;
    created_at: string;
    updated_at: string;
    due_date?: string | undefined;
}

export interface CreateTodoResponse {
    todo: Todo;
}

export interface ListTodosRequest {
    user_id: string;
    status?: TodoStatus;
    limit?: number;
    offset?: number;
}

export interface GetTodoRequest {
    id: string;
}

export interface GetTodoResponse {
    todo: Todo;
}

export interface UpdateTodoRequest {
    id: string;
    title?: string | undefined;
    description?: string | undefined;
    status?: TodoStatus | undefined;
    due_date?: string | undefined;
}

export interface DeleteTodoResponse {
    success: boolean;
    message: string;
}

export interface FunctionInfo {
    Name: string;
    RequestType: string;
    ResponseType: string;
    Endpoint: string;
}

export interface CreateTodoRequest {
    title: string;
    description?: string;
    due_date?: string | undefined;
}


// API Client Functions

export interface FetchOptions {
    baseURL?: string;
    headers?: Record<string, string>;
    timeout?: number;
}

export interface Response<T> {
    data: T;
    status: number;
    statusText: string;
}

// Go: file://user/demo_types.go:84
export async function CreateTodo(req: CreateTodoRequest, options: FetchOptions = {}): Promise<Response<CreateTodoResponse>> {
    const url = `${options.baseURL || '/user'}/createtodo`;
    const headers = {
        'Content-Type': 'application/json',
        ...options.headers
    };

    const response = await fetch(url, {
        method: 'POST',
        headers,
        body: JSON.stringify(req)
    });

    if (!response.ok) {
        throw new Error(`HTTP error! status: ${response.status}`);
    }

    const data = await response.json();
    return {
        data,
        status: response.status,
        statusText: response.statusText
    };
}

// Go: file://user/demo_types.go:102
export async function ListTodos(req: ListTodosRequest, options: FetchOptions = {}): Promise<Response<ListTodosResponse>> {
    const url = `${options.baseURL || '/user'}/listtodos`;
    const headers = {
        'Content-Type': 'application/json',
        ...options.headers
    };

    const response = await fetch(url, {
        method: 'POST',
        headers,
        body: JSON.stringify(req)
    });

    if (!response.ok) {
        throw new Error(`HTTP error! status: ${response.status}`);
    }

    const data = await response.json();
    return {
        data,
        status: response.status,
        statusText: response.statusText
    };
}

// Go: file://user/demo_types.go:114
export async function GetTodo(req: GetTodoRequest, options: FetchOptions = {}): Promise<Response<GetTodoResponse>> {
    const url = `${options.baseURL || '/user'}/gettodo`;
    const headers = {
        'Content-Type': 'application/json',
        ...options.headers
    };

    const response = await fetch(url, {
        method: 'POST',
        headers,
        body: JSON.stringify(req)
    });

    if (!response.ok) {
        throw new Error(`HTTP error! status: ${response.status}`);
    }

    const data = await response.json();
    return {
        data,
        status: response.status,
        statusText: response.statusText
    };
}

// Go: file://user/demo_types.go:126
export async function UpdateTodo(req: UpdateTodoRequest, options: FetchOptions = {}): Promise<Response<UpdateTodoResponse>> {
    const url = `${options.baseURL || '/user'}/updatetodo`;
    const headers = {
        'Content-Type': 'application/json',
        ...options.headers
    };

    const response = await fetch(url, {
        method: 'POST',
        headers,
        body: JSON.stringify(req)
    });

    if (!response.ok) {
        throw new Error(`HTTP error! status: ${response.status}`);
    }

    const data = await response.json();
    return {
        data,
        status: response.status,
        statusText: response.statusText
    };
}

// Go: file://user/demo_types.go:139
export async function DeleteTodo(req: DeleteTodoRequest, options: FetchOptions = {}): Promise<Response<DeleteTodoResponse>> {
    const url = `${options.baseURL || '/user'}/deletetodo`;
    const headers = {
        'Content-Type': 'application/json',
        ...options.headers
    };

    const response = await fetch(url, {
        method: 'POST',
        headers,
        body: JSON.stringify(req)
    });

    if (!response.ok) {
        throw new Error(`HTTP error! status: ${response.status}`);
    }

    const data = await response.json();
    return {
        data,
        status: response.status,
        statusText: response.statusText
    };
}
