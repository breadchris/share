// This tutorial shows how to create and use implementation mocks generated with gomock.
//
// gomock is a popular mocking framework for Go. It allows you to create mock objects
// and set expectations on their behavior, which is useful for unit testing.
package main

import (
	"fmt"
	"reflect"
	"testing"

	"go.uber.org/mock/gomock"
)

// StringService defines an interface with a single method.
type StringService interface {
	ToUpper(string) string
}

// Greet uses the StringService to convert a name to uppercase and returns a greeting.
func Greet(svc StringService, name string) string {
	return fmt.Sprintf("Hello, %s!", svc.ToUpper(name))
}

// TestGreet tests the Greet function using a mock StringService.
func TestGreet(t *testing.T) {
	// Create a new controller for gomock.
	ctrl := gomock.NewController(t)
	defer ctrl.Finish()

	// Create a mock StringService.
	mockSvc := NewMockStringService(ctrl)

	// Set up the expected behavior.
	mockSvc.EXPECT().ToUpper("world").Return("WORLD")

	// Call the function under test.
	result := Greet(mockSvc, "world")

	// Check the result.
	expected := "Hello, WORLD!"
	if result != expected {
		t.Errorf("got %s, want %s", result, expected)
	}
}

// Code below is a StringService mock generated by gomock with "mockgen" command.
// This mock can be generated into external file using following command:
//	mockgen -source=main.go -destination=mock_stringservice.go -package=main

// MockStringService is a mock of StringService interface.
type MockStringService struct {
	ctrl     *gomock.Controller
	recorder *MockStringServiceMockRecorder
}

// MockStringServiceMockRecorder is the mock recorder for MockStringService.
type MockStringServiceMockRecorder struct {
	mock *MockStringService
}

// NewMockStringService creates a new mock instance.
func NewMockStringService(ctrl *gomock.Controller) *MockStringService {
	mock := &MockStringService{ctrl: ctrl}
	mock.recorder = &MockStringServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStringService) EXPECT() *MockStringServiceMockRecorder {
	return m.recorder
}

// ToUpper mocks base method.
func (m *MockStringService) ToUpper(arg0 string) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ToUpper", arg0)
	ret0, _ := ret[0].(string)
	return ret0
}

// ToUpper indicates an expected call of ToUpper.
func (mr *MockStringServiceMockRecorder) ToUpper(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ToUpper", reflect.TypeOf((*MockStringService)(nil).ToUpper), arg0)
}
