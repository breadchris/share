var Ha=Object.create;var Vr=Object.defineProperty;var Ya=Object.getOwnPropertyDescriptor;var Ua=Object.getOwnPropertyNames;var Ga=Object.getPrototypeOf,Xa=Object.prototype.hasOwnProperty;var Ja=(h,v)=>()=>(v||h((v={exports:{}}).exports,v),v.exports);var Za=(h,v,b,C)=>{if(v&&typeof v=="object"||typeof v=="function")for(let D of Ua(v))!Xa.call(h,D)&&D!==b&&Vr(h,D,{get:()=>v[D],enumerable:!(C=Ya(v,D))||C.enumerable});return h};var qa=(h,v,b)=>(b=h!=null?Ha(Ga(h)):{},Za(v||!h||!h.__esModule?Vr(b,"default",{value:h,enumerable:!0}):b,h));var Zr=Ja(($n,Wn)=>{(function(h,v){typeof $n=="object"&&typeof Wn<"u"?Wn.exports=v():typeof define=="function"&&define.amd?define(v):(h=typeof globalThis<"u"?globalThis:h||self,h.Dexie=v())})($n,function(){"use strict";var h=function(e,t){return h=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(n,r){n.__proto__=r}||function(n,r){for(var i in r)Object.prototype.hasOwnProperty.call(r,i)&&(n[i]=r[i])},h(e,t)};function v(e,t){if(typeof t!="function"&&t!==null)throw new TypeError("Class extends value "+String(t)+" is not a constructor or null");h(e,t);function n(){this.constructor=e}e.prototype=t===null?Object.create(t):(n.prototype=t.prototype,new n)}var b=function(){return b=Object.assign||function(t){for(var n,r=1,i=arguments.length;r<i;r++){n=arguments[r];for(var a in n)Object.prototype.hasOwnProperty.call(n,a)&&(t[a]=n[a])}return t},b.apply(this,arguments)};function C(e,t,n){if(n||arguments.length===2)for(var r=0,i=t.length,a;r<i;r++)(a||!(r in t))&&(a||(a=Array.prototype.slice.call(t,0,r)),a[r]=t[r]);return e.concat(a||Array.prototype.slice.call(t))}var D=typeof globalThis<"u"?globalThis:typeof self<"u"?self:typeof window<"u"?window:global,N=Object.keys,j=Array.isArray;typeof Promise<"u"&&!D.Promise&&(D.Promise=Promise);function L(e,t){return typeof t!="object"||N(t).forEach(function(n){e[n]=t[n]}),e}var U=Object.getPrototypeOf,H={}.hasOwnProperty;function $(e,t){return H.call(e,t)}function Z(e,t){typeof t=="function"&&(t=t(U(e))),(typeof Reflect>"u"?N:Reflect.ownKeys)(t).forEach(function(n){te(e,n,t[n])})}var q=Object.defineProperty;function te(e,t,n,r){q(e,t,L(n&&$(n,"get")&&typeof n.get=="function"?{get:n.get,set:n.set,configurable:!0}:{value:n,configurable:!0,writable:!0},r))}function Be(e){return{from:function(t){return e.prototype=Object.create(t.prototype),te(e.prototype,"constructor",e),{extend:Z.bind(null,e.prototype)}}}}var li=Object.getOwnPropertyDescriptor;function Gn(e,t){var n=li(e,t),r;return n||(r=U(e))&&Gn(r,t)}var fi=[].slice;function ft(e,t,n){return fi.call(e,t,n)}function Xn(e,t){return t(e)}function Ye(e){if(!e)throw new Error("Assertion Failed")}function Jn(e){D.setImmediate?setImmediate(e):setTimeout(e,0)}function hi(e,t){return e.reduce(function(n,r,i){var a=t(r,i);return a&&(n[a[0]]=a[1]),n},{})}function fe(e,t){if(typeof t=="string"&&$(e,t))return e[t];if(!t)return e;if(typeof t!="string"){for(var n=[],r=0,i=t.length;r<i;++r){var a=fe(e,t[r]);n.push(a)}return n}var o=t.indexOf(".");if(o!==-1){var u=e[t.substr(0,o)];return u==null?void 0:fe(u,t.substr(o+1))}}function ne(e,t,n){if(!(!e||t===void 0)&&!("isFrozen"in Object&&Object.isFrozen(e)))if(typeof t!="string"&&"length"in t){Ye(typeof n!="string"&&"length"in n);for(var r=0,i=t.length;r<i;++r)ne(e,t[r],n[r])}else{var a=t.indexOf(".");if(a!==-1){var o=t.substr(0,a),u=t.substr(a+1);if(u==="")n===void 0?j(e)&&!isNaN(parseInt(o))?e.splice(o,1):delete e[o]:e[o]=n;else{var s=e[o];(!s||!$(e,o))&&(s=e[o]={}),ne(s,u,n)}}else n===void 0?j(e)&&!isNaN(parseInt(t))?e.splice(t,1):delete e[t]:e[t]=n}}function di(e,t){typeof t=="string"?ne(e,t,void 0):"length"in t&&[].map.call(t,function(n){ne(e,n,void 0)})}function Zn(e){var t={};for(var n in e)$(e,n)&&(t[n]=e[n]);return t}var pi=[].concat;function qn(e){return pi.apply([],e)}var vi="BigUint64Array,BigInt64Array,Array,Boolean,String,Date,RegExp,Blob,File,FileList,FileSystemFileHandle,FileSystemDirectoryHandle,ArrayBuffer,DataView,Uint8ClampedArray,ImageBitmap,ImageData,Map,Set,CryptoKey".split(",").concat(qn([8,16,32,64].map(function(e){return["Int","Uint","Float"].map(function(t){return t+e+"Array"})}))).filter(function(e){return D[e]}),er=new Set(vi.map(function(e){return D[e]}));function tr(e){var t={};for(var n in e)if($(e,n)){var r=e[n];t[n]=!r||typeof r!="object"||er.has(r.constructor)?r:tr(r)}return t}function yi(e){for(var t in e)if($(e,t))return!1;return!0}var Ue=null;function Ie(e){Ue=new WeakMap;var t=Ut(e);return Ue=null,t}function Ut(e){if(!e||typeof e!="object")return e;var t=Ue.get(e);if(t)return t;if(j(e)){t=[],Ue.set(e,t);for(var n=0,r=e.length;n<r;++n)t.push(Ut(e[n]))}else if(er.has(e.constructor))t=e;else{var i=U(e);t=i===Object.prototype?{}:Object.create(i),Ue.set(e,t);for(var a in e)$(e,a)&&(t[a]=Ut(e[a]))}return t}var mi={}.toString;function Gt(e){return mi.call(e).slice(8,-1)}var Xt=typeof Symbol<"u"?Symbol.iterator:"@@iterator",gi=typeof Xt=="symbol"?function(e){var t;return e!=null&&(t=e[Xt])&&t.apply(e)}:function(){return null};function Se(e,t){var n=e.indexOf(t);return n>=0&&e.splice(n,1),n>=0}var Fe={};function he(e){var t,n,r,i;if(arguments.length===1){if(j(e))return e.slice();if(this===Fe&&typeof e=="string")return[e];if(i=gi(e)){for(n=[];r=i.next(),!r.done;)n.push(r.value);return n}if(e==null)return[e];if(t=e.length,typeof t=="number"){for(n=new Array(t);t--;)n[t]=e[t];return n}return[e]}for(t=arguments.length,n=new Array(t);t--;)n[t]=arguments[t];return n}var Jt=typeof Symbol<"u"?function(e){return e[Symbol.toStringTag]==="AsyncFunction"}:function(){return!1},bi=["Modify","Bulk","OpenFailed","VersionChange","Schema","Upgrade","InvalidTable","MissingAPI","NoSuchDatabase","InvalidArgument","SubTransaction","Unsupported","Internal","DatabaseClosed","PrematureCommit","ForeignAwait"],nr=["Unknown","Constraint","Data","TransactionInactive","ReadOnly","Version","NotFound","InvalidState","InvalidAccess","Abort","Timeout","QuotaExceeded","Syntax","DataClone"],Zt=bi.concat(nr),wi={VersionChanged:"Database version changed by other database connection",DatabaseClosed:"Database has been closed",Abort:"Transaction aborted",TransactionInactive:"Transaction has already completed or failed",MissingAPI:"IndexedDB API missing. Please visit https://tinyurl.com/y2uuvskb"};function je(e,t){this.name=e,this.message=t}Be(je).from(Error).extend({toString:function(){return this.name+": "+this.message}});function rr(e,t){return e+". Errors: "+Object.keys(t).map(function(n){return t[n].toString()}).filter(function(n,r,i){return i.indexOf(n)===r}).join(`
`)}function ht(e,t,n,r){this.failures=t,this.failedKeys=r,this.successCount=n,this.message=rr(e,t)}Be(ht).from(je);function Ne(e,t){this.name="BulkError",this.failures=Object.keys(t).map(function(n){return t[n]}),this.failuresByPos=t,this.message=rr(e,this.failures)}Be(Ne).from(je);var qt=Zt.reduce(function(e,t){return e[t]=t+"Error",e},{}),xi=je,K=Zt.reduce(function(e,t){var n=t+"Error";function r(i,a){this.name=n,i?typeof i=="string"?(this.message="".concat(i).concat(a?`
 `+a:""),this.inner=a||null):typeof i=="object"&&(this.message="".concat(i.name," ").concat(i.message),this.inner=i):(this.message=wi[t]||n,this.inner=null)}return Be(r).from(xi),e[t]=r,e},{});K.Syntax=SyntaxError,K.Type=TypeError,K.Range=RangeError;var ir=nr.reduce(function(e,t){return e[t+"Error"]=K[t],e},{});function _i(e,t){if(!e||e instanceof je||e instanceof TypeError||e instanceof SyntaxError||!e.name||!ir[e.name])return e;var n=new ir[e.name](t||e.message,e);return"stack"in e&&te(n,"stack",{get:function(){return this.inner.stack}}),n}var dt=Zt.reduce(function(e,t){return["Syntax","Type","Range"].indexOf(t)===-1&&(e[t+"Error"]=K[t]),e},{});dt.ModifyError=ht,dt.DexieError=je,dt.BulkError=Ne;function W(){}function Ge(e){return e}function ki(e,t){return e==null||e===Ge?t:function(n){return t(e(n))}}function Pe(e,t){return function(){e.apply(this,arguments),t.apply(this,arguments)}}function Ei(e,t){return e===W?t:function(){var n=e.apply(this,arguments);n!==void 0&&(arguments[0]=n);var r=this.onsuccess,i=this.onerror;this.onsuccess=null,this.onerror=null;var a=t.apply(this,arguments);return r&&(this.onsuccess=this.onsuccess?Pe(r,this.onsuccess):r),i&&(this.onerror=this.onerror?Pe(i,this.onerror):i),a!==void 0?a:n}}function Ii(e,t){return e===W?t:function(){e.apply(this,arguments);var n=this.onsuccess,r=this.onerror;this.onsuccess=this.onerror=null,t.apply(this,arguments),n&&(this.onsuccess=this.onsuccess?Pe(n,this.onsuccess):n),r&&(this.onerror=this.onerror?Pe(r,this.onerror):r)}}function Si(e,t){return e===W?t:function(n){var r=e.apply(this,arguments);L(n,r);var i=this.onsuccess,a=this.onerror;this.onsuccess=null,this.onerror=null;var o=t.apply(this,arguments);return i&&(this.onsuccess=this.onsuccess?Pe(i,this.onsuccess):i),a&&(this.onerror=this.onerror?Pe(a,this.onerror):a),r===void 0?o===void 0?void 0:o:L(r,o)}}function Pi(e,t){return e===W?t:function(){return t.apply(this,arguments)===!1?!1:e.apply(this,arguments)}}function en(e,t){return e===W?t:function(){var n=e.apply(this,arguments);if(n&&typeof n.then=="function"){for(var r=this,i=arguments.length,a=new Array(i);i--;)a[i]=arguments[i];return n.then(function(){return t.apply(r,a)})}return t.apply(this,arguments)}}var ue=typeof location<"u"&&/^(http|https):\/\/(localhost|127\.0\.0\.1)/.test(location.href);function ar(e,t){ue=e}var Xe={},or=100,tn=typeof Promise>"u"?[]:function(){var e=Promise.resolve();if(typeof crypto>"u"||!crypto.subtle)return[e,U(e),e];var t=crypto.subtle.digest("SHA-512",new Uint8Array([0]));return[t,U(t),e]}(),ur=tn[0],sr=tn[1],Ci=tn[2],Ti=sr&&sr.then,Je=ur&&ur.constructor,nn=!!Ci;function Ai(){queueMicrotask(Oi)}var Ze=function(e,t){qe.push([e,t]),pt&&(Ai(),pt=!1)},rn=!0,pt=!0,Ce=[],vt=[],an=Ge,ve={id:"global",global:!0,ref:0,unhandleds:[],onunhandled:W,pgp:!1,env:{},finalize:W},O=ve,qe=[],Te=0,yt=[];function S(e){if(typeof this!="object")throw new TypeError("Promises must be constructed via new");this._listeners=[],this._lib=!1;var t=this._PSD=O;if(typeof e!="function"){if(e!==Xe)throw new TypeError("Not a function");this._state=arguments[1],this._value=arguments[2],this._state===!1&&un(this,this._value);return}this._state=null,this._value=null,++t.ref,lr(this,e)}var on={get:function(){var e=O,t=wt;function n(r,i){var a=this,o=!e.global&&(e!==O||t!==wt),u=o&&!me(),s=new S(function(c,d){sn(a,new cr(dr(r,e,o,u),dr(i,e,o,u),c,d,e))});return this._consoleTask&&(s._consoleTask=this._consoleTask),s}return n.prototype=Xe,n},set:function(e){te(this,"then",e&&e.prototype===Xe?on:{get:function(){return e},set:on.set})}};Z(S.prototype,{then:on,_then:function(e,t){sn(this,new cr(null,null,e,t,O))},catch:function(e){if(arguments.length===1)return this.then(null,e);var t=arguments[0],n=arguments[1];return typeof t=="function"?this.then(null,function(r){return r instanceof t?n(r):mt(r)}):this.then(null,function(r){return r&&r.name===t?n(r):mt(r)})},finally:function(e){return this.then(function(t){return S.resolve(e()).then(function(){return t})},function(t){return S.resolve(e()).then(function(){return mt(t)})})},timeout:function(e,t){var n=this;return e<1/0?new S(function(r,i){var a=setTimeout(function(){return i(new K.Timeout(t))},e);n.then(r,i).finally(clearTimeout.bind(null,a))}):this}}),typeof Symbol<"u"&&Symbol.toStringTag&&te(S.prototype,Symbol.toStringTag,"Dexie.Promise"),ve.env=hr();function cr(e,t,n,r,i){this.onFulfilled=typeof e=="function"?e:null,this.onRejected=typeof t=="function"?t:null,this.resolve=n,this.reject=r,this.psd=i}Z(S,{all:function(){var e=he.apply(null,arguments).map(xt);return new S(function(t,n){e.length===0&&t([]);var r=e.length;e.forEach(function(i,a){return S.resolve(i).then(function(o){e[a]=o,--r||t(e)},n)})})},resolve:function(e){if(e instanceof S)return e;if(e&&typeof e.then=="function")return new S(function(n,r){e.then(n,r)});var t=new S(Xe,!0,e);return t},reject:mt,race:function(){var e=he.apply(null,arguments).map(xt);return new S(function(t,n){e.map(function(r){return S.resolve(r).then(t,n)})})},PSD:{get:function(){return O},set:function(e){return O=e}},totalEchoes:{get:function(){return wt}},newPSD:ye,usePSD:Ae,scheduler:{get:function(){return Ze},set:function(e){Ze=e}},rejectionMapper:{get:function(){return an},set:function(e){an=e}},follow:function(e,t){return new S(function(n,r){return ye(function(i,a){var o=O;o.unhandleds=[],o.onunhandled=a,o.finalize=Pe(function(){var u=this;Ki(function(){u.unhandleds.length===0?i():a(u.unhandleds[0])})},o.finalize),e()},t,n,r)})}}),Je&&(Je.allSettled&&te(S,"allSettled",function(){var e=he.apply(null,arguments).map(xt);return new S(function(t){e.length===0&&t([]);var n=e.length,r=new Array(n);e.forEach(function(i,a){return S.resolve(i).then(function(o){return r[a]={status:"fulfilled",value:o}},function(o){return r[a]={status:"rejected",reason:o}}).then(function(){return--n||t(r)})})})}),Je.any&&typeof AggregateError<"u"&&te(S,"any",function(){var e=he.apply(null,arguments).map(xt);return new S(function(t,n){e.length===0&&n(new AggregateError([]));var r=e.length,i=new Array(r);e.forEach(function(a,o){return S.resolve(a).then(function(u){return t(u)},function(u){i[o]=u,--r||n(new AggregateError(i))})})})}));function lr(e,t){try{t(function(n){if(e._state===null){if(n===e)throw new TypeError("A promise cannot be resolved with itself.");var r=e._lib&&Le();n&&typeof n.then=="function"?lr(e,function(i,a){n instanceof S?n._then(i,a):n.then(i,a)}):(e._state=!0,e._value=n,fr(e)),r&&Ve()}},un.bind(null,e))}catch(n){un(e,n)}}function un(e,t){if(vt.push(t),e._state===null){var n=e._lib&&Le();t=an(t),e._state=!1,e._value=t,Ri(e),fr(e),n&&Ve()}}function fr(e){var t=e._listeners;e._listeners=[];for(var n=0,r=t.length;n<r;++n)sn(e,t[n]);var i=e._PSD;--i.ref||i.finalize(),Te===0&&(++Te,Ze(function(){--Te===0&&cn()},[]))}function sn(e,t){if(e._state===null){e._listeners.push(t);return}var n=e._state?t.onFulfilled:t.onRejected;if(n===null)return(e._state?t.resolve:t.reject)(e._value);++t.psd.ref,++Te,Ze(Di,[n,e,t])}function Di(e,t,n){try{var r,i=t._value;!t._state&&vt.length&&(vt=[]),r=ue&&t._consoleTask?t._consoleTask.run(function(){return e(i)}):e(i),!t._state&&vt.indexOf(i)===-1&&Mi(t),n.resolve(r)}catch(a){n.reject(a)}finally{--Te===0&&cn(),--n.psd.ref||n.psd.finalize()}}function Oi(){Ae(ve,function(){Le()&&Ve()})}function Le(){var e=rn;return rn=!1,pt=!1,e}function Ve(){var e,t,n;do for(;qe.length>0;)for(e=qe,qe=[],n=e.length,t=0;t<n;++t){var r=e[t];r[0].apply(null,r[1])}while(qe.length>0);rn=!0,pt=!0}function cn(){var e=Ce;Ce=[],e.forEach(function(r){r._PSD.onunhandled.call(null,r._value,r)});for(var t=yt.slice(0),n=t.length;n;)t[--n]()}function Ki(e){function t(){e(),yt.splice(yt.indexOf(t),1)}yt.push(t),++Te,Ze(function(){--Te===0&&cn()},[])}function Ri(e){Ce.some(function(t){return t._value===e._value})||Ce.push(e)}function Mi(e){for(var t=Ce.length;t;)if(Ce[--t]._value===e._value){Ce.splice(t,1);return}}function mt(e){return new S(Xe,!1,e)}function Y(e,t){var n=O;return function(){var r=Le(),i=O;try{return ge(n,!0),e.apply(this,arguments)}catch(a){t&&t(a)}finally{ge(i,!1),r&&Ve()}}}var X={awaits:0,echoes:0,id:0},Bi=0,gt=[],bt=0,wt=0,Fi=0;function ye(e,t,n,r){var i=O,a=Object.create(i);a.parent=i,a.ref=0,a.global=!1,a.id=++Fi,ve.env,a.env=nn?{Promise:S,PromiseProp:{value:S,configurable:!0,writable:!0},all:S.all,race:S.race,allSettled:S.allSettled,any:S.any,resolve:S.resolve,reject:S.reject}:{},t&&L(a,t),++i.ref,a.finalize=function(){--this.parent.ref||this.parent.finalize()};var o=Ae(a,e,n,r);return a.ref===0&&a.finalize(),o}function ze(){return X.id||(X.id=++Bi),++X.awaits,X.echoes+=or,X.id}function me(){return X.awaits?(--X.awaits===0&&(X.id=0),X.echoes=X.awaits*or,!0):!1}(""+Ti).indexOf("[native code]")===-1&&(ze=me=W);function xt(e){return X.echoes&&e&&e.constructor===Je?(ze(),e.then(function(t){return me(),t},function(t){return me(),G(t)})):e}function ji(e){++wt,(!X.echoes||--X.echoes===0)&&(X.echoes=X.awaits=X.id=0),gt.push(O),ge(e,!0)}function Ni(){var e=gt[gt.length-1];gt.pop(),ge(e,!1)}function ge(e,t){var n=O;if((t?X.echoes&&(!bt++||e!==O):bt&&(!--bt||e!==O))&&queueMicrotask(t?ji.bind(null,e):Ni),e!==O&&(O=e,n===ve&&(ve.env=hr()),nn)){var r=ve.env.Promise,i=e.env;(n.global||e.global)&&(Object.defineProperty(D,"Promise",i.PromiseProp),r.all=i.all,r.race=i.race,r.resolve=i.resolve,r.reject=i.reject,i.allSettled&&(r.allSettled=i.allSettled),i.any&&(r.any=i.any))}}function hr(){var e=D.Promise;return nn?{Promise:e,PromiseProp:Object.getOwnPropertyDescriptor(D,"Promise"),all:e.all,race:e.race,allSettled:e.allSettled,any:e.any,resolve:e.resolve,reject:e.reject}:{}}function Ae(e,t,n,r,i){var a=O;try{return ge(e,!0),t(n,r,i)}finally{ge(a,!1)}}function dr(e,t,n,r){return typeof e!="function"?e:function(){var i=O;n&&ze(),ge(t,!0);try{return e.apply(this,arguments)}finally{ge(i,!1),r&&queueMicrotask(me)}}}function ln(e){Promise===Je&&X.echoes===0?bt===0?e():enqueueNativeMicroTask(e):setTimeout(e,0)}var G=S.reject;function fn(e,t,n,r){if(!e.idbdb||!e._state.openComplete&&!O.letThrough&&!e._vip){if(e._state.openComplete)return G(new K.DatabaseClosed(e._state.dbOpenError));if(!e._state.isBeingOpened){if(!e._state.autoOpen)return G(new K.DatabaseClosed);e.open().catch(W)}return e._state.dbReadyPromise.then(function(){return fn(e,t,n,r)})}else{var i=e._createTransaction(t,n,e._dbSchema);try{i.create(),e._state.PR1398_maxLoop=3}catch(a){return a.name===qt.InvalidState&&e.isOpen()&&--e._state.PR1398_maxLoop>0?(console.warn("Dexie: Need to reopen db"),e.close({disableAutoOpen:!1}),e.open().then(function(){return fn(e,t,n,r)})):G(a)}return i._promise(t,function(a,o){return ye(function(){return O.trans=i,r(a,o,i)})}).then(function(a){if(t==="readwrite")try{i.idbtrans.commit()}catch{}return t==="readonly"?a:i._completion.then(function(){return a})})}}var pr="4.0.8",De="\uFFFF",hn=-1/0,de="Invalid key provided. Keys must be of type string, number, Date or Array<string | number | Date>.",vr="String expected.",$e=[],_t="__dbnames",dn="readonly",pn="readwrite";function Oe(e,t){return e?t?function(){return e.apply(this,arguments)&&t.apply(this,arguments)}:e:t}var yr={type:3,lower:-1/0,lowerOpen:!1,upper:[[]],upperOpen:!1};function kt(e){return typeof e=="string"&&!/\./.test(e)?function(t){return t[e]===void 0&&e in t&&(t=Ie(t),delete t[e]),t}:function(t){return t}}function mr(){throw K.Type()}function z(e,t){try{var n=gr(e),r=gr(t);if(n!==r)return n==="Array"?1:r==="Array"?-1:n==="binary"?1:r==="binary"?-1:n==="string"?1:r==="string"?-1:n==="Date"?1:r!=="Date"?NaN:-1;switch(n){case"number":case"Date":case"string":return e>t?1:e<t?-1:0;case"binary":return Vi(br(e),br(t));case"Array":return Li(e,t)}}catch{}return NaN}function Li(e,t){for(var n=e.length,r=t.length,i=n<r?n:r,a=0;a<i;++a){var o=z(e[a],t[a]);if(o!==0)return o}return n===r?0:n<r?-1:1}function Vi(e,t){for(var n=e.length,r=t.length,i=n<r?n:r,a=0;a<i;++a)if(e[a]!==t[a])return e[a]<t[a]?-1:1;return n===r?0:n<r?-1:1}function gr(e){var t=typeof e;if(t!=="object")return t;if(ArrayBuffer.isView(e))return"binary";var n=Gt(e);return n==="ArrayBuffer"?"binary":n}function br(e){return e instanceof Uint8Array?e:ArrayBuffer.isView(e)?new Uint8Array(e.buffer,e.byteOffset,e.byteLength):new Uint8Array(e)}var wr=function(){function e(){}return e.prototype._trans=function(t,n,r){var i=this._tx||O.trans,a=this.name,o=ue&&typeof console<"u"&&console.createTask&&console.createTask("Dexie: ".concat(t==="readonly"?"read":"write"," ").concat(this.name));function u(d,l,y){if(!y.schema[a])throw new K.NotFound("Table "+a+" not part of transaction");return n(y.idbtrans,y)}var s=Le();try{var c=i&&i.db._novip===this.db._novip?i===O.trans?i._promise(t,u,r):ye(function(){return i._promise(t,u,r)},{trans:i,transless:O.transless||O}):fn(this.db,t,[this.name],u);return o&&(c._consoleTask=o,c=c.catch(function(d){return console.trace(d),G(d)})),c}finally{s&&Ve()}},e.prototype.get=function(t,n){var r=this;return t&&t.constructor===Object?this.where(t).first(n):t==null?G(new K.Type("Invalid argument to Table.get()")):this._trans("readonly",function(i){return r.core.get({trans:i,key:t}).then(function(a){return r.hook.reading.fire(a)})}).then(n)},e.prototype.where=function(t){if(typeof t=="string")return new this.db.WhereClause(this,t);if(j(t))return new this.db.WhereClause(this,"[".concat(t.join("+"),"]"));var n=N(t);if(n.length===1)return this.where(n[0]).equals(t[n[0]]);var r=this.schema.indexes.concat(this.schema.primKey).filter(function(l){if(l.compound&&n.every(function(E){return l.keyPath.indexOf(E)>=0})){for(var y=0;y<n.length;++y)if(n.indexOf(l.keyPath[y])===-1)return!1;return!0}return!1}).sort(function(l,y){return l.keyPath.length-y.keyPath.length})[0];if(r&&this.db._maxKey!==De){var i=r.keyPath.slice(0,n.length);return this.where(i).equals(i.map(function(l){return t[l]}))}!r&&ue&&console.warn("The query ".concat(JSON.stringify(t)," on ").concat(this.name," would benefit from a ")+"compound index [".concat(n.join("+"),"]"));var a=this.schema.idxByName,o=this.db._deps.indexedDB;function u(l,y){return o.cmp(l,y)===0}var s=n.reduce(function(l,y){var E=l[0],f=l[1],p=a[y],m=t[y];return[E||p,E||!p?Oe(f,p&&p.multi?function(g){var w=fe(g,y);return j(w)&&w.some(function(_){return u(m,_)})}:function(g){return u(m,fe(g,y))}):f]},[null,null]),c=s[0],d=s[1];return c?this.where(c.name).equals(t[c.keyPath]).filter(d):r?this.filter(d):this.where(n).equals("")},e.prototype.filter=function(t){return this.toCollection().and(t)},e.prototype.count=function(t){return this.toCollection().count(t)},e.prototype.offset=function(t){return this.toCollection().offset(t)},e.prototype.limit=function(t){return this.toCollection().limit(t)},e.prototype.each=function(t){return this.toCollection().each(t)},e.prototype.toArray=function(t){return this.toCollection().toArray(t)},e.prototype.toCollection=function(){return new this.db.Collection(new this.db.WhereClause(this))},e.prototype.orderBy=function(t){return new this.db.Collection(new this.db.WhereClause(this,j(t)?"[".concat(t.join("+"),"]"):t))},e.prototype.reverse=function(){return this.toCollection().reverse()},e.prototype.mapToClass=function(t){var n=this,r=n.db,i=n.name;this.schema.mappedClass=t,t.prototype instanceof mr&&(t=function(s){v(c,s);function c(){return s!==null&&s.apply(this,arguments)||this}return Object.defineProperty(c.prototype,"db",{get:function(){return r},enumerable:!1,configurable:!0}),c.prototype.table=function(){return i},c}(t));for(var a=new Set,o=t.prototype;o;o=U(o))Object.getOwnPropertyNames(o).forEach(function(s){return a.add(s)});var u=function(s){if(!s)return s;var c=Object.create(t.prototype);for(var d in s)if(!a.has(d))try{c[d]=s[d]}catch{}return c};return this.schema.readHook&&this.hook.reading.unsubscribe(this.schema.readHook),this.schema.readHook=u,this.hook("reading",u),t},e.prototype.defineClass=function(){function t(n){L(this,n)}return this.mapToClass(t)},e.prototype.add=function(t,n){var r=this,i=this.schema.primKey,a=i.auto,o=i.keyPath,u=t;return o&&a&&(u=kt(o)(t)),this._trans("readwrite",function(s){return r.core.mutate({trans:s,type:"add",keys:n!=null?[n]:null,values:[u]})}).then(function(s){return s.numFailures?S.reject(s.failures[0]):s.lastResult}).then(function(s){if(o)try{ne(t,o,s)}catch{}return s})},e.prototype.update=function(t,n){if(typeof t=="object"&&!j(t)){var r=fe(t,this.schema.primKey.keyPath);return r===void 0?G(new K.InvalidArgument("Given object does not contain its primary key")):this.where(":id").equals(r).modify(n)}else return this.where(":id").equals(t).modify(n)},e.prototype.put=function(t,n){var r=this,i=this.schema.primKey,a=i.auto,o=i.keyPath,u=t;return o&&a&&(u=kt(o)(t)),this._trans("readwrite",function(s){return r.core.mutate({trans:s,type:"put",values:[u],keys:n!=null?[n]:null})}).then(function(s){return s.numFailures?S.reject(s.failures[0]):s.lastResult}).then(function(s){if(o)try{ne(t,o,s)}catch{}return s})},e.prototype.delete=function(t){var n=this;return this._trans("readwrite",function(r){return n.core.mutate({trans:r,type:"delete",keys:[t]})}).then(function(r){return r.numFailures?S.reject(r.failures[0]):void 0})},e.prototype.clear=function(){var t=this;return this._trans("readwrite",function(n){return t.core.mutate({trans:n,type:"deleteRange",range:yr})}).then(function(n){return n.numFailures?S.reject(n.failures[0]):void 0})},e.prototype.bulkGet=function(t){var n=this;return this._trans("readonly",function(r){return n.core.getMany({keys:t,trans:r}).then(function(i){return i.map(function(a){return n.hook.reading.fire(a)})})})},e.prototype.bulkAdd=function(t,n,r){var i=this,a=Array.isArray(n)?n:void 0;r=r||(a?void 0:n);var o=r?r.allKeys:void 0;return this._trans("readwrite",function(u){var s=i.schema.primKey,c=s.auto,d=s.keyPath;if(d&&a)throw new K.InvalidArgument("bulkAdd(): keys argument invalid on tables with inbound keys");if(a&&a.length!==t.length)throw new K.InvalidArgument("Arguments objects and keys must have the same length");var l=t.length,y=d&&c?t.map(kt(d)):t;return i.core.mutate({trans:u,type:"add",keys:a,values:y,wantResults:o}).then(function(E){var f=E.numFailures,p=E.results,m=E.lastResult,g=E.failures,w=o?p:m;if(f===0)return w;throw new Ne("".concat(i.name,".bulkAdd(): ").concat(f," of ").concat(l," operations failed"),g)})})},e.prototype.bulkPut=function(t,n,r){var i=this,a=Array.isArray(n)?n:void 0;r=r||(a?void 0:n);var o=r?r.allKeys:void 0;return this._trans("readwrite",function(u){var s=i.schema.primKey,c=s.auto,d=s.keyPath;if(d&&a)throw new K.InvalidArgument("bulkPut(): keys argument invalid on tables with inbound keys");if(a&&a.length!==t.length)throw new K.InvalidArgument("Arguments objects and keys must have the same length");var l=t.length,y=d&&c?t.map(kt(d)):t;return i.core.mutate({trans:u,type:"put",keys:a,values:y,wantResults:o}).then(function(E){var f=E.numFailures,p=E.results,m=E.lastResult,g=E.failures,w=o?p:m;if(f===0)return w;throw new Ne("".concat(i.name,".bulkPut(): ").concat(f," of ").concat(l," operations failed"),g)})})},e.prototype.bulkUpdate=function(t){var n=this,r=this.core,i=t.map(function(u){return u.key}),a=t.map(function(u){return u.changes}),o=[];return this._trans("readwrite",function(u){return r.getMany({trans:u,keys:i,cache:"clone"}).then(function(s){var c=[],d=[];t.forEach(function(y,E){var f=y.key,p=y.changes,m=s[E];if(m){for(var g=0,w=Object.keys(p);g<w.length;g++){var _=w[g],k=p[_];if(_===n.schema.primKey.keyPath){if(z(k,f)!==0)throw new K.Constraint("Cannot update primary key in bulkUpdate()")}else ne(m,_,k)}o.push(E),c.push(f),d.push(m)}});var l=c.length;return r.mutate({trans:u,type:"put",keys:c,values:d,updates:{keys:i,changeSpecs:a}}).then(function(y){var E=y.numFailures,f=y.failures;if(E===0)return l;for(var p=0,m=Object.keys(f);p<m.length;p++){var g=m[p],w=o[Number(g)];if(w!=null){var _=f[g];delete f[g],f[w]=_}}throw new Ne("".concat(n.name,".bulkUpdate(): ").concat(E," of ").concat(l," operations failed"),f)})})})},e.prototype.bulkDelete=function(t){var n=this,r=t.length;return this._trans("readwrite",function(i){return n.core.mutate({trans:i,type:"delete",keys:t})}).then(function(i){var a=i.numFailures,o=i.lastResult,u=i.failures;if(a===0)return o;throw new Ne("".concat(n.name,".bulkDelete(): ").concat(a," of ").concat(r," operations failed"),u)})},e}();function et(e){var t={},n=function(u,s){if(s){for(var c=arguments.length,d=new Array(c-1);--c;)d[c-1]=arguments[c];return t[u].subscribe.apply(null,d),e}else if(typeof u=="string")return t[u]};n.addEventType=a;for(var r=1,i=arguments.length;r<i;++r)a(arguments[r]);return n;function a(u,s,c){if(typeof u=="object")return o(u);s||(s=Pi),c||(c=W);var d={subscribers:[],fire:c,subscribe:function(l){d.subscribers.indexOf(l)===-1&&(d.subscribers.push(l),d.fire=s(d.fire,l))},unsubscribe:function(l){d.subscribers=d.subscribers.filter(function(y){return y!==l}),d.fire=d.subscribers.reduce(s,c)}};return t[u]=n[u]=d,d}function o(u){N(u).forEach(function(s){var c=u[s];if(j(c))a(s,u[s][0],u[s][1]);else if(c==="asap")var d=a(s,Ge,function(){for(var y=arguments.length,E=new Array(y);y--;)E[y]=arguments[y];d.subscribers.forEach(function(f){Jn(function(){f.apply(null,E)})})});else throw new K.InvalidArgument("Invalid event config")})}}function tt(e,t){return Be(t).from({prototype:e}),t}function zi(e){return tt(wr.prototype,function(n,r,i){this.db=e,this._tx=i,this.name=n,this.schema=r,this.hook=e._allTables[n]?e._allTables[n].hook:et(null,{creating:[Ei,W],reading:[ki,Ge],updating:[Si,W],deleting:[Ii,W]})})}function We(e,t){return!(e.filter||e.algorithm||e.or)&&(t?e.justLimit:!e.replayFilter)}function vn(e,t){e.filter=Oe(e.filter,t)}function yn(e,t,n){var r=e.replayFilter;e.replayFilter=r?function(){return Oe(r(),t())}:t,e.justLimit=n&&!r}function $i(e,t){e.isMatch=Oe(e.isMatch,t)}function Et(e,t){if(e.isPrimKey)return t.primaryKey;var n=t.getIndexByKeyPath(e.index);if(!n)throw new K.Schema("KeyPath "+e.index+" on object store "+t.name+" is not indexed");return n}function xr(e,t,n){var r=Et(e,t.schema);return t.openCursor({trans:n,values:!e.keysOnly,reverse:e.dir==="prev",unique:!!e.unique,query:{index:r,range:e.range}})}function It(e,t,n,r){var i=e.replayFilter?Oe(e.filter,e.replayFilter()):e.filter;if(e.or){var a={},o=function(u,s,c){if(!i||i(s,c,function(y){return s.stop(y)},function(y){return s.fail(y)})){var d=s.primaryKey,l=""+d;l==="[object ArrayBuffer]"&&(l=""+new Uint8Array(d)),$(a,l)||(a[l]=!0,t(u,s,c))}};return Promise.all([e.or._iterate(o,n),_r(xr(e,r,n),e.algorithm,o,!e.keysOnly&&e.valueMapper)])}else return _r(xr(e,r,n),Oe(e.algorithm,i),t,!e.keysOnly&&e.valueMapper)}function _r(e,t,n,r){var i=r?function(o,u,s){return n(r(o),u,s)}:n,a=Y(i);return e.then(function(o){if(o)return o.start(function(){var u=function(){return o.continue()};(!t||t(o,function(s){return u=s},function(s){o.stop(s),u=W},function(s){o.fail(s),u=W}))&&a(o.value,o,function(s){return u=s}),u()})})}var Wi=Symbol(),nt=function(){function e(t){Object.assign(this,t)}return e.prototype.execute=function(t){var n;if(this.add!==void 0){var r=this.add;if(j(r))return C(C([],j(t)?t:[],!0),r,!0).sort();if(typeof r=="number")return(Number(t)||0)+r;if(typeof r=="bigint")try{return BigInt(t)+r}catch{return BigInt(0)+r}throw new TypeError("Invalid term ".concat(r))}if(this.remove!==void 0){var i=this.remove;if(j(i))return j(t)?t.filter(function(o){return!i.includes(o)}).sort():[];if(typeof i=="number")return Number(t)-i;if(typeof i=="bigint")try{return BigInt(t)-i}catch{return BigInt(0)-i}throw new TypeError("Invalid subtrahend ".concat(i))}var a=(n=this.replacePrefix)===null||n===void 0?void 0:n[0];return a&&typeof t=="string"&&t.startsWith(a)?this.replacePrefix[1]+t.substring(a.length):t},e}(),Qi=function(){function e(){}return e.prototype._read=function(t,n){var r=this._ctx;return r.error?r.table._trans(null,G.bind(null,r.error)):r.table._trans("readonly",t).then(n)},e.prototype._write=function(t){var n=this._ctx;return n.error?n.table._trans(null,G.bind(null,n.error)):n.table._trans("readwrite",t,"locked")},e.prototype._addAlgorithm=function(t){var n=this._ctx;n.algorithm=Oe(n.algorithm,t)},e.prototype._iterate=function(t,n){return It(this._ctx,t,n,this._ctx.table.core)},e.prototype.clone=function(t){var n=Object.create(this.constructor.prototype),r=Object.create(this._ctx);return t&&L(r,t),n._ctx=r,n},e.prototype.raw=function(){return this._ctx.valueMapper=null,this},e.prototype.each=function(t){var n=this._ctx;return this._read(function(r){return It(n,t,r,n.table.core)})},e.prototype.count=function(t){var n=this;return this._read(function(r){var i=n._ctx,a=i.table.core;if(We(i,!0))return a.count({trans:r,query:{index:Et(i,a.schema),range:i.range}}).then(function(u){return Math.min(u,i.limit)});var o=0;return It(i,function(){return++o,!1},r,a).then(function(){return o})}).then(t)},e.prototype.sortBy=function(t,n){var r=t.split(".").reverse(),i=r[0],a=r.length-1;function o(c,d){return d?o(c[r[d]],d-1):c[i]}var u=this._ctx.dir==="next"?1:-1;function s(c,d){var l=o(c,a),y=o(d,a);return l<y?-u:l>y?u:0}return this.toArray(function(c){return c.sort(s)}).then(n)},e.prototype.toArray=function(t){var n=this;return this._read(function(r){var i=n._ctx;if(i.dir==="next"&&We(i,!0)&&i.limit>0){var a=i.valueMapper,o=Et(i,i.table.core.schema);return i.table.core.query({trans:r,limit:i.limit,values:!0,query:{index:o,range:i.range}}).then(function(s){var c=s.result;return a?c.map(a):c})}else{var u=[];return It(i,function(s){return u.push(s)},r,i.table.core).then(function(){return u})}},t)},e.prototype.offset=function(t){var n=this._ctx;return t<=0?this:(n.offset+=t,We(n)?yn(n,function(){var r=t;return function(i,a){return r===0?!0:r===1?(--r,!1):(a(function(){i.advance(r),r=0}),!1)}}):yn(n,function(){var r=t;return function(){return--r<0}}),this)},e.prototype.limit=function(t){return this._ctx.limit=Math.min(this._ctx.limit,t),yn(this._ctx,function(){var n=t;return function(r,i,a){return--n<=0&&i(a),n>=0}},!0),this},e.prototype.until=function(t,n){return vn(this._ctx,function(r,i,a){return t(r.value)?(i(a),n):!0}),this},e.prototype.first=function(t){return this.limit(1).toArray(function(n){return n[0]}).then(t)},e.prototype.last=function(t){return this.reverse().first(t)},e.prototype.filter=function(t){return vn(this._ctx,function(n){return t(n.value)}),$i(this._ctx,t),this},e.prototype.and=function(t){return this.filter(t)},e.prototype.or=function(t){return new this.db.WhereClause(this._ctx.table,t,this)},e.prototype.reverse=function(){return this._ctx.dir=this._ctx.dir==="prev"?"next":"prev",this._ondirectionchange&&this._ondirectionchange(this._ctx.dir),this},e.prototype.desc=function(){return this.reverse()},e.prototype.eachKey=function(t){var n=this._ctx;return n.keysOnly=!n.isMatch,this.each(function(r,i){t(i.key,i)})},e.prototype.eachUniqueKey=function(t){return this._ctx.unique="unique",this.eachKey(t)},e.prototype.eachPrimaryKey=function(t){var n=this._ctx;return n.keysOnly=!n.isMatch,this.each(function(r,i){t(i.primaryKey,i)})},e.prototype.keys=function(t){var n=this._ctx;n.keysOnly=!n.isMatch;var r=[];return this.each(function(i,a){r.push(a.key)}).then(function(){return r}).then(t)},e.prototype.primaryKeys=function(t){var n=this._ctx;if(n.dir==="next"&&We(n,!0)&&n.limit>0)return this._read(function(i){var a=Et(n,n.table.core.schema);return n.table.core.query({trans:i,values:!1,limit:n.limit,query:{index:a,range:n.range}})}).then(function(i){var a=i.result;return a}).then(t);n.keysOnly=!n.isMatch;var r=[];return this.each(function(i,a){r.push(a.primaryKey)}).then(function(){return r}).then(t)},e.prototype.uniqueKeys=function(t){return this._ctx.unique="unique",this.keys(t)},e.prototype.firstKey=function(t){return this.limit(1).keys(function(n){return n[0]}).then(t)},e.prototype.lastKey=function(t){return this.reverse().firstKey(t)},e.prototype.distinct=function(){var t=this._ctx,n=t.index&&t.table.schema.idxByName[t.index];if(!n||!n.multi)return this;var r={};return vn(this._ctx,function(i){var a=i.primaryKey.toString(),o=$(r,a);return r[a]=!0,!o}),this},e.prototype.modify=function(t){var n=this,r=this._ctx;return this._write(function(i){var a;if(typeof t=="function")a=t;else{var o=N(t),u=o.length;a=function(g){for(var w=!1,_=0;_<u;++_){var k=o[_],x=t[k],I=fe(g,k);x instanceof nt?(ne(g,k,x.execute(I)),w=!0):I!==x&&(ne(g,k,x),w=!0)}return w}}var s=r.table.core,c=s.schema.primaryKey,d=c.outbound,l=c.extractKey,y=n.db._options.modifyChunkSize||200,E=[],f=0,p=[],m=function(g,w){var _=w.failures,k=w.numFailures;f+=g-k;for(var x=0,I=N(_);x<I.length;x++){var P=I[x];E.push(_[P])}};return n.clone().primaryKeys().then(function(g){var w=We(r)&&r.limit===1/0&&(typeof t!="function"||t===mn)&&{index:r.index,range:r.range},_=function(k){var x=Math.min(y,g.length-k);return s.getMany({trans:i,keys:g.slice(k,k+x),cache:"immutable"}).then(function(I){for(var P=[],T=[],B=d?[]:null,A=[],R=0;R<x;++R){var V=I[R],F={value:Ie(V),primKey:g[k+R]};a.call(F,F.value,F)!==!1&&(F.value==null?A.push(g[k+R]):!d&&z(l(V),l(F.value))!==0?(A.push(g[k+R]),P.push(F.value)):(T.push(F.value),d&&B.push(g[k+R])))}return Promise.resolve(P.length>0&&s.mutate({trans:i,type:"add",values:P}).then(function(Q){for(var M in Q.failures)A.splice(parseInt(M),1);m(P.length,Q)})).then(function(){return(T.length>0||w&&typeof t=="object")&&s.mutate({trans:i,type:"put",keys:B,values:T,criteria:w,changeSpec:typeof t!="function"&&t,isAdditionalChunk:k>0}).then(function(Q){return m(T.length,Q)})}).then(function(){return(A.length>0||w&&t===mn)&&s.mutate({trans:i,type:"delete",keys:A,criteria:w,isAdditionalChunk:k>0}).then(function(Q){return m(A.length,Q)})}).then(function(){return g.length>k+x&&_(k+y)})})};return _(0).then(function(){if(E.length>0)throw new ht("Error modifying one or more objects",E,f,p);return g.length})})})},e.prototype.delete=function(){var t=this._ctx,n=t.range;return We(t)&&(t.isPrimKey||n.type===3)?this._write(function(r){var i=t.table.core.schema.primaryKey,a=n;return t.table.core.count({trans:r,query:{index:i,range:a}}).then(function(o){return t.table.core.mutate({trans:r,type:"deleteRange",range:a}).then(function(u){var s=u.failures;u.lastResult,u.results;var c=u.numFailures;if(c)throw new ht("Could not delete some values",Object.keys(s).map(function(d){return s[d]}),o-c);return o-c})})}):this.modify(mn)},e}(),mn=function(e,t){return t.value=null};function Hi(e){return tt(Qi.prototype,function(n,r){this.db=e;var i=yr,a=null;if(r)try{i=r()}catch(c){a=c}var o=n._ctx,u=o.table,s=u.hook.reading.fire;this._ctx={table:u,index:o.index,isPrimKey:!o.index||u.schema.primKey.keyPath&&o.index===u.schema.primKey.name,range:i,keysOnly:!1,dir:"next",unique:"",algorithm:null,filter:null,replayFilter:null,justLimit:!0,isMatch:null,offset:0,limit:1/0,error:a,or:o.or,valueMapper:s!==Ge?s:null}})}function Yi(e,t){return e<t?-1:e===t?0:1}function Ui(e,t){return e>t?-1:e===t?0:1}function re(e,t,n){var r=e instanceof Er?new e.Collection(e):e;return r._ctx.error=n?new n(t):new TypeError(t),r}function Qe(e){return new e.Collection(e,function(){return kr("")}).limit(0)}function Gi(e){return e==="next"?function(t){return t.toUpperCase()}:function(t){return t.toLowerCase()}}function Xi(e){return e==="next"?function(t){return t.toLowerCase()}:function(t){return t.toUpperCase()}}function Ji(e,t,n,r,i,a){for(var o=Math.min(e.length,r.length),u=-1,s=0;s<o;++s){var c=t[s];if(c!==r[s])return i(e[s],n[s])<0?e.substr(0,s)+n[s]+n.substr(s+1):i(e[s],r[s])<0?e.substr(0,s)+r[s]+n.substr(s+1):u>=0?e.substr(0,u)+t[u]+n.substr(u+1):null;i(e[s],c)<0&&(u=s)}return o<r.length&&a==="next"?e+n.substr(e.length):o<e.length&&a==="prev"?e.substr(0,n.length):u<0?null:e.substr(0,u)+r[u]+n.substr(u+1)}function St(e,t,n,r){var i,a,o,u,s,c,d,l=n.length;if(!n.every(function(p){return typeof p=="string"}))return re(e,vr);function y(p){i=Gi(p),a=Xi(p),o=p==="next"?Yi:Ui;var m=n.map(function(g){return{lower:a(g),upper:i(g)}}).sort(function(g,w){return o(g.lower,w.lower)});u=m.map(function(g){return g.upper}),s=m.map(function(g){return g.lower}),c=p,d=p==="next"?"":r}y("next");var E=new e.Collection(e,function(){return be(u[0],s[l-1]+r)});E._ondirectionchange=function(p){y(p)};var f=0;return E._addAlgorithm(function(p,m,g){var w=p.key;if(typeof w!="string")return!1;var _=a(w);if(t(_,s,f))return!0;for(var k=null,x=f;x<l;++x){var I=Ji(w,_,u[x],s[x],o,c);I===null&&k===null?f=x+1:(k===null||o(k,I)>0)&&(k=I)}return m(k!==null?function(){p.continue(k+d)}:g),!1}),E}function be(e,t,n,r){return{type:2,lower:e,upper:t,lowerOpen:n,upperOpen:r}}function kr(e){return{type:1,lower:e,upper:e}}var Er=function(){function e(){}return Object.defineProperty(e.prototype,"Collection",{get:function(){return this._ctx.table.db.Collection},enumerable:!1,configurable:!0}),e.prototype.between=function(t,n,r,i){r=r!==!1,i=i===!0;try{return this._cmp(t,n)>0||this._cmp(t,n)===0&&(r||i)&&!(r&&i)?Qe(this):new this.Collection(this,function(){return be(t,n,!r,!i)})}catch{return re(this,de)}},e.prototype.equals=function(t){return t==null?re(this,de):new this.Collection(this,function(){return kr(t)})},e.prototype.above=function(t){return t==null?re(this,de):new this.Collection(this,function(){return be(t,void 0,!0)})},e.prototype.aboveOrEqual=function(t){return t==null?re(this,de):new this.Collection(this,function(){return be(t,void 0,!1)})},e.prototype.below=function(t){return t==null?re(this,de):new this.Collection(this,function(){return be(void 0,t,!1,!0)})},e.prototype.belowOrEqual=function(t){return t==null?re(this,de):new this.Collection(this,function(){return be(void 0,t)})},e.prototype.startsWith=function(t){return typeof t!="string"?re(this,vr):this.between(t,t+De,!0,!0)},e.prototype.startsWithIgnoreCase=function(t){return t===""?this.startsWith(t):St(this,function(n,r){return n.indexOf(r[0])===0},[t],De)},e.prototype.equalsIgnoreCase=function(t){return St(this,function(n,r){return n===r[0]},[t],"")},e.prototype.anyOfIgnoreCase=function(){var t=he.apply(Fe,arguments);return t.length===0?Qe(this):St(this,function(n,r){return r.indexOf(n)!==-1},t,"")},e.prototype.startsWithAnyOfIgnoreCase=function(){var t=he.apply(Fe,arguments);return t.length===0?Qe(this):St(this,function(n,r){return r.some(function(i){return n.indexOf(i)===0})},t,De)},e.prototype.anyOf=function(){var t=this,n=he.apply(Fe,arguments),r=this._cmp;try{n.sort(r)}catch{return re(this,de)}if(n.length===0)return Qe(this);var i=new this.Collection(this,function(){return be(n[0],n[n.length-1])});i._ondirectionchange=function(o){r=o==="next"?t._ascending:t._descending,n.sort(r)};var a=0;return i._addAlgorithm(function(o,u,s){for(var c=o.key;r(c,n[a])>0;)if(++a,a===n.length)return u(s),!1;return r(c,n[a])===0?!0:(u(function(){o.continue(n[a])}),!1)}),i},e.prototype.notEqual=function(t){return this.inAnyRange([[hn,t],[t,this.db._maxKey]],{includeLowers:!1,includeUppers:!1})},e.prototype.noneOf=function(){var t=he.apply(Fe,arguments);if(t.length===0)return new this.Collection(this);try{t.sort(this._ascending)}catch{return re(this,de)}var n=t.reduce(function(r,i){return r?r.concat([[r[r.length-1][1],i]]):[[hn,i]]},null);return n.push([t[t.length-1],this.db._maxKey]),this.inAnyRange(n,{includeLowers:!1,includeUppers:!1})},e.prototype.inAnyRange=function(t,n){var r=this,i=this._cmp,a=this._ascending,o=this._descending,u=this._min,s=this._max;if(t.length===0)return Qe(this);if(!t.every(function(x){return x[0]!==void 0&&x[1]!==void 0&&a(x[0],x[1])<=0}))return re(this,"First argument to inAnyRange() must be an Array of two-value Arrays [lower,upper] where upper must not be lower than lower",K.InvalidArgument);var c=!n||n.includeLowers!==!1,d=n&&n.includeUppers===!0;function l(x,I){for(var P=0,T=x.length;P<T;++P){var B=x[P];if(i(I[0],B[1])<0&&i(I[1],B[0])>0){B[0]=u(B[0],I[0]),B[1]=s(B[1],I[1]);break}}return P===T&&x.push(I),x}var y=a;function E(x,I){return y(x[0],I[0])}var f;try{f=t.reduce(l,[]),f.sort(E)}catch{return re(this,de)}var p=0,m=d?function(x){return a(x,f[p][1])>0}:function(x){return a(x,f[p][1])>=0},g=c?function(x){return o(x,f[p][0])>0}:function(x){return o(x,f[p][0])>=0};function w(x){return!m(x)&&!g(x)}var _=m,k=new this.Collection(this,function(){return be(f[0][0],f[f.length-1][1],!c,!d)});return k._ondirectionchange=function(x){x==="next"?(_=m,y=a):(_=g,y=o),f.sort(E)},k._addAlgorithm(function(x,I,P){for(var T=x.key;_(T);)if(++p,p===f.length)return I(P),!1;return w(T)?!0:(r._cmp(T,f[p][1])===0||r._cmp(T,f[p][0])===0||I(function(){y===a?x.continue(f[p][0]):x.continue(f[p][1])}),!1)}),k},e.prototype.startsWithAnyOf=function(){var t=he.apply(Fe,arguments);return t.every(function(n){return typeof n=="string"})?t.length===0?Qe(this):this.inAnyRange(t.map(function(n){return[n,n+De]})):re(this,"startsWithAnyOf() only works with strings")},e}();function Zi(e){return tt(Er.prototype,function(n,r,i){if(this.db=e,this._ctx={table:n,index:r===":id"?null:r,or:i},this._cmp=this._ascending=z,this._descending=function(a,o){return z(o,a)},this._max=function(a,o){return z(a,o)>0?a:o},this._min=function(a,o){return z(a,o)<0?a:o},this._IDBKeyRange=e._deps.IDBKeyRange,!this._IDBKeyRange)throw new K.MissingAPI})}function se(e){return Y(function(t){return rt(t),e(t.target.error),!1})}function rt(e){e.stopPropagation&&e.stopPropagation(),e.preventDefault&&e.preventDefault()}var it="storagemutated",gn="x-storagemutated-1",we=et(null,it),qi=function(){function e(){}return e.prototype._lock=function(){return Ye(!O.global),++this._reculock,this._reculock===1&&!O.global&&(O.lockOwnerFor=this),this},e.prototype._unlock=function(){if(Ye(!O.global),--this._reculock===0)for(O.global||(O.lockOwnerFor=null);this._blockedFuncs.length>0&&!this._locked();){var t=this._blockedFuncs.shift();try{Ae(t[1],t[0])}catch{}}return this},e.prototype._locked=function(){return this._reculock&&O.lockOwnerFor!==this},e.prototype.create=function(t){var n=this;if(!this.mode)return this;var r=this.db.idbdb,i=this.db._state.dbOpenError;if(Ye(!this.idbtrans),!t&&!r)switch(i&&i.name){case"DatabaseClosedError":throw new K.DatabaseClosed(i);case"MissingAPIError":throw new K.MissingAPI(i.message,i);default:throw new K.OpenFailed(i)}if(!this.active)throw new K.TransactionInactive;return Ye(this._completion._state===null),t=this.idbtrans=t||(this.db.core?this.db.core.transaction(this.storeNames,this.mode,{durability:this.chromeTransactionDurability}):r.transaction(this.storeNames,this.mode,{durability:this.chromeTransactionDurability})),t.onerror=Y(function(a){rt(a),n._reject(t.error)}),t.onabort=Y(function(a){rt(a),n.active&&n._reject(new K.Abort(t.error)),n.active=!1,n.on("abort").fire(a)}),t.oncomplete=Y(function(){n.active=!1,n._resolve(),"mutatedParts"in t&&we.storagemutated.fire(t.mutatedParts)}),this},e.prototype._promise=function(t,n,r){var i=this;if(t==="readwrite"&&this.mode!=="readwrite")return G(new K.ReadOnly("Transaction is readonly"));if(!this.active)return G(new K.TransactionInactive);if(this._locked())return new S(function(o,u){i._blockedFuncs.push([function(){i._promise(t,n,r).then(o,u)},O])});if(r)return ye(function(){var o=new S(function(u,s){i._lock();var c=n(u,s,i);c&&c.then&&c.then(u,s)});return o.finally(function(){return i._unlock()}),o._lib=!0,o});var a=new S(function(o,u){var s=n(o,u,i);s&&s.then&&s.then(o,u)});return a._lib=!0,a},e.prototype._root=function(){return this.parent?this.parent._root():this},e.prototype.waitFor=function(t){var n=this._root(),r=S.resolve(t);if(n._waitingFor)n._waitingFor=n._waitingFor.then(function(){return r});else{n._waitingFor=r,n._waitingQueue=[];var i=n.idbtrans.objectStore(n.storeNames[0]);(function o(){for(++n._spinCount;n._waitingQueue.length;)n._waitingQueue.shift()();n._waitingFor&&(i.get(-1/0).onsuccess=o)})()}var a=n._waitingFor;return new S(function(o,u){r.then(function(s){return n._waitingQueue.push(Y(o.bind(null,s)))},function(s){return n._waitingQueue.push(Y(u.bind(null,s)))}).finally(function(){n._waitingFor===a&&(n._waitingFor=null)})})},e.prototype.abort=function(){this.active&&(this.active=!1,this.idbtrans&&this.idbtrans.abort(),this._reject(new K.Abort))},e.prototype.table=function(t){var n=this._memoizedTables||(this._memoizedTables={});if($(n,t))return n[t];var r=this.schema[t];if(!r)throw new K.NotFound("Table "+t+" not part of transaction");var i=new this.db.Table(t,r,this);return i.core=this.db.core.table(t),n[t]=i,i},e}();function ea(e){return tt(qi.prototype,function(n,r,i,a,o){var u=this;this.db=e,this.mode=n,this.storeNames=r,this.schema=i,this.chromeTransactionDurability=a,this.idbtrans=null,this.on=et(this,"complete","error","abort"),this.parent=o||null,this.active=!0,this._reculock=0,this._blockedFuncs=[],this._resolve=null,this._reject=null,this._waitingFor=null,this._waitingQueue=null,this._spinCount=0,this._completion=new S(function(s,c){u._resolve=s,u._reject=c}),this._completion.then(function(){u.active=!1,u.on.complete.fire()},function(s){var c=u.active;return u.active=!1,u.on.error.fire(s),u.parent?u.parent._reject(s):c&&u.idbtrans&&u.idbtrans.abort(),G(s)})})}function bn(e,t,n,r,i,a,o){return{name:e,keyPath:t,unique:n,multi:r,auto:i,compound:a,src:(n&&!o?"&":"")+(r?"*":"")+(i?"++":"")+Ir(t)}}function Ir(e){return typeof e=="string"?e:e?"["+[].join.call(e,"+")+"]":""}function wn(e,t,n){return{name:e,primKey:t,indexes:n,mappedClass:null,idxByName:hi(n,function(r){return[r.name,r]})}}function ta(e){return e.length===1?e[0]:e}var at=function(e){try{return e.only([[]]),at=function(){return[[]]},[[]]}catch{return at=function(){return De},De}};function xn(e){return e==null?function(){}:typeof e=="string"?na(e):function(t){return fe(t,e)}}function na(e){var t=e.split(".");return t.length===1?function(n){return n[e]}:function(n){return fe(n,e)}}function Sr(e){return[].slice.call(e)}var ra=0;function ot(e){return e==null?":id":typeof e=="string"?e:"[".concat(e.join("+"),"]")}function ia(e,t,n){function r(l,y){var E=Sr(l.objectStoreNames);return{schema:{name:l.name,tables:E.map(function(f){return y.objectStore(f)}).map(function(f){var p=f.keyPath,m=f.autoIncrement,g=j(p),w=p==null,_={},k={name:f.name,primaryKey:{name:null,isPrimaryKey:!0,outbound:w,compound:g,keyPath:p,autoIncrement:m,unique:!0,extractKey:xn(p)},indexes:Sr(f.indexNames).map(function(x){return f.index(x)}).map(function(x){var I=x.name,P=x.unique,T=x.multiEntry,B=x.keyPath,A=j(B),R={name:I,compound:A,keyPath:B,unique:P,multiEntry:T,extractKey:xn(B)};return _[ot(B)]=R,R}),getIndexByKeyPath:function(x){return _[ot(x)]}};return _[":id"]=k.primaryKey,p!=null&&(_[ot(p)]=k.primaryKey),k})},hasGetAll:E.length>0&&"getAll"in y.objectStore(E[0])&&!(typeof navigator<"u"&&/Safari/.test(navigator.userAgent)&&!/(Chrome\/|Edge\/)/.test(navigator.userAgent)&&[].concat(navigator.userAgent.match(/Safari\/(\d*)/))[1]<604)}}function i(l){if(l.type===3)return null;if(l.type===4)throw new Error("Cannot convert never type to IDBKeyRange");var y=l.lower,E=l.upper,f=l.lowerOpen,p=l.upperOpen,m=y===void 0?E===void 0?null:t.upperBound(E,!!p):E===void 0?t.lowerBound(y,!!f):t.bound(y,E,!!f,!!p);return m}function a(l){var y=l.name;function E(m){var g=m.trans,w=m.type,_=m.keys,k=m.values,x=m.range;return new Promise(function(I,P){I=Y(I);var T=g.objectStore(y),B=T.keyPath==null,A=w==="put"||w==="add";if(!A&&w!=="delete"&&w!=="deleteRange")throw new Error("Invalid operation type: "+w);var R=(_||k||{length:1}).length;if(_&&k&&_.length!==k.length)throw new Error("Given keys array must have same length as given values array.");if(R===0)return I({numFailures:0,failures:{},results:[],lastResult:void 0});var V,F=[],Q=[],M=0,J=function(le){++M,rt(le)};if(w==="deleteRange"){if(x.type===4)return I({numFailures:M,failures:Q,results:[],lastResult:void 0});x.type===3?F.push(V=T.clear()):F.push(V=T.delete(i(x)))}else{var ae=A?B?[k,_]:[k,null]:[_,null],ke=ae[0],ce=ae[1];if(A)for(var ie=0;ie<R;++ie)F.push(V=ce&&ce[ie]!==void 0?T[w](ke[ie],ce[ie]):T[w](ke[ie])),V.onerror=J;else for(var ie=0;ie<R;++ie)F.push(V=T[w](ke[ie])),V.onerror=J}var Ee=function(le){var ct=le.target.result;F.forEach(function(oe,jt){return oe.error!=null&&(Q[jt]=oe.error)}),I({numFailures:M,failures:Q,results:w==="delete"?_:F.map(function(oe){return oe.result}),lastResult:ct})};V.onerror=function(le){J(le),Ee(le)},V.onsuccess=Ee})}function f(m){var g=m.trans,w=m.values,_=m.query,k=m.reverse,x=m.unique;return new Promise(function(I,P){I=Y(I);var T=_.index,B=_.range,A=g.objectStore(y),R=T.isPrimaryKey?A:A.index(T.name),V=k?x?"prevunique":"prev":x?"nextunique":"next",F=w||!("openKeyCursor"in R)?R.openCursor(i(B),V):R.openKeyCursor(i(B),V);F.onerror=se(P),F.onsuccess=Y(function(Q){var M=F.result;if(!M){I(null);return}M.___id=++ra,M.done=!1;var J=M.continue.bind(M),ae=M.continuePrimaryKey;ae&&(ae=ae.bind(M));var ke=M.advance.bind(M),ce=function(){throw new Error("Cursor not started")},ie=function(){throw new Error("Cursor not stopped")};M.trans=g,M.stop=M.continue=M.continuePrimaryKey=M.advance=ce,M.fail=Y(P),M.next=function(){var Ee=this,le=1;return this.start(function(){return le--?Ee.continue():Ee.stop()}).then(function(){return Ee})},M.start=function(Ee){var le=new Promise(function(oe,jt){oe=Y(oe),F.onerror=se(jt),M.fail=jt,M.stop=function(Qa){M.stop=M.continue=M.continuePrimaryKey=M.advance=ie,oe(Qa)}}),ct=function(){if(F.result)try{Ee()}catch(oe){M.fail(oe)}else M.done=!0,M.start=function(){throw new Error("Cursor behind last entry")},M.stop()};return F.onsuccess=Y(function(oe){F.onsuccess=ct,ct()}),M.continue=J,M.continuePrimaryKey=ae,M.advance=ke,ct(),le},I(M)},P)})}function p(m){return function(g){return new Promise(function(w,_){w=Y(w);var k=g.trans,x=g.values,I=g.limit,P=g.query,T=I===1/0?void 0:I,B=P.index,A=P.range,R=k.objectStore(y),V=B.isPrimaryKey?R:R.index(B.name),F=i(A);if(I===0)return w({result:[]});if(m){var Q=x?V.getAll(F,T):V.getAllKeys(F,T);Q.onsuccess=function(ke){return w({result:ke.target.result})},Q.onerror=se(_)}else{var M=0,J=x||!("openKeyCursor"in V)?V.openCursor(F):V.openKeyCursor(F),ae=[];J.onsuccess=function(ke){var ce=J.result;if(!ce)return w({result:ae});if(ae.push(x?ce.value:ce.primaryKey),++M===I)return w({result:ae});ce.continue()},J.onerror=se(_)}})}}return{name:y,schema:l,mutate:E,getMany:function(m){var g=m.trans,w=m.keys;return new Promise(function(_,k){_=Y(_);for(var x=g.objectStore(y),I=w.length,P=new Array(I),T=0,B=0,A,R=function(M){var J=M.target;(P[J._pos]=J.result)!=null,++B===T&&_(P)},V=se(k),F=0;F<I;++F){var Q=w[F];Q!=null&&(A=x.get(w[F]),A._pos=F,A.onsuccess=R,A.onerror=V,++T)}T===0&&_(P)})},get:function(m){var g=m.trans,w=m.key;return new Promise(function(_,k){_=Y(_);var x=g.objectStore(y),I=x.get(w);I.onsuccess=function(P){return _(P.target.result)},I.onerror=se(k)})},query:p(s),openCursor:f,count:function(m){var g=m.query,w=m.trans,_=g.index,k=g.range;return new Promise(function(x,I){var P=w.objectStore(y),T=_.isPrimaryKey?P:P.index(_.name),B=i(k),A=B?T.count(B):T.count();A.onsuccess=Y(function(R){return x(R.target.result)}),A.onerror=se(I)})}}}var o=r(e,n),u=o.schema,s=o.hasGetAll,c=u.tables.map(function(l){return a(l)}),d={};return c.forEach(function(l){return d[l.name]=l}),{stack:"dbcore",transaction:e.transaction.bind(e),table:function(l){var y=d[l];if(!y)throw new Error("Table '".concat(l,"' not found"));return d[l]},MIN_KEY:-1/0,MAX_KEY:at(t),schema:u}}function aa(e,t){return t.reduce(function(n,r){var i=r.create;return b(b({},n),i(n))},e)}function oa(e,t,n,r){var i=n.IDBKeyRange;n.indexedDB;var a=aa(ia(t,i,r),e.dbcore);return{dbcore:a}}function Pt(e,t){var n=t.db,r=oa(e._middlewares,n,e._deps,t);e.core=r.dbcore,e.tables.forEach(function(i){var a=i.name;e.core.schema.tables.some(function(o){return o.name===a})&&(i.core=e.core.table(a),e[a]instanceof e.Table&&(e[a].core=i.core))})}function Ct(e,t,n,r){n.forEach(function(i){var a=r[i];t.forEach(function(o){var u=Gn(o,i);(!u||"value"in u&&u.value===void 0)&&(o===e.Transaction.prototype||o instanceof e.Transaction?te(o,i,{get:function(){return this.table(i)},set:function(s){q(this,i,{value:s,writable:!0,configurable:!0,enumerable:!0})}}):o[i]=new e.Table(i,a))})})}function _n(e,t){t.forEach(function(n){for(var r in n)n[r]instanceof e.Table&&delete n[r]})}function ua(e,t){return e._cfg.version-t._cfg.version}function sa(e,t,n,r){var i=e._dbSchema;n.objectStoreNames.contains("$meta")&&!i.$meta&&(i.$meta=wn("$meta",Cr("")[0],[]),e._storeNames.push("$meta"));var a=e._createTransaction("readwrite",e._storeNames,i);a.create(n),a._completion.catch(r);var o=a._reject.bind(a),u=O.transless||O;ye(function(){if(O.trans=a,O.transless=u,t===0)N(i).forEach(function(s){En(n,s,i[s].primKey,i[s].indexes)}),Pt(e,n),S.follow(function(){return e.on.populate.fire(a)}).catch(o);else return Pt(e,n),la(e,a,t).then(function(s){return fa(e,s,a,n)}).catch(o)})}function ca(e,t){Pr(e._dbSchema,t),t.db.version%10===0&&!t.objectStoreNames.contains("$meta")&&t.db.createObjectStore("$meta").add(Math.ceil(t.db.version/10-1),"version");var n=At(e,e.idbdb,t);Dt(e,e._dbSchema,t);for(var r=kn(n,e._dbSchema),i=function(c){if(c.change.length||c.recreate)return console.warn("Unable to patch indexes of table ".concat(c.name," because it has changes on the type of index or primary key.")),{value:void 0};var d=t.objectStore(c.name);c.add.forEach(function(l){ue&&console.debug("Dexie upgrade patch: Creating missing index ".concat(c.name,".").concat(l.src)),Tt(d,l)})},a=0,o=r.change;a<o.length;a++){var u=o[a],s=i(u);if(typeof s=="object")return s.value}}function la(e,t,n){return t.storeNames.includes("$meta")?t.table("$meta").get("version").then(function(r){return r??n}):S.resolve(n)}function fa(e,t,n,r){var i=[],a=e._versions,o=e._dbSchema=At(e,e.idbdb,r),u=a.filter(function(c){return c._cfg.version>=t});if(u.length===0)return S.resolve();u.forEach(function(c){i.push(function(){var d=o,l=c._cfg.dbschema;Dt(e,d,r),Dt(e,l,r),o=e._dbSchema=l;var y=kn(d,l);y.add.forEach(function(w){En(r,w[0],w[1].primKey,w[1].indexes)}),y.change.forEach(function(w){if(w.recreate)throw new K.Upgrade("Not yet support for changing primary key");var _=r.objectStore(w.name);w.add.forEach(function(k){return Tt(_,k)}),w.change.forEach(function(k){_.deleteIndex(k.name),Tt(_,k)}),w.del.forEach(function(k){return _.deleteIndex(k)})});var E=c._cfg.contentUpgrade;if(E&&c._cfg.version>t){Pt(e,r),n._memoizedTables={};var f=Zn(l);y.del.forEach(function(w){f[w]=d[w]}),_n(e,[e.Transaction.prototype]),Ct(e,[e.Transaction.prototype],N(f),f),n.schema=f;var p=Jt(E);p&&ze();var m,g=S.follow(function(){if(m=E(n),m&&p){var w=me.bind(null,null);m.then(w,w)}});return m&&typeof m.then=="function"?S.resolve(m):g.then(function(){return m})}}),i.push(function(d){var l=c._cfg.dbschema;ha(l,d),_n(e,[e.Transaction.prototype]),Ct(e,[e.Transaction.prototype],e._storeNames,e._dbSchema),n.schema=e._dbSchema}),i.push(function(d){e.idbdb.objectStoreNames.contains("$meta")&&(Math.ceil(e.idbdb.version/10)===c._cfg.version?(e.idbdb.deleteObjectStore("$meta"),delete e._dbSchema.$meta,e._storeNames=e._storeNames.filter(function(l){return l!=="$meta"})):d.objectStore("$meta").put(c._cfg.version,"version"))})});function s(){return i.length?S.resolve(i.shift()(n.idbtrans)).then(s):S.resolve()}return s().then(function(){Pr(o,r)})}function kn(e,t){var n={del:[],add:[],change:[]},r;for(r in e)t[r]||n.del.push(r);for(r in t){var i=e[r],a=t[r];if(!i)n.add.push([r,a]);else{var o={name:r,def:a,recreate:!1,del:[],add:[],change:[]};if(""+(i.primKey.keyPath||"")!=""+(a.primKey.keyPath||"")||i.primKey.auto!==a.primKey.auto)o.recreate=!0,n.change.push(o);else{var u=i.idxByName,s=a.idxByName,c=void 0;for(c in u)s[c]||o.del.push(c);for(c in s){var d=u[c],l=s[c];d?d.src!==l.src&&o.change.push(l):o.add.push(l)}(o.del.length>0||o.add.length>0||o.change.length>0)&&n.change.push(o)}}}return n}function En(e,t,n,r){var i=e.db.createObjectStore(t,n.keyPath?{keyPath:n.keyPath,autoIncrement:n.auto}:{autoIncrement:n.auto});return r.forEach(function(a){return Tt(i,a)}),i}function Pr(e,t){N(e).forEach(function(n){t.db.objectStoreNames.contains(n)||(ue&&console.debug("Dexie: Creating missing table",n),En(t,n,e[n].primKey,e[n].indexes))})}function ha(e,t){[].slice.call(t.db.objectStoreNames).forEach(function(n){return e[n]==null&&t.db.deleteObjectStore(n)})}function Tt(e,t){e.createIndex(t.name,t.keyPath,{unique:t.unique,multiEntry:t.multi})}function At(e,t,n){var r={},i=ft(t.objectStoreNames,0);return i.forEach(function(a){for(var o=n.objectStore(a),u=o.keyPath,s=bn(Ir(u),u||"",!0,!1,!!o.autoIncrement,u&&typeof u!="string",!0),c=[],d=0;d<o.indexNames.length;++d){var l=o.index(o.indexNames[d]);u=l.keyPath;var y=bn(l.name,u,!!l.unique,!!l.multiEntry,!1,u&&typeof u!="string",!1);c.push(y)}r[a]=wn(a,s,c)}),r}function da(e,t,n){e.verno=t.version/10;var r=e._dbSchema=At(e,t,n);e._storeNames=ft(t.objectStoreNames,0),Ct(e,[e._allTables],N(r),r)}function pa(e,t){var n=At(e,e.idbdb,t),r=kn(n,e._dbSchema);return!(r.add.length||r.change.some(function(i){return i.add.length||i.change.length}))}function Dt(e,t,n){for(var r=n.db.objectStoreNames,i=0;i<r.length;++i){var a=r[i],o=n.objectStore(a);e._hasGetAll="getAll"in o;for(var u=0;u<o.indexNames.length;++u){var s=o.indexNames[u],c=o.index(s).keyPath,d=typeof c=="string"?c:"["+ft(c).join("+")+"]";if(t[a]){var l=t[a].idxByName[d];l&&(l.name=s,delete t[a].idxByName[d],t[a].idxByName[s]=l)}}}typeof navigator<"u"&&/Safari/.test(navigator.userAgent)&&!/(Chrome\/|Edge\/)/.test(navigator.userAgent)&&D.WorkerGlobalScope&&D instanceof D.WorkerGlobalScope&&[].concat(navigator.userAgent.match(/Safari\/(\d*)/))[1]<604&&(e._hasGetAll=!1)}function Cr(e){return e.split(",").map(function(t,n){t=t.trim();var r=t.replace(/([&*]|\+\+)/g,""),i=/^\[/.test(r)?r.match(/^\[(.*)\]$/)[1].split("+"):r;return bn(r,i||null,/\&/.test(t),/\*/.test(t),/\+\+/.test(t),j(i),n===0)})}var va=function(){function e(){}return e.prototype._parseStoresSpec=function(t,n){N(t).forEach(function(r){if(t[r]!==null){var i=Cr(t[r]),a=i.shift();if(a.unique=!0,a.multi)throw new K.Schema("Primary key cannot be multi-valued");i.forEach(function(o){if(o.auto)throw new K.Schema("Only primary key can be marked as autoIncrement (++)");if(!o.keyPath)throw new K.Schema("Index must have a name and cannot be an empty string")}),n[r]=wn(r,a,i)}})},e.prototype.stores=function(t){var n=this.db;this._cfg.storesSource=this._cfg.storesSource?L(this._cfg.storesSource,t):t;var r=n._versions,i={},a={};return r.forEach(function(o){L(i,o._cfg.storesSource),a=o._cfg.dbschema={},o._parseStoresSpec(i,a)}),n._dbSchema=a,_n(n,[n._allTables,n,n.Transaction.prototype]),Ct(n,[n._allTables,n,n.Transaction.prototype,this._cfg.tables],N(a),a),n._storeNames=N(a),this},e.prototype.upgrade=function(t){return this._cfg.contentUpgrade=en(this._cfg.contentUpgrade||W,t),this},e}();function ya(e){return tt(va.prototype,function(n){this.db=e,this._cfg={version:n,storesSource:null,dbschema:{},tables:{},contentUpgrade:null}})}function In(e,t){var n=e._dbNamesDB;return n||(n=e._dbNamesDB=new pe(_t,{addons:[],indexedDB:e,IDBKeyRange:t}),n.version(1).stores({dbnames:"name"})),n.table("dbnames")}function Sn(e){return e&&typeof e.databases=="function"}function ma(e){var t=e.indexedDB,n=e.IDBKeyRange;return Sn(t)?Promise.resolve(t.databases()).then(function(r){return r.map(function(i){return i.name}).filter(function(i){return i!==_t})}):In(t,n).toCollection().primaryKeys()}function ga(e,t){var n=e.indexedDB,r=e.IDBKeyRange;!Sn(n)&&t!==_t&&In(n,r).put({name:t}).catch(W)}function ba(e,t){var n=e.indexedDB,r=e.IDBKeyRange;!Sn(n)&&t!==_t&&In(n,r).delete(t).catch(W)}function Pn(e){return ye(function(){return O.letThrough=!0,e()})}function wa(){var e=!navigator.userAgentData&&/Safari\//.test(navigator.userAgent)&&!/Chrom(e|ium)\//.test(navigator.userAgent);if(!e||!indexedDB.databases)return Promise.resolve();var t;return new Promise(function(n){var r=function(){return indexedDB.databases().finally(n)};t=setInterval(r,100),r()}).finally(function(){return clearInterval(t)})}var Cn;function Tn(e){return!("from"in e)}var ee=function(e,t){if(this)L(this,arguments.length?{d:1,from:e,to:arguments.length>1?t:e}:{d:0});else{var n=new ee;return e&&"d"in e&&L(n,e),n}};Z(ee.prototype,(Cn={add:function(e){return st(this,e),this},addKey:function(e){return ut(this,e,e),this},addKeys:function(e){var t=this;return e.forEach(function(n){return ut(t,n,n)}),this},hasKey:function(e){var t=Ot(this).next(e).value;return t&&z(t.from,e)<=0&&z(t.to,e)>=0}},Cn[Xt]=function(){return Ot(this)},Cn));function ut(e,t,n){var r=z(t,n);if(!isNaN(r)){if(r>0)throw RangeError();if(Tn(e))return L(e,{from:t,to:n,d:1});var i=e.l,a=e.r;if(z(n,e.from)<0)return i?ut(i,t,n):e.l={from:t,to:n,d:1,l:null,r:null},Ar(e);if(z(t,e.to)>0)return a?ut(a,t,n):e.r={from:t,to:n,d:1,l:null,r:null},Ar(e);z(t,e.from)<0&&(e.from=t,e.l=null,e.d=a?a.d+1:1),z(n,e.to)>0&&(e.to=n,e.r=null,e.d=e.l?e.l.d+1:1);var o=!e.r;i&&!e.l&&st(e,i),a&&o&&st(e,a)}}function st(e,t){function n(r,i){var a=i.from,o=i.to,u=i.l,s=i.r;ut(r,a,o),u&&n(r,u),s&&n(r,s)}Tn(t)||n(e,t)}function Tr(e,t){var n=Ot(t),r=n.next();if(r.done)return!1;for(var i=r.value,a=Ot(e),o=a.next(i.from),u=o.value;!r.done&&!o.done;){if(z(u.from,i.to)<=0&&z(u.to,i.from)>=0)return!0;z(i.from,u.from)<0?i=(r=n.next(u.from)).value:u=(o=a.next(i.from)).value}return!1}function Ot(e){var t=Tn(e)?null:{s:0,n:e};return{next:function(n){for(var r=arguments.length>0;t;)switch(t.s){case 0:if(t.s=1,r)for(;t.n.l&&z(n,t.n.from)<0;)t={up:t,n:t.n.l,s:1};else for(;t.n.l;)t={up:t,n:t.n.l,s:1};case 1:if(t.s=2,!r||z(n,t.n.to)<=0)return{value:t.n,done:!1};case 2:if(t.n.r){t.s=3,t={up:t,n:t.n.r,s:0};continue}case 3:t=t.up}return{done:!0}}}}function Ar(e){var t,n,r=(((t=e.r)===null||t===void 0?void 0:t.d)||0)-(((n=e.l)===null||n===void 0?void 0:n.d)||0),i=r>1?"r":r<-1?"l":"";if(i){var a=i==="r"?"l":"r",o=b({},e),u=e[i];e.from=u.from,e.to=u.to,e[i]=u[i],o[i]=u[a],e[a]=o,o.d=Dr(o)}e.d=Dr(e)}function Dr(e){var t=e.r,n=e.l;return(t?n?Math.max(t.d,n.d):t.d:n?n.d:0)+1}function Kt(e,t){return N(t).forEach(function(n){e[n]?st(e[n],t[n]):e[n]=tr(t[n])}),e}function An(e,t){return e.all||t.all||Object.keys(e).some(function(n){return t[n]&&Tr(t[n],e[n])})}var Ke={},Dn={},On=!1;function Rt(e,t){Kt(Dn,e),On||(On=!0,setTimeout(function(){On=!1;var n=Dn;Dn={},Kn(n,!1)},0))}function Kn(e,t){t===void 0&&(t=!1);var n=new Set;if(e.all)for(var r=0,i=Object.values(Ke);r<i.length;r++){var a=i[r];Or(a,e,n,t)}else for(var o in e){var u=/^idb\:\/\/(.*)\/(.*)\//.exec(o);if(u){var s=u[1],c=u[2],a=Ke["idb://".concat(s,"/").concat(c)];a&&Or(a,e,n,t)}}n.forEach(function(d){return d()})}function Or(e,t,n,r){for(var i=[],a=0,o=Object.entries(e.queries.query);a<o.length;a++){for(var u=o[a],s=u[0],c=u[1],d=[],l=0,y=c;l<y.length;l++){var E=y[l];An(t,E.obsSet)?E.subscribers.forEach(function(g){return n.add(g)}):r&&d.push(E)}r&&i.push([s,d])}if(r)for(var f=0,p=i;f<p.length;f++){var m=p[f],s=m[0],d=m[1];e.queries.query[s]=d}}function xa(e){var t=e._state,n=e._deps.indexedDB;if(t.isBeingOpened||e.idbdb)return t.dbReadyPromise.then(function(){return t.dbOpenError?G(t.dbOpenError):e});t.isBeingOpened=!0,t.dbOpenError=null,t.openComplete=!1;var r=t.openCanceller,i=Math.round(e.verno*10),a=!1;function o(){if(t.openCanceller!==r)throw new K.DatabaseClosed("db.open() was cancelled")}var u=t.dbReadyResolve,s=null,c=!1,d=function(){return new S(function(l,y){if(o(),!n)throw new K.MissingAPI;var E=e.name,f=t.autoSchema||!i?n.open(E):n.open(E,i);if(!f)throw new K.MissingAPI;f.onerror=se(y),f.onblocked=Y(e._fireOnBlocked),f.onupgradeneeded=Y(function(p){if(s=f.transaction,t.autoSchema&&!e._options.allowEmptyDB){f.onerror=rt,s.abort(),f.result.close();var m=n.deleteDatabase(E);m.onsuccess=m.onerror=Y(function(){y(new K.NoSuchDatabase("Database ".concat(E," doesnt exist")))})}else{s.onerror=se(y);var g=p.oldVersion>Math.pow(2,62)?0:p.oldVersion;c=g<1,e.idbdb=f.result,a&&ca(e,s),sa(e,g/10,s,y)}},y),f.onsuccess=Y(function(){s=null;var p=e.idbdb=f.result,m=ft(p.objectStoreNames);if(m.length>0)try{var g=p.transaction(ta(m),"readonly");if(t.autoSchema)da(e,p,g);else if(Dt(e,e._dbSchema,g),!pa(e,g)&&!a)return console.warn("Dexie SchemaDiff: Schema was extended without increasing the number passed to db.version(). Dexie will add missing parts and increment native version number to workaround this."),p.close(),i=p.version+1,a=!0,l(d());Pt(e,g)}catch{}$e.push(e),p.onversionchange=Y(function(w){t.vcFired=!0,e.on("versionchange").fire(w)}),p.onclose=Y(function(w){e.on("close").fire(w)}),c&&ga(e._deps,E),l()},y)}).catch(function(l){switch(l?.name){case"UnknownError":if(t.PR1398_maxLoop>0)return t.PR1398_maxLoop--,console.warn("Dexie: Workaround for Chrome UnknownError on open()"),d();break;case"VersionError":if(i>0)return i=0,d();break}return S.reject(l)})};return S.race([r,(typeof navigator>"u"?S.resolve():wa()).then(d)]).then(function(){return o(),t.onReadyBeingFired=[],S.resolve(Pn(function(){return e.on.ready.fire(e.vip)})).then(function l(){if(t.onReadyBeingFired.length>0){var y=t.onReadyBeingFired.reduce(en,W);return t.onReadyBeingFired=[],S.resolve(Pn(function(){return y(e.vip)})).then(l)}})}).finally(function(){t.openCanceller===r&&(t.onReadyBeingFired=null,t.isBeingOpened=!1)}).catch(function(l){t.dbOpenError=l;try{s&&s.abort()}catch{}return r===t.openCanceller&&e._close(),G(l)}).finally(function(){t.openComplete=!0,u()}).then(function(){if(c){var l={};e.tables.forEach(function(y){y.schema.indexes.forEach(function(E){E.name&&(l["idb://".concat(e.name,"/").concat(y.name,"/").concat(E.name)]=new ee(-1/0,[[[]]]))}),l["idb://".concat(e.name,"/").concat(y.name,"/")]=l["idb://".concat(e.name,"/").concat(y.name,"/:dels")]=new ee(-1/0,[[[]]])}),we(it).fire(l),Kn(l,!0)}return e})}function Rn(e){var t=function(o){return e.next(o)},n=function(o){return e.throw(o)},r=a(t),i=a(n);function a(o){return function(u){var s=o(u),c=s.value;return s.done?c:!c||typeof c.then!="function"?j(c)?Promise.all(c).then(r,i):r(c):c.then(r,i)}}return a(t)()}function _a(e,t,n){var r=arguments.length;if(r<2)throw new K.InvalidArgument("Too few arguments");for(var i=new Array(r-1);--r;)i[r-1]=arguments[r];n=i.pop();var a=qn(i);return[e,a,n]}function Kr(e,t,n,r,i){return S.resolve().then(function(){var a=O.transless||O,o=e._createTransaction(t,n,e._dbSchema,r);o.explicit=!0;var u={trans:o,transless:a};if(r)o.idbtrans=r.idbtrans;else try{o.create(),o.idbtrans._explicit=!0,e._state.PR1398_maxLoop=3}catch(l){return l.name===qt.InvalidState&&e.isOpen()&&--e._state.PR1398_maxLoop>0?(console.warn("Dexie: Need to reopen db"),e.close({disableAutoOpen:!1}),e.open().then(function(){return Kr(e,t,n,null,i)})):G(l)}var s=Jt(i);s&&ze();var c,d=S.follow(function(){if(c=i.call(o,o),c)if(s){var l=me.bind(null,null);c.then(l,l)}else typeof c.next=="function"&&typeof c.throw=="function"&&(c=Rn(c))},u);return(c&&typeof c.then=="function"?S.resolve(c).then(function(l){return o.active?l:G(new K.PrematureCommit("Transaction committed too early. See http://bit.ly/2kdckMn"))}):d.then(function(){return c})).then(function(l){return r&&o._resolve(),o._completion.then(function(){return l})}).catch(function(l){return o._reject(l),G(l)})})}function Mt(e,t,n){for(var r=j(e)?e.slice():[e],i=0;i<n;++i)r.push(t);return r}function ka(e){return b(b({},e),{table:function(t){var n=e.table(t),r=n.schema,i={},a=[];function o(p,m,g){var w=ot(p),_=i[w]=i[w]||[],k=p==null?0:typeof p=="string"?1:p.length,x=m>0,I=b(b({},g),{name:x?"".concat(w,"(virtual-from:").concat(g.name,")"):g.name,lowLevelIndex:g,isVirtual:x,keyTail:m,keyLength:k,extractKey:xn(p),unique:!x&&g.unique});if(_.push(I),I.isPrimaryKey||a.push(I),k>1){var P=k===2?p[0]:p.slice(0,k-1);o(P,m+1,g)}return _.sort(function(T,B){return T.keyTail-B.keyTail}),I}var u=o(r.primaryKey.keyPath,0,r.primaryKey);i[":id"]=[u];for(var s=0,c=r.indexes;s<c.length;s++){var d=c[s];o(d.keyPath,0,d)}function l(p){var m=i[ot(p)];return m&&m[0]}function y(p,m){return{type:p.type===1?2:p.type,lower:Mt(p.lower,p.lowerOpen?e.MAX_KEY:e.MIN_KEY,m),lowerOpen:!0,upper:Mt(p.upper,p.upperOpen?e.MIN_KEY:e.MAX_KEY,m),upperOpen:!0}}function E(p){var m=p.query.index;return m.isVirtual?b(b({},p),{query:{index:m.lowLevelIndex,range:y(p.query.range,m.keyTail)}}):p}var f=b(b({},n),{schema:b(b({},r),{primaryKey:u,indexes:a,getIndexByKeyPath:l}),count:function(p){return n.count(E(p))},query:function(p){return n.query(E(p))},openCursor:function(p){var m=p.query.index,g=m.keyTail,w=m.isVirtual,_=m.keyLength;if(!w)return n.openCursor(p);function k(x){function I(T){T!=null?x.continue(Mt(T,p.reverse?e.MAX_KEY:e.MIN_KEY,g)):p.unique?x.continue(x.key.slice(0,_).concat(p.reverse?e.MIN_KEY:e.MAX_KEY,g)):x.continue()}var P=Object.create(x,{continue:{value:I},continuePrimaryKey:{value:function(T,B){x.continuePrimaryKey(Mt(T,e.MAX_KEY,g),B)}},primaryKey:{get:function(){return x.primaryKey}},key:{get:function(){var T=x.key;return _===1?T[0]:T.slice(0,_)}},value:{get:function(){return x.value}}});return P}return n.openCursor(E(p)).then(function(x){return x&&k(x)})}});return f}})}var Ea={stack:"dbcore",name:"VirtualIndexMiddleware",level:1,create:ka};function Mn(e,t,n,r){return n=n||{},r=r||"",N(e).forEach(function(i){if(!$(t,i))n[r+i]=void 0;else{var a=e[i],o=t[i];if(typeof a=="object"&&typeof o=="object"&&a&&o){var u=Gt(a),s=Gt(o);u!==s?n[r+i]=t[i]:u==="Object"?Mn(a,o,n,r+i+"."):a!==o&&(n[r+i]=t[i])}else a!==o&&(n[r+i]=t[i])}}),N(t).forEach(function(i){$(e,i)||(n[r+i]=t[i])}),n}function Bn(e,t){return t.type==="delete"?t.keys:t.keys||t.values.map(e.extractKey)}var Ia={stack:"dbcore",name:"HooksMiddleware",level:2,create:function(e){return b(b({},e),{table:function(t){var n=e.table(t),r=n.schema.primaryKey,i=b(b({},n),{mutate:function(a){var o=O.trans,u=o.table(t).hook,s=u.deleting,c=u.creating,d=u.updating;switch(a.type){case"add":if(c.fire===W)break;return o._promise("readwrite",function(){return l(a)},!0);case"put":if(c.fire===W&&d.fire===W)break;return o._promise("readwrite",function(){return l(a)},!0);case"delete":if(s.fire===W)break;return o._promise("readwrite",function(){return l(a)},!0);case"deleteRange":if(s.fire===W)break;return o._promise("readwrite",function(){return y(a)},!0)}return n.mutate(a);function l(f){var p=O.trans,m=f.keys||Bn(r,f);if(!m)throw new Error("Keys missing");return f=f.type==="add"||f.type==="put"?b(b({},f),{keys:m}):b({},f),f.type!=="delete"&&(f.values=C([],f.values,!0)),f.keys&&(f.keys=C([],f.keys,!0)),Sa(n,f,m).then(function(g){var w=m.map(function(_,k){var x=g[k],I={onerror:null,onsuccess:null};if(f.type==="delete")s.fire.call(I,_,x,p);else if(f.type==="add"||x===void 0){var P=c.fire.call(I,_,f.values[k],p);_==null&&P!=null&&(_=P,f.keys[k]=_,r.outbound||ne(f.values[k],r.keyPath,_))}else{var T=Mn(x,f.values[k]),B=d.fire.call(I,T,_,x,p);if(B){var A=f.values[k];Object.keys(B).forEach(function(R){$(A,R)?A[R]=B[R]:ne(A,R,B[R])})}}return I});return n.mutate(f).then(function(_){for(var k=_.failures,x=_.results,I=_.numFailures,P=_.lastResult,T=0;T<m.length;++T){var B=x?x[T]:m[T],A=w[T];B==null?A.onerror&&A.onerror(k[T]):A.onsuccess&&A.onsuccess(f.type==="put"&&g[T]?f.values[T]:B)}return{failures:k,results:x,numFailures:I,lastResult:P}}).catch(function(_){return w.forEach(function(k){return k.onerror&&k.onerror(_)}),Promise.reject(_)})})}function y(f){return E(f.trans,f.range,1e4)}function E(f,p,m){return n.query({trans:f,values:!1,query:{index:r,range:p},limit:m}).then(function(g){var w=g.result;return l({type:"delete",keys:w,trans:f}).then(function(_){return _.numFailures>0?Promise.reject(_.failures[0]):w.length<m?{failures:[],numFailures:0,lastResult:void 0}:E(f,b(b({},p),{lower:w[w.length-1],lowerOpen:!0}),m)})})}}});return i}})}};function Sa(e,t,n){return t.type==="add"?Promise.resolve([]):e.getMany({trans:t.trans,keys:n,cache:"immutable"})}function Rr(e,t,n){try{if(!t||t.keys.length<e.length)return null;for(var r=[],i=0,a=0;i<t.keys.length&&a<e.length;++i)z(t.keys[i],e[a])===0&&(r.push(n?Ie(t.values[i]):t.values[i]),++a);return r.length===e.length?r:null}catch{return null}}var Pa={stack:"dbcore",level:-1,create:function(e){return{table:function(t){var n=e.table(t);return b(b({},n),{getMany:function(r){if(!r.cache)return n.getMany(r);var i=Rr(r.keys,r.trans._cache,r.cache==="clone");return i?S.resolve(i):n.getMany(r).then(function(a){return r.trans._cache={keys:r.keys,values:r.cache==="clone"?Ie(a):a},a})},mutate:function(r){return r.type!=="add"&&(r.trans._cache=null),n.mutate(r)}})}}}};function Mr(e,t){return e.trans.mode==="readonly"&&!!e.subscr&&!e.trans.explicit&&e.trans.db._options.cache!=="disabled"&&!t.schema.primaryKey.outbound}function Br(e,t){switch(e){case"query":return t.values&&!t.unique;case"get":return!1;case"getMany":return!1;case"count":return!1;case"openCursor":return!1}}var Ca={stack:"dbcore",level:0,name:"Observability",create:function(e){var t=e.schema.name,n=new ee(e.MIN_KEY,e.MAX_KEY);return b(b({},e),{transaction:function(r,i,a){if(O.subscr&&i!=="readonly")throw new K.ReadOnly("Readwrite transaction in liveQuery context. Querier source: ".concat(O.querier));return e.transaction(r,i,a)},table:function(r){var i=e.table(r),a=i.schema,o=a.primaryKey,u=a.indexes,s=o.extractKey,c=o.outbound,d=o.autoIncrement&&u.filter(function(f){return f.compound&&f.keyPath.includes(o.keyPath)}),l=b(b({},i),{mutate:function(f){var p=f.trans,m=f.mutatedParts||(f.mutatedParts={}),g=function(R){var V="idb://".concat(t,"/").concat(r,"/").concat(R);return m[V]||(m[V]=new ee)},w=g(""),_=g(":dels"),k=f.type,x=f.type==="deleteRange"?[f.range]:f.type==="delete"?[f.keys]:f.values.length<50?[Bn(o,f).filter(function(R){return R}),f.values]:[],I=x[0],P=x[1],T=f.trans._cache;if(j(I)){w.addKeys(I);var B=k==="delete"||I.length===P.length?Rr(I,T):null;B||_.addKeys(I),(B||P)&&Ta(g,a,B,P)}else if(I){var A={from:I.lower,to:I.upper};_.add(A),w.add(A)}else w.add(n),_.add(n),a.indexes.forEach(function(R){return g(R.name).add(n)});return i.mutate(f).then(function(R){return I&&(f.type==="add"||f.type==="put")&&(w.addKeys(R.results),d&&d.forEach(function(V){var F=f.values.map(function(M){return V.extractKey(M)}),Q=V.keyPath.findIndex(function(M){return M===o.keyPath});R.results.forEach(function(M){return F[Q]=M}),g(V.name).addKeys(F)})),p.mutatedParts=Kt(p.mutatedParts||{},m),R})}}),y=function(f){var p,m,g=f.query,w=g.index,_=g.range;return[w,new ee((p=_.lower)!==null&&p!==void 0?p:e.MIN_KEY,(m=_.upper)!==null&&m!==void 0?m:e.MAX_KEY)]},E={get:function(f){return[o,new ee(f.key)]},getMany:function(f){return[o,new ee().addKeys(f.keys)]},count:y,query:y,openCursor:y};return N(E).forEach(function(f){l[f]=function(p){var m=O.subscr,g=!!m,w=Mr(O,i)&&Br(f,p),_=w?p.obsSet={}:m;if(g){var k=function(R){var V="idb://".concat(t,"/").concat(r,"/").concat(R);return _[V]||(_[V]=new ee)},x=k(""),I=k(":dels"),P=E[f](p),T=P[0],B=P[1];if(f==="query"&&T.isPrimaryKey&&!p.values?I.add(B):k(T.name||"").add(B),!T.isPrimaryKey)if(f==="count")I.add(n);else{var A=f==="query"&&c&&p.values&&i.query(b(b({},p),{values:!1}));return i[f].apply(this,arguments).then(function(R){if(f==="query"){if(c&&p.values)return A.then(function(M){var J=M.result;return x.addKeys(J),R});var V=p.values?R.result.map(s):R.result;p.values?x.addKeys(V):I.addKeys(V)}else if(f==="openCursor"){var F=R,Q=p.values;return F&&Object.create(F,{key:{get:function(){return I.addKey(F.primaryKey),F.key}},primaryKey:{get:function(){var M=F.primaryKey;return I.addKey(M),M}},value:{get:function(){return Q&&x.addKey(F.primaryKey),F.value}}})}return R})}}return i[f].apply(this,arguments)}}),l}})}};function Ta(e,t,n,r){function i(a){var o=e(a.name||"");function u(c){return c!=null?a.extractKey(c):null}var s=function(c){return a.multiEntry&&j(c)?c.forEach(function(d){return o.addKey(d)}):o.addKey(c)};(n||r).forEach(function(c,d){var l=n&&u(n[d]),y=r&&u(r[d]);z(l,y)!==0&&(l!=null&&s(l),y!=null&&s(y))})}t.indexes.forEach(i)}function Fr(e,t,n){if(n.numFailures===0)return t;if(t.type==="deleteRange")return null;var r=t.keys?t.keys.length:"values"in t&&t.values?t.values.length:1;if(n.numFailures===r)return null;var i=b({},t);return j(i.keys)&&(i.keys=i.keys.filter(function(a,o){return!(o in n.failures)})),"values"in i&&j(i.values)&&(i.values=i.values.filter(function(a,o){return!(o in n.failures)})),i}function Aa(e,t){return t.lower===void 0?!0:t.lowerOpen?z(e,t.lower)>0:z(e,t.lower)>=0}function Da(e,t){return t.upper===void 0?!0:t.upperOpen?z(e,t.upper)<0:z(e,t.upper)<=0}function Fn(e,t){return Aa(e,t)&&Da(e,t)}function jr(e,t,n,r,i,a){if(!n||n.length===0)return e;var o=t.query.index,u=o.multiEntry,s=t.query.range,c=r.schema.primaryKey,d=c.extractKey,l=o.extractKey,y=(o.lowLevelIndex||o).extractKey,E=n.reduce(function(f,p){var m=f,g=[];if(p.type==="add"||p.type==="put")for(var w=new ee,_=p.values.length-1;_>=0;--_){var k=p.values[_],x=d(k);if(!w.hasKey(x)){var I=l(k);(u&&j(I)?I.some(function(A){return Fn(A,s)}):Fn(I,s))&&(w.addKey(x),g.push(k))}}switch(p.type){case"add":m=f.concat(t.values?g:g.map(function(A){return d(A)}));break;case"put":var P=new ee().addKeys(p.values.map(function(A){return d(A)}));m=f.filter(function(A){return!P.hasKey(t.values?d(A):A)}).concat(t.values?g:g.map(function(A){return d(A)}));break;case"delete":var T=new ee().addKeys(p.keys);m=f.filter(function(A){return!T.hasKey(t.values?d(A):A)});break;case"deleteRange":var B=p.range;m=f.filter(function(A){return!Fn(d(A),B)});break}return m},e);return E===e?e:(E.sort(function(f,p){return z(y(f),y(p))||z(d(f),d(p))}),t.limit&&t.limit<1/0&&(E.length>t.limit?E.length=t.limit:e.length===t.limit&&E.length<t.limit&&(i.dirty=!0)),a?Object.freeze(E):E)}function Nr(e,t){return z(e.lower,t.lower)===0&&z(e.upper,t.upper)===0&&!!e.lowerOpen==!!t.lowerOpen&&!!e.upperOpen==!!t.upperOpen}function Oa(e,t,n,r){if(e===void 0)return t!==void 0?-1:0;if(t===void 0)return 1;var i=z(e,t);if(i===0){if(n&&r)return 0;if(n)return 1;if(r)return-1}return i}function Ka(e,t,n,r){if(e===void 0)return t!==void 0?1:0;if(t===void 0)return-1;var i=z(e,t);if(i===0){if(n&&r)return 0;if(n)return-1;if(r)return 1}return i}function Ra(e,t){return Oa(e.lower,t.lower,e.lowerOpen,t.lowerOpen)<=0&&Ka(e.upper,t.upper,e.upperOpen,t.upperOpen)>=0}function Ma(e,t,n,r){var i=Ke["idb://".concat(e,"/").concat(t)];if(!i)return[];var a=i.queries[n];if(!a)return[null,!1,i,null];var o=r.query?r.query.index.name:null,u=a[o||""];if(!u)return[null,!1,i,null];switch(n){case"query":var s=u.find(function(l){return l.req.limit===r.limit&&l.req.values===r.values&&Nr(l.req.query.range,r.query.range)});if(s)return[s,!0,i,u];var c=u.find(function(l){var y="limit"in l.req?l.req.limit:1/0;return y>=r.limit&&(r.values?l.req.values:!0)&&Ra(l.req.query.range,r.query.range)});return[c,!1,i,u];case"count":var d=u.find(function(l){return Nr(l.req.query.range,r.query.range)});return[d,!!d,i,u]}}function Ba(e,t,n,r){e.subscribers.add(n),r.addEventListener("abort",function(){e.subscribers.delete(n),e.subscribers.size===0&&Fa(e,t)})}function Fa(e,t){setTimeout(function(){e.subscribers.size===0&&Se(t,e)},3e3)}var ja={stack:"dbcore",level:0,name:"Cache",create:function(e){var t=e.schema.name,n=b(b({},e),{transaction:function(r,i,a){var o=e.transaction(r,i,a);if(i==="readwrite"){var u=new AbortController,s=u.signal,c=function(d){return function(){if(u.abort(),i==="readwrite"){for(var l=new Set,y=0,E=r;y<E.length;y++){var f=E[y],p=Ke["idb://".concat(t,"/").concat(f)];if(p){var m=e.table(f),g=p.optimisticOps.filter(function(Q){return Q.trans===o});if(o._explicit&&d&&o.mutatedParts)for(var w=0,_=Object.values(p.queries.query);w<_.length;w++)for(var k=_[w],x=0,I=k.slice();x<I.length;x++){var P=I[x];An(P.obsSet,o.mutatedParts)&&(Se(k,P),P.subscribers.forEach(function(Q){return l.add(Q)}))}else if(g.length>0){p.optimisticOps=p.optimisticOps.filter(function(Q){return Q.trans!==o});for(var T=0,B=Object.values(p.queries.query);T<B.length;T++)for(var k=B[T],A=0,R=k.slice();A<R.length;A++){var P=R[A];if(P.res!=null&&o.mutatedParts)if(d&&!P.dirty){var V=Object.isFrozen(P.res),F=jr(P.res,P.req,g,m,P,V);P.dirty?(Se(k,P),P.subscribers.forEach(function(J){return l.add(J)})):F!==P.res&&(P.res=F,P.promise=S.resolve({result:F}))}else P.dirty&&Se(k,P),P.subscribers.forEach(function(J){return l.add(J)})}}}}l.forEach(function(Q){return Q()})}}};o.addEventListener("abort",c(!1),{signal:s}),o.addEventListener("error",c(!1),{signal:s}),o.addEventListener("complete",c(!0),{signal:s})}return o},table:function(r){var i=e.table(r),a=i.schema.primaryKey,o=b(b({},i),{mutate:function(u){var s=O.trans;if(a.outbound||s.db._options.cache==="disabled"||s.explicit)return i.mutate(u);var c=Ke["idb://".concat(t,"/").concat(r)];if(!c)return i.mutate(u);var d=i.mutate(u);return(u.type==="add"||u.type==="put")&&(u.values.length>=50||Bn(a,u).some(function(l){return l==null}))?d.then(function(l){var y=b(b({},u),{values:u.values.map(function(f,p){var m,g=!((m=a.keyPath)===null||m===void 0)&&m.includes(".")?Ie(f):b({},f);return ne(g,a.keyPath,l.results[p]),g})}),E=Fr(c,y,l);c.optimisticOps.push(E),queueMicrotask(function(){return u.mutatedParts&&Rt(u.mutatedParts)})}):(c.optimisticOps.push(u),u.mutatedParts&&Rt(u.mutatedParts),d.then(function(l){if(l.numFailures>0){Se(c.optimisticOps,u);var y=Fr(c,u,l);y&&c.optimisticOps.push(y),u.mutatedParts&&Rt(u.mutatedParts)}}),d.catch(function(){Se(c.optimisticOps,u),u.mutatedParts&&Rt(u.mutatedParts)})),d},query:function(u){var s;if(!Mr(O,i)||!Br("query",u))return i.query(u);var c=((s=O.trans)===null||s===void 0?void 0:s.db._options.cache)==="immutable",d=O,l=d.requery,y=d.signal,E=Ma(t,r,"query",u),f=E[0],p=E[1],m=E[2],g=E[3];if(f&&p)f.obsSet=u.obsSet;else{var w=i.query(u).then(function(_){var k=_.result;if(f&&(f.res=k),c){for(var x=0,I=k.length;x<I;++x)Object.freeze(k[x]);Object.freeze(k)}else _.result=Ie(k);return _}).catch(function(_){return g&&f&&Se(g,f),Promise.reject(_)});f={obsSet:u.obsSet,promise:w,subscribers:new Set,type:"query",req:u,dirty:!1},g?g.push(f):(g=[f],m||(m=Ke["idb://".concat(t,"/").concat(r)]={queries:{query:{},count:{}},objs:new Map,optimisticOps:[],unsignaledParts:{}}),m.queries.query[u.query.index.name||""]=g)}return Ba(f,g,l,y),f.promise.then(function(_){return{result:jr(_.result,u,m?.optimisticOps,i,f,c)}})}});return o}});return n}};function Bt(e,t){return new Proxy(e,{get:function(n,r,i){return r==="db"?t:Reflect.get(n,r,i)}})}var pe=function(){function e(t,n){var r=this;this._middlewares={},this.verno=0;var i=e.dependencies;this._options=n=b({addons:e.addons,autoOpen:!0,indexedDB:i.indexedDB,IDBKeyRange:i.IDBKeyRange,cache:"cloned"},n),this._deps={indexedDB:n.indexedDB,IDBKeyRange:n.IDBKeyRange};var a=n.addons;this._dbSchema={},this._versions=[],this._storeNames=[],this._allTables={},this.idbdb=null,this._novip=this;var o={dbOpenError:null,isBeingOpened:!1,onReadyBeingFired:null,openComplete:!1,dbReadyResolve:W,dbReadyPromise:null,cancelOpen:W,openCanceller:null,autoSchema:!0,PR1398_maxLoop:3,autoOpen:n.autoOpen};o.dbReadyPromise=new S(function(s){o.dbReadyResolve=s}),o.openCanceller=new S(function(s,c){o.cancelOpen=c}),this._state=o,this.name=t,this.on=et(this,"populate","blocked","versionchange","close",{ready:[en,W]}),this.on.ready.subscribe=Xn(this.on.ready.subscribe,function(s){return function(c,d){e.vip(function(){var l=r._state;if(l.openComplete)l.dbOpenError||S.resolve().then(c),d&&s(c);else if(l.onReadyBeingFired)l.onReadyBeingFired.push(c),d&&s(c);else{s(c);var y=r;d||s(function E(){y.on.ready.unsubscribe(c),y.on.ready.unsubscribe(E)})}})}}),this.Collection=Hi(this),this.Table=zi(this),this.Transaction=ea(this),this.Version=ya(this),this.WhereClause=Zi(this),this.on("versionchange",function(s){s.newVersion>0?console.warn("Another connection wants to upgrade database '".concat(r.name,"'. Closing db now to resume the upgrade.")):console.warn("Another connection wants to delete database '".concat(r.name,"'. Closing db now to resume the delete request.")),r.close({disableAutoOpen:!1})}),this.on("blocked",function(s){!s.newVersion||s.newVersion<s.oldVersion?console.warn("Dexie.delete('".concat(r.name,"') was blocked")):console.warn("Upgrade '".concat(r.name,"' blocked by other connection holding version ").concat(s.oldVersion/10))}),this._maxKey=at(n.IDBKeyRange),this._createTransaction=function(s,c,d,l){return new r.Transaction(s,c,d,r._options.chromeTransactionDurability,l)},this._fireOnBlocked=function(s){r.on("blocked").fire(s),$e.filter(function(c){return c.name===r.name&&c!==r&&!c._state.vcFired}).map(function(c){return c.on("versionchange").fire(s)})},this.use(Pa),this.use(ja),this.use(Ca),this.use(Ea),this.use(Ia);var u=new Proxy(this,{get:function(s,c,d){if(c==="_vip")return!0;if(c==="table")return function(y){return Bt(r.table(y),u)};var l=Reflect.get(s,c,d);return l instanceof wr?Bt(l,u):c==="tables"?l.map(function(y){return Bt(y,u)}):c==="_createTransaction"?function(){var y=l.apply(this,arguments);return Bt(y,u)}:l}});this.vip=u,a.forEach(function(s){return s(r)})}return e.prototype.version=function(t){if(isNaN(t)||t<.1)throw new K.Type("Given version is not a positive number");if(t=Math.round(t*10)/10,this.idbdb||this._state.isBeingOpened)throw new K.Schema("Cannot add version when database is open");this.verno=Math.max(this.verno,t);var n=this._versions,r=n.filter(function(i){return i._cfg.version===t})[0];return r||(r=new this.Version(t),n.push(r),n.sort(ua),r.stores({}),this._state.autoSchema=!1,r)},e.prototype._whenReady=function(t){var n=this;return this.idbdb&&(this._state.openComplete||O.letThrough||this._vip)?t():new S(function(r,i){if(n._state.openComplete)return i(new K.DatabaseClosed(n._state.dbOpenError));if(!n._state.isBeingOpened){if(!n._state.autoOpen){i(new K.DatabaseClosed);return}n.open().catch(W)}n._state.dbReadyPromise.then(r,i)}).then(t)},e.prototype.use=function(t){var n=t.stack,r=t.create,i=t.level,a=t.name;a&&this.unuse({stack:n,name:a});var o=this._middlewares[n]||(this._middlewares[n]=[]);return o.push({stack:n,create:r,level:i??10,name:a}),o.sort(function(u,s){return u.level-s.level}),this},e.prototype.unuse=function(t){var n=t.stack,r=t.name,i=t.create;return n&&this._middlewares[n]&&(this._middlewares[n]=this._middlewares[n].filter(function(a){return i?a.create!==i:r?a.name!==r:!1})),this},e.prototype.open=function(){var t=this;return Ae(ve,function(){return xa(t)})},e.prototype._close=function(){var t=this._state,n=$e.indexOf(this);if(n>=0&&$e.splice(n,1),this.idbdb){try{this.idbdb.close()}catch{}this.idbdb=null}t.isBeingOpened||(t.dbReadyPromise=new S(function(r){t.dbReadyResolve=r}),t.openCanceller=new S(function(r,i){t.cancelOpen=i}))},e.prototype.close=function(t){var n=t===void 0?{disableAutoOpen:!0}:t,r=n.disableAutoOpen,i=this._state;r?(i.isBeingOpened&&i.cancelOpen(new K.DatabaseClosed),this._close(),i.autoOpen=!1,i.dbOpenError=new K.DatabaseClosed):(this._close(),i.autoOpen=this._options.autoOpen||i.isBeingOpened,i.openComplete=!1,i.dbOpenError=null)},e.prototype.delete=function(t){var n=this;t===void 0&&(t={disableAutoOpen:!0});var r=arguments.length>0&&typeof arguments[0]!="object",i=this._state;return new S(function(a,o){var u=function(){n.close(t);var s=n._deps.indexedDB.deleteDatabase(n.name);s.onsuccess=Y(function(){ba(n._deps,n.name),a()}),s.onerror=se(o),s.onblocked=n._fireOnBlocked};if(r)throw new K.InvalidArgument("Invalid closeOptions argument to db.delete()");i.isBeingOpened?i.dbReadyPromise.then(u):u()})},e.prototype.backendDB=function(){return this.idbdb},e.prototype.isOpen=function(){return this.idbdb!==null},e.prototype.hasBeenClosed=function(){var t=this._state.dbOpenError;return t&&t.name==="DatabaseClosed"},e.prototype.hasFailed=function(){return this._state.dbOpenError!==null},e.prototype.dynamicallyOpened=function(){return this._state.autoSchema},Object.defineProperty(e.prototype,"tables",{get:function(){var t=this;return N(this._allTables).map(function(n){return t._allTables[n]})},enumerable:!1,configurable:!0}),e.prototype.transaction=function(){var t=_a.apply(this,arguments);return this._transaction.apply(this,t)},e.prototype._transaction=function(t,n,r){var i=this,a=O.trans;(!a||a.db!==this||t.indexOf("!")!==-1)&&(a=null);var o=t.indexOf("?")!==-1;t=t.replace("!","").replace("?","");var u,s;try{if(s=n.map(function(d){var l=d instanceof i.Table?d.name:d;if(typeof l!="string")throw new TypeError("Invalid table argument to Dexie.transaction(). Only Table or String are allowed");return l}),t=="r"||t===dn)u=dn;else if(t=="rw"||t==pn)u=pn;else throw new K.InvalidArgument("Invalid transaction mode: "+t);if(a){if(a.mode===dn&&u===pn)if(o)a=null;else throw new K.SubTransaction("Cannot enter a sub-transaction with READWRITE mode when parent transaction is READONLY");a&&s.forEach(function(d){if(a&&a.storeNames.indexOf(d)===-1)if(o)a=null;else throw new K.SubTransaction("Table "+d+" not included in parent transaction.")}),o&&a&&!a.active&&(a=null)}}catch(d){return a?a._promise(null,function(l,y){y(d)}):G(d)}var c=Kr.bind(null,this,u,s,a,r);return a?a._promise(u,c,"lock"):O.trans?Ae(O.transless,function(){return i._whenReady(c)}):this._whenReady(c)},e.prototype.table=function(t){if(!$(this._allTables,t))throw new K.InvalidTable("Table ".concat(t," does not exist"));return this._allTables[t]},e}(),Na=typeof Symbol<"u"&&"observable"in Symbol?Symbol.observable:"@@observable",La=function(){function e(t){this._subscribe=t}return e.prototype.subscribe=function(t,n,r){return this._subscribe(!t||typeof t=="function"?{next:t,error:n,complete:r}:t)},e.prototype[Na]=function(){return this},e}(),Ft;try{Ft={indexedDB:D.indexedDB||D.mozIndexedDB||D.webkitIndexedDB||D.msIndexedDB,IDBKeyRange:D.IDBKeyRange||D.webkitIDBKeyRange}}catch{Ft={indexedDB:null,IDBKeyRange:null}}function Lr(e){var t=!1,n,r=new La(function(i){var a=Jt(e);function o(g){var w=Le();try{a&&ze();var _=ye(e,g);return a&&(_=_.finally(me)),_}finally{w&&Ve()}}var u=!1,s,c={},d={},l={get closed(){return u},unsubscribe:function(){u||(u=!0,s&&s.abort(),y&&we.storagemutated.unsubscribe(p))}};i.start&&i.start(l);var y=!1,E=function(){return ln(m)};function f(){return An(d,c)}var p=function(g){Kt(c,g),f()&&E()},m=function(){if(!(u||!Ft.indexedDB)){c={};var g={};s&&s.abort(),s=new AbortController;var w={subscr:g,signal:s.signal,requery:E,querier:e,trans:null},_=o(w);Promise.resolve(_).then(function(k){t=!0,n=k,!(u||w.signal.aborted)&&(c={},d=g,!yi(d)&&!y&&(we(it,p),y=!0),ln(function(){return!u&&i.next&&i.next(k)}))},function(k){t=!1,["DatabaseClosedError","AbortError"].includes(k?.name)||u||ln(function(){u||i.error&&i.error(k)})})}};return setTimeout(E,0),l});return r.hasValue=function(){return t},r.getValue=function(){return n},r}var Re=pe;Z(Re,b(b({},dt),{delete:function(e){var t=new Re(e,{addons:[]});return t.delete()},exists:function(e){return new Re(e,{addons:[]}).open().then(function(t){return t.close(),!0}).catch("NoSuchDatabaseError",function(){return!1})},getDatabaseNames:function(e){try{return ma(Re.dependencies).then(e)}catch{return G(new K.MissingAPI)}},defineClass:function(){function e(t){L(this,t)}return e},ignoreTransaction:function(e){return O.trans?Ae(O.transless,e):e()},vip:Pn,async:function(e){return function(){try{var t=Rn(e.apply(this,arguments));return!t||typeof t.then!="function"?S.resolve(t):t}catch(n){return G(n)}}},spawn:function(e,t,n){try{var r=Rn(e.apply(n,t||[]));return!r||typeof r.then!="function"?S.resolve(r):r}catch(i){return G(i)}},currentTransaction:{get:function(){return O.trans||null}},waitFor:function(e,t){var n=S.resolve(typeof e=="function"?Re.ignoreTransaction(e):e).timeout(t||6e4);return O.trans?O.trans.waitFor(n):n},Promise:S,debug:{get:function(){return ue},set:function(e){ar(e)}},derive:Be,extend:L,props:Z,override:Xn,Events:et,on:we,liveQuery:Lr,extendObservabilitySet:Kt,getByKeyPath:fe,setByKeyPath:ne,delByKeyPath:di,shallowClone:Zn,deepClone:Ie,getObjectDiff:Mn,cmp:z,asap:Jn,minKey:hn,addons:[],connections:$e,errnames:qt,dependencies:Ft,cache:Ke,semVer:pr,version:pr.split(".").map(function(e){return parseInt(e)}).reduce(function(e,t,n){return e+t/Math.pow(10,n*2)})})),Re.maxKey=at(Re.dependencies.IDBKeyRange),typeof dispatchEvent<"u"&&typeof addEventListener<"u"&&(we(it,function(e){if(!xe){var t;t=new CustomEvent(gn,{detail:e}),xe=!0,dispatchEvent(t),xe=!1}}),addEventListener(gn,function(e){var t=e.detail;xe||jn(t)}));function jn(e){var t=xe;try{xe=!0,we.storagemutated.fire(e),Kn(e,!0)}finally{xe=t}}var xe=!1,_e,Nn=function(){};typeof BroadcastChannel<"u"&&(Nn=function(){_e=new BroadcastChannel(gn),_e.onmessage=function(e){return e.data&&jn(e.data)}},Nn(),typeof _e.unref=="function"&&_e.unref(),we(it,function(e){xe||_e.postMessage(e)})),typeof addEventListener<"u"&&(addEventListener("pagehide",function(e){if(!pe.disableBfCache&&e.persisted){ue&&console.debug("Dexie: handling persisted pagehide"),_e?.close();for(var t=0,n=$e;t<n.length;t++){var r=n[t];r.close({disableAutoOpen:!1})}}}),addEventListener("pageshow",function(e){!pe.disableBfCache&&e.persisted&&(ue&&console.debug("Dexie: handling persisted pageshow"),Nn(),jn({all:new ee(-1/0,[[]])}))}));function Va(e){return new nt({add:e})}function za(e){return new nt({remove:e})}function $a(e,t){return new nt({replacePrefix:[e,t]})}S.rejectionMapper=_i,ar(ue);var Wa=Object.freeze({__proto__:null,Dexie:pe,liveQuery:Lr,Entity:mr,cmp:z,PropModSymbol:Wi,PropModification:nt,replacePrefix:$a,add:Va,remove:za,default:pe,RangeSet:ee,mergeRanges:st,rangesOverlap:Tr});return b(pe,Wa,{default:pe}),pe})});var $r=Symbol("Comlink.proxy"),eo=Symbol("Comlink.endpoint"),to=Symbol("Comlink.releaseProxy"),Ln=Symbol("Comlink.finalizer"),Lt=Symbol("Comlink.thrown"),Wr=h=>typeof h=="object"&&h!==null||typeof h=="function",no={canHandle:h=>Wr(h)&&h[$r],serialize(h){let{port1:v,port2:b}=new MessageChannel;return Wt(h,v),[b,[b]]},deserialize(h){return h.start(),oo(h)}},ro={canHandle:h=>Wr(h)&&Lt in h,serialize({value:h}){let v;return h instanceof Error?v={isError:!0,value:{message:h.message,name:h.name,stack:h.stack}}:v={isError:!1,value:h},[v,[]]},deserialize(h){throw h.isError?Object.assign(new Error(h.value.message),h.value):h.value}},Qr=new Map([["proxy",no],["throw",ro]]);function io(h,v){for(let b of h)if(v===b||b==="*"||b instanceof RegExp&&b.test(v))return!0;return!1}function Wt(h,v=globalThis,b=["*"]){v.addEventListener("message",function C(D){if(!D||!D.data)return;if(!io(b,D.origin)){console.warn(`Invalid origin '${D.origin}' for comlink proxy`);return}let{id:N,type:j,path:L}=Object.assign({path:[]},D.data),U=(D.data.argumentList||[]).map(Me),H;try{let $=L.slice(0,-1).reduce((q,te)=>q[te],h),Z=L.reduce((q,te)=>q[te],h);switch(j){case"GET":H=Z;break;case"SET":$[L.slice(-1)[0]]=Me(D.data.value),H=!0;break;case"APPLY":H=Z.apply($,U);break;case"CONSTRUCT":{let q=new Z(...U);H=fo(q)}break;case"ENDPOINT":{let{port1:q,port2:te}=new MessageChannel;Wt(h,te),H=lo(q,[q])}break;case"RELEASE":H=void 0;break;default:return}}catch($){H={value:$,[Lt]:0}}Promise.resolve(H).catch($=>({value:$,[Lt]:0})).then($=>{let[Z,q]=$t($);v.postMessage(Object.assign(Object.assign({},Z),{id:N}),q),j==="RELEASE"&&(v.removeEventListener("message",C),Hr(v),Ln in h&&typeof h[Ln]=="function"&&h[Ln]())}).catch($=>{let[Z,q]=$t({value:new TypeError("Unserializable return value"),[Lt]:0});v.postMessage(Object.assign(Object.assign({},Z),{id:N}),q)})}),v.start&&v.start()}function ao(h){return h.constructor.name==="MessagePort"}function Hr(h){ao(h)&&h.close()}function oo(h,v){return Vn(h,[],v)}function Nt(h){if(h)throw new Error("Proxy has been released and is not useable")}function Yr(h){return He(h,{type:"RELEASE"}).then(()=>{Hr(h)})}var Vt=new WeakMap,zt="FinalizationRegistry"in globalThis&&new FinalizationRegistry(h=>{let v=(Vt.get(h)||0)-1;Vt.set(h,v),v===0&&Yr(h)});function uo(h,v){let b=(Vt.get(v)||0)+1;Vt.set(v,b),zt&&zt.register(h,v,h)}function so(h){zt&&zt.unregister(h)}function Vn(h,v=[],b=function(){}){let C=!1,D=new Proxy(b,{get(N,j){if(Nt(C),j===to)return()=>{so(D),Yr(h),C=!0};if(j==="then"){if(v.length===0)return{then:()=>D};let L=He(h,{type:"GET",path:v.map(U=>U.toString())}).then(Me);return L.then.bind(L)}return Vn(h,[...v,j])},set(N,j,L){Nt(C);let[U,H]=$t(L);return He(h,{type:"SET",path:[...v,j].map($=>$.toString()),value:U},H).then(Me)},apply(N,j,L){Nt(C);let U=v[v.length-1];if(U===eo)return He(h,{type:"ENDPOINT"}).then(Me);if(U==="bind")return Vn(h,v.slice(0,-1));let[H,$]=zr(L);return He(h,{type:"APPLY",path:v.map(Z=>Z.toString()),argumentList:H},$).then(Me)},construct(N,j){Nt(C);let[L,U]=zr(j);return He(h,{type:"CONSTRUCT",path:v.map(H=>H.toString()),argumentList:L},U).then(Me)}});return uo(D,h),D}function co(h){return Array.prototype.concat.apply([],h)}function zr(h){let v=h.map($t);return[v.map(b=>b[0]),co(v.map(b=>b[1]))]}var Ur=new WeakMap;function lo(h,v){return Ur.set(h,v),h}function fo(h){return Object.assign(h,{[$r]:!0})}function $t(h){for(let[v,b]of Qr)if(b.canHandle(h)){let[C,D]=b.serialize(h);return[{type:"HANDLER",name:v,value:C},D]}return[{type:"RAW",value:h},Ur.get(h)||[]]}function Me(h){switch(h.type){case"HANDLER":return Qr.get(h.name).deserialize(h.value);case"RAW":return h.value}}function He(h,v,b){return new Promise(C=>{let D=ho();h.addEventListener("message",function N(j){!j.data||!j.data.id||j.data.id!==D||(h.removeEventListener("message",N),C(j.data))}),h.start&&h.start(),h.postMessage(Object.assign({id:D},v),b)})}function ho(){return new Array(4).fill(0).map(()=>Math.floor(Math.random()*Number.MAX_SAFE_INTEGER).toString(16)).join("-")}var vo=Math.pow(10,8)*24*60*60*1e3,Ko=-vo;var yo=3600;var Gr=yo*24,Ro=Gr*7,mo=Gr*365.2425,go=mo/12,Mo=go*3,zn=Symbol.for("constructDateFrom");function Qt(h,v){return typeof h=="function"?h(v):h&&typeof h=="object"&&zn in h?h[zn](v):h instanceof Date?new h.constructor(v):new Date(v)}function lt(h,v){return Qt(v||h,h)}function Xr(h,v,b){let C=lt(h,b?.in);return isNaN(v)?Qt(b?.in||h,NaN):(v&&C.setDate(C.getDate()+v),C)}function Jr(h,v){return+lt(h)>+lt(v)}var Ht=qa(Zr(),1),qr=Symbol.for("Dexie"),Yt=globalThis[qr]||(globalThis[qr]=Ht.default);if(Ht.default.semVer!==Yt.semVer)throw new Error(`Two different versions of Dexie loaded in the same app: ${Ht.default.semVer} and ${Yt.semVer}`);var{liveQuery:Ho,mergeRanges:Yo,rangesOverlap:Uo,RangeSet:Go,cmp:Xo,Entity:Jo,PropModSymbol:Zo,PropModification:qo,replacePrefix:eu,add:tu,remove:nu}=Yt;var ei=Yt;var Qn=class extends ei{keyValue;packageIndex;symbolIndex;constructor(){super("CacheStore"),this.version(2).stores({keyValue:"key",packageIndex:"importPath, prefix, name",symbolIndex:`
        key,
        packagePath,
        [packageName+prefix],
        [packageName+label],
        [packagePath+prefix]`})}},Hn=class{constructor(v){this.db=v}async getItem(v,b){let C=await this.db.keyValue.get(v);if(C?.expireAt&&Jr(new Date,C.expireAt)){this.deleteItem(v);return}if(C&&b&&!b(C)){this.deleteItem(v);return}return C?.value}async deleteItem(v){return await this.db.keyValue.where({key:v}).delete()>0}async setItem(v,b,C){await this.deleteItem(v),await this.db.keyValue.put({key:v,value:b,expireAt:C})}async flush(){await this.db.keyValue.clear()}},Yn=new Qn,ti=new Hn(Yn);var ni="completionItems.version",bo=7,wo=()=>Xr(new Date,bo),xo=h=>"packageName"in h,Un=class{cachePopulated=!1;populatePromise;db=Yn;keyValue=ti;isWarmUp(){return this.cachePopulated}async getBuiltinNames(){return await this.checkCacheReady(),(await this.db.symbolIndex.where({packageName:"builtin"}).toArray()).map(({label:b})=>b)}buildHoverFilter(v){if(!("packageName"in v))return{key:`builtin.${v.value}`};let C=ii(v.context,v.packageName);return C?{key:`${C}.${v.value}`}:{packageName:v.packageName,label:v.value}}async getHoverValue(v){await this.checkCacheReady();let b=this.buildHoverFilter(v),C=await this.db.symbolIndex.where(b).first();return C?{contents:Do(C),range:v.context.range}:null}async getImportSuggestions(){return await this.getStandardPackages()}async getSymbolSuggestions(v){return console.log(v),await this.checkCacheReady(),xo(v)?await this.getMemberSuggestion(v):await this.getLiteralSuggestion(v)}async getMemberSuggestion({value:v,packageName:b,context:C}){let D=ii(C,b),N=D?{packagePath:D}:{packageName:b};return v&&(N.prefix=v.charAt(0).toLowerCase()),(await this.db.symbolIndex.where(N).toArray()).map(L=>ri(L,C,!!D))}async getLiteralSuggestion({value:v,context:b}){let C=await this.db.packageIndex.where("prefix").equals(v).toArray(),D=await this.db.symbolIndex.where("packagePath").equals("builtin").toArray(),N=C.map(L=>To(L,b)),j=D.map(L=>ri(L,b,!1));return N.concat(j)}async getStandardPackages(){return await this.checkCacheReady(),(await this.db.packageIndex.toArray()).map(Co)}async checkCacheReady(){if(this.cachePopulated)return!0;if(!await this.keyValue.getItem(ni,C=>typeof C.expireAt<"u"))return await this.populateCache(),!0;let b=await this.db.packageIndex.count();return this.cachePopulated=b>0,this.cachePopulated||await this.populateCache(),this.cachePopulated}async populateCache(){this.populatePromise||(this.populatePromise=(async()=>{let v=await fetch("/static/go-index.json");if(!v.ok)throw new Error(`${v.status} ${v.statusText}`);let b=await v.json();if(b.version>1){console.warn(`unsupported symbol index version: ${b.version}, skip update.`);return}console.log(b);let C=So(b.packages),D=Po(b.symbols);await Promise.all([this.db.packageIndex.clear(),this.db.symbolIndex.clear(),this.db.packageIndex.bulkAdd(C),this.db.symbolIndex.bulkAdd(D),this.keyValue.setItem(ni,b.go,wo())]),this.cachePopulated=!0})()),await this.populatePromise}};Wt(new Un);var _o=(b=>(b[b.Name=0]="Name",b[b.Path=1]="Path",b))(_o||{}),ko=(C=>(C[C.None=0]="None",C[C.Single=1]="Single",C[C.Block=2]="Block",C))(ko||{}),oi=h=>h[0]?.toLowerCase()??"",Eo=void 0,ui=8,Io=(h,v)=>h.length?h:v,si=h=>{if(h.length)return{value:h,isTrusted:!0}},So=({names:h,paths:v,docs:b})=>h.map((C,D)=>({name:C,importPath:v[D],prefix:oi(h[D]),documentation:si(b[D])})),Po=({names:h,docs:v,details:b,signatures:C,insertTexts:D,insertTextRules:N,kinds:j,packages:L})=>h.map((U,H)=>({key:`${L[H][1]}.${U}`,label:U,detail:Io(b[H],U),signature:C[H],kind:j[H],insertText:D[H],insertTextRules:N[H],prefix:oi(U),packageName:L[H][0],packagePath:L[H][1],documentation:si(v[H])})),Co=({importPath:h,name:v,documentation:b})=>({label:h,documentation:b,detail:v,insertText:h,kind:ui,range:Eo}),ci=(h,{imports:v})=>{if(!(!v.range||v.allPaths?.has(h)))switch(v.blockType){case 0:{let b=`import "${h}"
`;return[{text:v.prependNewLine?`
${b}`:b,range:v.range,forceMoveMarkers:!0}]}case 1:case 2:return[{text:`import (
${(v.blockPaths??[]).concat(h).sort().map(C=>`	"${C}"`).join(`
`)}
)`,range:v.range,forceMoveMarkers:!0}]}},To=({importPath:h,name:v,documentation:b},C)=>({label:v,documentation:b,detail:h,insertText:v,kind:ui,range:C.range,additionalTextEdits:ci(h,C)}),ri=({packagePath:h,...v},b,C)=>({...v,range:b.range,additionalTextEdits:C?ci(h,b):void 0}),Ao=h=>{let v=h.lastIndexOf("/");return v===-1?h:h.slice(v+1)},ii=({imports:h},v)=>{if(h.allPaths){if(h.allPaths.has(v))return v;for(let b of h.allPaths.keys())if(v===Ao(b))return b}},ai="pkg.go.dev",Do=({label:h,packageName:v,packagePath:b,signature:C,documentation:D})=>{let N=[];C&&N.push({value:"```go\n"+C+"\n```"}),D&&N.push(D);let L=`\`${b==="builtin"?h:`${v}.${h}`}\` on ${ai}`;return N.push({value:`[${L}](https://${ai}/${b}#${h})`,isTrusted:!0}),N};export{ko as ImportClauseType,_o as SymbolSourceKey,Un as WorkerHandler,To as completionFromPackage,ri as completionFromSymbol,So as constructPackages,Po as constructSymbols,ii as findPackagePathFromContext,Co as importCompletionFromPackage,Do as symbolHoverDoc};
/*! Bundled license information:

dexie/dist/dexie.js:
  (*! *****************************************************************************
  Copyright (c) Microsoft Corporation.
  Permission to use, copy, modify, and/or distribute this software for any
  purpose with or without fee is hereby granted.
  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
  REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
  AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
  INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
  LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
  OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
  PERFORMANCE OF THIS SOFTWARE.
  ***************************************************************************** *)

comlink/dist/esm/comlink.mjs:
  (**
   * @license
   * Copyright 2019 Google LLC
   * SPDX-License-Identifier: Apache-2.0
   *)
*/
//# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAic291cmNlcyI6IFsiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2RleGllL25vZGVfbW9kdWxlcy8ucG5wbS90c2xpYkAyLjMuMS9ub2RlX21vZHVsZXMvdHNsaWIvdHNsaWIuZXM2LmpzIiwgIi4uLy4uLy4uL25vZGVfbW9kdWxlcy9kZXhpZS9zcmMvZ2xvYmFscy9nbG9iYWwudHMiLCAiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2RleGllL3NyYy9mdW5jdGlvbnMvdXRpbHMudHMiLCAiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2RleGllL3NyYy9lcnJvcnMvZXJyb3JzLmpzIiwgIi4uLy4uLy4uL25vZGVfbW9kdWxlcy9kZXhpZS9zcmMvZnVuY3Rpb25zL2NoYWluaW5nLWZ1bmN0aW9ucy5qcyIsICIuLi8uLi8uLi9ub2RlX21vZHVsZXMvZGV4aWUvc3JjL2hlbHBlcnMvZGVidWcudHMiLCAiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2RleGllL3NyYy9oZWxwZXJzL3Byb21pc2UuanMiLCAiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2RleGllL3NyYy9mdW5jdGlvbnMvdGVtcC10cmFuc2FjdGlvbi50cyIsICIuLi8uLi8uLi9ub2RlX21vZHVsZXMvZGV4aWUvc3JjL2dsb2JhbHMvY29uc3RhbnRzLnRzIiwgIi4uLy4uLy4uL25vZGVfbW9kdWxlcy9kZXhpZS9zcmMvZnVuY3Rpb25zL2NvbWJpbmUudHMiLCAiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2RleGllL3NyYy9kYmNvcmUva2V5cmFuZ2UudHMiLCAiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2RleGllL3NyYy9mdW5jdGlvbnMvd29ya2Fyb3VuZC11bmRlZmluZWQtcHJpbWtleS50cyIsICIuLi8uLi8uLi9ub2RlX21vZHVsZXMvZGV4aWUvc3JjL2NsYXNzZXMvZW50aXR5L0VudGl0eS50cyIsICIuLi8uLi8uLi9ub2RlX21vZHVsZXMvZGV4aWUvc3JjL2Z1bmN0aW9ucy9jbXAudHMiLCAiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2RleGllL3NyYy9jbGFzc2VzL3RhYmxlL3RhYmxlLnRzIiwgIi4uLy4uLy4uL25vZGVfbW9kdWxlcy9kZXhpZS9zcmMvaGVscGVycy9FdmVudHMuanMiLCAiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2RleGllL3NyYy9mdW5jdGlvbnMvbWFrZS1jbGFzcy1jb25zdHJ1Y3Rvci50cyIsICIuLi8uLi8uLi9ub2RlX21vZHVsZXMvZGV4aWUvc3JjL2NsYXNzZXMvdGFibGUvdGFibGUtY29uc3RydWN0b3IudHMiLCAiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2RleGllL3NyYy9jbGFzc2VzL2NvbGxlY3Rpb24vY29sbGVjdGlvbi1oZWxwZXJzLnRzIiwgIi4uLy4uLy4uL25vZGVfbW9kdWxlcy9kZXhpZS9zcmMvaGVscGVycy9wcm9wLW1vZGlmaWNhdGlvbi50cyIsICIuLi8uLi8uLi9ub2RlX21vZHVsZXMvZGV4aWUvc3JjL2NsYXNzZXMvY29sbGVjdGlvbi9jb2xsZWN0aW9uLnRzIiwgIi4uLy4uLy4uL25vZGVfbW9kdWxlcy9kZXhpZS9zcmMvY2xhc3Nlcy9jb2xsZWN0aW9uL2NvbGxlY3Rpb24tY29uc3RydWN0b3IudHMiLCAiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2RleGllL3NyYy9mdW5jdGlvbnMvY29tcGFyZS1mdW5jdGlvbnMudHMiLCAiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2RleGllL3NyYy9jbGFzc2VzL3doZXJlLWNsYXVzZS93aGVyZS1jbGF1c2UtaGVscGVycy50cyIsICIuLi8uLi8uLi9ub2RlX21vZHVsZXMvZGV4aWUvc3JjL2NsYXNzZXMvd2hlcmUtY2xhdXNlL3doZXJlLWNsYXVzZS50cyIsICIuLi8uLi8uLi9ub2RlX21vZHVsZXMvZGV4aWUvc3JjL2NsYXNzZXMvd2hlcmUtY2xhdXNlL3doZXJlLWNsYXVzZS1jb25zdHJ1Y3Rvci50cyIsICIuLi8uLi8uLi9ub2RlX21vZHVsZXMvZGV4aWUvc3JjL2Z1bmN0aW9ucy9ldmVudC13cmFwcGVycy50cyIsICIuLi8uLi8uLi9ub2RlX21vZHVsZXMvZGV4aWUvc3JjL2dsb2JhbHMvZ2xvYmFsLWV2ZW50cy50cyIsICIuLi8uLi8uLi9ub2RlX21vZHVsZXMvZGV4aWUvc3JjL2NsYXNzZXMvdHJhbnNhY3Rpb24vdHJhbnNhY3Rpb24udHMiLCAiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2RleGllL3NyYy9jbGFzc2VzL3RyYW5zYWN0aW9uL3RyYW5zYWN0aW9uLWNvbnN0cnVjdG9yLnRzIiwgIi4uLy4uLy4uL25vZGVfbW9kdWxlcy9kZXhpZS9zcmMvaGVscGVycy9pbmRleC1zcGVjLnRzIiwgIi4uLy4uLy4uL25vZGVfbW9kdWxlcy9kZXhpZS9zcmMvaGVscGVycy90YWJsZS1zY2hlbWEudHMiLCAiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2RleGllL3NyYy9mdW5jdGlvbnMvcXVpcmtzLnRzIiwgIi4uLy4uLy4uL25vZGVfbW9kdWxlcy9kZXhpZS9zcmMvZGJjb3JlL2dldC1rZXktZXh0cmFjdG9yLnRzIiwgIi4uLy4uLy4uL25vZGVfbW9kdWxlcy9kZXhpZS9zcmMvZGJjb3JlL2RiY29yZS1pbmRleGVkZGIudHMiLCAiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2RleGllL3NyYy9jbGFzc2VzL2RleGllL2dlbmVyYXRlLW1pZGRsZXdhcmUtc3RhY2tzLnRzIiwgIi4uLy4uLy4uL25vZGVfbW9kdWxlcy9kZXhpZS9zcmMvY2xhc3Nlcy92ZXJzaW9uL3NjaGVtYS1oZWxwZXJzLnRzIiwgIi4uLy4uLy4uL25vZGVfbW9kdWxlcy9kZXhpZS9zcmMvY2xhc3Nlcy92ZXJzaW9uL3ZlcnNpb24udHMiLCAiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2RleGllL3NyYy9jbGFzc2VzL3ZlcnNpb24vdmVyc2lvbi1jb25zdHJ1Y3Rvci50cyIsICIuLi8uLi8uLi9ub2RlX21vZHVsZXMvZGV4aWUvc3JjL2hlbHBlcnMvZGF0YWJhc2UtZW51bWVyYXRvci50cyIsICIuLi8uLi8uLi9ub2RlX21vZHVsZXMvZGV4aWUvc3JjL2NsYXNzZXMvZGV4aWUvdmlwLnRzIiwgIi4uLy4uLy4uL25vZGVfbW9kdWxlcy9kZXhpZS9ub2RlX21vZHVsZXMvLnBucG0vc2FmYXJpLTE0LWlkYi1maXhAMy4wLjAvbm9kZV9tb2R1bGVzL3NhZmFyaS0xNC1pZGItZml4L2Rpc3QvaW5kZXguanMiLCAiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2RleGllL3NyYy9oZWxwZXJzL3Jhbmdlc2V0LnRzIiwgIi4uLy4uLy4uL25vZGVfbW9kdWxlcy9kZXhpZS9zcmMvbGl2ZS1xdWVyeS9leHRlbmQtb2JzZXJ2YWJpbGl0eS1zZXQudHMiLCAiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2RleGllL3NyYy9saXZlLXF1ZXJ5L29icy1zZXRzLW92ZXJsYXAudHMiLCAiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2RleGllL3NyYy9saXZlLXF1ZXJ5L2NhY2hlL2NhY2hlLnRzIiwgIi4uLy4uLy4uL25vZGVfbW9kdWxlcy9kZXhpZS9zcmMvbGl2ZS1xdWVyeS9jYWNoZS9zaWduYWxTdWJzY3JpYmVycy50cyIsICIuLi8uLi8uLi9ub2RlX21vZHVsZXMvZGV4aWUvc3JjL2NsYXNzZXMvZGV4aWUvZGV4aWUtb3Blbi50cyIsICIuLi8uLi8uLi9ub2RlX21vZHVsZXMvZGV4aWUvc3JjL2hlbHBlcnMveWllbGQtc3VwcG9ydC50cyIsICIuLi8uLi8uLi9ub2RlX21vZHVsZXMvZGV4aWUvc3JjL2NsYXNzZXMvZGV4aWUvdHJhbnNhY3Rpb24taGVscGVycy50cyIsICIuLi8uLi8uLi9ub2RlX21vZHVsZXMvZGV4aWUvc3JjL2RiY29yZS92aXJ0dWFsLWluZGV4LW1pZGRsZXdhcmUudHMiLCAiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2RleGllL3NyYy9mdW5jdGlvbnMvZ2V0LW9iamVjdC1kaWZmLnRzIiwgIi4uLy4uLy4uL25vZGVfbW9kdWxlcy9kZXhpZS9zcmMvZGJjb3JlL2dldC1lZmZlY3RpdmUta2V5cy50cyIsICIuLi8uLi8uLi9ub2RlX21vZHVsZXMvZGV4aWUvc3JjL2hvb2tzL2hvb2tzLW1pZGRsZXdhcmUudHMiLCAiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2RleGllL3NyYy9kYmNvcmUvY2FjaGUtZXhpc3RpbmctdmFsdWVzLW1pZGRsZXdhcmUudHMiLCAiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2RleGllL3NyYy9saXZlLXF1ZXJ5L2NhY2hlL2lzLWNhY2hhYmxlLWNvbnRleHQudHMiLCAiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2RleGllL3NyYy9saXZlLXF1ZXJ5L2NhY2hlL2lzLWNhY2hhYmxlLXJlcXVlc3QudHMiLCAiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2RleGllL3NyYy9saXZlLXF1ZXJ5L29ic2VydmFiaWxpdHktbWlkZGxld2FyZS50cyIsICIuLi8uLi8uLi9ub2RlX21vZHVsZXMvZGV4aWUvc3JjL2xpdmUtcXVlcnkvY2FjaGUvYWRqdXN0LW9wdGltaXN0aWMtcmVxdWVzdC1mcm9tLWZhaWx1cmVzLnRzIiwgIi4uLy4uLy4uL25vZGVfbW9kdWxlcy9kZXhpZS9zcmMvbGl2ZS1xdWVyeS9jYWNoZS9pcy13aXRoaW4tcmFuZ2UudHMiLCAiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2RleGllL3NyYy9saXZlLXF1ZXJ5L2NhY2hlL2FwcGx5LW9wdGltaXN0aWMtb3BzLnRzIiwgIi4uLy4uLy4uL25vZGVfbW9kdWxlcy9kZXhpZS9zcmMvbGl2ZS1xdWVyeS9jYWNoZS9hcmUtcmFuZ2VzLWVxdWFsLnRzIiwgIi4uLy4uLy4uL25vZGVfbW9kdWxlcy9kZXhpZS9zcmMvbGl2ZS1xdWVyeS9jYWNoZS9pcy1zdXBlci1yYW5nZS50cyIsICIuLi8uLi8uLi9ub2RlX21vZHVsZXMvZGV4aWUvc3JjL2xpdmUtcXVlcnkvY2FjaGUvZmluZC1jb21wYXRpYmxlLXF1ZXJ5LnRzIiwgIi4uLy4uLy4uL25vZGVfbW9kdWxlcy9kZXhpZS9zcmMvbGl2ZS1xdWVyeS9jYWNoZS9zdWJzY3JpYmUtY2FjaGVudHJ5LnRzIiwgIi4uLy4uLy4uL25vZGVfbW9kdWxlcy9kZXhpZS9zcmMvbGl2ZS1xdWVyeS9jYWNoZS9jYWNoZS1taWRkbGV3YXJlLnRzIiwgIi4uLy4uLy4uL25vZGVfbW9kdWxlcy9kZXhpZS9zcmMvaGVscGVycy92aXBpZnkudHMiLCAiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2RleGllL3NyYy9jbGFzc2VzL2RleGllL2RleGllLnRzIiwgIi4uLy4uLy4uL25vZGVfbW9kdWxlcy9kZXhpZS9zcmMvY2xhc3Nlcy9vYnNlcnZhYmxlL29ic2VydmFibGUudHMiLCAiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2RleGllL3NyYy9jbGFzc2VzL2RleGllL2RleGllLWRvbS1kZXBlbmRlbmNpZXMudHMiLCAiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2RleGllL3NyYy9saXZlLXF1ZXJ5L2xpdmUtcXVlcnkudHMiLCAiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2RleGllL3NyYy9jbGFzc2VzL2RleGllL2RleGllLXN0YXRpYy1wcm9wcy50cyIsICIuLi8uLi8uLi9ub2RlX21vZHVsZXMvZGV4aWUvc3JjL2xpdmUtcXVlcnkvcHJvcGFnYXRlLWxvY2FsbHkudHMiLCAiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2RleGllL3NyYy9saXZlLXF1ZXJ5L2VuYWJsZS1icm9hZGNhc3QudHMiLCAiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2RleGllL3NyYy9zdXBwb3J0LWJmY2FjaGUudHMiLCAiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2RleGllL3NyYy9mdW5jdGlvbnMvcHJvcG1vZHMvYWRkLnRzIiwgIi4uLy4uLy4uL25vZGVfbW9kdWxlcy9kZXhpZS9zcmMvZnVuY3Rpb25zL3Byb3Btb2RzL3JlbW92ZS50cyIsICIuLi8uLi8uLi9ub2RlX21vZHVsZXMvZGV4aWUvc3JjL2Z1bmN0aW9ucy9wcm9wbW9kcy9yZXBsYWNlLXByZWZpeC50cyIsICIuLi8uLi8uLi9ub2RlX21vZHVsZXMvZGV4aWUvc3JjL2luZGV4LnRzIiwgIi4uLy4uLy4uL25vZGVfbW9kdWxlcy9kZXhpZS9zcmMvaW5kZXgtdW1kLnRzIiwgIi4uLy4uLy4uL25vZGVfbW9kdWxlcy9jb21saW5rL3NyYy9jb21saW5rLnRzIiwgIi4uLy4uLy4uL25vZGVfbW9kdWxlcy9kYXRlLWZucy9jb25zdGFudHMuanMiLCAiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2RhdGUtZm5zL2NvbnN0cnVjdEZyb20uanMiLCAiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2RhdGUtZm5zL3RvRGF0ZS5qcyIsICIuLi8uLi8uLi9ub2RlX21vZHVsZXMvZGF0ZS1mbnMvYWRkRGF5cy5qcyIsICIuLi8uLi8uLi9ub2RlX21vZHVsZXMvZGF0ZS1mbnMvaXNBZnRlci5qcyIsICIuLi8uLi8uLi9ub2RlX21vZHVsZXMvZGV4aWUvaW1wb3J0LXdyYXBwZXIubWpzIiwgIi4uLy4uLy4uL3dhc21jb2RlL2RiLnRzIiwgIi4uLy4uLy4uL3dhc21jb2RlL2xhbmd1YWdlL2xhbmd1YWdlLndvcmtlci50cyJdLAogICJzb3VyY2VzQ29udGVudCI6IFsiLyohICoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqXHJcbkNvcHlyaWdodCAoYykgTWljcm9zb2Z0IENvcnBvcmF0aW9uLlxyXG5cclxuUGVybWlzc2lvbiB0byB1c2UsIGNvcHksIG1vZGlmeSwgYW5kL29yIGRpc3RyaWJ1dGUgdGhpcyBzb2Z0d2FyZSBmb3IgYW55XHJcbnB1cnBvc2Ugd2l0aCBvciB3aXRob3V0IGZlZSBpcyBoZXJlYnkgZ3JhbnRlZC5cclxuXHJcblRIRSBTT0ZUV0FSRSBJUyBQUk9WSURFRCBcIkFTIElTXCIgQU5EIFRIRSBBVVRIT1IgRElTQ0xBSU1TIEFMTCBXQVJSQU5USUVTIFdJVEhcclxuUkVHQVJEIFRPIFRISVMgU09GVFdBUkUgSU5DTFVESU5HIEFMTCBJTVBMSUVEIFdBUlJBTlRJRVMgT0YgTUVSQ0hBTlRBQklMSVRZXHJcbkFORCBGSVRORVNTLiBJTiBOTyBFVkVOVCBTSEFMTCBUSEUgQVVUSE9SIEJFIExJQUJMRSBGT1IgQU5ZIFNQRUNJQUwsIERJUkVDVCxcclxuSU5ESVJFQ1QsIE9SIENPTlNFUVVFTlRJQUwgREFNQUdFUyBPUiBBTlkgREFNQUdFUyBXSEFUU09FVkVSIFJFU1VMVElORyBGUk9NXHJcbkxPU1MgT0YgVVNFLCBEQVRBIE9SIFBST0ZJVFMsIFdIRVRIRVIgSU4gQU4gQUNUSU9OIE9GIENPTlRSQUNULCBORUdMSUdFTkNFIE9SXHJcbk9USEVSIFRPUlRJT1VTIEFDVElPTiwgQVJJU0lORyBPVVQgT0YgT1IgSU4gQ09OTkVDVElPTiBXSVRIIFRIRSBVU0UgT1JcclxuUEVSRk9STUFOQ0UgT0YgVEhJUyBTT0ZUV0FSRS5cclxuKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiogKi9cclxuLyogZ2xvYmFsIFJlZmxlY3QsIFByb21pc2UgKi9cclxuXHJcbnZhciBleHRlbmRTdGF0aWNzID0gZnVuY3Rpb24oZCwgYikge1xyXG4gICAgZXh0ZW5kU3RhdGljcyA9IE9iamVjdC5zZXRQcm90b3R5cGVPZiB8fFxyXG4gICAgICAgICh7IF9fcHJvdG9fXzogW10gfSBpbnN0YW5jZW9mIEFycmF5ICYmIGZ1bmN0aW9uIChkLCBiKSB7IGQuX19wcm90b19fID0gYjsgfSkgfHxcclxuICAgICAgICBmdW5jdGlvbiAoZCwgYikgeyBmb3IgKHZhciBwIGluIGIpIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoYiwgcCkpIGRbcF0gPSBiW3BdOyB9O1xyXG4gICAgcmV0dXJuIGV4dGVuZFN0YXRpY3MoZCwgYik7XHJcbn07XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gX19leHRlbmRzKGQsIGIpIHtcclxuICAgIGlmICh0eXBlb2YgYiAhPT0gXCJmdW5jdGlvblwiICYmIGIgIT09IG51bGwpXHJcbiAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNsYXNzIGV4dGVuZHMgdmFsdWUgXCIgKyBTdHJpbmcoYikgKyBcIiBpcyBub3QgYSBjb25zdHJ1Y3RvciBvciBudWxsXCIpO1xyXG4gICAgZXh0ZW5kU3RhdGljcyhkLCBiKTtcclxuICAgIGZ1bmN0aW9uIF9fKCkgeyB0aGlzLmNvbnN0cnVjdG9yID0gZDsgfVxyXG4gICAgZC5wcm90b3R5cGUgPSBiID09PSBudWxsID8gT2JqZWN0LmNyZWF0ZShiKSA6IChfXy5wcm90b3R5cGUgPSBiLnByb3RvdHlwZSwgbmV3IF9fKCkpO1xyXG59XHJcblxyXG5leHBvcnQgdmFyIF9fYXNzaWduID0gZnVuY3Rpb24oKSB7XHJcbiAgICBfX2Fzc2lnbiA9IE9iamVjdC5hc3NpZ24gfHwgZnVuY3Rpb24gX19hc3NpZ24odCkge1xyXG4gICAgICAgIGZvciAodmFyIHMsIGkgPSAxLCBuID0gYXJndW1lbnRzLmxlbmd0aDsgaSA8IG47IGkrKykge1xyXG4gICAgICAgICAgICBzID0gYXJndW1lbnRzW2ldO1xyXG4gICAgICAgICAgICBmb3IgKHZhciBwIGluIHMpIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwocywgcCkpIHRbcF0gPSBzW3BdO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gdDtcclxuICAgIH1cclxuICAgIHJldHVybiBfX2Fzc2lnbi5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gX19yZXN0KHMsIGUpIHtcclxuICAgIHZhciB0ID0ge307XHJcbiAgICBmb3IgKHZhciBwIGluIHMpIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwocywgcCkgJiYgZS5pbmRleE9mKHApIDwgMClcclxuICAgICAgICB0W3BdID0gc1twXTtcclxuICAgIGlmIChzICE9IG51bGwgJiYgdHlwZW9mIE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMgPT09IFwiZnVuY3Rpb25cIilcclxuICAgICAgICBmb3IgKHZhciBpID0gMCwgcCA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMocyk7IGkgPCBwLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgIGlmIChlLmluZGV4T2YocFtpXSkgPCAwICYmIE9iamVjdC5wcm90b3R5cGUucHJvcGVydHlJc0VudW1lcmFibGUuY2FsbChzLCBwW2ldKSlcclxuICAgICAgICAgICAgICAgIHRbcFtpXV0gPSBzW3BbaV1dO1xyXG4gICAgICAgIH1cclxuICAgIHJldHVybiB0O1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gX19kZWNvcmF0ZShkZWNvcmF0b3JzLCB0YXJnZXQsIGtleSwgZGVzYykge1xyXG4gICAgdmFyIGMgPSBhcmd1bWVudHMubGVuZ3RoLCByID0gYyA8IDMgPyB0YXJnZXQgOiBkZXNjID09PSBudWxsID8gZGVzYyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IodGFyZ2V0LCBrZXkpIDogZGVzYywgZDtcclxuICAgIGlmICh0eXBlb2YgUmVmbGVjdCA9PT0gXCJvYmplY3RcIiAmJiB0eXBlb2YgUmVmbGVjdC5kZWNvcmF0ZSA9PT0gXCJmdW5jdGlvblwiKSByID0gUmVmbGVjdC5kZWNvcmF0ZShkZWNvcmF0b3JzLCB0YXJnZXQsIGtleSwgZGVzYyk7XHJcbiAgICBlbHNlIGZvciAodmFyIGkgPSBkZWNvcmF0b3JzLmxlbmd0aCAtIDE7IGkgPj0gMDsgaS0tKSBpZiAoZCA9IGRlY29yYXRvcnNbaV0pIHIgPSAoYyA8IDMgPyBkKHIpIDogYyA+IDMgPyBkKHRhcmdldCwga2V5LCByKSA6IGQodGFyZ2V0LCBrZXkpKSB8fCByO1xyXG4gICAgcmV0dXJuIGMgPiAzICYmIHIgJiYgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwga2V5LCByKSwgcjtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIF9fcGFyYW0ocGFyYW1JbmRleCwgZGVjb3JhdG9yKSB7XHJcbiAgICByZXR1cm4gZnVuY3Rpb24gKHRhcmdldCwga2V5KSB7IGRlY29yYXRvcih0YXJnZXQsIGtleSwgcGFyYW1JbmRleCk7IH1cclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIF9fbWV0YWRhdGEobWV0YWRhdGFLZXksIG1ldGFkYXRhVmFsdWUpIHtcclxuICAgIGlmICh0eXBlb2YgUmVmbGVjdCA9PT0gXCJvYmplY3RcIiAmJiB0eXBlb2YgUmVmbGVjdC5tZXRhZGF0YSA9PT0gXCJmdW5jdGlvblwiKSByZXR1cm4gUmVmbGVjdC5tZXRhZGF0YShtZXRhZGF0YUtleSwgbWV0YWRhdGFWYWx1ZSk7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBfX2F3YWl0ZXIodGhpc0FyZywgX2FyZ3VtZW50cywgUCwgZ2VuZXJhdG9yKSB7XHJcbiAgICBmdW5jdGlvbiBhZG9wdCh2YWx1ZSkgeyByZXR1cm4gdmFsdWUgaW5zdGFuY2VvZiBQID8gdmFsdWUgOiBuZXcgUChmdW5jdGlvbiAocmVzb2x2ZSkgeyByZXNvbHZlKHZhbHVlKTsgfSk7IH1cclxuICAgIHJldHVybiBuZXcgKFAgfHwgKFAgPSBQcm9taXNlKSkoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkge1xyXG4gICAgICAgIGZ1bmN0aW9uIGZ1bGZpbGxlZCh2YWx1ZSkgeyB0cnkgeyBzdGVwKGdlbmVyYXRvci5uZXh0KHZhbHVlKSk7IH0gY2F0Y2ggKGUpIHsgcmVqZWN0KGUpOyB9IH1cclxuICAgICAgICBmdW5jdGlvbiByZWplY3RlZCh2YWx1ZSkgeyB0cnkgeyBzdGVwKGdlbmVyYXRvcltcInRocm93XCJdKHZhbHVlKSk7IH0gY2F0Y2ggKGUpIHsgcmVqZWN0KGUpOyB9IH1cclxuICAgICAgICBmdW5jdGlvbiBzdGVwKHJlc3VsdCkgeyByZXN1bHQuZG9uZSA/IHJlc29sdmUocmVzdWx0LnZhbHVlKSA6IGFkb3B0KHJlc3VsdC52YWx1ZSkudGhlbihmdWxmaWxsZWQsIHJlamVjdGVkKTsgfVxyXG4gICAgICAgIHN0ZXAoKGdlbmVyYXRvciA9IGdlbmVyYXRvci5hcHBseSh0aGlzQXJnLCBfYXJndW1lbnRzIHx8IFtdKSkubmV4dCgpKTtcclxuICAgIH0pO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gX19nZW5lcmF0b3IodGhpc0FyZywgYm9keSkge1xyXG4gICAgdmFyIF8gPSB7IGxhYmVsOiAwLCBzZW50OiBmdW5jdGlvbigpIHsgaWYgKHRbMF0gJiAxKSB0aHJvdyB0WzFdOyByZXR1cm4gdFsxXTsgfSwgdHJ5czogW10sIG9wczogW10gfSwgZiwgeSwgdCwgZztcclxuICAgIHJldHVybiBnID0geyBuZXh0OiB2ZXJiKDApLCBcInRocm93XCI6IHZlcmIoMSksIFwicmV0dXJuXCI6IHZlcmIoMikgfSwgdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIChnW1N5bWJvbC5pdGVyYXRvcl0gPSBmdW5jdGlvbigpIHsgcmV0dXJuIHRoaXM7IH0pLCBnO1xyXG4gICAgZnVuY3Rpb24gdmVyYihuKSB7IHJldHVybiBmdW5jdGlvbiAodikgeyByZXR1cm4gc3RlcChbbiwgdl0pOyB9OyB9XHJcbiAgICBmdW5jdGlvbiBzdGVwKG9wKSB7XHJcbiAgICAgICAgaWYgKGYpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJHZW5lcmF0b3IgaXMgYWxyZWFkeSBleGVjdXRpbmcuXCIpO1xyXG4gICAgICAgIHdoaWxlIChfKSB0cnkge1xyXG4gICAgICAgICAgICBpZiAoZiA9IDEsIHkgJiYgKHQgPSBvcFswXSAmIDIgPyB5W1wicmV0dXJuXCJdIDogb3BbMF0gPyB5W1widGhyb3dcIl0gfHwgKCh0ID0geVtcInJldHVyblwiXSkgJiYgdC5jYWxsKHkpLCAwKSA6IHkubmV4dCkgJiYgISh0ID0gdC5jYWxsKHksIG9wWzFdKSkuZG9uZSkgcmV0dXJuIHQ7XHJcbiAgICAgICAgICAgIGlmICh5ID0gMCwgdCkgb3AgPSBbb3BbMF0gJiAyLCB0LnZhbHVlXTtcclxuICAgICAgICAgICAgc3dpdGNoIChvcFswXSkge1xyXG4gICAgICAgICAgICAgICAgY2FzZSAwOiBjYXNlIDE6IHQgPSBvcDsgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICBjYXNlIDQ6IF8ubGFiZWwrKzsgcmV0dXJuIHsgdmFsdWU6IG9wWzFdLCBkb25lOiBmYWxzZSB9O1xyXG4gICAgICAgICAgICAgICAgY2FzZSA1OiBfLmxhYmVsKys7IHkgPSBvcFsxXTsgb3AgPSBbMF07IGNvbnRpbnVlO1xyXG4gICAgICAgICAgICAgICAgY2FzZSA3OiBvcCA9IF8ub3BzLnBvcCgpOyBfLnRyeXMucG9wKCk7IGNvbnRpbnVlO1xyXG4gICAgICAgICAgICAgICAgZGVmYXVsdDpcclxuICAgICAgICAgICAgICAgICAgICBpZiAoISh0ID0gXy50cnlzLCB0ID0gdC5sZW5ndGggPiAwICYmIHRbdC5sZW5ndGggLSAxXSkgJiYgKG9wWzBdID09PSA2IHx8IG9wWzBdID09PSAyKSkgeyBfID0gMDsgY29udGludWU7IH1cclxuICAgICAgICAgICAgICAgICAgICBpZiAob3BbMF0gPT09IDMgJiYgKCF0IHx8IChvcFsxXSA+IHRbMF0gJiYgb3BbMV0gPCB0WzNdKSkpIHsgXy5sYWJlbCA9IG9wWzFdOyBicmVhazsgfVxyXG4gICAgICAgICAgICAgICAgICAgIGlmIChvcFswXSA9PT0gNiAmJiBfLmxhYmVsIDwgdFsxXSkgeyBfLmxhYmVsID0gdFsxXTsgdCA9IG9wOyBicmVhazsgfVxyXG4gICAgICAgICAgICAgICAgICAgIGlmICh0ICYmIF8ubGFiZWwgPCB0WzJdKSB7IF8ubGFiZWwgPSB0WzJdOyBfLm9wcy5wdXNoKG9wKTsgYnJlYWs7IH1cclxuICAgICAgICAgICAgICAgICAgICBpZiAodFsyXSkgXy5vcHMucG9wKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgXy50cnlzLnBvcCgpOyBjb250aW51ZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBvcCA9IGJvZHkuY2FsbCh0aGlzQXJnLCBfKTtcclxuICAgICAgICB9IGNhdGNoIChlKSB7IG9wID0gWzYsIGVdOyB5ID0gMDsgfSBmaW5hbGx5IHsgZiA9IHQgPSAwOyB9XHJcbiAgICAgICAgaWYgKG9wWzBdICYgNSkgdGhyb3cgb3BbMV07IHJldHVybiB7IHZhbHVlOiBvcFswXSA/IG9wWzFdIDogdm9pZCAwLCBkb25lOiB0cnVlIH07XHJcbiAgICB9XHJcbn1cclxuXHJcbmV4cG9ydCB2YXIgX19jcmVhdGVCaW5kaW5nID0gT2JqZWN0LmNyZWF0ZSA/IChmdW5jdGlvbihvLCBtLCBrLCBrMikge1xyXG4gICAgaWYgKGsyID09PSB1bmRlZmluZWQpIGsyID0gaztcclxuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvLCBrMiwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uKCkgeyByZXR1cm4gbVtrXTsgfSB9KTtcclxufSkgOiAoZnVuY3Rpb24obywgbSwgaywgazIpIHtcclxuICAgIGlmIChrMiA9PT0gdW5kZWZpbmVkKSBrMiA9IGs7XHJcbiAgICBvW2syXSA9IG1ba107XHJcbn0pO1xyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIF9fZXhwb3J0U3RhcihtLCBvKSB7XHJcbiAgICBmb3IgKHZhciBwIGluIG0pIGlmIChwICE9PSBcImRlZmF1bHRcIiAmJiAhT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG8sIHApKSBfX2NyZWF0ZUJpbmRpbmcobywgbSwgcCk7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBfX3ZhbHVlcyhvKSB7XHJcbiAgICB2YXIgcyA9IHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiBTeW1ib2wuaXRlcmF0b3IsIG0gPSBzICYmIG9bc10sIGkgPSAwO1xyXG4gICAgaWYgKG0pIHJldHVybiBtLmNhbGwobyk7XHJcbiAgICBpZiAobyAmJiB0eXBlb2Ygby5sZW5ndGggPT09IFwibnVtYmVyXCIpIHJldHVybiB7XHJcbiAgICAgICAgbmV4dDogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICBpZiAobyAmJiBpID49IG8ubGVuZ3RoKSBvID0gdm9pZCAwO1xyXG4gICAgICAgICAgICByZXR1cm4geyB2YWx1ZTogbyAmJiBvW2krK10sIGRvbmU6ICFvIH07XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuICAgIHRocm93IG5ldyBUeXBlRXJyb3IocyA/IFwiT2JqZWN0IGlzIG5vdCBpdGVyYWJsZS5cIiA6IFwiU3ltYm9sLml0ZXJhdG9yIGlzIG5vdCBkZWZpbmVkLlwiKTtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIF9fcmVhZChvLCBuKSB7XHJcbiAgICB2YXIgbSA9IHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiBvW1N5bWJvbC5pdGVyYXRvcl07XHJcbiAgICBpZiAoIW0pIHJldHVybiBvO1xyXG4gICAgdmFyIGkgPSBtLmNhbGwobyksIHIsIGFyID0gW10sIGU7XHJcbiAgICB0cnkge1xyXG4gICAgICAgIHdoaWxlICgobiA9PT0gdm9pZCAwIHx8IG4tLSA+IDApICYmICEociA9IGkubmV4dCgpKS5kb25lKSBhci5wdXNoKHIudmFsdWUpO1xyXG4gICAgfVxyXG4gICAgY2F0Y2ggKGVycm9yKSB7IGUgPSB7IGVycm9yOiBlcnJvciB9OyB9XHJcbiAgICBmaW5hbGx5IHtcclxuICAgICAgICB0cnkge1xyXG4gICAgICAgICAgICBpZiAociAmJiAhci5kb25lICYmIChtID0gaVtcInJldHVyblwiXSkpIG0uY2FsbChpKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZmluYWxseSB7IGlmIChlKSB0aHJvdyBlLmVycm9yOyB9XHJcbiAgICB9XHJcbiAgICByZXR1cm4gYXI7XHJcbn1cclxuXHJcbi8qKiBAZGVwcmVjYXRlZCAqL1xyXG5leHBvcnQgZnVuY3Rpb24gX19zcHJlYWQoKSB7XHJcbiAgICBmb3IgKHZhciBhciA9IFtdLCBpID0gMDsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKylcclxuICAgICAgICBhciA9IGFyLmNvbmNhdChfX3JlYWQoYXJndW1lbnRzW2ldKSk7XHJcbiAgICByZXR1cm4gYXI7XHJcbn1cclxuXHJcbi8qKiBAZGVwcmVjYXRlZCAqL1xyXG5leHBvcnQgZnVuY3Rpb24gX19zcHJlYWRBcnJheXMoKSB7XHJcbiAgICBmb3IgKHZhciBzID0gMCwgaSA9IDAsIGlsID0gYXJndW1lbnRzLmxlbmd0aDsgaSA8IGlsOyBpKyspIHMgKz0gYXJndW1lbnRzW2ldLmxlbmd0aDtcclxuICAgIGZvciAodmFyIHIgPSBBcnJheShzKSwgayA9IDAsIGkgPSAwOyBpIDwgaWw7IGkrKylcclxuICAgICAgICBmb3IgKHZhciBhID0gYXJndW1lbnRzW2ldLCBqID0gMCwgamwgPSBhLmxlbmd0aDsgaiA8IGpsOyBqKyssIGsrKylcclxuICAgICAgICAgICAgcltrXSA9IGFbal07XHJcbiAgICByZXR1cm4gcjtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIF9fc3ByZWFkQXJyYXkodG8sIGZyb20sIHBhY2spIHtcclxuICAgIGlmIChwYWNrIHx8IGFyZ3VtZW50cy5sZW5ndGggPT09IDIpIGZvciAodmFyIGkgPSAwLCBsID0gZnJvbS5sZW5ndGgsIGFyOyBpIDwgbDsgaSsrKSB7XHJcbiAgICAgICAgaWYgKGFyIHx8ICEoaSBpbiBmcm9tKSkge1xyXG4gICAgICAgICAgICBpZiAoIWFyKSBhciA9IEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGZyb20sIDAsIGkpO1xyXG4gICAgICAgICAgICBhcltpXSA9IGZyb21baV07XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgcmV0dXJuIHRvLmNvbmNhdChhciB8fCBBcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChmcm9tKSk7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBfX2F3YWl0KHYpIHtcclxuICAgIHJldHVybiB0aGlzIGluc3RhbmNlb2YgX19hd2FpdCA/ICh0aGlzLnYgPSB2LCB0aGlzKSA6IG5ldyBfX2F3YWl0KHYpO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gX19hc3luY0dlbmVyYXRvcih0aGlzQXJnLCBfYXJndW1lbnRzLCBnZW5lcmF0b3IpIHtcclxuICAgIGlmICghU3ltYm9sLmFzeW5jSXRlcmF0b3IpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJTeW1ib2wuYXN5bmNJdGVyYXRvciBpcyBub3QgZGVmaW5lZC5cIik7XHJcbiAgICB2YXIgZyA9IGdlbmVyYXRvci5hcHBseSh0aGlzQXJnLCBfYXJndW1lbnRzIHx8IFtdKSwgaSwgcSA9IFtdO1xyXG4gICAgcmV0dXJuIGkgPSB7fSwgdmVyYihcIm5leHRcIiksIHZlcmIoXCJ0aHJvd1wiKSwgdmVyYihcInJldHVyblwiKSwgaVtTeW1ib2wuYXN5bmNJdGVyYXRvcl0gPSBmdW5jdGlvbiAoKSB7IHJldHVybiB0aGlzOyB9LCBpO1xyXG4gICAgZnVuY3Rpb24gdmVyYihuKSB7IGlmIChnW25dKSBpW25dID0gZnVuY3Rpb24gKHYpIHsgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uIChhLCBiKSB7IHEucHVzaChbbiwgdiwgYSwgYl0pID4gMSB8fCByZXN1bWUobiwgdik7IH0pOyB9OyB9XHJcbiAgICBmdW5jdGlvbiByZXN1bWUobiwgdikgeyB0cnkgeyBzdGVwKGdbbl0odikpOyB9IGNhdGNoIChlKSB7IHNldHRsZShxWzBdWzNdLCBlKTsgfSB9XHJcbiAgICBmdW5jdGlvbiBzdGVwKHIpIHsgci52YWx1ZSBpbnN0YW5jZW9mIF9fYXdhaXQgPyBQcm9taXNlLnJlc29sdmUoci52YWx1ZS52KS50aGVuKGZ1bGZpbGwsIHJlamVjdCkgOiBzZXR0bGUocVswXVsyXSwgcik7IH1cclxuICAgIGZ1bmN0aW9uIGZ1bGZpbGwodmFsdWUpIHsgcmVzdW1lKFwibmV4dFwiLCB2YWx1ZSk7IH1cclxuICAgIGZ1bmN0aW9uIHJlamVjdCh2YWx1ZSkgeyByZXN1bWUoXCJ0aHJvd1wiLCB2YWx1ZSk7IH1cclxuICAgIGZ1bmN0aW9uIHNldHRsZShmLCB2KSB7IGlmIChmKHYpLCBxLnNoaWZ0KCksIHEubGVuZ3RoKSByZXN1bWUocVswXVswXSwgcVswXVsxXSk7IH1cclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIF9fYXN5bmNEZWxlZ2F0b3Iobykge1xyXG4gICAgdmFyIGksIHA7XHJcbiAgICByZXR1cm4gaSA9IHt9LCB2ZXJiKFwibmV4dFwiKSwgdmVyYihcInRocm93XCIsIGZ1bmN0aW9uIChlKSB7IHRocm93IGU7IH0pLCB2ZXJiKFwicmV0dXJuXCIpLCBpW1N5bWJvbC5pdGVyYXRvcl0gPSBmdW5jdGlvbiAoKSB7IHJldHVybiB0aGlzOyB9LCBpO1xyXG4gICAgZnVuY3Rpb24gdmVyYihuLCBmKSB7IGlbbl0gPSBvW25dID8gZnVuY3Rpb24gKHYpIHsgcmV0dXJuIChwID0gIXApID8geyB2YWx1ZTogX19hd2FpdChvW25dKHYpKSwgZG9uZTogbiA9PT0gXCJyZXR1cm5cIiB9IDogZiA/IGYodikgOiB2OyB9IDogZjsgfVxyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gX19hc3luY1ZhbHVlcyhvKSB7XHJcbiAgICBpZiAoIVN5bWJvbC5hc3luY0l0ZXJhdG9yKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiU3ltYm9sLmFzeW5jSXRlcmF0b3IgaXMgbm90IGRlZmluZWQuXCIpO1xyXG4gICAgdmFyIG0gPSBvW1N5bWJvbC5hc3luY0l0ZXJhdG9yXSwgaTtcclxuICAgIHJldHVybiBtID8gbS5jYWxsKG8pIDogKG8gPSB0eXBlb2YgX192YWx1ZXMgPT09IFwiZnVuY3Rpb25cIiA/IF9fdmFsdWVzKG8pIDogb1tTeW1ib2wuaXRlcmF0b3JdKCksIGkgPSB7fSwgdmVyYihcIm5leHRcIiksIHZlcmIoXCJ0aHJvd1wiKSwgdmVyYihcInJldHVyblwiKSwgaVtTeW1ib2wuYXN5bmNJdGVyYXRvcl0gPSBmdW5jdGlvbiAoKSB7IHJldHVybiB0aGlzOyB9LCBpKTtcclxuICAgIGZ1bmN0aW9uIHZlcmIobikgeyBpW25dID0gb1tuXSAmJiBmdW5jdGlvbiAodikgeyByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkgeyB2ID0gb1tuXSh2KSwgc2V0dGxlKHJlc29sdmUsIHJlamVjdCwgdi5kb25lLCB2LnZhbHVlKTsgfSk7IH07IH1cclxuICAgIGZ1bmN0aW9uIHNldHRsZShyZXNvbHZlLCByZWplY3QsIGQsIHYpIHsgUHJvbWlzZS5yZXNvbHZlKHYpLnRoZW4oZnVuY3Rpb24odikgeyByZXNvbHZlKHsgdmFsdWU6IHYsIGRvbmU6IGQgfSk7IH0sIHJlamVjdCk7IH1cclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIF9fbWFrZVRlbXBsYXRlT2JqZWN0KGNvb2tlZCwgcmF3KSB7XHJcbiAgICBpZiAoT2JqZWN0LmRlZmluZVByb3BlcnR5KSB7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eShjb29rZWQsIFwicmF3XCIsIHsgdmFsdWU6IHJhdyB9KTsgfSBlbHNlIHsgY29va2VkLnJhdyA9IHJhdzsgfVxyXG4gICAgcmV0dXJuIGNvb2tlZDtcclxufTtcclxuXHJcbnZhciBfX3NldE1vZHVsZURlZmF1bHQgPSBPYmplY3QuY3JlYXRlID8gKGZ1bmN0aW9uKG8sIHYpIHtcclxuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvLCBcImRlZmF1bHRcIiwgeyBlbnVtZXJhYmxlOiB0cnVlLCB2YWx1ZTogdiB9KTtcclxufSkgOiBmdW5jdGlvbihvLCB2KSB7XHJcbiAgICBvW1wiZGVmYXVsdFwiXSA9IHY7XHJcbn07XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gX19pbXBvcnRTdGFyKG1vZCkge1xyXG4gICAgaWYgKG1vZCAmJiBtb2QuX19lc01vZHVsZSkgcmV0dXJuIG1vZDtcclxuICAgIHZhciByZXN1bHQgPSB7fTtcclxuICAgIGlmIChtb2QgIT0gbnVsbCkgZm9yICh2YXIgayBpbiBtb2QpIGlmIChrICE9PSBcImRlZmF1bHRcIiAmJiBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwobW9kLCBrKSkgX19jcmVhdGVCaW5kaW5nKHJlc3VsdCwgbW9kLCBrKTtcclxuICAgIF9fc2V0TW9kdWxlRGVmYXVsdChyZXN1bHQsIG1vZCk7XHJcbiAgICByZXR1cm4gcmVzdWx0O1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gX19pbXBvcnREZWZhdWx0KG1vZCkge1xyXG4gICAgcmV0dXJuIChtb2QgJiYgbW9kLl9fZXNNb2R1bGUpID8gbW9kIDogeyBkZWZhdWx0OiBtb2QgfTtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIF9fY2xhc3NQcml2YXRlRmllbGRHZXQocmVjZWl2ZXIsIHN0YXRlLCBraW5kLCBmKSB7XHJcbiAgICBpZiAoa2luZCA9PT0gXCJhXCIgJiYgIWYpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJQcml2YXRlIGFjY2Vzc29yIHdhcyBkZWZpbmVkIHdpdGhvdXQgYSBnZXR0ZXJcIik7XHJcbiAgICBpZiAodHlwZW9mIHN0YXRlID09PSBcImZ1bmN0aW9uXCIgPyByZWNlaXZlciAhPT0gc3RhdGUgfHwgIWYgOiAhc3RhdGUuaGFzKHJlY2VpdmVyKSkgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCByZWFkIHByaXZhdGUgbWVtYmVyIGZyb20gYW4gb2JqZWN0IHdob3NlIGNsYXNzIGRpZCBub3QgZGVjbGFyZSBpdFwiKTtcclxuICAgIHJldHVybiBraW5kID09PSBcIm1cIiA/IGYgOiBraW5kID09PSBcImFcIiA/IGYuY2FsbChyZWNlaXZlcikgOiBmID8gZi52YWx1ZSA6IHN0YXRlLmdldChyZWNlaXZlcik7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBfX2NsYXNzUHJpdmF0ZUZpZWxkU2V0KHJlY2VpdmVyLCBzdGF0ZSwgdmFsdWUsIGtpbmQsIGYpIHtcclxuICAgIGlmIChraW5kID09PSBcIm1cIikgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlByaXZhdGUgbWV0aG9kIGlzIG5vdCB3cml0YWJsZVwiKTtcclxuICAgIGlmIChraW5kID09PSBcImFcIiAmJiAhZikgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlByaXZhdGUgYWNjZXNzb3Igd2FzIGRlZmluZWQgd2l0aG91dCBhIHNldHRlclwiKTtcclxuICAgIGlmICh0eXBlb2Ygc3RhdGUgPT09IFwiZnVuY3Rpb25cIiA/IHJlY2VpdmVyICE9PSBzdGF0ZSB8fCAhZiA6ICFzdGF0ZS5oYXMocmVjZWl2ZXIpKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IHdyaXRlIHByaXZhdGUgbWVtYmVyIHRvIGFuIG9iamVjdCB3aG9zZSBjbGFzcyBkaWQgbm90IGRlY2xhcmUgaXRcIik7XHJcbiAgICByZXR1cm4gKGtpbmQgPT09IFwiYVwiID8gZi5jYWxsKHJlY2VpdmVyLCB2YWx1ZSkgOiBmID8gZi52YWx1ZSA9IHZhbHVlIDogc3RhdGUuc2V0KHJlY2VpdmVyLCB2YWx1ZSkpLCB2YWx1ZTtcclxufVxyXG4iLCAiZGVjbGFyZSB2YXIgZ2xvYmFsO1xuZXhwb3J0IGNvbnN0IF9nbG9iYWw6IGFueSA9XG4gICAgdHlwZW9mIGdsb2JhbFRoaXMgIT09ICd1bmRlZmluZWQnID8gZ2xvYmFsVGhpcyA6XG4gICAgdHlwZW9mIHNlbGYgIT09ICd1bmRlZmluZWQnID8gc2VsZiA6XG4gICAgdHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcgPyB3aW5kb3cgOlxuICAgIGdsb2JhbDtcbiIsICLvu79pbXBvcnQgeyBfZ2xvYmFsIH0gZnJvbSBcIi4uL2dsb2JhbHMvZ2xvYmFsXCI7XG5leHBvcnQgY29uc3Qga2V5cyA9IE9iamVjdC5rZXlzO1xuZXhwb3J0IGNvbnN0IGlzQXJyYXkgPSBBcnJheS5pc0FycmF5O1xuaWYgKHR5cGVvZiBQcm9taXNlICE9PSAndW5kZWZpbmVkJyAmJiAhX2dsb2JhbC5Qcm9taXNlKXtcbiAgICAvLyBJbiBqc2RvbSwgdGhpcyBpdCBjYW4gYmUgdGhlIGNhc2UgdGhhdCBQcm9taXNlIGlzIG5vdCBwdXQgb24gdGhlIGdsb2JhbCBvYmplY3QuXG4gICAgLy8gSWYgc28sIHdlIG5lZWQgdG8gcGF0Y2ggdGhlIGdsb2JhbCBvYmplY3QgZm9yIHRoZSByZXN0IG9mIHRoZSBjb2RlIHRvIHdvcmsgYXMgZXhwZWN0ZWQuXG4gICAgLy8gT3RoZXIgZGV4aWUgY29kZSBleHBlY3RzIFByb21pc2UgdG8gYmUgb24gdGhlIGdsb2JhbCBvYmplY3QgKGxpa2Ugbm9ybWFsIGJyb3dzZXIgZW52aXJvbm1lbnRzKVxuICAgIF9nbG9iYWwuUHJvbWlzZSA9IFByb21pc2U7XG59XG5leHBvcnQgeyBfZ2xvYmFsIH1cblxuZXhwb3J0IGZ1bmN0aW9uIGV4dGVuZDxUIGV4dGVuZHMgb2JqZWN0LFggZXh0ZW5kcyBvYmplY3Q+KG9iajogVCwgZXh0ZW5zaW9uOiBYKTogVCAmIFggIHtcbiAgICBpZiAodHlwZW9mIGV4dGVuc2lvbiAhPT0gJ29iamVjdCcpIHJldHVybiBvYmogYXMgVCAmIFg7XG4gICAga2V5cyhleHRlbnNpb24pLmZvckVhY2goZnVuY3Rpb24gKGtleSkge1xuICAgICAgICBvYmpba2V5XSA9IGV4dGVuc2lvbltrZXldO1xuICAgIH0pO1xuICAgIHJldHVybiBvYmogYXMgVCAmIFg7XG59XG5cbmV4cG9ydCBjb25zdCBnZXRQcm90byA9IE9iamVjdC5nZXRQcm90b3R5cGVPZjtcbmV4cG9ydCBjb25zdCBfaGFzT3duID0ge30uaGFzT3duUHJvcGVydHk7XG5leHBvcnQgZnVuY3Rpb24gaGFzT3duKG9iaiwgcHJvcCkge1xuICAgIHJldHVybiBfaGFzT3duLmNhbGwob2JqLCBwcm9wKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHByb3BzIChwcm90bywgZXh0ZW5zaW9uKSB7XG4gICAgaWYgKHR5cGVvZiBleHRlbnNpb24gPT09ICdmdW5jdGlvbicpIGV4dGVuc2lvbiA9IGV4dGVuc2lvbihnZXRQcm90byhwcm90bykpO1xuICAgICh0eXBlb2YgUmVmbGVjdCA9PT0gXCJ1bmRlZmluZWRcIiA/IGtleXMgOiBSZWZsZWN0Lm93bktleXMpKGV4dGVuc2lvbikuZm9yRWFjaChrZXkgPT4ge1xuICAgICAgICBzZXRQcm9wKHByb3RvLCBrZXksIGV4dGVuc2lvbltrZXldKTtcbiAgICB9KTtcbn1cblxuZXhwb3J0IGNvbnN0IGRlZmluZVByb3BlcnR5ID0gT2JqZWN0LmRlZmluZVByb3BlcnR5O1xuXG5leHBvcnQgZnVuY3Rpb24gc2V0UHJvcChvYmosIHByb3AsIGZ1bmN0aW9uT3JHZXRTZXQsIG9wdGlvbnM/KSB7XG4gICAgZGVmaW5lUHJvcGVydHkob2JqLCBwcm9wLCBleHRlbmQoZnVuY3Rpb25PckdldFNldCAmJiBoYXNPd24oZnVuY3Rpb25PckdldFNldCwgXCJnZXRcIikgJiYgdHlwZW9mIGZ1bmN0aW9uT3JHZXRTZXQuZ2V0ID09PSAnZnVuY3Rpb24nID9cbiAgICAgICAge2dldDogZnVuY3Rpb25PckdldFNldC5nZXQsIHNldDogZnVuY3Rpb25PckdldFNldC5zZXQsIGNvbmZpZ3VyYWJsZTogdHJ1ZX0gOlxuICAgICAgICB7dmFsdWU6IGZ1bmN0aW9uT3JHZXRTZXQsIGNvbmZpZ3VyYWJsZTogdHJ1ZSwgd3JpdGFibGU6IHRydWV9LCBvcHRpb25zKSk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBkZXJpdmUoQ2hpbGQpIHtcbiAgICByZXR1cm4ge1xuICAgICAgICBmcm9tOiBmdW5jdGlvbiAoUGFyZW50KSB7XG4gICAgICAgICAgICBDaGlsZC5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKFBhcmVudC5wcm90b3R5cGUpO1xuICAgICAgICAgICAgc2V0UHJvcChDaGlsZC5wcm90b3R5cGUsIFwiY29uc3RydWN0b3JcIiwgQ2hpbGQpO1xuICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICBleHRlbmQ6IHByb3BzLmJpbmQobnVsbCwgQ2hpbGQucHJvdG90eXBlKVxuICAgICAgICAgICAgfTtcbiAgICAgICAgfVxuICAgIH07XG59XG5cbmV4cG9ydCBjb25zdCBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yO1xuXG5leHBvcnQgZnVuY3Rpb24gZ2V0UHJvcGVydHlEZXNjcmlwdG9yKG9iaiwgcHJvcCkge1xuICAgIGNvbnN0IHBkID0gZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKG9iaiwgcHJvcCk7XG4gICAgbGV0IHByb3RvO1xuICAgIHJldHVybiBwZCB8fCAocHJvdG8gPSBnZXRQcm90byhvYmopKSAmJiBnZXRQcm9wZXJ0eURlc2NyaXB0b3IgKHByb3RvLCBwcm9wKTtcbn1cblxuY29uc3QgX3NsaWNlID0gW10uc2xpY2U7XG5leHBvcnQgZnVuY3Rpb24gc2xpY2UoYXJncywgc3RhcnQ/LCBlbmQ/KSB7XG4gICAgcmV0dXJuIF9zbGljZS5jYWxsKGFyZ3MsIHN0YXJ0LCBlbmQpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gb3ZlcnJpZGUob3JpZ0Z1bmMsIG92ZXJyaWRlZEZhY3RvcnkpIHtcbiAgICByZXR1cm4gb3ZlcnJpZGVkRmFjdG9yeShvcmlnRnVuYyk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBhc3NlcnQgKGIpIHtcbiAgICBpZiAoIWIpIHRocm93IG5ldyBFcnJvcihcIkFzc2VydGlvbiBGYWlsZWRcIik7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBhc2FwKGZuKSB7XG4gICAgLy8gQHRzLWlnbm9yZVxuICAgIGlmIChfZ2xvYmFsLnNldEltbWVkaWF0ZSkgc2V0SW1tZWRpYXRlKGZuKTsgZWxzZSBzZXRUaW1lb3V0KGZuLCAwKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGdldFVuaXF1ZUFycmF5KGEpIHtcbiAgICByZXR1cm4gYS5maWx0ZXIoKHZhbHVlLCBpbmRleCwgc2VsZikgPT4gc2VsZi5pbmRleE9mKHZhbHVlKSA9PT0gaW5kZXgpO1xufVxuXG4vKiogR2VuZXJhdGUgYW4gb2JqZWN0IChoYXNoIG1hcCkgYmFzZWQgb24gZ2l2ZW4gYXJyYXkuXG4gKiBAcGFyYW0gZXh0cmFjdG9yIEZ1bmN0aW9uIHRha2luZyBhbiBhcnJheSBpdGVtIGFuZCBpdHMgaW5kZXggYW5kIHJldHVybmluZyBhbiBhcnJheSBvZiAyIGl0ZW1zIChba2V5LCB2YWx1ZV0pIHRvXG4gKiAgICAgICAgaW5zdGVydCBvbiB0aGUgcmVzdWx0aW5nIG9iamVjdCBmb3IgZWFjaCBpdGVtIGluIHRoZSBhcnJheS4gSWYgdGhpcyBmdW5jdGlvbiByZXR1cm5zIGEgZmFsc3kgdmFsdWUsIHRoZVxuICogICAgICAgIGN1cnJlbnQgaXRlbSB3b250IGFmZmVjdCB0aGUgcmVzdWx0aW5nIG9iamVjdC5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGFycmF5VG9PYmplY3Q8VCxSPiAoYXJyYXk6IFRbXSwgZXh0cmFjdG9yOiAoeDpULCBpZHg6IG51bWJlcik9PltzdHJpbmcsIFJdKToge1tuYW1lOiBzdHJpbmddOiBSfSB7XG4gICAgcmV0dXJuIGFycmF5LnJlZHVjZSgocmVzdWx0LCBpdGVtLCBpKSA9PiB7XG4gICAgICAgIHZhciBuYW1lQW5kVmFsdWUgPSBleHRyYWN0b3IoaXRlbSwgaSk7XG4gICAgICAgIGlmIChuYW1lQW5kVmFsdWUpIHJlc3VsdFtuYW1lQW5kVmFsdWVbMF1dID0gbmFtZUFuZFZhbHVlWzFdO1xuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH0sIHt9KTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHRyeWNhdGNoZXIoZm4sIHJlamVjdCkge1xuICAgIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICBmbi5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICAgICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgICAgICByZWplY3QoZSk7XG4gICAgICAgIH1cbiAgICB9O1xufVxuXG5leHBvcnQgZnVuY3Rpb24gdHJ5Q2F0Y2goZm46ICguLi5hcmdzOiBhbnlbXSk9PnZvaWQsIG9uZXJyb3IsIGFyZ3M/KSA6IHZvaWQge1xuICAgIHRyeSB7XG4gICAgICAgIGZuLmFwcGx5KG51bGwsIGFyZ3MpO1xuICAgIH0gY2F0Y2ggKGV4KSB7XG4gICAgICAgIG9uZXJyb3IgJiYgb25lcnJvcihleCk7XG4gICAgfVxufVxuXG5leHBvcnQgZnVuY3Rpb24gZ2V0QnlLZXlQYXRoKG9iaiwga2V5UGF0aCkge1xuICAgIC8vIGh0dHA6Ly93d3cudzMub3JnL1RSL0luZGV4ZWREQi8jc3RlcHMtZm9yLWV4dHJhY3RpbmctYS1rZXktZnJvbS1hLXZhbHVlLXVzaW5nLWEta2V5LXBhdGhcbiAgICBpZiAodHlwZW9mIGtleVBhdGggPT09ICdzdHJpbmcnICYmIGhhc093bihvYmosIGtleVBhdGgpKSByZXR1cm4gb2JqW2tleVBhdGhdOyAvLyBUaGlzIGxpbmUgaXMgbW92ZWQgZnJvbSBsYXN0IHRvIGZpcnN0IGZvciBvcHRpbWl6YXRpb24gcHVycG9zZS5cbiAgICBpZiAoIWtleVBhdGgpIHJldHVybiBvYmo7XG4gICAgaWYgKHR5cGVvZiBrZXlQYXRoICE9PSAnc3RyaW5nJykge1xuICAgICAgICB2YXIgcnYgPSBbXTtcbiAgICAgICAgZm9yICh2YXIgaSA9IDAsIGwgPSBrZXlQYXRoLmxlbmd0aDsgaSA8IGw7ICsraSkge1xuICAgICAgICAgICAgdmFyIHZhbCA9IGdldEJ5S2V5UGF0aChvYmosIGtleVBhdGhbaV0pO1xuICAgICAgICAgICAgcnYucHVzaCh2YWwpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBydjtcbiAgICB9XG4gICAgdmFyIHBlcmlvZCA9IGtleVBhdGguaW5kZXhPZignLicpO1xuICAgIGlmIChwZXJpb2QgIT09IC0xKSB7XG4gICAgICAgIHZhciBpbm5lck9iaiA9IG9ialtrZXlQYXRoLnN1YnN0cigwLCBwZXJpb2QpXTtcbiAgICAgICAgcmV0dXJuIGlubmVyT2JqID09IG51bGwgPyB1bmRlZmluZWQgOiBnZXRCeUtleVBhdGgoaW5uZXJPYmosIGtleVBhdGguc3Vic3RyKHBlcmlvZCArIDEpKTtcbiAgICB9XG4gICAgcmV0dXJuIHVuZGVmaW5lZDtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHNldEJ5S2V5UGF0aChvYmosIGtleVBhdGgsIHZhbHVlKSB7XG4gICAgaWYgKCFvYmogfHwga2V5UGF0aCA9PT0gdW5kZWZpbmVkKSByZXR1cm47XG4gICAgaWYgKCdpc0Zyb3plbicgaW4gT2JqZWN0ICYmIE9iamVjdC5pc0Zyb3plbihvYmopKSByZXR1cm47XG4gICAgaWYgKHR5cGVvZiBrZXlQYXRoICE9PSAnc3RyaW5nJyAmJiAnbGVuZ3RoJyBpbiBrZXlQYXRoKSB7XG4gICAgICAgIGFzc2VydCh0eXBlb2YgdmFsdWUgIT09ICdzdHJpbmcnICYmICdsZW5ndGgnIGluIHZhbHVlKTtcbiAgICAgICAgZm9yICh2YXIgaSA9IDAsIGwgPSBrZXlQYXRoLmxlbmd0aDsgaSA8IGw7ICsraSkge1xuICAgICAgICAgICAgc2V0QnlLZXlQYXRoKG9iaiwga2V5UGF0aFtpXSwgdmFsdWVbaV0pO1xuICAgICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgICAgdmFyIHBlcmlvZCA9IGtleVBhdGguaW5kZXhPZignLicpO1xuICAgICAgICBpZiAocGVyaW9kICE9PSAtMSkge1xuICAgICAgICAgICAgdmFyIGN1cnJlbnRLZXlQYXRoID0ga2V5UGF0aC5zdWJzdHIoMCwgcGVyaW9kKTtcbiAgICAgICAgICAgIHZhciByZW1haW5pbmdLZXlQYXRoID0ga2V5UGF0aC5zdWJzdHIocGVyaW9kICsgMSk7XG4gICAgICAgICAgICBpZiAocmVtYWluaW5nS2V5UGF0aCA9PT0gXCJcIilcbiAgICAgICAgICAgICAgICBpZiAodmFsdWUgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgICAgICBpZiAoaXNBcnJheShvYmopICYmICFpc05hTihwYXJzZUludChjdXJyZW50S2V5UGF0aCkpKSBvYmouc3BsaWNlKGN1cnJlbnRLZXlQYXRoLCAxKTtcbiAgICAgICAgICAgICAgICAgICAgZWxzZSBkZWxldGUgb2JqW2N1cnJlbnRLZXlQYXRoXTtcbiAgICAgICAgICAgICAgICB9IGVsc2Ugb2JqW2N1cnJlbnRLZXlQYXRoXSA9IHZhbHVlO1xuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgdmFyIGlubmVyT2JqID0gb2JqW2N1cnJlbnRLZXlQYXRoXTtcbiAgICAgICAgICAgICAgICBpZiAoIWlubmVyT2JqIHx8ICFoYXNPd24ob2JqLCBjdXJyZW50S2V5UGF0aCkpIGlubmVyT2JqID0gKG9ialtjdXJyZW50S2V5UGF0aF0gPSB7fSk7XG4gICAgICAgICAgICAgICAgc2V0QnlLZXlQYXRoKGlubmVyT2JqLCByZW1haW5pbmdLZXlQYXRoLCB2YWx1ZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBpZiAodmFsdWUgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgIGlmIChpc0FycmF5KG9iaikgJiYgIWlzTmFOKHBhcnNlSW50KGtleVBhdGgpKSkgb2JqLnNwbGljZShrZXlQYXRoLCAxKTtcbiAgICAgICAgICAgICAgICBlbHNlIGRlbGV0ZSBvYmpba2V5UGF0aF07XG4gICAgICAgICAgICB9IGVsc2Ugb2JqW2tleVBhdGhdID0gdmFsdWU7XG4gICAgICAgIH1cbiAgICB9XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBkZWxCeUtleVBhdGgob2JqLCBrZXlQYXRoKSB7XG4gICAgaWYgKHR5cGVvZiBrZXlQYXRoID09PSAnc3RyaW5nJylcbiAgICAgICAgc2V0QnlLZXlQYXRoKG9iaiwga2V5UGF0aCwgdW5kZWZpbmVkKTtcbiAgICBlbHNlIGlmICgnbGVuZ3RoJyBpbiBrZXlQYXRoKVxuICAgICAgICBbXS5tYXAuY2FsbChrZXlQYXRoLCBmdW5jdGlvbihrcCkge1xuICAgICAgICAgICAgc2V0QnlLZXlQYXRoKG9iaiwga3AsIHVuZGVmaW5lZCk7XG4gICAgICAgIH0pO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gc2hhbGxvd0Nsb25lKG9iaikge1xuICAgIHZhciBydiA9IHt9O1xuICAgIGZvciAodmFyIG0gaW4gb2JqKSB7XG4gICAgICAgIGlmIChoYXNPd24ob2JqLCBtKSkgcnZbbV0gPSBvYmpbbV07XG4gICAgfVxuICAgIHJldHVybiBydjtcbn1cblxuY29uc3QgY29uY2F0ID0gW10uY29uY2F0O1xuZXhwb3J0IGZ1bmN0aW9uIGZsYXR0ZW48VD4gKGE6IChUIHwgVFtdKVtdKSA6IFRbXSB7XG4gICAgcmV0dXJuIGNvbmNhdC5hcHBseShbXSwgYSk7XG59XG5cbi8vaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvQVBJL1dlYl9Xb3JrZXJzX0FQSS9TdHJ1Y3R1cmVkX2Nsb25lX2FsZ29yaXRobVxuY29uc3QgaW50cmluc2ljVHlwZU5hbWVzID1cbiAgICBcIkJpZ1VpbnQ2NEFycmF5LEJpZ0ludDY0QXJyYXksQXJyYXksQm9vbGVhbixTdHJpbmcsRGF0ZSxSZWdFeHAsQmxvYixGaWxlLEZpbGVMaXN0LEZpbGVTeXN0ZW1GaWxlSGFuZGxlLEZpbGVTeXN0ZW1EaXJlY3RvcnlIYW5kbGUsQXJyYXlCdWZmZXIsRGF0YVZpZXcsVWludDhDbGFtcGVkQXJyYXksSW1hZ2VCaXRtYXAsSW1hZ2VEYXRhLE1hcCxTZXQsQ3J5cHRvS2V5XCJcbiAgICAuc3BsaXQoJywnKS5jb25jYXQoXG4gICAgICAgIGZsYXR0ZW4oWzgsMTYsMzIsNjRdLm1hcChudW09PltcIkludFwiLFwiVWludFwiLFwiRmxvYXRcIl0ubWFwKHQ9PnQrbnVtK1wiQXJyYXlcIikpKVxuICAgICkuZmlsdGVyKHQ9Pl9nbG9iYWxbdF0pO1xuY29uc3QgaW50cmluc2ljVHlwZXMgPSBuZXcgU2V0KGludHJpbnNpY1R5cGVOYW1lcy5tYXAodD0+X2dsb2JhbFt0XSkpO1xuXG4vKiogRGVlcCBjbG9uZSBhIHNpbXBsZSBvYmplY3QgdHJlZS5cbiAqIFxuICogQ29waWVzIG9iamVjdCB0cmVlIGRlZXBseSwgYnV0IGRvZXMgbm90IGRlZXAtY29weSBhcnJheXMsXG4gKiB0eXBlZCBhcnJheXMsIERhdGVzIG9yIG90aGVyIGludHJpbnNpYyB0eXBlcy5cbiAqIFxuICogRG9lcyBub3QgY2hlY2sgZm9yIGN5Y2xpYyByZWZlcmVuY2VzLlxuICogXG4gKiBUaGlzIGZ1bmN0aW9uIGlzIDYgdGltZXMgZmFzdGVyIHRoYW4gc3RydWN0dXJlZENsb25lKCkgb24gY2hyb21pdW0gMTExLlxuICogXG4gKiBUaGlzIGZ1bmN0aW9uIGNhbiBzYWZlbHkgYmUgdXNlZCBmb3IgY2xvbmluZyBPYnNlcnZhYmlsaXR5U2V0cyBhbmQgUmFuZ2VTZXRzLlxuICogXG4gKiBAcGFyYW0gbyBPYmplY3QgdG8gY2xvbmVcbiAqIEByZXR1cm5zIENsb25lZCBvYmplY3RcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGNsb25lU2ltcGxlT2JqZWN0VHJlZTxUIGV4dGVuZHMgb2JqZWN0PihvOiBUKTogVCB7XG4gICAgY29uc3QgcnYgPSB7fSBhcyBUO1xuICAgIGZvciAoY29uc3QgayBpbiBvKSBpZiAoaGFzT3duKG8sIGspKSB7XG4gICAgICAgIGNvbnN0IHYgPSBvW2tdO1xuICAgICAgICBydltrXSA9ICF2IHx8IHR5cGVvZiB2ICE9PSAnb2JqZWN0JyB8fCBpbnRyaW5zaWNUeXBlcy5oYXModi5jb25zdHJ1Y3RvcikgPyB2IDogY2xvbmVTaW1wbGVPYmplY3RUcmVlKHYpO1xuICAgIH1cbiAgICByZXR1cm4gcnY7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBvYmplY3RJc0VtcHR5KG86IG9iamVjdCkge1xuICAgIGZvciAoY29uc3QgayBpbiBvKSBpZiAoaGFzT3duKG8sIGspKSByZXR1cm4gZmFsc2U7XG4gICAgcmV0dXJuIHRydWU7XG59XG5cbmxldCBjaXJjdWxhclJlZnM6IG51bGwgfCBXZWFrTWFwPGFueSxhbnk+ID0gbnVsbDtcblxuLyoqIERlZXAgY2xvbmUgYW4gb2JqZWN0IG9yIGFycmF5LlxuICogXG4gKiBcbiAqIEBwYXJhbSBhbnkgXG4gKiBAcmV0dXJucyBcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGRlZXBDbG9uZTxUPihhbnk6IFQpOiBUIHtcbiAgICBjaXJjdWxhclJlZnMgPSBuZXcgV2Vha01hcCgpO1xuICAgIGNvbnN0IHJ2ID0gaW5uZXJEZWVwQ2xvbmUoYW55KTtcbiAgICBjaXJjdWxhclJlZnMgPSBudWxsO1xuICAgIHJldHVybiBydjtcbn1cblxuZnVuY3Rpb24gaW5uZXJEZWVwQ2xvbmU8VD4oeDogVCk6IFQge1xuICAgIGlmICgheCB8fCB0eXBlb2YgeCAhPT0gJ29iamVjdCcpIHJldHVybiB4O1xuICAgIGxldCBydiA9IGNpcmN1bGFyUmVmcy5nZXQoeCk7IC8vIFJlc29sdmUgY2lyY3VsYXIgcmVmZXJlbmNlc1xuICAgIGlmIChydikgcmV0dXJuIHJ2O1xuICAgIGlmIChpc0FycmF5KHgpKSB7XG4gICAgICAgIHJ2ID0gW107XG4gICAgICAgIGNpcmN1bGFyUmVmcy5zZXQoeCwgcnYpO1xuICAgICAgICBmb3IgKHZhciBpID0gMCwgbCA9IHgubGVuZ3RoOyBpIDwgbDsgKytpKSB7XG4gICAgICAgICAgICBydi5wdXNoKGlubmVyRGVlcENsb25lKHhbaV0pKTtcbiAgICAgICAgfVxuICAgIH0gZWxzZSBpZiAoaW50cmluc2ljVHlwZXMuaGFzKHguY29uc3RydWN0b3IpKSB7XG4gICAgICAgIC8vIEZvciBwZXJmb3JtYW5jZSwgd2UncmUgbGVzcyBzdHJpY3QgdGhhbiBzdHJ1Y3R1cmVkQ2xvbmUgLSB3ZSdyZSBvbmx5XG4gICAgICAgIC8vIGNsb25pbmcgYXJyYXlzIGFuZCBjdXN0b20gb2JqZWN0cy5cbiAgICAgICAgLy8gVHlwZWQgYXJyYXlzLCBEYXRlcyBldGMgYXJlIG5vdCBjbG9uZWQuXG4gICAgICAgIHJ2ID0geDtcbiAgICB9IGVsc2Uge1xuICAgICAgICAvLyBXZSdyZSBuaWNlciB0byBjdXN0b20gY2xhc3NlcyB0aGFuIHdoYXQgc3RydWN0dXJlZENsb25lKCkgaXMgLVxuICAgICAgICAvLyB3ZSBwcmVzZXJ2ZSB0aGUgcHJvdG8gb2YgZWFjaCBvYmplY3QuXG4gICAgICAgIGNvbnN0IHByb3RvID0gZ2V0UHJvdG8oeCk7XG4gICAgICAgIHJ2ID0gcHJvdG8gPT09IE9iamVjdC5wcm90b3R5cGUgPyB7fSA6IE9iamVjdC5jcmVhdGUocHJvdG8pO1xuICAgICAgICBjaXJjdWxhclJlZnMuc2V0KHgsIHJ2KTtcbiAgICAgICAgZm9yICh2YXIgcHJvcCBpbiB4KSB7XG4gICAgICAgICAgICBpZiAoaGFzT3duKHgsIHByb3ApKSB7XG4gICAgICAgICAgICAgICAgcnZbcHJvcF0gPSBpbm5lckRlZXBDbG9uZSh4W3Byb3BdKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gcnY7XG59XG5cbmNvbnN0IHt0b1N0cmluZ30gPSB7fTtcbmV4cG9ydCBmdW5jdGlvbiB0b1N0cmluZ1RhZyhvOiBPYmplY3QpIHtcbiAgICByZXR1cm4gdG9TdHJpbmcuY2FsbChvKS5zbGljZSg4LCAtMSk7XG59XG5cbi8vIElmIGZpcnN0IGFyZ3VtZW50IGlzIGl0ZXJhYmxlIG9yIGFycmF5LWxpa2UsIHJldHVybiBpdCBhcyBhbiBhcnJheVxuZXhwb3J0IGNvbnN0IGl0ZXJhdG9yU3ltYm9sID0gdHlwZW9mIFN5bWJvbCAhPT0gJ3VuZGVmaW5lZCcgP1xuICAgIFN5bWJvbC5pdGVyYXRvciA6XG4gICAgJ0BAaXRlcmF0b3InO1xuZXhwb3J0IGNvbnN0IGdldEl0ZXJhdG9yT2YgPSB0eXBlb2YgaXRlcmF0b3JTeW1ib2wgPT09IFwic3ltYm9sXCIgPyBmdW5jdGlvbih4KSB7XG4gICAgdmFyIGk7XG4gICAgcmV0dXJuIHggIT0gbnVsbCAmJiAoaSA9IHhbaXRlcmF0b3JTeW1ib2xdKSAmJiBpLmFwcGx5KHgpO1xufSA6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIG51bGw7IH07XG5leHBvcnQgY29uc3QgYXN5bmNJdGVyYXRvclN5bWJvbCA9IHR5cGVvZiBTeW1ib2wgIT09ICd1bmRlZmluZWQnXG4gICAgPyBTeW1ib2wuYXN5bmNJdGVyYXRvciB8fCBTeW1ib2wuZm9yKFwiU3ltYm9sLmFzeW5jSXRlcmF0b3JcIilcbiAgICA6ICdAYXN5bmNJdGVyYXRvcic7XG5cbmV4cG9ydCBmdW5jdGlvbiBkZWxBcnJheUl0ZW0oYTogYW55W10sIHg6IGFueSkge1xuICAgIGNvbnN0IGkgPSBhLmluZGV4T2YoeCk7XG4gICAgaWYgKGkgPj0gMCkgYS5zcGxpY2UoaSwgMSk7XG4gICAgcmV0dXJuIGkgPj0gMDtcbn1cblxuZXhwb3J0IGNvbnN0IE5PX0NIQVJfQVJSQVkgPSB7fTtcbi8vIFRha2VzIG9uZSBvciBzZXZlcmFsIGFyZ3VtZW50cyBhbmQgcmV0dXJucyBhbiBhcnJheSBiYXNlZCBvbiB0aGUgZm9sbG93aW5nIGNyaXRlcmFzOlxuLy8gKiBJZiBzZXZlcmFsIGFyZ3VtZW50cyBwcm92aWRlZCwgcmV0dXJuIGFyZ3VtZW50cyBjb252ZXJ0ZWQgdG8gYW4gYXJyYXkgaW4gYSB3YXkgdGhhdFxuLy8gICBzdGlsbCBhbGxvd3MgamF2YXNjcmlwdCBlbmdpbmUgdG8gb3B0aW1pemUgdGhlIGNvZGUuXG4vLyAqIElmIHNpbmdsZSBhcmd1bWVudCBpcyBhbiBhcnJheSwgcmV0dXJuIGEgY2xvbmUgb2YgaXQuXG4vLyAqIElmIHRoaXMtcG9pbnRlciBlcXVhbHMgTk9fQ0hBUl9BUlJBWSwgZG9uJ3QgYWNjZXB0IHN0cmluZ3MgYXMgdmFsaWQgaXRlcmFibGVzIGFzIGEgc3BlY2lhbFxuLy8gICBjYXNlIHRvIHRoZSB0d28gYnVsbGV0cyBiZWxvdy5cbi8vICogSWYgc2luZ2xlIGFyZ3VtZW50IGlzIGFuIGl0ZXJhYmxlLCBjb252ZXJ0IGl0IHRvIGFuIGFycmF5IGFuZCByZXR1cm4gdGhlIHJlc3VsdGluZyBhcnJheS5cbi8vICogSWYgc2luZ2xlIGFyZ3VtZW50IGlzIGFycmF5LWxpa2UgKGhhcyBsZW5ndGggb2YgdHlwZSBudW1iZXIpLCBjb252ZXJ0IGl0IHRvIGFuIGFycmF5LlxuZXhwb3J0IGZ1bmN0aW9uIGdldEFycmF5T2YgKGFycmF5TGlrZSkge1xuICAgIHZhciBpLCBhLCB4LCBpdDtcbiAgICBpZiAoYXJndW1lbnRzLmxlbmd0aCA9PT0gMSkge1xuICAgICAgICBpZiAoaXNBcnJheShhcnJheUxpa2UpKSByZXR1cm4gYXJyYXlMaWtlLnNsaWNlKCk7XG4gICAgICAgIGlmICh0aGlzID09PSBOT19DSEFSX0FSUkFZICYmIHR5cGVvZiBhcnJheUxpa2UgPT09ICdzdHJpbmcnKSByZXR1cm4gW2FycmF5TGlrZV07XG4gICAgICAgIGlmICgoaXQgPSBnZXRJdGVyYXRvck9mKGFycmF5TGlrZSkpKSB7XG4gICAgICAgICAgICBhID0gW107XG4gICAgICAgICAgICB3aGlsZSAoKHggPSBpdC5uZXh0KCkpLCAheC5kb25lKSBhLnB1c2goeC52YWx1ZSk7XG4gICAgICAgICAgICByZXR1cm4gYTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoYXJyYXlMaWtlID09IG51bGwpIHJldHVybiBbYXJyYXlMaWtlXTtcbiAgICAgICAgaSA9IGFycmF5TGlrZS5sZW5ndGg7XG4gICAgICAgIGlmICh0eXBlb2YgaSA9PT0gJ251bWJlcicpIHtcbiAgICAgICAgICAgIGEgPSBuZXcgQXJyYXkoaSk7XG4gICAgICAgICAgICB3aGlsZSAoaS0tKSBhW2ldID0gYXJyYXlMaWtlW2ldO1xuICAgICAgICAgICAgcmV0dXJuIGE7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIFthcnJheUxpa2VdO1xuICAgIH1cbiAgICBpID0gYXJndW1lbnRzLmxlbmd0aDtcbiAgICBhID0gbmV3IEFycmF5KGkpO1xuICAgIHdoaWxlIChpLS0pIGFbaV0gPSBhcmd1bWVudHNbaV07XG4gICAgcmV0dXJuIGE7XG59XG5leHBvcnQgY29uc3QgaXNBc3luY0Z1bmN0aW9uID0gdHlwZW9mIFN5bWJvbCAhPT0gJ3VuZGVmaW5lZCdcbiAgICA/IChmbjogRnVuY3Rpb24pID0+IGZuW1N5bWJvbC50b1N0cmluZ1RhZ10gPT09ICdBc3luY0Z1bmN0aW9uJ1xuICAgIDogKCk9PmZhbHNlO1xuIiwgImltcG9ydCB7IGRlcml2ZSwgc2V0UHJvcCB9IGZyb20gJy4uL2Z1bmN0aW9ucy91dGlscyc7XG5cbnZhciBkZXhpZUVycm9yTmFtZXMgPSBbXG4gICAgJ01vZGlmeScsXG4gICAgJ0J1bGsnLFxuICAgICdPcGVuRmFpbGVkJyxcbiAgICAnVmVyc2lvbkNoYW5nZScsXG4gICAgJ1NjaGVtYScsXG4gICAgJ1VwZ3JhZGUnLFxuICAgICdJbnZhbGlkVGFibGUnLFxuICAgICdNaXNzaW5nQVBJJyxcbiAgICAnTm9TdWNoRGF0YWJhc2UnLFxuICAgICdJbnZhbGlkQXJndW1lbnQnLFxuICAgICdTdWJUcmFuc2FjdGlvbicsXG4gICAgJ1Vuc3VwcG9ydGVkJyxcbiAgICAnSW50ZXJuYWwnLFxuICAgICdEYXRhYmFzZUNsb3NlZCcsXG4gICAgJ1ByZW1hdHVyZUNvbW1pdCcsXG4gICAgJ0ZvcmVpZ25Bd2FpdCdcbl07XG5cbnZhciBpZGJEb21FcnJvck5hbWVzID0gW1xuICAgICdVbmtub3duJyxcbiAgICAnQ29uc3RyYWludCcsXG4gICAgJ0RhdGEnLFxuICAgICdUcmFuc2FjdGlvbkluYWN0aXZlJyxcbiAgICAnUmVhZE9ubHknLFxuICAgICdWZXJzaW9uJyxcbiAgICAnTm90Rm91bmQnLFxuICAgICdJbnZhbGlkU3RhdGUnLFxuICAgICdJbnZhbGlkQWNjZXNzJyxcbiAgICAnQWJvcnQnLFxuICAgICdUaW1lb3V0JyxcbiAgICAnUXVvdGFFeGNlZWRlZCcsXG4gICAgJ1N5bnRheCcsXG4gICAgJ0RhdGFDbG9uZSdcbl07XG5cbnZhciBlcnJvckxpc3QgPSBkZXhpZUVycm9yTmFtZXMuY29uY2F0KGlkYkRvbUVycm9yTmFtZXMpO1xuXG52YXIgZGVmYXVsdFRleHRzID0ge1xuICAgIFZlcnNpb25DaGFuZ2VkOiBcIkRhdGFiYXNlIHZlcnNpb24gY2hhbmdlZCBieSBvdGhlciBkYXRhYmFzZSBjb25uZWN0aW9uXCIsXG4gICAgRGF0YWJhc2VDbG9zZWQ6IFwiRGF0YWJhc2UgaGFzIGJlZW4gY2xvc2VkXCIsXG4gICAgQWJvcnQ6IFwiVHJhbnNhY3Rpb24gYWJvcnRlZFwiLFxuICAgIFRyYW5zYWN0aW9uSW5hY3RpdmU6IFwiVHJhbnNhY3Rpb24gaGFzIGFscmVhZHkgY29tcGxldGVkIG9yIGZhaWxlZFwiLFxuICAgIE1pc3NpbmdBUEk6IFwiSW5kZXhlZERCIEFQSSBtaXNzaW5nLiBQbGVhc2UgdmlzaXQgaHR0cHM6Ly90aW55dXJsLmNvbS95MnV1dnNrYlwiXG59O1xuXG4vL1xuLy8gRGV4aWVFcnJvciAtIGJhc2UgY2xhc3Mgb2YgYWxsIG91dCBleGNlcHRpb25zLlxuLy9cbmV4cG9ydCBmdW5jdGlvbiBEZXhpZUVycm9yIChuYW1lLCBtc2cpIHtcbiAgICAvLyBSZWFzb24gd2UgZG9uJ3QgdXNlIEVTNiBjbGFzc2VzIGlzIGJlY2F1c2U6XG4gICAgLy8gMS4gSXQgYmxvYXRzIHRyYW5zcGlsZWQgY29kZSBhbmQgaW5jcmVhc2VzIHNpemUgb2YgbWluaWZpZWQgY29kZS5cbiAgICAvLyAyLiBJdCBkb2Vzbid0IGdpdmUgdXMgbXVjaCBpbiB0aGlzIGNhc2UuXG4gICAgLy8gMy4gSXQgd291bGQgcmVxdWlyZSBzdWIgY2xhc3NlcyB0byBjYWxsIHN1cGVyKCksIHdoaWNoXG4gICAgLy8gICAgaXMgbm90IG5lZWRlZCB3aGVuIGRlcml2aW5nIGZyb20gRXJyb3IuXG4gICAgdGhpcy5uYW1lID0gbmFtZTtcbiAgICB0aGlzLm1lc3NhZ2UgPSBtc2c7XG59XG5cbmRlcml2ZShEZXhpZUVycm9yKS5mcm9tKEVycm9yKS5leHRlbmQoe1xuICAgIHRvU3RyaW5nOiBmdW5jdGlvbigpeyByZXR1cm4gdGhpcy5uYW1lICsgXCI6IFwiICsgdGhpcy5tZXNzYWdlOyB9XG59KTtcblxuZnVuY3Rpb24gZ2V0TXVsdGlFcnJvck1lc3NhZ2UgKG1zZywgZmFpbHVyZXMpIHtcbiAgICByZXR1cm4gbXNnICsgXCIuIEVycm9yczogXCIgKyBPYmplY3Qua2V5cyhmYWlsdXJlcylcbiAgICAgICAgLm1hcChrZXk9PmZhaWx1cmVzW2tleV0udG9TdHJpbmcoKSlcbiAgICAgICAgLmZpbHRlcigodixpLHMpPT5zLmluZGV4T2YodikgPT09IGkpIC8vIE9ubHkgdW5pcXVlIGVycm9yIHN0cmluZ3NcbiAgICAgICAgLmpvaW4oJ1xcbicpO1xufVxuXG4vL1xuLy8gTW9kaWZ5RXJyb3IgLSB0aHJvd24gaW4gQ29sbGVjdGlvbi5tb2RpZnkoKVxuLy8gU3BlY2lmaWMgY29uc3RydWN0b3IgYmVjYXVzZSBpdCBjb250YWlucyBtZW1iZXJzIGZhaWx1cmVzIGFuZCBmYWlsZWRLZXlzLlxuLy9cbmV4cG9ydCBmdW5jdGlvbiBNb2RpZnlFcnJvciAobXNnLCBmYWlsdXJlcywgc3VjY2Vzc0NvdW50LCBmYWlsZWRLZXlzKSB7XG4gICAgdGhpcy5mYWlsdXJlcyA9IGZhaWx1cmVzO1xuICAgIHRoaXMuZmFpbGVkS2V5cyA9IGZhaWxlZEtleXM7XG4gICAgdGhpcy5zdWNjZXNzQ291bnQgPSBzdWNjZXNzQ291bnQ7XG4gICAgdGhpcy5tZXNzYWdlID0gZ2V0TXVsdGlFcnJvck1lc3NhZ2UobXNnLCBmYWlsdXJlcyk7XG59XG5kZXJpdmUoTW9kaWZ5RXJyb3IpLmZyb20oRGV4aWVFcnJvcik7XG5cbmV4cG9ydCBmdW5jdGlvbiBCdWxrRXJyb3IgKG1zZywgZmFpbHVyZXMpIHtcbiAgICB0aGlzLm5hbWUgPSBcIkJ1bGtFcnJvclwiO1xuICAgIHRoaXMuZmFpbHVyZXMgPSBPYmplY3Qua2V5cyhmYWlsdXJlcykubWFwKHBvcyA9PiBmYWlsdXJlc1twb3NdKTtcbiAgICB0aGlzLmZhaWx1cmVzQnlQb3MgPSBmYWlsdXJlcztcbiAgICB0aGlzLm1lc3NhZ2UgPSBnZXRNdWx0aUVycm9yTWVzc2FnZShtc2csIHRoaXMuZmFpbHVyZXMpO1xufVxuZGVyaXZlKEJ1bGtFcnJvcikuZnJvbShEZXhpZUVycm9yKTtcblxuLy9cbi8vXG4vLyBEeW5hbWljYWxseSBnZW5lcmF0ZSBlcnJvciBuYW1lcyBhbmQgZXhjZXB0aW9uIGNsYXNzZXMgYmFzZWRcbi8vIG9uIHRoZSBuYW1lcyBpbiBlcnJvckxpc3QuXG4vL1xuLy9cblxuLy8gTWFwIG9mIHtFcnJvck5hbWUgLT4gRXJyb3JOYW1lICsgXCJFcnJvclwifVxuZXhwb3J0IHZhciBlcnJuYW1lcyA9IGVycm9yTGlzdC5yZWR1Y2UoKG9iaixuYW1lKT0+KG9ialtuYW1lXT1uYW1lK1wiRXJyb3JcIixvYmopLHt9KTtcblxuLy8gTmVlZCBhbiBhbGlhcyBmb3IgRGV4aWVFcnJvciBiZWNhdXNlIHdlJ3JlIGdvbm5hIGNyZWF0ZSBzdWJjbGFzc2VzIHdpdGggdGhlIHNhbWUgbmFtZS5cbmNvbnN0IEJhc2VFeGNlcHRpb24gPSBEZXhpZUVycm9yO1xuLy8gTWFwIG9mIHtFcnJvck5hbWUgLT4gZXhjZXB0aW9uIGNvbnN0cnVjdG9yfVxuZXhwb3J0IHZhciBleGNlcHRpb25zID0gZXJyb3JMaXN0LnJlZHVjZSgob2JqLG5hbWUpPT57XG4gICAgLy8gTGV0IHRoZSBuYW1lIGJlIFwiRGV4aWVFcnJvclwiIGJlY2F1c2UgdGhpcyBuYW1lIG1heVxuICAgIC8vIGJlIHNob3duIGluIGNhbGwgc3RhY2sgYW5kIHdoZW4gZGVidWdnaW5nLiBEZXhpZUVycm9yIGlzXG4gICAgLy8gdGhlIG1vc3QgdHJ1ZSBuYW1lIGJlY2F1c2UgaXQgZGVyaXZlcyBmcm9tIERleGllRXJyb3IsXG4gICAgLy8gYW5kIHdlIGNhbm5vdCBjaGFuZ2UgRnVuY3Rpb24ubmFtZSBwcm9ncmFtYXRpY2FsbHkgd2l0aG91dFxuICAgIC8vIGR5bmFtaWNhbGx5IGNyZWF0ZSBhIEZ1bmN0aW9uIG9iamVjdCwgd2hpY2ggd291bGQgYmUgY29uc2lkZXJlZFxuICAgIC8vICdldmFsLWV2aWwnLlxuICAgIHZhciBmdWxsTmFtZSA9IG5hbWUgKyBcIkVycm9yXCI7XG4gICAgZnVuY3Rpb24gRGV4aWVFcnJvciAobXNnT3JJbm5lciwgaW5uZXIpe1xuICAgICAgICB0aGlzLm5hbWUgPSBmdWxsTmFtZTtcbiAgICAgICAgaWYgKCFtc2dPcklubmVyKSB7XG4gICAgICAgICAgICB0aGlzLm1lc3NhZ2UgPSBkZWZhdWx0VGV4dHNbbmFtZV0gfHwgZnVsbE5hbWU7XG4gICAgICAgICAgICB0aGlzLmlubmVyID0gbnVsbDtcbiAgICAgICAgfSBlbHNlIGlmICh0eXBlb2YgbXNnT3JJbm5lciA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgICAgIHRoaXMubWVzc2FnZSA9IGAke21zZ09ySW5uZXJ9JHshaW5uZXIgPyAnJyA6ICdcXG4gJyArIGlubmVyfWA7XG4gICAgICAgICAgICB0aGlzLmlubmVyID0gaW5uZXIgfHwgbnVsbDtcbiAgICAgICAgfSBlbHNlIGlmICh0eXBlb2YgbXNnT3JJbm5lciA9PT0gJ29iamVjdCcpIHtcbiAgICAgICAgICAgIHRoaXMubWVzc2FnZSA9IGAke21zZ09ySW5uZXIubmFtZX0gJHttc2dPcklubmVyLm1lc3NhZ2V9YDtcbiAgICAgICAgICAgIHRoaXMuaW5uZXIgPSBtc2dPcklubmVyO1xuICAgICAgICB9XG4gICAgfVxuICAgIGRlcml2ZShEZXhpZUVycm9yKS5mcm9tKEJhc2VFeGNlcHRpb24pO1xuICAgIG9ialtuYW1lXT1EZXhpZUVycm9yO1xuICAgIHJldHVybiBvYmo7XG59LHt9KTtcblxuLy8gVXNlIEVDTUFTQ1JJUFQgc3RhbmRhcmQgZXhjZXB0aW9ucyB3aGVyZSBhcHBsaWNhYmxlOlxuZXhjZXB0aW9ucy5TeW50YXggPSBTeW50YXhFcnJvcjtcbmV4Y2VwdGlvbnMuVHlwZSA9IFR5cGVFcnJvcjtcbmV4Y2VwdGlvbnMuUmFuZ2UgPSBSYW5nZUVycm9yO1xuXG5leHBvcnQgdmFyIGV4Y2VwdGlvbk1hcCA9IGlkYkRvbUVycm9yTmFtZXMucmVkdWNlKChvYmosIG5hbWUpPT57XG4gICAgb2JqW25hbWUgKyBcIkVycm9yXCJdID0gZXhjZXB0aW9uc1tuYW1lXTtcbiAgICByZXR1cm4gb2JqO1xufSwge30pO1xuXG5leHBvcnQgZnVuY3Rpb24gbWFwRXJyb3IgKGRvbUVycm9yLCBtZXNzYWdlKSB7XG4gICAgaWYgKCFkb21FcnJvciB8fCBkb21FcnJvciBpbnN0YW5jZW9mIERleGllRXJyb3IgfHwgZG9tRXJyb3IgaW5zdGFuY2VvZiBUeXBlRXJyb3IgfHwgZG9tRXJyb3IgaW5zdGFuY2VvZiBTeW50YXhFcnJvciB8fCAhZG9tRXJyb3IubmFtZSB8fCAhZXhjZXB0aW9uTWFwW2RvbUVycm9yLm5hbWVdKVxuICAgICAgICByZXR1cm4gZG9tRXJyb3I7XG4gICAgdmFyIHJ2ID0gbmV3IGV4Y2VwdGlvbk1hcFtkb21FcnJvci5uYW1lXShtZXNzYWdlIHx8IGRvbUVycm9yLm1lc3NhZ2UsIGRvbUVycm9yKTtcbiAgICBpZiAoXCJzdGFja1wiIGluIGRvbUVycm9yKSB7XG4gICAgICAgIC8vIERlcml2ZSBzdGFjayBmcm9tIGlubmVyIGV4Y2VwdGlvbiBpZiBpdCBoYXMgYSBzdGFja1xuICAgICAgICBzZXRQcm9wKHJ2LCBcInN0YWNrXCIsIHtnZXQ6IGZ1bmN0aW9uKCl7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5pbm5lci5zdGFjaztcbiAgICAgICAgfX0pO1xuICAgIH1cbiAgICByZXR1cm4gcnY7XG59XG5cbmV4cG9ydCB2YXIgZnVsbE5hbWVFeGNlcHRpb25zID0gZXJyb3JMaXN0LnJlZHVjZSgob2JqLCBuYW1lKT0+e1xuICAgIGlmIChbXCJTeW50YXhcIixcIlR5cGVcIixcIlJhbmdlXCJdLmluZGV4T2YobmFtZSkgPT09IC0xKVxuICAgICAgICBvYmpbbmFtZSArIFwiRXJyb3JcIl0gPSBleGNlcHRpb25zW25hbWVdO1xuICAgIHJldHVybiBvYmo7XG59LCB7fSk7XG5cbmZ1bGxOYW1lRXhjZXB0aW9ucy5Nb2RpZnlFcnJvciA9IE1vZGlmeUVycm9yO1xuZnVsbE5hbWVFeGNlcHRpb25zLkRleGllRXJyb3IgPSBEZXhpZUVycm9yO1xuZnVsbE5hbWVFeGNlcHRpb25zLkJ1bGtFcnJvciA9IEJ1bGtFcnJvcjtcbiIsICJpbXBvcnQge2V4dGVuZH0gZnJvbSAnLi91dGlscyc7XG5cbmV4cG9ydCBmdW5jdGlvbiBub3AoKSB7IH1cbmV4cG9ydCBmdW5jdGlvbiBtaXJyb3IodmFsKSB7IHJldHVybiB2YWw7IH1cbmV4cG9ydCBmdW5jdGlvbiBwdXJlRnVuY3Rpb25DaGFpbihmMSwgZjIpIHtcbiAgICAvLyBFbmFibGVzIGNoYWluZWQgZXZlbnRzIHRoYXQgdGFrZXMgT05FIGFyZ3VtZW50IGFuZCByZXR1cm5zIGl0IHRvIHRoZSBuZXh0IGZ1bmN0aW9uIGluIGNoYWluLlxuICAgIC8vIFRoaXMgcGF0dGVybiBpcyB1c2VkIGluIHRoZSBob29rKFwicmVhZGluZ1wiKSBldmVudC5cbiAgICBpZiAoZjEgPT0gbnVsbCB8fCBmMSA9PT0gbWlycm9yKSByZXR1cm4gZjI7XG4gICAgcmV0dXJuIGZ1bmN0aW9uICh2YWwpIHtcbiAgICAgICAgcmV0dXJuIGYyKGYxKHZhbCkpO1xuICAgIH07XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBjYWxsQm90aChvbjEsIG9uMikge1xuICAgIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgICAgIG9uMS5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICAgICAgICBvbjIuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgICB9O1xufVxuXG5leHBvcnQgZnVuY3Rpb24gaG9va0NyZWF0aW5nQ2hhaW4oZjEsIGYyKSB7XG4gICAgLy8gRW5hYmxlcyBjaGFpbmVkIGV2ZW50cyB0aGF0IHRha2VzIHNldmVyYWwgYXJndW1lbnRzIGFuZCBtYXkgbW9kaWZ5IGZpcnN0IGFyZ3VtZW50IGJ5IG1ha2luZyBhIG1vZGlmaWNhdGlvbiBhbmQgdGhlbiByZXR1cm5pbmcgdGhlIHNhbWUgaW5zdGFuY2UuXG4gICAgLy8gVGhpcyBwYXR0ZXJuIGlzIHVzZWQgaW4gdGhlIGhvb2soXCJjcmVhdGluZ1wiKSBldmVudC5cbiAgICBpZiAoZjEgPT09IG5vcCkgcmV0dXJuIGYyO1xuICAgIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciByZXMgPSBmMS5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICAgICAgICBpZiAocmVzICE9PSB1bmRlZmluZWQpIGFyZ3VtZW50c1swXSA9IHJlcztcbiAgICAgICAgdmFyIG9uc3VjY2VzcyA9IHRoaXMub25zdWNjZXNzLCAvLyBJbiBjYXNlIGV2ZW50IGxpc3RlbmVyIGhhcyBzZXQgdGhpcy5vbnN1Y2Nlc3NcbiAgICAgICAgICAgIG9uZXJyb3IgPSB0aGlzLm9uZXJyb3I7ICAgICAvLyBJbiBjYXNlIGV2ZW50IGxpc3RlbmVyIGhhcyBzZXQgdGhpcy5vbmVycm9yXG4gICAgICAgIHRoaXMub25zdWNjZXNzID0gbnVsbDtcbiAgICAgICAgdGhpcy5vbmVycm9yID0gbnVsbDtcbiAgICAgICAgdmFyIHJlczIgPSBmMi5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICAgICAgICBpZiAob25zdWNjZXNzKSB0aGlzLm9uc3VjY2VzcyA9IHRoaXMub25zdWNjZXNzID8gY2FsbEJvdGgob25zdWNjZXNzLCB0aGlzLm9uc3VjY2VzcykgOiBvbnN1Y2Nlc3M7XG4gICAgICAgIGlmIChvbmVycm9yKSB0aGlzLm9uZXJyb3IgPSB0aGlzLm9uZXJyb3IgPyBjYWxsQm90aChvbmVycm9yLCB0aGlzLm9uZXJyb3IpIDogb25lcnJvcjtcbiAgICAgICAgcmV0dXJuIHJlczIgIT09IHVuZGVmaW5lZCA/IHJlczIgOiByZXM7XG4gICAgfTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGhvb2tEZWxldGluZ0NoYWluKGYxLCBmMikge1xuICAgIGlmIChmMSA9PT0gbm9wKSByZXR1cm4gZjI7XG4gICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgZjEuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgICAgICAgdmFyIG9uc3VjY2VzcyA9IHRoaXMub25zdWNjZXNzLCAvLyBJbiBjYXNlIGV2ZW50IGxpc3RlbmVyIGhhcyBzZXQgdGhpcy5vbnN1Y2Nlc3NcbiAgICAgICAgICAgIG9uZXJyb3IgPSB0aGlzLm9uZXJyb3I7ICAgICAvLyBJbiBjYXNlIGV2ZW50IGxpc3RlbmVyIGhhcyBzZXQgdGhpcy5vbmVycm9yXG4gICAgICAgIHRoaXMub25zdWNjZXNzID0gdGhpcy5vbmVycm9yID0gbnVsbDtcbiAgICAgICAgZjIuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgICAgICAgaWYgKG9uc3VjY2VzcykgdGhpcy5vbnN1Y2Nlc3MgPSB0aGlzLm9uc3VjY2VzcyA/IGNhbGxCb3RoKG9uc3VjY2VzcywgdGhpcy5vbnN1Y2Nlc3MpIDogb25zdWNjZXNzO1xuICAgICAgICBpZiAob25lcnJvcikgdGhpcy5vbmVycm9yID0gdGhpcy5vbmVycm9yID8gY2FsbEJvdGgob25lcnJvciwgdGhpcy5vbmVycm9yKSA6IG9uZXJyb3I7XG4gICAgfTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGhvb2tVcGRhdGluZ0NoYWluKGYxLCBmMikge1xuICAgIGlmIChmMSA9PT0gbm9wKSByZXR1cm4gZjI7XG4gICAgcmV0dXJuIGZ1bmN0aW9uIChtb2RpZmljYXRpb25zKSB7XG4gICAgICAgIHZhciByZXMgPSBmMS5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICAgICAgICBleHRlbmQobW9kaWZpY2F0aW9ucywgcmVzKTsgLy8gSWYgZjEgcmV0dXJucyBuZXcgbW9kaWZpY2F0aW9ucywgZXh0ZW5kIGNhbGxlcidzIG1vZGlmaWNhdGlvbnMgd2l0aCB0aGUgcmVzdWx0IGJlZm9yZSBjYWxsaW5nIG5leHQgaW4gY2hhaW4uXG4gICAgICAgIHZhciBvbnN1Y2Nlc3MgPSB0aGlzLm9uc3VjY2VzcywgLy8gSW4gY2FzZSBldmVudCBsaXN0ZW5lciBoYXMgc2V0IHRoaXMub25zdWNjZXNzXG4gICAgICAgICAgICBvbmVycm9yID0gdGhpcy5vbmVycm9yOyAgICAgLy8gSW4gY2FzZSBldmVudCBsaXN0ZW5lciBoYXMgc2V0IHRoaXMub25lcnJvclxuICAgICAgICB0aGlzLm9uc3VjY2VzcyA9IG51bGw7XG4gICAgICAgIHRoaXMub25lcnJvciA9IG51bGw7XG4gICAgICAgIHZhciByZXMyID0gZjIuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgICAgICAgaWYgKG9uc3VjY2VzcykgdGhpcy5vbnN1Y2Nlc3MgPSB0aGlzLm9uc3VjY2VzcyA/IGNhbGxCb3RoKG9uc3VjY2VzcywgdGhpcy5vbnN1Y2Nlc3MpIDogb25zdWNjZXNzO1xuICAgICAgICBpZiAob25lcnJvcikgdGhpcy5vbmVycm9yID0gdGhpcy5vbmVycm9yID8gY2FsbEJvdGgob25lcnJvciwgdGhpcy5vbmVycm9yKSA6IG9uZXJyb3I7XG4gICAgICAgIHJldHVybiByZXMgPT09IHVuZGVmaW5lZCA/XG4gICAgICAgICAgICAocmVzMiA9PT0gdW5kZWZpbmVkID8gdW5kZWZpbmVkIDogcmVzMikgOlxuICAgICAgICAgICAgKGV4dGVuZChyZXMsIHJlczIpKTtcbiAgICB9O1xufVxuXG5leHBvcnQgZnVuY3Rpb24gcmV2ZXJzZVN0b3BwYWJsZUV2ZW50Q2hhaW4oZjEsIGYyKSB7XG4gICAgaWYgKGYxID09PSBub3ApIHJldHVybiBmMjtcbiAgICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgICAgICBpZiAoZjIuYXBwbHkodGhpcywgYXJndW1lbnRzKSA9PT0gZmFsc2UpIHJldHVybiBmYWxzZTtcbiAgICAgICAgcmV0dXJuIGYxLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gICAgfTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIG5vblN0b3BwYWJsZUV2ZW50Q2hhaW4oZjEsIGYyKSB7XG4gICAgaWYgKGYxID09PSBub3ApIHJldHVybiBmMjtcbiAgICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgICAgICBmMS5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICAgICAgICBmMi5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICAgIH07XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBwcm9taXNhYmxlQ2hhaW4oZjEsIGYyKSB7XG4gICAgaWYgKGYxID09PSBub3ApIHJldHVybiBmMjtcbiAgICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgcmVzID0gZjEuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgICAgICAgaWYgKHJlcyAmJiB0eXBlb2YgcmVzLnRoZW4gPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgIHZhciB0aGl6ID0gdGhpcyxcbiAgICAgICAgICAgICAgICBpID0gYXJndW1lbnRzLmxlbmd0aCxcbiAgICAgICAgICAgICAgICBhcmdzID0gbmV3IEFycmF5KGkpO1xuICAgICAgICAgICAgd2hpbGUgKGktLSkgYXJnc1tpXSA9IGFyZ3VtZW50c1tpXTtcbiAgICAgICAgICAgIHJldHVybiByZXMudGhlbihmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGYyLmFwcGx5KHRoaXosIGFyZ3MpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGYyLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gICAgfTtcbn1cbiIsICIvLyBCeSBkZWZhdWx0LCBkZWJ1ZyB3aWxsIGJlIHRydWUgb25seSBpZiBwbGF0Zm9ybSBpcyBhIHdlYiBwbGF0Zm9ybSBhbmQgaXRzIHBhZ2UgaXMgc2VydmVkIGZyb20gbG9jYWxob3N0LlxuLy8gV2hlbiBkZWJ1ZyA9IHRydWUsIGVycm9yJ3Mgc3RhY2tzIHdpbGwgY29udGFpbiBhc3luY3JvbmljIGxvbmcgc3RhY2tzLlxuZXhwb3J0IHZhciBkZWJ1ZyA9IHR5cGVvZiBsb2NhdGlvbiAhPT0gJ3VuZGVmaW5lZCcgJiZcbiAgICAgICAgLy8gQnkgZGVmYXVsdCwgdXNlIGRlYnVnIG1vZGUgaWYgc2VydmVkIGZyb20gbG9jYWxob3N0LlxuICAgICAgICAvXihodHRwfGh0dHBzKTpcXC9cXC8obG9jYWxob3N0fDEyN1xcLjBcXC4wXFwuMSkvLnRlc3QobG9jYXRpb24uaHJlZik7XG5cbmV4cG9ydCBmdW5jdGlvbiBzZXREZWJ1Zyh2YWx1ZSwgZmlsdGVyKSB7XG4gICAgZGVidWcgPSB2YWx1ZTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGRlcHJlY2F0ZWQ8VD4gKHdoYXQ6IHN0cmluZywgZm46ICguLi5hcmdzKT0+VCkge1xuICAgIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGNvbnNvbGUud2FybihgJHt3aGF0fSBpcyBkZXByZWNhdGVkLiBTZWUgaHR0cHM6Ly9kZXhpZS5vcmcvZG9jcy9EZXByZWNhdGlvbnN9YCk7XG4gICAgICAgIHJldHVybiBmbi5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICAgIH0gYXMgKC4uLmFyZ3MpPT5UXG59XG4iLCAiLypcbiAqIENvcHlyaWdodCAoYykgMjAxNC0yMDE3IERhdmlkIEZhaGxhbmRlclxuICogQXBhY2hlIExpY2Vuc2UgVmVyc2lvbiAyLjAsIEphbnVhcnkgMjAwNCwgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKi9cbmltcG9ydCB7IF9nbG9iYWwgfSBmcm9tICcuLi9nbG9iYWxzL2dsb2JhbCc7XG5pbXBvcnQge3RyeUNhdGNoLCBwcm9wcywgc2V0UHJvcCxcbiAgICBnZXRQcm9wZXJ0eURlc2NyaXB0b3IsIGdldEFycmF5T2YsIGV4dGVuZCwgZ2V0UHJvdG99IGZyb20gJy4uL2Z1bmN0aW9ucy91dGlscyc7XG5pbXBvcnQge25vcCwgY2FsbEJvdGgsIG1pcnJvcn0gZnJvbSAnLi4vZnVuY3Rpb25zL2NoYWluaW5nLWZ1bmN0aW9ucyc7XG5pbXBvcnQge2RlYnVnfSBmcm9tICcuL2RlYnVnJztcbmltcG9ydCB7ZXhjZXB0aW9uc30gZnJvbSAnLi4vZXJyb3JzJztcblxuLy9cbi8vIFByb21pc2UgYW5kIFpvbmUgKFBTRCkgZm9yIERleGllIGxpYnJhcnlcbi8vXG4vLyBJIHN0YXJ0ZWQgb3V0IHdyaXRpbmcgdGhpcyBQcm9taXNlIGNsYXNzIGJ5IGNvcHlpbmcgcHJvbWlzZS1saWdodCAoaHR0cHM6Ly9naXRodWIuY29tL3RheWxvcmhha2VzL3Byb21pc2UtbGlnaHQpIGJ5XG4vLyBodHRwczovL2dpdGh1Yi5jb20vdGF5bG9yaGFrZXMgLSBhbiBBKyBhbmQgRUNNQVNDUklQVCA2IGNvbXBsaWFudCBQcm9taXNlIGltcGxlbWVudGF0aW9uLlxuLy9cbi8vIEluIHByZXZpb3VzIHZlcnNpb25zIHRoaXMgd2FzIGZpeGVkIGJ5IG5vdCBjYWxsaW5nIHNldFRpbWVvdXQgd2hlbiBrbm93aW5nIHRoYXQgdGhlIHJlc29sdmUoKSBvciByZWplY3QoKSBjYW1lIGZyb20gYW5vdGhlclxuLy8gdGljay4gSW4gRGV4aWUgdjEuNC4wLCBJJ3ZlIHJld3JpdHRlbiB0aGUgUHJvbWlzZSBjbGFzcyBlbnRpcmVseS4gSnVzdCBzb21lIGZyYWdtZW50cyBvZiBwcm9taXNlLWxpZ2h0IGlzIGxlZnQuIEkgdXNlXG4vLyBhbm90aGVyIHN0cmF0ZWd5IG5vdyB0aGF0IHNpbXBsaWZpZXMgZXZlcnl0aGluZyBhIGxvdDogdG8gYWx3YXlzIGV4ZWN1dGUgY2FsbGJhY2tzIGluIGEgbmV3IG1pY3JvLXRhc2ssIGJ1dCBoYXZlIGFuIG93biBtaWNyby10YXNrXG4vLyBlbmdpbmUgdGhhdCBpcyBpbmRleGVkREIgY29tcGxpYW50IGFjcm9zcyBhbGwgYnJvd3NlcnMuXG4vLyBQcm9taXNlIGNsYXNzIGhhcyBhbHNvIGJlZW4gb3B0aW1pemVkIGEgbG90IHdpdGggaW5zcGlyYXRpb24gZnJvbSBibHVlYmlyZCAtIHRvIGF2b2lkIGNsb3N1cmVzIGFzIG11Y2ggYXMgcG9zc2libGUuXG4vL1xuLy8gU3BlY2lmaWMgbm9uLXN0YW5kYXJkIGZlYXR1cmVzIG9mIHRoaXMgUHJvbWlzZSBjbGFzczpcbi8vICogQ3VzdG9tIHpvbmUgc3VwcG9ydCAoYS5rLmEuIFBTRCkgd2l0aCBhYmlsaXR5IHRvIGtlZXAgem9uZXMgYWxzbyB3aGVuIHVzaW5nIG5hdGl2ZSBwcm9taXNlcyBhcyB3ZWxsIGFzXG4vLyAgIG5hdGl2ZSBhc3luYyAvIGF3YWl0LlxuLy8gKiBQcm9taXNlLmZvbGxvdygpIG1ldGhvZCBidWlsdCB1cG9uIHRoZSBjdXN0b20gem9uZSBlbmdpbmUsIHRoYXQgYWxsb3dzIHVzZXIgdG8gdHJhY2sgYWxsIHByb21pc2VzIGNyZWF0ZWQgZnJvbSBjdXJyZW50IHN0YWNrIGZyYW1lXG4vLyAgIGFuZCBiZWxvdyArIGFsbCBwcm9taXNlcyB0aGF0IHRob3NlIHByb21pc2VzIGNyZWF0ZXMgb3IgYXdhaXRzLlxuLy8gKiBEZXRlY3QgYW55IHVuaGFuZGxlZCBwcm9taXNlIGluIGEgUFNELXNjb3BlIChQU0Qub251bmhhbmRsZWQpLiBcbi8vXG4vLyBEYXZpZCBGYWhsYW5kZXIsIGh0dHBzOi8vZ2l0aHViLmNvbS9kZmFobGFuZGVyXG4vL1xuXG4vLyBKdXN0IGEgcG9pbnRlciB0aGF0IG9ubHkgdGhpcyBtb2R1bGUga25vd3MgYWJvdXQuXG4vLyBVc2VkIGluIFByb21pc2UgY29uc3RydWN0b3IgdG8gZW11bGF0ZSBhIHByaXZhdGUgY29uc3RydWN0b3IuXG52YXIgSU5URVJOQUwgPSB7fTtcblxuY29uc3RcbiAgICBaT05FX0VDSE9fTElNSVQgPSAxMDAsXG4gICAgW3Jlc29sdmVkTmF0aXZlUHJvbWlzZSwgbmF0aXZlUHJvbWlzZVByb3RvLCByZXNvbHZlZEdsb2JhbFByb21pc2VdID0gdHlwZW9mIFByb21pc2UgPT09ICd1bmRlZmluZWQnID9cbiAgICAgICAgW10gOlxuICAgICAgICAoKCk9PntcbiAgICAgICAgICAgIGxldCBnbG9iYWxQID0gUHJvbWlzZS5yZXNvbHZlKCk7XG4gICAgICAgICAgICBpZiAodHlwZW9mIGNyeXB0byA9PT0gJ3VuZGVmaW5lZCcgfHwgIWNyeXB0by5zdWJ0bGUpXG4gICAgICAgICAgICAgICAgcmV0dXJuIFtnbG9iYWxQLCBnZXRQcm90byhnbG9iYWxQKSwgZ2xvYmFsUF07XG4gICAgICAgICAgICAvLyBHZW5lcmF0ZSBhIG5hdGl2ZSBwcm9taXNlIChhcyB3aW5kb3cuUHJvbWlzZSBtYXkgaGF2ZSBiZWVuIHBhdGNoZWQpXG4gICAgICAgICAgICBjb25zdCBuYXRpdmVQID0gY3J5cHRvLnN1YnRsZS5kaWdlc3QoXCJTSEEtNTEyXCIsIG5ldyBVaW50OEFycmF5KFswXSkpO1xuICAgICAgICAgICAgcmV0dXJuIFtcbiAgICAgICAgICAgICAgICBuYXRpdmVQLFxuICAgICAgICAgICAgICAgIGdldFByb3RvKG5hdGl2ZVApLFxuICAgICAgICAgICAgICAgIGdsb2JhbFBcbiAgICAgICAgICAgIF07XG4gICAgICAgIH0pKCksXG4gICAgbmF0aXZlUHJvbWlzZVRoZW4gPSBuYXRpdmVQcm9taXNlUHJvdG8gJiYgbmF0aXZlUHJvbWlzZVByb3RvLnRoZW47XG5cbmV4cG9ydCBjb25zdCBOYXRpdmVQcm9taXNlID0gcmVzb2x2ZWROYXRpdmVQcm9taXNlICYmIHJlc29sdmVkTmF0aXZlUHJvbWlzZS5jb25zdHJ1Y3RvcjtcbmNvbnN0IHBhdGNoR2xvYmFsUHJvbWlzZSA9ICEhcmVzb2x2ZWRHbG9iYWxQcm9taXNlO1xuXG4vKiBUaGUgZGVmYXVsdCBmdW5jdGlvbiB1c2VkIG9ubHkgZm9yIHRoZSB2ZXJ5IGZpcnN0IHByb21pc2UgaW4gYSBwcm9taXNlIGNoYWluLlxuICAgQXMgc29vbiBhcyB0aGVuIHByb21pc2UgaXMgcmVzb2x2ZWQgb3IgcmVqZWN0ZWQsIGFsbCBuZXh0IHRhc2tzIHdpbGwgYmUgZXhlY3V0ZWQgaW4gbWljcm8gdGlja3NcbiAgIGVtdWxhdGVkIGluIHRoaXMgbW9kdWxlLiBGb3IgaW5kZXhlZERCIGNvbXBhdGliaWxpdHksIHRoaXMgbWVhbnMgdGhhdCBldmVyeSBtZXRob2QgbmVlZHMgdG8gXG4gICBleGVjdXRlIGF0IGxlYXN0IG9uZSBwcm9taXNlIGJlZm9yZSBkb2luZyBhbiBpbmRleGVkREIgb3BlcmF0aW9uLiBEZXhpZSB3aWxsIGFsd2F5cyBjYWxsIFxuICAgZGIucmVhZHkoKS50aGVuKCkgZm9yIGV2ZXJ5IG9wZXJhdGlvbiB0byBtYWtlIHN1cmUgdGhlIGluZGV4ZWREQiBldmVudCBpcyBzdGFydGVkIGluIGFuXG4gICBpbmRleGVkREItY29tcGF0aWJsZSBlbXVsYXRlZCBtaWNybyB0YXNrIGxvb3AuXG4qL1xuZnVuY3Rpb24gc2NoZWR1bGVQaHlzaWNhbFRpY2soKSB7XG4gICAgcXVldWVNaWNyb3Rhc2socGh5c2ljYWxUaWNrKTtcbn1cblxuLy8gQ29uZmlndXJhYmxlIHRocm91Z2ggUHJvbWlzZS5zY2hlZHVsZXIuXG4vLyBEb24ndCBleHBvcnQgYmVjYXVzZSBpdCB3b3VsZCBiZSB1bnNhZmUgdG8gbGV0IHVua25vd25cbi8vIGNvZGUgY2FsbCBpdCB1bmxlc3MgdGhleSBkbyB0cnkuLmNhdGNoIHdpdGhpbiB0aGVpciBjYWxsYmFjay5cbi8vIFRoaXMgZnVuY3Rpb24gY2FuIGJlIHJldHJpZXZlZCB0aHJvdWdoIGdldHRlciBvZiBQcm9taXNlLnNjaGVkdWxlciB0aG91Z2gsXG4vLyBidXQgdXNlcnMgbXVzdCBub3QgZG8gUHJvbWlzZS5zY2hlZHVsZXIgPSBteUZ1bmNUaGF0VGhyb3dzRXhjZXB0aW9uXG52YXIgYXNhcCA9IGZ1bmN0aW9uIChjYWxsYmFjaywgYXJncykge1xuICAgIG1pY3JvdGlja1F1ZXVlLnB1c2goW2NhbGxiYWNrLCBhcmdzXSk7XG4gICAgaWYgKG5lZWRzTmV3UGh5c2ljYWxUaWNrKSB7XG4gICAgICAgIHNjaGVkdWxlUGh5c2ljYWxUaWNrKCk7XG4gICAgICAgIG5lZWRzTmV3UGh5c2ljYWxUaWNrID0gZmFsc2U7XG4gICAgfVxufTtcblxudmFyIGlzT3V0c2lkZU1pY3JvVGljayA9IHRydWUsIC8vIFRydWUgd2hlbiBOT1QgaW4gYSB2aXJ0dWFsIG1pY3JvVGljay5cbiAgICBuZWVkc05ld1BoeXNpY2FsVGljayA9IHRydWUsIC8vIFRydWUgd2hlbiBhIHB1c2ggdG8gbWljcm90aWNrUXVldWUgbXVzdCBhbHNvIHNjaGVkdWxlUGh5c2ljYWxUaWNrKClcbiAgICB1bmhhbmRsZWRFcnJvcnMgPSBbXSwgLy8gUmVqZWN0ZWQgcHJvbWlzZXMgdGhhdCBoYXMgb2NjdXJlZC4gVXNlZCBmb3IgdHJpZ2dlcmluZyAndW5oYW5kbGVkcmVqZWN0aW9uJy5cbiAgICByZWplY3RpbmdFcnJvcnMgPSBbXSwgLy8gVHJhY2tzIGlmIGVycm9ycyBhcmUgYmVpbmcgcmUtcmVqZWN0ZWQgZHVyaW5nIG9uUmVqZWN0ZWQgY2FsbGJhY2suXG4gICAgcmVqZWN0aW9uTWFwcGVyID0gbWlycm9yOyAvLyBSZW1vdmUgaW4gbmV4dCBtYWpvciB3aGVuIHJlbW92aW5nIGVycm9yIG1hcHBpbmcgb2YgRE9NRXJyb3JzIGFuZCBET01FeGNlcHRpb25zXG4gICAgXG5leHBvcnQgdmFyIGdsb2JhbFBTRCA9IHtcbiAgICBpZDogJ2dsb2JhbCcsXG4gICAgZ2xvYmFsOiB0cnVlLFxuICAgIHJlZjogMCxcbiAgICB1bmhhbmRsZWRzOiBbXSxcbiAgICBvbnVuaGFuZGxlZDogbm9wLFxuICAgIHBncDogZmFsc2UsXG4gICAgZW52OiB7fSxcbiAgICBmaW5hbGl6ZTogbm9wXG59O1xuXG5leHBvcnQgdmFyIFBTRCA9IGdsb2JhbFBTRDtcblxuZXhwb3J0IHZhciBtaWNyb3RpY2tRdWV1ZSA9IFtdOyAvLyBDYWxsYmFja3MgdG8gY2FsbCBpbiB0aGlzIG9yIG5leHQgcGh5c2ljYWwgdGljay5cbmV4cG9ydCB2YXIgbnVtU2NoZWR1bGVkQ2FsbHMgPSAwOyAvLyBOdW1iZXIgb2YgbGlzdGVuZXItY2FsbHMgbGVmdCB0byBkbyBpbiB0aGlzIHBoeXNpY2FsIHRpY2suXG5leHBvcnQgdmFyIHRpY2tGaW5hbGl6ZXJzID0gW107IC8vIEZpbmFsaXplcnMgdG8gY2FsbCB3aGVuIHRoZXJlIGFyZSBubyBtb3JlIGFzeW5jIGNhbGxzIHNjaGVkdWxlZCB3aXRoaW4gY3VycmVudCBwaHlzaWNhbCB0aWNrLlxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBEZXhpZVByb21pc2UoZm4pIHtcbiAgICBpZiAodHlwZW9mIHRoaXMgIT09ICdvYmplY3QnKSB0aHJvdyBuZXcgVHlwZUVycm9yKCdQcm9taXNlcyBtdXN0IGJlIGNvbnN0cnVjdGVkIHZpYSBuZXcnKTsgICAgXG4gICAgdGhpcy5fbGlzdGVuZXJzID0gW107XG4gICAgXG4gICAgLy8gQSBsaWJyYXJ5IG1heSBzZXQgYHByb21pc2UuX2xpYiA9IHRydWU7YCBhZnRlciBwcm9taXNlIGlzIGNyZWF0ZWQgdG8gbWFrZSByZXNvbHZlKCkgb3IgcmVqZWN0KClcbiAgICAvLyBleGVjdXRlIHRoZSBtaWNyb3Rhc2sgZW5naW5lIGltcGxpY2l0ZWx5IHdpdGhpbiB0aGUgY2FsbCB0byByZXNvbHZlKCkgb3IgcmVqZWN0KCkuXG4gICAgLy8gVG8gcmVtYWluIEErIGNvbXBsaWFudCwgYSBsaWJyYXJ5IG11c3Qgb25seSBzZXQgYF9saWI9dHJ1ZWAgaWYgaXQgY2FuIGd1YXJhbnRlZSB0aGF0IHRoZSBzdGFja1xuICAgIC8vIG9ubHkgY29udGFpbnMgbGlicmFyeSBjb2RlIHdoZW4gY2FsbGluZyByZXNvbHZlKCkgb3IgcmVqZWN0KCkuXG4gICAgLy8gUlVMRSBPRiBUSFVNQjogT05MWSBzZXQgX2xpYiA9IHRydWUgZm9yIHByb21pc2VzIGV4cGxpY2l0ZWx5IHJlc29sdmluZy9yZWplY3RpbmcgZGlyZWN0bHkgZnJvbVxuICAgIC8vIGdsb2JhbCBzY29wZSAoZXZlbnQgaGFuZGxlciwgdGltZXIgZXRjKSFcbiAgICB0aGlzLl9saWIgPSBmYWxzZTtcbiAgICAvLyBDdXJyZW50IGFzeW5jIHNjb3BlXG4gICAgdmFyIHBzZCA9ICh0aGlzLl9QU0QgPSBQU0QpO1xuICAgIFxuICAgIGlmICh0eXBlb2YgZm4gIT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgaWYgKGZuICE9PSBJTlRFUk5BTCkgdGhyb3cgbmV3IFR5cGVFcnJvcignTm90IGEgZnVuY3Rpb24nKTtcbiAgICAgICAgLy8gUHJpdmF0ZSBjb25zdHJ1Y3RvciAoSU5URVJOQUwsIHN0YXRlLCB2YWx1ZSkuXG4gICAgICAgIC8vIFVzZWQgaW50ZXJuYWxseSBieSBQcm9taXNlLnJlc29sdmUoKSBhbmQgUHJvbWlzZS5yZWplY3QoKS5cbiAgICAgICAgdGhpcy5fc3RhdGUgPSBhcmd1bWVudHNbMV07XG4gICAgICAgIHRoaXMuX3ZhbHVlID0gYXJndW1lbnRzWzJdO1xuICAgICAgICBpZiAodGhpcy5fc3RhdGUgPT09IGZhbHNlKVxuICAgICAgICAgICAgaGFuZGxlUmVqZWN0aW9uKHRoaXMsIHRoaXMuX3ZhbHVlKTsgLy8gTWFwIGVycm9yLCBzZXQgc3RhY2sgYW5kIGFkZFBvc3NpYmx5VW5oYW5kbGVkRXJyb3IoKS5cbiAgICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBcbiAgICB0aGlzLl9zdGF0ZSA9IG51bGw7IC8vIG51bGwgKD1wZW5kaW5nKSwgZmFsc2UgKD1yZWplY3RlZCkgb3IgdHJ1ZSAoPXJlc29sdmVkKVxuICAgIHRoaXMuX3ZhbHVlID0gbnVsbDsgLy8gZXJyb3Igb3IgcmVzdWx0XG4gICAgKytwc2QucmVmOyAvLyBSZWZjb3VudGluZyBjdXJyZW50IHNjb3BlXG4gICAgZXhlY3V0ZVByb21pc2VUYXNrKHRoaXMsIGZuKTtcbn1cblxuLy8gUHJlcGFyZSBhIHByb3BlcnR5IGRlc2NyaXB0b3IgdG8gcHV0IG9udG8gUHJvbWlzZS5wcm90b3R5cGUudGhlblxuY29uc3QgdGhlblByb3AgPSB7XG4gICAgZ2V0OiBmdW5jdGlvbigpIHtcbiAgICAgICAgdmFyIHBzZCA9IFBTRCwgbWljcm9UYXNrSWQgPSB0b3RhbEVjaG9lcztcblxuICAgICAgICBmdW5jdGlvbiB0aGVuIChvbkZ1bGZpbGxlZCwgb25SZWplY3RlZCkge1xuICAgICAgICAgICAgdmFyIHBvc3NpYmxlQXdhaXQgPSAhcHNkLmdsb2JhbCAmJiAocHNkICE9PSBQU0QgfHwgbWljcm9UYXNrSWQgIT09IHRvdGFsRWNob2VzKTtcbiAgICAgICAgICAgIGNvbnN0IGNsZWFudXAgPSBwb3NzaWJsZUF3YWl0ICYmICFkZWNyZW1lbnRFeHBlY3RlZEF3YWl0cygpO1xuICAgICAgICAgICAgdmFyIHJ2ID0gbmV3IERleGllUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgICAgICAgICAgICAgcHJvcGFnYXRlVG9MaXN0ZW5lcih0aGlzLCBuZXcgTGlzdGVuZXIoXG4gICAgICAgICAgICAgICAgICAgIG5hdGl2ZUF3YWl0Q29tcGF0aWJsZVdyYXAob25GdWxmaWxsZWQsIHBzZCwgcG9zc2libGVBd2FpdCwgY2xlYW51cCksXG4gICAgICAgICAgICAgICAgICAgIG5hdGl2ZUF3YWl0Q29tcGF0aWJsZVdyYXAob25SZWplY3RlZCwgcHNkLCBwb3NzaWJsZUF3YWl0LCBjbGVhbnVwKSxcbiAgICAgICAgICAgICAgICAgICAgcmVzb2x2ZSxcbiAgICAgICAgICAgICAgICAgICAgcmVqZWN0LFxuICAgICAgICAgICAgICAgICAgICBwc2QpKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgaWYgKHRoaXMuX2NvbnNvbGVUYXNrKSBydi5fY29uc29sZVRhc2sgPSB0aGlzLl9jb25zb2xlVGFzaztcbiAgICAgICAgICAgIHJldHVybiBydjtcbiAgICAgICAgfVxuXG4gICAgICAgIHRoZW4ucHJvdG90eXBlID0gSU5URVJOQUw7IC8vIEZvciBpZGVtcG90ZW5zZSwgc2VlIHNldHRlciBiZWxvdy5cblxuICAgICAgICByZXR1cm4gdGhlbjtcbiAgICB9LFxuICAgIC8vIEJlIGlkZW1wb3RlbnQgYW5kIGFsbG93IGFub3RoZXIgZnJhbWV3b3JrIChzdWNoIGFzIHpvbmUuanMgb3IgYW5vdGhlciBpbnN0YW5jZSBvZiBhIERleGllLlByb21pc2UgbW9kdWxlKSB0byByZXBsYWNlIFByb21pc2UucHJvdG90eXBlLnRoZW5cbiAgICAvLyBhbmQgd2hlbiB0aGF0IGZyYW1ld29yayB3YW50cyB0byByZXN0b3JlIHRoZSBvcmlnaW5hbCBwcm9wZXJ0eSwgd2UgbXVzdCBpZGVudGlmeSB0aGF0IGFuZCByZXN0b3JlIHRoZSBvcmlnaW5hbCBwcm9wZXJ0eSBkZXNjcmlwdG9yLlxuICAgIHNldDogZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICAgIHNldFByb3AgKHRoaXMsICd0aGVuJywgdmFsdWUgJiYgdmFsdWUucHJvdG90eXBlID09PSBJTlRFUk5BTCA/XG4gICAgICAgICAgICB0aGVuUHJvcCA6IC8vIFJlc3RvcmUgdG8gb3JpZ2luYWwgcHJvcGVydHkgZGVzY3JpcHRvci5cbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBnZXQ6IGZ1bmN0aW9uKCl7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB2YWx1ZTsgLy8gR2V0dGVyIHJldHVybmluZyBwcm92aWRlZCB2YWx1ZSAoYmVoYXZlcyBsaWtlIHZhbHVlIGlzIGp1c3QgY2hhbmdlZClcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIHNldDogdGhlblByb3Auc2V0IC8vIEtlZXAgYSBzZXR0ZXIgdGhhdCBpcyBwcmVwYXJlZCB0byByZXN0b3JlIG9yaWdpbmFsLlxuICAgICAgICAgICAgfVxuICAgICAgICApO1xuICAgIH1cbn07XG5cbnByb3BzKERleGllUHJvbWlzZS5wcm90b3R5cGUsIHtcbiAgICB0aGVuOiB0aGVuUHJvcCwgLy8gRGVmaW5lZCBhYm92ZS5cbiAgICBfdGhlbjogZnVuY3Rpb24gKG9uRnVsZmlsbGVkLCBvblJlamVjdGVkKSB7XG4gICAgICAgIC8vIEEgbGl0dGxlIHRpbmllciB2ZXJzaW9uIG9mIHRoZW4oKSB0aGF0IGRvbid0IGhhdmUgdG8gY3JlYXRlIGEgcmVzdWx0aW5nIHByb21pc2UuXG4gICAgICAgIHByb3BhZ2F0ZVRvTGlzdGVuZXIodGhpcywgbmV3IExpc3RlbmVyKG51bGwsIG51bGwsIG9uRnVsZmlsbGVkLCBvblJlamVjdGVkLCBQU0QpKTsgICAgICAgIFxuICAgIH0sXG5cbiAgICBjYXRjaDogZnVuY3Rpb24gKG9uUmVqZWN0ZWQpIHtcbiAgICAgICAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPT09IDEpIHJldHVybiB0aGlzLnRoZW4obnVsbCwgb25SZWplY3RlZCk7XG4gICAgICAgIC8vIEZpcnN0IGFyZ3VtZW50IGlzIHRoZSBFcnJvciB0eXBlIHRvIGNhdGNoXG4gICAgICAgIHZhciB0eXBlID0gYXJndW1lbnRzWzBdLFxuICAgICAgICAgICAgaGFuZGxlciA9IGFyZ3VtZW50c1sxXTtcbiAgICAgICAgcmV0dXJuIHR5cGVvZiB0eXBlID09PSAnZnVuY3Rpb24nID8gdGhpcy50aGVuKG51bGwsIGVyciA9PlxuICAgICAgICAgICAgLy8gQ2F0Y2hpbmcgZXJyb3JzIGJ5IGl0cyBjb25zdHJ1Y3RvciB0eXBlIChzaW1pbGFyIHRvIGphdmEgLyBjKysgLyBjIylcbiAgICAgICAgICAgIC8vIFNhbXBsZTogcHJvbWlzZS5jYXRjaChUeXBlRXJyb3IsIGZ1bmN0aW9uIChlKSB7IC4uLiB9KTtcbiAgICAgICAgICAgIGVyciBpbnN0YW5jZW9mIHR5cGUgPyBoYW5kbGVyKGVycikgOiBQcm9taXNlUmVqZWN0KGVycikpXG4gICAgICAgIDogdGhpcy50aGVuKG51bGwsIGVyciA9PlxuICAgICAgICAgICAgLy8gQ2F0Y2hpbmcgZXJyb3JzIGJ5IHRoZSBlcnJvci5uYW1lIHByb3BlcnR5LiBNYWtlcyBzZW5zZSBmb3IgaW5kZXhlZERCIHdoZXJlIGVycm9yIHR5cGVcbiAgICAgICAgICAgIC8vIGlzIGFsd2F5cyBET01FcnJvciBidXQgd2hlcmUgZS5uYW1lIHRlbGxzIHRoZSBhY3R1YWwgZXJyb3IgdHlwZS5cbiAgICAgICAgICAgIC8vIFNhbXBsZTogcHJvbWlzZS5jYXRjaCgnQ29uc3RyYWludEVycm9yJywgZnVuY3Rpb24gKGUpIHsgLi4uIH0pO1xuICAgICAgICAgICAgZXJyICYmIGVyci5uYW1lID09PSB0eXBlID8gaGFuZGxlcihlcnIpIDogUHJvbWlzZVJlamVjdChlcnIpKTtcbiAgICB9LFxuXG4gICAgZmluYWxseTogZnVuY3Rpb24gKG9uRmluYWxseSkge1xuICAgICAgICByZXR1cm4gdGhpcy50aGVuKHZhbHVlID0+IHtcbiAgICAgICAgICAgIHJldHVybiBEZXhpZVByb21pc2UucmVzb2x2ZShvbkZpbmFsbHkoKSkudGhlbigoKT0+dmFsdWUpO1xuICAgICAgICB9LCBlcnIgPT4ge1xuICAgICAgICAgICAgcmV0dXJuIERleGllUHJvbWlzZS5yZXNvbHZlKG9uRmluYWxseSgpKS50aGVuKCgpPT5Qcm9taXNlUmVqZWN0KGVycikpO1xuICAgICAgICB9KTtcbiAgICB9LFxuICAgIFxuICAgIHRpbWVvdXQ6IGZ1bmN0aW9uIChtcywgbXNnKSB7XG4gICAgICAgIHJldHVybiBtcyA8IEluZmluaXR5ID9cbiAgICAgICAgICAgIG5ldyBEZXhpZVByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuICAgICAgICAgICAgICAgIHZhciBoYW5kbGUgPSBzZXRUaW1lb3V0KCgpID0+IHJlamVjdChuZXcgZXhjZXB0aW9ucy5UaW1lb3V0KG1zZykpLCBtcyk7XG4gICAgICAgICAgICAgICAgdGhpcy50aGVuKHJlc29sdmUsIHJlamVjdCkuZmluYWxseShjbGVhclRpbWVvdXQuYmluZChudWxsLCBoYW5kbGUpKTtcbiAgICAgICAgICAgIH0pIDogdGhpcztcbiAgICB9XG59KTtcblxuaWYgKHR5cGVvZiBTeW1ib2wgIT09ICd1bmRlZmluZWQnICYmIFN5bWJvbC50b1N0cmluZ1RhZylcbiAgICBzZXRQcm9wKERleGllUHJvbWlzZS5wcm90b3R5cGUsIFN5bWJvbC50b1N0cmluZ1RhZywgJ0RleGllLlByb21pc2UnKTtcblxuLy8gTm93IHRoYXQgUHJvbWlzZS5wcm90b3R5cGUgaXMgZGVmaW5lZCwgd2UgaGF2ZSBhbGwgaXQgdGFrZXMgdG8gc2V0IGdsb2JhbFBTRC5lbnYuXG4vLyBFbnZpcm9ubWVudCBnbG9iYWxzIHNuYXBzaG90dGVkIG9uIGxlYXZpbmcgZ2xvYmFsIHpvbmVcbmdsb2JhbFBTRC5lbnYgPSBzbmFwU2hvdCgpO1xuXG5mdW5jdGlvbiBMaXN0ZW5lcihvbkZ1bGZpbGxlZCwgb25SZWplY3RlZCwgcmVzb2x2ZSwgcmVqZWN0LCB6b25lKSB7XG4gICAgdGhpcy5vbkZ1bGZpbGxlZCA9IHR5cGVvZiBvbkZ1bGZpbGxlZCA9PT0gJ2Z1bmN0aW9uJyA/IG9uRnVsZmlsbGVkIDogbnVsbDtcbiAgICB0aGlzLm9uUmVqZWN0ZWQgPSB0eXBlb2Ygb25SZWplY3RlZCA9PT0gJ2Z1bmN0aW9uJyA/IG9uUmVqZWN0ZWQgOiBudWxsO1xuICAgIHRoaXMucmVzb2x2ZSA9IHJlc29sdmU7XG4gICAgdGhpcy5yZWplY3QgPSByZWplY3Q7XG4gICAgdGhpcy5wc2QgPSB6b25lO1xufVxuXG4vLyBQcm9taXNlIFN0YXRpYyBQcm9wZXJ0aWVzXG5wcm9wcyAoRGV4aWVQcm9taXNlLCB7XG4gICAgYWxsOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciB2YWx1ZXMgPSBnZXRBcnJheU9mLmFwcGx5KG51bGwsIGFyZ3VtZW50cykgLy8gU3VwcG9ydHMgaXRlcmFibGVzLCBpbXBsaWNpdCBhcmd1bWVudHMgYW5kIGFycmF5LWxpa2UuXG4gICAgICAgICAgICAubWFwKG9uUG9zc2libGVQYXJhbGxlbGxBc3luYyk7IC8vIEhhbmRsZSBwYXJhbGxlbGwgYXN5bmMvYXdhaXRzIFxuICAgICAgICByZXR1cm4gbmV3IERleGllUHJvbWlzZShmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgICAgICAgICBpZiAodmFsdWVzLmxlbmd0aCA9PT0gMCkgcmVzb2x2ZShbXSk7XG4gICAgICAgICAgICB2YXIgcmVtYWluaW5nID0gdmFsdWVzLmxlbmd0aDtcbiAgICAgICAgICAgIHZhbHVlcy5mb3JFYWNoKChhLGkpID0+IERleGllUHJvbWlzZS5yZXNvbHZlKGEpLnRoZW4oeCA9PiB7XG4gICAgICAgICAgICAgICAgdmFsdWVzW2ldID0geDtcbiAgICAgICAgICAgICAgICBpZiAoIS0tcmVtYWluaW5nKSByZXNvbHZlKHZhbHVlcyk7XG4gICAgICAgICAgICB9LCByZWplY3QpKTtcbiAgICAgICAgfSk7XG4gICAgfSxcbiAgICBcbiAgICByZXNvbHZlOiB2YWx1ZSA9PiB7XG4gICAgICAgIGlmICh2YWx1ZSBpbnN0YW5jZW9mIERleGllUHJvbWlzZSkgcmV0dXJuIHZhbHVlO1xuICAgICAgICBpZiAodmFsdWUgJiYgdHlwZW9mIHZhbHVlLnRoZW4gPT09ICdmdW5jdGlvbicpIHJldHVybiBuZXcgRGV4aWVQcm9taXNlKChyZXNvbHZlLCByZWplY3QpPT57XG4gICAgICAgICAgICB2YWx1ZS50aGVuKHJlc29sdmUsIHJlamVjdCk7XG4gICAgICAgIH0pO1xuICAgICAgICB2YXIgcnYgPSBuZXcgRGV4aWVQcm9taXNlKElOVEVSTkFMLCB0cnVlLCB2YWx1ZSk7XG4gICAgICAgIHJldHVybiBydjtcbiAgICB9LFxuICAgIFxuICAgIHJlamVjdDogUHJvbWlzZVJlamVjdCxcbiAgICBcbiAgICByYWNlOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciB2YWx1ZXMgPSBnZXRBcnJheU9mLmFwcGx5KG51bGwsIGFyZ3VtZW50cykubWFwKG9uUG9zc2libGVQYXJhbGxlbGxBc3luYyk7XG4gICAgICAgIHJldHVybiBuZXcgRGV4aWVQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgICAgICAgICAgIHZhbHVlcy5tYXAodmFsdWUgPT4gRGV4aWVQcm9taXNlLnJlc29sdmUodmFsdWUpLnRoZW4ocmVzb2x2ZSwgcmVqZWN0KSk7XG4gICAgICAgIH0pO1xuICAgIH0sXG5cbiAgICBQU0Q6IHtcbiAgICAgICAgZ2V0OiAoKT0+UFNELFxuICAgICAgICBzZXQ6IHZhbHVlID0+IFBTRCA9IHZhbHVlXG4gICAgfSxcblxuICAgIHRvdGFsRWNob2VzOiB7Z2V0OiAoKT0+dG90YWxFY2hvZXN9LFxuXG4gICAgLy90YXNrOiB7Z2V0OiAoKT0+dGFza30sXG4gICAgXG4gICAgbmV3UFNEOiBuZXdTY29wZSxcbiAgICBcbiAgICB1c2VQU0Q6IHVzZVBTRCxcbiAgICBcbiAgICBzY2hlZHVsZXI6IHtcbiAgICAgICAgZ2V0OiAoKSA9PiBhc2FwLFxuICAgICAgICBzZXQ6IHZhbHVlID0+IHthc2FwID0gdmFsdWV9XG4gICAgfSxcbiAgICBcbiAgICByZWplY3Rpb25NYXBwZXI6IHtcbiAgICAgICAgZ2V0OiAoKSA9PiByZWplY3Rpb25NYXBwZXIsXG4gICAgICAgIHNldDogdmFsdWUgPT4ge3JlamVjdGlvbk1hcHBlciA9IHZhbHVlO30gLy8gTWFwIHJlamVjdCBmYWlsdXJlc1xuICAgIH0sXG4gICAgICAgICAgICBcbiAgICBmb2xsb3c6IChmbiwgem9uZVByb3BzKSA9PiB7XG4gICAgICAgIHJldHVybiBuZXcgRGV4aWVQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgICAgICAgICAgIHJldHVybiBuZXdTY29wZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgICAgICAgICAgICAgdmFyIHBzZCA9IFBTRDtcbiAgICAgICAgICAgICAgICBwc2QudW5oYW5kbGVkcyA9IFtdOyAvLyBGb3IgdW5oYW5kbGVkIHN0YW5kYXJkLSBvciAzcmQgcGFydHkgUHJvbWlzZXMuIENoZWNrZWQgYXQgcHNkLmZpbmFsaXplKClcbiAgICAgICAgICAgICAgICBwc2Qub251bmhhbmRsZWQgPSByZWplY3Q7IC8vIFRyaWdnZXJlZCBkaXJlY3RseSBvbiB1bmhhbmRsZWQgcHJvbWlzZXMgb2YgdGhpcyBsaWJyYXJ5LlxuICAgICAgICAgICAgICAgIHBzZC5maW5hbGl6ZSA9IGNhbGxCb3RoKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gVW5oYW5kbGVkIHN0YW5kYXJkIG9yIDNyZCBwYXJ0IHByb21pc2VzIGFyZSBwdXQgaW4gUFNELnVuaGFuZGxlZHMgYW5kXG4gICAgICAgICAgICAgICAgICAgIC8vIGV4YW1pbmVkIHVwb24gc2NvcGUgY29tcGxldGlvbiB3aGlsZSB1bmhhbmRsZWQgcmVqZWN0aW9ucyBpbiB0aGlzIFByb21pc2VcbiAgICAgICAgICAgICAgICAgICAgLy8gd2lsbCB0cmlnZ2VyIGRpcmVjdGx5IHRocm91Z2ggcHNkLm9udW5oYW5kbGVkXG4gICAgICAgICAgICAgICAgICAgIHJ1bl9hdF9lbmRfb2ZfdGhpc19vcl9uZXh0X3BoeXNpY2FsX3RpY2soKCk9PntcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMudW5oYW5kbGVkcy5sZW5ndGggPT09IDAgPyByZXNvbHZlKCkgOiByZWplY3QodGhpcy51bmhhbmRsZWRzWzBdKTtcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgfSwgcHNkLmZpbmFsaXplKTtcbiAgICAgICAgICAgICAgICBmbigpO1xuICAgICAgICAgICAgfSwgem9uZVByb3BzLCByZXNvbHZlLCByZWplY3QpO1xuICAgICAgICB9KTtcbiAgICB9XG59KTtcblxuaWYgKE5hdGl2ZVByb21pc2UpIHtcbiAgICBpZiAoTmF0aXZlUHJvbWlzZS5hbGxTZXR0bGVkKSBzZXRQcm9wIChEZXhpZVByb21pc2UsIFwiYWxsU2V0dGxlZFwiLCBmdW5jdGlvbigpIHtcbiAgICAgICAgY29uc3QgcG9zc2libGVQcm9taXNlcyA9IGdldEFycmF5T2YuYXBwbHkobnVsbCwgYXJndW1lbnRzKS5tYXAob25Qb3NzaWJsZVBhcmFsbGVsbEFzeW5jKTtcbiAgICAgICAgcmV0dXJuIG5ldyBEZXhpZVByb21pc2UocmVzb2x2ZSA9PiB7XG4gICAgICAgICAgICBpZiAocG9zc2libGVQcm9taXNlcy5sZW5ndGggPT09IDApIHJlc29sdmUoW10pO1xuICAgICAgICAgICAgbGV0IHJlbWFpbmluZyA9IHBvc3NpYmxlUHJvbWlzZXMubGVuZ3RoO1xuICAgICAgICAgICAgY29uc3QgcmVzdWx0cyA9IG5ldyBBcnJheShyZW1haW5pbmcpO1xuICAgICAgICAgICAgcG9zc2libGVQcm9taXNlcy5mb3JFYWNoKChwLCBpKSA9PiBEZXhpZVByb21pc2UucmVzb2x2ZShwKS50aGVuKFxuICAgICAgICAgICAgICAgIHZhbHVlID0+IHJlc3VsdHNbaV0gPSB7c3RhdHVzOiBcImZ1bGZpbGxlZFwiLCB2YWx1ZX0sXG4gICAgICAgICAgICAgICAgcmVhc29uID0+IHJlc3VsdHNbaV0gPSB7c3RhdHVzOiBcInJlamVjdGVkXCIsIHJlYXNvbn0pXG4gICAgICAgICAgICAgICAgLnRoZW4oKCk9Pi0tcmVtYWluaW5nIHx8IHJlc29sdmUocmVzdWx0cykpKTtcbiAgICAgICAgfSk7XG4gICAgfSk7XG4gICAgaWYgKE5hdGl2ZVByb21pc2UuYW55ICYmIHR5cGVvZiBBZ2dyZWdhdGVFcnJvciAhPT0gJ3VuZGVmaW5lZCcpIHNldFByb3AoRGV4aWVQcm9taXNlLCBcImFueVwiLCBmdW5jdGlvbigpIHtcbiAgICAgICAgY29uc3QgcG9zc2libGVQcm9taXNlcyA9IGdldEFycmF5T2YuYXBwbHkobnVsbCwgYXJndW1lbnRzKS5tYXAob25Qb3NzaWJsZVBhcmFsbGVsbEFzeW5jKTtcbiAgICAgICAgcmV0dXJuIG5ldyBEZXhpZVByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuICAgICAgICAgICAgaWYgKHBvc3NpYmxlUHJvbWlzZXMubGVuZ3RoID09PSAwKSByZWplY3QobmV3IEFnZ3JlZ2F0ZUVycm9yKFtdKSk7XG4gICAgICAgICAgICBsZXQgcmVtYWluaW5nID0gcG9zc2libGVQcm9taXNlcy5sZW5ndGg7XG4gICAgICAgICAgICBjb25zdCBmYWlsdXJlcyA9IG5ldyBBcnJheShyZW1haW5pbmcpO1xuICAgICAgICAgICAgcG9zc2libGVQcm9taXNlcy5mb3JFYWNoKChwLCBpKSA9PiBEZXhpZVByb21pc2UucmVzb2x2ZShwKS50aGVuKFxuICAgICAgICAgICAgICAgIHZhbHVlID0+IHJlc29sdmUodmFsdWUpLFxuICAgICAgICAgICAgICAgIGZhaWx1cmUgPT4ge1xuICAgICAgICAgICAgICAgICAgICBmYWlsdXJlc1tpXSA9IGZhaWx1cmU7XG4gICAgICAgICAgICAgICAgICAgIGlmICghLS1yZW1haW5pbmcpIHJlamVjdChuZXcgQWdncmVnYXRlRXJyb3IoZmFpbHVyZXMpKTtcbiAgICAgICAgICAgICAgICB9KSk7XG4gICAgICAgIH0pO1xuICAgIH0pO1xufVxuXG4vKipcbiogVGFrZSBhIHBvdGVudGlhbGx5IG1pc2JlaGF2aW5nIHJlc29sdmVyIGZ1bmN0aW9uIGFuZCBtYWtlIHN1cmVcbiogb25GdWxmaWxsZWQgYW5kIG9uUmVqZWN0ZWQgYXJlIG9ubHkgY2FsbGVkIG9uY2UuXG4qXG4qIE1ha2VzIG5vIGd1YXJhbnRlZXMgYWJvdXQgYXN5bmNocm9ueS5cbiovXG5mdW5jdGlvbiBleGVjdXRlUHJvbWlzZVRhc2sgKHByb21pc2UsIGZuKSB7XG4gICAgLy8gUHJvbWlzZSBSZXNvbHV0aW9uIFByb2NlZHVyZTpcbiAgICAvLyBodHRwczovL2dpdGh1Yi5jb20vcHJvbWlzZXMtYXBsdXMvcHJvbWlzZXMtc3BlYyN0aGUtcHJvbWlzZS1yZXNvbHV0aW9uLXByb2NlZHVyZVxuICAgIHRyeSB7XG4gICAgICAgIGZuKHZhbHVlID0+IHtcbiAgICAgICAgICAgIGlmIChwcm9taXNlLl9zdGF0ZSAhPT0gbnVsbCkgcmV0dXJuOyAvLyBBbHJlYWR5IHNldHRsZWRcbiAgICAgICAgICAgIGlmICh2YWx1ZSA9PT0gcHJvbWlzZSkgdGhyb3cgbmV3IFR5cGVFcnJvcignQSBwcm9taXNlIGNhbm5vdCBiZSByZXNvbHZlZCB3aXRoIGl0c2VsZi4nKTtcbiAgICAgICAgICAgIHZhciBzaG91bGRFeGVjdXRlVGljayA9IHByb21pc2UuX2xpYiAmJiBiZWdpbk1pY3JvVGlja1Njb3BlKCk7XG4gICAgICAgICAgICBpZiAodmFsdWUgJiYgdHlwZW9mIHZhbHVlLnRoZW4gPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgICAgICBleGVjdXRlUHJvbWlzZVRhc2socHJvbWlzZSwgKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICB2YWx1ZSBpbnN0YW5jZW9mIERleGllUHJvbWlzZSA/XG4gICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZS5fdGhlbihyZXNvbHZlLCByZWplY3QpIDpcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlLnRoZW4ocmVzb2x2ZSwgcmVqZWN0KTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgcHJvbWlzZS5fc3RhdGUgPSB0cnVlO1xuICAgICAgICAgICAgICAgIHByb21pc2UuX3ZhbHVlID0gdmFsdWU7XG4gICAgICAgICAgICAgICAgcHJvcGFnYXRlQWxsTGlzdGVuZXJzKHByb21pc2UpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKHNob3VsZEV4ZWN1dGVUaWNrKSBlbmRNaWNyb1RpY2tTY29wZSgpO1xuICAgICAgICB9LCBoYW5kbGVSZWplY3Rpb24uYmluZChudWxsLCBwcm9taXNlKSk7IC8vIElmIEZ1bmN0aW9uLmJpbmQgaXMgbm90IHN1cHBvcnRlZC4gRXhjZXB0aW9uIGlzIGhhbmRsZWQgaW4gY2F0Y2ggYmVsb3dcbiAgICB9IGNhdGNoIChleCkge1xuICAgICAgICBoYW5kbGVSZWplY3Rpb24ocHJvbWlzZSwgZXgpO1xuICAgIH1cbn1cblxuZnVuY3Rpb24gaGFuZGxlUmVqZWN0aW9uIChwcm9taXNlLCByZWFzb24pIHtcbiAgICByZWplY3RpbmdFcnJvcnMucHVzaChyZWFzb24pO1xuICAgIGlmIChwcm9taXNlLl9zdGF0ZSAhPT0gbnVsbCkgcmV0dXJuO1xuICAgIHZhciBzaG91bGRFeGVjdXRlVGljayA9IHByb21pc2UuX2xpYiAmJiBiZWdpbk1pY3JvVGlja1Njb3BlKCk7XG4gICAgcmVhc29uID0gcmVqZWN0aW9uTWFwcGVyKHJlYXNvbik7XG4gICAgcHJvbWlzZS5fc3RhdGUgPSBmYWxzZTtcbiAgICBwcm9taXNlLl92YWx1ZSA9IHJlYXNvbjtcbiAgICAvLyBBZGQgdGhlIGZhaWx1cmUgdG8gYSBsaXN0IG9mIHBvc3NpYmx5IHVuY2F1Z2h0IGVycm9yc1xuICAgIGFkZFBvc3NpYmx5VW5oYW5kbGVkRXJyb3IocHJvbWlzZSk7XG4gICAgcHJvcGFnYXRlQWxsTGlzdGVuZXJzKHByb21pc2UpO1xuICAgIGlmIChzaG91bGRFeGVjdXRlVGljaykgZW5kTWljcm9UaWNrU2NvcGUoKTtcbn1cblxuZnVuY3Rpb24gcHJvcGFnYXRlQWxsTGlzdGVuZXJzIChwcm9taXNlKSB7XG4gICAgLy9kZWJ1ZyAmJiBsaW5rVG9QcmV2aW91c1Byb21pc2UocHJvbWlzZSk7XG4gICAgdmFyIGxpc3RlbmVycyA9IHByb21pc2UuX2xpc3RlbmVycztcbiAgICBwcm9taXNlLl9saXN0ZW5lcnMgPSBbXTtcbiAgICBmb3IgKHZhciBpID0gMCwgbGVuID0gbGlzdGVuZXJzLmxlbmd0aDsgaSA8IGxlbjsgKytpKSB7XG4gICAgICAgIHByb3BhZ2F0ZVRvTGlzdGVuZXIocHJvbWlzZSwgbGlzdGVuZXJzW2ldKTtcbiAgICB9XG4gICAgdmFyIHBzZCA9IHByb21pc2UuX1BTRDtcbiAgICAtLXBzZC5yZWYgfHwgcHNkLmZpbmFsaXplKCk7IC8vIGlmIHBzZC5yZWYgcmVhY2hlcyB6ZXJvLCBjYWxsIHBzZC5maW5hbGl6ZSgpO1xuICAgIGlmIChudW1TY2hlZHVsZWRDYWxscyA9PT0gMCkge1xuICAgICAgICAvLyBJZiBudW1TY2hlZHVsZWRDYWxscyBpcyAwLCBpdCBtZWFucyB0aGF0IG91ciBzdGFjayBpcyBub3QgaW4gYSBjYWxsYmFjayBvZiBhIHNjaGVkdWxlZCBjYWxsLFxuICAgICAgICAvLyBhbmQgdGhhdCBubyBkZWZlcnJlZHMgd2hlcmUgbGlzdGVuaW5nIHRvIHRoaXMgcmVqZWN0aW9uIG9yIHN1Y2Nlc3MuXG4gICAgICAgIC8vIFNpbmNlIHRoZXJlIGlzIGEgcmlzayB0aGF0IG91ciBzdGFjayBjYW4gY29udGFpbiBhcHBsaWNhdGlvbiBjb2RlIHRoYXQgbWF5XG4gICAgICAgIC8vIGRvIHN0dWZmIGFmdGVyIHRoaXMgY29kZSBpcyBmaW5pc2hlZCB0aGF0IG1heSBnZW5lcmF0ZSBuZXcgY2FsbHMsIHdlIGNhbm5vdFxuICAgICAgICAvLyBjYWxsIGZpbmFsaXplcnMgaGVyZS5cbiAgICAgICAgKytudW1TY2hlZHVsZWRDYWxscztcbiAgICAgICAgYXNhcCgoKT0+e1xuICAgICAgICAgICAgaWYgKC0tbnVtU2NoZWR1bGVkQ2FsbHMgPT09IDApIGZpbmFsaXplUGh5c2ljYWxUaWNrKCk7IC8vIFdpbGwgZGV0ZWN0IHVuaGFuZGxlZCBlcnJvcnNcbiAgICAgICAgfSwgW10pO1xuICAgIH1cbn1cblxuZnVuY3Rpb24gcHJvcGFnYXRlVG9MaXN0ZW5lcihwcm9taXNlLCBsaXN0ZW5lcikge1xuICAgIGlmIChwcm9taXNlLl9zdGF0ZSA9PT0gbnVsbCkge1xuICAgICAgICBwcm9taXNlLl9saXN0ZW5lcnMucHVzaChsaXN0ZW5lcik7XG4gICAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICB2YXIgY2IgPSBwcm9taXNlLl9zdGF0ZSA/IGxpc3RlbmVyLm9uRnVsZmlsbGVkIDogbGlzdGVuZXIub25SZWplY3RlZDtcbiAgICBpZiAoY2IgPT09IG51bGwpIHtcbiAgICAgICAgLy8gVGhpcyBMaXN0ZW5lciBkb2VzbnQgaGF2ZSBhIGxpc3RlbmVyIGZvciB0aGUgZXZlbnQgYmVpbmcgdHJpZ2dlcmVkIChvbkZ1bGZpbGxlZCBvciBvblJlamVjdCkgc28gbGV0cyBmb3J3YXJkIHRoZSBldmVudCB0byBhbnkgZXZlbnR1YWwgbGlzdGVuZXJzIG9uIHRoZSBQcm9taXNlIGluc3RhbmNlIHJldHVybmVkIGJ5IHRoZW4oKSBvciBjYXRjaCgpXG4gICAgICAgIHJldHVybiAocHJvbWlzZS5fc3RhdGUgPyBsaXN0ZW5lci5yZXNvbHZlIDogbGlzdGVuZXIucmVqZWN0KSAocHJvbWlzZS5fdmFsdWUpO1xuICAgIH1cbiAgICArK2xpc3RlbmVyLnBzZC5yZWY7XG4gICAgKytudW1TY2hlZHVsZWRDYWxscztcbiAgICBhc2FwIChjYWxsTGlzdGVuZXIsIFtjYiwgcHJvbWlzZSwgbGlzdGVuZXJdKTtcbn1cblxuZnVuY3Rpb24gY2FsbExpc3RlbmVyIChjYiwgcHJvbWlzZSwgbGlzdGVuZXIpIHtcbiAgICB0cnkge1xuICAgICAgICAvLyBDYWxsIGNhbGxiYWNrIGFuZCByZXNvbHZlIG91ciBsaXN0ZW5lciB3aXRoIGl0J3MgcmV0dXJuIHZhbHVlLlxuICAgICAgICB2YXIgcmV0LCB2YWx1ZSA9IHByb21pc2UuX3ZhbHVlO1xuICAgICAgICAgICAgXG4gICAgICAgIGlmICghcHJvbWlzZS5fc3RhdGUgJiYgcmVqZWN0aW5nRXJyb3JzLmxlbmd0aCkgcmVqZWN0aW5nRXJyb3JzID0gW107XG4gICAgICAgIC8vIGNiIGlzIG9uUmVzb2x2ZWRcbiAgICAgICAgcmV0ID0gZGVidWcgJiYgcHJvbWlzZS5fY29uc29sZVRhc2sgPyBwcm9taXNlLl9jb25zb2xlVGFzay5ydW4oKCk9PmNiICh2YWx1ZSkpIDogY2IgKHZhbHVlKTtcbiAgICAgICAgaWYgKCFwcm9taXNlLl9zdGF0ZSAmJiByZWplY3RpbmdFcnJvcnMuaW5kZXhPZih2YWx1ZSkgPT09IC0xKSB7XG4gICAgICAgICAgICBtYXJrRXJyb3JBc0hhbmRsZWQocHJvbWlzZSk7IC8vIENhbGxiYWNrIGRpZG50IGRvIFByb21pc2UucmVqZWN0KGVycikgbm9yIHJlamVjdChlcnIpIG9udG8gYW5vdGhlciBwcm9taXNlLlxuICAgICAgICB9XG4gICAgICAgIGxpc3RlbmVyLnJlc29sdmUocmV0KTtcbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgIC8vIEV4Y2VwdGlvbiB0aHJvd24gaW4gY2FsbGJhY2suIFJlamVjdCBvdXIgbGlzdGVuZXIuXG4gICAgICAgIGxpc3RlbmVyLnJlamVjdChlKTtcbiAgICB9IGZpbmFsbHkge1xuICAgICAgICBpZiAoLS1udW1TY2hlZHVsZWRDYWxscyA9PT0gMCkgZmluYWxpemVQaHlzaWNhbFRpY2soKTtcbiAgICAgICAgLS1saXN0ZW5lci5wc2QucmVmIHx8IGxpc3RlbmVyLnBzZC5maW5hbGl6ZSgpO1xuICAgIH1cbn1cblxuLyogVGhlIGNhbGxiYWNrIHRvIHNjaGVkdWxlIHdpdGggcXVldWVNaWNyb3Rhc2soKS5cbiAgIEl0IHJ1bnMgYSB2aXJ0dWFsIG1pY3JvdGljayBhbmQgZXhlY3V0ZXMgYW55IGNhbGxiYWNrIHJlZ2lzdGVyZWQgaW4gbWljcm90aWNrUXVldWUuXG4gKi9cbmZ1bmN0aW9uIHBoeXNpY2FsVGljaygpIHtcbiAgICB1c2VQU0QoZ2xvYmFsUFNELCAoKT0+e1xuICAgICAgICAvLyBNYWtlIHN1cmUgdG8gcmVzZXQgdGhlIGFzeW5jIGNvbnRleHQgdG8gZ2xvYmFsUFNEIGJlZm9yZVxuICAgICAgICAvLyBleGVjdXRpbmcgYW55IG9mIHRoZSBtaWNyb3RpY2sgc3Vic2NyaWJlcnMuXG4gICAgICAgIGJlZ2luTWljcm9UaWNrU2NvcGUoKSAmJiBlbmRNaWNyb1RpY2tTY29wZSgpO1xuICAgIH0pO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gYmVnaW5NaWNyb1RpY2tTY29wZSgpIHtcbiAgICB2YXIgd2FzUm9vdEV4ZWMgPSBpc091dHNpZGVNaWNyb1RpY2s7XG4gICAgaXNPdXRzaWRlTWljcm9UaWNrID0gZmFsc2U7XG4gICAgbmVlZHNOZXdQaHlzaWNhbFRpY2sgPSBmYWxzZTtcbiAgICByZXR1cm4gd2FzUm9vdEV4ZWM7XG59XG5cbi8qIEV4ZWN1dGVzIG1pY3JvLXRpY2tzIHdpdGhvdXQgZG9pbmcgdHJ5Li5jYXRjaC5cbiAgIFRoaXMgY2FuIGJlIHBvc3NpYmxlIGJlY2F1c2Ugd2Ugb25seSB1c2UgdGhpcyBpbnRlcm5hbGx5IGFuZFxuICAgdGhlIHJlZ2lzdGVyZWQgZnVuY3Rpb25zIGFyZSBleGNlcHRpb24tc2FmZSAodGhleSBkbyB0cnkuLmNhdGNoXG4gICBpbnRlcm5hbGx5IGJlZm9yZSBjYWxsaW5nIGFueSBleHRlcm5hbCBtZXRob2QpLiBJZiByZWdpc3RlcmluZ1xuICAgZnVuY3Rpb25zIGluIHRoZSBtaWNyb3RpY2tRdWV1ZSB0aGF0IGFyZSBub3QgZXhjZXB0aW9uLXNhZmUsIHRoaXNcbiAgIHdvdWxkIGRlc3Ryb3kgdGhlIGZyYW1ld29yayBhbmQgbWFrZSBpdCBpbnN0YWJsZS4gU28gd2UgZG9uJ3QgZXhwb3J0XG4gICBvdXIgYXNhcCBtZXRob2QuXG4qL1xuZXhwb3J0IGZ1bmN0aW9uIGVuZE1pY3JvVGlja1Njb3BlKCkge1xuICAgIHZhciBjYWxsYmFja3MsIGksIGw7XG4gICAgZG8ge1xuICAgICAgICB3aGlsZSAobWljcm90aWNrUXVldWUubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgY2FsbGJhY2tzID0gbWljcm90aWNrUXVldWU7XG4gICAgICAgICAgICBtaWNyb3RpY2tRdWV1ZSA9IFtdO1xuICAgICAgICAgICAgbCA9IGNhbGxiYWNrcy5sZW5ndGg7XG4gICAgICAgICAgICBmb3IgKGkgPSAwOyBpIDwgbDsgKytpKSB7XG4gICAgICAgICAgICAgICAgdmFyIGl0ZW0gPSBjYWxsYmFja3NbaV07XG4gICAgICAgICAgICAgICAgaXRlbVswXS5hcHBseShudWxsLCBpdGVtWzFdKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH0gd2hpbGUgKG1pY3JvdGlja1F1ZXVlLmxlbmd0aCA+IDApO1xuICAgIGlzT3V0c2lkZU1pY3JvVGljayA9IHRydWU7XG4gICAgbmVlZHNOZXdQaHlzaWNhbFRpY2sgPSB0cnVlO1xufVxuXG5mdW5jdGlvbiBmaW5hbGl6ZVBoeXNpY2FsVGljaygpIHtcbiAgICB2YXIgdW5oYW5kbGVkRXJycyA9IHVuaGFuZGxlZEVycm9ycztcbiAgICB1bmhhbmRsZWRFcnJvcnMgPSBbXTtcbiAgICB1bmhhbmRsZWRFcnJzLmZvckVhY2gocCA9PiB7XG4gICAgICAgIHAuX1BTRC5vbnVuaGFuZGxlZC5jYWxsKG51bGwsIHAuX3ZhbHVlLCBwKTtcbiAgICB9KTtcbiAgICB2YXIgZmluYWxpemVycyA9IHRpY2tGaW5hbGl6ZXJzLnNsaWNlKDApOyAvLyBDbG9uZSBmaXJzdCBiZWNhdXNlIGZpbmFsaXplciBtYXkgcmVtb3ZlIGl0c2VsZiBmcm9tIGxpc3QuXG4gICAgdmFyIGkgPSBmaW5hbGl6ZXJzLmxlbmd0aDtcbiAgICB3aGlsZSAoaSkgZmluYWxpemVyc1stLWldKCk7ICAgIFxufVxuXG5mdW5jdGlvbiBydW5fYXRfZW5kX29mX3RoaXNfb3JfbmV4dF9waHlzaWNhbF90aWNrIChmbikge1xuICAgIGZ1bmN0aW9uIGZpbmFsaXplcigpIHtcbiAgICAgICAgZm4oKTtcbiAgICAgICAgdGlja0ZpbmFsaXplcnMuc3BsaWNlKHRpY2tGaW5hbGl6ZXJzLmluZGV4T2YoZmluYWxpemVyKSwgMSk7XG4gICAgfVxuICAgIHRpY2tGaW5hbGl6ZXJzLnB1c2goZmluYWxpemVyKTtcbiAgICArK251bVNjaGVkdWxlZENhbGxzO1xuICAgIGFzYXAoKCk9PntcbiAgICAgICAgaWYgKC0tbnVtU2NoZWR1bGVkQ2FsbHMgPT09IDApIGZpbmFsaXplUGh5c2ljYWxUaWNrKCk7XG4gICAgfSwgW10pO1xufVxuXG5mdW5jdGlvbiBhZGRQb3NzaWJseVVuaGFuZGxlZEVycm9yKHByb21pc2UpIHtcbiAgICAvLyBPbmx5IGFkZCB0byB1bmhhbmRsZWRFcnJvcnMgaWYgbm90IGFscmVhZHkgdGhlcmUuIFRoZSBmaXJzdCBvbmUgdG8gYWRkIHRvIHRoaXMgbGlzdFxuICAgIC8vIHdpbGwgYmUgdXBvbiB0aGUgZmlyc3QgcmVqZWN0aW9uIHNvIHRoYXQgdGhlIHJvb3QgY2F1c2UgKGZpcnN0IHByb21pc2UgaW4gdGhlXG4gICAgLy8gcmVqZWN0aW9uIGNoYWluKSBpcyB0aGUgb25lIGxpc3RlZC5cbiAgICBpZiAoIXVuaGFuZGxlZEVycm9ycy5zb21lKHAgPT4gcC5fdmFsdWUgPT09IHByb21pc2UuX3ZhbHVlKSlcbiAgICAgICAgdW5oYW5kbGVkRXJyb3JzLnB1c2gocHJvbWlzZSk7XG59XG5cbmZ1bmN0aW9uIG1hcmtFcnJvckFzSGFuZGxlZChwcm9taXNlKSB7XG4gICAgLy8gQ2FsbGVkIHdoZW4gYSByZWplY3QgaGFuZGxlZCBpcyBhY3R1YWxseSBiZWluZyBjYWxsZWQuXG4gICAgLy8gU2VhcmNoIGluIHVuaGFuZGxlZEVycm9ycyBmb3IgYW55IHByb21pc2Ugd2hvcyBfdmFsdWUgaXMgdGhpcyBwcm9taXNlX3ZhbHVlIChsaXN0XG4gICAgLy8gY29udGFpbnMgb25seSByZWplY3RlZCBwcm9taXNlcywgYW5kIG9ubHkgb25lIGl0ZW0gcGVyIGVycm9yKVxuICAgIHZhciBpID0gdW5oYW5kbGVkRXJyb3JzLmxlbmd0aDtcbiAgICB3aGlsZSAoaSkgaWYgKHVuaGFuZGxlZEVycm9yc1stLWldLl92YWx1ZSA9PT0gcHJvbWlzZS5fdmFsdWUpIHtcbiAgICAgICAgLy8gRm91bmQgYSBwcm9taXNlIHRoYXQgZmFpbGVkIHdpdGggdGhpcyBzYW1lIGVycm9yIG9iamVjdCBwb2ludGVyLFxuICAgICAgICAvLyBSZW1vdmUgdGhhdCBzaW5jZSB0aGVyZSBpcyBhIGxpc3RlbmVyIHRoYXQgYWN0dWFsbHkgdGFrZXMgY2FyZSBvZiBpdC5cbiAgICAgICAgdW5oYW5kbGVkRXJyb3JzLnNwbGljZShpLCAxKTtcbiAgICAgICAgcmV0dXJuO1xuICAgIH1cbn1cblxuZnVuY3Rpb24gUHJvbWlzZVJlamVjdCAocmVhc29uKSB7XG4gICAgcmV0dXJuIG5ldyBEZXhpZVByb21pc2UoSU5URVJOQUwsIGZhbHNlLCByZWFzb24pO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gd3JhcCAoZm4sIGVycm9yQ2F0Y2hlcikge1xuICAgIHZhciBwc2QgPSBQU0Q7XG4gICAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgICAgICB2YXIgd2FzUm9vdEV4ZWMgPSBiZWdpbk1pY3JvVGlja1Njb3BlKCksXG4gICAgICAgICAgICBvdXRlclNjb3BlID0gUFNEO1xuXG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICBzd2l0Y2hUb1pvbmUocHNkLCB0cnVlKTtcbiAgICAgICAgICAgIHJldHVybiBmbi5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICAgICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgICAgICBlcnJvckNhdGNoZXIgJiYgZXJyb3JDYXRjaGVyKGUpO1xuICAgICAgICB9IGZpbmFsbHkge1xuICAgICAgICAgICAgc3dpdGNoVG9ab25lKG91dGVyU2NvcGUsIGZhbHNlKTtcbiAgICAgICAgICAgIGlmICh3YXNSb290RXhlYykgZW5kTWljcm9UaWNrU2NvcGUoKTtcbiAgICAgICAgfVxuICAgIH07XG59XG5cblxuLy9cbi8vIHZhcmlhYmxlcyB1c2VkIGZvciBuYXRpdmUgYXdhaXQgc3VwcG9ydFxuLy9cbmNvbnN0IHRhc2sgPSB7IGF3YWl0czogMCwgZWNob2VzOiAwLCBpZDogMH07IC8vIFRoZSBvbmdvaW5nIG1hY3JvLXRhc2sgd2hlbiB1c2luZyB6b25lLWVjaG9pbmcuXG52YXIgdGFza0NvdW50ZXIgPSAwOyAvLyBJRCBjb3VudGVyIGZvciBtYWNybyB0YXNrcy5cbnZhciB6b25lU3RhY2sgPSBbXTsgLy8gU3RhY2sgb2YgbGVmdCB6b25lcyB0byByZXN0b3JlIGFzeW5jaHJvbmljYWxseS5cbnZhciB6b25lRWNob2VzID0gMDsgLy8gV2hlbiA+IDAsIHpvbmVMZWF2ZUVjaG8gaXMgcXVldWVkLiBXaGVuIDAgYW5kIHRhc2suZWNob2VzIGlzIGFsc28gMCwgbm90aGluZyBpcyBxdWV1ZWQuXG52YXIgdG90YWxFY2hvZXMgPSAwOyAvLyBJRCBjb3VudGVyIGZvciBtaWNyby10YXNrcy4gVXNlZCB0byBkZXRlY3QgcG9zc2libGUgbmF0aXZlIGF3YWl0IGluIG91ciBQcm9taXNlLnByb3RvdHlwZS50aGVuLlxuXG5cbnZhciB6b25lX2lkX2NvdW50ZXIgPSAwO1xuZXhwb3J0IGZ1bmN0aW9uIG5ld1Njb3BlIChmbiwgcHJvcHMsIGExLCBhMikge1xuICAgIHZhciBwYXJlbnQgPSBQU0QsXG4gICAgICAgIHBzZCA9IE9iamVjdC5jcmVhdGUocGFyZW50KTtcbiAgICBwc2QucGFyZW50ID0gcGFyZW50O1xuICAgIHBzZC5yZWYgPSAwO1xuICAgIHBzZC5nbG9iYWwgPSBmYWxzZTtcbiAgICBwc2QuaWQgPSArK3pvbmVfaWRfY291bnRlcjtcbiAgICAvLyBQcmVwYXJlIGZvciBwcm9taXNlIHBhdGNoaW5nIChkb25lIGluIHVzZVBTRCk6XG4gICAgdmFyIGdsb2JhbEVudiA9IGdsb2JhbFBTRC5lbnY7XG4gICAgcHNkLmVudiA9IHBhdGNoR2xvYmFsUHJvbWlzZSA/IHtcbiAgICAgICAgUHJvbWlzZTogRGV4aWVQcm9taXNlLCAvLyBDaGFuZ2luZyB3aW5kb3cuUHJvbWlzZSBjb3VsZCBiZSBvbWl0dGVkIGZvciBDaHJvbWUgYW5kIEVkZ2UsIHdoZXJlIElEQitQcm9taXNlIHBsYXlzIHdlbGwhXG4gICAgICAgIFByb21pc2VQcm9wOiB7dmFsdWU6IERleGllUHJvbWlzZSwgY29uZmlndXJhYmxlOiB0cnVlLCB3cml0YWJsZTogdHJ1ZX0sXG4gICAgICAgIGFsbDogRGV4aWVQcm9taXNlLmFsbCxcbiAgICAgICAgcmFjZTogRGV4aWVQcm9taXNlLnJhY2UsXG4gICAgICAgIGFsbFNldHRsZWQ6IERleGllUHJvbWlzZS5hbGxTZXR0bGVkLFxuICAgICAgICBhbnk6IERleGllUHJvbWlzZS5hbnksXG4gICAgICAgIHJlc29sdmU6IERleGllUHJvbWlzZS5yZXNvbHZlLFxuICAgICAgICByZWplY3Q6IERleGllUHJvbWlzZS5yZWplY3QsXG4gICAgfSA6IHt9O1xuICAgIGlmIChwcm9wcykgZXh0ZW5kKHBzZCwgcHJvcHMpO1xuICAgIFxuICAgIC8vIHVuaGFuZGxlZHMgYW5kIG9udW5oYW5kbGVkIHNob3VsZCBub3QgYmUgc3BlY2lmaWNhbGx5IHNldCBoZXJlLlxuICAgIC8vIExlYXZlIHRoZW0gb24gcGFyZW50IHByb3RvdHlwZS5cbiAgICAvLyB1bmhhbmRsZWRzLnB1c2goZXJyKSB3aWxsIHB1c2ggdG8gcGFyZW50J3MgcHJvdG90eXBlXG4gICAgLy8gb251bmhhbmRsZWQoKSB3aWxsIGNhbGwgcGFyZW50cyBvbnVuaGFuZGxlZCAod2l0aCB0aGlzIHNjb3BlJ3MgdGhpcy1wb2ludGVyIHRob3VnaCEpXG4gICAgKytwYXJlbnQucmVmO1xuICAgIHBzZC5maW5hbGl6ZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgLS10aGlzLnBhcmVudC5yZWYgfHwgdGhpcy5wYXJlbnQuZmluYWxpemUoKTtcbiAgICB9XG4gICAgdmFyIHJ2ID0gdXNlUFNEIChwc2QsIGZuLCBhMSwgYTIpO1xuICAgIGlmIChwc2QucmVmID09PSAwKSBwc2QuZmluYWxpemUoKTtcbiAgICByZXR1cm4gcnY7XG59XG5cbi8vIEZ1bmN0aW9uIHRvIGNhbGwgaWYgc2NvcGVGdW5jIHJldHVybnMgTmF0aXZlUHJvbWlzZVxuLy8gQWxzbyBmb3IgZWFjaCBOYXRpdmVQcm9taXNlIGluIHRoZSBhcmd1bWVudHMgdG8gUHJvbWlzZS5hbGwoKVxuZXhwb3J0IGZ1bmN0aW9uIGluY3JlbWVudEV4cGVjdGVkQXdhaXRzKCkge1xuICAgIGlmICghdGFzay5pZCkgdGFzay5pZCA9ICsrdGFza0NvdW50ZXI7XG4gICAgKyt0YXNrLmF3YWl0cztcbiAgICB0YXNrLmVjaG9lcyArPSBaT05FX0VDSE9fTElNSVQ7XG4gICAgcmV0dXJuIHRhc2suaWQ7XG59XG5cbi8vIEZ1bmN0aW9uIHRvIGNhbGwgd2hlbiAndGhlbicgY2FsbHMgYmFjayBvbiBhIG5hdGl2ZSBwcm9taXNlIHdoZXJlIG9uQXdhaXRFeHBlY3RlZCgpIGhhZCBiZWVuIGNhbGxlZC5cbi8vIEFsc28gY2FsbCB0aGlzIHdoZW4gYSBuYXRpdmUgYXdhaXQgY2FsbHMgdGhlbiBtZXRob2Qgb24gYSBwcm9taXNlLiBJbiB0aGF0IGNhc2UsIGRvbid0IHN1cHBseVxuLy8gc291cmNlVGFza0lkIGJlY2F1c2Ugd2UgYWxyZWFkeSBrbm93IGl0IHJlZmVycyB0byBjdXJyZW50IHRhc2suXG5leHBvcnQgZnVuY3Rpb24gZGVjcmVtZW50RXhwZWN0ZWRBd2FpdHMoKSB7XG4gICAgaWYgKCF0YXNrLmF3YWl0cykgcmV0dXJuIGZhbHNlO1xuICAgIGlmICgtLXRhc2suYXdhaXRzID09PSAwKSB0YXNrLmlkID0gMDtcbiAgICB0YXNrLmVjaG9lcyA9IHRhc2suYXdhaXRzICogWk9ORV9FQ0hPX0xJTUlUOyAvLyBXaWxsIHJlc2V0IGVjaG9lcyB0byAwIGlmIGF3YWl0cyBpcyAwLlxuICAgIHJldHVybiB0cnVlO1xufVxuXG5pZiAoKCcnK25hdGl2ZVByb21pc2VUaGVuKS5pbmRleE9mKCdbbmF0aXZlIGNvZGVdJykgPT09IC0xKSB7XG4gICAgLy8gSWYgdGhlIG5hdGl2ZSBwcm9taXNlJyBwcm90b3R5cGUgaXMgcGF0Y2hlZCwgd2UgY2Fubm90IHJlbHkgb24gem9uZSBlY2hvaW5nLlxuICAgIC8vIERpc2FibGUgdGhhdCBoZXJlOlxuICAgIGluY3JlbWVudEV4cGVjdGVkQXdhaXRzID0gZGVjcmVtZW50RXhwZWN0ZWRBd2FpdHMgPSBub3A7XG59XG5cbi8vIENhbGwgZnJvbSBQcm9taXNlLmFsbCgpIGFuZCBQcm9taXNlLnJhY2UoKVxuZXhwb3J0IGZ1bmN0aW9uIG9uUG9zc2libGVQYXJhbGxlbGxBc3luYyAocG9zc2libGVQcm9taXNlKSB7XG4gICAgaWYgKHRhc2suZWNob2VzICYmIHBvc3NpYmxlUHJvbWlzZSAmJiBwb3NzaWJsZVByb21pc2UuY29uc3RydWN0b3IgPT09IE5hdGl2ZVByb21pc2UpIHtcbiAgICAgICAgaW5jcmVtZW50RXhwZWN0ZWRBd2FpdHMoKTsgXG4gICAgICAgIHJldHVybiBwb3NzaWJsZVByb21pc2UudGhlbih4ID0+IHtcbiAgICAgICAgICAgIGRlY3JlbWVudEV4cGVjdGVkQXdhaXRzKCk7XG4gICAgICAgICAgICByZXR1cm4geDtcbiAgICAgICAgfSwgZSA9PiB7XG4gICAgICAgICAgICBkZWNyZW1lbnRFeHBlY3RlZEF3YWl0cygpO1xuICAgICAgICAgICAgcmV0dXJuIHJlamVjdGlvbihlKTtcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIHJldHVybiBwb3NzaWJsZVByb21pc2U7XG59XG5cbmZ1bmN0aW9uIHpvbmVFbnRlckVjaG8odGFyZ2V0Wm9uZSkge1xuICAgICsrdG90YWxFY2hvZXM7XG4gICAgLy9jb25zb2xlLmxvZyhcIlRvdGFsIGVjaG9lcyBcIiwgdG90YWxFY2hvZXMpO1xuICAgIC8vaWYgKHRhc2suZWNob2VzID09PSAxKSBjb25zb2xlLndhcm4oXCJDYW5jZWxsaW5nIGVjaG9pbmcgb2YgYXN5bmMgY29udGV4dC5cIik7XG4gICAgaWYgKCF0YXNrLmVjaG9lcyB8fCAtLXRhc2suZWNob2VzID09PSAwKSB7XG4gICAgICAgIHRhc2suZWNob2VzID0gdGFzay5hd2FpdHMgPSB0YXNrLmlkID0gMDsgLy8gQ2FuY2VsIGVjaG9pbmcuXG4gICAgfVxuXG4gICAgem9uZVN0YWNrLnB1c2goUFNEKTtcbiAgICBzd2l0Y2hUb1pvbmUodGFyZ2V0Wm9uZSwgdHJ1ZSk7XG59XG5cbmZ1bmN0aW9uIHpvbmVMZWF2ZUVjaG8oKSB7XG4gICAgdmFyIHpvbmUgPSB6b25lU3RhY2tbem9uZVN0YWNrLmxlbmd0aC0xXTtcbiAgICB6b25lU3RhY2sucG9wKCk7XG4gICAgc3dpdGNoVG9ab25lKHpvbmUsIGZhbHNlKTtcbn1cblxuZnVuY3Rpb24gc3dpdGNoVG9ab25lICh0YXJnZXRab25lLCBiRW50ZXJpbmdab25lKSB7XG4gICAgdmFyIGN1cnJlbnRab25lID0gUFNEO1xuICAgIGlmIChiRW50ZXJpbmdab25lID8gdGFzay5lY2hvZXMgJiYgKCF6b25lRWNob2VzKysgfHwgdGFyZ2V0Wm9uZSAhPT0gUFNEKSA6IHpvbmVFY2hvZXMgJiYgKCEtLXpvbmVFY2hvZXMgfHwgdGFyZ2V0Wm9uZSAhPT0gUFNEKSkge1xuICAgICAgICAvLyBFbnRlciBvciBsZWF2ZSB6b25lIGFzeW5jaHJvbmljYWxseSBhcyB3ZWxsLCBzbyB0aGF0IHRhc2tzIGluaXRpYXRlZCBkdXJpbmcgY3VycmVudCB0aWNrXG4gICAgICAgIC8vIHdpbGwgYmUgc3Vycm91bmRlZCBieSB0aGUgem9uZSB3aGVuIHRoZXkgYXJlIGludm9rZWQuXG4gICAgICAgIHF1ZXVlTWljcm90YXNrKGJFbnRlcmluZ1pvbmUgPyB6b25lRW50ZXJFY2hvLmJpbmQobnVsbCwgdGFyZ2V0Wm9uZSkgOiB6b25lTGVhdmVFY2hvKTtcbiAgICB9XG4gICAgaWYgKHRhcmdldFpvbmUgPT09IFBTRCkgcmV0dXJuO1xuXG4gICAgUFNEID0gdGFyZ2V0Wm9uZTsgLy8gVGhlIGFjdHVhbCB6b25lIHN3aXRjaCBvY2N1cnMgYXQgdGhpcyBsaW5lLlxuXG4gICAgLy8gU25hcHNob3Qgb24gZXZlcnkgbGVhdmUgZnJvbSBnbG9iYWwgem9uZS5cbiAgICBpZiAoY3VycmVudFpvbmUgPT09IGdsb2JhbFBTRCkgZ2xvYmFsUFNELmVudiA9IHNuYXBTaG90KCk7XG5cbiAgICBpZiAocGF0Y2hHbG9iYWxQcm9taXNlKSB7XG4gICAgICAgIC8vIExldCdzIHBhdGNoIHRoZSBnbG9iYWwgYW5kIG5hdGl2ZSBQcm9taXNlcyAobWF5IGJlIHNhbWUgb3IgbWF5IGJlIGRpZmZlcmVudClcbiAgICAgICAgdmFyIEdsb2JhbFByb21pc2UgPSBnbG9iYWxQU0QuZW52LlByb21pc2U7XG4gICAgICAgIC8vIFN3aWNoIGVudmlyb25tZW50cyAobWF5IGJlIFBTRC16b25lIG9yIHRoZSBnbG9iYWwgem9uZS4gQm90aCBhcHBseS4pXG4gICAgICAgIHZhciB0YXJnZXRFbnYgPSB0YXJnZXRab25lLmVudjtcblxuICAgICAgICBpZiAoY3VycmVudFpvbmUuZ2xvYmFsIHx8IHRhcmdldFpvbmUuZ2xvYmFsKSB7XG4gICAgICAgICAgICAvLyBMZWF2aW5nIG9yIGVudGVyaW5nIGdsb2JhbCB6b25lLiBJdCdzIHRpbWUgdG8gcGF0Y2ggLyByZXN0b3JlIGdsb2JhbCBQcm9taXNlLlxuXG4gICAgICAgICAgICAvLyBTZXQgdGhpcyBQcm9taXNlIHRvIHdpbmRvdy5Qcm9taXNlIHNvIHRoYXQgdHJhbnNpbGVkIGFzeW5jIGZ1bmN0aW9ucyB3aWxsIHdvcmsgb24gRmlyZWZveCwgU2FmYXJpIGFuZCBJRSwgYXMgd2VsbCBhcyB3aXRoIFpvbmVqcyBhbmQgYW5ndWxhci5cbiAgICAgICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShfZ2xvYmFsLCAnUHJvbWlzZScsIHRhcmdldEVudi5Qcm9taXNlUHJvcCk7XG5cbiAgICAgICAgICAgIC8vIFN1cHBvcnQgUHJvbWlzZS5hbGwoKSBldGMgdG8gd29yayBpbmRleGVkREItc2FmZSBhbHNvIHdoZW4gcGVvcGxlIGFyZSBpbmNsdWRpbmcgZXM2LXByb21pc2UgYXMgYSBtb2R1bGUgKHRoZXkgbWlnaHRcbiAgICAgICAgICAgIC8vIG5vdCBiZSBhY2Nlc3NpbmcgZ2xvYmFsLlByb21pc2UgYnV0IGEgbG9jYWwgcmVmZXJlbmNlIHRvIGl0KVxuICAgICAgICAgICAgR2xvYmFsUHJvbWlzZS5hbGwgPSB0YXJnZXRFbnYuYWxsO1xuICAgICAgICAgICAgR2xvYmFsUHJvbWlzZS5yYWNlID0gdGFyZ2V0RW52LnJhY2U7XG4gICAgICAgICAgICBHbG9iYWxQcm9taXNlLnJlc29sdmUgPSB0YXJnZXRFbnYucmVzb2x2ZTtcbiAgICAgICAgICAgIEdsb2JhbFByb21pc2UucmVqZWN0ID0gdGFyZ2V0RW52LnJlamVjdDtcbiAgICAgICAgICAgIGlmICh0YXJnZXRFbnYuYWxsU2V0dGxlZCkgR2xvYmFsUHJvbWlzZS5hbGxTZXR0bGVkID0gdGFyZ2V0RW52LmFsbFNldHRsZWQ7XG4gICAgICAgICAgICBpZiAodGFyZ2V0RW52LmFueSkgR2xvYmFsUHJvbWlzZS5hbnkgPSB0YXJnZXRFbnYuYW55O1xuICAgICAgICB9XG4gICAgfVxufVxuXG5mdW5jdGlvbiBzbmFwU2hvdCAoKSB7XG4gICAgdmFyIEdsb2JhbFByb21pc2UgPSBfZ2xvYmFsLlByb21pc2U7XG4gICAgcmV0dXJuIHBhdGNoR2xvYmFsUHJvbWlzZSA/IHtcbiAgICAgICAgUHJvbWlzZTogR2xvYmFsUHJvbWlzZSxcbiAgICAgICAgUHJvbWlzZVByb3A6IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IoX2dsb2JhbCwgXCJQcm9taXNlXCIpLFxuICAgICAgICBhbGw6IEdsb2JhbFByb21pc2UuYWxsLFxuICAgICAgICByYWNlOiBHbG9iYWxQcm9taXNlLnJhY2UsXG4gICAgICAgIGFsbFNldHRsZWQ6IEdsb2JhbFByb21pc2UuYWxsU2V0dGxlZCxcbiAgICAgICAgYW55OiBHbG9iYWxQcm9taXNlLmFueSxcbiAgICAgICAgcmVzb2x2ZTogR2xvYmFsUHJvbWlzZS5yZXNvbHZlLFxuICAgICAgICByZWplY3Q6IEdsb2JhbFByb21pc2UucmVqZWN0LFxuICAgIH0gOiB7fTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHVzZVBTRCAocHNkLCBmbiwgYTEsIGEyLCBhMykge1xuICAgIHZhciBvdXRlclNjb3BlID0gUFNEO1xuICAgIHRyeSB7XG4gICAgICAgIHN3aXRjaFRvWm9uZShwc2QsIHRydWUpO1xuICAgICAgICByZXR1cm4gZm4oYTEsIGEyLCBhMyk7XG4gICAgfSBmaW5hbGx5IHtcbiAgICAgICAgc3dpdGNoVG9ab25lKG91dGVyU2NvcGUsIGZhbHNlKTtcbiAgICB9XG59XG5cbmZ1bmN0aW9uIG5hdGl2ZUF3YWl0Q29tcGF0aWJsZVdyYXAoZm4sIHpvbmUsIHBvc3NpYmxlQXdhaXQsIGNsZWFudXApIHtcbiAgICByZXR1cm4gdHlwZW9mIGZuICE9PSAnZnVuY3Rpb24nID8gZm4gOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBvdXRlclpvbmUgPSBQU0Q7XG4gICAgICAgIGlmIChwb3NzaWJsZUF3YWl0KSBpbmNyZW1lbnRFeHBlY3RlZEF3YWl0cygpO1xuICAgICAgICBzd2l0Y2hUb1pvbmUoem9uZSwgdHJ1ZSk7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICByZXR1cm4gZm4uYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgICAgICAgfSBmaW5hbGx5IHtcbiAgICAgICAgICAgIHN3aXRjaFRvWm9uZShvdXRlclpvbmUsIGZhbHNlKTtcbiAgICAgICAgICAgIGlmIChjbGVhbnVwKSBxdWV1ZU1pY3JvdGFzayhkZWNyZW1lbnRFeHBlY3RlZEF3YWl0cyk7XG4gICAgICAgIH1cbiAgICB9O1xufVxuXG4vKiogRXhlY3V0ZSBjYWxsYmFjayBpbiBnbG9iYWwgY29udGV4dCAqL1xuZXhwb3J0IGZ1bmN0aW9uIGV4ZWNJbkdsb2JhbENvbnRleHQoY2IpIHtcbiAgICBpZiAoUHJvbWlzZSA9PT0gTmF0aXZlUHJvbWlzZSAmJiB0YXNrLmVjaG9lcyA9PT0gMCkge1xuICAgICAgICBpZiAoem9uZUVjaG9lcyA9PT0gMCkge1xuICAgICAgICAgICAgY2IoKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGVucXVldWVOYXRpdmVNaWNyb1Rhc2soY2IpO1xuICAgICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgICAgc2V0VGltZW91dChjYiwgMCk7XG4gICAgfVxufVxuXG5leHBvcnQgdmFyIHJlamVjdGlvbiA9IERleGllUHJvbWlzZS5yZWplY3Q7XG5cbmV4cG9ydCB7RGV4aWVQcm9taXNlfTtcbiIsICJpbXBvcnQgeyBQU0QsIHJlamVjdGlvbiwgbmV3U2NvcGUgfSBmcm9tIFwiLi4vaGVscGVycy9wcm9taXNlXCI7XG5pbXBvcnQgeyBEZXhpZU9wdGlvbnMgfSBmcm9tIFwiLi4vcHVibGljL3R5cGVzL2RleGllLWNvbnN0cnVjdG9yXCI7XG5pbXBvcnQgeyBlcnJuYW1lcywgZXhjZXB0aW9ucyB9IGZyb20gXCIuLi9lcnJvcnNcIjtcbmltcG9ydCB7IG5vcCB9IGZyb20gXCIuL2NoYWluaW5nLWZ1bmN0aW9uc1wiO1xuaW1wb3J0IHsgVHJhbnNhY3Rpb24gfSBmcm9tIFwiLi4vY2xhc3Nlcy90cmFuc2FjdGlvblwiO1xuaW1wb3J0IHsgRGV4aWUgfSBmcm9tICcuLi9jbGFzc2VzL2RleGllJztcblxuLyogR2VuZXJhdGUgYSB0ZW1wb3JhcnkgdHJhbnNhY3Rpb24gd2hlbiBkYiBvcGVyYXRpb25zIGFyZSBkb25lIG91dHNpZGUgYSB0cmFuc2FjdGlvbiBzY29wZS5cbiovXG5leHBvcnQgZnVuY3Rpb24gdGVtcFRyYW5zYWN0aW9uIChcbiAgZGI6IERleGllLFxuICBtb2RlOiBJREJUcmFuc2FjdGlvbk1vZGUsXG4gIHN0b3JlTmFtZXM6IHN0cmluZ1tdLFxuICBmbjogKHJlc29sdmUsIHJlamVjdCwgdHJhbnM6IFRyYW5zYWN0aW9uKSA9PiBhbnkpXG4gIC8vIExhc3QgYXJndW1lbnQgaXMgXCJ3cml0ZUxvY2tlZFwiLiBCdXQgdGhpcyBkb2VzbnQgYXBwbHkgdG8gb25lc2hvdCBkaXJlY3QgZGIgb3BlcmF0aW9ucywgc28gd2UgaWdub3JlIGl0Llxue1xuICBpZiAoIWRiLmlkYmRiIHx8ICghZGIuX3N0YXRlLm9wZW5Db21wbGV0ZSAmJiAoIVBTRC5sZXRUaHJvdWdoICYmICFkYi5fdmlwKSkpIHtcbiAgICBpZiAoZGIuX3N0YXRlLm9wZW5Db21wbGV0ZSkge1xuICAgICAgLy8gZGIuaWRiZGIgaXMgZmFsc3kgYnV0IG9wZW5Db21wbGV0ZSBpcyB0cnVlLiBNdXN0IGhhdmUgYmVlbiBhbiBleGNlcHRpb24gZHVyaW4gb3Blbi5cbiAgICAgIC8vIERvbid0IHdhaXQgZm9yIG9wZW5Db21wbGV0ZSBhcyBpdCB3b3VsZCBsZWFkIHRvIGluZmluaXRlIGxvb3AuXG4gICAgICByZXR1cm4gcmVqZWN0aW9uKG5ldyBleGNlcHRpb25zLkRhdGFiYXNlQ2xvc2VkKGRiLl9zdGF0ZS5kYk9wZW5FcnJvcikpO1xuICAgIH1cbiAgICBpZiAoIWRiLl9zdGF0ZS5pc0JlaW5nT3BlbmVkKSB7XG4gICAgICBpZiAoIWRiLl9zdGF0ZS5hdXRvT3BlbilcbiAgICAgICAgcmV0dXJuIHJlamVjdGlvbihuZXcgZXhjZXB0aW9ucy5EYXRhYmFzZUNsb3NlZCgpKTtcbiAgICAgIGRiLm9wZW4oKS5jYXRjaChub3ApOyAvLyBPcGVuIGluIGJhY2tncm91bmQuIElmIGlmIGZhaWxzLCBpdCB3aWxsIGJlIGNhdGNoZWQgYnkgdGhlIGZpbmFsIHByb21pc2UgYW55d2F5LlxuICAgIH1cbiAgICByZXR1cm4gZGIuX3N0YXRlLmRiUmVhZHlQcm9taXNlLnRoZW4oKCkgPT4gdGVtcFRyYW5zYWN0aW9uKGRiLCBtb2RlLCBzdG9yZU5hbWVzLCBmbikpO1xuICB9IGVsc2Uge1xuICAgIHZhciB0cmFucyA9IGRiLl9jcmVhdGVUcmFuc2FjdGlvbihtb2RlLCBzdG9yZU5hbWVzLCBkYi5fZGJTY2hlbWEpO1xuICAgIHRyeSB7XG4gICAgICB0cmFucy5jcmVhdGUoKTtcbiAgICAgIGRiLl9zdGF0ZS5QUjEzOThfbWF4TG9vcCA9IDM7XG4gICAgfSBjYXRjaCAoZXgpIHtcbiAgICAgIGlmIChleC5uYW1lID09PSBlcnJuYW1lcy5JbnZhbGlkU3RhdGUgJiYgZGIuaXNPcGVuKCkgJiYgLS1kYi5fc3RhdGUuUFIxMzk4X21heExvb3AgPiAwKSB7XG4gICAgICAgIGNvbnNvbGUud2FybignRGV4aWU6IE5lZWQgdG8gcmVvcGVuIGRiJyk7XG4gICAgICAgIGRiLmNsb3NlKHtkaXNhYmxlQXV0b09wZW46IGZhbHNlfSk7XG4gICAgICAgIHJldHVybiBkYi5vcGVuKCkudGhlbigoKT0+dGVtcFRyYW5zYWN0aW9uKGRiLCBtb2RlLCBzdG9yZU5hbWVzLCBmbikpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHJlamVjdGlvbihleCk7XG4gICAgfVxuICAgIHJldHVybiB0cmFucy5fcHJvbWlzZShtb2RlLCAocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgICByZXR1cm4gbmV3U2NvcGUoKCkgPT4geyAvLyBPUFRJTUlaQVRJT04gUE9TU0lCTEU/IG5ld1Njb3BlKCkgbm90IG5lZWRlZCBiZWNhdXNlIGl0J3MgYWxyZWFkeSBkb25lIGluIF9wcm9taXNlLlxuICAgICAgICBQU0QudHJhbnMgPSB0cmFucztcbiAgICAgICAgcmV0dXJuIGZuKHJlc29sdmUsIHJlamVjdCwgdHJhbnMpO1xuICAgICAgfSk7XG4gICAgfSkudGhlbihyZXN1bHQgPT4ge1xuICAgICAgLy8gSW5zdGVhZCBvZiByZXNvbHZpbmcgdmFsdWUgZGlyZWN0bHksIHdhaXQgd2l0aCByZXNvbHZpbmcgaXQgdW50aWwgdHJhbnNhY3Rpb24gaGFzIGNvbXBsZXRlZC5cbiAgICAgIC8vIE90aGVyd2lzZSB0aGUgZGF0YSB3b3VsZCBub3QgYmUgaW4gdGhlIERCIGlmIHJlcXVlc3RpbmcgaXQgaW4gdGhlIHRoZW4oKSBvcGVyYXRpb24uXG4gICAgICAvLyBTcGVjaWZpY2FsbHksIHRvIGVuc3VyZSB0aGF0IHRoZSBmb2xsb3dpbmcgZXhwcmVzc2lvbiB3aWxsIHdvcms6XG4gICAgICAvL1xuICAgICAgLy8gICBkYi5mcmllbmRzLnB1dCh7bmFtZTogXCJBcm5lXCJ9KS50aGVuKGZ1bmN0aW9uICgpIHtcbiAgICAgIC8vICAgICAgIGRiLmZyaWVuZHMud2hlcmUoXCJuYW1lXCIpLmVxdWFscyhcIkFybmVcIikuY291bnQoZnVuY3Rpb24oY291bnQpIHtcbiAgICAgIC8vICAgICAgICAgICBhc3NlcnQgKGNvdW50ID09PSAxKTtcbiAgICAgIC8vICAgICAgIH0pO1xuICAgICAgLy8gICB9KTtcbiAgICAgIC8vXG4gICAgICBpZiAobW9kZSA9PT0gJ3JlYWR3cml0ZScpIHRyeSB7dHJhbnMuaWRidHJhbnMuY29tbWl0KCk7fSBjYXRjaCB7fVxuICAgICAgcmV0dXJuIG1vZGUgPT09ICdyZWFkb25seScgPyByZXN1bHQgOiB0cmFucy5fY29tcGxldGlvbi50aGVuKCgpID0+IHJlc3VsdCk7XG4gICAgfSk7LyouY2F0Y2goZXJyID0+IHsgLy8gRG9uJ3QgZG8gdGhpcyBhcyBvZiBub3cuIElmIHdvdWxkIGFmZmVjdCBidWxrLSBhbmQgbW9kaWZ5IG1ldGhvZHMgaW4gYSB3YXkgdGhhdCBjb3VsZCBiZSBtb3JlIGludHVpdGl2ZS4gQnV0IHdhaXQhIE1heWJlIGNoYW5nZSBpbiBuZXh0IG1ham9yLlxuICAgICAgICAgIHRyYW5zLl9yZWplY3QoZXJyKTtcbiAgICAgICAgICByZXR1cm4gcmVqZWN0aW9uKGVycik7XG4gICAgICB9KTsqL1xuICB9XG59XG4iLCAiaW1wb3J0IHsgRGV4aWUgfSBmcm9tIFwiLi4vY2xhc3Nlcy9kZXhpZVwiO1xuXG5leHBvcnQgY29uc3QgREVYSUVfVkVSU0lPTiA9ICd7dmVyc2lvbn0nOyAvLyBSZXBsYWNlZCBieSBidWlsZC1zY3JpcHQuXG5leHBvcnQgY29uc3QgbWF4U3RyaW5nID0gU3RyaW5nLmZyb21DaGFyQ29kZSg2NTUzNSk7XG5leHBvcnQgY29uc3QgbWluS2V5ID0gLUluZmluaXR5OyAvLyBtaW5LZXkgY2FuIGJlIGNvbnN0YW50LiBtYXhLZXkgbXVzdCBiZSBhIHByb3Agb2YgRGV4aWUgKF9tYXhLZXkpXG5leHBvcnQgY29uc3QgSU5WQUxJRF9LRVlfQVJHVU1FTlQgPVxuICBcIkludmFsaWQga2V5IHByb3ZpZGVkLiBLZXlzIG11c3QgYmUgb2YgdHlwZSBzdHJpbmcsIG51bWJlciwgRGF0ZSBvciBBcnJheTxzdHJpbmcgfCBudW1iZXIgfCBEYXRlPi5cIjtcbmV4cG9ydCBjb25zdCBTVFJJTkdfRVhQRUNURUQgPSBcIlN0cmluZyBleHBlY3RlZC5cIjtcbmV4cG9ydCBjb25zdCBjb25uZWN0aW9uczogRGV4aWVbXSA9IFtdO1xuZXhwb3J0IGNvbnN0IGRleGllU3RhY2tGcmFtZUZpbHRlciA9IGZyYW1lID0+ICEvKGRleGllXFwuanN8ZGV4aWVcXC5taW5cXC5qcykvLnRlc3QoZnJhbWUpO1xuZXhwb3J0IGNvbnN0IERCTkFNRVNfREIgPSAnX19kYm5hbWVzJztcbmV4cG9ydCBjb25zdCBSRUFET05MWSA9ICdyZWFkb25seSc7XG5leHBvcnQgY29uc3QgUkVBRFdSSVRFID0gJ3JlYWR3cml0ZSc7XG4iLCAiZXhwb3J0IGZ1bmN0aW9uIGNvbWJpbmUoZmlsdGVyMSwgZmlsdGVyMikge1xuICByZXR1cm4gZmlsdGVyMSA/XG4gICAgICBmaWx0ZXIyID9cbiAgICAgICAgICBmdW5jdGlvbiAoKSB7IHJldHVybiBmaWx0ZXIxLmFwcGx5KHRoaXMsIGFyZ3VtZW50cykgJiYgZmlsdGVyMi5hcHBseSh0aGlzLCBhcmd1bWVudHMpOyB9IDpcbiAgICAgICAgICBmaWx0ZXIxIDpcbiAgICAgIGZpbHRlcjI7XG59XG4iLCAiaW1wb3J0IHsgREJDb3JlS2V5UmFuZ2UsIERCQ29yZVJhbmdlVHlwZSB9IGZyb20gJy4uL3B1YmxpYy90eXBlcy9kYmNvcmUnO1xuXG5leHBvcnQgY29uc3QgQW55UmFuZ2U6IERCQ29yZUtleVJhbmdlID0ge1xuICB0eXBlOiBEQkNvcmVSYW5nZVR5cGUuQW55LFxuICBsb3dlcjogLUluZmluaXR5LFxuICBsb3dlck9wZW46IGZhbHNlLFxuICB1cHBlcjogW1tdXSxcbiAgdXBwZXJPcGVuOiBmYWxzZVxufVxuXG5leHBvcnQgY29uc3QgTmV2ZXJSYW5nZTogREJDb3JlS2V5UmFuZ2UgPSB7XG4gIHR5cGU6IERCQ29yZVJhbmdlVHlwZS5OZXZlcixcbiAgbG93ZXI6IC1JbmZpbml0eSxcbiAgbG93ZXJPcGVuOiB0cnVlLFxuICB1cHBlcjogLUluZmluaXR5LFxuICB1cHBlck9wZW46IHRydWVcbn1cbiIsICJpbXBvcnQgeyBkZWVwQ2xvbmUsIGRlbEJ5S2V5UGF0aCwgZ2V0QnlLZXlQYXRoIH0gZnJvbSAnLi91dGlscyc7XG5cbi8vIFRoaXMgd29ya2Fyb3VuZCBpcyBuZWVkZWQgc2luY2Ugb2JqIGNvdWxkIGJlIGEgY3VzdG9tLWNsYXNzIGluc3RhbmNlIHdpdGggYW5cbi8vIHVuaW5pdGlhbGl6ZWQga2V5UGF0aC4gU2VlIHRoZSBmb2xsb3dpbmcgY29tbWVudCBmb3IgbW9yZSBjb250ZXh0OlxuLy8gaHR0cHM6Ly9naXRodWIuY29tL2RmYWhsYW5kZXIvRGV4aWUuanMvaXNzdWVzLzEyODAjaXNzdWVjb21tZW50LTgyMzU1Nzg4MVxuZXhwb3J0IGZ1bmN0aW9uIHdvcmthcm91bmRGb3JVbmRlZmluZWRQcmltS2V5KGtleVBhdGg6IHN0cmluZyB8IEFycmF5TGlrZTxzdHJpbmc+KSB7XG4gIC8vIFdvcmthcm91bmQgb25seSBuZWVkZWQgZm9yIHBsYWluIG5vbi1kb3R0ZWQga2V5UGF0aHNcbiAgcmV0dXJuIHR5cGVvZiBrZXlQYXRoID09PSBcInN0cmluZ1wiICYmICEvXFwuLy50ZXN0KGtleVBhdGgpIFxuICA/IChvYmo6IG9iamVjdCkgPT4ge1xuICAgIGlmIChvYmpba2V5UGF0aF0gPT09IHVuZGVmaW5lZCAmJiAoa2V5UGF0aCBpbiBvYmopKSB7XG4gICAgICAvLyBwcm9wZXJ0eSBleGlzdHMgYnV0IGlzIHVuZGVmaW5lZC4gVGhpcyB3aWxsIG5vdCBiZSBsaWtlZCBieSBJbmRleGVkZGIuXG4gICAgICAvLyBOZWVkIHRvIHJlbW92ZSB0aGUgcHJvcGVydHkgYmVmb3JlIGFkZGluZyBpdCBidXQgd2UgbmVlZCB0byBjbG9uZSBpdCBiZWZvcmVcbiAgICAgIC8vIGRvaW5nIHRoYXQgdG8gbm90IGJlIGludHJ1c2l2ZS5cbiAgICAgIG9iaiA9IGRlZXBDbG9uZShvYmopO1xuICAgICAgZGVsZXRlIG9ialtrZXlQYXRoXTtcbiAgICB9XG4gICAgcmV0dXJuIG9iajtcbiAgfVxuICA6IChvYmo6IG9iamVjdCkgPT4gb2JqO1xufSIsICJpbXBvcnQgeyBleGNlcHRpb25zIH0gZnJvbSBcIi4uLy4uL2Vycm9yc1wiO1xuXG5leHBvcnQgZnVuY3Rpb24gRW50aXR5KCl7XG4gIHRocm93IGV4Y2VwdGlvbnMuVHlwZSgpO1xufVxuIiwgIi8vIEltcGxlbWVudGF0aW9uIG9mIGh0dHBzOi8vd3d3LnczLm9yZy9UUi9JbmRleGVkREItMy8jY29tcGFyZS10d28ta2V5c1xuXG5pbXBvcnQgeyB0b1N0cmluZ1RhZyB9IGZyb20gJy4vdXRpbHMnO1xuXG4vLyAuLi4gd2l0aCB0aGUgYWRqdXN0bWVudCB0byByZXR1cm4gTmFOIGluc3RlYWQgb2YgdGhyb3dpbmcuXG5leHBvcnQgZnVuY3Rpb24gY21wKGE6IGFueSwgYjogYW55KTogbnVtYmVyIHtcbiAgdHJ5IHtcbiAgICBjb25zdCB0YSA9IHR5cGUoYSk7XG4gICAgY29uc3QgdGIgPSB0eXBlKGIpO1xuICAgIGlmICh0YSAhPT0gdGIpIHtcbiAgICAgIGlmICh0YSA9PT0gJ0FycmF5JykgcmV0dXJuIDE7XG4gICAgICBpZiAodGIgPT09ICdBcnJheScpIHJldHVybiAtMTtcbiAgICAgIGlmICh0YSA9PT0gJ2JpbmFyeScpIHJldHVybiAxO1xuICAgICAgaWYgKHRiID09PSAnYmluYXJ5JykgcmV0dXJuIC0xO1xuICAgICAgaWYgKHRhID09PSAnc3RyaW5nJykgcmV0dXJuIDE7XG4gICAgICBpZiAodGIgPT09ICdzdHJpbmcnKSByZXR1cm4gLTE7XG4gICAgICBpZiAodGEgPT09ICdEYXRlJykgcmV0dXJuIDE7XG4gICAgICBpZiAodGIgIT09ICdEYXRlJykgcmV0dXJuIE5hTjtcbiAgICAgIHJldHVybiAtMTtcbiAgICB9XG4gICAgc3dpdGNoICh0YSkge1xuICAgICAgY2FzZSAnbnVtYmVyJzpcbiAgICAgIGNhc2UgJ0RhdGUnOlxuICAgICAgY2FzZSAnc3RyaW5nJzpcbiAgICAgICAgcmV0dXJuIGEgPiBiID8gMSA6IGEgPCBiID8gLTEgOiAwO1xuICAgICAgY2FzZSAnYmluYXJ5Jzoge1xuICAgICAgICByZXR1cm4gY29tcGFyZVVpbnQ4QXJyYXlzKGdldFVpbnQ4QXJyYXkoYSksIGdldFVpbnQ4QXJyYXkoYikpO1xuICAgICAgfVxuICAgICAgY2FzZSAnQXJyYXknOlxuICAgICAgICByZXR1cm4gY29tcGFyZUFycmF5cyhhLCBiKTtcbiAgICB9XG4gIH0gY2F0Y2gge31cbiAgcmV0dXJuIE5hTjsgLy8gUmV0dXJuIHZhbHVlIGlmIGFueSBnaXZlbiBhcmdzIGFyZSB2YWxpZCBrZXlzLlxufVxuXG5leHBvcnQgZnVuY3Rpb24gY29tcGFyZUFycmF5cyhhOiBhbnlbXSwgYjogYW55W10pOiBudW1iZXIge1xuICBjb25zdCBhbCA9IGEubGVuZ3RoO1xuICBjb25zdCBibCA9IGIubGVuZ3RoO1xuICBjb25zdCBsID0gYWwgPCBibCA/IGFsIDogYmw7XG4gIGZvciAobGV0IGkgPSAwOyBpIDwgbDsgKytpKSB7XG4gICAgY29uc3QgcmVzID0gY21wKGFbaV0sIGJbaV0pO1xuICAgIGlmIChyZXMgIT09IDApIHJldHVybiByZXM7XG4gIH1cbiAgcmV0dXJuIGFsID09PSBibCA/IDAgOiBhbCA8IGJsID8gLTEgOiAxO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gY29tcGFyZVVpbnQ4QXJyYXlzKFxuICBhOiBVaW50OEFycmF5LFxuICBiOiBVaW50OEFycmF5XG4pIHtcbiAgY29uc3QgYWwgPSBhLmxlbmd0aDtcbiAgY29uc3QgYmwgPSBiLmxlbmd0aDtcbiAgY29uc3QgbCA9IGFsIDwgYmwgPyBhbCA6IGJsO1xuICBmb3IgKGxldCBpID0gMDsgaSA8IGw7ICsraSkge1xuICAgIGlmIChhW2ldICE9PSBiW2ldKSByZXR1cm4gYVtpXSA8IGJbaV0gPyAtMSA6IDE7XG4gIH1cbiAgcmV0dXJuIGFsID09PSBibCA/IDAgOiBhbCA8IGJsID8gLTEgOiAxO1xufVxuXG4vLyBJbXBsZW1lbnRhdGlvbiBvZiBodHRwczovL3d3dy53My5vcmcvVFIvSW5kZXhlZERCLTMvI2tleS10eXBlXG5mdW5jdGlvbiB0eXBlKHg6IGFueSkge1xuICBjb25zdCB0ID0gdHlwZW9mIHg7XG4gIGlmICh0ICE9PSAnb2JqZWN0JykgcmV0dXJuIHQ7XG4gIGlmIChBcnJheUJ1ZmZlci5pc1ZpZXcoeCkpIHJldHVybiAnYmluYXJ5JztcbiAgY29uc3QgdHNUYWcgPSB0b1N0cmluZ1RhZyh4KTsgLy8gQ2Fubm90IHVzZSBpbnN0YW5jZW9mIGluIFNhZmFyaVxuICByZXR1cm4gdHNUYWcgPT09ICdBcnJheUJ1ZmZlcicgPyAnYmluYXJ5JyA6ICh0c1RhZyBhcyAnQXJyYXknIHwgJ0RhdGUnKTtcbn1cblxudHlwZSBCaW5hcnlUeXBlID1cbiAgfCBBcnJheUJ1ZmZlclxuICB8IERhdGFWaWV3XG4gIHwgVWludDhDbGFtcGVkQXJyYXlcbiAgfCBBcnJheUJ1ZmZlclZpZXdcbiAgfCBVaW50OEFycmF5XG4gIHwgSW50OEFycmF5XG4gIHwgVWludDE2QXJyYXlcbiAgfCBJbnQxNkFycmF5XG4gIHwgVWludDMyQXJyYXlcbiAgfCBJbnQzMkFycmF5XG4gIHwgRmxvYXQzMkFycmF5XG4gIHwgRmxvYXQ2NEFycmF5XG4gIHwgQmlnSW50NjRBcnJheSBcbiAgfCBCaWdVaW50NjRBcnJheTtcblxuZnVuY3Rpb24gZ2V0VWludDhBcnJheShhOiBCaW5hcnlUeXBlKTogVWludDhBcnJheSB7XG4gIGlmIChhIGluc3RhbmNlb2YgVWludDhBcnJheSkgcmV0dXJuIGE7XG4gIGlmIChBcnJheUJ1ZmZlci5pc1ZpZXcoYSkpXG4gICAgLy8gVHlwZWRBcnJheSBvciBEYXRhVmlld1xuICAgIHJldHVybiBuZXcgVWludDhBcnJheShhLmJ1ZmZlciwgYS5ieXRlT2Zmc2V0LCBhLmJ5dGVMZW5ndGgpO1xuICByZXR1cm4gbmV3IFVpbnQ4QXJyYXkoYSk7IC8vIEFycmF5QnVmZmVyXG59XG4iLCAiaW1wb3J0IHsgQnVsa0Vycm9yLCBleGNlcHRpb25zIH0gZnJvbSAnLi4vLi4vZXJyb3JzJztcbmltcG9ydCB7IFRhYmxlIGFzIElUYWJsZSB9IGZyb20gJy4uLy4uL3B1YmxpYy90eXBlcy90YWJsZSc7XG5pbXBvcnQgeyBUYWJsZVNjaGVtYSB9IGZyb20gJy4uLy4uL3B1YmxpYy90eXBlcy90YWJsZS1zY2hlbWEnO1xuaW1wb3J0IHsgVGFibGVIb29rcyB9IGZyb20gJy4uLy4uL3B1YmxpYy90eXBlcy90YWJsZS1ob29rcyc7XG5pbXBvcnQgeyBEZXhpZVByb21pc2UgYXMgUHJvbWlzZSwgUFNELCBuZXdTY29wZSwgcmVqZWN0aW9uLCBiZWdpbk1pY3JvVGlja1Njb3BlLCBlbmRNaWNyb1RpY2tTY29wZSB9IGZyb20gJy4uLy4uL2hlbHBlcnMvcHJvbWlzZSc7XG5pbXBvcnQgeyBUcmFuc2FjdGlvbiB9IGZyb20gJy4uL3RyYW5zYWN0aW9uJztcbmltcG9ydCB7IERleGllIH0gZnJvbSAnLi4vZGV4aWUnO1xuaW1wb3J0IHsgdGVtcFRyYW5zYWN0aW9uIH0gZnJvbSAnLi4vLi4vZnVuY3Rpb25zL3RlbXAtdHJhbnNhY3Rpb24nO1xuaW1wb3J0IHsgQ29sbGVjdGlvbiB9IGZyb20gJy4uL2NvbGxlY3Rpb24nO1xuaW1wb3J0IHsgaXNBcnJheSwga2V5cywgZ2V0QnlLZXlQYXRoLCBzZXRCeUtleVBhdGgsIGV4dGVuZCwgZ2V0UHJvdG8gfSBmcm9tICcuLi8uLi9mdW5jdGlvbnMvdXRpbHMnO1xuaW1wb3J0IHsgbWF4U3RyaW5nIH0gZnJvbSAnLi4vLi4vZ2xvYmFscy9jb25zdGFudHMnO1xuaW1wb3J0IHsgY29tYmluZSB9IGZyb20gJy4uLy4uL2Z1bmN0aW9ucy9jb21iaW5lJztcbmltcG9ydCB7IFByb21pc2VFeHRlbmRlZCB9IGZyb20gXCIuLi8uLi9wdWJsaWMvdHlwZXMvcHJvbWlzZS1leHRlbmRlZFwiO1xuaW1wb3J0IHsgSW5kZXhhYmxlVHlwZSB9IGZyb20gJy4uLy4uL3B1YmxpYy90eXBlcy9pbmRleGFibGUtdHlwZSc7XG5pbXBvcnQgeyBkZWJ1ZyB9IGZyb20gJy4uLy4uL2hlbHBlcnMvZGVidWcnO1xuaW1wb3J0IHsgREJDb3JlVGFibGUgfSBmcm9tICcuLi8uLi9wdWJsaWMvdHlwZXMvZGJjb3JlJztcbmltcG9ydCB7IEFueVJhbmdlIH0gZnJvbSAnLi4vLi4vZGJjb3JlL2tleXJhbmdlJztcbmltcG9ydCB7IHdvcmthcm91bmRGb3JVbmRlZmluZWRQcmltS2V5IH0gZnJvbSAnLi4vLi4vZnVuY3Rpb25zL3dvcmthcm91bmQtdW5kZWZpbmVkLXByaW1rZXknO1xuaW1wb3J0IHsgRW50aXR5IH0gZnJvbSAnLi4vZW50aXR5L0VudGl0eSc7XG5pbXBvcnQgeyBVcGRhdGVTcGVjIH0gZnJvbSAnLi4vLi4vcHVibGljJztcbmltcG9ydCB7IGNtcCB9IGZyb20gJy4uLy4uL2Z1bmN0aW9ucy9jbXAnO1xuXG4vKiogY2xhc3MgVGFibGVcbiAqIFxuICogaHR0cHM6Ly9kZXhpZS5vcmcvZG9jcy9UYWJsZS9UYWJsZVxuICovXG5leHBvcnQgY2xhc3MgVGFibGUgaW1wbGVtZW50cyBJVGFibGU8YW55LCBJbmRleGFibGVUeXBlPiB7XG4gIGRiOiBEZXhpZTtcbiAgX3R4PzogVHJhbnNhY3Rpb247XG4gIG5hbWU6IHN0cmluZztcbiAgc2NoZW1hOiBUYWJsZVNjaGVtYTtcbiAgaG9vazogVGFibGVIb29rcztcbiAgY29yZTogREJDb3JlVGFibGU7XG5cbiAgX3RyYW5zKFxuICAgIG1vZGU6IElEQlRyYW5zYWN0aW9uTW9kZSxcbiAgICBmbjogKGlkYnRyYW5zOiBJREJUcmFuc2FjdGlvbiwgZHhUcmFuczogVHJhbnNhY3Rpb24pID0+IFByb21pc2VMaWtlPGFueT4gfCB2b2lkLFxuICAgIHdyaXRlTG9ja2VkPzogYm9vbGVhbiB8IHN0cmluZykgOiBQcm9taXNlRXh0ZW5kZWQ8YW55PlxuICB7XG4gICAgY29uc3QgdHJhbnM6IFRyYW5zYWN0aW9uID0gdGhpcy5fdHggfHwgUFNELnRyYW5zO1xuICAgIGNvbnN0IHRhYmxlTmFtZSA9IHRoaXMubmFtZTtcbiAgICAvLyBAdHMtaWdub3JlOiBVc2UgQ2hyb21lJ3MgQXN5bmMgU3RhY2sgVGFnZ2luZyBBUEkgdG8gYWxsb3cgdHJhY2luZyBhbmQgc2ltcGxpZnkgZGVidWdnaW5nIGZvciBkZXhpZSB1c2Vycy5cbiAgICBjb25zdCB0YXNrID0gZGVidWcgJiYgdHlwZW9mIGNvbnNvbGUgIT09ICd1bmRlZmluZWQnICYmIGNvbnNvbGUuY3JlYXRlVGFzayAmJiBjb25zb2xlLmNyZWF0ZVRhc2soYERleGllOiAke21vZGUgPT09ICdyZWFkb25seScgPyAncmVhZCcgOiAnd3JpdGUnIH0gJHt0aGlzLm5hbWV9YCk7XG4gICAgXG4gICAgZnVuY3Rpb24gY2hlY2tUYWJsZUluVHJhbnNhY3Rpb24ocmVzb2x2ZSwgcmVqZWN0LCB0cmFuczogVHJhbnNhY3Rpb24pIHtcbiAgICAgIGlmICghdHJhbnMuc2NoZW1hW3RhYmxlTmFtZV0pXG4gICAgICAgIHRocm93IG5ldyBleGNlcHRpb25zLk5vdEZvdW5kKFwiVGFibGUgXCIgKyB0YWJsZU5hbWUgKyBcIiBub3QgcGFydCBvZiB0cmFuc2FjdGlvblwiKTtcbiAgICAgIHJldHVybiBmbih0cmFucy5pZGJ0cmFucywgdHJhbnMpIGFzIFByb21pc2U8YW55PjtcbiAgICB9XG4gICAgLy8gU3Vycm91bmQgYWxsIGluIGEgbWljcm90aWNrIHNjb3BlLlxuICAgIC8vIFJlYXNvbjogQnJvd3NlcnMgKG1vZGVybiBTYWZhcmkgKyBvbGRlciBvdGhlcnMpXG4gICAgLy8gc3RpbGwgYXMgb2YgMjAxOC0xMC0xMCBoYXMgcHJvYmxlbXMga2VlcGluZyBhIHRyYW5zYWN0aW9uXG4gICAgLy8gYWxpdmUgYmV0d2VlbiBtaWNybyB0aWNrcy4gU2FmYXJpIGJlY2F1c2UgaWYgdHJhbnNhY3Rpb25cbiAgICAvLyBpcyBjcmVhdGVkIGJ1dCBub3QgdXNlZCBpbiBzYW1lIG1pY3JvdGljaywgaXQgd2lsbCBnb1xuICAgIC8vIGF3YXkuIFRoYXQgc3BlY2lmaWMgaXNzdWUgY291bGQgYmUgc29sdmVkIGluIERCQ29yZVxuICAgIC8vIGJ5IG9wZW5pbmcgdGhlIHRyYW5zYWN0aW9uIGp1c3QgYmVmb3JlIHVzaW5nIGl0IGluc3RlYWQuXG4gICAgLy8gQnV0IG9sZGVyIEZpcmVmb3hlcyBhbmQgSUUxMSAod2l0aCBQcm9taXNlIHBvbHlmaWxscylcbiAgICAvLyB3aWxsIHN0aWxsIGhhdmUgcHJvYnMuXG4gICAgLy8gVGhlIGJlZ2luTWljcm90aWNrU2NvcGUoKS9lbmRNaWNyb3RpY2tTY29wZSgpIHdvcmtzXG4gICAgLy8gaW4gY29vcGVyYXRpb24gd2l0aCBEZXhpZS5Qcm9taXNlIHRvIG9yY2hlc3RyYXRlXG4gICAgLy8gdGhlIG1pY3JvLXRpY2tzIGluIGVuZE1pY3JvdGlja1Njb3BlKCkgcmF0aGVyIHRoYW5cbiAgICAvLyBpbiBuYXRpdmUgZW5naW5lLlxuICAgIGNvbnN0IHdhc1Jvb3RFeGVjID0gYmVnaW5NaWNyb1RpY2tTY29wZSgpO1xuICAgIHRyeSB7XG4gICAgICBsZXQgcCA9IHRyYW5zICYmIHRyYW5zLmRiLl9ub3ZpcCA9PT0gdGhpcy5kYi5fbm92aXAgP1xuICAgICAgICB0cmFucyA9PT0gUFNELnRyYW5zID9cbiAgICAgICAgICB0cmFucy5fcHJvbWlzZShtb2RlLCBjaGVja1RhYmxlSW5UcmFuc2FjdGlvbiwgd3JpdGVMb2NrZWQpIDpcbiAgICAgICAgICBuZXdTY29wZSgoKSA9PiB0cmFucy5fcHJvbWlzZShtb2RlLCBjaGVja1RhYmxlSW5UcmFuc2FjdGlvbiwgd3JpdGVMb2NrZWQpLCB7IHRyYW5zOiB0cmFucywgdHJhbnNsZXNzOiBQU0QudHJhbnNsZXNzIHx8IFBTRCB9KSA6XG4gICAgICAgIHRlbXBUcmFuc2FjdGlvbih0aGlzLmRiLCBtb2RlLCBbdGhpcy5uYW1lXSwgY2hlY2tUYWJsZUluVHJhbnNhY3Rpb24pO1xuICAgICAgaWYgKHRhc2spIHsgLy8gRGV4aWUuZGVidWcgPSB0cnVlIHNvIHdlIHRyYWNlIGVycm9yc1xuICAgICAgICBwLl9jb25zb2xlVGFzayA9IHRhc2s7XG4gICAgICAgIHAgPSBwLmNhdGNoKGVyciA9PiB7XG4gICAgICAgICAgY29uc29sZS50cmFjZShlcnIpO1xuICAgICAgICAgIHJldHVybiByZWplY3Rpb24oZXJyKTtcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgICByZXR1cm4gcDsgIFxuICAgIH0gZmluYWxseSB7XG4gICAgICBpZiAod2FzUm9vdEV4ZWMpIGVuZE1pY3JvVGlja1Njb3BlKCk7XG4gICAgfVxuICB9XG5cbiAgLyoqIFRhYmxlLmdldCgpXG4gICAqIFxuICAgKiBodHRwczovL2RleGllLm9yZy9kb2NzL1RhYmxlL1RhYmxlLmdldCgpXG4gICAqIFxuICAgKiovXG4gIGdldChrZXlPckNyaXQsIGNiPykge1xuICAgIGlmIChrZXlPckNyaXQgJiYga2V5T3JDcml0LmNvbnN0cnVjdG9yID09PSBPYmplY3QpXG4gICAgICByZXR1cm4gdGhpcy53aGVyZShrZXlPckNyaXQgYXMgeyBba2V5OiBzdHJpbmddOiBJbmRleGFibGVUeXBlIH0pLmZpcnN0KGNiKTtcbiAgICBpZiAoa2V5T3JDcml0ID09IG51bGwpIHJldHVybiByZWplY3Rpb24obmV3IGV4Y2VwdGlvbnMuVHlwZShgSW52YWxpZCBhcmd1bWVudCB0byBUYWJsZS5nZXQoKWApKTtcblxuICAgIHJldHVybiB0aGlzLl90cmFucygncmVhZG9ubHknLCAodHJhbnMpID0+IHtcbiAgICAgIHJldHVybiB0aGlzLmNvcmUuZ2V0KHt0cmFucywga2V5OiBrZXlPckNyaXR9KVxuICAgICAgICAudGhlbihyZXMgPT4gdGhpcy5ob29rLnJlYWRpbmcuZmlyZShyZXMpKTtcbiAgICB9KS50aGVuKGNiKTtcbiAgfVxuXG4gIC8qKiBUYWJsZS53aGVyZSgpXG4gICAqIFxuICAgKiBodHRwczovL2RleGllLm9yZy9kb2NzL1RhYmxlL1RhYmxlLndoZXJlKClcbiAgICogXG4gICAqKi9cbiAgd2hlcmUoaW5kZXhPckNyaXQ6IHN0cmluZyB8IHN0cmluZ1tdIHwgeyBba2V5OiBzdHJpbmddOiBJbmRleGFibGVUeXBlIH0pIHtcbiAgICBpZiAodHlwZW9mIGluZGV4T3JDcml0ID09PSAnc3RyaW5nJylcbiAgICAgIHJldHVybiBuZXcgdGhpcy5kYi5XaGVyZUNsYXVzZSh0aGlzLCBpbmRleE9yQ3JpdCk7XG4gICAgaWYgKGlzQXJyYXkoaW5kZXhPckNyaXQpKVxuICAgICAgcmV0dXJuIG5ldyB0aGlzLmRiLldoZXJlQ2xhdXNlKHRoaXMsIGBbJHtpbmRleE9yQ3JpdC5qb2luKCcrJyl9XWApO1xuICAgIC8vIGluZGV4T3JDcml0IGlzIGFuIG9iamVjdCBtYXAgb2Yge1trZXlQYXRoXTp2YWx1ZX0gXG4gICAgY29uc3Qga2V5UGF0aHMgPSBrZXlzKGluZGV4T3JDcml0KTtcbiAgICBpZiAoa2V5UGF0aHMubGVuZ3RoID09PSAxKVxuICAgICAgLy8gT25seSBvbmUgY3JpdGVyYS4gVGhpcyB3YXMgdGhlIGVhc3kgY2FzZTpcbiAgICAgIHJldHVybiB0aGlzXG4gICAgICAgIC53aGVyZShrZXlQYXRoc1swXSlcbiAgICAgICAgLmVxdWFscyhpbmRleE9yQ3JpdFtrZXlQYXRoc1swXV0pO1xuXG4gICAgLy8gTXVsdGlwbGUgY3JpdGVyaWFzLlxuICAgIC8vIExldCdzIHRyeSBmaW5kaW5nIGEgY29tcG91bmQgaW5kZXggdGhhdCBtYXRjaGVzIGFsbCBrZXlQYXRocyBpblxuICAgIC8vIGFyYnJpdGFyeSBvcmRlcjpcbiAgICBjb25zdCBjb21wb3VuZEluZGV4ID0gdGhpcy5zY2hlbWEuaW5kZXhlcy5jb25jYXQodGhpcy5zY2hlbWEucHJpbUtleSkuZmlsdGVyKGl4ID0+IHtcbiAgICAgIGlmIChcbiAgICAgICAgaXguY29tcG91bmQgJiZcbiAgICAgICAga2V5UGF0aHMuZXZlcnkoa2V5UGF0aCA9PiBpeC5rZXlQYXRoLmluZGV4T2Yoa2V5UGF0aCkgPj0gMCkpIHtcbiAgICAgICAgICBmb3IgKGxldCBpPTA7IGk8a2V5UGF0aHMubGVuZ3RoOyArK2kpIHtcbiAgICAgICAgICAgIGlmIChrZXlQYXRocy5pbmRleE9mKGl4LmtleVBhdGhbaV0pID09PSAtMSkgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgIH1cbiAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9KS5zb3J0KChhLGIpID0+IGEua2V5UGF0aC5sZW5ndGggLSBiLmtleVBhdGgubGVuZ3RoKVswXTtcbiAgICAgICAgICAgIFxuICAgIGlmIChjb21wb3VuZEluZGV4ICYmIHRoaXMuZGIuX21heEtleSAhPT0gbWF4U3RyaW5nKSB7XG4gICAgICAvLyBDb29sISBXZSBmb3VuZCBzdWNoIGNvbXBvdW5kIGluZGV4XG4gICAgICAvLyBhbmQgdGhpcyBicm93c2VyIHN1cHBvcnRzIGNvbXBvdW5kIGluZGV4ZXMgKG1heEtleSAhPT0gbWF4U3RyaW5nKSFcbiAgICAgIGNvbnN0IGtleVBhdGhzSW5WYWxpZE9yZGVyID0gKGNvbXBvdW5kSW5kZXgua2V5UGF0aCBhcyBzdHJpbmdbXSkuc2xpY2UoMCwga2V5UGF0aHMubGVuZ3RoKTtcbiAgICAgIHJldHVybiB0aGlzXG4gICAgICAgIC53aGVyZShrZXlQYXRoc0luVmFsaWRPcmRlcilcbiAgICAgICAgLmVxdWFscyhrZXlQYXRoc0luVmFsaWRPcmRlci5tYXAoa3AgPT4gaW5kZXhPckNyaXRba3BdKSk7XG4gICAgfVxuXG4gICAgaWYgKCFjb21wb3VuZEluZGV4ICYmIGRlYnVnKSBjb25zb2xlLndhcm4oXG4gICAgICBgVGhlIHF1ZXJ5ICR7SlNPTi5zdHJpbmdpZnkoaW5kZXhPckNyaXQpfSBvbiAke3RoaXMubmFtZX0gd291bGQgYmVuZWZpdCBmcm9tIGEgYCArXG4gICAgICBgY29tcG91bmQgaW5kZXggWyR7a2V5UGF0aHMuam9pbignKycpfV1gKTtcblxuICAgIC8vIE9rLCBub3cgbGV0J3MgZmFsbGJhY2sgdG8gZmluZGluZyBhdCBsZWFzdCBvbmUgbWF0Y2hpbmcgaW5kZXhcbiAgICAvLyBhbmQgZmlsdGVyIHRoZSByZXN0LlxuICAgIGNvbnN0IHsgaWR4QnlOYW1lIH0gPSB0aGlzLnNjaGVtYTtcbiAgICBjb25zdCBpZGIgPSB0aGlzLmRiLl9kZXBzLmluZGV4ZWREQjtcblxuICAgIGZ1bmN0aW9uIGVxdWFscyAoYSwgYikge1xuICAgICAgcmV0dXJuIGlkYi5jbXAoYSxiKSA9PT0gMDsgLy8gV29ya3Mgd2l0aCBhbGwgaW5kZXhhYmxlIHR5cGVzIGluY2x1ZGluZyBiaW5hcnkga2V5cy5cbiAgICB9XG5cbiAgICBjb25zdCBbaWR4LCBmaWx0ZXJGdW5jdGlvbl0gPSBrZXlQYXRocy5yZWR1Y2UoKFtwcmV2SW5kZXgsIHByZXZGaWx0ZXJGbl0sIGtleVBhdGgpID0+IHtcbiAgICAgIGNvbnN0IGluZGV4ID0gaWR4QnlOYW1lW2tleVBhdGhdO1xuICAgICAgY29uc3QgdmFsdWUgPSBpbmRleE9yQ3JpdFtrZXlQYXRoXTtcbiAgICAgIHJldHVybiBbXG4gICAgICAgIHByZXZJbmRleCB8fCBpbmRleCwgLy8gaWR4Ojo9UGljayBpbmRleCBvZiBmaXJzdCBtYXRjaGluZyBrZXlwYXRoXG4gICAgICAgIHByZXZJbmRleCB8fCAhaW5kZXggPyAvLyBmaWx0ZXI6Oj1udWxsIGlmIG5vdCBuZWVkZWQsIG90aGVyd2lzZSBjb21iaW5lIGZ1bmN0aW9uIGZpbHRlclxuICAgICAgICAgIGNvbWJpbmUoXG4gICAgICAgICAgICBwcmV2RmlsdGVyRm4sXG4gICAgICAgICAgICBpbmRleCAmJiBpbmRleC5tdWx0aSA/XG4gICAgICAgICAgICAgIHggPT4ge1xuICAgICAgICAgICAgICAgIGNvbnN0IHByb3AgPSBnZXRCeUtleVBhdGgoeCwga2V5UGF0aCk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGlzQXJyYXkocHJvcCkgJiYgcHJvcC5zb21lKGl0ZW0gPT4gZXF1YWxzKHZhbHVlLCBpdGVtKSk7XG4gICAgICAgICAgICAgIH0gOiB4ID0+IGVxdWFscyh2YWx1ZSwgZ2V0QnlLZXlQYXRoKHgsIGtleVBhdGgpKSlcbiAgICAgICAgICA6IHByZXZGaWx0ZXJGblxuICAgICAgXTtcbiAgICB9LCBbbnVsbCwgbnVsbF0pO1xuXG4gICAgcmV0dXJuIGlkeCA/XG4gICAgICB0aGlzLndoZXJlKGlkeC5uYW1lKS5lcXVhbHMoaW5kZXhPckNyaXRbaWR4LmtleVBhdGhdKVxuICAgICAgICAuZmlsdGVyKGZpbHRlckZ1bmN0aW9uKSA6XG4gICAgICBjb21wb3VuZEluZGV4ID9cbiAgICAgICAgdGhpcy5maWx0ZXIoZmlsdGVyRnVuY3Rpb24pIDogLy8gSGFzIGNvbXBvdW5kIGJ1dCBicm93c2VyIGJhZC4gQWxsb3cgZmlsdGVyLlxuICAgICAgICB0aGlzLndoZXJlKGtleVBhdGhzKS5lcXVhbHMoJycpOyAvLyBObyBpbmRleCBhdCBhbGwuIEZhaWwgbGF6aWx5IHdpdGggXCJbYStiK2NdIGlzIG5vdCBpbmRleGVkXCJcbiAgfVxuXG4gIC8qKiBUYWJsZS5maWx0ZXIoKVxuICAgKiBcbiAgICogaHR0cHM6Ly9kZXhpZS5vcmcvZG9jcy9UYWJsZS9UYWJsZS5maWx0ZXIoKVxuICAgKiBcbiAgICoqL1xuICBmaWx0ZXIoZmlsdGVyRnVuY3Rpb246IChvYmo6IGFueSkgPT4gYm9vbGVhbikge1xuICAgIHJldHVybiB0aGlzLnRvQ29sbGVjdGlvbigpLmFuZChmaWx0ZXJGdW5jdGlvbik7XG4gIH1cblxuICAvKiogVGFibGUuY291bnQoKVxuICAgKiBcbiAgICogaHR0cHM6Ly9kZXhpZS5vcmcvZG9jcy9UYWJsZS9UYWJsZS5jb3VudCgpXG4gICAqIFxuICAgKiovXG4gIGNvdW50KHRoZW5TaG9ydGN1dD86IGFueSkge1xuICAgIHJldHVybiB0aGlzLnRvQ29sbGVjdGlvbigpLmNvdW50KHRoZW5TaG9ydGN1dCk7XG4gIH1cblxuICAvKiogVGFibGUub2Zmc2V0KClcbiAgICogXG4gICAqIGh0dHBzOi8vZGV4aWUub3JnL2RvY3MvVGFibGUvVGFibGUub2Zmc2V0KClcbiAgICogXG4gICAqKi9cbiAgb2Zmc2V0KG9mZnNldDogbnVtYmVyKSB7XG4gICAgcmV0dXJuIHRoaXMudG9Db2xsZWN0aW9uKCkub2Zmc2V0KG9mZnNldCk7XG4gIH1cblxuICAvKiogVGFibGUubGltaXQoKVxuICAgKiBcbiAgICogaHR0cHM6Ly9kZXhpZS5vcmcvZG9jcy9UYWJsZS9UYWJsZS5saW1pdCgpXG4gICAqIFxuICAgKiovXG4gIGxpbWl0KG51bVJvd3M6IG51bWJlcikge1xuICAgIHJldHVybiB0aGlzLnRvQ29sbGVjdGlvbigpLmxpbWl0KG51bVJvd3MpO1xuICB9XG5cbiAgLyoqIFRhYmxlLmVhY2goKVxuICAgKiBcbiAgICogaHR0cHM6Ly9kZXhpZS5vcmcvZG9jcy9UYWJsZS9UYWJsZS5lYWNoKClcbiAgICogXG4gICAqKi9cbiAgZWFjaChjYWxsYmFjazogKG9iajogYW55LCBjdXJzb3I6IHsga2V5OiBJbmRleGFibGVUeXBlLCBwcmltYXJ5S2V5OiBJbmRleGFibGVUeXBlIH0pID0+IGFueSkge1xuICAgIHJldHVybiB0aGlzLnRvQ29sbGVjdGlvbigpLmVhY2goY2FsbGJhY2spO1xuICB9XG5cbiAgLyoqIFRhYmxlLnRvQXJyYXkoKVxuICAgKiBcbiAgICogaHR0cHM6Ly9kZXhpZS5vcmcvZG9jcy9UYWJsZS9UYWJsZS50b0FycmF5KClcbiAgICogXG4gICAqKi9cbiAgdG9BcnJheSh0aGVuU2hvcnRjdXQ/OiBhbnkpIHtcbiAgICByZXR1cm4gdGhpcy50b0NvbGxlY3Rpb24oKS50b0FycmF5KHRoZW5TaG9ydGN1dCk7XG4gIH1cblxuICAvKiogVGFibGUudG9Db2xsZWN0aW9uKClcbiAgICogXG4gICAqIGh0dHBzOi8vZGV4aWUub3JnL2RvY3MvVGFibGUvVGFibGUudG9Db2xsZWN0aW9uKClcbiAgICogXG4gICAqKi9cbiAgdG9Db2xsZWN0aW9uKCkge1xuICAgIHJldHVybiBuZXcgdGhpcy5kYi5Db2xsZWN0aW9uKG5ldyB0aGlzLmRiLldoZXJlQ2xhdXNlKHRoaXMpKTtcbiAgfVxuXG4gIC8qKiBUYWJsZS5vcmRlckJ5KClcbiAgICogXG4gICAqIGh0dHBzOi8vZGV4aWUub3JnL2RvY3MvVGFibGUvVGFibGUub3JkZXJCeSgpXG4gICAqIFxuICAgKiovXG4gIG9yZGVyQnkoaW5kZXg6IHN0cmluZyB8IHN0cmluZ1tdKSB7XG4gICAgcmV0dXJuIG5ldyB0aGlzLmRiLkNvbGxlY3Rpb24oXG4gICAgICBuZXcgdGhpcy5kYi5XaGVyZUNsYXVzZSh0aGlzLCBpc0FycmF5KGluZGV4KSA/XG4gICAgICAgIGBbJHtpbmRleC5qb2luKCcrJyl9XWAgOlxuICAgICAgICBpbmRleCkpO1xuICB9XG5cbiAgLyoqIFRhYmxlLnJldmVyc2UoKVxuICAgKiBcbiAgICogaHR0cHM6Ly9kZXhpZS5vcmcvZG9jcy9UYWJsZS9UYWJsZS5yZXZlcnNlKClcbiAgICogXG4gICAqKi9cbiAgcmV2ZXJzZSgpOiBDb2xsZWN0aW9uIHtcbiAgICByZXR1cm4gdGhpcy50b0NvbGxlY3Rpb24oKS5yZXZlcnNlKCk7XG4gIH1cblxuICAvKiogVGFibGUubWFwVG9DbGFzcygpXG4gICAqIFxuICAgKiBodHRwczovL2RleGllLm9yZy9kb2NzL1RhYmxlL1RhYmxlLm1hcFRvQ2xhc3MoKVxuICAgKiBcbiAgICoqL1xuICBtYXBUb0NsYXNzKGNvbnN0cnVjdG9yOiBGdW5jdGlvbikge1xuICAgIGNvbnN0IHtkYiwgbmFtZTogdGFibGVOYW1lfSA9IHRoaXM7XG4gICAgdGhpcy5zY2hlbWEubWFwcGVkQ2xhc3MgPSBjb25zdHJ1Y3RvcjtcbiAgICBpZiAoY29uc3RydWN0b3IucHJvdG90eXBlIGluc3RhbmNlb2YgRW50aXR5KSB7XG4gICAgICBjb25zdHJ1Y3RvciA9IGNsYXNzIGV4dGVuZHMgKGNvbnN0cnVjdG9yIGFzIGFueSkge1xuICAgICAgICBnZXQgZGIgKCkgeyByZXR1cm4gZGI7IH1cbiAgICAgICAgdGFibGUoKSB7IHJldHVybiB0YWJsZU5hbWU7IH1cbiAgICAgIH1cbiAgICB9XG4gICAgLy8gQ29sbGVjdCBhbGwgaW5oZXJpdGVkIHByb3BlcnR5IG5hbWVzIChpbmNsdWRpbmcgbWV0aG9kIG5hbWVzKSBieVxuICAgIC8vIHdhbGtpbmcgdGhlIHByb3RvdHlwZSBjaGFpbi4gVGhpcyBpcyB0byBhdm9pZCBvdmVyd3JpdGluZyB0aGVtIGZyb21cbiAgICAvLyBkYXRhYmFzZSBkYXRhIC0gc28gYXBwbGljYXRpb24gY29kZSBjYW4gcmVseSBvbiBpbmhlcml0ZWQgcHJvcHMgbmV2ZXJcbiAgICAvLyBiZWNvbWluZyBzaGFkb3dlZCBieSBkYXRhYmFzZSBvYmplY3QgcHJvcHMuXG4gICAgY29uc3QgaW5oZXJpdGVkUHJvcHMgPSBuZXcgU2V0PHN0cmluZz4oKTtcbiAgICBmb3IgKGxldCBwcm90byA9IGNvbnN0cnVjdG9yLnByb3RvdHlwZTsgcHJvdG87IHByb3RvID0gZ2V0UHJvdG8ocHJvdG8pKSB7XG4gICAgICBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyhwcm90bykuZm9yRWFjaChwcm9wTmFtZSA9PiBpbmhlcml0ZWRQcm9wcy5hZGQocHJvcE5hbWUpKTtcbiAgICB9XG4gIFxuICAgIC8vIE5vdywgc3Vic2NyaWJlIHRvIHRoZSB3aGVuKFwicmVhZGluZ1wiKSBldmVudCB0byBtYWtlIGFsbCBvYmplY3RzIHRoYXQgY29tZSBvdXQgZnJvbSB0aGlzIHRhYmxlIGluaGVyaXQgZnJvbSBnaXZlbiBjbGFzc1xuICAgIC8vIG5vIG1hdHRlciB3aGljaCBtZXRob2QgdG8gdXNlIGZvciByZWFkaW5nIChUYWJsZS5nZXQoKSBvciBUYWJsZS53aGVyZSguLi4pLi4uIClcbiAgICBjb25zdCByZWFkSG9vayA9IChvYmo6IE9iamVjdCkgPT4ge1xuICAgICAgaWYgKCFvYmopIHJldHVybiBvYmo7IC8vIE5vIHZhbGlkIG9iamVjdC4gKFZhbHVlIGlzIG51bGwgb3IgdW5kZWZpbmVkKS4gUmV0dXJuIGFzIGlzLlxuICAgICAgLy8gQ3JlYXRlIGEgbmV3IG9iamVjdCB0aGF0IGRlcml2ZXMgZnJvbSBjb25zdHJ1Y3RvcjpcbiAgICAgIGNvbnN0IHJlcyA9IE9iamVjdC5jcmVhdGUoY29uc3RydWN0b3IucHJvdG90eXBlKTtcbiAgICAgIC8vIENsb25lIG1lbWJlcnMgKGJ1dCBuZXZlciB0aG9zZSB0aGF0IGNvbGxpZGUgd2l0aCBhIHByb3BlcnR5IGluIHRoZSBwcm90b3R5cGVcbiAgICAgIC8vIGhpZXJjaGFyeSAoTVVTVCBCRSBBQkxFIFRPIFJFTFkgT04gRW50aXR5IG1ldGhvZHMgYW5kIHByb3BzISkpOlxuICAgICAgZm9yIChsZXQgbSBpbiBvYmopIGlmICghaW5oZXJpdGVkUHJvcHMuaGFzKG0pKSB0cnkgeyByZXNbbV0gPSBvYmpbbV07IH0gY2F0Y2ggKF8pIHsgfVxuICAgICAgcmV0dXJuIHJlcztcbiAgICB9O1xuXG4gICAgaWYgKHRoaXMuc2NoZW1hLnJlYWRIb29rKSB7XG4gICAgICB0aGlzLmhvb2sucmVhZGluZy51bnN1YnNjcmliZSh0aGlzLnNjaGVtYS5yZWFkSG9vayk7XG4gICAgfVxuICAgIHRoaXMuc2NoZW1hLnJlYWRIb29rID0gcmVhZEhvb2s7XG4gICAgdGhpcy5ob29rKFwicmVhZGluZ1wiLCByZWFkSG9vayk7XG4gICAgcmV0dXJuIGNvbnN0cnVjdG9yO1xuICB9XG5cbiAgLyoqIEBkZXByZWNhdGVkICovXG4gIGRlZmluZUNsYXNzKCkge1xuICAgIGZ1bmN0aW9uIENsYXNzIChjb250ZW50KXtcbiAgICAgIGV4dGVuZCh0aGlzLCBjb250ZW50KTtcbiAgICB9O1xuICAgIHJldHVybiB0aGlzLm1hcFRvQ2xhc3MoQ2xhc3MpO1xuICB9XG5cbiAgLyoqIFRhYmxlLmFkZCgpXG4gICAqIFxuICAgKiBodHRwczovL2RleGllLm9yZy9kb2NzL1RhYmxlL1RhYmxlLmFkZCgpXG4gICAqIFxuICAgKiovXG4gIGFkZChvYmosIGtleT86IEluZGV4YWJsZVR5cGUpOiBQcm9taXNlRXh0ZW5kZWQ8SW5kZXhhYmxlVHlwZT4ge1xuICAgIGNvbnN0IHthdXRvLCBrZXlQYXRofSA9IHRoaXMuc2NoZW1hLnByaW1LZXk7XG4gICAgbGV0IG9ialRvQWRkID0gb2JqO1xuICAgIGlmIChrZXlQYXRoICYmIGF1dG8pIHtcbiAgICAgIG9ialRvQWRkID0gd29ya2Fyb3VuZEZvclVuZGVmaW5lZFByaW1LZXkoa2V5UGF0aCkob2JqKTtcbiAgICB9XG4gICAgcmV0dXJuIHRoaXMuX3RyYW5zKCdyZWFkd3JpdGUnLCB0cmFucyA9PiB7XG4gICAgICByZXR1cm4gdGhpcy5jb3JlLm11dGF0ZSh7dHJhbnMsIHR5cGU6ICdhZGQnLCBrZXlzOiBrZXkgIT0gbnVsbCA/IFtrZXldIDogbnVsbCwgdmFsdWVzOiBbb2JqVG9BZGRdfSk7XG4gICAgfSkudGhlbihyZXMgPT4gcmVzLm51bUZhaWx1cmVzID8gUHJvbWlzZS5yZWplY3QocmVzLmZhaWx1cmVzWzBdKSA6IHJlcy5sYXN0UmVzdWx0KVxuICAgIC50aGVuKGxhc3RSZXN1bHQgPT4ge1xuICAgICAgaWYgKGtleVBhdGgpIHtcbiAgICAgICAgLy8gVGhpcyBwYXJ0IHNob3VsZCBiZSBoZXJlIGZvciBiYWNrd2FyZCBjb21wYXRpYmlsaXR5LlxuICAgICAgICAvLyBJZiBldmVyIGZlZWxpbmcgdG9vIGJhZCBhYm91dCB0aGlzLCBwbGVhc2Ugd2FpdCB0byBhIG5ldyBtYWpvciBiZWZvcmUgcmVtb3ZpbmcgaXQsXG4gICAgICAgIC8vIGFuZCBkb2N1bWVudCB0aGUgY2hhbmdlIHRob3JvdWdobHkuXG4gICAgICAgIHRyeXtzZXRCeUtleVBhdGgob2JqLCBrZXlQYXRoLCBsYXN0UmVzdWx0KTt9Y2F0Y2goXyl7fTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBsYXN0UmVzdWx0O1xuICAgIH0pO1xuICB9XG5cbiAgLyoqIFRhYmxlLnVwZGF0ZSgpXG4gICAqIFxuICAgKiBodHRwczovL2RleGllLm9yZy9kb2NzL1RhYmxlL1RhYmxlLnVwZGF0ZSgpXG4gICAqIFxuICAgKiovXG4gIHVwZGF0ZShrZXlPck9iamVjdCwgbW9kaWZpY2F0aW9uczogeyBba2V5UGF0aDogc3RyaW5nXTogYW55OyB9IHwgKChvYmo6IGFueSwgY3R4Ont2YWx1ZTogYW55LCBwcmltS2V5OiBJbmRleGFibGVUeXBlfSkgPT4gdm9pZCB8IGJvb2xlYW4pKTogUHJvbWlzZUV4dGVuZGVkPG51bWJlcj4ge1xuICAgIGlmICh0eXBlb2Yga2V5T3JPYmplY3QgPT09ICdvYmplY3QnICYmICFpc0FycmF5KGtleU9yT2JqZWN0KSkge1xuICAgICAgY29uc3Qga2V5ID0gZ2V0QnlLZXlQYXRoKGtleU9yT2JqZWN0LCB0aGlzLnNjaGVtYS5wcmltS2V5LmtleVBhdGgpO1xuICAgICAgaWYgKGtleSA9PT0gdW5kZWZpbmVkKSByZXR1cm4gcmVqZWN0aW9uKG5ldyBleGNlcHRpb25zLkludmFsaWRBcmd1bWVudChcbiAgICAgICAgXCJHaXZlbiBvYmplY3QgZG9lcyBub3QgY29udGFpbiBpdHMgcHJpbWFyeSBrZXlcIikpO1xuICAgICAgLyovLyBvYmplY3QgdG8gbW9kaWZ5LiBBbHNvIG1vZGlmeSBnaXZlbiBvYmplY3Qgd2l0aCB0aGUgbW9kaWZpY2F0aW9uczpcbiAgICAgIC8vIFRoaXMgcGFydCBzaG91bGQgYmUgaGVyZSBmb3IgYmFja3dhcmQgY29tcGF0aWJpbGl0eS5cbiAgICAgIC8vIElmIGV2ZXIgZmVlbGluZyB0b28gYmFkIGFib3V0IG11dGF0aW5nIGdpdmVuIG9iamVjdCwgcGxlYXNlIHdhaXQgdG8gYSBuZXcgbWFqb3IgYmVmb3JlIHJlbW92aW5nIGl0LFxuICAgICAgLy8gYW5kIGRvY3VtZW50IHRoZSBjaGFuZ2UgdGhvcm91Z2hseS4gVE9ETzogRG9jdW1lbnQgdGhpcyBjaGFuZ2UhXG4gICAgICBpZiAoIU9iamVjdC5pc0Zyb3plbihrZXlPck9iamVjdCkpIHRyeSB7XG4gICAgICAgIGlmICh0eXBlb2YgbW9kaWZpY2F0aW9ucyAhPT0gXCJmdW5jdGlvblwiKSB7XG4gICAgICAgICAga2V5cyhtb2RpZmljYXRpb25zKS5mb3JFYWNoKGtleVBhdGggPT4ge1xuICAgICAgICAgICAgc2V0QnlLZXlQYXRoKGtleU9yT2JqZWN0LCBrZXlQYXRoLCBtb2RpZmljYXRpb25zW2tleVBhdGhdKTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAvLyBOb3cgc2luY2Ugd2Ugc3VwcG9ydCBmdW5jdGlvbiBhcmd1bWVudCwgd2Ugc2hvdWxkIGhhdmUgYSBzaW1pbGFyIGJlaGF2aW9yIGhlcmUgYXMgd2VsbFxuICAgICAgICAgIC8vIChhcyBsb25nIGFzIHdlIGRvIHRoaXMgbXV0YWJpbGl0eSBzdHVmZiBvbiB0aGUgZ2l2ZW4gb2JqZWN0KVxuICAgICAgICAgIG1vZGlmaWNhdGlvbnMoa2V5T3JPYmplY3QsIHt2YWx1ZToga2V5T3JPYmplY3QsIHByaW1LZXk6IGtleX0pO1xuICAgICAgICB9XG4gICAgICB9IGNhdGNoIHtcbiAgICAgICAgLy8gTWF5YmUgZ2l2ZW4gb2JqZWN0IHdhcyBmcm96ZW4uXG4gICAgICAgIC8vIFRoaXMgcGFydCBpcyBub3QgZXNzZW50aWFsLiBKdXN0IG1vdmUgb24gYXMgbm90aGluZyBoYXBwZW5lZC4uLlxuICAgICAgfSovXG4gICAgICByZXR1cm4gdGhpcy53aGVyZShcIjppZFwiKS5lcXVhbHMoa2V5KS5tb2RpZnkobW9kaWZpY2F0aW9ucyk7XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIGtleSB0byBtb2RpZnlcbiAgICAgIHJldHVybiB0aGlzLndoZXJlKFwiOmlkXCIpLmVxdWFscyhrZXlPck9iamVjdCkubW9kaWZ5KG1vZGlmaWNhdGlvbnMpO1xuICAgIH1cbiAgfVxuXG4gIC8qKiBUYWJsZS5wdXQoKVxuICAgKiBcbiAgICogaHR0cHM6Ly9kZXhpZS5vcmcvZG9jcy9UYWJsZS9UYWJsZS5wdXQoKVxuICAgKiBcbiAgICoqL1xuICBwdXQob2JqLCBrZXk/OiBJbmRleGFibGVUeXBlKTogUHJvbWlzZUV4dGVuZGVkPEluZGV4YWJsZVR5cGU+IHtcbiAgICBjb25zdCB7YXV0bywga2V5UGF0aH0gPSB0aGlzLnNjaGVtYS5wcmltS2V5O1xuICAgIGxldCBvYmpUb0FkZCA9IG9iajtcbiAgICBpZiAoa2V5UGF0aCAmJiBhdXRvKSB7XG4gICAgICBvYmpUb0FkZCA9IHdvcmthcm91bmRGb3JVbmRlZmluZWRQcmltS2V5KGtleVBhdGgpKG9iaik7XG4gICAgfVxuICAgIHJldHVybiB0aGlzLl90cmFucyhcbiAgICAgICdyZWFkd3JpdGUnLFxuICAgICAgdHJhbnMgPT4gdGhpcy5jb3JlLm11dGF0ZSh7dHJhbnMsIHR5cGU6ICdwdXQnLCB2YWx1ZXM6IFtvYmpUb0FkZF0sIGtleXM6IGtleSAhPSBudWxsID8gW2tleV0gOiBudWxsfSkpXG4gICAgLnRoZW4ocmVzID0+IHJlcy5udW1GYWlsdXJlcyA/IFByb21pc2UucmVqZWN0KHJlcy5mYWlsdXJlc1swXSkgOiByZXMubGFzdFJlc3VsdClcbiAgICAudGhlbihsYXN0UmVzdWx0ID0+IHtcbiAgICAgIGlmIChrZXlQYXRoKSB7XG4gICAgICAgIC8vIFRoaXMgcGFydCBzaG91bGQgYmUgaGVyZSBmb3IgYmFja3dhcmQgY29tcGF0aWJpbGl0eS5cbiAgICAgICAgLy8gSWYgZXZlciBmZWVsaW5nIHRvbyBiYWQgYWJvdXQgdGhpcywgcGxlYXNlIHdhaXQgdG8gYSBuZXcgbWFqb3IgYmVmb3JlIHJlbW92aW5nIGl0LFxuICAgICAgICAvLyBhbmQgZG9jdW1lbnQgdGhlIGNoYW5nZSB0aG9yb3VnaGx5LlxuICAgICAgICB0cnl7c2V0QnlLZXlQYXRoKG9iaiwga2V5UGF0aCwgbGFzdFJlc3VsdCk7fWNhdGNoKF8pe307XG4gICAgICB9XG4gICAgICByZXR1cm4gbGFzdFJlc3VsdDtcbiAgICB9KTtcbiAgfVxuXG4gIC8qKiBUYWJsZS5kZWxldGUoKVxuICAgKiBcbiAgICogaHR0cHM6Ly9kZXhpZS5vcmcvZG9jcy9UYWJsZS9UYWJsZS5kZWxldGUoKVxuICAgKiBcbiAgICoqL1xuICBkZWxldGUoa2V5OiBJbmRleGFibGVUeXBlKTogUHJvbWlzZUV4dGVuZGVkPHZvaWQ+IHtcbiAgICByZXR1cm4gdGhpcy5fdHJhbnMoJ3JlYWR3cml0ZScsXG4gICAgICB0cmFucyA9PiB0aGlzLmNvcmUubXV0YXRlKHt0cmFucywgdHlwZTogJ2RlbGV0ZScsIGtleXM6IFtrZXldfSkpXG4gICAgLnRoZW4ocmVzID0+IHJlcy5udW1GYWlsdXJlcyA/IFByb21pc2UucmVqZWN0KHJlcy5mYWlsdXJlc1swXSkgOiB1bmRlZmluZWQpO1xuICB9XG5cbiAgLyoqIFRhYmxlLmNsZWFyKClcbiAgICogXG4gICAqIGh0dHBzOi8vZGV4aWUub3JnL2RvY3MvVGFibGUvVGFibGUuY2xlYXIoKVxuICAgKiBcbiAgICoqL1xuICBjbGVhcigpIHtcbiAgICByZXR1cm4gdGhpcy5fdHJhbnMoJ3JlYWR3cml0ZScsXG4gICAgICB0cmFucyA9PiB0aGlzLmNvcmUubXV0YXRlKHt0cmFucywgdHlwZTogJ2RlbGV0ZVJhbmdlJywgcmFuZ2U6IEFueVJhbmdlfSkpXG4gICAgICAgIC50aGVuKHJlcyA9PiByZXMubnVtRmFpbHVyZXMgPyBQcm9taXNlLnJlamVjdChyZXMuZmFpbHVyZXNbMF0pIDogdW5kZWZpbmVkKTtcbiAgfVxuXG4gIC8qKiBUYWJsZS5idWxrR2V0KClcbiAgICogXG4gICAqIGh0dHBzOi8vZGV4aWUub3JnL2RvY3MvVGFibGUvVGFibGUuYnVsa0dldCgpXG4gICAqIFxuICAgKiBAcGFyYW0ga2V5cyBcbiAgICovXG4gIGJ1bGtHZXQoa2V5czogSW5kZXhhYmxlVHlwZVtdKSB7XG4gICAgcmV0dXJuIHRoaXMuX3RyYW5zKCdyZWFkb25seScsIHRyYW5zID0+IHtcbiAgICAgIHJldHVybiB0aGlzLmNvcmUuZ2V0TWFueSh7XG4gICAgICAgIGtleXMsXG4gICAgICAgIHRyYW5zXG4gICAgICB9KS50aGVuKHJlc3VsdCA9PiByZXN1bHQubWFwKHJlcyA9PiB0aGlzLmhvb2sucmVhZGluZy5maXJlKHJlcykpKTtcbiAgICB9KTtcbiAgfVxuXG4gIC8qKiBUYWJsZS5idWxrQWRkKClcbiAgICogXG4gICAqIGh0dHBzOi8vZGV4aWUub3JnL2RvY3MvVGFibGUvVGFibGUuYnVsa0FkZCgpXG4gICAqIFxuICAgKiovXG4gIGJ1bGtBZGQoXG4gICAgb2JqZWN0czogcmVhZG9ubHkgYW55W10sXG4gICAga2V5c09yT3B0aW9ucz86IFJlYWRvbmx5QXJyYXk8SW5kZXhhYmxlVHlwZT4gfCB7IGFsbEtleXM/OiBib29sZWFuIH0sXG4gICAgb3B0aW9ucz86IHsgYWxsS2V5cz86IGJvb2xlYW4gfVxuICApIHsgICAgXG4gICAgY29uc3Qga2V5cyA9IEFycmF5LmlzQXJyYXkoa2V5c09yT3B0aW9ucykgPyBrZXlzT3JPcHRpb25zIDogdW5kZWZpbmVkO1xuICAgIG9wdGlvbnMgPSBvcHRpb25zIHx8IChrZXlzID8gdW5kZWZpbmVkIDoga2V5c09yT3B0aW9ucyBhcyB7IGFsbEtleXM/OiBib29sZWFuIH0pO1xuICAgIGNvbnN0IHdhbnRSZXN1bHRzID0gb3B0aW9ucyA/IG9wdGlvbnMuYWxsS2V5cyA6IHVuZGVmaW5lZDtcblxuICAgIHJldHVybiB0aGlzLl90cmFucygncmVhZHdyaXRlJywgdHJhbnMgPT4ge1xuICAgICAgY29uc3Qge2F1dG8sIGtleVBhdGh9ID0gdGhpcy5zY2hlbWEucHJpbUtleTtcbiAgICAgIGlmIChrZXlQYXRoICYmIGtleXMpXG4gICAgICAgIHRocm93IG5ldyBleGNlcHRpb25zLkludmFsaWRBcmd1bWVudChcImJ1bGtBZGQoKToga2V5cyBhcmd1bWVudCBpbnZhbGlkIG9uIHRhYmxlcyB3aXRoIGluYm91bmQga2V5c1wiKTtcbiAgICAgIGlmIChrZXlzICYmIGtleXMubGVuZ3RoICE9PSBvYmplY3RzLmxlbmd0aClcbiAgICAgICAgdGhyb3cgbmV3IGV4Y2VwdGlvbnMuSW52YWxpZEFyZ3VtZW50KFwiQXJndW1lbnRzIG9iamVjdHMgYW5kIGtleXMgbXVzdCBoYXZlIHRoZSBzYW1lIGxlbmd0aFwiKTtcblxuICAgICAgY29uc3QgbnVtT2JqZWN0cyA9IG9iamVjdHMubGVuZ3RoOyAvLyBQaWNrIGxlbmd0aCBoZXJlIHRvIGFsbG93IGdhcmJhZ2UgY29sbGVjdGlvbiBvZiBvYmplY3RzIGxhdGVyXG4gICAgICBsZXQgb2JqZWN0c1RvQWRkID0ga2V5UGF0aCAmJiBhdXRvID9cbiAgICAgICAgb2JqZWN0cy5tYXAod29ya2Fyb3VuZEZvclVuZGVmaW5lZFByaW1LZXkoa2V5UGF0aCkpIDpcbiAgICAgICAgb2JqZWN0cztcbiAgICAgIHJldHVybiB0aGlzLmNvcmUubXV0YXRlKFxuICAgICAgICB7dHJhbnMsIHR5cGU6ICdhZGQnLCBrZXlzOiBrZXlzIGFzIEluZGV4YWJsZVR5cGVbXSwgdmFsdWVzOiBvYmplY3RzVG9BZGQsIHdhbnRSZXN1bHRzfVxuICAgICAgKVxuICAgICAgICAudGhlbigoe251bUZhaWx1cmVzLCByZXN1bHRzLGxhc3RSZXN1bHQsIGZhaWx1cmVzfSkgPT4ge1xuICAgICAgICAgIGNvbnN0IHJlc3VsdCA9IHdhbnRSZXN1bHRzID8gcmVzdWx0cyA6IGxhc3RSZXN1bHQ7XG4gICAgICAgICAgaWYgKG51bUZhaWx1cmVzID09PSAwKSByZXR1cm4gcmVzdWx0O1xuICAgICAgICAgIHRocm93IG5ldyBCdWxrRXJyb3IoXG4gICAgICAgICAgICBgJHt0aGlzLm5hbWV9LmJ1bGtBZGQoKTogJHtudW1GYWlsdXJlc30gb2YgJHtudW1PYmplY3RzfSBvcGVyYXRpb25zIGZhaWxlZGAsIGZhaWx1cmVzKTtcbiAgICAgICAgfSk7XG4gICAgfSk7XG4gIH1cblxuICAvKiogVGFibGUuYnVsa1B1dCgpXG4gICAqIFxuICAgKiBodHRwczovL2RleGllLm9yZy9kb2NzL1RhYmxlL1RhYmxlLmJ1bGtQdXQoKVxuICAgKiBcbiAgICoqL1xuICBidWxrUHV0KFxuICAgIG9iamVjdHM6IHJlYWRvbmx5IGFueVtdLFxuICAgIGtleXNPck9wdGlvbnM/OiBSZWFkb25seUFycmF5PEluZGV4YWJsZVR5cGU+IHwgeyBhbGxLZXlzPzogYm9vbGVhbiB9LFxuICAgIG9wdGlvbnM/OiB7IGFsbEtleXM/OiBib29sZWFuIH1cbiAgKSB7ICAgXG4gICAgY29uc3Qga2V5cyA9IEFycmF5LmlzQXJyYXkoa2V5c09yT3B0aW9ucykgPyBrZXlzT3JPcHRpb25zIDogdW5kZWZpbmVkO1xuICAgIG9wdGlvbnMgPSBvcHRpb25zIHx8IChrZXlzID8gdW5kZWZpbmVkIDoga2V5c09yT3B0aW9ucyBhcyB7IGFsbEtleXM/OiBib29sZWFuIH0pO1xuICAgIGNvbnN0IHdhbnRSZXN1bHRzID0gb3B0aW9ucyA/IG9wdGlvbnMuYWxsS2V5cyA6IHVuZGVmaW5lZDtcblxuICAgIHJldHVybiB0aGlzLl90cmFucygncmVhZHdyaXRlJywgdHJhbnMgPT4ge1xuICAgICAgY29uc3Qge2F1dG8sIGtleVBhdGh9ID0gdGhpcy5zY2hlbWEucHJpbUtleTtcbiAgICAgIGlmIChrZXlQYXRoICYmIGtleXMpXG4gICAgICAgIHRocm93IG5ldyBleGNlcHRpb25zLkludmFsaWRBcmd1bWVudChcImJ1bGtQdXQoKToga2V5cyBhcmd1bWVudCBpbnZhbGlkIG9uIHRhYmxlcyB3aXRoIGluYm91bmQga2V5c1wiKTtcbiAgICAgIGlmIChrZXlzICYmIGtleXMubGVuZ3RoICE9PSBvYmplY3RzLmxlbmd0aClcbiAgICAgICAgdGhyb3cgbmV3IGV4Y2VwdGlvbnMuSW52YWxpZEFyZ3VtZW50KFwiQXJndW1lbnRzIG9iamVjdHMgYW5kIGtleXMgbXVzdCBoYXZlIHRoZSBzYW1lIGxlbmd0aFwiKTtcblxuICAgICAgY29uc3QgbnVtT2JqZWN0cyA9IG9iamVjdHMubGVuZ3RoOyAvLyBQaWNrIGxlbmd0aCBoZXJlIHRvIGFsbG93IGdhcmJhZ2UgY29sbGVjdGlvbiBvZiBvYmplY3RzIGxhdGVyXG4gICAgICBsZXQgb2JqZWN0c1RvUHV0ID0ga2V5UGF0aCAmJiBhdXRvID9cbiAgICAgICAgb2JqZWN0cy5tYXAod29ya2Fyb3VuZEZvclVuZGVmaW5lZFByaW1LZXkoa2V5UGF0aCkpIDpcbiAgICAgICAgb2JqZWN0cztcblxuICAgICAgcmV0dXJuIHRoaXMuY29yZS5tdXRhdGUoXG4gICAgICAgIHt0cmFucywgdHlwZTogJ3B1dCcsIGtleXM6IGtleXMgYXMgSW5kZXhhYmxlVHlwZVtdLCB2YWx1ZXM6IG9iamVjdHNUb1B1dCwgd2FudFJlc3VsdHN9XG4gICAgICApXG4gICAgICAgIC50aGVuKCh7bnVtRmFpbHVyZXMsIHJlc3VsdHMsIGxhc3RSZXN1bHQsIGZhaWx1cmVzfSkgPT4ge1xuICAgICAgICAgIGNvbnN0IHJlc3VsdCA9IHdhbnRSZXN1bHRzID8gcmVzdWx0cyA6IGxhc3RSZXN1bHQ7XG4gICAgICAgICAgaWYgKG51bUZhaWx1cmVzID09PSAwKSByZXR1cm4gcmVzdWx0O1xuICAgICAgICAgIHRocm93IG5ldyBCdWxrRXJyb3IoXG4gICAgICAgICAgICBgJHt0aGlzLm5hbWV9LmJ1bGtQdXQoKTogJHtudW1GYWlsdXJlc30gb2YgJHtudW1PYmplY3RzfSBvcGVyYXRpb25zIGZhaWxlZGAsIGZhaWx1cmVzKTtcbiAgICAgICAgfSk7XG4gICAgfSk7XG4gIH1cblxuICAvKiogVGFibGUuYnVsa1VwZGF0ZSgpXG4gICAqXG4gICAqIGh0dHBzOi8vZGV4aWUub3JnL2RvY3MvVGFibGUuVGFibGUuYnVsa1VwZGF0ZSgpXG4gICAqL1xuICAgYnVsa1VwZGF0ZShcbiAgICBrZXlzQW5kQ2hhbmdlczogcmVhZG9ubHkgeyBrZXk6IGFueTsgY2hhbmdlczogVXBkYXRlU3BlYzxhbnk+IH1bXVxuICApOiBQcm9taXNlRXh0ZW5kZWQ8bnVtYmVyPiB7XG4gICAgY29uc3QgY29yZVRhYmxlID0gdGhpcy5jb3JlO1xuICAgIGNvbnN0IGtleXMgPSBrZXlzQW5kQ2hhbmdlcy5tYXAoKGVudHJ5KSA9PiBlbnRyeS5rZXkpO1xuICAgIGNvbnN0IGNoYW5nZVNwZWNzID0ga2V5c0FuZENoYW5nZXMubWFwKChlbnRyeSkgPT4gZW50cnkuY2hhbmdlcyk7XG4gICAgY29uc3Qgb2Zmc2V0TWFwOiBudW1iZXJbXSA9IFtdO1xuICAgIHJldHVybiB0aGlzLl90cmFucygncmVhZHdyaXRlJywgKHRyYW5zKSA9PiB7XG4gICAgICByZXR1cm4gY29yZVRhYmxlLmdldE1hbnkoeyB0cmFucywga2V5cywgY2FjaGU6ICdjbG9uZScgfSkudGhlbigob2JqcykgPT4ge1xuICAgICAgICBjb25zdCByZXN1bHRLZXlzOiBhbnlbXSA9IFtdO1xuICAgICAgICBjb25zdCByZXN1bHRPYmpzOiBhbnlbXSA9IFtdO1xuICAgICAgICBrZXlzQW5kQ2hhbmdlcy5mb3JFYWNoKCh7IGtleSwgY2hhbmdlcyB9LCBpZHgpID0+IHtcbiAgICAgICAgICBjb25zdCBvYmogPSBvYmpzW2lkeF07XG4gICAgICAgICAgaWYgKG9iaikge1xuICAgICAgICAgICAgZm9yIChjb25zdCBrZXlQYXRoIG9mIE9iamVjdC5rZXlzKGNoYW5nZXMpKSB7XG4gICAgICAgICAgICAgIGNvbnN0IHZhbHVlID0gY2hhbmdlc1trZXlQYXRoXTtcbiAgICAgICAgICAgICAgaWYgKGtleVBhdGggPT09IHRoaXMuc2NoZW1hLnByaW1LZXkua2V5UGF0aCkge1xuICAgICAgICAgICAgICAgIGlmIChjbXAodmFsdWUsIGtleSkgIT09IDApIHtcbiAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBleGNlcHRpb25zLkNvbnN0cmFpbnQoXG4gICAgICAgICAgICAgICAgICAgIGBDYW5ub3QgdXBkYXRlIHByaW1hcnkga2V5IGluIGJ1bGtVcGRhdGUoKWBcbiAgICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHNldEJ5S2V5UGF0aChvYmosIGtleVBhdGgsIHZhbHVlKTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgb2Zmc2V0TWFwLnB1c2goaWR4KTtcbiAgICAgICAgICAgIHJlc3VsdEtleXMucHVzaChrZXkpO1xuICAgICAgICAgICAgcmVzdWx0T2Jqcy5wdXNoKG9iaik7XG4gICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgICAgY29uc3QgbnVtRW50cmllcyA9IHJlc3VsdEtleXMubGVuZ3RoO1xuICAgICAgICByZXR1cm4gY29yZVRhYmxlXG4gICAgICAgICAgLm11dGF0ZSh7XG4gICAgICAgICAgICB0cmFucyxcbiAgICAgICAgICAgIHR5cGU6ICdwdXQnLFxuICAgICAgICAgICAga2V5czogcmVzdWx0S2V5cyxcbiAgICAgICAgICAgIHZhbHVlczogcmVzdWx0T2JqcyxcbiAgICAgICAgICAgIHVwZGF0ZXM6IHtcbiAgICAgICAgICAgICAga2V5cyxcbiAgICAgICAgICAgICAgY2hhbmdlU3BlY3NcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9KVxuICAgICAgICAgIC50aGVuKCh7IG51bUZhaWx1cmVzLCBmYWlsdXJlcyB9KSA9PiB7XG4gICAgICAgICAgICBpZiAobnVtRmFpbHVyZXMgPT09IDApIHJldHVybiBudW1FbnRyaWVzO1xuICAgICAgICAgICAgLy8gRmFpbHVyZS4gYnVsa1B1dCgpIG1heSBoYXZlIGEgc3Vic2V0IG9mIGtleXNcbiAgICAgICAgICAgIC8vIHNvIHdlIG11c3QgdHJhbnNsYXRlIHJldHVybmVkICdmYWlsdXRlcycgaW50byB0aGUgb2Zmc2V0cyBvZiBnaXZlbiBhcmd1bWVudDpcbiAgICAgICAgICAgIGZvciAoY29uc3Qgb2Zmc2V0IG9mIE9iamVjdC5rZXlzKGZhaWx1cmVzKSkge1xuICAgICAgICAgICAgICBjb25zdCBtYXBwZWRPZmZzZXQgPSBvZmZzZXRNYXBbTnVtYmVyKG9mZnNldCldO1xuICAgICAgICAgICAgICBpZiAobWFwcGVkT2Zmc2V0ICE9IG51bGwpIHtcbiAgICAgICAgICAgICAgICBjb25zdCBmYWlsdXJlID0gZmFpbHVyZXNbb2Zmc2V0XTtcbiAgICAgICAgICAgICAgICBkZWxldGUgZmFpbHVyZXNbb2Zmc2V0XTtcbiAgICAgICAgICAgICAgICBmYWlsdXJlc1ttYXBwZWRPZmZzZXRdID0gZmFpbHVyZTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGhyb3cgbmV3IEJ1bGtFcnJvcihcbiAgICAgICAgICAgICAgYCR7dGhpcy5uYW1lfS5idWxrVXBkYXRlKCk6ICR7bnVtRmFpbHVyZXN9IG9mICR7bnVtRW50cmllc30gb3BlcmF0aW9ucyBmYWlsZWRgLFxuICAgICAgICAgICAgICBmYWlsdXJlc1xuICAgICAgICAgICAgKTtcbiAgICAgICAgICB9KTtcbiAgICAgIH0pO1xuICAgIH0pO1xuICB9XG5cbiAgLyoqIFRhYmxlLmJ1bGtEZWxldGUoKVxuICAgKiBcbiAgICogaHR0cHM6Ly9kZXhpZS5vcmcvZG9jcy9UYWJsZS9UYWJsZS5idWxrRGVsZXRlKClcbiAgICogXG4gICAqKi9cbiAgYnVsa0RlbGV0ZShrZXlzOiBSZWFkb25seUFycmF5PEluZGV4YWJsZVR5cGU+KTogUHJvbWlzZUV4dGVuZGVkPHZvaWQ+IHtcbiAgICBjb25zdCBudW1LZXlzID0ga2V5cy5sZW5ndGg7XG4gICAgcmV0dXJuIHRoaXMuX3RyYW5zKCdyZWFkd3JpdGUnLCB0cmFucyA9PiB7XG4gICAgICByZXR1cm4gdGhpcy5jb3JlLm11dGF0ZSh7dHJhbnMsIHR5cGU6ICdkZWxldGUnLCBrZXlzOiBrZXlzIGFzIEluZGV4YWJsZVR5cGVbXX0pO1xuICAgIH0pLnRoZW4oKHtudW1GYWlsdXJlcywgbGFzdFJlc3VsdCwgZmFpbHVyZXN9KSA9PiB7XG4gICAgICBpZiAobnVtRmFpbHVyZXMgPT09IDApIHJldHVybiBsYXN0UmVzdWx0O1xuICAgICAgdGhyb3cgbmV3IEJ1bGtFcnJvcihcbiAgICAgICAgYCR7dGhpcy5uYW1lfS5idWxrRGVsZXRlKCk6ICR7bnVtRmFpbHVyZXN9IG9mICR7bnVtS2V5c30gb3BlcmF0aW9ucyBmYWlsZWRgLCBmYWlsdXJlcyk7XG4gICAgfSk7XG4gIH1cbn1cbiIsICJpbXBvcnQge2tleXMsIGlzQXJyYXksIGFzYXB9IGZyb20gJy4uL2Z1bmN0aW9ucy91dGlscyc7XG5pbXBvcnQge25vcCwgbWlycm9yLCByZXZlcnNlU3RvcHBhYmxlRXZlbnRDaGFpbn0gZnJvbSAnLi4vZnVuY3Rpb25zL2NoYWluaW5nLWZ1bmN0aW9ucyc7XG5pbXBvcnQge2V4Y2VwdGlvbnN9IGZyb20gJy4uL2Vycm9ycyc7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIEV2ZW50cyhjdHgpIHtcbiAgICB2YXIgZXZzID0ge307XG4gICAgdmFyIHJ2ID0gZnVuY3Rpb24gKGV2ZW50TmFtZSwgc3Vic2NyaWJlcikge1xuICAgICAgICBpZiAoc3Vic2NyaWJlcikge1xuICAgICAgICAgICAgLy8gU3Vic2NyaWJlLiBJZiBhZGRpdGlvbmFsIGFyZ3VtZW50cyB0aGFuIGp1c3QgdGhlIHN1YnNjcmliZXIgd2FzIHByb3ZpZGVkLCBmb3J3YXJkIHRoZW0gYXMgd2VsbC5cbiAgICAgICAgICAgIHZhciBpID0gYXJndW1lbnRzLmxlbmd0aCwgYXJncyA9IG5ldyBBcnJheShpIC0gMSk7XG4gICAgICAgICAgICB3aGlsZSAoLS1pKSBhcmdzW2kgLSAxXSA9IGFyZ3VtZW50c1tpXTtcbiAgICAgICAgICAgIGV2c1tldmVudE5hbWVdLnN1YnNjcmliZS5hcHBseShudWxsLCBhcmdzKTtcbiAgICAgICAgICAgIHJldHVybiBjdHg7XG4gICAgICAgIH0gZWxzZSBpZiAodHlwZW9mIChldmVudE5hbWUpID09PSAnc3RyaW5nJykge1xuICAgICAgICAgICAgLy8gUmV0dXJuIGludGVyZmFjZSBhbGxvd2luZyB0byBmaXJlIG9yIHVuc3Vic2NyaWJlIGZyb20gZXZlbnRcbiAgICAgICAgICAgIHJldHVybiBldnNbZXZlbnROYW1lXTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgcnYuYWRkRXZlbnRUeXBlID0gYWRkO1xuICAgIFxuICAgIGZvciAodmFyIGkgPSAxLCBsID0gYXJndW1lbnRzLmxlbmd0aDsgaSA8IGw7ICsraSkge1xuICAgICAgICBhZGQoYXJndW1lbnRzW2ldKTtcbiAgICB9XG4gICAgXG4gICAgcmV0dXJuIHJ2O1xuXG4gICAgZnVuY3Rpb24gYWRkKGV2ZW50TmFtZSwgY2hhaW5GdW5jdGlvbiwgZGVmYXVsdEZ1bmN0aW9uKSB7XG4gICAgICAgIGlmICh0eXBlb2YgZXZlbnROYW1lID09PSAnb2JqZWN0JykgcmV0dXJuIGFkZENvbmZpZ3VyZWRFdmVudHMoZXZlbnROYW1lKTtcbiAgICAgICAgaWYgKCFjaGFpbkZ1bmN0aW9uKSBjaGFpbkZ1bmN0aW9uID0gcmV2ZXJzZVN0b3BwYWJsZUV2ZW50Q2hhaW47XG4gICAgICAgIGlmICghZGVmYXVsdEZ1bmN0aW9uKSBkZWZhdWx0RnVuY3Rpb24gPSBub3A7XG5cbiAgICAgICAgdmFyIGNvbnRleHQgPSB7XG4gICAgICAgICAgICBzdWJzY3JpYmVyczogW10sXG4gICAgICAgICAgICBmaXJlOiBkZWZhdWx0RnVuY3Rpb24sXG4gICAgICAgICAgICBzdWJzY3JpYmU6IGZ1bmN0aW9uIChjYikge1xuICAgICAgICAgICAgICAgIGlmIChjb250ZXh0LnN1YnNjcmliZXJzLmluZGV4T2YoY2IpID09PSAtMSkge1xuICAgICAgICAgICAgICAgICAgICBjb250ZXh0LnN1YnNjcmliZXJzLnB1c2goY2IpO1xuICAgICAgICAgICAgICAgICAgICBjb250ZXh0LmZpcmUgPSBjaGFpbkZ1bmN0aW9uKGNvbnRleHQuZmlyZSwgY2IpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB1bnN1YnNjcmliZTogZnVuY3Rpb24gKGNiKSB7XG4gICAgICAgICAgICAgICAgY29udGV4dC5zdWJzY3JpYmVycyA9IGNvbnRleHQuc3Vic2NyaWJlcnMuZmlsdGVyKGZ1bmN0aW9uIChmbikgeyByZXR1cm4gZm4gIT09IGNiOyB9KTtcbiAgICAgICAgICAgICAgICBjb250ZXh0LmZpcmUgPSBjb250ZXh0LnN1YnNjcmliZXJzLnJlZHVjZShjaGFpbkZ1bmN0aW9uLCBkZWZhdWx0RnVuY3Rpb24pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuICAgICAgICBldnNbZXZlbnROYW1lXSA9IHJ2W2V2ZW50TmFtZV0gPSBjb250ZXh0O1xuICAgICAgICByZXR1cm4gY29udGV4dDtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBhZGRDb25maWd1cmVkRXZlbnRzKGNmZykge1xuICAgICAgICAvLyBldmVudHModGhpcywge3JlYWRpbmc6IFtmdW5jdGlvbkNoYWluLCBub3BdfSk7XG4gICAgICAgIGtleXMoY2ZnKS5mb3JFYWNoKGZ1bmN0aW9uIChldmVudE5hbWUpIHtcbiAgICAgICAgICAgIHZhciBhcmdzID0gY2ZnW2V2ZW50TmFtZV07XG4gICAgICAgICAgICBpZiAoaXNBcnJheShhcmdzKSkge1xuICAgICAgICAgICAgICAgIGFkZChldmVudE5hbWUsIGNmZ1tldmVudE5hbWVdWzBdLCBjZmdbZXZlbnROYW1lXVsxXSk7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKGFyZ3MgPT09ICdhc2FwJykge1xuICAgICAgICAgICAgICAgIC8vIFJhdGhlciB0aGFuIGFwcHJvYWNoaW5nIGV2ZW50IHN1YnNjcmlwdGlvbiB1c2luZyBhIGZ1bmN0aW9uYWwgYXBwcm9hY2gsIHdlIGhlcmUgZG8gaXQgaW4gYSBmb3ItbG9vcCB3aGVyZSBzdWJzY3JpYmVyIGlzIGV4ZWN1dGVkIGluIGl0cyBvd24gc3RhY2tcbiAgICAgICAgICAgICAgICAvLyBlbmFibGluZyB0aGF0IGFueSBleGNlcHRpb24gdGhhdCBvY2N1ciB3b250IGRpc3R1cmIgdGhlIGluaXRpYXRvciBhbmQgYWxzbyBub3QgbmVzY2Vzc2FyeSBiZSBjYXRjaGVkIGFuZCBmb3Jnb3R0ZW4uXG4gICAgICAgICAgICAgICAgdmFyIGNvbnRleHQgPSBhZGQoZXZlbnROYW1lLCBtaXJyb3IsIGZ1bmN0aW9uIGZpcmUoKSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIE9wdGltYXphdGlvbi1zYWZlIGNsb25pbmcgb2YgYXJndW1lbnRzIGludG8gYXJncy5cbiAgICAgICAgICAgICAgICAgICAgdmFyIGkgPSBhcmd1bWVudHMubGVuZ3RoLCBhcmdzID0gbmV3IEFycmF5KGkpO1xuICAgICAgICAgICAgICAgICAgICB3aGlsZSAoaS0tKSBhcmdzW2ldID0gYXJndW1lbnRzW2ldO1xuICAgICAgICAgICAgICAgICAgICAvLyBBbGwgZWFjaCBzdWJzY3JpYmVyOlxuICAgICAgICAgICAgICAgICAgICBjb250ZXh0LnN1YnNjcmliZXJzLmZvckVhY2goZnVuY3Rpb24gKGZuKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBhc2FwKGZ1bmN0aW9uIGZpcmVFdmVudCgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmbi5hcHBseShudWxsLCBhcmdzKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH0gZWxzZSB0aHJvdyBuZXcgZXhjZXB0aW9ucy5JbnZhbGlkQXJndW1lbnQoXCJJbnZhbGlkIGV2ZW50IGNvbmZpZ1wiKTtcbiAgICAgICAgfSk7XG4gICAgfVxufVxuIiwgImltcG9ydCB7IGFycmF5VG9PYmplY3QsIGRlcml2ZSB9IGZyb20gJy4vdXRpbHMnO1xuXG5cbmV4cG9ydCBmdW5jdGlvbiBtYWtlQ2xhc3NDb25zdHJ1Y3RvcjxUQ29uc3RydWN0b3I+IChwcm90b3R5cGU6IE9iamVjdCwgY29uc3RydWN0b3I6IEZ1bmN0aW9uKSB7XG4gIC8qY29uc3QgcHJvcGVydHlEZXNjcmlwdG9yTWFwID0gYXJyYXlUb09iamVjdChcbiAgICBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyhwcm90b3R5cGUpLFxuICAgIHByb3BLZXkgPT4gW3Byb3BLZXksIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IocHJvdG90eXBlLCBwcm9wS2V5KV0pO1xuXG4gIC8vIEJvdGggZGVyaXZlIGFuZCBjbG9uZSB0aGUgcHJvdG90eXBlLlxuICAvLyAgIGRlcml2ZTogU28gdGhhdCB4IGluc3RhbmNlb2YgVCByZXR1cm5zIHRydWUgd2hlbiBUIGlzIHRoZSBjbGFzcyB0ZW1wbGF0ZS5cbiAgLy8gICBjbG9uZTogT3B0aW1pemVzIG1ldGhvZCBhY2Nlc3MgYSBiaXQgKGJ1dCBhY3R1YWxseSBub3QgbmVzY2Vzc2FyeSlcbiAgY29uc3QgZGVyaXZlZFByb3RvdHlwZUNsb25lID0gT2JqZWN0LmNyZWF0ZShwcm90b3R5cGUsIHByb3BlcnR5RGVzY3JpcHRvck1hcCk7XG4gIGRlcml2ZWRQcm90b3R5cGVDbG9uZS5jb25zdHJ1Y3RvciA9IGNvbnN0cnVjdG9yO1xuICBjb25zdHJ1Y3Rvci5wcm90b3R5cGUgPSBkZXJpdmVkUHJvdG90eXBlQ2xvbmU7XG4gIHJldHVybiBjb25zdHJ1Y3RvciBhcyBhbnkgYXMgVENvbnN0cnVjdG9yOyovXG5cbiAgLy8gS2VlcCB0aGUgYWJvdmUgY29kZSBpbiBjYXNlIHdlIHdhbnQgdG8gY2xvbmUgQU5EIGRlcml2ZSB0aGUgcGFyZW50IHByb3RvdHlwZS5cbiAgLy8gUmVhc29uIHdvdWxkIGJlIG9wdGltaXphdGlvbiBvZiBwcm9wZXJ0eSBhY2Nlc3MuXG4gIC8vIFRoZSBjb2RlIGJlbG93IHdpbGwgb25seSBjcmVhdGUgYSBwcm90b3R5cGFsIGluaGVyaXRhbmNlIGZyb20gZ2l2ZW4gY29uc3RydWN0b3IgZnVuY3Rpb25cbiAgLy8gdG8gZ2l2ZW4gcHJvdG90eXBlLlxuICBkZXJpdmUoY29uc3RydWN0b3IpLmZyb20oe3Byb3RvdHlwZX0pO1xuICByZXR1cm4gY29uc3RydWN0b3IgYXMgYW55IGFzIFRDb25zdHJ1Y3RvcjsgIFxufVxuIiwgImltcG9ydCB7IERleGllIH0gZnJvbSAnLi4vZGV4aWUnO1xuaW1wb3J0IHsgVGFibGVTY2hlbWEgfSBmcm9tICcuLi8uLi9wdWJsaWMvdHlwZXMvdGFibGUtc2NoZW1hJztcbmltcG9ydCB7IFRyYW5zYWN0aW9uIH0gZnJvbSAnLi4vdHJhbnNhY3Rpb24vdHJhbnNhY3Rpb24nO1xuaW1wb3J0IHsgaG9va0NyZWF0aW5nQ2hhaW4sIHB1cmVGdW5jdGlvbkNoYWluLCBub3AsIG1pcnJvciwgaG9va1VwZGF0aW5nQ2hhaW4sIGhvb2tEZWxldGluZ0NoYWluIH0gZnJvbSAnLi4vLi4vZnVuY3Rpb25zL2NoYWluaW5nLWZ1bmN0aW9ucyc7XG5pbXBvcnQgeyBUYWJsZUhvb2tzIH0gZnJvbSAnLi4vLi4vcHVibGljL3R5cGVzL3RhYmxlLWhvb2tzJztcbmltcG9ydCB7IFRhYmxlIH0gZnJvbSAnLi90YWJsZSc7XG5pbXBvcnQgRXZlbnRzIGZyb20gJy4uLy4uL2hlbHBlcnMvRXZlbnRzJztcbmltcG9ydCB7IG1ha2VDbGFzc0NvbnN0cnVjdG9yIH0gZnJvbSAnLi4vLi4vZnVuY3Rpb25zL21ha2UtY2xhc3MtY29uc3RydWN0b3InO1xuXG5leHBvcnQgaW50ZXJmYWNlIFRhYmxlQ29uc3RydWN0b3Ige1xuICBuZXcgKG5hbWU6IHN0cmluZywgdGFibGVTY2hlbWE6IFRhYmxlU2NoZW1hLCBvcHRpb25hbFRyYW5zPzogVHJhbnNhY3Rpb24pIDogVGFibGU7XG4gIHByb3RvdHlwZTogVGFibGU7XG59XG5cbi8qKiBHZW5lcmF0ZXMgYSBUYWJsZSBjb25zdHJ1Y3RvciBib3VuZCB0byBnaXZlbiBEZXhpZSBpbnN0YW5jZS5cbiAqIFxuICogVGhlIHB1cnBvc2Ugb2YgaGF2aW5nIGR5bmFtaWNhbGx5IGNyZWF0ZWQgY29uc3RydWN0b3JzLCBpcyB0byBhbGxvd1xuICogYWRkb25zIHRvIGV4dGVuZCBjbGFzc2VzIGZvciBhIGNlcnRhaW4gRGV4aWUgaW5zdGFuY2Ugd2l0aG91dCBhZmZlY3RpbmdcbiAqIG90aGVyIGRiIGluc3RhbmNlcy5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGNyZWF0ZVRhYmxlQ29uc3RydWN0b3IgKGRiOiBEZXhpZSkge1xuICByZXR1cm4gbWFrZUNsYXNzQ29uc3RydWN0b3I8VGFibGVDb25zdHJ1Y3Rvcj4oXG4gICAgVGFibGUucHJvdG90eXBlLFxuXG4gICAgZnVuY3Rpb24gVGFibGUgKHRoaXM6IFRhYmxlLCBuYW1lOiBzdHJpbmcsIHRhYmxlU2NoZW1hOiBUYWJsZVNjaGVtYSwgdHJhbnM/OiBUcmFuc2FjdGlvbikge1xuICAgICAgdGhpcy5kYiA9IGRiO1xuICAgICAgdGhpcy5fdHggPSB0cmFucztcbiAgICAgIHRoaXMubmFtZSA9IG5hbWU7XG4gICAgICB0aGlzLnNjaGVtYSA9IHRhYmxlU2NoZW1hO1xuICAgICAgdGhpcy5ob29rID0gZGIuX2FsbFRhYmxlc1tuYW1lXSA/IGRiLl9hbGxUYWJsZXNbbmFtZV0uaG9vayA6IEV2ZW50cyhudWxsLCB7XG4gICAgICAgIFwiY3JlYXRpbmdcIjogW2hvb2tDcmVhdGluZ0NoYWluLCBub3BdLFxuICAgICAgICBcInJlYWRpbmdcIjogW3B1cmVGdW5jdGlvbkNoYWluLCBtaXJyb3JdLFxuICAgICAgICBcInVwZGF0aW5nXCI6IFtob29rVXBkYXRpbmdDaGFpbiwgbm9wXSxcbiAgICAgICAgXCJkZWxldGluZ1wiOiBbaG9va0RlbGV0aW5nQ2hhaW4sIG5vcF1cbiAgICAgIH0pIGFzIFRhYmxlSG9va3M7XG4gICAgfVxuXG4gICk7XG59XG4iLCAiaW1wb3J0IHsgY29tYmluZSB9IGZyb20gXCIuLi8uLi9mdW5jdGlvbnMvY29tYmluZVwiO1xuaW1wb3J0IHsgZXhjZXB0aW9ucyB9IGZyb20gXCIuLi8uLi9lcnJvcnNcIjtcbmltcG9ydCB7IGhhc093biB9IGZyb20gXCIuLi8uLi9mdW5jdGlvbnMvdXRpbHNcIjtcbmltcG9ydCB7IHdyYXAgfSBmcm9tIFwiLi4vLi4vaGVscGVycy9wcm9taXNlXCI7XG5pbXBvcnQgeyBDb2xsZWN0aW9uIH0gZnJvbSAnLi8nO1xuaW1wb3J0IHsgREJDb3JlQ3Vyc29yLCBEQkNvcmVUYWJsZSwgREJDb3JlVHJhbnNhY3Rpb24sIERCQ29yZVRhYmxlU2NoZW1hLCBEQkNvcmVSYW5nZVR5cGUgfSBmcm9tICcuLi8uLi9wdWJsaWMvdHlwZXMvZGJjb3JlJztcbmltcG9ydCB7IG5vcCB9IGZyb20gJy4uLy4uL2Z1bmN0aW9ucy9jaGFpbmluZy1mdW5jdGlvbnMnO1xuXG50eXBlIENvbGxlY3Rpb25Db250ZXh0ID0gQ29sbGVjdGlvbltcIl9jdHhcIl07XG5cbmV4cG9ydCBmdW5jdGlvbiBpc1BsYWluS2V5UmFuZ2UgKGN0eDogQ29sbGVjdGlvbkNvbnRleHQsIGlnbm9yZUxpbWl0RmlsdGVyPzogYm9vbGVhbikge1xuICByZXR1cm4gIShjdHguZmlsdGVyIHx8IGN0eC5hbGdvcml0aG0gfHwgY3R4Lm9yKSAmJlxuICAgICAgKGlnbm9yZUxpbWl0RmlsdGVyID8gY3R4Lmp1c3RMaW1pdCA6ICFjdHgucmVwbGF5RmlsdGVyKTtcbn0gICAgXG5cbmV4cG9ydCBmdW5jdGlvbiBhZGRGaWx0ZXIoY3R4OiBDb2xsZWN0aW9uQ29udGV4dCwgZm46IEZ1bmN0aW9uKSB7XG4gIGN0eC5maWx0ZXIgPSBjb21iaW5lKGN0eC5maWx0ZXIsIGZuKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGFkZFJlcGxheUZpbHRlciAoY3R4OiBDb2xsZWN0aW9uQ29udGV4dCwgZmFjdG9yeSwgaXNMaW1pdEZpbHRlcj8pIHtcbiAgdmFyIGN1cnIgPSBjdHgucmVwbGF5RmlsdGVyO1xuICBjdHgucmVwbGF5RmlsdGVyID0gY3VyciA/ICgpPT5jb21iaW5lKGN1cnIoKSwgZmFjdG9yeSgpKSA6IGZhY3Rvcnk7XG4gIGN0eC5qdXN0TGltaXQgPSBpc0xpbWl0RmlsdGVyICYmICFjdXJyO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gYWRkTWF0Y2hGaWx0ZXIoY3R4OiBDb2xsZWN0aW9uQ29udGV4dCwgZm4pIHtcbiAgY3R4LmlzTWF0Y2ggPSBjb21iaW5lKGN0eC5pc01hdGNoLCBmbik7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBnZXRJbmRleE9yU3RvcmUoY3R4OiBDb2xsZWN0aW9uQ29udGV4dCwgY29yZVNjaGVtYTogREJDb3JlVGFibGVTY2hlbWEpIHtcbiAgLy8gVE9ETzogUmV3cml0ZSB0aGlzLiBObyBuZWVkIHRvIGtub3cgY3R4LmlzUHJpbUtleS4gY3R4LmluZGV4IHNob3VsZCBob2xkIHRoZSBrZXlwYXRoLlxuICAvLyBTdGlsbCwgdGhyb3cgaWYgbm90IGZvdW5kIVxuICBpZiAoY3R4LmlzUHJpbUtleSkgcmV0dXJuIGNvcmVTY2hlbWEucHJpbWFyeUtleTtcbiAgY29uc3QgaW5kZXggPSBjb3JlU2NoZW1hLmdldEluZGV4QnlLZXlQYXRoKGN0eC5pbmRleCk7XG4gIGlmICghaW5kZXgpIHRocm93IG5ldyBleGNlcHRpb25zLlNjaGVtYShcIktleVBhdGggXCIgKyBjdHguaW5kZXggKyBcIiBvbiBvYmplY3Qgc3RvcmUgXCIgKyBjb3JlU2NoZW1hLm5hbWUgKyBcIiBpcyBub3QgaW5kZXhlZFwiKTtcbiAgcmV0dXJuIGluZGV4O1xufVxuXG5leHBvcnQgZnVuY3Rpb24gb3BlbkN1cnNvcihjdHg6IENvbGxlY3Rpb25Db250ZXh0LCBjb3JlVGFibGU6IERCQ29yZVRhYmxlLCB0cmFuczogREJDb3JlVHJhbnNhY3Rpb24pIHtcbiAgY29uc3QgaW5kZXggPSBnZXRJbmRleE9yU3RvcmUoY3R4LCBjb3JlVGFibGUuc2NoZW1hKTtcbiAgcmV0dXJuIGNvcmVUYWJsZS5vcGVuQ3Vyc29yKHtcbiAgICB0cmFucyxcbiAgICB2YWx1ZXM6ICFjdHgua2V5c09ubHksXG4gICAgcmV2ZXJzZTogY3R4LmRpciA9PT0gJ3ByZXYnLFxuICAgIHVuaXF1ZTogISFjdHgudW5pcXVlLFxuICAgIHF1ZXJ5OiB7XG4gICAgICBpbmRleCwgXG4gICAgICByYW5nZTogY3R4LnJhbmdlXG4gICAgfVxuICB9KTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGl0ZXIgKFxuICBjdHg6IENvbGxlY3Rpb25Db250ZXh0LCBcbiAgZm46IChpdGVtLCBjdXJzb3I6IERCQ29yZUN1cnNvciwgYWR2YW5jZTogRnVuY3Rpb24pPT52b2lkLFxuICBjb3JlVHJhbnM6IERCQ29yZVRyYW5zYWN0aW9uLFxuICBjb3JlVGFibGU6IERCQ29yZVRhYmxlKTogUHJvbWlzZTxhbnk+XG57XG4gIGNvbnN0IGZpbHRlciA9IGN0eC5yZXBsYXlGaWx0ZXIgPyBjb21iaW5lKGN0eC5maWx0ZXIsIGN0eC5yZXBsYXlGaWx0ZXIoKSkgOiBjdHguZmlsdGVyO1xuICBpZiAoIWN0eC5vcikge1xuICAgICAgcmV0dXJuIGl0ZXJhdGUoXG4gICAgICAgIG9wZW5DdXJzb3IoY3R4LCBjb3JlVGFibGUsIGNvcmVUcmFucyksXG4gICAgICAgIGNvbWJpbmUoY3R4LmFsZ29yaXRobSwgZmlsdGVyKSwgZm4sICFjdHgua2V5c09ubHkgJiYgY3R4LnZhbHVlTWFwcGVyKTtcbiAgfSBlbHNlIHtcbiAgICAgIGNvbnN0IHNldCA9IHt9O1xuXG4gICAgICBjb25zdCB1bmlvbiA9IChpdGVtOiBhbnksIGN1cnNvcjogREJDb3JlQ3Vyc29yLCBhZHZhbmNlKSA9PiB7XG4gICAgICAgICAgaWYgKCFmaWx0ZXIgfHwgZmlsdGVyKGN1cnNvciwgYWR2YW5jZSwgcmVzdWx0PT5jdXJzb3Iuc3RvcChyZXN1bHQpLCBlcnIgPT4gY3Vyc29yLmZhaWwoZXJyKSkpIHtcbiAgICAgICAgICAgICAgdmFyIHByaW1hcnlLZXkgPSBjdXJzb3IucHJpbWFyeUtleTtcbiAgICAgICAgICAgICAgdmFyIGtleSA9ICcnICsgcHJpbWFyeUtleTtcbiAgICAgICAgICAgICAgaWYgKGtleSA9PT0gJ1tvYmplY3QgQXJyYXlCdWZmZXJdJykga2V5ID0gJycgKyBuZXcgVWludDhBcnJheShwcmltYXJ5S2V5KTtcbiAgICAgICAgICAgICAgaWYgKCFoYXNPd24oc2V0LCBrZXkpKSB7XG4gICAgICAgICAgICAgICAgICBzZXRba2V5XSA9IHRydWU7XG4gICAgICAgICAgICAgICAgICBmbihpdGVtLCBjdXJzb3IsIGFkdmFuY2UpO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICByZXR1cm4gUHJvbWlzZS5hbGwoW1xuICAgICAgICBjdHgub3IuX2l0ZXJhdGUodW5pb24sIGNvcmVUcmFucyksXG4gICAgICAgIGl0ZXJhdGUob3BlbkN1cnNvcihjdHgsIGNvcmVUYWJsZSwgY29yZVRyYW5zKSwgY3R4LmFsZ29yaXRobSwgdW5pb24sICFjdHgua2V5c09ubHkgJiYgY3R4LnZhbHVlTWFwcGVyKVxuICAgICAgXSk7XG4gIH1cbn1cblxuZnVuY3Rpb24gaXRlcmF0ZShjdXJzb3JQcm9taXNlOiBQcm9taXNlPERCQ29yZUN1cnNvcj4sIGZpbHRlciwgZm4sIHZhbHVlTWFwcGVyKTogUHJvbWlzZTxhbnk+IHtcbiAgXG4gIC8vIEFwcGx5IHZhbHVlTWFwcGVyIChob29rKCdyZWFkaW5nJykgb3IgbWFwcHBlZCBjbGFzcylcbiAgdmFyIG1hcHBlZEZuID0gdmFsdWVNYXBwZXIgPyAoeCxjLGEpID0+IGZuKHZhbHVlTWFwcGVyKHgpLGMsYSkgOiBmbjtcbiAgLy8gV3JhcCBmbiB3aXRoIFBTRCBhbmQgbWljcm90aWNrIHN0dWZmIGZyb20gUHJvbWlzZS5cbiAgdmFyIHdyYXBwZWRGbiA9IHdyYXAobWFwcGVkRm4pO1xuICBcbiAgcmV0dXJuIGN1cnNvclByb21pc2UudGhlbihjdXJzb3IgPT4ge1xuICAgIGlmIChjdXJzb3IpIHtcbiAgICAgIHJldHVybiBjdXJzb3Iuc3RhcnQoKCk9PntcbiAgICAgICAgdmFyIGMgPSAoKT0+Y3Vyc29yLmNvbnRpbnVlKCk7XG4gICAgICAgIGlmICghZmlsdGVyIHx8IGZpbHRlcihjdXJzb3IsIGFkdmFuY2VyID0+IGMgPSBhZHZhbmNlciwgdmFsPT57Y3Vyc29yLnN0b3AodmFsKTtjPW5vcH0sIGUgPT4ge2N1cnNvci5mYWlsKGUpO2MgPSBub3A7fSkpXG4gICAgICAgICAgd3JhcHBlZEZuKGN1cnNvci52YWx1ZSwgY3Vyc29yLCBhZHZhbmNlciA9PiBjID0gYWR2YW5jZXIpO1xuICAgICAgICBjKCk7XG4gICAgICB9KTtcbiAgICB9XG4gIH0pO1xufVxuIiwgImltcG9ydCB7IGlzQXJyYXkgfSBmcm9tIFwiLi4vZnVuY3Rpb25zL3V0aWxzXCI7XG5pbXBvcnQgeyBQcm9wTW9kU3BlYyB9IGZyb20gXCIuLi9wdWJsaWMvdHlwZXMvcHJvcC1tb2RpZmljYXRpb25cIjtcblxuZXhwb3J0IGNvbnN0IFByb3BNb2RTeW1ib2w6IHVuaXF1ZSBzeW1ib2wgPSBTeW1ib2woKTtcblxuLyoqIENvbnNpc3RlbnQgY2hhbmdlIHByb3BhZ2F0aW9uIGFjcm9zcyBvZmZsaW5lIHN5bmNlZCBkYXRhLlxuICogXG4gKiBUaGlzIGNsYXNzIGlzIGV4ZWN1dGVkIGNsaWVudC0gYW5kIHNlcnZlciBzaWRlIG9uIHN5bmMsIG1ha2luZ1xuICogYW4gb3BlcmF0aW9uIGNvbnNpc3RlbnQgYWNyb3NzIHN5bmMgZm9yIGZ1bGwgY29uc2lzdGVuY3kgYW5kIGFjY3VyYWN5LlxuICogXG4gKiBFeGFtcGxlOiBBbiBvYmplY3QgcmVwcmVzZW50cyBhIGJhbmsgYWNjb3VudCB3aXRoIGEgYmFsYW5jZS5cbiAqIE9uZSBvZmZsaW5lIHVzZXIgYWRkcyAkIDEuMDAgdG8gdGhlIGJhbGFuY2UuXG4gKiBBbm90aGVyIHVzZXIgKG9ubGluZSkgYWRkcyAkIDIuMDAgdG8gdGhlIGJhbGFuY2UuXG4gKiBXaGVuIGZpcnN0IHVzZXIgc3luY3MsIHRoZSBiYWxhbmNlIGJlY29tZXMgdGhlIHN1bSBvZiBldmVyeSBvcGVyYXRpb24gKDMuMDApLlxuICogXG4gKiAtLSBpbml0aWFsOiBiYWxhbmNlIGlzIDBcbiAqIDEuIGRiLmJhbmtBY2NvdW50cy51cGRhdGUoMSwgeyBiYWxhbmNlOiBuZXcgUHJvZE1vZGlmaWNhdGlvbih7YWRkOiAxMDB9KX0pIC8vIHVzZXIgMSAob2ZmbGluZSlcbiAqIDIuIGRiLmJhbmtBY2NvdW50cy51cGRhdGUoMSwgeyBiYWxhbmNlOiBuZXcgUHJvZE1vZGlmaWNhdGlvbih7YWRkOiAyMDB9KX0pIC8vIHVzZXIgMiAob25saW5lKVxuICogLS0gYmVmb3JlIHVzZXIgMSBzeW5jcywgYmFsYW5jZSBpcyAyMDAgKHJlcHJlc2VudGluZyBtb25leSB3aXRoIGludGVnZXJzICogMTAwIHRvIGF2b2lkIHJvdW5kaW5nIGlzc3VlcylcbiAqIDx1c2VyIDEgc3luY3M+XG4gKiAtLSBiYWxhbmNlIGlzIDMwMFxuICogXG4gKiBXaGVuIG5ldyBvcGVyYXRpb25zIGFyZSBhZGRlZCwgdGhleSBuZWVkIHRvIGJlIGFkZGVkIHRvOlxuICogMS4gUHJvcE1vZFNwZWMgaW50ZXJmYWNlXG4gKiAyLiBIZXJlIGluIFByb3BNb2RpZmljYXRpb24gd2l0aCB0aGUgbG9naWMgdGhleSByZXByZXNlbnRcbiAqIDMuIChPcHRpb25hbGx5KSBhIHN1Z2FyIGZ1bmN0aW9uIGZvciBpdCwgc3VjaCBhcyBjb25zdCBtYXRoQWRkID0gKGFtb3VudDogbnVtYmVyIHwgQmlnSW50KSA9PiBuZXcgUHJvcE1vZGlmaWNhdGlvbih7bWF0aEFkZDogYW1vdW50fSlcbiAqL1xuZXhwb3J0IGNsYXNzIFByb3BNb2RpZmljYXRpb24gaW1wbGVtZW50cyBQcm9wTW9kU3BlYyB7XG4gIFtQcm9wTW9kU3ltYm9sXT86IHRydWU7XG4gIHJlcGxhY2VQcmVmaXg/OiBbc3RyaW5nLCBzdHJpbmddO1xuICBhZGQ/OiBudW1iZXIgfCBiaWdpbnQgfCBBcnJheTxzdHJpbmcgfCBudW1iZXI+O1xuICByZW1vdmU/OiBudW1iZXIgfCBiaWdpbnQgfCBBcnJheTxzdHJpbmcgfCBudW1iZXI+O1xuXG4gIGV4ZWN1dGUodmFsdWU6IGFueSk6IGFueSB7XG4gICAgLy8gYWRkIChtYXRoZW1hdGljYWwgb3Igc2V0LXdpc2UpXG4gICAgaWYgKHRoaXMuYWRkICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIGNvbnN0IHRlcm0gPSB0aGlzLmFkZDtcbiAgICAgIC8vIFNldC1hZGRpdGlvbiBvbiBhcnJheSByZXByZXNlbnRpbmcgYSBzZXQgb2YgcHJpbWl0aXZlIHR5cGVzIChzdHJpbmdzLCBudW1iZXJzKVxuICAgICAgaWYgKGlzQXJyYXkodGVybSkpIHtcbiAgICAgICAgcmV0dXJuIFsuLi4oaXNBcnJheSh2YWx1ZSkgPyB2YWx1ZSA6IFtdKSwgLi4udGVybV0uc29ydCgpO1xuICAgICAgfVxuICAgICAgLy8gTWF0aGVtYXRpY2FsIGFkZGl0aW9uOlxuICAgICAgaWYgKHR5cGVvZiB0ZXJtID09PSAnbnVtYmVyJykgcmV0dXJuIChOdW1iZXIodmFsdWUpIHx8IDApICsgdGVybTsgLy8gaWYgdmFsdWUgaXMgbm90IGNvbnZlcnRpYmxlIHRvIG51bWJlciwgcmV0dXJuIDAgKyB0ZXJtXG4gICAgICBpZiAodHlwZW9mIHRlcm0gPT09ICdiaWdpbnQnKSB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgcmV0dXJuIEJpZ0ludCh2YWx1ZSkgKyB0ZXJtO1xuICAgICAgICB9IGNhdGNoIHtcbiAgICAgICAgICByZXR1cm4gQmlnSW50KDApICsgdGVybTsgLy8gVW5saWtlIE51bWJlcih2YWx1ZSkgdGhhdCBjYW4gcmV0dXJuIE5hTiwgQmlnSW50KHZhbHVlKSB0aHJvd3MgaWYgdmFsdWUgaXMgbm90IEJpZ0ludCwgTnVtYmVyIG9yIG51bWVyaWMgc3RyaW5nXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoYEludmFsaWQgdGVybSAke3Rlcm19YCk7XG4gICAgfVxuXG4gICAgLy8gcmVtb3ZlIChtYXRoZW1hdGljYWwgb3Igc2V0LXdpc2UpXG4gICAgaWYgKHRoaXMucmVtb3ZlICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIGNvbnN0IHN1YnRyYWhlbmQgPSB0aGlzLnJlbW92ZTtcbiAgICAgIC8vIFNldC1hZGRpdGlvbiBvbiBhcnJheSByZXByZXNlbnRpbmcgYSBzZXQgb2YgcHJpbWl0aXZlIHR5cGVzIChzdHJpbmdzLCBudW1iZXJzKVxuICAgICAgaWYgKGlzQXJyYXkoc3VidHJhaGVuZCkpIHtcbiAgICAgICAgcmV0dXJuIGlzQXJyYXkodmFsdWUpID8gdmFsdWUuZmlsdGVyKGl0ZW0gPT4gIXN1YnRyYWhlbmQuaW5jbHVkZXMoaXRlbSkpLnNvcnQoKSA6IFtdO1xuICAgICAgfSAgICAgICAgXG4gICAgICAvLyBNYXRoZW1hdGljYWwgYWRkaXRpb246XG4gICAgICBpZiAodHlwZW9mIHN1YnRyYWhlbmQgPT09ICdudW1iZXInKSByZXR1cm4gTnVtYmVyKHZhbHVlKSAtIHN1YnRyYWhlbmQ7XG4gICAgICBpZiAodHlwZW9mIHN1YnRyYWhlbmQgPT09ICdiaWdpbnQnKSB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgcmV0dXJuIEJpZ0ludCh2YWx1ZSkgLSBzdWJ0cmFoZW5kO1xuICAgICAgICB9IGNhdGNoIHtcbiAgICAgICAgICByZXR1cm4gQmlnSW50KDApIC0gc3VidHJhaGVuZDsgLy8gVW5saWtlIE51bWJlcih2YWx1ZSkgdGhhdCBjYW4gcmV0dXJuIE5hTiwgQmlnSW50KHZhbHVlKSB0aHJvd3MgaWYgdmFsdWUgaXMgbm90IEJpZ0ludCwgTnVtYmVyIG9yIG51bWVyaWMgc3RyaW5nXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoYEludmFsaWQgc3VidHJhaGVuZCAke3N1YnRyYWhlbmR9YCk7XG4gICAgfVxuXG4gICAgLy8gUmVwbGFjZSBhIHByZWZpeDpcbiAgICBjb25zdCBwcmVmaXhUb1JlcGxhY2UgPSB0aGlzLnJlcGxhY2VQcmVmaXg/LlswXTtcbiAgICBpZiAocHJlZml4VG9SZXBsYWNlICYmIHR5cGVvZiB2YWx1ZSA9PT0gJ3N0cmluZycgJiYgdmFsdWUuc3RhcnRzV2l0aChwcmVmaXhUb1JlcGxhY2UpKSB7XG4gICAgICByZXR1cm4gdGhpcy5yZXBsYWNlUHJlZml4WzFdICsgdmFsdWUuc3Vic3RyaW5nKHByZWZpeFRvUmVwbGFjZS5sZW5ndGgpO1xuICAgIH1cbiAgICByZXR1cm4gdmFsdWU7XG4gIH1cblxuICBjb25zdHJ1Y3RvcihzcGVjOiBQcm9wTW9kU3BlYykge1xuICAgIE9iamVjdC5hc3NpZ24odGhpcywgc3BlYyk7XG4gIH1cbn1cbiIsICJpbXBvcnQgeyBDb2xsZWN0aW9uIGFzIElDb2xsZWN0aW9uIH0gZnJvbSBcIi4uLy4uL3B1YmxpYy90eXBlcy9jb2xsZWN0aW9uXCI7XG5pbXBvcnQgeyBEZXhpZSB9IGZyb20gXCIuLi9kZXhpZVwiO1xuaW1wb3J0IHsgVGFibGUgfSBmcm9tIFwiLi4vdGFibGVcIjtcbmltcG9ydCB7IEluZGV4YWJsZVR5cGUsIEluZGV4YWJsZVR5cGVBcnJheVJlYWRvbmx5IH0gZnJvbSBcIi4uLy4uL3B1YmxpYy90eXBlcy9pbmRleGFibGUtdHlwZVwiO1xuaW1wb3J0IHsgUHJvbWlzZUV4dGVuZGVkIH0gZnJvbSBcIi4uLy4uL3B1YmxpYy90eXBlcy9wcm9taXNlLWV4dGVuZGVkXCI7XG5pbXBvcnQgeyBpdGVyLCBpc1BsYWluS2V5UmFuZ2UsIGdldEluZGV4T3JTdG9yZSwgYWRkUmVwbGF5RmlsdGVyLCBhZGRGaWx0ZXIsIGFkZE1hdGNoRmlsdGVyIH0gZnJvbSBcIi4vY29sbGVjdGlvbi1oZWxwZXJzXCI7XG5pbXBvcnQgeyByZWplY3Rpb24gfSBmcm9tIFwiLi4vLi4vaGVscGVycy9wcm9taXNlXCI7XG5pbXBvcnQgeyBjb21iaW5lIH0gZnJvbSBcIi4uLy4uL2Z1bmN0aW9ucy9jb21iaW5lXCI7XG5pbXBvcnQgeyBleHRlbmQsIGhhc093biwgZGVlcENsb25lLCBrZXlzLCBzZXRCeUtleVBhdGgsIGdldEJ5S2V5UGF0aCB9IGZyb20gXCIuLi8uLi9mdW5jdGlvbnMvdXRpbHNcIjtcbmltcG9ydCB7IE1vZGlmeUVycm9yIH0gZnJvbSBcIi4uLy4uL2Vycm9yc1wiO1xuaW1wb3J0IHsgVGhlblNob3J0Y3V0IH0gZnJvbSBcIi4uLy4uL3B1YmxpYy90eXBlcy90aGVuLXNob3J0Y3V0XCI7XG5pbXBvcnQgeyBUcmFuc2FjdGlvbiB9IGZyb20gJy4uL3RyYW5zYWN0aW9uJztcbmltcG9ydCB7IERCQ29yZUN1cnNvciwgREJDb3JlVHJhbnNhY3Rpb24sIERCQ29yZVJhbmdlVHlwZSwgREJDb3JlTXV0YXRlUmVzcG9uc2UsIERCQ29yZUtleVJhbmdlIH0gZnJvbSAnLi4vLi4vcHVibGljL3R5cGVzL2RiY29yZSc7XG5pbXBvcnQgeyBjbXAgfSBmcm9tIFwiLi4vLi4vZnVuY3Rpb25zL2NtcFwiO1xuaW1wb3J0IHsgUHJvcE1vZGlmaWNhdGlvbiB9IGZyb20gXCIuLi8uLi9oZWxwZXJzL3Byb3AtbW9kaWZpY2F0aW9uXCI7XG5pbXBvcnQgeyBVcGRhdGVTcGVjIH0gZnJvbSBcIi4uLy4uL3B1YmxpYy90eXBlcy91cGRhdGUtc3BlY1wiO1xuXG4vKiogY2xhc3MgQ29sbGVjdGlvblxuICogXG4gKiBodHRwczovL2RleGllLm9yZy9kb2NzL0NvbGxlY3Rpb24vQ29sbGVjdGlvblxuICovXG5leHBvcnQgY2xhc3MgQ29sbGVjdGlvbiBpbXBsZW1lbnRzIElDb2xsZWN0aW9uIHtcbiAgZGI6IERleGllO1xuICBfY3R4OiB7XG4gICAgdGFibGU6IFRhYmxlO1xuICAgIGluZGV4Pzogc3RyaW5nIHwgbnVsbDtcbiAgICBpc1ByaW1LZXk/OiBib29sZWFuO1xuICAgIHJhbmdlOiBEQkNvcmVLZXlSYW5nZTtcbiAgICBrZXlzT25seTogYm9vbGVhbjtcbiAgICBkaXI6IFwibmV4dFwiIHwgXCJwcmV2XCI7XG4gICAgdW5pcXVlOiBcIlwiIHwgXCJ1bmlxdWVcIjtcbiAgICBhbGdvcml0aG0/OiBGdW5jdGlvbiB8IG51bGw7XG4gICAgZmlsdGVyPzogRnVuY3Rpb24gfCBudWxsO1xuICAgIHJlcGxheUZpbHRlcjogRnVuY3Rpb24gfCBudWxsO1xuICAgIGp1c3RMaW1pdDogYm9vbGVhbjsgLy8gVHJ1ZSBpZiBhIHJlcGxheUZpbHRlciBpcyBqdXN0IGEgZmlsdGVyIHRoYXQgcGVyZm9ybXMgYSBcImxpbWl0XCIgb3BlcmF0aW9uIChvciBub25lIGF0IGFsbClcbiAgICBpc01hdGNoOiBGdW5jdGlvbiB8IG51bGw7XG4gICAgb2Zmc2V0OiBudW1iZXIsXG4gICAgbGltaXQ6IG51bWJlcixcbiAgICBlcnJvcjogYW55LCAvLyBJZiBzZXQsIGFueSBwcm9taXNlIG11c3QgYmUgcmVqZWN0ZWQgd2l0aCB0aGlzIGVycm9yXG4gICAgb3I6IENvbGxlY3Rpb24sXG4gICAgdmFsdWVNYXBwZXI6IChhbnkpID0+IGFueVxuICB9XG4gIFxuICBfb25kaXJlY3Rpb25jaGFuZ2U/OiBGdW5jdGlvbjtcblxuICBfcmVhZDxUPihmbjogKGlkYnRyYW5zOiBJREJUcmFuc2FjdGlvbiwgZHhUcmFuczogVHJhbnNhY3Rpb24pID0+IFByb21pc2VMaWtlPFQ+LCBjYj8pOiBQcm9taXNlRXh0ZW5kZWQ8VD4ge1xuICAgIHZhciBjdHggPSB0aGlzLl9jdHg7XG4gICAgcmV0dXJuIGN0eC5lcnJvciA/XG4gICAgICBjdHgudGFibGUuX3RyYW5zKG51bGwsIHJlamVjdGlvbi5iaW5kKG51bGwsIGN0eC5lcnJvcikpIDpcbiAgICAgIGN0eC50YWJsZS5fdHJhbnMoJ3JlYWRvbmx5JywgZm4pLnRoZW4oY2IpO1xuICB9XG5cbiAgX3dyaXRlPFQ+KGZuOiAoaWRidHJhbnM6IElEQlRyYW5zYWN0aW9uLCBkeFRyYW5zOiBUcmFuc2FjdGlvbikgPT4gUHJvbWlzZUxpa2U8VD4pOiBQcm9taXNlRXh0ZW5kZWQ8VD4ge1xuICAgIHZhciBjdHggPSB0aGlzLl9jdHg7XG4gICAgcmV0dXJuIGN0eC5lcnJvciA/XG4gICAgICBjdHgudGFibGUuX3RyYW5zKG51bGwsIHJlamVjdGlvbi5iaW5kKG51bGwsIGN0eC5lcnJvcikpIDpcbiAgICAgIGN0eC50YWJsZS5fdHJhbnMoJ3JlYWR3cml0ZScsIGZuLCBcImxvY2tlZFwiKTsgLy8gV2hlbiBkb2luZyB3cml0ZSBvcGVyYXRpb25zIG9uIGNvbGxlY3Rpb25zLCBhbHdheXMgbG9jayB0aGUgb3BlcmF0aW9uIHNvIHRoYXQgdXBjb21pbmcgb3BlcmF0aW9ucyBnZXRzIHF1ZXVlZC5cbiAgfVxuXG4gIF9hZGRBbGdvcml0aG0oZm4pIHtcbiAgICB2YXIgY3R4ID0gdGhpcy5fY3R4O1xuICAgIGN0eC5hbGdvcml0aG0gPSBjb21iaW5lKGN0eC5hbGdvcml0aG0sIGZuKTtcbiAgfVxuXG4gIF9pdGVyYXRlKFxuICAgIGZuOiAoaXRlbSwgY3Vyc29yOiBEQkNvcmVDdXJzb3IsIGFkdmFuY2U6IEZ1bmN0aW9uKSA9PiB2b2lkLFxuICAgIGNvcmVUcmFuczogREJDb3JlVHJhbnNhY3Rpb24pIDogUHJvbWlzZTxhbnk+XG4gIHtcbiAgICByZXR1cm4gaXRlcih0aGlzLl9jdHgsIGZuLCBjb3JlVHJhbnMsIHRoaXMuX2N0eC50YWJsZS5jb3JlKTtcbiAgfVxuXG4gIC8qKiBDb2xsZWN0aW9uLmNsb25lKClcbiAgICogXG4gICAqIGh0dHBzOi8vZGV4aWUub3JnL2RvY3MvQ29sbGVjdGlvbi9Db2xsZWN0aW9uLmNsb25lKClcbiAgICogXG4gICAqKi9cbiAgY2xvbmUocHJvcHM/KTogdGhpcyB7XG4gICAgdmFyIHJ2ID0gT2JqZWN0LmNyZWF0ZSh0aGlzLmNvbnN0cnVjdG9yLnByb3RvdHlwZSksXG4gICAgICBjdHggPSBPYmplY3QuY3JlYXRlKHRoaXMuX2N0eCk7XG4gICAgaWYgKHByb3BzKSBleHRlbmQoY3R4LCBwcm9wcyk7XG4gICAgcnYuX2N0eCA9IGN0eDtcbiAgICByZXR1cm4gcnY7XG4gIH1cblxuICAvKiogQ29sbGVjdGlvbi5yYXcoKVxuICAgKiBcbiAgICogaHR0cHM6Ly9kZXhpZS5vcmcvZG9jcy9Db2xsZWN0aW9uL0NvbGxlY3Rpb24ucmF3KClcbiAgICogXG4gICAqKi9cbiAgcmF3KCk6IHRoaXMge1xuICAgIHRoaXMuX2N0eC52YWx1ZU1hcHBlciA9IG51bGw7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cblxuICAvKiogQ29sbGVjdGlvbi5lYWNoKClcbiAgICogXG4gICAqIGh0dHBzOi8vZGV4aWUub3JnL2RvY3MvQ29sbGVjdGlvbi9Db2xsZWN0aW9uLmVhY2goKVxuICAgKiBcbiAgICoqL1xuICBlYWNoKGZuOiAob2JqLCBjdXJzb3I6IERCQ29yZUN1cnNvcikgPT4gYW55KTogUHJvbWlzZUV4dGVuZGVkPHZvaWQ+IHtcbiAgICB2YXIgY3R4ID0gdGhpcy5fY3R4O1xuXG4gICAgcmV0dXJuIHRoaXMuX3JlYWQodHJhbnMgPT4gaXRlcihjdHgsIGZuLCB0cmFucywgY3R4LnRhYmxlLmNvcmUpKTtcbiAgfVxuXG4gIC8qKiBDb2xsZWN0aW9uLmNvdW50KClcbiAgICogXG4gICAqIGh0dHBzOi8vZGV4aWUub3JnL2RvY3MvQ29sbGVjdGlvbi9Db2xsZWN0aW9uLmNvdW50KClcbiAgICogXG4gICAqKi9cbiAgY291bnQoY2I/KSB7XG4gICAgcmV0dXJuIHRoaXMuX3JlYWQodHJhbnMgPT4ge1xuICAgICAgY29uc3QgY3R4ID0gdGhpcy5fY3R4O1xuICAgICAgY29uc3QgY29yZVRhYmxlID0gY3R4LnRhYmxlLmNvcmU7XG4gICAgICBpZiAoaXNQbGFpbktleVJhbmdlKGN0eCwgdHJ1ZSkpIHtcbiAgICAgICAgLy8gVGhpcyBpcyBhIHBsYWluIGtleSByYW5nZS4gV2UgY2FuIHVzZSB0aGUgY291bnQoKSBtZXRob2QgaWYgdGhlIGluZGV4LlxuICAgICAgICByZXR1cm4gY29yZVRhYmxlLmNvdW50KHtcbiAgICAgICAgICB0cmFucyxcbiAgICAgICAgICBxdWVyeToge1xuICAgICAgICAgICAgaW5kZXg6IGdldEluZGV4T3JTdG9yZShjdHgsIGNvcmVUYWJsZS5zY2hlbWEpLFxuICAgICAgICAgICAgcmFuZ2U6IGN0eC5yYW5nZVxuICAgICAgICAgIH1cbiAgICAgICAgfSkudGhlbihjb3VudCA9PiBNYXRoLm1pbihjb3VudCwgY3R4LmxpbWl0KSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICAvLyBBbGdvcml0aG1zLCBmaWx0ZXJzIG9yIGV4cHJlc3Npb25zIGFyZSBhcHBsaWVkLiBOZWVkIHRvIGNvdW50IG1hbnVhbGx5LlxuICAgICAgICB2YXIgY291bnQgPSAwO1xuICAgICAgICByZXR1cm4gaXRlcihjdHgsICgpID0+IHsgKytjb3VudDsgcmV0dXJuIGZhbHNlOyB9LCB0cmFucywgY29yZVRhYmxlKVxuICAgICAgICAudGhlbigoKT0+Y291bnQpO1xuICAgICAgfVxuICAgIH0pLnRoZW4oY2IpO1xuICB9XG5cbiAgLyoqIENvbGxlY3Rpb24uc29ydEJ5KClcbiAgICogXG4gICAqIGh0dHBzOi8vZGV4aWUub3JnL2RvY3MvQ29sbGVjdGlvbi9Db2xsZWN0aW9uLnNvcnRCeSgpXG4gICAqIFxuICAgKiovXG4gIHNvcnRCeShrZXlQYXRoOiBzdHJpbmcpOiBQcm9taXNlRXh0ZW5kZWQ8YW55W10+O1xuICBzb3J0Qnk8Uj4oa2V5UGF0aDogc3RyaW5nLCB0aGVuU2hvcnRjdXQ6IFRoZW5TaG9ydGN1dDxhbnlbXSwgUj4pIDogUHJvbWlzZUV4dGVuZGVkPFI+O1xuICBzb3J0Qnkoa2V5UGF0aDogc3RyaW5nLCBjYj86IFRoZW5TaG9ydGN1dDxhbnlbXSwgYW55Pikge1xuICAgIGNvbnN0IHBhcnRzID0ga2V5UGF0aC5zcGxpdCgnLicpLnJldmVyc2UoKSxcbiAgICAgIGxhc3RQYXJ0ID0gcGFydHNbMF0sXG4gICAgICBsYXN0SW5kZXggPSBwYXJ0cy5sZW5ndGggLSAxO1xuICAgIGZ1bmN0aW9uIGdldHZhbChvYmosIGkpIHtcbiAgICAgIGlmIChpKSByZXR1cm4gZ2V0dmFsKG9ialtwYXJ0c1tpXV0sIGkgLSAxKTtcbiAgICAgIHJldHVybiBvYmpbbGFzdFBhcnRdO1xuICAgIH1cbiAgICB2YXIgb3JkZXIgPSB0aGlzLl9jdHguZGlyID09PSBcIm5leHRcIiA/IDEgOiAtMTtcblxuICAgIGZ1bmN0aW9uIHNvcnRlcihhLCBiKSB7XG4gICAgICB2YXIgYVZhbCA9IGdldHZhbChhLCBsYXN0SW5kZXgpLFxuICAgICAgICBiVmFsID0gZ2V0dmFsKGIsIGxhc3RJbmRleCk7XG4gICAgICByZXR1cm4gYVZhbCA8IGJWYWwgPyAtb3JkZXIgOiBhVmFsID4gYlZhbCA/IG9yZGVyIDogMDtcbiAgICB9XG4gICAgcmV0dXJuIHRoaXMudG9BcnJheShmdW5jdGlvbiAoYSkge1xuICAgICAgcmV0dXJuIGEuc29ydChzb3J0ZXIpO1xuICAgIH0pLnRoZW4oY2IpO1xuICB9XG5cbiAgLyoqIENvbGxlY3Rpb24udG9BcnJheSgpXG4gICAqIFxuICAgKiBodHRwczovL2RleGllLm9yZy9kb2NzL0NvbGxlY3Rpb24vQ29sbGVjdGlvbi50b0FycmF5KClcbiAgICogXG4gICAqKi9cbiAgdG9BcnJheShjYj8pOiBQcm9taXNlRXh0ZW5kZWQ8YW55W10+IHtcbiAgICByZXR1cm4gdGhpcy5fcmVhZCh0cmFucyA9PiB7XG4gICAgICB2YXIgY3R4ID0gdGhpcy5fY3R4O1xuICAgICAgaWYgKGN0eC5kaXIgPT09ICduZXh0JyAmJiBpc1BsYWluS2V5UmFuZ2UoY3R4LCB0cnVlKSAmJiBjdHgubGltaXQgPiAwKSB7XG4gICAgICAgIC8vIFNwZWNpYWwgb3B0aW1hdGlvbiBpZiB3ZSBjb3VsZCB1c2UgSURCT2JqZWN0U3RvcmUuZ2V0QWxsKCkgb3JcbiAgICAgICAgLy8gSURCS2V5UmFuZ2UuZ2V0QWxsKCk6XG4gICAgICAgIGNvbnN0IHt2YWx1ZU1hcHBlcn0gPSBjdHg7XG4gICAgICAgIGNvbnN0IGluZGV4ID0gZ2V0SW5kZXhPclN0b3JlKGN0eCwgY3R4LnRhYmxlLmNvcmUuc2NoZW1hKTtcbiAgICAgICAgcmV0dXJuIGN0eC50YWJsZS5jb3JlLnF1ZXJ5KHtcbiAgICAgICAgICB0cmFucyxcbiAgICAgICAgICBsaW1pdDogY3R4LmxpbWl0LFxuICAgICAgICAgIHZhbHVlczogdHJ1ZSxcbiAgICAgICAgICBxdWVyeToge1xuICAgICAgICAgICAgaW5kZXgsXG4gICAgICAgICAgICByYW5nZTogY3R4LnJhbmdlXG4gICAgICAgICAgfVxuICAgICAgICB9KS50aGVuKCh7cmVzdWx0fSkgPT4gdmFsdWVNYXBwZXIgPyByZXN1bHQubWFwKHZhbHVlTWFwcGVyKSA6IHJlc3VsdCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICAvLyBHZXR0aW5nIGFycmF5IHRocm91Z2ggYSBjdXJzb3IuXG4gICAgICAgIGNvbnN0IGEgPSBbXTtcbiAgICAgICAgcmV0dXJuIGl0ZXIoY3R4LCBpdGVtID0+IGEucHVzaChpdGVtKSwgdHJhbnMsIGN0eC50YWJsZS5jb3JlKS50aGVuKCgpPT5hKTtcbiAgICAgIH1cbiAgICB9LCBjYik7XG4gIH1cblxuICAvKiogQ29sbGVjdGlvbi5vZmZzZXQoKVxuICAgKiBcbiAgICogaHR0cHM6Ly9kZXhpZS5vcmcvZG9jcy9Db2xsZWN0aW9uL0NvbGxlY3Rpb24ub2Zmc2V0KClcbiAgICogXG4gICAqKi9cbiAgb2Zmc2V0KG9mZnNldDogbnVtYmVyKSA6IENvbGxlY3Rpb257XG4gICAgdmFyIGN0eCA9IHRoaXMuX2N0eDtcbiAgICBpZiAob2Zmc2V0IDw9IDApIHJldHVybiB0aGlzO1xuICAgIGN0eC5vZmZzZXQgKz0gb2Zmc2V0OyAvLyBGb3IgY291bnQoKVxuICAgIGlmIChpc1BsYWluS2V5UmFuZ2UoY3R4KSkge1xuICAgICAgYWRkUmVwbGF5RmlsdGVyKGN0eCwgKCkgPT4ge1xuICAgICAgICB2YXIgb2Zmc2V0TGVmdCA9IG9mZnNldDtcbiAgICAgICAgcmV0dXJuIChjdXJzb3IsIGFkdmFuY2UpID0+IHtcbiAgICAgICAgICBpZiAob2Zmc2V0TGVmdCA9PT0gMCkgcmV0dXJuIHRydWU7XG4gICAgICAgICAgaWYgKG9mZnNldExlZnQgPT09IDEpIHsgLS1vZmZzZXRMZWZ0OyByZXR1cm4gZmFsc2U7IH1cbiAgICAgICAgICBhZHZhbmNlKCgpID0+IHtcbiAgICAgICAgICAgIGN1cnNvci5hZHZhbmNlKG9mZnNldExlZnQpO1xuICAgICAgICAgICAgb2Zmc2V0TGVmdCA9IDA7XG4gICAgICAgICAgfSk7XG4gICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9O1xuICAgICAgfSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGFkZFJlcGxheUZpbHRlcihjdHgsICgpID0+IHtcbiAgICAgICAgdmFyIG9mZnNldExlZnQgPSBvZmZzZXQ7XG4gICAgICAgIHJldHVybiAoKSA9PiAoLS1vZmZzZXRMZWZ0IDwgMCk7XG4gICAgICB9KTtcbiAgICB9XG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cblxuICAvKiogQ29sbGVjdGlvbi5saW1pdCgpXG4gICAqIFxuICAgKiBodHRwczovL2RleGllLm9yZy9kb2NzL0NvbGxlY3Rpb24vQ29sbGVjdGlvbi5saW1pdCgpXG4gICAqIFxuICAgKiovXG4gIGxpbWl0KG51bVJvd3M6IG51bWJlcikgOiBDb2xsZWN0aW9uIHtcbiAgICB0aGlzLl9jdHgubGltaXQgPSBNYXRoLm1pbih0aGlzLl9jdHgubGltaXQsIG51bVJvd3MpOyAvLyBGb3IgY291bnQoKVxuICAgIGFkZFJlcGxheUZpbHRlcih0aGlzLl9jdHgsICgpID0+IHtcbiAgICAgIHZhciByb3dzTGVmdCA9IG51bVJvd3M7XG4gICAgICByZXR1cm4gZnVuY3Rpb24gKGN1cnNvciwgYWR2YW5jZSwgcmVzb2x2ZSkge1xuICAgICAgICBpZiAoLS1yb3dzTGVmdCA8PSAwKSBhZHZhbmNlKHJlc29sdmUpOyAvLyBTdG9wIGFmdGVyIHRoaXMgaXRlbSBoYXMgYmVlbiBpbmNsdWRlZFxuICAgICAgICByZXR1cm4gcm93c0xlZnQgPj0gMDsgLy8gSWYgbnVtUm93cyBpcyBhbHJlYWR5IGJlbG93IDAsIHJldHVybiBmYWxzZSBiZWNhdXNlIHRoZW4gMCB3YXMgcGFzc2VkIHRvIG51bVJvd3MgaW5pdGlhbGx5LiBPdGhlcndpc2Ugd2Ugd291bGRudCBjb21lIGhlcmUuXG4gICAgICB9O1xuICAgIH0sIHRydWUpO1xuICAgIHJldHVybiB0aGlzO1xuICB9XG5cbiAgLyoqIENvbGxlY3Rpb24udW50aWwoKVxuICAgKiBcbiAgICogaHR0cHM6Ly9kZXhpZS5vcmcvZG9jcy9Db2xsZWN0aW9uL0NvbGxlY3Rpb24udW50aWwoKVxuICAgKiBcbiAgICoqL1xuICB1bnRpbChmaWx0ZXJGdW5jdGlvbjogKHgpID0+IGJvb2xlYW4sIGJJbmNsdWRlU3RvcEVudHJ5Pykge1xuICAgIGFkZEZpbHRlcih0aGlzLl9jdHgsIGZ1bmN0aW9uIChjdXJzb3IsIGFkdmFuY2UsIHJlc29sdmUpIHtcbiAgICAgIGlmIChmaWx0ZXJGdW5jdGlvbihjdXJzb3IudmFsdWUpKSB7XG4gICAgICAgIGFkdmFuY2UocmVzb2x2ZSk7XG4gICAgICAgIHJldHVybiBiSW5jbHVkZVN0b3BFbnRyeTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgfVxuICAgIH0pO1xuICAgIHJldHVybiB0aGlzO1xuICB9XG5cbiAgLyoqIENvbGxlY3Rpb24uZmlyc3QoKVxuICAgKiBcbiAgICogaHR0cHM6Ly9kZXhpZS5vcmcvZG9jcy9Db2xsZWN0aW9uL0NvbGxlY3Rpb24uZmlyc3QoKVxuICAgKiBcbiAgICoqL1xuICBmaXJzdChjYj8pIHtcbiAgICByZXR1cm4gdGhpcy5saW1pdCgxKS50b0FycmF5KGZ1bmN0aW9uIChhKSB7IHJldHVybiBhWzBdOyB9KS50aGVuKGNiKTtcbiAgfVxuXG4gIC8qKiBDb2xsZWN0aW9uLmxhc3QoKVxuICAgKiBcbiAgICogaHR0cHM6Ly9kZXhpZS5vcmcvZG9jcy9Db2xsZWN0aW9uL0NvbGxlY3Rpb24ubGFzdCgpXG4gICAqIFxuICAgKiovXG4gIGxhc3QoY2I/KSB7XG4gICAgcmV0dXJuIHRoaXMucmV2ZXJzZSgpLmZpcnN0KGNiKTtcbiAgfVxuXG4gIC8qKiBDb2xsZWN0aW9uLmZpbHRlcigpXG4gICAqIFxuICAgKiBodHRwczovL2RleGllLm9yZy9kb2NzL0NvbGxlY3Rpb24vQ29sbGVjdGlvbi5maWx0ZXIoKVxuICAgKiBcbiAgICoqL1xuICBmaWx0ZXIoZmlsdGVyRnVuY3Rpb246ICh4KSA9PiBib29sZWFuKTogQ29sbGVjdGlvbiB7XG4gICAgLy8vIDxwYXJhbSBuYW1lPVwianNGdW5jdGlvbkZpbHRlclwiIHR5cGU9XCJGdW5jdGlvblwiPmZ1bmN0aW9uKHZhbCl7cmV0dXJuIHRydWUvZmFsc2V9PC9wYXJhbT5cbiAgICBhZGRGaWx0ZXIodGhpcy5fY3R4LCBmdW5jdGlvbiAoY3Vyc29yKSB7XG4gICAgICByZXR1cm4gZmlsdGVyRnVuY3Rpb24oY3Vyc29yLnZhbHVlKTtcbiAgICB9KTtcbiAgICAvLyBtYXRjaCBmaWx0ZXJzIG5vdCB1c2VkIGluIERleGllLmpzIGJ1dCBjYW4gYmUgdXNlZCBieSAzcmQgcGFydCBsaWJyYXJpZXMgdG8gdGVzdCBhXG4gICAgLy8gY29sbGVjdGlvbiBmb3IgYSBtYXRjaCB3aXRob3V0IHF1ZXJ5aW5nIERCLiBVc2VkIGJ5IERleGllLk9ic2VydmFibGUuXG4gICAgYWRkTWF0Y2hGaWx0ZXIodGhpcy5fY3R4LCBmaWx0ZXJGdW5jdGlvbik7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cblxuICAvKiogQ29sbGVjdGlvbi5hbmQoKVxuICAgKiBcbiAgICogaHR0cHM6Ly9kZXhpZS5vcmcvZG9jcy9Db2xsZWN0aW9uL0NvbGxlY3Rpb24uYW5kKClcbiAgICogXG4gICAqKi9cbiAgYW5kKGZpbHRlcjogKHgpID0+IGJvb2xlYW4pIHtcbiAgICByZXR1cm4gdGhpcy5maWx0ZXIoZmlsdGVyKTtcbiAgfVxuXG4gIC8qKiBDb2xsZWN0aW9uLm9yKClcbiAgICogXG4gICAqIGh0dHBzOi8vZGV4aWUub3JnL2RvY3MvQ29sbGVjdGlvbi9Db2xsZWN0aW9uLm9yKClcbiAgICogXG4gICAqKi9cbiAgb3IoaW5kZXhOYW1lOiBzdHJpbmcpIHtcbiAgICByZXR1cm4gbmV3IHRoaXMuZGIuV2hlcmVDbGF1c2UodGhpcy5fY3R4LnRhYmxlLCBpbmRleE5hbWUsIHRoaXMpO1xuICB9XG5cbiAgLyoqIENvbGxlY3Rpb24ucmV2ZXJzZSgpXG4gICAqIFxuICAgKiBodHRwczovL2RleGllLm9yZy9kb2NzL0NvbGxlY3Rpb24vQ29sbGVjdGlvbi5yZXZlcnNlKClcbiAgICogXG4gICAqKi9cbiAgcmV2ZXJzZSgpIHtcbiAgICB0aGlzLl9jdHguZGlyID0gKHRoaXMuX2N0eC5kaXIgPT09IFwicHJldlwiID8gXCJuZXh0XCIgOiBcInByZXZcIik7XG4gICAgaWYgKHRoaXMuX29uZGlyZWN0aW9uY2hhbmdlKSB0aGlzLl9vbmRpcmVjdGlvbmNoYW5nZSh0aGlzLl9jdHguZGlyKTtcbiAgICByZXR1cm4gdGhpcztcbiAgfVxuXG4gIC8qKiBDb2xsZWN0aW9uLmRlc2MoKVxuICAgKiBcbiAgICogaHR0cHM6Ly9kZXhpZS5vcmcvZG9jcy9Db2xsZWN0aW9uL0NvbGxlY3Rpb24uZGVzYygpXG4gICAqIFxuICAgKiovXG4gIGRlc2MoKSB7XG4gICAgcmV0dXJuIHRoaXMucmV2ZXJzZSgpO1xuICB9XG5cbiAgLyoqIENvbGxlY3Rpb24uZWFjaEtleSgpXG4gICAqIFxuICAgKiBodHRwczovL2RleGllLm9yZy9kb2NzL0NvbGxlY3Rpb24vQ29sbGVjdGlvbi5lYWNoS2V5KClcbiAgICogXG4gICAqKi9cbiAgZWFjaEtleShjYj8pIHtcbiAgICB2YXIgY3R4ID0gdGhpcy5fY3R4O1xuICAgIGN0eC5rZXlzT25seSA9ICFjdHguaXNNYXRjaDtcbiAgICByZXR1cm4gdGhpcy5lYWNoKGZ1bmN0aW9uICh2YWwsIGN1cnNvcikgeyBjYihjdXJzb3Iua2V5LCBjdXJzb3IpOyB9KTtcbiAgfVxuXG4gIC8qKiBDb2xsZWN0aW9uLmVhY2hVbmlxdWVLZXkoKVxuICAgKiBcbiAgICogaHR0cHM6Ly9kZXhpZS5vcmcvZG9jcy9Db2xsZWN0aW9uL0NvbGxlY3Rpb24uZWFjaFVuaXF1ZUtleSgpXG4gICAqIFxuICAgKiovXG4gIGVhY2hVbmlxdWVLZXkoY2I/KSB7XG4gICAgdGhpcy5fY3R4LnVuaXF1ZSA9IFwidW5pcXVlXCI7XG4gICAgcmV0dXJuIHRoaXMuZWFjaEtleShjYik7XG4gIH1cblxuICAvKiogQ29sbGVjdGlvbi5lYWNoUHJpbWFyeUtleSgpXG4gICAqIFxuICAgKiBodHRwczovL2RleGllLm9yZy9kb2NzL0NvbGxlY3Rpb24vQ29sbGVjdGlvbi5lYWNoUHJpbWFyeUtleSgpXG4gICAqIFxuICAgKiovXG4gIGVhY2hQcmltYXJ5S2V5KGNiPykge1xuICAgIHZhciBjdHggPSB0aGlzLl9jdHg7XG4gICAgY3R4LmtleXNPbmx5ID0gIWN0eC5pc01hdGNoO1xuICAgIHJldHVybiB0aGlzLmVhY2goZnVuY3Rpb24gKHZhbCwgY3Vyc29yKSB7IGNiKGN1cnNvci5wcmltYXJ5S2V5LCBjdXJzb3IpOyB9KTtcbiAgfVxuXG4gIC8qKiBDb2xsZWN0aW9uLmtleXMoKVxuICAgKiBcbiAgICogaHR0cHM6Ly9kZXhpZS5vcmcvZG9jcy9Db2xsZWN0aW9uL0NvbGxlY3Rpb24ua2V5cygpXG4gICAqIFxuICAgKiovXG4gIGtleXMoY2I/KSB7XG4gICAgdmFyIGN0eCA9IHRoaXMuX2N0eDtcbiAgICBjdHgua2V5c09ubHkgPSAhY3R4LmlzTWF0Y2g7XG4gICAgdmFyIGEgPSBbXTtcbiAgICByZXR1cm4gdGhpcy5lYWNoKGZ1bmN0aW9uIChpdGVtLCBjdXJzb3IpIHtcbiAgICAgIGEucHVzaChjdXJzb3Iua2V5KTtcbiAgICB9KS50aGVuKGZ1bmN0aW9uICgpIHtcbiAgICAgIHJldHVybiBhO1xuICAgIH0pLnRoZW4oY2IpO1xuICB9XG5cbiAgLyoqIENvbGxlY3Rpb24ucHJpbWFyeUtleXMoKVxuICAgKiBcbiAgICogaHR0cHM6Ly9kZXhpZS5vcmcvZG9jcy9Db2xsZWN0aW9uL0NvbGxlY3Rpb24ucHJpbWFyeUtleXMoKVxuICAgKiBcbiAgICoqL1xuICBwcmltYXJ5S2V5cyhjYj8pIDogUHJvbWlzZUV4dGVuZGVkPEluZGV4YWJsZVR5cGVbXT4ge1xuICAgIHZhciBjdHggPSB0aGlzLl9jdHg7XG4gICAgaWYgKGN0eC5kaXIgPT09ICduZXh0JyAmJiBpc1BsYWluS2V5UmFuZ2UoY3R4LCB0cnVlKSAmJiBjdHgubGltaXQgPiAwKSB7XG4gICAgICAvLyBTcGVjaWFsIG9wdGltYXRpb24gaWYgd2UgY291bGQgdXNlIElEQk9iamVjdFN0b3JlLmdldEFsbEtleXMoKSBvclxuICAgICAgLy8gSURCS2V5UmFuZ2UuZ2V0QWxsS2V5cygpOlxuICAgICAgcmV0dXJuIHRoaXMuX3JlYWQodHJhbnMgPT4ge1xuICAgICAgICB2YXIgaW5kZXggPSBnZXRJbmRleE9yU3RvcmUoY3R4LCBjdHgudGFibGUuY29yZS5zY2hlbWEpO1xuICAgICAgICByZXR1cm4gY3R4LnRhYmxlLmNvcmUucXVlcnkoe1xuICAgICAgICAgIHRyYW5zLFxuICAgICAgICAgIHZhbHVlczogZmFsc2UsXG4gICAgICAgICAgbGltaXQ6IGN0eC5saW1pdCxcbiAgICAgICAgICBxdWVyeToge1xuICAgICAgICAgICAgaW5kZXgsXG4gICAgICAgICAgICByYW5nZTogY3R4LnJhbmdlXG4gICAgICAgICAgfX0pO1xuICAgICAgfSkudGhlbigoe3Jlc3VsdH0pPT5yZXN1bHQpLnRoZW4oY2IpO1xuICAgIH1cbiAgICBjdHgua2V5c09ubHkgPSAhY3R4LmlzTWF0Y2g7XG4gICAgdmFyIGEgPSBbXTtcbiAgICByZXR1cm4gdGhpcy5lYWNoKGZ1bmN0aW9uIChpdGVtLCBjdXJzb3IpIHtcbiAgICAgIGEucHVzaChjdXJzb3IucHJpbWFyeUtleSk7XG4gICAgfSkudGhlbihmdW5jdGlvbiAoKSB7XG4gICAgICByZXR1cm4gYTtcbiAgICB9KS50aGVuKGNiKTtcbiAgfVxuXG4gIC8qKiBDb2xsZWN0aW9uLnVuaXF1ZUtleXMoKVxuICAgKiBcbiAgICogaHR0cHM6Ly9kZXhpZS5vcmcvZG9jcy9Db2xsZWN0aW9uL0NvbGxlY3Rpb24udW5pcXVlS2V5cygpXG4gICAqIFxuICAgKiovXG4gIHVuaXF1ZUtleXMoY2I/KSB7XG4gICAgdGhpcy5fY3R4LnVuaXF1ZSA9IFwidW5pcXVlXCI7XG4gICAgcmV0dXJuIHRoaXMua2V5cyhjYik7XG4gIH1cblxuICAvKiogQ29sbGVjdGlvbi5maXJzdEtleSgpXG4gICAqIFxuICAgKiBodHRwczovL2RleGllLm9yZy9kb2NzL0NvbGxlY3Rpb24vQ29sbGVjdGlvbi5maXJzdEtleSgpXG4gICAqIFxuICAgKiovXG4gIGZpcnN0S2V5KGNiPykge1xuICAgIHJldHVybiB0aGlzLmxpbWl0KDEpLmtleXMoZnVuY3Rpb24gKGEpIHsgcmV0dXJuIGFbMF07IH0pLnRoZW4oY2IpO1xuICB9XG5cbiAgLyoqIENvbGxlY3Rpb24ubGFzdEtleSgpXG4gICAqIFxuICAgKiBodHRwczovL2RleGllLm9yZy9kb2NzL0NvbGxlY3Rpb24vQ29sbGVjdGlvbi5sYXN0S2V5KClcbiAgICogXG4gICAqKi9cbiAgbGFzdEtleShjYj8pIHtcbiAgICByZXR1cm4gdGhpcy5yZXZlcnNlKCkuZmlyc3RLZXkoY2IpO1xuICB9XG5cbiAgLyoqIENvbGxlY3Rpb24uZGlzdGluY3QoKVxuICAgKiBcbiAgICogaHR0cHM6Ly9kZXhpZS5vcmcvZG9jcy9Db2xsZWN0aW9uL0NvbGxlY3Rpb24uZGlzdGluY3QoKVxuICAgKiBcbiAgICoqL1xuICBkaXN0aW5jdCgpIHtcbiAgICB2YXIgY3R4ID0gdGhpcy5fY3R4LFxuICAgICAgaWR4ID0gY3R4LmluZGV4ICYmIGN0eC50YWJsZS5zY2hlbWEuaWR4QnlOYW1lW2N0eC5pbmRleF07XG4gICAgaWYgKCFpZHggfHwgIWlkeC5tdWx0aSkgcmV0dXJuIHRoaXM7IC8vIGRpc3RpbmN0KCkgb25seSBtYWtlcyBkaWZmZXJlbmNpZXMgb24gbXVsdGlFbnRyeSBpbmRleGVzLlxuICAgIHZhciBzZXQgPSB7fTtcbiAgICBhZGRGaWx0ZXIodGhpcy5fY3R4LCBmdW5jdGlvbiAoY3Vyc29yOiBEQkNvcmVDdXJzb3IpIHtcbiAgICAgIHZhciBzdHJLZXkgPSBjdXJzb3IucHJpbWFyeUtleS50b1N0cmluZygpOyAvLyBDb252ZXJ0cyBhbnkgRGF0ZSB0byBTdHJpbmcsIFN0cmluZyB0byBTdHJpbmcsIE51bWJlciB0byBTdHJpbmcgYW5kIEFycmF5IHRvIGNvbW1hLXNlcGFyYXRlZCBzdHJpbmdcbiAgICAgIHZhciBmb3VuZCA9IGhhc093bihzZXQsIHN0cktleSk7XG4gICAgICBzZXRbc3RyS2V5XSA9IHRydWU7XG4gICAgICByZXR1cm4gIWZvdW5kO1xuICAgIH0pO1xuICAgIHJldHVybiB0aGlzO1xuICB9XG5cbiAgLy9cbiAgLy8gTWV0aG9kcyB0aGF0IG11dGF0ZSBzdG9yYWdlXG4gIC8vXG5cbiAgLyoqIENvbGxlY3Rpb24ubW9kaWZ5KClcbiAgICogXG4gICAqIGh0dHBzOi8vZGV4aWUub3JnL2RvY3MvQ29sbGVjdGlvbi9Db2xsZWN0aW9uLm1vZGlmeSgpXG4gICAqIFxuICAgKiovXG4gIG1vZGlmeShjaGFuZ2VzOiBVcGRhdGVTcGVjPGFueT4gfCAoKG9iajogYW55LCBjdHg6e3ZhbHVlOiBhbnksIHByaW1LZXk6IEluZGV4YWJsZVR5cGV9KSA9PiB2b2lkIHwgYm9vbGVhbikpOiBQcm9taXNlRXh0ZW5kZWQ8bnVtYmVyPiB7XG4gICAgdmFyIGN0eCA9IHRoaXMuX2N0eDtcbiAgICByZXR1cm4gdGhpcy5fd3JpdGUodHJhbnMgPT4ge1xuICAgICAgdmFyIG1vZGlmeWVyOiAob2JqOiBhbnksIGN0eDp7dmFsdWU6IGFueSwgcHJpbUtleTogSW5kZXhhYmxlVHlwZX0pID0+IHZvaWQgfCBib29sZWFuXG4gICAgICBpZiAodHlwZW9mIGNoYW5nZXMgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgLy8gQ2hhbmdlcyBpcyBhIGZ1bmN0aW9uIHRoYXQgbWF5IHVwZGF0ZSwgYWRkIG9yIGRlbGV0ZSBwcm9wdGVydGllcyBvciBldmVuIHJlcXVpcmUgYSBkZWxldGlvbiB0aGUgb2JqZWN0IGl0c2VsZiAoZGVsZXRlIHRoaXMuaXRlbSlcbiAgICAgICAgbW9kaWZ5ZXIgPSBjaGFuZ2VzIGFzIChvYmo6IGFueSwgY3R4Ont2YWx1ZTogYW55LCBwcmltS2V5OiBJbmRleGFibGVUeXBlfSkgPT4gdm9pZCB8IGJvb2xlYW47XG4gICAgICB9IGVsc2Uge1xuICAgICAgICAvLyBjaGFuZ2VzIGlzIGEgc2V0IG9mIHtrZXlQYXRoOiB2YWx1ZX0gYW5kIG5vIG9uZSBpcyBsaXN0ZW5pbmcgdG8gdGhlIHVwZGF0aW5nIGhvb2suXG4gICAgICAgIHZhciBrZXlQYXRocyA9IGtleXMoY2hhbmdlcyk7XG4gICAgICAgIHZhciBudW1LZXlzID0ga2V5UGF0aHMubGVuZ3RoO1xuICAgICAgICBtb2RpZnllciA9IGZ1bmN0aW9uIChpdGVtKSB7XG4gICAgICAgICAgbGV0IGFueXRoaW5nTW9kaWZpZWQgPSBmYWxzZTtcbiAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IG51bUtleXM7ICsraSkge1xuICAgICAgICAgICAgbGV0IGtleVBhdGggPSBrZXlQYXRoc1tpXTtcbiAgICAgICAgICAgIGxldCB2YWwgPSBjaGFuZ2VzW2tleVBhdGhdO1xuICAgICAgICAgICAgbGV0IG9yaWdWYWwgPSBnZXRCeUtleVBhdGgoaXRlbSwga2V5UGF0aCk7XG5cbiAgICAgICAgICAgIGlmICh2YWwgaW5zdGFuY2VvZiBQcm9wTW9kaWZpY2F0aW9uKSB7XG4gICAgICAgICAgICAgIHNldEJ5S2V5UGF0aChpdGVtLCBrZXlQYXRoLCB2YWwuZXhlY3V0ZShvcmlnVmFsKSk7XG4gICAgICAgICAgICAgIGFueXRoaW5nTW9kaWZpZWQgPSB0cnVlO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChvcmlnVmFsICE9PSB2YWwpIHtcbiAgICAgICAgICAgICAgc2V0QnlLZXlQYXRoKGl0ZW0sIGtleVBhdGgsIHZhbCk7IC8vIEFkZGluZyB7a2V5UGF0aDogdW5kZWZpbmVkfSBtZWFucyB0aGF0IHRoZSBrZXlQYXRoIHNob3VsZCBiZSBkZWxldGVkLiBIYW5kbGVkIGJ5IHNldEJ5S2V5UGF0aFxuICAgICAgICAgICAgICBhbnl0aGluZ01vZGlmaWVkID0gdHJ1ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgICAgcmV0dXJuIGFueXRoaW5nTW9kaWZpZWQ7XG4gICAgICAgIH07XG4gICAgICB9XG5cbiAgICAgIGNvbnN0IGNvcmVUYWJsZSA9IGN0eC50YWJsZS5jb3JlO1xuICAgICAgY29uc3Qge291dGJvdW5kLCBleHRyYWN0S2V5fSA9IGNvcmVUYWJsZS5zY2hlbWEucHJpbWFyeUtleTtcbiAgICAgIGNvbnN0IGxpbWl0ID0gdGhpcy5kYi5fb3B0aW9ucy5tb2RpZnlDaHVua1NpemUgfHwgMjAwO1xuICAgICAgY29uc3QgdG90YWxGYWlsdXJlcyA9IFtdO1xuICAgICAgbGV0IHN1Y2Nlc3NDb3VudCA9IDA7XG4gICAgICBjb25zdCBmYWlsZWRLZXlzOiBJbmRleGFibGVUeXBlW10gPSBbXTtcbiAgICAgIGNvbnN0IGFwcGx5TXV0YXRlUmVzdWx0ID0gKGV4cGVjdGVkQ291bnQ6IG51bWJlciwgcmVzOiBEQkNvcmVNdXRhdGVSZXNwb25zZSkgPT4ge1xuICAgICAgICBjb25zdCB7ZmFpbHVyZXMsIG51bUZhaWx1cmVzfSA9IHJlcztcbiAgICAgICAgc3VjY2Vzc0NvdW50ICs9IGV4cGVjdGVkQ291bnQgLSBudW1GYWlsdXJlcztcbiAgICAgICAgZm9yIChsZXQgcG9zIG9mIGtleXMoZmFpbHVyZXMpKSB7XG4gICAgICAgICAgdG90YWxGYWlsdXJlcy5wdXNoKGZhaWx1cmVzW3Bvc10pO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gdGhpcy5jbG9uZSgpLnByaW1hcnlLZXlzKCkudGhlbihrZXlzID0+IHtcbiAgICAgICAgY29uc3QgY3JpdGVyaWEgPSBpc1BsYWluS2V5UmFuZ2UoY3R4KSAmJlxuICAgICAgICAgIGN0eC5saW1pdCA9PT0gSW5maW5pdHkgJiZcbiAgICAgICAgICAodHlwZW9mIGNoYW5nZXMgIT09ICdmdW5jdGlvbicgfHwgY2hhbmdlcyA9PT0gZGVsZXRlQ2FsbGJhY2spICYmIHtcbiAgICAgICAgICAgIGluZGV4OiBjdHguaW5kZXgsXG4gICAgICAgICAgICByYW5nZTogY3R4LnJhbmdlXG4gICAgICAgICAgfTtcblxuICAgICAgICBjb25zdCBuZXh0Q2h1bmsgPSAob2Zmc2V0OiBudW1iZXIpID0+IHtcbiAgICAgICAgICBjb25zdCBjb3VudCA9IE1hdGgubWluKGxpbWl0LCBrZXlzLmxlbmd0aCAtIG9mZnNldCk7XG4gICAgICAgICAgcmV0dXJuIGNvcmVUYWJsZS5nZXRNYW55KHtcbiAgICAgICAgICAgIHRyYW5zLFxuICAgICAgICAgICAga2V5czoga2V5cy5zbGljZShvZmZzZXQsIG9mZnNldCArIGNvdW50KSxcbiAgICAgICAgICAgIGNhY2hlOiBcImltbXV0YWJsZVwiIC8vIE9wdGltaXplIGZvciAyIHRoaW5nczpcbiAgICAgICAgICAgIC8vIDEpIG9ic2VydmFiaWxpdHktbWlkZGxld2FyZSBjYW4gdHJhY2sgY2hhbmdlcyBiZXR0ZXIuXG4gICAgICAgICAgICAvLyAyKSBob29rcyBtaWRkbGV3YXJlIGRvbid0IGhhdmUgdG8gcXVlcnkgdGhlIGV4aXN0aW5nIHZhbHVlcyBhZ2FpbiB3aGVuIHRyYWNraW5nIGNoYW5nZXMuXG4gICAgICAgICAgICAvLyBXZSBjYW4gdXNlIFwiaW1tdXRhYmxlXCIgYmVjYXVzZSB3ZSBwcm9taXNlIHRvIG5vdCB0b3VjaCB0aGUgdmFsdWVzIHdlIHJldHJpZXZlIGhlcmUhXG4gICAgICAgICAgfSkudGhlbih2YWx1ZXMgPT4ge1xuICAgICAgICAgICAgY29uc3QgYWRkVmFsdWVzID0gW107XG4gICAgICAgICAgICBjb25zdCBwdXRWYWx1ZXMgPSBbXTtcbiAgICAgICAgICAgIGNvbnN0IHB1dEtleXMgPSBvdXRib3VuZCA/IFtdIDogbnVsbDtcbiAgICAgICAgICAgIGNvbnN0IGRlbGV0ZUtleXMgPSBbXTtcbiAgICAgICAgICAgIGZvciAobGV0IGk9MDsgaTxjb3VudDsgKytpKSB7XG4gICAgICAgICAgICAgIGNvbnN0IG9yaWdWYWx1ZSA9IHZhbHVlc1tpXTtcbiAgICAgICAgICAgICAgY29uc3QgY3R4ID0ge1xuICAgICAgICAgICAgICAgIHZhbHVlOiBkZWVwQ2xvbmUob3JpZ1ZhbHVlKSxcbiAgICAgICAgICAgICAgICBwcmltS2V5OiBrZXlzW29mZnNldCtpXVxuICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICBpZiAobW9kaWZ5ZXIuY2FsbChjdHgsIGN0eC52YWx1ZSwgY3R4KSAhPT0gZmFsc2UpIHtcbiAgICAgICAgICAgICAgICBpZiAoY3R4LnZhbHVlID09IG51bGwpIHtcbiAgICAgICAgICAgICAgICAgIC8vIERlbGV0ZWRcbiAgICAgICAgICAgICAgICAgIGRlbGV0ZUtleXMucHVzaChrZXlzW29mZnNldCtpXSk7XG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmICghb3V0Ym91bmQgJiYgY21wKGV4dHJhY3RLZXkob3JpZ1ZhbHVlKSwgZXh0cmFjdEtleShjdHgudmFsdWUpKSAhPT0gMCkge1xuICAgICAgICAgICAgICAgICAgLy8gQ2hhbmdlZCBwcmltYXJ5IGtleSBvZiBpbmJvdW5kXG4gICAgICAgICAgICAgICAgICBkZWxldGVLZXlzLnB1c2goa2V5c1tvZmZzZXQraV0pO1xuICAgICAgICAgICAgICAgICAgYWRkVmFsdWVzLnB1c2goY3R4LnZhbHVlKVxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAvLyBDaGFuZ2VkIHZhbHVlXG4gICAgICAgICAgICAgICAgICBwdXRWYWx1ZXMucHVzaChjdHgudmFsdWUpO1xuICAgICAgICAgICAgICAgICAgaWYgKG91dGJvdW5kKSBwdXRLZXlzLnB1c2goa2V5c1tvZmZzZXQraV0pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKGFkZFZhbHVlcy5sZW5ndGggPiAwICYmXG4gICAgICAgICAgICAgIGNvcmVUYWJsZS5tdXRhdGUoe3RyYW5zLCB0eXBlOiAnYWRkJywgdmFsdWVzOiBhZGRWYWx1ZXN9KVxuICAgICAgICAgICAgICAgIC50aGVuKHJlcyA9PiB7XG4gICAgICAgICAgICAgICAgICBmb3IgKGxldCBwb3MgaW4gcmVzLmZhaWx1cmVzKSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIFJlbW92ZSBmcm9tIGRlbGV0ZUtleXMgdGhlIGtleSBvZiB0aGUgb2JqZWN0IHRoYXQgZmFpbGVkIHRvIGNoYW5nZSBpdHMgcHJpbWFyeSBrZXlcbiAgICAgICAgICAgICAgICAgICAgZGVsZXRlS2V5cy5zcGxpY2UocGFyc2VJbnQocG9zKSwgMSk7XG4gICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICBhcHBseU11dGF0ZVJlc3VsdChhZGRWYWx1ZXMubGVuZ3RoLCByZXMpO1xuICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICApLnRoZW4oKCk9PihwdXRWYWx1ZXMubGVuZ3RoID4gMCB8fCAoY3JpdGVyaWEgJiYgdHlwZW9mIGNoYW5nZXMgPT09ICdvYmplY3QnKSkgJiZcbiAgICAgICAgICAgICAgICBjb3JlVGFibGUubXV0YXRlKHtcbiAgICAgICAgICAgICAgICAgIHRyYW5zLFxuICAgICAgICAgICAgICAgICAgdHlwZTogJ3B1dCcsXG4gICAgICAgICAgICAgICAgICBrZXlzOiBwdXRLZXlzLFxuICAgICAgICAgICAgICAgICAgdmFsdWVzOiBwdXRWYWx1ZXMsXG4gICAgICAgICAgICAgICAgICBjcml0ZXJpYSxcbiAgICAgICAgICAgICAgICAgIGNoYW5nZVNwZWM6IHR5cGVvZiBjaGFuZ2VzICE9PSAnZnVuY3Rpb24nXG4gICAgICAgICAgICAgICAgICAgICYmIGNoYW5nZXMsXG4gICAgICAgICAgICAgICAgICBpc0FkZGl0aW9uYWxDaHVuazogb2Zmc2V0ID4gMFxuICAgICAgICAgICAgICAgIH0pLnRoZW4ocmVzPT5hcHBseU11dGF0ZVJlc3VsdChwdXRWYWx1ZXMubGVuZ3RoLCByZXMpKVxuICAgICAgICAgICAgKS50aGVuKCgpPT4oZGVsZXRlS2V5cy5sZW5ndGggPiAwIHx8IChjcml0ZXJpYSAmJiBjaGFuZ2VzID09PSBkZWxldGVDYWxsYmFjaykpICYmXG4gICAgICAgICAgICAgICAgY29yZVRhYmxlLm11dGF0ZSh7XG4gICAgICAgICAgICAgICAgICB0cmFucyxcbiAgICAgICAgICAgICAgICAgIHR5cGU6ICdkZWxldGUnLFxuICAgICAgICAgICAgICAgICAga2V5czogZGVsZXRlS2V5cyxcbiAgICAgICAgICAgICAgICAgIGNyaXRlcmlhLFxuICAgICAgICAgICAgICAgICAgaXNBZGRpdGlvbmFsQ2h1bms6IG9mZnNldCA+IDBcbiAgICAgICAgICAgICAgICB9KS50aGVuKHJlcz0+YXBwbHlNdXRhdGVSZXN1bHQoZGVsZXRlS2V5cy5sZW5ndGgsIHJlcykpXG4gICAgICAgICAgICApLnRoZW4oKCk9PntcbiAgICAgICAgICAgICAgcmV0dXJuIGtleXMubGVuZ3RoID4gb2Zmc2V0ICsgY291bnQgJiYgbmV4dENodW5rKG9mZnNldCArIGxpbWl0KTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgIH0pO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIG5leHRDaHVuaygwKS50aGVuKCgpPT57XG4gICAgICAgICAgaWYgKHRvdGFsRmFpbHVyZXMubGVuZ3RoID4gMClcbiAgICAgICAgICAgIHRocm93IG5ldyBNb2RpZnlFcnJvcihcIkVycm9yIG1vZGlmeWluZyBvbmUgb3IgbW9yZSBvYmplY3RzXCIsIHRvdGFsRmFpbHVyZXMsIHN1Y2Nlc3NDb3VudCwgZmFpbGVkS2V5cyBhcyBJbmRleGFibGVUeXBlQXJyYXlSZWFkb25seSk7XG5cbiAgICAgICAgICByZXR1cm4ga2V5cy5sZW5ndGg7XG4gICAgICAgIH0pO1xuICAgICAgfSk7XG5cbiAgICB9KTtcbiAgfVxuXG4gIC8qKiBDb2xsZWN0aW9uLmRlbGV0ZSgpXG4gICAqIFxuICAgKiBodHRwczovL2RleGllLm9yZy9kb2NzL0NvbGxlY3Rpb24vQ29sbGVjdGlvbi5kZWxldGUoKVxuICAgKiBcbiAgICoqL1xuICBkZWxldGUoKSA6IFByb21pc2VFeHRlbmRlZDxudW1iZXI+IHtcbiAgICB2YXIgY3R4ID0gdGhpcy5fY3R4LFxuICAgICAgcmFuZ2UgPSBjdHgucmFuZ2U7XG4gICAgICAvL2RlbGV0aW5nSG9vayA9IGN0eC50YWJsZS5ob29rLmRlbGV0aW5nLmZpcmUsXG4gICAgICAvL2hhc0RlbGV0ZUhvb2sgPSBkZWxldGluZ0hvb2sgIT09IG5vcDtcbiAgICBpZiAoaXNQbGFpbktleVJhbmdlKGN0eCkgJiZcbiAgICAgIChjdHguaXNQcmltS2V5IHx8IHJhbmdlLnR5cGUgPT09IERCQ29yZVJhbmdlVHlwZS5BbnkpKSAvLyBpZiBubyByYW5nZSwgd2UnbGwgdXNlIGNsZWFyKCkuXG4gICAge1xuICAgICAgLy8gTWF5IHVzZSBJREJPYmplY3RTdG9yZS5kZWxldGUoSURCS2V5UmFuZ2UpIGluIHRoaXMgY2FzZSAoSXNzdWUgIzIwOClcbiAgICAgIC8vIEZvciBjaHJvbWl1bSwgdGhpcyBpcyB0aGUgd2F5IG1vc3Qgb3B0aW1pemVkIHZlcnNpb24uXG4gICAgICAvLyBGb3IgSUUvRWRnZSwgdGhpcyBjb3VsZCBoYW5nIHRoZSBpbmRleGVkREIgZW5naW5lIGFuZCBtYWtlIG9wZXJhdGluZyBzeXN0ZW0gaW5zdGFibGVcbiAgICAgIC8vIChodHRwczovL2dpc3QuZ2l0aHViLmNvbS9kZmFobGFuZGVyLzVhMzkzMjhmMDI5ZGUxODIyMmNmMjEyNWQ1NmMzOGY3KVxuICAgICAgcmV0dXJuIHRoaXMuX3dyaXRlKHRyYW5zID0+IHtcbiAgICAgICAgLy8gT3VyIEFQSSBjb250cmFjdCBpcyB0byByZXR1cm4gYSBjb3VudCBvZiBkZWxldGVkIGl0ZW1zLCBzbyB3ZSBoYXZlIHRvIGNvdW50KCkgYmVmb3JlIGRlbGV0ZSgpLlxuICAgICAgICBjb25zdCB7cHJpbWFyeUtleX0gPSBjdHgudGFibGUuY29yZS5zY2hlbWE7XG4gICAgICAgIGNvbnN0IGNvcmVSYW5nZSA9IHJhbmdlO1xuICAgICAgICByZXR1cm4gY3R4LnRhYmxlLmNvcmUuY291bnQoe3RyYW5zLCBxdWVyeToge2luZGV4OiBwcmltYXJ5S2V5LCByYW5nZTogY29yZVJhbmdlfX0pLnRoZW4oY291bnQgPT4ge1xuICAgICAgICAgIHJldHVybiBjdHgudGFibGUuY29yZS5tdXRhdGUoe3RyYW5zLCB0eXBlOiAnZGVsZXRlUmFuZ2UnLCByYW5nZTogY29yZVJhbmdlfSlcbiAgICAgICAgICAudGhlbigoe2ZhaWx1cmVzLCBsYXN0UmVzdWx0LCByZXN1bHRzLCBudW1GYWlsdXJlc30pID0+IHtcbiAgICAgICAgICAgIGlmIChudW1GYWlsdXJlcykgdGhyb3cgbmV3IE1vZGlmeUVycm9yKFwiQ291bGQgbm90IGRlbGV0ZSBzb21lIHZhbHVlc1wiLFxuICAgICAgICAgICAgICBPYmplY3Qua2V5cyhmYWlsdXJlcykubWFwKHBvcyA9PiBmYWlsdXJlc1twb3NdKSxcbiAgICAgICAgICAgICAgY291bnQgLSBudW1GYWlsdXJlcyk7XG4gICAgICAgICAgICByZXR1cm4gY291bnQgLSBudW1GYWlsdXJlcztcbiAgICAgICAgICB9KTtcbiAgICAgICAgfSk7XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICByZXR1cm4gdGhpcy5tb2RpZnkoZGVsZXRlQ2FsbGJhY2spO1xuICB9XG59XG5cbmNvbnN0IGRlbGV0ZUNhbGxiYWNrID0gKHZhbHVlLCBjdHgpID0+IGN0eC52YWx1ZSA9IG51bGw7XG4iLCAiaW1wb3J0IHsgRGV4aWUgfSBmcm9tICcuLi8uLi9jbGFzc2VzL2RleGllJztcbmltcG9ydCB7IG1ha2VDbGFzc0NvbnN0cnVjdG9yIH0gZnJvbSAnLi4vLi4vZnVuY3Rpb25zL21ha2UtY2xhc3MtY29uc3RydWN0b3InO1xuaW1wb3J0IHsgQ29sbGVjdGlvbiB9IGZyb20gJy4vY29sbGVjdGlvbic7XG5pbXBvcnQgeyBXaGVyZUNsYXVzZSB9IGZyb20gJy4uL3doZXJlLWNsYXVzZS93aGVyZS1jbGF1c2UnO1xuaW1wb3J0IHsgQW55UmFuZ2UgfSBmcm9tICcuLi8uLi9kYmNvcmUva2V5cmFuZ2UnO1xuaW1wb3J0IHsgREJDb3JlS2V5UmFuZ2UgfSBmcm9tICcuLi8uLi9wdWJsaWMvdHlwZXMvZGJjb3JlJztcbmltcG9ydCB7IG1pcnJvciB9IGZyb20gJy4uLy4uL2Z1bmN0aW9ucy9jaGFpbmluZy1mdW5jdGlvbnMnO1xuXG4vKiogQ29uc3RydWN0cyBhIENvbGxlY3Rpb24gaW5zdGFuY2UuICovXG5leHBvcnQgaW50ZXJmYWNlIENvbGxlY3Rpb25Db25zdHJ1Y3RvciB7XG4gIG5ldyh3aGVyZUNsYXVzZT86IFdoZXJlQ2xhdXNlIHwgbnVsbCwga2V5UmFuZ2VHZW5lcmF0b3I/OiAoKSA9PiBEQkNvcmVLZXlSYW5nZSk6IENvbGxlY3Rpb247XG4gIHByb3RvdHlwZTogQ29sbGVjdGlvbjtcbn1cblxuLyoqIEdlbmVyYXRlcyBhIENvbGxlY3Rpb24gY29uc3RydWN0b3IgYm91bmQgdG8gZ2l2ZW4gRGV4aWUgaW5zdGFuY2UuXG4gKiBcbiAqIFRoZSBwdXJwb3NlIG9mIGhhdmluZyBkeW5hbWljYWxseSBjcmVhdGVkIGNvbnN0cnVjdG9ycywgaXMgdG8gYWxsb3dcbiAqIGFkZG9ucyB0byBleHRlbmQgY2xhc3NlcyBmb3IgYSBjZXJ0YWluIERleGllIGluc3RhbmNlIHdpdGhvdXQgYWZmZWN0aW5nXG4gKiBvdGhlciBkYiBpbnN0YW5jZXMuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBjcmVhdGVDb2xsZWN0aW9uQ29uc3RydWN0b3IoZGI6IERleGllKSB7XG4gIHJldHVybiBtYWtlQ2xhc3NDb25zdHJ1Y3RvcjxDb2xsZWN0aW9uQ29uc3RydWN0b3I+KFxuICAgIENvbGxlY3Rpb24ucHJvdG90eXBlLFxuXG4gICAgZnVuY3Rpb24gQ29sbGVjdGlvbihcbiAgICAgIHRoaXM6IENvbGxlY3Rpb24sXG4gICAgICB3aGVyZUNsYXVzZT86IFdoZXJlQ2xhdXNlIHwgbnVsbCxcbiAgICAgIGtleVJhbmdlR2VuZXJhdG9yPzogKCkgPT4gREJDb3JlS2V5UmFuZ2UpXG4gICAge1xuICAgICAgdGhpcy5kYiA9IGRiO1xuICAgICAgbGV0IGtleVJhbmdlID0gQW55UmFuZ2UsIGVycm9yID0gbnVsbDtcbiAgICAgIGlmIChrZXlSYW5nZUdlbmVyYXRvcikgdHJ5IHtcbiAgICAgICAga2V5UmFuZ2UgPSBrZXlSYW5nZUdlbmVyYXRvcigpO1xuICAgICAgfSBjYXRjaCAoZXgpIHtcbiAgICAgICAgZXJyb3IgPSBleDtcbiAgICAgIH1cblxuICAgICAgY29uc3Qgd2hlcmVDdHggPSB3aGVyZUNsYXVzZS5fY3R4O1xuICAgICAgY29uc3QgdGFibGUgPSB3aGVyZUN0eC50YWJsZTtcbiAgICAgIGNvbnN0IHJlYWRpbmdIb29rID0gdGFibGUuaG9vay5yZWFkaW5nLmZpcmU7XG4gICAgICB0aGlzLl9jdHggPSB7XG4gICAgICAgIHRhYmxlOiB0YWJsZSxcbiAgICAgICAgaW5kZXg6IHdoZXJlQ3R4LmluZGV4LFxuICAgICAgICBpc1ByaW1LZXk6ICghd2hlcmVDdHguaW5kZXggfHwgKHRhYmxlLnNjaGVtYS5wcmltS2V5LmtleVBhdGggJiYgd2hlcmVDdHguaW5kZXggPT09IHRhYmxlLnNjaGVtYS5wcmltS2V5Lm5hbWUpKSxcbiAgICAgICAgcmFuZ2U6IGtleVJhbmdlLFxuICAgICAgICBrZXlzT25seTogZmFsc2UsXG4gICAgICAgIGRpcjogXCJuZXh0XCIsXG4gICAgICAgIHVuaXF1ZTogXCJcIixcbiAgICAgICAgYWxnb3JpdGhtOiBudWxsLFxuICAgICAgICBmaWx0ZXI6IG51bGwsXG4gICAgICAgIHJlcGxheUZpbHRlcjogbnVsbCxcbiAgICAgICAganVzdExpbWl0OiB0cnVlLCAvLyBUcnVlIGlmIGEgcmVwbGF5RmlsdGVyIGlzIGp1c3QgYSBmaWx0ZXIgdGhhdCBwZXJmb3JtcyBhIFwibGltaXRcIiBvcGVyYXRpb24gKG9yIG5vbmUgYXQgYWxsKVxuICAgICAgICBpc01hdGNoOiBudWxsLFxuICAgICAgICBvZmZzZXQ6IDAsXG4gICAgICAgIGxpbWl0OiBJbmZpbml0eSxcbiAgICAgICAgZXJyb3I6IGVycm9yLCAvLyBJZiBzZXQsIGFueSBwcm9taXNlIG11c3QgYmUgcmVqZWN0ZWQgd2l0aCB0aGlzIGVycm9yXG4gICAgICAgIG9yOiB3aGVyZUN0eC5vcixcbiAgICAgICAgdmFsdWVNYXBwZXI6IHJlYWRpbmdIb29rICE9PSBtaXJyb3IgPyByZWFkaW5nSG9vayA6IG51bGxcbiAgICAgIH07XG4gICAgfVxuICApO1xufVxuIiwgImltcG9ydCB7IEluZGV4YWJsZVR5cGUgfSBmcm9tICcuLi9wdWJsaWMvdHlwZXMvaW5kZXhhYmxlLXR5cGUnO1xuXG5leHBvcnQgZnVuY3Rpb24gc2ltcGxlQ29tcGFyZShhLCBiKSB7XG4gIHJldHVybiBhIDwgYiA/IC0xIDogYSA9PT0gYiA/IDAgOiAxO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gc2ltcGxlQ29tcGFyZVJldmVyc2UoYSwgYikge1xuICByZXR1cm4gYSA+IGIgPyAtMSA6IGEgPT09IGIgPyAwIDogMTtcbn1cbiIsICJpbXBvcnQgeyBXaGVyZUNsYXVzZSB9IGZyb20gJy4vd2hlcmUtY2xhdXNlJztcbmltcG9ydCB7IENvbGxlY3Rpb24gfSBmcm9tICcuLi9jb2xsZWN0aW9uJztcbmltcG9ydCB7IFNUUklOR19FWFBFQ1RFRCB9IGZyb20gJy4uLy4uL2dsb2JhbHMvY29uc3RhbnRzJztcbmltcG9ydCB7IHNpbXBsZUNvbXBhcmUsIHNpbXBsZUNvbXBhcmVSZXZlcnNlIH0gZnJvbSAnLi4vLi4vZnVuY3Rpb25zL2NvbXBhcmUtZnVuY3Rpb25zJztcbmltcG9ydCB7IEluZGV4YWJsZVR5cGUgfSBmcm9tICcuLi8uLi9wdWJsaWMnO1xuaW1wb3J0IHsgREJDb3JlS2V5UmFuZ2UsIERCQ29yZVJhbmdlVHlwZSB9IGZyb20gJy4uLy4uL3B1YmxpYy90eXBlcy9kYmNvcmUnO1xuXG5leHBvcnQgZnVuY3Rpb24gZmFpbChjb2xsZWN0aW9uT3JXaGVyZUNsYXVzZTogQ29sbGVjdGlvbiB8IFdoZXJlQ2xhdXNlLCBlcnIsIFQ/KSB7XG4gIHZhciBjb2xsZWN0aW9uID0gY29sbGVjdGlvbk9yV2hlcmVDbGF1c2UgaW5zdGFuY2VvZiBXaGVyZUNsYXVzZSA/XG4gICAgICBuZXcgY29sbGVjdGlvbk9yV2hlcmVDbGF1c2UuQ29sbGVjdGlvbiAoY29sbGVjdGlvbk9yV2hlcmVDbGF1c2UpIDpcbiAgICAgIGNvbGxlY3Rpb25PcldoZXJlQ2xhdXNlO1xuICAgICAgXG4gIGNvbGxlY3Rpb24uX2N0eC5lcnJvciA9IFQgPyBuZXcgVChlcnIpIDogbmV3IFR5cGVFcnJvcihlcnIpO1xuICByZXR1cm4gY29sbGVjdGlvbjtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGVtcHR5Q29sbGVjdGlvbih3aGVyZUNsYXVzZTogV2hlcmVDbGF1c2UpIHtcbiAgcmV0dXJuIG5ldyB3aGVyZUNsYXVzZS5Db2xsZWN0aW9uICh3aGVyZUNsYXVzZSwgKCkgPT4gcmFuZ2VFcXVhbChcIlwiKSkubGltaXQoMCk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiB1cHBlckZhY3RvcnkoZGlyOiAnbmV4dCcgfCAncHJldicpIHtcbiAgcmV0dXJuIGRpciA9PT0gXCJuZXh0XCIgP1xuICAgIChzOiBzdHJpbmcpID0+IHMudG9VcHBlckNhc2UoKSA6XG4gICAgKHM6IHN0cmluZykgPT4gcy50b0xvd2VyQ2FzZSgpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gbG93ZXJGYWN0b3J5KGRpcjogJ25leHQnIHwgJ3ByZXYnKSB7XG4gIHJldHVybiBkaXIgPT09IFwibmV4dFwiID9cbiAgICAoczogc3RyaW5nKSA9PiBzLnRvTG93ZXJDYXNlKCkgOlxuICAgIChzOiBzdHJpbmcpID0+IHMudG9VcHBlckNhc2UoKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIG5leHRDYXNpbmcoa2V5LCBsb3dlcktleSwgdXBwZXJOZWVkbGUsIGxvd2VyTmVlZGxlLCBjbXAsIGRpcikge1xuICB2YXIgbGVuZ3RoID0gTWF0aC5taW4oa2V5Lmxlbmd0aCwgbG93ZXJOZWVkbGUubGVuZ3RoKTtcbiAgdmFyIGxscCA9IC0xO1xuICBmb3IgKHZhciBpID0gMDsgaSA8IGxlbmd0aDsgKytpKSB7XG4gICAgICB2YXIgbHdyS2V5Q2hhciA9IGxvd2VyS2V5W2ldO1xuICAgICAgaWYgKGx3cktleUNoYXIgIT09IGxvd2VyTmVlZGxlW2ldKSB7XG4gICAgICAgICAgaWYgKGNtcChrZXlbaV0sIHVwcGVyTmVlZGxlW2ldKSA8IDApIHJldHVybiBrZXkuc3Vic3RyKDAsIGkpICsgdXBwZXJOZWVkbGVbaV0gKyB1cHBlck5lZWRsZS5zdWJzdHIoaSArIDEpO1xuICAgICAgICAgIGlmIChjbXAoa2V5W2ldLCBsb3dlck5lZWRsZVtpXSkgPCAwKSByZXR1cm4ga2V5LnN1YnN0cigwLCBpKSArIGxvd2VyTmVlZGxlW2ldICsgdXBwZXJOZWVkbGUuc3Vic3RyKGkgKyAxKTtcbiAgICAgICAgICBpZiAobGxwID49IDApIHJldHVybiBrZXkuc3Vic3RyKDAsIGxscCkgKyBsb3dlcktleVtsbHBdICsgdXBwZXJOZWVkbGUuc3Vic3RyKGxscCArIDEpO1xuICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgfVxuICAgICAgaWYgKGNtcChrZXlbaV0sIGx3cktleUNoYXIpIDwgMCkgbGxwID0gaTtcbiAgfVxuICBpZiAobGVuZ3RoIDwgbG93ZXJOZWVkbGUubGVuZ3RoICYmIGRpciA9PT0gXCJuZXh0XCIpIHJldHVybiBrZXkgKyB1cHBlck5lZWRsZS5zdWJzdHIoa2V5Lmxlbmd0aCk7XG4gIGlmIChsZW5ndGggPCBrZXkubGVuZ3RoICYmIGRpciA9PT0gXCJwcmV2XCIpIHJldHVybiBrZXkuc3Vic3RyKDAsIHVwcGVyTmVlZGxlLmxlbmd0aCk7XG4gIHJldHVybiAobGxwIDwgMCA/IG51bGwgOiBrZXkuc3Vic3RyKDAsIGxscCkgKyBsb3dlck5lZWRsZVtsbHBdICsgdXBwZXJOZWVkbGUuc3Vic3RyKGxscCArIDEpKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGFkZElnbm9yZUNhc2VBbGdvcml0aG0od2hlcmVDbGF1c2U6IFdoZXJlQ2xhdXNlLCBtYXRjaCwgbmVlZGxlcywgc3VmZml4KSB7XG4gIC8vLyA8cGFyYW0gbmFtZT1cIm5lZWRsZXNcIiB0eXBlPVwiQXJyYXlcIiBlbGVtZW50VHlwZT1cIlN0cmluZ1wiPjwvcGFyYW0+XG4gIHZhciB1cHBlciwgbG93ZXIsIGNvbXBhcmUsIHVwcGVyTmVlZGxlcywgbG93ZXJOZWVkbGVzLCBkaXJlY3Rpb24sIG5leHRLZXlTdWZmaXgsXG4gICAgICBuZWVkbGVzTGVuID0gbmVlZGxlcy5sZW5ndGg7XG4gIGlmICghbmVlZGxlcy5ldmVyeShzID0+IHR5cGVvZiBzID09PSAnc3RyaW5nJykpIHtcbiAgICAgIHJldHVybiBmYWlsKHdoZXJlQ2xhdXNlLCBTVFJJTkdfRVhQRUNURUQpO1xuICB9XG4gIGZ1bmN0aW9uIGluaXREaXJlY3Rpb24oZGlyKSB7XG4gICAgICB1cHBlciA9IHVwcGVyRmFjdG9yeShkaXIpO1xuICAgICAgbG93ZXIgPSBsb3dlckZhY3RvcnkoZGlyKTtcbiAgICAgIGNvbXBhcmUgPSAoZGlyID09PSBcIm5leHRcIiA/IHNpbXBsZUNvbXBhcmUgOiBzaW1wbGVDb21wYXJlUmV2ZXJzZSk7XG4gICAgICB2YXIgbmVlZGxlQm91bmRzID0gbmVlZGxlcy5tYXAoZnVuY3Rpb24gKG5lZWRsZSl7XG4gICAgICAgICAgcmV0dXJuIHtsb3dlcjogbG93ZXIobmVlZGxlKSwgdXBwZXI6IHVwcGVyKG5lZWRsZSl9O1xuICAgICAgfSkuc29ydChmdW5jdGlvbihhLGIpIHtcbiAgICAgICAgICByZXR1cm4gY29tcGFyZShhLmxvd2VyLCBiLmxvd2VyKTtcbiAgICAgIH0pO1xuICAgICAgdXBwZXJOZWVkbGVzID0gbmVlZGxlQm91bmRzLm1hcChmdW5jdGlvbiAobmIpeyByZXR1cm4gbmIudXBwZXI7IH0pO1xuICAgICAgbG93ZXJOZWVkbGVzID0gbmVlZGxlQm91bmRzLm1hcChmdW5jdGlvbiAobmIpeyByZXR1cm4gbmIubG93ZXI7IH0pO1xuICAgICAgZGlyZWN0aW9uID0gZGlyO1xuICAgICAgbmV4dEtleVN1ZmZpeCA9IChkaXIgPT09IFwibmV4dFwiID8gXCJcIiA6IHN1ZmZpeCk7XG4gIH1cbiAgaW5pdERpcmVjdGlvbihcIm5leHRcIik7XG5cbiAgdmFyIGMgPSBuZXcgd2hlcmVDbGF1c2UuQ29sbGVjdGlvbiAoXG4gICAgICB3aGVyZUNsYXVzZSxcbiAgICAgICgpPT5jcmVhdGVSYW5nZSh1cHBlck5lZWRsZXNbMF0sIGxvd2VyTmVlZGxlc1tuZWVkbGVzTGVuLTFdICsgc3VmZml4KVxuICApO1xuXG4gIGMuX29uZGlyZWN0aW9uY2hhbmdlID0gZnVuY3Rpb24gKGRpcmVjdGlvbikge1xuICAgICAgLy8gVGhpcyBldmVudCBvbmx5cyBvY2N1ciBiZWZvcmUgZmlsdGVyIGlzIGNhbGxlZCB0aGUgZmlyc3QgdGltZS5cbiAgICAgIGluaXREaXJlY3Rpb24oZGlyZWN0aW9uKTtcbiAgfTtcblxuICB2YXIgZmlyc3RQb3NzaWJsZU5lZWRsZSA9IDA7XG5cbiAgYy5fYWRkQWxnb3JpdGhtKGZ1bmN0aW9uIChjdXJzb3IsIGFkdmFuY2UsIHJlc29sdmUpIHtcbiAgICAgIC8vLyA8cGFyYW0gbmFtZT1cImN1cnNvclwiIHR5cGU9XCJJREJDdXJzb3JcIj48L3BhcmFtPlxuICAgICAgLy8vIDxwYXJhbSBuYW1lPVwiYWR2YW5jZVwiIHR5cGU9XCJGdW5jdGlvblwiPjwvcGFyYW0+XG4gICAgICAvLy8gPHBhcmFtIG5hbWU9XCJyZXNvbHZlXCIgdHlwZT1cIkZ1bmN0aW9uXCI+PC9wYXJhbT5cbiAgICAgIHZhciBrZXkgPSBjdXJzb3Iua2V5O1xuICAgICAgaWYgKHR5cGVvZiBrZXkgIT09ICdzdHJpbmcnKSByZXR1cm4gZmFsc2U7XG4gICAgICB2YXIgbG93ZXJLZXkgPSBsb3dlcihrZXkpO1xuICAgICAgaWYgKG1hdGNoKGxvd2VyS2V5LCBsb3dlck5lZWRsZXMsIGZpcnN0UG9zc2libGVOZWVkbGUpKSB7XG4gICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICAgIHZhciBsb3dlc3RQb3NzaWJsZUNhc2luZyA9IG51bGw7XG4gICAgICAgICAgZm9yICh2YXIgaT1maXJzdFBvc3NpYmxlTmVlZGxlOyBpPG5lZWRsZXNMZW47ICsraSkge1xuICAgICAgICAgICAgICB2YXIgY2FzaW5nID0gbmV4dENhc2luZyhrZXksIGxvd2VyS2V5LCB1cHBlck5lZWRsZXNbaV0sIGxvd2VyTmVlZGxlc1tpXSwgY29tcGFyZSwgZGlyZWN0aW9uKTtcbiAgICAgICAgICAgICAgaWYgKGNhc2luZyA9PT0gbnVsbCAmJiBsb3dlc3RQb3NzaWJsZUNhc2luZyA9PT0gbnVsbClcbiAgICAgICAgICAgICAgICAgIGZpcnN0UG9zc2libGVOZWVkbGUgPSBpICsgMTtcbiAgICAgICAgICAgICAgZWxzZSBpZiAobG93ZXN0UG9zc2libGVDYXNpbmcgPT09IG51bGwgfHwgY29tcGFyZShsb3dlc3RQb3NzaWJsZUNhc2luZywgY2FzaW5nKSA+IDApIHtcbiAgICAgICAgICAgICAgICAgIGxvd2VzdFBvc3NpYmxlQ2FzaW5nID0gY2FzaW5nO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmIChsb3dlc3RQb3NzaWJsZUNhc2luZyAhPT0gbnVsbCkge1xuICAgICAgICAgICAgICBhZHZhbmNlKGZ1bmN0aW9uICgpIHsgY3Vyc29yLmNvbnRpbnVlKGxvd2VzdFBvc3NpYmxlQ2FzaW5nICsgbmV4dEtleVN1ZmZpeCk7IH0pO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIGFkdmFuY2UocmVzb2x2ZSk7XG4gICAgICAgICAgfVxuICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH1cbiAgfSk7XG4gIHJldHVybiBjO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gY3JlYXRlUmFuZ2UgKGxvd2VyOiBJbmRleGFibGVUeXBlLCB1cHBlcjogSW5kZXhhYmxlVHlwZSwgbG93ZXJPcGVuPzogYm9vbGVhbiwgdXBwZXJPcGVuPzogYm9vbGVhbik6IERCQ29yZUtleVJhbmdlIHtcbiAgICByZXR1cm4ge1xuICAgICAgICB0eXBlOiBEQkNvcmVSYW5nZVR5cGUuUmFuZ2UsXG4gICAgICAgIGxvd2VyLFxuICAgICAgICB1cHBlcixcbiAgICAgICAgbG93ZXJPcGVuLFxuICAgICAgICB1cHBlck9wZW5cbiAgICB9O1xufVxuXG5leHBvcnQgZnVuY3Rpb24gcmFuZ2VFcXVhbCAodmFsdWU6IEluZGV4YWJsZVR5cGUpIDogREJDb3JlS2V5UmFuZ2Uge1xuICAgIHJldHVybiB7XG4gICAgICAgIHR5cGU6IERCQ29yZVJhbmdlVHlwZS5FcXVhbCxcbiAgICAgICAgbG93ZXI6IHZhbHVlLFxuICAgICAgICB1cHBlcjogdmFsdWVcbiAgICB9O1xufVxuIiwgImltcG9ydCB7IFdoZXJlQ2xhdXNlIGFzIElXaGVyZUNsYXVzZSB9IGZyb20gXCIuLi8uLi9wdWJsaWMvdHlwZXMvd2hlcmUtY2xhdXNlXCI7XG5pbXBvcnQgeyBDb2xsZWN0aW9uIH0gZnJvbSBcIi4uL2NvbGxlY3Rpb25cIjtcbmltcG9ydCB7IFRhYmxlIH0gZnJvbSBcIi4uL3RhYmxlXCI7XG5pbXBvcnQgeyBJbmRleGFibGVUeXBlIH0gZnJvbSBcIi4uLy4uL3B1YmxpYy90eXBlcy9pbmRleGFibGUtdHlwZVwiO1xuaW1wb3J0IHsgZW1wdHlDb2xsZWN0aW9uLCBmYWlsLCBhZGRJZ25vcmVDYXNlQWxnb3JpdGhtLCBjcmVhdGVSYW5nZSwgcmFuZ2VFcXVhbCB9IGZyb20gJy4vd2hlcmUtY2xhdXNlLWhlbHBlcnMnO1xuaW1wb3J0IHsgSU5WQUxJRF9LRVlfQVJHVU1FTlQsIFNUUklOR19FWFBFQ1RFRCwgbWF4U3RyaW5nLCBtaW5LZXkgfSBmcm9tICcuLi8uLi9nbG9iYWxzL2NvbnN0YW50cyc7XG5pbXBvcnQgeyBnZXRBcnJheU9mLCBOT19DSEFSX0FSUkFZIH0gZnJvbSAnLi4vLi4vZnVuY3Rpb25zL3V0aWxzJztcbmltcG9ydCB7IGV4Y2VwdGlvbnMgfSBmcm9tICcuLi8uLi9lcnJvcnMnO1xuaW1wb3J0IHsgRGV4aWUgfSBmcm9tICcuLi9kZXhpZSc7XG5pbXBvcnQgeyBDb2xsZWN0aW9uIGFzIElDb2xsZWN0aW9ufSBmcm9tIFwiLi4vLi4vcHVibGljL3R5cGVzL2NvbGxlY3Rpb25cIjtcblxuLyoqIGNsYXNzIFdoZXJlQ2xhdXNlXG4gKiBcbiAqIGh0dHBzOi8vZGV4aWUub3JnL2RvY3MvV2hlcmVDbGF1c2UvV2hlcmVDbGF1c2VcbiAqL1xuZXhwb3J0IGNsYXNzIFdoZXJlQ2xhdXNlIGltcGxlbWVudHMgSVdoZXJlQ2xhdXNlIHtcbiAgZGI6IERleGllO1xuICBfSURCS2V5UmFuZ2U6IHR5cGVvZiBJREJLZXlSYW5nZTtcbiAgX2N0eDoge1xuICAgIHRhYmxlOiBUYWJsZTtcbiAgICBpbmRleDogc3RyaW5nO1xuICAgIG9yOiBDb2xsZWN0aW9uO1xuICB9XG4gIF9jbXA6IChhOiBJbmRleGFibGVUeXBlLCBiOiBJbmRleGFibGVUeXBlKSA9PiBudW1iZXI7XG4gIF9hc2NlbmRpbmc6IChhOiBJbmRleGFibGVUeXBlLCBiOiBJbmRleGFibGVUeXBlKSA9PiBudW1iZXI7XG4gIF9kZXNjZW5kaW5nOiAoYTogSW5kZXhhYmxlVHlwZSwgYjogSW5kZXhhYmxlVHlwZSkgPT4gbnVtYmVyO1xuICBfbWluOiAoYTogSW5kZXhhYmxlVHlwZSwgYjogSW5kZXhhYmxlVHlwZSkgPT4gSW5kZXhhYmxlVHlwZTtcbiAgX21heDogKGE6IEluZGV4YWJsZVR5cGUsIGI6IEluZGV4YWJsZVR5cGUpID0+IEluZGV4YWJsZVR5cGU7XG5cbiAgZ2V0IENvbGxlY3Rpb24oKSB7XG4gICAgcmV0dXJuIHRoaXMuX2N0eC50YWJsZS5kYi5Db2xsZWN0aW9uO1xuICB9XG5cbiAgLyoqIFdoZXJlQ2xhdXNlLmJldHdlZW4oKVxuICAgKiBcbiAgICogaHR0cHM6Ly9kZXhpZS5vcmcvZG9jcy9XaGVyZUNsYXVzZS9XaGVyZUNsYXVzZS5iZXR3ZWVuKClcbiAgICogXG4gICAqKi9cbiAgYmV0d2Vlbihsb3dlcjogSW5kZXhhYmxlVHlwZSwgdXBwZXI6IEluZGV4YWJsZVR5cGUsIGluY2x1ZGVMb3dlcj86IGJvb2xlYW4sIGluY2x1ZGVVcHBlcj86IGJvb2xlYW4pIHtcbiAgICBpbmNsdWRlTG93ZXIgPSBpbmNsdWRlTG93ZXIgIT09IGZhbHNlOyAgIC8vIERlZmF1bHQgdG8gdHJ1ZVxuICAgIGluY2x1ZGVVcHBlciA9IGluY2x1ZGVVcHBlciA9PT0gdHJ1ZTsgICAgLy8gRGVmYXVsdCB0byBmYWxzZVxuICAgIHRyeSB7XG4gICAgICBpZiAoKHRoaXMuX2NtcChsb3dlciwgdXBwZXIpID4gMCkgfHxcbiAgICAgICAgKHRoaXMuX2NtcChsb3dlciwgdXBwZXIpID09PSAwICYmIChpbmNsdWRlTG93ZXIgfHwgaW5jbHVkZVVwcGVyKSAmJiAhKGluY2x1ZGVMb3dlciAmJiBpbmNsdWRlVXBwZXIpKSlcbiAgICAgICAgcmV0dXJuIGVtcHR5Q29sbGVjdGlvbih0aGlzKTsgLy8gV29ya2Fyb3VuZCBmb3IgaWRpb3RpYyBXM0MgU3BlY2lmaWNhdGlvbiB0aGF0IERhdGFFcnJvciBtdXN0IGJlIHRocm93biBpZiBsb3dlciA+IHVwcGVyLiBUaGUgbmF0dXJhbCByZXN1bHQgd291bGQgYmUgdG8gcmV0dXJuIGFuIGVtcHR5IGNvbGxlY3Rpb24uXG4gICAgICByZXR1cm4gbmV3IHRoaXMuQ29sbGVjdGlvbih0aGlzLCAoKT0+Y3JlYXRlUmFuZ2UobG93ZXIsIHVwcGVyLCAhaW5jbHVkZUxvd2VyLCAhaW5jbHVkZVVwcGVyKSk7XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgcmV0dXJuIGZhaWwodGhpcywgSU5WQUxJRF9LRVlfQVJHVU1FTlQpO1xuICAgIH1cbiAgfVxuXG4gIC8qKiBXaGVyZUNsYXVzZS5lcXVhbHMoKVxuICAgKiBcbiAgICogaHR0cHM6Ly9kZXhpZS5vcmcvZG9jcy9XaGVyZUNsYXVzZS9XaGVyZUNsYXVzZS5lcXVhbHMoKVxuICAgKiBcbiAgICoqL1xuICBlcXVhbHModmFsdWU6IEluZGV4YWJsZVR5cGUpIHtcbiAgICBpZiAodmFsdWUgPT0gbnVsbCkgcmV0dXJuIGZhaWwodGhpcywgSU5WQUxJRF9LRVlfQVJHVU1FTlQpO1xuICAgIHJldHVybiBuZXcgdGhpcy5Db2xsZWN0aW9uKHRoaXMsICgpID0+IHJhbmdlRXF1YWwodmFsdWUpKSBhcyBJQ29sbGVjdGlvbjtcbiAgfVxuXG4gIC8qKiBXaGVyZUNsYXVzZS5hYm92ZSgpXG4gICAqIFxuICAgKiBodHRwczovL2RleGllLm9yZy9kb2NzL1doZXJlQ2xhdXNlL1doZXJlQ2xhdXNlLmFib3ZlKClcbiAgICogXG4gICAqKi9cbiAgYWJvdmUodmFsdWU6IEluZGV4YWJsZVR5cGUpIHtcbiAgICBpZiAodmFsdWUgPT0gbnVsbCkgcmV0dXJuIGZhaWwodGhpcywgSU5WQUxJRF9LRVlfQVJHVU1FTlQpO1xuICAgIHJldHVybiBuZXcgdGhpcy5Db2xsZWN0aW9uKHRoaXMsICgpID0+IGNyZWF0ZVJhbmdlKHZhbHVlLCB1bmRlZmluZWQsIHRydWUpKTtcbiAgfVxuXG4gIC8qKiBXaGVyZUNsYXVzZS5hYm92ZU9yRXF1YWwoKVxuICAgKiBcbiAgICogaHR0cHM6Ly9kZXhpZS5vcmcvZG9jcy9XaGVyZUNsYXVzZS9XaGVyZUNsYXVzZS5hYm92ZU9yRXF1YWwoKVxuICAgKiBcbiAgICoqL1xuICBhYm92ZU9yRXF1YWwodmFsdWU6IEluZGV4YWJsZVR5cGUpIHtcbiAgICBpZiAodmFsdWUgPT0gbnVsbCkgcmV0dXJuIGZhaWwodGhpcywgSU5WQUxJRF9LRVlfQVJHVU1FTlQpO1xuICAgIHJldHVybiBuZXcgdGhpcy5Db2xsZWN0aW9uKHRoaXMsICgpID0+IGNyZWF0ZVJhbmdlKHZhbHVlLCB1bmRlZmluZWQsIGZhbHNlKSk7XG4gIH1cblxuICAvKiogV2hlcmVDbGF1c2UuYmVsb3coKVxuICAgKiBcbiAgICogaHR0cHM6Ly9kZXhpZS5vcmcvZG9jcy9XaGVyZUNsYXVzZS9XaGVyZUNsYXVzZS5iZWxvdygpXG4gICAqIFxuICAgKiovXG4gIGJlbG93KHZhbHVlOiBJbmRleGFibGVUeXBlKSB7XG4gICAgaWYgKHZhbHVlID09IG51bGwpIHJldHVybiBmYWlsKHRoaXMsIElOVkFMSURfS0VZX0FSR1VNRU5UKTtcbiAgICByZXR1cm4gbmV3IHRoaXMuQ29sbGVjdGlvbih0aGlzLCAoKSA9PiBjcmVhdGVSYW5nZSh1bmRlZmluZWQsIHZhbHVlLCBmYWxzZSwgdHJ1ZSkpO1xuICB9XG5cbiAgLyoqIFdoZXJlQ2xhdXNlLmJlbG93T3JFcXVhbCgpXG4gICAqIFxuICAgKiBodHRwczovL2RleGllLm9yZy9kb2NzL1doZXJlQ2xhdXNlL1doZXJlQ2xhdXNlLmJlbG93T3JFcXVhbCgpXG4gICAqIFxuICAgKiovXG4gIGJlbG93T3JFcXVhbCh2YWx1ZTogSW5kZXhhYmxlVHlwZSkge1xuICAgIGlmICh2YWx1ZSA9PSBudWxsKSByZXR1cm4gZmFpbCh0aGlzLCBJTlZBTElEX0tFWV9BUkdVTUVOVCk7XG4gICAgcmV0dXJuIG5ldyB0aGlzLkNvbGxlY3Rpb24odGhpcywgKCkgPT4gY3JlYXRlUmFuZ2UodW5kZWZpbmVkLCB2YWx1ZSkpO1xuICB9XG5cbiAgLyoqIFdoZXJlQ2xhdXNlLnN0YXJ0c1dpdGgoKVxuICAgKiBcbiAgICogaHR0cHM6Ly9kZXhpZS5vcmcvZG9jcy9XaGVyZUNsYXVzZS9XaGVyZUNsYXVzZS5zdGFydHNXaXRoKClcbiAgICogXG4gICAqKi9cbiAgc3RhcnRzV2l0aChzdHI6IHN0cmluZykge1xuICAgIGlmICh0eXBlb2Ygc3RyICE9PSAnc3RyaW5nJykgcmV0dXJuIGZhaWwodGhpcywgU1RSSU5HX0VYUEVDVEVEKTtcbiAgICByZXR1cm4gdGhpcy5iZXR3ZWVuKHN0ciwgc3RyICsgbWF4U3RyaW5nLCB0cnVlLCB0cnVlKTtcbiAgfVxuXG4gIC8qKiBXaGVyZUNsYXVzZS5zdGFydHNXaXRoSWdub3JlQ2FzZSgpXG4gICAqIFxuICAgKiBodHRwczovL2RleGllLm9yZy9kb2NzL1doZXJlQ2xhdXNlL1doZXJlQ2xhdXNlLnN0YXJ0c1dpdGhJZ25vcmVDYXNlKClcbiAgICogXG4gICAqKi9cbiAgc3RhcnRzV2l0aElnbm9yZUNhc2Uoc3RyOiBzdHJpbmcpIHtcbiAgICBpZiAoc3RyID09PSBcIlwiKSByZXR1cm4gdGhpcy5zdGFydHNXaXRoKHN0cik7XG4gICAgcmV0dXJuIGFkZElnbm9yZUNhc2VBbGdvcml0aG0odGhpcywgKHgsIGEpID0+IHguaW5kZXhPZihhWzBdKSA9PT0gMCwgW3N0cl0sIG1heFN0cmluZyk7XG4gIH1cblxuICAvKiogV2hlcmVDbGF1c2UuZXF1YWxzSWdub3JlQ2FzZSgpXG4gICAqIFxuICAgKiBodHRwczovL2RleGllLm9yZy9kb2NzL1doZXJlQ2xhdXNlL1doZXJlQ2xhdXNlLmVxdWFsc0lnbm9yZUNhc2UoKVxuICAgKiBcbiAgICoqL1xuICBlcXVhbHNJZ25vcmVDYXNlKHN0cjogc3RyaW5nKSB7XG4gICAgcmV0dXJuIGFkZElnbm9yZUNhc2VBbGdvcml0aG0odGhpcywgKHgsIGEpID0+IHggPT09IGFbMF0sIFtzdHJdLCBcIlwiKTtcbiAgfVxuXG4gIC8qKiBXaGVyZUNsYXVzZS5hbnlPZklnbm9yZUNhc2UoKVxuICAgKiBcbiAgICogaHR0cHM6Ly9kZXhpZS5vcmcvZG9jcy9XaGVyZUNsYXVzZS9XaGVyZUNsYXVzZS5hbnlPZklnbm9yZUNhc2UoKVxuICAgKiBcbiAgICoqL1xuICBhbnlPZklnbm9yZUNhc2UoLi4udmFsdWVzOiBzdHJpbmdbXSk6IENvbGxlY3Rpb247XG4gIGFueU9mSWdub3JlQ2FzZSh2YWx1ZXM6IHN0cmluZ1tdKTogQ29sbGVjdGlvbjtcbiAgYW55T2ZJZ25vcmVDYXNlKCkge1xuICAgIHZhciBzZXQgPSBnZXRBcnJheU9mLmFwcGx5KE5PX0NIQVJfQVJSQVksIGFyZ3VtZW50cyk7XG4gICAgaWYgKHNldC5sZW5ndGggPT09IDApIHJldHVybiBlbXB0eUNvbGxlY3Rpb24odGhpcyk7XG4gICAgcmV0dXJuIGFkZElnbm9yZUNhc2VBbGdvcml0aG0odGhpcywgKHgsIGEpID0+IGEuaW5kZXhPZih4KSAhPT0gLTEsIHNldCwgXCJcIik7XG4gIH1cblxuICAvKiogV2hlcmVDbGF1c2Uuc3RhcnRzV2l0aEFueU9mSWdub3JlQ2FzZSgpXG4gICAqIFxuICAgKiBodHRwczovL2RleGllLm9yZy9kb2NzL1doZXJlQ2xhdXNlL1doZXJlQ2xhdXNlLnN0YXJ0c1dpdGhBbnlPZklnbm9yZUNhc2UoKVxuICAgKiBcbiAgICoqL1xuICBzdGFydHNXaXRoQW55T2ZJZ25vcmVDYXNlKC4uLnZhbHVlczogc3RyaW5nW10pOiBDb2xsZWN0aW9uO1xuICBzdGFydHNXaXRoQW55T2ZJZ25vcmVDYXNlKHZhbHVlczogc3RyaW5nW10pOiBDb2xsZWN0aW9uO1xuICBzdGFydHNXaXRoQW55T2ZJZ25vcmVDYXNlKCkge1xuICAgIHZhciBzZXQgPSBnZXRBcnJheU9mLmFwcGx5KE5PX0NIQVJfQVJSQVksIGFyZ3VtZW50cyk7XG4gICAgaWYgKHNldC5sZW5ndGggPT09IDApIHJldHVybiBlbXB0eUNvbGxlY3Rpb24odGhpcyk7XG4gICAgcmV0dXJuIGFkZElnbm9yZUNhc2VBbGdvcml0aG0odGhpcywgKHgsIGEpID0+IGEuc29tZShuID0+IHguaW5kZXhPZihuKSA9PT0gMCksIHNldCwgbWF4U3RyaW5nKTtcbiAgfVxuXG4gIC8qKiBXaGVyZUNsYXVzZS5hbnlPZigpXG4gICAqIFxuICAgKiBodHRwczovL2RleGllLm9yZy9kb2NzL1doZXJlQ2xhdXNlL1doZXJlQ2xhdXNlLmFueU9mKClcbiAgICogXG4gICAqKi9cbiAgYW55T2YoLi4udmFsdWVzOiBzdHJpbmdbXSk6IENvbGxlY3Rpb247XG4gIGFueU9mKHZhbHVlczogc3RyaW5nW10pOiBDb2xsZWN0aW9uO1xuICBhbnlPZigpIHtcbiAgICBjb25zdCBzZXQgPSBnZXRBcnJheU9mLmFwcGx5KE5PX0NIQVJfQVJSQVksIGFyZ3VtZW50cyk7XG4gICAgbGV0IGNvbXBhcmUgPSB0aGlzLl9jbXA7XG4gICAgdHJ5IHsgc2V0LnNvcnQoY29tcGFyZSk7IH0gY2F0Y2ggKGUpIHsgcmV0dXJuIGZhaWwodGhpcywgSU5WQUxJRF9LRVlfQVJHVU1FTlQpOyB9XG4gICAgaWYgKHNldC5sZW5ndGggPT09IDApIHJldHVybiBlbXB0eUNvbGxlY3Rpb24odGhpcyk7XG4gICAgY29uc3QgYyA9IG5ldyB0aGlzLkNvbGxlY3Rpb24odGhpcywgKCkgPT4gY3JlYXRlUmFuZ2Uoc2V0WzBdLCBzZXRbc2V0Lmxlbmd0aCAtIDFdKSk7XG5cbiAgICBjLl9vbmRpcmVjdGlvbmNoYW5nZSA9IGRpcmVjdGlvbiA9PiB7XG4gICAgICBjb21wYXJlID0gKGRpcmVjdGlvbiA9PT0gXCJuZXh0XCIgP1xuICAgICAgICB0aGlzLl9hc2NlbmRpbmcgOlxuICAgICAgICB0aGlzLl9kZXNjZW5kaW5nKTtcbiAgICAgIHNldC5zb3J0KGNvbXBhcmUpO1xuICAgIH07XG5cbiAgICBsZXQgaSA9IDA7XG4gICAgYy5fYWRkQWxnb3JpdGhtKChjdXJzb3IsIGFkdmFuY2UsIHJlc29sdmUpID0+IHtcbiAgICAgIGNvbnN0IGtleSA9IGN1cnNvci5rZXk7XG4gICAgICB3aGlsZSAoY29tcGFyZShrZXksIHNldFtpXSkgPiAwKSB7XG4gICAgICAgIC8vIFRoZSBjdXJzb3IgaGFzIHBhc3NlZCBiZXlvbmQgdGhpcyBrZXkuIENoZWNrIG5leHQuXG4gICAgICAgICsraTtcbiAgICAgICAgaWYgKGkgPT09IHNldC5sZW5ndGgpIHtcbiAgICAgICAgICAvLyBUaGVyZSBpcyBubyBuZXh0LiBTdG9wIHNlYXJjaGluZy5cbiAgICAgICAgICBhZHZhbmNlKHJlc29sdmUpO1xuICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgaWYgKGNvbXBhcmUoa2V5LCBzZXRbaV0pID09PSAwKSB7XG4gICAgICAgIC8vIFRoZSBjdXJyZW50IGN1cnNvciB2YWx1ZSBzaG91bGQgYmUgaW5jbHVkZWQgYW5kIHdlIHNob3VsZCBjb250aW51ZSBhIHNpbmdsZSBzdGVwIGluIGNhc2UgbmV4dCBpdGVtIGhhcyB0aGUgc2FtZSBrZXkgb3IgcG9zc2libHkgb3VyIG5leHQga2V5IGluIHNldC5cbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICAvLyBjdXJzb3Iua2V5IG5vdCB5ZXQgYXQgc2V0W2ldLiBGb3J3YXJkIGN1cnNvciB0byB0aGUgbmV4dCBrZXkgdG8gaHVudCBmb3IuXG4gICAgICAgIGFkdmFuY2UoKCkgPT4geyBjdXJzb3IuY29udGludWUoc2V0W2ldKTsgfSk7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH1cbiAgICB9KTtcbiAgICByZXR1cm4gYztcbiAgfVxuXG4gIC8qKiBXaGVyZUNsYXVzZS5ub3RFcXVhbCgpXG4gICAqIFxuICAgKiBodHRwczovL2RleGllLm9yZy9kb2NzL1doZXJlQ2xhdXNlL1doZXJlQ2xhdXNlLm5vdEVxdWFsKClcbiAgICogXG4gICAqKi9cbiAgbm90RXF1YWwodmFsdWU6IEluZGV4YWJsZVR5cGUpIHtcbiAgICByZXR1cm4gdGhpcy5pbkFueVJhbmdlKFtbbWluS2V5LCB2YWx1ZV0sIFt2YWx1ZSwgdGhpcy5kYi5fbWF4S2V5XV0sIHsgaW5jbHVkZUxvd2VyczogZmFsc2UsIGluY2x1ZGVVcHBlcnM6IGZhbHNlIH0pO1xuICB9XG5cbiAgLyoqIFdoZXJlQ2xhdXNlLm5vbmVPZigpXG4gICAqIFxuICAgKiBodHRwczovL2RleGllLm9yZy9kb2NzL1doZXJlQ2xhdXNlL1doZXJlQ2xhdXNlLm5vbmVPZigpXG4gICAqIFxuICAgKiovXG4gIG5vbmVPZiguLi52YWx1ZXM6IHN0cmluZ1tdKTogQ29sbGVjdGlvbjtcbiAgbm9uZU9mKHZhbHVlczogc3RyaW5nW10pOiBDb2xsZWN0aW9uO1xuICBub25lT2YoKSB7XG4gICAgY29uc3Qgc2V0ID0gZ2V0QXJyYXlPZi5hcHBseShOT19DSEFSX0FSUkFZLCBhcmd1bWVudHMpO1xuICAgIGlmIChzZXQubGVuZ3RoID09PSAwKSByZXR1cm4gbmV3IHRoaXMuQ29sbGVjdGlvbih0aGlzKTsgLy8gUmV0dXJuIGVudGlyZSBjb2xsZWN0aW9uLlxuICAgIHRyeSB7IHNldC5zb3J0KHRoaXMuX2FzY2VuZGluZyk7IH0gY2F0Y2ggKGUpIHsgcmV0dXJuIGZhaWwodGhpcywgSU5WQUxJRF9LRVlfQVJHVU1FTlQpOyB9XG4gICAgLy8gVHJhbnNmb3JtIFtcImFcIixcImJcIixcImNcIl0gdG8gYSBzZXQgb2YgcmFuZ2VzIGZvciBiZXR3ZWVuL2Fib3ZlL2JlbG93OiBbW21pbktleSxcImFcIl0sIFtcImFcIixcImJcIl0sIFtcImJcIixcImNcIl0sIFtcImNcIixtYXhLZXldXVxuICAgIGNvbnN0IHJhbmdlcyA9IHNldC5yZWR1Y2UoXG4gICAgICAocmVzLCB2YWwpID0+IHJlcyA/XG4gICAgICAgIHJlcy5jb25jYXQoW1tyZXNbcmVzLmxlbmd0aCAtIDFdWzFdLCB2YWxdXSkgOlxuICAgICAgICBbW21pbktleSwgdmFsXV0sXG4gICAgICBudWxsKTtcbiAgICByYW5nZXMucHVzaChbc2V0W3NldC5sZW5ndGggLSAxXSwgdGhpcy5kYi5fbWF4S2V5XSk7XG4gICAgcmV0dXJuIHRoaXMuaW5BbnlSYW5nZShyYW5nZXMsIHsgaW5jbHVkZUxvd2VyczogZmFsc2UsIGluY2x1ZGVVcHBlcnM6IGZhbHNlIH0pO1xuICB9XG5cbiAgLyoqIFdoZXJlQ2xhdXNlLmluQW55UmFuZ2UoKVxuICAgKiBcbiAgICogaHR0cHM6Ly9kZXhpZS5vcmcvZG9jcy9XaGVyZUNsYXVzZS9XaGVyZUNsYXVzZS5pbkFueVJhbmdlKClcbiAgICogXG4gICAqKi9cbiAgaW5BbnlSYW5nZShcbiAgICByYW5nZXM6IFJlYWRvbmx5QXJyYXk8eyAwOiBJbmRleGFibGVUeXBlLCAxOiBJbmRleGFibGVUeXBlIH0+LFxuICAgIG9wdGlvbnM/OiB7IGluY2x1ZGVMb3dlcnM/OiBib29sZWFuLCBpbmNsdWRlVXBwZXJzPzogYm9vbGVhbiB9KVxuICB7XG4gICAgY29uc3QgY21wID0gdGhpcy5fY21wLFxuICAgICAgICAgIGFzY2VuZGluZyA9IHRoaXMuX2FzY2VuZGluZyxcbiAgICAgICAgICBkZXNjZW5kaW5nID0gdGhpcy5fZGVzY2VuZGluZyxcbiAgICAgICAgICBtaW4gPSB0aGlzLl9taW4sXG4gICAgICAgICAgbWF4ID0gdGhpcy5fbWF4O1xuXG4gICAgaWYgKHJhbmdlcy5sZW5ndGggPT09IDApIHJldHVybiBlbXB0eUNvbGxlY3Rpb24odGhpcyk7XG4gICAgaWYgKCFyYW5nZXMuZXZlcnkocmFuZ2UgPT5cbiAgICAgIHJhbmdlWzBdICE9PSB1bmRlZmluZWQgJiZcbiAgICAgIHJhbmdlWzFdICE9PSB1bmRlZmluZWQgJiZcbiAgICAgIGFzY2VuZGluZyhyYW5nZVswXSwgcmFuZ2VbMV0pIDw9IDApKSB7XG4gICAgICByZXR1cm4gZmFpbChcbiAgICAgICAgdGhpcyxcbiAgICAgICAgXCJGaXJzdCBhcmd1bWVudCB0byBpbkFueVJhbmdlKCkgbXVzdCBiZSBhbiBBcnJheSBvZiB0d28tdmFsdWUgQXJyYXlzIFtsb3dlcix1cHBlcl0gd2hlcmUgdXBwZXIgbXVzdCBub3QgYmUgbG93ZXIgdGhhbiBsb3dlclwiLFxuICAgICAgICBleGNlcHRpb25zLkludmFsaWRBcmd1bWVudCk7XG4gICAgfVxuICAgIGNvbnN0IGluY2x1ZGVMb3dlcnMgPSAhb3B0aW9ucyB8fCBvcHRpb25zLmluY2x1ZGVMb3dlcnMgIT09IGZhbHNlOyAgIC8vIERlZmF1bHQgdG8gdHJ1ZVxuICAgIGNvbnN0IGluY2x1ZGVVcHBlcnMgPSBvcHRpb25zICYmIG9wdGlvbnMuaW5jbHVkZVVwcGVycyA9PT0gdHJ1ZTsgICAgLy8gRGVmYXVsdCB0byBmYWxzZVxuXG4gICAgZnVuY3Rpb24gYWRkUmFuZ2UocmFuZ2VzLCBuZXdSYW5nZSkge1xuICAgICAgbGV0IGkgPSAwLCBsID0gcmFuZ2VzLmxlbmd0aDtcbiAgICAgIGZvciAoOyBpIDwgbDsgKytpKSB7XG4gICAgICAgIGNvbnN0IHJhbmdlID0gcmFuZ2VzW2ldO1xuICAgICAgICBpZiAoY21wKG5ld1JhbmdlWzBdLCByYW5nZVsxXSkgPCAwICYmIGNtcChuZXdSYW5nZVsxXSwgcmFuZ2VbMF0pID4gMCkge1xuICAgICAgICAgIHJhbmdlWzBdID0gbWluKHJhbmdlWzBdLCBuZXdSYW5nZVswXSk7XG4gICAgICAgICAgcmFuZ2VbMV0gPSBtYXgocmFuZ2VbMV0sIG5ld1JhbmdlWzFdKTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgaWYgKGkgPT09IGwpXG4gICAgICAgIHJhbmdlcy5wdXNoKG5ld1JhbmdlKTtcbiAgICAgIHJldHVybiByYW5nZXM7XG4gICAgfVxuXG4gICAgbGV0IHNvcnREaXJlY3Rpb24gPSBhc2NlbmRpbmc7XG4gICAgZnVuY3Rpb24gcmFuZ2VTb3J0ZXIoYSwgYikgeyByZXR1cm4gc29ydERpcmVjdGlvbihhWzBdLCBiWzBdKTsgfVxuXG4gICAgLy8gSm9pbiBvdmVybGFwcGluZyByYW5nZXNcbiAgICBsZXQgc2V0O1xuICAgIHRyeSB7XG4gICAgICBzZXQgPSByYW5nZXMucmVkdWNlKGFkZFJhbmdlLCBbXSk7XG4gICAgICBzZXQuc29ydChyYW5nZVNvcnRlcik7XG4gICAgfSBjYXRjaCAoZXgpIHtcbiAgICAgIHJldHVybiBmYWlsKHRoaXMsIElOVkFMSURfS0VZX0FSR1VNRU5UKTtcbiAgICB9XG5cbiAgICBsZXQgcmFuZ2VQb3MgPSAwO1xuICAgIGNvbnN0IGtleUlzQmV5b25kQ3VycmVudEVudHJ5ID0gaW5jbHVkZVVwcGVycyA/XG4gICAgICBrZXkgPT4gYXNjZW5kaW5nKGtleSwgc2V0W3JhbmdlUG9zXVsxXSkgPiAwIDpcbiAgICAgIGtleSA9PiBhc2NlbmRpbmcoa2V5LCBzZXRbcmFuZ2VQb3NdWzFdKSA+PSAwO1xuXG4gICAgY29uc3Qga2V5SXNCZWZvcmVDdXJyZW50RW50cnkgPSBpbmNsdWRlTG93ZXJzID9cbiAgICAgIGtleSA9PiBkZXNjZW5kaW5nKGtleSwgc2V0W3JhbmdlUG9zXVswXSkgPiAwIDpcbiAgICAgIGtleSA9PiBkZXNjZW5kaW5nKGtleSwgc2V0W3JhbmdlUG9zXVswXSkgPj0gMDtcblxuICAgIGZ1bmN0aW9uIGtleVdpdGhpbkN1cnJlbnRSYW5nZShrZXkpIHtcbiAgICAgIHJldHVybiAha2V5SXNCZXlvbmRDdXJyZW50RW50cnkoa2V5KSAmJiAha2V5SXNCZWZvcmVDdXJyZW50RW50cnkoa2V5KTtcbiAgICB9XG5cbiAgICBsZXQgY2hlY2tLZXkgPSBrZXlJc0JleW9uZEN1cnJlbnRFbnRyeTtcblxuICAgIGNvbnN0IGMgPSBuZXcgdGhpcy5Db2xsZWN0aW9uKFxuICAgICAgdGhpcyxcbiAgICAgICgpID0+IGNyZWF0ZVJhbmdlKHNldFswXVswXSwgc2V0W3NldC5sZW5ndGggLSAxXVsxXSwgIWluY2x1ZGVMb3dlcnMsICFpbmNsdWRlVXBwZXJzKSk7XG5cbiAgICBjLl9vbmRpcmVjdGlvbmNoYW5nZSA9IGRpcmVjdGlvbiA9PiB7XG4gICAgICBpZiAoZGlyZWN0aW9uID09PSBcIm5leHRcIikge1xuICAgICAgICBjaGVja0tleSA9IGtleUlzQmV5b25kQ3VycmVudEVudHJ5O1xuICAgICAgICBzb3J0RGlyZWN0aW9uID0gYXNjZW5kaW5nO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgY2hlY2tLZXkgPSBrZXlJc0JlZm9yZUN1cnJlbnRFbnRyeTtcbiAgICAgICAgc29ydERpcmVjdGlvbiA9IGRlc2NlbmRpbmc7XG4gICAgICB9XG4gICAgICBzZXQuc29ydChyYW5nZVNvcnRlcik7XG4gICAgfTtcblxuICAgIGMuX2FkZEFsZ29yaXRobSgoY3Vyc29yLCBhZHZhbmNlLCByZXNvbHZlKSA9PiB7XG4gICAgICB2YXIga2V5ID0gY3Vyc29yLmtleTtcbiAgICAgIHdoaWxlIChjaGVja0tleShrZXkpKSB7XG4gICAgICAgIC8vIFRoZSBjdXJzb3IgaGFzIHBhc3NlZCBiZXlvbmQgdGhpcyBrZXkuIENoZWNrIG5leHQuXG4gICAgICAgICsrcmFuZ2VQb3M7XG4gICAgICAgIGlmIChyYW5nZVBvcyA9PT0gc2V0Lmxlbmd0aCkge1xuICAgICAgICAgIC8vIFRoZXJlIGlzIG5vIG5leHQuIFN0b3Agc2VhcmNoaW5nLlxuICAgICAgICAgIGFkdmFuY2UocmVzb2x2ZSk7XG4gICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBpZiAoa2V5V2l0aGluQ3VycmVudFJhbmdlKGtleSkpIHtcbiAgICAgICAgLy8gVGhlIGN1cnJlbnQgY3Vyc29yIHZhbHVlIHNob3VsZCBiZSBpbmNsdWRlZCBhbmQgd2Ugc2hvdWxkIGNvbnRpbnVlIGEgc2luZ2xlIHN0ZXAgaW4gY2FzZSBuZXh0IGl0ZW0gaGFzIHRoZSBzYW1lIGtleSBvciBwb3NzaWJseSBvdXIgbmV4dCBrZXkgaW4gc2V0LlxuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgIH0gZWxzZSBpZiAodGhpcy5fY21wKGtleSwgc2V0W3JhbmdlUG9zXVsxXSkgPT09IDAgfHwgdGhpcy5fY21wKGtleSwgc2V0W3JhbmdlUG9zXVswXSkgPT09IDApIHtcbiAgICAgICAgLy8gaW5jbHVkZVVwcGVyIG9yIGluY2x1ZGVMb3dlciBpcyBmYWxzZSBzbyBrZXlXaXRoaW5DdXJyZW50UmFuZ2UoKSByZXR1cm5zIGZhbHNlIGV2ZW4gdGhvdWdoIHdlIGFyZSBhdCByYW5nZSBib3JkZXIuXG4gICAgICAgIC8vIENvbnRpbnVlIHRvIG5leHQga2V5IGJ1dCBkb24ndCBpbmNsdWRlIHRoaXMgb25lLlxuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICAvLyBjdXJzb3Iua2V5IG5vdCB5ZXQgYXQgc2V0W2ldLiBGb3J3YXJkIGN1cnNvciB0byB0aGUgbmV4dCBrZXkgdG8gaHVudCBmb3IuXG4gICAgICAgIGFkdmFuY2UoKCkgPT4ge1xuICAgICAgICAgIGlmIChzb3J0RGlyZWN0aW9uID09PSBhc2NlbmRpbmcpIGN1cnNvci5jb250aW51ZShzZXRbcmFuZ2VQb3NdWzBdKTtcbiAgICAgICAgICBlbHNlIGN1cnNvci5jb250aW51ZShzZXRbcmFuZ2VQb3NdWzFdKTtcbiAgICAgICAgfSk7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH1cbiAgICB9KTtcbiAgICByZXR1cm4gYztcbiAgfVxuXG4gIC8qKiBXaGVyZUNsYXVzZS5zdGFydHNXaXRoQW55T2YoKVxuICAgKiBcbiAgICogaHR0cHM6Ly9kZXhpZS5vcmcvZG9jcy9XaGVyZUNsYXVzZS9XaGVyZUNsYXVzZS5zdGFydHNXaXRoQW55T2YoKVxuICAgKiBcbiAgICoqL1xuICBzdGFydHNXaXRoQW55T2YoLi4ucHJlZml4ZXM6IHN0cmluZ1tdKTogQ29sbGVjdGlvbjtcbiAgc3RhcnRzV2l0aEFueU9mKHByZWZpeGVzOiBzdHJpbmdbXSk6IENvbGxlY3Rpb247XG4gIHN0YXJ0c1dpdGhBbnlPZigpIHtcbiAgICBjb25zdCBzZXQgPSBnZXRBcnJheU9mLmFwcGx5KE5PX0NIQVJfQVJSQVksIGFyZ3VtZW50cyk7XG5cbiAgICBpZiAoIXNldC5ldmVyeShzID0+IHR5cGVvZiBzID09PSAnc3RyaW5nJykpIHtcbiAgICAgICAgcmV0dXJuIGZhaWwodGhpcywgXCJzdGFydHNXaXRoQW55T2YoKSBvbmx5IHdvcmtzIHdpdGggc3RyaW5nc1wiKTtcbiAgICB9XG4gICAgaWYgKHNldC5sZW5ndGggPT09IDApIHJldHVybiBlbXB0eUNvbGxlY3Rpb24odGhpcyk7XG5cbiAgICByZXR1cm4gdGhpcy5pbkFueVJhbmdlKHNldC5tYXAoKHN0cjogc3RyaW5nKSA9PiBbc3RyLCBzdHIgKyBtYXhTdHJpbmddKSk7XG4gIH1cblxufVxuIiwgImltcG9ydCB7IERleGllIH0gZnJvbSAnLi4vZGV4aWUnO1xuaW1wb3J0IHsgbWFrZUNsYXNzQ29uc3RydWN0b3IgfSBmcm9tICcuLi8uLi9mdW5jdGlvbnMvbWFrZS1jbGFzcy1jb25zdHJ1Y3Rvcic7XG5pbXBvcnQgeyBXaGVyZUNsYXVzZSB9IGZyb20gJy4vd2hlcmUtY2xhdXNlJztcbmltcG9ydCB7IFRhYmxlIH0gZnJvbSAnLi4vdGFibGUnO1xuaW1wb3J0IHsgQ29sbGVjdGlvbiB9IGZyb20gJy4uL2NvbGxlY3Rpb24nO1xuaW1wb3J0IHsgZXhjZXB0aW9ucyB9IGZyb20gJy4uLy4uL2Vycm9ycyc7XG5pbXBvcnQgeyBjbXAgfSBmcm9tICcuLi8uLi9mdW5jdGlvbnMvY21wJztcblxuZXhwb3J0IGludGVyZmFjZSBXaGVyZUNsYXVzZUNvbnN0cnVjdG9yIHtcbiAgbmV3KHRhYmxlOiBUYWJsZSwgaW5kZXg/OiBzdHJpbmcsIG9yQ29sbGVjdGlvbj86IENvbGxlY3Rpb24pOiBXaGVyZUNsYXVzZTtcbiAgcHJvdG90eXBlOiBXaGVyZUNsYXVzZTtcbn1cblxuLyoqIEdlbmVyYXRlcyBhIFdoZXJlQ2xhdXNlIGNvbnN0cnVjdG9yLlxuICogXG4gKiBUaGUgcHVycG9zZSBvZiBoYXZpbmcgZHluYW1pY2FsbHkgY3JlYXRlZCBjb25zdHJ1Y3RvcnMsIGlzIHRvIGFsbG93XG4gKiBhZGRvbnMgdG8gZXh0ZW5kIGNsYXNzZXMgZm9yIGEgY2VydGFpbiBEZXhpZSBpbnN0YW5jZSB3aXRob3V0IGFmZmVjdGluZ1xuICogb3RoZXIgZGIgaW5zdGFuY2VzLlxuICovXG5leHBvcnQgZnVuY3Rpb24gY3JlYXRlV2hlcmVDbGF1c2VDb25zdHJ1Y3RvcihkYjogRGV4aWUpIHtcbiAgcmV0dXJuIG1ha2VDbGFzc0NvbnN0cnVjdG9yPFdoZXJlQ2xhdXNlQ29uc3RydWN0b3I+KFxuICAgIFdoZXJlQ2xhdXNlLnByb3RvdHlwZSxcblxuICAgIGZ1bmN0aW9uIFdoZXJlQ2xhdXNlKHRoaXM6IFdoZXJlQ2xhdXNlLCB0YWJsZTogVGFibGUsIGluZGV4Pzogc3RyaW5nLCBvckNvbGxlY3Rpb24/OiBDb2xsZWN0aW9uKSB7XG4gICAgICB0aGlzLmRiID0gZGI7XG4gICAgICB0aGlzLl9jdHggPSB7XG4gICAgICAgIHRhYmxlOiB0YWJsZSxcbiAgICAgICAgaW5kZXg6IGluZGV4ID09PSBcIjppZFwiID8gbnVsbCA6IGluZGV4LFxuICAgICAgICBvcjogb3JDb2xsZWN0aW9uXG4gICAgICB9O1xuICAgICAgdGhpcy5fY21wID0gdGhpcy5fYXNjZW5kaW5nID0gY21wO1xuICAgICAgdGhpcy5fZGVzY2VuZGluZyA9IChhLCBiKSA9PiBjbXAoYiwgYSk7XG4gICAgICB0aGlzLl9tYXggPSAoYSwgYikgPT4gY21wKGEsYikgPiAwID8gYSA6IGI7XG4gICAgICB0aGlzLl9taW4gPSAoYSwgYikgPT4gY21wKGEsYikgPCAwID8gYSA6IGI7XG4gICAgICB0aGlzLl9JREJLZXlSYW5nZSA9IGRiLl9kZXBzLklEQktleVJhbmdlO1xuICAgICAgaWYgKCF0aGlzLl9JREJLZXlSYW5nZSkgdGhyb3cgbmV3IGV4Y2VwdGlvbnMuTWlzc2luZ0FQSSgpO1xuICAgIH1cbiAgKTtcbn1cbiIsICJpbXBvcnQgeyB3cmFwIH0gZnJvbSBcIi4uL2hlbHBlcnMvcHJvbWlzZVwiO1xuXG5leHBvcnQgZnVuY3Rpb24gZXZlbnRSZWplY3RIYW5kbGVyKHJlamVjdCkge1xuICByZXR1cm4gd3JhcChmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICAgIHByZXZlbnREZWZhdWx0KGV2ZW50KTtcbiAgICAgIHJlamVjdCAoZXZlbnQudGFyZ2V0LmVycm9yKTtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgfSk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBldmVudFN1Y2Nlc3NIYW5kbGVyIChyZXNvbHZlKSB7XG4gIHJldHVybiB3cmFwKGZ1bmN0aW9uIChldmVudCl7XG4gICAgICByZXNvbHZlKGV2ZW50LnRhcmdldC5yZXN1bHQpO1xuICB9KTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGhvb2tlZEV2ZW50UmVqZWN0SGFuZGxlciAocmVqZWN0KSB7XG4gIHJldHVybiB3cmFwKGZ1bmN0aW9uIChldmVudCkge1xuICAgICAgLy8gU2VlIGNvbW1lbnQgb24gaG9va2VkRXZlbnRTdWNjZXNzSGFuZGxlcigpIHdoeSB3cmFwKCkgaXMgbmVlZGVkIG9ubHkgd2hlbiBzdXBwb3J0aW5nIGhvb2tzLlxuICAgICAgXG4gICAgICB2YXIgcmVxID0gZXZlbnQudGFyZ2V0LFxuICAgICAgICAgIGVyciA9IHJlcS5lcnJvcixcbiAgICAgICAgICBjdHggPSByZXEuX2hvb2tDdHgsLy8gQ29udGFpbnMgdGhlIGhvb2sgZXJyb3IgaGFuZGxlci4gUHV0IGhlcmUgaW5zdGVhZCBvZiBjbG9zdXJlIHRvIGJvb3N0IHBlcmZvcm1hbmNlLlxuICAgICAgICAgIGhvb2tFcnJvckhhbmRsZXIgPSBjdHggJiYgY3R4Lm9uZXJyb3I7XG4gICAgICBob29rRXJyb3JIYW5kbGVyICYmIGhvb2tFcnJvckhhbmRsZXIoZXJyKTtcbiAgICAgIHByZXZlbnREZWZhdWx0KGV2ZW50KTtcbiAgICAgIHJlamVjdCAoZXJyKTtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgfSk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBob29rZWRFdmVudFN1Y2Nlc3NIYW5kbGVyKHJlc29sdmUpIHtcbiAgLy8gd3JhcCgpIGlzIG5lZWRlZCB3aGVuIGNhbGxpbmcgaG9va3MgYmVjYXVzZSB0aGUgcmFyZSBzY2VuYXJpbyBvZjpcbiAgLy8gICogaG9vayBkb2VzIGEgZGIgb3BlcmF0aW9uIHRoYXQgZmFpbHMgaW1tZWRpYXRlbHkgKElEQiB0aHJvd3MgZXhjZXB0aW9uKVxuICAvLyAgICBGb3IgY2FsbGluZyBkYiBvcGVyYXRpb25zIG9uIGNvcnJlY3QgdHJhbnNhY3Rpb24sIHdyYXAgbWFrZXMgc3VyZSB0byBzZXQgUFNEIGNvcnJlY3RseS5cbiAgLy8gICAgd3JhcCgpIHdpbGwgYWxzbyBleGVjdXRlIGluIGEgdmlydHVhbCB0aWNrLlxuICAvLyAgKiBJZiBub3Qgd3JhcHBlZCBpbiBhIHZpcnR1YWwgdGljaywgZGlyZWN0IGV4Y2VwdGlvbiB3aWxsIGxhdW5jaCBhIG5ldyBwaHlzaWNhbCB0aWNrLlxuICAvLyAgKiBJZiB0aGlzIHdhcyB0aGUgbGFzdCBldmVudCBpbiB0aGUgYnVsaywgdGhlIHByb21pc2Ugd2lsbCByZXNvbHZlIGFmdGVyIGEgcGh5c2ljYWwgdGlja1xuICAvLyAgICBhbmQgdGhlIHRyYW5zYWN0aW9uIHdpbGwgaGF2ZSBjb21taXR0ZWQgYWxyZWFkeS5cbiAgLy8gSWYgbm8gaG9vaywgdGhlIHZpcnR1YWwgdGljayB3aWxsIGJlIGV4ZWN1dGVkIGluIHRoZSByZWplY3QoKS9yZXNvbHZlIG9mIHRoZSBmaW5hbCBwcm9taXNlLFxuICAvLyBiZWNhdXNlIGl0IGlzIGFsd2F5cyBtYXJrZWQgd2l0aCBfbGliID0gdHJ1ZSB3aGVuIGNyZWF0ZWQgdXNpbmcgVHJhbnNhY3Rpb24uX3Byb21pc2UoKS5cbiAgcmV0dXJuIHdyYXAoZnVuY3Rpb24oZXZlbnQpIHtcbiAgICAgIHZhciByZXEgPSBldmVudC50YXJnZXQsXG4gICAgICAgICAgY3R4ID0gcmVxLl9ob29rQ3R4LC8vIENvbnRhaW5zIHRoZSBob29rIGVycm9yIGhhbmRsZXIuIFB1dCBoZXJlIGluc3RlYWQgb2YgY2xvc3VyZSB0byBib29zdCBwZXJmb3JtYW5jZS5cbiAgICAgICAgICByZXN1bHQgPSBjdHgudmFsdWUgfHwgcmVxLnJlc3VsdCwgLy8gUGFzcyB0aGUgb2JqZWN0IHZhbHVlIG9uIHVwZGF0ZXMuIFRoZSByZXN1bHQgZnJvbSBJREIgaXMgdGhlIHByaW1hcnkga2V5LlxuICAgICAgICAgIGhvb2tTdWNjZXNzSGFuZGxlciA9IGN0eCAmJiBjdHgub25zdWNjZXNzO1xuICAgICAgaG9va1N1Y2Nlc3NIYW5kbGVyICYmIGhvb2tTdWNjZXNzSGFuZGxlcihyZXN1bHQpO1xuICAgICAgcmVzb2x2ZSAmJiByZXNvbHZlKHJlc3VsdCk7XG4gIH0sIHJlc29sdmUpO1xufVxuXG5cbmV4cG9ydCBmdW5jdGlvbiBwcmV2ZW50RGVmYXVsdChldmVudCkge1xuICBpZiAoZXZlbnQuc3RvcFByb3BhZ2F0aW9uKSAvLyBJbmRleGVkREJTaGltIGRvZXNudCBzdXBwb3J0IHRoaXMgb24gU2FmYXJpIDggYW5kIGJlbG93LlxuICAgICAgZXZlbnQuc3RvcFByb3BhZ2F0aW9uKCk7XG4gIGlmIChldmVudC5wcmV2ZW50RGVmYXVsdCkgLy8gSW5kZXhlZERCU2hpbSBkb2VzbnQgc3VwcG9ydCB0aGlzIG9uIFNhZmFyaSA4IGFuZCBiZWxvdy5cbiAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBCdWxrRXJyb3JIYW5kbGVyQ2F0Y2hBbGwoZXJyb3JMaXN0LCBkb25lPywgc3VwcG9ydEhvb2tzPykge1xuICByZXR1cm4gKHN1cHBvcnRIb29rcyA/IGhvb2tlZEV2ZW50UmVqZWN0SGFuZGxlciA6IGV2ZW50UmVqZWN0SGFuZGxlcikoZSA9PiB7XG4gICAgICBlcnJvckxpc3QucHVzaChlKTtcbiAgICAgIGRvbmUgJiYgZG9uZSgpO1xuICB9KTtcbn1cblxuIiwgImltcG9ydCBFdmVudHMgZnJvbSAnLi4vaGVscGVycy9FdmVudHMnO1xuaW1wb3J0IHsgR2xvYmFsRGV4aWVFdmVudHMgfSBmcm9tICcuLi9wdWJsaWMvdHlwZXMvZGItZXZlbnRzJztcblxuZXhwb3J0IGNvbnN0IERFWElFX1NUT1JBR0VfTVVUQVRFRF9FVkVOVF9OQU1FID0gJ3N0b3JhZ2VtdXRhdGVkJyBhcyAnc3RvcmFnZW11dGF0ZWQnO1xuXG4vLyBOYW1lIG9mIHRoZSBnbG9iYWwgZXZlbnQgZmlyZWQgdXNpbmcgRE9NIGRpc3BhdGNoRXZlbnQgKGlmIG5vdCBpbiBub2RlKS5cbi8vIFJlYXNvbiBmb3IgcHJvcGFnYXRpbmcgdGhpcyBhcyBhIERPTSBldmVudCBpcyBmb3IgZ2V0dGluZyByZWFjdGl2aXR5IGFjcm9zc1xuLy8gbXVsdGlwbGUgdmVyc2lvbnMgb2YgRGV4aWUgd2l0aGluIHRoZSBzYW1lIGFwcCAoYXMgbG9uZyBhcyB0aGV5IGFyZVxuLy8gY29tcGF0aWJsZSB3aXRoIHJlZ2FyZHMgdG8gdGhlIGV2ZW50IGRhdGEpLlxuLy8gSWYgdGhlIE9ic2VydmFiaWxpdHlTZXQgcHJvdG9jb2wgY2hhbmdlIGluIGEgd2F5IHRoYXQgd291bGQgbm90IGJlIGJhY2t3YXJkXG4vLyBjb21wYXRpYmxlLCBtYWtlIHN1cmUgYWxzbyB1cGRhdGUgdGhlIGV2ZW50IG5hbWUgdG8gYSBuZXcgbnVtYmVyIGF0IHRoZSBlbmRcbi8vIHNvIHRoYXQgdHdvIERleGllIGluc3RhbmNlcyBvZiBkaWZmZXJlbnQgdmVyc2lvbnMgY29udGludWUgdG8gd29yayB0b2dldGhlclxuLy8gIC0gbWF5YmUgbm90IGFibGUgdG8gY29tbXVuaWNhdGUgYnV0IHdvbid0IGZhaWwgZHVlIHRvIHVuZXhwZWN0ZWQgZGF0YSBpblxuLy8gdGhlIGRldGFpbCBwcm9wZXJ0eSBvZiB0aGUgQ3VzdG9tRXZlbnQuIElmIHNvLCBhbHNvIG1ha2Ugc3VyZSB0byB1ZHBhdGVcbi8vIGRvY3MgYW5kIGV4cGxhaW4gYXQgd2hpY2ggRGV4aWUgdmVyc2lvbiB0aGUgbmV3IG5hbWUgYW5kIGZvcm1hdCBvZiB0aGUgZXZlbnRcbi8vIGlzIGJlaW5nIHVzZWQuXG5leHBvcnQgY29uc3QgU1RPUkFHRV9NVVRBVEVEX0RPTV9FVkVOVF9OQU1FID0gJ3gtc3RvcmFnZW11dGF0ZWQtMSc7XG5cbmV4cG9ydCBjb25zdCBnbG9iYWxFdmVudHMgPSBFdmVudHMobnVsbCwgREVYSUVfU1RPUkFHRV9NVVRBVEVEX0VWRU5UX05BTUUpIGFzIEdsb2JhbERleGllRXZlbnRzO1xuIiwgImltcG9ydCB7IFRyYW5zYWN0aW9uIGFzIElUcmFuc2FjdGlvbiB9IGZyb20gJy4uLy4uL3B1YmxpYy90eXBlcy90cmFuc2FjdGlvbic7XG5pbXBvcnQgeyBEZXhpZVByb21pc2UsIHdyYXAsIHJlamVjdGlvbiB9IGZyb20gXCIuLi8uLi9oZWxwZXJzL3Byb21pc2VcIjtcbmltcG9ydCB7IERiU2NoZW1hIH0gZnJvbSAnLi4vLi4vcHVibGljL3R5cGVzL2RiLXNjaGVtYSc7XG5pbXBvcnQgeyBhc3NlcnQsIGhhc093biB9IGZyb20gJy4uLy4uL2Z1bmN0aW9ucy91dGlscyc7XG5pbXBvcnQgeyBQU0QsIHVzZVBTRCB9IGZyb20gJy4uLy4uL2hlbHBlcnMvcHJvbWlzZSc7XG5pbXBvcnQgeyBEZXhpZSB9IGZyb20gJy4uL2RleGllJztcbmltcG9ydCB7IGV4Y2VwdGlvbnMgfSBmcm9tICcuLi8uLi9lcnJvcnMnO1xuaW1wb3J0IHsgc2FmYXJpTXVsdGlTdG9yZUZpeCB9IGZyb20gJy4uLy4uL2Z1bmN0aW9ucy9xdWlya3MnO1xuaW1wb3J0IHsgcHJldmVudERlZmF1bHQgfSBmcm9tICcuLi8uLi9mdW5jdGlvbnMvZXZlbnQtd3JhcHBlcnMnO1xuaW1wb3J0IHsgbmV3U2NvcGUgfSBmcm9tICcuLi8uLi9oZWxwZXJzL3Byb21pc2UnO1xuaW1wb3J0ICogYXMgRGVidWcgZnJvbSAnLi4vLi4vaGVscGVycy9kZWJ1Zyc7XG5pbXBvcnQgeyBUYWJsZSB9IGZyb20gJy4uL3RhYmxlJztcbmltcG9ydCB7IGdsb2JhbEV2ZW50cyB9IGZyb20gJy4uLy4uL2dsb2JhbHMvZ2xvYmFsLWV2ZW50cyc7XG5cbi8qKiBUcmFuc2FjdGlvblxuICogXG4gKiBodHRwczovL2RleGllLm9yZy9kb2NzL1RyYW5zYWN0aW9uL1RyYW5zYWN0aW9uXG4gKiBcbiAqKi9cbmV4cG9ydCBjbGFzcyBUcmFuc2FjdGlvbiBpbXBsZW1lbnRzIElUcmFuc2FjdGlvbiB7XG4gIGRiOiBEZXhpZTtcbiAgYWN0aXZlOiBib29sZWFuO1xuICBtb2RlOiBJREJUcmFuc2FjdGlvbk1vZGU7XG4gIGNocm9tZVRyYW5zYWN0aW9uRHVyYWJpbGl0eTogQ2hyb21lVHJhbnNhY3Rpb25EdXJhYmlsaXR5O1xuICBpZGJ0cmFuczogSURCVHJhbnNhY3Rpb247XG4gIHN0b3JlTmFtZXM6IHN0cmluZ1tdO1xuICBleHBsaWNpdD86IGJvb2xlYW47XG4gIG9uOiBhbnk7XG4gIHBhcmVudD86IFRyYW5zYWN0aW9uO1xuICBzY2hlbWE6IERiU2NoZW1hO1xuICBfbWVtb2l6ZWRUYWJsZXM6IHtbdGFibGVOYW1lOiBzdHJpbmddOiBUYWJsZX07XG5cbiAgX3JlY3Vsb2NrOiBudW1iZXI7XG4gIF9ibG9ja2VkRnVuY3M6IHsgMDogKCkgPT4gYW55LCAxOiBhbnkgfVtdO1xuICBfcmVzb2x2ZTogKCkgPT4gdm9pZDtcbiAgX3JlamVjdDogKEVycm9yKSA9PiB2b2lkO1xuICBfd2FpdGluZ0ZvcjogRGV4aWVQcm9taXNlOyAvLyBmb3Igd2FpdEZvcigpXG4gIF93YWl0aW5nUXVldWU6IEZ1bmN0aW9uW107IC8vIGZvciB3YWl0Rm9yKClcbiAgX3NwaW5Db3VudDogbnVtYmVyOyAvLyBKdXN0IGZvciBkZWJ1Z2dpbmcgd2FpdEZvcigpXG4gIF9jb21wbGV0aW9uOiBEZXhpZVByb21pc2U7XG5cbiAgLy9cbiAgLy8gVHJhbnNhY3Rpb24gaW50ZXJuYWwgbWV0aG9kcyAobm90IHJlcXVpcmVkIGJ5IEFQSSB1c2VycywgYnV0IG5lZWRlZCBpbnRlcm5hbGx5IGFuZCBldmVudHVhbGx5IGJ5IGRleGllIGV4dGVuc2lvbnMpXG4gIC8vXG5cbiAgLyoqIFRyYW5zYWN0aW9uLl9sb2NrKClcbiAgICogXG4gICAqIEludGVybmFsIG1ldGhvZC5cbiAgICovXG4gIF9sb2NrKCkge1xuICAgIGFzc2VydCghUFNELmdsb2JhbCk7IC8vIExvY2tpbmcgYW5kIHVubG9ja2luZyByZXVpcmVzIHRvIGJlIHdpdGhpbiBhIFBTRCBzY29wZS5cbiAgICAvLyBUZW1wb3Jhcnkgc2V0IGFsbCByZXF1ZXN0cyBpbnRvIGEgcGVuZGluZyBxdWV1ZSBpZiB0aGV5IGFyZSBjYWxsZWQgYmVmb3JlIGRhdGFiYXNlIGlzIHJlYWR5LlxuICAgICsrdGhpcy5fcmVjdWxvY2s7IC8vIFJlY3Vyc2l2ZSByZWFkL3dyaXRlIGxvY2sgcGF0dGVybiB1c2luZyBQU0QgKFByb21pc2UgU3BlY2lmaWMgRGF0YSkgaW5zdGVhZCBvZiBUTFMgKFRocmVhZCBMb2NhbCBTdG9yYWdlKVxuICAgIGlmICh0aGlzLl9yZWN1bG9jayA9PT0gMSAmJiAhUFNELmdsb2JhbCkgUFNELmxvY2tPd25lckZvciA9IHRoaXM7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cblxuICAvKiogVHJhbnNhY3Rpb24uX3VubG9jaygpXG4gICAqIFxuICAgKiBJbnRlcm5hbCBtZXRob2QuXG4gICAqL1xuICBfdW5sb2NrKCkge1xuICAgIGFzc2VydCghUFNELmdsb2JhbCk7IC8vIExvY2tpbmcgYW5kIHVubG9ja2luZyByZXVpcmVzIHRvIGJlIHdpdGhpbiBhIFBTRCBzY29wZS5cbiAgICBpZiAoLS10aGlzLl9yZWN1bG9jayA9PT0gMCkge1xuICAgICAgaWYgKCFQU0QuZ2xvYmFsKSBQU0QubG9ja093bmVyRm9yID0gbnVsbDtcbiAgICAgIHdoaWxlICh0aGlzLl9ibG9ja2VkRnVuY3MubGVuZ3RoID4gMCAmJiAhdGhpcy5fbG9ja2VkKCkpIHtcbiAgICAgICAgdmFyIGZuQW5kUFNEID0gdGhpcy5fYmxvY2tlZEZ1bmNzLnNoaWZ0KCk7XG4gICAgICAgIHRyeSB7IHVzZVBTRChmbkFuZFBTRFsxXSwgZm5BbmRQU0RbMF0pOyB9IGNhdGNoIChlKSB7IH1cbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cblxuICAvKiogVHJhbnNhY3Rpb24uX2xvY2soKVxuICAgKiBcbiAgICogSW50ZXJuYWwgbWV0aG9kLlxuICAgKi9cbiAgX2xvY2tlZCgpIHtcbiAgICAvLyBDaGVja3MgaWYgYW55IHdyaXRlLWxvY2sgaXMgYXBwbGllZCBvbiB0aGlzIHRyYW5zYWN0aW9uLlxuICAgIC8vIFRvIHNpbXBsaWZ5IHRoZSBEZXhpZSBBUEkgZm9yIGV4dGVuc2lvbiBpbXBsZW1lbnRhdGlvbnMsIHdlIHN1cHBvcnQgcmVjdXJzaXZlIGxvY2tzLlxuICAgIC8vIFRoaXMgaXMgYWNjb21wbGlzaGVkIGJ5IHVzaW5nIFwiUHJvbWlzZSBTcGVjaWZpYyBEYXRhXCIgKFBTRCkuXG4gICAgLy8gUFNEIGRhdGEgaXMgYm91bmQgdG8gYSBQcm9taXNlIGFuZCBhbnkgY2hpbGQgUHJvbWlzZSBlbWl0dGVkIHRocm91Z2ggdGhlbigpIG9yIHJlc29sdmUoIG5ldyBQcm9taXNlKCkgKS5cbiAgICAvLyBQU0QgaXMgbG9jYWwgdG8gY29kZSBleGVjdXRpbmcgb24gdG9wIG9mIHRoZSBjYWxsIHN0YWNrcyBvZiBhbnkgb2YgYW55IGNvZGUgZXhlY3V0ZWQgYnkgUHJvbWlzZSgpOlxuICAgIC8vICAgICAgICAgKiBjYWxsYmFjayBnaXZlbiB0byB0aGUgUHJvbWlzZSgpIGNvbnN0cnVjdG9yICAoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCl7Li4ufSlcbiAgICAvLyAgICAgICAgICogY2FsbGJhY2tzIGdpdmVuIHRvIHRoZW4oKS9jYXRjaCgpL2ZpbmFsbHkoKSBtZXRob2RzIChmdW5jdGlvbiAodmFsdWUpey4uLn0pXG4gICAgLy8gSWYgY3JlYXRpbmcgYSBuZXcgaW5kZXBlbmRhbnQgUHJvbWlzZSBpbnN0YW5jZSBmcm9tIHdpdGhpbiBhIFByb21pc2UgY2FsbCBzdGFjaywgdGhlIG5ldyBQcm9taXNlIHdpbGwgZGVyaXZlIHRoZSBQU0QgZnJvbSB0aGUgY2FsbCBzdGFjayBvZiB0aGUgcGFyZW50IFByb21pc2UuXG4gICAgLy8gRGVyaXZhdGlvbiBpcyBkb25lIHNvIHRoYXQgdGhlIGlubmVyIFBTRCBfX3Byb3RvX18gcG9pbnRzIHRvIHRoZSBvdXRlciBQU0QuXG4gICAgLy8gUFNELmxvY2tPd25lckZvciB3aWxsIHBvaW50IHRvIGN1cnJlbnQgdHJhbnNhY3Rpb24gb2JqZWN0IGlmIHRoZSBjdXJyZW50bHkgZXhlY3V0aW5nIFBTRCBzY29wZSBvd25zIHRoZSBsb2NrLlxuICAgIHJldHVybiB0aGlzLl9yZWN1bG9jayAmJiBQU0QubG9ja093bmVyRm9yICE9PSB0aGlzO1xuICB9XG5cbiAgLyoqIFRyYW5zYWN0aW9uLmNyZWF0ZSgpXG4gICAqIFxuICAgKiBJbnRlcm5hbCBtZXRob2QuXG4gICAqIFxuICAgKi9cbiAgY3JlYXRlKGlkYnRyYW5zPzogSURCVHJhbnNhY3Rpb24gJiB7W3Byb3A6IHN0cmluZ106IGFueX0pIHtcbiAgICBpZiAoIXRoaXMubW9kZSkgcmV0dXJuIHRoaXM7XG4gICAgY29uc3QgaWRiZGIgPSB0aGlzLmRiLmlkYmRiO1xuICAgIGNvbnN0IGRiT3BlbkVycm9yID0gdGhpcy5kYi5fc3RhdGUuZGJPcGVuRXJyb3I7XG4gICAgYXNzZXJ0KCF0aGlzLmlkYnRyYW5zKTtcbiAgICBpZiAoIWlkYnRyYW5zICYmICFpZGJkYikge1xuICAgICAgc3dpdGNoIChkYk9wZW5FcnJvciAmJiBkYk9wZW5FcnJvci5uYW1lKSB7XG4gICAgICAgIGNhc2UgXCJEYXRhYmFzZUNsb3NlZEVycm9yXCI6XG4gICAgICAgICAgLy8gRXJyb3JzIHdoZXJlIGl0IGlzIG5vIGRpZmZlcmVuY2Ugd2hldGhlciBpdCB3YXMgY2F1c2VkIGJ5IHRoZSB1c2VyIG9wZXJhdGlvbiBvciBhbiBlYXJsaWVyIGNhbGwgdG8gZGIub3BlbigpXG4gICAgICAgICAgdGhyb3cgbmV3IGV4Y2VwdGlvbnMuRGF0YWJhc2VDbG9zZWQoZGJPcGVuRXJyb3IpO1xuICAgICAgICBjYXNlIFwiTWlzc2luZ0FQSUVycm9yXCI6XG4gICAgICAgICAgLy8gRXJyb3JzIHdoZXJlIGl0IGlzIG5vIGRpZmZlcmVuY2Ugd2hldGhlciBpdCB3YXMgY2F1c2VkIGJ5IHRoZSB1c2VyIG9wZXJhdGlvbiBvciBhbiBlYXJsaWVyIGNhbGwgdG8gZGIub3BlbigpXG4gICAgICAgICAgdGhyb3cgbmV3IGV4Y2VwdGlvbnMuTWlzc2luZ0FQSShkYk9wZW5FcnJvci5tZXNzYWdlLCBkYk9wZW5FcnJvcik7XG4gICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgLy8gTWFrZSBpdCBjbGVhciB0aGF0IHRoZSB1c2VyIG9wZXJhdGlvbiB3YXMgbm90IHdoYXQgY2F1c2VkIHRoZSBlcnJvciAtIHRoZSBlcnJvciBoYWQgb2NjdXJyZWQgZWFybGllciBvbiBkYi5vcGVuKCkhXG4gICAgICAgICAgdGhyb3cgbmV3IGV4Y2VwdGlvbnMuT3BlbkZhaWxlZChkYk9wZW5FcnJvcik7XG4gICAgICB9XG4gICAgfVxuICAgIGlmICghdGhpcy5hY3RpdmUpIHRocm93IG5ldyBleGNlcHRpb25zLlRyYW5zYWN0aW9uSW5hY3RpdmUoKTtcbiAgICBhc3NlcnQodGhpcy5fY29tcGxldGlvbi5fc3RhdGUgPT09IG51bGwpOyAvLyBDb21wbGV0aW9uIFByb21pc2UgbXVzdCBzdGlsbCBiZSBwZW5kaW5nLlxuXG4gICAgaWRidHJhbnMgPSB0aGlzLmlkYnRyYW5zID0gaWRidHJhbnMgfHxcbiAgICAgICh0aGlzLmRiLmNvcmUgXG4gICAgICAgID8gdGhpcy5kYi5jb3JlLnRyYW5zYWN0aW9uKHRoaXMuc3RvcmVOYW1lcywgdGhpcy5tb2RlIGFzICdyZWFkd3JpdGUnIHwgJ3JlYWRvbmx5JywgeyBkdXJhYmlsaXR5OiB0aGlzLmNocm9tZVRyYW5zYWN0aW9uRHVyYWJpbGl0eSB9KVxuICAgICAgICA6IGlkYmRiLnRyYW5zYWN0aW9uKHRoaXMuc3RvcmVOYW1lcywgdGhpcy5tb2RlLCB7IGR1cmFiaWxpdHk6IHRoaXMuY2hyb21lVHJhbnNhY3Rpb25EdXJhYmlsaXR5IH0pXG4gICAgICApIGFzIElEQlRyYW5zYWN0aW9uO1xuXG4gICAgaWRidHJhbnMub25lcnJvciA9IHdyYXAoZXYgPT4ge1xuICAgICAgcHJldmVudERlZmF1bHQoZXYpOy8vIFByb2hpYml0IGRlZmF1bHQgYnViYmxpbmcgdG8gd2luZG93LmVycm9yXG4gICAgICB0aGlzLl9yZWplY3QoaWRidHJhbnMuZXJyb3IpO1xuICAgIH0pO1xuICAgIGlkYnRyYW5zLm9uYWJvcnQgPSB3cmFwKGV2ID0+IHtcbiAgICAgIHByZXZlbnREZWZhdWx0KGV2KTtcbiAgICAgIHRoaXMuYWN0aXZlICYmIHRoaXMuX3JlamVjdChuZXcgZXhjZXB0aW9ucy5BYm9ydChpZGJ0cmFucy5lcnJvcikpO1xuICAgICAgdGhpcy5hY3RpdmUgPSBmYWxzZTtcbiAgICAgIHRoaXMub24oXCJhYm9ydFwiKS5maXJlKGV2KTtcbiAgICB9KTtcbiAgICBpZGJ0cmFucy5vbmNvbXBsZXRlID0gd3JhcCgoKSA9PiB7XG4gICAgICB0aGlzLmFjdGl2ZSA9IGZhbHNlO1xuICAgICAgdGhpcy5fcmVzb2x2ZSgpO1xuICAgICAgaWYgKCdtdXRhdGVkUGFydHMnIGluIGlkYnRyYW5zKSB7XG4gICAgICAgIGdsb2JhbEV2ZW50cy5zdG9yYWdlbXV0YXRlZC5maXJlKGlkYnRyYW5zW1wibXV0YXRlZFBhcnRzXCJdKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgICByZXR1cm4gdGhpcztcbiAgfVxuXG4gIC8qKiBUcmFuc2FjdGlvbi5fcHJvbWlzZSgpXG4gICAqIFxuICAgKiBJbnRlcm5hbCBtZXRob2QuXG4gICAqL1xuICBfcHJvbWlzZShcbiAgICBtb2RlOiBJREJUcmFuc2FjdGlvbk1vZGUsXG4gICAgZm46IChyZXNvbHZlLCByZWplY3QsIHRyYW5zOiBUcmFuc2FjdGlvbikgPT4gUHJvbWlzZUxpa2U8YW55PiB8IHZvaWQsXG4gICAgYldyaXRlTG9jaz86IHN0cmluZyB8IGJvb2xlYW4pOiBEZXhpZVByb21pc2VcbiAge1xuICAgIGlmIChtb2RlID09PSAncmVhZHdyaXRlJyAmJiB0aGlzLm1vZGUgIT09ICdyZWFkd3JpdGUnKVxuICAgICAgcmV0dXJuIHJlamVjdGlvbihuZXcgZXhjZXB0aW9ucy5SZWFkT25seShcIlRyYW5zYWN0aW9uIGlzIHJlYWRvbmx5XCIpKTtcblxuICAgIGlmICghdGhpcy5hY3RpdmUpXG4gICAgICByZXR1cm4gcmVqZWN0aW9uKG5ldyBleGNlcHRpb25zLlRyYW5zYWN0aW9uSW5hY3RpdmUoKSk7XG5cbiAgICBpZiAodGhpcy5fbG9ja2VkKCkpIHtcbiAgICAgIHJldHVybiBuZXcgRGV4aWVQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgICAgICAgdGhpcy5fYmxvY2tlZEZ1bmNzLnB1c2goWygpID0+IHtcbiAgICAgICAgICB0aGlzLl9wcm9taXNlKG1vZGUsIGZuLCBiV3JpdGVMb2NrKS50aGVuKHJlc29sdmUsIHJlamVjdCk7XG4gICAgICAgIH0sIFBTRF0pO1xuICAgICAgfSk7XG5cbiAgICB9IGVsc2UgaWYgKGJXcml0ZUxvY2spIHtcbiAgICAgIHJldHVybiBuZXdTY29wZSgoKSA9PiB7XG4gICAgICAgIHZhciBwID0gbmV3IERleGllUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgICAgICAgdGhpcy5fbG9jaygpO1xuICAgICAgICAgIGNvbnN0IHJ2ID0gZm4ocmVzb2x2ZSwgcmVqZWN0LCB0aGlzKTtcbiAgICAgICAgICBpZiAocnYgJiYgcnYudGhlbikgcnYudGhlbihyZXNvbHZlLCByZWplY3QpO1xuICAgICAgICB9KTtcbiAgICAgICAgcC5maW5hbGx5KCgpID0+IHRoaXMuX3VubG9jaygpKTtcbiAgICAgICAgcC5fbGliID0gdHJ1ZTtcbiAgICAgICAgcmV0dXJuIHA7XG4gICAgICB9KTtcblxuICAgIH0gZWxzZSB7XG4gICAgICB2YXIgcCA9IG5ldyBEZXhpZVByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuICAgICAgICB2YXIgcnYgPSBmbihyZXNvbHZlLCByZWplY3QsIHRoaXMpO1xuICAgICAgICBpZiAocnYgJiYgcnYudGhlbikgcnYudGhlbihyZXNvbHZlLCByZWplY3QpO1xuICAgICAgfSk7XG4gICAgICBwLl9saWIgPSB0cnVlO1xuICAgICAgcmV0dXJuIHA7XG4gICAgfVxuICB9XG5cbiAgLyoqIFRyYW5zYWN0aW9uLl9yb290KClcbiAgICogXG4gICAqIEludGVybmFsIG1ldGhvZC4gUmV0cmlldmVzIHRoZSByb290IHRyYW5zYWN0aW9uIGluIHRoZSB0cmVlIG9mIHN1YiB0cmFuc2FjdGlvbnMuXG4gICAqL1xuICBfcm9vdCgpIHtcbiAgICByZXR1cm4gdGhpcy5wYXJlbnQgPyB0aGlzLnBhcmVudC5fcm9vdCgpIDogdGhpcztcbiAgfVxuXG4gIC8qKiBUcmFuc2FjdGlvbi53YWl0Rm9yKClcbiAgICogXG4gICAqIEludGVybmFsIG1ldGhvZC4gQ2FuIGJlIGFjY2Vzc2VkIGZyb20gdGhlIHB1YmxpYyBBUEkgdGhyb3VnaFxuICAgKiBEZXhpZS53YWl0Rm9yKCk6IGh0dHBzOi8vZGV4aWUub3JnL2RvY3MvRGV4aWUvRGV4aWUud2FpdEZvcigpXG4gICAqIFxuICAgKiovXG4gIHdhaXRGb3IocHJvbWlzZUxpa2U6IFByb21pc2VMaWtlPGFueT4pIHtcbiAgICAvLyBBbHdheXMgb3BlcmF0ZSBvbiB0aGUgcm9vdCB0cmFuc2FjdGlvbiAoaW4gY2FzZSB0aGlzIGlzIGEgc3ViIHN0cmFuc2FjdGlvbilcbiAgICB2YXIgcm9vdCA9IHRoaXMuX3Jvb3QoKTtcbiAgICAvLyBGb3Igc3RhYmlsaXR5IHJlYXNvbnMsIGNvbnZlcnQgcGFyYW1ldGVyIHRvIHByb21pc2Ugbm8gbWF0dGVyIHdoYXQgdHlwZSBpcyBwYXNzZWQgdG8gd2FpdEZvcigpLlxuICAgIC8vIChXZSBtdXN0IGJlIGFibGUgdG8gY2FsbCAudGhlbigpIG9uIGl0LilcbiAgICBjb25zdCBwcm9taXNlID0gRGV4aWVQcm9taXNlLnJlc29sdmUocHJvbWlzZUxpa2UpO1xuICAgIGlmIChyb290Ll93YWl0aW5nRm9yKSB7XG4gICAgICAvLyBBbHJlYWR5IGNhbGxlZCB3YWl0Rm9yKCkuIFdhaXQgZm9yIGJvdGggdG8gY29tcGxldGUuXG4gICAgICByb290Ll93YWl0aW5nRm9yID0gcm9vdC5fd2FpdGluZ0Zvci50aGVuKCgpID0+IHByb21pc2UpO1xuICAgIH0gZWxzZSB7XG4gICAgICAvLyBXZSdyZSBub3QgaW4gd2FpdGluZyBzdGF0ZS4gU3RhcnQgd2FpdGluZyBzdGF0ZS5cbiAgICAgIHJvb3QuX3dhaXRpbmdGb3IgPSBwcm9taXNlO1xuICAgICAgcm9vdC5fd2FpdGluZ1F1ZXVlID0gW107XG4gICAgICAvLyBTdGFydCBpbnRlcmFjdGluZyB3aXRoIGluZGV4ZWREQiB1bnRpbCBwcm9taXNlIGNvbXBsZXRlczpcbiAgICAgIHZhciBzdG9yZSA9IHJvb3QuaWRidHJhbnMub2JqZWN0U3RvcmUocm9vdC5zdG9yZU5hbWVzWzBdKTtcbiAgICAgIChmdW5jdGlvbiBzcGluKCkge1xuICAgICAgICArK3Jvb3QuX3NwaW5Db3VudDsgLy8gRm9yIGRlYnVnZ2luZyBvbmx5XG4gICAgICAgIHdoaWxlIChyb290Ll93YWl0aW5nUXVldWUubGVuZ3RoKSAocm9vdC5fd2FpdGluZ1F1ZXVlLnNoaWZ0KCkpKCk7XG4gICAgICAgIGlmIChyb290Ll93YWl0aW5nRm9yKSBzdG9yZS5nZXQoLUluZmluaXR5KS5vbnN1Y2Nlc3MgPSBzcGluO1xuICAgICAgfSgpKTtcbiAgICB9XG4gICAgdmFyIGN1cnJlbnRXYWl0UHJvbWlzZSA9IHJvb3QuX3dhaXRpbmdGb3I7XG4gICAgcmV0dXJuIG5ldyBEZXhpZVByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuICAgICAgcHJvbWlzZS50aGVuKFxuICAgICAgICByZXMgPT4gcm9vdC5fd2FpdGluZ1F1ZXVlLnB1c2god3JhcChyZXNvbHZlLmJpbmQobnVsbCwgcmVzKSkpLFxuICAgICAgICBlcnIgPT4gcm9vdC5fd2FpdGluZ1F1ZXVlLnB1c2god3JhcChyZWplY3QuYmluZChudWxsLCBlcnIpKSlcbiAgICAgICkuZmluYWxseSgoKSA9PiB7XG4gICAgICAgIGlmIChyb290Ll93YWl0aW5nRm9yID09PSBjdXJyZW50V2FpdFByb21pc2UpIHtcbiAgICAgICAgICAvLyBObyBvbmUgYWRkZWQgYSB3YWl0IGFmdGVyIHVzLiBTYWZlIHRvIHN0b3AgdGhlIHNwaW5uaW5nLlxuICAgICAgICAgIHJvb3QuX3dhaXRpbmdGb3IgPSBudWxsO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9KTtcbiAgfSAgXG5cbiAgLyoqIFRyYW5zYWN0aW9uLmFib3J0KClcbiAgICogXG4gICAqIGh0dHBzOi8vZGV4aWUub3JnL2RvY3MvVHJhbnNhY3Rpb24vVHJhbnNhY3Rpb24uYWJvcnQoKVxuICAgKi9cbiAgYWJvcnQoKSB7XG4gICAgaWYgKHRoaXMuYWN0aXZlKSB7XG4gICAgICB0aGlzLmFjdGl2ZSA9IGZhbHNlO1xuICAgICAgaWYgKHRoaXMuaWRidHJhbnMpIHRoaXMuaWRidHJhbnMuYWJvcnQoKTtcbiAgICAgIHRoaXMuX3JlamVjdChuZXcgZXhjZXB0aW9ucy5BYm9ydCgpKTtcbiAgICB9XG4gIH1cblxuICAvKiogVHJhbnNhY3Rpb24udGFibGUoKVxuICAgKiBcbiAgICogaHR0cHM6Ly9kZXhpZS5vcmcvZG9jcy9UcmFuc2FjdGlvbi9UcmFuc2FjdGlvbi50YWJsZSgpXG4gICAqL1xuICB0YWJsZSh0YWJsZU5hbWU6IHN0cmluZykge1xuICAgIGNvbnN0IG1lbW9pemVkVGFibGVzID0gKHRoaXMuX21lbW9pemVkVGFibGVzIHx8ICh0aGlzLl9tZW1vaXplZFRhYmxlcyA9IHt9KSk7XG4gICAgaWYgKGhhc093bihtZW1vaXplZFRhYmxlcywgdGFibGVOYW1lKSlcbiAgICAgIHJldHVybiBtZW1vaXplZFRhYmxlc1t0YWJsZU5hbWVdO1xuICAgIGNvbnN0IHRhYmxlU2NoZW1hID0gdGhpcy5zY2hlbWFbdGFibGVOYW1lXTtcbiAgICBpZiAoIXRhYmxlU2NoZW1hKSB7XG4gICAgICB0aHJvdyBuZXcgZXhjZXB0aW9ucy5Ob3RGb3VuZChcIlRhYmxlIFwiICsgdGFibGVOYW1lICsgXCIgbm90IHBhcnQgb2YgdHJhbnNhY3Rpb25cIik7ICAgICAgICBcbiAgICB9XG5cbiAgICBjb25zdCB0cmFuc2FjdGlvbkJvdW5kVGFibGUgPSBuZXcgdGhpcy5kYi5UYWJsZSh0YWJsZU5hbWUsIHRhYmxlU2NoZW1hLCB0aGlzKTtcbiAgICB0cmFuc2FjdGlvbkJvdW5kVGFibGUuY29yZSA9IHRoaXMuZGIuY29yZS50YWJsZSh0YWJsZU5hbWUpO1xuICAgIG1lbW9pemVkVGFibGVzW3RhYmxlTmFtZV0gPSB0cmFuc2FjdGlvbkJvdW5kVGFibGU7XG4gICAgcmV0dXJuIHRyYW5zYWN0aW9uQm91bmRUYWJsZTtcbiAgfVxufVxuIiwgImltcG9ydCB7IERleGllIH0gZnJvbSAnLi4vZGV4aWUnO1xuaW1wb3J0IHsgbWFrZUNsYXNzQ29uc3RydWN0b3IgfSBmcm9tICcuLi8uLi9mdW5jdGlvbnMvbWFrZS1jbGFzcy1jb25zdHJ1Y3Rvcic7XG5pbXBvcnQgeyBUcmFuc2FjdGlvbiB9IGZyb20gJy4vdHJhbnNhY3Rpb24nO1xuaW1wb3J0IHsgRGJTY2hlbWEgfSBmcm9tICcuLi8uLi9wdWJsaWMvdHlwZXMvZGItc2NoZW1hJztcbmltcG9ydCBFdmVudHMgZnJvbSAnLi4vLi4vaGVscGVycy9FdmVudHMnO1xuaW1wb3J0IFByb21pc2UsIHsgcmVqZWN0aW9uIH0gZnJvbSAnLi4vLi4vaGVscGVycy9wcm9taXNlJztcblxuZXhwb3J0IGludGVyZmFjZSBUcmFuc2FjdGlvbkNvbnN0cnVjdG9yPFQgZXh0ZW5kcyBUcmFuc2FjdGlvbj1UcmFuc2FjdGlvbj4ge1xuICBuZXcgKFxuICAgIG1vZGU6IElEQlRyYW5zYWN0aW9uTW9kZSxcbiAgICBzdG9yZU5hbWVzOiBzdHJpbmdbXSxcbiAgICBkYnNjaGVtYTogRGJTY2hlbWEsXG4gICAgY2hyb21lVHJhbnNhY3Rpb25EdXJhYmlsaXR5OiBDaHJvbWVUcmFuc2FjdGlvbkR1cmFiaWxpdHksXG4gICAgcGFyZW50PzogVHJhbnNhY3Rpb24pIDogVDtcbiAgcHJvdG90eXBlOiBUO1xufVxuXG4vKiogR2VuZXJhdGVzIGEgVHJhbnNhY3Rpb24gY29uc3RydWN0b3IgYm91bmQgdG8gZ2l2ZW4gRGV4aWUgaW5zdGFuY2UuXG4gKiBcbiAqIFRoZSBwdXJwb3NlIG9mIGhhdmluZyBkeW5hbWljYWxseSBjcmVhdGVkIGNvbnN0cnVjdG9ycywgaXMgdG8gYWxsb3dcbiAqIGFkZG9ucyB0byBleHRlbmQgY2xhc3NlcyBmb3IgYSBjZXJ0YWluIERleGllIGluc3RhbmNlIHdpdGhvdXQgYWZmZWN0aW5nXG4gKiBvdGhlciBkYiBpbnN0YW5jZXMuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBjcmVhdGVUcmFuc2FjdGlvbkNvbnN0cnVjdG9yKGRiOiBEZXhpZSkge1xuICByZXR1cm4gbWFrZUNsYXNzQ29uc3RydWN0b3I8VHJhbnNhY3Rpb25Db25zdHJ1Y3RvcjxUcmFuc2FjdGlvbj4+KFxuICAgIFRyYW5zYWN0aW9uLnByb3RvdHlwZSxcbiAgICBmdW5jdGlvbiBUcmFuc2FjdGlvbiAoXG4gICAgICB0aGlzOiBUcmFuc2FjdGlvbixcbiAgICAgIG1vZGU6IElEQlRyYW5zYWN0aW9uTW9kZSxcbiAgICAgIHN0b3JlTmFtZXM6IHN0cmluZ1tdLFxuICAgICAgZGJzY2hlbWE6IERiU2NoZW1hLFxuICAgICAgY2hyb21lVHJhbnNhY3Rpb25EdXJhYmlsaXR5OiBDaHJvbWVUcmFuc2FjdGlvbkR1cmFiaWxpdHksXG4gICAgICBwYXJlbnQ/OiBUcmFuc2FjdGlvbilcbiAgICB7XG4gICAgICB0aGlzLmRiID0gZGI7XG4gICAgICB0aGlzLm1vZGUgPSBtb2RlO1xuICAgICAgdGhpcy5zdG9yZU5hbWVzID0gc3RvcmVOYW1lcztcbiAgICAgIHRoaXMuc2NoZW1hID0gZGJzY2hlbWE7XG4gICAgICB0aGlzLmNocm9tZVRyYW5zYWN0aW9uRHVyYWJpbGl0eSA9IGNocm9tZVRyYW5zYWN0aW9uRHVyYWJpbGl0eTtcbiAgICAgIHRoaXMuaWRidHJhbnMgPSBudWxsO1xuICAgICAgdGhpcy5vbiA9IEV2ZW50cyh0aGlzLCBcImNvbXBsZXRlXCIsIFwiZXJyb3JcIiwgXCJhYm9ydFwiKTtcbiAgICAgIHRoaXMucGFyZW50ID0gcGFyZW50IHx8IG51bGw7XG4gICAgICB0aGlzLmFjdGl2ZSA9IHRydWU7XG4gICAgICB0aGlzLl9yZWN1bG9jayA9IDA7XG4gICAgICB0aGlzLl9ibG9ja2VkRnVuY3MgPSBbXTtcbiAgICAgIHRoaXMuX3Jlc29sdmUgPSBudWxsO1xuICAgICAgdGhpcy5fcmVqZWN0ID0gbnVsbDtcbiAgICAgIHRoaXMuX3dhaXRpbmdGb3IgPSBudWxsO1xuICAgICAgdGhpcy5fd2FpdGluZ1F1ZXVlID0gbnVsbDtcbiAgICAgIHRoaXMuX3NwaW5Db3VudCA9IDA7IC8vIEp1c3QgZm9yIGRlYnVnZ2luZyB3YWl0Rm9yKClcbiAgICAgIHRoaXMuX2NvbXBsZXRpb24gPSBuZXcgUHJvbWlzZSAoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuICAgICAgICAgIHRoaXMuX3Jlc29sdmUgPSByZXNvbHZlO1xuICAgICAgICAgIHRoaXMuX3JlamVjdCA9IHJlamVjdDtcbiAgICAgIH0pO1xuICAgICAgXG4gICAgICB0aGlzLl9jb21wbGV0aW9uLnRoZW4oXG4gICAgICAgICAgKCk9PiB7XG4gICAgICAgICAgICAgIHRoaXMuYWN0aXZlID0gZmFsc2U7XG4gICAgICAgICAgICAgIHRoaXMub24uY29tcGxldGUuZmlyZSgpO1xuICAgICAgICAgIH0sXG4gICAgICAgICAgZSA9PiB7XG4gICAgICAgICAgICAgIHZhciB3YXNBY3RpdmUgPSB0aGlzLmFjdGl2ZTtcbiAgICAgICAgICAgICAgdGhpcy5hY3RpdmUgPSBmYWxzZTtcbiAgICAgICAgICAgICAgdGhpcy5vbi5lcnJvci5maXJlKGUpO1xuICAgICAgICAgICAgICB0aGlzLnBhcmVudCA/XG4gICAgICAgICAgICAgICAgICB0aGlzLnBhcmVudC5fcmVqZWN0KGUpIDpcbiAgICAgICAgICAgICAgICAgIHdhc0FjdGl2ZSAmJiB0aGlzLmlkYnRyYW5zICYmIHRoaXMuaWRidHJhbnMuYWJvcnQoKTtcbiAgICAgICAgICAgICAgcmV0dXJuIHJlamVjdGlvbihlKTsgLy8gSW5kaWNhdGUgd2UgYWN0dWFsbHkgRE8gTk9UIGNhdGNoIHRoaXMgZXJyb3IuXG4gICAgICAgICAgfSk7XG4gICAgXG4gICAgfSk7XG59XG4iLCAiaW1wb3J0IHsgSW5kZXhTcGVjIH0gZnJvbSAnLi4vcHVibGljL3R5cGVzL2luZGV4LXNwZWMnO1xuXG5leHBvcnQgZnVuY3Rpb24gY3JlYXRlSW5kZXhTcGVjKFxuICBuYW1lOiBzdHJpbmcsXG4gIGtleVBhdGg6IHN0cmluZyB8IHN0cmluZ1tdLFxuICB1bmlxdWU6IGJvb2xlYW4sXG4gIG11bHRpOiBib29sZWFuLFxuICBhdXRvOiBib29sZWFuLFxuICBjb21wb3VuZDogYm9vbGVhbixcbiAgaXNQcmltS2V5OiBib29sZWFuXG4pOiBJbmRleFNwZWMge1xuICByZXR1cm4ge1xuICAgIG5hbWUsXG4gICAga2V5UGF0aCxcbiAgICB1bmlxdWUsXG4gICAgbXVsdGksXG4gICAgYXV0byxcbiAgICBjb21wb3VuZCxcbiAgICBzcmM6ICh1bmlxdWUgJiYgIWlzUHJpbUtleSA/ICcmJyA6ICcnKSArIChtdWx0aSA/ICcqJyA6ICcnKSArIChhdXRvID8gXCIrK1wiIDogXCJcIikgKyBuYW1lRnJvbUtleVBhdGgoa2V5UGF0aClcbiAgfVxufVxuXG5leHBvcnQgZnVuY3Rpb24gbmFtZUZyb21LZXlQYXRoIChrZXlQYXRoPzogc3RyaW5nIHwgc3RyaW5nW10pOiBzdHJpbmcge1xuICByZXR1cm4gdHlwZW9mIGtleVBhdGggPT09ICdzdHJpbmcnID9cbiAgICBrZXlQYXRoIDpcbiAgICBrZXlQYXRoID8gKCdbJyArIFtdLmpvaW4uY2FsbChrZXlQYXRoLCAnKycpICsgJ10nKSA6IFwiXCI7XG59XG4iLCAiaW1wb3J0IHsgSW5kZXhTcGVjIH0gZnJvbSAnLi4vcHVibGljL3R5cGVzL2luZGV4LXNwZWMnO1xuaW1wb3J0IHsgVGFibGVTY2hlbWEgfSBmcm9tICcuLi9wdWJsaWMvdHlwZXMvdGFibGUtc2NoZW1hJztcbmltcG9ydCB7IGNyZWF0ZUluZGV4U3BlYyB9IGZyb20gJy4vaW5kZXgtc3BlYyc7XG5pbXBvcnQgeyBhcnJheVRvT2JqZWN0IH0gZnJvbSAnLi4vZnVuY3Rpb25zL3V0aWxzJztcblxuZXhwb3J0IGZ1bmN0aW9uIGNyZWF0ZVRhYmxlU2NoZW1hIChcbiAgbmFtZTogc3RyaW5nLFxuICBwcmltS2V5OiBJbmRleFNwZWMsXG4gIGluZGV4ZXM6IEluZGV4U3BlY1tdXG4pOiBUYWJsZVNjaGVtYSB7XG4gIHJldHVybiB7XG4gICAgbmFtZSxcbiAgICBwcmltS2V5LFxuICAgIGluZGV4ZXMsXG4gICAgbWFwcGVkQ2xhc3M6IG51bGwsXG4gICAgaWR4QnlOYW1lOiBhcnJheVRvT2JqZWN0KGluZGV4ZXMsIGluZGV4ID0+IFtpbmRleC5uYW1lLCBpbmRleF0pXG4gIH07XG59XG4iLCAiaW1wb3J0IHsgbWF4U3RyaW5nIH0gZnJvbSAnLi4vZ2xvYmFscy9jb25zdGFudHMnO1xuXG5leHBvcnQgZnVuY3Rpb24gc2FmYXJpTXVsdGlTdG9yZUZpeChzdG9yZU5hbWVzOiBzdHJpbmdbXSkge1xuICByZXR1cm4gc3RvcmVOYW1lcy5sZW5ndGggPT09IDEgPyBzdG9yZU5hbWVzWzBdIDogc3RvcmVOYW1lcztcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGdldE5hdGl2ZUdldERhdGFiYXNlTmFtZXNGbihpbmRleGVkREIpIHtcbiAgdmFyIGZuID0gaW5kZXhlZERCICYmIChpbmRleGVkREIuZ2V0RGF0YWJhc2VOYW1lcyB8fCBpbmRleGVkREIud2Via2l0R2V0RGF0YWJhc2VOYW1lcyk7XG4gIHJldHVybiBmbiAmJiBmbi5iaW5kKGluZGV4ZWREQik7XG59XG5cbmV4cG9ydCBsZXQgZ2V0TWF4S2V5ID0gKElkYktleVJhbmdlOiB0eXBlb2YgSURCS2V5UmFuZ2UpID0+IHtcbiAgdHJ5IHtcbiAgICBJZGJLZXlSYW5nZS5vbmx5KFtbXV0pO1xuICAgIGdldE1heEtleSA9ICgpID0+IFtbXV07XG4gICAgcmV0dXJuIFtbXV07XG4gIH0gY2F0Y2ggKGUpIHtcbiAgICBnZXRNYXhLZXkgPSAoKSA9PiBtYXhTdHJpbmc7XG4gICAgcmV0dXJuIG1heFN0cmluZztcbiAgfVxufVxuIiwgImltcG9ydCB7IGdldEJ5S2V5UGF0aCB9IGZyb20gJy4uL2Z1bmN0aW9ucy91dGlscyc7XG5cbmV4cG9ydCBmdW5jdGlvbiBnZXRLZXlFeHRyYWN0b3IgKGtleVBhdGg6IG51bGwgfCBzdHJpbmcgfCBzdHJpbmdbXSkgOiAoYTogYW55KSA9PiBhbnkge1xuICBpZiAoa2V5UGF0aCA9PSBudWxsKSB7XG4gICAgcmV0dXJuICgpID0+IHVuZGVmaW5lZDtcbiAgfSBlbHNlIGlmICh0eXBlb2Yga2V5UGF0aCA9PT0gJ3N0cmluZycpIHtcbiAgICByZXR1cm4gZ2V0U2luZ2xlUGF0aEtleUV4dHJhY3RvcihrZXlQYXRoKTtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gb2JqID0+IGdldEJ5S2V5UGF0aChvYmosIGtleVBhdGgpO1xuICB9XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBnZXRTaW5nbGVQYXRoS2V5RXh0cmFjdG9yKGtleVBhdGg6IHN0cmluZykge1xuICBjb25zdCBzcGxpdCA9IGtleVBhdGguc3BsaXQoJy4nKTtcbiAgaWYgKHNwbGl0Lmxlbmd0aCA9PT0gMSkge1xuICAgIHJldHVybiBvYmogPT4gb2JqW2tleVBhdGhdO1xuICB9IGVsc2Uge1xuICAgIHJldHVybiBvYmogPT4gZ2V0QnlLZXlQYXRoKG9iaiwga2V5UGF0aCk7XG4gIH1cbn1cbiIsICJpbXBvcnQge1xuICBEQkNvcmUsXG4gIERCQ29yZUN1cnNvcixcbiAgREJDb3JlT3BlbkN1cnNvclJlcXVlc3QsXG4gIERCQ29yZVF1ZXJ5UmVxdWVzdCxcbiAgREJDb3JlSW5kZXgsXG4gIERCQ29yZUtleVJhbmdlLFxuICBEQkNvcmVRdWVyeVJlc3BvbnNlLFxuICBEQkNvcmVSYW5nZVR5cGUsXG4gIERCQ29yZVNjaGVtYSxcbiAgREJDb3JlVGFibGVTY2hlbWEsXG4gIERCQ29yZVRhYmxlLFxuICBEQkNvcmVNdXRhdGVSZXNwb25zZSxcbn0gZnJvbSBcIi4uL3B1YmxpYy90eXBlcy9kYmNvcmVcIjtcbmltcG9ydCB7IGlzQXJyYXkgfSBmcm9tICcuLi9mdW5jdGlvbnMvdXRpbHMnO1xuaW1wb3J0IHsgZXZlbnRSZWplY3RIYW5kbGVyLCBwcmV2ZW50RGVmYXVsdCB9IGZyb20gJy4uL2Z1bmN0aW9ucy9ldmVudC13cmFwcGVycyc7XG5pbXBvcnQgeyB3cmFwIH0gZnJvbSAnLi4vaGVscGVycy9wcm9taXNlJztcbmltcG9ydCB7IGdldE1heEtleSB9IGZyb20gJy4uL2Z1bmN0aW9ucy9xdWlya3MnO1xuaW1wb3J0IHsgZ2V0S2V5RXh0cmFjdG9yIH0gZnJvbSAnLi9nZXQta2V5LWV4dHJhY3Rvcic7XG5cbmV4cG9ydCBmdW5jdGlvbiBhcnJheWlmeTxUPihhcnJheUxpa2U6IHtsZW5ndGg6IG51bWJlciwgW2luZGV4OiBudW1iZXJdOiBUfSk6IFRbXSB7XG4gIHJldHVybiBbXS5zbGljZS5jYWxsKGFycmF5TGlrZSk7XG59XG5leHBvcnQgZnVuY3Rpb24gcGljazxULFByb3AgZXh0ZW5kcyBrZXlvZiBUPihvYmo6IFQsIHByb3BzOiBQcm9wW10pOiBQaWNrPFQsIFByb3A+IHtcbiAgY29uc3QgcmVzdWx0ID0ge30gYXMgUGljazxULCBQcm9wPjtcbiAgcHJvcHMuZm9yRWFjaChwcm9wID0+IHJlc3VsdFtwcm9wXSA9IG9ialtwcm9wXSk7XG4gIHJldHVybiByZXN1bHQ7XG59XG5cbmxldCBfaWRfY291bnRlciA9IDA7XG5cbmV4cG9ydCBmdW5jdGlvbiBnZXRLZXlQYXRoQWxpYXMoa2V5UGF0aDogbnVsbCB8IHN0cmluZyB8IHN0cmluZ1tdKSB7XG4gIHJldHVybiBrZXlQYXRoID09IG51bGwgP1xuICAgIFwiOmlkXCIgOlxuICAgIHR5cGVvZiBrZXlQYXRoID09PSAnc3RyaW5nJyA/XG4gICAgICBrZXlQYXRoIDpcbiAgICAgIGBbJHtrZXlQYXRoLmpvaW4oJysnKX1dYDtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGNyZWF0ZURCQ29yZSAoXG4gIGRiOiBJREJEYXRhYmFzZSxcbiAgSWRiS2V5UmFuZ2U6IHR5cGVvZiBJREJLZXlSYW5nZSxcbiAgdG1wVHJhbnM6IElEQlRyYW5zYWN0aW9uKSA6IERCQ29yZVxue1xuICBmdW5jdGlvbiBleHRyYWN0U2NoZW1hKGRiOiBJREJEYXRhYmFzZSwgdHJhbnM6IElEQlRyYW5zYWN0aW9uKSA6IHtzY2hlbWE6IERCQ29yZVNjaGVtYSwgaGFzR2V0QWxsOiBib29sZWFufSB7XG4gICAgY29uc3QgdGFibGVzID0gYXJyYXlpZnkoZGIub2JqZWN0U3RvcmVOYW1lcyk7XG4gICAgcmV0dXJuIHtcbiAgICAgIHNjaGVtYToge1xuICAgICAgICBuYW1lOiBkYi5uYW1lLFxuICAgICAgICB0YWJsZXM6IHRhYmxlcy5tYXAodGFibGUgPT4gdHJhbnMub2JqZWN0U3RvcmUodGFibGUpKS5tYXAoc3RvcmUgPT4ge1xuICAgICAgICAgIGNvbnN0IHtrZXlQYXRoLCBhdXRvSW5jcmVtZW50fSA9IHN0b3JlO1xuICAgICAgICAgIGNvbnN0IGNvbXBvdW5kID0gaXNBcnJheShrZXlQYXRoKTtcbiAgICAgICAgICBjb25zdCBvdXRib3VuZCA9IGtleVBhdGggPT0gbnVsbDtcbiAgICAgICAgICBjb25zdCBpbmRleEJ5S2V5UGF0aDoge1trZXlQYXRoQWxpYXM6IHN0cmluZ106IERCQ29yZUluZGV4fSA9IHt9O1xuICAgICAgICAgIGNvbnN0IHJlc3VsdCA9IHtcbiAgICAgICAgICAgIG5hbWU6IHN0b3JlLm5hbWUsXG4gICAgICAgICAgICBwcmltYXJ5S2V5OiB7XG4gICAgICAgICAgICAgIG5hbWU6IG51bGwsXG4gICAgICAgICAgICAgIGlzUHJpbWFyeUtleTogdHJ1ZSxcbiAgICAgICAgICAgICAgb3V0Ym91bmQsXG4gICAgICAgICAgICAgIGNvbXBvdW5kLFxuICAgICAgICAgICAgICBrZXlQYXRoLFxuICAgICAgICAgICAgICBhdXRvSW5jcmVtZW50LFxuICAgICAgICAgICAgICB1bmlxdWU6IHRydWUsXG4gICAgICAgICAgICAgIGV4dHJhY3RLZXk6IGdldEtleUV4dHJhY3RvcihrZXlQYXRoKVxuICAgICAgICAgICAgfSBhcyBEQkNvcmVJbmRleCxcbiAgICAgICAgICAgIGluZGV4ZXM6IGFycmF5aWZ5KHN0b3JlLmluZGV4TmFtZXMpLm1hcChpbmRleE5hbWUgPT4gc3RvcmUuaW5kZXgoaW5kZXhOYW1lKSlcbiAgICAgICAgICAgICAgLm1hcChpbmRleCA9PiB7XG4gICAgICAgICAgICAgICAgY29uc3Qge25hbWUsIHVuaXF1ZSwgbXVsdGlFbnRyeSwga2V5UGF0aH0gPSBpbmRleDtcbiAgICAgICAgICAgICAgICBjb25zdCBjb21wb3VuZCA9IGlzQXJyYXkoa2V5UGF0aCk7XG4gICAgICAgICAgICAgICAgY29uc3QgcmVzdWx0OiBEQkNvcmVJbmRleCA9IHtcbiAgICAgICAgICAgICAgICAgIG5hbWUsXG4gICAgICAgICAgICAgICAgICBjb21wb3VuZCxcbiAgICAgICAgICAgICAgICAgIGtleVBhdGgsXG4gICAgICAgICAgICAgICAgICB1bmlxdWUsXG4gICAgICAgICAgICAgICAgICBtdWx0aUVudHJ5LFxuICAgICAgICAgICAgICAgICAgZXh0cmFjdEtleTogZ2V0S2V5RXh0cmFjdG9yKGtleVBhdGgpXG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICBpbmRleEJ5S2V5UGF0aFtnZXRLZXlQYXRoQWxpYXMoa2V5UGF0aCldID0gcmVzdWx0O1xuICAgICAgICAgICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgZ2V0SW5kZXhCeUtleVBhdGg6IChrZXlQYXRoOiBudWxsIHwgc3RyaW5nIHwgc3RyaW5nW10pID0+IGluZGV4QnlLZXlQYXRoW2dldEtleVBhdGhBbGlhcyhrZXlQYXRoKV1cbiAgICAgICAgICB9O1xuICAgICAgICAgIGluZGV4QnlLZXlQYXRoW1wiOmlkXCJdID0gcmVzdWx0LnByaW1hcnlLZXk7XG4gICAgICAgICAgaWYgKGtleVBhdGggIT0gbnVsbCkge1xuICAgICAgICAgICAgaW5kZXhCeUtleVBhdGhbZ2V0S2V5UGF0aEFsaWFzKGtleVBhdGgpXSA9IHJlc3VsdC5wcmltYXJ5S2V5O1xuICAgICAgICAgIH1cbiAgICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgICAgICB9KVxuICAgICAgfSxcbiAgICAgIGhhc0dldEFsbDogdGFibGVzLmxlbmd0aCA+IDAgJiYgKCdnZXRBbGwnIGluIHRyYW5zLm9iamVjdFN0b3JlKHRhYmxlc1swXSkpICYmXG4gICAgICAgICEodHlwZW9mIG5hdmlnYXRvciAhPT0gJ3VuZGVmaW5lZCcgJiYgL1NhZmFyaS8udGVzdChuYXZpZ2F0b3IudXNlckFnZW50KSAmJlxuICAgICAgICAhLyhDaHJvbWVcXC98RWRnZVxcLykvLnRlc3QobmF2aWdhdG9yLnVzZXJBZ2VudCkgJiZcbiAgICAgICAgW10uY29uY2F0KG5hdmlnYXRvci51c2VyQWdlbnQubWF0Y2goL1NhZmFyaVxcLyhcXGQqKS8pKVsxXSA8IDYwNCkgLy8gQnVnIHdpdGggZ2V0QWxsKCkgb24gU2FmYXJpIHZlcjw2MDQuIFNlZSBkaXNjdXNzaW9uIGZvbGxvd2luZyBQUiAjNTc5XG4gICAgfTtcbiAgfVxuXG4gIGZ1bmN0aW9uIG1ha2VJREJLZXlSYW5nZSAocmFuZ2U6IERCQ29yZUtleVJhbmdlKSA6IElEQktleVJhbmdlIHwgbnVsbCB7XG4gICAgaWYgKHJhbmdlLnR5cGUgPT09IERCQ29yZVJhbmdlVHlwZS5BbnkpIHJldHVybiBudWxsO1xuICAgIGlmIChyYW5nZS50eXBlID09PSBEQkNvcmVSYW5nZVR5cGUuTmV2ZXIpIHRocm93IG5ldyBFcnJvcihcIkNhbm5vdCBjb252ZXJ0IG5ldmVyIHR5cGUgdG8gSURCS2V5UmFuZ2VcIik7XG4gICAgY29uc3Qge2xvd2VyLCB1cHBlciwgbG93ZXJPcGVuLCB1cHBlck9wZW59ID0gcmFuZ2U7XG4gICAgY29uc3QgaWRiUmFuZ2UgPSBsb3dlciA9PT0gdW5kZWZpbmVkID9cbiAgICAgIHVwcGVyID09PSB1bmRlZmluZWQgP1xuICAgICAgICBudWxsIDogLy9JREJLZXlSYW5nZS5sb3dlckJvdW5kKC1JbmZpbml0eSwgZmFsc2UpIDogLy8gQW55IHJhbmdlIChUT0RPOiBTaG91bGQgd2UgcmV0dXJuIG51bGwgaW5zdGVhZD8pXG4gICAgICAgIElkYktleVJhbmdlLnVwcGVyQm91bmQodXBwZXIsICEhdXBwZXJPcGVuKSA6IC8vIGJlbG93XG4gICAgICB1cHBlciA9PT0gdW5kZWZpbmVkID9cbiAgICAgICAgSWRiS2V5UmFuZ2UubG93ZXJCb3VuZChsb3dlciwgISFsb3dlck9wZW4pIDogLy8gYWJvdmVcbiAgICAgICAgSWRiS2V5UmFuZ2UuYm91bmQobG93ZXIsIHVwcGVyLCAhIWxvd2VyT3BlbiwgISF1cHBlck9wZW4pO1xuICAgIHJldHVybiBpZGJSYW5nZTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGNyZWF0ZURiQ29yZVRhYmxlKHRhYmxlU2NoZW1hOiBEQkNvcmVUYWJsZVNjaGVtYSk6IERCQ29yZVRhYmxlIHtcbiAgICBjb25zdCB0YWJsZU5hbWUgPSB0YWJsZVNjaGVtYS5uYW1lO1xuXG4gICAgZnVuY3Rpb24gbXV0YXRlICh7dHJhbnMsIHR5cGUsIGtleXMsIHZhbHVlcywgcmFuZ2V9KSB7XG4gICAgICByZXR1cm4gbmV3IFByb21pc2U8REJDb3JlTXV0YXRlUmVzcG9uc2U+KChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgICAgICAgcmVzb2x2ZSA9IHdyYXAocmVzb2x2ZSk7XG4gICAgICAgIGNvbnN0IHN0b3JlID0gKHRyYW5zIGFzIElEQlRyYW5zYWN0aW9uKS5vYmplY3RTdG9yZSh0YWJsZU5hbWUpO1xuICAgICAgICBjb25zdCBvdXRib3VuZCA9IHN0b3JlLmtleVBhdGggPT0gbnVsbDtcbiAgICAgICAgY29uc3QgaXNBZGRPclB1dCA9IHR5cGUgPT09IFwicHV0XCIgfHwgdHlwZSA9PT0gXCJhZGRcIjtcbiAgICAgICAgaWYgKCFpc0FkZE9yUHV0ICYmIHR5cGUgIT09ICdkZWxldGUnICYmIHR5cGUgIT09ICdkZWxldGVSYW5nZScpXG4gICAgICAgICAgdGhyb3cgbmV3IEVycm9yIChcIkludmFsaWQgb3BlcmF0aW9uIHR5cGU6IFwiICsgdHlwZSk7XG5cbiAgICAgICAgY29uc3Qge2xlbmd0aH0gPSBrZXlzIHx8IHZhbHVlcyB8fCB7bGVuZ3RoOiAxfTsgLy8ga2V5cy5sZW5ndGggaWYga2V5cy4gdmFsdWVzLmxlbmd0aCBpZiB2YWx1ZXMuIDEgaWYgcmFuZ2UuXG4gICAgICAgIGlmIChrZXlzICYmIHZhbHVlcyAmJiBrZXlzLmxlbmd0aCAhPT0gdmFsdWVzLmxlbmd0aCkge1xuICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIkdpdmVuIGtleXMgYXJyYXkgbXVzdCBoYXZlIHNhbWUgbGVuZ3RoIGFzIGdpdmVuIHZhbHVlcyBhcnJheS5cIik7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGxlbmd0aCA9PT0gMClcbiAgICAgICAgICAvLyBObyBpdGVtcyB0byB3cml0ZS4gRG9uJ3QgZXZlbiBib3RoZXIhXG4gICAgICAgICAgcmV0dXJuIHJlc29sdmUoe251bUZhaWx1cmVzOiAwLCBmYWlsdXJlczoge30sIHJlc3VsdHM6IFtdLCBsYXN0UmVzdWx0OiB1bmRlZmluZWR9KTtcblxuICAgICAgICBsZXQgcmVxOiBJREJSZXF1ZXN0O1xuICAgICAgICBjb25zdCByZXFzOiBJREJSZXF1ZXN0W10gPSBbXTtcbiAgICAgICAgICBcbiAgICAgICAgY29uc3QgZmFpbHVyZXM6IHtbb3BlcmF0aW9uTnVtYmVyOiBudW1iZXJdOiBFcnJvcn0gPSBbXTtcbiAgICAgICAgbGV0IG51bUZhaWx1cmVzID0gMDtcbiAgICAgICAgY29uc3QgZXJyb3JIYW5kbGVyID0gXG4gICAgICAgICAgZXZlbnQgPT4ge1xuICAgICAgICAgICAgKytudW1GYWlsdXJlcztcbiAgICAgICAgICAgIHByZXZlbnREZWZhdWx0KGV2ZW50KTtcbiAgICAgICAgICB9O1xuICBcbiAgICAgICAgaWYgKHR5cGUgPT09ICdkZWxldGVSYW5nZScpIHtcbiAgICAgICAgICAvLyBIZXJlIHRoZSBhcmd1bWVudCBpcyB0aGUgcmFuZ2VcbiAgICAgICAgICBpZiAocmFuZ2UudHlwZSA9PT0gREJDb3JlUmFuZ2VUeXBlLk5ldmVyKVxuICAgICAgICAgICAgcmV0dXJuIHJlc29sdmUoe251bUZhaWx1cmVzLCBmYWlsdXJlcywgcmVzdWx0czogW10sIGxhc3RSZXN1bHQ6IHVuZGVmaW5lZH0pOyAvLyBEZWxldGluZyB0aGUgTmV2ZXIgcmFuZ2Ugc2hvdWxudCBkbyBhbnl0aGluZy5cbiAgICAgICAgICBpZiAocmFuZ2UudHlwZSA9PT0gREJDb3JlUmFuZ2VUeXBlLkFueSlcbiAgICAgICAgICAgIHJlcXMucHVzaChyZXEgPSBzdG9yZS5jbGVhcigpKTsgLy8gRGVsZXRpbmcgdGhlIEFueSByYW5nZSBpcyBlcXVpdmFsZW50IHRvIHN0b3JlLmNsZWFyKClcbiAgICAgICAgICBlbHNlXG4gICAgICAgICAgICByZXFzLnB1c2gocmVxID0gc3RvcmUuZGVsZXRlKG1ha2VJREJLZXlSYW5nZShyYW5nZSkpKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAvLyBObyBtYXR0ZXIgYWRkLCBwdXQgb3IgZGVsZXRlIC0gZmluZCBvdXQgYXJyYXlzIG9mIGZpcnN0IGFuZCBzZWNvbmQgYXJndW1lbnRzIHRvIGl0LlxuICAgICAgICAgIGNvbnN0IFthcmdzMSwgYXJnczJdID0gaXNBZGRPclB1dCA/XG4gICAgICAgICAgICBvdXRib3VuZCA/XG4gICAgICAgICAgICAgIFt2YWx1ZXMsIGtleXNdIDpcbiAgICAgICAgICAgICAgW3ZhbHVlcywgbnVsbF0gOlxuICAgICAgICAgICAgW2tleXMsIG51bGxdO1xuXG4gICAgICAgICAgaWYgKGlzQWRkT3JQdXQpIHtcbiAgICAgICAgICAgIGZvciAobGV0IGk9MDsgaTxsZW5ndGg7ICsraSkge1xuICAgICAgICAgICAgICByZXFzLnB1c2gocmVxID0gKGFyZ3MyICYmIGFyZ3MyW2ldICE9PSB1bmRlZmluZWQgP1xuICAgICAgICAgICAgICAgIHN0b3JlW3R5cGVdKGFyZ3MxW2ldLCBhcmdzMltpXSkgOlxuICAgICAgICAgICAgICAgIHN0b3JlW3R5cGVdKGFyZ3MxW2ldKSkgYXMgSURCUmVxdWVzdCk7XG4gICAgICAgICAgICAgIHJlcS5vbmVycm9yID0gZXJyb3JIYW5kbGVyO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBmb3IgKGxldCBpPTA7IGk8bGVuZ3RoOyArK2kpIHtcbiAgICAgICAgICAgICAgcmVxcy5wdXNoKHJlcSA9IHN0b3JlW3R5cGVdKGFyZ3MxW2ldKSBhcyBJREJSZXF1ZXN0KTtcbiAgICAgICAgICAgICAgcmVxLm9uZXJyb3IgPSBlcnJvckhhbmRsZXI7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGNvbnN0IGRvbmUgPSBldmVudCA9PiB7XG4gICAgICAgICAgY29uc3QgbGFzdFJlc3VsdCA9IGV2ZW50LnRhcmdldC5yZXN1bHQ7XG4gICAgICAgICAgcmVxcy5mb3JFYWNoKChyZXEsIGkpID0+IHJlcS5lcnJvciAhPSBudWxsICYmIChmYWlsdXJlc1tpXSA9IHJlcS5lcnJvcikpO1xuICAgICAgICAgIHJlc29sdmUoe1xuICAgICAgICAgICAgbnVtRmFpbHVyZXMsXG4gICAgICAgICAgICBmYWlsdXJlcyxcbiAgICAgICAgICAgIHJlc3VsdHM6IHR5cGUgPT09IFwiZGVsZXRlXCIgPyBrZXlzIDogcmVxcy5tYXAocmVxID0+IHJlcS5yZXN1bHQpLFxuICAgICAgICAgICAgbGFzdFJlc3VsdFxuICAgICAgICAgIH0pO1xuICAgICAgICB9O1xuICBcbiAgICAgICAgcmVxLm9uZXJyb3IgPSBldmVudCA9PiB7IC8vIHdyYXAoKSBub3QgbmVlZGVkLiBBbGwgcGF0aHMgY2FsbGluZyBvdXRzaWRlIHdpbGwgd3JhcCFcbiAgICAgICAgICBlcnJvckhhbmRsZXIoZXZlbnQpO1xuICAgICAgICAgIGRvbmUoZXZlbnQpO1xuICAgICAgICB9O1xuICBcbiAgICAgICAgcmVxLm9uc3VjY2VzcyA9IGRvbmU7XG4gICAgICB9KTtcbiAgICB9XG4gICAgXG4gICAgZnVuY3Rpb24gb3BlbkN1cnNvciAoe3RyYW5zLCB2YWx1ZXMsIHF1ZXJ5LCByZXZlcnNlLCB1bmlxdWV9OiBEQkNvcmVPcGVuQ3Vyc29yUmVxdWVzdCk6IFByb21pc2U8REJDb3JlQ3Vyc29yPlxuICAgIHtcbiAgICAgIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgICAgIHJlc29sdmUgPSB3cmFwKHJlc29sdmUpO1xuICAgICAgICBjb25zdCB7aW5kZXgsIHJhbmdlfSA9IHF1ZXJ5O1xuICAgICAgICBjb25zdCBzdG9yZSA9ICh0cmFucyBhcyBJREJUcmFuc2FjdGlvbikub2JqZWN0U3RvcmUodGFibGVOYW1lKTtcbiAgICAgICAgLy8gc291cmNlXG4gICAgICAgIGNvbnN0IHNvdXJjZSA9IGluZGV4LmlzUHJpbWFyeUtleSA/XG4gICAgICAgICAgc3RvcmUgOlxuICAgICAgICAgIHN0b3JlLmluZGV4KGluZGV4Lm5hbWUpO1xuICAgICAgICAvLyBkaXJlY3Rpb25cbiAgICAgICAgY29uc3QgZGlyZWN0aW9uID0gcmV2ZXJzZSA/XG4gICAgICAgICAgdW5pcXVlID9cbiAgICAgICAgICAgIFwicHJldnVuaXF1ZVwiIDpcbiAgICAgICAgICAgIFwicHJldlwiIDpcbiAgICAgICAgICB1bmlxdWUgP1xuICAgICAgICAgICAgXCJuZXh0dW5pcXVlXCIgOlxuICAgICAgICAgICAgXCJuZXh0XCI7XG4gICAgICAgIC8vIHJlcXVlc3RcbiAgICAgICAgY29uc3QgcmVxID0gdmFsdWVzIHx8ICEoJ29wZW5LZXlDdXJzb3InIGluIHNvdXJjZSkgP1xuICAgICAgICAgIHNvdXJjZS5vcGVuQ3Vyc29yKG1ha2VJREJLZXlSYW5nZShyYW5nZSksIGRpcmVjdGlvbikgOlxuICAgICAgICAgIHNvdXJjZS5vcGVuS2V5Q3Vyc29yKG1ha2VJREJLZXlSYW5nZShyYW5nZSksIGRpcmVjdGlvbik7XG4gICAgICAgICAgXG4gICAgICAgIC8vIGl0ZXJhdGlvblxuICAgICAgICByZXEub25lcnJvciA9IGV2ZW50UmVqZWN0SGFuZGxlcihyZWplY3QpO1xuICAgICAgICByZXEub25zdWNjZXNzID0gd3JhcChldiA9PiB7XG5cbiAgICAgICAgICBjb25zdCBjdXJzb3IgPSByZXEucmVzdWx0IGFzIHVua25vd24gYXMgREJDb3JlQ3Vyc29yO1xuICAgICAgICAgIGlmICghY3Vyc29yKSB7XG4gICAgICAgICAgICByZXNvbHZlKG51bGwpO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgIH1cbiAgICAgICAgICAoY3Vyc29yIGFzIGFueSkuX19faWQgPSArK19pZF9jb3VudGVyO1xuICAgICAgICAgIChjdXJzb3IgYXMgYW55KS5kb25lID0gZmFsc2U7XG4gICAgICAgICAgY29uc3QgX2N1cnNvckNvbnRpbnVlID0gY3Vyc29yLmNvbnRpbnVlLmJpbmQoY3Vyc29yKTtcbiAgICAgICAgICBsZXQgX2N1cnNvckNvbnRpbnVlUHJpbWFyeUtleSA9IGN1cnNvci5jb250aW51ZVByaW1hcnlLZXk7XG4gICAgICAgICAgaWYgKF9jdXJzb3JDb250aW51ZVByaW1hcnlLZXkpIF9jdXJzb3JDb250aW51ZVByaW1hcnlLZXkgPSBfY3Vyc29yQ29udGludWVQcmltYXJ5S2V5LmJpbmQoY3Vyc29yKTtcbiAgICAgICAgICBjb25zdCBfY3Vyc29yQWR2YW5jZSA9IGN1cnNvci5hZHZhbmNlLmJpbmQoY3Vyc29yKTtcbiAgICAgICAgICBjb25zdCBkb1Rocm93Q3Vyc29ySXNOb3RTdGFydGVkID0gKCk9Pnt0aHJvdyBuZXcgRXJyb3IoXCJDdXJzb3Igbm90IHN0YXJ0ZWRcIik7fVxuICAgICAgICAgIGNvbnN0IGRvVGhyb3dDdXJzb3JJc1N0b3BwZWQgPSAoKT0+e3Rocm93IG5ldyBFcnJvcihcIkN1cnNvciBub3Qgc3RvcHBlZFwiKTt9XG4gICAgICAgICAgKGN1cnNvciBhcyBhbnkpLnRyYW5zID0gdHJhbnM7XG4gICAgICAgICAgY3Vyc29yLnN0b3AgPSBjdXJzb3IuY29udGludWUgPSBjdXJzb3IuY29udGludWVQcmltYXJ5S2V5ID0gY3Vyc29yLmFkdmFuY2UgPSBkb1Rocm93Q3Vyc29ySXNOb3RTdGFydGVkO1xuICAgICAgICAgIGN1cnNvci5mYWlsID0gd3JhcChyZWplY3QpO1xuICAgICAgICAgIGN1cnNvci5uZXh0ID0gZnVuY3Rpb24gKHRoaXM6IERCQ29yZUN1cnNvcikge1xuICAgICAgICAgICAgLy8gbmV4dCgpIG11c3Qgd29yayB3aXRoIFwidGhpc1wiIHBvaW50ZXIgaW4gb3JkZXIgdG8gZnVuY3Rpb24gY29ycmVjdGx5IGZvciBQcm94eUN1cnNvcnMgKGRlcml2ZWQgb2JqZWN0cylcbiAgICAgICAgICAgIC8vIHdpdGhvdXQgaGF2aW5nIHRvIHJlLWRlZmluZSBuZXh0KCkgb24gZWFjaCBjaGlsZC5cbiAgICAgICAgICAgIGxldCBnb3RPbmUgPSAxO1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuc3RhcnQoKCkgPT4gZ290T25lLS0gPyB0aGlzLmNvbnRpbnVlKCkgOiB0aGlzLnN0b3AoKSkudGhlbigoKSA9PiB0aGlzKTtcbiAgICAgICAgICB9O1xuICAgICAgICAgIGN1cnNvci5zdGFydCA9IChjYWxsYmFjaykgPT4ge1xuICAgICAgICAgICAgLy9jb25zb2xlLmxvZyhcIlN0YXJ0aW5nIGN1cnNvclwiLCAoY3Vyc29yIGFzIGFueSkuX19faWQpO1xuICAgICAgICAgICAgY29uc3QgaXRlcmF0aW9uUHJvbWlzZSA9IG5ldyBQcm9taXNlPHZvaWQ+KChyZXNvbHZlSXRlcmF0aW9uLCByZWplY3RJdGVyYXRpb24pID0+e1xuICAgICAgICAgICAgICByZXNvbHZlSXRlcmF0aW9uID0gd3JhcChyZXNvbHZlSXRlcmF0aW9uKTtcbiAgICAgICAgICAgICAgcmVxLm9uZXJyb3IgPSBldmVudFJlamVjdEhhbmRsZXIocmVqZWN0SXRlcmF0aW9uKTtcbiAgICAgICAgICAgICAgY3Vyc29yLmZhaWwgPSByZWplY3RJdGVyYXRpb247XG4gICAgICAgICAgICAgIGN1cnNvci5zdG9wID0gdmFsdWUgPT4ge1xuICAgICAgICAgICAgICAgIC8vY29uc29sZS5sb2coXCJDdXJzb3Igc3RvcFwiLCBjdXJzb3IpO1xuICAgICAgICAgICAgICAgIGN1cnNvci5zdG9wID0gY3Vyc29yLmNvbnRpbnVlID0gY3Vyc29yLmNvbnRpbnVlUHJpbWFyeUtleSA9IGN1cnNvci5hZHZhbmNlID0gZG9UaHJvd0N1cnNvcklzU3RvcHBlZDtcbiAgICAgICAgICAgICAgICByZXNvbHZlSXRlcmF0aW9uKHZhbHVlKTtcbiAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgLy8gTm93IGNoYW5nZSByZXEub25zdWNjZXNzIHRvIGEgY2FsbGJhY2sgdGhhdCBkb2Vzbid0IGNhbGwgaW5pdEN1cnNvciBidXQganVzdCBvYnNlcnZlci5uZXh0KClcbiAgICAgICAgICAgIGNvbnN0IGd1YXJkZWRDYWxsYmFjayA9ICgpID0+IHtcbiAgICAgICAgICAgICAgaWYgKHJlcS5yZXN1bHQpIHtcbiAgICAgICAgICAgICAgICAvL2NvbnNvbGUubG9nKFwiTmV4dCByZXN1bHRcIiwgY3Vyc29yKTtcbiAgICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgICAgY2FsbGJhY2soKTtcbiAgICAgICAgICAgICAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgICAgICAgICAgICAgIGN1cnNvci5mYWlsKGVycik7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIChjdXJzb3IgYXMgYW55KS5kb25lID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICBjdXJzb3Iuc3RhcnQgPSAoKT0+e3Rocm93IG5ldyBFcnJvcihcIkN1cnNvciBiZWhpbmQgbGFzdCBlbnRyeVwiKTt9XG4gICAgICAgICAgICAgICAgY3Vyc29yLnN0b3AoKTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmVxLm9uc3VjY2VzcyA9IHdyYXAoZXYgPT4ge1xuICAgICAgICAgICAgICAvL2N1cnNvci5jb250aW51ZSA9IF9jdXJzb3JDb250aW51ZTtcbiAgICAgICAgICAgICAgLy9jdXJzb3IuY29udGludWVQcmltYXJ5S2V5ID0gX2N1cnNvckNvbnRpbnVlUHJpbWFyeUtleTtcbiAgICAgICAgICAgICAgLy9jdXJzb3IuYWR2YW5jZSA9IF9jdXJzb3JBZHZhbmNlO1xuICAgICAgICAgICAgICByZXEub25zdWNjZXNzID0gZ3VhcmRlZENhbGxiYWNrO1xuICAgICAgICAgICAgICBndWFyZGVkQ2FsbGJhY2soKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgY3Vyc29yLmNvbnRpbnVlID0gX2N1cnNvckNvbnRpbnVlO1xuICAgICAgICAgICAgY3Vyc29yLmNvbnRpbnVlUHJpbWFyeUtleSA9IF9jdXJzb3JDb250aW51ZVByaW1hcnlLZXk7XG4gICAgICAgICAgICBjdXJzb3IuYWR2YW5jZSA9IF9jdXJzb3JBZHZhbmNlO1xuICAgICAgICAgICAgZ3VhcmRlZENhbGxiYWNrKCk7XG4gICAgICAgICAgICByZXR1cm4gaXRlcmF0aW9uUHJvbWlzZTtcbiAgICAgICAgICB9O1xuICAgICAgICAgIHJlc29sdmUoY3Vyc29yKTtcbiAgICAgICAgfSwgcmVqZWN0KTsgXG4gICAgICB9KTtcbiAgICB9XG4gIFxuICAgIGZ1bmN0aW9uIHF1ZXJ5IChoYXNHZXRBbGw6IGJvb2xlYW4pIHtcbiAgICAgIHJldHVybiAocmVxdWVzdDogREJDb3JlUXVlcnlSZXF1ZXN0KSA9PiB7XG4gICAgICAgIHJldHVybiBuZXcgUHJvbWlzZTxEQkNvcmVRdWVyeVJlc3BvbnNlPigocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgICAgICAgcmVzb2x2ZSA9IHdyYXAocmVzb2x2ZSk7XG4gICAgICAgICAgY29uc3Qge3RyYW5zLCB2YWx1ZXMsIGxpbWl0LCBxdWVyeX0gPSByZXF1ZXN0O1xuICAgICAgICAgIGNvbnN0IG5vbkluZmluaXRMaW1pdCA9IGxpbWl0ID09PSBJbmZpbml0eSA/IHVuZGVmaW5lZCA6IGxpbWl0O1xuICAgICAgICAgIGNvbnN0IHtpbmRleCwgcmFuZ2V9ID0gcXVlcnk7XG4gICAgICAgICAgY29uc3Qgc3RvcmUgPSAodHJhbnMgYXMgSURCVHJhbnNhY3Rpb24pLm9iamVjdFN0b3JlKHRhYmxlTmFtZSk7XG4gICAgICAgICAgY29uc3Qgc291cmNlID0gaW5kZXguaXNQcmltYXJ5S2V5ID8gc3RvcmUgOiBzdG9yZS5pbmRleChpbmRleC5uYW1lKTtcbiAgICAgICAgICBjb25zdCBpZGJLZXlSYW5nZSA9IG1ha2VJREJLZXlSYW5nZShyYW5nZSk7XG4gICAgICAgICAgaWYgKGxpbWl0ID09PSAwKSByZXR1cm4gcmVzb2x2ZSh7cmVzdWx0OiBbXX0pO1xuICAgICAgICAgIGlmIChoYXNHZXRBbGwpIHtcbiAgICAgICAgICAgIGNvbnN0IHJlcSA9IHZhbHVlcyA/XG4gICAgICAgICAgICAgICAgKHNvdXJjZSBhcyBhbnkpLmdldEFsbChpZGJLZXlSYW5nZSwgbm9uSW5maW5pdExpbWl0KSA6XG4gICAgICAgICAgICAgICAgKHNvdXJjZSBhcyBhbnkpLmdldEFsbEtleXMoaWRiS2V5UmFuZ2UsIG5vbkluZmluaXRMaW1pdCk7XG4gICAgICAgICAgICByZXEub25zdWNjZXNzID0gZXZlbnQgPT4gcmVzb2x2ZSh7cmVzdWx0OiBldmVudC50YXJnZXQucmVzdWx0fSk7XG4gICAgICAgICAgICByZXEub25lcnJvciA9IGV2ZW50UmVqZWN0SGFuZGxlcihyZWplY3QpO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBsZXQgY291bnQgPSAwO1xuICAgICAgICAgICAgY29uc3QgcmVxID0gdmFsdWVzIHx8ICEoJ29wZW5LZXlDdXJzb3InIGluIHNvdXJjZSkgP1xuICAgICAgICAgICAgICBzb3VyY2Uub3BlbkN1cnNvcihpZGJLZXlSYW5nZSkgOlxuICAgICAgICAgICAgICBzb3VyY2Uub3BlbktleUN1cnNvcihpZGJLZXlSYW5nZSlcbiAgICAgICAgICAgIGNvbnN0IHJlc3VsdCA9IFtdO1xuICAgICAgICAgICAgcmVxLm9uc3VjY2VzcyA9IGV2ZW50ID0+IHtcbiAgICAgICAgICAgICAgY29uc3QgY3Vyc29yID0gcmVxLnJlc3VsdCBhcyBJREJDdXJzb3JXaXRoVmFsdWU7XG4gICAgICAgICAgICAgIGlmICghY3Vyc29yKSByZXR1cm4gcmVzb2x2ZSh7cmVzdWx0fSk7XG4gICAgICAgICAgICAgIHJlc3VsdC5wdXNoKHZhbHVlcyA/IGN1cnNvci52YWx1ZSA6IGN1cnNvci5wcmltYXJ5S2V5KTtcbiAgICAgICAgICAgICAgaWYgKCsrY291bnQgPT09IGxpbWl0KSByZXR1cm4gcmVzb2x2ZSh7cmVzdWx0fSk7XG4gICAgICAgICAgICAgIGN1cnNvci5jb250aW51ZSgpO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIHJlcS5vbmVycm9yID0gZXZlbnRSZWplY3RIYW5kbGVyKHJlamVjdCk7XG4gICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgIH07XG4gICAgfVxuICBcbiAgICByZXR1cm4ge1xuICAgICAgbmFtZTogdGFibGVOYW1lLFxuICAgICAgc2NoZW1hOiB0YWJsZVNjaGVtYSxcbiAgICAgIFxuICAgICAgbXV0YXRlLFxuXG4gICAgICBnZXRNYW55ICh7dHJhbnMsIGtleXN9KSB7XG4gICAgICAgIHJldHVybiBuZXcgUHJvbWlzZTxhbnlbXT4oKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuICAgICAgICAgIHJlc29sdmUgPSB3cmFwKHJlc29sdmUpO1xuICAgICAgICAgIGNvbnN0IHN0b3JlID0gKHRyYW5zIGFzIElEQlRyYW5zYWN0aW9uKS5vYmplY3RTdG9yZSh0YWJsZU5hbWUpO1xuICAgICAgICAgIGNvbnN0IGxlbmd0aCA9IGtleXMubGVuZ3RoO1xuICAgICAgICAgIGNvbnN0IHJlc3VsdCA9IG5ldyBBcnJheShsZW5ndGgpO1xuICAgICAgICAgIGxldCBrZXlDb3VudCA9IDA7XG4gICAgICAgICAgbGV0IGNhbGxiYWNrQ291bnQgPSAwO1xuICAgICAgICAgIGxldCB2YWx1ZUNvdW50ID0gMDtcbiAgICAgICAgICBsZXQgcmVxOiBJREJSZXF1ZXN0ICYge19wb3M/OiBudW1iZXJ9O1xuICAgIFxuICAgICAgICAgIGNvbnN0IHN1Y2Nlc3NIYW5kbGVyID0gZXZlbnQgPT4ge1xuICAgICAgICAgICAgY29uc3QgcmVxID0gZXZlbnQudGFyZ2V0O1xuICAgICAgICAgICAgaWYgKChyZXN1bHRbcmVxLl9wb3NdID0gcmVxLnJlc3VsdCkgIT0gbnVsbCkgKyt2YWx1ZUNvdW50O1xuICAgICAgICAgICAgaWYgKCsrY2FsbGJhY2tDb3VudCA9PT0ga2V5Q291bnQpIHJlc29sdmUocmVzdWx0KTtcbiAgICAgICAgICB9O1xuICAgICAgICAgIGNvbnN0IGVycm9ySGFuZGxlciA9IGV2ZW50UmVqZWN0SGFuZGxlcihyZWplY3QpO1xuICAgIFxuICAgICAgICAgIGZvciAobGV0IGk9MDsgaTxsZW5ndGg7ICsraSkge1xuICAgICAgICAgICAgY29uc3Qga2V5ID0ga2V5c1tpXTtcbiAgICAgICAgICAgIGlmIChrZXkgIT0gbnVsbCkge1xuICAgICAgICAgICAgICByZXEgPSBzdG9yZS5nZXQoa2V5c1tpXSk7XG4gICAgICAgICAgICAgIHJlcS5fcG9zID0gaTtcbiAgICAgICAgICAgICAgcmVxLm9uc3VjY2VzcyA9IHN1Y2Nlc3NIYW5kbGVyO1xuICAgICAgICAgICAgICByZXEub25lcnJvciA9IGVycm9ySGFuZGxlcjtcbiAgICAgICAgICAgICAgKytrZXlDb3VudDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKGtleUNvdW50ID09PSAwKSByZXNvbHZlKHJlc3VsdCk7XG4gICAgICAgIH0pO1xuICAgICAgfSxcblxuICAgICAgZ2V0ICh7dHJhbnMsIGtleX0pIHtcbiAgICAgICAgcmV0dXJuIG5ldyBQcm9taXNlPGFueT4oKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuICAgICAgICAgIHJlc29sdmUgPSB3cmFwIChyZXNvbHZlKTtcbiAgICAgICAgICBjb25zdCBzdG9yZSA9ICh0cmFucyBhcyBJREJUcmFuc2FjdGlvbikub2JqZWN0U3RvcmUodGFibGVOYW1lKTtcbiAgICAgICAgICBjb25zdCByZXEgPSBzdG9yZS5nZXQoa2V5KTtcbiAgICAgICAgICByZXEub25zdWNjZXNzID0gZXZlbnQgPT4gcmVzb2x2ZSgoZXZlbnQudGFyZ2V0IGFzIGFueSkucmVzdWx0KTtcbiAgICAgICAgICByZXEub25lcnJvciA9IGV2ZW50UmVqZWN0SGFuZGxlcihyZWplY3QpO1xuICAgICAgICB9KTtcbiAgICAgIH0sXG5cbiAgICAgIHF1ZXJ5OiBxdWVyeShoYXNHZXRBbGwpLFxuICAgICAgXG4gICAgICBvcGVuQ3Vyc29yLFxuXG4gICAgICBjb3VudCAoe3F1ZXJ5LCB0cmFuc30pIHtcbiAgICAgICAgY29uc3Qge2luZGV4LCByYW5nZX0gPSBxdWVyeTtcbiAgICAgICAgcmV0dXJuIG5ldyBQcm9taXNlPG51bWJlcj4oKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuICAgICAgICAgIGNvbnN0IHN0b3JlID0gKHRyYW5zIGFzIElEQlRyYW5zYWN0aW9uKS5vYmplY3RTdG9yZSh0YWJsZU5hbWUpO1xuICAgICAgICAgIGNvbnN0IHNvdXJjZSA9IGluZGV4LmlzUHJpbWFyeUtleSA/IHN0b3JlIDogc3RvcmUuaW5kZXgoaW5kZXgubmFtZSk7XG4gICAgICAgICAgY29uc3QgaWRiS2V5UmFuZ2UgPSBtYWtlSURCS2V5UmFuZ2UocmFuZ2UpO1xuICAgICAgICAgIGNvbnN0IHJlcSA9IGlkYktleVJhbmdlID8gc291cmNlLmNvdW50KGlkYktleVJhbmdlKSA6IHNvdXJjZS5jb3VudCgpO1xuICAgICAgICAgIHJlcS5vbnN1Y2Nlc3MgPSB3cmFwKGV2ID0+IHJlc29sdmUoKGV2LnRhcmdldCBhcyBJREJSZXF1ZXN0KS5yZXN1bHQpKTtcbiAgICAgICAgICByZXEub25lcnJvciA9IGV2ZW50UmVqZWN0SGFuZGxlcihyZWplY3QpO1xuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9O1xuICB9XG5cbiAgY29uc3Qge3NjaGVtYSwgaGFzR2V0QWxsfSA9IGV4dHJhY3RTY2hlbWEoZGIsIHRtcFRyYW5zKTtcbiAgY29uc3QgdGFibGVzID0gc2NoZW1hLnRhYmxlcy5tYXAodGFibGVTY2hlbWEgPT4gY3JlYXRlRGJDb3JlVGFibGUodGFibGVTY2hlbWEpKTtcbiAgY29uc3QgdGFibGVNYXA6IHtbbmFtZTogc3RyaW5nXTogREJDb3JlVGFibGV9ID0ge307XG4gIHRhYmxlcy5mb3JFYWNoKHRhYmxlID0+IHRhYmxlTWFwW3RhYmxlLm5hbWVdID0gdGFibGUpO1xuICByZXR1cm4ge1xuICAgIHN0YWNrOiBcImRiY29yZVwiLFxuICAgIFxuICAgIHRyYW5zYWN0aW9uOiBkYi50cmFuc2FjdGlvbi5iaW5kKGRiKSxcblxuICAgIHRhYmxlKG5hbWU6IHN0cmluZykge1xuICAgICAgY29uc3QgcmVzdWx0ID0gdGFibGVNYXBbbmFtZV07XG4gICAgICBpZiAoIXJlc3VsdCkgdGhyb3cgbmV3IEVycm9yKGBUYWJsZSAnJHtuYW1lfScgbm90IGZvdW5kYCk7XG4gICAgICByZXR1cm4gdGFibGVNYXBbbmFtZV07XG4gICAgfSxcblxuICAgIE1JTl9LRVk6IC1JbmZpbml0eSxcblxuICAgIE1BWF9LRVk6IGdldE1heEtleShJZGJLZXlSYW5nZSksXG5cbiAgICBzY2hlbWFcblxuICB9O1xufVxuIiwgImltcG9ydCB7IERleGllIH0gZnJvbSAnLi8nO1xuaW1wb3J0IHsgY3JlYXRlREJDb3JlIH0gZnJvbSAnLi4vLi4vZGJjb3JlL2RiY29yZS1pbmRleGVkZGInO1xuaW1wb3J0IHsgREJDb3JlIH0gZnJvbSAnLi4vLi4vcHVibGljL3R5cGVzL2RiY29yZSc7XG5pbXBvcnQgeyBEZXhpZURPTURlcGVuZGVuY2llcyB9IGZyb20gJy4uLy4uL3B1YmxpYy90eXBlcy9kZXhpZS1kb20tZGVwZW5kZW5jaWVzJztcbmltcG9ydCB7IERleGllU3RhY2tzLCBNaWRkbGV3YXJlIH0gZnJvbSAnLi4vLi4vcHVibGljL3R5cGVzL21pZGRsZXdhcmUnO1xuaW1wb3J0IHsgZXhjZXB0aW9ucyB9IGZyb20gJy4uLy4uL2Vycm9ycyc7XG5cbmZ1bmN0aW9uIGNyZWF0ZU1pZGRsZXdhcmVTdGFjazxUU3RhY2sgZXh0ZW5kcyB7c3RhY2s6IHN0cmluZ30+KFxuICBzdGFja0ltcGw6IHtzdGFjazogc3RyaW5nfSxcbiAgbWlkZGxld2FyZXM6IE1pZGRsZXdhcmU8e3N0YWNrOiBzdHJpbmd9PltdKTogVFN0YWNrIHtcbiAgcmV0dXJuIG1pZGRsZXdhcmVzLnJlZHVjZSgoZG93biwge2NyZWF0ZX0pID0+ICh7Li4uZG93biwgLi4uY3JlYXRlKGRvd24pfSksIHN0YWNrSW1wbCkgYXMgVFN0YWNrO1xufSBcblxuZnVuY3Rpb24gY3JlYXRlTWlkZGxld2FyZVN0YWNrcyhcbiAgbWlkZGxld2FyZXM6IHtbU3RhY2tOYW1lIGluIGtleW9mIERleGllU3RhY2tzXT86IE1pZGRsZXdhcmU8RGV4aWVTdGFja3NbU3RhY2tOYW1lXT5bXX0sXG4gIGlkYmRiOiBJREJEYXRhYmFzZSxcbiAge0lEQktleVJhbmdlLCBpbmRleGVkREJ9OiBEZXhpZURPTURlcGVuZGVuY2llcyxcbiAgdG1wVHJhbnM6IElEQlRyYW5zYWN0aW9uKToge1tTdGFja05hbWUgaW4ga2V5b2YgRGV4aWVTdGFja3NdPzogRGV4aWVTdGFja3NbU3RhY2tOYW1lXX1cbntcbiAgY29uc3QgZGJjb3JlID0gY3JlYXRlTWlkZGxld2FyZVN0YWNrPERCQ29yZT4oXG4gICAgY3JlYXRlREJDb3JlKGlkYmRiLCBJREJLZXlSYW5nZSwgdG1wVHJhbnMpLFxuICAgIG1pZGRsZXdhcmVzLmRiY29yZSk7XG4gIFxuICAvLyBUT0RPOiBDcmVhdGUgb3RoZXIgc3RhY2tzIHRoZSBzYW1lIHdheSBhcyBhYm92ZS4gVGhleSBtaWdodCBiZSBkZXBlbmRhbnQgb24gdGhlIHJlc3VsdFxuICAvLyBvZiBjcmVhdGluZyBkYmNvcmUgc3RhY2suXG5cbiAgcmV0dXJuIHtcbiAgICBkYmNvcmVcbiAgfTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGdlbmVyYXRlTWlkZGxld2FyZVN0YWNrcyhkYjogRGV4aWUsIHRtcFRyYW5zOiBJREJUcmFuc2FjdGlvbikge1xuICBjb25zdCBpZGJkYiA9IHRtcFRyYW5zLmRiO1xuICBjb25zdCBzdGFja3MgPSBjcmVhdGVNaWRkbGV3YXJlU3RhY2tzKGRiLl9taWRkbGV3YXJlcywgaWRiZGIsIGRiLl9kZXBzLCB0bXBUcmFucyk7XG4gIGRiLmNvcmUgPSBzdGFja3MuZGJjb3JlITtcbiAgZGIudGFibGVzLmZvckVhY2godGFibGUgPT4ge1xuICAgIGNvbnN0IHRhYmxlTmFtZSA9IHRhYmxlLm5hbWU7XG4gICAgaWYgKGRiLmNvcmUuc2NoZW1hLnRhYmxlcy5zb21lKHRibCA9PiB0YmwubmFtZSA9PT0gdGFibGVOYW1lKSkge1xuICAgICAgdGFibGUuY29yZSA9IGRiLmNvcmUudGFibGUodGFibGVOYW1lKTtcbiAgICAgIGlmIChkYlt0YWJsZU5hbWVdIGluc3RhbmNlb2YgZGIuVGFibGUpIHtcbiAgICAgICAgICBkYlt0YWJsZU5hbWVdLmNvcmUgPSB0YWJsZS5jb3JlO1xuICAgICAgfVxuICAgIH1cbiAgfSk7XG59XG4iLCAiaW1wb3J0IHsgRGV4aWUgfSBmcm9tICcuLi9kZXhpZSc7XG5pbXBvcnQgeyBEYlNjaGVtYSB9IGZyb20gJy4uLy4uL3B1YmxpYy90eXBlcy9kYi1zY2hlbWEnO1xuaW1wb3J0IHsgX2dsb2JhbCB9IGZyb20gXCIuLi8uLi9nbG9iYWxzL2dsb2JhbFwiO1xuaW1wb3J0IHsgc2V0UHJvcCwga2V5cywgc2xpY2UsIGlzQXJyYXksIHNoYWxsb3dDbG9uZSwgaXNBc3luY0Z1bmN0aW9uLCBkZWZpbmVQcm9wZXJ0eSwgZ2V0UHJvcGVydHlEZXNjcmlwdG9yIH0gZnJvbSAnLi4vLi4vZnVuY3Rpb25zL3V0aWxzJztcbmltcG9ydCB7IFRyYW5zYWN0aW9uIH0gZnJvbSAnLi4vdHJhbnNhY3Rpb24nO1xuaW1wb3J0IHsgVmVyc2lvbiB9IGZyb20gJy4vdmVyc2lvbic7XG5pbXBvcnQgUHJvbWlzZSwgeyBQU0QsIG5ld1Njb3BlLCBOYXRpdmVQcm9taXNlLCBkZWNyZW1lbnRFeHBlY3RlZEF3YWl0cywgaW5jcmVtZW50RXhwZWN0ZWRBd2FpdHMgfSBmcm9tICcuLi8uLi9oZWxwZXJzL3Byb21pc2UnO1xuaW1wb3J0IHsgZXhjZXB0aW9ucyB9IGZyb20gJy4uLy4uL2Vycm9ycyc7XG5pbXBvcnQgeyBUYWJsZVNjaGVtYSB9IGZyb20gJy4uLy4uL3B1YmxpYy90eXBlcy90YWJsZS1zY2hlbWEnO1xuaW1wb3J0IHsgSW5kZXhTcGVjIH0gZnJvbSAnLi4vLi4vcHVibGljL3R5cGVzL2luZGV4LXNwZWMnO1xuaW1wb3J0IHsgY3JlYXRlSW5kZXhTcGVjLCBuYW1lRnJvbUtleVBhdGggfSBmcm9tICcuLi8uLi9oZWxwZXJzL2luZGV4LXNwZWMnO1xuaW1wb3J0IHsgY3JlYXRlVGFibGVTY2hlbWEgfSBmcm9tICcuLi8uLi9oZWxwZXJzL3RhYmxlLXNjaGVtYSc7XG5pbXBvcnQgeyBnZW5lcmF0ZU1pZGRsZXdhcmVTdGFja3MgfSBmcm9tICcuLi9kZXhpZS9nZW5lcmF0ZS1taWRkbGV3YXJlLXN0YWNrcyc7XG5pbXBvcnQgeyBkZWJ1ZyB9IGZyb20gJy4uLy4uL2hlbHBlcnMvZGVidWcnO1xuaW1wb3J0IHsgUHJvbWlzZUV4dGVuZGVkIH0gZnJvbSAnLi4vLi4vcHVibGljL3R5cGVzL3Byb21pc2UtZXh0ZW5kZWQnO1xuXG5leHBvcnQgZnVuY3Rpb24gc2V0QXBpT25QbGFjZShkYjogRGV4aWUsIG9ianM6IE9iamVjdFtdLCB0YWJsZU5hbWVzOiBzdHJpbmdbXSwgZGJzY2hlbWE6IERiU2NoZW1hKSB7XG4gIHRhYmxlTmFtZXMuZm9yRWFjaCh0YWJsZU5hbWUgPT4ge1xuICAgIGNvbnN0IHNjaGVtYSA9IGRic2NoZW1hW3RhYmxlTmFtZV07XG4gICAgb2Jqcy5mb3JFYWNoKG9iaiA9PiB7XG4gICAgICBjb25zdCBwcm9wRGVzYyA9IGdldFByb3BlcnR5RGVzY3JpcHRvcihvYmosIHRhYmxlTmFtZSk7XG4gICAgICBpZiAoIXByb3BEZXNjIHx8IChcInZhbHVlXCIgaW4gcHJvcERlc2MgJiYgcHJvcERlc2MudmFsdWUgPT09IHVuZGVmaW5lZCkpIHtcbiAgICAgICAgLy8gRWl0aGVyIHRoZSBwcm9wIGlzIG5vdCBkZWNsYXJlZCwgb3IgaXQgaXMgaW5pdGlhbGl6ZWQgdG8gdW5kZWZpbmVkLlxuICAgICAgICBpZiAob2JqID09PSBkYi5UcmFuc2FjdGlvbi5wcm90b3R5cGUgfHwgb2JqIGluc3RhbmNlb2YgZGIuVHJhbnNhY3Rpb24pIHtcbiAgICAgICAgICAvLyBvYmogaXMgYSBUcmFuc2FjdGlvbiBwcm90b3R5cGUgKG9yIHByb3RvdHlwZSBvZiBhIHN1YmNsYXNzIHRvIFRyYW5zYWN0aW9uKVxuICAgICAgICAgIC8vIE1ha2UgdGhlIEFQSSBhIGdldHRlciB0aGF0IHJldHVybnMgdGhpcy50YWJsZSh0YWJsZU5hbWUpXG4gICAgICAgICAgc2V0UHJvcChvYmosIHRhYmxlTmFtZSwge1xuICAgICAgICAgICAgZ2V0KHRoaXM6IFRyYW5zYWN0aW9uKSB7IHJldHVybiB0aGlzLnRhYmxlKHRhYmxlTmFtZSk7IH0sXG4gICAgICAgICAgICBzZXQodmFsdWU6IGFueSkge1xuICAgICAgICAgICAgICAvLyBJc3N1ZSAjMTAzOVxuICAgICAgICAgICAgICAvLyBMZXQgXCJ0aGlzLnNjaGVtYSA9IGRic2NoZW1hO1wiIGFuZCBvdGhlciBwcm9wcyBpbiB0cmFuc2FjdGlvbiBjb25zdHJ1Y3RvciB3b3JrIGV2ZW4gaWYgdGhlcmUncyBhIG5hbWUgY29sbGlzaW9uIHdpdGggdGhlIHRhYmxlIG5hbWUuXG4gICAgICAgICAgICAgIGRlZmluZVByb3BlcnR5KHRoaXMsIHRhYmxlTmFtZSwge3ZhbHVlLCB3cml0YWJsZTogdHJ1ZSwgY29uZmlndXJhYmxlOiB0cnVlLCBlbnVtZXJhYmxlOiB0cnVlfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgLy8gVGFibGUgd2lsbCBub3QgYmUgYm91bmQgdG8gYSB0cmFuc2FjdGlvbiAod2lsbCB1c2UgRGV4aWUuY3VycmVudFRyYW5zYWN0aW9uKVxuICAgICAgICAgIG9ialt0YWJsZU5hbWVdID0gbmV3IGRiLlRhYmxlKHRhYmxlTmFtZSwgc2NoZW1hKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0pO1xuICB9KTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHJlbW92ZVRhYmxlc0FwaShkYjogRGV4aWUsIG9ianM6IE9iamVjdFtdKSB7XG4gIG9ianMuZm9yRWFjaChvYmogPT4ge1xuICAgIGZvciAobGV0IGtleSBpbiBvYmopIHtcbiAgICAgIGlmIChvYmpba2V5XSBpbnN0YW5jZW9mIGRiLlRhYmxlKSBkZWxldGUgb2JqW2tleV07XG4gICAgfVxuICB9KTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGxvd2VyVmVyc2lvbkZpcnN0KGE6IFZlcnNpb24sIGI6IFZlcnNpb24pIHtcbiAgcmV0dXJuIGEuX2NmZy52ZXJzaW9uIC0gYi5fY2ZnLnZlcnNpb247XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBydW5VcGdyYWRlcnMoZGI6IERleGllLCBvbGRWZXJzaW9uOiBudW1iZXIsIGlkYlVwZ3JhZGVUcmFuczogSURCVHJhbnNhY3Rpb24sIHJlamVjdCkge1xuICBjb25zdCBnbG9iYWxTY2hlbWEgPSBkYi5fZGJTY2hlbWE7XG4gIGlmIChpZGJVcGdyYWRlVHJhbnMub2JqZWN0U3RvcmVOYW1lcy5jb250YWlucygnJG1ldGEnKSAmJiAhZ2xvYmFsU2NoZW1hLiRtZXRhKSB7XG4gICAgZ2xvYmFsU2NoZW1hLiRtZXRhID0gY3JlYXRlVGFibGVTY2hlbWEoXCIkbWV0YVwiLCBwYXJzZUluZGV4U3ludGF4KFwiXCIpWzBdLCBbXSk7XG4gICAgZGIuX3N0b3JlTmFtZXMucHVzaCgnJG1ldGEnKTtcbiAgfVxuICBjb25zdCB0cmFucyA9IGRiLl9jcmVhdGVUcmFuc2FjdGlvbigncmVhZHdyaXRlJywgZGIuX3N0b3JlTmFtZXMsIGdsb2JhbFNjaGVtYSk7XG4gIHRyYW5zLmNyZWF0ZShpZGJVcGdyYWRlVHJhbnMpO1xuICB0cmFucy5fY29tcGxldGlvbi5jYXRjaChyZWplY3QpO1xuICBjb25zdCByZWplY3RUcmFuc2FjdGlvbiA9IHRyYW5zLl9yZWplY3QuYmluZCh0cmFucyk7XG4gIGNvbnN0IHRyYW5zbGVzcyA9IFBTRC50cmFuc2xlc3MgfHwgUFNEO1xuICBuZXdTY29wZSgoKSA9PiB7XG4gICAgUFNELnRyYW5zID0gdHJhbnM7XG4gICAgUFNELnRyYW5zbGVzcyA9IHRyYW5zbGVzcztcbiAgICBpZiAob2xkVmVyc2lvbiA9PT0gMCkge1xuICAgICAgLy8gQ3JlYXRlIHRhYmxlczpcbiAgICAgIGtleXMoZ2xvYmFsU2NoZW1hKS5mb3JFYWNoKHRhYmxlTmFtZSA9PiB7XG4gICAgICAgIGNyZWF0ZVRhYmxlKGlkYlVwZ3JhZGVUcmFucywgdGFibGVOYW1lLCBnbG9iYWxTY2hlbWFbdGFibGVOYW1lXS5wcmltS2V5LCBnbG9iYWxTY2hlbWFbdGFibGVOYW1lXS5pbmRleGVzKTtcbiAgICAgIH0pO1xuICAgICAgZ2VuZXJhdGVNaWRkbGV3YXJlU3RhY2tzKGRiLCBpZGJVcGdyYWRlVHJhbnMpO1xuICAgICAgUHJvbWlzZS5mb2xsb3coKCkgPT4gZGIub24ucG9wdWxhdGUuZmlyZSh0cmFucykpLmNhdGNoKHJlamVjdFRyYW5zYWN0aW9uKTtcbiAgICB9IGVsc2Uge1xuICAgICAgZ2VuZXJhdGVNaWRkbGV3YXJlU3RhY2tzKGRiLCBpZGJVcGdyYWRlVHJhbnMpO1xuICAgICAgcmV0dXJuIGdldEV4aXN0aW5nVmVyc2lvbihkYiwgdHJhbnMsIG9sZFZlcnNpb24pXG4gICAgICAgIC50aGVuKG9sZFZlcnNpb24gPT4gdXBkYXRlVGFibGVzQW5kSW5kZXhlcyhkYiwgb2xkVmVyc2lvbiwgdHJhbnMsIGlkYlVwZ3JhZGVUcmFucykpXG4gICAgICAgIC5jYXRjaChyZWplY3RUcmFuc2FjdGlvbik7XG4gICAgfVxuICB9KTtcbn1cblxuZXhwb3J0IHR5cGUgVXBncmFkZVF1ZXVlSXRlbSA9IChpZGJ0cmFuczogSURCVHJhbnNhY3Rpb24pID0+IFByb21pc2VMaWtlPGFueT4gfCB2b2lkO1xuXG5leHBvcnQgZnVuY3Rpb24gcGF0Y2hDdXJyZW50VmVyc2lvbihkYjogRGV4aWUsIGlkYlVwZ3JhZGVUcmFuczogSURCVHJhbnNhY3Rpb24pIHtcbiAgY3JlYXRlTWlzc2luZ1RhYmxlcyhkYi5fZGJTY2hlbWEsIGlkYlVwZ3JhZGVUcmFucyk7XG4gIGlmIChpZGJVcGdyYWRlVHJhbnMuZGIudmVyc2lvbiAlIDEwID09PSAwICYmICFpZGJVcGdyYWRlVHJhbnMub2JqZWN0U3RvcmVOYW1lcy5jb250YWlucygnJG1ldGEnKSkge1xuICAgIC8vIFJvbGxlZCBvdmVyIHRvIHRoZSBuZXh0IDEwLWllcyBkdWUgdG8gbWFueSBzY2hlbWEgdXBncmFkZXMgd2l0aG91dCBidW1waW5nIHZlcnNpb24uXG4gICAgLy8gTm8gcHJvYmxlbSEgV2UgcGluIHRoZSBkYXRhYmFzZSB0byBpdHMgZXhwZWN0ZWQgdmVyc2lvbiBieSBhZGRpbmcgdGhlICRtZXRhIHRhYmxlIHNvIHRoYXQgbmV4dFxuICAgIC8vIHRpbWUgdGhlIHByb2dyYW1tZXIgYnVtcHMgdGhlIHZlcnNpb24gYW5kIGF0dGFjaGVzLCBhbiB1cGdyYWRlciwgdGhhdCB1cGdyYWRlciB3aWxsIGluZGVlZCBydW4sXG4gICAgLy8gYXMgd2VsbCBhbnkgZnVydGhlciB1cGdyYWRlcnMgY29taW5nIGFmdGVyIHRoYXQuXG4gICAgaWRiVXBncmFkZVRyYW5zLmRiLmNyZWF0ZU9iamVjdFN0b3JlKCckbWV0YScpLmFkZChNYXRoLmNlaWwoKGlkYlVwZ3JhZGVUcmFucy5kYi52ZXJzaW9uIC8gMTApIC0gMSksICd2ZXJzaW9uJyk7XG4gIH1cbiAgY29uc3QgZ2xvYmFsU2NoZW1hID0gYnVpbGRHbG9iYWxTY2hlbWEoZGIsIGRiLmlkYmRiLCBpZGJVcGdyYWRlVHJhbnMpO1xuICBhZGp1c3RUb0V4aXN0aW5nSW5kZXhOYW1lcyhkYiwgZGIuX2RiU2NoZW1hLCBpZGJVcGdyYWRlVHJhbnMpO1xuICBjb25zdCBkaWZmID0gZ2V0U2NoZW1hRGlmZihnbG9iYWxTY2hlbWEsIGRiLl9kYlNjaGVtYSk7XG4gIGZvciAoY29uc3QgdGFibGVDaGFuZ2Ugb2YgZGlmZi5jaGFuZ2UpIHtcbiAgICBpZiAodGFibGVDaGFuZ2UuY2hhbmdlLmxlbmd0aCB8fCB0YWJsZUNoYW5nZS5yZWNyZWF0ZSkge1xuICAgICAgY29uc29sZS53YXJuKGBVbmFibGUgdG8gcGF0Y2ggaW5kZXhlcyBvZiB0YWJsZSAke3RhYmxlQ2hhbmdlLm5hbWV9IGJlY2F1c2UgaXQgaGFzIGNoYW5nZXMgb24gdGhlIHR5cGUgb2YgaW5kZXggb3IgcHJpbWFyeSBrZXkuYCk7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGNvbnN0IHN0b3JlID0gaWRiVXBncmFkZVRyYW5zLm9iamVjdFN0b3JlKHRhYmxlQ2hhbmdlLm5hbWUpO1xuICAgIHRhYmxlQ2hhbmdlLmFkZC5mb3JFYWNoKGlkeCA9PiB7XG4gICAgICBpZiAoZGVidWcpIGNvbnNvbGUuZGVidWcoYERleGllIHVwZ3JhZGUgcGF0Y2g6IENyZWF0aW5nIG1pc3NpbmcgaW5kZXggJHt0YWJsZUNoYW5nZS5uYW1lfS4ke2lkeC5zcmN9YCk7XG4gICAgICBhZGRJbmRleChzdG9yZSwgaWR4KTtcbiAgICB9KTtcbiAgfVxufVxuXG5mdW5jdGlvbiBnZXRFeGlzdGluZ1ZlcnNpb24oZGI6IERleGllLCB0cmFuczogVHJhbnNhY3Rpb24sIG9sZFZlcnNpb246IG51bWJlcik6IFByb21pc2VFeHRlbmRlZDxudW1iZXI+IHtcbiAgLy8gSW4gbm9ybWFsIGNhc2UsIGV4aXN0aW5nIHZlcnNpb24gaXMgdGhlIG5hdGl2ZSBpbnN0YWxsZWQgdmVyc2lvbiBkaXZpZGVkIGJ5IDEwLlxuICAvLyBIb3dldmVyLCBpbiBjYXNlIG1vcmUgdGhhbiAxMCBzY2hlbWEgY2hhbmdlcyBoYXZlIGJlZW4gbWFkZSBvbiB0aGUgc2FtZSB2ZXJzaW9uIChzdWNoIGFzIHdoaWxlXG4gIC8vIGRldmVsb3BpbmcgYW4gYXBwKSwgdGhlIG5hdGl2ZSB2ZXJzaW9uIG1heSBoYXZlIHBhc3NlZCBiZXlvbmQgYSBtdWx0aXBsZSBvZiAxMCB3aXRoaW4gdGhlIHNhbWUgdmVyc2lvbi5cbiAgLy8gV2hlbiB0aGF0IGhhcHBlbnMsIGEgdGFibGUgJG1ldGEgd2lsbCBoYXZlIGJlZW4gY3JlYXRlZCwgY29udGFpbmluZyBhIHNpbmdsZSBlbnRyeSB3aXRoIGtleSBcInZlcnNpb25cIlxuICAvLyBhbmQgdGhlIHZhbHVlIG9mIHRoZSByZWFsIG9sZCB2ZXJzaW9uIHRvIHVzZSB3aGVuIHJ1bm5pbmcgdXBncmFkZXJzIGdvaW5nIGZvcndhcmQuXG4gIGlmICh0cmFucy5zdG9yZU5hbWVzLmluY2x1ZGVzKCckbWV0YScpKSB7XG4gICAgcmV0dXJuIHRyYW5zLnRhYmxlKCckbWV0YScpLmdldCgndmVyc2lvbicpLnRoZW4obWV0YVZlcnNpb24gPT4ge1xuICAgICAgcmV0dXJuIG1ldGFWZXJzaW9uICE9IG51bGwgPyBtZXRhVmVyc2lvbiA6IG9sZFZlcnNpb25cbiAgICB9KVxuICB9IGVsc2Uge1xuICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUob2xkVmVyc2lvbik7XG4gIH1cbn1cblxuZnVuY3Rpb24gdXBkYXRlVGFibGVzQW5kSW5kZXhlcyhcbiAgZGI6IERleGllLFxuICBvbGRWZXJzaW9uOiBudW1iZXIsXG4gIHRyYW5zOiBUcmFuc2FjdGlvbixcbiAgaWRiVXBncmFkZVRyYW5zOiBJREJUcmFuc2FjdGlvbilcbntcbiAgLy8gVXBncmFkZSB2ZXJzaW9uIHRvIHZlcnNpb24sIHN0ZXAtYnktc3RlcCBmcm9tIG9sZGVzdCB0byBuZXdlc3QgdmVyc2lvbi5cbiAgLy8gRWFjaCB0cmFuc2FjdGlvbiBvYmplY3Qgd2lsbCBjb250YWluIHRoZSB0YWJsZSBzZXQgdGhhdCB3YXMgY3VycmVudCBpbiB0aGF0IHZlcnNpb24gKGJ1dCBhbHNvIG5vdC15ZXQtZGVsZXRlZCB0YWJsZXMgZnJvbSBpdHMgcHJldmlvdXMgdmVyc2lvbilcbiAgY29uc3QgcXVldWU6IFVwZ3JhZGVRdWV1ZUl0ZW1bXSA9IFtdO1xuICBjb25zdCB2ZXJzaW9ucyA9IGRiLl92ZXJzaW9ucztcbiAgbGV0IGdsb2JhbFNjaGVtYSA9IGRiLl9kYlNjaGVtYSA9IGJ1aWxkR2xvYmFsU2NoZW1hKGRiLCBkYi5pZGJkYiwgaWRiVXBncmFkZVRyYW5zKTtcbiAgbGV0IGFueUNvbnRlbnRVcGdyYWRlckhhc1J1biA9IGZhbHNlO1xuICBcbiAgY29uc3QgdmVyc1RvUnVuID0gdmVyc2lvbnMuZmlsdGVyKHYgPT4gdi5fY2ZnLnZlcnNpb24gPj0gb2xkVmVyc2lvbik7XG4gIGlmICh2ZXJzVG9SdW4ubGVuZ3RoID09PSAwKSB7XG4gICAgLy8gSW1wb3J0YW50IG5vdCB0byBjb250aW51ZSBhdCB0aGlzIHBvaW50LlxuICAgIC8vIENvbWluZyBoZXJlIG1lYW5zIHdlJ3ZlIGFscmVhZHkgcGF0Y2hlZCBzY2hlbWEgaW4gcGF0Y2hDdXJyZW50VmVyc2lvbigpIGFmdGVyIGhhdmluZ1xuICAgIC8vIGluY3JlbWVudGVkIG5hdGl2ZSB2ZXJzaW9uIHRvIGEgdmFsdWUgYWJvdmUgdGhlIGRlY2xhcmVkIGhpZ2hlc3QgdmVyc2lvbi5cbiAgICAvLyBXaGVuIGJlaW5nIGluIHRoaXMgbW9kZSwgaXQgbWVhbnMgdGhhdCB0aGVyZSBtaWdodCBiZSBkaWZmZXJlbnQgdmVyc2lvbnMgdGhlIGRiIGNvbXBldGluZ1xuICAgIC8vIGFib3V0IGl0IHdpdGggZGlmZmVyZW50IHZlcnNpb24gb2YgdGhlIHNjaGVtYS4gVGhlcmVmb3JlLCB3ZSBtdXN0IGF2b2lkIGRlbGV0aW5nIHRhYmxlc1xuICAgIC8vIG9yIGluZGV4ZXMgaGVyZSBzbyB0aGF0IGJvdGggdmVyc2lvbnMgY2FuIGNvLWV4aXN0IHVudGlsIHRoZSBhcHBsaWNhdGlvbiBoYXMgYmVlbiB1cGdyYWRlZCB0b1xuICAgIC8vIGEgdmVyc2lvbiB0aGF0IGRlY2xhcmVzIG5vIGxvd2VyIHRoYW4gdGhlIG5hdGl2ZSB2ZXJzaW9uLlxuICAgIC8vIElmIGFmdGVyIHRoYXQsIGEgZG93bmdyYWRlIGhhcHBlbnMgYWdhaW4sIHdlJ2xsIGVuZCB1cCBoZXJlIGFnYWluLCBhY2NlcHRpbmcgYm90aCB2ZXJzaW9uc1xuICAgIC8vIEFuZCB3ZSdsbCBzdGF5IGluIHRoaXMgc3RhdGUgdW50aWwgYXBwIGRldmVsb3BlciByZWxlYXNlcyBhIG5ldyBkZWNsYXJlZCB2ZXJzaW9uLlxuICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUoKTsgXG4gIH1cbiAgXG4gIHZlcnNUb1J1bi5mb3JFYWNoKHZlcnNpb24gPT4ge1xuICAgIHF1ZXVlLnB1c2goKCkgPT4ge1xuICAgICAgY29uc3Qgb2xkU2NoZW1hID0gZ2xvYmFsU2NoZW1hO1xuICAgICAgY29uc3QgbmV3U2NoZW1hID0gdmVyc2lvbi5fY2ZnLmRic2NoZW1hO1xuICAgICAgYWRqdXN0VG9FeGlzdGluZ0luZGV4TmFtZXMoZGIsIG9sZFNjaGVtYSwgaWRiVXBncmFkZVRyYW5zKTtcbiAgICAgIGFkanVzdFRvRXhpc3RpbmdJbmRleE5hbWVzKGRiLCBuZXdTY2hlbWEsIGlkYlVwZ3JhZGVUcmFucyk7XG5cbiAgICAgIGdsb2JhbFNjaGVtYSA9IGRiLl9kYlNjaGVtYSA9IG5ld1NjaGVtYTtcblxuICAgICAgY29uc3QgZGlmZiA9IGdldFNjaGVtYURpZmYob2xkU2NoZW1hLCBuZXdTY2hlbWEpO1xuICAgICAgLy8gQWRkIHRhYmxlcyAgICAgICAgICAgXG4gICAgICBkaWZmLmFkZC5mb3JFYWNoKHR1cGxlID0+IHtcbiAgICAgICAgY3JlYXRlVGFibGUoaWRiVXBncmFkZVRyYW5zLCB0dXBsZVswXSwgdHVwbGVbMV0ucHJpbUtleSwgdHVwbGVbMV0uaW5kZXhlcyk7XG4gICAgICB9KTtcbiAgICAgIC8vIENoYW5nZSB0YWJsZXNcbiAgICAgIGRpZmYuY2hhbmdlLmZvckVhY2goY2hhbmdlID0+IHtcbiAgICAgICAgaWYgKGNoYW5nZS5yZWNyZWF0ZSkge1xuICAgICAgICAgIHRocm93IG5ldyBleGNlcHRpb25zLlVwZ3JhZGUoXCJOb3QgeWV0IHN1cHBvcnQgZm9yIGNoYW5naW5nIHByaW1hcnkga2V5XCIpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGNvbnN0IHN0b3JlID0gaWRiVXBncmFkZVRyYW5zLm9iamVjdFN0b3JlKGNoYW5nZS5uYW1lKTtcbiAgICAgICAgICAvLyBBZGQgaW5kZXhlc1xuICAgICAgICAgIGNoYW5nZS5hZGQuZm9yRWFjaChpZHggPT4gYWRkSW5kZXgoc3RvcmUsIGlkeCkpO1xuICAgICAgICAgIC8vIFVwZGF0ZSBpbmRleGVzXG4gICAgICAgICAgY2hhbmdlLmNoYW5nZS5mb3JFYWNoKGlkeCA9PiB7XG4gICAgICAgICAgICBzdG9yZS5kZWxldGVJbmRleChpZHgubmFtZSk7XG4gICAgICAgICAgICBhZGRJbmRleChzdG9yZSwgaWR4KTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgICAvLyBEZWxldGUgaW5kZXhlc1xuICAgICAgICAgIGNoYW5nZS5kZWwuZm9yRWFjaChpZHhOYW1lID0+IHN0b3JlLmRlbGV0ZUluZGV4KGlkeE5hbWUpKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG5cbiAgICAgIGNvbnN0IGNvbnRlbnRVcGdyYWRlID0gdmVyc2lvbi5fY2ZnLmNvbnRlbnRVcGdyYWRlO1xuXG4gICAgICBpZiAoY29udGVudFVwZ3JhZGUgJiYgdmVyc2lvbi5fY2ZnLnZlcnNpb24gPiBvbGRWZXJzaW9uKSB7XG4gICAgICAgIC8vIFVwZGF0ZSBkYi5jb3JlIHdpdGggbmV3IHRhYmxlcyBhbmQgaW5kZXhlczpcbiAgICAgICAgZ2VuZXJhdGVNaWRkbGV3YXJlU3RhY2tzKGRiLCBpZGJVcGdyYWRlVHJhbnMpO1xuICAgICAgICB0cmFucy5fbWVtb2l6ZWRUYWJsZXMgPSB7fTsgLy8gSW52YWxpZGF0ZSBtZW1vaXphdGlvbiBhcyB0cmFuc2FjdGlvbiBzaGFwZSBtYXkgY2hhbmdlIGJldHdlZW4gdmVyc2lvbnMuXG5cbiAgICAgICAgYW55Q29udGVudFVwZ3JhZGVySGFzUnVuID0gdHJ1ZTtcblxuICAgICAgICAvLyBBZGQgdG8tYmUtZGVsZXRlZCB0YWJsZXMgdG8gY29udGVudFVwZ3JhZGUgdHJhbnNhY3Rpb25cbiAgICAgICAgbGV0IHVwZ3JhZGVTY2hlbWEgPSBzaGFsbG93Q2xvbmUobmV3U2NoZW1hKTtcbiAgICAgICAgZGlmZi5kZWwuZm9yRWFjaCh0YWJsZSA9PiB7XG4gICAgICAgICAgdXBncmFkZVNjaGVtYVt0YWJsZV0gPSBvbGRTY2hlbWFbdGFibGVdO1xuICAgICAgICB9KTtcblxuICAgICAgICAvLyBTYWZlIHRvIGFmZmVjdCBUcmFuc2FjdGlvbi5wcm90b3R5cGUgZ2xvYmFsbHkgaW4gdGhpcyBtb21lbnQsXG4gICAgICAgIC8vIGJlY2F1c2Ugd2hlbiB0aGlzIGNvZGUgcnVucywgdGhlcmUgbWF5IG5vdCBiZSBhbnkgb3RoZXIgY29kZVxuICAgICAgICAvLyB0aGF0IGNhbiBhY2Nlc3MgYW55IHRyYW5zYWN0aW9uIGluc3RhbmNlLCBlbHNlIHRoYW4gdGhpcyBwYXJ0aWN1bGFyXG4gICAgICAgIC8vIHVwZ3JhZGVyIGZ1bmN0aW9uLlxuICAgICAgICByZW1vdmVUYWJsZXNBcGkoZGIsIFtkYi5UcmFuc2FjdGlvbi5wcm90b3R5cGVdKTtcbiAgICAgICAgc2V0QXBpT25QbGFjZShkYiwgW2RiLlRyYW5zYWN0aW9uLnByb3RvdHlwZV0sIGtleXModXBncmFkZVNjaGVtYSksIHVwZ3JhZGVTY2hlbWEpO1xuICAgICAgICB0cmFucy5zY2hlbWEgPSB1cGdyYWRlU2NoZW1hO1xuXG4gICAgICAgIC8vIFN1cHBvcnQgZm9yIG5hdGl2ZSBhc3luYyBhd2FpdC5cbiAgICAgICAgY29uc3QgY29udGVudFVwZ3JhZGVJc0FzeW5jID0gaXNBc3luY0Z1bmN0aW9uKGNvbnRlbnRVcGdyYWRlKTtcbiAgICAgICAgaWYgKGNvbnRlbnRVcGdyYWRlSXNBc3luYykge1xuICAgICAgICAgIGluY3JlbWVudEV4cGVjdGVkQXdhaXRzKCk7XG4gICAgICAgIH1cbiAgICAgICAgXG4gICAgICAgIGxldCByZXR1cm5WYWx1ZTogYW55O1xuICAgICAgICBjb25zdCBwcm9taXNlRm9sbG93ZWQgPSBQcm9taXNlLmZvbGxvdygoKSA9PiB7XG4gICAgICAgICAgLy8gRmluYWxseSwgY2FsbCB0aGUgc2NvcGUgZnVuY3Rpb24gd2l0aCBvdXIgdGFibGUgYW5kIHRyYW5zYWN0aW9uIGFyZ3VtZW50cy5cbiAgICAgICAgICByZXR1cm5WYWx1ZSA9IGNvbnRlbnRVcGdyYWRlKHRyYW5zKTtcbiAgICAgICAgICBpZiAocmV0dXJuVmFsdWUpIHtcbiAgICAgICAgICAgIGlmIChjb250ZW50VXBncmFkZUlzQXN5bmMpIHtcbiAgICAgICAgICAgICAgLy8gY29udGVudFVwZ3JhZGUgaXMgYSBuYXRpdmUgYXN5bmMgZnVuY3Rpb24gLSB3ZSBrbm93IGZvciBzdXJlIHJldHVyblZhbHVlIGlzIG5hdGl2ZSBwcm9taXNlLlxuICAgICAgICAgICAgICB2YXIgZGVjcmVtZW50b3IgPSBkZWNyZW1lbnRFeHBlY3RlZEF3YWl0cy5iaW5kKG51bGwsIG51bGwpO1xuICAgICAgICAgICAgICByZXR1cm5WYWx1ZS50aGVuKGRlY3JlbWVudG9yLCBkZWNyZW1lbnRvcik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgICAgcmV0dXJuIChyZXR1cm5WYWx1ZSAmJiB0eXBlb2YgcmV0dXJuVmFsdWUudGhlbiA9PT0gJ2Z1bmN0aW9uJyA/XG4gICAgICAgICAgUHJvbWlzZS5yZXNvbHZlKHJldHVyblZhbHVlKSA6IHByb21pc2VGb2xsb3dlZC50aGVuKCgpPT5yZXR1cm5WYWx1ZSkpO1xuICAgICAgfVxuICAgIH0pO1xuICAgIHF1ZXVlLnB1c2goaWRidHJhbnMgPT4ge1xuICAgICAgY29uc3QgbmV3U2NoZW1hID0gdmVyc2lvbi5fY2ZnLmRic2NoZW1hO1xuICAgICAgLy8gRGVsZXRlIG9sZCB0YWJsZXNcbiAgICAgIGRlbGV0ZVJlbW92ZWRUYWJsZXMobmV3U2NoZW1hLCBpZGJ0cmFucyk7XG4gICAgICAvLyBSZXN0b3JlIHRoZSBmaW5hbCBBUElcbiAgICAgIHJlbW92ZVRhYmxlc0FwaShkYiwgW2RiLlRyYW5zYWN0aW9uLnByb3RvdHlwZV0pO1xuICAgICAgc2V0QXBpT25QbGFjZShkYiwgW2RiLlRyYW5zYWN0aW9uLnByb3RvdHlwZV0sIGRiLl9zdG9yZU5hbWVzLCBkYi5fZGJTY2hlbWEpO1xuICAgICAgdHJhbnMuc2NoZW1hID0gZGIuX2RiU2NoZW1hO1xuICAgIH0pO1xuICAgIC8vIE1haW50YWluIHRoZSAkbWV0YSB0YWJsZSBhZnRlciB0aGlzIHZlcnNpb24ncyB0YWJsZXMgYW5kIGluZGV4ZXMgaGFzIGJlZW4gY3JlYXRlZCBhbmQgY29udGVudCB1cGdyYWRlcnMgaGF2ZSBydW4uXG4gICAgcXVldWUucHVzaChpZGJ0cmFucyA9PiB7XG4gICAgICBpZiAoZGIuaWRiZGIub2JqZWN0U3RvcmVOYW1lcy5jb250YWlucygnJG1ldGEnKSkge1xuICAgICAgICBpZiAoTWF0aC5jZWlsKGRiLmlkYmRiLnZlcnNpb24gLyAxMCkgPT09IHZlcnNpb24uX2NmZy52ZXJzaW9uKSB7XG4gICAgICAgICAgLy8gUmVtb3ZlICRtZXRhIHRhYmxlIGlmIGl0J3Mgbm8gbW9yZSBuZWVkZWQgLSB3ZSBhcmUgaW4gbGluZSB3aXRoIHRoZSBuYXRpdmUgdmVyc2lvblxuICAgICAgICAgIGRiLmlkYmRiLmRlbGV0ZU9iamVjdFN0b3JlKCckbWV0YScpO1xuICAgICAgICAgIGRlbGV0ZSBkYi5fZGJTY2hlbWEuJG1ldGE7XG4gICAgICAgICAgZGIuX3N0b3JlTmFtZXMgPSBkYi5fc3RvcmVOYW1lcy5maWx0ZXIobmFtZSA9PiBuYW1lICE9PSAnJG1ldGEnKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAvLyBXZSdyZSBzdGlsbCBub3QgaW4gbGluZSB3aXRoIHRoZSBuYXRpdmUgdmVyc2lvbi4gTWFrZSBzdXJlIHRvIHVwZGF0ZSB0aGUgdmlydHVhbCB2ZXJzaW9uXG4gICAgICAgICAgLy8gdG8gdGhlIHN1Y2Nlc3NmdWxseSBydW4gdmVyc2lvblxuICAgICAgICAgIGlkYnRyYW5zLm9iamVjdFN0b3JlKCckbWV0YScpLnB1dCh2ZXJzaW9uLl9jZmcudmVyc2lvbiwgJ3ZlcnNpb24nKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0pOyBcbiAgfSk7XG5cbiAgLy8gTm93LCBjcmVhdGUgYSBxdWV1ZSBleGVjdXRpb24gZW5naW5lXG4gIGZ1bmN0aW9uIHJ1blF1ZXVlKCkge1xuICAgIHJldHVybiBxdWV1ZS5sZW5ndGggPyBQcm9taXNlLnJlc29sdmUocXVldWUuc2hpZnQoKSh0cmFucy5pZGJ0cmFucykpLnRoZW4ocnVuUXVldWUpIDpcbiAgICAgIFByb21pc2UucmVzb2x2ZSgpO1xuICB9XG5cbiAgcmV0dXJuIHJ1blF1ZXVlKCkudGhlbigoKSA9PiB7XG4gICAgY3JlYXRlTWlzc2luZ1RhYmxlcyhnbG9iYWxTY2hlbWEsIGlkYlVwZ3JhZGVUcmFucyk7IC8vIEF0IGxhc3QsIG1ha2Ugc3VyZSB0byBjcmVhdGUgYW55IG1pc3NpbmcgdGFibGVzLiAoTmVlZGVkIGJ5IGFkZG9ucyB0aGF0IGFkZCBzdG9yZXMgdG8gREIgd2l0aG91dCBzcGVjaWZ5aW5nIHZlcnNpb24pXG4gIH0pO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIFNjaGVtYURpZmYge1xuICBkZWw6IHN0cmluZ1tdLFxuICBhZGQ6IFtzdHJpbmcsIFRhYmxlU2NoZW1hXVtdO1xuICBjaGFuZ2U6IFRhYmxlU2NoZW1hRGlmZltdO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIFRhYmxlU2NoZW1hRGlmZiB7XG4gIG5hbWU6IHN0cmluZyxcbiAgcmVjcmVhdGU6IGJvb2xlYW4sXG4gIGRlbDogc3RyaW5nW10sXG4gIGFkZDogSW5kZXhTcGVjW10sXG4gIGNoYW5nZTogSW5kZXhTcGVjW11cbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGdldFNjaGVtYURpZmYob2xkU2NoZW1hOiBEYlNjaGVtYSwgbmV3U2NoZW1hOiBEYlNjaGVtYSk6IFNjaGVtYURpZmYge1xuICBjb25zdCBkaWZmOiBTY2hlbWFEaWZmID0ge1xuICAgIGRlbDogW10sIC8vIEFycmF5IG9mIHRhYmxlIG5hbWVzXG4gICAgYWRkOiBbXSwgLy8gQXJyYXkgb2YgW3RhYmxlTmFtZSwgbmV3RGVmaW5pdGlvbl1cbiAgICBjaGFuZ2U6IFtdIC8vIEFycmF5IG9mIHtuYW1lOiB0YWJsZU5hbWUsIHJlY3JlYXRlOiBuZXdEZWZpbml0aW9uLCBkZWw6IGRlbEluZGV4TmFtZXMsIGFkZDogbmV3SW5kZXhEZWZzLCBjaGFuZ2U6IGNoYW5nZWRJbmRleERlZnN9XG4gIH07XG4gIGxldCB0YWJsZTogc3RyaW5nO1xuICBmb3IgKHRhYmxlIGluIG9sZFNjaGVtYSkge1xuICAgIGlmICghbmV3U2NoZW1hW3RhYmxlXSkgZGlmZi5kZWwucHVzaCh0YWJsZSk7XG4gIH1cbiAgZm9yICh0YWJsZSBpbiBuZXdTY2hlbWEpIHtcbiAgICBjb25zdCBvbGREZWYgPSBvbGRTY2hlbWFbdGFibGVdLFxuICAgICAgbmV3RGVmID0gbmV3U2NoZW1hW3RhYmxlXTtcbiAgICBpZiAoIW9sZERlZikge1xuICAgICAgZGlmZi5hZGQucHVzaChbdGFibGUsIG5ld0RlZl0pO1xuICAgIH0gZWxzZSB7XG4gICAgICBjb25zdCBjaGFuZ2UgPSB7XG4gICAgICAgIG5hbWU6IHRhYmxlLFxuICAgICAgICBkZWY6IG5ld0RlZixcbiAgICAgICAgcmVjcmVhdGU6IGZhbHNlLFxuICAgICAgICBkZWw6IFtdLFxuICAgICAgICBhZGQ6IFtdLFxuICAgICAgICBjaGFuZ2U6IFtdXG4gICAgICB9O1xuICAgICAgaWYgKFxuICAgICAgICAgIChcbiAgICAgICAgICAgICAvLyBjb21wYXJlIGtleVBhdGhzIG5vIG1hdHRlciBpZiBzdHJpbmcgb3Igc3RyaW5nW11cbiAgICAgICAgICAgICAvLyBjb21wYXJlIGZhbHN5IGtleXBhdGhzIHNhbWUgbm8gbWF0dGVyIGlmIHRoZXkgYXJlIG51bGwgb3IgZW1wdHkgc3RyaW5nLlxuICAgICAgICAgICAgJycrKG9sZERlZi5wcmltS2V5LmtleVBhdGh8fCcnKVxuICAgICAgICAgICkgIT09IChcbiAgICAgICAgICAgICcnKyhuZXdEZWYucHJpbUtleS5rZXlQYXRofHwnJylcbiAgICAgICAgICApIHx8XG4gICAgICAgICAgICAvLyBDb21wYXJlIHRoZSBhdXRvSW5jcmVtZW50IGZsYWcgYWxzb1xuICAgICAgICAgIChvbGREZWYucHJpbUtleS5hdXRvICE9PSBuZXdEZWYucHJpbUtleS5hdXRvKSlcbiAgICAgIHtcbiAgICAgICAgLy8gUHJpbWFyeSBrZXkgaGFzIGNoYW5nZWQuIFJlbW92ZSBhbmQgcmUtYWRkIHRhYmxlLlxuICAgICAgICBjaGFuZ2UucmVjcmVhdGUgPSB0cnVlO1xuICAgICAgICBkaWZmLmNoYW5nZS5wdXNoKGNoYW5nZSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICAvLyBTYW1lIHByaW1hcnkga2V5LiBKdXN0IGZpbmQgb3V0IHdoYXQgZGlmZmVyczpcbiAgICAgICAgY29uc3Qgb2xkSW5kZXhlcyA9IG9sZERlZi5pZHhCeU5hbWU7XG4gICAgICAgIGNvbnN0IG5ld0luZGV4ZXMgPSBuZXdEZWYuaWR4QnlOYW1lO1xuICAgICAgICBsZXQgaWR4TmFtZTogc3RyaW5nO1xuICAgICAgICBmb3IgKGlkeE5hbWUgaW4gb2xkSW5kZXhlcykge1xuICAgICAgICAgIGlmICghbmV3SW5kZXhlc1tpZHhOYW1lXSkgY2hhbmdlLmRlbC5wdXNoKGlkeE5hbWUpO1xuICAgICAgICB9XG4gICAgICAgIGZvciAoaWR4TmFtZSBpbiBuZXdJbmRleGVzKSB7XG4gICAgICAgICAgY29uc3Qgb2xkSWR4ID0gb2xkSW5kZXhlc1tpZHhOYW1lXSxcbiAgICAgICAgICAgIG5ld0lkeCA9IG5ld0luZGV4ZXNbaWR4TmFtZV07XG4gICAgICAgICAgaWYgKCFvbGRJZHgpIGNoYW5nZS5hZGQucHVzaChuZXdJZHgpO1xuICAgICAgICAgIGVsc2UgaWYgKG9sZElkeC5zcmMgIT09IG5ld0lkeC5zcmMpIGNoYW5nZS5jaGFuZ2UucHVzaChuZXdJZHgpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChjaGFuZ2UuZGVsLmxlbmd0aCA+IDAgfHwgY2hhbmdlLmFkZC5sZW5ndGggPiAwIHx8IGNoYW5nZS5jaGFuZ2UubGVuZ3RoID4gMCkge1xuICAgICAgICAgIGRpZmYuY2hhbmdlLnB1c2goY2hhbmdlKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfVxuICByZXR1cm4gZGlmZjtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGNyZWF0ZVRhYmxlKFxuICBpZGJ0cmFuczogSURCVHJhbnNhY3Rpb24sXG4gIHRhYmxlTmFtZTogc3RyaW5nLFxuICBwcmltS2V5OiBJbmRleFNwZWMsXG4gIGluZGV4ZXM6IEluZGV4U3BlY1tdXG4pIHtcbiAgY29uc3Qgc3RvcmUgPSBpZGJ0cmFucy5kYi5jcmVhdGVPYmplY3RTdG9yZShcbiAgICB0YWJsZU5hbWUsXG4gICAgcHJpbUtleS5rZXlQYXRoID9cbiAgICAgIHsga2V5UGF0aDogcHJpbUtleS5rZXlQYXRoLCBhdXRvSW5jcmVtZW50OiBwcmltS2V5LmF1dG8gfSA6XG4gICAgICB7IGF1dG9JbmNyZW1lbnQ6IHByaW1LZXkuYXV0byB9XG4gICk7XG4gIGluZGV4ZXMuZm9yRWFjaChpZHggPT4gYWRkSW5kZXgoc3RvcmUsIGlkeCkpO1xuICByZXR1cm4gc3RvcmU7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBjcmVhdGVNaXNzaW5nVGFibGVzKG5ld1NjaGVtYTogRGJTY2hlbWEsIGlkYnRyYW5zOiBJREJUcmFuc2FjdGlvbikge1xuICBrZXlzKG5ld1NjaGVtYSkuZm9yRWFjaCh0YWJsZU5hbWUgPT4ge1xuICAgIGlmICghaWRidHJhbnMuZGIub2JqZWN0U3RvcmVOYW1lcy5jb250YWlucyh0YWJsZU5hbWUpKSB7XG4gICAgICBpZiAoZGVidWcpIGNvbnNvbGUuZGVidWcoJ0RleGllOiBDcmVhdGluZyBtaXNzaW5nIHRhYmxlJywgdGFibGVOYW1lKTtcbiAgICAgIGNyZWF0ZVRhYmxlKGlkYnRyYW5zLCB0YWJsZU5hbWUsIG5ld1NjaGVtYVt0YWJsZU5hbWVdLnByaW1LZXksIG5ld1NjaGVtYVt0YWJsZU5hbWVdLmluZGV4ZXMpO1xuICAgIH1cbiAgfSk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBkZWxldGVSZW1vdmVkVGFibGVzKG5ld1NjaGVtYTogRGJTY2hlbWEsIGlkYnRyYW5zOiBJREJUcmFuc2FjdGlvbikge1xuICBbXS5zbGljZS5jYWxsKGlkYnRyYW5zLmRiLm9iamVjdFN0b3JlTmFtZXMpLmZvckVhY2goc3RvcmVOYW1lID0+XG4gICAgbmV3U2NoZW1hW3N0b3JlTmFtZV0gPT0gbnVsbCAmJiBpZGJ0cmFucy5kYi5kZWxldGVPYmplY3RTdG9yZShzdG9yZU5hbWUpKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGFkZEluZGV4KHN0b3JlOiBJREJPYmplY3RTdG9yZSwgaWR4OiBJbmRleFNwZWMpIHtcbiAgc3RvcmUuY3JlYXRlSW5kZXgoaWR4Lm5hbWUsIGlkeC5rZXlQYXRoLCB7IHVuaXF1ZTogaWR4LnVuaXF1ZSwgbXVsdGlFbnRyeTogaWR4Lm11bHRpIH0pO1xufVxuXG5mdW5jdGlvbiBidWlsZEdsb2JhbFNjaGVtYShcbiAgZGI6IERleGllLFxuICBpZGJkYjogSURCRGF0YWJhc2UsXG4gIHRtcFRyYW5zOiBJREJUcmFuc2FjdGlvblxuKSB7XG4gIGNvbnN0IGdsb2JhbFNjaGVtYSA9IHt9O1xuICBjb25zdCBkYlN0b3JlTmFtZXMgPSBzbGljZShpZGJkYi5vYmplY3RTdG9yZU5hbWVzLCAwKTtcbiAgZGJTdG9yZU5hbWVzLmZvckVhY2goc3RvcmVOYW1lID0+IHtcbiAgICBjb25zdCBzdG9yZSA9IHRtcFRyYW5zLm9iamVjdFN0b3JlKHN0b3JlTmFtZSk7XG4gICAgbGV0IGtleVBhdGggPSBzdG9yZS5rZXlQYXRoO1xuICAgIGNvbnN0IHByaW1LZXkgPSBjcmVhdGVJbmRleFNwZWMoXG4gICAgICBuYW1lRnJvbUtleVBhdGgoa2V5UGF0aCksXG4gICAgICBrZXlQYXRoIHx8IFwiXCIsXG4gICAgICB0cnVlLFxuICAgICAgZmFsc2UsXG4gICAgICAhIXN0b3JlLmF1dG9JbmNyZW1lbnQsXG4gICAgICBrZXlQYXRoICYmIHR5cGVvZiBrZXlQYXRoICE9PSBcInN0cmluZ1wiLFxuICAgICAgdHJ1ZVxuICAgICk7XG4gICAgY29uc3QgaW5kZXhlczogSW5kZXhTcGVjW10gPSBbXTtcbiAgICBmb3IgKGxldCBqID0gMDsgaiA8IHN0b3JlLmluZGV4TmFtZXMubGVuZ3RoOyArK2opIHtcbiAgICAgIGNvbnN0IGlkYmluZGV4ID0gc3RvcmUuaW5kZXgoc3RvcmUuaW5kZXhOYW1lc1tqXSk7XG4gICAgICBrZXlQYXRoID0gaWRiaW5kZXgua2V5UGF0aDtcbiAgICAgIHZhciBpbmRleCA9IGNyZWF0ZUluZGV4U3BlYyhcbiAgICAgICAgaWRiaW5kZXgubmFtZSxcbiAgICAgICAga2V5UGF0aCxcbiAgICAgICAgISFpZGJpbmRleC51bmlxdWUsXG4gICAgICAgICEhaWRiaW5kZXgubXVsdGlFbnRyeSxcbiAgICAgICAgZmFsc2UsXG4gICAgICAgIGtleVBhdGggJiYgdHlwZW9mIGtleVBhdGggIT09IFwic3RyaW5nXCIsXG4gICAgICAgIGZhbHNlXG4gICAgICApO1xuICAgICAgaW5kZXhlcy5wdXNoKGluZGV4KTtcbiAgICB9XG4gICAgZ2xvYmFsU2NoZW1hW3N0b3JlTmFtZV0gPSBjcmVhdGVUYWJsZVNjaGVtYShzdG9yZU5hbWUsIHByaW1LZXksIGluZGV4ZXMpO1xuICB9KTtcbiAgcmV0dXJuIGdsb2JhbFNjaGVtYTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHJlYWRHbG9iYWxTY2hlbWEoZGI6IERleGllLCBpZGJkYjogSURCRGF0YWJhc2UsIHRtcFRyYW5zOiBJREJUcmFuc2FjdGlvbikge1xuICBkYi52ZXJubyA9IGlkYmRiLnZlcnNpb24gLyAxMDtcbiAgY29uc3QgZ2xvYmFsU2NoZW1hID0gZGIuX2RiU2NoZW1hID0gYnVpbGRHbG9iYWxTY2hlbWEoZGIsIGlkYmRiLCB0bXBUcmFucyk7XG4gIGRiLl9zdG9yZU5hbWVzID0gc2xpY2UoaWRiZGIub2JqZWN0U3RvcmVOYW1lcywgMCk7XG4gIHNldEFwaU9uUGxhY2UoZGIsIFtkYi5fYWxsVGFibGVzXSwga2V5cyhnbG9iYWxTY2hlbWEpLCBnbG9iYWxTY2hlbWEpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gdmVyaWZ5SW5zdGFsbGVkU2NoZW1hKGRiOiBEZXhpZSwgdG1wVHJhbnM6IElEQlRyYW5zYWN0aW9uKTogYm9vbGVhbiB7XG4gIGNvbnN0IGluc3RhbGxlZFNjaGVtYSA9IGJ1aWxkR2xvYmFsU2NoZW1hKGRiLCBkYi5pZGJkYiwgdG1wVHJhbnMpO1xuICBjb25zdCBkaWZmID0gZ2V0U2NoZW1hRGlmZihpbnN0YWxsZWRTY2hlbWEsIGRiLl9kYlNjaGVtYSk7XG4gIHJldHVybiAhKGRpZmYuYWRkLmxlbmd0aCB8fCBkaWZmLmNoYW5nZS5zb21lKGNoID0+IGNoLmFkZC5sZW5ndGggfHwgY2guY2hhbmdlLmxlbmd0aCkpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gYWRqdXN0VG9FeGlzdGluZ0luZGV4TmFtZXMoZGI6IERleGllLCBzY2hlbWE6IERiU2NoZW1hLCBpZGJ0cmFuczogSURCVHJhbnNhY3Rpb24pIHtcbiAgLy8gSXNzdWUgIzMwIFByb2JsZW0gd2l0aCBleGlzdGluZyBkYiAtIGFkanVzdCB0byBleGlzdGluZyBpbmRleCBuYW1lcyB3aGVuIG1pZ3JhdGluZyBmcm9tIG5vbi1kZXhpZSBkYlxuICBjb25zdCBzdG9yZU5hbWVzID0gaWRidHJhbnMuZGIub2JqZWN0U3RvcmVOYW1lcztcblxuICBmb3IgKGxldCBpID0gMDsgaSA8IHN0b3JlTmFtZXMubGVuZ3RoOyArK2kpIHtcbiAgICBjb25zdCBzdG9yZU5hbWUgPSBzdG9yZU5hbWVzW2ldO1xuICAgIGNvbnN0IHN0b3JlID0gaWRidHJhbnMub2JqZWN0U3RvcmUoc3RvcmVOYW1lKTtcbiAgICBkYi5faGFzR2V0QWxsID0gJ2dldEFsbCcgaW4gc3RvcmU7XG5cbiAgICBmb3IgKGxldCBqID0gMDsgaiA8IHN0b3JlLmluZGV4TmFtZXMubGVuZ3RoOyArK2opIHtcbiAgICAgIGNvbnN0IGluZGV4TmFtZSA9IHN0b3JlLmluZGV4TmFtZXNbal07XG4gICAgICBjb25zdCBrZXlQYXRoID0gc3RvcmUuaW5kZXgoaW5kZXhOYW1lKS5rZXlQYXRoO1xuICAgICAgY29uc3QgZGV4aWVOYW1lID0gdHlwZW9mIGtleVBhdGggPT09ICdzdHJpbmcnID8ga2V5UGF0aCA6IFwiW1wiICsgc2xpY2Uoa2V5UGF0aCkuam9pbignKycpICsgXCJdXCI7XG4gICAgICBpZiAoc2NoZW1hW3N0b3JlTmFtZV0pIHtcbiAgICAgICAgY29uc3QgaW5kZXhTcGVjID0gc2NoZW1hW3N0b3JlTmFtZV0uaWR4QnlOYW1lW2RleGllTmFtZV07XG4gICAgICAgIGlmIChpbmRleFNwZWMpIHtcbiAgICAgICAgICBpbmRleFNwZWMubmFtZSA9IGluZGV4TmFtZTtcbiAgICAgICAgICBkZWxldGUgc2NoZW1hW3N0b3JlTmFtZV0uaWR4QnlOYW1lW2RleGllTmFtZV07XG4gICAgICAgICAgc2NoZW1hW3N0b3JlTmFtZV0uaWR4QnlOYW1lW2luZGV4TmFtZV0gPSBpbmRleFNwZWM7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICAvLyBCdWcgd2l0aCBnZXRBbGwoKSBvbiBTYWZhcmkgdmVyPDYwNCBvbiBXb3JrZXJzIG9ubHksIHNlZSBkaXNjdXNzaW9uIGZvbGxvd2luZyBQUiAjNTc5XG4gIGlmICh0eXBlb2YgbmF2aWdhdG9yICE9PSAndW5kZWZpbmVkJyAmJiAvU2FmYXJpLy50ZXN0KG5hdmlnYXRvci51c2VyQWdlbnQpICYmXG4gICAgIS8oQ2hyb21lXFwvfEVkZ2VcXC8pLy50ZXN0KG5hdmlnYXRvci51c2VyQWdlbnQpICYmXG4gICAgX2dsb2JhbC5Xb3JrZXJHbG9iYWxTY29wZSAmJiBfZ2xvYmFsIGluc3RhbmNlb2YgX2dsb2JhbC5Xb3JrZXJHbG9iYWxTY29wZSAmJlxuICAgIFtdLmNvbmNhdChuYXZpZ2F0b3IudXNlckFnZW50Lm1hdGNoKC9TYWZhcmlcXC8oXFxkKikvKSlbMV0gPCA2MDQpXG4gIHtcbiAgICBkYi5faGFzR2V0QWxsID0gZmFsc2U7XG4gIH1cbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHBhcnNlSW5kZXhTeW50YXgocHJpbUtleUFuZEluZGV4ZXM6IHN0cmluZyk6IEluZGV4U3BlY1tdIHtcbiAgcmV0dXJuIHByaW1LZXlBbmRJbmRleGVzLnNwbGl0KCcsJykubWFwKChpbmRleCwgaW5kZXhOdW0pID0+IHtcbiAgICBpbmRleCA9IGluZGV4LnRyaW0oKTtcbiAgICBjb25zdCBuYW1lID0gaW5kZXgucmVwbGFjZSgvKFsmKl18XFwrXFwrKS9nLCBcIlwiKTsgLy8gUmVtb3ZlIFwiJlwiLCBcIisrXCIgYW5kIFwiKlwiXG4gICAgLy8gTGV0IGtleVBhdGggb2YgXCJbYStiXVwiIGJlIFtcImFcIixcImJcIl06XG4gICAgY29uc3Qga2V5UGF0aCA9IC9eXFxbLy50ZXN0KG5hbWUpID8gbmFtZS5tYXRjaCgvXlxcWyguKilcXF0kLylbMV0uc3BsaXQoJysnKSA6IG5hbWU7XG5cbiAgICByZXR1cm4gY3JlYXRlSW5kZXhTcGVjKFxuICAgICAgbmFtZSxcbiAgICAgIGtleVBhdGggfHwgbnVsbCxcbiAgICAgIC9cXCYvLnRlc3QoaW5kZXgpLFxuICAgICAgL1xcKi8udGVzdChpbmRleCksXG4gICAgICAvXFwrXFwrLy50ZXN0KGluZGV4KSxcbiAgICAgIGlzQXJyYXkoa2V5UGF0aCksXG4gICAgICBpbmRleE51bSA9PT0gMFxuICAgICk7XG4gIH0pO1xufVxuIiwgImltcG9ydCB7IFZlcnNpb24gYXMgSVZlcnNpb24gfSBmcm9tICcuLi8uLi9wdWJsaWMvdHlwZXMvdmVyc2lvbic7XG5pbXBvcnQgeyBEYlNjaGVtYSB9IGZyb20gJy4uLy4uL3B1YmxpYy90eXBlcy9kYi1zY2hlbWEnO1xuaW1wb3J0IHsgZXh0ZW5kLCBrZXlzIH0gZnJvbSAnLi4vLi4vZnVuY3Rpb25zL3V0aWxzJztcbmltcG9ydCB7IERleGllIH0gZnJvbSAnLi4vZGV4aWUnO1xuaW1wb3J0IHsgVHJhbnNhY3Rpb24gfSBmcm9tICcuLi90cmFuc2FjdGlvbic7XG5pbXBvcnQgeyByZW1vdmVUYWJsZXNBcGksIHNldEFwaU9uUGxhY2UsIHBhcnNlSW5kZXhTeW50YXggfSBmcm9tICcuL3NjaGVtYS1oZWxwZXJzJztcbmltcG9ydCB7IGV4Y2VwdGlvbnMgfSBmcm9tICcuLi8uLi9lcnJvcnMnO1xuaW1wb3J0IHsgY3JlYXRlVGFibGVTY2hlbWEgfSBmcm9tICcuLi8uLi9oZWxwZXJzL3RhYmxlLXNjaGVtYSc7XG5pbXBvcnQgeyBub3AsIHByb21pc2FibGVDaGFpbiB9IGZyb20gJy4uLy4uL2Z1bmN0aW9ucy9jaGFpbmluZy1mdW5jdGlvbnMnO1xuXG4vKiogY2xhc3MgVmVyc2lvblxuICpcbiAqIGh0dHBzOi8vZGV4aWUub3JnL2RvY3MvVmVyc2lvbi9WZXJzaW9uXG4gKi9cbmV4cG9ydCBjbGFzcyBWZXJzaW9uIGltcGxlbWVudHMgSVZlcnNpb24ge1xuICBkYjogRGV4aWU7XG4gIF9jZmc6IHtcbiAgICB2ZXJzaW9uOiBudW1iZXIsXG4gICAgc3RvcmVzU291cmNlOiB7IFt0YWJsZU5hbWU6IHN0cmluZ106IHN0cmluZyB8IG51bGwgfSxcbiAgICBkYnNjaGVtYTogRGJTY2hlbWEsXG4gICAgdGFibGVzOiB7fSxcbiAgICBjb250ZW50VXBncmFkZTogRnVuY3Rpb24gfCBudWxsXG4gIH1cblxuICBfcGFyc2VTdG9yZXNTcGVjKHN0b3JlczogeyBbdGFibGVOYW1lOiBzdHJpbmddOiBzdHJpbmcgfCBudWxsIH0sIG91dFNjaGVtYTogRGJTY2hlbWEpOiBhbnkge1xuICAgIGtleXMoc3RvcmVzKS5mb3JFYWNoKHRhYmxlTmFtZSA9PiB7XG4gICAgICBpZiAoc3RvcmVzW3RhYmxlTmFtZV0gIT09IG51bGwpIHtcbiAgICAgICAgICB2YXIgaW5kZXhlcyA9IHBhcnNlSW5kZXhTeW50YXgoc3RvcmVzW3RhYmxlTmFtZV0pO1xuICAgICAgICAgIHZhciBwcmltS2V5ID0gaW5kZXhlcy5zaGlmdCgpO1xuICAgICAgICAgIHByaW1LZXkudW5pcXVlID0gdHJ1ZTtcbiAgICAgICAgICBpZiAocHJpbUtleS5tdWx0aSkgdGhyb3cgbmV3IGV4Y2VwdGlvbnMuU2NoZW1hKFwiUHJpbWFyeSBrZXkgY2Fubm90IGJlIG11bHRpLXZhbHVlZFwiKTtcbiAgICAgICAgICBpbmRleGVzLmZvckVhY2goaWR4ID0+IHtcbiAgICAgICAgICAgICAgaWYgKGlkeC5hdXRvKSB0aHJvdyBuZXcgZXhjZXB0aW9ucy5TY2hlbWEoXCJPbmx5IHByaW1hcnkga2V5IGNhbiBiZSBtYXJrZWQgYXMgYXV0b0luY3JlbWVudCAoKyspXCIpO1xuICAgICAgICAgICAgICBpZiAoIWlkeC5rZXlQYXRoKSB0aHJvdyBuZXcgZXhjZXB0aW9ucy5TY2hlbWEoXCJJbmRleCBtdXN0IGhhdmUgYSBuYW1lIGFuZCBjYW5ub3QgYmUgYW4gZW1wdHkgc3RyaW5nXCIpO1xuICAgICAgICAgIH0pO1xuICAgICAgICAgIG91dFNjaGVtYVt0YWJsZU5hbWVdID0gY3JlYXRlVGFibGVTY2hlbWEodGFibGVOYW1lLCBwcmltS2V5LCBpbmRleGVzKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfVxuXG4gIHN0b3JlcyhzdG9yZXM6IHsgW2tleTogc3RyaW5nXTogc3RyaW5nIHwgbnVsbDsgfSk6IElWZXJzaW9uIHtcbiAgICBjb25zdCBkYiA9IHRoaXMuZGI7XG4gICAgdGhpcy5fY2ZnLnN0b3Jlc1NvdXJjZSA9IHRoaXMuX2NmZy5zdG9yZXNTb3VyY2UgP1xuICAgICAgZXh0ZW5kKHRoaXMuX2NmZy5zdG9yZXNTb3VyY2UsIHN0b3JlcykgOlxuICAgICAgc3RvcmVzO1xuICAgIGNvbnN0IHZlcnNpb25zID0gZGIuX3ZlcnNpb25zO1xuXG4gICAgLy8gRGVyaXZlIHN0b3JlcyBmcm9tIGVhcmxpZXIgdmVyc2lvbnMgaWYgdGhleSBhcmUgbm90IGV4cGxpY2l0ZWx5IHNwZWNpZmllZCBhcyBudWxsIG9yIGEgbmV3IHN5bnRheC5cbiAgICBjb25zdCBzdG9yZXNTcGVjOiB7IFtrZXk6IHN0cmluZ106IHN0cmluZzsgfSA9IHt9O1xuICAgIGxldCBkYnNjaGVtYSA9IHt9O1xuICAgIHZlcnNpb25zLmZvckVhY2godmVyc2lvbiA9PiB7IC8vICd2ZXJzaW9ucycgaXMgYWx3YXlzIHNvcnRlZCBieSBsb3dlc3QgdmVyc2lvbiBmaXJzdC5cbiAgICAgIGV4dGVuZChzdG9yZXNTcGVjLCB2ZXJzaW9uLl9jZmcuc3RvcmVzU291cmNlKTtcbiAgICAgIGRic2NoZW1hID0gKHZlcnNpb24uX2NmZy5kYnNjaGVtYSA9IHt9KTtcbiAgICAgIHZlcnNpb24uX3BhcnNlU3RvcmVzU3BlYyhzdG9yZXNTcGVjLCBkYnNjaGVtYSk7XG4gICAgfSk7XG4gICAgLy8gVXBkYXRlIHRoZSBsYXRlc3Qgc2NoZW1hIHRvIHRoaXMgdmVyc2lvblxuICAgIGRiLl9kYlNjaGVtYSA9IGRic2NoZW1hO1xuICAgIC8vIFVwZGF0ZSBBUElzXG4gICAgcmVtb3ZlVGFibGVzQXBpKGRiLCBbZGIuX2FsbFRhYmxlcywgZGIsIGRiLlRyYW5zYWN0aW9uLnByb3RvdHlwZV0pO1xuICAgIHNldEFwaU9uUGxhY2UoZGIsIFtkYi5fYWxsVGFibGVzLCBkYiwgZGIuVHJhbnNhY3Rpb24ucHJvdG90eXBlLCB0aGlzLl9jZmcudGFibGVzXSwga2V5cyhkYnNjaGVtYSksIGRic2NoZW1hKTtcbiAgICBkYi5fc3RvcmVOYW1lcyA9IGtleXMoZGJzY2hlbWEpO1xuICAgIHJldHVybiB0aGlzO1xuICB9XG5cbiAgdXBncmFkZSh1cGdyYWRlRnVuY3Rpb246ICh0cmFuczogVHJhbnNhY3Rpb24pID0+IFByb21pc2VMaWtlPGFueT4gfCB2b2lkKTogVmVyc2lvbiB7XG4gICAgdGhpcy5fY2ZnLmNvbnRlbnRVcGdyYWRlID0gcHJvbWlzYWJsZUNoYWluKHRoaXMuX2NmZy5jb250ZW50VXBncmFkZSB8fCBub3AsIHVwZ3JhZGVGdW5jdGlvbik7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cbn1cbiIsICJpbXBvcnQgeyBEZXhpZSB9IGZyb20gJy4uL2RleGllJztcbmltcG9ydCB7IG1ha2VDbGFzc0NvbnN0cnVjdG9yIH0gZnJvbSAnLi4vLi4vZnVuY3Rpb25zL21ha2UtY2xhc3MtY29uc3RydWN0b3InO1xuaW1wb3J0IHsgVmVyc2lvbiB9IGZyb20gJy4vdmVyc2lvbic7XG5cbmV4cG9ydCBpbnRlcmZhY2UgVmVyc2lvbkNvbnN0cnVjdG9yIHtcbiAgbmV3KHZlcnNpb25OdW1iZXI6IG51bWJlcik6IFZlcnNpb247XG4gIHByb3RvdHlwZTogVmVyc2lvbjtcbn1cblxuLyoqIEdlbmVyYXRlcyBhIFZlcnNpb24gY29uc3RydWN0b3IgYm91bmQgdG8gZ2l2ZW4gRGV4aWUgaW5zdGFuY2UuXG4gKiBcbiAqIFRoZSBwdXJwb3NlIG9mIGhhdmluZyBkeW5hbWljYWxseSBjcmVhdGVkIGNvbnN0cnVjdG9ycywgaXMgdG8gYWxsb3dcbiAqIGFkZG9ucyB0byBleHRlbmQgY2xhc3NlcyBmb3IgYSBjZXJ0YWluIERleGllIGluc3RhbmNlIHdpdGhvdXQgYWZmZWN0aW5nXG4gKiBvdGhlciBkYiBpbnN0YW5jZXMuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBjcmVhdGVWZXJzaW9uQ29uc3RydWN0b3IoZGI6IERleGllKSB7XG4gIHJldHVybiBtYWtlQ2xhc3NDb25zdHJ1Y3RvcjxWZXJzaW9uQ29uc3RydWN0b3I+KFxuICAgIFZlcnNpb24ucHJvdG90eXBlLFxuXG4gICAgZnVuY3Rpb24gVmVyc2lvbih0aGlzOiBWZXJzaW9uLCB2ZXJzaW9uTnVtYmVyOiBudW1iZXIpIHtcbiAgICAgIHRoaXMuZGIgPSBkYjtcbiAgICAgIHRoaXMuX2NmZyA9IHtcbiAgICAgICAgdmVyc2lvbjogdmVyc2lvbk51bWJlcixcbiAgICAgICAgc3RvcmVzU291cmNlOiBudWxsLFxuICAgICAgICBkYnNjaGVtYToge30sXG4gICAgICAgIHRhYmxlczoge30sXG4gICAgICAgIGNvbnRlbnRVcGdyYWRlOiBudWxsXG4gICAgICB9O1xuICAgIH0pO1xuXG59XG4iLCAiaW1wb3J0IHsgRGV4aWUgfSBmcm9tIFwiLi4vY2xhc3Nlcy9kZXhpZS9kZXhpZVwiO1xuaW1wb3J0IHsgVGFibGUgfSBmcm9tIFwiLi4vcHVibGljL3R5cGVzL3RhYmxlXCI7XG5pbXBvcnQgeyBEQk5BTUVTX0RCIH0gZnJvbSBcIi4uL2dsb2JhbHMvY29uc3RhbnRzXCI7XG5pbXBvcnQgeyBEZXhpZURPTURlcGVuZGVuY2llcyB9IGZyb20gXCIuLi9wdWJsaWMvdHlwZXMvZGV4aWUtZG9tLWRlcGVuZGVuY2llc1wiO1xuaW1wb3J0IHsgbm9wIH0gZnJvbSBcIi4uL2Z1bmN0aW9ucy9jaGFpbmluZy1mdW5jdGlvbnNcIjtcblxudHlwZSBJREJLZXlOYW1lc1ZhciA9IHR5cGVvZiBJREJLZXlSYW5nZTtcblxuZnVuY3Rpb24gZ2V0RGJOYW1lc1RhYmxlKGluZGV4ZWREQjogSURCRmFjdG9yeSwgSURCS2V5UmFuZ2U6IElEQktleU5hbWVzVmFyKSB7XG4gIGxldCBkYk5hbWVzREIgPSBpbmRleGVkREJbXCJfZGJOYW1lc0RCXCJdO1xuICBpZiAoIWRiTmFtZXNEQikge1xuICAgIGRiTmFtZXNEQiA9IGluZGV4ZWREQltcIl9kYk5hbWVzREJcIl0gPSBuZXcgRGV4aWUoREJOQU1FU19EQiwge1xuICAgICAgYWRkb25zOiBbXSxcbiAgICAgIGluZGV4ZWREQixcbiAgICAgIElEQktleVJhbmdlLFxuICAgIH0pO1xuICAgIGRiTmFtZXNEQi52ZXJzaW9uKDEpLnN0b3Jlcyh7IGRibmFtZXM6IFwibmFtZVwiIH0pO1xuICB9XG4gIHJldHVybiBkYk5hbWVzREIudGFibGUoXCJkYm5hbWVzXCIpIGFzIFRhYmxlPHsgbmFtZTogc3RyaW5nIH0sIHN0cmluZz47XG59XG5cbmZ1bmN0aW9uIGhhc0RhdGFiYXNlc05hdGl2ZShpbmRleGVkREI6IElEQkZhY3RvcnkpIHtcbiAgcmV0dXJuIGluZGV4ZWREQiAmJiB0eXBlb2YgaW5kZXhlZERCLmRhdGFiYXNlcyA9PT0gXCJmdW5jdGlvblwiO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gZ2V0RGF0YWJhc2VOYW1lcyh7XG4gIGluZGV4ZWREQixcbiAgSURCS2V5UmFuZ2UsXG59OiBEZXhpZURPTURlcGVuZGVuY2llcykge1xuICByZXR1cm4gaGFzRGF0YWJhc2VzTmF0aXZlKGluZGV4ZWREQilcbiAgICA/IFByb21pc2UucmVzb2x2ZShpbmRleGVkREIuZGF0YWJhc2VzKCkpLnRoZW4oKGluZm9zKSA9PlxuICAgICAgICBpbmZvc1xuICAgICAgICAgIC8vIFNlbGVjdCBuYW1lIHByb3Agb2YgaW5mb3M6XG4gICAgICAgICAgLm1hcCgoaW5mbykgPT4gaW5mby5uYW1lKVxuICAgICAgICAgIC8vIEZpbHRlciBvdXQgREJOQU1FU19EQiBhcyBwcmV2aW91cyBEZXhpZSBvciBicm93c2VyIHZlcnNpb24gd291bGQgbm90IGhhdmUgaW5jbHVkZWQgaXQgaW4gdGhlIHJlc3VsdC5cbiAgICAgICAgICAuZmlsdGVyKChuYW1lKSA9PiBuYW1lICE9PSBEQk5BTUVTX0RCKVxuICAgICAgKVxuICAgIDogZ2V0RGJOYW1lc1RhYmxlKGluZGV4ZWREQiwgSURCS2V5UmFuZ2UpLnRvQ29sbGVjdGlvbigpLnByaW1hcnlLZXlzKCk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBfb25EYXRhYmFzZUNyZWF0ZWQoXG4gIHsgaW5kZXhlZERCLCBJREJLZXlSYW5nZSB9OiBEZXhpZURPTURlcGVuZGVuY2llcyxcbiAgbmFtZTogc3RyaW5nXG4pIHtcbiAgIWhhc0RhdGFiYXNlc05hdGl2ZShpbmRleGVkREIpICYmXG4gICAgbmFtZSAhPT0gREJOQU1FU19EQiAmJlxuICAgIGdldERiTmFtZXNUYWJsZShpbmRleGVkREIsIElEQktleVJhbmdlKS5wdXQoe25hbWV9KS5jYXRjaChub3ApO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gX29uRGF0YWJhc2VEZWxldGVkKFxuICB7IGluZGV4ZWREQiwgSURCS2V5UmFuZ2UgfTogRGV4aWVET01EZXBlbmRlbmNpZXMsXG4gIG5hbWU6IHN0cmluZ1xuKSB7XG4gICFoYXNEYXRhYmFzZXNOYXRpdmUoaW5kZXhlZERCKSAmJlxuICAgIG5hbWUgIT09IERCTkFNRVNfREIgJiZcbiAgICBnZXREYk5hbWVzVGFibGUoaW5kZXhlZERCLCBJREJLZXlSYW5nZSkuZGVsZXRlKG5hbWUpLmNhdGNoKG5vcCk7XG59XG4iLCAiaW1wb3J0IHsgbmV3U2NvcGUgfSBmcm9tICcuLi8uLi9oZWxwZXJzL3Byb21pc2UnO1xuaW1wb3J0IHsgUFNEIH0gZnJvbSAnLi4vLi4vaGVscGVycy9wcm9taXNlJztcblxuZXhwb3J0IGZ1bmN0aW9uIHZpcCAoZm4pIHtcbiAgLy8gVG8gYmUgdXNlZCBieSBzdWJzY3JpYmVycyB0byB0aGUgb24oJ3JlYWR5JykgZXZlbnQuXG4gIC8vIFRoaXMgd2lsbCBsZXQgY2FsbGVyIHRocm91Z2ggdG8gYWNjZXNzIERCIGV2ZW4gd2hlbiBpdCBpcyBibG9ja2VkIHdoaWxlIHRoZSBkYi5yZWFkeSgpIHN1YnNjcmliZXJzIGFyZSBmaXJpbmcuXG4gIC8vIFRoaXMgd291bGQgaGF2ZSB3b3JrZWQgYXV0b21hdGljYWxseSBpZiB3ZSB3ZXJlIGNlcnRhaW4gdGhhdCB0aGUgUHJvdmlkZXIgd2FzIHVzaW5nIERleGllLlByb21pc2UgZm9yIGFsbCBhc3luY3JvbmljIG9wZXJhdGlvbnMuIFRoZSBwcm9taXNlIFBTRFxuICAvLyBmcm9tIHRoZSBwcm92aWRlci5jb25uZWN0KCkgY2FsbCB3b3VsZCB0aGVuIGJlIGRlcml2ZWQgYWxsIHRoZSB3YXkgdG8gd2hlbiBwcm92aWRlciB3b3VsZCBjYWxsIGxvY2FsRGF0YWJhc2UuYXBwbHlDaGFuZ2VzKCkuIEJ1dCBzaW5jZVxuICAvLyB0aGUgcHJvdmlkZXIgbW9yZSBsaWtlbHkgaXMgdXNpbmcgbm9uLXByb21pc2UgYXN5bmMgQVBJcyBvciBvdGhlciB0aGVuYWJsZSBpbXBsZW1lbnRhdGlvbnMsIHdlIGNhbm5vdCBhc3N1bWUgdGhhdC5cbiAgLy8gTm90ZSB0aGF0IHRoaXMgbWV0aG9kIGlzIG9ubHkgdXNlZnVsIGZvciBvbigncmVhZHknKSBzdWJzY3JpYmVycyB0aGF0IGlzIHJldHVybmluZyBhIFByb21pc2UgZnJvbSB0aGUgZXZlbnQuIElmIG5vdCB1c2luZyB2aXAoKVxuICAvLyB0aGUgZGF0YWJhc2UgY291bGQgZGVhZGxvY2sgc2luY2UgaXQgd29udCBvcGVuIHVudGlsIHRoZSByZXR1cm5lZCBQcm9taXNlIGlzIHJlc29sdmVkLCBhbmQgYW55IG5vbi1WSVBlZCBvcGVyYXRpb24gc3RhcnRlZCBieVxuICAvLyB0aGUgY2FsbGVyIHdpbGwgbm90IHJlc29sdmUgdW50aWwgZGF0YWJhc2UgaXMgb3BlbmVkLlxuICByZXR1cm4gbmV3U2NvcGUoZnVuY3Rpb24gKCkge1xuICAgIFBTRC5sZXRUaHJvdWdoID0gdHJ1ZTsgLy8gTWFrZSBzdXJlIHdlIGFyZSBsZXQgdGhyb3VnaCBpZiBzdGlsbCBibG9ja2luZyBkYiBkdWUgdG8gb25yZWFkeSBpcyBmaXJpbmcuXG4gICAgcmV0dXJuIGZuKCk7XG4gIH0pO1xufVxuXG4iLCAiLyoqXG4gKiBXb3JrIGFyb3VuZCBTYWZhcmkgMTQgSW5kZXhlZERCIG9wZW4gYnVnLlxuICpcbiAqIFNhZmFyaSBoYXMgYSBob3JyaWJsZSBidWcgd2hlcmUgSURCIHJlcXVlc3RzIGNhbiBoYW5nIHdoaWxlIHRoZSBicm93c2VyIGlzIHN0YXJ0aW5nIHVwLiBodHRwczovL2J1Z3Mud2Via2l0Lm9yZy9zaG93X2J1Zy5jZ2k/aWQ9MjI2NTQ3XG4gKiBUaGUgb25seSBzb2x1dGlvbiBpcyB0byBrZWVwIG51ZGdpbmcgaXQgdW50aWwgaXQncyBhd2FrZS5cbiAqL1xuZnVuY3Rpb24gaWRiUmVhZHkoKSB7XG4gICAgdmFyIGlzU2FmYXJpID0gIW5hdmlnYXRvci51c2VyQWdlbnREYXRhICYmXG4gICAgICAgIC9TYWZhcmlcXC8vLnRlc3QobmF2aWdhdG9yLnVzZXJBZ2VudCkgJiZcbiAgICAgICAgIS9DaHJvbShlfGl1bSlcXC8vLnRlc3QobmF2aWdhdG9yLnVzZXJBZ2VudCk7XG4gICAgLy8gTm8gcG9pbnQgcHV0dGluZyBvdGhlciBicm93c2VycyBvciBvbGRlciB2ZXJzaW9ucyBvZiBTYWZhcmkgdGhyb3VnaCB0aGlzIG1lc3MuXG4gICAgaWYgKCFpc1NhZmFyaSB8fCAhaW5kZXhlZERCLmRhdGFiYXNlcylcbiAgICAgICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZSgpO1xuICAgIHZhciBpbnRlcnZhbElkO1xuICAgIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbiAocmVzb2x2ZSkge1xuICAgICAgICB2YXIgdHJ5SWRiID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gaW5kZXhlZERCLmRhdGFiYXNlcygpLmZpbmFsbHkocmVzb2x2ZSk7IH07XG4gICAgICAgIGludGVydmFsSWQgPSBzZXRJbnRlcnZhbCh0cnlJZGIsIDEwMCk7XG4gICAgICAgIHRyeUlkYigpO1xuICAgIH0pLmZpbmFsbHkoZnVuY3Rpb24gKCkgeyByZXR1cm4gY2xlYXJJbnRlcnZhbChpbnRlcnZhbElkKTsgfSk7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGlkYlJlYWR5O1xuIiwgImltcG9ydCB7IGNtcCB9IGZyb20gXCIuLi9mdW5jdGlvbnMvY21wXCI7XG5pbXBvcnQgeyBleHRlbmQsIGl0ZXJhdG9yU3ltYm9sLCBwcm9wcyB9IGZyb20gJy4uL2Z1bmN0aW9ucy91dGlscyc7XG5pbXBvcnQgeyBJbmRleGFibGVUeXBlIH0gZnJvbSAnLi4vcHVibGljJztcbmltcG9ydCB7XG4gIEVtcHR5UmFuZ2UsXG4gIEludGVydmFsVHJlZSxcbiAgSW50ZXJ2YWxUcmVlTm9kZSxcbiAgUmFuZ2VTZXRDb25zdHJ1Y3RvcixcbiAgUmFuZ2VTZXRQcm90b3R5cGUsXG59IGZyb20gXCIuLi9wdWJsaWMvdHlwZXMvcmFuZ2VzZXRcIjtcblxuLyogQW4gaW50ZXJ2YWwgdHJlZSBpbXBsZW1lbnRhdGlvbiB0byBlZmZpY2llbnRseSBkZXRlY3Qgb3ZlcmxhcHBpbmcgcmFuZ2VzIG9mIHF1ZXJpZWQgaW5kZXhlcy5cbiAqXG4gKiBodHRwczovL2VuLndpa2lwZWRpYS5vcmcvd2lraS9JbnRlcnZhbF90cmVlXG4gKiBcbiAqL1xuXG5mdW5jdGlvbiBpc0VtcHR5UmFuZ2Uobm9kZTogSW50ZXJ2YWxUcmVlIHwge2Zyb206IEluZGV4YWJsZVR5cGUsIHRvOiBJbmRleGFibGVUeXBlfSk6IG5vZGUgaXMgRW1wdHlSYW5nZSB7XG4gIHJldHVybiAhKFwiZnJvbVwiIGluIG5vZGUpO1xufVxuXG5leHBvcnQgdHlwZSBSYW5nZVNldCA9IFJhbmdlU2V0UHJvdG90eXBlICYgSW50ZXJ2YWxUcmVlO1xuXG5leHBvcnQgY29uc3QgUmFuZ2VTZXQgPSBmdW5jdGlvbihmcm9tT3JUcmVlOiBhbnksIHRvPzogYW55KSB7XG4gIGlmICh0aGlzKSB7XG4gICAgLy8gQ2FsbGVkIHdpdGggbmV3KClcbiAgICBleHRlbmQodGhpcywgYXJndW1lbnRzLmxlbmd0aCA/IHtkOjEsIGZyb206IGZyb21PclRyZWUsIHRvOiBhcmd1bWVudHMubGVuZ3RoID4gMSA/IHRvIDogZnJvbU9yVHJlZX0gOiB7ZDowfSk7XG4gIH0gZWxzZSB7XG4gICAgLy8gQ2FsbGVkIHdpdGhvdXQgbmV3KClcbiAgICBjb25zdCBydiA9IG5ldyBSYW5nZVNldCgpO1xuICAgIGlmIChmcm9tT3JUcmVlICYmIChcImRcIiBpbiBmcm9tT3JUcmVlKSkge1xuICAgICAgZXh0ZW5kKHJ2LCBmcm9tT3JUcmVlKTtcbiAgICB9XG4gICAgcmV0dXJuIHJ2O1xuICB9XG59IGFzIFJhbmdlU2V0Q29uc3RydWN0b3I7XG5cbnByb3BzKFJhbmdlU2V0LnByb3RvdHlwZSwge1xuICBhZGQocmFuZ2VTZXQ6IEludGVydmFsVHJlZSB8IHtmcm9tOiBJbmRleGFibGVUeXBlLCB0bzogSW5kZXhhYmxlVHlwZX0pIHtcbiAgICBtZXJnZVJhbmdlcyh0aGlzLCByYW5nZVNldCk7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH0sXG4gIGFkZEtleShrZXk6IEluZGV4YWJsZVR5cGUpIHtcbiAgICBhZGRSYW5nZSh0aGlzLCBrZXksIGtleSk7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH0sXG4gIGFkZEtleXMoa2V5czogSW5kZXhhYmxlVHlwZVtdKSB7XG4gICAga2V5cy5mb3JFYWNoKGtleSA9PiBhZGRSYW5nZSh0aGlzLCBrZXksIGtleSkpO1xuICAgIHJldHVybiB0aGlzO1xuICB9LFxuICBoYXNLZXkoa2V5OiBJbmRleGFibGVUeXBlKSB7XG4gICAgY29uc3Qgbm9kZSA9IGdldFJhbmdlU2V0SXRlcmF0b3IodGhpcykubmV4dChrZXkpLnZhbHVlO1xuICAgIHJldHVybiBub2RlICYmIGNtcChub2RlLmZyb20sIGtleSkgPD0gMCAmJiBjbXAobm9kZS50bywga2V5KSA+PSAwO1xuICB9LFxuXG4gIFtpdGVyYXRvclN5bWJvbF0oKTogSXRlcmF0b3I8SW50ZXJ2YWxUcmVlTm9kZSwgdW5kZWZpbmVkLCBJbmRleGFibGVUeXBlIHwgdW5kZWZpbmVkPiB7XG4gICAgcmV0dXJuIGdldFJhbmdlU2V0SXRlcmF0b3IodGhpcyk7XG4gIH1cbn0pO1xuXG5mdW5jdGlvbiBhZGRSYW5nZSh0YXJnZXQ6IEludGVydmFsVHJlZSwgZnJvbTogSW5kZXhhYmxlVHlwZSwgdG86IEluZGV4YWJsZVR5cGUpIHtcbiAgY29uc3QgZGlmZiA9IGNtcChmcm9tLCB0byk7XG4gIC8vIGNtcCgpIHJldHVybnMgTmFOIGlmIG9uZSBvZiB0aGUgYXJncyBhcmUgSURCLWludmFsaWQga2V5cy5cbiAgLy8gQXZvaWQgc3RvcmluZyBpbnZhbGlkIGtleXMgaW4gcmFuZ2VzZXQ6XG4gIGlmIChpc05hTihkaWZmKSkgcmV0dXJuO1xuXG4gIC8vIENhbGxlciBpcyB0cnlpbmcgdG8gYWRkIGEgcmFuZ2Ugd2hlcmUgZnJvbSBpcyBncmVhdGVyIHRoYW4gdG86XG4gIGlmIChkaWZmID4gMCkgdGhyb3cgUmFuZ2VFcnJvcigpO1xuICBcbiAgaWYgKGlzRW1wdHlSYW5nZSh0YXJnZXQpKSByZXR1cm4gZXh0ZW5kKHRhcmdldCwgeyBmcm9tLCB0bywgZDogMSB9KTtcbiAgY29uc3QgbGVmdCA9IHRhcmdldC5sO1xuICBjb25zdCByaWdodCA9IHRhcmdldC5yO1xuICBpZiAoY21wKHRvLCB0YXJnZXQuZnJvbSkgPCAwKSB7XG4gICAgbGVmdFxuICAgICAgPyBhZGRSYW5nZShsZWZ0LCBmcm9tLCB0bylcbiAgICAgIDogKHRhcmdldC5sID0geyBmcm9tLCB0bywgZDogMSwgbDogbnVsbCwgcjogbnVsbCB9KTtcbiAgICByZXR1cm4gcmViYWxhbmNlKHRhcmdldCk7XG4gIH1cbiAgaWYgKGNtcChmcm9tLCB0YXJnZXQudG8pID4gMCkge1xuICAgIHJpZ2h0XG4gICAgICA/IGFkZFJhbmdlKHJpZ2h0LCBmcm9tLCB0bylcbiAgICAgIDogKHRhcmdldC5yID0geyBmcm9tLCB0bywgZDogMSwgbDogbnVsbCwgcjogbnVsbCB9KTtcbiAgICByZXR1cm4gcmViYWxhbmNlKHRhcmdldCk7XG4gIH1cbiAgLy8gTm93IHdlIGhhdmUgc29tZSBraW5kIG9mIG92ZXJsYXAuIFdlIHdpbGwgYmUgYWJsZSB0byBtZXJnZSB0aGUgbmV3IHJhbmdlIGludG8gdGhlIG5vZGUgb3IgbGV0IGl0IGJlIHN3YWxsb3dlZC5cblxuICAvLyBHcm93IGxlZnQ/XG4gIGlmIChjbXAoZnJvbSwgdGFyZ2V0LmZyb20pIDwgMCkge1xuICAgIHRhcmdldC5mcm9tID0gZnJvbTtcbiAgICB0YXJnZXQubCA9IG51bGw7IC8vIEN1dCBvZmYgZm9yIG5vdy4gUmUtYWRkIGxhdGVyLlxuICAgIHRhcmdldC5kID0gcmlnaHQgPyByaWdodC5kICsgMSA6IDE7XG4gIH1cbiAgLy8gR3JvdyByaWdodD9cbiAgaWYgKGNtcCh0bywgdGFyZ2V0LnRvKSA+IDApIHtcbiAgICB0YXJnZXQudG8gPSB0bztcbiAgICB0YXJnZXQuciA9IG51bGw7IC8vIEN1dCBvZmYgZm9yIG5vdy4gUmUtYWRkIGxhdGVyLlxuICAgIHRhcmdldC5kID0gdGFyZ2V0LmwgPyB0YXJnZXQubC5kICsgMSA6IDE7XG4gIH1cbiAgY29uc3QgcmlnaHRXYXNDdXRPZmYgPSAhdGFyZ2V0LnI7XG4gIC8vIFJlLWFkZCBsZWZ0P1xuICBpZiAobGVmdCAmJiAhdGFyZ2V0LmwpIHtcbiAgICAvL1JhbmdlcyB0byB0aGUgbGVmdCBtYXkgYmUgc3dhbGxvd2VkLiBDdXQgaXQgb2YgYW5kIHJlLWFkZCBhbGwuXG4gICAgLy9Db3VsZCBwcm9iYWJseSBiZSBkb25lIG1vcmUgZWZmaWNpZW50bHkhXG4gICAgbWVyZ2VSYW5nZXModGFyZ2V0LCBsZWZ0KTtcbiAgfVxuICAvLyBSZS1hZGQgcmlnaHQ/XG4gIGlmIChyaWdodCAmJiByaWdodFdhc0N1dE9mZikge1xuICAgIC8vUmFuZ2VzIHRvIHRoZSByaWdodCBtYXkgYmUgc3dhbGxvd2VkLiBDdXQgaXQgb2YgYW5kIHJlLWFkZCBhbGwuXG4gICAgLy9Db3VsZCBwcm9iYWJseSBiZSBkb25lIG1vcmUgZWZmaWNpZW50bHkhXG4gICAgbWVyZ2VSYW5nZXModGFyZ2V0LCByaWdodCk7XG4gIH1cbn1cblxuZXhwb3J0IGZ1bmN0aW9uIG1lcmdlUmFuZ2VzKHRhcmdldDogSW50ZXJ2YWxUcmVlLCBuZXdTZXQ6IEludGVydmFsVHJlZSB8IHtmcm9tOiBJbmRleGFibGVUeXBlLCB0bzogSW5kZXhhYmxlVHlwZX0pIHtcbiAgZnVuY3Rpb24gX2FkZFJhbmdlU2V0KFxuICAgIHRhcmdldDogSW50ZXJ2YWxUcmVlLFxuICAgIHsgZnJvbSwgdG8sIGwsIHIgfTogSW50ZXJ2YWxUcmVlTm9kZSB8IHtmcm9tOiBJbmRleGFibGVUeXBlLCB0bzogSW5kZXhhYmxlVHlwZSwgbD86IHVuZGVmaW5lZCwgcj86IHVuZGVmaW5lZH1cbiAgKSB7XG4gICAgYWRkUmFuZ2UodGFyZ2V0LCBmcm9tLCB0byk7XG4gICAgaWYgKGwpIF9hZGRSYW5nZVNldCh0YXJnZXQsIGwpO1xuICAgIGlmIChyKSBfYWRkUmFuZ2VTZXQodGFyZ2V0LCByKTtcbiAgfVxuXG4gIGlmKCFpc0VtcHR5UmFuZ2UobmV3U2V0KSkgX2FkZFJhbmdlU2V0KHRhcmdldCwgbmV3U2V0KTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHJhbmdlc092ZXJsYXAoXG4gIHJhbmdlU2V0MTogSW50ZXJ2YWxUcmVlLFxuICByYW5nZVNldDI6IEludGVydmFsVHJlZVxuKTogYm9vbGVhbiB7XG4gICAgLy8gU3RhcnQgaXRlcmF0aW5nIG90aGVyIGZyb20gc2NyYXRjaC5cbiAgICBjb25zdCBpMSA9IGdldFJhbmdlU2V0SXRlcmF0b3IocmFuZ2VTZXQyKTtcbiAgICBsZXQgbmV4dFJlc3VsdDEgPSBpMS5uZXh0KCk7XG4gICAgaWYgKG5leHRSZXN1bHQxLmRvbmUpIHJldHVybiBmYWxzZTtcbiAgICBsZXQgYSA9IG5leHRSZXN1bHQxLnZhbHVlO1xuXG4gICAgLy8gU3RhcnQgaXRlcmF0aW5nIHRoaXMgZnJvbSBzdGFydCBvZiBvdGhlclxuICAgIGNvbnN0IGkyID0gZ2V0UmFuZ2VTZXRJdGVyYXRvcihyYW5nZVNldDEpO1xuICAgIGxldCBuZXh0UmVzdWx0MiA9IGkyLm5leHQoYS5mcm9tKTsgLy8gU3RhcnQgZnJvbSBiZWdpbm5pbmcgb2Ygb3RoZXIgcmFuZ2VcbiAgICBsZXQgYiA9IG5leHRSZXN1bHQyLnZhbHVlO1xuXG4gICAgd2hpbGUgKCFuZXh0UmVzdWx0MS5kb25lICYmICFuZXh0UmVzdWx0Mi5kb25lKSB7XG4gICAgICBpZiAoY21wKGIhLmZyb20sIGEudG8pIDw9IDAgJiYgY21wKGIhLnRvLCBhLmZyb20pID49IDApIHJldHVybiB0cnVlO1xuICAgICAgY21wKGEuZnJvbSwgYiEuZnJvbSkgPCAwXG4gICAgICAgID8gKGEgPSAobmV4dFJlc3VsdDEgPSBpMS5uZXh0KGIhLmZyb20pKS52YWx1ZSEpIC8vIGEgaXMgYmVoaW5kLiBmb3J3YXJkIGl0IHRvIGJlZ2lubmluZyBvZiBuZXh0IGItcmFuZ2VcbiAgICAgICAgOiAoYiA9IChuZXh0UmVzdWx0MiA9IGkyLm5leHQoYS5mcm9tKSkudmFsdWUpOyAvLyBiIGlzIGJlaGluZC4gZm9yd2FyZCBpdCB0byBiZWdpbm5pbmcgb2YgbmV4dCBhLXJhbmdlXG4gICAgfVxuICByZXR1cm4gZmFsc2U7XG59XG5cbnR5cGUgUmFuZ2VTZXRJdGVyYXRvclN0YXRlID1cbiAgfCB7XG4gICAgICB1cD86IFJhbmdlU2V0SXRlcmF0b3JTdGF0ZTtcbiAgICAgIG46IEludGVydmFsVHJlZU5vZGU7XG4gICAgICBzOiAwIHwgMSB8IDIgfCAzO1xuICAgIH1cbiAgfCB1bmRlZmluZWRcbiAgfCBudWxsO1xuZXhwb3J0IGZ1bmN0aW9uIGdldFJhbmdlU2V0SXRlcmF0b3IoXG4gIG5vZGU6IEVtcHR5UmFuZ2UgfCBJbnRlcnZhbFRyZWVOb2RlXG4pOiBHZW5lcmF0b3I8SW50ZXJ2YWxUcmVlTm9kZSwgdW5kZWZpbmVkLCBJbmRleGFibGVUeXBlIHwgdW5kZWZpbmVkPiB7XG4gIGxldCBzdGF0ZTogUmFuZ2VTZXRJdGVyYXRvclN0YXRlID0gaXNFbXB0eVJhbmdlKG5vZGUpID8gbnVsbCA6IHsgczogMCwgbjogbm9kZSB9O1xuXG4gIHJldHVybiB7XG4gICAgbmV4dChrZXk/KSB7XG4gICAgICBjb25zdCBrZXlQcm92aWRlZCA9IGFyZ3VtZW50cy5sZW5ndGggPiAwO1xuICAgICAgd2hpbGUgKHN0YXRlKSB7XG4gICAgICAgIHN3aXRjaCAoc3RhdGUucykge1xuICAgICAgICAgIGNhc2UgMDpcbiAgICAgICAgICAgIC8vIEluaXRpYWwgc3RhdGUgZm9yIG5vZGUuXG4gICAgICAgICAgICAvLyBGYXN0IGZvcndhcmQgdG8gbGVmdG1vc3Qgbm9kZS5cbiAgICAgICAgICAgIHN0YXRlLnMgPSAxO1xuICAgICAgICAgICAgaWYgKGtleVByb3ZpZGVkKSB7XG4gICAgICAgICAgICAgIHdoaWxlIChzdGF0ZS5uLmwgJiYgY21wKGtleSwgc3RhdGUubi5mcm9tKSA8IDApXG4gICAgICAgICAgICAgICAgc3RhdGUgPSB7IHVwOiBzdGF0ZSwgbjogc3RhdGUubi5sLCBzOiAxIH07XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICB3aGlsZSAoc3RhdGUubi5sKSBzdGF0ZSA9IHsgdXA6IHN0YXRlLCBuOiBzdGF0ZS5uLmwsIHM6IDEgfTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAvLyBpbnRlbnRpb25hbGx5IGZhbGwgaW50byBjYXNlIDE6XG4gICAgICAgICAgY2FzZSAxOlxuICAgICAgICAgICAgLy8gV2UncmUgb24gYSBub2RlIHdoZXJlIGl0J3MgbGVmdCBwYXJ0IGlzIGFscmVhZHkgaGFuZGxlZCBvciBkb2VzIG5vdCBleGlzdC5cbiAgICAgICAgICAgIHN0YXRlLnMgPSAyO1xuICAgICAgICAgICAgaWYgKCFrZXlQcm92aWRlZCB8fCBjbXAoa2V5LCBzdGF0ZS5uLnRvKSA8PSAwKVxuICAgICAgICAgICAgICByZXR1cm4geyB2YWx1ZTogc3RhdGUubiwgZG9uZTogZmFsc2UgfTtcbiAgICAgICAgICBjYXNlIDI6XG4gICAgICAgICAgICAvLyBXZSd2ZSBlbWl0dGVkIG91ciBub2RlIGFuZCBzaG91bGQgY29udGludWUgd2l0aCB0aGUgcmlnaHQgcGFydCBvciBsZXQgcGFyZW50IHRha2Ugb3ZlciBmcm9tIGl0J3Mgc3RhdGUgMVxuICAgICAgICAgICAgaWYgKHN0YXRlLm4ucikge1xuICAgICAgICAgICAgICBzdGF0ZS5zID0gMzsgLy8gU28gd2hlbiBjaGlsZCBpcyBkb25lLCB3ZSBrbm93IHdlJ3JlIGRvbmUuXG4gICAgICAgICAgICAgIHN0YXRlID0geyB1cDogc3RhdGUsIG46IHN0YXRlLm4uciwgczogMCB9O1xuICAgICAgICAgICAgICBjb250aW51ZTsgLy8gV2lsbCBmYWxsIGluIHRvIGNhc2UgMCB3aXRoIGZhc3QgZm9yd2FyZCB0byBsZWZ0IGxlYWYgb2YgdGhpcyBzdWJ0cmVlLlxuICAgICAgICAgICAgfVxuICAgICAgICAgIC8vIGludGVudGlvbmFsbHkgZmFsbCBpbnRvIGNhc2UgMzpcbiAgICAgICAgICBjYXNlIDM6XG4gICAgICAgICAgICBzdGF0ZSA9IHN0YXRlLnVwO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4geyBkb25lOiB0cnVlIH07XG4gICAgfSxcbiAgfSBhcyBHZW5lcmF0b3I8SW50ZXJ2YWxUcmVlTm9kZSwgdW5kZWZpbmVkLCBJbmRleGFibGVUeXBlPjtcbn1cblxuZnVuY3Rpb24gcmViYWxhbmNlKHRhcmdldDogSW50ZXJ2YWxUcmVlTm9kZSkge1xuICBjb25zdCBkaWZmID0gKHRhcmdldC5yPy5kIHx8IDApIC0gKHRhcmdldC5sPy5kIHx8IDApO1xuICBjb25zdCByID0gZGlmZiA+IDEgPyBcInJcIiA6IGRpZmYgPCAtMSA/IFwibFwiIDogXCJcIjtcbiAgaWYgKHIpIHtcblxuICAgIC8vIFJvdGF0ZSAoaHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvVHJlZV9yb3RhdGlvbilcbiAgICAvL1xuICAgIC8vIFxuICAgIC8vICAgICAgICAgICAgICAgICAgICBbT0xEUk9PVF1cbiAgICAvLyAgICAgICBbT0xEUk9PVC5MXSAgICAgICAgICAgIFtORVdST09UXVxuICAgIC8vICAgICAgICAgICAgICAgICAgICAgICAgW05FV1JPT1QuTF0gW05FV1JPT1QuUl1cbiAgICAvL1xuICAgIC8vIElzIGdvaW5nIHRvIGJlY29tZTpcbiAgICAvL1xuICAgIC8vIFxuICAgIC8vICAgICAgICAgICAgICAgICAgICBbTkVXUk9PVF1cbiAgICAvLyAgICAgICAgW09MRFJPT1RdICAgICAgICAgICAgIFtORVdST09ULlJdXG4gICAgLy8gW09MRFJPT1QuTF0gW05FV1JPT1QuTF0gIFxuXG4gICAgLy8gKiBjbG9uZSBub3cgaGFzIHRoZSBwcm9wcyBvZiBPTERST09UXG4gICAgLy8gUGxhbjpcbiAgICAvLyAqIHRhcmdldCBtdXN0IGJlIGdpdmVuIHRoZSBwcm9wcyBvZiBORVdST09UXG4gICAgLy8gKiB0YXJnZXRbbF0gbXVzdCBwb2ludCB0byBhIG5ldyBPTERST09UXG4gICAgLy8gKiB0YXJnZXRbcl0gbXVzdCBwb2ludCB0byBORVdST09ULlJcbiAgICAvLyAqIE9MRFJPT1Rbcl0gbXVzdCBwb2ludCB0byBORVdST09ULkxcbiAgICBjb25zdCBsID0gciA9PT0gXCJyXCIgPyBcImxcIiA6IFwiclwiOyAvLyBTdXBwb3J0IGJvdGggbGVmdC9yaWdodCByb3RhdGlvblxuICAgIGNvbnN0IHJvb3RDbG9uZSA9IHsgLi4udGFyZ2V0IH07XG4gICAgLy8gV2UncmUgZ29ubmEgY29weSBwcm9wcyBmcm9tIHRhcmdldCdzIHJpZ2h0IG5vZGUgaW50byB0YXJnZXQgc28gdGhhdCB0YXJnZXQgd2lsbFxuICAgIC8vIGhhdmUgc2FtZSByYW5nZSBhcyBvbGQgdGFyZ2V0W3JdIChpbnN0ZWFkIG9mIGNoYW5naW5nIHBvaW50ZXJzLCB3ZSBjb3B5IHZhbHVlcy5cbiAgICAvLyB0aGF0IHdheSB3ZSBkbyBub3QgbmVlZCB0byBhZGp1c3QgcG9pbnRlcnMgaW4gcGFyZW50cykuXG4gICAgY29uc3Qgb2xkUm9vdFJpZ2h0ID0gdGFyZ2V0W3JdOyBcbiAgICB0YXJnZXQuZnJvbSA9IG9sZFJvb3RSaWdodC5mcm9tO1xuICAgIHRhcmdldC50byA9IG9sZFJvb3RSaWdodC50bztcbiAgICB0YXJnZXRbcl0gPSBvbGRSb290UmlnaHRbcl07XG4gICAgcm9vdENsb25lW3JdID0gb2xkUm9vdFJpZ2h0W2xdO1xuICAgIHRhcmdldFtsXSA9IHJvb3RDbG9uZTtcbiAgICByb290Q2xvbmUuZCA9IGNvbXB1dGVEZXB0aChyb290Q2xvbmUpO1xuICB9XG4gIHRhcmdldC5kID0gY29tcHV0ZURlcHRoKHRhcmdldCk7XG59XG5cbmZ1bmN0aW9uIGNvbXB1dGVEZXB0aCh7IHIsIGwgfTogUGljazxJbnRlcnZhbFRyZWVOb2RlLCBcImxcIiB8IFwiclwiPikge1xuICByZXR1cm4gKHIgPyAobCA/IE1hdGgubWF4KHIuZCwgbC5kKSA6IHIuZCkgOiBsID8gbC5kIDogMCkgKyAxO1xufVxuIiwgImltcG9ydCB7IGNsb25lU2ltcGxlT2JqZWN0VHJlZSwgZGVlcENsb25lLCBrZXlzLCBvYmplY3RJc0VtcHR5IH0gZnJvbSBcIi4uL2Z1bmN0aW9ucy91dGlsc1wiO1xuaW1wb3J0IHsgbWVyZ2VSYW5nZXMsIFJhbmdlU2V0IH0gZnJvbSBcIi4uL2hlbHBlcnMvcmFuZ2VzZXRcIjtcbmltcG9ydCB7IE9ic2VydmFiaWxpdHlTZXQgfSBmcm9tIFwiLi4vcHVibGljL3R5cGVzL2RiLWV2ZW50c1wiO1xuXG5leHBvcnQgZnVuY3Rpb24gZXh0ZW5kT2JzZXJ2YWJpbGl0eVNldChcbiAgdGFyZ2V0OiBPYnNlcnZhYmlsaXR5U2V0LFxuICBuZXdTZXQ6IE9ic2VydmFiaWxpdHlTZXRcbik6IE9ic2VydmFiaWxpdHlTZXQge1xuICBrZXlzKG5ld1NldCkuZm9yRWFjaChwYXJ0ID0+IHtcbiAgICBpZiAodGFyZ2V0W3BhcnRdKSBtZXJnZVJhbmdlcyh0YXJnZXRbcGFydF0sIG5ld1NldFtwYXJ0XSk7XG4gICAgZWxzZSB0YXJnZXRbcGFydF0gPSBjbG9uZVNpbXBsZU9iamVjdFRyZWUobmV3U2V0W3BhcnRdKTsgLy8gU29tZXdoYXQgZmFzdGVyXG4gIH0pO1xuICByZXR1cm4gdGFyZ2V0O1xufVxuIiwgImltcG9ydCB7IHJhbmdlc092ZXJsYXAgfSBmcm9tICcuLi9oZWxwZXJzL3Jhbmdlc2V0JztcbmltcG9ydCB7IE9ic2VydmFiaWxpdHlTZXQgfSBmcm9tICcuLi9wdWJsaWMvdHlwZXMvZGItZXZlbnRzJztcblxuZXhwb3J0IGZ1bmN0aW9uIG9ic1NldHNPdmVybGFwKG9zMTogT2JzZXJ2YWJpbGl0eVNldCwgb3MyOiBPYnNlcnZhYmlsaXR5U2V0KSB7XG4gIHJldHVybiBvczEuYWxsIHx8IG9zMi5hbGwgfHwgT2JqZWN0LmtleXMob3MxKS5zb21lKFxuICAgIChrZXkpID0+IG9zMltrZXldICYmIHJhbmdlc092ZXJsYXAob3MyW2tleV0sIG9zMVtrZXldKVxuICApO1xufVxuIiwgImltcG9ydCB7IHR5cGUgR2xvYmFsUXVlcnlDYWNoZSB9IGZyb20gXCIuLi8uLi9wdWJsaWMvdHlwZXMvY2FjaGVcIjtcblxuZXhwb3J0IGNvbnN0IGNhY2hlOiBHbG9iYWxRdWVyeUNhY2hlID0ge31cbiIsICJpbXBvcnQgeyBDYWNoZUVudHJ5LCBUYmxRdWVyeUNhY2hlIH0gZnJvbSAnLi4vLi4vcHVibGljL3R5cGVzL2NhY2hlJztcbmltcG9ydCB7IE9ic2VydmFiaWxpdHlTZXQgfSBmcm9tICcuLi8uLi9wdWJsaWMvdHlwZXMvZGItZXZlbnRzJztcbmltcG9ydCB7IGV4dGVuZE9ic2VydmFiaWxpdHlTZXQgfSBmcm9tICcuLi9leHRlbmQtb2JzZXJ2YWJpbGl0eS1zZXQnO1xuaW1wb3J0IHsgb2JzU2V0c092ZXJsYXAgfSBmcm9tICcuLi9vYnMtc2V0cy1vdmVybGFwJztcbmltcG9ydCB7IGNhY2hlIH0gZnJvbSAnLi9jYWNoZSc7XG5cbmxldCB1bnNpZ25hbGVkUGFydHM6IE9ic2VydmFiaWxpdHlTZXQgPSB7fTtcbmxldCBpc1Rhc2tFbnF1ZXVlZCA9IGZhbHNlO1xuXG5leHBvcnQgZnVuY3Rpb24gc2lnbmFsU3Vic2NyaWJlcnNMYXppbHkocGFydDogT2JzZXJ2YWJpbGl0eVNldCwgb3B0aW1pc3RpYyA9IGZhbHNlKSB7XG4gIGV4dGVuZE9ic2VydmFiaWxpdHlTZXQodW5zaWduYWxlZFBhcnRzLCBwYXJ0KTtcbiAgaWYgKCFpc1Rhc2tFbnF1ZXVlZCkge1xuICAgIGlzVGFza0VucXVldWVkID0gdHJ1ZTtcbiAgICBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgIGlzVGFza0VucXVldWVkID0gZmFsc2U7XG4gICAgICBjb25zdCBwYXJ0cyA9IHVuc2lnbmFsZWRQYXJ0cztcbiAgICAgIHVuc2lnbmFsZWRQYXJ0cyA9IHt9O1xuICAgICAgc2lnbmFsU3Vic2NyaWJlcnNOb3cocGFydHMsIGZhbHNlKTtcbiAgICB9LCAwKTtcbiAgfVxufVxuXG5leHBvcnQgZnVuY3Rpb24gc2lnbmFsU3Vic2NyaWJlcnNOb3coXG4gIHVwZGF0ZWRQYXJ0czogT2JzZXJ2YWJpbGl0eVNldCxcbiAgZGVsZXRlQWZmZWN0ZWRDYWNoZUVudHJpZXMgPSBmYWxzZVxuKSB7XG4gIGNvbnN0IHF1ZXJpZXNUb1NpZ25hbCA9IG5ldyBTZXQ8KCkgPT4gdm9pZD4oKTtcbiAgaWYgKHVwZGF0ZWRQYXJ0cy5hbGwpIHtcbiAgICAvLyBTaWduYWwgYWxsIHN1YnNjcmliZXJzIHRvIHJlcXVlcnkuXG4gICAgZm9yIChjb25zdCB0YmxDYWNoZSBvZiBPYmplY3QudmFsdWVzKGNhY2hlKSkge1xuICAgICAgY29sbGVjdFRhYmxlU3Vic2NyaWJlcnMoXG4gICAgICAgIHRibENhY2hlLFxuICAgICAgICB1cGRhdGVkUGFydHMsXG4gICAgICAgIHF1ZXJpZXNUb1NpZ25hbCxcbiAgICAgICAgZGVsZXRlQWZmZWN0ZWRDYWNoZUVudHJpZXNcbiAgICAgICk7XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIGZvciAoY29uc3Qga2V5IGluIHVwZGF0ZWRQYXJ0cykge1xuICAgICAgY29uc3QgcGFydHMgPSAvXmlkYlxcOlxcL1xcLyguKilcXC8oLiopXFwvLy5leGVjKGtleSk7XG4gICAgICBpZiAocGFydHMpIHtcbiAgICAgICAgY29uc3QgWywgZGJOYW1lLCB0YWJsZU5hbWVdID0gcGFydHM7XG4gICAgICAgIGNvbnN0IHRibENhY2hlID0gY2FjaGVbYGlkYjovLyR7ZGJOYW1lfS8ke3RhYmxlTmFtZX1gXTtcbiAgICAgICAgaWYgKHRibENhY2hlKVxuICAgICAgICAgIGNvbGxlY3RUYWJsZVN1YnNjcmliZXJzKFxuICAgICAgICAgICAgdGJsQ2FjaGUsXG4gICAgICAgICAgICB1cGRhdGVkUGFydHMsXG4gICAgICAgICAgICBxdWVyaWVzVG9TaWduYWwsXG4gICAgICAgICAgICBkZWxldGVBZmZlY3RlZENhY2hlRW50cmllc1xuICAgICAgICAgICk7XG4gICAgICB9XG4gICAgfVxuICB9XG4gIC8vIE5vdyB3aGVuIGFmZmVjdGVkIGNhY2hlIGVudHJpZXMgYXJlIHJlbW92ZWQsIHNpZ25hbCBjb2xsZWN0ZWQgc3Vic2NyaWJlcnMgdG8gcmVxdWVyeS5cbiAgcXVlcmllc1RvU2lnbmFsLmZvckVhY2goKHJlcXVlcnkpID0+IHJlcXVlcnkoKSk7XG59XG5cbmZ1bmN0aW9uIGNvbGxlY3RUYWJsZVN1YnNjcmliZXJzKFxuICB0YmxDYWNoZTogVGJsUXVlcnlDYWNoZSxcbiAgdXBkYXRlZFBhcnRzOiBPYnNlcnZhYmlsaXR5U2V0LFxuICBvdXRRdWVyaWVzVG9TaWduYWw6IFNldDwoKSA9PiB2b2lkPixcbiAgZGVsZXRlQWZmZWN0ZWRDYWNoZUVudHJpZXM6IGJvb2xlYW5cbikge1xuICBjb25zdCB1cGRhdGVkRW50cnlMaXN0czogW3N0cmluZywgQ2FjaGVFbnRyeVtdXVtdID0gW107XG4gIGZvciAoY29uc3QgW2luZGV4TmFtZSwgZW50cmllc10gb2YgT2JqZWN0LmVudHJpZXModGJsQ2FjaGUucXVlcmllcy5xdWVyeSkpIHtcbiAgICBjb25zdCBmaWx0ZXJlZEVudHJpZXM6IENhY2hlRW50cnlbXSA9IFtdO1xuICAgIGZvciAoY29uc3QgZW50cnkgb2YgZW50cmllcykge1xuICAgICAgaWYgKG9ic1NldHNPdmVybGFwKHVwZGF0ZWRQYXJ0cywgZW50cnkub2JzU2V0KSkge1xuICAgICAgICAvLyBUaGlzIHF1ZXJ5IGlzIGFmZmVjdGVkIGJ5IHRoZSBtdXRhdGlvbi4gUmVtb3ZlIGl0IGZyb20gY2FjaGVcbiAgICAgICAgLy8gYW5kIHNpZ25hbCBhbGwgc3Vic2NyaWJlcnMgdG8gcmVxdWVyeS5cbiAgICAgICAgZW50cnkuc3Vic2NyaWJlcnMuZm9yRWFjaCgocmVxdWVyeSkgPT4gb3V0UXVlcmllc1RvU2lnbmFsLmFkZChyZXF1ZXJ5KSk7XG4gICAgICB9IGVsc2UgaWYgKGRlbGV0ZUFmZmVjdGVkQ2FjaGVFbnRyaWVzKSB7XG4gICAgICAgIGZpbHRlcmVkRW50cmllcy5wdXNoKGVudHJ5KTtcbiAgICAgIH1cbiAgICB9XG4gICAgLy8gQ29sbGVjdCBjYWNoZSBlbnRyaWVzIHRvIGJlIHVwZGF0ZWRcbiAgICBpZiAoZGVsZXRlQWZmZWN0ZWRDYWNoZUVudHJpZXMpXG4gICAgICB1cGRhdGVkRW50cnlMaXN0cy5wdXNoKFtpbmRleE5hbWUsIGZpbHRlcmVkRW50cmllc10pO1xuICB9XG4gIGlmIChkZWxldGVBZmZlY3RlZENhY2hlRW50cmllcykge1xuICAgIGZvciAoY29uc3QgW2luZGV4TmFtZSwgZmlsdGVyZWRFbnRyaWVzXSBvZiB1cGRhdGVkRW50cnlMaXN0cykge1xuICAgICAgdGJsQ2FjaGUucXVlcmllcy5xdWVyeVtpbmRleE5hbWVdID0gZmlsdGVyZWRFbnRyaWVzO1xuICAgIH1cbiAgfVxufVxuIiwgImltcG9ydCB7IERleGllIH0gZnJvbSAnLi9kZXhpZSc7XG5pbXBvcnQgKiBhcyBEZWJ1ZyBmcm9tICcuLi8uLi9oZWxwZXJzL2RlYnVnJztcbmltcG9ydCB7IHJlamVjdGlvbiB9IGZyb20gJy4uLy4uL2hlbHBlcnMvcHJvbWlzZSc7XG5pbXBvcnQgeyBleGNlcHRpb25zIH0gZnJvbSAnLi4vLi4vZXJyb3JzJztcbmltcG9ydCB7IGV2ZW50UmVqZWN0SGFuZGxlciwgcHJldmVudERlZmF1bHQgfSBmcm9tICcuLi8uLi9mdW5jdGlvbnMvZXZlbnQtd3JhcHBlcnMnO1xuaW1wb3J0IFByb21pc2UsIHsgd3JhcCB9IGZyb20gJy4uLy4uL2hlbHBlcnMvcHJvbWlzZSc7XG5pbXBvcnQgeyBjb25uZWN0aW9ucyB9IGZyb20gJy4uLy4uL2dsb2JhbHMvY29uc3RhbnRzJztcbmltcG9ydCB7IHJ1blVwZ3JhZGVycywgcmVhZEdsb2JhbFNjaGVtYSwgYWRqdXN0VG9FeGlzdGluZ0luZGV4TmFtZXMsIHZlcmlmeUluc3RhbGxlZFNjaGVtYSwgcGF0Y2hDdXJyZW50VmVyc2lvbiB9IGZyb20gJy4uL3ZlcnNpb24vc2NoZW1hLWhlbHBlcnMnO1xuaW1wb3J0IHsgc2FmYXJpTXVsdGlTdG9yZUZpeCB9IGZyb20gJy4uLy4uL2Z1bmN0aW9ucy9xdWlya3MnO1xuaW1wb3J0IHsgX29uRGF0YWJhc2VDcmVhdGVkIH0gZnJvbSAnLi4vLi4vaGVscGVycy9kYXRhYmFzZS1lbnVtZXJhdG9yJztcbmltcG9ydCB7IHZpcCB9IGZyb20gJy4vdmlwJztcbmltcG9ydCB7IHByb21pc2FibGVDaGFpbiwgbm9wIH0gZnJvbSAnLi4vLi4vZnVuY3Rpb25zL2NoYWluaW5nLWZ1bmN0aW9ucyc7XG5pbXBvcnQgeyBnZW5lcmF0ZU1pZGRsZXdhcmVTdGFja3MgfSBmcm9tICcuL2dlbmVyYXRlLW1pZGRsZXdhcmUtc3RhY2tzJztcbmltcG9ydCB7IHNsaWNlIH0gZnJvbSAnLi4vLi4vZnVuY3Rpb25zL3V0aWxzJztcbmltcG9ydCBzYWZhcmkxNFdvcmthcm91bmQgZnJvbSAnc2FmYXJpLTE0LWlkYi1maXgnO1xuaW1wb3J0IHsgdHlwZSBPYnNlcnZhYmlsaXR5U2V0IH0gZnJvbSAnLi4vLi4vcHVibGljL3R5cGVzL2RiLWV2ZW50cyc7XG5pbXBvcnQgeyBSYW5nZVNldCB9IGZyb20gJy4uLy4uL2hlbHBlcnMvcmFuZ2VzZXQnO1xuaW1wb3J0IHsgREVYSUVfU1RPUkFHRV9NVVRBVEVEX0VWRU5UX05BTUUsIGdsb2JhbEV2ZW50cyB9IGZyb20gJy4uLy4uL2dsb2JhbHMvZ2xvYmFsLWV2ZW50cyc7XG5pbXBvcnQgeyBzaWduYWxTdWJzY3JpYmVyc05vdyB9IGZyb20gJy4uLy4uL2xpdmUtcXVlcnkvY2FjaGUvc2lnbmFsU3Vic2NyaWJlcnMnO1xuXG5leHBvcnQgZnVuY3Rpb24gZGV4aWVPcGVuIChkYjogRGV4aWUpIHtcbiAgY29uc3Qgc3RhdGUgPSBkYi5fc3RhdGU7XG4gIGNvbnN0IHtpbmRleGVkREJ9ID0gZGIuX2RlcHM7XG4gIGlmIChzdGF0ZS5pc0JlaW5nT3BlbmVkIHx8IGRiLmlkYmRiKVxuICAgICAgcmV0dXJuIHN0YXRlLmRiUmVhZHlQcm9taXNlLnRoZW48RGV4aWU+KCgpID0+IHN0YXRlLmRiT3BlbkVycm9yID9cbiAgICAgICAgcmVqZWN0aW9uIChzdGF0ZS5kYk9wZW5FcnJvcikgOlxuICAgICAgICBkYik7XG4gIHN0YXRlLmlzQmVpbmdPcGVuZWQgPSB0cnVlO1xuICBzdGF0ZS5kYk9wZW5FcnJvciA9IG51bGw7XG4gIHN0YXRlLm9wZW5Db21wbGV0ZSA9IGZhbHNlO1xuICBjb25zdCBvcGVuQ2FuY2VsbGVyID0gc3RhdGUub3BlbkNhbmNlbGxlcjtcbiAgbGV0IG5hdGl2ZVZlclRvT3BlbiA9IE1hdGgucm91bmQoZGIudmVybm8gKiAxMCk7XG4gIGxldCBzY2hlbWFQYXRjaE1vZGUgPSBmYWxzZTtcblxuICBmdW5jdGlvbiB0aHJvd0lmQ2FuY2VsbGVkKCkge1xuICAgIC8vIElmIHN0YXRlLm9wZW5DYW5jZWxsZXIgb2JqZWN0IHJlZmVyZW5jZSBpcyByZXBsYWNlZCwgaXQgbWVhbnMgZGIuY2xvc2UoKSBoYXMgYmVlbiBjYWxsZWQsXG4gICAgLy8gbWVhbmluZyB0aGlzIG9wZW4gZmxvdyBzaG91bGQgYmUgY2FuY2VsbGVkLlxuICAgIGlmIChzdGF0ZS5vcGVuQ2FuY2VsbGVyICE9PSBvcGVuQ2FuY2VsbGVyKSB0aHJvdyBuZXcgZXhjZXB0aW9ucy5EYXRhYmFzZUNsb3NlZCgnZGIub3BlbigpIHdhcyBjYW5jZWxsZWQnKTtcbiAgfVxuICBcbiAgLy8gRnVuY3Rpb24gcG9pbnRlcnMgdG8gY2FsbCB3aGVuIHRoZSBjb3JlIG9wZW5pbmcgcHJvY2VzcyBjb21wbGV0ZXMuXG4gIGxldCByZXNvbHZlRGJSZWFkeSA9IHN0YXRlLmRiUmVhZHlSZXNvbHZlLFxuICAgICAgLy8gdXBncmFkZVRyYW5zYWN0aW9uIHRvIGFib3J0IG9uIGZhaWx1cmUuXG4gICAgICB1cGdyYWRlVHJhbnNhY3Rpb246IChJREJUcmFuc2FjdGlvbiB8IG51bGwpID0gbnVsbCxcbiAgICAgIHdhc0NyZWF0ZWQgPSBmYWxzZTtcblxuICBjb25zdCB0cnlPcGVuREIgPSAoKSA9PiBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgdGhyb3dJZkNhbmNlbGxlZCgpO1xuICAgIC8vIElmIG5vIEFQSSwgdGhyb3chXG4gICAgaWYgKCFpbmRleGVkREIpIHRocm93IG5ldyBleGNlcHRpb25zLk1pc3NpbmdBUEkoKTtcbiAgICBjb25zdCBkYk5hbWUgPSBkYi5uYW1lO1xuICAgIFxuICAgIGNvbnN0IHJlcSA9IHN0YXRlLmF1dG9TY2hlbWEgfHwgIW5hdGl2ZVZlclRvT3BlbiA/XG4gICAgICBpbmRleGVkREIub3BlbihkYk5hbWUpIDpcbiAgICAgIGluZGV4ZWREQi5vcGVuKGRiTmFtZSwgbmF0aXZlVmVyVG9PcGVuKTtcbiAgICBpZiAoIXJlcSkgdGhyb3cgbmV3IGV4Y2VwdGlvbnMuTWlzc2luZ0FQSSgpOyAvLyBNYXkgaGFwcGVuIGluIFNhZmFyaSBwcml2YXRlIG1vZGUsIHNlZSBodHRwczovL2dpdGh1Yi5jb20vZGZhaGxhbmRlci9EZXhpZS5qcy9pc3N1ZXMvMTM0XG4gICAgcmVxLm9uZXJyb3IgPSBldmVudFJlamVjdEhhbmRsZXIocmVqZWN0KTtcbiAgICByZXEub25ibG9ja2VkID0gd3JhcChkYi5fZmlyZU9uQmxvY2tlZCk7XG4gICAgcmVxLm9udXBncmFkZW5lZWRlZCA9IHdyYXAgKGUgPT4ge1xuICAgICAgICB1cGdyYWRlVHJhbnNhY3Rpb24gPSByZXEudHJhbnNhY3Rpb247XG4gICAgICAgIGlmIChzdGF0ZS5hdXRvU2NoZW1hICYmICFkYi5fb3B0aW9ucy5hbGxvd0VtcHR5REIpIHsgLy8gVW5sZXNzIGFuIGFkZG9uIGhhcyBzcGVjaWZpZWQgZGIuX2FsbG93RW1wdHlEQiwgbGV0cyBtYWtlIHRoZSBjYWxsIGZhaWwuXG4gICAgICAgICAgICAvLyBDYWxsZXIgZGlkIG5vdCBzcGVjaWZ5IGEgdmVyc2lvbiBvciBzY2hlbWEuIERvaW5nIHRoYXQgaXMgb25seSBhY2NlcHRhYmxlIGZvciBvcGVuaW5nIGFscmVhZCBleGlzdGluZyBkYXRhYmFzZXMuXG4gICAgICAgICAgICAvLyBJZiBvbnVwZ3JhZGVuZWVkZWQgaXMgY2FsbGVkIGl0IG1lYW5zIGRhdGFiYXNlIGRpZCBub3QgZXhpc3QuIFJlamVjdCB0aGUgb3BlbigpIHByb21pc2UgYW5kIG1ha2Ugc3VyZSB0aGF0IHdlXG4gICAgICAgICAgICAvLyBkbyBub3QgY3JlYXRlIGEgbmV3IGRhdGFiYXNlIGJ5IGFjY2lkZW50IGhlcmUuXG4gICAgICAgICAgICByZXEub25lcnJvciA9IHByZXZlbnREZWZhdWx0OyAvLyBQcm9oaWJpdCBvbmFib3J0IGVycm9yIGZyb20gZmlyaW5nIGJlZm9yZSB3ZSdyZSBkb25lIVxuICAgICAgICAgICAgdXBncmFkZVRyYW5zYWN0aW9uLmFib3J0KCk7IC8vIEFib3J0IHRyYW5zYWN0aW9uICh3b3VsZCBob3BlIHRoYXQgdGhpcyB3b3VsZCBtYWtlIERCIGRpc2FwcGVhciBidXQgaXQgZG9lc250LilcbiAgICAgICAgICAgIC8vIENsb3NlIGRhdGFiYXNlIGFuZCBkZWxldGUgaXQuXG4gICAgICAgICAgICByZXEucmVzdWx0LmNsb3NlKCk7XG4gICAgICAgICAgICBjb25zdCBkZWxyZXEgPSBpbmRleGVkREIuZGVsZXRlRGF0YWJhc2UoZGJOYW1lKTsgLy8gVGhlIHVwZ3JhZGUgdHJhbnNhY3Rpb24gaXMgYXRvbWljLCBhbmQgamF2YXNjcmlwdCBpcyBzaW5nbGUgdGhyZWFkZWQgLSBtZWFuaW5nIHRoYXQgdGhlcmUgaXMgbm8gcmlzayB0aGF0IHdlIGRlbGV0ZSBzb21lb25lIGVsc2VzIGRhdGFiYXNlIGhlcmUhXG4gICAgICAgICAgICBkZWxyZXEub25zdWNjZXNzID0gZGVscmVxLm9uZXJyb3IgPSB3cmFwKCgpID0+IHtcbiAgICAgICAgICAgICAgICByZWplY3QgKG5ldyBleGNlcHRpb25zLk5vU3VjaERhdGFiYXNlKGBEYXRhYmFzZSAke2RiTmFtZX0gZG9lc250IGV4aXN0YCkpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB1cGdyYWRlVHJhbnNhY3Rpb24ub25lcnJvciA9IGV2ZW50UmVqZWN0SGFuZGxlcihyZWplY3QpO1xuICAgICAgICAgICAgY29uc3Qgb2xkVmVyID0gZS5vbGRWZXJzaW9uID4gTWF0aC5wb3coMiwgNjIpID8gMCA6IGUub2xkVmVyc2lvbjsgLy8gU2FmYXJpIDggZml4LlxuICAgICAgICAgICAgd2FzQ3JlYXRlZCA9IG9sZFZlciA8IDE7XG4gICAgICAgICAgICBkYi5pZGJkYiA9IHJlcS5yZXN1bHQ7XG4gICAgICAgICAgICBpZiAoc2NoZW1hUGF0Y2hNb2RlKSB7XG4gICAgICAgICAgICAgIHBhdGNoQ3VycmVudFZlcnNpb24oZGIsIHVwZ3JhZGVUcmFuc2FjdGlvbik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBydW5VcGdyYWRlcnMoZGIsIG9sZFZlciAvIDEwLCB1cGdyYWRlVHJhbnNhY3Rpb24sIHJlamVjdCk7XG4gICAgICAgIH1cbiAgICB9LCByZWplY3QpO1xuICAgIFxuICAgIHJlcS5vbnN1Y2Nlc3MgPSB3cmFwICgoKSA9PiB7XG4gICAgICAgIC8vIENvcmUgb3BlbmluZyBwcm9jZWR1cmUgY29tcGxldGUuIE5vdyBsZXQncyBqdXN0IHJlY29yZCBzb21lIHN0dWZmLlxuICAgICAgICB1cGdyYWRlVHJhbnNhY3Rpb24gPSBudWxsO1xuICAgICAgICBjb25zdCBpZGJkYiA9IGRiLmlkYmRiID0gcmVxLnJlc3VsdDtcblxuICAgICAgICBjb25zdCBvYmplY3RTdG9yZU5hbWVzID0gc2xpY2UoaWRiZGIub2JqZWN0U3RvcmVOYW1lcyk7XG4gICAgICAgIGlmIChvYmplY3RTdG9yZU5hbWVzLmxlbmd0aCA+IDApIHRyeSB7XG4gICAgICAgICAgY29uc3QgdG1wVHJhbnMgPSBpZGJkYi50cmFuc2FjdGlvbihzYWZhcmlNdWx0aVN0b3JlRml4KG9iamVjdFN0b3JlTmFtZXMpLCAncmVhZG9ubHknKTtcbiAgICAgICAgICBpZiAoc3RhdGUuYXV0b1NjaGVtYSkgcmVhZEdsb2JhbFNjaGVtYShkYiwgaWRiZGIsIHRtcFRyYW5zKTtcbiAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgYWRqdXN0VG9FeGlzdGluZ0luZGV4TmFtZXMoZGIsIGRiLl9kYlNjaGVtYSwgdG1wVHJhbnMpO1xuICAgICAgICAgICAgICBpZiAoIXZlcmlmeUluc3RhbGxlZFNjaGVtYShkYiwgdG1wVHJhbnMpICYmICFzY2hlbWFQYXRjaE1vZGUpIHtcbiAgICAgICAgICAgICAgICBjb25zb2xlLndhcm4oYERleGllIFNjaGVtYURpZmY6IFNjaGVtYSB3YXMgZXh0ZW5kZWQgd2l0aG91dCBpbmNyZWFzaW5nIHRoZSBudW1iZXIgcGFzc2VkIHRvIGRiLnZlcnNpb24oKS4gRGV4aWUgd2lsbCBhZGQgbWlzc2luZyBwYXJ0cyBhbmQgaW5jcmVtZW50IG5hdGl2ZSB2ZXJzaW9uIG51bWJlciB0byB3b3JrYXJvdW5kIHRoaXMuYCk7XG4gICAgICAgICAgICAgICAgaWRiZGIuY2xvc2UoKTtcbiAgICAgICAgICAgICAgICBuYXRpdmVWZXJUb09wZW4gPSBpZGJkYi52ZXJzaW9uICsgMTtcbiAgICAgICAgICAgICAgICBzY2hlbWFQYXRjaE1vZGUgPSB0cnVlO1xuICAgICAgICAgICAgICAgIHJldHVybiByZXNvbHZlICh0cnlPcGVuREIoKSk7IC8vIFRyeSBhZ2FpbiB3aXRoIG5ldyB2ZXJzaW9uIChuYXRpdmVWZXJUb09wZW5cbiAgICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgICBnZW5lcmF0ZU1pZGRsZXdhcmVTdGFja3MoZGIsIHRtcFRyYW5zKTtcbiAgICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAgIC8vIFNhZmFyaSA4IG1heSBiYWlsIG91dCBpZiA+IDEgc3RvcmUgbmFtZXMuIEhvd2V2ZXIsIHRoaXMgc2hvdWxkbnQgYmUgYSBzaG93c3RvcHBlci4gSXNzdWUgIzEyMC5cbiAgICAgICAgICAvLyBCVUdCVUc6IEl0IHdpbGwgYmFpbCBvdXQgYW55d2F5IGFzIG9mIERleGllIDMuXG4gICAgICAgICAgLy8gU2hvdWxkIHdlIHN1cHBvcnQgU2FmYXJpIDggYW55bW9yZT8gQmVsaWV2ZSBhbGxcbiAgICAgICAgICAvLyBEZXhpZSB1c2VycyB1c2UgdGhlIHNoaW0gZm9yIHRoYXQgcGxhdGZvcm0gYW55d2F5PyFcbiAgICAgICAgICAvLyBJZiByZW1vdmluZyBTYWZhcmkgOCBzdXBwb3J0LCBnbyBhaGVhZCBhbmQgcmVtb3ZlIHRoZSBzYWZhcmlNdWx0aVN0b3JlRml4KCkgZnVuY3Rpb25cbiAgICAgICAgICAvLyBhcyB3ZWxsIGFzIGFic3VyZCB1cGdyYWRlIHZlcnNpb24gcXVpcmsgZm9yIFNhZmFyaS5cbiAgICAgICAgfVxuICAgICAgICBcbiAgICAgICAgY29ubmVjdGlvbnMucHVzaChkYik7IC8vIFVzZWQgZm9yIGVtdWxhdGluZyB2ZXJzaW9uY2hhbmdlIGV2ZW50IG9uIElFL0VkZ2UvU2FmYXJpLlxuICAgICAgICBcbiAgICAgICAgaWRiZGIub252ZXJzaW9uY2hhbmdlID0gd3JhcChldiA9PiB7XG4gICAgICAgICAgICBzdGF0ZS52Y0ZpcmVkID0gdHJ1ZTsgLy8gZGV0ZWN0IGltcGxlbWVudGF0aW9ucyB0aGF0IG5vdCBzdXBwb3J0IHZlcnNpb25jaGFuZ2UgKElFL0VkZ2UvU2FmYXJpKVxuICAgICAgICAgICAgZGIub24oXCJ2ZXJzaW9uY2hhbmdlXCIpLmZpcmUoZXYpO1xuICAgICAgICB9KTtcbiAgICAgICAgXG4gICAgICAgIGlkYmRiLm9uY2xvc2UgPSB3cmFwKGV2ID0+IHtcbiAgICAgICAgICAgIGRiLm9uKFwiY2xvc2VcIikuZmlyZShldik7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIGlmICh3YXNDcmVhdGVkKSBfb25EYXRhYmFzZUNyZWF0ZWQoZGIuX2RlcHMsIGRiTmFtZSk7XG5cbiAgICAgICAgcmVzb2x2ZSgpO1xuXG4gICAgfSwgcmVqZWN0KTtcbiAgfSkuY2F0Y2goZXJyID0+IHtcbiAgICBzd2l0Y2ggKGVycj8ubmFtZSkge1xuICAgICAgY2FzZSBcIlVua25vd25FcnJvclwiOlxuICAgICAgICBpZiAoc3RhdGUuUFIxMzk4X21heExvb3AgPiAwKSB7XG4gICAgICAgICAgLy8gQnVnIGluIENocm9tZSBhZnRlciBjbGVhcmluZyBzaXRlIGRhdGFcbiAgICAgICAgICAvLyBodHRwczovL2dpdGh1Yi5jb20vZGV4aWUvRGV4aWUuanMvaXNzdWVzLzU0MyNpc3N1ZWNvbW1lbnQtMTc5NTczNjY5NVxuICAgICAgICAgIHN0YXRlLlBSMTM5OF9tYXhMb29wLS07XG4gICAgICAgICAgY29uc29sZS53YXJuKCdEZXhpZTogV29ya2Fyb3VuZCBmb3IgQ2hyb21lIFVua25vd25FcnJvciBvbiBvcGVuKCknKTtcbiAgICAgICAgICByZXR1cm4gdHJ5T3BlbkRCKCk7XG4gICAgICAgIH1cbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlIFwiVmVyc2lvbkVycm9yXCI6XG4gICAgICAgIGlmIChuYXRpdmVWZXJUb09wZW4gPiAwKSB7XG4gICAgICAgICAgbmF0aXZlVmVyVG9PcGVuID0gMDtcbiAgICAgICAgICByZXR1cm4gdHJ5T3BlbkRCKCk7XG4gICAgICAgIH1cbiAgICAgICAgYnJlYWs7XG4gICAgfVxuICAgIHJldHVybiBQcm9taXNlLnJlamVjdChlcnIpO1xuICB9KTtcbiAgXG4gIC8vIHNhZmFyaTE0V29ya2Fyb3VuZCA9IFdvcmthcm91bmQgYnkgamFrZWFyY2hpYmFsZCBmb3IgbmV3IG5hc3R5IGJ1ZyBpbiBzYWZhcmkgMTQuXG4gIHJldHVybiBQcm9taXNlLnJhY2UoW1xuICAgIG9wZW5DYW5jZWxsZXIsXG4gICAgKHR5cGVvZiBuYXZpZ2F0b3IgPT09ICd1bmRlZmluZWQnID8gUHJvbWlzZS5yZXNvbHZlKCkgOiBzYWZhcmkxNFdvcmthcm91bmQoKSkudGhlbih0cnlPcGVuREIpXG4gIF0pLnRoZW4oKCkgPT4ge1xuICAgICAgLy8gQmVmb3JlIGZpbmFsbHkgcmVzb2x2aW5nIHRoZSBkYlJlYWR5UHJvbWlzZSBhbmQgdGhpcyBwcm9taXNlLFxuICAgICAgLy8gY2FsbCBhbmQgYXdhaXQgYWxsIG9uKCdyZWFkeScpIHN1YnNjcmliZXJzOlxuICAgICAgLy8gRGV4aWUudmlwKCkgbWFrZXMgc3Vic2NyaWJlcnMgYWJsZSB0byB1c2UgdGhlIGRhdGFiYXNlIHdoaWxlIGJlaW5nIG9wZW5lZC5cbiAgICAgIC8vIFRoaXMgaXMgYSBtdXN0IHNpbmNlIHRoZXNlIHN1YnNjcmliZXJzIHRha2UgcGFydCBvZiB0aGUgb3BlbmluZyBwcm9jZWR1cmUuXG4gICAgICB0aHJvd0lmQ2FuY2VsbGVkKCk7XG4gICAgICBzdGF0ZS5vblJlYWR5QmVpbmdGaXJlZCA9IFtdO1xuICAgICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZSh2aXAoKCk9PmRiLm9uLnJlYWR5LmZpcmUoZGIudmlwKSkpLnRoZW4oZnVuY3Rpb24gZmlyZVJlbWFpbmRlcnMoKSB7XG4gICAgICAgICAgaWYgKHN0YXRlLm9uUmVhZHlCZWluZ0ZpcmVkLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgICAgLy8gSW4gY2FzZSBhZGRpdGlvbmFsIHN1YnNjcmliZXJzIHRvIGRiLm9uKCdyZWFkeScpIHdlcmUgYWRkZWQgZHVyaW5nIHRoZSB0aW1lIGRiLm9uLnJlYWR5LmZpcmUgd2FzIGV4ZWN1dGVkLlxuICAgICAgICAgICAgICBsZXQgcmVtYWluZGVycyA9IHN0YXRlLm9uUmVhZHlCZWluZ0ZpcmVkLnJlZHVjZShwcm9taXNhYmxlQ2hhaW4sIG5vcCk7XG4gICAgICAgICAgICAgIHN0YXRlLm9uUmVhZHlCZWluZ0ZpcmVkID0gW107XG4gICAgICAgICAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUodmlwKCgpPT5yZW1haW5kZXJzKGRiLnZpcCkpKS50aGVuKGZpcmVSZW1haW5kZXJzKVxuICAgICAgICAgIH1cbiAgICAgIH0pO1xuICB9KS5maW5hbGx5KCgpPT57XG4gICAgICBpZiAoc3RhdGUub3BlbkNhbmNlbGxlciA9PT0gb3BlbkNhbmNlbGxlcikge1xuICAgICAgICAvLyBPbmx5IG1vZGlmeSBzdGF0ZSBpZiBub3QgY2FuY2VsbGVkIGluIHRoZSBtZWFuIHRpbWUuXG4gICAgICAgIHN0YXRlLm9uUmVhZHlCZWluZ0ZpcmVkID0gbnVsbDtcbiAgICAgICAgc3RhdGUuaXNCZWluZ09wZW5lZCA9IGZhbHNlO1xuICAgICAgfVxuICB9KS5jYXRjaChlcnIgPT4ge1xuICAgICAgc3RhdGUuZGJPcGVuRXJyb3IgPSBlcnI7IC8vIFJlY29yZCB0aGUgZXJyb3IuIEl0IHdpbGwgYmUgdXNlZCB0byByZWplY3QgZnVydGhlciBwcm9taXNlcyBvZiBkYiBvcGVyYXRpb25zLlxuICAgICAgdHJ5IHtcbiAgICAgICAgLy8gRGlkIHdlIGZhaWwgd2l0aGluIG9udXBncmFkZW5lZWRlZD8gTWFrZSBzdXJlIHRvIGFib3J0IHRoZSB1cGdyYWRlIHRyYW5zYWN0aW9uIHNvIGl0IGRvZXNudCBjb21taXQuXG4gICAgICAgIHVwZ3JhZGVUcmFuc2FjdGlvbiAmJiB1cGdyYWRlVHJhbnNhY3Rpb24uYWJvcnQoKTtcbiAgICAgIH0gY2F0Y2ggeyB9XG4gICAgICBpZiAob3BlbkNhbmNlbGxlciA9PT0gc3RhdGUub3BlbkNhbmNlbGxlcikge1xuICAgICAgICAvLyBTdGlsbCBpbiB0aGUgc2FtZSBvcGVuIGZsb3cgLSBUaGUgZXJyb3IgcmVhc29uIHdhcyBub3QgZHVlIHRvIGV4dGVybmFsIGNhbGwgdG8gZGIuY2xvc2UoKS5cbiAgICAgICAgLy8gTWFrZSBzdXJlIHRvIGNhbGwgZGIuY2xvc2UoKSB0byBmaW5hbGl6ZSByZXNvdXJjZXMuXG4gICAgICAgIGRiLl9jbG9zZSgpOyAvLyBDbG9zZXMgYW5kIHJlc2V0cyBpZGJkYiwgcmVtb3ZlcyBjb25uZWN0aW9ucywgcmVzZXRzIGRiUmVhZHlQcm9taXNlIGFuZCBvcGVuQ2FuY2VsbGVyIHNvIHRoYXQgYSBsYXRlciBkYi5vcGVuKCkgaXMgZnJlc2guXG4gICAgICB9XG4gICAgICByZXR1cm4gcmVqZWN0aW9uIChlcnIpO1xuICB9KS5maW5hbGx5KCgpPT57XG4gICAgc3RhdGUub3BlbkNvbXBsZXRlID0gdHJ1ZTtcbiAgICByZXNvbHZlRGJSZWFkeSgpOyAvLyBkYlJlYWR5UHJvbWlzZSBpcyByZXNvbHZlZCBubyBtYXR0ZXIgaWYgb3BlbigpIHJlamVjdHMgb3IgcmVzb2x2ZWQuIEl0J3MganVzdCB0byB3YWtlIHVwIHdhaXRlcnMuXG4gIH0pLnRoZW4oKCk9PntcbiAgICBpZiAod2FzQ3JlYXRlZCkge1xuICAgICAgLy8gUHJvcGFnYXRlIGZ1bGwgcmFuZ2Ugb24gcHJpbWFyeSBrZXlzIGFuZCBpbmRleGVzIG9uIGFsbCB0YWJsZXMgbm93IHRoYXQgdGhlIERCIGlzIHJlYWR5IGFuZCBvcGVuZWQsXG4gICAgICAvLyBhbmQgYWxsIHVwZ3JhZGVycyBhbmQgb24oJ3JlYWR5Jykgc3Vic2NyaWJlcnMgaGF2ZSBydW4uXG4gICAgICBjb25zdCBldmVyeXRoaW5nOiBPYnNlcnZhYmlsaXR5U2V0ID0ge307XG4gICAgICBkYi50YWJsZXMuZm9yRWFjaCh0YWJsZSA9PiB7XG4gICAgICAgIHRhYmxlLnNjaGVtYS5pbmRleGVzLmZvckVhY2goaWR4ID0+IHtcbiAgICAgICAgICBpZiAoaWR4Lm5hbWUpIGV2ZXJ5dGhpbmdbYGlkYjovLyR7ZGIubmFtZX0vJHt0YWJsZS5uYW1lfS8ke2lkeC5uYW1lfWBdID0gbmV3IFJhbmdlU2V0KC1JbmZpbml0eSwgW1tbXV1dKTtcbiAgICAgICAgfSk7XG4gICAgICAgIGV2ZXJ5dGhpbmdbYGlkYjovLyR7ZGIubmFtZX0vJHt0YWJsZS5uYW1lfS9gXSA9IGV2ZXJ5dGhpbmdbYGlkYjovLyR7ZGIubmFtZX0vJHt0YWJsZS5uYW1lfS86ZGVsc2BdID0gbmV3IFJhbmdlU2V0KC1JbmZpbml0eSwgW1tbXV1dKTtcbiAgICAgIH0pO1xuICAgICAgLy8gRGF0YWJhc2Ugd2FzIGNyZWF0ZWQuIElmIGFub3RoZXIgdGFiIGhhZCBpdCBvcGVuIHdoZW4gaXQgd2FzIGRlbGV0ZWQgYW5kIHJlb3BlbmVkLCB0aGF0IHRhYiBtdXN0IGJlIHVwZGF0ZWQgbm93LlxuICAgICAgZ2xvYmFsRXZlbnRzKERFWElFX1NUT1JBR0VfTVVUQVRFRF9FVkVOVF9OQU1FKS5maXJlKGV2ZXJ5dGhpbmcpO1xuICAgICAgLy8gV2lwZSB0aGUgY2FjaGUgYW5kIHRyaWdnZXIgb3B0aW1pc3RpYyBxdWVyaWVzOlxuICAgICAgc2lnbmFsU3Vic2NyaWJlcnNOb3coZXZlcnl0aGluZywgdHJ1ZSk7XG4gICAgfVxuICAgIC8vIFJlc29sdmUgdGhlIGRiLm9wZW4oKSB3aXRoIHRoZSBkYiBpbnN0YW5jZS5cbiAgICByZXR1cm4gZGI7XG4gIH0pO1xufVxuIiwgImltcG9ydCB7IGlzQXJyYXkgfSBmcm9tICcuLi9mdW5jdGlvbnMvdXRpbHMnO1xuXG5leHBvcnQgZnVuY3Rpb24gYXdhaXRJdGVyYXRvciAoaXRlcmF0b3I6IEl0ZXJhdG9yPGFueT4pIHtcbiAgdmFyIGNhbGxOZXh0ID0gcmVzdWx0ID0+IGl0ZXJhdG9yLm5leHQocmVzdWx0KSxcbiAgICAgIGRvVGhyb3cgPSBlcnJvciA9PiBpdGVyYXRvci50aHJvdyhlcnJvciksXG4gICAgICBvblN1Y2Nlc3MgPSBzdGVwKGNhbGxOZXh0KSxcbiAgICAgIG9uRXJyb3IgPSBzdGVwKGRvVGhyb3cpO1xuXG4gIGZ1bmN0aW9uIHN0ZXAoZ2V0TmV4dDogKGFueSk9PmFueSkge1xuICAgICAgcmV0dXJuICh2YWw/KSA9PiB7XG4gICAgICAgICAgdmFyIG5leHQgPSBnZXROZXh0KHZhbCksXG4gICAgICAgICAgICAgIHZhbHVlID0gbmV4dC52YWx1ZTtcblxuICAgICAgICAgIHJldHVybiBuZXh0LmRvbmUgPyB2YWx1ZSA6XG4gICAgICAgICAgICAgICghdmFsdWUgfHwgdHlwZW9mIHZhbHVlLnRoZW4gIT09ICdmdW5jdGlvbicgP1xuICAgICAgICAgICAgICAgICAgaXNBcnJheSh2YWx1ZSkgPyBQcm9taXNlLmFsbCh2YWx1ZSkudGhlbihvblN1Y2Nlc3MsIG9uRXJyb3IpIDogb25TdWNjZXNzKHZhbHVlKSA6XG4gICAgICAgICAgICAgICAgICB2YWx1ZS50aGVuKG9uU3VjY2Vzcywgb25FcnJvcikpO1xuICAgICAgfTtcbiAgfVxuXG4gIHJldHVybiBzdGVwKGNhbGxOZXh0KSgpO1xufVxuIiwgImltcG9ydCB7IFRyYW5zYWN0aW9uTW9kZSB9IGZyb20gJy4uLy4uL3B1YmxpYy90eXBlcy90cmFuc2FjdGlvbi1tb2RlJztcbmltcG9ydCB7IGVycm5hbWVzLCBleGNlcHRpb25zIH0gZnJvbSAnLi4vLi4vZXJyb3JzJztcbmltcG9ydCB7IGZsYXR0ZW4sIGlzQXN5bmNGdW5jdGlvbiB9IGZyb20gJy4uLy4uL2Z1bmN0aW9ucy91dGlscyc7XG5pbXBvcnQgeyBEZXhpZSB9IGZyb20gJy4vZGV4aWUnO1xuaW1wb3J0IHsgVHJhbnNhY3Rpb24gfSBmcm9tICcuLi90cmFuc2FjdGlvbic7XG5pbXBvcnQgeyBhd2FpdEl0ZXJhdG9yIH0gZnJvbSAnLi4vLi4vaGVscGVycy95aWVsZC1zdXBwb3J0JztcbmltcG9ydCBQcm9taXNlLCB7XG4gIFBTRCxcbiAgTmF0aXZlUHJvbWlzZSxcbiAgZGVjcmVtZW50RXhwZWN0ZWRBd2FpdHMsXG4gIHJlamVjdGlvbixcbiAgaW5jcmVtZW50RXhwZWN0ZWRBd2FpdHNcbn0gZnJvbSAnLi4vLi4vaGVscGVycy9wcm9taXNlJztcblxuZXhwb3J0IGZ1bmN0aW9uIGV4dHJhY3RUcmFuc2FjdGlvbkFyZ3MobW9kZTogVHJhbnNhY3Rpb25Nb2RlLCBfdGFibGVBcmdzXywgc2NvcGVGdW5jKSB7XG4gIC8vIExldCB0YWJsZSBhcmd1bWVudHMgYmUgYWxsIGFyZ3VtZW50cyBiZXR3ZWVuIG1vZGUgYW5kIGxhc3QgYXJndW1lbnQuXG4gIHZhciBpID0gYXJndW1lbnRzLmxlbmd0aDtcbiAgaWYgKGkgPCAyKSB0aHJvdyBuZXcgZXhjZXB0aW9ucy5JbnZhbGlkQXJndW1lbnQoXCJUb28gZmV3IGFyZ3VtZW50c1wiKTtcbiAgLy8gUHJldmVudCBvcHRpbXphdGlvbiBraWxsZXIgKGh0dHBzOi8vZ2l0aHViLmNvbS9wZXRrYWFudG9ub3YvYmx1ZWJpcmQvd2lraS9PcHRpbWl6YXRpb24ta2lsbGVycyMzMi1sZWFraW5nLWFyZ3VtZW50cylcbiAgLy8gYW5kIGNsb25lIGFyZ3VtZW50cyBleGNlcHQgdGhlIGZpcnN0IG9uZSBpbnRvIGxvY2FsIHZhciAnYXJncycuXG4gIHZhciBhcmdzID0gbmV3IEFycmF5KGkgLSAxKTtcbiAgd2hpbGUgKC0taSkgYXJnc1tpIC0gMV0gPSBhcmd1bWVudHNbaV07XG4gIC8vIExldCBzY29wZUZ1bmMgYmUgdGhlIGxhc3QgYXJndW1lbnQgYW5kIHBvcCBpdCBzbyB0aGF0IGFyZ3Mgbm93IG9ubHkgY29udGFpbiB0aGUgdGFibGUgYXJndW1lbnRzLlxuICBzY29wZUZ1bmMgPSBhcmdzLnBvcCgpO1xuICB2YXIgdGFibGVzID0gZmxhdHRlbihhcmdzKTsgLy8gU3VwcG9ydCB1c2luZyBhcnJheSBhcyBtaWRkbGUgYXJndW1lbnQsIG9yIGEgbWl4IG9mIGFycmF5cyBhbmQgbm9uLWFycmF5cy5cbiAgcmV0dXJuIFttb2RlLCB0YWJsZXMsIHNjb3BlRnVuY107XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBlbnRlclRyYW5zYWN0aW9uU2NvcGUoXG4gIGRiOiBEZXhpZSxcbiAgbW9kZTogSURCVHJhbnNhY3Rpb25Nb2RlLFxuICBzdG9yZU5hbWVzOiBzdHJpbmdbXSxcbiAgcGFyZW50VHJhbnNhY3Rpb246IFRyYW5zYWN0aW9uIHwgdW5kZWZpbmVkLFxuICBzY29wZUZ1bmM6ICgpPT5Qcm9taXNlTGlrZTxhbnk+IHwgYW55XG4pIHtcbiAgcmV0dXJuIFByb21pc2UucmVzb2x2ZSgpLnRoZW4oKCkgPT4ge1xuICAgIC8vIEtlZXAgYSBwb2ludGVyIHRvIGxhc3Qgbm9uLXRyYW5zYWN0aW9uYWwgUFNEIHRvIHVzZSBpZiBzb21lb25lIGNhbGxzIERleGllLmlnbm9yZVRyYW5zYWN0aW9uKCkuXG4gICAgY29uc3QgdHJhbnNsZXNzID0gUFNELnRyYW5zbGVzcyB8fCBQU0Q7XG4gICAgLy8gT3VyIHRyYW5zYWN0aW9uLlxuICAgIC8vcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgICBjb25zdCB0cmFucyA9IGRiLl9jcmVhdGVUcmFuc2FjdGlvbihtb2RlLCBzdG9yZU5hbWVzLCBkYi5fZGJTY2hlbWEsIHBhcmVudFRyYW5zYWN0aW9uKTtcbiAgICB0cmFucy5leHBsaWNpdCA9IHRydWU7XG4gICAgLy8gTGV0IHRoZSB0cmFuc2FjdGlvbiBpbnN0YW5jZSBiZSBwYXJ0IG9mIGEgUHJvbWlzZS1zcGVjaWZpYyBkYXRhIChQU0QpIHZhbHVlLlxuICAgIGNvbnN0IHpvbmVQcm9wcyA9IHtcbiAgICAgIHRyYW5zOiB0cmFucyxcbiAgICAgIHRyYW5zbGVzczogdHJhbnNsZXNzXG4gICAgfTtcblxuICAgIGlmIChwYXJlbnRUcmFuc2FjdGlvbikge1xuICAgICAgLy8gRW11bGF0ZSB0cmFuc2FjdGlvbiBjb21taXQgYXdhcmVuZXNzIGZvciBpbm5lciB0cmFuc2FjdGlvbiAobXVzdCAnY29tbWl0JyB3aGVuIHRoZSBpbm5lciB0cmFuc2FjdGlvbiBoYXMgbm8gbW9yZSBvcGVyYXRpb25zIG9uZ29pbmcpXG4gICAgICB0cmFucy5pZGJ0cmFucyA9IHBhcmVudFRyYW5zYWN0aW9uLmlkYnRyYW5zO1xuICAgIH0gZWxzZSB7XG4gICAgICB0cnkge1xuICAgICAgICB0cmFucy5jcmVhdGUoKTsgLy8gQ3JlYXRlIHRoZSBuYXRpdmUgdHJhbnNhY3Rpb24gc28gdGhhdCBjb21wbGV0ZSgpIG9yIGVycm9yKCkgd2lsbCB0cmlnZ2VyIGV2ZW4gaWYgbm8gb3BlcmF0aW9uIGlzIG1hZGUgdXBvbiBpdC5cbiAgICAgICAgLy8gQHRzLWlnbm9yZSBNYXJrIHRoZSBpZGJ0cmFucyBvYmplY3Qgd2l0aCBcIl9leHBsaWNpdFwiLiBEQkNvcmUgbWlkZGxld2FyZSB3b24ndCBoYXZlIGFjY2VzcyB0byBEZXhpZSB0cmFucyBidXQgd2lsbCBuZWVkIHRvIGhhdmUgdGhpcyBpbmZvLlxuICAgICAgICB0cmFucy5pZGJ0cmFucy5fZXhwbGljaXQgPSB0cnVlO1xuICAgICAgICBkYi5fc3RhdGUuUFIxMzk4X21heExvb3AgPSAzO1xuICAgICAgfSBjYXRjaCAoZXgpIHtcbiAgICAgICAgaWYgKGV4Lm5hbWUgPT09IGVycm5hbWVzLkludmFsaWRTdGF0ZSAmJiBkYi5pc09wZW4oKSAmJiAtLWRiLl9zdGF0ZS5QUjEzOThfbWF4TG9vcCA+IDApIHtcbiAgICAgICAgICBjb25zb2xlLndhcm4oJ0RleGllOiBOZWVkIHRvIHJlb3BlbiBkYicpO1xuICAgICAgICAgIGRiLmNsb3NlKHtkaXNhYmxlQXV0b09wZW46IGZhbHNlfSk7XG4gICAgICAgICAgcmV0dXJuIGRiLm9wZW4oKS50aGVuKCgpID0+IGVudGVyVHJhbnNhY3Rpb25TY29wZShcbiAgICAgICAgICAgIGRiLFxuICAgICAgICAgICAgbW9kZSxcbiAgICAgICAgICAgIHN0b3JlTmFtZXMsXG4gICAgICAgICAgICBudWxsLFxuICAgICAgICAgICAgc2NvcGVGdW5jXG4gICAgICAgICAgKSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHJlamVjdGlvbihleCk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgLy8gU3VwcG9ydCBmb3IgbmF0aXZlIGFzeW5jIGF3YWl0LlxuICAgIGNvbnN0IHNjb3BlRnVuY0lzQXN5bmMgPSBpc0FzeW5jRnVuY3Rpb24oc2NvcGVGdW5jKTtcbiAgICBpZiAoc2NvcGVGdW5jSXNBc3luYykge1xuICAgICAgaW5jcmVtZW50RXhwZWN0ZWRBd2FpdHMoKTtcbiAgICB9XG5cbiAgICBsZXQgcmV0dXJuVmFsdWU7XG4gICAgY29uc3QgcHJvbWlzZUZvbGxvd2VkID0gUHJvbWlzZS5mb2xsb3coKCkgPT4ge1xuICAgICAgLy8gRmluYWxseSwgY2FsbCB0aGUgc2NvcGUgZnVuY3Rpb24gd2l0aCBvdXIgdGFibGUgYW5kIHRyYW5zYWN0aW9uIGFyZ3VtZW50cy5cbiAgICAgIHJldHVyblZhbHVlID0gc2NvcGVGdW5jLmNhbGwodHJhbnMsIHRyYW5zKTtcbiAgICAgIGlmIChyZXR1cm5WYWx1ZSkge1xuICAgICAgICBpZiAoc2NvcGVGdW5jSXNBc3luYykge1xuICAgICAgICAgIC8vIHNjb3BlRnVuYyBpcyBhIG5hdGl2ZSBhc3luYyBmdW5jdGlvbiAtIHdlIGtub3cgZm9yIHN1cmUgcmV0dXJuVmFsdWUgaXMgbmF0aXZlIHByb21pc2UuXG4gICAgICAgICAgdmFyIGRlY3JlbWVudG9yID0gZGVjcmVtZW50RXhwZWN0ZWRBd2FpdHMuYmluZChudWxsLCBudWxsKTtcbiAgICAgICAgICByZXR1cm5WYWx1ZS50aGVuKGRlY3JlbWVudG9yLCBkZWNyZW1lbnRvcik7XG4gICAgICAgIH0gZWxzZSBpZiAodHlwZW9mIHJldHVyblZhbHVlLm5leHQgPT09ICdmdW5jdGlvbicgJiYgdHlwZW9mIHJldHVyblZhbHVlLnRocm93ID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgLy8gc2NvcGVGdW5jIHJldHVybmVkIGFuIGl0ZXJhdG9yIHdpdGggdGhyb3ctc3VwcG9ydC4gSGFuZGxlIHlpZWxkIGFzIGF3YWl0LlxuICAgICAgICAgIHJldHVyblZhbHVlID0gYXdhaXRJdGVyYXRvcihyZXR1cm5WYWx1ZSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9LCB6b25lUHJvcHMpO1xuICAgIHJldHVybiAocmV0dXJuVmFsdWUgJiYgdHlwZW9mIHJldHVyblZhbHVlLnRoZW4gPT09ICdmdW5jdGlvbicgP1xuICAgICAgLy8gUHJvbWlzZSByZXR1cm5lZC4gVXNlciB1c2VzIHByb21pc2Utc3R5bGUgdHJhbnNhY3Rpb25zLlxuICAgICAgUHJvbWlzZS5yZXNvbHZlKHJldHVyblZhbHVlKS50aGVuKHggPT4gdHJhbnMuYWN0aXZlID9cbiAgICAgICAgeCAvLyBUcmFuc2FjdGlvbiBzdGlsbCBhY3RpdmUuIENvbnRpbnVlLlxuICAgICAgICA6IHJlamVjdGlvbihuZXcgZXhjZXB0aW9ucy5QcmVtYXR1cmVDb21taXQoXG4gICAgICAgICAgXCJUcmFuc2FjdGlvbiBjb21taXR0ZWQgdG9vIGVhcmx5LiBTZWUgaHR0cDovL2JpdC5seS8ya2Rja01uXCIpKSlcbiAgICAgIC8vIE5vIHByb21pc2UgcmV0dXJuZWQuIFdhaXQgZm9yIGFsbCBvdXRzdGFuZGluZyBwcm9taXNlcyBiZWZvcmUgY29udGludWluZy4gXG4gICAgICA6IHByb21pc2VGb2xsb3dlZC50aGVuKCgpID0+IHJldHVyblZhbHVlKVxuICAgICkudGhlbih4ID0+IHtcbiAgICAgIC8vIHN1YiB0cmFuc2FjdGlvbnMgZG9uJ3QgcmVhY3QgdG8gaWRidHJhbnMub25jb21wbGV0ZS4gV2UgbXVzdCB0cmlnZ2VyIGEgY29tcGxldGlvbjpcbiAgICAgIGlmIChwYXJlbnRUcmFuc2FjdGlvbikgdHJhbnMuX3Jlc29sdmUoKTtcbiAgICAgIC8vIHdhaXQgZm9yIHRyYW5zLl9jb21wbGV0aW9uXG4gICAgICAvLyAoaWYgcm9vdCB0cmFuc2FjdGlvbiwgdGhpcyBtZWFucyAnY29tcGxldGUnIGV2ZW50LiBJZiBzdWItdHJhbnNhY3Rpb24sIHdlJ3ZlIGp1c3QgZmlyZWQgaXQgb3Vyc2VsdmVzKVxuICAgICAgcmV0dXJuIHRyYW5zLl9jb21wbGV0aW9uLnRoZW4oKCkgPT4geCk7XG4gICAgfSkuY2F0Y2goZSA9PiB7XG4gICAgICB0cmFucy5fcmVqZWN0KGUpOyAvLyBZZXMsIGFib3ZlIHRoZW4taGFuZGxlciB3ZXJlIG1heWJlIG5vdCBjYWxsZWQgYmVjYXVzZSBvZiBhbiB1bmhhbmRsZWQgcmVqZWN0aW9uIGluIHNjb3BlRnVuYyFcbiAgICAgIHJldHVybiByZWplY3Rpb24oZSk7XG4gICAgfSk7XG4gIH0pO1xufVxuIiwgImltcG9ydCB7XG4gIERCQ29yZSxcbiAgREJDb3JlSW5kZXgsXG4gIERCQ29yZUtleVJhbmdlLFxuICBEQkNvcmVRdWVyeVJlcXVlc3QsXG4gIERCQ29yZVJhbmdlVHlwZSxcbiAgREJDb3JlT3BlbkN1cnNvclJlcXVlc3QsXG4gIERCQ29yZUNvdW50UmVxdWVzdCxcbiAgREJDb3JlQ3Vyc29yLFxuICBEQkNvcmVUYWJsZSxcbn0gZnJvbSBcIi4uL3B1YmxpYy90eXBlcy9kYmNvcmVcIjtcbmltcG9ydCB7IGlzQXJyYXkgfSBmcm9tICcuLi9mdW5jdGlvbnMvdXRpbHMnO1xuaW1wb3J0IHsgZ2V0S2V5RXh0cmFjdG9yIH0gZnJvbSAnLi9nZXQta2V5LWV4dHJhY3Rvcic7XG5pbXBvcnQgeyBnZXRLZXlQYXRoQWxpYXMgfSBmcm9tICcuL2RiY29yZS1pbmRleGVkZGInO1xuaW1wb3J0IHsgTWlkZGxld2FyZSB9IGZyb20gJy4uL3B1YmxpYy90eXBlcy9taWRkbGV3YXJlJztcblxuaW50ZXJmYWNlIFZpcnR1YWxJbmRleCBleHRlbmRzIERCQ29yZUluZGV4IHtcbiAgLyoqIFRydWUgaWYgdGhpcyBpbmRleCBpcyB2aXJ0dWFsLCBpLmUuIHJlcHJlc2VudHMgYSBjb21wb3VuZCBpbmRleCBpbnRlcm5hbGx5LFxuICAgKiBidXQgbWFrZXMgaXQgYWN0IGFzIGFzIGhhdmluZyBhIHN1YnNldCBvZiBpdHMga2V5UGF0aHMuXG4gICAqL1xuICBpc1ZpcnR1YWw6IGJvb2xlYW47XG5cbiAgLyoqIE51bWJlciBvZiBrZXlwYXRocyB0aGF0IHRoaXMgaW5kZXggY29tcHJpc2VzLiBDYW4gYmUgMC4uTi5cbiAgICogTm90ZTogVGhpcyBpcyB0aGUgbGVuZ3RoIG9mIHRoZSAqdmlydHVhbCBpbmRleCosIG5vdCB0aGUgcmVhbCBpbmRleC5cbiAgICovXG4gIGtleUxlbmd0aDogbnVtYmVyO1xuXG4gIC8qKiBOdW1iZXIgb2YgcG9wcGVkIGtleXBhdGhzIGZyb20gdGhlIHJlYWwgaW5kZXguXG4gICAqL1xuICBrZXlUYWlsOiBudW1iZXI7XG5cbiAgLyoqIExvd0xldmVsSW5kZXggcmVwcmVzZW50cyB0aGUgYWN0dWFsIEluZGV4ZWREQiBpbmRleCBiZWhpbmQgaXQgKi9cbiAgbG93TGV2ZWxJbmRleDogREJDb3JlSW5kZXg7XG59XG5cbi8vIE1vdmUgaW50byBzb21lIHV0aWw6XG5leHBvcnQgZnVuY3Rpb24gcGFkIChhOiBhbnkgfCBhbnlbXSwgdmFsdWU6IGFueSwgY291bnQ6IG51bWJlcikge1xuICBjb25zdCByZXN1bHQgPSBpc0FycmF5KGEpID8gYS5zbGljZSgpIDogW2FdO1xuICBmb3IgKGxldCBpPTA7IGk8Y291bnQ7ICsraSkgcmVzdWx0LnB1c2godmFsdWUpO1xuICByZXR1cm4gcmVzdWx0O1xufVxuXG5cbmV4cG9ydCBmdW5jdGlvbiBjcmVhdGVWaXJ0dWFsSW5kZXhNaWRkbGV3YXJlIChkb3duOiBEQkNvcmUpIDogREJDb3JlIHtcbiAgcmV0dXJuIHtcbiAgICAuLi5kb3duLFxuICAgIHRhYmxlKHRhYmxlTmFtZTogc3RyaW5nKSB7XG4gICAgICBjb25zdCB0YWJsZSA9IGRvd24udGFibGUodGFibGVOYW1lKTtcbiAgICAgIGNvbnN0IHtzY2hlbWF9ID0gdGFibGU7XG4gICAgICBjb25zdCBpbmRleExvb2t1cDoge1tpbmRleEFsaWFzOiBzdHJpbmddOiBWaXJ0dWFsSW5kZXhbXX0gPSB7fTtcbiAgICAgIGNvbnN0IGFsbFZpcnR1YWxJbmRleGVzOiBWaXJ0dWFsSW5kZXhbXSA9IFtdO1xuXG4gICAgICBmdW5jdGlvbiBhZGRWaXJ0dWFsSW5kZXhlcyAoa2V5UGF0aDogbnVsbCB8IHN0cmluZyB8IHN0cmluZ1tdLCBrZXlUYWlsOiBudW1iZXIsIGxvd0xldmVsSW5kZXg6IERCQ29yZUluZGV4KTogVmlydHVhbEluZGV4IHtcbiAgICAgICAgY29uc3Qga2V5UGF0aEFsaWFzID0gZ2V0S2V5UGF0aEFsaWFzKGtleVBhdGgpO1xuICAgICAgICBjb25zdCBpbmRleExpc3QgPSAoaW5kZXhMb29rdXBba2V5UGF0aEFsaWFzXSA9IGluZGV4TG9va3VwW2tleVBhdGhBbGlhc10gfHwgW10pO1xuICAgICAgICBjb25zdCBrZXlMZW5ndGggPSBrZXlQYXRoID09IG51bGwgPyAwOiB0eXBlb2Yga2V5UGF0aCA9PT0gJ3N0cmluZycgPyAxIDoga2V5UGF0aC5sZW5ndGg7XG4gICAgICAgIGNvbnN0IGlzVmlydHVhbCA9IGtleVRhaWwgPiAwO1xuICAgICAgICBjb25zdCB2aXJ0dWFsSW5kZXggPSB7XG4gICAgICAgICAgLi4ubG93TGV2ZWxJbmRleCxcbiAgICAgICAgICBuYW1lOiBpc1ZpcnR1YWxcbiAgICAgICAgICAgID8gYCR7a2V5UGF0aEFsaWFzfSh2aXJ0dWFsLWZyb206JHtsb3dMZXZlbEluZGV4Lm5hbWV9KWBcbiAgICAgICAgICAgIDogbG93TGV2ZWxJbmRleC5uYW1lLFxuICAgICAgICAgIGxvd0xldmVsSW5kZXgsXG4gICAgICAgICAgaXNWaXJ0dWFsLFxuICAgICAgICAgIGtleVRhaWwsXG4gICAgICAgICAga2V5TGVuZ3RoLFxuICAgICAgICAgIGV4dHJhY3RLZXk6IGdldEtleUV4dHJhY3RvcihrZXlQYXRoKSxcbiAgICAgICAgICB1bmlxdWU6ICFpc1ZpcnR1YWwgJiYgbG93TGV2ZWxJbmRleC51bmlxdWVcbiAgICAgICAgfTtcbiAgICAgICAgaW5kZXhMaXN0LnB1c2godmlydHVhbEluZGV4KTtcbiAgICAgICAgaWYgKCF2aXJ0dWFsSW5kZXguaXNQcmltYXJ5S2V5KSB7XG4gICAgICAgICAgYWxsVmlydHVhbEluZGV4ZXMucHVzaCh2aXJ0dWFsSW5kZXgpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChrZXlMZW5ndGggPiAxKSB7XG4gICAgICAgICAgY29uc3QgdmlydHVhbEtleVBhdGggPSBrZXlMZW5ndGggPT09IDIgP1xuICAgICAgICAgICAga2V5UGF0aFswXSA6IC8vIFRoaXMgaXMgYSBjb21wb3VuZCBbYSwgYl0uIEFkZCBhIHZpcnR1YWwgbm9ybWFsIGluZGV4IGEuXG4gICAgICAgICAgICBrZXlQYXRoLnNsaWNlKDAsIGtleUxlbmd0aCAtIDEpOyAvLyBUaGlzIGlzIGNvbXBvdW5kIFthLGIsY10uIEFkZCB2aXJ0dWFsIGNvbXBvdW5kIFthLGJdLlxuICAgICAgICAgIGFkZFZpcnR1YWxJbmRleGVzKHZpcnR1YWxLZXlQYXRoLCBrZXlUYWlsICsgMSwgbG93TGV2ZWxJbmRleCk7XG4gICAgICAgIH1cbiAgICAgICAgaW5kZXhMaXN0LnNvcnQoKGEsYikgPT4gYS5rZXlUYWlsIC0gYi5rZXlUYWlsKTsgLy8gU2hvcnRlc3Qga2V5VGFpbCBpcyB0aGUgYmVzdCBvbmUgKHJlcHJlc2VudHMgcmVhbCBpbmRleClcbiAgICAgICAgcmV0dXJuIHZpcnR1YWxJbmRleDtcbiAgICAgIH1cbiAgICBcbiAgICAgIGNvbnN0IHByaW1hcnlLZXkgPSBhZGRWaXJ0dWFsSW5kZXhlcyhzY2hlbWEucHJpbWFyeUtleS5rZXlQYXRoLCAwLCBzY2hlbWEucHJpbWFyeUtleSk7XG4gICAgICBpbmRleExvb2t1cFtcIjppZFwiXSA9IFtwcmltYXJ5S2V5XTtcbiAgICAgIGZvciAoY29uc3QgaW5kZXggb2Ygc2NoZW1hLmluZGV4ZXMpIHtcbiAgICAgICAgYWRkVmlydHVhbEluZGV4ZXMoaW5kZXgua2V5UGF0aCwgMCwgaW5kZXgpO1xuICAgICAgfVxuICAgIFxuICAgICAgZnVuY3Rpb24gZmluZEJlc3RJbmRleChrZXlQYXRoOiBudWxsIHwgc3RyaW5nIHwgc3RyaW5nW10pOiBWaXJ0dWFsSW5kZXgge1xuICAgICAgICBjb25zdCByZXN1bHQgPSBpbmRleExvb2t1cFtnZXRLZXlQYXRoQWxpYXMoa2V5UGF0aCldO1xuICAgICAgICByZXR1cm4gcmVzdWx0ICYmIHJlc3VsdFswXTtcbiAgICAgIH1cbiAgICBcbiAgICAgIGZ1bmN0aW9uIHRyYW5zbGF0ZVJhbmdlIChyYW5nZTogREJDb3JlS2V5UmFuZ2UsIGtleVRhaWw6IG51bWJlcik6IERCQ29yZUtleVJhbmdlIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICB0eXBlOiByYW5nZS50eXBlID09PSBEQkNvcmVSYW5nZVR5cGUuRXF1YWwgP1xuICAgICAgICAgICAgREJDb3JlUmFuZ2VUeXBlLlJhbmdlIDpcbiAgICAgICAgICAgIHJhbmdlLnR5cGUsXG4gICAgICAgICAgbG93ZXI6IHBhZChyYW5nZS5sb3dlciwgcmFuZ2UubG93ZXJPcGVuID8gZG93bi5NQVhfS0VZIDogZG93bi5NSU5fS0VZLCBrZXlUYWlsKSxcbiAgICAgICAgICBsb3dlck9wZW46IHRydWUsIC8vIGRvZXNuJ3QgbWF0dGVyIHRydWUgb3IgZmFsc2VcbiAgICAgICAgICB1cHBlcjogcGFkKHJhbmdlLnVwcGVyLCByYW5nZS51cHBlck9wZW4gPyBkb3duLk1JTl9LRVkgOiBkb3duLk1BWF9LRVksIGtleVRhaWwpLFxuICAgICAgICAgIHVwcGVyT3BlbjogdHJ1ZSAvLyBkb2Vzbid0IG1hdHRlciB0cnVlIG9yIGZhbHNlXG4gICAgICAgIH07XG4gICAgICB9XG4gICAgXG4gICAgICBmdW5jdGlvbiB0cmFuc2xhdGVSZXF1ZXN0IChyZXE6IERCQ29yZVF1ZXJ5UmVxdWVzdCk6IERCQ29yZVF1ZXJ5UmVxdWVzdDtcbiAgICAgIGZ1bmN0aW9uIHRyYW5zbGF0ZVJlcXVlc3QgKHJlcTogREJDb3JlT3BlbkN1cnNvclJlcXVlc3QpOiBEQkNvcmVPcGVuQ3Vyc29yUmVxdWVzdDtcbiAgICAgIGZ1bmN0aW9uIHRyYW5zbGF0ZVJlcXVlc3QgKHJlcTogREJDb3JlQ291bnRSZXF1ZXN0KTogREJDb3JlQ291bnRSZXF1ZXN0IHtcbiAgICAgICAgY29uc3QgaW5kZXggPSByZXEucXVlcnkuaW5kZXggYXMgVmlydHVhbEluZGV4O1xuICAgICAgICByZXR1cm4gaW5kZXguaXNWaXJ0dWFsID8ge1xuICAgICAgICAgIC4uLnJlcSxcbiAgICAgICAgICBxdWVyeToge1xuICAgICAgICAgICAgaW5kZXg6IGluZGV4Lmxvd0xldmVsSW5kZXgsXG4gICAgICAgICAgICByYW5nZTogdHJhbnNsYXRlUmFuZ2UocmVxLnF1ZXJ5LnJhbmdlLCBpbmRleC5rZXlUYWlsKVxuICAgICAgICAgIH1cbiAgICAgICAgfSA6IHJlcTtcbiAgICAgIH1cbiAgICBcbiAgICAgIGNvbnN0IHJlc3VsdDogREJDb3JlVGFibGUgPSB7XG4gICAgICAgIC4uLnRhYmxlLFxuICAgICAgICBzY2hlbWE6IHtcbiAgICAgICAgICAuLi5zY2hlbWEsXG4gICAgICAgICAgcHJpbWFyeUtleSxcbiAgICAgICAgICBpbmRleGVzOiBhbGxWaXJ0dWFsSW5kZXhlcyxcbiAgICAgICAgICBnZXRJbmRleEJ5S2V5UGF0aDogZmluZEJlc3RJbmRleFxuICAgICAgICB9LFxuXG4gICAgICAgIGNvdW50KHJlcSkge1xuICAgICAgICAgIHJldHVybiB0YWJsZS5jb3VudCh0cmFuc2xhdGVSZXF1ZXN0KHJlcSkpO1xuICAgICAgICB9LCAgICBcbiAgICBcbiAgICAgICAgcXVlcnkocmVxKSB7XG4gICAgICAgICAgcmV0dXJuIHRhYmxlLnF1ZXJ5KHRyYW5zbGF0ZVJlcXVlc3QocmVxKSk7XG4gICAgICAgIH0sXG4gICAgXG4gICAgICAgIG9wZW5DdXJzb3IocmVxKSB7XG4gICAgICAgICAgY29uc3Qge2tleVRhaWwsIGlzVmlydHVhbCwga2V5TGVuZ3RofSA9IChyZXEucXVlcnkuaW5kZXggYXMgVmlydHVhbEluZGV4KTtcbiAgICAgICAgICBpZiAoIWlzVmlydHVhbCkgcmV0dXJuIHRhYmxlLm9wZW5DdXJzb3IocmVxKTtcbiAgICBcbiAgICAgICAgICBmdW5jdGlvbiBjcmVhdGVWaXJ0dWFsQ3Vyc29yKGN1cnNvcjogREJDb3JlQ3Vyc29yKSA6IERCQ29yZUN1cnNvciB7XG4gICAgICAgICAgICBmdW5jdGlvbiBfY29udGludWUgKGtleT86IGFueSkge1xuICAgICAgICAgICAgICBrZXkgIT0gbnVsbCA/XG4gICAgICAgICAgICAgICAgY3Vyc29yLmNvbnRpbnVlKHBhZChrZXksIHJlcS5yZXZlcnNlID8gZG93bi5NQVhfS0VZIDogZG93bi5NSU5fS0VZLCBrZXlUYWlsKSkgOlxuICAgICAgICAgICAgICAgIHJlcS51bmlxdWUgP1xuICAgICAgICAgICAgICAgICAgY3Vyc29yLmNvbnRpbnVlKFxuICAgICAgICAgICAgICAgICAgICBjdXJzb3Iua2V5LnNsaWNlKDAsIGtleUxlbmd0aClcbiAgICAgICAgICAgICAgICAgICAgICAuY29uY2F0KHJlcS5yZXZlcnNlXG4gICAgICAgICAgICAgICAgICAgICAgICA/IGRvd24uTUlOX0tFWVxuICAgICAgICAgICAgICAgICAgICAgICAgOiBkb3duLk1BWF9LRVksIGtleVRhaWwpXG4gICAgICAgICAgICAgICAgICApIDpcbiAgICAgICAgICAgICAgICAgIGN1cnNvci5jb250aW51ZSgpXG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjb25zdCB2aXJ0dWFsQ3Vyc29yID0gT2JqZWN0LmNyZWF0ZShjdXJzb3IsIHtcbiAgICAgICAgICAgICAgY29udGludWU6IHt2YWx1ZTogX2NvbnRpbnVlfSxcbiAgICAgICAgICAgICAgY29udGludWVQcmltYXJ5S2V5OiB7XG4gICAgICAgICAgICAgICAgdmFsdWUoa2V5OiBhbnksIHByaW1hcnlLZXk6IGFueSkge1xuICAgICAgICAgICAgICAgICAgY3Vyc29yLmNvbnRpbnVlUHJpbWFyeUtleShwYWQoa2V5LCBkb3duLk1BWF9LRVksIGtleVRhaWwpLCBwcmltYXJ5S2V5KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgIHByaW1hcnlLZXk6IHtcbiAgICAgICAgICAgICAgICBnZXQoKSB7XG4gICAgICAgICAgICAgICAgICByZXR1cm4gY3Vyc29yLnByaW1hcnlLZXk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICBrZXk6IHtcbiAgICAgICAgICAgICAgICBnZXQoKSB7XG4gICAgICAgICAgICAgICAgICBjb25zdCBrZXkgPSBjdXJzb3Iua2V5IGFzIGFueVtdOyAvLyBBIHZpcnR1YWwgY3Vyc29yIGFsd2F5cyBvcGVyYXRlcyBvbiBjb21wb3VuZCBrZXlcbiAgICAgICAgICAgICAgICAgIHJldHVybiBrZXlMZW5ndGggPT09IDEgP1xuICAgICAgICAgICAgICAgICAgICBrZXlbMF0gOiAvLyBDdXJzb3Iua2V5IHNob3VsZCBub3QgYmUgYW4gYXJyYXkuXG4gICAgICAgICAgICAgICAgICAgIGtleS5zbGljZSgwLCBrZXlMZW5ndGgpOyAvLyBDdXJzb3Iua2V5IHNob3VsZCBiZSBmaXJzdCBwYXJ0IG9mIGFycmF5LlxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgdmFsdWU6IHtcbiAgICAgICAgICAgICAgICBnZXQoKSB7XG4gICAgICAgICAgICAgICAgICByZXR1cm4gY3Vyc29yLnZhbHVlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICByZXR1cm4gdmlydHVhbEN1cnNvcjtcbiAgICAgICAgICB9XG4gICAgXG4gICAgICAgICAgcmV0dXJuIHRhYmxlLm9wZW5DdXJzb3IodHJhbnNsYXRlUmVxdWVzdChyZXEpKVxuICAgICAgICAgICAgLnRoZW4oY3Vyc29yID0+IGN1cnNvciAmJiBjcmVhdGVWaXJ0dWFsQ3Vyc29yKGN1cnNvcikpO1xuICAgICAgICB9XG4gICAgICB9O1xuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG4gIH1cbn1cblxuZXhwb3J0IGNvbnN0IHZpcnR1YWxJbmRleE1pZGRsZXdhcmUgOiBNaWRkbGV3YXJlPERCQ29yZT4gPSB7XG4gIHN0YWNrOiBcImRiY29yZVwiLFxuICBuYW1lOiBcIlZpcnR1YWxJbmRleE1pZGRsZXdhcmVcIixcbiAgbGV2ZWw6IDEsXG4gIGNyZWF0ZTogY3JlYXRlVmlydHVhbEluZGV4TWlkZGxld2FyZVxufTtcblxuIiwgImltcG9ydCB7IGtleXMsIGhhc093biwgdG9TdHJpbmdUYWcgfSBmcm9tICcuL3V0aWxzJztcblxuZXhwb3J0IGZ1bmN0aW9uIGdldE9iamVjdERpZmYoYTogYW55LCBiOiBhbnksIHJ2PzogYW55LCBwcmZ4Pzogc3RyaW5nKSB7XG4gIC8vIENvbXBhcmVzIG9iamVjdHMgYSBhbmQgYiBhbmQgcHJvZHVjZXMgYSBkaWZmIG9iamVjdC5cbiAgcnYgPSBydiB8fCB7fTtcbiAgcHJmeCA9IHByZnggfHwgJyc7XG4gIGtleXMoYSkuZm9yRWFjaCgocHJvcCkgPT4ge1xuICAgIGlmICghaGFzT3duKGIsIHByb3ApKSB7XG4gICAgICAvLyBQcm9wZXJ0eSByZW1vdmVkXG4gICAgICBydltwcmZ4ICsgcHJvcF0gPSB1bmRlZmluZWQ7XG4gICAgfSBlbHNlIHtcbiAgICAgIHZhciBhcCA9IGFbcHJvcF0sXG4gICAgICAgIGJwID0gYltwcm9wXTtcbiAgICAgIGlmICh0eXBlb2YgYXAgPT09ICdvYmplY3QnICYmIHR5cGVvZiBicCA9PT0gJ29iamVjdCcgJiYgYXAgJiYgYnApIHtcbiAgICAgICAgY29uc3QgYXBUeXBlTmFtZSA9IHRvU3RyaW5nVGFnKGFwKTtcbiAgICAgICAgY29uc3QgYnBUeXBlTmFtZSA9IHRvU3RyaW5nVGFnKGJwKTtcblxuICAgICAgICBpZiAoYXBUeXBlTmFtZSAhPT0gYnBUeXBlTmFtZSkge1xuICAgICAgICAgIHJ2W3ByZnggKyBwcm9wXSA9IGJbcHJvcF07IC8vIFByb3BlcnR5IGNoYW5nZWQgdG8gb3RoZXIgdHlwZVxuICAgICAgICB9IGVsc2UgaWYgKGFwVHlwZU5hbWUgPT09ICdPYmplY3QnKSB7XG4gICAgICAgICAgLy8gUG9qbyBvYmplY3RzIChub3QgRGF0ZSwgQXJyYXlCdWZmZXIsIEFycmF5IGV0YykuIEdvIGRlZXAuXG4gICAgICAgICAgZ2V0T2JqZWN0RGlmZihhcCwgYnAsIHJ2LCBwcmZ4ICsgcHJvcCArICcuJyk7XG4gICAgICAgIH0gZWxzZSBpZiAoYXAgIT09IGJwKSB7XG4gICAgICAgICAgLy8gVmFsdWVzIGRpZmZlci5cbiAgICAgICAgICAvLyBDb3VsZCBoYXZlIGNoZWNrZWQgaWYgRGF0ZSwgYXJyYXlzIG9yIGJpbmFyeSB0eXBlcyBoYXZlIHNhbWVcbiAgICAgICAgICAvLyBjb250ZW50IGhlcmUgYnV0IEkgdGhpbmsgdGhhdCB3b3VsZCBiZSBhIHN1Ym9wdGltYXRpb24uXG4gICAgICAgICAgLy8gUHJlZmVyIHNpbXBsaWNpdHkuXG4gICAgICAgICAgcnZbcHJmeCArIHByb3BdID0gYltwcm9wXTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIGlmIChhcCAhPT0gYnApIHJ2W3ByZnggKyBwcm9wXSA9IGJbcHJvcF07IC8vIFByaW1pdGl2ZSB2YWx1ZSBjaGFuZ2VkXG4gICAgfVxuICB9KTtcbiAga2V5cyhiKS5mb3JFYWNoKChwcm9wKSA9PiB7XG4gICAgaWYgKCFoYXNPd24oYSwgcHJvcCkpIHtcbiAgICAgIHJ2W3ByZnggKyBwcm9wXSA9IGJbcHJvcF07IC8vIFByb3BlcnR5IGFkZGVkXG4gICAgfVxuICB9KTtcbiAgcmV0dXJuIHJ2O1xufVxuIiwgImltcG9ydCB7XG4gIERCQ29yZUFkZFJlcXVlc3QsXG4gIERCQ29yZVB1dFJlcXVlc3QsXG4gIERCQ29yZURlbGV0ZVJlcXVlc3QsXG4gIERCQ29yZUluZGV4LFxuICBEQkNvcmVUYWJsZSxcbn0gZnJvbSBcIi4uL3B1YmxpYy90eXBlcy9kYmNvcmVcIjtcblxuZXhwb3J0IGZ1bmN0aW9uIGdldEVmZmVjdGl2ZUtleXMgKFxuICBwcmltYXJ5S2V5OiBEQkNvcmVJbmRleCxcbiAgcmVxOiAoUGljazxEQkNvcmVBZGRSZXF1ZXN0IHwgREJDb3JlUHV0UmVxdWVzdCwgXCJ0eXBlXCIgfCBcInZhbHVlc1wiPiAmIHtrZXlzPzogYW55W119KSB8IFBpY2s8REJDb3JlRGVsZXRlUmVxdWVzdCwgXCJrZXlzXCIgfCBcInR5cGVcIj4pXG57XG4gIC8vY29uc3Qge291dGJvdW5kfSA9IHByaW1hcnlLZXk7XG4gIGlmIChyZXEudHlwZSA9PT0gJ2RlbGV0ZScpIHJldHVybiByZXEua2V5cztcbiAgcmV0dXJuIHJlcS5rZXlzIHx8IHJlcS52YWx1ZXMubWFwKHByaW1hcnlLZXkuZXh0cmFjdEtleSlcbn1cbiIsICJpbXBvcnQge1xuICBEQkNvcmUsXG4gIERCQ29yZVRhYmxlLFxuICBEQkNvcmVNdXRhdGVSZXNwb25zZSxcbiAgREJDb3JlRGVsZXRlUmFuZ2VSZXF1ZXN0LFxuICBEQkNvcmVBZGRSZXF1ZXN0LFxuICBEQkNvcmVQdXRSZXF1ZXN0LFxuICBEQkNvcmVEZWxldGVSZXF1ZXN0LFxuICBEQkNvcmVUcmFuc2FjdGlvbixcbiAgREJDb3JlS2V5UmFuZ2Vcbn0gZnJvbSBcIi4uL3B1YmxpYy90eXBlcy9kYmNvcmVcIjtcbmltcG9ydCB7IG5vcCB9IGZyb20gJy4uL2Z1bmN0aW9ucy9jaGFpbmluZy1mdW5jdGlvbnMnO1xuaW1wb3J0IHsgaGFzT3duLCBzZXRCeUtleVBhdGggfSBmcm9tICcuLi9mdW5jdGlvbnMvdXRpbHMnO1xuaW1wb3J0IHsgZ2V0T2JqZWN0RGlmZiB9IGZyb20gXCIuLi9mdW5jdGlvbnMvZ2V0LW9iamVjdC1kaWZmXCI7XG5pbXBvcnQgeyBQU0QgfSBmcm9tICcuLi9oZWxwZXJzL3Byb21pc2UnO1xuLy9pbXBvcnQgeyBMb2NrYWJsZVRhYmxlTWlkZGxld2FyZSB9IGZyb20gJy4uL2RiY29yZS9sb2NrYWJsZS10YWJsZS1taWRkbGV3YXJlJztcbmltcG9ydCB7IGdldEVmZmVjdGl2ZUtleXMgfSBmcm9tICcuLi9kYmNvcmUvZ2V0LWVmZmVjdGl2ZS1rZXlzJztcbmltcG9ydCB7IE1pZGRsZXdhcmUgfSBmcm9tICcuLi9wdWJsaWMvdHlwZXMvbWlkZGxld2FyZSc7XG5pbXBvcnQgeyBUcmFuc2FjdGlvbiB9IGZyb20gJy4uL2NsYXNzZXMvdHJhbnNhY3Rpb24nO1xuXG5leHBvcnQgY29uc3QgaG9va3NNaWRkbGV3YXJlOiBNaWRkbGV3YXJlPERCQ29yZT4gID0ge1xuICBzdGFjazogXCJkYmNvcmVcIixcbiAgbmFtZTogXCJIb29rc01pZGRsZXdhcmVcIixcbiAgbGV2ZWw6IDIsXG4gIGNyZWF0ZTogKGRvd25Db3JlOiBEQkNvcmUpID0+ICh7XG4gICAgLi4uZG93bkNvcmUsXG4gICAgdGFibGUodGFibGVOYW1lOiBzdHJpbmcpIHtcbiAgICAgIGNvbnN0IGRvd25UYWJsZSA9IGRvd25Db3JlLnRhYmxlKHRhYmxlTmFtZSk7XG4gICAgICBjb25zdCB7cHJpbWFyeUtleX0gPSBkb3duVGFibGUuc2NoZW1hO1xuICBcbiAgICAgIGNvbnN0IHRhYmxlTWlkZGxld2FyZTogREJDb3JlVGFibGUgPSB7XG4gICAgICAgIC4uLmRvd25UYWJsZSxcbiAgICAgICAgbXV0YXRlKHJlcSk6UHJvbWlzZTxEQkNvcmVNdXRhdGVSZXNwb25zZT4ge1xuICAgICAgICAgIGNvbnN0IGR4VHJhbnMgPSBQU0QudHJhbnMgYXMgVHJhbnNhY3Rpb247XG4gICAgICAgICAgLy8gSG9va3MgY2FuIGJlIHRyYW5zYWN0aW9uLWJvdW5kLiBOZWVkIHRvIGdyYWIgdGhlbSBmcm9tIHRyYW5zYWN0aW9uLnRhYmxlIGFuZCBub3RcbiAgICAgICAgICAvLyBkYi50YWJsZSFcbiAgICAgICAgICBjb25zdCB7ZGVsZXRpbmcsIGNyZWF0aW5nLCB1cGRhdGluZ30gPSBkeFRyYW5zLnRhYmxlKHRhYmxlTmFtZSkuaG9vaztcbiAgICAgICAgICBzd2l0Y2ggKHJlcS50eXBlKSB7XG4gICAgICAgICAgICBjYXNlICdhZGQnOlxuICAgICAgICAgICAgICBpZiAoY3JlYXRpbmcuZmlyZSA9PT0gbm9wKSBicmVhaztcbiAgICAgICAgICAgICAgcmV0dXJuIGR4VHJhbnMuX3Byb21pc2UoJ3JlYWR3cml0ZScsICgpPT5hZGRQdXRPckRlbGV0ZShyZXEpLCB0cnVlKTtcbiAgICAgICAgICAgIGNhc2UgJ3B1dCc6XG4gICAgICAgICAgICAgIGlmIChjcmVhdGluZy5maXJlID09PSBub3AgJiYgdXBkYXRpbmcuZmlyZSA9PT0gbm9wKSBicmVhaztcbiAgICAgICAgICAgICAgcmV0dXJuIGR4VHJhbnMuX3Byb21pc2UoJ3JlYWR3cml0ZScsICgpPT5hZGRQdXRPckRlbGV0ZShyZXEpLCB0cnVlKTtcbiAgICAgICAgICAgIGNhc2UgJ2RlbGV0ZSc6XG4gICAgICAgICAgICAgIGlmIChkZWxldGluZy5maXJlID09PSBub3ApIGJyZWFrO1xuICAgICAgICAgICAgICByZXR1cm4gZHhUcmFucy5fcHJvbWlzZSgncmVhZHdyaXRlJywgKCk9PmFkZFB1dE9yRGVsZXRlKHJlcSksIHRydWUpO1xuICAgICAgICAgICAgY2FzZSAnZGVsZXRlUmFuZ2UnOlxuICAgICAgICAgICAgICBpZiAoZGVsZXRpbmcuZmlyZSA9PT0gbm9wKSBicmVhaztcbiAgICAgICAgICAgICAgcmV0dXJuIGR4VHJhbnMuX3Byb21pc2UoJ3JlYWR3cml0ZScsICgpPT5kZWxldGVSYW5nZShyZXEpLCB0cnVlKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgLy8gQW55IG9mIHRoZSBicmVha3MgYWJvdmUgaGFwcGVuZWQgKG5vIGhvb2tzKSAtIGRvIHRoZSBkZWZhdWx0OlxuICAgICAgICAgIHJldHVybiBkb3duVGFibGUubXV0YXRlKHJlcSk7XG5cblxuICAgICAgICAgIGZ1bmN0aW9uIGFkZFB1dE9yRGVsZXRlKHJlcTogREJDb3JlQWRkUmVxdWVzdCB8IERCQ29yZVB1dFJlcXVlc3QgfCBEQkNvcmVEZWxldGVSZXF1ZXN0KTogUHJvbWlzZTxEQkNvcmVNdXRhdGVSZXNwb25zZT4ge1xuICAgICAgICAgICAgY29uc3QgZHhUcmFucyA9IFBTRC50cmFucztcbiAgICAgICAgICAgIGNvbnN0IGtleXMgPSByZXEua2V5cyB8fCBnZXRFZmZlY3RpdmVLZXlzKHByaW1hcnlLZXksIHJlcSk7XG4gICAgICAgICAgICBpZiAoIWtleXMpIHRocm93IG5ldyBFcnJvcihcIktleXMgbWlzc2luZ1wiKTtcbiAgICAgICAgICAgIC8vIENsb25lIFJlcXVlc3QgYW5kIHNldCBrZXlzIGFyZ1xuICAgICAgICAgICAgcmVxID0gcmVxLnR5cGUgPT09ICdhZGQnIHx8IHJlcS50eXBlID09PSAncHV0JyA/XG4gICAgICAgICAgICAgIHsuLi5yZXEsIGtleXN9IDpcbiAgICAgICAgICAgICAgey4uLnJlcX07XG4gICAgICAgICAgICBpZiAocmVxLnR5cGUgIT09ICdkZWxldGUnKSByZXEudmFsdWVzID0gWy4uLnJlcS52YWx1ZXNdO1xuICAgICAgICAgICAgaWYgKHJlcS5rZXlzKSByZXEua2V5cyA9IFsuLi5yZXEua2V5c107XG4gIFxuICAgICAgICAgICAgcmV0dXJuIGdldEV4aXN0aW5nVmFsdWVzKGRvd25UYWJsZSwgcmVxLCBrZXlzKS50aGVuIChleGlzdGluZ1ZhbHVlcyA9PiB7XG4gICAgICAgICAgICAgIGNvbnN0IGNvbnRleHRzID0ga2V5cy5tYXAoKGtleSwgaSkgPT4ge1xuICAgICAgICAgICAgICAgIGNvbnN0IGV4aXN0aW5nVmFsdWUgPSBleGlzdGluZ1ZhbHVlc1tpXTtcbiAgICAgICAgICAgICAgICBjb25zdCBjdHggPSB7IG9uZXJyb3I6IG51bGwsIG9uc3VjY2VzczogbnVsbCB9O1xuICAgICAgICAgICAgICAgIGlmIChyZXEudHlwZSA9PT0gJ2RlbGV0ZScpIHtcbiAgICAgICAgICAgICAgICAgIC8vIGRlbGV0ZSBvcGVyYXRpb25cbiAgICAgICAgICAgICAgICAgIGRlbGV0aW5nLmZpcmUuY2FsbChjdHgsIGtleSwgZXhpc3RpbmdWYWx1ZSwgZHhUcmFucyk7XG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmIChyZXEudHlwZSA9PT0gJ2FkZCcgfHwgZXhpc3RpbmdWYWx1ZSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgICAvLyBUaGUgYWRkKCkgb3IgcHV0KCkgcmVzdWx0ZWQgaW4gYSBjcmVhdGVcbiAgICAgICAgICAgICAgICAgIGNvbnN0IGdlbmVyYXRlZFByaW1hcnlLZXkgPSBjcmVhdGluZy5maXJlLmNhbGwoY3R4LCBrZXksIHJlcS52YWx1ZXNbaV0sIGR4VHJhbnMpO1xuICAgICAgICAgICAgICAgICAgaWYgKGtleSA9PSBudWxsICYmIGdlbmVyYXRlZFByaW1hcnlLZXkgIT0gbnVsbCkge1xuICAgICAgICAgICAgICAgICAgICBrZXkgPSBnZW5lcmF0ZWRQcmltYXJ5S2V5O1xuICAgICAgICAgICAgICAgICAgICByZXEua2V5c1tpXSA9IGtleTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKCFwcmltYXJ5S2V5Lm91dGJvdW5kKSB7XG4gICAgICAgICAgICAgICAgICAgICAgc2V0QnlLZXlQYXRoKHJlcS52YWx1ZXNbaV0sIHByaW1hcnlLZXkua2V5UGF0aCwga2V5KTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAvLyBUaGUgcHV0KCkgb3BlcmF0aW9uIHJlc3VsdGVkIGluIGFuIHVwZGF0ZVxuICAgICAgICAgICAgICAgICAgY29uc3Qgb2JqZWN0RGlmZiA9IGdldE9iamVjdERpZmYoZXhpc3RpbmdWYWx1ZSwgcmVxLnZhbHVlc1tpXSk7XG4gICAgICAgICAgICAgICAgICBjb25zdCBhZGRpdGlvbmFsQ2hhbmdlcyA9IHVwZGF0aW5nLmZpcmUuY2FsbChjdHgsIG9iamVjdERpZmYsIGtleSwgZXhpc3RpbmdWYWx1ZSwgZHhUcmFucyk7XG4gICAgICAgICAgICAgICAgICBpZiAoYWRkaXRpb25hbENoYW5nZXMpIHtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgcmVxdWVzdGVkVmFsdWUgPSByZXEudmFsdWVzW2ldO1xuICAgICAgICAgICAgICAgICAgICBPYmplY3Qua2V5cyhhZGRpdGlvbmFsQ2hhbmdlcykuZm9yRWFjaChrZXlQYXRoID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICBpZiAoaGFzT3duKHJlcXVlc3RlZFZhbHVlLCBrZXlQYXRoKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgLy8ga2V5UGF0aCBpcyBhbHJlYWR5IHByZXNlbnQgYXMgYSBsaXRlcmFsIHByb3BlcnR5IG9mIHRoZSBvYmplY3RcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlcXVlc3RlZFZhbHVlW2tleVBhdGhdID0gYWRkaXRpb25hbENoYW5nZXNba2V5UGF0aF07XG4gICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIGtleVBhdGggcmVwcmVzZW50cyBhIG5ldyBvciBleGlzdGluZyBwYXRoIGludG8gdGhlIG9iamVjdFxuICAgICAgICAgICAgICAgICAgICAgICAgc2V0QnlLZXlQYXRoKHJlcXVlc3RlZFZhbHVlLCBrZXlQYXRoLCBhZGRpdGlvbmFsQ2hhbmdlc1trZXlQYXRoXSk7XG4gICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcmV0dXJuIGN0eDtcbiAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgIHJldHVybiBkb3duVGFibGUubXV0YXRlKHJlcSkudGhlbigoe2ZhaWx1cmVzLCByZXN1bHRzLCBudW1GYWlsdXJlcywgbGFzdFJlc3VsdH0pID0+IHtcbiAgICAgICAgICAgICAgICBmb3IgKGxldCBpPTA7IGk8a2V5cy5sZW5ndGg7ICsraSkge1xuICAgICAgICAgICAgICAgICAgY29uc3QgcHJpbUtleSA9IHJlc3VsdHMgPyByZXN1bHRzW2ldIDoga2V5c1tpXTtcbiAgICAgICAgICAgICAgICAgIGNvbnN0IGN0eCA9IGNvbnRleHRzW2ldO1xuICAgICAgICAgICAgICAgICAgaWYgKHByaW1LZXkgPT0gbnVsbCkge1xuICAgICAgICAgICAgICAgICAgICBjdHgub25lcnJvciAmJiBjdHgub25lcnJvcihmYWlsdXJlc1tpXSk7XG4gICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBjdHgub25zdWNjZXNzICYmIGN0eC5vbnN1Y2Nlc3MoXG4gICAgICAgICAgICAgICAgICAgICAgcmVxLnR5cGUgPT09ICdwdXQnICYmIGV4aXN0aW5nVmFsdWVzW2ldID8gLy8gdGhlIHB1dCByZXN1bHRlZCBpbiBhbiB1cGRhdGVcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlcS52YWx1ZXNbaV0gOiAvLyB1cGRhdGUgaG9va3MgZXhwZWN0cyBleGlzdGluZyB2YWx1ZVxuICAgICAgICAgICAgICAgICAgICAgICAgcHJpbUtleSAvLyBjcmVhdGUgaG9va3MgZXhwZWN0cyBwcmltYXJ5IGtleVxuICAgICAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByZXR1cm4ge2ZhaWx1cmVzLCByZXN1bHRzLCBudW1GYWlsdXJlcywgbGFzdFJlc3VsdH07XG4gICAgICAgICAgICAgIH0pLmNhdGNoKGVycm9yID0+IHtcbiAgICAgICAgICAgICAgICBjb250ZXh0cy5mb3JFYWNoKGN0eCA9PiBjdHgub25lcnJvciAmJiBjdHgub25lcnJvcihlcnJvcikpO1xuICAgICAgICAgICAgICAgIHJldHVybiBQcm9taXNlLnJlamVjdChlcnJvcik7XG4gICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgfVxuICBcbiAgICAgICAgICBmdW5jdGlvbiBkZWxldGVSYW5nZShyZXE6IERCQ29yZURlbGV0ZVJhbmdlUmVxdWVzdCk6IFByb21pc2U8REJDb3JlTXV0YXRlUmVzcG9uc2U+IHtcbiAgICAgICAgICAgIHJldHVybiBkZWxldGVOZXh0Q2h1bmsocmVxLnRyYW5zLCByZXEucmFuZ2UsIDEwMDAwKTtcbiAgICAgICAgICB9XG4gIFxuICAgICAgICAgIGZ1bmN0aW9uIGRlbGV0ZU5leHRDaHVuayh0cmFuczogREJDb3JlVHJhbnNhY3Rpb24sIHJhbmdlOiBEQkNvcmVLZXlSYW5nZSwgbGltaXQ6IG51bWJlcikge1xuICAgICAgICAgICAgLy8gUXVlcnkgd2hhdCBrZXlzIGluIHRoZSBEQiB3aXRoaW4gdGhlIGdpdmVuIHJhbmdlXG4gICAgICAgICAgICByZXR1cm4gZG93blRhYmxlLnF1ZXJ5KHt0cmFucywgdmFsdWVzOiBmYWxzZSwgcXVlcnk6IHtpbmRleDogcHJpbWFyeUtleSwgcmFuZ2V9LCBsaW1pdH0pXG4gICAgICAgICAgICAudGhlbigoe3Jlc3VsdH0pID0+IHtcbiAgICAgICAgICAgICAgLy8gR2l2ZW4gYSBzZXQgb2Yga2V5cywgYnVsayBkZWxldGUgdGhvc2UgdXNpbmcgdGhlIHNhbWUgcHJvY2VkdXJlIGFzIGluIGFkZFB1dE9yRGVsZXRlKCkuXG4gICAgICAgICAgICAgIC8vIFRoaXMgd2lsbCBtYWtlIHN1cmUgdGhhdCBkZWxldGluZyBob29rIGlzIGNhbGxlZC5cbiAgICAgICAgICAgICAgcmV0dXJuIGFkZFB1dE9yRGVsZXRlKHt0eXBlOiAnZGVsZXRlJywga2V5czogcmVzdWx0LCB0cmFuc30pLnRoZW4ocmVzID0+IHtcbiAgICAgICAgICAgICAgICBpZiAocmVzLm51bUZhaWx1cmVzID4gMCkgcmV0dXJuIFByb21pc2UucmVqZWN0KHJlcy5mYWlsdXJlc1swXSk7XG4gICAgICAgICAgICAgICAgaWYgKHJlc3VsdC5sZW5ndGggPCBsaW1pdCkge1xuICAgICAgICAgICAgICAgICAgcmV0dXJuIHtmYWlsdXJlczogW10sIG51bUZhaWx1cmVzOiAwLCBsYXN0UmVzdWx0OiB1bmRlZmluZWR9IGFzIERCQ29yZU11dGF0ZVJlc3BvbnNlO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICByZXR1cm4gZGVsZXRlTmV4dENodW5rKHRyYW5zLCB7Li4ucmFuZ2UsIGxvd2VyOiByZXN1bHRbcmVzdWx0Lmxlbmd0aCAtIDFdLCBsb3dlck9wZW46IHRydWV9LCBsaW1pdCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH0pXG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9O1xuICAgICAgLy9jb25zdCB7bG9jaywgbG9ja2FibGVNaWRkbGV3YXJlfSA9IExvY2thYmxlVGFibGVNaWRkbGV3YXJlKHRhYmxlTWlkZGxld2FyZSk7XG5cbiAgICAgIHJldHVybiB0YWJsZU1pZGRsZXdhcmU7XG4gICAgfSxcbiAgfSkgYXMgREJDb3JlXG59O1xuXG5mdW5jdGlvbiBnZXRFeGlzdGluZ1ZhbHVlcyhcbiAgdGFibGU6IERCQ29yZVRhYmxlLFxuICByZXE6IERCQ29yZUFkZFJlcXVlc3QgfCBEQkNvcmVQdXRSZXF1ZXN0IHwgREJDb3JlRGVsZXRlUmVxdWVzdCxcbiAgZWZmZWN0aXZlS2V5czogYW55W11cbikge1xuICByZXR1cm4gcmVxLnR5cGUgPT09IFwiYWRkXCJcbiAgICA/IFByb21pc2UucmVzb2x2ZShbXSlcbiAgICA6IHRhYmxlLmdldE1hbnkoeyB0cmFuczogcmVxLnRyYW5zLCBrZXlzOiBlZmZlY3RpdmVLZXlzLCBjYWNoZTogXCJpbW11dGFibGVcIiB9KTtcbn1cbiIsICJpbXBvcnQgeyBkZWVwQ2xvbmUgfSBmcm9tIFwiLi4vZnVuY3Rpb25zL3V0aWxzXCI7XG5pbXBvcnQgeyBEQkNvcmUgfSBmcm9tIFwiLi4vcHVibGljL3R5cGVzL2RiY29yZVwiO1xuaW1wb3J0IHsgTWlkZGxld2FyZSB9IGZyb20gXCIuLi9wdWJsaWMvdHlwZXMvbWlkZGxld2FyZVwiO1xuaW1wb3J0IFByb21pc2UgZnJvbSBcIi4uL2hlbHBlcnMvcHJvbWlzZVwiO1xuaW1wb3J0IHsgY21wIH0gZnJvbSAnLi4vZnVuY3Rpb25zL2NtcCc7XG5cbmV4cG9ydCBmdW5jdGlvbiBnZXRGcm9tVHJhbnNhY3Rpb25DYWNoZShcbiAga2V5czogcmVhZG9ubHkgYW55W10sXG4gIGNhY2hlOiB7IGtleXM6IGFueVtdOyB2YWx1ZXM6IGFueVtdIH0gfCB1bmRlZmluZWQgfCBudWxsLFxuICBjbG9uZT86IGJvb2xlYW5cbikge1xuICB0cnkge1xuICAgIGlmICghY2FjaGUpIHJldHVybiBudWxsO1xuICAgIGlmIChjYWNoZS5rZXlzLmxlbmd0aCA8IGtleXMubGVuZ3RoKSByZXR1cm4gbnVsbDtcbiAgICBjb25zdCByZXN1bHQ6IGFueVtdID0gW107XG4gICAgLy8gQ29tcGFyZSBpZiB0aGUgZXhhY3Qgc2FtZSBvcmRlciBvZiBrZXlzIHdhcyByZXRyaWV2ZWQgaW4gc2FtZSB0cmFuc2FjdGlvbjpcbiAgICAvLyBBbGxvdyBzb21lIGNhY2hlZCBrZXlzIHRvIGJlIG9taXR0ZWQgZnJvbSBwcm92aWRlZCBzZXQgb2Yga2V5c1xuICAgIC8vIFVzZSBjYXNlOiAxLiBnZXRNYW55KGtleXMpIDIuIHVwZGF0ZSBhIHN1YnNldCBvZiB0aG9zZSAzLiBjYWxsIHB1dCB3aXRoIHRoZSB1cGRhdGVkIG9uZXMgPT0+IG1pZGRsZXdhcmVzIHNob3VsZCBiZSBhYmxlIHRvIGZpbmQgb2xkIHZhbHVlc1xuICAgIGZvciAobGV0IGkgPSAwLCBqID0gMDsgaSA8IGNhY2hlLmtleXMubGVuZ3RoICYmIGogPCBrZXlzLmxlbmd0aDsgKytpKSB7XG4gICAgICBpZiAoY21wKGNhY2hlLmtleXNbaV0sIGtleXNbal0pICE9PSAwKSBjb250aW51ZTtcbiAgICAgIHJlc3VsdC5wdXNoKGNsb25lID8gZGVlcENsb25lKGNhY2hlLnZhbHVlc1tpXSkgOiBjYWNoZS52YWx1ZXNbaV0pO1xuICAgICAgKytqO1xuICAgIH1cbiAgICAvLyBJZiBnb3QgYWxsIGtleXMgY2FsbGVyIHdhcyBsb29raW5nIGZvciwgcmV0dXJuIHJlc3VsdC5cbiAgICByZXR1cm4gcmVzdWx0Lmxlbmd0aCA9PT0ga2V5cy5sZW5ndGggPyByZXN1bHQgOiBudWxsO1xuICB9IGNhdGNoIHtcbiAgICByZXR1cm4gbnVsbDtcbiAgfVxufVxuXG5leHBvcnQgY29uc3QgY2FjaGVFeGlzdGluZ1ZhbHVlc01pZGRsZXdhcmU6IE1pZGRsZXdhcmU8REJDb3JlPiA9IHtcbiAgc3RhY2s6IFwiZGJjb3JlXCIsXG4gIGxldmVsOiAtMSxcbiAgY3JlYXRlOiAoY29yZSkgPT4ge1xuICAgIHJldHVybiB7XG4gICAgICB0YWJsZTogKHRhYmxlTmFtZSkgPT4ge1xuICAgICAgICBjb25zdCB0YWJsZSA9IGNvcmUudGFibGUodGFibGVOYW1lKTtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAuLi50YWJsZSxcbiAgICAgICAgICBnZXRNYW55OiAocmVxKSA9PiB7XG4gICAgICAgICAgICBpZiAoIXJlcS5jYWNoZSkge1xuICAgICAgICAgICAgICByZXR1cm4gdGFibGUuZ2V0TWFueShyZXEpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY29uc3QgY2FjaGVkUmVzdWx0ID0gZ2V0RnJvbVRyYW5zYWN0aW9uQ2FjaGUoXG4gICAgICAgICAgICAgIHJlcS5rZXlzLFxuICAgICAgICAgICAgICByZXEudHJhbnNbXCJfY2FjaGVcIl0sXG4gICAgICAgICAgICAgIHJlcS5jYWNoZSA9PT0gXCJjbG9uZVwiXG4gICAgICAgICAgICApO1xuICAgICAgICAgICAgaWYgKGNhY2hlZFJlc3VsdCkge1xuICAgICAgICAgICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKGNhY2hlZFJlc3VsdCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gdGFibGUuZ2V0TWFueShyZXEpLnRoZW4oKHJlcykgPT4ge1xuICAgICAgICAgICAgICByZXEudHJhbnNbXCJfY2FjaGVcIl0gPSB7XG4gICAgICAgICAgICAgICAga2V5czogcmVxLmtleXMsXG4gICAgICAgICAgICAgICAgdmFsdWVzOiByZXEuY2FjaGUgPT09IFwiY2xvbmVcIiA/IGRlZXBDbG9uZShyZXMpIDogcmVzLFxuICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICByZXR1cm4gcmVzO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgfSxcbiAgICAgICAgICBtdXRhdGU6IChyZXEpID0+IHtcbiAgICAgICAgICAgIC8vIEludmFsaWRhdGUgY2FjaGUgb24gYW55IG11dGF0ZSBleGNlcHQgXCJhZGRcIiB3aGljaCBjYW4ndCBjaGFuZ2UgZXhpc3RpbmcgdmFsdWVzOlxuICAgICAgICAgICAgaWYgKHJlcS50eXBlICE9PSBcImFkZFwiKSByZXEudHJhbnNbXCJfY2FjaGVcIl0gPSBudWxsO1xuICAgICAgICAgICAgcmV0dXJuIHRhYmxlLm11dGF0ZShyZXEpO1xuICAgICAgICAgIH0sXG4gICAgICAgIH07XG4gICAgICB9LFxuICAgIH07XG4gIH0sXG59O1xuIiwgImltcG9ydCB7IERCQ29yZSwgREJDb3JlVGFibGUgfSBmcm9tICcuLi8uLi9wdWJsaWMvdHlwZXMvZGJjb3JlJztcbmltcG9ydCB7IExpdmVRdWVyeUNvbnRleHQgfSBmcm9tICcuLi9saXZlLXF1ZXJ5JztcblxuZXhwb3J0IGZ1bmN0aW9uIGlzQ2FjaGFibGVDb250ZXh0KGN0eDogTGl2ZVF1ZXJ5Q29udGV4dCwgdGFibGU6IERCQ29yZVRhYmxlKSB7XG4gIHJldHVybiAoXG4gICAgY3R4LnRyYW5zLm1vZGUgPT09ICdyZWFkb25seScgJiZcbiAgICAhIWN0eC5zdWJzY3IgJiZcbiAgICAhY3R4LnRyYW5zLmV4cGxpY2l0ICYmXG4gICAgY3R4LnRyYW5zLmRiLl9vcHRpb25zLmNhY2hlICE9PSAnZGlzYWJsZWQnICYmXG4gICAgIXRhYmxlLnNjaGVtYS5wcmltYXJ5S2V5Lm91dGJvdW5kXG4gICk7XG59XG5cbiIsICJpbXBvcnQgeyBEQkNvcmVDb3VudFJlcXVlc3QsIERCQ29yZUdldE1hbnlSZXF1ZXN0LCBEQkNvcmVHZXRSZXF1ZXN0LCBEQkNvcmVPcGVuQ3Vyc29yUmVxdWVzdCwgREJDb3JlUXVlcnlSZXF1ZXN0IH0gZnJvbSAnLi4vLi4vcHVibGljL3R5cGVzL2RiY29yZSc7XG5cblxuZXhwb3J0IGZ1bmN0aW9uIGlzQ2FjaGFibGVSZXF1ZXN0KHR5cGU6IHN0cmluZywgcmVxOiBQYXJ0aWFsPERCQ29yZVF1ZXJ5UmVxdWVzdCAmIERCQ29yZUNvdW50UmVxdWVzdCAmIERCQ29yZUdldE1hbnlSZXF1ZXN0ICYgREJDb3JlR2V0UmVxdWVzdCAmIERCQ29yZU9wZW5DdXJzb3JSZXF1ZXN0Pikge1xuICBzd2l0Y2ggKHR5cGUpIHtcbiAgICBjYXNlICdxdWVyeSc6XG4gICAgICByZXR1cm4gcmVxLnZhbHVlcyAmJiAhcmVxLnVuaXF1ZTtcbiAgICBjYXNlICdnZXQnOlxuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIGNhc2UgJ2dldE1hbnknOlxuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIGNhc2UgJ2NvdW50JzpcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICBjYXNlICdvcGVuQ3Vyc29yJzpcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgfVxufVxuIiwgImltcG9ydCB7IExpdmVRdWVyeUNvbnRleHQgfSBmcm9tIFwiLlwiO1xuaW1wb3J0IHsgZ2V0RnJvbVRyYW5zYWN0aW9uQ2FjaGUgfSBmcm9tIFwiLi4vZGJjb3JlL2NhY2hlLWV4aXN0aW5nLXZhbHVlcy1taWRkbGV3YXJlXCI7XG5pbXBvcnQgeyBnZXRFZmZlY3RpdmVLZXlzIH0gZnJvbSBcIi4uL2RiY29yZS9nZXQtZWZmZWN0aXZlLWtleXNcIjtcbmltcG9ydCB7IGV4Y2VwdGlvbnMgfSBmcm9tIFwiLi4vZXJyb3JzXCI7XG5pbXBvcnQgeyBjbXAgfSBmcm9tIFwiLi4vZnVuY3Rpb25zL2NtcFwiO1xuaW1wb3J0IHsgaXNBcnJheSwga2V5cyB9IGZyb20gXCIuLi9mdW5jdGlvbnMvdXRpbHNcIjtcbmltcG9ydCB7IFBTRCB9IGZyb20gXCIuLi9oZWxwZXJzL3Byb21pc2VcIjtcbmltcG9ydCB7IFJhbmdlU2V0IH0gZnJvbSBcIi4uL2hlbHBlcnMvcmFuZ2VzZXRcIjtcbmltcG9ydCB7IE9ic2VydmFiaWxpdHlTZXQgfSBmcm9tIFwiLi4vcHVibGljL3R5cGVzL2RiLWV2ZW50c1wiO1xuaW1wb3J0IHtcbiAgREJDb3JlLFxuICBEQkNvcmVDb3VudFJlcXVlc3QsXG4gIERCQ29yZUN1cnNvcixcbiAgREJDb3JlR2V0TWFueVJlcXVlc3QsXG4gIERCQ29yZUdldFJlcXVlc3QsXG4gIERCQ29yZUluZGV4LFxuICBEQkNvcmVPcGVuQ3Vyc29yUmVxdWVzdCxcbiAgREJDb3JlUXVlcnlSZXF1ZXN0LFxuICBEQkNvcmVRdWVyeVJlc3BvbnNlLFxuICBEQkNvcmVUYWJsZSxcbiAgREJDb3JlVGFibGVTY2hlbWEsXG4gIERCQ29yZVRyYW5zYWN0aW9uLFxufSBmcm9tIFwiLi4vcHVibGljL3R5cGVzL2RiY29yZVwiO1xuaW1wb3J0IHsgTWlkZGxld2FyZSB9IGZyb20gXCIuLi9wdWJsaWMvdHlwZXMvbWlkZGxld2FyZVwiO1xuaW1wb3J0IHsgaXNDYWNoYWJsZUNvbnRleHQgfSBmcm9tIFwiLi9jYWNoZS9pcy1jYWNoYWJsZS1jb250ZXh0XCI7XG5pbXBvcnQgeyBpc0NhY2hhYmxlUmVxdWVzdCB9IGZyb20gXCIuL2NhY2hlL2lzLWNhY2hhYmxlLXJlcXVlc3RcIjtcbmltcG9ydCB7IGV4dGVuZE9ic2VydmFiaWxpdHlTZXQgfSBmcm9tIFwiLi9leHRlbmQtb2JzZXJ2YWJpbGl0eS1zZXRcIjtcblxuZXhwb3J0IGNvbnN0IG9ic2VydmFiaWxpdHlNaWRkbGV3YXJlOiBNaWRkbGV3YXJlPERCQ29yZT4gPSB7XG4gIHN0YWNrOiBcImRiY29yZVwiLFxuICBsZXZlbDogMCxcbiAgbmFtZTogXCJPYnNlcnZhYmlsaXR5XCIsXG4gIGNyZWF0ZTogKGNvcmUpID0+IHtcbiAgICBjb25zdCBkYk5hbWUgPSBjb3JlLnNjaGVtYS5uYW1lO1xuICAgIGNvbnN0IEZVTExfUkFOR0UgPSBuZXcgUmFuZ2VTZXQoY29yZS5NSU5fS0VZLCBjb3JlLk1BWF9LRVkpO1xuXG4gICAgcmV0dXJuIHtcbiAgICAgIC4uLmNvcmUsXG4gICAgICB0cmFuc2FjdGlvbjogKHN0b3JlcywgbW9kZSwgb3B0aW9ucykgPT4ge1xuICAgICAgICBpZiAoUFNELnN1YnNjciAmJiBtb2RlICE9PSAncmVhZG9ubHknKSB7XG4gICAgICAgICAgdGhyb3cgbmV3IGV4Y2VwdGlvbnMuUmVhZE9ubHkoYFJlYWR3cml0ZSB0cmFuc2FjdGlvbiBpbiBsaXZlUXVlcnkgY29udGV4dC4gUXVlcmllciBzb3VyY2U6ICR7KFBTRCBhcyBMaXZlUXVlcnlDb250ZXh0KS5xdWVyaWVyfWApO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBjb3JlLnRyYW5zYWN0aW9uKHN0b3JlcywgbW9kZSwgb3B0aW9ucyk7XG4gICAgICB9LFxuICAgICAgdGFibGU6ICh0YWJsZU5hbWUpID0+IHtcbiAgICAgICAgY29uc3QgdGFibGUgPSBjb3JlLnRhYmxlKHRhYmxlTmFtZSk7XG4gICAgICAgIGNvbnN0IHsgc2NoZW1hIH0gPSB0YWJsZTtcbiAgICAgICAgY29uc3QgeyBwcmltYXJ5S2V5LCBpbmRleGVzIH0gPSBzY2hlbWE7XG4gICAgICAgIGNvbnN0IHsgZXh0cmFjdEtleSwgb3V0Ym91bmQgfSA9IHByaW1hcnlLZXk7XG4gICAgICAgIGNvbnN0IGluZGV4ZXNXaXRoQXV0b0luY1BLID0gcHJpbWFyeUtleS5hdXRvSW5jcmVtZW50ICYmIGluZGV4ZXMuZmlsdGVyKFxuICAgICAgICAgIChpbmRleCkgPT4gaW5kZXguY29tcG91bmQgJiYgKGluZGV4LmtleVBhdGggYXMgc3RyaW5nW10pLmluY2x1ZGVzKHByaW1hcnlLZXkua2V5UGF0aCBhcyBzdHJpbmcpXG4gICAgICAgICk7XG4gICAgICAgIGNvbnN0IHRhYmxlQ2xvbmU6IERCQ29yZVRhYmxlID0ge1xuICAgICAgICAgIC4uLnRhYmxlLFxuICAgICAgICAgIG11dGF0ZTogKHJlcSkgPT4ge1xuICAgICAgICAgICAgY29uc3QgdHJhbnMgPSByZXEudHJhbnMgYXMgREJDb3JlVHJhbnNhY3Rpb24gJiB7XG4gICAgICAgICAgICAgIG11dGF0ZWRQYXJ0cz86IE9ic2VydmFiaWxpdHlTZXQ7XG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgY29uc3QgbXV0YXRlZFBhcnRzID0gcmVxLm11dGF0ZWRQYXJ0cyB8fCAocmVxLm11dGF0ZWRQYXJ0cyA9IHt9KTtcbiAgICAgICAgICAgIGNvbnN0IGdldFJhbmdlU2V0ID0gKGluZGV4TmFtZTogc3RyaW5nKSA9PiB7XG4gICAgICAgICAgICAgIGNvbnN0IHBhcnQgPSBgaWRiOi8vJHtkYk5hbWV9LyR7dGFibGVOYW1lfS8ke2luZGV4TmFtZX1gO1xuICAgICAgICAgICAgICByZXR1cm4gKG11dGF0ZWRQYXJ0c1twYXJ0XSB8fFxuICAgICAgICAgICAgICAgIChtdXRhdGVkUGFydHNbcGFydF0gPSBuZXcgUmFuZ2VTZXQoKSkpIGFzIFJhbmdlU2V0O1xuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIGNvbnN0IHBrUmFuZ2VTZXQgPSBnZXRSYW5nZVNldChcIlwiKTtcbiAgICAgICAgICAgIGNvbnN0IGRlbHNSYW5nZVNldCA9IGdldFJhbmdlU2V0KFwiOmRlbHNcIik7XG5cbiAgICAgICAgICAgIGNvbnN0IHsgdHlwZSB9ID0gcmVxO1xuICAgICAgICAgICAgbGV0IFtrZXlzLCBuZXdPYmpzXSA9XG4gICAgICAgICAgICAgIHJlcS50eXBlID09PSBcImRlbGV0ZVJhbmdlXCJcbiAgICAgICAgICAgICAgICA/IFtyZXEucmFuZ2VdIC8vIGtleXMgd2lsbCBiZSBhbiBEQkNvcmVLZXlSYW5nZSBvYmplY3QgLSB0cmFuc2Zvcm1lZCBsYXRlciBvbiB0byBhIFtmcm9tLHRvXS1zdHlsZSByYW5nZS5cbiAgICAgICAgICAgICAgICA6IHJlcS50eXBlID09PSBcImRlbGV0ZVwiXG4gICAgICAgICAgICAgICAgPyBbcmVxLmtleXNdIC8vIGtleXMga25vd24gYWxyZWFkeSBoZXJlLiBuZXdPYmpzIHdpbGwgYmUgdW5kZWZpbmVkLlxuICAgICAgICAgICAgICAgIDogcmVxLnZhbHVlcy5sZW5ndGggPCA1MFxuICAgICAgICAgICAgICAgID8gW2dldEVmZmVjdGl2ZUtleXMocHJpbWFyeUtleSwgcmVxKS5maWx0ZXIoaWQgPT4gaWQpLCByZXEudmFsdWVzXSAvLyBrZXlzIGV4Y2VwdCBhdXRvSW5jcmVtZW50ZWQgLSB0aGV5IHdpbGwgYmUgYWRkZWQgbGF0ZXIgb24uXG4gICAgICAgICAgICAgICAgOiBbXTsgLy8ga2V5cyBhbmQgbmV3T2JqcyB3aWxsIGJvdGggYmUgdW5kZWZpbmVkIC0gY2hhbmdlU3BlYyB3aWxsIGJlY29tZSB0cnVlIChjaGFuZ2VkIGZvciBlbnRpcmUgdGFibGUpXG5cbiAgICAgICAgICAgIGNvbnN0IG9sZENhY2hlID0gcmVxLnRyYW5zW1wiX2NhY2hlXCJdO1xuXG4gICAgICAgICAgICAvLyBBZGQgdGhlIG11dGF0ZWQgdGFibGUgYW5kIG9wdGlvbmFsbHkga2V5cyB0byB0aGUgbXV0YXRlZFRhYmxlcyBzZXQgb24gdGhlIHRyYW5zYWN0aW9uLlxuICAgICAgICAgICAgLy8gVXNlZCBieSBzdWJzY3JpYmVycyB0byB0eGNvbW1pdCBldmVudCBhbmQgZm9yIENvbGxlY3Rpb24ucHJvdG90eXBlLnN1YnNjcmliZSgpLlxuICAgICAgICAgICAgaWYgKGlzQXJyYXkoa2V5cykpIHtcbiAgICAgICAgICAgICAgLy8ga2V5cyBpcyBhbiBhcnJheSAtIGRlbGV0ZSwgYWRkIG9yIHB1dCBvZiBsZXNzIHRoYW4gNTAgcm93cy5cbiAgICAgICAgICAgICAgLy8gSW5kaXZpZHVhbCBrZXlzIChhZGQgcHV0IG9yIGRlbGV0ZSlcbiAgICAgICAgICAgICAgcGtSYW5nZVNldC5hZGRLZXlzKGtleXMpO1xuICAgICAgICAgICAgICAvLyBPbmx5IGdldCBvbGRPYmpzIGlmIHRoZXkgaGF2ZSBiZWVuIGNhY2hlZCByZWNlbnRseVxuICAgICAgICAgICAgICAvLyAoVGhpcyBhcHBsaWVzIHRvIENvbGxlY3Rpb24ubW9kaWZ5KCkgb25seSwgYnV0IGFsc28gaWYgdXBkYXRpbmcvZGVsZXRpbmcgaG9va3MgaGF2ZSBzdWJzY3JpYmVycylcbiAgICAgICAgICAgICAgY29uc3Qgb2xkT2JqcyA9IHR5cGUgPT09ICdkZWxldGUnIHx8IGtleXMubGVuZ3RoID09PSBuZXdPYmpzLmxlbmd0aCA/IGdldEZyb21UcmFuc2FjdGlvbkNhY2hlKGtleXMsIG9sZENhY2hlKSA6IG51bGw7XG5cbiAgICAgICAgICAgICAgLy8gU3VwcGx5IGRldGFpbGVkIHZhbHVlcyBwZXIgaW5kZXggZm9yIGJvdGggb2xkIGFuZCBuZXcgb2JqZWN0czpcbiAgICAgICAgICAgICAgaWYgKCFvbGRPYmpzKSB7XG4gICAgICAgICAgICAgICAgLy8gYWRkLCBkZWxldGUgb3IgcHV0IGFuZCB3ZSBkb24ndCBrbm93IG9sZCB2YWx1ZXMuXG4gICAgICAgICAgICAgICAgLy8gSW5kaWNhdGUgdGhpcyBpbiB0aGUgXCI6ZGVsc1wiIHBhcnQsIGZvciB0aGUgc2FrZSBvZiBjb3VudCgpIGFuZCBwcmltYXJ5S2V5cygpIHF1ZXJpZXMgb25seSFcbiAgICAgICAgICAgICAgICBkZWxzUmFuZ2VTZXQuYWRkS2V5cyhrZXlzKTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICBpZiAob2xkT2JqcyB8fCBuZXdPYmpzKSB7XG4gICAgICAgICAgICAgICAgLy8gTm8gbWF0dGVyIGlmIGtub3duaW5nIG9sZE9ianMgb3Igbm90LCB0cmFjayB0aGUgaW5kaWNlcyBpZiBpdCdzIGEgcHV0LCBhZGQgb3IgZGVsZXRlLlxuICAgICAgICAgICAgICAgIHRyYWNrQWZmZWN0ZWRJbmRleGVzKGdldFJhbmdlU2V0LCBzY2hlbWEsIG9sZE9ianMsIG5ld09ianMpO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9IGVsc2UgaWYgKGtleXMpIHtcbiAgICAgICAgICAgICAgLy8ga2V5cyBpcyBhIERCQ29yZUtleVJhbmdlIG9iamVjdC4gVHJhbnNmb3JtIGl0IHRvIFtmcm9tLHRvXS1zdHlsZSByYW5nZS5cbiAgICAgICAgICAgICAgLy8gQXMgd2UgY2FuJ3Qga25vdyBkZWxldGVkIGluZGV4IHJhbmdlcywgbWFyayBpbmRleC1iYXNlZCBzdWJzY3JpcHRpb25zIG11c3QgdHJpZ2dlci5cbiAgICAgICAgICAgICAgY29uc3QgcmFuZ2UgPSB7IGZyb206IGtleXMubG93ZXIsIHRvOiBrZXlzLnVwcGVyIH07XG4gICAgICAgICAgICAgIGRlbHNSYW5nZVNldC5hZGQocmFuZ2UpO1xuICAgICAgICAgICAgICAvLyBkZWxldGVSYW5nZS4ga2V5cyBpcyBhIERCQ29yZUtleVJhbmdlIG9iamVjdHMuIFRyYW5zZm9ybSBpdCB0byBbZnJvbSx0b10tc3R5bGUgcmFuZ2UuXG4gICAgICAgICAgICAgIHBrUmFuZ2VTZXQuYWRkKHJhbmdlKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIC8vIFRvbyBtYW55IHJlcXVlc3RzIHRvIHJlY29yZCB0aGUgZGV0YWlscyB3aXRob3V0IHNsb3dpbmcgZG93biB3cml0ZSBwZXJmb3JtYW5jZS5cbiAgICAgICAgICAgICAgLy8gTGV0J3MganVzdCByZWNvcmQgYSBnZW5lcmljIGxhcmdlIHJhbmdlIG9uIHByaW1hcnkga2V5LCB0aGUgdmlydHVhbCA6ZGVscyBpbmRleCBhbmRcbiAgICAgICAgICAgICAgLy8gYWxsIHNlY29uZGFyeSBpbmRpY2VzOlxuICAgICAgICAgICAgICBwa1JhbmdlU2V0LmFkZChGVUxMX1JBTkdFKTtcbiAgICAgICAgICAgICAgZGVsc1JhbmdlU2V0LmFkZChGVUxMX1JBTkdFKTtcbiAgICAgICAgICAgICAgc2NoZW1hLmluZGV4ZXMuZm9yRWFjaChpZHggPT4gZ2V0UmFuZ2VTZXQoaWR4Lm5hbWUpLmFkZChGVUxMX1JBTkdFKSk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHJldHVybiB0YWJsZS5tdXRhdGUocmVxKS50aGVuKChyZXMpID0+IHtcbiAgICAgICAgICAgICAgLy8gTWVyZ2UgdGhlIG11dGF0ZWQgcGFydHMgZnJvbSB0aGUgcmVxdWVzdCBpbnRvIHRoZSB0cmFuc2FjdGlvbidzIG11dGF0ZWRQYXJ0c1xuICAgICAgICAgICAgICAvLyBub3cgd2hlbiB0aGUgcmVxdWVzdCB3ZW50IGZpbmUuXG4gICAgICAgICAgICAgIGlmIChrZXlzICYmIChyZXEudHlwZSA9PT0gJ2FkZCcgfHwgcmVxLnR5cGUgPT09ICdwdXQnKSkge1xuICAgICAgICAgICAgICAgIC8vIExlc3MgdGhhbiA1MCByZXF1ZXN0cyAoa2V5cyB0cnV0aHkpIChvdGhlcndpc2Ugd2UndmUgYWRkZWQgZnVsbCByYW5nZSBhbnl3YXkpXG4gICAgICAgICAgICAgICAgLy8gYXV0b2luY3JlbWVudCBtZWFucyB3ZSBtaWdodCBub3QgaGF2ZSBnb3QgYWxsIGtleXMgdW50aWwgbm93XG4gICAgICAgICAgICAgICAgcGtSYW5nZVNldC5hZGRLZXlzKHJlcy5yZXN1bHRzKTtcbiAgICAgICAgICAgICAgICBpZiAoaW5kZXhlc1dpdGhBdXRvSW5jUEspIHtcbiAgICAgICAgICAgICAgICAgIC8vIERleGllIElzc3VlIDE5NDY6XG4gICAgICAgICAgICAgICAgICAvLyBJZiBhbiBhdXRvLWluY3JlbWVudGVkIHByaW1hcnkga2V5IGlzIHBhcnQgb2YgYSBjb21wb3VuZCBpbmRleCxcbiAgICAgICAgICAgICAgICAgIC8vIHdlIG5lZWQgdG8gY29tcHV0ZSB0aGUgcmVzdWx0aW5nIHZhbHVlIG9mIHRoYXQgaW5kZXggYWZ0ZXIgaW5zZXJ0aW5nXG4gICAgICAgICAgICAgICAgICAvLyB0aGUgcm93cy5cbiAgICAgICAgICAgICAgICAgIGluZGV4ZXNXaXRoQXV0b0luY1BLLmZvckVhY2goaWR4ID0+IHtcbiAgICAgICAgICAgICAgICAgICAgLy8gRXh0cmFjdCB2YWx1ZXMgb2YgdGhpcyBjb21wb3VuZCBpbmRleCB3aGVyZSBwcmltYXJ5IGtleSBpcyBub3QgeWV0IHNldDpcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgaWR4VmFscyA9IHJlcS52YWx1ZXMubWFwKHYgPT4gaWR4LmV4dHJhY3RLZXkodikpO1xuICAgICAgICAgICAgICAgICAgICAvLyBGaW5kIHRoZSBwb3NpdGlvbiBvZiB0aGUgcHJpbWFyeSBrZXkgaW4gdGhlIGluZGV4OlxuICAgICAgICAgICAgICAgICAgICBjb25zdCBwa1BvcyA9IChpZHgua2V5UGF0aCBhcyBzdHJpbmdbXSkuZmluZEluZGV4KHByb3AgPT4gcHJvcCA9PT0gcHJpbWFyeUtleS5rZXlQYXRoKTtcbiAgICAgICAgICAgICAgICAgICAgLy8gVXBkYXRlIGlkeFZhbHMgd2l0aCB0aGUgcmVzdWx0aW5nIHByaW1hcnkga2V5cyB0byBjb21wbGV0ZSB0aGUgaW5kZXggdmFsdWU6XG4gICAgICAgICAgICAgICAgICAgIHJlcy5yZXN1bHRzIS5mb3JFYWNoKHBrID0+IGlkeFZhbHNbcGtQb3NdID0gcGspO1xuICAgICAgICAgICAgICAgICAgICAvLyBBZGQgdGhlIHVwZGF0ZWQgaW5kZXggdG8gdGhlIHJhbmdlc2V0OlxuICAgICAgICAgICAgICAgICAgICBnZXRSYW5nZVNldChpZHgubmFtZSkuYWRkS2V5cyhpZHhWYWxzKTtcbiAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICB0cmFucy5tdXRhdGVkUGFydHMgPSBleHRlbmRPYnNlcnZhYmlsaXR5U2V0IChcbiAgICAgICAgICAgICAgICB0cmFucy5tdXRhdGVkUGFydHMgfHwge30sXG4gICAgICAgICAgICAgICAgbXV0YXRlZFBhcnRzXG4gICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgIHJldHVybiByZXM7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICB9LFxuICAgICAgICB9O1xuXG4gICAgICAgIGNvbnN0IGdldFJhbmdlOiAocmVxOiBhbnkpID0+IFtEQkNvcmVJbmRleCwgUmFuZ2VTZXRdID0gKHtcbiAgICAgICAgICBxdWVyeTogeyBpbmRleCwgcmFuZ2UgfSxcbiAgICAgICAgfTpcbiAgICAgICAgICB8IERCQ29yZVF1ZXJ5UmVxdWVzdFxuICAgICAgICAgIHwgREJDb3JlQ291bnRSZXF1ZXN0XG4gICAgICAgICAgfCBEQkNvcmVPcGVuQ3Vyc29yUmVxdWVzdCkgPT4gW1xuICAgICAgICAgIGluZGV4LFxuICAgICAgICAgIG5ldyBSYW5nZVNldChyYW5nZS5sb3dlciA/PyBjb3JlLk1JTl9LRVksIHJhbmdlLnVwcGVyID8/IGNvcmUuTUFYX0tFWSksXG4gICAgICAgIF07XG5cbiAgICAgICAgY29uc3QgcmVhZFN1YnNjcmliZXJzOiB7W21ldGhvZCBpblxuICAgICAgICAgIEV4Y2x1ZGU8a2V5b2YgREJDb3JlVGFibGUsIFwibmFtZVwiIHwgXCJzY2hlbWFcIiB8IFwibXV0YXRlXCI+XTogXG4gICAgICAgICAgKHJlcTogYW55KSA9PiBbREJDb3JlSW5kZXgsIFJhbmdlU2V0XVxuICAgICAgICB9ID0ge1xuICAgICAgICAgIGdldDogKHJlcSkgPT4gW3ByaW1hcnlLZXksIG5ldyBSYW5nZVNldChyZXEua2V5KV0sXG4gICAgICAgICAgZ2V0TWFueTogKHJlcSkgPT4gW3ByaW1hcnlLZXksIG5ldyBSYW5nZVNldCgpLmFkZEtleXMocmVxLmtleXMpXSxcbiAgICAgICAgICBjb3VudDogZ2V0UmFuZ2UsXG4gICAgICAgICAgcXVlcnk6IGdldFJhbmdlLFxuICAgICAgICAgIG9wZW5DdXJzb3I6IGdldFJhbmdlLFxuICAgICAgICB9XG5cbiAgICAgICAga2V5cyhyZWFkU3Vic2NyaWJlcnMpLmZvckVhY2goKG1ldGhvZDogJ2dldCcgfCAnZ2V0TWFueScgfCAnY291bnQnIHwgJ3F1ZXJ5JyB8ICdvcGVuQ3Vyc29yJykgPT4ge1xuICAgICAgICAgIHRhYmxlQ2xvbmVbbWV0aG9kXSA9IGZ1bmN0aW9uIChcbiAgICAgICAgICAgIHJlcTpcbiAgICAgICAgICAgICAgfCBEQkNvcmVHZXRSZXF1ZXN0XG4gICAgICAgICAgICAgIHwgREJDb3JlR2V0TWFueVJlcXVlc3RcbiAgICAgICAgICAgICAgfCBEQkNvcmVRdWVyeVJlcXVlc3RcbiAgICAgICAgICAgICAgfCBEQkNvcmVDb3VudFJlcXVlc3RcbiAgICAgICAgICAgICAgfCBEQkNvcmVPcGVuQ3Vyc29yUmVxdWVzdFxuICAgICAgICAgICkge1xuICAgICAgICAgICAgY29uc3QgeyBzdWJzY3IgfSA9IFBTRCBhcyBMaXZlUXVlcnlDb250ZXh0O1xuICAgICAgICAgICAgY29uc3QgaXNMaXZlUXVlcnkgPSAhIXN1YnNjcjtcbiAgICAgICAgICAgIGxldCBjYWNoYWJsZSA9IGlzQ2FjaGFibGVDb250ZXh0KFBTRCBhcyBMaXZlUXVlcnlDb250ZXh0LCB0YWJsZSkgJiYgaXNDYWNoYWJsZVJlcXVlc3QobWV0aG9kLCByZXEpO1xuICAgICAgICAgICAgY29uc3Qgb2JzU2V0ID0gY2FjaGFibGVcbiAgICAgICAgICAgICAgPyByZXEub2JzU2V0ID0ge30gLy8gSW1wbGljaXQgcmVhZCB0cmFuc2FjdGlvbiAtIHRyYWNrIGNoYW5nZXMgZm9yIHRoaXMgcXVlcnkgb25seSBmb3IgdGhlIHJlcXVlc3QncyBkdXJhdGlvblxuICAgICAgICAgICAgICA6IHN1YnNjcjsgLy8gRXhwbGljaXQgcmVhZCB0cmFuc2FjdGlvbiAtIHRyYWNrIGNoYW5nZXMgYWNyb3NzIGVudGlyZSBsaXZlIHF1ZXJ5XG5cbiAgICAgICAgICAgIGlmIChpc0xpdmVRdWVyeSkge1xuICAgICAgICAgICAgICAvLyBDdXJyZW50IHpvbmUgd2FudCdzIHRvIHRyYWNrIGFsbCBxdWVyaWVzIHNvIHRoZXkgY2FuIGJlIHN1YnNjcmliZWQgdG8uXG4gICAgICAgICAgICAgIC8vIChUaGUgcXVlcnkgaXMgZXhlY3V0ZWQgd2l0aGluIGEgXCJsaXZlUXVlcnlcIiB6b25lKVxuICAgICAgICAgICAgICAvLyBDaGVjayB3aGV0aGVyIHRoZSBxdWVyeSBhcHBsaWVzIHRvIGEgY2VydGFpbiBzZXQgb2YgcmFuZ2VzOlxuICAgICAgICAgICAgICAvLyBUcmFjayB3aGF0IHdlIHNob3VsZCBiZSBvYnNlcnZpbmc6XG4gICAgICAgICAgICAgIGNvbnN0IGdldFJhbmdlU2V0ID0gKGluZGV4TmFtZTogc3RyaW5nKSA9PiB7XG4gICAgICAgICAgICAgICAgY29uc3QgcGFydCA9IGBpZGI6Ly8ke2RiTmFtZX0vJHt0YWJsZU5hbWV9LyR7aW5kZXhOYW1lfWA7XG4gICAgICAgICAgICAgICAgcmV0dXJuIChvYnNTZXRbcGFydF0gfHxcbiAgICAgICAgICAgICAgICAgIChvYnNTZXRbcGFydF0gPSBuZXcgUmFuZ2VTZXQoKSkpIGFzIFJhbmdlU2V0O1xuICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICBjb25zdCBwa1JhbmdlU2V0ID0gZ2V0UmFuZ2VTZXQoXCJcIik7XG4gICAgICAgICAgICAgIGNvbnN0IGRlbHNSYW5nZVNldCA9IGdldFJhbmdlU2V0KFwiOmRlbHNcIik7XG4gICAgICAgICAgICAgIGNvbnN0IFtxdWVyaWVkSW5kZXgsIHF1ZXJpZWRSYW5nZXNdID0gcmVhZFN1YnNjcmliZXJzW21ldGhvZF0ocmVxKTtcbiAgICAgICAgICAgICAgLy8gQSBnZW5lcmljIHJ1bGUgaGVyZTogcXVlcmllZCByYW5nZXMgc2hvdWxkIGFsd2F5cyBiZSBzdWJzY3JpYmVkIHRvLlxuICAgICAgICAgICAgICBpZiAobWV0aG9kID09PSAncXVlcnknICYmIHF1ZXJpZWRJbmRleC5pc1ByaW1hcnlLZXkgJiYgIShyZXEgYXMgREJDb3JlUXVlcnlSZXF1ZXN0KS52YWx1ZXMpIHtcbiAgICAgICAgICAgICAgICAvLyBBIHB1cmUgcHJpbWF5LWtleSBiYXNlZCBDb2xsZWN0aW9uIHdoZXJlIG9ubHkgLnByaW1hcnlLZXlzKCkgaXMgcmVxdWVzdGVkLiBEb24ndCB3YWtldXAgb24gb3RoZXIgY2hhbmdlcyB0aGFuIGFkZGVkIG9yIGRlbGV0ZWQgcHJpbWFyeSBrZXlzIHdpdGhpbiBxdWVyaWVkIHJhbmdlLlxuICAgICAgICAgICAgICAgIGRlbHNSYW5nZVNldC5hZGQocXVlcmllZFJhbmdlcyk7XG4gICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgZ2V0UmFuZ2VTZXQocXVlcmllZEluZGV4Lm5hbWUgfHwgXCJcIikuYWRkKHF1ZXJpZWRSYW5nZXMpO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIGlmICghcXVlcmllZEluZGV4LmlzUHJpbWFyeUtleSkge1xuICAgICAgICAgICAgICAgIC8vIE9ubHkgY291bnQoKSwgcXVlcnkoKSBhbmQgb3BlbkN1cnNvcigpIG9wZXJhdGVzIG9uIHNlY29uZGFyeSBpbmRpY2VzLlxuICAgICAgICAgICAgICAgIC8vIFNpbmNlIHB1dCgpLCBkZWxldGUoKSBhbmQgZGVsZXRlUmFuZ2UoKSBtdXRhdGlvbnMgbWF5IGhhcHBlbiB3aXRob3V0IGtub3dpbmcgb2xkT2JqcyxcbiAgICAgICAgICAgICAgICAvLyB0aGUgbXV0YXRlKCkgbWV0aG9kIHdpbGwgYmUgbWlzc2luZyB3aGF0IHNlY29uZGFyeSBpbmRpY2VzIHRoYXQgYXJlIGJlaW5nIGRlbGV0ZWQgZnJvbVxuICAgICAgICAgICAgICAgIC8vIHRoZSBzdWJzY3JpYmVkIHJhbmdlLiBXZSBhcmUgd29ya2luZyBhcm91bmQgdGhpcyBpc3N1ZSBieSByZWNvcmRpbmcgYWxsIHRoZSByZXN1bHRpbmdcbiAgICAgICAgICAgICAgICAvLyBwcmltYXJ5IGtleXMgZnJvbSB0aGUgcXVlcmllcy4gVGhpcyBvbmx5IHdvcmtzIGZvciB0aG9zZSBraW5kcyBvZiBxdWVyaWVzIHdoZXJlIHdlIGNhblxuICAgICAgICAgICAgICAgIC8vIGRlcml2ZSB0aGUgcHJpbWFyeSBrZXkgZnJvbSB0aGUgcmVzdWx0LlxuICAgICAgICAgICAgICAgIC8vIEluIHRoaXMgYmxvY2sgd2UgYXJlIGFjY29tcGxpc2hpbmcgdGhpcyB1c2luZyB2YXJpb3VzIHN0cmF0ZWdpZXMgZGVwZW5kaW5nIG9uIHRoZSBwcm9wZXJ0aWVzXG4gICAgICAgICAgICAgICAgLy8gb2YgdGhlIHF1ZXJ5IHJlc3VsdC5cblxuICAgICAgICAgICAgICAgIGlmIChtZXRob2QgPT09IFwiY291bnRcIikge1xuICAgICAgICAgICAgICAgICAgLy8gV2UndmUgZ290IGEgcHJvYmxlbSEgRGVsZXRlIGFuZCBwdXQgbXV0YXRpb25zIGhhcHBlbiB3aXRob3V0IGtub3duIHRoZSBvbGRPYmpzLlxuICAgICAgICAgICAgICAgICAgLy8gVGhvc2UgbXV0YXRpb24gY291bGQgY2hhbmdlIHRoZSBjb3VudC5cbiAgICAgICAgICAgICAgICAgIC8vIFNvbHV0aW9uOiBEZWRpY2F0ZWQgXCI6ZGVsc1wiIHVybCByZXByZXNlbmRzIGEgc3Vic2NyaXB0aW9uIHRvIGFsbCBtdXRhdGlvbnMgd2l0aG91dCBvbGRPYmpzXG4gICAgICAgICAgICAgICAgICAvLyAoc3BlY2lhbGx5IHRyaWdnZXJlZCBpbiB0aGUgbXV0YXRvcnMgcHV0KCksIGRlbGV0ZSgpIGFuZCBkZWxldGVSYW5nZSgpIHdoZW4gdGhleSBkb24ndCBrbm93IG9sZE9iamVjdClcbiAgICAgICAgICAgICAgICAgIGRlbHNSYW5nZVNldC5hZGQoRlVMTF9SQU5HRSk7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgIC8vIG9wZW5DdXJzb3IoKSBvciBxdWVyeSgpXG5cbiAgICAgICAgICAgICAgICAgIC8vIFByZXBhcmUgYSBrZXlzUHJvbWlzZSBpbiBjYXNlIHRoZSB3ZSdyZSBkb2luZyBhbiBJREJJbmRleC5nZXRBbGwoKSBvbiBhIHN0b3JlIHdpdGggb3V0Ym91bmQga2V5cy5cbiAgICAgICAgICAgICAgICAgIGNvbnN0IGtleXNQcm9taXNlID1cbiAgICAgICAgICAgICAgICAgICAgbWV0aG9kID09PSBcInF1ZXJ5XCIgJiZcbiAgICAgICAgICAgICAgICAgICAgb3V0Ym91bmQgJiZcbiAgICAgICAgICAgICAgICAgICAgKHJlcSBhcyBEQkNvcmVRdWVyeVJlcXVlc3QpLnZhbHVlcyAmJlxuICAgICAgICAgICAgICAgICAgICB0YWJsZS5xdWVyeSh7XG4gICAgICAgICAgICAgICAgICAgICAgLi4uKHJlcSBhcyBEQkNvcmVRdWVyeVJlcXVlc3QpLFxuICAgICAgICAgICAgICAgICAgICAgIHZhbHVlczogZmFsc2UsXG4gICAgICAgICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAgICAgICByZXR1cm4gdGFibGVbbWV0aG9kXS5hcHBseSh0aGlzLCBhcmd1bWVudHMpLnRoZW4oKHJlcykgPT4ge1xuICAgICAgICAgICAgICAgICAgICBpZiAobWV0aG9kID09PSBcInF1ZXJ5XCIpIHtcbiAgICAgICAgICAgICAgICAgICAgICBpZiAob3V0Ym91bmQgJiYgKHJlcSBhcyBEQkNvcmVRdWVyeVJlcXVlc3QpLnZhbHVlcykge1xuICAgICAgICAgICAgICAgICAgICAgICAgLy8gSWYga2V5cyBhcmUgb3V0Ym91bmQsIHdlIGNhbid0IHVzZSBleHRyYWN0S2V5IHRvIG1hcCB3aGF0IGtleXMgdG8gb2JzZXJ2ZS5cbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIFdlJ3ZlIHF1ZXJpZWQgYW4gaW5kZXggKGxpa2UgJ2RhdGVUaW1lJykgb24gYW4gb3V0Ym91bmQgdGFibGVcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIGFuZCByZXRyaWV2ZSBhIGxpc3Qgb2Ygb2JqZWN0c1xuICAgICAgICAgICAgICAgICAgICAgICAgLy8gZnJvbSB3aG8gd2UgY2Fubm90IGtub3cgdGhlaXIgcHJpbWFyeSBrZXlzLlxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gXCJMdWNraWx5XCIgdGhvdWdoLCB3ZSd2ZSBwcmVwYXJlZCB0aGUga2V5c1Byb21pc2UgdG8gYXNzaXN0IHVzIGluIGV4YWN0IHRoaXMgY29uZGl0aW9uLlxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGtleXNQcm9taXNlLnRoZW4oXG4gICAgICAgICAgICAgICAgICAgICAgICAgICh7IHJlc3VsdDogcmVzdWx0aW5nS2V5cyB9OiBEQkNvcmVRdWVyeVJlc3BvbnNlKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcGtSYW5nZVNldC5hZGRLZXlzKHJlc3VsdGluZ0tleXMpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiByZXM7XG4gICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgIC8vIHF1ZXJ5KCkgaW5ib3VuZCB2YWx1ZXMsIGtleXMgb3Igb3V0Ym91bmQga2V5cy4gU2Vjb25kYXJ5IGluZGV4ZXMgb25seSBzaW5jZVxuICAgICAgICAgICAgICAgICAgICAgIC8vIGZvciBwcmltYXJ5IGtleXMgd2Ugd291bGQgb25seSBhZGQgcmVzdWx0cyB3aXRoaW4gdGhlIGFscmVhZHkgcmVnaXN0ZXJlZCByYW5nZS5cbiAgICAgICAgICAgICAgICAgICAgICBjb25zdCBwS2V5cyA9IChyZXEgYXMgREJDb3JlUXVlcnlSZXF1ZXN0KS52YWx1ZXNcbiAgICAgICAgICAgICAgICAgICAgICAgID8gKHJlcyBhcyBEQkNvcmVRdWVyeVJlc3BvbnNlKS5yZXN1bHQubWFwKGV4dHJhY3RLZXkpXG4gICAgICAgICAgICAgICAgICAgICAgICA6IChyZXMgYXMgREJDb3JlUXVlcnlSZXNwb25zZSkucmVzdWx0O1xuICAgICAgICAgICAgICAgICAgICAgIGlmICgocmVxIGFzIERCQ29yZVF1ZXJ5UmVxdWVzdCkudmFsdWVzKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBTdWJzY3JpYmUgdG8gYW55IG11dGF0aW9uIG1hZGUgb24gdGhlIHJldHVybmVkIGtleXMsXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBzbyB0aGF0IHdlIGRldGVjdCBib3RoIGRlbGV0aW9ucyBhbmQgdXBkYXRlZCBwcm9wZXJ0aWVzLlxuICAgICAgICAgICAgICAgICAgICAgICAgcGtSYW5nZVNldC5hZGRLZXlzKHBLZXlzKTtcbiAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgLy8gU3Vic2NyaWJlIG9ubHkgdG8gbXV0YXRpb25zIG9uIHRoZSByZXR1cm5lZCBrZXlzXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBpbiBjYXNlIHRoZSBtdXRhdG9yIHdhcyB1bmFibGUgdG8ga25vdyBvbGRPYmpzLlxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gSWYgaXQgaGFzIG9sZE9iaiwgdGhlIG11dGF0b3Igd29uJ3QgcHV0IGFueXRoaW5nIGluIFwiOmRlbHNcIiBiZWNhdXNlXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBpdCBjYW4gbW9yZSBmaW5lLWdyYWluZWQgcHV0IHRoZSBleGFjdCByZW1vdmVkIGFuZCBhZGRlZCBpbmRleCB2YWx1ZSBpbiB0aGUgY29ycmVjdFxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gaW5kZXggcmFuZ2UgdGhhdCB3ZSBzdWJzY3JpYmUgdG8gaW4gdGhlIHF1ZXJpZWQgcmFuZ2Ugc2V0cy5cbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIFdlIGRvbid0IGxvYWQgdmFsdWVzIHNvIGEgY2hhbmdlIG9uIGEgcHJvcGVydHkgb3V0c2lkZSBvdXIgaW5kZXggd2lsbCBub3RcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIHJlcXVpcmUgdXMgdG8gcmUtZXhlY3V0ZSB0aGUgcXVlcnkuXG4gICAgICAgICAgICAgICAgICAgICAgICBkZWxzUmFuZ2VTZXQuYWRkS2V5cyhwS2V5cyk7XG4gICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKG1ldGhvZCA9PT0gXCJvcGVuQ3Vyc29yXCIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAvLyBDYWxsZXIgcmVxdWVzdHMgYSBjdXJzb3IuXG4gICAgICAgICAgICAgICAgICAgICAgLy8gRm9yIHRoZSBzYW1lIHJlYXNvbiBhcyB3aGVuIG1ldGhvZD09PVwicXVlcnlcIiwgd2Ugb25seSBuZWVkIHRvIG9ic2VydmVcbiAgICAgICAgICAgICAgICAgICAgICAvLyB0aG9zZSBrZXlzIHdob3NlIHZhbHVlcyBhcmUgcG9zc2libHkgdXNlZCBvciByZW5kZXJlZCAtIHdoaWNoIGNvdWxkXG4gICAgICAgICAgICAgICAgICAgICAgLy8gb25seSBoYXBwZW4gb24ga2V5cyB3aGVyZSB0aGV5IGdldCB0aGUgY3Vyc29yJ3Mga2V5LCBwcmltYXJ5S2V5IG9yIHZhbHVlLlxuICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGN1cnNvcjogREJDb3JlQ3Vyc29yIHwgbnVsbCA9IHJlcztcbiAgICAgICAgICAgICAgICAgICAgICBjb25zdCB3YW50VmFsdWVzID0gKHJlcSBhcyBEQkNvcmVPcGVuQ3Vyc29yUmVxdWVzdCkudmFsdWVzO1xuICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAoXG4gICAgICAgICAgICAgICAgICAgICAgICBjdXJzb3IgJiZcbiAgICAgICAgICAgICAgICAgICAgICAgIE9iamVjdC5jcmVhdGUoY3Vyc29yLCB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgIGtleToge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGdldCgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRlbHNSYW5nZVNldC5hZGRLZXkoY3Vyc29yLnByaW1hcnlLZXkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGN1cnNvci5rZXk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgcHJpbWFyeUtleToge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGdldCgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHBrZXkgPSBjdXJzb3IucHJpbWFyeUtleTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRlbHNSYW5nZVNldC5hZGRLZXkocGtleSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gcGtleTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZToge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGdldCgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHdhbnRWYWx1ZXMgJiYgcGtSYW5nZVNldC5hZGRLZXkoY3Vyc29yLnByaW1hcnlLZXkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGN1cnNvci52YWx1ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiByZXM7XG4gICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiB0YWJsZVttZXRob2RdLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gICAgICAgICAgfTtcbiAgICAgICAgfSk7XG4gICAgICAgIHJldHVybiB0YWJsZUNsb25lO1xuICAgICAgfSxcbiAgICB9O1xuICB9LFxufTtcblxuZnVuY3Rpb24gdHJhY2tBZmZlY3RlZEluZGV4ZXMoXG4gIGdldFJhbmdlU2V0OiAoaW5kZXg6IHN0cmluZykgPT4gUmFuZ2VTZXQsXG4gIHNjaGVtYTogREJDb3JlVGFibGVTY2hlbWEsXG4gIG9sZE9ianM6IHJlYWRvbmx5IGFueVtdIHwgdW5kZWZpbmVkLFxuICBuZXdPYmpzOiByZWFkb25seSBhbnlbXSB8IHVuZGVmaW5lZFxuKSB7XG4gIGZ1bmN0aW9uIGFkZEFmZmVjdGVkSW5kZXgoaXg6IERCQ29yZUluZGV4KSB7XG4gICAgY29uc3QgcmFuZ2VTZXQgPSBnZXRSYW5nZVNldChpeC5uYW1lIHx8IFwiXCIpO1xuICAgIGZ1bmN0aW9uIGV4dHJhY3RLZXkob2JqOiBhbnkpIHtcbiAgICAgIHJldHVybiBvYmogIT0gbnVsbCA/IGl4LmV4dHJhY3RLZXkob2JqKSA6IG51bGw7XG4gICAgfVxuICAgIGNvbnN0IGFkZEtleU9yS2V5cyA9IChrZXk6IGFueSkgPT4gaXgubXVsdGlFbnRyeSAmJiBpc0FycmF5KGtleSlcbiAgICAgIC8vIG11bHRpRW50cnkgYW5kIHRoZSBvbGQgcHJvcGVydHkgd2FzIGFuIGFycmF5IC0gYWRkIGVhY2ggYXJyYXkgZW50cnkgdG8gdGhlIHJhbmdlU2V0OlxuICAgICAgPyBrZXkuZm9yRWFjaChrZXkgPT4gcmFuZ2VTZXQuYWRkS2V5KGtleSkpXG4gICAgICAvLyBOb3QgbXVsdGlFbnRyeSBvciB0aGUgb2xkIHByb3BlcnR5IHdhcyBub3QgYW4gYXJyYXkgLSBhZGQgZWFjaCBhcnJheSBlbnRyeSB0byB0aGUgcmFuZ2VTZXQ6XG4gICAgICA6IHJhbmdlU2V0LmFkZEtleShrZXkpO1xuXG4gICAgKG9sZE9ianMgfHwgbmV3T2JqcykuZm9yRWFjaCgoXywgaSkgPT4ge1xuICAgICAgY29uc3Qgb2xkS2V5ID0gb2xkT2JqcyAmJiBleHRyYWN0S2V5KG9sZE9ianNbaV0pO1xuICAgICAgY29uc3QgbmV3S2V5ID0gbmV3T2JqcyAmJiBleHRyYWN0S2V5KG5ld09ianNbaV0pO1xuICAgICAgaWYgKGNtcChvbGRLZXksIG5ld0tleSkgIT09IDApIHtcbiAgICAgICAgLy8gVGhlIGluZGV4IGhhcyBjaGFuZ2VkLiBBZGQgYm90aCBvbGQgYW5kIG5ldyB2YWx1ZSBvZiB0aGUgaW5kZXguXG4gICAgICAgIGlmIChvbGRLZXkgIT0gbnVsbCkgYWRkS2V5T3JLZXlzKG9sZEtleSk7IC8vIElmIG9sZEtleSBpcyBpbnZhbGlkIGtleSwgYWRkS2V5KCkgd2lsbCBiZSBhIG5vb3AuXG4gICAgICAgIGlmIChuZXdLZXkgIT0gbnVsbCkgYWRkS2V5T3JLZXlzKG5ld0tleSk7IC8vIElmIG5ld0tleSBpcyBpbnZhbGlkIGtleSwgYWRkS2V5KCkgd2lsbCBiZSBhIG5vb3AuXG4gICAgICB9XG4gICAgfSk7XG4gIH1cbiAgc2NoZW1hLmluZGV4ZXMuZm9yRWFjaChhZGRBZmZlY3RlZEluZGV4KTtcbn1cbiIsICJpbXBvcnQgeyBkZWxBcnJheUl0ZW0sIGlzQXJyYXkgfSBmcm9tICcuLi8uLi9mdW5jdGlvbnMvdXRpbHMnO1xuaW1wb3J0IHsgVGJsUXVlcnlDYWNoZSB9IGZyb20gJy4uLy4uL3B1YmxpYy90eXBlcy9jYWNoZSc7XG5pbXBvcnQge1xuICBEQkNvcmVNdXRhdGVSZXF1ZXN0LFxuICBEQkNvcmVNdXRhdGVSZXNwb25zZSxcbn0gZnJvbSAnLi4vLi4vcHVibGljL3R5cGVzL2RiY29yZSc7XG5cbmV4cG9ydCBmdW5jdGlvbiBhZGp1c3RPcHRpbWlzdGljRnJvbUZhaWx1cmVzKFxuICB0YmxDYWNoZTogVGJsUXVlcnlDYWNoZSxcbiAgcmVxOiBEQkNvcmVNdXRhdGVSZXF1ZXN0LFxuICByZXM6IERCQ29yZU11dGF0ZVJlc3BvbnNlXG4pOiBEQkNvcmVNdXRhdGVSZXF1ZXN0IHtcbiAgaWYgKHJlcy5udW1GYWlsdXJlcyA9PT0gMCkgcmV0dXJuIHJlcTtcbiAgaWYgKHJlcS50eXBlID09PSAnZGVsZXRlUmFuZ2UnKSB7XG4gICAgLy8gbnVtRmFpbHVyZXMgPiAwIG1lYW5zIHRoZSBkZWxldGVSYW5nZSBvcGVyYXRpb24gZmFpbGVkIGluIGl0cyB3aG9sZS5cbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuXG4gIGNvbnN0IG51bUJ1bGtPcHMgPSByZXEua2V5c1xuICAgID8gcmVxLmtleXMubGVuZ3RoXG4gICAgOiAndmFsdWVzJyBpbiByZXEgJiYgcmVxLnZhbHVlc1xuICAgID8gcmVxLnZhbHVlcy5sZW5ndGhcbiAgICA6IDE7XG4gIGlmIChyZXMubnVtRmFpbHVyZXMgPT09IG51bUJ1bGtPcHMpIHtcbiAgICAvLyBTYW1lIG51bWJlciBvZiBmYWlsdXJlcyBhcyB0aGUgbnVtYmVyIG9mIG9wcy4gVGhpcyBtZWFucyB0aGF0IGFsbCBvcHMgZmFpbGVkLlxuICAgIHJldHVybiBudWxsO1xuICB9XG5cbiAgY29uc3QgY2xvbmU6IERCQ29yZU11dGF0ZVJlcXVlc3QgPSB7IC4uLnJlcSB9O1xuXG4gIGlmIChpc0FycmF5KGNsb25lLmtleXMpKSB7XG4gICAgY2xvbmUua2V5cyA9IGNsb25lLmtleXMuZmlsdGVyKChfLCBpKSA9PiAhKGkgaW4gcmVzLmZhaWx1cmVzKSk7XG4gIH1cbiAgaWYgKCd2YWx1ZXMnIGluIGNsb25lICYmIGlzQXJyYXkoY2xvbmUudmFsdWVzKSkge1xuICAgIGNsb25lLnZhbHVlcyA9IGNsb25lLnZhbHVlcy5maWx0ZXIoKF8sIGkpID0+ICEoaSBpbiByZXMuZmFpbHVyZXMpKTtcbiAgfVxuICByZXR1cm4gY2xvbmU7XG59XG4iLCAiaW1wb3J0IHsgY21wIH0gZnJvbSAnLi4vLi4vZnVuY3Rpb25zL2NtcCc7XG5pbXBvcnQgeyBJbmRleGFibGVUeXBlIH0gZnJvbSAnLi4vLi4vcHVibGljJztcbmltcG9ydCB7IERCQ29yZUtleVJhbmdlIH0gZnJvbSAnLi4vLi4vcHVibGljL3R5cGVzL2RiY29yZSc7XG5cbmV4cG9ydCBmdW5jdGlvbiBpc0Fib3ZlTG93ZXIoa2V5OiBJbmRleGFibGVUeXBlLCByYW5nZTogREJDb3JlS2V5UmFuZ2UpIHtcbiAgcmV0dXJuIHJhbmdlLmxvd2VyID09PSB1bmRlZmluZWRcbiAgICA/IHRydWUgLy8gbG93ZXIgaXMgbGVzcyB0aGFuIGFueXRoaW5nIGJlY2F1c2UgaXQgaXMgdW5kZWZpbmVkXG4gICAgOiByYW5nZS5sb3dlck9wZW5cbiAgICA/IGNtcChrZXksIHJhbmdlLmxvd2VyKSA+IDAgLy8gbG93ZXJPcGVuOiBFeGNsdWRlIGxvd2VyIGJvdW5kXG4gICAgOiBjbXAoa2V5LCByYW5nZS5sb3dlcikgPj0gMDsgLy8gIWxvd2VyT3BlbjogSW5jbHVkZSBsb3dlciBib3VuZFxufVxuXG5leHBvcnQgZnVuY3Rpb24gaXNCZWxvd1VwcGVyKGtleTogSW5kZXhhYmxlVHlwZSwgcmFuZ2U6IERCQ29yZUtleVJhbmdlKSB7XG4gIHJldHVybiByYW5nZS51cHBlciA9PT0gdW5kZWZpbmVkXG4gICAgPyB0cnVlIC8vIHVwcGVyIGlzIGdyZWF0ZXIgdGhhbiBhbnl0aGluZyBiZWNhdXNlIGl0IGlzIHVuZGVmaW5lZFxuICAgIDogcmFuZ2UudXBwZXJPcGVuXG4gICAgPyBjbXAoa2V5LCByYW5nZS51cHBlcikgPCAwIC8vIHVwcGVyT3BlbjogRXhjbHVkZSB1cHBlciBib3VuZFxuICAgIDogY21wKGtleSwgcmFuZ2UudXBwZXIpIDw9IDA7IC8vICF1cHBlck9wZW46IEluY2x1ZGUgdXBwZXIgYm91bmRcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGlzV2l0aGluUmFuZ2Uoa2V5OiBJbmRleGFibGVUeXBlLCByYW5nZTogREJDb3JlS2V5UmFuZ2UpIHtcbiAgcmV0dXJuIGlzQWJvdmVMb3dlcihrZXksIHJhbmdlKSAmJiBpc0JlbG93VXBwZXIoa2V5LCByYW5nZSk7XG59XG4iLCAiaW1wb3J0IHsgY21wIH0gZnJvbSAnLi4vLi4vZnVuY3Rpb25zL2NtcCc7XG5pbXBvcnQgeyBpc0FycmF5IH0gZnJvbSAnLi4vLi4vZnVuY3Rpb25zL3V0aWxzJztcbmltcG9ydCB7IFJhbmdlU2V0IH0gZnJvbSAnLi4vLi4vaGVscGVycy9yYW5nZXNldCc7XG5pbXBvcnQgeyBDYWNoZUVudHJ5IH0gZnJvbSAnLi4vLi4vcHVibGljL3R5cGVzL2NhY2hlJztcbmltcG9ydCB7XG4gIERCQ29yZU11dGF0ZVJlcXVlc3QsXG4gIERCQ29yZVF1ZXJ5UmVxdWVzdCxcbiAgREJDb3JlVGFibGUsXG59IGZyb20gJy4uLy4uL3B1YmxpYy90eXBlcy9kYmNvcmUnO1xuaW1wb3J0IHsgaXNXaXRoaW5SYW5nZSB9IGZyb20gJy4vaXMtd2l0aGluLXJhbmdlJztcblxuZXhwb3J0IGZ1bmN0aW9uIGFwcGx5T3B0aW1pc3RpY09wcyhcbiAgcmVzdWx0OiBhbnlbXSxcbiAgcmVxOiBEQkNvcmVRdWVyeVJlcXVlc3QsXG4gIG9wczogREJDb3JlTXV0YXRlUmVxdWVzdFtdIHwgdW5kZWZpbmVkLFxuICB0YWJsZTogREJDb3JlVGFibGUsXG4gIGNhY2hlRW50cnk6IENhY2hlRW50cnksXG4gIGltbXV0YWJsZTogYm9vbGVhblxuKTogYW55W10ge1xuICBpZiAoIW9wcyB8fCBvcHMubGVuZ3RoID09PSAwKSByZXR1cm4gcmVzdWx0O1xuICBjb25zdCBpbmRleCA9IHJlcS5xdWVyeS5pbmRleDtcbiAgY29uc3QgeyBtdWx0aUVudHJ5IH0gPSBpbmRleDtcbiAgY29uc3QgcXVlcnlSYW5nZSA9IHJlcS5xdWVyeS5yYW5nZTtcbiAgY29uc3QgcHJpbWFyeUtleSA9IHRhYmxlLnNjaGVtYS5wcmltYXJ5S2V5O1xuICBjb25zdCBleHRyYWN0UHJpbUtleSA9IHByaW1hcnlLZXkuZXh0cmFjdEtleSE7XG4gIGNvbnN0IGV4dHJhY3RJbmRleCA9IGluZGV4LmV4dHJhY3RLZXkhO1xuICBjb25zdCBleHRyYWN0TG93TGV2ZWxJbmRleCA9IChpbmRleC5sb3dMZXZlbEluZGV4IHx8IGluZGV4KS5leHRyYWN0S2V5ITtcblxuICBsZXQgZmluYWxSZXN1bHQgPSBvcHMucmVkdWNlKChyZXN1bHQsIG9wKSA9PiB7XG4gICAgbGV0IG1vZGlmZWRSZXN1bHQgPSByZXN1bHQ7XG4gICAgY29uc3QgaW5jbHVkZWRWYWx1ZXM6IGFueVtdID0gW107XG4gICAgaWYgKG9wLnR5cGUgPT09ICdhZGQnIHx8IG9wLnR5cGUgPT09ICdwdXQnKSB7XG4gICAgICBjb25zdCBpbmNsdWRlZFBLcyA9IG5ldyBSYW5nZVNldCgpOyAvLyBGb3IgaWdub3JpbmcgZHVwbGljYXRlc1xuICAgICAgZm9yIChsZXQgaSA9IG9wLnZhbHVlcy5sZW5ndGggLSAxOyBpID49IDA7IC0taSkge1xuICAgICAgICAvLyBiYWNrd2FyZHMgdG8gcHJpb3JpdGl6ZSBsYXN0IHZhbHVlIG9mIHNhbWUgUEtcbiAgICAgICAgY29uc3QgdmFsdWUgPSBvcC52YWx1ZXNbaV07XG4gICAgICAgIGNvbnN0IHBrID0gZXh0cmFjdFByaW1LZXkodmFsdWUpO1xuICAgICAgICBpZiAoaW5jbHVkZWRQS3MuaGFzS2V5KHBrKSkgY29udGludWU7XG4gICAgICAgIGNvbnN0IGtleSA9IGV4dHJhY3RJbmRleCh2YWx1ZSk7XG4gICAgICAgIGlmIChcbiAgICAgICAgICBtdWx0aUVudHJ5ICYmIGlzQXJyYXkoa2V5KVxuICAgICAgICAgICAgPyBrZXkuc29tZSgoaykgPT4gaXNXaXRoaW5SYW5nZShrLCBxdWVyeVJhbmdlKSlcbiAgICAgICAgICAgIDogaXNXaXRoaW5SYW5nZShrZXksIHF1ZXJ5UmFuZ2UpXG4gICAgICAgICkge1xuICAgICAgICAgIGluY2x1ZGVkUEtzLmFkZEtleShwayk7XG4gICAgICAgICAgaW5jbHVkZWRWYWx1ZXMucHVzaCh2YWx1ZSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gICAgc3dpdGNoIChvcC50eXBlKSB7XG4gICAgICBjYXNlICdhZGQnOlxuICAgICAgICBtb2RpZmVkUmVzdWx0ID0gcmVzdWx0LmNvbmNhdChcbiAgICAgICAgICByZXEudmFsdWVzXG4gICAgICAgICAgICA/IGluY2x1ZGVkVmFsdWVzXG4gICAgICAgICAgICA6IGluY2x1ZGVkVmFsdWVzLm1hcCgodikgPT4gZXh0cmFjdFByaW1LZXkodikpXG4gICAgICAgICk7XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSAncHV0JzpcbiAgICAgICAgY29uc3Qga2V5U2V0ID0gbmV3IFJhbmdlU2V0KCkuYWRkS2V5cyhcbiAgICAgICAgICBvcC52YWx1ZXMubWFwKCh2KSA9PiBleHRyYWN0UHJpbUtleSh2KSlcbiAgICAgICAgKTtcbiAgICAgICAgbW9kaWZlZFJlc3VsdCA9IHJlc3VsdFxuICAgICAgICAgIC5maWx0ZXIoXG4gICAgICAgICAgICAvLyBSZW1vdmUgYWxsIGl0ZW1zIHRoYXQgYXJlIGJlaW5nIHJlcGxhY2VkXG4gICAgICAgICAgICAoaXRlbSkgPT4gIWtleVNldC5oYXNLZXkocmVxLnZhbHVlcyA/IGV4dHJhY3RQcmltS2V5KGl0ZW0pIDogaXRlbSlcbiAgICAgICAgICApXG4gICAgICAgICAgLmNvbmNhdChcbiAgICAgICAgICAgIC8vIEFkZCBhbGwgaXRlbXMgdGhhdCBhcmUgYmVpbmcgcHV0IChzb3J0aW5nIHdpbGwgYmUgZG9uZSBsYXRlcilcbiAgICAgICAgICAgIHJlcS52YWx1ZXNcbiAgICAgICAgICAgICAgPyBpbmNsdWRlZFZhbHVlc1xuICAgICAgICAgICAgICA6IGluY2x1ZGVkVmFsdWVzLm1hcCgodikgPT4gZXh0cmFjdFByaW1LZXkodikpXG4gICAgICAgICAgKTtcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlICdkZWxldGUnOlxuICAgICAgICBjb25zdCBrZXlzVG9EZWxldGUgPSBuZXcgUmFuZ2VTZXQoKS5hZGRLZXlzKG9wLmtleXMpO1xuICAgICAgICBtb2RpZmVkUmVzdWx0ID0gcmVzdWx0LmZpbHRlcihcbiAgICAgICAgICAoaXRlbSkgPT4gIWtleXNUb0RlbGV0ZS5oYXNLZXkocmVxLnZhbHVlcyA/IGV4dHJhY3RQcmltS2V5KGl0ZW0pIDogaXRlbSlcbiAgICAgICAgKTtcblxuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgJ2RlbGV0ZVJhbmdlJzpcbiAgICAgICAgY29uc3QgcmFuZ2UgPSBvcC5yYW5nZTtcbiAgICAgICAgbW9kaWZlZFJlc3VsdCA9IHJlc3VsdC5maWx0ZXIoKGl0ZW0pID0+ICFpc1dpdGhpblJhbmdlKGV4dHJhY3RQcmltS2V5KGl0ZW0pLCByYW5nZSkpO1xuICAgICAgICBicmVhaztcbiAgICB9XG4gICAgcmV0dXJuIG1vZGlmZWRSZXN1bHQ7XG4gIH0sIHJlc3VsdCk7XG5cbiAgLy8gSWYgbm8gY2hhbmdlcyB3ZXJlIG1hZGUsIHdlIGNhbiByZXR1cm4gdGhlIG9yaWdpbmFsIHJlc3VsdC5cbiAgaWYgKGZpbmFsUmVzdWx0ID09PSByZXN1bHQpIHJldHVybiByZXN1bHQ7XG5cbiAgLy8gU29ydCB0aGUgcmVzdWx0IG9uIHNvcnRJbmRleDpcbiAgZmluYWxSZXN1bHQuc29ydCgoYSwgYikgPT5cbiAgICBjbXAoZXh0cmFjdExvd0xldmVsSW5kZXgoYSksIGV4dHJhY3RMb3dMZXZlbEluZGV4KGIpKSB8fFxuICAgIGNtcChleHRyYWN0UHJpbUtleShhKSwgZXh0cmFjdFByaW1LZXkoYikpXG4gICk7XG5cbiAgLy8gSWYgd2UgaGF2ZSBhIGxpbWl0IHdlIG5lZWQgdG8gcmVzcGVjdCBpdDpcbiAgaWYgKHJlcS5saW1pdCAmJiByZXEubGltaXQgPCBJbmZpbml0eSkge1xuICAgIGlmIChmaW5hbFJlc3VsdC5sZW5ndGggPiByZXEubGltaXQpIHtcbiAgICAgIGZpbmFsUmVzdWx0Lmxlbmd0aCA9IHJlcS5saW1pdDsgLy8gQ3V0IG9mIGFueSBleHRyYXMgYWZ0ZXIgc29ydGluZyBjb3JyZWN0bHkuXG4gICAgfSBlbHNlIGlmIChyZXN1bHQubGVuZ3RoID09PSByZXEubGltaXQgJiYgZmluYWxSZXN1bHQubGVuZ3RoIDwgcmVxLmxpbWl0KSB7XG4gICAgICAvLyBXZSdyZSBtaXNzaW5nIHNvbWUgaXRlbXMgYmVjYXVzZSBvZiB0aGUgbGltaXQuIFdlIG5lZWQgdG8gYWRkIHRoZW0gYmFjay5cbiAgICAgIC8vIFRoZSBlYXNpZXN0IHdheSBpcyB0byBtYXJrIHRoZSBjYWNoZSBlbnRyeSBhcyBkaXJ0eSwgd2hpY2ggd2lsbCBjYXVzZVxuICAgICAgLy8gaXQgdG8gYmUgcmVxdWVyaWVkIGFmdGVyIHRoZSB3cml0ZS10cmFuc2FjdGlvbiBzdWNjZXNzZnVsbHkgY29tcGxldGVzLlxuICAgICAgY2FjaGVFbnRyeS5kaXJ0eSA9IHRydWU7XG4gICAgfVxuICB9XG4gIHJldHVybiBpbW11dGFibGUgPyBPYmplY3QuZnJlZXplKGZpbmFsUmVzdWx0KSBhcyBhbnlbXSA6IGZpbmFsUmVzdWx0O1xufVxuIiwgImltcG9ydCB7IGNtcCB9IGZyb20gJy4uLy4uL2Z1bmN0aW9ucy9jbXAnO1xuaW1wb3J0IHsgREJDb3JlS2V5UmFuZ2UgfSBmcm9tICcuLi8uLi9wdWJsaWMvdHlwZXMvZGJjb3JlJztcblxuZXhwb3J0IGZ1bmN0aW9uIGFyZVJhbmdlc0VxdWFsKHIxOiBEQkNvcmVLZXlSYW5nZSwgcjI6IERCQ29yZUtleVJhbmdlKSB7XG4gIHJldHVybiAoXG4gICAgY21wKHIxLmxvd2VyLCByMi5sb3dlcikgPT09IDAgJiZcbiAgICBjbXAocjEudXBwZXIsIHIyLnVwcGVyKSA9PT0gMCAmJlxuICAgICEhcjEubG93ZXJPcGVuID09PSAhIXIyLmxvd2VyT3BlbiAmJlxuICAgICEhcjEudXBwZXJPcGVuID09PSAhIXIyLnVwcGVyT3BlblxuICApO1xufVxuIiwgImltcG9ydCB7IGNtcCB9IGZyb20gJy4uLy4uL2Z1bmN0aW9ucy9jbXAnO1xuaW1wb3J0IHsgREJDb3JlS2V5UmFuZ2UgfSBmcm9tICcuLi8uLi9wdWJsaWMvdHlwZXMvZGJjb3JlJztcblxuZXhwb3J0IGZ1bmN0aW9uIGNvbXBhcmVMb3dlcnMobG93ZXIxOiBhbnksIGxvd2VyMjogYW55LCBsb3dlck9wZW4xOiBib29sZWFuLCBsb3dlck9wZW4yOiBib29sZWFuKSB7XG4gIGlmIChsb3dlcjEgPT09IHVuZGVmaW5lZCkgcmV0dXJuIGxvd2VyMiAhPT0gdW5kZWZpbmVkID8gLTEgOiAwO1xuICBpZiAobG93ZXIyID09PSB1bmRlZmluZWQpIHJldHVybiAxOyAvLyBzaW5jZSBsb3dlcjEgIT09IHVuZGVmaW5lZFxuICBjb25zdCBjID0gY21wKGxvd2VyMSwgbG93ZXIyKTtcbiAgaWYgKGMgPT09IDApIHtcbiAgICBpZiAobG93ZXJPcGVuMSAmJiBsb3dlck9wZW4yKSByZXR1cm4gMDtcbiAgICBpZiAobG93ZXJPcGVuMSkgcmV0dXJuIDFcbiAgICBpZiAobG93ZXJPcGVuMikgcmV0dXJuIC0xO1xuICB9XG4gIHJldHVybiBjO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gY29tcGFyZVVwcGVycyh1cHBlcjE6IGFueSwgdXBwZXIyOiBhbnksIHVwcGVyT3BlbjE6IGJvb2xlYW4sIHVwcGVyT3BlbjI6IGJvb2xlYW4pIHtcbiAgaWYgKHVwcGVyMSA9PT0gdW5kZWZpbmVkKSByZXR1cm4gdXBwZXIyICE9PSB1bmRlZmluZWQgPyAxIDogMDtcbiAgaWYgKHVwcGVyMiA9PT0gdW5kZWZpbmVkKSByZXR1cm4gLTE7IC8vIHNpbmNlIHVwcGVyMSAhPT0gdW5kZWZpbmVkXG4gIGNvbnN0IGMgPSBjbXAodXBwZXIxLCB1cHBlcjIpO1xuICBpZiAoYyA9PT0gMCkge1xuICAgIGlmICh1cHBlck9wZW4xICYmIHVwcGVyT3BlbjIpIHJldHVybiAwO1xuICAgIGlmICh1cHBlck9wZW4xKSByZXR1cm4gLTFcbiAgICBpZiAodXBwZXJPcGVuMikgcmV0dXJuIDE7XG4gIH1cbiAgcmV0dXJuIGM7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBpc1N1cGVyUmFuZ2UocjE6IERCQ29yZUtleVJhbmdlLCByMjogREJDb3JlS2V5UmFuZ2UpIHtcbiAgcmV0dXJuIChcbiAgICBjb21wYXJlTG93ZXJzKHIxLmxvd2VyLCByMi5sb3dlciwgcjEubG93ZXJPcGVuLCByMi5sb3dlck9wZW4pIDw9IDAgJiZcbiAgICBjb21wYXJlVXBwZXJzKHIxLnVwcGVyLCByMi51cHBlciwgcjEudXBwZXJPcGVuLCByMi51cHBlck9wZW4pID49IDBcbiAgKTtcbn0iLCAiaW1wb3J0IHsgQ2FjaGVFbnRyeSwgVGJsUXVlcnlDYWNoZSB9IGZyb20gJy4uLy4uL3B1YmxpYy90eXBlcy9jYWNoZSc7XG5pbXBvcnQge1xuICBEQkNvcmVDb3VudFJlcXVlc3QsXG4gIERCQ29yZVF1ZXJ5UmVxdWVzdCxcbn0gZnJvbSAnLi4vLi4vcHVibGljL3R5cGVzL2RiY29yZSc7XG5pbXBvcnQgeyBhcmVSYW5nZXNFcXVhbCB9IGZyb20gJy4vYXJlLXJhbmdlcy1lcXVhbCc7XG5pbXBvcnQgeyBjYWNoZSB9IGZyb20gJy4vY2FjaGUnO1xuaW1wb3J0IHsgaXNTdXBlclJhbmdlIH0gZnJvbSAnLi9pcy1zdXBlci1yYW5nZSc7XG5cbmV4cG9ydCBmdW5jdGlvbiBmaW5kQ29tcGF0aWJsZVF1ZXJ5KFxuICBkYk5hbWU6IHN0cmluZyxcbiAgdGFibGVOYW1lOiBzdHJpbmcsXG4gIHR5cGU6ICdxdWVyeScsXG4gIHJlcTogREJDb3JlUXVlcnlSZXF1ZXN0XG4pOiBbXSB8IFtDYWNoZUVudHJ5LCBib29sZWFuLCBUYmxRdWVyeUNhY2hlLCBDYWNoZUVudHJ5W11dO1xuZXhwb3J0IGZ1bmN0aW9uIGZpbmRDb21wYXRpYmxlUXVlcnkoXG4gIGRiTmFtZTogc3RyaW5nLFxuICB0YWJsZU5hbWU6IHN0cmluZyxcbiAgdHlwZTogJ2NvdW50JyxcbiAgcmVxOiBEQkNvcmVDb3VudFJlcXVlc3Rcbik6IFtdIHwgW0NhY2hlRW50cnksIGJvb2xlYW4sIFRibFF1ZXJ5Q2FjaGUsIENhY2hlRW50cnlbXV07XG5leHBvcnQgZnVuY3Rpb24gZmluZENvbXBhdGlibGVRdWVyeShcbiAgZGJOYW1lOiBzdHJpbmcsXG4gIHRhYmxlTmFtZTogc3RyaW5nLFxuICB0eXBlOiAncXVlcnknIHwgJ2NvdW50JyxcbiAgcmVxOiBQYXJ0aWFsPERCQ29yZVF1ZXJ5UmVxdWVzdD4gJiBQYXJ0aWFsPERCQ29yZUNvdW50UmVxdWVzdD5cbik6IFtdIHwgW0NhY2hlRW50cnksIGJvb2xlYW4sIFRibFF1ZXJ5Q2FjaGUsIENhY2hlRW50cnlbXV0ge1xuICBjb25zdCB0YmxDYWNoZSA9IGNhY2hlW2BpZGI6Ly8ke2RiTmFtZX0vJHt0YWJsZU5hbWV9YF07XG4gIGlmICghdGJsQ2FjaGUpIHJldHVybiBbXTtcbiAgY29uc3QgcXVlcmllcyA9IHRibENhY2hlLnF1ZXJpZXNbdHlwZV07XG4gIGlmICghcXVlcmllcykgcmV0dXJuIFtudWxsLCBmYWxzZSwgdGJsQ2FjaGUsIG51bGxdO1xuICBjb25zdCBpbmRleE5hbWUgPSByZXEucXVlcnkgPyByZXEucXVlcnkuaW5kZXgubmFtZSA6IG51bGw7XG4gIGNvbnN0IGVudHJpZXMgPSBxdWVyaWVzW2luZGV4TmFtZSB8fCAnJ107XG4gIGlmICghZW50cmllcykgcmV0dXJuIFtudWxsLCBmYWxzZSwgdGJsQ2FjaGUsIG51bGxdO1xuXG4gIHN3aXRjaCAodHlwZSkge1xuICAgIGNhc2UgJ3F1ZXJ5JzpcbiAgICAgIGNvbnN0IGVxdWFsRW50cnkgPSBlbnRyaWVzLmZpbmQoXG4gICAgICAgIChlbnRyeSkgPT5cbiAgICAgICAgICAoZW50cnkucmVxIGFzIERCQ29yZVF1ZXJ5UmVxdWVzdCkubGltaXQgPT09IHJlcS5saW1pdCAmJlxuICAgICAgICAgIChlbnRyeS5yZXEgYXMgREJDb3JlUXVlcnlSZXF1ZXN0KS52YWx1ZXMgPT09IHJlcS52YWx1ZXMgJiZcbiAgICAgICAgICBhcmVSYW5nZXNFcXVhbChlbnRyeS5yZXEucXVlcnkucmFuZ2UsIHJlcS5xdWVyeS5yYW5nZSlcbiAgICAgICk7XG4gICAgICBpZiAoZXF1YWxFbnRyeSlcbiAgICAgICAgcmV0dXJuIFtcbiAgICAgICAgICBlcXVhbEVudHJ5LFxuICAgICAgICAgIHRydWUsIC8vIGV4YWN0IG1hdGNoXG4gICAgICAgICAgdGJsQ2FjaGUsXG4gICAgICAgICAgZW50cmllcyxcbiAgICAgICAgXTtcbiAgICAgIGNvbnN0IHN1cGVyRW50cnkgPSBlbnRyaWVzLmZpbmQoKGVudHJ5KSA9PiB7XG4gICAgICAgIGNvbnN0IGxpbWl0ID0gJ2xpbWl0JyBpbiBlbnRyeS5yZXEgPyBlbnRyeS5yZXEubGltaXQgOiBJbmZpbml0eTtcbiAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICBsaW1pdCA+PSByZXEubGltaXQgJiZcbiAgICAgICAgICAocmVxLnZhbHVlcyA/IChlbnRyeS5yZXEgYXMgREJDb3JlUXVlcnlSZXF1ZXN0KS52YWx1ZXMgOiB0cnVlKSAmJlxuICAgICAgICAgIGlzU3VwZXJSYW5nZShlbnRyeS5yZXEucXVlcnkucmFuZ2UsIHJlcS5xdWVyeS5yYW5nZSlcbiAgICAgICAgKTtcbiAgICAgIH0pO1xuICAgICAgcmV0dXJuIFtzdXBlckVudHJ5LCBmYWxzZSwgdGJsQ2FjaGUsIGVudHJpZXNdO1xuICAgIGNhc2UgJ2NvdW50JzpcbiAgICAgIGNvbnN0IGNvdW50UXVlcnkgPSBlbnRyaWVzLmZpbmQoKGVudHJ5KSA9PlxuICAgICAgICBhcmVSYW5nZXNFcXVhbChlbnRyeS5yZXEucXVlcnkucmFuZ2UsIHJlcS5xdWVyeS5yYW5nZSlcbiAgICAgICk7XG4gICAgICByZXR1cm4gW2NvdW50UXVlcnksICEhY291bnRRdWVyeSwgdGJsQ2FjaGUsIGVudHJpZXNdO1xuICB9XG59XG4iLCAiaW1wb3J0IHsgZGVsQXJyYXlJdGVtIH0gZnJvbSBcIi4uLy4uL2Z1bmN0aW9ucy91dGlsc1wiO1xuaW1wb3J0IHsgQ2FjaGVFbnRyeSB9IGZyb20gXCIuLi8uLi9wdWJsaWMvdHlwZXMvY2FjaGVcIjtcblxuZXhwb3J0IGZ1bmN0aW9uIHN1YnNjcmliZVRvQ2FjaGVFbnRyeShjYWNoZUVudHJ5OiBDYWNoZUVudHJ5LCBjb250YWluZXI6IENhY2hlRW50cnlbXSwgcmVxdWVyeTogKCk9PnZvaWQsIHNpZ25hbDogQWJvcnRTaWduYWwpIHtcbiAgY2FjaGVFbnRyeS5zdWJzY3JpYmVycy5hZGQocmVxdWVyeSk7XG4gIHNpZ25hbC5hZGRFdmVudExpc3RlbmVyKFwiYWJvcnRcIiwgKCkgPT4ge1xuICAgIGNhY2hlRW50cnkuc3Vic2NyaWJlcnMuZGVsZXRlKHJlcXVlcnkpO1xuICAgIGlmIChjYWNoZUVudHJ5LnN1YnNjcmliZXJzLnNpemUgPT09IDApIHtcbiAgICAgIGVucXVlRm9yRGVsZXRpb24oY2FjaGVFbnRyeSwgY29udGFpbmVyKTtcbiAgICB9XG4gIH0pO1xufVxuXG5cbmZ1bmN0aW9uIGVucXVlRm9yRGVsZXRpb24oY2FjaGVFbnRyeTogQ2FjaGVFbnRyeSwgY29udGFpbmVyOiBDYWNoZUVudHJ5W10pIHtcbiAgc2V0VGltZW91dCgoKSA9PiB7XG4gICAgaWYgKGNhY2hlRW50cnkuc3Vic2NyaWJlcnMuc2l6ZSA9PT0gMCkgeyAvLyBTdGlsbCBlbXB0eSAobm8gbmV3IHN1YnNjcmliZXJzIHJlYWRkZWQgYWZ0ZXIgZ3JhY2UgdGltZSlcbiAgICAgIGRlbEFycmF5SXRlbShjb250YWluZXIsIGNhY2hlRW50cnkpO1xuICAgIH1cbiAgfSwgMzAwMCk7XG59XG4iLCAiaW1wb3J0IHsgTGl2ZVF1ZXJ5Q29udGV4dCB9IGZyb20gJy4uJztcbmltcG9ydCB0eXBlIHsgVHJhbnNhY3Rpb24gfSBmcm9tICcuLi8uLi9jbGFzc2VzL3RyYW5zYWN0aW9uJztcbmltcG9ydCB7IGdldEVmZmVjdGl2ZUtleXMgfSBmcm9tICcuLi8uLi9kYmNvcmUvZ2V0LWVmZmVjdGl2ZS1rZXlzJztcbmltcG9ydCB7IGRlZXBDbG9uZSwgZGVsQXJyYXlJdGVtLCBzZXRCeUtleVBhdGggfSBmcm9tICcuLi8uLi9mdW5jdGlvbnMvdXRpbHMnO1xuaW1wb3J0IERleGllUHJvbWlzZSwgeyBQU0QgfSBmcm9tICcuLi8uLi9oZWxwZXJzL3Byb21pc2UnO1xuaW1wb3J0IHsgT2JzZXJ2YWJpbGl0eVNldCB9IGZyb20gJy4uLy4uL3B1YmxpYy90eXBlcy9kYi1ldmVudHMnO1xuaW1wb3J0IHtcbiAgREJDb3JlLCBEQkNvcmVNdXRhdGVSZXF1ZXN0LCBEQkNvcmVNdXRhdGVSZXNwb25zZSwgREJDb3JlUXVlcnlSZXF1ZXN0LFxuICBEQkNvcmVRdWVyeVJlc3BvbnNlXG59IGZyb20gJy4uLy4uL3B1YmxpYy90eXBlcy9kYmNvcmUnO1xuaW1wb3J0IHsgTWlkZGxld2FyZSB9IGZyb20gJy4uLy4uL3B1YmxpYy90eXBlcy9taWRkbGV3YXJlJztcbmltcG9ydCB7IG9ic1NldHNPdmVybGFwIH0gZnJvbSAnLi4vb2JzLXNldHMtb3ZlcmxhcCc7XG5pbXBvcnQgeyBhZGp1c3RPcHRpbWlzdGljRnJvbUZhaWx1cmVzIH0gZnJvbSAnLi9hZGp1c3Qtb3B0aW1pc3RpYy1yZXF1ZXN0LWZyb20tZmFpbHVyZXMnO1xuaW1wb3J0IHsgYXBwbHlPcHRpbWlzdGljT3BzIH0gZnJvbSAnLi9hcHBseS1vcHRpbWlzdGljLW9wcyc7XG5pbXBvcnQgeyBjYWNoZSB9IGZyb20gJy4vY2FjaGUnO1xuaW1wb3J0IHsgZmluZENvbXBhdGlibGVRdWVyeSB9IGZyb20gJy4vZmluZC1jb21wYXRpYmxlLXF1ZXJ5JztcbmltcG9ydCB7IGlzQ2FjaGFibGVDb250ZXh0IH0gZnJvbSAnLi9pcy1jYWNoYWJsZS1jb250ZXh0JztcbmltcG9ydCB7IGlzQ2FjaGFibGVSZXF1ZXN0IH0gZnJvbSAnLi9pcy1jYWNoYWJsZS1yZXF1ZXN0JztcbmltcG9ydCB7IHNpZ25hbFN1YnNjcmliZXJzTGF6aWx5IH0gZnJvbSAnLi9zaWduYWxTdWJzY3JpYmVycyc7XG5pbXBvcnQgeyBzdWJzY3JpYmVUb0NhY2hlRW50cnkgfSBmcm9tICcuL3N1YnNjcmliZS1jYWNoZW50cnknO1xuXG5leHBvcnQgY29uc3QgY2FjaGVNaWRkbGV3YXJlOiBNaWRkbGV3YXJlPERCQ29yZT4gPSB7XG4gIHN0YWNrOiAnZGJjb3JlJyxcbiAgbGV2ZWw6IDAsXG4gIG5hbWU6ICdDYWNoZScsXG4gIGNyZWF0ZTogKGNvcmUpID0+IHtcbiAgICBjb25zdCBkYk5hbWUgPSBjb3JlLnNjaGVtYS5uYW1lO1xuICAgIGNvbnN0IGNvcmVNVzogREJDb3JlID0ge1xuICAgICAgLi4uY29yZSxcbiAgICAgIHRyYW5zYWN0aW9uOiAoc3RvcmVzLCBtb2RlLCBvcHRpb25zKSA9PiB7XG4gICAgICAgIGNvbnN0IGlkYnRyYW5zID0gY29yZS50cmFuc2FjdGlvbihcbiAgICAgICAgICBzdG9yZXMsXG4gICAgICAgICAgbW9kZSxcbiAgICAgICAgICBvcHRpb25zXG4gICAgICAgICkgYXMgSURCVHJhbnNhY3Rpb24gJiB7XG4gICAgICAgICAgbXV0YXRlZFBhcnRzPzogT2JzZXJ2YWJpbGl0eVNldDtcbiAgICAgICAgICBfZXhwbGljaXQ/OiBib29sZWFuO1xuICAgICAgICB9O1xuICAgICAgICAvLyBNYWludGFpbiBUYmxRdWVyeUNhY2hlLm9wcyBhcnJheSB3aGVuIHRyYW5zYWN0aW9ucyBjb21taXQgb3IgYWJvcnRcbiAgICAgICAgaWYgKG1vZGUgPT09ICdyZWFkd3JpdGUnKSB7XG4gICAgICAgICAgY29uc3QgYWMgPSBuZXcgQWJvcnRDb250cm9sbGVyKCk7XG4gICAgICAgICAgY29uc3QgeyBzaWduYWwgfSA9IGFjO1xuICAgICAgICAgIGNvbnN0IGVuZFRyYW5zYWN0aW9uID0gKHdhc0NvbW1pdHRlZDogYm9vbGVhbikgPT4gKCkgPT4ge1xuICAgICAgICAgICAgYWMuYWJvcnQoKTtcbiAgICAgICAgICAgIGlmIChtb2RlID09PSAncmVhZHdyaXRlJykge1xuICAgICAgICAgICAgICAvLyBDb2xsZWN0IHdoaWNoIHN1YnNjcmliZXJzIHRvIG5vdGlmeTpcbiAgICAgICAgICAgICAgY29uc3QgYWZmZWN0ZWRTdWJzY3JpYmVycyA9IG5ldyBTZXQ8KCk9PnZvaWQ+KCk7XG5cbiAgICAgICAgICAgICAgLy8gR28gdGhyb3VnaCBhbGwgdGFibGVzIGluIHRyYW5zYWN0aW9uIGFuZCBjaGVjayBpZiB0aGV5IGhhdmUgYW55IG9wdGltaXN0aWMgdXBkYXRlc1xuICAgICAgICAgICAgICBmb3IgKGNvbnN0IHN0b3JlTmFtZSBvZiBzdG9yZXMpIHtcbiAgICAgICAgICAgICAgICBjb25zdCB0YmxDYWNoZSA9IGNhY2hlW2BpZGI6Ly8ke2RiTmFtZX0vJHtzdG9yZU5hbWV9YF07XG4gICAgICAgICAgICAgICAgaWYgKHRibENhY2hlKSB7XG4gICAgICAgICAgICAgICAgICBjb25zdCB0YWJsZSA9IGNvcmUudGFibGUoc3RvcmVOYW1lKTtcbiAgICAgICAgICAgICAgICAgIC8vIFBpY2sgb3B0aW1pc3RpYyBvcHMgdGhhdCBhcmUgcGFydCBvZiB0aGlzIHRyYW5zYWN0aW9uXG4gICAgICAgICAgICAgICAgICBjb25zdCBvcHMgPSB0YmxDYWNoZS5vcHRpbWlzdGljT3BzLmZpbHRlcihcbiAgICAgICAgICAgICAgICAgICAgKG9wKSA9PiBvcC50cmFucyA9PT0gaWRidHJhbnNcbiAgICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgICAgICAvLyBUcmFuc2FjdGlvbiB3YXMgbWFya2VkIGFzIF9leHBsaWNpdCBpbiBlbnRlclRyYW5zYWN0aW9uU2NvcGUoKSwgdHJhbnNhY3Rpb24taGVscGVycy50cy5cbiAgICAgICAgICAgICAgICAgIGlmIChpZGJ0cmFucy5fZXhwbGljaXQgJiYgd2FzQ29tbWl0dGVkICYmIGlkYnRyYW5zLm11dGF0ZWRQYXJ0cykge1xuICAgICAgICAgICAgICAgICAgICAvLyBJbnZhbGlkYXRlIGFsbCBxdWVyaWVzIHRoYXQgb3ZlcmxhcCB3aXRoIHRoZSBtdXRhdGVkIHBhcnRzIGFuZCBzaWduYWwgdGhlaXIgc3Vic2NyaWJlcnNcbiAgICAgICAgICAgICAgICAgICAgZm9yIChjb25zdCBlbnRyaWVzIG9mIE9iamVjdC52YWx1ZXMoXG4gICAgICAgICAgICAgICAgICAgICAgdGJsQ2FjaGUucXVlcmllcy5xdWVyeVxuICAgICAgICAgICAgICAgICAgICApKSB7XG4gICAgICAgICAgICAgICAgICAgICAgZm9yIChjb25zdCBlbnRyeSBvZiBlbnRyaWVzLnNsaWNlKCkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChvYnNTZXRzT3ZlcmxhcChlbnRyeS5vYnNTZXQsIGlkYnRyYW5zLm11dGF0ZWRQYXJ0cykpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgZGVsQXJyYXlJdGVtKGVudHJpZXMsIGVudHJ5KTsgLy8gUmVtb3ZlIHRoZSBlbnRyeSBmcm9tIHRoZSBjYWNoZSBzbyBpdCBjYW4gYmUgcmVmcmVzaGVkXG4gICAgICAgICAgICAgICAgICAgICAgICAgIGVudHJ5LnN1YnNjcmliZXJzLmZvckVhY2goKHJlcXVlcnkpID0+IGFmZmVjdGVkU3Vic2NyaWJlcnMuYWRkKHJlcXVlcnkpKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAob3BzLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gUmVtb3ZlIHRoZW0gZnJvbSB0aGUgb3B0aW1pc3RpY09wcyBhcnJheVxuICAgICAgICAgICAgICAgICAgICB0YmxDYWNoZS5vcHRpbWlzdGljT3BzID0gdGJsQ2FjaGUub3B0aW1pc3RpY09wcy5maWx0ZXIoXG4gICAgICAgICAgICAgICAgICAgICAgKG9wKSA9PiBvcC50cmFucyAhPT0gaWRidHJhbnNcbiAgICAgICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgICAgICAgLy8gQ29tbWl0IG9yIGFib3J0IHRoZSBvcHRpbWlzdGljIHVwZGF0ZXNcbiAgICAgICAgICAgICAgICAgICAgZm9yIChjb25zdCBlbnRyaWVzIG9mIE9iamVjdC52YWx1ZXMoXG4gICAgICAgICAgICAgICAgICAgICAgdGJsQ2FjaGUucXVlcmllcy5xdWVyeVxuICAgICAgICAgICAgICAgICAgICApKSB7XG4gICAgICAgICAgICAgICAgICAgICAgZm9yIChjb25zdCBlbnRyeSBvZiBlbnRyaWVzLnNsaWNlKCkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChcbiAgICAgICAgICAgICAgICAgICAgICAgICAgZW50cnkucmVzICE9IG51bGwgJiYgLy8gaWYgZW50cnkucHJvbWlzZSBidXQgbm90IGVudHJ5LnJlcywgd2UncmUgZmluZS4gUXVlcnkgd2lsbCByZXN1bWUgbm93IGFuZCBnZXQgdGhlIHJlc3VsdC5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgaWRidHJhbnMubXV0YXRlZFBhcnRzLyogJiZcbiAgICAgICAgICAgICAgICAgICAgICAgICAgb2JzU2V0c092ZXJsYXAoZW50cnkub2JzU2V0LCBpZGJ0cmFucy5tdXRhdGVkUGFydHMpKi9cbiAgICAgICAgICAgICAgICAgICAgICAgICkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAod2FzQ29tbWl0dGVkICYmICFlbnRyeS5kaXJ0eSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGZyZWV6ZVJlc3VsdHMgPSBPYmplY3QuaXNGcm96ZW4oZW50cnkucmVzKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBtb2RSZXMgPSBhcHBseU9wdGltaXN0aWNPcHMoXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbnRyeS5yZXMgYXMgYW55W10sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbnRyeS5yZXEsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvcHMsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0YWJsZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVudHJ5LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZnJlZXplUmVzdWx0c1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGVudHJ5LmRpcnR5KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBGb3VuZCBvdXQgYXQgdGhpcyBwb2ludCB0aGF0IHRoZSBlbnRyeSBpcyBkaXJ0eSAtIG5vdCB0byByZWx5IG9uIVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGVsQXJyYXlJdGVtKGVudHJpZXMsIGVudHJ5KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVudHJ5LnN1YnNjcmliZXJzLmZvckVhY2goKHJlcXVlcnkpID0+IGFmZmVjdGVkU3Vic2NyaWJlcnMuYWRkKHJlcXVlcnkpKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKG1vZFJlcyAhPT0gZW50cnkucmVzKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbnRyeS5yZXMgPSBtb2RSZXM7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBVcGRhdGUgcHJvbWlzZVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZW50cnkucHJvbWlzZSA9IERleGllUHJvbWlzZS5yZXNvbHZlKHtyZXN1bHQ6IG1vZFJlc30gc2F0aXNmaWVzIERCQ29yZVF1ZXJ5UmVzcG9uc2UpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBObyBuZWVkIHRvIG5vdGlmeSBzdWJzY3JpYmVycy4gVGhleSBhbHJlYWR5IGhhdmUgdGhpcyB2YWx1ZS5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIFdlIGhhdmUganVzdCB1cGRhdGVkIHRoZSB2YWx1ZSBvZiB0aGUgY2FjaGUgd2l0aG91dCBoYXZpbmcgdG9cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIHJlcXVlcnkgdGhlIGRhdGFiYXNlIC0gYmVjYXVzZSB3ZSBrbm93IHRoZSByZXN1bHQgZm9yIHRoaXNcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIHF1ZXJ5IGJhc2VkIG9uIGNvbXB1dGluZyB0aGUgb3BlcmF0aW9ucyBhbmQgYXBwbHlpbmcgdGhlbVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gdG8gdGhlIHByZXZpb3VzIHJlc3VsdC5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGVudHJ5LmRpcnR5KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBJZiB0aGUgZW50cnkgaXMgZGlydHkgd2UgbmVlZCB0byBnZXQgcmlkIG9mIGl0IHNvIHRoYXRcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIGEgbmV3IGVudHJ5IHdpbGwgYmUgY3JlYXRlZCB3aGVuIHRoZSBxdWVyeSBpcyBydW4gYWdhaW4uXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkZWxBcnJheUl0ZW0oZW50cmllcywgZW50cnkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBJZiB3ZSdyZSBub3QgY29tbWl0dGluZywgd2UgbmVlZCB0byBub3RpZnkgc3Vic2NyaWJlcnMgdGhhdCB0aGVcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBvcHRpbWlzdGljIHVwZGF0ZXMgYXJlIG5vIGxvbmdlciB2YWxpZC5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbnRyeS5zdWJzY3JpYmVycy5mb3JFYWNoKChyZXF1ZXJ5KSA9PiBhZmZlY3RlZFN1YnNjcmliZXJzLmFkZChyZXF1ZXJ5KSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgYWZmZWN0ZWRTdWJzY3JpYmVycy5mb3JFYWNoKChyZXF1ZXJ5KSA9PiByZXF1ZXJ5KCkpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH07XG4gICAgICAgICAgaWRidHJhbnMuYWRkRXZlbnRMaXN0ZW5lcignYWJvcnQnLCBlbmRUcmFuc2FjdGlvbihmYWxzZSksIHtcbiAgICAgICAgICAgIHNpZ25hbCxcbiAgICAgICAgICB9KTtcbiAgICAgICAgICBpZGJ0cmFucy5hZGRFdmVudExpc3RlbmVyKCdlcnJvcicsIGVuZFRyYW5zYWN0aW9uKGZhbHNlKSwge1xuICAgICAgICAgICAgc2lnbmFsLFxuICAgICAgICAgIH0pO1xuICAgICAgICAgIGlkYnRyYW5zLmFkZEV2ZW50TGlzdGVuZXIoJ2NvbXBsZXRlJywgZW5kVHJhbnNhY3Rpb24odHJ1ZSksIHtcbiAgICAgICAgICAgIHNpZ25hbCxcbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gaWRidHJhbnM7XG4gICAgICB9LFxuICAgICAgdGFibGUodGFibGVOYW1lOiBzdHJpbmcpIHtcbiAgICAgICAgY29uc3QgZG93blRhYmxlID0gY29yZS50YWJsZSh0YWJsZU5hbWUpO1xuICAgICAgICBjb25zdCBwcmltS2V5ID0gZG93blRhYmxlLnNjaGVtYS5wcmltYXJ5S2V5O1xuICAgICAgICBjb25zdCB0YWJsZU1XID0ge1xuICAgICAgICAgIC4uLmRvd25UYWJsZSxcbiAgICAgICAgICBtdXRhdGUocmVxOiBEQkNvcmVNdXRhdGVSZXF1ZXN0KTogUHJvbWlzZTxEQkNvcmVNdXRhdGVSZXNwb25zZT4ge1xuICAgICAgICAgICAgY29uc3QgdHJhbnMgPSBQU0QudHJhbnMgYXMgVHJhbnNhY3Rpb247XG4gICAgICAgICAgICBpZiAoXG4gICAgICAgICAgICAgIHByaW1LZXkub3V0Ym91bmQgfHwgLy8gTm9uLWluYm91bmQgdGFibGVzIGFyZSBoYXJkZWQgdG8gYXBwbHkgb3B0aW1pc3RpYyB1cGRhdGVzIG9uIGJlY2F1c2Ugd2UgY2FuJ3Qga25vdyBwcmltYXJ5IGtleSBvZiByZXN1bHRzXG4gICAgICAgICAgICAgIHRyYW5zLmRiLl9vcHRpb25zLmNhY2hlID09PSAnZGlzYWJsZWQnIHx8IC8vIFVzZXIgaGFzIG9wdGVkLW91dCBmcm9tIGNhY2hpbmdcbiAgICAgICAgICAgICAgdHJhbnMuZXhwbGljaXQgLy8gSXQncyBhbiBleHBsaWNpdCB3cml0ZSB0cmFuc2FjdGlvbiBiZWluZyBtYWRlLiBEb24ndCBhZmZlY3QgY2FjaGUgdW50aWwgdHJhbnNhY3Rpb24gY29tbWl0cy5cbiAgICAgICAgICAgICkge1xuICAgICAgICAgICAgICAvLyBKdXN0IGZvcndhcmQgdGhlIHJlcXVlc3QgdG8gdGhlIGNvcmUuXG4gICAgICAgICAgICAgIHJldHVybiBkb3duVGFibGUubXV0YXRlKHJlcSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAvLyBGaW5kIHRoZSBUYmxRdWVyeUNhY2hlIGZvciB0aGlzIHRhYmxlOlxuICAgICAgICAgICAgY29uc3QgdGJsQ2FjaGUgPSBjYWNoZVtgaWRiOi8vJHtkYk5hbWV9LyR7dGFibGVOYW1lfWBdO1xuICAgICAgICAgICAgaWYgKCF0YmxDYWNoZSkgcmV0dXJuIGRvd25UYWJsZS5tdXRhdGUocmVxKTtcblxuICAgICAgICAgICAgY29uc3QgcHJvbWlzZSA9IGRvd25UYWJsZS5tdXRhdGUocmVxKTtcbiAgICAgICAgICAgIGlmICgocmVxLnR5cGUgPT09ICdhZGQnIHx8IHJlcS50eXBlID09PSAncHV0JykgJiYgKHJlcS52YWx1ZXMubGVuZ3RoID49IDUwIHx8IGdldEVmZmVjdGl2ZUtleXMocHJpbUtleSwgcmVxKS5zb21lKGtleSA9PiBrZXkgPT0gbnVsbCkpKSB7XG4gICAgICAgICAgICAgIC8vIFRoZXJlIGFyZSBzb21lIGF1dG9JbmNyZW1lbnRlZCBrZXlzIG5vdCBzZXQgeWV0LiBOZWVkIHRvIHdhaXQgZm9yIGNvbXBsZXRpb24gYmVmb3JlIHdlIGNhbiByZWxpYWJseSBlbnF1ZXVlIHRoZSBvcGVyYXRpb24uXG4gICAgICAgICAgICAgIC8vIChvciB0aGVyZSBhcmUgdG9vIG1hbnkgb2JqZWN0cyBzbyB3ZSBsYXp5IG91dCB0byBhdm9pZCBwZXJmb3JtYW5jZSBib3R0bGVuZWNrIGZvciBsYXJnZSBidWxrIGluc2VydHMpXG4gICAgICAgICAgICAgIHByb21pc2UudGhlbigocmVzKSA9PiB7IC8vIFdlIG5lZWQgdG8gZXh0cmFjdCByZXN1bHQga2V5cyBhbmQgZ2VuZXJhdGUgY2xvbmVkIHZhbHVlcyB3aXRoIHRoZSBrZXlzIHNldCAoc28gdGhhdCBhcHBseU9wdGltaXN0aWNPcHMgY2FuIHdvcmspXG4gICAgICAgICAgICAgICAgLy8gQnV0IHdlIGhhdmUgYSBwcm9ibGVtISBUaGUgcmVxLm11dGF0ZWRQYXJ0cyBpcyBzdGlsbCBub3QgY29tcGxldGUgc28gd2UgaGF2ZSB0byBhY3RpdmVseSBhZGQgdGhlIGtleXMgdG8gdGhlIHVuc2lnbmFsZWRQYXJ0cyBzZXQgbWFudWFsbHkuXG4gICAgICAgICAgICAgICAgY29uc3QgcmVxV2l0aFJlc29sdmVkS2V5cyA9IHtcbiAgICAgICAgICAgICAgICAgIC4uLnJlcSxcbiAgICAgICAgICAgICAgICAgIHZhbHVlczogcmVxLnZhbHVlcy5tYXAoKHZhbHVlLCBpKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHZhbHVlV2l0aEtleSA9IHByaW1LZXkua2V5UGF0aD8uaW5jbHVkZXMoJy4nKVxuICAgICAgICAgICAgICAgICAgICAgID8gZGVlcENsb25lKHZhbHVlKVxuICAgICAgICAgICAgICAgICAgICAgIDoge1xuICAgICAgICAgICAgICAgICAgICAgICAgLi4udmFsdWUsXG4gICAgICAgICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICAgICAgc2V0QnlLZXlQYXRoKHZhbHVlV2l0aEtleSwgcHJpbUtleS5rZXlQYXRoLCByZXMucmVzdWx0cyFbaV0pO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdmFsdWVXaXRoS2V5O1xuICAgICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgIGNvbnN0IGFkanVzdGVkUmVxID0gYWRqdXN0T3B0aW1pc3RpY0Zyb21GYWlsdXJlcyh0YmxDYWNoZSwgcmVxV2l0aFJlc29sdmVkS2V5cywgcmVzKTtcbiAgICAgICAgICAgICAgICB0YmxDYWNoZS5vcHRpbWlzdGljT3BzLnB1c2goYWRqdXN0ZWRSZXEpO1xuICAgICAgICAgICAgICAgIC8vIFNpZ25hbCBzdWJzY3JpYmVycyBhZnRlciB0aGUgb2JzZXJ2YWJpbGl0eSBtaWRkbGV3YXJlIGhhcyBjb21wbGVtZW50ZWQgcmVxLm11dGF0ZWRQYXJ0cyB3aXRoIHRoZSBuZXcga2V5cy5cbiAgICAgICAgICAgICAgICAvLyBXZSBtdXN0IHF1ZXVlIHRoZSB0YXNrIHNvIHRoYXQgd2UgZ2V0IHRoZSByZXEubXV0YXRlZFBhcnRzIHVwZGF0ZWQgYnkgb2JzZXJ2YWJpbGl0eSBtaWRkbGV3YXJlIGZpcnN0LlxuICAgICAgICAgICAgICAgIC8vIElmIHdlIHJlZmFjdG9yIHRoZSBkZXBlbmRlbmN5IGJldHdlZW4gb2JzZXJ2YWJpbGl0eSBtaWRkbGV3YXJlIGFuZCB0aGlzIG1pZGRsZXdhcmUgd2UgbWlnaHQgbm90IG5lZWQgdG8gcXVldWUgdGhlIHRhc2suXG4gICAgICAgICAgICAgICAgcXVldWVNaWNyb3Rhc2soKCk9PnJlcS5tdXRhdGVkUGFydHMgJiYgc2lnbmFsU3Vic2NyaWJlcnNMYXppbHkocmVxLm11dGF0ZWRQYXJ0cykpOyAvLyBSZWFzb24gZm9yIGRvdWJsZSBsYXppbmVzczogaW4gdXNlciBhd2FpdHMgcHV0IGFuZCB0aGVuIGRvZXMgYW5vdGhlciBwdXQsIHNpZ25hbCBvbmNlLlxuICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIC8vIEVucXVlIHRoZSBvcGVyYXRpb24gaW1tZWRpYXRlbHlcbiAgICAgICAgICAgICAgdGJsQ2FjaGUub3B0aW1pc3RpY09wcy5wdXNoKHJlcSk7XG4gICAgICAgICAgICAgIC8vIFNpZ25hbCBzdWJzY3JpYmVycyB0aGF0IHRoZXJlIGFyZSBtdXRhdGVkIHBhcnRzXG4gICAgICAgICAgICAgIHJlcS5tdXRhdGVkUGFydHMgJiYgc2lnbmFsU3Vic2NyaWJlcnNMYXppbHkocmVxLm11dGF0ZWRQYXJ0cyk7XG4gICAgICAgICAgICAgIHByb21pc2UudGhlbigocmVzKSA9PiB7XG4gICAgICAgICAgICAgICAgaWYgKHJlcy5udW1GYWlsdXJlcyA+IDApIHtcbiAgICAgICAgICAgICAgICAgIC8vIEluIGNhc2UgdGhlIG9wZXJhdGlvbiBmYWlsZWQsIHdlIG5lZWQgdG8gcmVtb3ZlIGl0IGZyb20gdGhlIG9wdGltaXN0aWNPcHMgYXJyYXkuXG4gICAgICAgICAgICAgICAgICBkZWxBcnJheUl0ZW0odGJsQ2FjaGUub3B0aW1pc3RpY09wcywgcmVxKTtcbiAgICAgICAgICAgICAgICAgIGNvbnN0IGFkanVzdGVkUmVxID0gYWRqdXN0T3B0aW1pc3RpY0Zyb21GYWlsdXJlcyh0YmxDYWNoZSwgcmVxLCByZXMpO1xuICAgICAgICAgICAgICAgICAgaWYgKGFkanVzdGVkUmVxKSB7XG4gICAgICAgICAgICAgICAgICAgIHRibENhY2hlLm9wdGltaXN0aWNPcHMucHVzaChhZGp1c3RlZFJlcSk7XG4gICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICByZXEubXV0YXRlZFBhcnRzICYmIHNpZ25hbFN1YnNjcmliZXJzTGF6aWx5KHJlcS5tdXRhdGVkUGFydHMpOyAvLyBTaWduYWwgdGhlIHJvbGxpbmcgYmFjayBvZiB0aGUgb3BlcmF0aW9uLlxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgIHByb21pc2UuY2F0Y2goKCk9PiB7XG4gICAgICAgICAgICAgICAgLy8gSW4gY2FzZSB0aGUgb3BlcmF0aW9uIGZhaWxlZCwgd2UgbmVlZCB0byByZW1vdmUgaXQgZnJvbSB0aGUgb3B0aW1pc3RpY09wcyBhcnJheS5cbiAgICAgICAgICAgICAgICBkZWxBcnJheUl0ZW0odGJsQ2FjaGUub3B0aW1pc3RpY09wcywgcmVxKTtcbiAgICAgICAgICAgICAgICByZXEubXV0YXRlZFBhcnRzICYmIHNpZ25hbFN1YnNjcmliZXJzTGF6aWx5KHJlcS5tdXRhdGVkUGFydHMpOyAvLyBTaWduYWwgdGhlIHJvbGxpbmcgYmFjayBvZiB0aGUgb3BlcmF0aW9uLlxuICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBwcm9taXNlO1xuICAgICAgICAgIH0sXG4gICAgICAgICAgcXVlcnkocmVxOiBEQkNvcmVRdWVyeVJlcXVlc3QpOiBQcm9taXNlPERCQ29yZVF1ZXJ5UmVzcG9uc2U+IHtcbiAgICAgICAgICAgIGlmICghaXNDYWNoYWJsZUNvbnRleHQoUFNELCBkb3duVGFibGUpIHx8ICFpc0NhY2hhYmxlUmVxdWVzdChcInF1ZXJ5XCIsIHJlcSkpIHJldHVybiBkb3duVGFibGUucXVlcnkocmVxKTtcbiAgICAgICAgICAgIGNvbnN0IGZyZWV6ZVJlc3VsdHMgPVxuICAgICAgICAgICAgICAoUFNEIGFzIExpdmVRdWVyeUNvbnRleHQpLnRyYW5zPy5kYi5fb3B0aW9ucy5jYWNoZSA9PT0gJ2ltbXV0YWJsZSc7XG4gICAgICAgICAgICBjb25zdCB7IHJlcXVlcnksIHNpZ25hbCB9ID0gUFNEIGFzIExpdmVRdWVyeUNvbnRleHQ7XG4gICAgICAgICAgICBsZXQgW2NhY2hlRW50cnksIGV4YWN0TWF0Y2gsIHRibENhY2hlLCBjb250YWluZXJdID1cbiAgICAgICAgICAgICAgZmluZENvbXBhdGlibGVRdWVyeShkYk5hbWUsIHRhYmxlTmFtZSwgJ3F1ZXJ5JywgcmVxKTtcbiAgICAgICAgICAgIGlmIChjYWNoZUVudHJ5ICYmIGV4YWN0TWF0Y2gpIHtcbiAgICAgICAgICAgICAgY2FjaGVFbnRyeS5vYnNTZXQgPSByZXEub2JzU2V0ITsgLy8gU28gdGhhdCBvcHRpbWlzdGljIHJlc3VsdCBpcyBtb25pdG9yZWQuXG4gICAgICAgICAgICAgIC8vIEhvdz8gLSBiZWNhdXNlIG9ic2VydmFiaWxpdHktbWlkZGxld2FyZSB3aWxsIHRyYWNrIHJlc3VsdCB3aGVyZSBvcHRpbWlzdGljXG4gICAgICAgICAgICAgIC8vIG11dGF0aW9ucyBhcmUgYXBwbGllZCBhbmQgcmVjb3JkIGl0IGluIHRoZSBjYWNoZUVudHJ5LlxuICAgICAgICAgICAgICAvLyBUT0RPOiBDSEFOR0UgVEhJUyEgVGhlIGRpZmZlcmVuY2UgaXMgcmVzdWx0S2V5cyBvbmx5LlxuICAgICAgICAgICAgICAvLyBXYW50ZWQgYmVoYXZpb3I6XG4gICAgICAgICAgICAgIC8vICAqIGNhY2hlRW50cnkgb2JzU2V0IHNob3VsZCByZXByZXNlbnQgdGhlIG9ic1NldCB3aXRob3V0IG9wdGltaXN0aWMgdXBkYXRlcyAoc28gaXQgY2FuIGJlIGNoZWNrZWQgd2hlbiBtZXJnaW5nIG9wcyBpbiB0eCBjb21taXQpXG4gICAgICAgICAgICAgIC8vICAqIGNhY2hlRW50cnkgb3B0aW1pc3RpY09ic1NldCBzaG91bGQgcmVwcmVzZW50IHRoZSBvYnNTZXQgd2l0aCBjdXJyZW50IG9wdGltaXN0aWMgdXBkYXRlcy4gSXQgc2hvdWxkIGJlIHVwZGF0ZWQgd2hlbiBhZGRpbmcgYW4gb3BcbiAgICAgICAgICAgICAgLy8gICAgYnkgYWRkaW5nIHRoZSBwcmltYXJ5IGtleXMgb2YgdGhlIHB1dC9hZGQvZGVsZXRlIG9wZXJhdGlvbiB0byB0aGUgc2V0LlxuICAgICAgICAgICAgICAvLyAgKiBvYnNlcnZhYmlsaXR5LW1pZGRsZXdhcmUgc2hvdWxkIHN0b3AgcmVjb3JkaW5nIHJlcS5vYnNTZXQgd2hlbiBhIGNhY2hlIGVudHJ5IGV4YWN0IG1hdGNoIGlzIGZvdW5kIGJlY2F1c2UgaXQgd29uJ3QgYmUgdXNlZCBhbnl3YXkuXG4gICAgICAgICAgICAgIC8vIEknbSB0aGlua2luZyBvZiBtZXJnaW5nIG9ic2VydmFiaWxpdHktbWlkZGxld2FyZSB3aXRoIGNhY2hlLW1pZGRsZXdhcmUgaW50byBvbmUgc2luZ2xlIG1pZGRsZXdhcmUgYmVjYXVzZSB0aGUgZGVwZW5kZW5jaWVzIGFyZSB0b29cbiAgICAgICAgICAgICAgLy8gdGlnaHQgYmV0d2VlbiB0aGVtLlxuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgLy8gLS0+IFRPRE8gaGVyZTogSWYgbm90IGV4YWN0IG1hdGNoLCBjaGVjayBpZiB3ZSBoYXZlIGEgc3VwZXJzZXQgdG8gZXh0cmFjdFxuICAgICAgICAgICAgICAvLyB0aGUgZGF0YSBmcm9tLlxuXG4gICAgICAgICAgICAgIC8vIE5vIGNhY2hlZCByZXN1bHQgZm91bmQuIFdlIG5lZWQgdG8gcXVlcnkgdGhlIGRhdGFiYXNlIGFuZCBjYWNoZSB0aGUgcmVzdWx0LlxuICAgICAgICAgICAgICBjb25zdCBwcm9taXNlID0gZG93blRhYmxlLnF1ZXJ5KHJlcSkudGhlbigocmVzKSA9PiB7XG4gICAgICAgICAgICAgICAgLy8gRnJlZXplIG9yIGNsb25lIHJlc3VsdHNcbiAgICAgICAgICAgICAgICBjb25zdCByZXN1bHQgPSByZXMucmVzdWx0O1xuICAgICAgICAgICAgICAgIGlmIChjYWNoZUVudHJ5KSBjYWNoZUVudHJ5LnJlcyA9IHJlc3VsdDtcbiAgICAgICAgICAgICAgICBpZiAoZnJlZXplUmVzdWx0cykge1xuICAgICAgICAgICAgICAgICAgLy8gRm9yIHBlcmZvcm1hbmNlIHJlYXNvbnMgZG9uJ3QgZGVlcCBmcmVlemUuXG4gICAgICAgICAgICAgICAgICAvLyBPbmx5IGZyZWV6ZSB0aGUgdG9wLWxldmVsIGFycmF5IGFuZCBpdHMgaXRlbXMuXG4gICAgICAgICAgICAgICAgICAvLyBUaGlzIGlzIGdvb2QgZW5vdWdoIHRvIHRlYWNoIHVzZXJzIHRoYXQgdGhlIHJlc3VsdCBtdXN0IGJlIHRyZWF0ZWQgYXMgaW1tdXRhYmxlXG4gICAgICAgICAgICAgICAgICAvLyB3aXRob3V0IGVuZm9yY2luZyBpdCByZWN1cnNpdmVseSBvbiB0aGUgZW50aXJlIHJlc3VsdCAod2hpY2ggaXMgbm90IGV2ZW4gcG9zc2libGVcbiAgICAgICAgICAgICAgICAgIC8vIGZvciB0aGluZ3MgbGlrZSBEYXRlIG9iamVjdHMgYW5kIHR5cGVkIGFycmF5cylcbiAgICAgICAgICAgICAgICAgIGZvciAobGV0IGkgPSAwLCBsID0gcmVzdWx0Lmxlbmd0aDsgaSA8IGw7ICsraSkge1xuICAgICAgICAgICAgICAgICAgICBPYmplY3QuZnJlZXplKHJlc3VsdFtpXSk7XG4gICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICBPYmplY3QuZnJlZXplKHJlc3VsdCk7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgIC8vIElmIG5vdCBmcm96ZW4sIHdlIG5lZWQgdG8gY2xvbmUgdGhlIHJlc3VsdCB0byBhdm9pZCB1c2VyIG11dGF0aW5nIHRoZSBjYWNoZVxuICAgICAgICAgICAgICAgICAgLy8gV2hlbiB3ZSBkbyB0aGlzLCB1c2VyJ3MgbXVzdCBmZWVsIGNvbmZvcm1hYmxlIHdpdGggdGhlIGZhY3QgdGhhdCB0aGUgcmVzdWx0XG4gICAgICAgICAgICAgICAgICAvLyBjYW4gYmUgbXV0YXRlZCBkZWVwbHkgLSB1c2VyIGlzIG5vdCBleHBlY3RlZCB0byBoYXZlIGFueSByZXNwZWN0IGZvciBpbW11dGFiaWxpdHkuXG4gICAgICAgICAgICAgICAgICByZXMucmVzdWx0ID0gZGVlcENsb25lKHJlc3VsdCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJldHVybiByZXM7XG4gICAgICAgICAgICAgIH0pLmNhdGNoKGVycm9yID0+IHtcbiAgICAgICAgICAgICAgICAvLyBJbiBjYXNlIHRoZSBxdWVyeSBvcGVyYXRpb24gZmFpbGVkLCB3ZSBuZWVkIHRvIHJlbW92ZSBpdCBmcm9tIHRoZSBjYWNoZVxuICAgICAgICAgICAgICAgIC8vIHNvIHRoYXQgc3Vic2VxdWVudCBjYWxscyBkb2VzIG5vdCBnZXQgdGhlIHNhbWUgZXJyb3IgYnV0IHJlLWV2YWx1YXRlXG4gICAgICAgICAgICAgICAgLy8gdGhlIHF1ZXJ5LlxuICAgICAgICAgICAgICAgIGlmIChjb250YWluZXIgJiYgY2FjaGVFbnRyeSkgZGVsQXJyYXlJdGVtKGNvbnRhaW5lciwgY2FjaGVFbnRyeSk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIFByb21pc2UucmVqZWN0KGVycm9yKTtcbiAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgIGNhY2hlRW50cnkgPSB7XG4gICAgICAgICAgICAgICAgb2JzU2V0OiByZXEub2JzU2V0ISxcbiAgICAgICAgICAgICAgICBwcm9taXNlLFxuICAgICAgICAgICAgICAgIHN1YnNjcmliZXJzOiBuZXcgU2V0KCksXG4gICAgICAgICAgICAgICAgdHlwZTogJ3F1ZXJ5JyxcbiAgICAgICAgICAgICAgICByZXEsXG4gICAgICAgICAgICAgICAgZGlydHk6IGZhbHNlLFxuICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICBpZiAoY29udGFpbmVyKSB7XG4gICAgICAgICAgICAgICAgY29udGFpbmVyLnB1c2goY2FjaGVFbnRyeSk7XG4gICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgY29udGFpbmVyID0gW2NhY2hlRW50cnldO1xuICAgICAgICAgICAgICAgIGlmICghdGJsQ2FjaGUpIHtcbiAgICAgICAgICAgICAgICAgIHRibENhY2hlID0gY2FjaGVbYGlkYjovLyR7ZGJOYW1lfS8ke3RhYmxlTmFtZX1gXSA9IHtcbiAgICAgICAgICAgICAgICAgICAgcXVlcmllczoge1xuICAgICAgICAgICAgICAgICAgICAgIHF1ZXJ5OiB7fSxcbiAgICAgICAgICAgICAgICAgICAgICBjb3VudDoge30sXG4gICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgIG9ianM6IG5ldyBNYXAoKSxcbiAgICAgICAgICAgICAgICAgICAgb3B0aW1pc3RpY09wczogW10sXG4gICAgICAgICAgICAgICAgICAgIHVuc2lnbmFsZWRQYXJ0czoge31cbiAgICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHRibENhY2hlLnF1ZXJpZXMucXVlcnlbcmVxLnF1ZXJ5LmluZGV4Lm5hbWUgfHwgJyddID0gY29udGFpbmVyO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBzdWJzY3JpYmVUb0NhY2hlRW50cnkoY2FjaGVFbnRyeSwgY29udGFpbmVyISwgcmVxdWVyeSwgc2lnbmFsKTtcbiAgICAgICAgICAgIHJldHVybiBjYWNoZUVudHJ5LnByb21pc2UudGhlbigocmVzOiBEQkNvcmVRdWVyeVJlc3BvbnNlKSA9PiB7XG4gICAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgcmVzdWx0OiBhcHBseU9wdGltaXN0aWNPcHMoXG4gICAgICAgICAgICAgICAgICByZXMucmVzdWx0LFxuICAgICAgICAgICAgICAgICAgcmVxLFxuICAgICAgICAgICAgICAgICAgdGJsQ2FjaGU/Lm9wdGltaXN0aWNPcHMsXG4gICAgICAgICAgICAgICAgICBkb3duVGFibGUsXG4gICAgICAgICAgICAgICAgICBjYWNoZUVudHJ5ISxcbiAgICAgICAgICAgICAgICAgIGZyZWV6ZVJlc3VsdHNcbiAgICAgICAgICAgICAgICApIGFzIGFueVtdLCAvLyByZWFkb25seSBhbnlbXVxuICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgfSxcbiAgICAgICAgfTtcbiAgICAgICAgcmV0dXJuIHRhYmxlTVc7XG4gICAgICB9LFxuICAgIH07XG4gICAgcmV0dXJuIGNvcmVNVztcbiAgfSxcbn07XG5cblxuIiwgImltcG9ydCB7IHR5cGUgRGV4aWUgfSBmcm9tIFwiLi4vY2xhc3Nlcy9kZXhpZVwiO1xuaW1wb3J0IHsgdHlwZSBUYWJsZSB9IGZyb20gXCIuLi9jbGFzc2VzL3RhYmxlXCI7XG5pbXBvcnQgeyB0eXBlIFRyYW5zYWN0aW9uIH0gZnJvbSBcIi4uL2NsYXNzZXMvdHJhbnNhY3Rpb25cIjtcblxuZXhwb3J0IGZ1bmN0aW9uIHZpcGlmeTxUIGV4dGVuZHMgVGFibGUgfCBUcmFuc2FjdGlvbj4oXG4gIHRhcmdldDogVCxcbiAgdmlwRGI6IERleGllXG4pOiBUIHtcbiAgcmV0dXJuIG5ldyBQcm94eSh0YXJnZXQsIHtcbiAgICBnZXQgKHRhcmdldCwgcHJvcCwgcmVjZWl2ZXIpIHtcbiAgICAgIC8vIFRoZSBcImRiXCIgcHJvcCBvZiB0aGUgdGFibGUgb3IgdHJhbnNhY3Rpb24gaXMgdGhlIG9ubHkgb25lIHdlIG5lZWQgdG9cbiAgICAgIC8vIG92ZXJyaWRlLiBUaGUgcmVzdCBvZiB0aGUgcHJvcHMgY2FuIGJlIGFjY2Vzc2VkIGZyb20gdGhlIG9yaWdpbmFsXG4gICAgICAvLyBvYmplY3QuXG4gICAgICBpZiAocHJvcCA9PT0gJ2RiJykgcmV0dXJuIHZpcERiO1xuICAgICAgcmV0dXJuIFJlZmxlY3QuZ2V0KHRhcmdldCwgcHJvcCwgcmVjZWl2ZXIpO1xuICAgIH1cbiAgfSk7XG59XG4iLCAiLy8gSW1wb3J0IHR5cGVzIGZyb20gdGhlIHB1YmxpYyBBUElcbmltcG9ydCB7IERleGllIGFzIElEZXhpZSB9IGZyb20gXCIuLi8uLi9wdWJsaWMvdHlwZXMvZGV4aWVcIjtcbmltcG9ydCB7IERleGllT3B0aW9ucywgRGV4aWVDb25zdHJ1Y3RvciB9IGZyb20gXCIuLi8uLi9wdWJsaWMvdHlwZXMvZGV4aWUtY29uc3RydWN0b3JcIjtcbmltcG9ydCB7IERiRXZlbnRzIH0gZnJvbSBcIi4uLy4uL3B1YmxpYy90eXBlcy9kYi1ldmVudHNcIjtcbi8vaW1wb3J0IHsgUHJvbWlzZUV4dGVuZGVkLCBQcm9taXNlRXh0ZW5kZWRDb25zdHJ1Y3RvciB9IGZyb20gJy4uLy4uL3B1YmxpYy90eXBlcy9wcm9taXNlLWV4dGVuZGVkJztcbmltcG9ydCB7IFRhYmxlIGFzIElUYWJsZSB9IGZyb20gJy4uLy4uL3B1YmxpYy90eXBlcy90YWJsZSc7XG5pbXBvcnQgeyBUYWJsZVNjaGVtYSB9IGZyb20gXCIuLi8uLi9wdWJsaWMvdHlwZXMvdGFibGUtc2NoZW1hXCI7XG5pbXBvcnQgeyBEYlNjaGVtYSB9IGZyb20gJy4uLy4uL3B1YmxpYy90eXBlcy9kYi1zY2hlbWEnO1xuXG4vLyBJbnRlcm5hbCBpbXBvcnRzXG5pbXBvcnQgeyBUYWJsZSwgVGFibGVDb25zdHJ1Y3RvciwgY3JlYXRlVGFibGVDb25zdHJ1Y3RvciB9IGZyb20gXCIuLi90YWJsZVwiO1xuaW1wb3J0IHsgQ29sbGVjdGlvbiwgQ29sbGVjdGlvbkNvbnN0cnVjdG9yLCBjcmVhdGVDb2xsZWN0aW9uQ29uc3RydWN0b3IgfSBmcm9tICcuLi9jb2xsZWN0aW9uJztcbmltcG9ydCB7IFdoZXJlQ2xhdXNlIH0gZnJvbSAnLi4vd2hlcmUtY2xhdXNlL3doZXJlLWNsYXVzZSc7XG5pbXBvcnQgeyBXaGVyZUNsYXVzZUNvbnN0cnVjdG9yLCBjcmVhdGVXaGVyZUNsYXVzZUNvbnN0cnVjdG9yIH0gZnJvbSAnLi4vd2hlcmUtY2xhdXNlL3doZXJlLWNsYXVzZS1jb25zdHJ1Y3Rvcic7XG5pbXBvcnQgeyBUcmFuc2FjdGlvbiB9IGZyb20gJy4uL3RyYW5zYWN0aW9uJztcbmltcG9ydCB7IFRyYW5zYWN0aW9uQ29uc3RydWN0b3IsIGNyZWF0ZVRyYW5zYWN0aW9uQ29uc3RydWN0b3IgfSBmcm9tICcuLi90cmFuc2FjdGlvbi90cmFuc2FjdGlvbi1jb25zdHJ1Y3Rvcic7XG5pbXBvcnQgeyBWZXJzaW9uIH0gZnJvbSBcIi4uL3ZlcnNpb24vdmVyc2lvblwiO1xuaW1wb3J0IHsgVmVyc2lvbkNvbnN0cnVjdG9yLCBjcmVhdGVWZXJzaW9uQ29uc3RydWN0b3IgfSBmcm9tICcuLi92ZXJzaW9uL3ZlcnNpb24tY29uc3RydWN0b3InO1xuXG4vLyBPdGhlciBpbXBvcnRzLi4uXG5pbXBvcnQgeyBEZXhpZUV2ZW50U2V0IH0gZnJvbSAnLi4vLi4vcHVibGljL3R5cGVzL2RleGllLWV2ZW50LXNldCc7XG5pbXBvcnQgeyBEZXhpZUV4Y2VwdGlvbkNsYXNzZXMgfSBmcm9tICcuLi8uLi9wdWJsaWMvdHlwZXMvZXJyb3JzJztcbmltcG9ydCB7IERleGllRE9NRGVwZW5kZW5jaWVzIH0gZnJvbSAnLi4vLi4vcHVibGljL3R5cGVzL2RleGllLWRvbS1kZXBlbmRlbmNpZXMnO1xuaW1wb3J0IHsgbm9wLCBwcm9taXNhYmxlQ2hhaW4gfSBmcm9tICcuLi8uLi9mdW5jdGlvbnMvY2hhaW5pbmctZnVuY3Rpb25zJztcbmltcG9ydCBQcm9taXNlLCB7IFBTRCwgZ2xvYmFsUFNEIH0gZnJvbSAnLi4vLi4vaGVscGVycy9wcm9taXNlJztcbmltcG9ydCB7IGV4dGVuZCwgb3ZlcnJpZGUsIGtleXMsIGhhc093biB9IGZyb20gJy4uLy4uL2Z1bmN0aW9ucy91dGlscyc7XG5pbXBvcnQgRXZlbnRzIGZyb20gJy4uLy4uL2hlbHBlcnMvRXZlbnRzJztcbmltcG9ydCB7IG1heFN0cmluZywgY29ubmVjdGlvbnMsIFJFQURPTkxZLCBSRUFEV1JJVEUgfSBmcm9tICcuLi8uLi9nbG9iYWxzL2NvbnN0YW50cyc7XG5pbXBvcnQgeyBnZXRNYXhLZXkgfSBmcm9tICcuLi8uLi9mdW5jdGlvbnMvcXVpcmtzJztcbmltcG9ydCB7IGV4Y2VwdGlvbnMgfSBmcm9tICcuLi8uLi9lcnJvcnMnO1xuaW1wb3J0IHsgbG93ZXJWZXJzaW9uRmlyc3QgfSBmcm9tICcuLi92ZXJzaW9uL3NjaGVtYS1oZWxwZXJzJztcbmltcG9ydCB7IGRleGllT3BlbiB9IGZyb20gJy4vZGV4aWUtb3Blbic7XG5pbXBvcnQgeyB3cmFwIH0gZnJvbSAnLi4vLi4vaGVscGVycy9wcm9taXNlJztcbmltcG9ydCB7IF9vbkRhdGFiYXNlRGVsZXRlZCB9IGZyb20gJy4uLy4uL2hlbHBlcnMvZGF0YWJhc2UtZW51bWVyYXRvcic7XG5pbXBvcnQgeyBldmVudFJlamVjdEhhbmRsZXIgfSBmcm9tICcuLi8uLi9mdW5jdGlvbnMvZXZlbnQtd3JhcHBlcnMnO1xuaW1wb3J0IHsgZXh0cmFjdFRyYW5zYWN0aW9uQXJncywgZW50ZXJUcmFuc2FjdGlvblNjb3BlIH0gZnJvbSAnLi90cmFuc2FjdGlvbi1oZWxwZXJzJztcbmltcG9ydCB7IFRyYW5zYWN0aW9uTW9kZSB9IGZyb20gJy4uLy4uL3B1YmxpYy90eXBlcy90cmFuc2FjdGlvbi1tb2RlJztcbmltcG9ydCB7IHJlamVjdGlvbiB9IGZyb20gJy4uLy4uL2hlbHBlcnMvcHJvbWlzZSc7XG5pbXBvcnQgeyB1c2VQU0QgfSBmcm9tICcuLi8uLi9oZWxwZXJzL3Byb21pc2UnO1xuaW1wb3J0IHsgREJDb3JlIH0gZnJvbSAnLi4vLi4vcHVibGljL3R5cGVzL2RiY29yZSc7XG5pbXBvcnQgeyBNaWRkbGV3YXJlLCBEZXhpZVN0YWNrcyB9IGZyb20gJy4uLy4uL3B1YmxpYy90eXBlcy9taWRkbGV3YXJlJztcbmltcG9ydCB7IHZpcnR1YWxJbmRleE1pZGRsZXdhcmUgfSBmcm9tICcuLi8uLi9kYmNvcmUvdmlydHVhbC1pbmRleC1taWRkbGV3YXJlJztcbmltcG9ydCB7IGhvb2tzTWlkZGxld2FyZSB9IGZyb20gJy4uLy4uL2hvb2tzL2hvb2tzLW1pZGRsZXdhcmUnO1xuaW1wb3J0IHsgSW5kZXhhYmxlVHlwZSB9IGZyb20gJy4uLy4uL3B1YmxpYyc7XG5pbXBvcnQgeyBvYnNlcnZhYmlsaXR5TWlkZGxld2FyZSB9IGZyb20gJy4uLy4uL2xpdmUtcXVlcnkvb2JzZXJ2YWJpbGl0eS1taWRkbGV3YXJlJztcbmltcG9ydCB7IGNhY2hlRXhpc3RpbmdWYWx1ZXNNaWRkbGV3YXJlIH0gZnJvbSAnLi4vLi4vZGJjb3JlL2NhY2hlLWV4aXN0aW5nLXZhbHVlcy1taWRkbGV3YXJlJztcbmltcG9ydCB7IGNhY2hlTWlkZGxld2FyZSB9IGZyb20gXCIuLi8uLi9saXZlLXF1ZXJ5L2NhY2hlL2NhY2hlLW1pZGRsZXdhcmVcIjtcbmltcG9ydCB7IHZpcGlmeSB9IGZyb20gXCIuLi8uLi9oZWxwZXJzL3ZpcGlmeVwiO1xuXG5leHBvcnQgaW50ZXJmYWNlIERiUmVhZHlTdGF0ZSB7XG4gIGRiT3BlbkVycm9yOiBhbnk7XG4gIGlzQmVpbmdPcGVuZWQ6IGJvb2xlYW47XG4gIG9uUmVhZHlCZWluZ0ZpcmVkOiB1bmRlZmluZWQgfCBGdW5jdGlvbltdO1xuICBvcGVuQ29tcGxldGU6IGJvb2xlYW47XG4gIGRiUmVhZHlSZXNvbHZlOiAoKSA9PiB2b2lkO1xuICBkYlJlYWR5UHJvbWlzZTogUHJvbWlzZTxhbnk+O1xuICBjYW5jZWxPcGVuOiAocmVhc29uPzogRXJyb3IpID0+IHZvaWQ7XG4gIG9wZW5DYW5jZWxsZXI6IFByb21pc2U8YW55PiAmIHsgX3N0YWNrSG9sZGVyPzogRXJyb3IgfTtcbiAgYXV0b1NjaGVtYTogYm9vbGVhbjtcbiAgdmNGaXJlZD86IGJvb2xlYW47XG4gIFBSMTM5OF9tYXhMb29wPzogbnVtYmVyO1xuICBhdXRvT3Blbj86IGJvb2xlYW47XG59XG5cbmV4cG9ydCBjbGFzcyBEZXhpZSBpbXBsZW1lbnRzIElEZXhpZSB7XG4gIF9vcHRpb25zOiBEZXhpZU9wdGlvbnM7XG4gIF9zdGF0ZTogRGJSZWFkeVN0YXRlO1xuICBfdmVyc2lvbnM6IFZlcnNpb25bXTtcbiAgX3N0b3JlTmFtZXM6IHN0cmluZ1tdO1xuICBfZGVwczogRGV4aWVET01EZXBlbmRlbmNpZXM7XG4gIF9hbGxUYWJsZXM6IHsgW25hbWU6IHN0cmluZ106IFRhYmxlOyB9O1xuICBfY3JlYXRlVHJhbnNhY3Rpb246ICh0aGlzOiBEZXhpZSwgbW9kZTogSURCVHJhbnNhY3Rpb25Nb2RlLCBzdG9yZU5hbWVzOiBBcnJheUxpa2U8c3RyaW5nPiwgZGJzY2hlbWE6IHsgW3RhYmxlTmFtZTogc3RyaW5nXTogVGFibGVTY2hlbWE7IH0sIHBhcmVudFRyYW5zYWN0aW9uPzogVHJhbnNhY3Rpb24pID0+IFRyYW5zYWN0aW9uO1xuICBfZGJTY2hlbWE6IHsgW3RhYmxlTmFtZTogc3RyaW5nXTogVGFibGVTY2hlbWE7IH07XG4gIF9oYXNHZXRBbGw/OiBib29sZWFuO1xuICBfbWF4S2V5OiBJbmRleGFibGVUeXBlO1xuICBfZmlyZU9uQmxvY2tlZDogKGV2OiBFdmVudCkgPT4gdm9pZDtcbiAgX21pZGRsZXdhcmVzOiB7W1N0YWNrTmFtZSBpbiBrZXlvZiBEZXhpZVN0YWNrc10/OiBNaWRkbGV3YXJlPERleGllU3RhY2tzW1N0YWNrTmFtZV0+W119ID0ge307XG4gIF92aXA/OiBib29sZWFuO1xuICBfbm92aXA6IERleGllOy8vIGRiLl9ub3ZpcCBpcyB0byBlc2NhcGUgdG8gb3JpZyBkYiBmcm9tIGRiLnZpcC5cbiAgY29yZTogREJDb3JlO1xuXG4gIG5hbWU6IHN0cmluZztcbiAgdmVybm86IG51bWJlciA9IDA7XG4gIGlkYmRiOiBJREJEYXRhYmFzZSB8IG51bGw7XG4gIHZpcDogRGV4aWU7XG4gIG9uOiBEYkV2ZW50cztcblxuICBUYWJsZTogVGFibGVDb25zdHJ1Y3RvcjtcbiAgV2hlcmVDbGF1c2U6IFdoZXJlQ2xhdXNlQ29uc3RydWN0b3I7XG4gIENvbGxlY3Rpb246IENvbGxlY3Rpb25Db25zdHJ1Y3RvcjtcbiAgVmVyc2lvbjogVmVyc2lvbkNvbnN0cnVjdG9yO1xuICBUcmFuc2FjdGlvbjogVHJhbnNhY3Rpb25Db25zdHJ1Y3RvcjtcbiAgc3RhdGljIGRpc2FibGVCZkNhY2hlPzogYm9vbGVhbjtcblxuICBjb25zdHJ1Y3RvcihuYW1lOiBzdHJpbmcsIG9wdGlvbnM/OiBEZXhpZU9wdGlvbnMpIHtcbiAgICBjb25zdCBkZXBzID0gKERleGllIGFzIGFueSBhcyBEZXhpZUNvbnN0cnVjdG9yKS5kZXBlbmRlbmNpZXM7XG4gICAgdGhpcy5fb3B0aW9ucyA9IG9wdGlvbnMgPSB7XG4gICAgICAvLyBEZWZhdWx0IE9wdGlvbnNcbiAgICAgIGFkZG9uczogKERleGllIGFzIGFueSBhcyBEZXhpZUNvbnN0cnVjdG9yKS5hZGRvbnMsIC8vIFBpY2sgc3RhdGljYWxseSByZWdpc3RlcmVkIGFkZG9ucyBieSBkZWZhdWx0XG4gICAgICBhdXRvT3BlbjogdHJ1ZSwgICAgICAgICAgICAgICAgIC8vIERvbid0IHJlcXVpcmUgZGIub3BlbigpIGV4cGxpY2l0ZWx5LlxuICAgICAgLy8gRGVmYXVsdCBET00gZGVwZW5kZW5jeSBpbXBsZW1lbnRhdGlvbnMgZnJvbSBzdGF0aWMgcHJvcC5cbiAgICAgIGluZGV4ZWREQjogZGVwcy5pbmRleGVkREIsICAgICAgLy8gQmFja2VuZCBJbmRleGVkREIgYXBpLiBEZWZhdWx0IHRvIGJyb3dzZXIgZW52LlxuICAgICAgSURCS2V5UmFuZ2U6IGRlcHMuSURCS2V5UmFuZ2UsICAvLyBCYWNrZW5kIElEQktleVJhbmdlIGFwaS4gRGVmYXVsdCB0byBicm93c2VyIGVudi5cbiAgICAgIGNhY2hlOiAnY2xvbmVkJywgLy8gRGVmYXVsdCB0byBjbG9uZWQgZm9yIGJhY2t3YXJkIGNvbXBhdGliaWxpdHkuIEZvciBiZXN0IHBlcmZvcm1hbmNlIGFuZCBsZWFzdCBtZW1vcnkgY29uc3VtcHRpb24gdXNlICdpbW11dGFibGUnLlxuICAgICAgLi4ub3B0aW9uc1xuICAgIH07ICBcbiAgICB0aGlzLl9kZXBzID0ge1xuICAgICAgaW5kZXhlZERCOiBvcHRpb25zLmluZGV4ZWREQiBhcyBJREJGYWN0b3J5LFxuICAgICAgSURCS2V5UmFuZ2U6IG9wdGlvbnMuSURCS2V5UmFuZ2UgYXMgdHlwZW9mIElEQktleVJhbmdlXG4gICAgfTtcbiAgICBjb25zdCB7XG4gICAgICBhZGRvbnMsXG4gICAgfSA9IG9wdGlvbnM7XG4gICAgdGhpcy5fZGJTY2hlbWEgPSB7fTtcbiAgICB0aGlzLl92ZXJzaW9ucyA9IFtdO1xuICAgIHRoaXMuX3N0b3JlTmFtZXMgPSBbXTtcbiAgICB0aGlzLl9hbGxUYWJsZXMgPSB7fTtcbiAgICB0aGlzLmlkYmRiID0gbnVsbDtcbiAgICB0aGlzLl9ub3ZpcCA9IHRoaXM7XG4gICAgY29uc3Qgc3RhdGU6IERiUmVhZHlTdGF0ZSA9IHtcbiAgICAgIGRiT3BlbkVycm9yOiBudWxsLFxuICAgICAgaXNCZWluZ09wZW5lZDogZmFsc2UsXG4gICAgICBvblJlYWR5QmVpbmdGaXJlZDogbnVsbCxcbiAgICAgIG9wZW5Db21wbGV0ZTogZmFsc2UsXG4gICAgICBkYlJlYWR5UmVzb2x2ZTogbm9wLFxuICAgICAgZGJSZWFkeVByb21pc2U6IG51bGwgYXMgUHJvbWlzZSxcbiAgICAgIGNhbmNlbE9wZW46IG5vcCxcbiAgICAgIG9wZW5DYW5jZWxsZXI6IG51bGwgYXMgUHJvbWlzZSxcbiAgICAgIGF1dG9TY2hlbWE6IHRydWUsXG4gICAgICBQUjEzOThfbWF4TG9vcDogMyxcbiAgICAgIGF1dG9PcGVuOiBvcHRpb25zLmF1dG9PcGVuLFxuICAgIH07XG4gICAgc3RhdGUuZGJSZWFkeVByb21pc2UgPSBuZXcgUHJvbWlzZShyZXNvbHZlID0+IHtcbiAgICAgIHN0YXRlLmRiUmVhZHlSZXNvbHZlID0gcmVzb2x2ZTtcbiAgICB9KTtcbiAgICBzdGF0ZS5vcGVuQ2FuY2VsbGVyID0gbmV3IFByb21pc2UoKF8sIHJlamVjdCkgPT4ge1xuICAgICAgc3RhdGUuY2FuY2VsT3BlbiA9IHJlamVjdDtcbiAgICB9KTtcbiAgICB0aGlzLl9zdGF0ZSA9IHN0YXRlO1xuICAgIHRoaXMubmFtZSA9IG5hbWU7XG4gICAgdGhpcy5vbiA9IEV2ZW50cyh0aGlzLCBcInBvcHVsYXRlXCIsIFwiYmxvY2tlZFwiLCBcInZlcnNpb25jaGFuZ2VcIiwgXCJjbG9zZVwiLCB7IHJlYWR5OiBbcHJvbWlzYWJsZUNoYWluLCBub3BdIH0pIGFzIERiRXZlbnRzO1xuICAgIHRoaXMub24ucmVhZHkuc3Vic2NyaWJlID0gb3ZlcnJpZGUodGhpcy5vbi5yZWFkeS5zdWJzY3JpYmUsIHN1YnNjcmliZSA9PiB7XG4gICAgICByZXR1cm4gKHN1YnNjcmliZXIsIGJTdGlja3kpID0+IHtcbiAgICAgICAgKERleGllIGFzIGFueSBhcyBEZXhpZUNvbnN0cnVjdG9yKS52aXAoKCkgPT4ge1xuICAgICAgICAgIGNvbnN0IHN0YXRlID0gdGhpcy5fc3RhdGU7XG4gICAgICAgICAgaWYgKHN0YXRlLm9wZW5Db21wbGV0ZSkge1xuICAgICAgICAgICAgLy8gRGF0YWJhc2UgYWxyZWFkeSBvcGVuLiBDYWxsIHN1YnNjcmliZXIgYXNhcC5cbiAgICAgICAgICAgIGlmICghc3RhdGUuZGJPcGVuRXJyb3IpIFByb21pc2UucmVzb2x2ZSgpLnRoZW4oc3Vic2NyaWJlcik7XG4gICAgICAgICAgICAvLyBiU3RpY2t5OiBBbHNvIHN1YnNjcmliZSB0byBmdXR1cmUgb3BlbiBzdWNlc3NlcyAoYWZ0ZXIgY2xvc2UgLyByZW9wZW4pIFxuICAgICAgICAgICAgaWYgKGJTdGlja3kpIHN1YnNjcmliZShzdWJzY3JpYmVyKTtcbiAgICAgICAgICB9IGVsc2UgaWYgKHN0YXRlLm9uUmVhZHlCZWluZ0ZpcmVkKSB7XG4gICAgICAgICAgICAvLyBkYi5vbigncmVhZHknKSBzdWJzY3JpYmVycyBhcmUgY3VycmVudGx5IGJlaW5nIGV4ZWN1dGVkIGFuZCBoYXZlIG5vdCB5ZXQgcmVzb2x2ZWQgb3IgcmVqZWN0ZWRcbiAgICAgICAgICAgIHN0YXRlLm9uUmVhZHlCZWluZ0ZpcmVkLnB1c2goc3Vic2NyaWJlcik7XG4gICAgICAgICAgICBpZiAoYlN0aWNreSkgc3Vic2NyaWJlKHN1YnNjcmliZXIpO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAvLyBEYXRhYmFzZSBub3QgeWV0IG9wZW4uIFN1YnNjcmliZSB0byBpdC5cbiAgICAgICAgICAgIHN1YnNjcmliZShzdWJzY3JpYmVyKTtcbiAgICAgICAgICAgIC8vIElmIGJTdGlja3kgaXMgZmFsc3ksIG1ha2Ugc3VyZSB0byB1bnN1YnNjcmliZSBzdWJzY3JpYmVyIHdoZW4gZmlyZWQgb25jZS5cbiAgICAgICAgICAgIGNvbnN0IGRiID0gdGhpcztcbiAgICAgICAgICAgIGlmICghYlN0aWNreSkgc3Vic2NyaWJlKGZ1bmN0aW9uIHVuc3Vic2NyaWJlKCkge1xuICAgICAgICAgICAgICBkYi5vbi5yZWFkeS51bnN1YnNjcmliZShzdWJzY3JpYmVyKTtcbiAgICAgICAgICAgICAgZGIub24ucmVhZHkudW5zdWJzY3JpYmUodW5zdWJzY3JpYmUpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9KTtcblxuICAgIC8vIENyZWF0ZSBkZXJpdmVkIGNsYXNzZXMgYm91bmQgdG8gdGhpcyBpbnN0YW5jZSBvZiBEZXhpZTpcbiAgICB0aGlzLkNvbGxlY3Rpb24gPSBjcmVhdGVDb2xsZWN0aW9uQ29uc3RydWN0b3IodGhpcyk7XG4gICAgdGhpcy5UYWJsZSA9IGNyZWF0ZVRhYmxlQ29uc3RydWN0b3IodGhpcyk7XG4gICAgdGhpcy5UcmFuc2FjdGlvbiA9IGNyZWF0ZVRyYW5zYWN0aW9uQ29uc3RydWN0b3IodGhpcyk7XG4gICAgdGhpcy5WZXJzaW9uID0gY3JlYXRlVmVyc2lvbkNvbnN0cnVjdG9yKHRoaXMpO1xuICAgIHRoaXMuV2hlcmVDbGF1c2UgPSBjcmVhdGVXaGVyZUNsYXVzZUNvbnN0cnVjdG9yKHRoaXMpO1xuXG4gICAgLy8gRGVmYXVsdCBzdWJzY3JpYmVycyB0byBcInZlcnNpb25jaGFuZ2VcIiBhbmQgXCJibG9ja2VkXCIuXG4gICAgLy8gQ2FuIGJlIG92ZXJyaWRkZW4gYnkgY3VzdG9tIGhhbmRsZXJzLiBJZiBjdXN0b20gaGFuZGxlcnMgcmV0dXJuIGZhbHNlLCB0aGVzZSBkZWZhdWx0XG4gICAgLy8gYmVoYXZpb3VycyB3aWxsIGJlIHByZXZlbnRlZC5cbiAgICB0aGlzLm9uKFwidmVyc2lvbmNoYW5nZVwiLCBldiA9PiB7XG4gICAgICAvLyBEZWZhdWx0IGJlaGF2aW9yIGZvciB2ZXJzaW9uY2hhbmdlIGV2ZW50IGlzIHRvIGNsb3NlIGRhdGFiYXNlIGNvbm5lY3Rpb24uXG4gICAgICAvLyBDYWxsZXIgY2FuIG92ZXJyaWRlIHRoaXMgYmVoYXZpb3IgYnkgZG9pbmcgZGIub24oXCJ2ZXJzaW9uY2hhbmdlXCIsIGZ1bmN0aW9uKCl7IHJldHVybiBmYWxzZTsgfSk7XG4gICAgICAvLyBMZXQncyBub3QgYmxvY2sgdGhlIG90aGVyIHdpbmRvdyBmcm9tIG1ha2luZyBpdCdzIGRlbGV0ZSgpIG9yIG9wZW4oKSBjYWxsLlxuICAgICAgLy8gTk9URSEgVGhpcyBldmVudCBpcyBuZXZlciBmaXJlZCBpbiBJRSxFZGdlIG9yIFNhZmFyaS5cbiAgICAgIGlmIChldi5uZXdWZXJzaW9uID4gMClcbiAgICAgICAgY29uc29sZS53YXJuKGBBbm90aGVyIGNvbm5lY3Rpb24gd2FudHMgdG8gdXBncmFkZSBkYXRhYmFzZSAnJHt0aGlzLm5hbWV9Jy4gQ2xvc2luZyBkYiBub3cgdG8gcmVzdW1lIHRoZSB1cGdyYWRlLmApO1xuICAgICAgZWxzZVxuICAgICAgICBjb25zb2xlLndhcm4oYEFub3RoZXIgY29ubmVjdGlvbiB3YW50cyB0byBkZWxldGUgZGF0YWJhc2UgJyR7dGhpcy5uYW1lfScuIENsb3NpbmcgZGIgbm93IHRvIHJlc3VtZSB0aGUgZGVsZXRlIHJlcXVlc3QuYCk7XG4gICAgICB0aGlzLmNsb3NlKHtkaXNhYmxlQXV0b09wZW46IGZhbHNlfSk7XG4gICAgICAvLyBJbiBtYW55IHdlYiBhcHBsaWNhdGlvbnMsIGl0IHdvdWxkIGJlIHJlY29tbWVuZGVkIHRvIGZvcmNlIHdpbmRvdy5yZWxvYWQoKVxuICAgICAgLy8gd2hlbiB0aGlzIGV2ZW50IG9jY3Vycy4gVG8gZG8gdGhhdCwgc3Vic2NyaWJlIHRvIHRoZSB2ZXJzaW9uY2hhbmdlIGV2ZW50XG4gICAgICAvLyBhbmQgY2FsbCB3aW5kb3cubG9jYXRpb24ucmVsb2FkKHRydWUpIGlmIGV2Lm5ld1ZlcnNpb24gPiAwIChub3QgYSBkZWxldGlvbilcbiAgICAgIC8vIFRoZSByZWFzb24gZm9yIHRoaXMgaXMgdGhhdCB5b3VyIGN1cnJlbnQgd2ViIGFwcCBvYnZpb3VzbHkgaGFzIG9sZCBzY2hlbWEgY29kZSB0aGF0IG5lZWRzXG4gICAgICAvLyB0byBiZSB1cGRhdGVkLiBBbm90aGVyIHdpbmRvdyBnb3QgYSBuZXdlciB2ZXJzaW9uIG9mIHRoZSBhcHAgYW5kIG5lZWRzIHRvIHVwZ3JhZGUgREIgYnV0XG4gICAgICAvLyB5b3VyIHdpbmRvdyBpcyBibG9ja2luZyBpdCB1bmxlc3Mgd2UgY2xvc2UgaXQgaGVyZS5cbiAgICB9KTtcbiAgICB0aGlzLm9uKFwiYmxvY2tlZFwiLCBldiA9PiB7XG4gICAgICBpZiAoIWV2Lm5ld1ZlcnNpb24gfHwgZXYubmV3VmVyc2lvbiA8IGV2Lm9sZFZlcnNpb24pXG4gICAgICAgIGNvbnNvbGUud2FybihgRGV4aWUuZGVsZXRlKCcke3RoaXMubmFtZX0nKSB3YXMgYmxvY2tlZGApO1xuICAgICAgZWxzZVxuICAgICAgICBjb25zb2xlLndhcm4oYFVwZ3JhZGUgJyR7dGhpcy5uYW1lfScgYmxvY2tlZCBieSBvdGhlciBjb25uZWN0aW9uIGhvbGRpbmcgdmVyc2lvbiAke2V2Lm9sZFZlcnNpb24gLyAxMH1gKTtcbiAgICB9KTtcblxuICAgIHRoaXMuX21heEtleSA9IGdldE1heEtleShvcHRpb25zLklEQktleVJhbmdlIGFzIHR5cGVvZiBJREJLZXlSYW5nZSk7XG5cbiAgICB0aGlzLl9jcmVhdGVUcmFuc2FjdGlvbiA9IChcbiAgICAgIG1vZGU6IElEQlRyYW5zYWN0aW9uTW9kZSxcbiAgICAgIHN0b3JlTmFtZXM6IHN0cmluZ1tdLFxuICAgICAgZGJzY2hlbWE6IERiU2NoZW1hLFxuICAgICAgcGFyZW50VHJhbnNhY3Rpb24/OiBUcmFuc2FjdGlvbikgPT4gbmV3IHRoaXMuVHJhbnNhY3Rpb24obW9kZSwgc3RvcmVOYW1lcywgZGJzY2hlbWEsIHRoaXMuX29wdGlvbnMuY2hyb21lVHJhbnNhY3Rpb25EdXJhYmlsaXR5LCBwYXJlbnRUcmFuc2FjdGlvbik7XG5cbiAgICB0aGlzLl9maXJlT25CbG9ja2VkID0gZXYgPT4ge1xuICAgICAgdGhpcy5vbihcImJsb2NrZWRcIikuZmlyZShldik7XG4gICAgICAvLyBXb3JrYXJvdW5kIChub3QgZnVsbHkqKSBmb3IgbWlzc2luZyBcInZlcnNpb25jaGFuZ2VcIiBldmVudCBpbiBJRSxFZGdlIGFuZCBTYWZhcmk6XG4gICAgICBjb25uZWN0aW9uc1xuICAgICAgICAuZmlsdGVyKGMgPT4gYy5uYW1lID09PSB0aGlzLm5hbWUgJiYgYyAhPT0gdGhpcyAmJiAhYy5fc3RhdGUudmNGaXJlZClcbiAgICAgICAgLm1hcChjID0+IGMub24oXCJ2ZXJzaW9uY2hhbmdlXCIpLmZpcmUoZXYpKTtcbiAgICB9XG5cbiAgICAvLyBEZWZhdWx0IG1pZGRsZXdhcmVzOlxuICAgIHRoaXMudXNlKGNhY2hlRXhpc3RpbmdWYWx1ZXNNaWRkbGV3YXJlKTtcbiAgICB0aGlzLnVzZShjYWNoZU1pZGRsZXdhcmUpO1xuICAgIHRoaXMudXNlKG9ic2VydmFiaWxpdHlNaWRkbGV3YXJlKTtcbiAgICB0aGlzLnVzZSh2aXJ0dWFsSW5kZXhNaWRkbGV3YXJlKTtcbiAgICB0aGlzLnVzZShob29rc01pZGRsZXdhcmUpO1xuXG4gICAgY29uc3QgdmlwREIgPSBuZXcgUHJveHkodGhpcywge1xuICAgICAgZ2V0OiAoXywgcHJvcCwgcmVjZWl2ZXIpID0+IHtcbiAgICAgICAgaWYgKHByb3AgPT09ICdfdmlwJykgcmV0dXJuIHRydWU7XG4gICAgICAgIGlmIChwcm9wID09PSAndGFibGUnKSByZXR1cm4gKHRhYmxlTmFtZTogc3RyaW5nKSA9PiB2aXBpZnkodGhpcy50YWJsZSh0YWJsZU5hbWUpLCB2aXBEQik7XG4gICAgICAgIGNvbnN0IHJ2ID0gUmVmbGVjdC5nZXQoXywgcHJvcCwgcmVjZWl2ZXIpO1xuICAgICAgICBpZiAocnYgaW5zdGFuY2VvZiBUYWJsZSkgcmV0dXJuIHZpcGlmeShydiwgdmlwREIpO1xuICAgICAgICBpZiAocHJvcCA9PT0gJ3RhYmxlcycpIHJldHVybiAocnYgYXMgVGFibGVbXSkubWFwKHQgPT4gdmlwaWZ5KHQsIHZpcERCKSk7XG4gICAgICAgIGlmIChwcm9wID09PSAnX2NyZWF0ZVRyYW5zYWN0aW9uJykgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgICAgICAgIGNvbnN0IHR4OiBUcmFuc2FjdGlvbiA9IChydiBhcyB0eXBlb2YgdGhpcy5fY3JlYXRlVHJhbnNhY3Rpb24pLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gICAgICAgICAgcmV0dXJuIHZpcGlmeSh0eCwgdmlwREIpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBydjtcbiAgICAgIH1cbiAgICB9KTtcbiAgICB0aGlzLnZpcCA9IHZpcERCO1xuXG4gICAgLy8gQ2FsbCBlYWNoIGFkZG9uOlxuICAgIGFkZG9ucy5mb3JFYWNoKGFkZG9uID0+IGFkZG9uKHRoaXMpKTtcbiAgfVxuXG4gIHZlcnNpb24odmVyc2lvbk51bWJlcjogbnVtYmVyKTogVmVyc2lvbiB7XG4gICAgaWYgKGlzTmFOKHZlcnNpb25OdW1iZXIpIHx8IHZlcnNpb25OdW1iZXIgPCAwLjEpIHRocm93IG5ldyBleGNlcHRpb25zLlR5cGUoYEdpdmVuIHZlcnNpb24gaXMgbm90IGEgcG9zaXRpdmUgbnVtYmVyYCk7XG4gICAgdmVyc2lvbk51bWJlciA9IE1hdGgucm91bmQodmVyc2lvbk51bWJlciAqIDEwKSAvIDEwO1xuICAgIGlmICh0aGlzLmlkYmRiIHx8IHRoaXMuX3N0YXRlLmlzQmVpbmdPcGVuZWQpXG4gICAgICB0aHJvdyBuZXcgZXhjZXB0aW9ucy5TY2hlbWEoXCJDYW5ub3QgYWRkIHZlcnNpb24gd2hlbiBkYXRhYmFzZSBpcyBvcGVuXCIpO1xuICAgIHRoaXMudmVybm8gPSBNYXRoLm1heCh0aGlzLnZlcm5vLCB2ZXJzaW9uTnVtYmVyKTtcbiAgICBjb25zdCB2ZXJzaW9ucyA9IHRoaXMuX3ZlcnNpb25zO1xuICAgIHZhciB2ZXJzaW9uSW5zdGFuY2UgPSB2ZXJzaW9ucy5maWx0ZXIoXG4gICAgICB2ID0+IHYuX2NmZy52ZXJzaW9uID09PSB2ZXJzaW9uTnVtYmVyKVswXTtcbiAgICBpZiAodmVyc2lvbkluc3RhbmNlKSByZXR1cm4gdmVyc2lvbkluc3RhbmNlO1xuICAgIHZlcnNpb25JbnN0YW5jZSA9IG5ldyB0aGlzLlZlcnNpb24odmVyc2lvbk51bWJlcik7XG4gICAgdmVyc2lvbnMucHVzaCh2ZXJzaW9uSW5zdGFuY2UpO1xuICAgIHZlcnNpb25zLnNvcnQobG93ZXJWZXJzaW9uRmlyc3QpO1xuICAgIHZlcnNpb25JbnN0YW5jZS5zdG9yZXMoe30pOyAvLyBEZXJpdmUgZWFybGllciBzY2hlbWFzIGJ5IGRlZmF1bHQuXG4gICAgLy8gRGlzYWJsZSBhdXRvc2NoZW1hIG1vZGUsIGFzIGF0IGxlYXN0IG9uZSB2ZXJzaW9uIGlzIHNwZWNpZmllZC5cbiAgICB0aGlzLl9zdGF0ZS5hdXRvU2NoZW1hID0gZmFsc2U7XG4gICAgcmV0dXJuIHZlcnNpb25JbnN0YW5jZTtcbiAgfVxuXG4gIF93aGVuUmVhZHk8VD4oZm46ICgpID0+IFByb21pc2U8VD4pOiBQcm9taXNlPFQ+IHtcbiAgICByZXR1cm4gKHRoaXMuaWRiZGIgJiYgKHRoaXMuX3N0YXRlLm9wZW5Db21wbGV0ZSB8fCBQU0QubGV0VGhyb3VnaCB8fCB0aGlzLl92aXApKSA/IGZuKCkgOiBuZXcgUHJvbWlzZTxUPigocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgICBpZiAodGhpcy5fc3RhdGUub3BlbkNvbXBsZXRlKSB7XG4gICAgICAgIC8vIGlkYmRiIGlzIGZhbHN5IGJ1dCBvcGVuQ29tcGxldGUgaXMgdHJ1ZS4gTXVzdCBoYXZlIGJlZW4gYW4gZXhjZXB0aW9uIGR1cmluIG9wZW4uXG4gICAgICAgIC8vIERvbid0IHdhaXQgZm9yIG9wZW5Db21wbGV0ZSBhcyBpdCB3b3VsZCBsZWFkIHRvIGluZmluaXRlIGxvb3AuXG4gICAgICAgIHJldHVybiByZWplY3QobmV3IGV4Y2VwdGlvbnMuRGF0YWJhc2VDbG9zZWQodGhpcy5fc3RhdGUuZGJPcGVuRXJyb3IpKTtcbiAgICAgIH1cbiAgICAgIGlmICghdGhpcy5fc3RhdGUuaXNCZWluZ09wZW5lZCkge1xuICAgICAgICBpZiAoIXRoaXMuX3N0YXRlLmF1dG9PcGVuKSB7XG4gICAgICAgICAgcmVqZWN0KG5ldyBleGNlcHRpb25zLkRhdGFiYXNlQ2xvc2VkKCkpO1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLm9wZW4oKS5jYXRjaChub3ApOyAvLyBPcGVuIGluIGJhY2tncm91bmQuIElmIGlmIGZhaWxzLCBpdCB3aWxsIGJlIGNhdGNoZWQgYnkgdGhlIGZpbmFsIHByb21pc2UgYW55d2F5LlxuICAgICAgfVxuICAgICAgdGhpcy5fc3RhdGUuZGJSZWFkeVByb21pc2UudGhlbihyZXNvbHZlLCByZWplY3QpO1xuICAgIH0pLnRoZW4oZm4pO1xuICB9XG5cbiAgdXNlKHtzdGFjaywgY3JlYXRlLCBsZXZlbCwgbmFtZX06IE1pZGRsZXdhcmU8REJDb3JlPik6IHRoaXMge1xuICAgIGlmIChuYW1lKSB0aGlzLnVudXNlKHtzdGFjaywgbmFtZX0pOyAvLyBCZSBhYmxlIHRvIHJlcGxhY2UgZXhpc3RpbmcgbWlkZGxld2FyZS5cbiAgICBjb25zdCBtaWRkbGV3YXJlcyA9IHRoaXMuX21pZGRsZXdhcmVzW3N0YWNrXSB8fCAodGhpcy5fbWlkZGxld2FyZXNbc3RhY2tdID0gW10pO1xuICAgIG1pZGRsZXdhcmVzLnB1c2goe3N0YWNrLCBjcmVhdGUsIGxldmVsOiBsZXZlbCA9PSBudWxsID8gMTAgOiBsZXZlbCwgbmFtZX0pO1xuICAgIG1pZGRsZXdhcmVzLnNvcnQoKGEsIGIpID0+IGEubGV2ZWwgLSBiLmxldmVsKTtcbiAgICAvLyBUb2RvIHVwZGF0ZSBkYi5jb3JlIGFuZCBkYi50YWJsZXMuLi5jb3JlID8gT3Igc2hvdWxkIGJlIGV4cGVjdCB0aGlzIHRvIGhhdmUgZWZmZWN0XG4gICAgLy8gb25seSBhZnRlciBuZXh0IG9wZW4oKT9cbiAgICByZXR1cm4gdGhpcztcbiAgfVxuXG4gIHVudXNlKHtzdGFjaywgY3JlYXRlfTogTWlkZGxld2FyZTx7c3RhY2s6IGtleW9mIERleGllU3RhY2tzfT4pOiB0aGlzO1xuICB1bnVzZSh7c3RhY2ssIG5hbWV9OiB7c3RhY2s6IGtleW9mIERleGllU3RhY2tzLCBuYW1lOiBzdHJpbmd9KTogdGhpcztcbiAgdW51c2Uoe3N0YWNrLCBuYW1lLCBjcmVhdGV9OiB7c3RhY2s6IGtleW9mIERleGllU3RhY2tzLCBuYW1lPzogc3RyaW5nLCBjcmVhdGU/OiBGdW5jdGlvbn0pIHtcbiAgICBpZiAoc3RhY2sgJiYgdGhpcy5fbWlkZGxld2FyZXNbc3RhY2tdKSB7XG4gICAgICB0aGlzLl9taWRkbGV3YXJlc1tzdGFja10gPSB0aGlzLl9taWRkbGV3YXJlc1tzdGFja10uZmlsdGVyKG13ID0+XG4gICAgICAgIGNyZWF0ZSA/IG13LmNyZWF0ZSAhPT0gY3JlYXRlIDogLy8gR2l2ZW4gbWlkZGxld2FyZSBoYXMgYSBjcmVhdGUgbWV0aG9kLiBNYXRjaCB0aGF0IGV4YWN0bHkuXG4gICAgICAgIG5hbWUgPyBtdy5uYW1lICE9PSBuYW1lIDogLy8gR2l2ZW4gbWlkZGxld2FyZSBzcGVjIFxuICAgICAgICBmYWxzZSk7XG4gICAgfVxuICAgIHJldHVybiB0aGlzO1xuICB9XG5cbiAgb3BlbigpIHtcbiAgICByZXR1cm4gdXNlUFNEKFxuICAgICAgZ2xvYmFsUFNELCAvLyBFbmZvcmNlIGdsb2JhbCBzY29wZSBoZXJlIHNpbmNlIGRiLm9wZW4oKSBjYW4gYmUgcGFydCBvZiBhIGxpdmUgcXVlcnkgb3IgdHJhbnNhY3Rpb24gc2NvcGVcbiAgICAgICgpID0+IGRleGllT3Blbih0aGlzKVxuICAgICk7XG4gIH1cblxuICBfY2xvc2UoKTogdm9pZCB7XG4gICAgY29uc3Qgc3RhdGUgPSB0aGlzLl9zdGF0ZTtcbiAgICBjb25zdCBpZHggPSBjb25uZWN0aW9ucy5pbmRleE9mKHRoaXMpO1xuICAgIGlmIChpZHggPj0gMCkgY29ubmVjdGlvbnMuc3BsaWNlKGlkeCwgMSk7XG4gICAgaWYgKHRoaXMuaWRiZGIpIHtcbiAgICAgIHRyeSB7IHRoaXMuaWRiZGIuY2xvc2UoKTsgfSBjYXRjaCAoZSkgeyB9XG4gICAgICB0aGlzLmlkYmRiID0gbnVsbDtcbiAgICB9ICAgIFxuICAgIC8vIFJlc2V0IGRiUmVhZHlQcm9taXNlIHByb21pc2U6XG4gICAgaWYgKCFzdGF0ZS5pc0JlaW5nT3BlbmVkKSB7XG4gICAgICAvLyBPbmx5IGlmIG5vdCBiZWluZyBvcGVuZWQsIHJlc2V0IHRoZXNlIHByb21pc2VzLlxuICAgICAgLy8gT3RoZXJ3aXNlLCBrZWVwIHRoZW0gc28gZXhpc3RpbmcgcHJvbWlzZSBjb25zdW1lcnMgd2lsbCByZXNvbHZlIHdoZW4gZGJcbiAgICAgIC8vIGRiIGlzIHJlb3BlbmVkIGxhdGVyIG9uLCBpbiBjYXNlIGNsb3NpbmcgZm9yIHB1cnBvc2UgcmVvcGVuaW5nLCB1c2luZyB7ZGlzYWJsZUF1dG9PcGVuOiBmYWxzZX0uXG4gICAgICBzdGF0ZS5kYlJlYWR5UHJvbWlzZSA9IG5ldyBQcm9taXNlKHJlc29sdmUgPT4ge1xuICAgICAgICBzdGF0ZS5kYlJlYWR5UmVzb2x2ZSA9IHJlc29sdmU7XG4gICAgICB9KTtcbiAgICAgIHN0YXRlLm9wZW5DYW5jZWxsZXIgPSBuZXcgUHJvbWlzZSgoXywgcmVqZWN0KSA9PiB7XG4gICAgICAgIHN0YXRlLmNhbmNlbE9wZW4gPSByZWplY3Q7XG4gICAgICB9KTtcbiAgICB9XG4gIH1cblxuICBjbG9zZSh7ZGlzYWJsZUF1dG9PcGVufSA9IHtkaXNhYmxlQXV0b09wZW46IHRydWV9KTogdm9pZCB7XG4gICAgY29uc3Qgc3RhdGUgPSB0aGlzLl9zdGF0ZTtcbiAgICBpZiAoZGlzYWJsZUF1dG9PcGVuKSB7XG4gICAgICBpZiAoc3RhdGUuaXNCZWluZ09wZW5lZCkge1xuICAgICAgICAvLyBjYW5jZWwgYmVmb3JlIHRoZSBjYWxsIHRvIHRoaXMuX2Nsb3NlKCkgYmVjYXVzZSB0aGlzLl9jbG9zZSgpIHdpbGwgcmVjcmVhdGUgZGJSZWFkeVByb21pc2UgYW5kIG9wZW5DYW5jZWxsZXIuXG4gICAgICAgIHN0YXRlLmNhbmNlbE9wZW4obmV3IGV4Y2VwdGlvbnMuRGF0YWJhc2VDbG9zZWQoKSk7XG4gICAgICB9XG4gICAgICB0aGlzLl9jbG9zZSgpO1xuICAgICAgc3RhdGUuYXV0b09wZW4gPSBmYWxzZTtcbiAgICAgIHN0YXRlLmRiT3BlbkVycm9yID0gbmV3IGV4Y2VwdGlvbnMuRGF0YWJhc2VDbG9zZWQoKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5fY2xvc2UoKTtcbiAgICAgIHN0YXRlLmF1dG9PcGVuID0gdGhpcy5fb3B0aW9ucy5hdXRvT3BlbiB8fFxuICAgICAgICBzdGF0ZS5pc0JlaW5nT3BlbmVkOyAvLyBJZiBhbiBvcGVuIGNhbGwgaXMgb25nb2luZywgdGhhdCBzYW1lIHByb21pc2Ugd2lsbCByZXNvbHZlIHdoZW4gZGIgaXMgcmVvcGVuZC5cbiAgICAgIHN0YXRlLm9wZW5Db21wbGV0ZSA9IGZhbHNlO1xuICAgICAgc3RhdGUuZGJPcGVuRXJyb3IgPSBudWxsO1xuICAgIH1cbiAgfVxuXG4gIGRlbGV0ZShjbG9zZU9wdGlvbnMgPSB7ZGlzYWJsZUF1dG9PcGVuOiB0cnVlfSk6IFByb21pc2U8dm9pZD4ge1xuICAgIC8vIFByZXZlbnQgYWNjaWRlbnRpYWxseSBkb2luZyBkYi5kZWxldGUoMSkgd2hlbiBpbnRlbnRpb24gd2FzIHRvIGRvIGRiLlt0YWJsZV0uZGVsZXRlKDEpLlxuICAgIGNvbnN0IGhhc0ludmFsaWRBcmd1bWVudHMgPSBhcmd1bWVudHMubGVuZ3RoID4gMCAmJiB0eXBlb2YgYXJndW1lbnRzWzBdICE9PSAnb2JqZWN0JzsgXG4gICAgY29uc3Qgc3RhdGUgPSB0aGlzLl9zdGF0ZTtcbiAgICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuICAgICAgY29uc3QgZG9EZWxldGUgPSAoKSA9PiB7XG4gICAgICAgIHRoaXMuY2xvc2UoY2xvc2VPcHRpb25zKTtcbiAgICAgICAgdmFyIHJlcSA9IHRoaXMuX2RlcHMuaW5kZXhlZERCLmRlbGV0ZURhdGFiYXNlKHRoaXMubmFtZSk7XG4gICAgICAgIHJlcS5vbnN1Y2Nlc3MgPSB3cmFwKCgpID0+IHtcbiAgICAgICAgICBfb25EYXRhYmFzZURlbGV0ZWQodGhpcy5fZGVwcywgdGhpcy5uYW1lKTtcbiAgICAgICAgICByZXNvbHZlKCk7XG4gICAgICAgIH0pO1xuICAgICAgICByZXEub25lcnJvciA9IGV2ZW50UmVqZWN0SGFuZGxlcihyZWplY3QpO1xuICAgICAgICByZXEub25ibG9ja2VkID0gdGhpcy5fZmlyZU9uQmxvY2tlZDtcbiAgICAgIH1cbiAgICAgIC8vIFByZXZlbnQgYWNjaWRlbnRpYWxseSBkb2luZyBkYi5kZWxldGUoMSkgd2hlbiBpbnRlbnRpb24gd2FzIHRvIGRvIGRiLlt0YWJsZV0uZGVsZXRlKDEpLlxuICAgICAgaWYgKGhhc0ludmFsaWRBcmd1bWVudHMpIHRocm93IG5ldyBleGNlcHRpb25zLkludmFsaWRBcmd1bWVudChcIkludmFsaWQgY2xvc2VPcHRpb25zIGFyZ3VtZW50IHRvIGRiLmRlbGV0ZSgpXCIpO1xuICAgICAgaWYgKHN0YXRlLmlzQmVpbmdPcGVuZWQpIHtcbiAgICAgICAgc3RhdGUuZGJSZWFkeVByb21pc2UudGhlbihkb0RlbGV0ZSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBkb0RlbGV0ZSgpO1xuICAgICAgfVxuICAgIH0pO1xuICB9XG5cbiAgYmFja2VuZERCKCkge1xuICAgIHJldHVybiB0aGlzLmlkYmRiO1xuICB9XG5cbiAgaXNPcGVuKCkge1xuICAgIHJldHVybiB0aGlzLmlkYmRiICE9PSBudWxsO1xuICB9XG5cbiAgaGFzQmVlbkNsb3NlZCgpIHtcbiAgICBjb25zdCBkYk9wZW5FcnJvciA9IHRoaXMuX3N0YXRlLmRiT3BlbkVycm9yO1xuICAgIHJldHVybiBkYk9wZW5FcnJvciAmJiAoZGJPcGVuRXJyb3IubmFtZSA9PT0gJ0RhdGFiYXNlQ2xvc2VkJyk7XG4gIH1cblxuICBoYXNGYWlsZWQoKSB7XG4gICAgcmV0dXJuIHRoaXMuX3N0YXRlLmRiT3BlbkVycm9yICE9PSBudWxsO1xuICB9XG5cbiAgZHluYW1pY2FsbHlPcGVuZWQoKSB7XG4gICAgcmV0dXJuIHRoaXMuX3N0YXRlLmF1dG9TY2hlbWE7XG4gIH1cblxuICBnZXQgdGFibGVzICgpIHtcbiAgICByZXR1cm4ga2V5cyh0aGlzLl9hbGxUYWJsZXMpLm1hcChuYW1lID0+IHRoaXMuX2FsbFRhYmxlc1tuYW1lXSk7XG4gIH1cblxuICB0cmFuc2FjdGlvbigpOiBQcm9taXNlIHtcbiAgICBjb25zdCBhcmdzID0gZXh0cmFjdFRyYW5zYWN0aW9uQXJncy5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICAgIHJldHVybiB0aGlzLl90cmFuc2FjdGlvbi5hcHBseSh0aGlzLCBhcmdzKTtcbiAgfVxuXG4gIF90cmFuc2FjdGlvbihtb2RlOiBUcmFuc2FjdGlvbk1vZGUsIHRhYmxlczogQXJyYXk8SVRhYmxlIHwgc3RyaW5nPiwgc2NvcGVGdW5jOiBGdW5jdGlvbikge1xuICAgIGxldCBwYXJlbnRUcmFuc2FjdGlvbiA9IFBTRC50cmFucyBhcyBUcmFuc2FjdGlvbiB8IHVuZGVmaW5lZDtcbiAgICAvLyBDaGVjayBpZiBwYXJlbnQgdHJhbnNhY3Rpb25zIGlzIGJvdW5kIHRvIHRoaXMgZGIgaW5zdGFuY2UsIGFuZCBpZiBjYWxsZXIgd2FudHMgdG8gcmV1c2UgaXRcbiAgICBpZiAoIXBhcmVudFRyYW5zYWN0aW9uIHx8IHBhcmVudFRyYW5zYWN0aW9uLmRiICE9PSB0aGlzIHx8IG1vZGUuaW5kZXhPZignIScpICE9PSAtMSkgcGFyZW50VHJhbnNhY3Rpb24gPSBudWxsO1xuICAgIGNvbnN0IG9ubHlJZkNvbXBhdGlibGUgPSBtb2RlLmluZGV4T2YoJz8nKSAhPT0gLTE7XG4gICAgbW9kZSA9IG1vZGUucmVwbGFjZSgnIScsICcnKS5yZXBsYWNlKCc/JywgJycpIGFzIFRyYW5zYWN0aW9uTW9kZTsgLy8gT2suIFdpbGwgY2hhbmdlIGFyZ3VtZW50c1swXSBhcyB3ZWxsIGJ1dCB3ZSB3b250IHRvdWNoIGFyZ3VtZW50cyBoZW5jZWZvcnRoLlxuICAgIGxldCBpZGJNb2RlOiBJREJUcmFuc2FjdGlvbk1vZGUsXG4gICAgICAgIHN0b3JlTmFtZXM7XG5cbiAgICB0cnkge1xuICAgICAgICAvL1xuICAgICAgICAvLyBHZXQgc3RvcmVOYW1lcyBmcm9tIGFyZ3VtZW50cy4gRWl0aGVyIHRocm91Z2ggZ2l2ZW4gdGFibGUgaW5zdGFuY2VzLCBvciB0aHJvdWdoIGdpdmVuIHRhYmxlIG5hbWVzLlxuICAgICAgICAvL1xuICAgICAgICBzdG9yZU5hbWVzID0gdGFibGVzLm1hcCh0YWJsZSA9PiB7XG4gICAgICAgICAgICB2YXIgc3RvcmVOYW1lID0gdGFibGUgaW5zdGFuY2VvZiB0aGlzLlRhYmxlID8gdGFibGUubmFtZSA6IHRhYmxlO1xuICAgICAgICAgICAgaWYgKHR5cGVvZiBzdG9yZU5hbWUgIT09ICdzdHJpbmcnKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiSW52YWxpZCB0YWJsZSBhcmd1bWVudCB0byBEZXhpZS50cmFuc2FjdGlvbigpLiBPbmx5IFRhYmxlIG9yIFN0cmluZyBhcmUgYWxsb3dlZFwiKTtcbiAgICAgICAgICAgIHJldHVybiBzdG9yZU5hbWU7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIC8vXG4gICAgICAgIC8vIFJlc29sdmUgbW9kZS4gQWxsb3cgc2hvcnRjdXRzIFwiclwiIGFuZCBcInJ3XCIuXG4gICAgICAgIC8vXG4gICAgICAgIGlmIChtb2RlID09IFwiclwiIHx8IG1vZGUgPT09IFJFQURPTkxZKVxuICAgICAgICAgIGlkYk1vZGUgPSBSRUFET05MWTtcbiAgICAgICAgZWxzZSBpZiAobW9kZSA9PSBcInJ3XCIgfHwgbW9kZSA9PSBSRUFEV1JJVEUpXG4gICAgICAgICAgaWRiTW9kZSA9IFJFQURXUklURTtcbiAgICAgICAgZWxzZVxuICAgICAgICAgICAgdGhyb3cgbmV3IGV4Y2VwdGlvbnMuSW52YWxpZEFyZ3VtZW50KFwiSW52YWxpZCB0cmFuc2FjdGlvbiBtb2RlOiBcIiArIG1vZGUpO1xuXG4gICAgICAgIGlmIChwYXJlbnRUcmFuc2FjdGlvbikge1xuICAgICAgICAgICAgLy8gQmFzaWMgY2hlY2tzXG4gICAgICAgICAgICBpZiAocGFyZW50VHJhbnNhY3Rpb24ubW9kZSA9PT0gUkVBRE9OTFkgJiYgaWRiTW9kZSA9PT0gUkVBRFdSSVRFKSB7XG4gICAgICAgICAgICAgICAgaWYgKG9ubHlJZkNvbXBhdGlibGUpIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gU3Bhd24gbmV3IHRyYW5zYWN0aW9uIGluc3RlYWQuXG4gICAgICAgICAgICAgICAgICAgIHBhcmVudFRyYW5zYWN0aW9uID0gbnVsbDsgXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2UgdGhyb3cgbmV3IGV4Y2VwdGlvbnMuU3ViVHJhbnNhY3Rpb24oXCJDYW5ub3QgZW50ZXIgYSBzdWItdHJhbnNhY3Rpb24gd2l0aCBSRUFEV1JJVEUgbW9kZSB3aGVuIHBhcmVudCB0cmFuc2FjdGlvbiBpcyBSRUFET05MWVwiKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChwYXJlbnRUcmFuc2FjdGlvbikge1xuICAgICAgICAgICAgICAgIHN0b3JlTmFtZXMuZm9yRWFjaChzdG9yZU5hbWUgPT4ge1xuICAgICAgICAgICAgICAgICAgICBpZiAocGFyZW50VHJhbnNhY3Rpb24gJiYgcGFyZW50VHJhbnNhY3Rpb24uc3RvcmVOYW1lcy5pbmRleE9mKHN0b3JlTmFtZSkgPT09IC0xKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAob25seUlmQ29tcGF0aWJsZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIFNwYXduIG5ldyB0cmFuc2FjdGlvbiBpbnN0ZWFkLlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBhcmVudFRyYW5zYWN0aW9uID0gbnVsbDsgXG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBlbHNlIHRocm93IG5ldyBleGNlcHRpb25zLlN1YlRyYW5zYWN0aW9uKFwiVGFibGUgXCIgKyBzdG9yZU5hbWUgK1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwiIG5vdCBpbmNsdWRlZCBpbiBwYXJlbnQgdHJhbnNhY3Rpb24uXCIpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAob25seUlmQ29tcGF0aWJsZSAmJiBwYXJlbnRUcmFuc2FjdGlvbiAmJiAhcGFyZW50VHJhbnNhY3Rpb24uYWN0aXZlKSB7XG4gICAgICAgICAgICAgICAgLy8gJz8nIG1vZGUgc2hvdWxkIG5vdCBrZWVwIHVzaW5nIGFuIGluYWN0aXZlIHRyYW5zYWN0aW9uLlxuICAgICAgICAgICAgICAgIHBhcmVudFRyYW5zYWN0aW9uID0gbnVsbDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgcmV0dXJuIHBhcmVudFRyYW5zYWN0aW9uID9cbiAgICAgICAgICAgIHBhcmVudFRyYW5zYWN0aW9uLl9wcm9taXNlKG51bGwsIChfLCByZWplY3QpID0+IHtyZWplY3QoZSk7fSkgOlxuICAgICAgICAgICAgcmVqZWN0aW9uIChlKTtcbiAgICB9XG4gICAgLy8gSWYgdGhpcyBpcyBhIHN1Yi10cmFuc2FjdGlvbiwgbG9jayB0aGUgcGFyZW50IGFuZCB0aGVuIGxhdW5jaCB0aGUgc3ViLXRyYW5zYWN0aW9uLlxuICAgIGNvbnN0IGVudGVyVHJhbnNhY3Rpb24gPSBlbnRlclRyYW5zYWN0aW9uU2NvcGUuYmluZChudWxsLCB0aGlzLCBpZGJNb2RlLCBzdG9yZU5hbWVzLCBwYXJlbnRUcmFuc2FjdGlvbiwgc2NvcGVGdW5jKTtcbiAgICByZXR1cm4gKHBhcmVudFRyYW5zYWN0aW9uID9cbiAgICAgICAgcGFyZW50VHJhbnNhY3Rpb24uX3Byb21pc2UoaWRiTW9kZSwgZW50ZXJUcmFuc2FjdGlvbiwgXCJsb2NrXCIpIDpcbiAgICAgICAgUFNELnRyYW5zID9cbiAgICAgICAgICAgIC8vIG5vIHBhcmVudCB0cmFuc2FjdGlvbiBkZXNwaXRlIFBTRC50cmFucyBleGlzdHMuIE1ha2Ugc3VyZSBhbHNvXG4gICAgICAgICAgICAvLyB0aGF0IHRoZSB6b25lIHdlIGNyZWF0ZSBpcyBub3QgYSBzdWItem9uZSBvZiBjdXJyZW50LCBiZWNhdXNlXG4gICAgICAgICAgICAvLyBQcm9taXNlLmZvbGxvdygpIHNob3VsZCBub3Qgd2FpdCBmb3IgaXQgaWYgc28uXG4gICAgICAgICAgICB1c2VQU0QoUFNELnRyYW5zbGVzcywgKCk9PnRoaXMuX3doZW5SZWFkeShlbnRlclRyYW5zYWN0aW9uKSkgOlxuICAgICAgICAgICAgdGhpcy5fd2hlblJlYWR5IChlbnRlclRyYW5zYWN0aW9uKSk7XG4gIH1cblxuICB0YWJsZSh0YWJsZU5hbWU6IHN0cmluZyk6IFRhYmxlO1xuICB0YWJsZTxULCBUS2V5IGV4dGVuZHMgSW5kZXhhYmxlVHlwZT1JbmRleGFibGVUeXBlPih0YWJsZU5hbWU6IHN0cmluZyk6IElUYWJsZTxULCBUS2V5PjtcbiAgdGFibGUodGFibGVOYW1lOiBzdHJpbmcpOiBUYWJsZSB7XG4gICAgaWYgKCFoYXNPd24odGhpcy5fYWxsVGFibGVzLCB0YWJsZU5hbWUpKSB7XG4gICAgICB0aHJvdyBuZXcgZXhjZXB0aW9ucy5JbnZhbGlkVGFibGUoYFRhYmxlICR7dGFibGVOYW1lfSBkb2VzIG5vdCBleGlzdGApOyB9XG4gICAgcmV0dXJuIHRoaXMuX2FsbFRhYmxlc1t0YWJsZU5hbWVdO1xuICB9XG59XG4iLCAiaW1wb3J0IHtcbiAgT2JzZXJ2YWJsZSBhcyBJT2JzZXJ2YWJsZSxcbiAgT2JzZXJ2ZXIsXG4gIFN1YnNjcmlwdGlvbixcbn0gZnJvbSBcIi4uLy4uL3B1YmxpYy90eXBlcy9vYnNlcnZhYmxlXCI7XG5cbmNvbnN0IHN5bWJvbE9ic2VydmFibGU6IHR5cGVvZiBTeW1ib2wub2JzZXJ2YWJsZSA9XG4gIHR5cGVvZiBTeW1ib2wgIT09IFwidW5kZWZpbmVkXCIgJiYgXCJvYnNlcnZhYmxlXCIgaW4gU3ltYm9sXG4gICAgPyBTeW1ib2wub2JzZXJ2YWJsZVxuICAgIDogXCJAQG9ic2VydmFibGVcIiBhcyBhbnk7XG5cbmV4cG9ydCBjbGFzcyBPYnNlcnZhYmxlPFQ+IGltcGxlbWVudHMgSU9ic2VydmFibGU8VD4ge1xuICBwcml2YXRlIF9zdWJzY3JpYmU6IChvYnNlcnZlcjogT2JzZXJ2ZXI8VD4pID0+IFN1YnNjcmlwdGlvbjtcbiAgaGFzVmFsdWU/OiAoKT0+Ym9vbGVhbjtcbiAgZ2V0VmFsdWU/OiAoKT0+VDtcblxuICBjb25zdHJ1Y3RvcihzdWJzY3JpYmU6IChvYnNlcnZlcjogT2JzZXJ2ZXI8VD4pID0+IFN1YnNjcmlwdGlvbikge1xuICAgIHRoaXMuX3N1YnNjcmliZSA9IHN1YnNjcmliZTtcbiAgfVxuXG4gIHN1YnNjcmliZShcbiAgICBvbk5leHQ/OiAoKHZhbHVlOiBUKSA9PiB2b2lkKSB8wqBudWxsLFxuICAgIG9uRXJyb3I/OiAoKGVycm9yOiBhbnkpID0+IHZvaWQpIHwgbnVsbCxcbiAgICBvbkNvbXBsZXRlPzogKCgpID0+IHZvaWQpIHwgbnVsbFxuICApOiBTdWJzY3JpcHRpb247XG4gIHN1YnNjcmliZShvYnNlcnZlcj86IE9ic2VydmVyPFQ+IHwgbnVsbCk6IFN1YnNjcmlwdGlvbjtcbiAgc3Vic2NyaWJlKHg/OiBhbnksIGVycm9yPzogYW55LCBjb21wbGV0ZT86IGFueSk6IFN1YnNjcmlwdGlvbiB7XG4gICAgcmV0dXJuIHRoaXMuX3N1YnNjcmliZShcbiAgICAgICF4IHx8IHR5cGVvZiB4ID09PSBcImZ1bmN0aW9uXCIgPyB7IG5leHQ6IHgsIGVycm9yLCBjb21wbGV0ZSB9IDogeFxuICAgICk7XG4gIH1cblxuICBbc3ltYm9sT2JzZXJ2YWJsZV0oKSB7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cbn1cbiIsICJpbXBvcnQgeyBfZ2xvYmFsIH0gZnJvbSAnLi4vLi4vZ2xvYmFscy9nbG9iYWwnO1xuaW1wb3J0IHsgRGV4aWVET01EZXBlbmRlbmNpZXMgfSBmcm9tICcuLi8uLi9wdWJsaWMvdHlwZXMvZGV4aWUtZG9tLWRlcGVuZGVuY2llcyc7XG5cbmV4cG9ydCBsZXQgZG9tRGVwczogRGV4aWVET01EZXBlbmRlbmNpZXNcblxudHJ5IHtcbiAgZG9tRGVwcyA9IHtcbiAgICAvLyBSZXF1aXJlZDpcbiAgICBpbmRleGVkREI6IF9nbG9iYWwuaW5kZXhlZERCIHx8IF9nbG9iYWwubW96SW5kZXhlZERCIHx8IF9nbG9iYWwud2Via2l0SW5kZXhlZERCIHx8IF9nbG9iYWwubXNJbmRleGVkREIsXG4gICAgSURCS2V5UmFuZ2U6IF9nbG9iYWwuSURCS2V5UmFuZ2UgfHwgX2dsb2JhbC53ZWJraXRJREJLZXlSYW5nZVxuICB9O1xufSBjYXRjaCAoZSkge1xuICBkb21EZXBzID0geyBpbmRleGVkREI6IG51bGwsIElEQktleVJhbmdlOiBudWxsIH07XG59XG4iLCAiaW1wb3J0IHsgX2dsb2JhbCwgaXNBc3luY0Z1bmN0aW9uLCBrZXlzLCBvYmplY3RJc0VtcHR5IH0gZnJvbSAnLi4vZnVuY3Rpb25zL3V0aWxzJztcbmltcG9ydCB7XG4gIGdsb2JhbEV2ZW50cyxcbiAgREVYSUVfU1RPUkFHRV9NVVRBVEVEX0VWRU5UX05BTUUsXG59IGZyb20gJy4uL2dsb2JhbHMvZ2xvYmFsLWV2ZW50cyc7XG5pbXBvcnQge1xuICBiZWdpbk1pY3JvVGlja1Njb3BlLFxuICBkZWNyZW1lbnRFeHBlY3RlZEF3YWl0cyxcbiAgZW5kTWljcm9UaWNrU2NvcGUsXG4gIGV4ZWNJbkdsb2JhbENvbnRleHQsXG4gIGluY3JlbWVudEV4cGVjdGVkQXdhaXRzLFxuICBOYXRpdmVQcm9taXNlLFxuICBuZXdTY29wZSxcbiAgUFNELFxuICB1c2VQU0QsXG59IGZyb20gJy4uL2hlbHBlcnMvcHJvbWlzZSc7XG5pbXBvcnQgeyBPYnNlcnZhYmlsaXR5U2V0IH0gZnJvbSAnLi4vcHVibGljL3R5cGVzL2RiLWV2ZW50cyc7XG5pbXBvcnQge1xuICBPYnNlcnZhYmxlIGFzIElPYnNlcnZhYmxlLFxuICBTdWJzY3JpcHRpb24sXG59IGZyb20gJy4uL3B1YmxpYy90eXBlcy9vYnNlcnZhYmxlJztcbmltcG9ydCB7IE9ic2VydmFibGUgfSBmcm9tICcuLi9jbGFzc2VzL29ic2VydmFibGUvb2JzZXJ2YWJsZSc7XG5pbXBvcnQgeyBleHRlbmRPYnNlcnZhYmlsaXR5U2V0IH0gZnJvbSAnLi9leHRlbmQtb2JzZXJ2YWJpbGl0eS1zZXQnO1xuaW1wb3J0IHsgcmFuZ2VzT3ZlcmxhcCB9IGZyb20gJy4uL2hlbHBlcnMvcmFuZ2VzZXQnO1xuaW1wb3J0IHsgZG9tRGVwcyB9IGZyb20gJy4uL2NsYXNzZXMvZGV4aWUvZGV4aWUtZG9tLWRlcGVuZGVuY2llcyc7XG5pbXBvcnQgeyBUcmFuc2FjdGlvbiB9IGZyb20gJy4uL2NsYXNzZXMvdHJhbnNhY3Rpb24nO1xuaW1wb3J0IHsgb2JzU2V0c092ZXJsYXAgfSBmcm9tICcuL29icy1zZXRzLW92ZXJsYXAnO1xuXG5leHBvcnQgaW50ZXJmYWNlIExpdmVRdWVyeUNvbnRleHQge1xuICBzdWJzY3I6IE9ic2VydmFiaWxpdHlTZXQ7XG4gIHNpZ25hbDogQWJvcnRTaWduYWw7XG4gIHJlcXVlcnk6ICgpID0+IHZvaWQ7XG4gIHRyYW5zOiBudWxsIHwgVHJhbnNhY3Rpb247XG4gIHF1ZXJpZXI6IEZ1bmN0aW9uOyAvLyBGb3IgZGVidWdnaW5nIHB1cnBvc2VzIGFuZCBFcnJvciBtZXNzYWdlc1xufVxuXG5leHBvcnQgZnVuY3Rpb24gbGl2ZVF1ZXJ5PFQ+KHF1ZXJpZXI6ICgpID0+IFQgfCBQcm9taXNlPFQ+KTogSU9ic2VydmFibGU8VD4ge1xuICBsZXQgaGFzVmFsdWUgPSBmYWxzZTtcbiAgbGV0IGN1cnJlbnRWYWx1ZTogVDtcbiAgY29uc3Qgb2JzZXJ2YWJsZSA9IG5ldyBPYnNlcnZhYmxlPFQ+KChvYnNlcnZlcikgPT4ge1xuICAgIGNvbnN0IHNjb3BlRnVuY0lzQXN5bmMgPSBpc0FzeW5jRnVuY3Rpb24ocXVlcmllcik7XG4gICAgZnVuY3Rpb24gZXhlY3V0ZShjdHg6IExpdmVRdWVyeUNvbnRleHQpIHtcbiAgICAgIGNvbnN0IHdhc1Jvb3RFeGVjID0gYmVnaW5NaWNyb1RpY2tTY29wZSgpOyAvLyBQZXJmb3JtYW5jZTogQXZvaWQgc3RhcnRpbmcgYSBuZXcgbWljcm90aWNrIHNjb3BlIHdpdGhpbiB0aGUgYXN5bmMgY29udGV4dC5cbiAgICAgIHRyeSB7XG4gICAgICAgIGlmIChzY29wZUZ1bmNJc0FzeW5jKSB7XG4gICAgICAgICAgaW5jcmVtZW50RXhwZWN0ZWRBd2FpdHMoKTtcbiAgICAgICAgfVxuICAgICAgICBsZXQgcnYgPSBuZXdTY29wZShxdWVyaWVyLCBjdHgpO1xuICAgICAgICBpZiAoc2NvcGVGdW5jSXNBc3luYykge1xuICAgICAgICAgIC8vIE1ha2Ugc3VyZSB0byBzZXQgcnYgPSBydi5maW5hbGx5IGluIG9yZGVyIHRvIHdhaXQgdG8gYWZ0ZXIgZGVjcmVtZW50RXhwZWN0ZWRBd2FpdHMoKSBoYXMgYmVlbiBjYWxsZWQuXG4gICAgICAgICAgLy8gVGhpcyBmaXhlcyB6b25lIGxlYWtpbmcgaXNzdWUgdGhhdCB0aGUgbGl2ZVF1ZXJ5IHpvbmUgY2FuIGxlYWsgdG8gb2JzZXJ2ZXIncyBuZXh0IG1pY3JvdGFzay5cbiAgICAgICAgICBydiA9IChydiBhcyBQcm9taXNlPGFueT4pLmZpbmFsbHkoZGVjcmVtZW50RXhwZWN0ZWRBd2FpdHMpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBydjtcbiAgICAgIH0gZmluYWxseSB7XG4gICAgICAgIHdhc1Jvb3RFeGVjICYmIGVuZE1pY3JvVGlja1Njb3BlKCk7IC8vIEdpdmVuIHRoYXQgd2UgY3JlYXRlZCB0aGUgbWljcm90aWNrIHNjb3BlLCB3ZSBtdXN0IGFsc28gZW5kIGl0LlxuICAgICAgfVxuICAgIH1cblxuICAgIGxldCBjbG9zZWQgPSBmYWxzZTtcbiAgICBsZXQgYWJvcnRDb250cm9sbGVyOiBBYm9ydENvbnRyb2xsZXI7XG5cbiAgICBsZXQgYWNjdW1NdXRzOiBPYnNlcnZhYmlsaXR5U2V0ID0ge307XG4gICAgbGV0IGN1cnJlbnRPYnM6IE9ic2VydmFiaWxpdHlTZXQgPSB7fTtcblxuICAgIGNvbnN0IHN1YnNjcmlwdGlvbjogU3Vic2NyaXB0aW9uID0ge1xuICAgICAgZ2V0IGNsb3NlZCgpIHtcbiAgICAgICAgcmV0dXJuIGNsb3NlZDtcbiAgICAgIH0sXG4gICAgICB1bnN1YnNjcmliZTogKCkgPT4ge1xuICAgICAgICBpZiAoY2xvc2VkKSByZXR1cm47XG4gICAgICAgIGNsb3NlZCA9IHRydWU7XG4gICAgICAgIGlmIChhYm9ydENvbnRyb2xsZXIpIGFib3J0Q29udHJvbGxlci5hYm9ydCgpO1xuICAgICAgICBpZiAoc3RhcnRlZExpc3RlbmluZykgZ2xvYmFsRXZlbnRzLnN0b3JhZ2VtdXRhdGVkLnVuc3Vic2NyaWJlKG11dGF0aW9uTGlzdGVuZXIpO1xuICAgICAgfSxcbiAgICB9O1xuXG4gICAgb2JzZXJ2ZXIuc3RhcnQgJiYgb2JzZXJ2ZXIuc3RhcnQoc3Vic2NyaXB0aW9uKTsgLy8gaHR0cHM6Ly9naXRodWIuY29tL3RjMzkvcHJvcG9zYWwtb2JzZXJ2YWJsZVxuXG4gICAgbGV0IHN0YXJ0ZWRMaXN0ZW5pbmcgPSBmYWxzZTtcblxuICAgIGNvbnN0IGRvUXVlcnkgPSAoKSA9PiBleGVjSW5HbG9iYWxDb250ZXh0KF9kb1F1ZXJ5KTtcblxuICAgIGZ1bmN0aW9uIHNob3VsZE5vdGlmeSgpIHtcbiAgICAgIHJldHVybiBvYnNTZXRzT3ZlcmxhcChjdXJyZW50T2JzLCBhY2N1bU11dHMpO1xuICAgIH1cblxuICAgIGNvbnN0IG11dGF0aW9uTGlzdGVuZXIgPSAocGFydHM6IE9ic2VydmFiaWxpdHlTZXQpID0+IHtcbiAgICAgIGV4dGVuZE9ic2VydmFiaWxpdHlTZXQoYWNjdW1NdXRzLCBwYXJ0cyk7XG4gICAgICBpZiAoc2hvdWxkTm90aWZ5KCkpIHtcbiAgICAgICAgZG9RdWVyeSgpO1xuICAgICAgfVxuICAgIH07XG5cbiAgICBjb25zdCBfZG9RdWVyeSA9ICgpID0+IHtcbiAgICAgIGlmIChcbiAgICAgICAgY2xvc2VkIHx8IC8vIGNsb3NlZCAtIGRvbid0IHJ1biFcbiAgICAgICAgIWRvbURlcHMuaW5kZXhlZERCKSAvLyBTU1IgaW4gc3ZlbHRla2l0LCBuZXh0anMgZXRjXG4gICAgICB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIGFjY3VtTXV0cyA9IHt9O1xuICAgICAgY29uc3Qgc3Vic2NyOiBPYnNlcnZhYmlsaXR5U2V0ID0ge307XG4gICAgICAvLyBBYm9ydCBzaWduYWwgZmlsbCB0aHJlZSBwdXJwb3NlczpcbiAgICAgIC8vIDEuIEFib3J0IHRoZSBxdWVyeSBpZiB0aGUgb2JzZXJ2YWJsZSBpcyB1bnN1YnNjcmliZWQuXG4gICAgICAvLyAyLiBBYm9ydCB0aGUgcXVlcnkgaWYgYSBuZXcgcXVlcnkgaXMgbWFkZSBiZWZvcmUgdGhlIHByZXZpb3VzIG9uZSBoYXMgY29tcGxldGVkLlxuICAgICAgLy8gMy4gRm9yIGNhY2hlZCBxdWVyaWVzIHRvIGtub3cgaWYgdGhleSBzaG91bGQgcmVtYWluIGluIG1lbW9yeSBvciBjb3VsZCBiZSBlbnF1ZWQgZm9yIGJlaW5nIGZyZWVkIHVwLlxuICAgICAgLy8gICAgKHRoZXkgd2lsbCByZW1haW4gaW4gbWVtb3J5IGZvciBhIHNob3J0IHRpbWUgYW5kIGlmIG5vb25lIG5lZWRzIHRoZW0gYWdhaW4sIHRoZXkgd2lsbCBldmVudHVhbGx5IGJlIGZyZWVkIHVwKVxuICAgICAgaWYgKGFib3J0Q29udHJvbGxlcikgYWJvcnRDb250cm9sbGVyLmFib3J0KCk7IC8vIENhbmNlbCBwcmV2aW91cyBxdWVyeS4gTGFzdCBxdWVyeSB3aWxsIGJlIGNhbmNlbGxlZCBvbiB1bnN1YnNjcmliZSgpLlxuICAgICAgYWJvcnRDb250cm9sbGVyID0gbmV3IEFib3J0Q29udHJvbGxlcigpO1xuICAgICAgXG4gICAgICBjb25zdCBjdHg6IExpdmVRdWVyeUNvbnRleHQgPSB7XG4gICAgICAgIHN1YnNjcixcbiAgICAgICAgc2lnbmFsOiBhYm9ydENvbnRyb2xsZXIuc2lnbmFsLFxuICAgICAgICByZXF1ZXJ5OiBkb1F1ZXJ5LFxuICAgICAgICBxdWVyaWVyLFxuICAgICAgICB0cmFuczogbnVsbCAvLyBNYWtlIHRoZSBzY29wZSB0cmFuc2FjdGlvbmxlc3MgKGRvbid0IHJldXNlIHRyYW5zYWN0aW9uIGZyb20gb3V0ZXIgc2NvcGUgb2YgdGhlIGNhbGxlciBvZiBzdWJzY3JpYmUoKSlcbiAgICAgIH1cbiAgICAgIGNvbnN0IHJldCA9IGV4ZWN1dGUoY3R4KTtcbiAgICAgIFByb21pc2UucmVzb2x2ZShyZXQpLnRoZW4oXG4gICAgICAgIChyZXN1bHQpID0+IHtcbiAgICAgICAgICBoYXNWYWx1ZSA9IHRydWU7XG4gICAgICAgICAgY3VycmVudFZhbHVlID0gcmVzdWx0O1xuICAgICAgICAgIGlmIChjbG9zZWQgfHwgY3R4LnNpZ25hbC5hYm9ydGVkKSB7XG4gICAgICAgICAgICAvLyBjbG9zZWQgLSBubyBzdWJzY3JpYmVyIGFueW1vcmUuXG4gICAgICAgICAgICAvLyBzaWduYWwuYWJvcnRlZCAtIG5ldyBxdWVyeSB3YXMgbWFkZSBiZWZvcmUgdGhpcyBvbmUgY29tcGxldGVkIGFuZFxuICAgICAgICAgICAgLy8gdGhlIHF1ZXJpZXIgbWlnaHQgaGF2ZSBjYXRjaGVkIEFib3J0RXJyb3IgYW5kIHJldHVybiBzdWNjZXNzZnVsIHJlc3VsdC5cbiAgICAgICAgICAgIC8vIElmIHNvLCB3ZSBzaG91bGQgbm90IHJlbHkgaW4gdGhhdCByZXN1bHQgYmVjYXVzZSB3ZSBrbm93IHdlIGhhdmUgYWJvcnRlZFxuICAgICAgICAgICAgLy8gdGhpcyBydW4sIHdoaWNoIG1lYW5zIHRoZXJlJ3MgYW5vdGhlciBydW4gZ29pbmcgb24gdGhhdCB3aWxsIGhhbmRsZSBhY2N1bU11dHNcbiAgICAgICAgICAgIC8vIGFuZCB3ZSBtdXN0IG5vdCBiYXNlIGN1cnJlbnRPYnMgb24gdGhlIGhhbGYtYmFrZWQgc3Vic2NyLlxuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgIH1cbiAgICAgICAgICBhY2N1bU11dHMgPSB7fTtcbiAgICAgICAgICAvLyBVcGRhdGUgd2hhdCB3ZSBhcmUgc3Vic2NyaWJpbmcgZm9yIGJhc2VkIG9uIHRoaXMgbGFzdCBydW46XG4gICAgICAgICAgY3VycmVudE9icyA9IHN1YnNjcjtcbiAgICAgICAgICBpZiAoIW9iamVjdElzRW1wdHkoY3VycmVudE9icykgJiYgIXN0YXJ0ZWRMaXN0ZW5pbmcpIHtcbiAgICAgICAgICAgIGdsb2JhbEV2ZW50cyhERVhJRV9TVE9SQUdFX01VVEFURURfRVZFTlRfTkFNRSwgbXV0YXRpb25MaXN0ZW5lcik7XG4gICAgICAgICAgICBzdGFydGVkTGlzdGVuaW5nID0gdHJ1ZTtcbiAgICAgICAgICB9XG4gICAgICAgICAgZXhlY0luR2xvYmFsQ29udGV4dCgoKT0+IWNsb3NlZCAmJiBvYnNlcnZlci5uZXh0ICYmIG9ic2VydmVyLm5leHQocmVzdWx0KSk7XG4gICAgICAgIH0sXG4gICAgICAgIChlcnIpID0+IHtcbiAgICAgICAgICBoYXNWYWx1ZSA9IGZhbHNlO1xuICAgICAgICAgIGlmICghWydEYXRhYmFzZUNsb3NlZEVycm9yJywgJ0Fib3J0RXJyb3InXS5pbmNsdWRlcyhlcnI/Lm5hbWUpKSB7XG4gICAgICAgICAgICBpZiAoIWNsb3NlZCkgZXhlY0luR2xvYmFsQ29udGV4dCgoKT0+e1xuICAgICAgICAgICAgICBpZiAoY2xvc2VkKSByZXR1cm47XG4gICAgICAgICAgICAgIG9ic2VydmVyLmVycm9yICYmIG9ic2VydmVyLmVycm9yKGVycik7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICk7XG4gICAgfTtcblxuICAgIC8vIFVzZSBzZXRUaW1lb3QgaGVyZSB0byBndWFyYW50ZWUgZXhlY3V0aW9uIGluIGEgcHJpdmF0ZSBtYWNybyB0YXNrIGJlZm9yZSBhbmRcbiAgICAvLyBhZnRlci4gVGhlIGhlbHBlciBleGVjdXRlSW5HbG9iYWxDb250ZXh0KF9kb1F1ZXJ5KSBpcyBub3QgZW5vdWdoIGhlcmUgYmVjYXVzZVxuICAgIC8vIGNhbGxlciBvZiBgc3Vic2NyaWJlKClgIGNvdWxkIGJlIGFueXRoaW5nLCBzdWNoIGFzIGEgZnJvbnRlbmQgZnJhbWV3b3JrIHRoYXQgd2lsbFxuICAgIC8vIGNvbnRpbnVlIGluIHRoZSBzYW1lIHRpY2sgYWZ0ZXIgc3Vic2NyaWJlKCkgaXMgY2FsbGVkIGFuZCBjYWxsIG90aGVyXG4gICAgLy8gZWZ0ZWN0cywgdGhhdCBjb3VsZCBpbnZvbHZlIGRleGllIG9wZXJhdGlvbnMgc3VjaCBhcyB3cml0aW5nIHRvIHRoZSBEQi5cbiAgICAvLyBJZiB0aGF0IGhhcHBlbnMsIHRoZSBwcml2YXRlIHpvbmUgZWNob2VzIGZyb20gYSBsaXZlIHF1ZXJ5IHRhc3Qgc3RhcnRlZCBoZXJlXG4gICAgLy8gY291bGQgc3RpbGwgYmUgb25nb2luZyB3aGVuIHRoZSBvdGhlciBvcGVyYXRpb25zIHN0YXJ0IGFuZCBtYWtlIHRoZW0gaW5oZXJpdFxuICAgIC8vIHRoZSBhc3luYyBjb250ZXh0IGZyb20gYSBsaXZlIHF1ZXJ5LlxuICAgIHNldFRpbWVvdXQoZG9RdWVyeSwgMCk7XG4gICAgcmV0dXJuIHN1YnNjcmlwdGlvbjtcbiAgfSk7XG4gIG9ic2VydmFibGUuaGFzVmFsdWUgPSAoKSA9PiBoYXNWYWx1ZTtcbiAgb2JzZXJ2YWJsZS5nZXRWYWx1ZSA9ICgpID0+IGN1cnJlbnRWYWx1ZTtcbiAgcmV0dXJuIG9ic2VydmFibGU7XG59XG4iLCAiaW1wb3J0IHsgRGV4aWUgYXMgX0RleGllIH0gZnJvbSAnLi9kZXhpZSc7XG5pbXBvcnQgeyBfZ2xvYmFsIH0gZnJvbSAnLi4vLi4vZ2xvYmFscy9nbG9iYWwnO1xuaW1wb3J0IHsgcHJvcHMsIGRlcml2ZSwgZXh0ZW5kLCBvdmVycmlkZSwgZ2V0QnlLZXlQYXRoLCBzZXRCeUtleVBhdGgsIGRlbEJ5S2V5UGF0aCwgc2hhbGxvd0Nsb25lLCBkZWVwQ2xvbmUsIGFzYXAgfSBmcm9tICcuLi8uLi9mdW5jdGlvbnMvdXRpbHMnO1xuaW1wb3J0IHsgZ2V0T2JqZWN0RGlmZiB9IGZyb20gXCIuLi8uLi9mdW5jdGlvbnMvZ2V0LW9iamVjdC1kaWZmXCI7XG5pbXBvcnQgeyBmdWxsTmFtZUV4Y2VwdGlvbnMgfSBmcm9tICcuLi8uLi9lcnJvcnMnO1xuaW1wb3J0IHsgRGV4aWVDb25zdHJ1Y3RvciB9IGZyb20gJy4uLy4uL3B1YmxpYy90eXBlcy9kZXhpZS1jb25zdHJ1Y3Rvcic7XG5pbXBvcnQgeyBnZXREYXRhYmFzZU5hbWVzIH0gZnJvbSAnLi4vLi4vaGVscGVycy9kYXRhYmFzZS1lbnVtZXJhdG9yJztcbmltcG9ydCB7IFBTRCB9IGZyb20gJy4uLy4uL2hlbHBlcnMvcHJvbWlzZSc7XG5pbXBvcnQgeyB1c2VQU0QgfSBmcm9tICcuLi8uLi9oZWxwZXJzL3Byb21pc2UnO1xuaW1wb3J0IHsgbmV3U2NvcGUgfSBmcm9tICcuLi8uLi9oZWxwZXJzL3Byb21pc2UnO1xuaW1wb3J0IHsgcmVqZWN0aW9uIH0gZnJvbSAnLi4vLi4vaGVscGVycy9wcm9taXNlJztcbmltcG9ydCB7IGF3YWl0SXRlcmF0b3IgfSBmcm9tICcuLi8uLi9oZWxwZXJzL3lpZWxkLXN1cHBvcnQnO1xuaW1wb3J0IFByb21pc2UgZnJvbSAnLi4vLi4vaGVscGVycy9wcm9taXNlJztcbmltcG9ydCAqIGFzIERlYnVnIGZyb20gJy4uLy4uL2hlbHBlcnMvZGVidWcnO1xuaW1wb3J0IHsgZGV4aWVTdGFja0ZyYW1lRmlsdGVyLCBtaW5LZXksIGNvbm5lY3Rpb25zLCBERVhJRV9WRVJTSU9OIH0gZnJvbSAnLi4vLi4vZ2xvYmFscy9jb25zdGFudHMnO1xuaW1wb3J0IEV2ZW50cyBmcm9tICcuLi8uLi9oZWxwZXJzL0V2ZW50cyc7XG5pbXBvcnQgeyBleGNlcHRpb25zIH0gZnJvbSAnLi4vLi4vZXJyb3JzJztcbmltcG9ydCB7IGVycm5hbWVzIH0gZnJvbSAnLi4vLi4vZXJyb3JzJztcbmltcG9ydCB7IGdldE1heEtleSB9IGZyb20gJy4uLy4uL2Z1bmN0aW9ucy9xdWlya3MnO1xuaW1wb3J0IHsgdmlwIH0gZnJvbSAnLi92aXAnO1xuaW1wb3J0IHsgZ2xvYmFsRXZlbnRzIH0gZnJvbSAnLi4vLi4vZ2xvYmFscy9nbG9iYWwtZXZlbnRzJztcbmltcG9ydCB7IGxpdmVRdWVyeSB9IGZyb20gJy4uLy4uL2xpdmUtcXVlcnkvbGl2ZS1xdWVyeSc7XG5pbXBvcnQgeyBleHRlbmRPYnNlcnZhYmlsaXR5U2V0IH0gZnJvbSAnLi4vLi4vbGl2ZS1xdWVyeS9leHRlbmQtb2JzZXJ2YWJpbGl0eS1zZXQnO1xuaW1wb3J0IHsgZG9tRGVwcyB9IGZyb20gJy4vZGV4aWUtZG9tLWRlcGVuZGVuY2llcyc7XG5pbXBvcnQgeyBjbXAgfSBmcm9tICcuLi8uLi9mdW5jdGlvbnMvY21wJztcbmltcG9ydCB7IGNhY2hlIH0gZnJvbSAnLi4vLi4vbGl2ZS1xdWVyeS9jYWNoZS9jYWNoZSc7XG5cbi8qIChEZXhpZSkgaXMgYW4gaW5zdGFuY2Ugb2YgRGV4aWVDb25zdHJ1Y3RvciwgYXMgZGVmaW5lZCBpbiBwdWJsaWMvdHlwZXMvZGV4aWUtY29uc3RydWN0b3IuZC50c1xuKiAgKG5ldyBEZXhpZSgpKSBpcyBhbiBpbnN0YW5jZSBvZiBEZXhpZSwgYXMgZGVmaW5lZCBpbiBwdWJsaWMvdHlwZXMvZGV4aWUuZC50c1xuKiBcbiogV2h5IHdlJ3JlIGRvaW5nIHRoaXM/XG5cbiogQmVjYXVzZSB3ZSd2ZSBjaG9vc2VuIHRvIGRlZmluZSB0aGUgcHVibGljIERleGllIEFQSSB1c2luZyBhIERleGllQ29uc3RydWN0b3IgaW50ZXJmYWNlXG4qIHJhdGhlciB0aGFuIGRlY2xhcmluZyBhIGNsYXNzLiBPbiB0aGF0IGludGVyZmFjZSwgYWxsIHN0YXRpYyBwcm9wcyBhcmUgZGVmaW5lZC5cbiogSW4gcHJhY3RpY2UsIGNsYXNzIERleGllJ3MgY29uc3RydWN0b3IgaW1wbGVtZW50cyBEZXhpZUNvbnN0cnVjdG9yIGFuZCBhbGwgbWVtYmVyIHByb3BzXG4qIGFyZSBkZWZpbmVkIGluIGludGVyZmFjZSBEZXhpZS4gV2UgY291bGQgc2F5LCBpdCdzIGEgdHlwZXNjcmlwdCBsaW1pdGF0aW9uIG9mIG5vdCBiZWluZ1xuKiBhYmxlIHRvIGRlZmluZSBhIHN0YXRpYyBpbnRlcmZhY2UgdGhhdCBmb3JjZXMgdXMgdG8gZG8gdGhlIGNhc3QgYmVsb3cuXG4qL1xuY29uc3QgRGV4aWUgPSBfRGV4aWUgYXMgYW55IGFzIERleGllQ29uc3RydWN0b3I7XG5cbi8vXG4vLyBTZXQgYWxsIHN0YXRpYyBtZXRob2RzIGFuZCBwcm9wZXJ0aWVzIG9udG8gRGV4aWU6XG4vLyBcbnByb3BzKERleGllLCB7XG5cbiAgLy8gRGV4aWUuQnVsa0Vycm9yID0gY2xhc3MgQnVsa0Vycm9yIHsuLi59O1xuICAvLyBEZXhpZS5YWFhFcnJvciA9IGNsYXNzIFhYWEVycm9yIHsuLi59O1xuICAuLi5mdWxsTmFtZUV4Y2VwdGlvbnMsXG5cbiAgLy9cbiAgLy8gU3RhdGljIGRlbGV0ZSgpIG1ldGhvZC5cbiAgLy9cbiAgZGVsZXRlKGRhdGFiYXNlTmFtZTogc3RyaW5nKSB7XG4gICAgY29uc3QgZGIgPSBuZXcgRGV4aWUoZGF0YWJhc2VOYW1lLCB7YWRkb25zOiBbXX0pO1xuICAgIHJldHVybiBkYi5kZWxldGUoKTtcbiAgfSxcblxuICAvL1xuICAvLyBTdGF0aWMgZXhpc3RzKCkgbWV0aG9kLlxuICAvL1xuICBleGlzdHMobmFtZTogc3RyaW5nKSB7XG4gICAgcmV0dXJuIG5ldyBEZXhpZShuYW1lLCB7IGFkZG9uczogW10gfSkub3BlbigpLnRoZW4oZGIgPT4ge1xuICAgICAgZGIuY2xvc2UoKTtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH0pLmNhdGNoKCdOb1N1Y2hEYXRhYmFzZUVycm9yJywgKCkgPT4gZmFsc2UpO1xuICB9LFxuXG4gIC8vXG4gIC8vIFN0YXRpYyBtZXRob2QgZm9yIHJldHJpZXZpbmcgYSBsaXN0IG9mIGFsbCBleGlzdGluZyBkYXRhYmFzZXMgYXQgY3VycmVudCBob3N0LlxuICAvL1xuICBnZXREYXRhYmFzZU5hbWVzKGNiKSB7XG4gICAgdHJ5IHtcbiAgICAgIHJldHVybiBnZXREYXRhYmFzZU5hbWVzKERleGllLmRlcGVuZGVuY2llcykudGhlbihjYik7XG4gICAgfSBjYXRjaCB7XG4gICAgICByZXR1cm4gcmVqZWN0aW9uKG5ldyBleGNlcHRpb25zLk1pc3NpbmdBUEkoKSk7XG4gICAgfVxuICB9LFxuXG4gIC8qKiBAZGVwcmVjYXRlZCAqL1xuICBkZWZpbmVDbGFzcygpIHtcbiAgICBmdW5jdGlvbiBDbGFzcyhjb250ZW50KSB7XG4gICAgICBleHRlbmQodGhpcywgY29udGVudCk7XG4gICAgfVxuICAgIHJldHVybiBDbGFzcztcbiAgfSxcblxuICBpZ25vcmVUcmFuc2FjdGlvbihzY29wZUZ1bmMpIHtcbiAgICAvLyBJbiBjYXNlIGNhbGxlciBpcyB3aXRoaW4gYSB0cmFuc2FjdGlvbiBidXQgbmVlZHMgdG8gY3JlYXRlIGEgc2VwYXJhdGUgdHJhbnNhY3Rpb24uXG4gICAgLy8gRXhhbXBsZSBvZiB1c2FnZTpcbiAgICAvL1xuICAgIC8vIExldCdzIHNheSB3ZSBoYXZlIGEgbG9nZ2VyIGZ1bmN0aW9uIGluIG91ciBhcHAuIE90aGVyIGFwcGxpY2F0aW9uLWxvZ2ljIHNob3VsZCBiZSB1bmF3YXJlIG9mIHRoZVxuICAgIC8vIGxvZ2dlciBmdW5jdGlvbiBhbmQgbm90IG5lZWQgdG8gaW5jbHVkZSB0aGUgJ2xvZ2VudHJpZXMnIHRhYmxlIGluIGFsbCB0cmFuc2FjdGlvbiBpdCBwZXJmb3Jtcy5cbiAgICAvLyBUaGUgbG9nZ2luZyBzaG91bGQgYWx3YXlzIGJlIGRvbmUgaW4gYSBzZXBhcmF0ZSB0cmFuc2FjdGlvbiBhbmQgbm90IGJlIGRlcGVuZGFudCBvbiB0aGUgY3VycmVudFxuICAgIC8vIHJ1bm5pbmcgdHJhbnNhY3Rpb24gY29udGV4dC4gVGhlbiB5b3UgY291bGQgdXNlIERleGllLmlnbm9yZVRyYW5zYWN0aW9uKCkgdG8gcnVuIGNvZGUgdGhhdCBzdGFydHMgYSBuZXcgdHJhbnNhY3Rpb24uXG4gICAgLy9cbiAgICAvLyAgICAgRGV4aWUuaWdub3JlVHJhbnNhY3Rpb24oZnVuY3Rpb24oKSB7XG4gICAgLy8gICAgICAgICBkYi5sb2dlbnRyaWVzLmFkZChuZXdMb2dFbnRyeSk7XG4gICAgLy8gICAgIH0pO1xuICAgIC8vXG4gICAgLy8gVW5sZXNzIHVzaW5nIERleGllLmlnbm9yZVRyYW5zYWN0aW9uKCksIHRoZSBhYm92ZSBleGFtcGxlIHdvdWxkIHRyeSB0byByZXVzZSB0aGUgY3VycmVudCB0cmFuc2FjdGlvblxuICAgIC8vIGluIGN1cnJlbnQgUHJvbWlzZS1zY29wZS5cbiAgICAvL1xuICAgIC8vIEFuIGFsdGVybmF0aXZlIHRvIERleGllLmlnbm9yZVRyYW5zYWN0aW9uKCkgd291bGQgYmUgc2V0SW1tZWRpYXRlKCkgb3Igc2V0VGltZW91dCgpLiBUaGUgcmVhc29uIHdlIHN0aWxsIHByb3ZpZGUgYW5cbiAgICAvLyBBUEkgZm9yIHRoaXMgYmVjYXVzZVxuICAgIC8vICAxKSBUaGUgaW50ZW50aW9uIG9mIHdyaXRpbmcgdGhlIHN0YXRlbWVudCBjb3VsZCBiZSB1bmNsZWFyIGlmIHVzaW5nIHNldEltbWVkaWF0ZSgpIG9yIHNldFRpbWVvdXQoKS5cbiAgICAvLyAgMikgc2V0VGltZW91dCgpIHdvdWxkIHdhaXQgdW5uZXNjZXNzYXJ5IHVudGlsIGZpcmluZy4gVGhpcyBpcyBob3dldmVyIG5vdCB0aGUgY2FzZSB3aXRoIHNldEltbWVkaWF0ZSgpLlxuICAgIC8vICAzKSBzZXRJbW1lZGlhdGUoKSBpcyBub3Qgc3VwcG9ydGVkIGluIHRoZSBFUyBzdGFuZGFyZC5cbiAgICAvLyAgNCkgWW91IG1pZ2h0IHdhbnQgdG8ga2VlcCBvdGhlciBQU0Qgc3RhdGUgdGhhdCB3YXMgc2V0IGluIGEgcGFyZW50IFBTRCwgc3VjaCBhcyBQU0QubGV0VGhyb3VnaC5cbiAgICByZXR1cm4gUFNELnRyYW5zID9cbiAgICAgIHVzZVBTRChQU0QudHJhbnNsZXNzLCBzY29wZUZ1bmMpIDogLy8gVXNlIHRoZSBjbG9zZXN0IHBhcmVudCB0aGF0IHdhcyBub24tdHJhbnNhY3Rpb25hbC5cbiAgICAgIHNjb3BlRnVuYygpOyAvLyBObyBuZWVkIHRvIGNoYW5nZSBzY29wZSBiZWNhdXNlIHRoZXJlIGlzIG5vIG9uZ29pbmcgdHJhbnNhY3Rpb24uXG4gIH0sXG5cbiAgdmlwLFxuXG4gIGFzeW5jOiBmdW5jdGlvbiAoZ2VuZXJhdG9yRm46IEZ1bmN0aW9uKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICAgIHRyeSB7XG4gICAgICAgIHZhciBydiA9IGF3YWl0SXRlcmF0b3IoZ2VuZXJhdG9yRm4uYXBwbHkodGhpcywgYXJndW1lbnRzKSk7XG4gICAgICAgIGlmICghcnYgfHwgdHlwZW9mIHJ2LnRoZW4gIT09ICdmdW5jdGlvbicpXG4gICAgICAgICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZShydik7XG4gICAgICAgIHJldHVybiBydjtcbiAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgcmV0dXJuIHJlamVjdGlvbihlKTtcbiAgICAgIH1cbiAgICB9O1xuICB9LFxuXG4gIHNwYXduOiBmdW5jdGlvbiAoZ2VuZXJhdG9yRm4sIGFyZ3MsIHRoaXopIHtcbiAgICB0cnkge1xuICAgICAgdmFyIHJ2ID0gYXdhaXRJdGVyYXRvcihnZW5lcmF0b3JGbi5hcHBseSh0aGl6LCBhcmdzIHx8IFtdKSk7XG4gICAgICBpZiAoIXJ2IHx8IHR5cGVvZiBydi50aGVuICE9PSAnZnVuY3Rpb24nKVxuICAgICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKHJ2KTtcbiAgICAgIHJldHVybiBydjtcbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICByZXR1cm4gcmVqZWN0aW9uKGUpO1xuICAgIH1cbiAgfSxcblxuICAvLyBEZXhpZS5jdXJyZW50VHJhbnNhY3Rpb24gcHJvcGVydHlcbiAgY3VycmVudFRyYW5zYWN0aW9uOiB7XG4gICAgZ2V0OiAoKSA9PiBQU0QudHJhbnMgfHwgbnVsbFxuICB9LFxuXG4gIHdhaXRGb3I6IGZ1bmN0aW9uIChwcm9taXNlT3JGdW5jdGlvbiwgb3B0aW9uYWxUaW1lb3V0KSB7XG4gICAgLy8gSWYgYSBmdW5jdGlvbiBpcyBwcm92aWRlZCwgaW52b2tlIGl0IGFuZCBwYXNzIHRoZSByZXR1cm5pbmcgdmFsdWUgdG8gVHJhbnNhY3Rpb24ud2FpdEZvcigpXG4gICAgY29uc3QgcHJvbWlzZSA9IFByb21pc2UucmVzb2x2ZShcbiAgICAgIHR5cGVvZiBwcm9taXNlT3JGdW5jdGlvbiA9PT0gJ2Z1bmN0aW9uJyA/XG4gICAgICAgIERleGllLmlnbm9yZVRyYW5zYWN0aW9uKHByb21pc2VPckZ1bmN0aW9uKSA6XG4gICAgICAgIHByb21pc2VPckZ1bmN0aW9uKVxuICAgICAgLnRpbWVvdXQob3B0aW9uYWxUaW1lb3V0IHx8IDYwMDAwKTsgLy8gRGVmYXVsdCB0aGUgdGltZW91dCB0byBvbmUgbWludXRlLiBDYWxsZXIgbWF5IHNwZWNpZnkgSW5maW5pdHkgaWYgcmVxdWlyZWQuICAgICAgIFxuXG4gICAgLy8gUnVuIGdpdmVuIHByb21pc2Ugb24gY3VycmVudCB0cmFuc2FjdGlvbi4gSWYgbm8gY3VycmVudCB0cmFuc2FjdGlvbiwganVzdCByZXR1cm4gYSBEZXhpZSBwcm9taXNlIGJhc2VkXG4gICAgLy8gb24gZ2l2ZW4gdmFsdWUuXG4gICAgcmV0dXJuIFBTRC50cmFucyA/XG4gICAgICBQU0QudHJhbnMud2FpdEZvcihwcm9taXNlKSA6XG4gICAgICBwcm9taXNlO1xuICB9LFxuXG4gIC8vIEV4cG9ydCBvdXIgUHJvbWlzZSBpbXBsZW1lbnRhdGlvbiBzaW5jZSBpdCBjYW4gYmUgaGFuZHkgYXMgYSBzdGFuZGFsb25lIFByb21pc2UgaW1wbGVtZW50YXRpb25cbiAgUHJvbWlzZTogUHJvbWlzZSxcblxuICAvLyBEZXhpZS5kZWJ1ZyBwcm9wdGVyeTpcbiAgLy8gRGV4aWUuZGVidWcgPSBmYWxzZVxuICAvLyBEZXhpZS5kZWJ1ZyA9IHRydWVcbiAgLy8gRGV4aWUuZGVidWcgPSBcImRleGllXCIgLSBkb24ndCBoaWRlIGRleGllJ3Mgc3RhY2sgZnJhbWVzLlxuICBkZWJ1Zzoge1xuICAgIGdldDogKCkgPT4gRGVidWcuZGVidWcsXG4gICAgc2V0OiB2YWx1ZSA9PiB7XG4gICAgICBEZWJ1Zy5zZXREZWJ1Zyh2YWx1ZSwgdmFsdWUgPT09ICdkZXhpZScgPyAoKSA9PiB0cnVlIDogZGV4aWVTdGFja0ZyYW1lRmlsdGVyKTtcbiAgICB9XG4gIH0sXG5cbiAgLy8gRXhwb3J0IG91ciBkZXJpdmUvZXh0ZW5kL292ZXJyaWRlIG1ldGhvZG9sb2d5XG4gIGRlcml2ZTogZGVyaXZlLCAvLyBEZXByZWNhdGU/XG4gIGV4dGVuZDogZXh0ZW5kLCAvLyBEZXByZWNhdGU/XG4gIHByb3BzOiBwcm9wcyxcbiAgb3ZlcnJpZGU6IG92ZXJyaWRlLCAvLyBEZXByZWNhdGU/XG4gIC8vIEV4cG9ydCBvdXIgRXZlbnRzKCkgZnVuY3Rpb24gLSBjYW4gYmUgaGFuZHkgYXMgYSB0b29sa2l0XG4gIEV2ZW50czogRXZlbnRzLFxuICBvbjogZ2xvYmFsRXZlbnRzLFxuICBsaXZlUXVlcnksXG4gIGV4dGVuZE9ic2VydmFiaWxpdHlTZXQsXG4gIC8vIFV0aWxpdGllc1xuICBnZXRCeUtleVBhdGg6IGdldEJ5S2V5UGF0aCxcbiAgc2V0QnlLZXlQYXRoOiBzZXRCeUtleVBhdGgsXG4gIGRlbEJ5S2V5UGF0aDogZGVsQnlLZXlQYXRoLFxuICBzaGFsbG93Q2xvbmU6IHNoYWxsb3dDbG9uZSxcbiAgZGVlcENsb25lOiBkZWVwQ2xvbmUsXG4gIGdldE9iamVjdERpZmY6IGdldE9iamVjdERpZmYsXG4gIGNtcCxcbiAgYXNhcDogYXNhcCxcbiAgLy9tYXhLZXk6IG5ldyBEZXhpZSgnJyx7YWRkb25zOltdfSkuX21heEtleSxcbiAgbWluS2V5OiBtaW5LZXksXG4gIC8vIEFkZG9uIHJlZ2lzdHJ5XG4gIGFkZG9uczogW10sXG4gIC8vIEdsb2JhbCBEQiBjb25uZWN0aW9uIGxpc3RcbiAgY29ubmVjdGlvbnM6IGNvbm5lY3Rpb25zLFxuXG4gIC8vTXVsdGlNb2RpZnlFcnJvcjogZXhjZXB0aW9ucy5Nb2RpZnksIC8vIE9ic29sZXRlIVxuICBlcnJuYW1lczogZXJybmFtZXMsXG5cbiAgLy8gRXhwb3J0IG90aGVyIHN0YXRpYyBjbGFzc2VzXG4gIC8vSW5kZXhTcGVjOiBJbmRleFNwZWMsIE9ic29sZXRlIVxuICAvL1RhYmxlU2NoZW1hOiBUYWJsZVNjaGVtYSwgT2Jzb2xldGUhXG5cbiAgLy9cbiAgLy8gRGVwZW5kZW5jaWVzXG4gIC8vXG4gIC8vIFRoZXNlIHdpbGwgYXV0b21hdGljYWxseSB3b3JrIGluIGJyb3dzZXJzIHdpdGggaW5kZXhlZERCIHN1cHBvcnQsIG9yIHdoZXJlIGFuIGluZGV4ZWREQiBwb2x5ZmlsbCBoYXMgYmVlbiBpbmNsdWRlZC5cbiAgLy9cbiAgLy8gSW4gbm9kZS5qcywgaG93ZXZlciwgdGhlc2UgcHJvcGVydGllcyBtdXN0IGJlIHNldCBcIm1hbnVhbGx5XCIgYmVmb3JlIGluc3RhbnNpYXRpbmcgYSBuZXcgRGV4aWUoKS5cbiAgLy8gRm9yIG5vZGUuanMsIHlvdSBuZWVkIHRvIHJlcXVpcmUgaW5kZXhlZGRiLWpzIG9yIHNpbWlsYXIgYW5kIHRoZW4gc2V0IHRoZXNlIGRlcHMuXG4gIC8vXG4gIGRlcGVuZGVuY2llczogZG9tRGVwcyxcbiAgY2FjaGUsXG5cbiAgLy8gQVBJIFZlcnNpb24gTnVtYmVyOiBUeXBlIE51bWJlciwgbWFrZSBzdXJlIHRvIGFsd2F5cyBzZXQgYSB2ZXJzaW9uIG51bWJlciB0aGF0IGNhbiBiZSBjb21wYXJhYmxlIGNvcnJlY3RseS4gRXhhbXBsZTogMC45LCAwLjkxLCAwLjkyLCAxLjAsIDEuMDEsIDEuMSwgMS4yLCAxLjIxLCBldGMuXG4gIHNlbVZlcjogREVYSUVfVkVSU0lPTixcbiAgdmVyc2lvbjogREVYSUVfVkVSU0lPTi5zcGxpdCgnLicpXG4gICAgLm1hcChuID0+IHBhcnNlSW50KG4pKVxuICAgIC5yZWR1Y2UoKHAsIGMsIGkpID0+IHAgKyAoYyAvIE1hdGgucG93KDEwLCBpICogMikpKSxcblxuICAvLyBodHRwczovL2dpdGh1Yi5jb20vZGZhaGxhbmRlci9EZXhpZS5qcy9pc3N1ZXMvMTg2XG4gIC8vIHR5cGVzY3JpcHQgY29tcGlsZXIgdHNjIGluIG1vZGUgdHMtLT5lczUgJiBjb21tb25KUywgd2lsbCBleHBlY3QgcmVxdWlyZSgpIHRvIHJldHVyblxuICAvLyB4LmRlZmF1bHQuIFdvcmthcm91bmQ6IFNldCBEZXhpZS5kZWZhdWx0ID0gRGV4aWUuXG4gIC8vIGRlZmF1bHQ6IERleGllLCAvLyBDb21tZW50ZWQgYmVjYXVzZSBzb2x2ZWQgaW4gaW5kZXgtdW1kLnRzIGluc3RlYWQuXG4gIC8vIE1ha2UgaXQgcG9zc2libGUgdG8gaW1wb3J0IHtEZXhpZX0gKG5vbi1kZWZhdWx0IGltcG9ydClcbiAgLy8gUmVhc29uIDE6IE1heSBzd2l0Y2ggdG8gdGhhdCBpbiBmdXR1cmUuXG4gIC8vIFJlYXNvbiAyOiBXZSBkZWNsYXJlIGl0IGJvdGggZGVmYXVsdCBhbmQgbmFtZWQgZXhwb3J0ZWQgaW4gZC50cyB0byBtYWtlIGl0IHBvc3NpYmxlXG4gIC8vIHRvIGxldCBhZGRvbnMgZXh0ZW5kIHRoZSBEZXhpZSBpbnRlcmZhY2Ugd2l0aCBUeXBlc2NyaXB0IDIuMSAod29ya3Mgb25seSB3aGVuIGV4cGxpY2l0ZWx5XG4gIC8vIGV4cG9ydGluZyB0aGUgc3ltYm9sLCBub3QganVzdCBkZWZhdWx0IGV4cG9ydGluZylcbiAgLy8gRGV4aWU6IERleGllIC8vIENvbW1lbnRlZCBiZWNhdXNlIHNvbHZlZCBpbiBpbmRleC11bWQudHMgaW5zdGVhZC5cbn0pO1xuXG5EZXhpZS5tYXhLZXkgPSBnZXRNYXhLZXkoRGV4aWUuZGVwZW5kZW5jaWVzLklEQktleVJhbmdlKTtcbiIsICJpbXBvcnQgeyBnbG9iYWxFdmVudHMsIERFWElFX1NUT1JBR0VfTVVUQVRFRF9FVkVOVF9OQU1FLCBTVE9SQUdFX01VVEFURURfRE9NX0VWRU5UX05BTUUgfSBmcm9tICcuLi9nbG9iYWxzL2dsb2JhbC1ldmVudHMnO1xuaW1wb3J0IHsgT2JzZXJ2YWJpbGl0eVNldCB9IGZyb20gXCIuLi9wdWJsaWMvdHlwZXMvZGItZXZlbnRzXCI7XG5pbXBvcnQgeyBzaWduYWxTdWJzY3JpYmVyc05vdyB9IGZyb20gJy4vY2FjaGUvc2lnbmFsU3Vic2NyaWJlcnMnO1xuXG5pZiAodHlwZW9mIGRpc3BhdGNoRXZlbnQgIT09ICd1bmRlZmluZWQnICYmIHR5cGVvZiBhZGRFdmVudExpc3RlbmVyICE9PSAndW5kZWZpbmVkJykge1xuICBnbG9iYWxFdmVudHMoREVYSUVfU1RPUkFHRV9NVVRBVEVEX0VWRU5UX05BTUUsIHVwZGF0ZWRQYXJ0cyA9PiB7XG4gICAgaWYgKCFwcm9wYWdhdGluZ0xvY2FsbHkpIHtcbiAgICAgIGxldCBldmVudDogQ3VzdG9tRXZlbnQ8T2JzZXJ2YWJpbGl0eVNldD47XG4gICAgICBldmVudCA9IG5ldyBDdXN0b21FdmVudChTVE9SQUdFX01VVEFURURfRE9NX0VWRU5UX05BTUUsIHtcbiAgICAgICAgZGV0YWlsOiB1cGRhdGVkUGFydHNcbiAgICAgIH0pO1xuICAgICAgcHJvcGFnYXRpbmdMb2NhbGx5ID0gdHJ1ZTtcbiAgICAgIGRpc3BhdGNoRXZlbnQoZXZlbnQpO1xuICAgICAgcHJvcGFnYXRpbmdMb2NhbGx5ID0gZmFsc2U7XG4gICAgfVxuICB9KTtcbiAgYWRkRXZlbnRMaXN0ZW5lcihTVE9SQUdFX01VVEFURURfRE9NX0VWRU5UX05BTUUsICh7ZGV0YWlsfTogQ3VzdG9tRXZlbnQ8T2JzZXJ2YWJpbGl0eVNldD4pID0+IHtcbiAgICBpZiAoIXByb3BhZ2F0aW5nTG9jYWxseSkge1xuICAgICAgcHJvcGFnYXRlTG9jYWxseShkZXRhaWwpO1xuICAgIH1cbiAgfSk7XG59XG5cbi8qKiBDYWxsZWQgZnJvbSBsaXN0ZW5lcnMgdG8gQnJvYWRjYXN0Q2hhbm5lbCBhbmQgRE9NIGV2ZW50IHRvXG4gKiBwcm9wYWdhdGUgdGhlIGV2ZW50IGxvY2FsbHkgaW50byBkZXhpZSdzIHN0b3JhZ2VtdXRhdGVkIGV2ZW50XG4gKiBhbmQgaW52YWxpZGF0ZSBjYWNoZWQgcXVlcmllcy5cbiAqIFxuICogVGhpcyBmdW5jdGlvbiBpcyBvbmx5IGNhbGxlZCB3aGVuIHRoZSBldmVudCBpcyBub3Qgb3JpZ2luYXRpbmdcbiAqIGZyb20gdGhpcyBzYW1lIERleGllIG1vZHVsZSAtIGVpdGhlciBmcm9tIGFub3RoZXIgcmVkdW5kYW50IGRleGllIGltcG9ydFxuICogb3IgZnJvbSBhIGZvcmVpZ24gdGFiIG9yIHdvcmtlci4gVGhhdCdzIHdoeSB3ZSBuZWVkIHRvIGludmFsaWRhdGVcbiAqIHRoZSBjYWNoZSB3aGVuIHRoaXMgaGFwcGVucy5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHByb3BhZ2F0ZUxvY2FsbHkodXBkYXRlUGFydHM6IE9ic2VydmFiaWxpdHlTZXQpIHtcbiAgbGV0IHdhc01lID0gcHJvcGFnYXRpbmdMb2NhbGx5O1xuICB0cnkge1xuICAgIHByb3BhZ2F0aW5nTG9jYWxseSA9IHRydWU7XG4gICAgLy8gRmlyZSB0aGUgXCJzdG9yYWdlbXV0YXRlZFwiIGV2ZW50LlxuICAgIGdsb2JhbEV2ZW50cy5zdG9yYWdlbXV0YXRlZC5maXJlKHVwZGF0ZVBhcnRzKTtcbiAgICAvLyBJbnZhbGlkYXRlIGNhY2hlZCBxdWVyaWVzIGFuZCBzaWduYWwgc3Vic2NyaWJlcnMgdG8gcmVxdWVyeS5cbiAgICBzaWduYWxTdWJzY3JpYmVyc05vdyh1cGRhdGVQYXJ0cywgdHJ1ZSk7XG4gIH0gZmluYWxseSB7XG4gICAgcHJvcGFnYXRpbmdMb2NhbGx5ID0gd2FzTWU7XG4gIH1cbn1cblxuZXhwb3J0IGxldCBwcm9wYWdhdGluZ0xvY2FsbHkgPSBmYWxzZTtcbiIsICJpbXBvcnQge1xuICBnbG9iYWxFdmVudHMsXG4gIFNUT1JBR0VfTVVUQVRFRF9ET01fRVZFTlRfTkFNRSxcbiAgREVYSUVfU1RPUkFHRV9NVVRBVEVEX0VWRU5UX05BTUUsXG59IGZyb20gJy4uL2dsb2JhbHMvZ2xvYmFsLWV2ZW50cyc7XG5pbXBvcnQgeyBwcm9wYWdhdGVMb2NhbGx5LCBwcm9wYWdhdGluZ0xvY2FsbHkgfSBmcm9tICcuL3Byb3BhZ2F0ZS1sb2NhbGx5JztcblxuZXhwb3J0IGxldCBiYzogQnJvYWRjYXN0Q2hhbm5lbDtcblxuZXhwb3J0IGxldCBjcmVhdGVCQyA9ICgpPT57fTtcblxuaWYgKHR5cGVvZiBCcm9hZGNhc3RDaGFubmVsICE9PSAndW5kZWZpbmVkJykge1xuICBjcmVhdGVCQyA9ICgpID0+IHtcbiAgICBiYyA9IG5ldyBCcm9hZGNhc3RDaGFubmVsKFNUT1JBR0VfTVVUQVRFRF9ET01fRVZFTlRfTkFNRSk7XG4gICAgYmMub25tZXNzYWdlID0gZXYgPT4gZXYuZGF0YSAmJiBwcm9wYWdhdGVMb2NhbGx5KGV2LmRhdGEpO1xuICB9XG4gIGNyZWF0ZUJDKCk7XG5cbiAgLyoqXG4gICAqIFRoZSBOb2RlLmpzIEJyb2FkY2FzdENoYW5uZWwgd2lsbCBwcmV2ZW50IHRoZSBub2RlIHByb2Nlc3MgZnJvbSBleGl0aW5nXG4gICAqIGlmIHRoZSBCcm9hZGNhc3RDaGFubmVsIGlzIG5vdCBjbG9zZWQuXG4gICAqIFRoZXJlZm9yZSB3ZSBoYXZlIHRvIGNhbGwgdW5yZWYoKSB3aGljaCBhbGxvd3MgdGhlIHByb2Nlc3MgdG8gZmluaXNoXG4gICAqIHByb3Blcmx5IGV2ZW4gd2hlbiB0aGUgQnJvYWRjYXN0Q2hhbm5lbCBpcyBuZXZlciBjbG9zZWQuXG4gICAqIEBsaW5rIGh0dHBzOi8vbm9kZWpzLm9yZy9hcGkvd29ya2VyX3RocmVhZHMuaHRtbCNicm9hZGNhc3RjaGFubmVsdW5yZWZcbiAgICogQGxpbmsgaHR0cHM6Ly9naXRodWIuY29tL2RleGllL0RleGllLmpzL3B1bGwvMTU3NlxuICAgKi9cbiAgaWYgKHR5cGVvZiAoYmMgYXMgYW55KS51bnJlZiA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIChiYyBhcyBhbnkpLnVucmVmKCk7XG4gIH1cbiAgXG4gIC8vXG4gIC8vIFByb3BhZ2F0ZSBsb2NhbCBjaGFuZ2VzIHRvIHJlbW90ZSB0YWJzLCB3aW5kb3dzIGFuZCB3b3JrZXJzIHZpYSBCcm9hZGNhc3RDaGFubmVsXG4gIC8vXG4gIGdsb2JhbEV2ZW50cyhERVhJRV9TVE9SQUdFX01VVEFURURfRVZFTlRfTkFNRSwgKGNoYW5nZWRQYXJ0cykgPT4ge1xuICAgIGlmICghcHJvcGFnYXRpbmdMb2NhbGx5KSB7XG4gICAgICBiYy5wb3N0TWVzc2FnZShjaGFuZ2VkUGFydHMpO1xuICAgIH1cbiAgfSk7XG59XG4iLCAiaW1wb3J0IHsgRGV4aWUgfSBmcm9tIFwiLi9jbGFzc2VzL2RleGllXCI7XG5pbXBvcnQgeyBjb25uZWN0aW9ucyB9IGZyb20gXCIuL2dsb2JhbHMvY29uc3RhbnRzXCI7XG5pbXBvcnQgeyBkZWJ1ZyB9IGZyb20gXCIuL2hlbHBlcnMvZGVidWdcIjtcbmltcG9ydCB7IFJhbmdlU2V0IH0gZnJvbSBcIi4vaGVscGVycy9yYW5nZXNldFwiO1xuaW1wb3J0IHsgYmMsIGNyZWF0ZUJDIH0gZnJvbSBcIi4vbGl2ZS1xdWVyeS9lbmFibGUtYnJvYWRjYXN0XCI7XG5pbXBvcnQgeyBwcm9wYWdhdGVMb2NhbGx5IH0gZnJvbSBcIi4vbGl2ZS1xdWVyeS9wcm9wYWdhdGUtbG9jYWxseVwiO1xuXG5cbmlmICh0eXBlb2YgYWRkRXZlbnRMaXN0ZW5lciAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgYWRkRXZlbnRMaXN0ZW5lcigncGFnZWhpZGUnLCAoZXZlbnQpID0+IHtcbiAgICBpZiAoIURleGllLmRpc2FibGVCZkNhY2hlICYmIGV2ZW50LnBlcnNpc3RlZCkge1xuICAgICAgaWYgKGRlYnVnKSBjb25zb2xlLmRlYnVnKCdEZXhpZTogaGFuZGxpbmcgcGVyc2lzdGVkIHBhZ2VoaWRlJyk7XG4gICAgICBiYz8uY2xvc2UoKTtcbiAgICAgIGZvciAoY29uc3QgZGIgb2YgY29ubmVjdGlvbnMpIHtcbiAgICAgICAgZGIuY2xvc2Uoe2Rpc2FibGVBdXRvT3BlbjogZmFsc2V9KTtcbiAgICAgIH1cbiAgICB9XG4gIH0pO1xuICBhZGRFdmVudExpc3RlbmVyKCdwYWdlc2hvdycsIChldmVudCkgPT4ge1xuICAgIGlmICghRGV4aWUuZGlzYWJsZUJmQ2FjaGUgJiYgZXZlbnQucGVyc2lzdGVkKSB7XG4gICAgICBpZiAoZGVidWcpIGNvbnNvbGUuZGVidWcoJ0RleGllOiBoYW5kbGluZyBwZXJzaXN0ZWQgcGFnZXNob3cnKTtcbiAgICAgIGNyZWF0ZUJDKCk7XG4gICAgICBwcm9wYWdhdGVMb2NhbGx5KHthbGw6IG5ldyBSYW5nZVNldCgtSW5maW5pdHksIFtbXV0pfSk7IC8vIFRyaWdnZXIgYWxsIHF1ZXJpZXMgdG8gcmVxdWVyeVxuICAgIH1cbiAgfSk7XG59XG4iLCAiaW1wb3J0IHsgUHJvcE1vZGlmaWNhdGlvbiB9IGZyb20gXCIuLi8uLi9oZWxwZXJzL3Byb3AtbW9kaWZpY2F0aW9uXCI7XG5cbmV4cG9ydCBmdW5jdGlvbiBhZGQodmFsdWU6IG51bWJlciB8IGJpZ2ludCB8IEFycmF5PHN0cmluZyB8IG51bWJlcj4pIHtcbiAgcmV0dXJuIG5ldyBQcm9wTW9kaWZpY2F0aW9uKHthZGQ6IHZhbHVlfSk7XG59XG4iLCAiaW1wb3J0IHsgUHJvcE1vZGlmaWNhdGlvbiB9IGZyb20gXCIuLi8uLi9oZWxwZXJzL3Byb3AtbW9kaWZpY2F0aW9uXCI7XG5cbmV4cG9ydCBmdW5jdGlvbiByZW1vdmUodmFsdWU6IG51bWJlciB8IGJpZ2ludCB8IEFycmF5PHN0cmluZyB8IG51bWJlcj4pIHtcbiAgcmV0dXJuIG5ldyBQcm9wTW9kaWZpY2F0aW9uKHtyZW1vdmU6IHZhbHVlfSk7XG59XG4iLCAiaW1wb3J0IHsgUHJvcE1vZGlmaWNhdGlvbiB9IGZyb20gXCIuLi8uLi9oZWxwZXJzL3Byb3AtbW9kaWZpY2F0aW9uXCI7XG5cbmV4cG9ydCBmdW5jdGlvbiByZXBsYWNlUHJlZml4KGE6IHN0cmluZywgYjpzdHJpbmcpIHtcbiAgcmV0dXJuIG5ldyBQcm9wTW9kaWZpY2F0aW9uKHtyZXBsYWNlUHJlZml4OiBbYSwgYl19KTtcbn1cbiIsICJpbXBvcnQgeyBEZXhpZSB9IGZyb20gJy4vY2xhc3Nlcy9kZXhpZSc7XG5pbXBvcnQgeyBEZXhpZUNvbnN0cnVjdG9yIH0gZnJvbSAnLi9wdWJsaWMvdHlwZXMvZGV4aWUtY29uc3RydWN0b3InO1xuaW1wb3J0IHsgRGV4aWVQcm9taXNlIH0gZnJvbSAnLi9oZWxwZXJzL3Byb21pc2UnO1xuaW1wb3J0IHsgbWFwRXJyb3IgfSBmcm9tICcuL2Vycm9ycyc7XG5pbXBvcnQgKiBhcyBEZWJ1ZyBmcm9tICcuL2hlbHBlcnMvZGVidWcnO1xuaW1wb3J0IHsgZGV4aWVTdGFja0ZyYW1lRmlsdGVyIH0gZnJvbSAnLi9nbG9iYWxzL2NvbnN0YW50cyc7XG5cbi8vIEdlbmVyYXRlIGFsbCBzdGF0aWMgcHJvcGVydGllcyBzdWNoIGFzIERleGllLm1heEtleSBldGNcbi8vIChpbXBsZW1lbnQgaW50ZXJmYWNlIERleGllQ29uc3RydWN0b3IpOlxuaW1wb3J0ICcuL2NsYXNzZXMvZGV4aWUvZGV4aWUtc3RhdGljLXByb3BzJztcbmltcG9ydCAnLi9saXZlLXF1ZXJ5L2VuYWJsZS1icm9hZGNhc3QnO1xuaW1wb3J0ICcuL3N1cHBvcnQtYmZjYWNoZSc7XG5pbXBvcnQgeyBsaXZlUXVlcnkgfSBmcm9tICcuL2xpdmUtcXVlcnkvbGl2ZS1xdWVyeSc7XG5pbXBvcnQgeyBFbnRpdHkgfSBmcm9tICcuL2NsYXNzZXMvZW50aXR5L0VudGl0eSc7XG5pbXBvcnQgeyBjbXAgfSBmcm9tICcuL2Z1bmN0aW9ucy9jbXAnO1xuaW1wb3J0IHsgUHJvcE1vZGlmaWNhdGlvbiwgUHJvcE1vZFN5bWJvbCB9IGZyb20gJy4vaGVscGVycy9wcm9wLW1vZGlmaWNhdGlvbic7XG5pbXBvcnQgeyByZXBsYWNlUHJlZml4LCBhZGQsIHJlbW92ZSB9IGZyb20gJy4vZnVuY3Rpb25zL3Byb3Btb2RzJztcblxuXG4vLyBTZXQgcmVqZWN0aW9uTWFwcGVyIG9mIERleGllUHJvbWlzZSBzbyB0aGF0IGl0IGdlbmVyYWxseSB0cmllcyB0byBtYXBcbi8vIERPTUVycm9ycyBhbmQgRE9NRXhjZXB0aW9ucyB0byBhIERleGllRXJyb3IgaW5zdGFuY2Ugd2l0aCBzYW1lIG5hbWUgYnV0IHdpdGhcbi8vIGFzeW5jIHN0YWNrIHN1cHBvcnQgYW5kIHdpdGggYSBwcm90b3R5cGFsIGluaGVyaXRhbmNlIGZyb20gRGV4aWVFcnJvciBhbmQgRXJyb3IuXG4vLyBvZiBNYXAgRE9NRXJyb3JzIGFuZCBET01FeGNlcHRpb25zIHRvIGNvcnJlc3BvbmRpbmcgRGV4aWUgZXJyb3JzLlxuRGV4aWVQcm9taXNlLnJlamVjdGlvbk1hcHBlciA9IG1hcEVycm9yO1xuXG4vLyBMZXQgdGhlIGFzeW5jIHN0YWNrIGZpbHRlciBmb2N1cyBvbiBhcHAgY29kZSBhbmQgZmlsdGVyIGF3YXkgZnJhbWVzIGZyb20gZGV4aWUubWluLmpzOlxuRGVidWcuc2V0RGVidWcoRGVidWcuZGVidWcsIGRleGllU3RhY2tGcmFtZUZpbHRlcik7XG5cbmV4cG9ydCB7IFJhbmdlU2V0LCBtZXJnZVJhbmdlcywgcmFuZ2VzT3ZlcmxhcCB9IGZyb20gXCIuL2hlbHBlcnMvcmFuZ2VzZXRcIjtcbmV4cG9ydCB7IERleGllLCBsaXZlUXVlcnkgfTsgLy8gQ29tcGx5IHdpdGggcHVibGljL2luZGV4LmQudHMuXG5leHBvcnQgeyBFbnRpdHkgfTtcbmV4cG9ydCB7IGNtcCB9O1xuZXhwb3J0IHsgUHJvcE1vZFN5bWJvbCwgUHJvcE1vZGlmaWNhdGlvbiwgcmVwbGFjZVByZWZpeCwgYWRkLCByZW1vdmUgfTtcbmV4cG9ydCBkZWZhdWx0IERleGllO1xuIiwgIi8vIElzc3VlICMxMTI3LiBOZWVkIGFub3RoZXIgaW5kZXgudHMgZm9yIHRoZSBVTUQgbW9kdWxlIHdpdGggb25seSBhIGRlZmF1bHQgZXhwb3J0XG4vLyBsaWtlIGl0IHdhcyBiZWZvcmUuXG4vLyBJbiBwcmFjdGljZSB0aG91Z2gsIHRoZSBVTUQgZXhwb3J0IHdpbGwgYWxzbyBleHBvcnQgdGhlIG5hbWVkIGV4cG9ydCBpbiBcbi8vIGh0dHBzOi8vZ2l0aHViLmNvbS9kZmFobGFuZGVyL0RleGllLmpzL2Jsb2IvYzkxODdhZTYwYzBkN2E0MjRmODViYWIzYWYxNzlmYmJjOTkwMWM4ZS9zcmMvY2xhc3Nlcy9kZXhpZS9kZXhpZS1zdGF0aWMtcHJvcHMudHMjTDIyMy1MMjI4XG5pbXBvcnQgRGV4aWUgZnJvbSBcIi4vaW5kZXhcIjtcbmltcG9ydCAqIGFzIG5hbWVkRXhwb3J0cyBmcm9tIFwiLi9pbmRleFwiO1xuaW1wb3J0IHsgX19hc3NpZ24gfSBmcm9tICd0c2xpYic7XG5fX2Fzc2lnbihEZXhpZSwgbmFtZWRFeHBvcnRzLCB7ZGVmYXVsdDogRGV4aWV9KTtcbmV4cG9ydCBkZWZhdWx0IERleGllO1xuIiwgIi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCAyMDE5IEdvb2dsZSBMTENcbiAqIFNQRFgtTGljZW5zZS1JZGVudGlmaWVyOiBBcGFjaGUtMi4wXG4gKi9cblxuaW1wb3J0IHtcbiAgRW5kcG9pbnQsXG4gIEV2ZW50U291cmNlLFxuICBNZXNzYWdlLFxuICBNZXNzYWdlVHlwZSxcbiAgUG9zdE1lc3NhZ2VXaXRoT3JpZ2luLFxuICBXaXJlVmFsdWUsXG4gIFdpcmVWYWx1ZVR5cGUsXG59IGZyb20gXCIuL3Byb3RvY29sXCI7XG5leHBvcnQgdHlwZSB7IEVuZHBvaW50IH07XG5cbmV4cG9ydCBjb25zdCBwcm94eU1hcmtlciA9IFN5bWJvbChcIkNvbWxpbmsucHJveHlcIik7XG5leHBvcnQgY29uc3QgY3JlYXRlRW5kcG9pbnQgPSBTeW1ib2woXCJDb21saW5rLmVuZHBvaW50XCIpO1xuZXhwb3J0IGNvbnN0IHJlbGVhc2VQcm94eSA9IFN5bWJvbChcIkNvbWxpbmsucmVsZWFzZVByb3h5XCIpO1xuZXhwb3J0IGNvbnN0IGZpbmFsaXplciA9IFN5bWJvbChcIkNvbWxpbmsuZmluYWxpemVyXCIpO1xuXG5jb25zdCB0aHJvd01hcmtlciA9IFN5bWJvbChcIkNvbWxpbmsudGhyb3duXCIpO1xuXG4vKipcbiAqIEludGVyZmFjZSBvZiB2YWx1ZXMgdGhhdCB3ZXJlIG1hcmtlZCB0byBiZSBwcm94aWVkIHdpdGggYGNvbWxpbmsucHJveHkoKWAuXG4gKiBDYW4gYWxzbyBiZSBpbXBsZW1lbnRlZCBieSBjbGFzc2VzLlxuICovXG5leHBvcnQgaW50ZXJmYWNlIFByb3h5TWFya2VkIHtcbiAgW3Byb3h5TWFya2VyXTogdHJ1ZTtcbn1cblxuLyoqXG4gKiBUYWtlcyBhIHR5cGUgYW5kIHdyYXBzIGl0IGluIGEgUHJvbWlzZSwgaWYgaXQgbm90IGFscmVhZHkgaXMgb25lLlxuICogVGhpcyBpcyB0byBhdm9pZCBgUHJvbWlzZTxQcm9taXNlPFQ+PmAuXG4gKlxuICogVGhpcyBpcyB0aGUgaW52ZXJzZSBvZiBgVW5wcm9taXNpZnk8VD5gLlxuICovXG50eXBlIFByb21pc2lmeTxUPiA9IFQgZXh0ZW5kcyBQcm9taXNlPHVua25vd24+ID8gVCA6IFByb21pc2U8VD47XG4vKipcbiAqIFRha2VzIGEgdHlwZSB0aGF0IG1heSBiZSBQcm9taXNlIGFuZCB1bndyYXBzIHRoZSBQcm9taXNlIHR5cGUuXG4gKiBJZiBgUGAgaXMgbm90IGEgUHJvbWlzZSwgaXQgcmV0dXJucyBgUGAuXG4gKlxuICogVGhpcyBpcyB0aGUgaW52ZXJzZSBvZiBgUHJvbWlzaWZ5PFQ+YC5cbiAqL1xudHlwZSBVbnByb21pc2lmeTxQPiA9IFAgZXh0ZW5kcyBQcm9taXNlPGluZmVyIFQ+ID8gVCA6IFA7XG5cbi8qKlxuICogVGFrZXMgdGhlIHJhdyB0eXBlIG9mIGEgcmVtb3RlIHByb3BlcnR5IGFuZCByZXR1cm5zIHRoZSB0eXBlIHRoYXQgaXMgdmlzaWJsZSB0byB0aGUgbG9jYWwgdGhyZWFkIG9uIHRoZSBwcm94eS5cbiAqXG4gKiBOb3RlOiBUaGlzIG5lZWRzIHRvIGJlIGl0cyBvd24gdHlwZSBhbGlhcywgb3RoZXJ3aXNlIGl0IHdpbGwgbm90IGRpc3RyaWJ1dGUgb3ZlciB1bmlvbnMuXG4gKiBTZWUgaHR0cHM6Ly93d3cudHlwZXNjcmlwdGxhbmcub3JnL2RvY3MvaGFuZGJvb2svYWR2YW5jZWQtdHlwZXMuaHRtbCNkaXN0cmlidXRpdmUtY29uZGl0aW9uYWwtdHlwZXNcbiAqL1xudHlwZSBSZW1vdGVQcm9wZXJ0eTxUPiA9XG4gIC8vIElmIHRoZSB2YWx1ZSBpcyBhIG1ldGhvZCwgY29tbGluayB3aWxsIHByb3h5IGl0IGF1dG9tYXRpY2FsbHkuXG4gIC8vIE9iamVjdHMgYXJlIG9ubHkgcHJveGllZCBpZiB0aGV5IGFyZSBtYXJrZWQgdG8gYmUgcHJveGllZC5cbiAgLy8gT3RoZXJ3aXNlLCB0aGUgcHJvcGVydHkgaXMgY29udmVydGVkIHRvIGEgUHJvbWlzZSB0aGF0IHJlc29sdmVzIHRoZSBjbG9uZWQgdmFsdWUuXG4gIFQgZXh0ZW5kcyBGdW5jdGlvbiB8IFByb3h5TWFya2VkID8gUmVtb3RlPFQ+IDogUHJvbWlzaWZ5PFQ+O1xuXG4vKipcbiAqIFRha2VzIHRoZSByYXcgdHlwZSBvZiBhIHByb3BlcnR5IGFzIGEgcmVtb3RlIHRocmVhZCB3b3VsZCBzZWUgaXQgdGhyb3VnaCBhIHByb3h5IChlLmcuIHdoZW4gcGFzc2VkIGluIGFzIGEgZnVuY3Rpb25cbiAqIGFyZ3VtZW50KSBhbmQgcmV0dXJucyB0aGUgdHlwZSB0aGF0IHRoZSBsb2NhbCB0aHJlYWQgaGFzIHRvIHN1cHBseS5cbiAqXG4gKiBUaGlzIGlzIHRoZSBpbnZlcnNlIG9mIGBSZW1vdGVQcm9wZXJ0eTxUPmAuXG4gKlxuICogTm90ZTogVGhpcyBuZWVkcyB0byBiZSBpdHMgb3duIHR5cGUgYWxpYXMsIG90aGVyd2lzZSBpdCB3aWxsIG5vdCBkaXN0cmlidXRlIG92ZXIgdW5pb25zLiBTZWVcbiAqIGh0dHBzOi8vd3d3LnR5cGVzY3JpcHRsYW5nLm9yZy9kb2NzL2hhbmRib29rL2FkdmFuY2VkLXR5cGVzLmh0bWwjZGlzdHJpYnV0aXZlLWNvbmRpdGlvbmFsLXR5cGVzXG4gKi9cbnR5cGUgTG9jYWxQcm9wZXJ0eTxUPiA9IFQgZXh0ZW5kcyBGdW5jdGlvbiB8IFByb3h5TWFya2VkXG4gID8gTG9jYWw8VD5cbiAgOiBVbnByb21pc2lmeTxUPjtcblxuLyoqXG4gKiBQcm94aWVzIGBUYCBpZiBpdCBpcyBhIGBQcm94eU1hcmtlZGAsIGNsb25lcyBpdCBvdGhlcndpc2UgKGFzIGhhbmRsZWQgYnkgc3RydWN0dXJlZCBjbG9uaW5nIGFuZCB0cmFuc2ZlciBoYW5kbGVycykuXG4gKi9cbmV4cG9ydCB0eXBlIFByb3h5T3JDbG9uZTxUPiA9IFQgZXh0ZW5kcyBQcm94eU1hcmtlZCA/IFJlbW90ZTxUPiA6IFQ7XG4vKipcbiAqIEludmVyc2Ugb2YgYFByb3h5T3JDbG9uZTxUPmAuXG4gKi9cbmV4cG9ydCB0eXBlIFVucHJveHlPckNsb25lPFQ+ID0gVCBleHRlbmRzIFJlbW90ZU9iamVjdDxQcm94eU1hcmtlZD5cbiAgPyBMb2NhbDxUPlxuICA6IFQ7XG5cbi8qKlxuICogVGFrZXMgdGhlIHJhdyB0eXBlIG9mIGEgcmVtb3RlIG9iamVjdCBpbiB0aGUgb3RoZXIgdGhyZWFkIGFuZCByZXR1cm5zIHRoZSB0eXBlIGFzIGl0IGlzIHZpc2libGUgdG8gdGhlIGxvY2FsIHRocmVhZFxuICogd2hlbiBwcm94aWVkIHdpdGggYENvbWxpbmsucHJveHkoKWAuXG4gKlxuICogVGhpcyBkb2VzIG5vdCBoYW5kbGUgY2FsbCBzaWduYXR1cmVzLCB3aGljaCBpcyBoYW5kbGVkIGJ5IHRoZSBtb3JlIGdlbmVyYWwgYFJlbW90ZTxUPmAgdHlwZS5cbiAqXG4gKiBAdGVtcGxhdGUgVCBUaGUgcmF3IHR5cGUgb2YgYSByZW1vdGUgb2JqZWN0IGFzIHNlZW4gaW4gdGhlIG90aGVyIHRocmVhZC5cbiAqL1xuZXhwb3J0IHR5cGUgUmVtb3RlT2JqZWN0PFQ+ID0geyBbUCBpbiBrZXlvZiBUXTogUmVtb3RlUHJvcGVydHk8VFtQXT4gfTtcbi8qKlxuICogVGFrZXMgdGhlIHR5cGUgb2YgYW4gb2JqZWN0IGFzIGEgcmVtb3RlIHRocmVhZCB3b3VsZCBzZWUgaXQgdGhyb3VnaCBhIHByb3h5IChlLmcuIHdoZW4gcGFzc2VkIGluIGFzIGEgZnVuY3Rpb25cbiAqIGFyZ3VtZW50KSBhbmQgcmV0dXJucyB0aGUgdHlwZSB0aGF0IHRoZSBsb2NhbCB0aHJlYWQgaGFzIHRvIHN1cHBseS5cbiAqXG4gKiBUaGlzIGRvZXMgbm90IGhhbmRsZSBjYWxsIHNpZ25hdHVyZXMsIHdoaWNoIGlzIGhhbmRsZWQgYnkgdGhlIG1vcmUgZ2VuZXJhbCBgTG9jYWw8VD5gIHR5cGUuXG4gKlxuICogVGhpcyBpcyB0aGUgaW52ZXJzZSBvZiBgUmVtb3RlT2JqZWN0PFQ+YC5cbiAqXG4gKiBAdGVtcGxhdGUgVCBUaGUgdHlwZSBvZiBhIHByb3hpZWQgb2JqZWN0LlxuICovXG5leHBvcnQgdHlwZSBMb2NhbE9iamVjdDxUPiA9IHsgW1AgaW4ga2V5b2YgVF06IExvY2FsUHJvcGVydHk8VFtQXT4gfTtcblxuLyoqXG4gKiBBZGRpdGlvbmFsIHNwZWNpYWwgY29tbGluayBtZXRob2RzIGF2YWlsYWJsZSBvbiBlYWNoIHByb3h5IHJldHVybmVkIGJ5IGBDb21saW5rLndyYXAoKWAuXG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgUHJveHlNZXRob2RzIHtcbiAgW2NyZWF0ZUVuZHBvaW50XTogKCkgPT4gUHJvbWlzZTxNZXNzYWdlUG9ydD47XG4gIFtyZWxlYXNlUHJveHldOiAoKSA9PiB2b2lkO1xufVxuXG4vKipcbiAqIFRha2VzIHRoZSByYXcgdHlwZSBvZiBhIHJlbW90ZSBvYmplY3QsIGZ1bmN0aW9uIG9yIGNsYXNzIGluIHRoZSBvdGhlciB0aHJlYWQgYW5kIHJldHVybnMgdGhlIHR5cGUgYXMgaXQgaXMgdmlzaWJsZSB0b1xuICogdGhlIGxvY2FsIHRocmVhZCBmcm9tIHRoZSBwcm94eSByZXR1cm4gdmFsdWUgb2YgYENvbWxpbmsud3JhcCgpYCBvciBgQ29tbGluay5wcm94eSgpYC5cbiAqL1xuZXhwb3J0IHR5cGUgUmVtb3RlPFQ+ID1cbiAgLy8gSGFuZGxlIHByb3BlcnRpZXNcbiAgUmVtb3RlT2JqZWN0PFQ+ICZcbiAgICAvLyBIYW5kbGUgY2FsbCBzaWduYXR1cmUgKGlmIHByZXNlbnQpXG4gICAgKFQgZXh0ZW5kcyAoLi4uYXJnczogaW5mZXIgVEFyZ3VtZW50cykgPT4gaW5mZXIgVFJldHVyblxuICAgICAgPyAoXG4gICAgICAgICAgLi4uYXJnczogeyBbSSBpbiBrZXlvZiBUQXJndW1lbnRzXTogVW5wcm94eU9yQ2xvbmU8VEFyZ3VtZW50c1tJXT4gfVxuICAgICAgICApID0+IFByb21pc2lmeTxQcm94eU9yQ2xvbmU8VW5wcm9taXNpZnk8VFJldHVybj4+PlxuICAgICAgOiB1bmtub3duKSAmXG4gICAgLy8gSGFuZGxlIGNvbnN0cnVjdCBzaWduYXR1cmUgKGlmIHByZXNlbnQpXG4gICAgLy8gVGhlIHJldHVybiBvZiBjb25zdHJ1Y3Qgc2lnbmF0dXJlcyBpcyBhbHdheXMgcHJveGllZCAod2hldGhlciBtYXJrZWQgb3Igbm90KVxuICAgIChUIGV4dGVuZHMgeyBuZXcgKC4uLmFyZ3M6IGluZmVyIFRBcmd1bWVudHMpOiBpbmZlciBUSW5zdGFuY2UgfVxuICAgICAgPyB7XG4gICAgICAgICAgbmV3IChcbiAgICAgICAgICAgIC4uLmFyZ3M6IHtcbiAgICAgICAgICAgICAgW0kgaW4ga2V5b2YgVEFyZ3VtZW50c106IFVucHJveHlPckNsb25lPFRBcmd1bWVudHNbSV0+O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICk6IFByb21pc2lmeTxSZW1vdGU8VEluc3RhbmNlPj47XG4gICAgICAgIH1cbiAgICAgIDogdW5rbm93bikgJlxuICAgIC8vIEluY2x1ZGUgYWRkaXRpb25hbCBzcGVjaWFsIGNvbWxpbmsgbWV0aG9kcyBhdmFpbGFibGUgb24gdGhlIHByb3h5LlxuICAgIFByb3h5TWV0aG9kcztcblxuLyoqXG4gKiBFeHByZXNzZXMgdGhhdCBhIHR5cGUgY2FuIGJlIGVpdGhlciBhIHN5bmMgb3IgYXN5bmMuXG4gKi9cbnR5cGUgTWF5YmVQcm9taXNlPFQ+ID0gUHJvbWlzZTxUPiB8IFQ7XG5cbi8qKlxuICogVGFrZXMgdGhlIHJhdyB0eXBlIG9mIGEgcmVtb3RlIG9iamVjdCwgZnVuY3Rpb24gb3IgY2xhc3MgYXMgYSByZW1vdGUgdGhyZWFkIHdvdWxkIHNlZSBpdCB0aHJvdWdoIGEgcHJveHkgKGUuZy4gd2hlblxuICogcGFzc2VkIGluIGFzIGEgZnVuY3Rpb24gYXJndW1lbnQpIGFuZCByZXR1cm5zIHRoZSB0eXBlIHRoZSBsb2NhbCB0aHJlYWQgaGFzIHRvIHN1cHBseS5cbiAqXG4gKiBUaGlzIGlzIHRoZSBpbnZlcnNlIG9mIGBSZW1vdGU8VD5gLiBJdCB0YWtlcyBhIGBSZW1vdGU8VD5gIGFuZCByZXR1cm5zIGl0cyBvcmlnaW5hbCBpbnB1dCBgVGAuXG4gKi9cbmV4cG9ydCB0eXBlIExvY2FsPFQ+ID1cbiAgLy8gT21pdCB0aGUgc3BlY2lhbCBwcm94eSBtZXRob2RzICh0aGV5IGRvbid0IG5lZWQgdG8gYmUgc3VwcGxpZWQsIGNvbWxpbmsgYWRkcyB0aGVtKVxuICBPbWl0PExvY2FsT2JqZWN0PFQ+LCBrZXlvZiBQcm94eU1ldGhvZHM+ICZcbiAgICAvLyBIYW5kbGUgY2FsbCBzaWduYXR1cmVzIChpZiBwcmVzZW50KVxuICAgIChUIGV4dGVuZHMgKC4uLmFyZ3M6IGluZmVyIFRBcmd1bWVudHMpID0+IGluZmVyIFRSZXR1cm5cbiAgICAgID8gKFxuICAgICAgICAgIC4uLmFyZ3M6IHsgW0kgaW4ga2V5b2YgVEFyZ3VtZW50c106IFByb3h5T3JDbG9uZTxUQXJndW1lbnRzW0ldPiB9XG4gICAgICAgICkgPT4gLy8gVGhlIHJhdyBmdW5jdGlvbiBjb3VsZCBlaXRoZXIgYmUgc3luYyBvciBhc3luYywgYnV0IGlzIGFsd2F5cyBwcm94aWVkIGF1dG9tYXRpY2FsbHlcbiAgICAgICAgTWF5YmVQcm9taXNlPFVucHJveHlPckNsb25lPFVucHJvbWlzaWZ5PFRSZXR1cm4+Pj5cbiAgICAgIDogdW5rbm93bikgJlxuICAgIC8vIEhhbmRsZSBjb25zdHJ1Y3Qgc2lnbmF0dXJlIChpZiBwcmVzZW50KVxuICAgIC8vIFRoZSByZXR1cm4gb2YgY29uc3RydWN0IHNpZ25hdHVyZXMgaXMgYWx3YXlzIHByb3hpZWQgKHdoZXRoZXIgbWFya2VkIG9yIG5vdClcbiAgICAoVCBleHRlbmRzIHsgbmV3ICguLi5hcmdzOiBpbmZlciBUQXJndW1lbnRzKTogaW5mZXIgVEluc3RhbmNlIH1cbiAgICAgID8ge1xuICAgICAgICAgIG5ldyAoXG4gICAgICAgICAgICAuLi5hcmdzOiB7XG4gICAgICAgICAgICAgIFtJIGluIGtleW9mIFRBcmd1bWVudHNdOiBQcm94eU9yQ2xvbmU8VEFyZ3VtZW50c1tJXT47XG4gICAgICAgICAgICB9XG4gICAgICAgICAgKTogLy8gVGhlIHJhdyBjb25zdHJ1Y3RvciBjb3VsZCBlaXRoZXIgYmUgc3luYyBvciBhc3luYywgYnV0IGlzIGFsd2F5cyBwcm94aWVkIGF1dG9tYXRpY2FsbHlcbiAgICAgICAgICBNYXliZVByb21pc2U8TG9jYWw8VW5wcm9taXNpZnk8VEluc3RhbmNlPj4+O1xuICAgICAgICB9XG4gICAgICA6IHVua25vd24pO1xuXG5jb25zdCBpc09iamVjdCA9ICh2YWw6IHVua25vd24pOiB2YWwgaXMgb2JqZWN0ID0+XG4gICh0eXBlb2YgdmFsID09PSBcIm9iamVjdFwiICYmIHZhbCAhPT0gbnVsbCkgfHwgdHlwZW9mIHZhbCA9PT0gXCJmdW5jdGlvblwiO1xuXG4vKipcbiAqIEN1c3RvbWl6ZXMgdGhlIHNlcmlhbGl6YXRpb24gb2YgY2VydGFpbiB2YWx1ZXMgYXMgZGV0ZXJtaW5lZCBieSBgY2FuSGFuZGxlKClgLlxuICpcbiAqIEB0ZW1wbGF0ZSBUIFRoZSBpbnB1dCB0eXBlIGJlaW5nIGhhbmRsZWQgYnkgdGhpcyB0cmFuc2ZlciBoYW5kbGVyLlxuICogQHRlbXBsYXRlIFMgVGhlIHNlcmlhbGl6ZWQgdHlwZSBzZW50IG92ZXIgdGhlIHdpcmUuXG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgVHJhbnNmZXJIYW5kbGVyPFQsIFM+IHtcbiAgLyoqXG4gICAqIEdldHMgY2FsbGVkIGZvciBldmVyeSB2YWx1ZSB0byBkZXRlcm1pbmUgd2hldGhlciB0aGlzIHRyYW5zZmVyIGhhbmRsZXJcbiAgICogc2hvdWxkIHNlcmlhbGl6ZSB0aGUgdmFsdWUsIHdoaWNoIGluY2x1ZGVzIGNoZWNraW5nIHRoYXQgaXQgaXMgb2YgdGhlIHJpZ2h0XG4gICAqIHR5cGUgKGJ1dCBjYW4gcGVyZm9ybSBjaGVja3MgYmV5b25kIHRoYXQgYXMgd2VsbCkuXG4gICAqL1xuICBjYW5IYW5kbGUodmFsdWU6IHVua25vd24pOiB2YWx1ZSBpcyBUO1xuXG4gIC8qKlxuICAgKiBHZXRzIGNhbGxlZCB3aXRoIHRoZSB2YWx1ZSBpZiBgY2FuSGFuZGxlKClgIHJldHVybmVkIGB0cnVlYCB0byBwcm9kdWNlIGFcbiAgICogdmFsdWUgdGhhdCBjYW4gYmUgc2VudCBpbiBhIG1lc3NhZ2UsIGNvbnNpc3Rpbmcgb2Ygc3RydWN0dXJlZC1jbG9uZWFibGVcbiAgICogdmFsdWVzIGFuZC9vciB0cmFuc2ZlcnJhYmxlIG9iamVjdHMuXG4gICAqL1xuICBzZXJpYWxpemUodmFsdWU6IFQpOiBbUywgVHJhbnNmZXJhYmxlW11dO1xuXG4gIC8qKlxuICAgKiBHZXRzIGNhbGxlZCB0byBkZXNlcmlhbGl6ZSBhbiBpbmNvbWluZyB2YWx1ZSB0aGF0IHdhcyBzZXJpYWxpemVkIGluIHRoZVxuICAgKiBvdGhlciB0aHJlYWQgd2l0aCB0aGlzIHRyYW5zZmVyIGhhbmRsZXIgKGtub3duIHRocm91Z2ggdGhlIG5hbWUgaXQgd2FzXG4gICAqIHJlZ2lzdGVyZWQgdW5kZXIpLlxuICAgKi9cbiAgZGVzZXJpYWxpemUodmFsdWU6IFMpOiBUO1xufVxuXG4vKipcbiAqIEludGVybmFsIHRyYW5zZmVyIGhhbmRsZSB0byBoYW5kbGUgb2JqZWN0cyBtYXJrZWQgdG8gcHJveHkuXG4gKi9cbmNvbnN0IHByb3h5VHJhbnNmZXJIYW5kbGVyOiBUcmFuc2ZlckhhbmRsZXI8b2JqZWN0LCBNZXNzYWdlUG9ydD4gPSB7XG4gIGNhbkhhbmRsZTogKHZhbCk6IHZhbCBpcyBQcm94eU1hcmtlZCA9PlxuICAgIGlzT2JqZWN0KHZhbCkgJiYgKHZhbCBhcyBQcm94eU1hcmtlZClbcHJveHlNYXJrZXJdLFxuICBzZXJpYWxpemUob2JqKSB7XG4gICAgY29uc3QgeyBwb3J0MSwgcG9ydDIgfSA9IG5ldyBNZXNzYWdlQ2hhbm5lbCgpO1xuICAgIGV4cG9zZShvYmosIHBvcnQxKTtcbiAgICByZXR1cm4gW3BvcnQyLCBbcG9ydDJdXTtcbiAgfSxcbiAgZGVzZXJpYWxpemUocG9ydCkge1xuICAgIHBvcnQuc3RhcnQoKTtcbiAgICByZXR1cm4gd3JhcChwb3J0KTtcbiAgfSxcbn07XG5cbmludGVyZmFjZSBUaHJvd25WYWx1ZSB7XG4gIFt0aHJvd01hcmtlcl06IHVua25vd247IC8vIGp1c3QgbmVlZHMgdG8gYmUgcHJlc2VudFxuICB2YWx1ZTogdW5rbm93bjtcbn1cbnR5cGUgU2VyaWFsaXplZFRocm93blZhbHVlID1cbiAgfCB7IGlzRXJyb3I6IHRydWU7IHZhbHVlOiBFcnJvciB9XG4gIHwgeyBpc0Vycm9yOiBmYWxzZTsgdmFsdWU6IHVua25vd24gfTtcblxuLyoqXG4gKiBJbnRlcm5hbCB0cmFuc2ZlciBoYW5kbGVyIHRvIGhhbmRsZSB0aHJvd24gZXhjZXB0aW9ucy5cbiAqL1xuY29uc3QgdGhyb3dUcmFuc2ZlckhhbmRsZXI6IFRyYW5zZmVySGFuZGxlcjxcbiAgVGhyb3duVmFsdWUsXG4gIFNlcmlhbGl6ZWRUaHJvd25WYWx1ZVxuPiA9IHtcbiAgY2FuSGFuZGxlOiAodmFsdWUpOiB2YWx1ZSBpcyBUaHJvd25WYWx1ZSA9PlxuICAgIGlzT2JqZWN0KHZhbHVlKSAmJiB0aHJvd01hcmtlciBpbiB2YWx1ZSxcbiAgc2VyaWFsaXplKHsgdmFsdWUgfSkge1xuICAgIGxldCBzZXJpYWxpemVkOiBTZXJpYWxpemVkVGhyb3duVmFsdWU7XG4gICAgaWYgKHZhbHVlIGluc3RhbmNlb2YgRXJyb3IpIHtcbiAgICAgIHNlcmlhbGl6ZWQgPSB7XG4gICAgICAgIGlzRXJyb3I6IHRydWUsXG4gICAgICAgIHZhbHVlOiB7XG4gICAgICAgICAgbWVzc2FnZTogdmFsdWUubWVzc2FnZSxcbiAgICAgICAgICBuYW1lOiB2YWx1ZS5uYW1lLFxuICAgICAgICAgIHN0YWNrOiB2YWx1ZS5zdGFjayxcbiAgICAgICAgfSxcbiAgICAgIH07XG4gICAgfSBlbHNlIHtcbiAgICAgIHNlcmlhbGl6ZWQgPSB7IGlzRXJyb3I6IGZhbHNlLCB2YWx1ZSB9O1xuICAgIH1cbiAgICByZXR1cm4gW3NlcmlhbGl6ZWQsIFtdXTtcbiAgfSxcbiAgZGVzZXJpYWxpemUoc2VyaWFsaXplZCkge1xuICAgIGlmIChzZXJpYWxpemVkLmlzRXJyb3IpIHtcbiAgICAgIHRocm93IE9iamVjdC5hc3NpZ24oXG4gICAgICAgIG5ldyBFcnJvcihzZXJpYWxpemVkLnZhbHVlLm1lc3NhZ2UpLFxuICAgICAgICBzZXJpYWxpemVkLnZhbHVlXG4gICAgICApO1xuICAgIH1cbiAgICB0aHJvdyBzZXJpYWxpemVkLnZhbHVlO1xuICB9LFxufTtcblxuLyoqXG4gKiBBbGxvd3MgY3VzdG9taXppbmcgdGhlIHNlcmlhbGl6YXRpb24gb2YgY2VydGFpbiB2YWx1ZXMuXG4gKi9cbmV4cG9ydCBjb25zdCB0cmFuc2ZlckhhbmRsZXJzID0gbmV3IE1hcDxcbiAgc3RyaW5nLFxuICBUcmFuc2ZlckhhbmRsZXI8dW5rbm93biwgdW5rbm93bj5cbj4oW1xuICBbXCJwcm94eVwiLCBwcm94eVRyYW5zZmVySGFuZGxlcl0sXG4gIFtcInRocm93XCIsIHRocm93VHJhbnNmZXJIYW5kbGVyXSxcbl0pO1xuXG5mdW5jdGlvbiBpc0FsbG93ZWRPcmlnaW4oXG4gIGFsbG93ZWRPcmlnaW5zOiAoc3RyaW5nIHwgUmVnRXhwKVtdLFxuICBvcmlnaW46IHN0cmluZ1xuKTogYm9vbGVhbiB7XG4gIGZvciAoY29uc3QgYWxsb3dlZE9yaWdpbiBvZiBhbGxvd2VkT3JpZ2lucykge1xuICAgIGlmIChvcmlnaW4gPT09IGFsbG93ZWRPcmlnaW4gfHwgYWxsb3dlZE9yaWdpbiA9PT0gXCIqXCIpIHtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgICBpZiAoYWxsb3dlZE9yaWdpbiBpbnN0YW5jZW9mIFJlZ0V4cCAmJiBhbGxvd2VkT3JpZ2luLnRlc3Qob3JpZ2luKSkge1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICB9XG4gIHJldHVybiBmYWxzZTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGV4cG9zZShcbiAgb2JqOiBhbnksXG4gIGVwOiBFbmRwb2ludCA9IGdsb2JhbFRoaXMgYXMgYW55LFxuICBhbGxvd2VkT3JpZ2luczogKHN0cmluZyB8IFJlZ0V4cClbXSA9IFtcIipcIl1cbikge1xuICBlcC5hZGRFdmVudExpc3RlbmVyKFwibWVzc2FnZVwiLCBmdW5jdGlvbiBjYWxsYmFjayhldjogTWVzc2FnZUV2ZW50KSB7XG4gICAgaWYgKCFldiB8fCAhZXYuZGF0YSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBpZiAoIWlzQWxsb3dlZE9yaWdpbihhbGxvd2VkT3JpZ2lucywgZXYub3JpZ2luKSkge1xuICAgICAgY29uc29sZS53YXJuKGBJbnZhbGlkIG9yaWdpbiAnJHtldi5vcmlnaW59JyBmb3IgY29tbGluayBwcm94eWApO1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBjb25zdCB7IGlkLCB0eXBlLCBwYXRoIH0gPSB7XG4gICAgICBwYXRoOiBbXSBhcyBzdHJpbmdbXSxcbiAgICAgIC4uLihldi5kYXRhIGFzIE1lc3NhZ2UpLFxuICAgIH07XG4gICAgY29uc3QgYXJndW1lbnRMaXN0ID0gKGV2LmRhdGEuYXJndW1lbnRMaXN0IHx8IFtdKS5tYXAoZnJvbVdpcmVWYWx1ZSk7XG4gICAgbGV0IHJldHVyblZhbHVlO1xuICAgIHRyeSB7XG4gICAgICBjb25zdCBwYXJlbnQgPSBwYXRoLnNsaWNlKDAsIC0xKS5yZWR1Y2UoKG9iaiwgcHJvcCkgPT4gb2JqW3Byb3BdLCBvYmopO1xuICAgICAgY29uc3QgcmF3VmFsdWUgPSBwYXRoLnJlZHVjZSgob2JqLCBwcm9wKSA9PiBvYmpbcHJvcF0sIG9iaik7XG4gICAgICBzd2l0Y2ggKHR5cGUpIHtcbiAgICAgICAgY2FzZSBNZXNzYWdlVHlwZS5HRVQ6XG4gICAgICAgICAge1xuICAgICAgICAgICAgcmV0dXJuVmFsdWUgPSByYXdWYWx1ZTtcbiAgICAgICAgICB9XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgTWVzc2FnZVR5cGUuU0VUOlxuICAgICAgICAgIHtcbiAgICAgICAgICAgIHBhcmVudFtwYXRoLnNsaWNlKC0xKVswXV0gPSBmcm9tV2lyZVZhbHVlKGV2LmRhdGEudmFsdWUpO1xuICAgICAgICAgICAgcmV0dXJuVmFsdWUgPSB0cnVlO1xuICAgICAgICAgIH1cbiAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSBNZXNzYWdlVHlwZS5BUFBMWTpcbiAgICAgICAgICB7XG4gICAgICAgICAgICByZXR1cm5WYWx1ZSA9IHJhd1ZhbHVlLmFwcGx5KHBhcmVudCwgYXJndW1lbnRMaXN0KTtcbiAgICAgICAgICB9XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgTWVzc2FnZVR5cGUuQ09OU1RSVUNUOlxuICAgICAgICAgIHtcbiAgICAgICAgICAgIGNvbnN0IHZhbHVlID0gbmV3IHJhd1ZhbHVlKC4uLmFyZ3VtZW50TGlzdCk7XG4gICAgICAgICAgICByZXR1cm5WYWx1ZSA9IHByb3h5KHZhbHVlKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgTWVzc2FnZVR5cGUuRU5EUE9JTlQ6XG4gICAgICAgICAge1xuICAgICAgICAgICAgY29uc3QgeyBwb3J0MSwgcG9ydDIgfSA9IG5ldyBNZXNzYWdlQ2hhbm5lbCgpO1xuICAgICAgICAgICAgZXhwb3NlKG9iaiwgcG9ydDIpO1xuICAgICAgICAgICAgcmV0dXJuVmFsdWUgPSB0cmFuc2Zlcihwb3J0MSwgW3BvcnQxXSk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlIE1lc3NhZ2VUeXBlLlJFTEVBU0U6XG4gICAgICAgICAge1xuICAgICAgICAgICAgcmV0dXJuVmFsdWUgPSB1bmRlZmluZWQ7XG4gICAgICAgICAgfVxuICAgICAgICAgIGJyZWFrO1xuICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICB9IGNhdGNoICh2YWx1ZSkge1xuICAgICAgcmV0dXJuVmFsdWUgPSB7IHZhbHVlLCBbdGhyb3dNYXJrZXJdOiAwIH07XG4gICAgfVxuICAgIFByb21pc2UucmVzb2x2ZShyZXR1cm5WYWx1ZSlcbiAgICAgIC5jYXRjaCgodmFsdWUpID0+IHtcbiAgICAgICAgcmV0dXJuIHsgdmFsdWUsIFt0aHJvd01hcmtlcl06IDAgfTtcbiAgICAgIH0pXG4gICAgICAudGhlbigocmV0dXJuVmFsdWUpID0+IHtcbiAgICAgICAgY29uc3QgW3dpcmVWYWx1ZSwgdHJhbnNmZXJhYmxlc10gPSB0b1dpcmVWYWx1ZShyZXR1cm5WYWx1ZSk7XG4gICAgICAgIGVwLnBvc3RNZXNzYWdlKHsgLi4ud2lyZVZhbHVlLCBpZCB9LCB0cmFuc2ZlcmFibGVzKTtcbiAgICAgICAgaWYgKHR5cGUgPT09IE1lc3NhZ2VUeXBlLlJFTEVBU0UpIHtcbiAgICAgICAgICAvLyBkZXRhY2ggYW5kIGRlYWN0aXZlIGFmdGVyIHNlbmRpbmcgcmVsZWFzZSByZXNwb25zZSBhYm92ZS5cbiAgICAgICAgICBlcC5yZW1vdmVFdmVudExpc3RlbmVyKFwibWVzc2FnZVwiLCBjYWxsYmFjayBhcyBhbnkpO1xuICAgICAgICAgIGNsb3NlRW5kUG9pbnQoZXApO1xuICAgICAgICAgIGlmIChmaW5hbGl6ZXIgaW4gb2JqICYmIHR5cGVvZiBvYmpbZmluYWxpemVyXSA9PT0gXCJmdW5jdGlvblwiKSB7XG4gICAgICAgICAgICBvYmpbZmluYWxpemVyXSgpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfSlcbiAgICAgIC5jYXRjaCgoZXJyb3IpID0+IHtcbiAgICAgICAgLy8gU2VuZCBTZXJpYWxpemF0aW9uIEVycm9yIFRvIENhbGxlclxuICAgICAgICBjb25zdCBbd2lyZVZhbHVlLCB0cmFuc2ZlcmFibGVzXSA9IHRvV2lyZVZhbHVlKHtcbiAgICAgICAgICB2YWx1ZTogbmV3IFR5cGVFcnJvcihcIlVuc2VyaWFsaXphYmxlIHJldHVybiB2YWx1ZVwiKSxcbiAgICAgICAgICBbdGhyb3dNYXJrZXJdOiAwLFxuICAgICAgICB9KTtcbiAgICAgICAgZXAucG9zdE1lc3NhZ2UoeyAuLi53aXJlVmFsdWUsIGlkIH0sIHRyYW5zZmVyYWJsZXMpO1xuICAgICAgfSk7XG4gIH0gYXMgYW55KTtcbiAgaWYgKGVwLnN0YXJ0KSB7XG4gICAgZXAuc3RhcnQoKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBpc01lc3NhZ2VQb3J0KGVuZHBvaW50OiBFbmRwb2ludCk6IGVuZHBvaW50IGlzIE1lc3NhZ2VQb3J0IHtcbiAgcmV0dXJuIGVuZHBvaW50LmNvbnN0cnVjdG9yLm5hbWUgPT09IFwiTWVzc2FnZVBvcnRcIjtcbn1cblxuZnVuY3Rpb24gY2xvc2VFbmRQb2ludChlbmRwb2ludDogRW5kcG9pbnQpIHtcbiAgaWYgKGlzTWVzc2FnZVBvcnQoZW5kcG9pbnQpKSBlbmRwb2ludC5jbG9zZSgpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gd3JhcDxUPihlcDogRW5kcG9pbnQsIHRhcmdldD86IGFueSk6IFJlbW90ZTxUPiB7XG4gIHJldHVybiBjcmVhdGVQcm94eTxUPihlcCwgW10sIHRhcmdldCkgYXMgYW55O1xufVxuXG5mdW5jdGlvbiB0aHJvd0lmUHJveHlSZWxlYXNlZChpc1JlbGVhc2VkOiBib29sZWFuKSB7XG4gIGlmIChpc1JlbGVhc2VkKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKFwiUHJveHkgaGFzIGJlZW4gcmVsZWFzZWQgYW5kIGlzIG5vdCB1c2VhYmxlXCIpO1xuICB9XG59XG5cbmZ1bmN0aW9uIHJlbGVhc2VFbmRwb2ludChlcDogRW5kcG9pbnQpIHtcbiAgcmV0dXJuIHJlcXVlc3RSZXNwb25zZU1lc3NhZ2UoZXAsIHtcbiAgICB0eXBlOiBNZXNzYWdlVHlwZS5SRUxFQVNFLFxuICB9KS50aGVuKCgpID0+IHtcbiAgICBjbG9zZUVuZFBvaW50KGVwKTtcbiAgfSk7XG59XG5cbmludGVyZmFjZSBGaW5hbGl6YXRpb25SZWdpc3RyeTxUPiB7XG4gIG5ldyAoY2I6IChoZWxkVmFsdWU6IFQpID0+IHZvaWQpOiBGaW5hbGl6YXRpb25SZWdpc3RyeTxUPjtcbiAgcmVnaXN0ZXIoXG4gICAgd2Vha0l0ZW06IG9iamVjdCxcbiAgICBoZWxkVmFsdWU6IFQsXG4gICAgdW5yZWdpc3RlclRva2VuPzogb2JqZWN0IHwgdW5kZWZpbmVkXG4gICk6IHZvaWQ7XG4gIHVucmVnaXN0ZXIodW5yZWdpc3RlclRva2VuOiBvYmplY3QpOiB2b2lkO1xufVxuZGVjbGFyZSB2YXIgRmluYWxpemF0aW9uUmVnaXN0cnk6IEZpbmFsaXphdGlvblJlZ2lzdHJ5PEVuZHBvaW50PjtcblxuY29uc3QgcHJveHlDb3VudGVyID0gbmV3IFdlYWtNYXA8RW5kcG9pbnQsIG51bWJlcj4oKTtcbmNvbnN0IHByb3h5RmluYWxpemVycyA9XG4gIFwiRmluYWxpemF0aW9uUmVnaXN0cnlcIiBpbiBnbG9iYWxUaGlzICYmXG4gIG5ldyBGaW5hbGl6YXRpb25SZWdpc3RyeSgoZXA6IEVuZHBvaW50KSA9PiB7XG4gICAgY29uc3QgbmV3Q291bnQgPSAocHJveHlDb3VudGVyLmdldChlcCkgfHwgMCkgLSAxO1xuICAgIHByb3h5Q291bnRlci5zZXQoZXAsIG5ld0NvdW50KTtcbiAgICBpZiAobmV3Q291bnQgPT09IDApIHtcbiAgICAgIHJlbGVhc2VFbmRwb2ludChlcCk7XG4gICAgfVxuICB9KTtcblxuZnVuY3Rpb24gcmVnaXN0ZXJQcm94eShwcm94eTogb2JqZWN0LCBlcDogRW5kcG9pbnQpIHtcbiAgY29uc3QgbmV3Q291bnQgPSAocHJveHlDb3VudGVyLmdldChlcCkgfHwgMCkgKyAxO1xuICBwcm94eUNvdW50ZXIuc2V0KGVwLCBuZXdDb3VudCk7XG4gIGlmIChwcm94eUZpbmFsaXplcnMpIHtcbiAgICBwcm94eUZpbmFsaXplcnMucmVnaXN0ZXIocHJveHksIGVwLCBwcm94eSk7XG4gIH1cbn1cblxuZnVuY3Rpb24gdW5yZWdpc3RlclByb3h5KHByb3h5OiBvYmplY3QpIHtcbiAgaWYgKHByb3h5RmluYWxpemVycykge1xuICAgIHByb3h5RmluYWxpemVycy51bnJlZ2lzdGVyKHByb3h5KTtcbiAgfVxufVxuXG5mdW5jdGlvbiBjcmVhdGVQcm94eTxUPihcbiAgZXA6IEVuZHBvaW50LFxuICBwYXRoOiAoc3RyaW5nIHwgbnVtYmVyIHwgc3ltYm9sKVtdID0gW10sXG4gIHRhcmdldDogb2JqZWN0ID0gZnVuY3Rpb24gKCkge31cbik6IFJlbW90ZTxUPiB7XG4gIGxldCBpc1Byb3h5UmVsZWFzZWQgPSBmYWxzZTtcbiAgY29uc3QgcHJveHkgPSBuZXcgUHJveHkodGFyZ2V0LCB7XG4gICAgZ2V0KF90YXJnZXQsIHByb3ApIHtcbiAgICAgIHRocm93SWZQcm94eVJlbGVhc2VkKGlzUHJveHlSZWxlYXNlZCk7XG4gICAgICBpZiAocHJvcCA9PT0gcmVsZWFzZVByb3h5KSB7XG4gICAgICAgIHJldHVybiAoKSA9PiB7XG4gICAgICAgICAgdW5yZWdpc3RlclByb3h5KHByb3h5KTtcbiAgICAgICAgICByZWxlYXNlRW5kcG9pbnQoZXApO1xuICAgICAgICAgIGlzUHJveHlSZWxlYXNlZCA9IHRydWU7XG4gICAgICAgIH07XG4gICAgICB9XG4gICAgICBpZiAocHJvcCA9PT0gXCJ0aGVuXCIpIHtcbiAgICAgICAgaWYgKHBhdGgubGVuZ3RoID09PSAwKSB7XG4gICAgICAgICAgcmV0dXJuIHsgdGhlbjogKCkgPT4gcHJveHkgfTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCByID0gcmVxdWVzdFJlc3BvbnNlTWVzc2FnZShlcCwge1xuICAgICAgICAgIHR5cGU6IE1lc3NhZ2VUeXBlLkdFVCxcbiAgICAgICAgICBwYXRoOiBwYXRoLm1hcCgocCkgPT4gcC50b1N0cmluZygpKSxcbiAgICAgICAgfSkudGhlbihmcm9tV2lyZVZhbHVlKTtcbiAgICAgICAgcmV0dXJuIHIudGhlbi5iaW5kKHIpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGNyZWF0ZVByb3h5KGVwLCBbLi4ucGF0aCwgcHJvcF0pO1xuICAgIH0sXG4gICAgc2V0KF90YXJnZXQsIHByb3AsIHJhd1ZhbHVlKSB7XG4gICAgICB0aHJvd0lmUHJveHlSZWxlYXNlZChpc1Byb3h5UmVsZWFzZWQpO1xuICAgICAgLy8gRklYTUU6IEVTNiBQcm94eSBIYW5kbGVyIGBzZXRgIG1ldGhvZHMgYXJlIHN1cHBvc2VkIHRvIHJldHVybiBhXG4gICAgICAvLyBib29sZWFuLiBUbyBzaG93IGdvb2Qgd2lsbCwgd2UgcmV0dXJuIHRydWUgYXN5bmNocm9ub3VzbHkgXHUwMEFGXFxfKFx1MzBDNClfL1x1MDBBRlxuICAgICAgY29uc3QgW3ZhbHVlLCB0cmFuc2ZlcmFibGVzXSA9IHRvV2lyZVZhbHVlKHJhd1ZhbHVlKTtcbiAgICAgIHJldHVybiByZXF1ZXN0UmVzcG9uc2VNZXNzYWdlKFxuICAgICAgICBlcCxcbiAgICAgICAge1xuICAgICAgICAgIHR5cGU6IE1lc3NhZ2VUeXBlLlNFVCxcbiAgICAgICAgICBwYXRoOiBbLi4ucGF0aCwgcHJvcF0ubWFwKChwKSA9PiBwLnRvU3RyaW5nKCkpLFxuICAgICAgICAgIHZhbHVlLFxuICAgICAgICB9LFxuICAgICAgICB0cmFuc2ZlcmFibGVzXG4gICAgICApLnRoZW4oZnJvbVdpcmVWYWx1ZSkgYXMgYW55O1xuICAgIH0sXG4gICAgYXBwbHkoX3RhcmdldCwgX3RoaXNBcmcsIHJhd0FyZ3VtZW50TGlzdCkge1xuICAgICAgdGhyb3dJZlByb3h5UmVsZWFzZWQoaXNQcm94eVJlbGVhc2VkKTtcbiAgICAgIGNvbnN0IGxhc3QgPSBwYXRoW3BhdGgubGVuZ3RoIC0gMV07XG4gICAgICBpZiAoKGxhc3QgYXMgYW55KSA9PT0gY3JlYXRlRW5kcG9pbnQpIHtcbiAgICAgICAgcmV0dXJuIHJlcXVlc3RSZXNwb25zZU1lc3NhZ2UoZXAsIHtcbiAgICAgICAgICB0eXBlOiBNZXNzYWdlVHlwZS5FTkRQT0lOVCxcbiAgICAgICAgfSkudGhlbihmcm9tV2lyZVZhbHVlKTtcbiAgICAgIH1cbiAgICAgIC8vIFdlIGp1c3QgcHJldGVuZCB0aGF0IGBiaW5kKClgIGRpZG5cdTIwMTl0IGhhcHBlbi5cbiAgICAgIGlmIChsYXN0ID09PSBcImJpbmRcIikge1xuICAgICAgICByZXR1cm4gY3JlYXRlUHJveHkoZXAsIHBhdGguc2xpY2UoMCwgLTEpKTtcbiAgICAgIH1cbiAgICAgIGNvbnN0IFthcmd1bWVudExpc3QsIHRyYW5zZmVyYWJsZXNdID0gcHJvY2Vzc0FyZ3VtZW50cyhyYXdBcmd1bWVudExpc3QpO1xuICAgICAgcmV0dXJuIHJlcXVlc3RSZXNwb25zZU1lc3NhZ2UoXG4gICAgICAgIGVwLFxuICAgICAgICB7XG4gICAgICAgICAgdHlwZTogTWVzc2FnZVR5cGUuQVBQTFksXG4gICAgICAgICAgcGF0aDogcGF0aC5tYXAoKHApID0+IHAudG9TdHJpbmcoKSksXG4gICAgICAgICAgYXJndW1lbnRMaXN0LFxuICAgICAgICB9LFxuICAgICAgICB0cmFuc2ZlcmFibGVzXG4gICAgICApLnRoZW4oZnJvbVdpcmVWYWx1ZSk7XG4gICAgfSxcbiAgICBjb25zdHJ1Y3QoX3RhcmdldCwgcmF3QXJndW1lbnRMaXN0KSB7XG4gICAgICB0aHJvd0lmUHJveHlSZWxlYXNlZChpc1Byb3h5UmVsZWFzZWQpO1xuICAgICAgY29uc3QgW2FyZ3VtZW50TGlzdCwgdHJhbnNmZXJhYmxlc10gPSBwcm9jZXNzQXJndW1lbnRzKHJhd0FyZ3VtZW50TGlzdCk7XG4gICAgICByZXR1cm4gcmVxdWVzdFJlc3BvbnNlTWVzc2FnZShcbiAgICAgICAgZXAsXG4gICAgICAgIHtcbiAgICAgICAgICB0eXBlOiBNZXNzYWdlVHlwZS5DT05TVFJVQ1QsXG4gICAgICAgICAgcGF0aDogcGF0aC5tYXAoKHApID0+IHAudG9TdHJpbmcoKSksXG4gICAgICAgICAgYXJndW1lbnRMaXN0LFxuICAgICAgICB9LFxuICAgICAgICB0cmFuc2ZlcmFibGVzXG4gICAgICApLnRoZW4oZnJvbVdpcmVWYWx1ZSk7XG4gICAgfSxcbiAgfSk7XG4gIHJlZ2lzdGVyUHJveHkocHJveHksIGVwKTtcbiAgcmV0dXJuIHByb3h5IGFzIGFueTtcbn1cblxuZnVuY3Rpb24gbXlGbGF0PFQ+KGFycjogKFQgfCBUW10pW10pOiBUW10ge1xuICByZXR1cm4gQXJyYXkucHJvdG90eXBlLmNvbmNhdC5hcHBseShbXSwgYXJyKTtcbn1cblxuZnVuY3Rpb24gcHJvY2Vzc0FyZ3VtZW50cyhhcmd1bWVudExpc3Q6IGFueVtdKTogW1dpcmVWYWx1ZVtdLCBUcmFuc2ZlcmFibGVbXV0ge1xuICBjb25zdCBwcm9jZXNzZWQgPSBhcmd1bWVudExpc3QubWFwKHRvV2lyZVZhbHVlKTtcbiAgcmV0dXJuIFtwcm9jZXNzZWQubWFwKCh2KSA9PiB2WzBdKSwgbXlGbGF0KHByb2Nlc3NlZC5tYXAoKHYpID0+IHZbMV0pKV07XG59XG5cbmNvbnN0IHRyYW5zZmVyQ2FjaGUgPSBuZXcgV2Vha01hcDxhbnksIFRyYW5zZmVyYWJsZVtdPigpO1xuZXhwb3J0IGZ1bmN0aW9uIHRyYW5zZmVyPFQ+KG9iajogVCwgdHJhbnNmZXJzOiBUcmFuc2ZlcmFibGVbXSk6IFQge1xuICB0cmFuc2ZlckNhY2hlLnNldChvYmosIHRyYW5zZmVycyk7XG4gIHJldHVybiBvYmo7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBwcm94eTxUIGV4dGVuZHMge30+KG9iajogVCk6IFQgJiBQcm94eU1hcmtlZCB7XG4gIHJldHVybiBPYmplY3QuYXNzaWduKG9iaiwgeyBbcHJveHlNYXJrZXJdOiB0cnVlIH0pIGFzIGFueTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHdpbmRvd0VuZHBvaW50KFxuICB3OiBQb3N0TWVzc2FnZVdpdGhPcmlnaW4sXG4gIGNvbnRleHQ6IEV2ZW50U291cmNlID0gZ2xvYmFsVGhpcyxcbiAgdGFyZ2V0T3JpZ2luID0gXCIqXCJcbik6IEVuZHBvaW50IHtcbiAgcmV0dXJuIHtcbiAgICBwb3N0TWVzc2FnZTogKG1zZzogYW55LCB0cmFuc2ZlcmFibGVzOiBUcmFuc2ZlcmFibGVbXSkgPT5cbiAgICAgIHcucG9zdE1lc3NhZ2UobXNnLCB0YXJnZXRPcmlnaW4sIHRyYW5zZmVyYWJsZXMpLFxuICAgIGFkZEV2ZW50TGlzdGVuZXI6IGNvbnRleHQuYWRkRXZlbnRMaXN0ZW5lci5iaW5kKGNvbnRleHQpLFxuICAgIHJlbW92ZUV2ZW50TGlzdGVuZXI6IGNvbnRleHQucmVtb3ZlRXZlbnRMaXN0ZW5lci5iaW5kKGNvbnRleHQpLFxuICB9O1xufVxuXG5mdW5jdGlvbiB0b1dpcmVWYWx1ZSh2YWx1ZTogYW55KTogW1dpcmVWYWx1ZSwgVHJhbnNmZXJhYmxlW11dIHtcbiAgZm9yIChjb25zdCBbbmFtZSwgaGFuZGxlcl0gb2YgdHJhbnNmZXJIYW5kbGVycykge1xuICAgIGlmIChoYW5kbGVyLmNhbkhhbmRsZSh2YWx1ZSkpIHtcbiAgICAgIGNvbnN0IFtzZXJpYWxpemVkVmFsdWUsIHRyYW5zZmVyYWJsZXNdID0gaGFuZGxlci5zZXJpYWxpemUodmFsdWUpO1xuICAgICAgcmV0dXJuIFtcbiAgICAgICAge1xuICAgICAgICAgIHR5cGU6IFdpcmVWYWx1ZVR5cGUuSEFORExFUixcbiAgICAgICAgICBuYW1lLFxuICAgICAgICAgIHZhbHVlOiBzZXJpYWxpemVkVmFsdWUsXG4gICAgICAgIH0sXG4gICAgICAgIHRyYW5zZmVyYWJsZXMsXG4gICAgICBdO1xuICAgIH1cbiAgfVxuICByZXR1cm4gW1xuICAgIHtcbiAgICAgIHR5cGU6IFdpcmVWYWx1ZVR5cGUuUkFXLFxuICAgICAgdmFsdWUsXG4gICAgfSxcbiAgICB0cmFuc2ZlckNhY2hlLmdldCh2YWx1ZSkgfHwgW10sXG4gIF07XG59XG5cbmZ1bmN0aW9uIGZyb21XaXJlVmFsdWUodmFsdWU6IFdpcmVWYWx1ZSk6IGFueSB7XG4gIHN3aXRjaCAodmFsdWUudHlwZSkge1xuICAgIGNhc2UgV2lyZVZhbHVlVHlwZS5IQU5ETEVSOlxuICAgICAgcmV0dXJuIHRyYW5zZmVySGFuZGxlcnMuZ2V0KHZhbHVlLm5hbWUpIS5kZXNlcmlhbGl6ZSh2YWx1ZS52YWx1ZSk7XG4gICAgY2FzZSBXaXJlVmFsdWVUeXBlLlJBVzpcbiAgICAgIHJldHVybiB2YWx1ZS52YWx1ZTtcbiAgfVxufVxuXG5mdW5jdGlvbiByZXF1ZXN0UmVzcG9uc2VNZXNzYWdlKFxuICBlcDogRW5kcG9pbnQsXG4gIG1zZzogTWVzc2FnZSxcbiAgdHJhbnNmZXJzPzogVHJhbnNmZXJhYmxlW11cbik6IFByb21pc2U8V2lyZVZhbHVlPiB7XG4gIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSkgPT4ge1xuICAgIGNvbnN0IGlkID0gZ2VuZXJhdGVVVUlEKCk7XG4gICAgZXAuYWRkRXZlbnRMaXN0ZW5lcihcIm1lc3NhZ2VcIiwgZnVuY3Rpb24gbChldjogTWVzc2FnZUV2ZW50KSB7XG4gICAgICBpZiAoIWV2LmRhdGEgfHwgIWV2LmRhdGEuaWQgfHwgZXYuZGF0YS5pZCAhPT0gaWQpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgZXAucmVtb3ZlRXZlbnRMaXN0ZW5lcihcIm1lc3NhZ2VcIiwgbCBhcyBhbnkpO1xuICAgICAgcmVzb2x2ZShldi5kYXRhKTtcbiAgICB9IGFzIGFueSk7XG4gICAgaWYgKGVwLnN0YXJ0KSB7XG4gICAgICBlcC5zdGFydCgpO1xuICAgIH1cbiAgICBlcC5wb3N0TWVzc2FnZSh7IGlkLCAuLi5tc2cgfSwgdHJhbnNmZXJzKTtcbiAgfSk7XG59XG5cbmZ1bmN0aW9uIGdlbmVyYXRlVVVJRCgpOiBzdHJpbmcge1xuICByZXR1cm4gbmV3IEFycmF5KDQpXG4gICAgLmZpbGwoMClcbiAgICAubWFwKCgpID0+IE1hdGguZmxvb3IoTWF0aC5yYW5kb20oKSAqIE51bWJlci5NQVhfU0FGRV9JTlRFR0VSKS50b1N0cmluZygxNikpXG4gICAgLmpvaW4oXCItXCIpO1xufVxuIiwgIi8qKlxuICogQG1vZHVsZSBjb25zdGFudHNcbiAqIEBzdW1tYXJ5IFVzZWZ1bCBjb25zdGFudHNcbiAqIEBkZXNjcmlwdGlvblxuICogQ29sbGVjdGlvbiBvZiB1c2VmdWwgZGF0ZSBjb25zdGFudHMuXG4gKlxuICogVGhlIGNvbnN0YW50cyBjb3VsZCBiZSBpbXBvcnRlZCBmcm9tIGBkYXRlLWZucy9jb25zdGFudHNgOlxuICpcbiAqIGBgYHRzXG4gKiBpbXBvcnQgeyBtYXhUaW1lLCBtaW5UaW1lIH0gZnJvbSBcIi4vY29uc3RhbnRzL2RhdGUtZm5zL2NvbnN0YW50c1wiO1xuICpcbiAqIGZ1bmN0aW9uIGlzQWxsb3dlZFRpbWUodGltZSkge1xuICogICByZXR1cm4gdGltZSA8PSBtYXhUaW1lICYmIHRpbWUgPj0gbWluVGltZTtcbiAqIH1cbiAqIGBgYFxuICovXG5cbi8qKlxuICogQGNvbnN0YW50XG4gKiBAbmFtZSBkYXlzSW5XZWVrXG4gKiBAc3VtbWFyeSBEYXlzIGluIDEgd2Vlay5cbiAqL1xuZXhwb3J0IGNvbnN0IGRheXNJbldlZWsgPSA3O1xuXG4vKipcbiAqIEBjb25zdGFudFxuICogQG5hbWUgZGF5c0luWWVhclxuICogQHN1bW1hcnkgRGF5cyBpbiAxIHllYXIuXG4gKlxuICogQGRlc2NyaXB0aW9uXG4gKiBIb3cgbWFueSBkYXlzIGluIGEgeWVhci5cbiAqXG4gKiBPbmUgeWVhcnMgZXF1YWxzIDM2NS4yNDI1IGRheXMgYWNjb3JkaW5nIHRvIHRoZSBmb3JtdWxhOlxuICpcbiAqID4gTGVhcCB5ZWFyIG9jY3VycyBldmVyeSA0IHllYXJzLCBleGNlcHQgZm9yIHllYXJzIHRoYXQgYXJlIGRpdmlzaWJsZSBieSAxMDAgYW5kIG5vdCBkaXZpc2libGUgYnkgNDAwLlxuICogPiAxIG1lYW4geWVhciA9ICgzNjUrMS80LTEvMTAwKzEvNDAwKSBkYXlzID0gMzY1LjI0MjUgZGF5c1xuICovXG5leHBvcnQgY29uc3QgZGF5c0luWWVhciA9IDM2NS4yNDI1O1xuXG4vKipcbiAqIEBjb25zdGFudFxuICogQG5hbWUgbWF4VGltZVxuICogQHN1bW1hcnkgTWF4aW11bSBhbGxvd2VkIHRpbWUuXG4gKlxuICogQGV4YW1wbGVcbiAqIGltcG9ydCB7IG1heFRpbWUgfSBmcm9tIFwiLi9jb25zdGFudHMvZGF0ZS1mbnMvY29uc3RhbnRzXCI7XG4gKlxuICogY29uc3QgaXNWYWxpZCA9IDg2NDAwMDAwMDAwMDAwMDEgPD0gbWF4VGltZTtcbiAqIC8vPT4gZmFsc2VcbiAqXG4gKiBuZXcgRGF0ZSg4NjQwMDAwMDAwMDAwMDAxKTtcbiAqIC8vPT4gSW52YWxpZCBEYXRlXG4gKi9cbmV4cG9ydCBjb25zdCBtYXhUaW1lID0gTWF0aC5wb3coMTAsIDgpICogMjQgKiA2MCAqIDYwICogMTAwMDtcblxuLyoqXG4gKiBAY29uc3RhbnRcbiAqIEBuYW1lIG1pblRpbWVcbiAqIEBzdW1tYXJ5IE1pbmltdW0gYWxsb3dlZCB0aW1lLlxuICpcbiAqIEBleGFtcGxlXG4gKiBpbXBvcnQgeyBtaW5UaW1lIH0gZnJvbSBcIi4vY29uc3RhbnRzL2RhdGUtZm5zL2NvbnN0YW50c1wiO1xuICpcbiAqIGNvbnN0IGlzVmFsaWQgPSAtODY0MDAwMDAwMDAwMDAwMSA+PSBtaW5UaW1lO1xuICogLy89PiBmYWxzZVxuICpcbiAqIG5ldyBEYXRlKC04NjQwMDAwMDAwMDAwMDAxKVxuICogLy89PiBJbnZhbGlkIERhdGVcbiAqL1xuZXhwb3J0IGNvbnN0IG1pblRpbWUgPSAtbWF4VGltZTtcblxuLyoqXG4gKiBAY29uc3RhbnRcbiAqIEBuYW1lIG1pbGxpc2Vjb25kc0luV2Vla1xuICogQHN1bW1hcnkgTWlsbGlzZWNvbmRzIGluIDEgd2Vlay5cbiAqL1xuZXhwb3J0IGNvbnN0IG1pbGxpc2Vjb25kc0luV2VlayA9IDYwNDgwMDAwMDtcblxuLyoqXG4gKiBAY29uc3RhbnRcbiAqIEBuYW1lIG1pbGxpc2Vjb25kc0luRGF5XG4gKiBAc3VtbWFyeSBNaWxsaXNlY29uZHMgaW4gMSBkYXkuXG4gKi9cbmV4cG9ydCBjb25zdCBtaWxsaXNlY29uZHNJbkRheSA9IDg2NDAwMDAwO1xuXG4vKipcbiAqIEBjb25zdGFudFxuICogQG5hbWUgbWlsbGlzZWNvbmRzSW5NaW51dGVcbiAqIEBzdW1tYXJ5IE1pbGxpc2Vjb25kcyBpbiAxIG1pbnV0ZVxuICovXG5leHBvcnQgY29uc3QgbWlsbGlzZWNvbmRzSW5NaW51dGUgPSA2MDAwMDtcblxuLyoqXG4gKiBAY29uc3RhbnRcbiAqIEBuYW1lIG1pbGxpc2Vjb25kc0luSG91clxuICogQHN1bW1hcnkgTWlsbGlzZWNvbmRzIGluIDEgaG91clxuICovXG5leHBvcnQgY29uc3QgbWlsbGlzZWNvbmRzSW5Ib3VyID0gMzYwMDAwMDtcblxuLyoqXG4gKiBAY29uc3RhbnRcbiAqIEBuYW1lIG1pbGxpc2Vjb25kc0luU2Vjb25kXG4gKiBAc3VtbWFyeSBNaWxsaXNlY29uZHMgaW4gMSBzZWNvbmRcbiAqL1xuZXhwb3J0IGNvbnN0IG1pbGxpc2Vjb25kc0luU2Vjb25kID0gMTAwMDtcblxuLyoqXG4gKiBAY29uc3RhbnRcbiAqIEBuYW1lIG1pbnV0ZXNJblllYXJcbiAqIEBzdW1tYXJ5IE1pbnV0ZXMgaW4gMSB5ZWFyLlxuICovXG5leHBvcnQgY29uc3QgbWludXRlc0luWWVhciA9IDUyNTYwMDtcblxuLyoqXG4gKiBAY29uc3RhbnRcbiAqIEBuYW1lIG1pbnV0ZXNJbk1vbnRoXG4gKiBAc3VtbWFyeSBNaW51dGVzIGluIDEgbW9udGguXG4gKi9cbmV4cG9ydCBjb25zdCBtaW51dGVzSW5Nb250aCA9IDQzMjAwO1xuXG4vKipcbiAqIEBjb25zdGFudFxuICogQG5hbWUgbWludXRlc0luRGF5XG4gKiBAc3VtbWFyeSBNaW51dGVzIGluIDEgZGF5LlxuICovXG5leHBvcnQgY29uc3QgbWludXRlc0luRGF5ID0gMTQ0MDtcblxuLyoqXG4gKiBAY29uc3RhbnRcbiAqIEBuYW1lIG1pbnV0ZXNJbkhvdXJcbiAqIEBzdW1tYXJ5IE1pbnV0ZXMgaW4gMSBob3VyLlxuICovXG5leHBvcnQgY29uc3QgbWludXRlc0luSG91ciA9IDYwO1xuXG4vKipcbiAqIEBjb25zdGFudFxuICogQG5hbWUgbW9udGhzSW5RdWFydGVyXG4gKiBAc3VtbWFyeSBNb250aHMgaW4gMSBxdWFydGVyLlxuICovXG5leHBvcnQgY29uc3QgbW9udGhzSW5RdWFydGVyID0gMztcblxuLyoqXG4gKiBAY29uc3RhbnRcbiAqIEBuYW1lIG1vbnRoc0luWWVhclxuICogQHN1bW1hcnkgTW9udGhzIGluIDEgeWVhci5cbiAqL1xuZXhwb3J0IGNvbnN0IG1vbnRoc0luWWVhciA9IDEyO1xuXG4vKipcbiAqIEBjb25zdGFudFxuICogQG5hbWUgcXVhcnRlcnNJblllYXJcbiAqIEBzdW1tYXJ5IFF1YXJ0ZXJzIGluIDEgeWVhclxuICovXG5leHBvcnQgY29uc3QgcXVhcnRlcnNJblllYXIgPSA0O1xuXG4vKipcbiAqIEBjb25zdGFudFxuICogQG5hbWUgc2Vjb25kc0luSG91clxuICogQHN1bW1hcnkgU2Vjb25kcyBpbiAxIGhvdXIuXG4gKi9cbmV4cG9ydCBjb25zdCBzZWNvbmRzSW5Ib3VyID0gMzYwMDtcblxuLyoqXG4gKiBAY29uc3RhbnRcbiAqIEBuYW1lIHNlY29uZHNJbk1pbnV0ZVxuICogQHN1bW1hcnkgU2Vjb25kcyBpbiAxIG1pbnV0ZS5cbiAqL1xuZXhwb3J0IGNvbnN0IHNlY29uZHNJbk1pbnV0ZSA9IDYwO1xuXG4vKipcbiAqIEBjb25zdGFudFxuICogQG5hbWUgc2Vjb25kc0luRGF5XG4gKiBAc3VtbWFyeSBTZWNvbmRzIGluIDEgZGF5LlxuICovXG5leHBvcnQgY29uc3Qgc2Vjb25kc0luRGF5ID0gc2Vjb25kc0luSG91ciAqIDI0O1xuXG4vKipcbiAqIEBjb25zdGFudFxuICogQG5hbWUgc2Vjb25kc0luV2Vla1xuICogQHN1bW1hcnkgU2Vjb25kcyBpbiAxIHdlZWsuXG4gKi9cbmV4cG9ydCBjb25zdCBzZWNvbmRzSW5XZWVrID0gc2Vjb25kc0luRGF5ICogNztcblxuLyoqXG4gKiBAY29uc3RhbnRcbiAqIEBuYW1lIHNlY29uZHNJblllYXJcbiAqIEBzdW1tYXJ5IFNlY29uZHMgaW4gMSB5ZWFyLlxuICovXG5leHBvcnQgY29uc3Qgc2Vjb25kc0luWWVhciA9IHNlY29uZHNJbkRheSAqIGRheXNJblllYXI7XG5cbi8qKlxuICogQGNvbnN0YW50XG4gKiBAbmFtZSBzZWNvbmRzSW5Nb250aFxuICogQHN1bW1hcnkgU2Vjb25kcyBpbiAxIG1vbnRoXG4gKi9cbmV4cG9ydCBjb25zdCBzZWNvbmRzSW5Nb250aCA9IHNlY29uZHNJblllYXIgLyAxMjtcblxuLyoqXG4gKiBAY29uc3RhbnRcbiAqIEBuYW1lIHNlY29uZHNJblF1YXJ0ZXJcbiAqIEBzdW1tYXJ5IFNlY29uZHMgaW4gMSBxdWFydGVyLlxuICovXG5leHBvcnQgY29uc3Qgc2Vjb25kc0luUXVhcnRlciA9IHNlY29uZHNJbk1vbnRoICogMztcblxuLyoqXG4gKiBAY29uc3RhbnRcbiAqIEBuYW1lIGNvbnN0cnVjdEZyb21TeW1ib2xcbiAqIEBzdW1tYXJ5IFN5bWJvbCBlbmFibGluZyBEYXRlIGV4dGVuc2lvbnMgdG8gaW5oZXJpdCBwcm9wZXJ0aWVzIGZyb20gdGhlIHJlZmVyZW5jZSBkYXRlLlxuICpcbiAqIFRoZSBzeW1ib2wgaXMgdXNlZCB0byBlbmFibGUgdGhlIGBjb25zdHJ1Y3RGcm9tYCBmdW5jdGlvbiB0byBjb25zdHJ1Y3QgYSBkYXRlXG4gKiB1c2luZyBhIHJlZmVyZW5jZSBkYXRlIGFuZCBhIHZhbHVlLiBJdCBhbGxvd3MgdG8gdHJhbnNmZXIgZXh0cmEgcHJvcGVydGllc1xuICogZnJvbSB0aGUgcmVmZXJlbmNlIGRhdGUgdG8gdGhlIG5ldyBkYXRlLiBJdCdzIHVzZWZ1bCBmb3IgZXh0ZW5zaW9ucyBsaWtlXG4gKiBbYFRaRGF0ZWBdKGh0dHBzOi8vZ2l0aHViLmNvbS9kYXRlLWZucy90eikgdGhhdCBhY2NlcHQgYSB0aW1lIHpvbmUgYXNcbiAqIGEgY29uc3RydWN0b3IgYXJndW1lbnQuXG4gKi9cbmV4cG9ydCBjb25zdCBjb25zdHJ1Y3RGcm9tU3ltYm9sID0gU3ltYm9sLmZvcihcImNvbnN0cnVjdERhdGVGcm9tXCIpO1xuIiwgImltcG9ydCB7IGNvbnN0cnVjdEZyb21TeW1ib2wgfSBmcm9tIFwiLi9jb25zdGFudHMuanNcIjtcblxuLyoqXG4gKiBAbmFtZSBjb25zdHJ1Y3RGcm9tXG4gKiBAY2F0ZWdvcnkgR2VuZXJpYyBIZWxwZXJzXG4gKiBAc3VtbWFyeSBDb25zdHJ1Y3RzIGEgZGF0ZSB1c2luZyB0aGUgcmVmZXJlbmNlIGRhdGUgYW5kIHRoZSB2YWx1ZVxuICpcbiAqIEBkZXNjcmlwdGlvblxuICogVGhlIGZ1bmN0aW9uIGNvbnN0cnVjdHMgYSBuZXcgZGF0ZSB1c2luZyB0aGUgY29uc3RydWN0b3IgZnJvbSB0aGUgcmVmZXJlbmNlXG4gKiBkYXRlIGFuZCB0aGUgZ2l2ZW4gdmFsdWUuIEl0IGhlbHBzIHRvIGJ1aWxkIGdlbmVyaWMgZnVuY3Rpb25zIHRoYXQgYWNjZXB0XG4gKiBkYXRlIGV4dGVuc2lvbnMuXG4gKlxuICogSXQgZGVmYXVsdHMgdG8gYERhdGVgIGlmIHRoZSBwYXNzZWQgcmVmZXJlbmNlIGRhdGUgaXMgYSBudW1iZXIgb3IgYSBzdHJpbmcuXG4gKlxuICogU3RhcnRpbmcgZnJvbSB2My43LjAsIGl0IGFsbG93cyB0byBjb25zdHJ1Y3QgYSBkYXRlIHVzaW5nIGBbU3ltYm9sLmZvcihcImNvbnN0cnVjdERhdGVGcm9tXCIpXWBcbiAqIGVuYWJsaW5nIHRvIHRyYW5zZmVyIGV4dHJhIHByb3BlcnRpZXMgZnJvbSB0aGUgcmVmZXJlbmNlIGRhdGUgdG8gdGhlIG5ldyBkYXRlLlxuICogSXQncyB1c2VmdWwgZm9yIGV4dGVuc2lvbnMgbGlrZSBbYFRaRGF0ZWBdKGh0dHBzOi8vZ2l0aHViLmNvbS9kYXRlLWZucy90eilcbiAqIHRoYXQgYWNjZXB0IGEgdGltZSB6b25lIGFzIGEgY29uc3RydWN0b3IgYXJndW1lbnQuXG4gKlxuICogQHR5cGVQYXJhbSBEYXRlVHlwZSAtIFRoZSBgRGF0ZWAgdHlwZSwgdGhlIGZ1bmN0aW9uIG9wZXJhdGVzIG9uLiBHZXRzIGluZmVycmVkIGZyb20gcGFzc2VkIGFyZ3VtZW50cy4gQWxsb3dzIHRvIHVzZSBleHRlbnNpb25zIGxpa2UgW2BVVENEYXRlYF0oaHR0cHM6Ly9naXRodWIuY29tL2RhdGUtZm5zL3V0YykuXG4gKlxuICogQHBhcmFtIGRhdGUgLSBUaGUgcmVmZXJlbmNlIGRhdGUgdG8gdGFrZSBjb25zdHJ1Y3RvciBmcm9tXG4gKiBAcGFyYW0gdmFsdWUgLSBUaGUgdmFsdWUgdG8gY3JlYXRlIHRoZSBkYXRlXG4gKlxuICogQHJldHVybnMgRGF0ZSBpbml0aWFsaXplZCB1c2luZyB0aGUgZ2l2ZW4gZGF0ZSBhbmQgdmFsdWVcbiAqXG4gKiBAZXhhbXBsZVxuICogaW1wb3J0IHsgY29uc3RydWN0RnJvbSB9IGZyb20gXCIuL2NvbnN0cnVjdEZyb20vZGF0ZS1mbnNcIjtcbiAqXG4gKiAvLyBBIGZ1bmN0aW9uIHRoYXQgY2xvbmVzIGEgZGF0ZSBwcmVzZXJ2aW5nIHRoZSBvcmlnaW5hbCB0eXBlXG4gKiBmdW5jdGlvbiBjbG9uZURhdGU8RGF0ZVR5cGUgZXh0ZW5kcyBEYXRlPihkYXRlOiBEYXRlVHlwZSk6IERhdGVUeXBlIHtcbiAqICAgcmV0dXJuIGNvbnN0cnVjdEZyb20oXG4gKiAgICAgZGF0ZSwgLy8gVXNlIGNvbnN0cnVjdG9yIGZyb20gdGhlIGdpdmVuIGRhdGVcbiAqICAgICBkYXRlLmdldFRpbWUoKSAvLyBVc2UgdGhlIGRhdGUgdmFsdWUgdG8gY3JlYXRlIGEgbmV3IGRhdGVcbiAqICAgKTtcbiAqIH1cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGNvbnN0cnVjdEZyb20oZGF0ZSwgdmFsdWUpIHtcbiAgaWYgKHR5cGVvZiBkYXRlID09PSBcImZ1bmN0aW9uXCIpIHJldHVybiBkYXRlKHZhbHVlKTtcblxuICBpZiAoZGF0ZSAmJiB0eXBlb2YgZGF0ZSA9PT0gXCJvYmplY3RcIiAmJiBjb25zdHJ1Y3RGcm9tU3ltYm9sIGluIGRhdGUpXG4gICAgcmV0dXJuIGRhdGVbY29uc3RydWN0RnJvbVN5bWJvbF0odmFsdWUpO1xuXG4gIGlmIChkYXRlIGluc3RhbmNlb2YgRGF0ZSkgcmV0dXJuIG5ldyBkYXRlLmNvbnN0cnVjdG9yKHZhbHVlKTtcblxuICByZXR1cm4gbmV3IERhdGUodmFsdWUpO1xufVxuXG4vLyBGYWxsYmFjayBmb3IgbW9kdWxhcml6ZWQgaW1wb3J0czpcbmV4cG9ydCBkZWZhdWx0IGNvbnN0cnVjdEZyb207XG4iLCAiaW1wb3J0IHsgY29uc3RydWN0RnJvbSB9IGZyb20gXCIuL2NvbnN0cnVjdEZyb20uanNcIjtcblxuLyoqXG4gKiBAbmFtZSB0b0RhdGVcbiAqIEBjYXRlZ29yeSBDb21tb24gSGVscGVyc1xuICogQHN1bW1hcnkgQ29udmVydCB0aGUgZ2l2ZW4gYXJndW1lbnQgdG8gYW4gaW5zdGFuY2Ugb2YgRGF0ZS5cbiAqXG4gKiBAZGVzY3JpcHRpb25cbiAqIENvbnZlcnQgdGhlIGdpdmVuIGFyZ3VtZW50IHRvIGFuIGluc3RhbmNlIG9mIERhdGUuXG4gKlxuICogSWYgdGhlIGFyZ3VtZW50IGlzIGFuIGluc3RhbmNlIG9mIERhdGUsIHRoZSBmdW5jdGlvbiByZXR1cm5zIGl0cyBjbG9uZS5cbiAqXG4gKiBJZiB0aGUgYXJndW1lbnQgaXMgYSBudW1iZXIsIGl0IGlzIHRyZWF0ZWQgYXMgYSB0aW1lc3RhbXAuXG4gKlxuICogSWYgdGhlIGFyZ3VtZW50IGlzIG5vbmUgb2YgdGhlIGFib3ZlLCB0aGUgZnVuY3Rpb24gcmV0dXJucyBJbnZhbGlkIERhdGUuXG4gKlxuICogU3RhcnRpbmcgZnJvbSB2My43LjAsIGl0IGNsb25lcyBhIGRhdGUgdXNpbmcgYFtTeW1ib2wuZm9yKFwiY29uc3RydWN0RGF0ZUZyb21cIildYFxuICogZW5hYmxpbmcgdG8gdHJhbnNmZXIgZXh0cmEgcHJvcGVydGllcyBmcm9tIHRoZSByZWZlcmVuY2UgZGF0ZSB0byB0aGUgbmV3IGRhdGUuXG4gKiBJdCdzIHVzZWZ1bCBmb3IgZXh0ZW5zaW9ucyBsaWtlIFtgVFpEYXRlYF0oaHR0cHM6Ly9naXRodWIuY29tL2RhdGUtZm5zL3R6KVxuICogdGhhdCBhY2NlcHQgYSB0aW1lIHpvbmUgYXMgYSBjb25zdHJ1Y3RvciBhcmd1bWVudC5cbiAqXG4gKiAqKk5vdGUqKjogKmFsbCogRGF0ZSBhcmd1bWVudHMgcGFzc2VkIHRvIGFueSAqZGF0ZS1mbnMqIGZ1bmN0aW9uIGlzIHByb2Nlc3NlZCBieSBgdG9EYXRlYC5cbiAqXG4gKiBAdHlwZVBhcmFtIERhdGVUeXBlIC0gVGhlIGBEYXRlYCB0eXBlLCB0aGUgZnVuY3Rpb24gb3BlcmF0ZXMgb24uIEdldHMgaW5mZXJyZWQgZnJvbSBwYXNzZWQgYXJndW1lbnRzLiBBbGxvd3MgdG8gdXNlIGV4dGVuc2lvbnMgbGlrZSBbYFVUQ0RhdGVgXShodHRwczovL2dpdGh1Yi5jb20vZGF0ZS1mbnMvdXRjKS5cbiAqIEB0eXBlUGFyYW0gUmVzdWx0RGF0ZSAtIFRoZSByZXN1bHQgYERhdGVgIHR5cGUsIGl0IGlzIHRoZSB0eXBlIHJldHVybmVkIGZyb20gdGhlIGNvbnRleHQgZnVuY3Rpb24gaWYgaXQgaXMgcGFzc2VkLCBvciBpbmZlcnJlZCBmcm9tIHRoZSBhcmd1bWVudHMuXG4gKlxuICogQHBhcmFtIGFyZ3VtZW50IC0gVGhlIHZhbHVlIHRvIGNvbnZlcnRcbiAqXG4gKiBAcmV0dXJucyBUaGUgcGFyc2VkIGRhdGUgaW4gdGhlIGxvY2FsIHRpbWUgem9uZVxuICpcbiAqIEBleGFtcGxlXG4gKiAvLyBDbG9uZSB0aGUgZGF0ZTpcbiAqIGNvbnN0IHJlc3VsdCA9IHRvRGF0ZShuZXcgRGF0ZSgyMDE0LCAxLCAxMSwgMTEsIDMwLCAzMCkpXG4gKiAvLz0+IFR1ZSBGZWIgMTEgMjAxNCAxMTozMDozMFxuICpcbiAqIEBleGFtcGxlXG4gKiAvLyBDb252ZXJ0IHRoZSB0aW1lc3RhbXAgdG8gZGF0ZTpcbiAqIGNvbnN0IHJlc3VsdCA9IHRvRGF0ZSgxMzkyMDk4NDMwMDAwKVxuICogLy89PiBUdWUgRmViIDExIDIwMTQgMTE6MzA6MzBcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHRvRGF0ZShhcmd1bWVudCwgY29udGV4dCkge1xuICAvLyBbVE9ET10gR2V0IHJpZCBvZiBgdG9EYXRlYCBvciBgY29uc3RydWN0RnJvbWA/XG4gIHJldHVybiBjb25zdHJ1Y3RGcm9tKGNvbnRleHQgfHwgYXJndW1lbnQsIGFyZ3VtZW50KTtcbn1cblxuLy8gRmFsbGJhY2sgZm9yIG1vZHVsYXJpemVkIGltcG9ydHM6XG5leHBvcnQgZGVmYXVsdCB0b0RhdGU7XG4iLCAiaW1wb3J0IHsgY29uc3RydWN0RnJvbSB9IGZyb20gXCIuL2NvbnN0cnVjdEZyb20uanNcIjtcbmltcG9ydCB7IHRvRGF0ZSB9IGZyb20gXCIuL3RvRGF0ZS5qc1wiO1xuXG4vKipcbiAqIFRoZSB7QGxpbmsgYWRkRGF5c30gZnVuY3Rpb24gb3B0aW9ucy5cbiAqL1xuXG4vKipcbiAqIEBuYW1lIGFkZERheXNcbiAqIEBjYXRlZ29yeSBEYXkgSGVscGVyc1xuICogQHN1bW1hcnkgQWRkIHRoZSBzcGVjaWZpZWQgbnVtYmVyIG9mIGRheXMgdG8gdGhlIGdpdmVuIGRhdGUuXG4gKlxuICogQGRlc2NyaXB0aW9uXG4gKiBBZGQgdGhlIHNwZWNpZmllZCBudW1iZXIgb2YgZGF5cyB0byB0aGUgZ2l2ZW4gZGF0ZS5cbiAqXG4gKiBAdHlwZVBhcmFtIERhdGVUeXBlIC0gVGhlIGBEYXRlYCB0eXBlLCB0aGUgZnVuY3Rpb24gb3BlcmF0ZXMgb24uIEdldHMgaW5mZXJyZWQgZnJvbSBwYXNzZWQgYXJndW1lbnRzLiBBbGxvd3MgdG8gdXNlIGV4dGVuc2lvbnMgbGlrZSBbYFVUQ0RhdGVgXShodHRwczovL2dpdGh1Yi5jb20vZGF0ZS1mbnMvdXRjKS5cbiAqIEB0eXBlUGFyYW0gUmVzdWx0RGF0ZSAtIFRoZSByZXN1bHQgYERhdGVgIHR5cGUsIGl0IGlzIHRoZSB0eXBlIHJldHVybmVkIGZyb20gdGhlIGNvbnRleHQgZnVuY3Rpb24gaWYgaXQgaXMgcGFzc2VkLCBvciBpbmZlcnJlZCBmcm9tIHRoZSBhcmd1bWVudHMuXG4gKlxuICogQHBhcmFtIGRhdGUgLSBUaGUgZGF0ZSB0byBiZSBjaGFuZ2VkXG4gKiBAcGFyYW0gYW1vdW50IC0gVGhlIGFtb3VudCBvZiBkYXlzIHRvIGJlIGFkZGVkLlxuICogQHBhcmFtIG9wdGlvbnMgLSBBbiBvYmplY3Qgd2l0aCBvcHRpb25zXG4gKlxuICogQHJldHVybnMgVGhlIG5ldyBkYXRlIHdpdGggdGhlIGRheXMgYWRkZWRcbiAqXG4gKiBAZXhhbXBsZVxuICogLy8gQWRkIDEwIGRheXMgdG8gMSBTZXB0ZW1iZXIgMjAxNDpcbiAqIGNvbnN0IHJlc3VsdCA9IGFkZERheXMobmV3IERhdGUoMjAxNCwgOCwgMSksIDEwKVxuICogLy89PiBUaHUgU2VwIDExIDIwMTQgMDA6MDA6MDBcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGFkZERheXMoZGF0ZSwgYW1vdW50LCBvcHRpb25zKSB7XG4gIGNvbnN0IF9kYXRlID0gdG9EYXRlKGRhdGUsIG9wdGlvbnM/LmluKTtcbiAgaWYgKGlzTmFOKGFtb3VudCkpIHJldHVybiBjb25zdHJ1Y3RGcm9tKG9wdGlvbnM/LmluIHx8IGRhdGUsIE5hTik7XG5cbiAgLy8gSWYgMCBkYXlzLCBuby1vcCB0byBhdm9pZCBjaGFuZ2luZyB0aW1lcyBpbiB0aGUgaG91ciBiZWZvcmUgZW5kIG9mIERTVFxuICBpZiAoIWFtb3VudCkgcmV0dXJuIF9kYXRlO1xuXG4gIF9kYXRlLnNldERhdGUoX2RhdGUuZ2V0RGF0ZSgpICsgYW1vdW50KTtcbiAgcmV0dXJuIF9kYXRlO1xufVxuXG4vLyBGYWxsYmFjayBmb3IgbW9kdWxhcml6ZWQgaW1wb3J0czpcbmV4cG9ydCBkZWZhdWx0IGFkZERheXM7XG4iLCAiaW1wb3J0IHsgdG9EYXRlIH0gZnJvbSBcIi4vdG9EYXRlLmpzXCI7XG5cbi8qKlxuICogQG5hbWUgaXNBZnRlclxuICogQGNhdGVnb3J5IENvbW1vbiBIZWxwZXJzXG4gKiBAc3VtbWFyeSBJcyB0aGUgZmlyc3QgZGF0ZSBhZnRlciB0aGUgc2Vjb25kIG9uZT9cbiAqXG4gKiBAZGVzY3JpcHRpb25cbiAqIElzIHRoZSBmaXJzdCBkYXRlIGFmdGVyIHRoZSBzZWNvbmQgb25lP1xuICpcbiAqIEBwYXJhbSBkYXRlIC0gVGhlIGRhdGUgdGhhdCBzaG91bGQgYmUgYWZ0ZXIgdGhlIG90aGVyIG9uZSB0byByZXR1cm4gdHJ1ZVxuICogQHBhcmFtIGRhdGVUb0NvbXBhcmUgLSBUaGUgZGF0ZSB0byBjb21wYXJlIHdpdGhcbiAqXG4gKiBAcmV0dXJucyBUaGUgZmlyc3QgZGF0ZSBpcyBhZnRlciB0aGUgc2Vjb25kIGRhdGVcbiAqXG4gKiBAZXhhbXBsZVxuICogLy8gSXMgMTAgSnVseSAxOTg5IGFmdGVyIDExIEZlYnJ1YXJ5IDE5ODc/XG4gKiBjb25zdCByZXN1bHQgPSBpc0FmdGVyKG5ldyBEYXRlKDE5ODksIDYsIDEwKSwgbmV3IERhdGUoMTk4NywgMSwgMTEpKVxuICogLy89PiB0cnVlXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBpc0FmdGVyKGRhdGUsIGRhdGVUb0NvbXBhcmUpIHtcbiAgcmV0dXJuICt0b0RhdGUoZGF0ZSkgPiArdG9EYXRlKGRhdGVUb0NvbXBhcmUpO1xufVxuXG4vLyBGYWxsYmFjayBmb3IgbW9kdWxhcml6ZWQgaW1wb3J0czpcbmV4cG9ydCBkZWZhdWx0IGlzQWZ0ZXI7XG4iLCAiLy8gTWFraW5nIHRoZSBtb2R1bGUgdmVyc2lvbiBjb25zdW1hYmxlIHZpYSByZXF1aXJlIC0gdG8gcHJvaGliaXRcbi8vIG11bHRpcGxlIG9jY3VycmFuY2llcyBvZiB0aGUgc2FtZSBtb2R1bGUgaW4gdGhlIHNhbWUgYXBwXG4vLyAoZHVhbCBwYWNrYWdlIGhhemFyZCwgaHR0cHM6Ly9ub2RlanMub3JnL2FwaS9wYWNrYWdlcy5odG1sI2R1YWwtcGFja2FnZS1oYXphcmQpXG5pbXBvcnQgX0RleGllIGZyb20gXCIuL2Rpc3QvZGV4aWUuanNcIjtcbmNvbnN0IERleGllU3ltYm9sID0gU3ltYm9sLmZvcihcIkRleGllXCIpO1xuY29uc3QgRGV4aWUgPSBnbG9iYWxUaGlzW0RleGllU3ltYm9sXSB8fCAoZ2xvYmFsVGhpc1tEZXhpZVN5bWJvbF0gPSBfRGV4aWUpO1xuaWYgKF9EZXhpZS5zZW1WZXIgIT09IERleGllLnNlbVZlcikge1xuICAgIHRocm93IG5ldyBFcnJvcihgVHdvIGRpZmZlcmVudCB2ZXJzaW9ucyBvZiBEZXhpZSBsb2FkZWQgaW4gdGhlIHNhbWUgYXBwOiAke19EZXhpZS5zZW1WZXJ9IGFuZCAke0RleGllLnNlbVZlcn1gKTtcbn1cbmNvbnN0IHsgbGl2ZVF1ZXJ5LCBtZXJnZVJhbmdlcywgcmFuZ2VzT3ZlcmxhcCwgUmFuZ2VTZXQsIGNtcCwgRW50aXR5LFxuICAgIFByb3BNb2RTeW1ib2wsIFByb3BNb2RpZmljYXRpb24sIHJlcGxhY2VQcmVmaXgsIGFkZCwgcmVtb3ZlIH0gPSBEZXhpZTtcbmV4cG9ydCB7IGxpdmVRdWVyeSwgbWVyZ2VSYW5nZXMsIHJhbmdlc092ZXJsYXAsIFJhbmdlU2V0LCBjbXAsIERleGllLCBFbnRpdHksXG4gICAgUHJvcE1vZFN5bWJvbCwgUHJvcE1vZGlmaWNhdGlvbiwgcmVwbGFjZVByZWZpeCwgYWRkLCByZW1vdmUgfTtcbmV4cG9ydCBkZWZhdWx0IERleGllO1xuIiwgImltcG9ydCBEZXhpZSwgeyB0eXBlIFRhYmxlIH0gZnJvbSAnZGV4aWUnXG5cbi8qKlxuICogSW5kZXhlZERCLWJhc2VkIGNhY2hlIGltcGxlbWVudGF0aW9uLlxuICovXG5leHBvcnQgY2xhc3MgRGF0YWJhc2VTdG9yYWdlIGV4dGVuZHMgRGV4aWUge1xuICBrZXlWYWx1ZSE6IFRhYmxlPENhY2hlRW50cnksIHN0cmluZz5cbiAgcGFja2FnZUluZGV4ITogVGFibGU8UGFja2FnZUluZGV4SXRlbSwgc3RyaW5nPlxuICBzeW1ib2xJbmRleCE6IFRhYmxlPFN5bWJvbEluZGV4SXRlbSwgc3RyaW5nPlxuXG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIHN1cGVyKCdDYWNoZVN0b3JlJylcblxuICAgIHRoaXMudmVyc2lvbigyKS5zdG9yZXMoe1xuICAgICAga2V5VmFsdWU6ICdrZXknLFxuICAgICAgcGFja2FnZUluZGV4OiAnaW1wb3J0UGF0aCwgcHJlZml4LCBuYW1lJyxcbiAgICAgIHN5bWJvbEluZGV4OiBgXG4gICAgICAgIGtleSxcbiAgICAgICAgcGFja2FnZVBhdGgsXG4gICAgICAgIFtwYWNrYWdlTmFtZStwcmVmaXhdLFxuICAgICAgICBbcGFja2FnZU5hbWUrbGFiZWxdLFxuICAgICAgICBbcGFja2FnZVBhdGgrcHJlZml4XWAsXG4gICAgfSlcbiAgfVxufVxuXG5leHBvcnQgaW50ZXJmYWNlIENhY2hlRW50cnk8VCA9IGFueT4ge1xuICBrZXk6IHN0cmluZ1xuICB2YWx1ZTogVFxuICBleHBpcmVBdD86IERhdGVcbn1cblxuLyoqXG4gKiBBYnN0cmFjdCBjYWNoZSBpbXBsZW1lbnRhdGlvblxuICovXG5leHBvcnQgaW50ZXJmYWNlIENhY2hlU3RvcmFnZSB7XG4gIC8qKlxuICAgKiBSZXR1cm4gYW4gaXRlbSBieSBrZXkuXG4gICAqXG4gICAqIFJldHVybnMgbm90aGluZyBpZiBUVEwgaXMgZXhwaXJlZC5cbiAgICovXG4gIGdldEl0ZW06IDxUPihrZXk6IHN0cmluZykgPT4gUHJvbWlzZTxUIHwgdW5kZWZpbmVkPlxuXG4gIC8qKlxuICAgKiBSZW1vdmUgYW4gaXRlbSBieSBrZXkuXG4gICAqXG4gICAqIFJldHVybnMgd2hldGhlciBkZWxldGlvbiBhZmZlY3RlZCBhbnkgcmVjb3JkLlxuICAgKi9cbiAgZGVsZXRlSXRlbTogKGtleTogc3RyaW5nKSA9PiBQcm9taXNlPGJvb2xlYW4+XG5cbiAgLyoqXG4gICAqIFN0b3JlIGFuIGl0ZW1cbiAgICogQHBhcmFtIGtleSBJdGVtIGtleVxuICAgKiBAcGFyYW0gdmFsdWUgVmFsdWVcbiAgICogQHBhcmFtIGV4cGlyZUF0IEtleSBleHBpcmF0aW9uIGRhdGUuXG4gICAqL1xuICBzZXRJdGVtOiA8VD4oa2V5OiBzdHJpbmcsIHZhbHVlOiBULCBleHBpcmVBdD86IERhdGUpID0+IFByb21pc2U8dm9pZD5cblxuICAvKipcbiAgICogVHJ1bmNhdGUgc3RvcmFnZS5cbiAgICovXG4gIGZsdXNoOiAoKSA9PiBQcm9taXNlPHZvaWQ+XG59XG5cbmltcG9ydCB0eXBlICogYXMgbW9uYWNvIGZyb20gJ21vbmFjby1lZGl0b3InXG5cbmV4cG9ydCB0eXBlIENvbXBsZXRpb25JdGVtID0gbW9uYWNvLmxhbmd1YWdlcy5Db21wbGV0aW9uSXRlbVxuZXhwb3J0IHR5cGUgQ29tcGxldGlvbkl0ZW1zID0gbW9uYWNvLmxhbmd1YWdlcy5Db21wbGV0aW9uSXRlbVtdXG5cbi8qKlxuICogTm9ybWFsaXplZCB2ZXJzaW9uIG9mIENvbXBsZXRpb25JdGVtIHRoYXQgY29udGFpbnMgZml4ZWQgdHlwZXMgaW5zdGVhZCBvZiB1bmlvbiAoZS5nLiBGb28gfCBCYXIpXG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgTm9ybWFsaXplZENvbXBsZXRpb25JdGVtIGV4dGVuZHMgT21pdDxtb25hY28ubGFuZ3VhZ2VzLkNvbXBsZXRpb25JdGVtLCAnbGFiZWwnIHwgJ3JhbmdlJz4ge1xuICBsYWJlbDogc3RyaW5nXG4gIGRvY3VtZW50YXRpb24/OiBtb25hY28uSU1hcmtkb3duU3RyaW5nXG59XG5cbi8qKlxuICogUmVwcmVzZW50cyByZWNvcmQgZnJvbSBwYWNrYWdlIGluZGV4LlxuICovXG5leHBvcnQgaW50ZXJmYWNlIFBhY2thZ2VJbmRleEl0ZW0ge1xuICAvKipcbiAgICogRnVsbCBpbXBvcnQgcGF0aC5cbiAgICovXG4gIGltcG9ydFBhdGg6IHN0cmluZ1xuXG4gIC8qKlxuICAgKiBQYWNrYWdlIG5hbWUuXG4gICAqL1xuICBuYW1lOiBzdHJpbmdcblxuICAvKipcbiAgICogUHJlZml4IGZvciBzZWFyY2ggYnkgZmlyc3QgbGV0dGVyIHN1cHBsaWVkIGJ5IE1vbmFjby5cbiAgICovXG4gIHByZWZpeDogc3RyaW5nXG5cbiAgLyoqXG4gICAqIEluaGVyaXRlZCBmcm9tIENvbXBsZXRpb25JdGVtLlxuICAgKi9cbiAgZG9jdW1lbnRhdGlvbj86IG1vbmFjby5JTWFya2Rvd25TdHJpbmdcbn1cblxuLyoqXG4gKiBSZXByZXNlbnRzIHJlY29yZCBmcm9tIHN5bWJvbCBpbmRleC5cbiAqL1xuZXhwb3J0IGludGVyZmFjZSBTeW1ib2xJbmRleEl0ZW0gZXh0ZW5kcyBOb3JtYWxpemVkQ29tcGxldGlvbkl0ZW0ge1xuICAvKipcbiAgICogS2V5IGlzIGNvbXBvdW5kIHBhaXIgb2YgcGFja2FnZSBuYW1lIGFuZCBzeW1ib2wgbmFtZS5cbiAgICpcbiAgICogRS5nLiBgc3lzY2FsbC9qcy5WYWx1ZWBcbiAgICovXG4gIGtleTogc3RyaW5nXG5cbiAgLyoqXG4gICAqIFByZWZpeCBmb3Igc2VhcmNoIGJ5IGZpcnN0IGxldHRlciBzdXBwbGllZCBieSBNb25hY28uXG4gICAqL1xuICBwcmVmaXg6IHN0cmluZ1xuXG4gIC8qKlxuICAgKiBGdWxsIHBhY2thZ2UgcGF0aCB0byB3aGljaCB0aGlzIHN5bWJvbCBiZWxvbmdzLlxuICAgKi9cbiAgcGFja2FnZVBhdGg6IHN0cmluZ1xuXG4gIC8qKlxuICAgKiBQYWNrYWdlIG5hbWUgcGFydCBvZiBwYWNrYWdlIHBhdGhcbiAgICovXG4gIHBhY2thZ2VOYW1lOiBzdHJpbmdcblxuICAvKipcbiAgICogU2lnbmF0dXJlIHJlcHJlc2VudHMgZnVsbCBzeW1ib2wgc2lnbmF0dXJlIHRvIHNob3cgb24gaG92ZXIuXG4gICAqL1xuICBzaWduYXR1cmU6IHN0cmluZ1xufVxuXG5pbXBvcnQgeyBpc0FmdGVyIH0gZnJvbSAnZGF0ZS1mbnMnXG5cbnR5cGUgUmVjb3JkVmFsaWRhdG9yPFQ+ID0gKGVudHJ5OiBDYWNoZUVudHJ5PFQ+KSA9PiBib29sZWFuXG5cbmV4cG9ydCBjbGFzcyBLZXlWYWx1ZVN0b3JlIGltcGxlbWVudHMgQ2FjaGVTdG9yYWdlIHtcbiAgY29uc3RydWN0b3IocHJpdmF0ZSByZWFkb25seSBkYjogRGF0YWJhc2VTdG9yYWdlKSB7fVxuXG4gIGFzeW5jIGdldEl0ZW08VD4oa2V5OiBzdHJpbmcsIHZhbGlkYXRlPzogUmVjb3JkVmFsaWRhdG9yPFQ+KTogUHJvbWlzZTxUIHwgdW5kZWZpbmVkPiB7XG4gICAgY29uc3QgZW50cnkgPSBhd2FpdCB0aGlzLmRiLmtleVZhbHVlLmdldChrZXkpXG4gICAgaWYgKGVudHJ5Py5leHBpcmVBdCAmJiBpc0FmdGVyKG5ldyBEYXRlKCksIGVudHJ5LmV4cGlyZUF0KSkge1xuICAgICAgdm9pZCB0aGlzLmRlbGV0ZUl0ZW0oa2V5KVxuICAgICAgcmV0dXJuIHVuZGVmaW5lZFxuICAgIH1cblxuICAgIGlmIChlbnRyeSAmJiB2YWxpZGF0ZSAmJiAhdmFsaWRhdGUoZW50cnkpKSB7XG4gICAgICB2b2lkIHRoaXMuZGVsZXRlSXRlbShrZXkpXG4gICAgICByZXR1cm4gdW5kZWZpbmVkXG4gICAgfVxuXG4gICAgcmV0dXJuIGVudHJ5Py52YWx1ZSBhcyBUIHwgdW5kZWZpbmVkXG4gIH1cblxuICBhc3luYyBkZWxldGVJdGVtKGtleTogc3RyaW5nKSB7XG4gICAgY29uc3QgbiA9IGF3YWl0IHRoaXMuZGIua2V5VmFsdWUud2hlcmUoeyBrZXkgfSkuZGVsZXRlKClcbiAgICByZXR1cm4gbiA+IDBcbiAgfVxuXG4gIGFzeW5jIHNldEl0ZW08VD4oa2V5OiBzdHJpbmcsIHZhbHVlOiBULCBleHBpcmVBdD86IERhdGUpIHtcbiAgICBhd2FpdCB0aGlzLmRlbGV0ZUl0ZW0oa2V5KVxuICAgIGF3YWl0IHRoaXMuZGIua2V5VmFsdWUucHV0KHsga2V5LCB2YWx1ZSwgZXhwaXJlQXQgfSlcbiAgfVxuXG4gIGFzeW5jIGZsdXNoKCkge1xuICAgIGF3YWl0IHRoaXMuZGIua2V5VmFsdWUuY2xlYXIoKVxuICB9XG59XG5cbmV4cG9ydCBjb25zdCBkYiA9IG5ldyBEYXRhYmFzZVN0b3JhZ2UoKVxuZXhwb3J0IGNvbnN0IGtleVZhbHVlID0gbmV3IEtleVZhbHVlU3RvcmUoZGIpXG4iLCAiaW1wb3J0IHR5cGUgKiBhcyBtb25hY28gZnJvbSAnbW9uYWNvLWVkaXRvcidcbmltcG9ydCAqIGFzIENvbWxpbmsgZnJvbSAnY29tbGluaydcbmltcG9ydCB7IGFkZERheXMgfSBmcm9tICdkYXRlLWZucydcbmltcG9ydCB7ZGIsIGtleVZhbHVlLCBQYWNrYWdlSW5kZXhJdGVtLCBTeW1ib2xJbmRleEl0ZW19IGZyb20gJy4uL2RiJ1xuXG5jb25zdCBjb21wbGV0aW9uVmVyc2lvbktleSA9ICdjb21wbGV0aW9uSXRlbXMudmVyc2lvbidcblxuY29uc3QgVFRMX0RBWVMgPSA3XG5cbmNvbnN0IGdldEV4cGlyZVRpbWUgPSAoKSA9PiBhZGREYXlzKG5ldyBEYXRlKCksIFRUTF9EQVlTKVxuXG5jb25zdCBpc1BhY2thZ2VRdWVyeSA9IChxOiBTdWdnZXN0aW9uUXVlcnkpOiBxIGlzIFBhY2thZ2VTeW1ib2xRdWVyeSA9PiAncGFja2FnZU5hbWUnIGluIHFcblxuXG5leHBvcnQgY2xhc3MgV29ya2VySGFuZGxlciB7XG4gIHByaXZhdGUgY2FjaGVQb3B1bGF0ZWQgPSBmYWxzZVxuICBwcml2YXRlIHBvcHVsYXRlUHJvbWlzZT86IFByb21pc2U8dm9pZD5cblxuICAvKipcbiAgICogU3RvcmUga2VlcHMgY29tcGxldGlvbnMgaW4gY2FjaGUuXG4gICAqXG4gICAqIFVzaW5nIGluLW1lbW9yeSBjYWNoZSBkb2Vzbid0IG1ha2Ugc2Vuc2UgYXMgTW9uYWNvIG11dGF0ZXMgY29tcGxldGlvbnMgYWZ0ZXIgc3VibWl0LlxuICAgKiBDb21wbGV0aW9ucyB3aXRoIG11dGF0ZWQgcG9zaXRpb24gYXJlIG5vIGxvbmdlciB2YWxpZGF0ZWQsIHNvIGVpdGhlciBlYWNoIG5ldyBjb3B5IHNob3VsZCBiZSBkb25lXG4gICAqIG9yIGl0J3MgbXVjaCBlYXNpZXIgdG8ganVzdCBxdWVyeSB0aGUgREIuXG4gICAqL1xuICBwcml2YXRlIHJlYWRvbmx5IGRiID0gZGJcbiAgcHJpdmF0ZSByZWFkb25seSBrZXlWYWx1ZSA9IGtleVZhbHVlXG5cbiAgLyoqXG4gICAqIFJldHVybnMgd2hldGhlciBjYWNoZSB3YXMgcHJldmlvdXNseSBwb3B1bGF0ZWQuXG4gICAqL1xuICBpc1dhcm1VcCgpIHtcbiAgICByZXR1cm4gdGhpcy5jYWNoZVBvcHVsYXRlZFxuICB9XG5cbiAgLyoqXG4gICAqIFJldHVybnMgbGlzdCBvZiBwcmVkZWZpbmVkIGJ1aWx0aW5zLlxuICAgKlxuICAgKiBVc2VkIHRvIHNwZWVkLXVwIGhvdmVyIG9wZXJhdGlvbnMuXG4gICAqL1xuICBhc3luYyBnZXRCdWlsdGluTmFtZXMoKSB7XG4gICAgYXdhaXQgdGhpcy5jaGVja0NhY2hlUmVhZHkoKVxuICAgIGNvbnN0IGl0ZW1zID0gYXdhaXQgdGhpcy5kYi5zeW1ib2xJbmRleC53aGVyZSh7IHBhY2thZ2VOYW1lOiAnYnVpbHRpbicgfSkudG9BcnJheSgpXG4gICAgcmV0dXJuIGl0ZW1zLm1hcCgoeyBsYWJlbCB9KSA9PiBsYWJlbClcbiAgfVxuXG4gIHByaXZhdGUgYnVpbGRIb3ZlckZpbHRlcihxdWVyeTogSG92ZXJRdWVyeSk6IFBhcnRpYWw8U3ltYm9sSW5kZXhJdGVtPiB7XG4gICAgY29uc3QgaXNQYWNrYWdlTWVtYmVyID0gJ3BhY2thZ2VOYW1lJyBpbiBxdWVyeVxuICAgIGlmICghaXNQYWNrYWdlTWVtYmVyKSB7XG4gICAgICByZXR1cm4ge1xuICAgICAgICBrZXk6IGBidWlsdGluLiR7cXVlcnkudmFsdWV9YCxcbiAgICAgIH1cbiAgICB9XG5cbiAgICBjb25zdCBwa2dQYXRoID0gZmluZFBhY2thZ2VQYXRoRnJvbUNvbnRleHQocXVlcnkuY29udGV4dCwgcXVlcnkucGFja2FnZU5hbWUpXG4gICAgaWYgKHBrZ1BhdGgpIHtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIGtleTogYCR7cGtnUGF0aH0uJHtxdWVyeS52YWx1ZX1gLFxuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiB7XG4gICAgICBwYWNrYWdlTmFtZTogcXVlcnkucGFja2FnZU5hbWUsXG4gICAgICBsYWJlbDogcXVlcnkudmFsdWUsXG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIFJldHVybnMgaG92ZXIgZG9jdW1lbnRhdGlvbiBmb3IgYSBzeW1ib2wuXG4gICAqL1xuICBhc3luYyBnZXRIb3ZlclZhbHVlKHF1ZXJ5OiBIb3ZlclF1ZXJ5KTogUHJvbWlzZTxtb25hY28ubGFuZ3VhZ2VzLkhvdmVyIHwgbnVsbD4ge1xuICAgIGF3YWl0IHRoaXMuY2hlY2tDYWNoZVJlYWR5KClcbiAgICBjb25zdCBmaWx0ZXIgPSB0aGlzLmJ1aWxkSG92ZXJGaWx0ZXIocXVlcnkpXG4gICAgY29uc3QgZW50cnkgPSBhd2FpdCB0aGlzLmRiLnN5bWJvbEluZGV4LndoZXJlKGZpbHRlcikuZmlyc3QoKVxuICAgIGlmICghZW50cnkpIHtcbiAgICAgIHJldHVybiBudWxsXG4gICAgfVxuXG4gICAgcmV0dXJuIHtcbiAgICAgIGNvbnRlbnRzOiBzeW1ib2xIb3ZlckRvYyhlbnRyeSksXG4gICAgICByYW5nZTogcXVlcnkuY29udGV4dC5yYW5nZSxcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogUmV0dXJucyBsaXN0IG9mIGtub3duIGltcG9ydGFibGUgR28gcGFja2FnZXMuXG4gICAqXG4gICAqIFJldHVybnMgdmFsdWUgZnJvbSBjYWNoZSBpZiBhdmFpbGFibGUuXG4gICAqIEByZXR1cm5zXG4gICAqL1xuICBhc3luYyBnZXRJbXBvcnRTdWdnZXN0aW9ucygpIHtcbiAgICAvLyBUT0RPOiBwcm92aWRlIHRoaXJkLXBhcnR5IHBhY2thZ2VzIHVzaW5nIGdvIHByb3h5IGluZGV4LlxuICAgIHJldHVybiBhd2FpdCB0aGlzLmdldFN0YW5kYXJkUGFja2FnZXMoKVxuICB9XG5cbiAgLyoqXG4gICAqIFJldHVybnMgc3ltYm9sIG9yIGxpdGVyYWwgc3VnZ2VzdGlvbnMgYnkgcHJlZml4IGFuZCBwYWNrYWdlIG5hbWUuXG4gICAqL1xuICBhc3luYyBnZXRTeW1ib2xTdWdnZXN0aW9ucyhxdWVyeTogU3VnZ2VzdGlvblF1ZXJ5KSB7XG4gICAgY29uc29sZS5sb2cocXVlcnkpXG4gICAgYXdhaXQgdGhpcy5jaGVja0NhY2hlUmVhZHkoKVxuXG4gICAgaWYgKGlzUGFja2FnZVF1ZXJ5KHF1ZXJ5KSkge1xuICAgICAgcmV0dXJuIGF3YWl0IHRoaXMuZ2V0TWVtYmVyU3VnZ2VzdGlvbihxdWVyeSlcbiAgICB9XG5cbiAgICByZXR1cm4gYXdhaXQgdGhpcy5nZXRMaXRlcmFsU3VnZ2VzdGlvbihxdWVyeSlcbiAgfVxuXG4gIHByaXZhdGUgYXN5bmMgZ2V0TWVtYmVyU3VnZ2VzdGlvbih7IHZhbHVlLCBwYWNrYWdlTmFtZSwgY29udGV4dCB9OiBQYWNrYWdlU3ltYm9sUXVlcnkpIHtcbiAgICAvLyBJZiBwYWNrYWdlIHdpdGggc3BlY2lmaWVkIG5hbWUgaXMgaW1wb3J0ZWQgLSBmaWx0ZXIgc3ltYm9sc1xuICAgIC8vIHRvIGF2b2lkIG92ZXJsYXAgd2l0aCBwYWNrYWdlcyB3aXRoIGVwb255bW91cyBuYW1lLlxuICAgIGNvbnN0IHBhY2thZ2VQYXRoID0gZmluZFBhY2thZ2VQYXRoRnJvbUNvbnRleHQoY29udGV4dCwgcGFja2FnZU5hbWUpXG5cbiAgICBjb25zdCBmaWx0ZXI6IFBhcnRpYWw8U3ltYm9sSW5kZXhJdGVtPiA9IHBhY2thZ2VQYXRoXG4gICAgICA/IHtcbiAgICAgICAgICBwYWNrYWdlUGF0aCxcbiAgICAgICAgfVxuICAgICAgOiB7IHBhY2thZ2VOYW1lIH1cblxuICAgIGlmICh2YWx1ZSkge1xuICAgICAgZmlsdGVyLnByZWZpeCA9IHZhbHVlLmNoYXJBdCgwKS50b0xvd2VyQ2FzZSgpXG4gICAgfVxuXG4gICAgY29uc3Qgc3ltYm9scyA9IGF3YWl0IHRoaXMuZGIuc3ltYm9sSW5kZXgud2hlcmUoZmlsdGVyKS50b0FycmF5KClcbiAgICByZXR1cm4gc3ltYm9scy5tYXAoKHN5bWJvbCkgPT4gY29tcGxldGlvbkZyb21TeW1ib2woc3ltYm9sLCBjb250ZXh0LCAhIXBhY2thZ2VQYXRoKSlcbiAgfVxuXG4gIHByaXZhdGUgYXN5bmMgZ2V0TGl0ZXJhbFN1Z2dlc3Rpb24oeyB2YWx1ZSwgY29udGV4dCB9OiBMaXRlcmFsUXVlcnkpIHtcbiAgICBjb25zdCBwYWNrYWdlcyA9IGF3YWl0IHRoaXMuZGIucGFja2FnZUluZGV4LndoZXJlKCdwcmVmaXgnKS5lcXVhbHModmFsdWUpLnRvQXJyYXkoKVxuICAgIGNvbnN0IGJ1aWx0aW5zID0gYXdhaXQgdGhpcy5kYi5zeW1ib2xJbmRleC53aGVyZSgncGFja2FnZVBhdGgnKS5lcXVhbHMoJ2J1aWx0aW4nKS50b0FycmF5KClcblxuICAgIGNvbnN0IHBhY2thZ2VDb21wbGV0aW9ucyA9IHBhY2thZ2VzLm1hcCgoaXRlbSkgPT4gY29tcGxldGlvbkZyb21QYWNrYWdlKGl0ZW0sIGNvbnRleHQpKVxuICAgIGNvbnN0IHN5bWJvbHNDb21wbGV0aW9ucyA9IGJ1aWx0aW5zLm1hcCgoaXRlbSkgPT4gY29tcGxldGlvbkZyb21TeW1ib2woaXRlbSwgY29udGV4dCwgZmFsc2UpKVxuXG4gICAgcmV0dXJuIHBhY2thZ2VDb21wbGV0aW9ucy5jb25jYXQoc3ltYm9sc0NvbXBsZXRpb25zKVxuICB9XG5cbiAgcHJpdmF0ZSBhc3luYyBnZXRTdGFuZGFyZFBhY2thZ2VzKCkge1xuICAgIGF3YWl0IHRoaXMuY2hlY2tDYWNoZVJlYWR5KClcblxuICAgIGNvbnN0IHJlc3VsdHMgPSBhd2FpdCB0aGlzLmRiLnBhY2thZ2VJbmRleC50b0FycmF5KClcbiAgICByZXR1cm4gcmVzdWx0cy5tYXAoaW1wb3J0Q29tcGxldGlvbkZyb21QYWNrYWdlKVxuICB9XG5cbiAgcHJpdmF0ZSBhc3luYyBjaGVja0NhY2hlUmVhZHkoKSB7XG4gICAgaWYgKHRoaXMuY2FjaGVQb3B1bGF0ZWQpIHtcbiAgICAgIHJldHVybiB0cnVlXG4gICAgfVxuXG4gICAgLy8gVE9ETzogYWRkIGludmFsaWRhdGlvbiBieSBHbyB2ZXJzaW9uXG4gICAgY29uc3QgdmVyc2lvbiA9IGF3YWl0IHRoaXMua2V5VmFsdWUuZ2V0SXRlbTxzdHJpbmc+KGNvbXBsZXRpb25WZXJzaW9uS2V5LCAoZW50cnkpID0+IHtcbiAgICAgIC8vIHYyLjIuMCBkaWRuJ3Qgd3JpdGUgVFRMIGJ5IG1pc3Rha2VcbiAgICAgIHJldHVybiB0eXBlb2YgZW50cnkuZXhwaXJlQXQgIT09ICd1bmRlZmluZWQnXG4gICAgfSlcblxuICAgIGlmICghdmVyc2lvbikge1xuICAgICAgYXdhaXQgdGhpcy5wb3B1bGF0ZUNhY2hlKClcbiAgICAgIHJldHVybiB0cnVlXG4gICAgfVxuXG4gICAgY29uc3QgY291bnQgPSBhd2FpdCB0aGlzLmRiLnBhY2thZ2VJbmRleC5jb3VudCgpXG4gICAgdGhpcy5jYWNoZVBvcHVsYXRlZCA9IGNvdW50ID4gMFxuICAgIGlmICghdGhpcy5jYWNoZVBvcHVsYXRlZCkge1xuICAgICAgYXdhaXQgdGhpcy5wb3B1bGF0ZUNhY2hlKClcbiAgICB9XG4gICAgcmV0dXJuIHRoaXMuY2FjaGVQb3B1bGF0ZWRcbiAgfVxuXG4gIHByaXZhdGUgYXN5bmMgcG9wdWxhdGVDYWNoZSgpIHtcbiAgICBpZiAoIXRoaXMucG9wdWxhdGVQcm9taXNlKSB7XG4gICAgICAvLyBDYWNoZSBwb3B1bGF0aW9uIG1pZ2h0IGJlIHRyaWdnZXJlZCBieSBtdWx0aXBsZSBhY3RvcnMgb3V0c2lkZS5cbiAgICAgIHRoaXMucG9wdWxhdGVQcm9taXNlID0gKGFzeW5jICgpID0+IHtcbiAgICAgICAgY29uc3QgcnNwID0gYXdhaXQgZmV0Y2goJy9zdGF0aWMvZ28taW5kZXguanNvbicpXG4gICAgICAgIGlmICghcnNwLm9rKSB7XG4gICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGAke3JzcC5zdGF0dXN9ICR7cnNwLnN0YXR1c1RleHR9YClcbiAgICAgICAgfVxuXG4gICAgICAgIGNvbnN0IGRhdGE6IEdvSW5kZXhGaWxlID0gYXdhaXQgcnNwLmpzb24oKVxuICAgICAgICBpZiAoZGF0YS52ZXJzaW9uID4gMSkge1xuICAgICAgICAgIGNvbnNvbGUud2FybihgdW5zdXBwb3J0ZWQgc3ltYm9sIGluZGV4IHZlcnNpb246ICR7ZGF0YS52ZXJzaW9ufSwgc2tpcCB1cGRhdGUuYClcbiAgICAgICAgICByZXR1cm5cbiAgICAgICAgfVxuXG4gICAgICAgIGNvbnNvbGUubG9nKGRhdGEpXG4gICAgICAgIGNvbnN0IHBhY2thZ2VzID0gY29uc3RydWN0UGFja2FnZXMoZGF0YS5wYWNrYWdlcylcbiAgICAgICAgY29uc3Qgc3ltYm9scyA9IGNvbnN0cnVjdFN5bWJvbHMoZGF0YS5zeW1ib2xzKVxuXG4gICAgICAgIGF3YWl0IFByb21pc2UuYWxsKFtcbiAgICAgICAgICB0aGlzLmRiLnBhY2thZ2VJbmRleC5jbGVhcigpLFxuICAgICAgICAgIHRoaXMuZGIuc3ltYm9sSW5kZXguY2xlYXIoKSxcbiAgICAgICAgICB0aGlzLmRiLnBhY2thZ2VJbmRleC5idWxrQWRkKHBhY2thZ2VzKSxcbiAgICAgICAgICB0aGlzLmRiLnN5bWJvbEluZGV4LmJ1bGtBZGQoc3ltYm9scyksXG4gICAgICAgICAgdGhpcy5rZXlWYWx1ZS5zZXRJdGVtKGNvbXBsZXRpb25WZXJzaW9uS2V5LCBkYXRhLmdvLCBnZXRFeHBpcmVUaW1lKCkpLFxuICAgICAgICBdKVxuXG4gICAgICAgIHRoaXMuY2FjaGVQb3B1bGF0ZWQgPSB0cnVlXG4gICAgICB9KSgpXG4gICAgfVxuXG4gICAgYXdhaXQgdGhpcy5wb3B1bGF0ZVByb21pc2VcbiAgfVxufVxuXG5Db21saW5rLmV4cG9zZShuZXcgV29ya2VySGFuZGxlcigpKVxuXG5leHBvcnQgZW51bSBTeW1ib2xTb3VyY2VLZXkge1xuICBOYW1lID0gMCxcbiAgUGF0aCA9IDEsXG59XG5cbnR5cGUgU3ltYm9sU291cmNlID0gW25hbWU6IHN0cmluZywgcGF0aDogc3RyaW5nXVxuXG4vKipcbiAqIEBzZWUgaW50ZXJuYWwvcGtnaW5kZXgvaW5kZXgvdHlwZXMuZ29cbiAqL1xuZXhwb3J0IGludGVyZmFjZSBTeW1ib2xzIHtcbiAgbmFtZXM6IHN0cmluZ1tdXG4gIGRvY3M6IHN0cmluZ1tdXG4gIGRldGFpbHM6IHN0cmluZ1tdXG4gIHNpZ25hdHVyZXM6IHN0cmluZ1tdXG4gIGluc2VydFRleHRzOiBzdHJpbmdbXVxuICBpbnNlcnRUZXh0UnVsZXM6IG1vbmFjby5sYW5ndWFnZXMuQ29tcGxldGlvbkl0ZW1JbnNlcnRUZXh0UnVsZVtdXG4gIGtpbmRzOiBtb25hY28ubGFuZ3VhZ2VzLkNvbXBsZXRpb25JdGVtS2luZFtdXG4gIHBhY2thZ2VzOiBTeW1ib2xTb3VyY2VbXVxufVxuXG4vKipcbiAqIEBzZWUgaW50ZXJuYWwvcGtnaW5kZXgvaW5kZXgvdHlwZXMuZ29cbiAqL1xuZXhwb3J0IGludGVyZmFjZSBQYWNrYWdlcyB7XG4gIG5hbWVzOiBzdHJpbmdbXVxuICBwYXRoczogc3RyaW5nW11cbiAgZG9jczogc3RyaW5nW11cbn1cblxuLyoqXG4gKiBHbyBpbmRleCBmaWxlIHJlc3BvbnNlIHR5cGUuXG4gKlxuICogQHNlZSBpbnRlcm5hbC9wa2dpbmRleC9pbmRleC90eXBlcy5nb1xuICovXG5leHBvcnQgaW50ZXJmYWNlIEdvSW5kZXhGaWxlIHtcbiAgLyoqXG4gICAqIEZpbGUgZm9ybWF0IHZlcnNpb24uXG4gICAqL1xuICB2ZXJzaW9uOiBudW1iZXJcblxuICAvKipcbiAgICogR28gdmVyc2lvbiB1c2VkIHRvIGdlbmVyYXRlIGluZGV4LlxuICAgKi9cbiAgZ286IHN0cmluZ1xuXG4gIC8qKlxuICAgKiBMaXN0IG9mIHN0YW5kYXJkIHBhY2thZ2VzLlxuICAgKi9cbiAgcGFja2FnZXM6IFBhY2thZ2VzXG5cbiAgLyoqXG4gICAqIExpc3Qgb2Ygc3ltYm9scyBvZiBlYWNoIHBhY2thZ2UuXG4gICAqL1xuICBzeW1ib2xzOiBTeW1ib2xzXG59XG5cbmV4cG9ydCBlbnVtIEltcG9ydENsYXVzZVR5cGUge1xuICAvKipcbiAgICogVGhlcmUgaXMgbm8gYW55IGltcG9ydCBibG9jay5cbiAgICovXG4gIE5vbmUsXG5cbiAgLyoqXG4gICAqIFNpbmdsZSBsaW5lIGltcG9ydC5cbiAgICovXG4gIFNpbmdsZSxcblxuICAvKipcbiAgICogTXVsdGktbGluZSBpbXBvcnQgYmxvY2sgd2l0aCBicmFjZXMuXG4gICAqL1xuICBCbG9jayxcbn1cblxuZXhwb3J0IGludGVyZmFjZSBJbXBvcnRzQ29udGV4dCB7XG4gIC8qKlxuICAgKiBXaGV0aGVyIGFueSBlcnJvciB3YXMgZGV0ZWN0ZWQgZHVyaW5nIGNvbnRleHQgYnVpbGQuXG4gICAqL1xuICBoYXNFcnJvcj86IGJvb2xlYW5cblxuICAvKipcbiAgICogTGlzdCBvZiBpbXBvcnQgcGF0aHMgZnJvbSBhbGwgaW1wb3J0IGJsb2Nrcy5cbiAgICovXG4gIGFsbFBhdGhzPzogU2V0PHN0cmluZz5cblxuICAvKipcbiAgICogU3RhcnQgYW5kIGVuZCBsaW5lIG9mIGFyZWEgY29udGFpbmluZyBhbGwgaW1wb3J0cy5cbiAgICpcbiAgICogVGhpcyBhcmVhIHdpbGwgYmUgbW9uaXRvcmVkIGZvciBjaGFuZ2VzIHRvIHVwZGF0ZSBkb2N1bWVudCBpbXBvcnRzIGNhY2hlLlxuICAgKi9cbiAgdG90YWxSYW5nZT86IFBpY2s8bW9uYWNvLklSYW5nZSwgJ3N0YXJ0TGluZU51bWJlcicgfCAnZW5kTGluZU51bWJlcic+XG5cbiAgLyoqXG4gICAqIEltcG9ydHMgaW4gYSBsYXN0IGJsb2NrIHJlbGF0ZWQgdG8gYHJhbmdlYC5cbiAgICovXG4gIGJsb2NrUGF0aHM/OiBzdHJpbmdbXVxuXG4gIC8qKlxuICAgKiBUeXBlIG9mIG5lYXJlc3QgaW1wb3J0IGJsb2NrLlxuICAgKi9cbiAgYmxvY2tUeXBlOiBJbXBvcnRDbGF1c2VUeXBlXG5cbiAgLyoqXG4gICAqIFBvc2l0aW9uIG9mIG5lYXJlc3QgaW1wb3J0IGJsb2NrIHRvIGluc2VydCBuZXcgaW1wb3J0cy5cbiAgICpcbiAgICogSWYgYGJsb2NrVHlwZWAgaXMgYEltcG9ydENsYXVzZVR5cGUuTm9uZWAgLSBwb2ludHMgdG8gcG9zaXRpb25cbiAgICogb2YgbmVhcmVzdCBlbXB0eSBsaW5lIGFmdGVyIGBwYWNrYWdlYCBjbGF1c2UuXG4gICAqXG4gICAqIElmIHRoZXJlIGlzIG5vIGVtcHR5IGxpbmUgYWZ0ZXIgYHBhY2thZ2VgIGNsYXVzZSAtIHNob3VsZCBwb2ludFxuICAgKiB0byB0aGUgZW5kIG9mIGNsYXVzZSBzdGF0ZW1lbnQgKyAxIGV4dHJhIGNvbHVtbi5cbiAgICpcbiAgICogT3RoZXJ3aXNlIC0gc2hvdWxkIHBvaW50IHRvIGEgZnVsbCByYW5nZSBvZiBsYXN0IGBpbXBvcnRgIGJsb2NrLlxuICAgKlxuICAgKiBAc2VlIHByZXBlbmROZXdMaW5lXG4gICAqL1xuICByYW5nZT86IG1vbmFjby5JUmFuZ2VcblxuICAvKipcbiAgICogSW5kaWNhdGVzIHdoZXRoZXIgZXh0cmEgbmV3IGxpbmUgc2hvdWxkIGJlIGFwcGVuZGVkIGJlZm9yZSBgaW1wb3J0YCBjbGF1c2UuXG4gICAqXG4gICAqIEVmZmVjdGl2ZSBvbmx5IHdoZW4gYHJhbmdlYCBpcyBgSW1wb3J0Q2xhdXNlVHlwZS5Ob25lYC5cbiAgICovXG4gIHByZXBlbmROZXdMaW5lPzogYm9vbGVhblxufVxuXG5leHBvcnQgaW50ZXJmYWNlIFN1Z2dlc3Rpb25Db250ZXh0IHtcbiAgLyoqXG4gICAqIEN1cnJlbnQgZWRpdCByYW5nZVxuICAgKi9cbiAgcmFuZ2U6IG1vbmFjby5JUmFuZ2VcblxuICAvKipcbiAgICogQ29udHJvbHMgaG93IGF1dG8gaW1wb3J0IHN1Z2dlc3Rpb25zIHdpbGwgYmUgYWRkZWQuXG4gICAqL1xuICBpbXBvcnRzOiBJbXBvcnRzQ29udGV4dFxufVxuXG5leHBvcnQgaW50ZXJmYWNlIExpdGVyYWxRdWVyeSB7XG4gIHZhbHVlOiBzdHJpbmdcbiAgY29udGV4dDogU3VnZ2VzdGlvbkNvbnRleHRcbn1cblxuZXhwb3J0IGludGVyZmFjZSBQYWNrYWdlU3ltYm9sUXVlcnkge1xuICBwYWNrYWdlTmFtZTogc3RyaW5nXG4gIHZhbHVlPzogc3RyaW5nXG4gIGNvbnRleHQ6IFN1Z2dlc3Rpb25Db250ZXh0XG59XG5cbmV4cG9ydCB0eXBlIFN1Z2dlc3Rpb25RdWVyeSA9IExpdGVyYWxRdWVyeSB8IFBhY2thZ2VTeW1ib2xRdWVyeVxuXG5leHBvcnQgdHlwZSBIb3ZlclF1ZXJ5ID0gTGl0ZXJhbFF1ZXJ5IHwgUmVxdWlyZWQ8UGFja2FnZVN5bWJvbFF1ZXJ5PlxuXG5cbnR5cGUgQ29tcGxldGlvbkl0ZW0gPSBtb25hY28ubGFuZ3VhZ2VzLkNvbXBsZXRpb25JdGVtXG5cbmNvbnN0IGdldFByZWZpeCA9IChzdHI6IHN0cmluZykgPT4gc3RyWzBdPy50b0xvd2VyQ2FzZSgpID8/ICcnXG5cbi8vIEFsdGhvdWdoIG1vbmFjbyBkb2Vzbid0IHJlcXVpcmUgYWN0dWFsIHJhbmdlLCBpdCdzIGRlZmluZWQgYXMgcmVxdWlyZWQgaW4gVFMgdHlwZXMuXG4vLyBUaGlzIGlzIGEgc3R1YiB2YWx1ZSB0byBzYXRpc2Z5IHR5cGUgY2hlY2tzLlxuY29uc3Qgc3R1YlJhbmdlID0gdW5kZWZpbmVkIGFzIGFueSBhcyBtb25hY28uSVJhbmdlXG5cbmNvbnN0IHBhY2thZ2VDb21wbGV0aW9uS2luZCA9IDhcblxuY29uc3QgZGlzY2FyZElmRW1wdHkgPSAoc3RyOiBzdHJpbmcsIGRlZmF1bHRzPzogc3RyaW5nIHwgdW5kZWZpbmVkKSA9PiAoc3RyLmxlbmd0aCA/IHN0ciA6IGRlZmF1bHRzKVxuXG5jb25zdCBzdHJpbmdUb01hcmtkb3duID0gKHZhbHVlOiBzdHJpbmcpOiBtb25hY28uSU1hcmtkb3duU3RyaW5nIHwgdW5kZWZpbmVkID0+IHtcbiAgaWYgKCF2YWx1ZS5sZW5ndGgpIHtcbiAgICByZXR1cm4gdW5kZWZpbmVkXG4gIH1cblxuICByZXR1cm4ge1xuICAgIHZhbHVlLFxuICAgIGlzVHJ1c3RlZDogdHJ1ZSxcbiAgfVxufVxuXG5leHBvcnQgY29uc3QgY29uc3RydWN0UGFja2FnZXMgPSAoeyBuYW1lcywgcGF0aHMsIGRvY3MgfTogUGFja2FnZXMpOiBQYWNrYWdlSW5kZXhJdGVtW10gPT5cbiAgICBuYW1lcy5tYXAoKG5hbWUsIGkpID0+ICh7XG4gICAgICBuYW1lLFxuICAgICAgaW1wb3J0UGF0aDogcGF0aHNbaV0sXG4gICAgICBwcmVmaXg6IGdldFByZWZpeChuYW1lc1tpXSksXG4gICAgICBkb2N1bWVudGF0aW9uOiBzdHJpbmdUb01hcmtkb3duKGRvY3NbaV0pLFxuICAgIH0pKVxuXG5leHBvcnQgY29uc3QgY29uc3RydWN0U3ltYm9scyA9ICh7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5hbWVzLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkb2NzLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkZXRhaWxzLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzaWduYXR1cmVzLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpbnNlcnRUZXh0cyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaW5zZXJ0VGV4dFJ1bGVzLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBraW5kcyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcGFja2FnZXMsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9OiBTeW1ib2xzKTogU3ltYm9sSW5kZXhJdGVtW10gPT5cbiAgICBuYW1lcy5tYXAoKG5hbWUsIGkpID0+ICh7XG4gICAgICBrZXk6IGAke3BhY2thZ2VzW2ldW1N5bWJvbFNvdXJjZUtleS5QYXRoXX0uJHtuYW1lfWAsXG4gICAgICBsYWJlbDogbmFtZSxcbiAgICAgIGRldGFpbDogZGlzY2FyZElmRW1wdHkoZGV0YWlsc1tpXSwgbmFtZSksXG4gICAgICBzaWduYXR1cmU6IHNpZ25hdHVyZXNbaV0sXG4gICAgICBraW5kOiBraW5kc1tpXSxcbiAgICAgIGluc2VydFRleHQ6IGluc2VydFRleHRzW2ldLFxuICAgICAgaW5zZXJ0VGV4dFJ1bGVzOiBpbnNlcnRUZXh0UnVsZXNbaV0sXG4gICAgICBwcmVmaXg6IGdldFByZWZpeChuYW1lKSxcbiAgICAgIHBhY2thZ2VOYW1lOiBwYWNrYWdlc1tpXVtTeW1ib2xTb3VyY2VLZXkuTmFtZV0sXG4gICAgICBwYWNrYWdlUGF0aDogcGFja2FnZXNbaV1bU3ltYm9sU291cmNlS2V5LlBhdGhdLFxuICAgICAgZG9jdW1lbnRhdGlvbjogc3RyaW5nVG9NYXJrZG93bihkb2NzW2ldKSxcbiAgICB9KSlcblxuZXhwb3J0IGNvbnN0IGltcG9ydENvbXBsZXRpb25Gcm9tUGFja2FnZSA9ICh7IGltcG9ydFBhdGgsIG5hbWUsIGRvY3VtZW50YXRpb24gfTogUGFja2FnZUluZGV4SXRlbSk6IENvbXBsZXRpb25JdGVtID0+ICh7XG4gIGxhYmVsOiBpbXBvcnRQYXRoLFxuICBkb2N1bWVudGF0aW9uLFxuICBkZXRhaWw6IG5hbWUsXG4gIGluc2VydFRleHQ6IGltcG9ydFBhdGgsXG4gIGtpbmQ6IHBhY2thZ2VDb21wbGV0aW9uS2luZCxcbiAgcmFuZ2U6IHN0dWJSYW5nZSxcbn0pXG5cbnR5cGUgSVNpbmdsZUVkaXRPcGVyYXRpb24gPSBtb25hY28uZWRpdG9yLklTaW5nbGVFZGl0T3BlcmF0aW9uXG5cbmNvbnN0IGltcG9ydFBhY2thZ2VUZXh0RWRpdCA9IChcbiAgICBpbXBvcnRQYXRoOiBzdHJpbmcsXG4gICAgeyBpbXBvcnRzIH06IFN1Z2dlc3Rpb25Db250ZXh0LFxuKTogSVNpbmdsZUVkaXRPcGVyYXRpb25bXSB8IHVuZGVmaW5lZCA9PiB7XG4gIGlmICghaW1wb3J0cy5yYW5nZSB8fCBpbXBvcnRzLmFsbFBhdGhzPy5oYXMoaW1wb3J0UGF0aCkpIHtcbiAgICByZXR1cm4gdW5kZWZpbmVkXG4gIH1cblxuICBzd2l0Y2ggKGltcG9ydHMuYmxvY2tUeXBlKSB7XG4gICAgY2FzZSBJbXBvcnRDbGF1c2VUeXBlLk5vbmU6IHtcbiAgICAgIGNvbnN0IHRleHQgPSBgaW1wb3J0IFwiJHtpbXBvcnRQYXRofVwiXFxuYFxuICAgICAgcmV0dXJuIFtcbiAgICAgICAge1xuICAgICAgICAgIHRleHQ6IGltcG9ydHMucHJlcGVuZE5ld0xpbmUgPyBgXFxuJHt0ZXh0fWAgOiB0ZXh0LFxuICAgICAgICAgIHJhbmdlOiBpbXBvcnRzLnJhbmdlLFxuICAgICAgICAgIGZvcmNlTW92ZU1hcmtlcnM6IHRydWUsXG4gICAgICAgIH0sXG4gICAgICBdXG4gICAgfVxuICAgIGNhc2UgSW1wb3J0Q2xhdXNlVHlwZS5TaW5nbGU6XG4gICAgY2FzZSBJbXBvcnRDbGF1c2VUeXBlLkJsb2NrOiB7XG4gICAgICBjb25zdCBpbXBvcnRMaW5lcyA9IChpbXBvcnRzLmJsb2NrUGF0aHMgPz8gW10pXG4gICAgICAgICAgLmNvbmNhdChpbXBvcnRQYXRoKVxuICAgICAgICAgIC5zb3J0KClcbiAgICAgICAgICAubWFwKCh2KSA9PiBgXFx0XCIke3Z9XCJgKVxuICAgICAgICAgIC5qb2luKCdcXG4nKVxuXG4gICAgICByZXR1cm4gW1xuICAgICAgICB7XG4gICAgICAgICAgdGV4dDogYGltcG9ydCAoXFxuJHtpbXBvcnRMaW5lc31cXG4pYCxcbiAgICAgICAgICByYW5nZTogaW1wb3J0cy5yYW5nZSxcbiAgICAgICAgICBmb3JjZU1vdmVNYXJrZXJzOiB0cnVlLFxuICAgICAgICB9LFxuICAgICAgXVxuICAgIH1cbiAgfVxufVxuXG5leHBvcnQgY29uc3QgY29tcGxldGlvbkZyb21QYWNrYWdlID0gKFxuICAgIHsgaW1wb3J0UGF0aCwgbmFtZSwgZG9jdW1lbnRhdGlvbiB9OiBQYWNrYWdlSW5kZXhJdGVtLFxuICAgIGN0eDogU3VnZ2VzdGlvbkNvbnRleHQsXG4pOiBDb21wbGV0aW9uSXRlbSA9PiAoe1xuICBsYWJlbDogbmFtZSxcbiAgZG9jdW1lbnRhdGlvbixcbiAgZGV0YWlsOiBpbXBvcnRQYXRoLFxuICBpbnNlcnRUZXh0OiBuYW1lLFxuICBraW5kOiBwYWNrYWdlQ29tcGxldGlvbktpbmQsXG4gIHJhbmdlOiBjdHgucmFuZ2UsXG4gIGFkZGl0aW9uYWxUZXh0RWRpdHM6IGltcG9ydFBhY2thZ2VUZXh0RWRpdChpbXBvcnRQYXRoLCBjdHgpLFxufSlcblxuZXhwb3J0IGNvbnN0IGNvbXBsZXRpb25Gcm9tU3ltYm9sID0gKFxuICAgIHsgcGFja2FnZVBhdGgsIC4uLmNvbXBsZXRpb25JdGVtIH06IFN5bWJvbEluZGV4SXRlbSxcbiAgICBjdHg6IFN1Z2dlc3Rpb25Db250ZXh0LFxuICAgIHRleHRFZGl0czogYm9vbGVhbixcbik6IENvbXBsZXRpb25JdGVtID0+ICh7XG4gIC4uLmNvbXBsZXRpb25JdGVtLFxuICByYW5nZTogY3R4LnJhbmdlLFxuICBhZGRpdGlvbmFsVGV4dEVkaXRzOiB0ZXh0RWRpdHMgPyBpbXBvcnRQYWNrYWdlVGV4dEVkaXQocGFja2FnZVBhdGgsIGN0eCkgOiB1bmRlZmluZWQsXG59KVxuXG5jb25zdCBwa2dOYW1lRnJvbVBhdGggPSAoaW1wb3J0UGF0aDogc3RyaW5nKSA9PiB7XG4gIGNvbnN0IHNsYXNoUG9zID0gaW1wb3J0UGF0aC5sYXN0SW5kZXhPZignLycpXG4gIHJldHVybiBzbGFzaFBvcyA9PT0gLTEgPyBpbXBvcnRQYXRoIDogaW1wb3J0UGF0aC5zbGljZShzbGFzaFBvcyArIDEpXG59XG5cbi8qKlxuICogQXR0ZW1wdHMgdG8gZmluZCBmaXJzdCBpbXBvcnQgcGF0aCB0aGF0IG1hdGNoZXMgcGFja2FnZSBuYW1lLlxuICovXG5leHBvcnQgY29uc3QgZmluZFBhY2thZ2VQYXRoRnJvbUNvbnRleHQgPSAoeyBpbXBvcnRzIH06IFN1Z2dlc3Rpb25Db250ZXh0LCBwa2dOYW1lOiBzdHJpbmcpOiBzdHJpbmcgfCB1bmRlZmluZWQgPT4ge1xuICBpZiAoIWltcG9ydHMuYWxsUGF0aHMpIHtcbiAgICByZXR1cm4gdW5kZWZpbmVkXG4gIH1cblxuICBpZiAoaW1wb3J0cy5hbGxQYXRocy5oYXMocGtnTmFtZSkpIHtcbiAgICByZXR1cm4gcGtnTmFtZVxuICB9XG5cbiAgZm9yIChjb25zdCBpbXBvcnRQYXRoIG9mIGltcG9ydHMuYWxsUGF0aHMua2V5cygpKSB7XG4gICAgLy8gVE9ETzogc3VwcG9ydCBuYW1lZCBpbXBvcnRzXG4gICAgaWYgKHBrZ05hbWUgPT09IHBrZ05hbWVGcm9tUGF0aChpbXBvcnRQYXRoKSkge1xuICAgICAgcmV0dXJuIGltcG9ydFBhdGhcbiAgICB9XG4gIH1cbn1cblxuY29uc3QgZ29Eb2NEb21haW4gPSAncGtnLmdvLmRldidcbmV4cG9ydCBjb25zdCBzeW1ib2xIb3ZlckRvYyA9ICh7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsYWJlbCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBhY2thZ2VOYW1lLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcGFja2FnZVBhdGgsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzaWduYXR1cmUsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkb2N1bWVudGF0aW9uLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH06IFN5bWJvbEluZGV4SXRlbSk6IG1vbmFjby5JTWFya2Rvd25TdHJpbmdbXSA9PiB7XG4gIGNvbnN0IGRvYzogbW9uYWNvLklNYXJrZG93blN0cmluZ1tdID0gW11cblxuICBpZiAoc2lnbmF0dXJlKSB7XG4gICAgZG9jLnB1c2goe1xuICAgICAgdmFsdWU6ICdgYGBnb1xcbicgKyBzaWduYXR1cmUgKyAnXFxuYGBgJyxcbiAgICB9KVxuICB9XG5cbiAgaWYgKGRvY3VtZW50YXRpb24pIHtcbiAgICBkb2MucHVzaChkb2N1bWVudGF0aW9uKVxuICB9XG5cbiAgY29uc3QgZG9jTGFiZWwgPSBwYWNrYWdlUGF0aCA9PT0gJ2J1aWx0aW4nID8gbGFiZWwgOiBgJHtwYWNrYWdlTmFtZX0uJHtsYWJlbH1gXG4gIGNvbnN0IGxpbmtMYWJlbCA9IGBcXGAke2RvY0xhYmVsfVxcYCBvbiAke2dvRG9jRG9tYWlufWBcbiAgZG9jLnB1c2goe1xuICAgIHZhbHVlOiBgWyR7bGlua0xhYmVsfV0oaHR0cHM6Ly8ke2dvRG9jRG9tYWlufS8ke3BhY2thZ2VQYXRofSMke2xhYmVsfSlgLFxuICAgIGlzVHJ1c3RlZDogdHJ1ZSxcbiAgfSlcblxuICByZXR1cm4gZG9jXG59XG4iXSwKICAibWFwcGluZ3MiOiAicXZCQWdCQSxJQUFJQSxFQUFnQixTQUFTQyxFQUFHQyxFQUFHLENBQy9CLE9BQUFGLEVBQWdCLE9BQU8sZ0JBQ2xCLENBQUUsVUFBVyxDQUFBLENBQUUsWUFBYyxPQUFTLFNBQVVDLEVBQUdDLEVBQUcsQ0FBRUQsRUFBRSxVQUFZQyxDQUFFLEdBQ3pFLFNBQVVELEVBQUdDLEVBQUcsQ0FBRSxRQUFTQyxLQUFLRCxFQUFPLE9BQU8sVUFBVSxlQUFlLEtBQUtBLEVBQUdDLENBQUMsSUFBR0YsRUFBRUUsQ0FBQyxFQUFJRCxFQUFFQyxDQUFDLEVBQUUsRUFDNUZILEVBQWNDLEVBQUdDLENBQUMsQ0FDN0IsRUFFTyxTQUFTRSxFQUFVSCxFQUFHQyxFQUFHLENBQzVCLEdBQUksT0FBT0EsR0FBTSxZQUFjQSxJQUFNLEtBQ2pDLE1BQU0sSUFBSSxVQUFVLHVCQUF5QixPQUFPQSxDQUFDLEVBQUksK0JBQStCLEVBQzVGRixFQUFjQyxFQUFHQyxDQUFDLEVBQ2xCLFNBQVNHLEdBQUssQ0FBRSxLQUFLLFlBQWNKLENBQUUsQ0FDckNBLEVBQUUsVUFBWUMsSUFBTSxLQUFPLE9B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RUFHYixFQUVNWSxHQUFjLGFBQ1BwRCxHQUFpQixDQUFDLENBQ0UsTUFBQU4sRUFDQSxZQUFBUSxFQUNBLFlBQUFFLEVBQ0EsVUFBQWlELEVBQ0EsY0FBQVosQ0FDRixJQUFpRCxDQUM5RSxJQUFNYSxFQUFnQyxDQUFDLEVBRW5DRCxHQUNGQyxFQUFJLEtBQUssQ0FDUCxNQUFPLFVBQVlELEVBQVksT0FDakMsQ0FBQyxFQUdDWixHQUNGYSxFQUFJLEtBQUtiLENBQWEsRUFJeEIsSUFBTWMsRUFBWSxLQUREbkQsSUFBZ0IsVUFBWVYsRUFBUSxHQUFHUSxDQUFXLElBQUlSLENBQUssRUFDN0MsU0FBUzBELEVBQVcsR0FDbkQsT0FBQUUsRUFBSSxLQUFLLENBQ1AsTUFBTyxJQUFJQyxDQUFTLGFBQWFILEVBQVcsSUFBSWhELENBQVcsSUFBSVYsQ0FBSyxJQUNwRSxVQUFXLEVBQ2IsQ0FBQyxFQUVNNEQsQ0FDVCIsCiAgIm5hbWVzIjogWyJleHRlbmRTdGF0aWNzIiwgImQiLCAiYiIsICJwIiwgIl9fZXh0ZW5kcyIsICJfXyIsICJfX2Fzc2lnbiIsICJzIiwgImkiLCAibiIsICJfX3NwcmVhZEFycmF5IiwgInRvIiwgImZyb20iLCAicGFjayIsICJsIiwgImFyIiwgIl9nbG9iYWwiLCAia2V5cyIsICJpc0FycmF5IiwgImV4dGVuZCIsICJvYmoiLCAiZXh0ZW5zaW9uIiwgImtleSIsICJnZXRQcm90byIsICJfaGFzT3duIiwgImhhc093biIsICJwcm9wIiwgInByb3BzIiwgInByb3RvIiwgInNldFByb3AiLCAiZGVmaW5lUHJvcGVydHkiLCAiZnVuY3Rpb25PckdldFNldCIsICJvcHRpb25zIiwgImRlcml2ZSIsICJDaGlsZCIsICJQYXJlbnQiLCAiZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yIiwgImdldFByb3BlcnR5RGVzY3JpcHRvciIsICJwZCIsICJfc2xpY2UiLCAic2xpY2UiLCAiYXJncyIsICJzdGFydCIsICJlbmQiLCAib3ZlcnJpZGUiLCAib3JpZ0Z1bmMiLCAib3ZlcnJpZGVkRmFjdG9yeSIsICJhc3NlcnQiLCAiYXNhcCIsICJmbiIsICJhcnJheVRvT2JqZWN0IiwgImFycmF5IiwgImV4dHJhY3RvciIsICJyZXN1bHQiLCAiaXRlbSIsICJuYW1lQW5kVmFsdWUiLCAiZ2V0QnlLZXlQYXRoIiwgImtleVBhdGgiLCAicnYiLCAidmFsIiwgInBlcmlvZCIsICJpbm5lck9iaiIsICJzZXRCeUtleVBhdGgiLCAidmFsdWUiLCAiY3VycmVudEtleVBhdGgiLCAicmVtYWluaW5nS2V5UGF0aCIsICJkZWxCeUtleVBhdGgiLCAia3AiLCAic2hhbGxvd0Nsb25lIiwgIm0iLCAiY29uY2F0IiwgImZsYXR0ZW4iLCAiYSIsICJpbnRyaW5zaWNUeXBlTmFtZXMiLCAibnVtIiwgInQiLCAiaW50cmluc2ljVHlwZXMiLCAiY2xvbmVTaW1wbGVPYmplY3RUcmVlIiwgIm8iLCAiayIsICJ2IiwgIm9iamVjdElzRW1wdHkiLCAiY2lyY3VsYXJSZWZzIiwgImRlZXBDbG9uZSIsICJhbnkiLCAiaW5uZXJEZWVwQ2xvbmUiLCAieCIsICJ0b1N0cmluZyIsICJ0b1N0cmluZ1RhZyIsICJpdGVyYXRvclN5bWJvbCIsICJnZXRJdGVyYXRvck9mIiwgImRlbEFycmF5SXRlbSIsICJOT19DSEFSX0FSUkFZIiwgImdldEFycmF5T2YiLCAiYXJyYXlMaWtlIiwgIml0IiwgImlzQXN5bmNGdW5jdGlvbiIsICJkZXhpZUVycm9yTmFtZXMiLCAiaWRiRG9tRXJyb3JOYW1lcyIsICJlcnJvckxpc3QiLCAiZGVmYXVsdFRleHRzIiwgIkRleGllRXJyb3IiLCAibmFtZSIsICJtc2ciLCAiZ2V0TXVsdGlFcnJvck1lc3NhZ2UiLCAiZmFpbHVyZXMiLCAiTW9kaWZ5RXJyb3IiLCAic3VjY2Vzc0NvdW50IiwgImZhaWxlZEtleXMiLCAiQnVsa0Vycm9yIiwgInBvcyIsICJlcnJuYW1lcyIsICJCYXNlRXhjZXB0aW9uIiwgImV4Y2VwdGlvbnMiLCAiZnVsbE5hbWUiLCAibXNnT3JJbm5lciIsICJpbm5lciIsICJleGNlcHRpb25NYXAiLCAibWFwRXJyb3IiLCAiZG9tRXJyb3IiLCAibWVzc2FnZSIsICJmdWxsTmFtZUV4Y2VwdGlvbnMiLCAibm9wIiwgIm1pcnJvciIsICJwdXJlRnVuY3Rpb25DaGFpbiIsICJmMSIsICJmMiIsICJjYWxsQm90aCIsICJvbjEiLCAib24yIiwgImhvb2tDcmVhdGluZ0NoYWluIiwgInJlcyIsICJvbnN1Y2Nlc3MiLCAib25lcnJvciIsICJyZXMyIiwgImhvb2tEZWxldGluZ0NoYWluIiwgImhvb2tVcGRhdGluZ0NoYWluIiwgIm1vZGlmaWNhdGlvbnMiLCAicmV2ZXJzZVN0b3BwYWJsZUV2ZW50Q2hhaW4iLCAicHJvbWlzYWJsZUNoYWluIiwgInRoaXoiLCAiZGVidWciLCAic2V0RGVidWciLCAiZmlsdGVyIiwgIklOVEVSTkFMIiwgIlpPTkVfRUNIT19MSU1JVCIsICJfYSIsICJnbG9iYWxQIiwgIm5hdGl2ZVAiLCAicmVzb2x2ZWROYXRpdmVQcm9taXNlIiwgIl9hJDEiLCAibmF0aXZlUHJvbWlzZVByb3RvIiwgInJlc29sdmVkR2xvYmFsUHJvbWlzZSIsICJuYXRpdmVQcm9taXNlVGhlbiIsICJOYXRpdmVQcm9taXNlIiwgInBhdGNoR2xvYmFsUHJvbWlzZSIsICJzY2hlZHVsZVBoeXNpY2FsVGljayIsICJwaHlzaWNhbFRpY2siLCAiY2FsbGJhY2siLCAibWljcm90aWNrUXVldWUiLCAibmVlZHNOZXdQaHlzaWNhbFRpY2siLCAiaXNPdXRzaWRlTWljcm9UaWNrIiwgInVuaGFuZGxlZEVycm9ycyIsICJyZWplY3RpbmdFcnJvcnMiLCAicmVqZWN0aW9uTWFwcGVyIiwgImdsb2JhbFBTRCIsICJQU0QiLCAibnVtU2NoZWR1bGVkQ2FsbHMiLCAidGlja0ZpbmFsaXplcnMiLCAiRGV4aWVQcm9taXNlIiwgInBzZCIsICJoYW5kbGVSZWplY3Rpb24iLCAiZXhlY3V0ZVByb21pc2VUYXNrIiwgInRoZW5Qcm9wIiwgIm1pY3JvVGFza0lkIiwgInRvdGFsRWNob2VzIiwgInRoZW4iLCAib25GdWxmaWxsZWQiLCAib25SZWplY3RlZCIsICJfdGhpcyIsICJwb3NzaWJsZUF3YWl0IiwgImNsZWFudXAiLCAiZGVjcmVtZW50RXhwZWN0ZWRBd2FpdHMiLCAicmVzb2x2ZSIsICJyZWplY3QiLCAicHJvcGFnYXRlVG9MaXN0ZW5lciIsICJMaXN0ZW5lciIsICJuYXRpdmVBd2FpdENvbXBhdGlibGVXcmFwIiwgInR5cGUiLCAiaGFuZGxlciIsICJlcnIiLCAiUHJvbWlzZVJlamVjdCIsICJvbkZpbmFsbHkiLCAibXMiLCAiaGFuZGxlIiwgInNuYXBTaG90IiwgInpvbmUiLCAidmFsdWVzIiwgIm9uUG9zc2libGVQYXJhbGxlbGxBc3luYyIsICJyZW1haW5pbmciLCAibmV3U2NvcGUiLCAidXNlUFNEIiwgInpvbmVQcm9wcyIsICJydW5fYXRfZW5kX29mX3RoaXNfb3JfbmV4dF9waHlzaWNhbF90aWNrIiwgInBvc3NpYmxlUHJvbWlzZXMiLCAicmVzdWx0cyIsICJyZWFzb24iLCAiZmFpbHVyZSIsICJwcm9taXNlIiwgInNob3VsZEV4ZWN1dGVUaWNrIiwgImJlZ2luTWljcm9UaWNrU2NvcGUiLCAicHJvcGFnYXRlQWxsTGlzdGVuZXJzIiwgImVuZE1pY3JvVGlja1Njb3BlIiwgImV4IiwgImFkZFBvc3NpYmx5VW5oYW5kbGVkRXJyb3IiLCAibGlzdGVuZXJzIiwgImxlbiIsICJmaW5hbGl6ZVBoeXNpY2FsVGljayIsICJsaXN0ZW5lciIsICJjYiIsICJjYWxsTGlzdGVuZXIiLCAicmV0IiwgIm1hcmtFcnJvckFzSGFuZGxlZCIsICJlIiwgIndhc1Jvb3RFeGVjIiwgImNhbGxiYWNrcyIsICJ1bmhhbmRsZWRFcnJzIiwgImZpbmFsaXplcnMiLCAiZmluYWxpemVyIiwgIndyYXAiLCAiZXJyb3JDYXRjaGVyIiwgIm91dGVyU2NvcGUiLCAic3dpdGNoVG9ab25lIiwgInRhc2siLCAidGFza0NvdW50ZXIiLCAiem9uZVN0YWNrIiwgInpvbmVFY2hvZXMiLCAiem9uZV9pZF9jb3VudGVyIiwgImExIiwgImEyIiwgInBhcmVudCIsICJpbmNyZW1lbnRFeHBlY3RlZEF3YWl0cyIsICJwb3NzaWJsZVByb21pc2UiLCAicmVqZWN0aW9uIiwgInpvbmVFbnRlckVjaG8iLCAidGFyZ2V0Wm9uZSIsICJ6b25lTGVhdmVFY2hvIiwgImJFbnRlcmluZ1pvbmUiLCAiY3VycmVudFpvbmUiLCAiR2xvYmFsUHJvbWlzZSIsICJ0YXJnZXRFbnYiLCAiYTMiLCAib3V0ZXJab25lIiwgImV4ZWNJbkdsb2JhbENvbnRleHQiLCAidGVtcFRyYW5zYWN0aW9uIiwgImRiIiwgIm1vZGUiLCAic3RvcmVOYW1lcyIsICJ0cmFucyIsICJERVhJRV9WRVJTSU9OIiwgIm1heFN0cmluZyIsICJtaW5LZXkiLCAiSU5WQUxJRF9LRVlfQVJHVU1FTlQiLCAiU1RSSU5HX0VYUEVDVEVEIiwgImNvbm5lY3Rpb25zIiwgIkRCTkFNRVNfREIiLCAiUkVBRE9OTFkiLCAiUkVBRFdSSVRFIiwgImNvbWJpbmUiLCAiZmlsdGVyMSIsICJmaWx0ZXIyIiwgIkFueVJhbmdlIiwgIndvcmthcm91bmRGb3JVbmRlZmluZWRQcmltS2V5IiwgIkVudGl0eSIsICJjbXAiLCAidGEiLCAidGIiLCAiY29tcGFyZVVpbnQ4QXJyYXlzIiwgImdldFVpbnQ4QXJyYXkiLCAiY29tcGFyZUFycmF5cyIsICJhbCIsICJibCIsICJ0c1RhZyIsICJUYWJsZSIsICJ3cml0ZUxvY2tlZCIsICJ0YWJsZU5hbWUiLCAiY2hlY2tUYWJsZUluVHJhbnNhY3Rpb24iLCAia2V5T3JDcml0IiwgImluZGV4T3JDcml0IiwgImtleVBhdGhzIiwgImNvbXBvdW5kSW5kZXgiLCAiaXgiLCAia2V5UGF0aHNJblZhbGlkT3JkZXIiLCAiaWR4QnlOYW1lIiwgImlkYiIsICJlcXVhbHMiLCAicHJldkluZGV4IiwgInByZXZGaWx0ZXJGbiIsICJpbmRleCIsICJpZHgiLCAiZmlsdGVyRnVuY3Rpb24iLCAidGhlblNob3J0Y3V0IiwgIm9mZnNldCIsICJudW1Sb3dzIiwgImNvbnN0cnVjdG9yIiwgIl9zdXBlciIsICJjbGFzc18xIiwgImluaGVyaXRlZFByb3BzIiwgInByb3BOYW1lIiwgInJlYWRIb29rIiwgIkNsYXNzIiwgImNvbnRlbnQiLCAiYXV0byIsICJvYmpUb0FkZCIsICJQcm9taXNlIiwgImxhc3RSZXN1bHQiLCAia2V5T3JPYmplY3QiLCAib2JqZWN0cyIsICJrZXlzT3JPcHRpb25zIiwgIndhbnRSZXN1bHRzIiwgIm51bU9iamVjdHMiLCAib2JqZWN0c1RvQWRkIiwgIm51bUZhaWx1cmVzIiwgIm9iamVjdHNUb1B1dCIsICJrZXlzQW5kQ2hhbmdlcyIsICJjb3JlVGFibGUiLCAiZW50cnkiLCAiY2hhbmdlU3BlY3MiLCAib2Zmc2V0TWFwIiwgIm9ianMiLCAicmVzdWx0S2V5cyIsICJyZXN1bHRPYmpzIiwgImNoYW5nZXMiLCAiX2kiLCAiX2IiLCAibnVtRW50cmllcyIsICJtYXBwZWRPZmZzZXQiLCAibnVtS2V5cyIsICJFdmVudHMiLCAiY3R4IiwgImV2cyIsICJldmVudE5hbWUiLCAic3Vic2NyaWJlciIsICJhZGQiLCAiY2hhaW5GdW5jdGlvbiIsICJkZWZhdWx0RnVuY3Rpb24iLCAiYWRkQ29uZmlndXJlZEV2ZW50cyIsICJjb250ZXh0IiwgImNmZyIsICJtYWtlQ2xhc3NDb25zdHJ1Y3RvciIsICJwcm90b3R5cGUiLCAiY3JlYXRlVGFibGVDb25zdHJ1Y3RvciIsICJ0YWJsZVNjaGVtYSIsICJpc1BsYWluS2V5UmFuZ2UiLCAiaWdub3JlTGltaXRGaWx0ZXIiLCAiYWRkRmlsdGVyIiwgImFkZFJlcGxheUZpbHRlciIsICJmYWN0b3J5IiwgImlzTGltaXRGaWx0ZXIiLCAiY3VyciIsICJhZGRNYXRjaEZpbHRlciIsICJnZXRJbmRleE9yU3RvcmUiLCAiY29yZVNjaGVtYSIsICJvcGVuQ3Vyc29yIiwgIml0ZXIiLCAiY29yZVRyYW5zIiwgInNldF8xIiwgInVuaW9uIiwgImN1cnNvciIsICJhZHZhbmNlIiwgInByaW1hcnlLZXkiLCAiaXRlcmF0ZSIsICJjdXJzb3JQcm9taXNlIiwgInZhbHVlTWFwcGVyIiwgIm1hcHBlZEZuIiwgImMiLCAid3JhcHBlZEZuIiwgImFkdmFuY2VyIiwgIlByb3BNb2RTeW1ib2wiLCAiUHJvcE1vZGlmaWNhdGlvbiIsICJzcGVjIiwgInRlcm0iLCAic3VidHJhaGVuZF8xIiwgInByZWZpeFRvUmVwbGFjZSIsICJDb2xsZWN0aW9uIiwgImNvdW50IiwgInBhcnRzIiwgImxhc3RQYXJ0IiwgImxhc3RJbmRleCIsICJnZXR2YWwiLCAib3JkZXIiLCAic29ydGVyIiwgImFWYWwiLCAiYlZhbCIsICJ2YWx1ZU1hcHBlcl8xIiwgImFfMSIsICJvZmZzZXRMZWZ0IiwgInJvd3NMZWZ0IiwgImJJbmNsdWRlU3RvcEVudHJ5IiwgImluZGV4TmFtZSIsICJzZXQiLCAic3RyS2V5IiwgImZvdW5kIiwgIm1vZGlmeWVyIiwgImFueXRoaW5nTW9kaWZpZWQiLCAib3JpZ1ZhbCIsICJvdXRib3VuZCIsICJleHRyYWN0S2V5IiwgImxpbWl0IiwgInRvdGFsRmFpbHVyZXMiLCAiYXBwbHlNdXRhdGVSZXN1bHQiLCAiZXhwZWN0ZWRDb3VudCIsICJjcml0ZXJpYSIsICJkZWxldGVDYWxsYmFjayIsICJuZXh0Q2h1bmsiLCAiYWRkVmFsdWVzIiwgInB1dFZhbHVlcyIsICJwdXRLZXlzIiwgImRlbGV0ZUtleXMiLCAib3JpZ1ZhbHVlIiwgImN0eF8xIiwgInJhbmdlIiwgImNvcmVSYW5nZSIsICJjcmVhdGVDb2xsZWN0aW9uQ29uc3RydWN0b3IiLCAid2hlcmVDbGF1c2UiLCAia2V5UmFuZ2VHZW5lcmF0b3IiLCAia2V5UmFuZ2UiLCAiZXJyb3IiLCAid2hlcmVDdHgiLCAidGFibGUiLCAicmVhZGluZ0hvb2siLCAic2ltcGxlQ29tcGFyZSIsICJzaW1wbGVDb21wYXJlUmV2ZXJzZSIsICJmYWlsIiwgImNvbGxlY3Rpb25PcldoZXJlQ2xhdXNlIiwgIlQiLCAiY29sbGVjdGlvbiIsICJXaGVyZUNsYXVzZSIsICJlbXB0eUNvbGxlY3Rpb24iLCAicmFuZ2VFcXVhbCIsICJ1cHBlckZhY3RvcnkiLCAiZGlyIiwgImxvd2VyRmFjdG9yeSIsICJuZXh0Q2FzaW5nIiwgImxvd2VyS2V5IiwgInVwcGVyTmVlZGxlIiwgImxvd2VyTmVlZGxlIiwgImxlbmd0aCIsICJsbHAiLCAibHdyS2V5Q2hhciIsICJhZGRJZ25vcmVDYXNlQWxnb3JpdGhtIiwgIm1hdGNoIiwgIm5lZWRsZXMiLCAic3VmZml4IiwgInVwcGVyIiwgImxvd2VyIiwgImNvbXBhcmUiLCAidXBwZXJOZWVkbGVzIiwgImxvd2VyTmVlZGxlcyIsICJkaXJlY3Rpb24iLCAibmV4dEtleVN1ZmZpeCIsICJuZWVkbGVzTGVuIiwgImluaXREaXJlY3Rpb24iLCAibmVlZGxlQm91bmRzIiwgIm5lZWRsZSIsICJuYiIsICJjcmVhdGVSYW5nZSIsICJmaXJzdFBvc3NpYmxlTmVlZGxlIiwgImxvd2VzdFBvc3NpYmxlQ2FzaW5nIiwgImNhc2luZyIsICJsb3dlck9wZW4iLCAidXBwZXJPcGVuIiwgImluY2x1ZGVMb3dlciIsICJpbmNsdWRlVXBwZXIiLCAic3RyIiwgInJhbmdlcyIsICJhc2NlbmRpbmciLCAiZGVzY2VuZGluZyIsICJtaW4iLCAibWF4IiwgImluY2x1ZGVMb3dlcnMiLCAiaW5jbHVkZVVwcGVycyIsICJhZGRSYW5nZSIsICJuZXdSYW5nZSIsICJzb3J0RGlyZWN0aW9uIiwgInJhbmdlU29ydGVyIiwgInJhbmdlUG9zIiwgImtleUlzQmV5b25kQ3VycmVudEVudHJ5IiwgImtleUlzQmVmb3JlQ3VycmVudEVudHJ5IiwgImtleVdpdGhpbkN1cnJlbnRSYW5nZSIsICJjaGVja0tleSIsICJjcmVhdGVXaGVyZUNsYXVzZUNvbnN0cnVjdG9yIiwgIm9yQ29sbGVjdGlvbiIsICJldmVudFJlamVjdEhhbmRsZXIiLCAiZXZlbnQiLCAicHJldmVudERlZmF1bHQiLCAiREVYSUVfU1RPUkFHRV9NVVRBVEVEX0VWRU5UX05BTUUiLCAiU1RPUkFHRV9NVVRBVEVEX0RPTV9FVkVOVF9OQU1FIiwgImdsb2JhbEV2ZW50cyIsICJUcmFuc2FjdGlvbiIsICJmbkFuZFBTRCIsICJpZGJ0cmFucyIsICJpZGJkYiIsICJkYk9wZW5FcnJvciIsICJldiIsICJiV3JpdGVMb2NrIiwgInByb21pc2VMaWtlIiwgInJvb3QiLCAic3RvcmUiLCAic3BpbiIsICJjdXJyZW50V2FpdFByb21pc2UiLCAibWVtb2l6ZWRUYWJsZXMiLCAidHJhbnNhY3Rpb25Cb3VuZFRhYmxlIiwgImNyZWF0ZVRyYW5zYWN0aW9uQ29uc3RydWN0b3IiLCAiZGJzY2hlbWEiLCAiY2hyb21lVHJhbnNhY3Rpb25EdXJhYmlsaXR5IiwgIndhc0FjdGl2ZSIsICJjcmVhdGVJbmRleFNwZWMiLCAidW5pcXVlIiwgIm11bHRpIiwgImNvbXBvdW5kIiwgImlzUHJpbUtleSIsICJuYW1lRnJvbUtleVBhdGgiLCAiY3JlYXRlVGFibGVTY2hlbWEiLCAicHJpbUtleSIsICJpbmRleGVzIiwgInNhZmFyaU11bHRpU3RvcmVGaXgiLCAiZ2V0TWF4S2V5IiwgIklkYktleVJhbmdlIiwgImdldEtleUV4dHJhY3RvciIsICJnZXRTaW5nbGVQYXRoS2V5RXh0cmFjdG9yIiwgInNwbGl0IiwgImFycmF5aWZ5IiwgIl9pZF9jb3VudGVyIiwgImdldEtleVBhdGhBbGlhcyIsICJjcmVhdGVEQkNvcmUiLCAidG1wVHJhbnMiLCAiZXh0cmFjdFNjaGVtYSIsICJ0YWJsZXMiLCAiYXV0b0luY3JlbWVudCIsICJpbmRleEJ5S2V5UGF0aCIsICJtdWx0aUVudHJ5IiwgIm1ha2VJREJLZXlSYW5nZSIsICJpZGJSYW5nZSIsICJjcmVhdGVEYkNvcmVUYWJsZSIsICJtdXRhdGUiLCAiaXNBZGRPclB1dCIsICJyZXEiLCAicmVxcyIsICJlcnJvckhhbmRsZXIiLCAiYXJnczEiLCAiYXJnczIiLCAiZG9uZSIsICJxdWVyeSIsICJyZXZlcnNlIiwgInNvdXJjZSIsICJfY3Vyc29yQ29udGludWUiLCAiX2N1cnNvckNvbnRpbnVlUHJpbWFyeUtleSIsICJfY3Vyc29yQWR2YW5jZSIsICJkb1Rocm93Q3Vyc29ySXNOb3RTdGFydGVkIiwgImRvVGhyb3dDdXJzb3JJc1N0b3BwZWQiLCAiZ290T25lIiwgIml0ZXJhdGlvblByb21pc2UiLCAicmVzb2x2ZUl0ZXJhdGlvbiIsICJyZWplY3RJdGVyYXRpb24iLCAiZ3VhcmRlZENhbGxiYWNrIiwgImhhc0dldEFsbCIsICJyZXF1ZXN0IiwgIm5vbkluZmluaXRMaW1pdCIsICJpZGJLZXlSYW5nZSIsICJjb3VudF8xIiwgInJlcV8xIiwgInJlc3VsdF8xIiwgImtleUNvdW50IiwgImNhbGxiYWNrQ291bnQiLCAic3VjY2Vzc0hhbmRsZXIiLCAic2NoZW1hIiwgInRhYmxlTWFwIiwgImNyZWF0ZU1pZGRsZXdhcmVTdGFjayIsICJzdGFja0ltcGwiLCAibWlkZGxld2FyZXMiLCAiZG93biIsICJjcmVhdGUiLCAiY3JlYXRlTWlkZGxld2FyZVN0YWNrcyIsICJJREJLZXlSYW5nZSIsICJkYmNvcmUiLCAiZ2VuZXJhdGVNaWRkbGV3YXJlU3RhY2tzIiwgInN0YWNrcyIsICJ0YmwiLCAic2V0QXBpT25QbGFjZSIsICJ0YWJsZU5hbWVzIiwgInByb3BEZXNjIiwgInJlbW92ZVRhYmxlc0FwaSIsICJsb3dlclZlcnNpb25GaXJzdCIsICJydW5VcGdyYWRlcnMiLCAib2xkVmVyc2lvbiIsICJpZGJVcGdyYWRlVHJhbnMiLCAiZ2xvYmFsU2NoZW1hIiwgInBhcnNlSW5kZXhTeW50YXgiLCAicmVqZWN0VHJhbnNhY3Rpb24iLCAidHJhbnNsZXNzIiwgImNyZWF0ZVRhYmxlIiwgImdldEV4aXN0aW5nVmVyc2lvbiIsICJ1cGRhdGVUYWJsZXNBbmRJbmRleGVzIiwgInBhdGNoQ3VycmVudFZlcnNpb24iLCAiY3JlYXRlTWlzc2luZ1RhYmxlcyIsICJidWlsZEdsb2JhbFNjaGVtYSIsICJhZGp1c3RUb0V4aXN0aW5nSW5kZXhOYW1lcyIsICJkaWZmIiwgImdldFNjaGVtYURpZmYiLCAidGFibGVDaGFuZ2UiLCAiYWRkSW5kZXgiLCAibWV0YVZlcnNpb24iLCAicXVldWUiLCAidmVyc2lvbnMiLCAidmVyc1RvUnVuIiwgInZlcnNpb24iLCAib2xkU2NoZW1hIiwgIm5ld1NjaGVtYSIsICJ0dXBsZSIsICJjaGFuZ2UiLCAic3RvcmVfMSIsICJpZHhOYW1lIiwgImNvbnRlbnRVcGdyYWRlIiwgInVwZ3JhZGVTY2hlbWFfMSIsICJjb250ZW50VXBncmFkZUlzQXN5bmNfMSIsICJyZXR1cm5WYWx1ZV8xIiwgInByb21pc2VGb2xsb3dlZCIsICJkZWNyZW1lbnRvciIsICJkZWxldGVSZW1vdmVkVGFibGVzIiwgInJ1blF1ZXVlIiwgIm9sZERlZiIsICJuZXdEZWYiLCAib2xkSW5kZXhlcyIsICJuZXdJbmRleGVzIiwgIm9sZElkeCIsICJuZXdJZHgiLCAic3RvcmVOYW1lIiwgImRiU3RvcmVOYW1lcyIsICJqIiwgImlkYmluZGV4IiwgInJlYWRHbG9iYWxTY2hlbWEiLCAidmVyaWZ5SW5zdGFsbGVkU2NoZW1hIiwgImluc3RhbGxlZFNjaGVtYSIsICJjaCIsICJkZXhpZU5hbWUiLCAiaW5kZXhTcGVjIiwgInByaW1LZXlBbmRJbmRleGVzIiwgImluZGV4TnVtIiwgIlZlcnNpb24iLCAic3RvcmVzIiwgIm91dFNjaGVtYSIsICJzdG9yZXNTcGVjIiwgInVwZ3JhZGVGdW5jdGlvbiIsICJjcmVhdGVWZXJzaW9uQ29uc3RydWN0b3IiLCAidmVyc2lvbk51bWJlciIsICJnZXREYk5hbWVzVGFibGUiLCAiaW5kZXhlZERCIiwgImRiTmFtZXNEQiIsICJEZXhpZSIsICJoYXNEYXRhYmFzZXNOYXRpdmUiLCAiZ2V0RGF0YWJhc2VOYW1lcyIsICJpbmZvcyIsICJpbmZvIiwgIl9vbkRhdGFiYXNlQ3JlYXRlZCIsICJfb25EYXRhYmFzZURlbGV0ZWQiLCAidmlwIiwgImlkYlJlYWR5IiwgImlzU2FmYXJpIiwgImludGVydmFsSWQiLCAidHJ5SWRiIiwgImlzRW1wdHlSYW5nZSIsICJub2RlIiwgIlJhbmdlU2V0IiwgImZyb21PclRyZWUiLCAicmFuZ2VTZXQiLCAibWVyZ2VSYW5nZXMiLCAiZ2V0UmFuZ2VTZXRJdGVyYXRvciIsICJ0YXJnZXQiLCAibGVmdCIsICJyaWdodCIsICJyZWJhbGFuY2UiLCAicmlnaHRXYXNDdXRPZmYiLCAibmV3U2V0IiwgIl9hZGRSYW5nZVNldCIsICJyIiwgInJhbmdlc092ZXJsYXAiLCAicmFuZ2VTZXQxIiwgInJhbmdlU2V0MiIsICJpMSIsICJuZXh0UmVzdWx0MSIsICJpMiIsICJuZXh0UmVzdWx0MiIsICJzdGF0ZSIsICJrZXlQcm92aWRlZCIsICJyb290Q2xvbmUiLCAib2xkUm9vdFJpZ2h0IiwgImNvbXB1dGVEZXB0aCIsICJleHRlbmRPYnNlcnZhYmlsaXR5U2V0IiwgInBhcnQiLCAib2JzU2V0c092ZXJsYXAiLCAib3MxIiwgIm9zMiIsICJjYWNoZSIsICJ1bnNpZ25hbGVkUGFydHMiLCAiaXNUYXNrRW5xdWV1ZWQiLCAic2lnbmFsU3Vic2NyaWJlcnNMYXppbHkiLCAib3B0aW1pc3RpYyIsICJzaWduYWxTdWJzY3JpYmVyc05vdyIsICJ1cGRhdGVkUGFydHMiLCAiZGVsZXRlQWZmZWN0ZWRDYWNoZUVudHJpZXMiLCAicXVlcmllc1RvU2lnbmFsIiwgInRibENhY2hlIiwgImNvbGxlY3RUYWJsZVN1YnNjcmliZXJzIiwgImRiTmFtZSIsICJyZXF1ZXJ5IiwgIm91dFF1ZXJpZXNUb1NpZ25hbCIsICJ1cGRhdGVkRW50cnlMaXN0cyIsICJlbnRyaWVzIiwgImZpbHRlcmVkRW50cmllcyIsICJfYyIsICJlbnRyaWVzXzEiLCAiX2QiLCAidXBkYXRlZEVudHJ5TGlzdHNfMSIsICJfZSIsICJkZXhpZU9wZW4iLCAib3BlbkNhbmNlbGxlciIsICJuYXRpdmVWZXJUb09wZW4iLCAic2NoZW1hUGF0Y2hNb2RlIiwgInRocm93SWZDYW5jZWxsZWQiLCAicmVzb2x2ZURiUmVhZHkiLCAidXBncmFkZVRyYW5zYWN0aW9uIiwgIndhc0NyZWF0ZWQiLCAidHJ5T3BlbkRCIiwgImRlbHJlcSIsICJvbGRWZXIiLCAib2JqZWN0U3RvcmVOYW1lcyIsICJzYWZhcmkxNFdvcmthcm91bmQiLCAiZmlyZVJlbWFpbmRlcnMiLCAicmVtYWluZGVyc18xIiwgImV2ZXJ5dGhpbmdfMSIsICJhd2FpdEl0ZXJhdG9yIiwgIml0ZXJhdG9yIiwgImNhbGxOZXh0IiwgImRvVGhyb3ciLCAib25TdWNjZXNzIiwgInN0ZXAiLCAib25FcnJvciIsICJnZXROZXh0IiwgIm5leHQiLCAiZXh0cmFjdFRyYW5zYWN0aW9uQXJncyIsICJfdGFibGVBcmdzXyIsICJzY29wZUZ1bmMiLCAiZW50ZXJUcmFuc2FjdGlvblNjb3BlIiwgInBhcmVudFRyYW5zYWN0aW9uIiwgInNjb3BlRnVuY0lzQXN5bmMiLCAicmV0dXJuVmFsdWUiLCAicGFkIiwgImNyZWF0ZVZpcnR1YWxJbmRleE1pZGRsZXdhcmUiLCAiaW5kZXhMb29rdXAiLCAiYWxsVmlydHVhbEluZGV4ZXMiLCAiYWRkVmlydHVhbEluZGV4ZXMiLCAia2V5VGFpbCIsICJsb3dMZXZlbEluZGV4IiwgImtleVBhdGhBbGlhcyIsICJpbmRleExpc3QiLCAia2V5TGVuZ3RoIiwgImlzVmlydHVhbCIsICJ2aXJ0dWFsSW5kZXgiLCAidmlydHVhbEtleVBhdGgiLCAiZmluZEJlc3RJbmRleCIsICJ0cmFuc2xhdGVSYW5nZSIsICJ0cmFuc2xhdGVSZXF1ZXN0IiwgImNyZWF0ZVZpcnR1YWxDdXJzb3IiLCAiX2NvbnRpbnVlIiwgInZpcnR1YWxDdXJzb3IiLCAidmlydHVhbEluZGV4TWlkZGxld2FyZSIsICJnZXRPYmplY3REaWZmIiwgInByZngiLCAiYXAiLCAiYnAiLCAiYXBUeXBlTmFtZSIsICJicFR5cGVOYW1lIiwgImdldEVmZmVjdGl2ZUtleXMiLCAiaG9va3NNaWRkbGV3YXJlIiwgImRvd25Db3JlIiwgImRvd25UYWJsZSIsICJ0YWJsZU1pZGRsZXdhcmUiLCAiZHhUcmFucyIsICJkZWxldGluZyIsICJjcmVhdGluZyIsICJ1cGRhdGluZyIsICJhZGRQdXRPckRlbGV0ZSIsICJkZWxldGVSYW5nZSIsICJnZXRFeGlzdGluZ1ZhbHVlcyIsICJleGlzdGluZ1ZhbHVlcyIsICJjb250ZXh0cyIsICJleGlzdGluZ1ZhbHVlIiwgImdlbmVyYXRlZFByaW1hcnlLZXkiLCAib2JqZWN0RGlmZiIsICJhZGRpdGlvbmFsQ2hhbmdlc18xIiwgInJlcXVlc3RlZFZhbHVlXzEiLCAiZGVsZXRlTmV4dENodW5rIiwgImVmZmVjdGl2ZUtleXMiLCAiZ2V0RnJvbVRyYW5zYWN0aW9uQ2FjaGUiLCAiY2xvbmUiLCAiY2FjaGVFeGlzdGluZ1ZhbHVlc01pZGRsZXdhcmUiLCAiY29yZSIsICJjYWNoZWRSZXN1bHQiLCAiaXNDYWNoYWJsZUNvbnRleHQiLCAiaXNDYWNoYWJsZVJlcXVlc3QiLCAib2JzZXJ2YWJpbGl0eU1pZGRsZXdhcmUiLCAiRlVMTF9SQU5HRSIsICJpbmRleGVzV2l0aEF1dG9JbmNQSyIsICJ0YWJsZUNsb25lIiwgIm11dGF0ZWRQYXJ0cyIsICJnZXRSYW5nZVNldCIsICJwa1JhbmdlU2V0IiwgImRlbHNSYW5nZVNldCIsICJpZCIsICJuZXdPYmpzIiwgIm9sZENhY2hlIiwgIm9sZE9ianMiLCAidHJhY2tBZmZlY3RlZEluZGV4ZXMiLCAiaWR4VmFscyIsICJwa1BvcyIsICJwayIsICJnZXRSYW5nZSIsICJyZWFkU3Vic2NyaWJlcnMiLCAibWV0aG9kIiwgInN1YnNjciIsICJpc0xpdmVRdWVyeSIsICJjYWNoYWJsZSIsICJvYnNTZXQiLCAicGtSYW5nZVNldF8xIiwgImRlbHNSYW5nZVNldF8xIiwgInF1ZXJpZWRJbmRleCIsICJxdWVyaWVkUmFuZ2VzIiwgImtleXNQcm9taXNlXzEiLCAicmVzdWx0aW5nS2V5cyIsICJwS2V5cyIsICJjdXJzb3JfMSIsICJ3YW50VmFsdWVzXzEiLCAicGtleSIsICJhZGRBZmZlY3RlZEluZGV4IiwgImFkZEtleU9yS2V5cyIsICJfIiwgIm9sZEtleSIsICJuZXdLZXkiLCAiYWRqdXN0T3B0aW1pc3RpY0Zyb21GYWlsdXJlcyIsICJudW1CdWxrT3BzIiwgImlzQWJvdmVMb3dlciIsICJpc0JlbG93VXBwZXIiLCAiaXNXaXRoaW5SYW5nZSIsICJhcHBseU9wdGltaXN0aWNPcHMiLCAib3BzIiwgImNhY2hlRW50cnkiLCAiaW1tdXRhYmxlIiwgInF1ZXJ5UmFuZ2UiLCAiZXh0cmFjdFByaW1LZXkiLCAiZXh0cmFjdEluZGV4IiwgImV4dHJhY3RMb3dMZXZlbEluZGV4IiwgImZpbmFsUmVzdWx0IiwgIm9wIiwgIm1vZGlmZWRSZXN1bHQiLCAiaW5jbHVkZWRWYWx1ZXMiLCAiaW5jbHVkZWRQS3MiLCAia2V5U2V0XzEiLCAia2V5c1RvRGVsZXRlXzEiLCAicmFuZ2VfMSIsICJhcmVSYW5nZXNFcXVhbCIsICJyMSIsICJyMiIsICJjb21wYXJlTG93ZXJzIiwgImxvd2VyMSIsICJsb3dlcjIiLCAibG93ZXJPcGVuMSIsICJsb3dlck9wZW4yIiwgImNvbXBhcmVVcHBlcnMiLCAidXBwZXIxIiwgInVwcGVyMiIsICJ1cHBlck9wZW4xIiwgInVwcGVyT3BlbjIiLCAiaXNTdXBlclJhbmdlIiwgImZpbmRDb21wYXRpYmxlUXVlcnkiLCAicXVlcmllcyIsICJlcXVhbEVudHJ5IiwgInN1cGVyRW50cnkiLCAiY291bnRRdWVyeSIsICJzdWJzY3JpYmVUb0NhY2hlRW50cnkiLCAiY29udGFpbmVyIiwgInNpZ25hbCIsICJlbnF1ZUZvckRlbGV0aW9uIiwgImNhY2hlTWlkZGxld2FyZSIsICJjb3JlTVciLCAiYWNfMSIsICJlbmRUcmFuc2FjdGlvbiIsICJ3YXNDb21taXR0ZWQiLCAiYWZmZWN0ZWRTdWJzY3JpYmVyc18xIiwgInN0b3Jlc18xIiwgIl9mIiwgIl9nIiwgIl9oIiwgImZyZWV6ZVJlc3VsdHMiLCAibW9kUmVzIiwgInRhYmxlTVciLCAicmVxV2l0aFJlc29sdmVkS2V5cyIsICJ2YWx1ZVdpdGhLZXkiLCAiYWRqdXN0ZWRSZXEiLCAiZXhhY3RNYXRjaCIsICJ2aXBpZnkiLCAidmlwRGIiLCAicmVjZWl2ZXIiLCAiZGVwcyIsICJhZGRvbnMiLCAic3Vic2NyaWJlIiwgImJTdGlja3kiLCAiZGJfMSIsICJ1bnN1YnNjcmliZSIsICJ2aXBEQiIsICJ0eCIsICJhZGRvbiIsICJ2ZXJzaW9uSW5zdGFuY2UiLCAic3RhY2siLCAibGV2ZWwiLCAibXciLCAiZGlzYWJsZUF1dG9PcGVuIiwgImNsb3NlT3B0aW9ucyIsICJoYXNJbnZhbGlkQXJndW1lbnRzIiwgImRvRGVsZXRlIiwgIm9ubHlJZkNvbXBhdGlibGUiLCAiaWRiTW9kZSIsICJlbnRlclRyYW5zYWN0aW9uIiwgInN5bWJvbE9ic2VydmFibGUiLCAiT2JzZXJ2YWJsZSIsICJjb21wbGV0ZSIsICJkb21EZXBzIiwgImxpdmVRdWVyeSIsICJxdWVyaWVyIiwgImhhc1ZhbHVlIiwgImN1cnJlbnRWYWx1ZSIsICJvYnNlcnZhYmxlIiwgIm9ic2VydmVyIiwgImV4ZWN1dGUiLCAiY2xvc2VkIiwgImFib3J0Q29udHJvbGxlciIsICJhY2N1bU11dHMiLCAiY3VycmVudE9icyIsICJzdWJzY3JpcHRpb24iLCAic3RhcnRlZExpc3RlbmluZyIsICJtdXRhdGlvbkxpc3RlbmVyIiwgImRvUXVlcnkiLCAiX2RvUXVlcnkiLCAic2hvdWxkTm90aWZ5IiwgIl9EZXhpZSIsICJkYXRhYmFzZU5hbWUiLCAiZ2VuZXJhdG9yRm4iLCAicHJvbWlzZU9yRnVuY3Rpb24iLCAib3B0aW9uYWxUaW1lb3V0IiwgIkRlYnVnLmRlYnVnIiwgIkRlYnVnLnNldERlYnVnIiwgInByb3BhZ2F0aW5nTG9jYWxseSIsICJldmVudF8xIiwgImRldGFpbCIsICJwcm9wYWdhdGVMb2NhbGx5IiwgInVwZGF0ZVBhcnRzIiwgIndhc01lIiwgImJjIiwgImNyZWF0ZUJDIiwgImNoYW5nZWRQYXJ0cyIsICJjb25uZWN0aW9uc18xIiwgInJlbW92ZSIsICJyZXBsYWNlUHJlZml4IiwgIm5hbWVkRXhwb3J0cyIsICJwcm94eU1hcmtlciIsICJjcmVhdGVFbmRwb2ludCIsICJyZWxlYXNlUHJveHkiLCAiZmluYWxpemVyIiwgInRocm93TWFya2VyIiwgImlzT2JqZWN0IiwgInZhbCIsICJwcm94eVRyYW5zZmVySGFuZGxlciIsICJvYmoiLCAicG9ydDEiLCAicG9ydDIiLCAiZXhwb3NlIiwgInBvcnQiLCAid3JhcCIsICJ0aHJvd1RyYW5zZmVySGFuZGxlciIsICJ2YWx1ZSIsICJzZXJpYWxpemVkIiwgInRyYW5zZmVySGFuZGxlcnMiLCAiaXNBbGxvd2VkT3JpZ2luIiwgImFsbG93ZWRPcmlnaW5zIiwgIm9yaWdpbiIsICJhbGxvd2VkT3JpZ2luIiwgImVwIiwgImNhbGxiYWNrIiwgImV2IiwgImlkIiwgInR5cGUiLCAicGF0aCIsICJhcmd1bWVudExpc3QiLCAiZnJvbVdpcmVWYWx1ZSIsICJyZXR1cm5WYWx1ZSIsICJwYXJlbnQiLCAicHJvcCIsICJyYXdWYWx1ZSIsICJwcm94eSIsICJ0cmFuc2ZlciIsICJ3aXJlVmFsdWUiLCAidHJhbnNmZXJhYmxlcyIsICJ0b1dpcmVWYWx1ZSIsICJjbG9zZUVuZFBvaW50IiwgImVycm9yIiwgImlzTWVzc2FnZVBvcnQiLCAiZW5kcG9pbnQiLCAidGFyZ2V0IiwgImNyZWF0ZVByb3h5IiwgInRocm93SWZQcm94eVJlbGVhc2VkIiwgImlzUmVsZWFzZWQiLCAicmVsZWFzZUVuZHBvaW50IiwgInJlcXVlc3RSZXNwb25zZU1lc3NhZ2UiLCAicHJveHlDb3VudGVyIiwgInByb3h5RmluYWxpemVycyIsICJuZXdDb3VudCIsICJyZWdpc3RlclByb3h5IiwgInVucmVnaXN0ZXJQcm94eSIsICJpc1Byb3h5UmVsZWFzZWQiLCAiX3RhcmdldCIsICJyIiwgInAiLCAiX3RoaXNBcmciLCAicmF3QXJndW1lbnRMaXN0IiwgImxhc3QiLCAicHJvY2Vzc0FyZ3VtZW50cyIsICJteUZsYXQiLCAiYXJyIiwgInByb2Nlc3NlZCIsICJ2IiwgInRyYW5zZmVyQ2FjaGUiLCAidHJhbnNmZXJzIiwgInRvV2lyZVZhbHVlIiwgInZhbHVlIiwgIm5hbWUiLCAiaGFuZGxlciIsICJ0cmFuc2ZlckhhbmRsZXJzIiwgInNlcmlhbGl6ZWRWYWx1ZSIsICJ0cmFuc2ZlcmFibGVzIiwgInRyYW5zZmVyQ2FjaGUiLCAiZnJvbVdpcmVWYWx1ZSIsICJyZXF1ZXN0UmVzcG9uc2VNZXNzYWdlIiwgImVwIiwgIm1zZyIsICJ0cmFuc2ZlcnMiLCAicmVzb2x2ZSIsICJpZCIsICJnZW5lcmF0ZVVVSUQiLCAibCIsICJldiIsICJtYXhUaW1lIiwgIm1pblRpbWUiLCAic2Vjb25kc0luSG91ciIsICJzZWNvbmRzSW5EYXkiLCAic2Vjb25kc0luSG91ciIsICJzZWNvbmRzSW5XZWVrIiwgInNlY29uZHNJblllYXIiLCAic2Vjb25kc0luTW9udGgiLCAic2Vjb25kc0luUXVhcnRlciIsICJjb25zdHJ1Y3RGcm9tU3ltYm9sIiwgImNvbnN0cnVjdEZyb20iLCAiZGF0ZSIsICJ2YWx1ZSIsICJjb25zdHJ1Y3RGcm9tU3ltYm9sIiwgInRvRGF0ZSIsICJhcmd1bWVudCIsICJjb250ZXh0IiwgImNvbnN0cnVjdEZyb20iLCAiYWRkRGF5cyIsICJkYXRlIiwgImFtb3VudCIsICJvcHRpb25zIiwgIl9kYXRlIiwgInRvRGF0ZSIsICJjb25zdHJ1Y3RGcm9tIiwgImlzQWZ0ZXIiLCAiZGF0ZSIsICJkYXRlVG9Db21wYXJlIiwgInRvRGF0ZSIsICJpbXBvcnRfZGV4aWUiLCAiRGV4aWVTeW1ib2wiLCAiRGV4aWUiLCAiX0RleGllIiwgImxpdmVRdWVyeSIsICJtZXJnZVJhbmdlcyIsICJyYW5nZXNPdmVybGFwIiwgIlJhbmdlU2V0IiwgImNtcCIsICJFbnRpdHkiLCAiUHJvcE1vZFN5bWJvbCIsICJQcm9wTW9kaWZpY2F0aW9uIiwgInJlcGxhY2VQcmVmaXgiLCAiYWRkIiwgInJlbW92ZSIsICJpbXBvcnRfd3JhcHBlcl9kZWZhdWx0IiwgIkRleGllIiwgIkRhdGFiYXNlU3RvcmFnZSIsICJpbXBvcnRfd3JhcHBlcl9kZWZhdWx0IiwgIktleVZhbHVlU3RvcmUiLCAiZGIiLCAia2V5IiwgInZhbGlkYXRlIiwgImVudHJ5IiwgImlzQWZ0ZXIiLCAidmFsdWUiLCAiZXhwaXJlQXQiLCAia2V5VmFsdWUiLCAiY29tcGxldGlvblZlcnNpb25LZXkiLCAiVFRMX0RBWVMiLCAiZ2V0RXhwaXJlVGltZSIsICJhZGREYXlzIiwgImlzUGFja2FnZVF1ZXJ5IiwgInEiLCAiV29ya2VySGFuZGxlciIsICJkYiIsICJrZXlWYWx1ZSIsICJsYWJlbCIsICJxdWVyeSIsICJwa2dQYXRoIiwgImZpbmRQYWNrYWdlUGF0aEZyb21Db250ZXh0IiwgImZpbHRlciIsICJlbnRyeSIsICJzeW1ib2xIb3ZlckRvYyIsICJ2YWx1ZSIsICJwYWNrYWdlTmFtZSIsICJjb250ZXh0IiwgInBhY2thZ2VQYXRoIiwgInN5bWJvbCIsICJjb21wbGV0aW9uRnJvbVN5bWJvbCIsICJwYWNrYWdlcyIsICJidWlsdGlucyIsICJwYWNrYWdlQ29tcGxldGlvbnMiLCAiaXRlbSIsICJjb21wbGV0aW9uRnJvbVBhY2thZ2UiLCAic3ltYm9sc0NvbXBsZXRpb25zIiwgImltcG9ydENvbXBsZXRpb25Gcm9tUGFja2FnZSIsICJjb3VudCIsICJyc3AiLCAiZGF0YSIsICJjb25zdHJ1Y3RQYWNrYWdlcyIsICJzeW1ib2xzIiwgImNvbnN0cnVjdFN5bWJvbHMiLCAiZXhwb3NlIiwgIlN5bWJvbFNvdXJjZUtleSIsICJJbXBvcnRDbGF1c2VUeXBlIiwgImdldFByZWZpeCIsICJzdHIiLCAic3R1YlJhbmdlIiwgInBhY2thZ2VDb21wbGV0aW9uS2luZCIsICJkaXNjYXJkSWZFbXB0eSIsICJkZWZhdWx0cyIsICJzdHJpbmdUb01hcmtkb3duIiwgIm5hbWVzIiwgInBhdGhzIiwgImRvY3MiLCAibmFtZSIsICJpIiwgImRldGFpbHMiLCAic2lnbmF0dXJlcyIsICJpbnNlcnRUZXh0cyIsICJpbnNlcnRUZXh0UnVsZXMiLCAia2luZHMiLCAiaW1wb3J0UGF0aCIsICJkb2N1bWVudGF0aW9uIiwgImltcG9ydFBhY2thZ2VUZXh0RWRpdCIsICJpbXBvcnRzIiwgInRleHQiLCAidiIsICJjdHgiLCAiY29tcGxldGlvbkl0ZW0iLCAidGV4dEVkaXRzIiwgInBrZ05hbWVGcm9tUGF0aCIsICJzbGFzaFBvcyIsICJwa2dOYW1lIiwgImdvRG9jRG9tYWluIiwgInNpZ25hdHVyZSIsICJkb2MiLCAibGlua0xhYmVsIl0KfQo=
