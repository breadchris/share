(() => {
  // node_modules/monaco-editor/esm/vs/base/common/errors.js
  var ErrorHandler = class {
    constructor() {
      this.listeners = [];
      this.unexpectedErrorHandler = function(e) {
        setTimeout(() => {
          if (e.stack) {
            if (ErrorNoTelemetry.isErrorNoTelemetry(e)) {
              throw new ErrorNoTelemetry(e.message + "\n\n" + e.stack);
            }
            throw new Error(e.message + "\n\n" + e.stack);
          }
          throw e;
        }, 0);
      };
    }
    emit(e) {
      this.listeners.forEach((listener) => {
        listener(e);
      });
    }
    onUnexpectedError(e) {
      this.unexpectedErrorHandler(e);
      this.emit(e);
    }
    // For external errors, we don't want the listeners to be called
    onUnexpectedExternalError(e) {
      this.unexpectedErrorHandler(e);
    }
  };
  var errorHandler = new ErrorHandler();
  function onUnexpectedError(e) {
    if (!isCancellationError(e)) {
      errorHandler.onUnexpectedError(e);
    }
    return void 0;
  }
  function transformErrorForSerialization(error) {
    if (error instanceof Error) {
      const { name, message } = error;
      const stack = error.stacktrace || error.stack;
      return {
        $isError: true,
        name,
        message,
        stack,
        noTelemetry: ErrorNoTelemetry.isErrorNoTelemetry(error)
      };
    }
    return error;
  }
  var canceledName = "Canceled";
  function isCancellationError(error) {
    if (error instanceof CancellationError) {
      return true;
    }
    return error instanceof Error && error.name === canceledName && error.message === canceledName;
  }
  var CancellationError = class extends Error {
    constructor() {
      super(canceledName);
      this.name = this.message;
    }
  };
  var ErrorNoTelemetry = class _ErrorNoTelemetry extends Error {
    constructor(msg) {
      super(msg);
      this.name = "CodeExpectedError";
    }
    static fromError(err) {
      if (err instanceof _ErrorNoTelemetry) {
        return err;
      }
      const result = new _ErrorNoTelemetry();
      result.message = err.message;
      result.stack = err.stack;
      return result;
    }
    static isErrorNoTelemetry(err) {
      return err.name === "CodeExpectedError";
    }
  };
  var BugIndicatingError = class _BugIndicatingError extends Error {
    constructor(message) {
      super(message || "An unexpected bug occurred.");
      Object.setPrototypeOf(this, _BugIndicatingError.prototype);
    }
  };

  // node_modules/monaco-editor/esm/vs/base/common/functional.js
  function createSingleCallFunction(fn, fnDidRunCallback) {
    const _this = this;
    let didCall = false;
    let result;
    return function() {
      if (didCall) {
        return result;
      }
      didCall = true;
      if (fnDidRunCallback) {
        try {
          result = fn.apply(_this, arguments);
        } finally {
          fnDidRunCallback();
        }
      } else {
        result = fn.apply(_this, arguments);
      }
      return result;
    };
  }

  // node_modules/monaco-editor/esm/vs/base/common/iterator.js
  var Iterable;
  (function(Iterable2) {
    function is(thing) {
      return thing && typeof thing === "object" && typeof thing[Symbol.iterator] === "function";
    }
    Iterable2.is = is;
    const _empty2 = Object.freeze([]);
    function empty() {
      return _empty2;
    }
    Iterable2.empty = empty;
    function* single(element) {
      yield element;
    }
    Iterable2.single = single;
    function wrap(iterableOrElement) {
      if (is(iterableOrElement)) {
        return iterableOrElement;
      } else {
        return single(iterableOrElement);
      }
    }
    Iterable2.wrap = wrap;
    function from(iterable) {
      return iterable || _empty2;
    }
    Iterable2.from = from;
    function* reverse(array) {
      for (let i = array.length - 1; i >= 0; i--) {
        yield array[i];
      }
    }
    Iterable2.reverse = reverse;
    function isEmpty(iterable) {
      return !iterable || iterable[Symbol.iterator]().next().done === true;
    }
    Iterable2.isEmpty = isEmpty;
    function first(iterable) {
      return iterable[Symbol.iterator]().next().value;
    }
    Iterable2.first = first;
    function some(iterable, predicate) {
      for (const element of iterable) {
        if (predicate(element)) {
          return true;
        }
      }
      return false;
    }
    Iterable2.some = some;
    function find(iterable, predicate) {
      for (const element of iterable) {
        if (predicate(element)) {
          return element;
        }
      }
      return void 0;
    }
    Iterable2.find = find;
    function* filter(iterable, predicate) {
      for (const element of iterable) {
        if (predicate(element)) {
          yield element;
        }
      }
    }
    Iterable2.filter = filter;
    function* map(iterable, fn) {
      let index = 0;
      for (const element of iterable) {
        yield fn(element, index++);
      }
    }
    Iterable2.map = map;
    function* concat(...iterables) {
      for (const iterable of iterables) {
        yield* iterable;
      }
    }
    Iterable2.concat = concat;
    function reduce(iterable, reducer, initialValue) {
      let value = initialValue;
      for (const element of iterable) {
        value = reducer(value, element);
      }
      return value;
    }
    Iterable2.reduce = reduce;
    function* slice(arr, from2, to = arr.length) {
      if (from2 < 0) {
        from2 += arr.length;
      }
      if (to < 0) {
        to += arr.length;
      } else if (to > arr.length) {
        to = arr.length;
      }
      for (; from2 < to; from2++) {
        yield arr[from2];
      }
    }
    Iterable2.slice = slice;
    function consume(iterable, atMost = Number.POSITIVE_INFINITY) {
      const consumed = [];
      if (atMost === 0) {
        return [consumed, iterable];
      }
      const iterator = iterable[Symbol.iterator]();
      for (let i = 0; i < atMost; i++) {
        const next = iterator.next();
        if (next.done) {
          return [consumed, Iterable2.empty()];
        }
        consumed.push(next.value);
      }
      return [consumed, { [Symbol.iterator]() {
        return iterator;
      } }];
    }
    Iterable2.consume = consume;
    async function asyncToArray(iterable) {
      const result = [];
      for await (const item of iterable) {
        result.push(item);
      }
      return Promise.resolve(result);
    }
    Iterable2.asyncToArray = asyncToArray;
  })(Iterable || (Iterable = {}));

  // node_modules/monaco-editor/esm/vs/base/common/lifecycle.js
  var TRACK_DISPOSABLES = false;
  var disposableTracker = null;
  function setDisposableTracker(tracker) {
    disposableTracker = tracker;
  }
  if (TRACK_DISPOSABLES) {
    const __is_disposable_tracked__ = "__is_disposable_tracked__";
    setDisposableTracker(new class {
      trackDisposable(x) {
        const stack = new Error("Potentially leaked disposable").stack;
        setTimeout(() => {
          if (!x[__is_disposable_tracked__]) {
            console.log(stack);
          }
        }, 3e3);
      }
      setParent(child, parent) {
        if (child && child !== Disposable.None) {
          try {
            child[__is_disposable_tracked__] = true;
          } catch (_a4) {
          }
        }
      }
      markAsDisposed(disposable) {
        if (disposable && disposable !== Disposable.None) {
          try {
            disposable[__is_disposable_tracked__] = true;
          } catch (_a4) {
          }
        }
      }
      markAsSingleton(disposable) {
      }
    }());
  }
  function trackDisposable(x) {
    disposableTracker === null || disposableTracker === void 0 ? void 0 : disposableTracker.trackDisposable(x);
    return x;
  }
  function markAsDisposed(disposable) {
    disposableTracker === null || disposableTracker === void 0 ? void 0 : disposableTracker.markAsDisposed(disposable);
  }
  function setParentOfDisposable(child, parent) {
    disposableTracker === null || disposableTracker === void 0 ? void 0 : disposableTracker.setParent(child, parent);
  }
  function setParentOfDisposables(children, parent) {
    if (!disposableTracker) {
      return;
    }
    for (const child of children) {
      disposableTracker.setParent(child, parent);
    }
  }
  function dispose(arg) {
    if (Iterable.is(arg)) {
      const errors = [];
      for (const d of arg) {
        if (d) {
          try {
            d.dispose();
          } catch (e) {
            errors.push(e);
          }
        }
      }
      if (errors.length === 1) {
        throw errors[0];
      } else if (errors.length > 1) {
        throw new AggregateError(errors, "Encountered errors while disposing of store");
      }
      return Array.isArray(arg) ? [] : arg;
    } else if (arg) {
      arg.dispose();
      return arg;
    }
  }
  function combinedDisposable(...disposables) {
    const parent = toDisposable(() => dispose(disposables));
    setParentOfDisposables(disposables, parent);
    return parent;
  }
  function toDisposable(fn) {
    const self2 = trackDisposable({
      dispose: createSingleCallFunction(() => {
        markAsDisposed(self2);
        fn();
      })
    });
    return self2;
  }
  var DisposableStore = class _DisposableStore {
    constructor() {
      this._toDispose = /* @__PURE__ */ new Set();
      this._isDisposed = false;
      trackDisposable(this);
    }
    /**
     * Dispose of all registered disposables and mark this object as disposed.
     *
     * Any future disposables added to this object will be disposed of on `add`.
     */
    dispose() {
      if (this._isDisposed) {
        return;
      }
      markAsDisposed(this);
      this._isDisposed = true;
      this.clear();
    }
    /**
     * @return `true` if this object has been disposed of.
     */
    get isDisposed() {
      return this._isDisposed;
    }
    /**
     * Dispose of all registered disposables but do not mark this object as disposed.
     */
    clear() {
      if (this._toDispose.size === 0) {
        return;
      }
      try {
        dispose(this._toDispose);
      } finally {
        this._toDispose.clear();
      }
    }
    /**
     * Add a new {@link IDisposable disposable} to the collection.
     */
    add(o) {
      if (!o) {
        return o;
      }
      if (o === this) {
        throw new Error("Cannot register a disposable on itself!");
      }
      setParentOfDisposable(o, this);
      if (this._isDisposed) {
        if (!_DisposableStore.DISABLE_DISPOSED_WARNING) {
          console.warn(new Error("Trying to add a disposable to a DisposableStore that has already been disposed of. The added object will be leaked!").stack);
        }
      } else {
        this._toDispose.add(o);
      }
      return o;
    }
    /**
     * Deletes the value from the store, but does not dispose it.
     */
    deleteAndLeak(o) {
      if (!o) {
        return;
      }
      if (this._toDispose.has(o)) {
        this._toDispose.delete(o);
        setParentOfDisposable(o, null);
      }
    }
  };
  DisposableStore.DISABLE_DISPOSED_WARNING = false;
  var Disposable = class {
    constructor() {
      this._store = new DisposableStore();
      trackDisposable(this);
      setParentOfDisposable(this._store, this);
    }
    dispose() {
      markAsDisposed(this);
      this._store.dispose();
    }
    /**
     * Adds `o` to the collection of disposables managed by this object.
     */
    _register(o) {
      if (o === this) {
        throw new Error("Cannot register a disposable on itself!");
      }
      return this._store.add(o);
    }
  };
  Disposable.None = Object.freeze({ dispose() {
  } });

  // node_modules/monaco-editor/esm/vs/base/common/linkedList.js
  var Node = class _Node {
    constructor(element) {
      this.element = element;
      this.next = _Node.Undefined;
      this.prev = _Node.Undefined;
    }
  };
  Node.Undefined = new Node(void 0);
  var LinkedList = class {
    constructor() {
      this._first = Node.Undefined;
      this._last = Node.Undefined;
      this._size = 0;
    }
    get size() {
      return this._size;
    }
    isEmpty() {
      return this._first === Node.Undefined;
    }
    clear() {
      let node = this._first;
      while (node !== Node.Undefined) {
        const next = node.next;
        node.prev = Node.Undefined;
        node.next = Node.Undefined;
        node = next;
      }
      this._first = Node.Undefined;
      this._last = Node.Undefined;
      this._size = 0;
    }
    unshift(element) {
      return this._insert(element, false);
    }
    push(element) {
      return this._insert(element, true);
    }
    _insert(element, atTheEnd) {
      const newNode = new Node(element);
      if (this._first === Node.Undefined) {
        this._first = newNode;
        this._last = newNode;
      } else if (atTheEnd) {
        const oldLast = this._last;
        this._last = newNode;
        newNode.prev = oldLast;
        oldLast.next = newNode;
      } else {
        const oldFirst = this._first;
        this._first = newNode;
        newNode.next = oldFirst;
        oldFirst.prev = newNode;
      }
      this._size += 1;
      let didRemove = false;
      return () => {
        if (!didRemove) {
          didRemove = true;
          this._remove(newNode);
        }
      };
    }
    shift() {
      if (this._first === Node.Undefined) {
        return void 0;
      } else {
        const res = this._first.element;
        this._remove(this._first);
        return res;
      }
    }
    pop() {
      if (this._last === Node.Undefined) {
        return void 0;
      } else {
        const res = this._last.element;
        this._remove(this._last);
        return res;
      }
    }
    _remove(node) {
      if (node.prev !== Node.Undefined && node.next !== Node.Undefined) {
        const anchor = node.prev;
        anchor.next = node.next;
        node.next.prev = anchor;
      } else if (node.prev === Node.Undefined && node.next === Node.Undefined) {
        this._first = Node.Undefined;
        this._last = Node.Undefined;
      } else if (node.next === Node.Undefined) {
        this._last = this._last.prev;
        this._last.next = Node.Undefined;
      } else if (node.prev === Node.Undefined) {
        this._first = this._first.next;
        this._first.prev = Node.Undefined;
      }
      this._size -= 1;
    }
    *[Symbol.iterator]() {
      let node = this._first;
      while (node !== Node.Undefined) {
        yield node.element;
        node = node.next;
      }
    }
  };

  // node_modules/monaco-editor/esm/vs/base/common/stopwatch.js
  var hasPerformanceNow = globalThis.performance && typeof globalThis.performance.now === "function";
  var StopWatch = class _StopWatch {
    static create(highResolution) {
      return new _StopWatch(highResolution);
    }
    constructor(highResolution) {
      this._now = hasPerformanceNow && highResolution === false ? Date.now : globalThis.performance.now.bind(globalThis.performance);
      this._startTime = this._now();
      this._stopTime = -1;
    }
    stop() {
      this._stopTime = this._now();
    }
    reset() {
      this._startTime = this._now();
      this._stopTime = -1;
    }
    elapsed() {
      if (this._stopTime !== -1) {
        return this._stopTime - this._startTime;
      }
      return this._now() - this._startTime;
    }
  };

  // node_modules/monaco-editor/esm/vs/base/common/event.js
  var _enableListenerGCedWarning = false;
  var _enableDisposeWithListenerWarning = false;
  var _enableSnapshotPotentialLeakWarning = false;
  var Event;
  (function(Event2) {
    Event2.None = () => Disposable.None;
    function _addLeakageTraceLogic(options) {
      if (_enableSnapshotPotentialLeakWarning) {
        const { onDidAddListener: origListenerDidAdd } = options;
        const stack = Stacktrace.create();
        let count = 0;
        options.onDidAddListener = () => {
          if (++count === 2) {
            console.warn("snapshotted emitter LIKELY used public and SHOULD HAVE BEEN created with DisposableStore. snapshotted here");
            stack.print();
          }
          origListenerDidAdd === null || origListenerDidAdd === void 0 ? void 0 : origListenerDidAdd();
        };
      }
    }
    function defer(event, disposable) {
      return debounce(event, () => void 0, 0, void 0, true, void 0, disposable);
    }
    Event2.defer = defer;
    function once(event) {
      return (listener, thisArgs = null, disposables) => {
        let didFire = false;
        let result = void 0;
        result = event((e) => {
          if (didFire) {
            return;
          } else if (result) {
            result.dispose();
          } else {
            didFire = true;
          }
          return listener.call(thisArgs, e);
        }, null, disposables);
        if (didFire) {
          result.dispose();
        }
        return result;
      };
    }
    Event2.once = once;
    function map(event, map2, disposable) {
      return snapshot((listener, thisArgs = null, disposables) => event((i) => listener.call(thisArgs, map2(i)), null, disposables), disposable);
    }
    Event2.map = map;
    function forEach(event, each, disposable) {
      return snapshot((listener, thisArgs = null, disposables) => event((i) => {
        each(i);
        listener.call(thisArgs, i);
      }, null, disposables), disposable);
    }
    Event2.forEach = forEach;
    function filter(event, filter2, disposable) {
      return snapshot((listener, thisArgs = null, disposables) => event((e) => filter2(e) && listener.call(thisArgs, e), null, disposables), disposable);
    }
    Event2.filter = filter;
    function signal(event) {
      return event;
    }
    Event2.signal = signal;
    function any(...events) {
      return (listener, thisArgs = null, disposables) => {
        const disposable = combinedDisposable(...events.map((event) => event((e) => listener.call(thisArgs, e))));
        return addAndReturnDisposable(disposable, disposables);
      };
    }
    Event2.any = any;
    function reduce(event, merge, initial, disposable) {
      let output = initial;
      return map(event, (e) => {
        output = merge(output, e);
        return output;
      }, disposable);
    }
    Event2.reduce = reduce;
    function snapshot(event, disposable) {
      let listener;
      const options = {
        onWillAddFirstListener() {
          listener = event(emitter.fire, emitter);
        },
        onDidRemoveLastListener() {
          listener === null || listener === void 0 ? void 0 : listener.dispose();
        }
      };
      if (!disposable) {
        _addLeakageTraceLogic(options);
      }
      const emitter = new Emitter(options);
      disposable === null || disposable === void 0 ? void 0 : disposable.add(emitter);
      return emitter.event;
    }
    function addAndReturnDisposable(d, store) {
      if (store instanceof Array) {
        store.push(d);
      } else if (store) {
        store.add(d);
      }
      return d;
    }
    function debounce(event, merge, delay = 100, leading = false, flushOnListenerRemove = false, leakWarningThreshold, disposable) {
      let subscription;
      let output = void 0;
      let handle = void 0;
      let numDebouncedCalls = 0;
      let doFire;
      const options = {
        leakWarningThreshold,
        onWillAddFirstListener() {
          subscription = event((cur) => {
            numDebouncedCalls++;
            output = merge(output, cur);
            if (leading && !handle) {
              emitter.fire(output);
              output = void 0;
            }
            doFire = () => {
              const _output = output;
              output = void 0;
              handle = void 0;
              if (!leading || numDebouncedCalls > 1) {
                emitter.fire(_output);
              }
              numDebouncedCalls = 0;
            };
            if (typeof delay === "number") {
              clearTimeout(handle);
              handle = setTimeout(doFire, delay);
            } else {
              if (handle === void 0) {
                handle = 0;
                queueMicrotask(doFire);
              }
            }
          });
        },
        onWillRemoveListener() {
          if (flushOnListenerRemove && numDebouncedCalls > 0) {
            doFire === null || doFire === void 0 ? void 0 : doFire();
          }
        },
        onDidRemoveLastListener() {
          doFire = void 0;
          subscription.dispose();
        }
      };
      if (!disposable) {
        _addLeakageTraceLogic(options);
      }
      const emitter = new Emitter(options);
      disposable === null || disposable === void 0 ? void 0 : disposable.add(emitter);
      return emitter.event;
    }
    Event2.debounce = debounce;
    function accumulate(event, delay = 0, disposable) {
      return Event2.debounce(event, (last, e) => {
        if (!last) {
          return [e];
        }
        last.push(e);
        return last;
      }, delay, void 0, true, void 0, disposable);
    }
    Event2.accumulate = accumulate;
    function latch(event, equals4 = (a2, b) => a2 === b, disposable) {
      let firstCall = true;
      let cache;
      return filter(event, (value) => {
        const shouldEmit = firstCall || !equals4(value, cache);
        firstCall = false;
        cache = value;
        return shouldEmit;
      }, disposable);
    }
    Event2.latch = latch;
    function split(event, isT, disposable) {
      return [
        Event2.filter(event, isT, disposable),
        Event2.filter(event, (e) => !isT(e), disposable)
      ];
    }
    Event2.split = split;
    function buffer(event, flushAfterTimeout = false, _buffer = [], disposable) {
      let buffer2 = _buffer.slice();
      let listener = event((e) => {
        if (buffer2) {
          buffer2.push(e);
        } else {
          emitter.fire(e);
        }
      });
      if (disposable) {
        disposable.add(listener);
      }
      const flush = () => {
        buffer2 === null || buffer2 === void 0 ? void 0 : buffer2.forEach((e) => emitter.fire(e));
        buffer2 = null;
      };
      const emitter = new Emitter({
        onWillAddFirstListener() {
          if (!listener) {
            listener = event((e) => emitter.fire(e));
            if (disposable) {
              disposable.add(listener);
            }
          }
        },
        onDidAddFirstListener() {
          if (buffer2) {
            if (flushAfterTimeout) {
              setTimeout(flush);
            } else {
              flush();
            }
          }
        },
        onDidRemoveLastListener() {
          if (listener) {
            listener.dispose();
          }
          listener = null;
        }
      });
      if (disposable) {
        disposable.add(emitter);
      }
      return emitter.event;
    }
    Event2.buffer = buffer;
    function chain(event, sythensize) {
      const fn = (listener, thisArgs, disposables) => {
        const cs = sythensize(new ChainableSynthesis());
        return event(function(value) {
          const result = cs.evaluate(value);
          if (result !== HaltChainable) {
            listener.call(thisArgs, result);
          }
        }, void 0, disposables);
      };
      return fn;
    }
    Event2.chain = chain;
    const HaltChainable = Symbol("HaltChainable");
    class ChainableSynthesis {
      constructor() {
        this.steps = [];
      }
      map(fn) {
        this.steps.push(fn);
        return this;
      }
      forEach(fn) {
        this.steps.push((v) => {
          fn(v);
          return v;
        });
        return this;
      }
      filter(fn) {
        this.steps.push((v) => fn(v) ? v : HaltChainable);
        return this;
      }
      reduce(merge, initial) {
        let last = initial;
        this.steps.push((v) => {
          last = merge(last, v);
          return last;
        });
        return this;
      }
      latch(equals4 = (a2, b) => a2 === b) {
        let firstCall = true;
        let cache;
        this.steps.push((value) => {
          const shouldEmit = firstCall || !equals4(value, cache);
          firstCall = false;
          cache = value;
          return shouldEmit ? value : HaltChainable;
        });
        return this;
      }
      evaluate(value) {
        for (const step of this.steps) {
          value = step(value);
          if (value === HaltChainable) {
            break;
          }
        }
        return value;
      }
    }
    function fromNodeEventEmitter(emitter, eventName, map2 = (id) => id) {
      const fn = (...args) => result.fire(map2(...args));
      const onFirstListenerAdd = () => emitter.on(eventName, fn);
      const onLastListenerRemove = () => emitter.removeListener(eventName, fn);
      const result = new Emitter({ onWillAddFirstListener: onFirstListenerAdd, onDidRemoveLastListener: onLastListenerRemove });
      return result.event;
    }
    Event2.fromNodeEventEmitter = fromNodeEventEmitter;
    function fromDOMEventEmitter(emitter, eventName, map2 = (id) => id) {
      const fn = (...args) => result.fire(map2(...args));
      const onFirstListenerAdd = () => emitter.addEventListener(eventName, fn);
      const onLastListenerRemove = () => emitter.removeEventListener(eventName, fn);
      const result = new Emitter({ onWillAddFirstListener: onFirstListenerAdd, onDidRemoveLastListener: onLastListenerRemove });
      return result.event;
    }
    Event2.fromDOMEventEmitter = fromDOMEventEmitter;
    function toPromise(event) {
      return new Promise((resolve2) => once(event)(resolve2));
    }
    Event2.toPromise = toPromise;
    function fromPromise(promise) {
      const result = new Emitter();
      promise.then((res) => {
        result.fire(res);
      }, () => {
        result.fire(void 0);
      }).finally(() => {
        result.dispose();
      });
      return result.event;
    }
    Event2.fromPromise = fromPromise;
    function runAndSubscribe(event, handler, initial) {
      handler(initial);
      return event((e) => handler(e));
    }
    Event2.runAndSubscribe = runAndSubscribe;
    class EmitterObserver {
      constructor(_observable, store) {
        this._observable = _observable;
        this._counter = 0;
        this._hasChanged = false;
        const options = {
          onWillAddFirstListener: () => {
            _observable.addObserver(this);
          },
          onDidRemoveLastListener: () => {
            _observable.removeObserver(this);
          }
        };
        if (!store) {
          _addLeakageTraceLogic(options);
        }
        this.emitter = new Emitter(options);
        if (store) {
          store.add(this.emitter);
        }
      }
      beginUpdate(_observable) {
        this._counter++;
      }
      handlePossibleChange(_observable) {
      }
      handleChange(_observable, _change) {
        this._hasChanged = true;
      }
      endUpdate(_observable) {
        this._counter--;
        if (this._counter === 0) {
          this._observable.reportChanges();
          if (this._hasChanged) {
            this._hasChanged = false;
            this.emitter.fire(this._observable.get());
          }
        }
      }
    }
    function fromObservable(obs, store) {
      const observer = new EmitterObserver(obs, store);
      return observer.emitter.event;
    }
    Event2.fromObservable = fromObservable;
    function fromObservableLight(observable) {
      return (listener, thisArgs, disposables) => {
        let count = 0;
        let didChange = false;
        const observer = {
          beginUpdate() {
            count++;
          },
          endUpdate() {
            count--;
            if (count === 0) {
              observable.reportChanges();
              if (didChange) {
                didChange = false;
                listener.call(thisArgs);
              }
            }
          },
          handlePossibleChange() {
          },
          handleChange() {
            didChange = true;
          }
        };
        observable.addObserver(observer);
        observable.reportChanges();
        const disposable = {
          dispose() {
            observable.removeObserver(observer);
          }
        };
        if (disposables instanceof DisposableStore) {
          disposables.add(disposable);
        } else if (Array.isArray(disposables)) {
          disposables.push(disposable);
        }
        return disposable;
      };
    }
    Event2.fromObservableLight = fromObservableLight;
  })(Event || (Event = {}));
  var EventProfiling = class _EventProfiling {
    constructor(name) {
      this.listenerCount = 0;
      this.invocationCount = 0;
      this.elapsedOverall = 0;
      this.durations = [];
      this.name = `${name}_${_EventProfiling._idPool++}`;
      _EventProfiling.all.add(this);
    }
    start(listenerCount) {
      this._stopWatch = new StopWatch();
      this.listenerCount = listenerCount;
    }
    stop() {
      if (this._stopWatch) {
        const elapsed = this._stopWatch.elapsed();
        this.durations.push(elapsed);
        this.elapsedOverall += elapsed;
        this.invocationCount += 1;
        this._stopWatch = void 0;
      }
    }
  };
  EventProfiling.all = /* @__PURE__ */ new Set();
  EventProfiling._idPool = 0;
  var _globalLeakWarningThreshold = -1;
  var LeakageMonitor = class {
    constructor(_errorHandler, threshold, name = Math.random().toString(18).slice(2, 5)) {
      this._errorHandler = _errorHandler;
      this.threshold = threshold;
      this.name = name;
      this._warnCountdown = 0;
    }
    dispose() {
      var _a4;
      (_a4 = this._stacks) === null || _a4 === void 0 ? void 0 : _a4.clear();
    }
    check(stack, listenerCount) {
      const threshold = this.threshold;
      if (threshold <= 0 || listenerCount < threshold) {
        return void 0;
      }
      if (!this._stacks) {
        this._stacks = /* @__PURE__ */ new Map();
      }
      const count = this._stacks.get(stack.value) || 0;
      this._stacks.set(stack.value, count + 1);
      this._warnCountdown -= 1;
      if (this._warnCountdown <= 0) {
        this._warnCountdown = threshold * 0.5;
        const [topStack, topCount] = this.getMostFrequentStack();
        const message = `[${this.name}] potential listener LEAK detected, having ${listenerCount} listeners already. MOST frequent listener (${topCount}):`;
        console.warn(message);
        console.warn(topStack);
        const error = new ListenerLeakError(message, topStack);
        this._errorHandler(error);
      }
      return () => {
        const count2 = this._stacks.get(stack.value) || 0;
        this._stacks.set(stack.value, count2 - 1);
      };
    }
    getMostFrequentStack() {
      if (!this._stacks) {
        return void 0;
      }
      let topStack;
      let topCount = 0;
      for (const [stack, count] of this._stacks) {
        if (!topStack || topCount < count) {
          topStack = [stack, count];
          topCount = count;
        }
      }
      return topStack;
    }
  };
  var Stacktrace = class _Stacktrace {
    static create() {
      var _a4;
      const err = new Error();
      return new _Stacktrace((_a4 = err.stack) !== null && _a4 !== void 0 ? _a4 : "");
    }
    constructor(value) {
      this.value = value;
    }
    print() {
      console.warn(this.value.split("\n").slice(2).join("\n"));
    }
  };
  var ListenerLeakError = class extends Error {
    constructor(message, stack) {
      super(message);
      this.name = "ListenerLeakError";
      this.stack = stack;
    }
  };
  var ListenerRefusalError = class extends Error {
    constructor(message, stack) {
      super(message);
      this.name = "ListenerRefusalError";
      this.stack = stack;
    }
  };
  var UniqueContainer = class {
    constructor(value) {
      this.value = value;
    }
  };
  var compactionThreshold = 2;
  var forEachListener = (listeners, fn) => {
    if (listeners instanceof UniqueContainer) {
      fn(listeners);
    } else {
      for (let i = 0; i < listeners.length; i++) {
        const l = listeners[i];
        if (l) {
          fn(l);
        }
      }
    }
  };
  var _listenerFinalizers = _enableListenerGCedWarning ? new FinalizationRegistry((heldValue) => {
    if (typeof heldValue === "string") {
      console.warn("[LEAKING LISTENER] GC'ed a listener that was NOT yet disposed. This is where is was created:");
      console.warn(heldValue);
    }
  }) : void 0;
  var Emitter = class {
    constructor(options) {
      var _a4, _b3, _c, _d, _e, _f;
      this._size = 0;
      this._options = options;
      this._leakageMon = _globalLeakWarningThreshold > 0 || ((_a4 = this._options) === null || _a4 === void 0 ? void 0 : _a4.leakWarningThreshold) ? new LeakageMonitor((_b3 = options === null || options === void 0 ? void 0 : options.onListenerError) !== null && _b3 !== void 0 ? _b3 : onUnexpectedError, (_d = (_c = this._options) === null || _c === void 0 ? void 0 : _c.leakWarningThreshold) !== null && _d !== void 0 ? _d : _globalLeakWarningThreshold) : void 0;
      this._perfMon = ((_e = this._options) === null || _e === void 0 ? void 0 : _e._profName) ? new EventProfiling(this._options._profName) : void 0;
      this._deliveryQueue = (_f = this._options) === null || _f === void 0 ? void 0 : _f.deliveryQueue;
    }
    dispose() {
      var _a4, _b3, _c, _d;
      if (!this._disposed) {
        this._disposed = true;
        if (((_a4 = this._deliveryQueue) === null || _a4 === void 0 ? void 0 : _a4.current) === this) {
          this._deliveryQueue.reset();
        }
        if (this._listeners) {
          if (_enableDisposeWithListenerWarning) {
            const listeners = this._listeners;
            queueMicrotask(() => {
              forEachListener(listeners, (l) => {
                var _a5;
                return (_a5 = l.stack) === null || _a5 === void 0 ? void 0 : _a5.print();
              });
            });
          }
          this._listeners = void 0;
          this._size = 0;
        }
        (_c = (_b3 = this._options) === null || _b3 === void 0 ? void 0 : _b3.onDidRemoveLastListener) === null || _c === void 0 ? void 0 : _c.call(_b3);
        (_d = this._leakageMon) === null || _d === void 0 ? void 0 : _d.dispose();
      }
    }
    /**
     * For the public to allow to subscribe
     * to events from this Emitter
     */
    get event() {
      var _a4;
      (_a4 = this._event) !== null && _a4 !== void 0 ? _a4 : this._event = (callback, thisArgs, disposables) => {
        var _a5, _b3, _c, _d, _e, _f, _g;
        if (this._leakageMon && this._size > this._leakageMon.threshold ** 2) {
          const message = `[${this._leakageMon.name}] REFUSES to accept new listeners because it exceeded its threshold by far (${this._size} vs ${this._leakageMon.threshold})`;
          console.warn(message);
          const tuple = (_a5 = this._leakageMon.getMostFrequentStack()) !== null && _a5 !== void 0 ? _a5 : ["UNKNOWN stack", -1];
          const error = new ListenerRefusalError(`${message}. HINT: Stack shows most frequent listener (${tuple[1]}-times)`, tuple[0]);
          const errorHandler2 = ((_b3 = this._options) === null || _b3 === void 0 ? void 0 : _b3.onListenerError) || onUnexpectedError;
          errorHandler2(error);
          return Disposable.None;
        }
        if (this._disposed) {
          return Disposable.None;
        }
        if (thisArgs) {
          callback = callback.bind(thisArgs);
        }
        const contained = new UniqueContainer(callback);
        let removeMonitor;
        let stack;
        if (this._leakageMon && this._size >= Math.ceil(this._leakageMon.threshold * 0.2)) {
          contained.stack = Stacktrace.create();
          removeMonitor = this._leakageMon.check(contained.stack, this._size + 1);
        }
        if (_enableDisposeWithListenerWarning) {
          contained.stack = stack !== null && stack !== void 0 ? stack : Stacktrace.create();
        }
        if (!this._listeners) {
          (_d = (_c = this._options) === null || _c === void 0 ? void 0 : _c.onWillAddFirstListener) === null || _d === void 0 ? void 0 : _d.call(_c, this);
          this._listeners = contained;
          (_f = (_e = this._options) === null || _e === void 0 ? void 0 : _e.onDidAddFirstListener) === null || _f === void 0 ? void 0 : _f.call(_e, this);
        } else if (this._listeners instanceof UniqueContainer) {
          (_g = this._deliveryQueue) !== null && _g !== void 0 ? _g : this._deliveryQueue = new EventDeliveryQueuePrivate();
          this._listeners = [this._listeners, contained];
        } else {
          this._listeners.push(contained);
        }
        this._size++;
        const result = toDisposable(() => {
          _listenerFinalizers === null || _listenerFinalizers === void 0 ? void 0 : _listenerFinalizers.unregister(result);
          removeMonitor === null || removeMonitor === void 0 ? void 0 : removeMonitor();
          this._removeListener(contained);
        });
        if (disposables instanceof DisposableStore) {
          disposables.add(result);
        } else if (Array.isArray(disposables)) {
          disposables.push(result);
        }
        if (_listenerFinalizers) {
          const stack2 = new Error().stack.split("\n").slice(2).join("\n").trim();
          _listenerFinalizers.register(result, stack2, result);
        }
        return result;
      };
      return this._event;
    }
    _removeListener(listener) {
      var _a4, _b3, _c, _d;
      (_b3 = (_a4 = this._options) === null || _a4 === void 0 ? void 0 : _a4.onWillRemoveListener) === null || _b3 === void 0 ? void 0 : _b3.call(_a4, this);
      if (!this._listeners) {
        return;
      }
      if (this._size === 1) {
        this._listeners = void 0;
        (_d = (_c = this._options) === null || _c === void 0 ? void 0 : _c.onDidRemoveLastListener) === null || _d === void 0 ? void 0 : _d.call(_c, this);
        this._size = 0;
        return;
      }
      const listeners = this._listeners;
      const index = listeners.indexOf(listener);
      if (index === -1) {
        console.log("disposed?", this._disposed);
        console.log("size?", this._size);
        console.log("arr?", JSON.stringify(this._listeners));
        throw new Error("Attempted to dispose unknown listener");
      }
      this._size--;
      listeners[index] = void 0;
      const adjustDeliveryQueue = this._deliveryQueue.current === this;
      if (this._size * compactionThreshold <= listeners.length) {
        let n = 0;
        for (let i = 0; i < listeners.length; i++) {
          if (listeners[i]) {
            listeners[n++] = listeners[i];
          } else if (adjustDeliveryQueue) {
            this._deliveryQueue.end--;
            if (n < this._deliveryQueue.i) {
              this._deliveryQueue.i--;
            }
          }
        }
        listeners.length = n;
      }
    }
    _deliver(listener, value) {
      var _a4;
      if (!listener) {
        return;
      }
      const errorHandler2 = ((_a4 = this._options) === null || _a4 === void 0 ? void 0 : _a4.onListenerError) || onUnexpectedError;
      if (!errorHandler2) {
        listener.value(value);
        return;
      }
      try {
        listener.value(value);
      } catch (e) {
        errorHandler2(e);
      }
    }
    /** Delivers items in the queue. Assumes the queue is ready to go. */
    _deliverQueue(dq) {
      const listeners = dq.current._listeners;
      while (dq.i < dq.end) {
        this._deliver(listeners[dq.i++], dq.value);
      }
      dq.reset();
    }
    /**
     * To be kept private to fire an event to
     * subscribers
     */
    fire(event) {
      var _a4, _b3, _c, _d;
      if ((_a4 = this._deliveryQueue) === null || _a4 === void 0 ? void 0 : _a4.current) {
        this._deliverQueue(this._deliveryQueue);
        (_b3 = this._perfMon) === null || _b3 === void 0 ? void 0 : _b3.stop();
      }
      (_c = this._perfMon) === null || _c === void 0 ? void 0 : _c.start(this._size);
      if (!this._listeners) {
      } else if (this._listeners instanceof UniqueContainer) {
        this._deliver(this._listeners, event);
      } else {
        const dq = this._deliveryQueue;
        dq.enqueue(this, event, this._listeners.length);
        this._deliverQueue(dq);
      }
      (_d = this._perfMon) === null || _d === void 0 ? void 0 : _d.stop();
    }
    hasListeners() {
      return this._size > 0;
    }
  };
  var EventDeliveryQueuePrivate = class {
    constructor() {
      this.i = -1;
      this.end = 0;
    }
    enqueue(emitter, value, end) {
      this.i = 0;
      this.end = end;
      this.current = emitter;
      this.value = value;
    }
    reset() {
      this.i = this.end;
      this.current = void 0;
      this.value = void 0;
    }
  };

  // node_modules/monaco-editor/esm/vs/base/common/types.js
  function isString(str) {
    return typeof str === "string";
  }

  // node_modules/monaco-editor/esm/vs/base/common/objects.js
  function getAllPropertyNames(obj) {
    let res = [];
    while (Object.prototype !== obj) {
      res = res.concat(Object.getOwnPropertyNames(obj));
      obj = Object.getPrototypeOf(obj);
    }
    return res;
  }
  function getAllMethodNames(obj) {
    const methods = [];
    for (const prop of getAllPropertyNames(obj)) {
      if (typeof obj[prop] === "function") {
        methods.push(prop);
      }
    }
    return methods;
  }
  function createProxyObject(methodNames, invoke) {
    const createProxyMethod = (method) => {
      return function() {
        const args = Array.prototype.slice.call(arguments, 0);
        return invoke(method, args);
      };
    };
    const result = {};
    for (const methodName of methodNames) {
      result[methodName] = createProxyMethod(methodName);
    }
    return result;
  }

  // node_modules/monaco-editor/esm/vs/nls.js
  var isPseudo = typeof document !== "undefined" && document.location && document.location.hash.indexOf("pseudo=true") >= 0;
  function _format(message, args) {
    let result;
    if (args.length === 0) {
      result = message;
    } else {
      result = message.replace(/\{(\d+)\}/g, (match, rest) => {
        const index = rest[0];
        const arg = args[index];
        let result2 = match;
        if (typeof arg === "string") {
          result2 = arg;
        } else if (typeof arg === "number" || typeof arg === "boolean" || arg === void 0 || arg === null) {
          result2 = String(arg);
        }
        return result2;
      });
    }
    if (isPseudo) {
      result = "\uFF3B" + result.replace(/[aouei]/g, "$&$&") + "\uFF3D";
    }
    return result;
  }
  function localize(data, message, ...args) {
    return _format(message, args);
  }
  function getConfiguredDefaultLocale(_) {
    return void 0;
  }

  // node_modules/monaco-editor/esm/vs/base/common/platform.js
  var _a;
  var _b;
  var LANGUAGE_DEFAULT = "en";
  var _isWindows = false;
  var _isMacintosh = false;
  var _isLinux = false;
  var _isLinuxSnap = false;
  var _isNative = false;
  var _isWeb = false;
  var _isElectron = false;
  var _isIOS = false;
  var _isCI = false;
  var _isMobile = false;
  var _locale = void 0;
  var _language = LANGUAGE_DEFAULT;
  var _platformLocale = LANGUAGE_DEFAULT;
  var _translationsConfigFile = void 0;
  var _userAgent = void 0;
  var $globalThis = globalThis;
  var nodeProcess = void 0;
  if (typeof $globalThis.vscode !== "undefined" && typeof $globalThis.vscode.process !== "undefined") {
    nodeProcess = $globalThis.vscode.process;
  } else if (typeof process !== "undefined" && typeof ((_a = process === null || process === void 0 ? void 0 : process.versions) === null || _a === void 0 ? void 0 : _a.node) === "string") {
    nodeProcess = process;
  }
  var isElectronProcess = typeof ((_b = nodeProcess === null || nodeProcess === void 0 ? void 0 : nodeProcess.versions) === null || _b === void 0 ? void 0 : _b.electron) === "string";
  var isElectronRenderer = isElectronProcess && (nodeProcess === null || nodeProcess === void 0 ? void 0 : nodeProcess.type) === "renderer";
  if (typeof nodeProcess === "object") {
    _isWindows = nodeProcess.platform === "win32";
    _isMacintosh = nodeProcess.platform === "darwin";
    _isLinux = nodeProcess.platform === "linux";
    _isLinuxSnap = _isLinux && !!nodeProcess.env["SNAP"] && !!nodeProcess.env["SNAP_REVISION"];
    _isElectron = isElectronProcess;
    _isCI = !!nodeProcess.env["CI"] || !!nodeProcess.env["BUILD_ARTIFACTSTAGINGDIRECTORY"];
    _locale = LANGUAGE_DEFAULT;
    _language = LANGUAGE_DEFAULT;
    const rawNlsConfig = nodeProcess.env["VSCODE_NLS_CONFIG"];
    if (rawNlsConfig) {
      try {
        const nlsConfig = JSON.parse(rawNlsConfig);
        const resolved = nlsConfig.availableLanguages["*"];
        _locale = nlsConfig.locale;
        _platformLocale = nlsConfig.osLocale;
        _language = resolved ? resolved : LANGUAGE_DEFAULT;
        _translationsConfigFile = nlsConfig._translationsConfigFile;
      } catch (e) {
      }
    }
    _isNative = true;
  } else if (typeof navigator === "object" && !isElectronRenderer) {
    _userAgent = navigator.userAgent;
    _isWindows = _userAgent.indexOf("Windows") >= 0;
    _isMacintosh = _userAgent.indexOf("Macintosh") >= 0;
    _isIOS = (_userAgent.indexOf("Macintosh") >= 0 || _userAgent.indexOf("iPad") >= 0 || _userAgent.indexOf("iPhone") >= 0) && !!navigator.maxTouchPoints && navigator.maxTouchPoints > 0;
    _isLinux = _userAgent.indexOf("Linux") >= 0;
    _isMobile = (_userAgent === null || _userAgent === void 0 ? void 0 : _userAgent.indexOf("Mobi")) >= 0;
    _isWeb = true;
    const configuredLocale = getConfiguredDefaultLocale(
      // This call _must_ be done in the file that calls `nls.getConfiguredDefaultLocale`
      // to ensure that the NLS AMD Loader plugin has been loaded and configured.
      // This is because the loader plugin decides what the default locale is based on
      // how it's able to resolve the strings.
      localize({ key: "ensureLoaderPluginIsLoaded", comment: ["{Locked}"] }, "_")
    );
    _locale = configuredLocale || LANGUAGE_DEFAULT;
    _language = _locale;
    _platformLocale = navigator.language;
  } else {
    console.error("Unable to resolve platform.");
  }
  var _platform = 0;
  if (_isMacintosh) {
    _platform = 1;
  } else if (_isWindows) {
    _platform = 3;
  } else if (_isLinux) {
    _platform = 2;
  }
  var isWindows = _isWindows;
  var isMacintosh = _isMacintosh;
  var isWebWorker = _isWeb && typeof $globalThis.importScripts === "function";
  var webWorkerOrigin = isWebWorker ? $globalThis.origin : void 0;
  var userAgent = _userAgent;
  var setTimeout0IsFaster = typeof $globalThis.postMessage === "function" && !$globalThis.importScripts;
  var setTimeout0 = (() => {
    if (setTimeout0IsFaster) {
      const pending = [];
      $globalThis.addEventListener("message", (e) => {
        if (e.data && e.data.vscodeScheduleAsyncWork) {
          for (let i = 0, len = pending.length; i < len; i++) {
            const candidate = pending[i];
            if (candidate.id === e.data.vscodeScheduleAsyncWork) {
              pending.splice(i, 1);
              candidate.callback();
              return;
            }
          }
        }
      });
      let lastId = 0;
      return (callback) => {
        const myId = ++lastId;
        pending.push({
          id: myId,
          callback
        });
        $globalThis.postMessage({ vscodeScheduleAsyncWork: myId }, "*");
      };
    }
    return (callback) => setTimeout(callback);
  })();
  var isChrome = !!(userAgent && userAgent.indexOf("Chrome") >= 0);
  var isFirefox = !!(userAgent && userAgent.indexOf("Firefox") >= 0);
  var isSafari = !!(!isChrome && (userAgent && userAgent.indexOf("Safari") >= 0));
  var isEdge = !!(userAgent && userAgent.indexOf("Edg/") >= 0);
  var isAndroid = !!(userAgent && userAgent.indexOf("Android") >= 0);

  // node_modules/monaco-editor/esm/vs/base/common/cache.js
  function identity(t2) {
    return t2;
  }
  var LRUCachedFunction = class {
    constructor(arg1, arg2) {
      this.lastCache = void 0;
      this.lastArgKey = void 0;
      if (typeof arg1 === "function") {
        this._fn = arg1;
        this._computeKey = identity;
      } else {
        this._fn = arg2;
        this._computeKey = arg1.getCacheKey;
      }
    }
    get(arg) {
      const key = this._computeKey(arg);
      if (this.lastArgKey !== key) {
        this.lastArgKey = key;
        this.lastCache = this._fn(arg);
      }
      return this.lastCache;
    }
  };

  // node_modules/monaco-editor/esm/vs/base/common/lazy.js
  var Lazy = class {
    constructor(executor) {
      this.executor = executor;
      this._didRun = false;
    }
    /**
     * Get the wrapped value.
     *
     * This will force evaluation of the lazy value if it has not been resolved yet. Lazy values are only
     * resolved once. `getValue` will re-throw exceptions that are hit while resolving the value
     */
    get value() {
      if (!this._didRun) {
        try {
          this._value = this.executor();
        } catch (err) {
          this._error = err;
        } finally {
          this._didRun = true;
        }
      }
      if (this._error) {
        throw this._error;
      }
      return this._value;
    }
    /**
     * Get the wrapped value without forcing evaluation.
     */
    get rawValue() {
      return this._value;
    }
  };

  // node_modules/monaco-editor/esm/vs/base/common/strings.js
  var _a2;
  function escapeRegExpCharacters(value) {
    return value.replace(/[\\\{\}\*\+\?\|\^\$\.\[\]\(\)]/g, "\\$&");
  }
  function splitLines(str) {
    return str.split(/\r\n|\r|\n/);
  }
  function firstNonWhitespaceIndex(str) {
    for (let i = 0, len = str.length; i < len; i++) {
      const chCode = str.charCodeAt(i);
      if (chCode !== 32 && chCode !== 9) {
        return i;
      }
    }
    return -1;
  }
  function lastNonWhitespaceIndex(str, startIndex = str.length - 1) {
    for (let i = startIndex; i >= 0; i--) {
      const chCode = str.charCodeAt(i);
      if (chCode !== 32 && chCode !== 9) {
        return i;
      }
    }
    return -1;
  }
  function isUpperAsciiLetter(code) {
    return code >= 65 && code <= 90;
  }
  function isHighSurrogate(charCode) {
    return 55296 <= charCode && charCode <= 56319;
  }
  function isLowSurrogate(charCode) {
    return 56320 <= charCode && charCode <= 57343;
  }
  function computeCodePoint(highSurrogate, lowSurrogate) {
    return (highSurrogate - 55296 << 10) + (lowSurrogate - 56320) + 65536;
  }
  function getNextCodePoint(str, len, offset) {
    const charCode = str.charCodeAt(offset);
    if (isHighSurrogate(charCode) && offset + 1 < len) {
      const nextCharCode = str.charCodeAt(offset + 1);
      if (isLowSurrogate(nextCharCode)) {
        return computeCodePoint(charCode, nextCharCode);
      }
    }
    return charCode;
  }
  var IS_BASIC_ASCII = /^[\t\n\r\x20-\x7E]*$/;
  function isBasicASCII(str) {
    return IS_BASIC_ASCII.test(str);
  }
  var UTF8_BOM_CHARACTER = String.fromCharCode(
    65279
    /* CharCode.UTF8_BOM */
  );
  var GraphemeBreakTree = class _GraphemeBreakTree {
    static getInstance() {
      if (!_GraphemeBreakTree._INSTANCE) {
        _GraphemeBreakTree._INSTANCE = new _GraphemeBreakTree();
      }
      return _GraphemeBreakTree._INSTANCE;
    }
    constructor() {
      this._data = getGraphemeBreakRawData();
    }
    getGraphemeBreakType(codePoint) {
      if (codePoint < 32) {
        if (codePoint === 10) {
          return 3;
        }
        if (codePoint === 13) {
          return 2;
        }
        return 4;
      }
      if (codePoint < 127) {
        return 0;
      }
      const data = this._data;
      const nodeCount = data.length / 3;
      let nodeIndex = 1;
      while (nodeIndex <= nodeCount) {
        if (codePoint < data[3 * nodeIndex]) {
          nodeIndex = 2 * nodeIndex;
        } else if (codePoint > data[3 * nodeIndex + 1]) {
          nodeIndex = 2 * nodeIndex + 1;
        } else {
          return data[3 * nodeIndex + 2];
        }
      }
      return 0;
    }
  };
  GraphemeBreakTree._INSTANCE = null;
  function getGraphemeBreakRawData() {
    return JSON.parse("[0,0,0,51229,51255,12,44061,44087,12,127462,127487,6,7083,7085,5,47645,47671,12,54813,54839,12,128678,128678,14,3270,3270,5,9919,9923,14,45853,45879,12,49437,49463,12,53021,53047,12,71216,71218,7,128398,128399,14,129360,129374,14,2519,2519,5,4448,4519,9,9742,9742,14,12336,12336,14,44957,44983,12,46749,46775,12,48541,48567,12,50333,50359,12,52125,52151,12,53917,53943,12,69888,69890,5,73018,73018,5,127990,127990,14,128558,128559,14,128759,128760,14,129653,129655,14,2027,2035,5,2891,2892,7,3761,3761,5,6683,6683,5,8293,8293,4,9825,9826,14,9999,9999,14,43452,43453,5,44509,44535,12,45405,45431,12,46301,46327,12,47197,47223,12,48093,48119,12,48989,49015,12,49885,49911,12,50781,50807,12,51677,51703,12,52573,52599,12,53469,53495,12,54365,54391,12,65279,65279,4,70471,70472,7,72145,72147,7,119173,119179,5,127799,127818,14,128240,128244,14,128512,128512,14,128652,128652,14,128721,128722,14,129292,129292,14,129445,129450,14,129734,129743,14,1476,1477,5,2366,2368,7,2750,2752,7,3076,3076,5,3415,3415,5,4141,4144,5,6109,6109,5,6964,6964,5,7394,7400,5,9197,9198,14,9770,9770,14,9877,9877,14,9968,9969,14,10084,10084,14,43052,43052,5,43713,43713,5,44285,44311,12,44733,44759,12,45181,45207,12,45629,45655,12,46077,46103,12,46525,46551,12,46973,46999,12,47421,47447,12,47869,47895,12,48317,48343,12,48765,48791,12,49213,49239,12,49661,49687,12,50109,50135,12,50557,50583,12,51005,51031,12,51453,51479,12,51901,51927,12,52349,52375,12,52797,52823,12,53245,53271,12,53693,53719,12,54141,54167,12,54589,54615,12,55037,55063,12,69506,69509,5,70191,70193,5,70841,70841,7,71463,71467,5,72330,72342,5,94031,94031,5,123628,123631,5,127763,127765,14,127941,127941,14,128043,128062,14,128302,128317,14,128465,128467,14,128539,128539,14,128640,128640,14,128662,128662,14,128703,128703,14,128745,128745,14,129004,129007,14,129329,129330,14,129402,129402,14,129483,129483,14,129686,129704,14,130048,131069,14,173,173,4,1757,1757,1,2200,2207,5,2434,2435,7,2631,2632,5,2817,2817,5,3008,3008,5,3201,3201,5,3387,3388,5,3542,3542,5,3902,3903,7,4190,4192,5,6002,6003,5,6439,6440,5,6765,6770,7,7019,7027,5,7154,7155,7,8205,8205,13,8505,8505,14,9654,9654,14,9757,9757,14,9792,9792,14,9852,9853,14,9890,9894,14,9937,9937,14,9981,9981,14,10035,10036,14,11035,11036,14,42654,42655,5,43346,43347,7,43587,43587,5,44006,44007,7,44173,44199,12,44397,44423,12,44621,44647,12,44845,44871,12,45069,45095,12,45293,45319,12,45517,45543,12,45741,45767,12,45965,45991,12,46189,46215,12,46413,46439,12,46637,46663,12,46861,46887,12,47085,47111,12,47309,47335,12,47533,47559,12,47757,47783,12,47981,48007,12,48205,48231,12,48429,48455,12,48653,48679,12,48877,48903,12,49101,49127,12,49325,49351,12,49549,49575,12,49773,49799,12,49997,50023,12,50221,50247,12,50445,50471,12,50669,50695,12,50893,50919,12,51117,51143,12,51341,51367,12,51565,51591,12,51789,51815,12,52013,52039,12,52237,52263,12,52461,52487,12,52685,52711,12,52909,52935,12,53133,53159,12,53357,53383,12,53581,53607,12,53805,53831,12,54029,54055,12,54253,54279,12,54477,54503,12,54701,54727,12,54925,54951,12,55149,55175,12,68101,68102,5,69762,69762,7,70067,70069,7,70371,70378,5,70720,70721,7,71087,71087,5,71341,71341,5,71995,71996,5,72249,72249,7,72850,72871,5,73109,73109,5,118576,118598,5,121505,121519,5,127245,127247,14,127568,127569,14,127777,127777,14,127872,127891,14,127956,127967,14,128015,128016,14,128110,128172,14,128259,128259,14,128367,128368,14,128424,128424,14,128488,128488,14,128530,128532,14,128550,128551,14,128566,128566,14,128647,128647,14,128656,128656,14,128667,128673,14,128691,128693,14,128715,128715,14,128728,128732,14,128752,128752,14,128765,128767,14,129096,129103,14,129311,129311,14,129344,129349,14,129394,129394,14,129413,129425,14,129466,129471,14,129511,129535,14,129664,129666,14,129719,129722,14,129760,129767,14,917536,917631,5,13,13,2,1160,1161,5,1564,1564,4,1807,1807,1,2085,2087,5,2307,2307,7,2382,2383,7,2497,2500,5,2563,2563,7,2677,2677,5,2763,2764,7,2879,2879,5,2914,2915,5,3021,3021,5,3142,3144,5,3263,3263,5,3285,3286,5,3398,3400,7,3530,3530,5,3633,3633,5,3864,3865,5,3974,3975,5,4155,4156,7,4229,4230,5,5909,5909,7,6078,6085,7,6277,6278,5,6451,6456,7,6744,6750,5,6846,6846,5,6972,6972,5,7074,7077,5,7146,7148,7,7222,7223,5,7416,7417,5,8234,8238,4,8417,8417,5,9000,9000,14,9203,9203,14,9730,9731,14,9748,9749,14,9762,9763,14,9776,9783,14,9800,9811,14,9831,9831,14,9872,9873,14,9882,9882,14,9900,9903,14,9929,9933,14,9941,9960,14,9974,9974,14,9989,9989,14,10006,10006,14,10062,10062,14,10160,10160,14,11647,11647,5,12953,12953,14,43019,43019,5,43232,43249,5,43443,43443,5,43567,43568,7,43696,43696,5,43765,43765,7,44013,44013,5,44117,44143,12,44229,44255,12,44341,44367,12,44453,44479,12,44565,44591,12,44677,44703,12,44789,44815,12,44901,44927,12,45013,45039,12,45125,45151,12,45237,45263,12,45349,45375,12,45461,45487,12,45573,45599,12,45685,45711,12,45797,45823,12,45909,45935,12,46021,46047,12,46133,46159,12,46245,46271,12,46357,46383,12,46469,46495,12,46581,46607,12,46693,46719,12,46805,46831,12,46917,46943,12,47029,47055,12,47141,47167,12,47253,47279,12,47365,47391,12,47477,47503,12,47589,47615,12,47701,47727,12,47813,47839,12,47925,47951,12,48037,48063,12,48149,48175,12,48261,48287,12,48373,48399,12,48485,48511,12,48597,48623,12,48709,48735,12,48821,48847,12,48933,48959,12,49045,49071,12,49157,49183,12,49269,49295,12,49381,49407,12,49493,49519,12,49605,49631,12,49717,49743,12,49829,49855,12,49941,49967,12,50053,50079,12,50165,50191,12,50277,50303,12,50389,50415,12,50501,50527,12,50613,50639,12,50725,50751,12,50837,50863,12,50949,50975,12,51061,51087,12,51173,51199,12,51285,51311,12,51397,51423,12,51509,51535,12,51621,51647,12,51733,51759,12,51845,51871,12,51957,51983,12,52069,52095,12,52181,52207,12,52293,52319,12,52405,52431,12,52517,52543,12,52629,52655,12,52741,52767,12,52853,52879,12,52965,52991,12,53077,53103,12,53189,53215,12,53301,53327,12,53413,53439,12,53525,53551,12,53637,53663,12,53749,53775,12,53861,53887,12,53973,53999,12,54085,54111,12,54197,54223,12,54309,54335,12,54421,54447,12,54533,54559,12,54645,54671,12,54757,54783,12,54869,54895,12,54981,55007,12,55093,55119,12,55243,55291,10,66045,66045,5,68325,68326,5,69688,69702,5,69817,69818,5,69957,69958,7,70089,70092,5,70198,70199,5,70462,70462,5,70502,70508,5,70750,70750,5,70846,70846,7,71100,71101,5,71230,71230,7,71351,71351,5,71737,71738,5,72000,72000,7,72160,72160,5,72273,72278,5,72752,72758,5,72882,72883,5,73031,73031,5,73461,73462,7,94192,94193,7,119149,119149,7,121403,121452,5,122915,122916,5,126980,126980,14,127358,127359,14,127535,127535,14,127759,127759,14,127771,127771,14,127792,127793,14,127825,127867,14,127897,127899,14,127945,127945,14,127985,127986,14,128000,128007,14,128021,128021,14,128066,128100,14,128184,128235,14,128249,128252,14,128266,128276,14,128335,128335,14,128379,128390,14,128407,128419,14,128444,128444,14,128481,128481,14,128499,128499,14,128526,128526,14,128536,128536,14,128543,128543,14,128556,128556,14,128564,128564,14,128577,128580,14,128643,128645,14,128649,128649,14,128654,128654,14,128660,128660,14,128664,128664,14,128675,128675,14,128686,128689,14,128695,128696,14,128705,128709,14,128717,128719,14,128725,128725,14,128736,128741,14,128747,128748,14,128755,128755,14,128762,128762,14,128981,128991,14,129009,129023,14,129160,129167,14,129296,129304,14,129320,129327,14,129340,129342,14,129356,129356,14,129388,129392,14,129399,129400,14,129404,129407,14,129432,129442,14,129454,129455,14,129473,129474,14,129485,129487,14,129648,129651,14,129659,129660,14,129671,129679,14,129709,129711,14,129728,129730,14,129751,129753,14,129776,129782,14,917505,917505,4,917760,917999,5,10,10,3,127,159,4,768,879,5,1471,1471,5,1536,1541,1,1648,1648,5,1767,1768,5,1840,1866,5,2070,2073,5,2137,2139,5,2274,2274,1,2363,2363,7,2377,2380,7,2402,2403,5,2494,2494,5,2507,2508,7,2558,2558,5,2622,2624,7,2641,2641,5,2691,2691,7,2759,2760,5,2786,2787,5,2876,2876,5,2881,2884,5,2901,2902,5,3006,3006,5,3014,3016,7,3072,3072,5,3134,3136,5,3157,3158,5,3260,3260,5,3266,3266,5,3274,3275,7,3328,3329,5,3391,3392,7,3405,3405,5,3457,3457,5,3536,3537,7,3551,3551,5,3636,3642,5,3764,3772,5,3895,3895,5,3967,3967,7,3993,4028,5,4146,4151,5,4182,4183,7,4226,4226,5,4253,4253,5,4957,4959,5,5940,5940,7,6070,6070,7,6087,6088,7,6158,6158,4,6432,6434,5,6448,6449,7,6679,6680,5,6742,6742,5,6754,6754,5,6783,6783,5,6912,6915,5,6966,6970,5,6978,6978,5,7042,7042,7,7080,7081,5,7143,7143,7,7150,7150,7,7212,7219,5,7380,7392,5,7412,7412,5,8203,8203,4,8232,8232,4,8265,8265,14,8400,8412,5,8421,8432,5,8617,8618,14,9167,9167,14,9200,9200,14,9410,9410,14,9723,9726,14,9733,9733,14,9745,9745,14,9752,9752,14,9760,9760,14,9766,9766,14,9774,9774,14,9786,9786,14,9794,9794,14,9823,9823,14,9828,9828,14,9833,9850,14,9855,9855,14,9875,9875,14,9880,9880,14,9885,9887,14,9896,9897,14,9906,9916,14,9926,9927,14,9935,9935,14,9939,9939,14,9962,9962,14,9972,9972,14,9978,9978,14,9986,9986,14,9997,9997,14,10002,10002,14,10017,10017,14,10055,10055,14,10071,10071,14,10133,10135,14,10548,10549,14,11093,11093,14,12330,12333,5,12441,12442,5,42608,42610,5,43010,43010,5,43045,43046,5,43188,43203,7,43302,43309,5,43392,43394,5,43446,43449,5,43493,43493,5,43571,43572,7,43597,43597,7,43703,43704,5,43756,43757,5,44003,44004,7,44009,44010,7,44033,44059,12,44089,44115,12,44145,44171,12,44201,44227,12,44257,44283,12,44313,44339,12,44369,44395,12,44425,44451,12,44481,44507,12,44537,44563,12,44593,44619,12,44649,44675,12,44705,44731,12,44761,44787,12,44817,44843,12,44873,44899,12,44929,44955,12,44985,45011,12,45041,45067,12,45097,45123,12,45153,45179,12,45209,45235,12,45265,45291,12,45321,45347,12,45377,45403,12,45433,45459,12,45489,45515,12,45545,45571,12,45601,45627,12,45657,45683,12,45713,45739,12,45769,45795,12,45825,45851,12,45881,45907,12,45937,45963,12,45993,46019,12,46049,46075,12,46105,46131,12,46161,46187,12,46217,46243,12,46273,46299,12,46329,46355,12,46385,46411,12,46441,46467,12,46497,46523,12,46553,46579,12,46609,46635,12,46665,46691,12,46721,46747,12,46777,46803,12,46833,46859,12,46889,46915,12,46945,46971,12,47001,47027,12,47057,47083,12,47113,47139,12,47169,47195,12,47225,47251,12,47281,47307,12,47337,47363,12,47393,47419,12,47449,47475,12,47505,47531,12,47561,47587,12,47617,47643,12,47673,47699,12,47729,47755,12,47785,47811,12,47841,47867,12,47897,47923,12,47953,47979,12,48009,48035,12,48065,48091,12,48121,48147,12,48177,48203,12,48233,48259,12,48289,48315,12,48345,48371,12,48401,48427,12,48457,48483,12,48513,48539,12,48569,48595,12,48625,48651,12,48681,48707,12,48737,48763,12,48793,48819,12,48849,48875,12,48905,48931,12,48961,48987,12,49017,49043,12,49073,49099,12,49129,49155,12,49185,49211,12,49241,49267,12,49297,49323,12,49353,49379,12,49409,49435,12,49465,49491,12,49521,49547,12,49577,49603,12,49633,49659,12,49689,49715,12,49745,49771,12,49801,49827,12,49857,49883,12,49913,49939,12,49969,49995,12,50025,50051,12,50081,50107,12,50137,50163,12,50193,50219,12,50249,50275,12,50305,50331,12,50361,50387,12,50417,50443,12,50473,50499,12,50529,50555,12,50585,50611,12,50641,50667,12,50697,50723,12,50753,50779,12,50809,50835,12,50865,50891,12,50921,50947,12,50977,51003,12,51033,51059,12,51089,51115,12,51145,51171,12,51201,51227,12,51257,51283,12,51313,51339,12,51369,51395,12,51425,51451,12,51481,51507,12,51537,51563,12,51593,51619,12,51649,51675,12,51705,51731,12,51761,51787,12,51817,51843,12,51873,51899,12,51929,51955,12,51985,52011,12,52041,52067,12,52097,52123,12,52153,52179,12,52209,52235,12,52265,52291,12,52321,52347,12,52377,52403,12,52433,52459,12,52489,52515,12,52545,52571,12,52601,52627,12,52657,52683,12,52713,52739,12,52769,52795,12,52825,52851,12,52881,52907,12,52937,52963,12,52993,53019,12,53049,53075,12,53105,53131,12,53161,53187,12,53217,53243,12,53273,53299,12,53329,53355,12,53385,53411,12,53441,53467,12,53497,53523,12,53553,53579,12,53609,53635,12,53665,53691,12,53721,53747,12,53777,53803,12,53833,53859,12,53889,53915,12,53945,53971,12,54001,54027,12,54057,54083,12,54113,54139,12,54169,54195,12,54225,54251,12,54281,54307,12,54337,54363,12,54393,54419,12,54449,54475,12,54505,54531,12,54561,54587,12,54617,54643,12,54673,54699,12,54729,54755,12,54785,54811,12,54841,54867,12,54897,54923,12,54953,54979,12,55009,55035,12,55065,55091,12,55121,55147,12,55177,55203,12,65024,65039,5,65520,65528,4,66422,66426,5,68152,68154,5,69291,69292,5,69633,69633,5,69747,69748,5,69811,69814,5,69826,69826,5,69932,69932,7,70016,70017,5,70079,70080,7,70095,70095,5,70196,70196,5,70367,70367,5,70402,70403,7,70464,70464,5,70487,70487,5,70709,70711,7,70725,70725,7,70833,70834,7,70843,70844,7,70849,70849,7,71090,71093,5,71103,71104,5,71227,71228,7,71339,71339,5,71344,71349,5,71458,71461,5,71727,71735,5,71985,71989,7,71998,71998,5,72002,72002,7,72154,72155,5,72193,72202,5,72251,72254,5,72281,72283,5,72344,72345,5,72766,72766,7,72874,72880,5,72885,72886,5,73023,73029,5,73104,73105,5,73111,73111,5,92912,92916,5,94095,94098,5,113824,113827,4,119142,119142,7,119155,119162,4,119362,119364,5,121476,121476,5,122888,122904,5,123184,123190,5,125252,125258,5,127183,127183,14,127340,127343,14,127377,127386,14,127491,127503,14,127548,127551,14,127744,127756,14,127761,127761,14,127769,127769,14,127773,127774,14,127780,127788,14,127796,127797,14,127820,127823,14,127869,127869,14,127894,127895,14,127902,127903,14,127943,127943,14,127947,127950,14,127972,127972,14,127988,127988,14,127992,127994,14,128009,128011,14,128019,128019,14,128023,128041,14,128064,128064,14,128102,128107,14,128174,128181,14,128238,128238,14,128246,128247,14,128254,128254,14,128264,128264,14,128278,128299,14,128329,128330,14,128348,128359,14,128371,128377,14,128392,128393,14,128401,128404,14,128421,128421,14,128433,128434,14,128450,128452,14,128476,128478,14,128483,128483,14,128495,128495,14,128506,128506,14,128519,128520,14,128528,128528,14,128534,128534,14,128538,128538,14,128540,128542,14,128544,128549,14,128552,128555,14,128557,128557,14,128560,128563,14,128565,128565,14,128567,128576,14,128581,128591,14,128641,128642,14,128646,128646,14,128648,128648,14,128650,128651,14,128653,128653,14,128655,128655,14,128657,128659,14,128661,128661,14,128663,128663,14,128665,128666,14,128674,128674,14,128676,128677,14,128679,128685,14,128690,128690,14,128694,128694,14,128697,128702,14,128704,128704,14,128710,128714,14,128716,128716,14,128720,128720,14,128723,128724,14,128726,128727,14,128733,128735,14,128742,128744,14,128746,128746,14,128749,128751,14,128753,128754,14,128756,128758,14,128761,128761,14,128763,128764,14,128884,128895,14,128992,129003,14,129008,129008,14,129036,129039,14,129114,129119,14,129198,129279,14,129293,129295,14,129305,129310,14,129312,129319,14,129328,129328,14,129331,129338,14,129343,129343,14,129351,129355,14,129357,129359,14,129375,129387,14,129393,129393,14,129395,129398,14,129401,129401,14,129403,129403,14,129408,129412,14,129426,129431,14,129443,129444,14,129451,129453,14,129456,129465,14,129472,129472,14,129475,129482,14,129484,129484,14,129488,129510,14,129536,129647,14,129652,129652,14,129656,129658,14,129661,129663,14,129667,129670,14,129680,129685,14,129705,129708,14,129712,129718,14,129723,129727,14,129731,129733,14,129744,129750,14,129754,129759,14,129768,129775,14,129783,129791,14,917504,917504,4,917506,917535,4,917632,917759,4,918000,921599,4,0,9,4,11,12,4,14,31,4,169,169,14,174,174,14,1155,1159,5,1425,1469,5,1473,1474,5,1479,1479,5,1552,1562,5,1611,1631,5,1750,1756,5,1759,1764,5,1770,1773,5,1809,1809,5,1958,1968,5,2045,2045,5,2075,2083,5,2089,2093,5,2192,2193,1,2250,2273,5,2275,2306,5,2362,2362,5,2364,2364,5,2369,2376,5,2381,2381,5,2385,2391,5,2433,2433,5,2492,2492,5,2495,2496,7,2503,2504,7,2509,2509,5,2530,2531,5,2561,2562,5,2620,2620,5,2625,2626,5,2635,2637,5,2672,2673,5,2689,2690,5,2748,2748,5,2753,2757,5,2761,2761,7,2765,2765,5,2810,2815,5,2818,2819,7,2878,2878,5,2880,2880,7,2887,2888,7,2893,2893,5,2903,2903,5,2946,2946,5,3007,3007,7,3009,3010,7,3018,3020,7,3031,3031,5,3073,3075,7,3132,3132,5,3137,3140,7,3146,3149,5,3170,3171,5,3202,3203,7,3262,3262,7,3264,3265,7,3267,3268,7,3271,3272,7,3276,3277,5,3298,3299,5,3330,3331,7,3390,3390,5,3393,3396,5,3402,3404,7,3406,3406,1,3426,3427,5,3458,3459,7,3535,3535,5,3538,3540,5,3544,3550,7,3570,3571,7,3635,3635,7,3655,3662,5,3763,3763,7,3784,3789,5,3893,3893,5,3897,3897,5,3953,3966,5,3968,3972,5,3981,3991,5,4038,4038,5,4145,4145,7,4153,4154,5,4157,4158,5,4184,4185,5,4209,4212,5,4228,4228,7,4237,4237,5,4352,4447,8,4520,4607,10,5906,5908,5,5938,5939,5,5970,5971,5,6068,6069,5,6071,6077,5,6086,6086,5,6089,6099,5,6155,6157,5,6159,6159,5,6313,6313,5,6435,6438,7,6441,6443,7,6450,6450,5,6457,6459,5,6681,6682,7,6741,6741,7,6743,6743,7,6752,6752,5,6757,6764,5,6771,6780,5,6832,6845,5,6847,6862,5,6916,6916,7,6965,6965,5,6971,6971,7,6973,6977,7,6979,6980,7,7040,7041,5,7073,7073,7,7078,7079,7,7082,7082,7,7142,7142,5,7144,7145,5,7149,7149,5,7151,7153,5,7204,7211,7,7220,7221,7,7376,7378,5,7393,7393,7,7405,7405,5,7415,7415,7,7616,7679,5,8204,8204,5,8206,8207,4,8233,8233,4,8252,8252,14,8288,8292,4,8294,8303,4,8413,8416,5,8418,8420,5,8482,8482,14,8596,8601,14,8986,8987,14,9096,9096,14,9193,9196,14,9199,9199,14,9201,9202,14,9208,9210,14,9642,9643,14,9664,9664,14,9728,9729,14,9732,9732,14,9735,9741,14,9743,9744,14,9746,9746,14,9750,9751,14,9753,9756,14,9758,9759,14,9761,9761,14,9764,9765,14,9767,9769,14,9771,9773,14,9775,9775,14,9784,9785,14,9787,9791,14,9793,9793,14,9795,9799,14,9812,9822,14,9824,9824,14,9827,9827,14,9829,9830,14,9832,9832,14,9851,9851,14,9854,9854,14,9856,9861,14,9874,9874,14,9876,9876,14,9878,9879,14,9881,9881,14,9883,9884,14,9888,9889,14,9895,9895,14,9898,9899,14,9904,9905,14,9917,9918,14,9924,9925,14,9928,9928,14,9934,9934,14,9936,9936,14,9938,9938,14,9940,9940,14,9961,9961,14,9963,9967,14,9970,9971,14,9973,9973,14,9975,9977,14,9979,9980,14,9982,9985,14,9987,9988,14,9992,9996,14,9998,9998,14,10000,10001,14,10004,10004,14,10013,10013,14,10024,10024,14,10052,10052,14,10060,10060,14,10067,10069,14,10083,10083,14,10085,10087,14,10145,10145,14,10175,10175,14,11013,11015,14,11088,11088,14,11503,11505,5,11744,11775,5,12334,12335,5,12349,12349,14,12951,12951,14,42607,42607,5,42612,42621,5,42736,42737,5,43014,43014,5,43043,43044,7,43047,43047,7,43136,43137,7,43204,43205,5,43263,43263,5,43335,43345,5,43360,43388,8,43395,43395,7,43444,43445,7,43450,43451,7,43454,43456,7,43561,43566,5,43569,43570,5,43573,43574,5,43596,43596,5,43644,43644,5,43698,43700,5,43710,43711,5,43755,43755,7,43758,43759,7,43766,43766,5,44005,44005,5,44008,44008,5,44012,44012,7,44032,44032,11,44060,44060,11,44088,44088,11,44116,44116,11,44144,44144,11,44172,44172,11,44200,44200,11,44228,44228,11,44256,44256,11,44284,44284,11,44312,44312,11,44340,44340,11,44368,44368,11,44396,44396,11,44424,44424,11,44452,44452,11,44480,44480,11,44508,44508,11,44536,44536,11,44564,44564,11,44592,44592,11,44620,44620,11,44648,44648,11,44676,44676,11,44704,44704,11,44732,44732,11,44760,44760,11,44788,44788,11,44816,44816,11,44844,44844,11,44872,44872,11,44900,44900,11,44928,44928,11,44956,44956,11,44984,44984,11,45012,45012,11,45040,45040,11,45068,45068,11,45096,45096,11,45124,45124,11,45152,45152,11,45180,45180,11,45208,45208,11,45236,45236,11,45264,45264,11,45292,45292,11,45320,45320,11,45348,45348,11,45376,45376,11,45404,45404,11,45432,45432,11,45460,45460,11,45488,45488,11,45516,45516,11,45544,45544,11,45572,45572,11,45600,45600,11,45628,45628,11,45656,45656,11,45684,45684,11,45712,45712,11,45740,45740,11,45768,45768,11,45796,45796,11,45824,45824,11,45852,45852,11,45880,45880,11,45908,45908,11,45936,45936,11,45964,45964,11,45992,45992,11,46020,46020,11,46048,46048,11,46076,46076,11,46104,46104,11,46132,46132,11,46160,46160,11,46188,46188,11,46216,46216,11,46244,46244,11,46272,46272,11,46300,46300,11,46328,46328,11,46356,46356,11,46384,46384,11,46412,46412,11,46440,46440,11,46468,46468,11,46496,46496,11,46524,46524,11,46552,46552,11,46580,46580,11,46608,46608,11,46636,46636,11,46664,46664,11,46692,46692,11,46720,46720,11,46748,46748,11,46776,46776,11,46804,46804,11,46832,46832,11,46860,46860,11,46888,46888,11,46916,46916,11,46944,46944,11,46972,46972,11,47000,47000,11,47028,47028,11,47056,47056,11,47084,47084,11,47112,47112,11,47140,47140,11,47168,47168,11,47196,47196,11,47224,47224,11,47252,47252,11,47280,47280,11,47308,47308,11,47336,47336,11,47364,47364,11,47392,47392,11,47420,47420,11,47448,47448,11,47476,47476,11,47504,47504,11,47532,47532,11,47560,47560,11,47588,47588,11,47616,47616,11,47644,47644,11,47672,47672,11,47700,47700,11,47728,47728,11,47756,47756,11,47784,47784,11,47812,47812,11,47840,47840,11,47868,47868,11,47896,47896,11,47924,47924,11,47952,47952,11,47980,47980,11,48008,48008,11,48036,48036,11,48064,48064,11,48092,48092,11,48120,48120,11,48148,48148,11,48176,48176,11,48204,48204,11,48232,48232,11,48260,48260,11,48288,48288,11,48316,48316,11,48344,48344,11,48372,48372,11,48400,48400,11,48428,48428,11,48456,48456,11,48484,48484,11,48512,48512,11,48540,48540,11,48568,48568,11,48596,48596,11,48624,48624,11,48652,48652,11,48680,48680,11,48708,48708,11,48736,48736,11,48764,48764,11,48792,48792,11,48820,48820,11,48848,48848,11,48876,48876,11,48904,48904,11,48932,48932,11,48960,48960,11,48988,48988,11,49016,49016,11,49044,49044,11,49072,49072,11,49100,49100,11,49128,49128,11,49156,49156,11,49184,49184,11,49212,49212,11,49240,49240,11,49268,49268,11,49296,49296,11,49324,49324,11,49352,49352,11,49380,49380,11,49408,49408,11,49436,49436,11,49464,49464,11,49492,49492,11,49520,49520,11,49548,49548,11,49576,49576,11,49604,49604,11,49632,49632,11,49660,49660,11,49688,49688,11,49716,49716,11,49744,49744,11,49772,49772,11,49800,49800,11,49828,49828,11,49856,49856,11,49884,49884,11,49912,49912,11,49940,49940,11,49968,49968,11,49996,49996,11,50024,50024,11,50052,50052,11,50080,50080,11,50108,50108,11,50136,50136,11,50164,50164,11,50192,50192,11,50220,50220,11,50248,50248,11,50276,50276,11,50304,50304,11,50332,50332,11,50360,50360,11,50388,50388,11,50416,50416,11,50444,50444,11,50472,50472,11,50500,50500,11,50528,50528,11,50556,50556,11,50584,50584,11,50612,50612,11,50640,50640,11,50668,50668,11,50696,50696,11,50724,50724,11,50752,50752,11,50780,50780,11,50808,50808,11,50836,50836,11,50864,50864,11,50892,50892,11,50920,50920,11,50948,50948,11,50976,50976,11,51004,51004,11,51032,51032,11,51060,51060,11,51088,51088,11,51116,51116,11,51144,51144,11,51172,51172,11,51200,51200,11,51228,51228,11,51256,51256,11,51284,51284,11,51312,51312,11,51340,51340,11,51368,51368,11,51396,51396,11,51424,51424,11,51452,51452,11,51480,51480,11,51508,51508,11,51536,51536,11,51564,51564,11,51592,51592,11,51620,51620,11,51648,51648,11,51676,51676,11,51704,51704,11,51732,51732,11,51760,51760,11,51788,51788,11,51816,51816,11,51844,51844,11,51872,51872,11,51900,51900,11,51928,51928,11,51956,51956,11,51984,51984,11,52012,52012,11,52040,52040,11,52068,52068,11,52096,52096,11,52124,52124,11,52152,52152,11,52180,52180,11,52208,52208,11,52236,52236,11,52264,52264,11,52292,52292,11,52320,52320,11,52348,52348,11,52376,52376,11,52404,52404,11,52432,52432,11,52460,52460,11,52488,52488,11,52516,52516,11,52544,52544,11,52572,52572,11,52600,52600,11,52628,52628,11,52656,52656,11,52684,52684,11,52712,52712,11,52740,52740,11,52768,52768,11,52796,52796,11,52824,52824,11,52852,52852,11,52880,52880,11,52908,52908,11,52936,52936,11,52964,52964,11,52992,52992,11,53020,53020,11,53048,53048,11,53076,53076,11,53104,53104,11,53132,53132,11,53160,53160,11,53188,53188,11,53216,53216,11,53244,53244,11,53272,53272,11,53300,53300,11,53328,53328,11,53356,53356,11,53384,53384,11,53412,53412,11,53440,53440,11,53468,53468,11,53496,53496,11,53524,53524,11,53552,53552,11,53580,53580,11,53608,53608,11,53636,53636,11,53664,53664,11,53692,53692,11,53720,53720,11,53748,53748,11,53776,53776,11,53804,53804,11,53832,53832,11,53860,53860,11,53888,53888,11,53916,53916,11,53944,53944,11,53972,53972,11,54000,54000,11,54028,54028,11,54056,54056,11,54084,54084,11,54112,54112,11,54140,54140,11,54168,54168,11,54196,54196,11,54224,54224,11,54252,54252,11,54280,54280,11,54308,54308,11,54336,54336,11,54364,54364,11,54392,54392,11,54420,54420,11,54448,54448,11,54476,54476,11,54504,54504,11,54532,54532,11,54560,54560,11,54588,54588,11,54616,54616,11,54644,54644,11,54672,54672,11,54700,54700,11,54728,54728,11,54756,54756,11,54784,54784,11,54812,54812,11,54840,54840,11,54868,54868,11,54896,54896,11,54924,54924,11,54952,54952,11,54980,54980,11,55008,55008,11,55036,55036,11,55064,55064,11,55092,55092,11,55120,55120,11,55148,55148,11,55176,55176,11,55216,55238,9,64286,64286,5,65056,65071,5,65438,65439,5,65529,65531,4,66272,66272,5,68097,68099,5,68108,68111,5,68159,68159,5,68900,68903,5,69446,69456,5,69632,69632,7,69634,69634,7,69744,69744,5,69759,69761,5,69808,69810,7,69815,69816,7,69821,69821,1,69837,69837,1,69927,69931,5,69933,69940,5,70003,70003,5,70018,70018,7,70070,70078,5,70082,70083,1,70094,70094,7,70188,70190,7,70194,70195,7,70197,70197,7,70206,70206,5,70368,70370,7,70400,70401,5,70459,70460,5,70463,70463,7,70465,70468,7,70475,70477,7,70498,70499,7,70512,70516,5,70712,70719,5,70722,70724,5,70726,70726,5,70832,70832,5,70835,70840,5,70842,70842,5,70845,70845,5,70847,70848,5,70850,70851,5,71088,71089,7,71096,71099,7,71102,71102,7,71132,71133,5,71219,71226,5,71229,71229,5,71231,71232,5,71340,71340,7,71342,71343,7,71350,71350,7,71453,71455,5,71462,71462,7,71724,71726,7,71736,71736,7,71984,71984,5,71991,71992,7,71997,71997,7,71999,71999,1,72001,72001,1,72003,72003,5,72148,72151,5,72156,72159,7,72164,72164,7,72243,72248,5,72250,72250,1,72263,72263,5,72279,72280,7,72324,72329,1,72343,72343,7,72751,72751,7,72760,72765,5,72767,72767,5,72873,72873,7,72881,72881,7,72884,72884,7,73009,73014,5,73020,73021,5,73030,73030,1,73098,73102,7,73107,73108,7,73110,73110,7,73459,73460,5,78896,78904,4,92976,92982,5,94033,94087,7,94180,94180,5,113821,113822,5,118528,118573,5,119141,119141,5,119143,119145,5,119150,119154,5,119163,119170,5,119210,119213,5,121344,121398,5,121461,121461,5,121499,121503,5,122880,122886,5,122907,122913,5,122918,122922,5,123566,123566,5,125136,125142,5,126976,126979,14,126981,127182,14,127184,127231,14,127279,127279,14,127344,127345,14,127374,127374,14,127405,127461,14,127489,127490,14,127514,127514,14,127538,127546,14,127561,127567,14,127570,127743,14,127757,127758,14,127760,127760,14,127762,127762,14,127766,127768,14,127770,127770,14,127772,127772,14,127775,127776,14,127778,127779,14,127789,127791,14,127794,127795,14,127798,127798,14,127819,127819,14,127824,127824,14,127868,127868,14,127870,127871,14,127892,127893,14,127896,127896,14,127900,127901,14,127904,127940,14,127942,127942,14,127944,127944,14,127946,127946,14,127951,127955,14,127968,127971,14,127973,127984,14,127987,127987,14,127989,127989,14,127991,127991,14,127995,127999,5,128008,128008,14,128012,128014,14,128017,128018,14,128020,128020,14,128022,128022,14,128042,128042,14,128063,128063,14,128065,128065,14,128101,128101,14,128108,128109,14,128173,128173,14,128182,128183,14,128236,128237,14,128239,128239,14,128245,128245,14,128248,128248,14,128253,128253,14,128255,128258,14,128260,128263,14,128265,128265,14,128277,128277,14,128300,128301,14,128326,128328,14,128331,128334,14,128336,128347,14,128360,128366,14,128369,128370,14,128378,128378,14,128391,128391,14,128394,128397,14,128400,128400,14,128405,128406,14,128420,128420,14,128422,128423,14,128425,128432,14,128435,128443,14,128445,128449,14,128453,128464,14,128468,128475,14,128479,128480,14,128482,128482,14,128484,128487,14,128489,128494,14,128496,128498,14,128500,128505,14,128507,128511,14,128513,128518,14,128521,128525,14,128527,128527,14,128529,128529,14,128533,128533,14,128535,128535,14,128537,128537,14]");
  }
  var AmbiguousCharacters = class {
    static getInstance(locales) {
      return _a2.cache.get(Array.from(locales));
    }
    static getLocales() {
      return _a2._locales.value;
    }
    constructor(confusableDictionary) {
      this.confusableDictionary = confusableDictionary;
    }
    isAmbiguous(codePoint) {
      return this.confusableDictionary.has(codePoint);
    }
    /**
     * Returns the non basic ASCII code point that the given code point can be confused,
     * or undefined if such code point does note exist.
     */
    getPrimaryConfusable(codePoint) {
      return this.confusableDictionary.get(codePoint);
    }
    getConfusableCodePoints() {
      return new Set(this.confusableDictionary.keys());
    }
  };
  _a2 = AmbiguousCharacters;
  AmbiguousCharacters.ambiguousCharacterData = new Lazy(() => {
    return JSON.parse('{"_common":[8232,32,8233,32,5760,32,8192,32,8193,32,8194,32,8195,32,8196,32,8197,32,8198,32,8200,32,8201,32,8202,32,8287,32,8199,32,8239,32,2042,95,65101,95,65102,95,65103,95,8208,45,8209,45,8210,45,65112,45,1748,45,8259,45,727,45,8722,45,10134,45,11450,45,1549,44,1643,44,8218,44,184,44,42233,44,894,59,2307,58,2691,58,1417,58,1795,58,1796,58,5868,58,65072,58,6147,58,6153,58,8282,58,1475,58,760,58,42889,58,8758,58,720,58,42237,58,451,33,11601,33,660,63,577,63,2429,63,5038,63,42731,63,119149,46,8228,46,1793,46,1794,46,42510,46,68176,46,1632,46,1776,46,42232,46,1373,96,65287,96,8219,96,8242,96,1370,96,1523,96,8175,96,65344,96,900,96,8189,96,8125,96,8127,96,8190,96,697,96,884,96,712,96,714,96,715,96,756,96,699,96,701,96,700,96,702,96,42892,96,1497,96,2036,96,2037,96,5194,96,5836,96,94033,96,94034,96,65339,91,10088,40,10098,40,12308,40,64830,40,65341,93,10089,41,10099,41,12309,41,64831,41,10100,123,119060,123,10101,125,65342,94,8270,42,1645,42,8727,42,66335,42,5941,47,8257,47,8725,47,8260,47,9585,47,10187,47,10744,47,119354,47,12755,47,12339,47,11462,47,20031,47,12035,47,65340,92,65128,92,8726,92,10189,92,10741,92,10745,92,119311,92,119355,92,12756,92,20022,92,12034,92,42872,38,708,94,710,94,5869,43,10133,43,66203,43,8249,60,10094,60,706,60,119350,60,5176,60,5810,60,5120,61,11840,61,12448,61,42239,61,8250,62,10095,62,707,62,119351,62,5171,62,94015,62,8275,126,732,126,8128,126,8764,126,65372,124,65293,45,120784,50,120794,50,120804,50,120814,50,120824,50,130034,50,42842,50,423,50,1000,50,42564,50,5311,50,42735,50,119302,51,120785,51,120795,51,120805,51,120815,51,120825,51,130035,51,42923,51,540,51,439,51,42858,51,11468,51,1248,51,94011,51,71882,51,120786,52,120796,52,120806,52,120816,52,120826,52,130036,52,5070,52,71855,52,120787,53,120797,53,120807,53,120817,53,120827,53,130037,53,444,53,71867,53,120788,54,120798,54,120808,54,120818,54,120828,54,130038,54,11474,54,5102,54,71893,54,119314,55,120789,55,120799,55,120809,55,120819,55,120829,55,130039,55,66770,55,71878,55,2819,56,2538,56,2666,56,125131,56,120790,56,120800,56,120810,56,120820,56,120830,56,130040,56,547,56,546,56,66330,56,2663,57,2920,57,2541,57,3437,57,120791,57,120801,57,120811,57,120821,57,120831,57,130041,57,42862,57,11466,57,71884,57,71852,57,71894,57,9082,97,65345,97,119834,97,119886,97,119938,97,119990,97,120042,97,120094,97,120146,97,120198,97,120250,97,120302,97,120354,97,120406,97,120458,97,593,97,945,97,120514,97,120572,97,120630,97,120688,97,120746,97,65313,65,119808,65,119860,65,119912,65,119964,65,120016,65,120068,65,120120,65,120172,65,120224,65,120276,65,120328,65,120380,65,120432,65,913,65,120488,65,120546,65,120604,65,120662,65,120720,65,5034,65,5573,65,42222,65,94016,65,66208,65,119835,98,119887,98,119939,98,119991,98,120043,98,120095,98,120147,98,120199,98,120251,98,120303,98,120355,98,120407,98,120459,98,388,98,5071,98,5234,98,5551,98,65314,66,8492,66,119809,66,119861,66,119913,66,120017,66,120069,66,120121,66,120173,66,120225,66,120277,66,120329,66,120381,66,120433,66,42932,66,914,66,120489,66,120547,66,120605,66,120663,66,120721,66,5108,66,5623,66,42192,66,66178,66,66209,66,66305,66,65347,99,8573,99,119836,99,119888,99,119940,99,119992,99,120044,99,120096,99,120148,99,120200,99,120252,99,120304,99,120356,99,120408,99,120460,99,7428,99,1010,99,11429,99,43951,99,66621,99,128844,67,71922,67,71913,67,65315,67,8557,67,8450,67,8493,67,119810,67,119862,67,119914,67,119966,67,120018,67,120174,67,120226,67,120278,67,120330,67,120382,67,120434,67,1017,67,11428,67,5087,67,42202,67,66210,67,66306,67,66581,67,66844,67,8574,100,8518,100,119837,100,119889,100,119941,100,119993,100,120045,100,120097,100,120149,100,120201,100,120253,100,120305,100,120357,100,120409,100,120461,100,1281,100,5095,100,5231,100,42194,100,8558,68,8517,68,119811,68,119863,68,119915,68,119967,68,120019,68,120071,68,120123,68,120175,68,120227,68,120279,68,120331,68,120383,68,120435,68,5024,68,5598,68,5610,68,42195,68,8494,101,65349,101,8495,101,8519,101,119838,101,119890,101,119942,101,120046,101,120098,101,120150,101,120202,101,120254,101,120306,101,120358,101,120410,101,120462,101,43826,101,1213,101,8959,69,65317,69,8496,69,119812,69,119864,69,119916,69,120020,69,120072,69,120124,69,120176,69,120228,69,120280,69,120332,69,120384,69,120436,69,917,69,120492,69,120550,69,120608,69,120666,69,120724,69,11577,69,5036,69,42224,69,71846,69,71854,69,66182,69,119839,102,119891,102,119943,102,119995,102,120047,102,120099,102,120151,102,120203,102,120255,102,120307,102,120359,102,120411,102,120463,102,43829,102,42905,102,383,102,7837,102,1412,102,119315,70,8497,70,119813,70,119865,70,119917,70,120021,70,120073,70,120125,70,120177,70,120229,70,120281,70,120333,70,120385,70,120437,70,42904,70,988,70,120778,70,5556,70,42205,70,71874,70,71842,70,66183,70,66213,70,66853,70,65351,103,8458,103,119840,103,119892,103,119944,103,120048,103,120100,103,120152,103,120204,103,120256,103,120308,103,120360,103,120412,103,120464,103,609,103,7555,103,397,103,1409,103,119814,71,119866,71,119918,71,119970,71,120022,71,120074,71,120126,71,120178,71,120230,71,120282,71,120334,71,120386,71,120438,71,1292,71,5056,71,5107,71,42198,71,65352,104,8462,104,119841,104,119945,104,119997,104,120049,104,120101,104,120153,104,120205,104,120257,104,120309,104,120361,104,120413,104,120465,104,1211,104,1392,104,5058,104,65320,72,8459,72,8460,72,8461,72,119815,72,119867,72,119919,72,120023,72,120179,72,120231,72,120283,72,120335,72,120387,72,120439,72,919,72,120494,72,120552,72,120610,72,120668,72,120726,72,11406,72,5051,72,5500,72,42215,72,66255,72,731,105,9075,105,65353,105,8560,105,8505,105,8520,105,119842,105,119894,105,119946,105,119998,105,120050,105,120102,105,120154,105,120206,105,120258,105,120310,105,120362,105,120414,105,120466,105,120484,105,618,105,617,105,953,105,8126,105,890,105,120522,105,120580,105,120638,105,120696,105,120754,105,1110,105,42567,105,1231,105,43893,105,5029,105,71875,105,65354,106,8521,106,119843,106,119895,106,119947,106,119999,106,120051,106,120103,106,120155,106,120207,106,120259,106,120311,106,120363,106,120415,106,120467,106,1011,106,1112,106,65322,74,119817,74,119869,74,119921,74,119973,74,120025,74,120077,74,120129,74,120181,74,120233,74,120285,74,120337,74,120389,74,120441,74,42930,74,895,74,1032,74,5035,74,5261,74,42201,74,119844,107,119896,107,119948,107,120000,107,120052,107,120104,107,120156,107,120208,107,120260,107,120312,107,120364,107,120416,107,120468,107,8490,75,65323,75,119818,75,119870,75,119922,75,119974,75,120026,75,120078,75,120130,75,120182,75,120234,75,120286,75,120338,75,120390,75,120442,75,922,75,120497,75,120555,75,120613,75,120671,75,120729,75,11412,75,5094,75,5845,75,42199,75,66840,75,1472,108,8739,73,9213,73,65512,73,1633,108,1777,73,66336,108,125127,108,120783,73,120793,73,120803,73,120813,73,120823,73,130033,73,65321,73,8544,73,8464,73,8465,73,119816,73,119868,73,119920,73,120024,73,120128,73,120180,73,120232,73,120284,73,120336,73,120388,73,120440,73,65356,108,8572,73,8467,108,119845,108,119897,108,119949,108,120001,108,120053,108,120105,73,120157,73,120209,73,120261,73,120313,73,120365,73,120417,73,120469,73,448,73,120496,73,120554,73,120612,73,120670,73,120728,73,11410,73,1030,73,1216,73,1493,108,1503,108,1575,108,126464,108,126592,108,65166,108,65165,108,1994,108,11599,73,5825,73,42226,73,93992,73,66186,124,66313,124,119338,76,8556,76,8466,76,119819,76,119871,76,119923,76,120027,76,120079,76,120131,76,120183,76,120235,76,120287,76,120339,76,120391,76,120443,76,11472,76,5086,76,5290,76,42209,76,93974,76,71843,76,71858,76,66587,76,66854,76,65325,77,8559,77,8499,77,119820,77,119872,77,119924,77,120028,77,120080,77,120132,77,120184,77,120236,77,120288,77,120340,77,120392,77,120444,77,924,77,120499,77,120557,77,120615,77,120673,77,120731,77,1018,77,11416,77,5047,77,5616,77,5846,77,42207,77,66224,77,66321,77,119847,110,119899,110,119951,110,120003,110,120055,110,120107,110,120159,110,120211,110,120263,110,120315,110,120367,110,120419,110,120471,110,1400,110,1404,110,65326,78,8469,78,119821,78,119873,78,119925,78,119977,78,120029,78,120081,78,120185,78,120237,78,120289,78,120341,78,120393,78,120445,78,925,78,120500,78,120558,78,120616,78,120674,78,120732,78,11418,78,42208,78,66835,78,3074,111,3202,111,3330,111,3458,111,2406,111,2662,111,2790,111,3046,111,3174,111,3302,111,3430,111,3664,111,3792,111,4160,111,1637,111,1781,111,65359,111,8500,111,119848,111,119900,111,119952,111,120056,111,120108,111,120160,111,120212,111,120264,111,120316,111,120368,111,120420,111,120472,111,7439,111,7441,111,43837,111,959,111,120528,111,120586,111,120644,111,120702,111,120760,111,963,111,120532,111,120590,111,120648,111,120706,111,120764,111,11423,111,4351,111,1413,111,1505,111,1607,111,126500,111,126564,111,126596,111,65259,111,65260,111,65258,111,65257,111,1726,111,64428,111,64429,111,64427,111,64426,111,1729,111,64424,111,64425,111,64423,111,64422,111,1749,111,3360,111,4125,111,66794,111,71880,111,71895,111,66604,111,1984,79,2534,79,2918,79,12295,79,70864,79,71904,79,120782,79,120792,79,120802,79,120812,79,120822,79,130032,79,65327,79,119822,79,119874,79,119926,79,119978,79,120030,79,120082,79,120134,79,120186,79,120238,79,120290,79,120342,79,120394,79,120446,79,927,79,120502,79,120560,79,120618,79,120676,79,120734,79,11422,79,1365,79,11604,79,4816,79,2848,79,66754,79,42227,79,71861,79,66194,79,66219,79,66564,79,66838,79,9076,112,65360,112,119849,112,119901,112,119953,112,120005,112,120057,112,120109,112,120161,112,120213,112,120265,112,120317,112,120369,112,120421,112,120473,112,961,112,120530,112,120544,112,120588,112,120602,112,120646,112,120660,112,120704,112,120718,112,120762,112,120776,112,11427,112,65328,80,8473,80,119823,80,119875,80,119927,80,119979,80,120031,80,120083,80,120187,80,120239,80,120291,80,120343,80,120395,80,120447,80,929,80,120504,80,120562,80,120620,80,120678,80,120736,80,11426,80,5090,80,5229,80,42193,80,66197,80,119850,113,119902,113,119954,113,120006,113,120058,113,120110,113,120162,113,120214,113,120266,113,120318,113,120370,113,120422,113,120474,113,1307,113,1379,113,1382,113,8474,81,119824,81,119876,81,119928,81,119980,81,120032,81,120084,81,120188,81,120240,81,120292,81,120344,81,120396,81,120448,81,11605,81,119851,114,119903,114,119955,114,120007,114,120059,114,120111,114,120163,114,120215,114,120267,114,120319,114,120371,114,120423,114,120475,114,43847,114,43848,114,7462,114,11397,114,43905,114,119318,82,8475,82,8476,82,8477,82,119825,82,119877,82,119929,82,120033,82,120189,82,120241,82,120293,82,120345,82,120397,82,120449,82,422,82,5025,82,5074,82,66740,82,5511,82,42211,82,94005,82,65363,115,119852,115,119904,115,119956,115,120008,115,120060,115,120112,115,120164,115,120216,115,120268,115,120320,115,120372,115,120424,115,120476,115,42801,115,445,115,1109,115,43946,115,71873,115,66632,115,65331,83,119826,83,119878,83,119930,83,119982,83,120034,83,120086,83,120138,83,120190,83,120242,83,120294,83,120346,83,120398,83,120450,83,1029,83,1359,83,5077,83,5082,83,42210,83,94010,83,66198,83,66592,83,119853,116,119905,116,119957,116,120009,116,120061,116,120113,116,120165,116,120217,116,120269,116,120321,116,120373,116,120425,116,120477,116,8868,84,10201,84,128872,84,65332,84,119827,84,119879,84,119931,84,119983,84,120035,84,120087,84,120139,84,120191,84,120243,84,120295,84,120347,84,120399,84,120451,84,932,84,120507,84,120565,84,120623,84,120681,84,120739,84,11430,84,5026,84,42196,84,93962,84,71868,84,66199,84,66225,84,66325,84,119854,117,119906,117,119958,117,120010,117,120062,117,120114,117,120166,117,120218,117,120270,117,120322,117,120374,117,120426,117,120478,117,42911,117,7452,117,43854,117,43858,117,651,117,965,117,120534,117,120592,117,120650,117,120708,117,120766,117,1405,117,66806,117,71896,117,8746,85,8899,85,119828,85,119880,85,119932,85,119984,85,120036,85,120088,85,120140,85,120192,85,120244,85,120296,85,120348,85,120400,85,120452,85,1357,85,4608,85,66766,85,5196,85,42228,85,94018,85,71864,85,8744,118,8897,118,65366,118,8564,118,119855,118,119907,118,119959,118,120011,118,120063,118,120115,118,120167,118,120219,118,120271,118,120323,118,120375,118,120427,118,120479,118,7456,118,957,118,120526,118,120584,118,120642,118,120700,118,120758,118,1141,118,1496,118,71430,118,43945,118,71872,118,119309,86,1639,86,1783,86,8548,86,119829,86,119881,86,119933,86,119985,86,120037,86,120089,86,120141,86,120193,86,120245,86,120297,86,120349,86,120401,86,120453,86,1140,86,11576,86,5081,86,5167,86,42719,86,42214,86,93960,86,71840,86,66845,86,623,119,119856,119,119908,119,119960,119,120012,119,120064,119,120116,119,120168,119,120220,119,120272,119,120324,119,120376,119,120428,119,120480,119,7457,119,1121,119,1309,119,1377,119,71434,119,71438,119,71439,119,43907,119,71919,87,71910,87,119830,87,119882,87,119934,87,119986,87,120038,87,120090,87,120142,87,120194,87,120246,87,120298,87,120350,87,120402,87,120454,87,1308,87,5043,87,5076,87,42218,87,5742,120,10539,120,10540,120,10799,120,65368,120,8569,120,119857,120,119909,120,119961,120,120013,120,120065,120,120117,120,120169,120,120221,120,120273,120,120325,120,120377,120,120429,120,120481,120,5441,120,5501,120,5741,88,9587,88,66338,88,71916,88,65336,88,8553,88,119831,88,119883,88,119935,88,119987,88,120039,88,120091,88,120143,88,120195,88,120247,88,120299,88,120351,88,120403,88,120455,88,42931,88,935,88,120510,88,120568,88,120626,88,120684,88,120742,88,11436,88,11613,88,5815,88,42219,88,66192,88,66228,88,66327,88,66855,88,611,121,7564,121,65369,121,119858,121,119910,121,119962,121,120014,121,120066,121,120118,121,120170,121,120222,121,120274,121,120326,121,120378,121,120430,121,120482,121,655,121,7935,121,43866,121,947,121,8509,121,120516,121,120574,121,120632,121,120690,121,120748,121,1199,121,4327,121,71900,121,65337,89,119832,89,119884,89,119936,89,119988,89,120040,89,120092,89,120144,89,120196,89,120248,89,120300,89,120352,89,120404,89,120456,89,933,89,978,89,120508,89,120566,89,120624,89,120682,89,120740,89,11432,89,1198,89,5033,89,5053,89,42220,89,94019,89,71844,89,66226,89,119859,122,119911,122,119963,122,120015,122,120067,122,120119,122,120171,122,120223,122,120275,122,120327,122,120379,122,120431,122,120483,122,7458,122,43923,122,71876,122,66293,90,71909,90,65338,90,8484,90,8488,90,119833,90,119885,90,119937,90,119989,90,120041,90,120197,90,120249,90,120301,90,120353,90,120405,90,120457,90,918,90,120493,90,120551,90,120609,90,120667,90,120725,90,5059,90,42204,90,71849,90,65282,34,65284,36,65285,37,65286,38,65290,42,65291,43,65294,46,65295,47,65296,48,65297,49,65298,50,65299,51,65300,52,65301,53,65302,54,65303,55,65304,56,65305,57,65308,60,65309,61,65310,62,65312,64,65316,68,65318,70,65319,71,65324,76,65329,81,65330,82,65333,85,65334,86,65335,87,65343,95,65346,98,65348,100,65350,102,65355,107,65357,109,65358,110,65361,113,65362,114,65364,116,65365,117,65367,119,65370,122,65371,123,65373,125,119846,109],"_default":[160,32,8211,45,65374,126,65306,58,65281,33,8216,96,8217,96,8245,96,180,96,12494,47,1047,51,1073,54,1072,97,1040,65,1068,98,1042,66,1089,99,1057,67,1077,101,1045,69,1053,72,305,105,1050,75,921,73,1052,77,1086,111,1054,79,1009,112,1088,112,1056,80,1075,114,1058,84,215,120,1093,120,1061,88,1091,121,1059,89,65283,35,65288,40,65289,41,65292,44,65307,59,65311,63],"cs":[65374,126,65306,58,65281,33,8216,96,8217,96,8245,96,180,96,12494,47,1047,51,1073,54,1072,97,1040,65,1068,98,1042,66,1089,99,1057,67,1077,101,1045,69,1053,72,305,105,1050,75,921,73,1052,77,1086,111,1054,79,1009,112,1088,112,1056,80,1075,114,1058,84,1093,120,1061,88,1091,121,1059,89,65283,35,65288,40,65289,41,65292,44,65307,59,65311,63],"de":[65374,126,65306,58,65281,33,8216,96,8217,96,8245,96,180,96,12494,47,1047,51,1073,54,1072,97,1040,65,1068,98,1042,66,1089,99,1057,67,1077,101,1045,69,1053,72,305,105,1050,75,921,73,1052,77,1086,111,1054,79,1009,112,1088,112,1056,80,1075,114,1058,84,1093,120,1061,88,1091,121,1059,89,65283,35,65288,40,65289,41,65292,44,65307,59,65311,63],"es":[8211,45,65374,126,65306,58,65281,33,8245,96,180,96,12494,47,1047,51,1073,54,1072,97,1040,65,1068,98,1042,66,1089,99,1057,67,1077,101,1045,69,1053,72,305,105,1050,75,1052,77,1086,111,1054,79,1009,112,1088,112,1056,80,1075,114,1058,84,215,120,1093,120,1061,88,1091,121,1059,89,65283,35,65288,40,65289,41,65292,44,65307,59,65311,63],"fr":[65374,126,65306,58,65281,33,8216,96,8245,96,12494,47,1047,51,1073,54,1072,97,1040,65,1068,98,1042,66,1089,99,1057,67,1077,101,1045,69,1053,72,305,105,1050,75,921,73,1052,77,1086,111,1054,79,1009,112,1088,112,1056,80,1075,114,1058,84,215,120,1093,120,1061,88,1091,121,1059,89,65283,35,65288,40,65289,41,65292,44,65307,59,65311,63],"it":[160,32,8211,45,65374,126,65306,58,65281,33,8216,96,8245,96,180,96,12494,47,1047,51,1073,54,1072,97,1040,65,1068,98,1042,66,1089,99,1057,67,1077,101,1045,69,1053,72,305,105,1050,75,921,73,1052,77,1086,111,1054,79,1009,112,1088,112,1056,80,1075,114,1058,84,215,120,1093,120,1061,88,1091,121,1059,89,65283,35,65288,40,65289,41,65292,44,65307,59,65311,63],"ja":[8211,45,65306,58,65281,33,8216,96,8217,96,8245,96,180,96,1047,51,1073,54,1072,97,1040,65,1068,98,1042,66,1089,99,1057,67,1077,101,1045,69,1053,72,305,105,1050,75,921,73,1052,77,1086,111,1054,79,1009,112,1088,112,1056,80,1075,114,1058,84,215,120,1093,120,1061,88,1091,121,1059,89,65283,35,65292,44,65307,59],"ko":[8211,45,65374,126,65306,58,65281,33,8245,96,180,96,12494,47,1047,51,1073,54,1072,97,1040,65,1068,98,1042,66,1089,99,1057,67,1077,101,1045,69,1053,72,305,105,1050,75,921,73,1052,77,1086,111,1054,79,1009,112,1088,112,1056,80,1075,114,1058,84,215,120,1093,120,1061,88,1091,121,1059,89,65283,35,65288,40,65289,41,65292,44,65307,59,65311,63],"pl":[65374,126,65306,58,65281,33,8216,96,8217,96,8245,96,180,96,12494,47,1047,51,1073,54,1072,97,1040,65,1068,98,1042,66,1089,99,1057,67,1077,101,1045,69,1053,72,305,105,1050,75,921,73,1052,77,1086,111,1054,79,1009,112,1088,112,1056,80,1075,114,1058,84,215,120,1093,120,1061,88,1091,121,1059,89,65283,35,65288,40,65289,41,65292,44,65307,59,65311,63],"pt-BR":[65374,126,65306,58,65281,33,8216,96,8217,96,8245,96,180,96,12494,47,1047,51,1073,54,1072,97,1040,65,1068,98,1042,66,1089,99,1057,67,1077,101,1045,69,1053,72,305,105,1050,75,921,73,1052,77,1086,111,1054,79,1009,112,1088,112,1056,80,1075,114,1058,84,215,120,1093,120,1061,88,1091,121,1059,89,65283,35,65288,40,65289,41,65292,44,65307,59,65311,63],"qps-ploc":[160,32,8211,45,65374,126,65306,58,65281,33,8216,96,8217,96,8245,96,180,96,12494,47,1047,51,1073,54,1072,97,1040,65,1068,98,1042,66,1089,99,1057,67,1077,101,1045,69,1053,72,305,105,1050,75,921,73,1052,77,1086,111,1054,79,1088,112,1056,80,1075,114,1058,84,215,120,1093,120,1061,88,1091,121,1059,89,65283,35,65288,40,65289,41,65292,44,65307,59,65311,63],"ru":[65374,126,65306,58,65281,33,8216,96,8217,96,8245,96,180,96,12494,47,305,105,921,73,1009,112,215,120,65283,35,65288,40,65289,41,65292,44,65307,59,65311,63],"tr":[160,32,8211,45,65374,126,65306,58,65281,33,8245,96,180,96,12494,47,1047,51,1073,54,1072,97,1040,65,1068,98,1042,66,1089,99,1057,67,1077,101,1045,69,1053,72,1050,75,921,73,1052,77,1086,111,1054,79,1009,112,1088,112,1056,80,1075,114,1058,84,215,120,1093,120,1061,88,1091,121,1059,89,65283,35,65288,40,65289,41,65292,44,65307,59,65311,63],"zh-hans":[65374,126,65306,58,65281,33,8245,96,180,96,12494,47,1047,51,1073,54,1072,97,1040,65,1068,98,1042,66,1089,99,1057,67,1077,101,1045,69,1053,72,305,105,1050,75,921,73,1052,77,1086,111,1054,79,1009,112,1088,112,1056,80,1075,114,1058,84,215,120,1093,120,1061,88,1091,121,1059,89,65288,40,65289,41],"zh-hant":[8211,45,65374,126,180,96,12494,47,1047,51,1073,54,1072,97,1040,65,1068,98,1042,66,1089,99,1057,67,1077,101,1045,69,1053,72,305,105,1050,75,921,73,1052,77,1086,111,1054,79,1009,112,1088,112,1056,80,1075,114,1058,84,215,120,1093,120,1061,88,1091,121,1059,89,65283,35,65307,59]}');
  });
  AmbiguousCharacters.cache = new LRUCachedFunction({ getCacheKey: JSON.stringify }, (locales) => {
    function arrayToMap(arr) {
      const result = /* @__PURE__ */ new Map();
      for (let i = 0; i < arr.length; i += 2) {
        result.set(arr[i], arr[i + 1]);
      }
      return result;
    }
    function mergeMaps(map1, map2) {
      const result = new Map(map1);
      for (const [key, value] of map2) {
        result.set(key, value);
      }
      return result;
    }
    function intersectMaps(map1, map2) {
      if (!map1) {
        return map2;
      }
      const result = /* @__PURE__ */ new Map();
      for (const [key, value] of map1) {
        if (map2.has(key)) {
          result.set(key, value);
        }
      }
      return result;
    }
    const data = _a2.ambiguousCharacterData.value;
    let filteredLocales = locales.filter((l) => !l.startsWith("_") && l in data);
    if (filteredLocales.length === 0) {
      filteredLocales = ["_default"];
    }
    let languageSpecificMap = void 0;
    for (const locale of filteredLocales) {
      const map2 = arrayToMap(data[locale]);
      languageSpecificMap = intersectMaps(languageSpecificMap, map2);
    }
    const commonMap = arrayToMap(data["_common"]);
    const map = mergeMaps(commonMap, languageSpecificMap);
    return new _a2(map);
  });
  AmbiguousCharacters._locales = new Lazy(() => Object.keys(_a2.ambiguousCharacterData.value).filter((k) => !k.startsWith("_")));
  var InvisibleCharacters = class _InvisibleCharacters {
    static getRawData() {
      return JSON.parse("[9,10,11,12,13,32,127,160,173,847,1564,4447,4448,6068,6069,6155,6156,6157,6158,7355,7356,8192,8193,8194,8195,8196,8197,8198,8199,8200,8201,8202,8203,8204,8205,8206,8207,8234,8235,8236,8237,8238,8239,8287,8288,8289,8290,8291,8292,8293,8294,8295,8296,8297,8298,8299,8300,8301,8302,8303,10240,12288,12644,65024,65025,65026,65027,65028,65029,65030,65031,65032,65033,65034,65035,65036,65037,65038,65039,65279,65440,65520,65521,65522,65523,65524,65525,65526,65527,65528,65532,78844,119155,119156,119157,119158,119159,119160,119161,119162,917504,917505,917506,917507,917508,917509,917510,917511,917512,917513,917514,917515,917516,917517,917518,917519,917520,917521,917522,917523,917524,917525,917526,917527,917528,917529,917530,917531,917532,917533,917534,917535,917536,917537,917538,917539,917540,917541,917542,917543,917544,917545,917546,917547,917548,917549,917550,917551,917552,917553,917554,917555,917556,917557,917558,917559,917560,917561,917562,917563,917564,917565,917566,917567,917568,917569,917570,917571,917572,917573,917574,917575,917576,917577,917578,917579,917580,917581,917582,917583,917584,917585,917586,917587,917588,917589,917590,917591,917592,917593,917594,917595,917596,917597,917598,917599,917600,917601,917602,917603,917604,917605,917606,917607,917608,917609,917610,917611,917612,917613,917614,917615,917616,917617,917618,917619,917620,917621,917622,917623,917624,917625,917626,917627,917628,917629,917630,917631,917760,917761,917762,917763,917764,917765,917766,917767,917768,917769,917770,917771,917772,917773,917774,917775,917776,917777,917778,917779,917780,917781,917782,917783,917784,917785,917786,917787,917788,917789,917790,917791,917792,917793,917794,917795,917796,917797,917798,917799,917800,917801,917802,917803,917804,917805,917806,917807,917808,917809,917810,917811,917812,917813,917814,917815,917816,917817,917818,917819,917820,917821,917822,917823,917824,917825,917826,917827,917828,917829,917830,917831,917832,917833,917834,917835,917836,917837,917838,917839,917840,917841,917842,917843,917844,917845,917846,917847,917848,917849,917850,917851,917852,917853,917854,917855,917856,917857,917858,917859,917860,917861,917862,917863,917864,917865,917866,917867,917868,917869,917870,917871,917872,917873,917874,917875,917876,917877,917878,917879,917880,917881,917882,917883,917884,917885,917886,917887,917888,917889,917890,917891,917892,917893,917894,917895,917896,917897,917898,917899,917900,917901,917902,917903,917904,917905,917906,917907,917908,917909,917910,917911,917912,917913,917914,917915,917916,917917,917918,917919,917920,917921,917922,917923,917924,917925,917926,917927,917928,917929,917930,917931,917932,917933,917934,917935,917936,917937,917938,917939,917940,917941,917942,917943,917944,917945,917946,917947,917948,917949,917950,917951,917952,917953,917954,917955,917956,917957,917958,917959,917960,917961,917962,917963,917964,917965,917966,917967,917968,917969,917970,917971,917972,917973,917974,917975,917976,917977,917978,917979,917980,917981,917982,917983,917984,917985,917986,917987,917988,917989,917990,917991,917992,917993,917994,917995,917996,917997,917998,917999]");
    }
    static getData() {
      if (!this._data) {
        this._data = new Set(_InvisibleCharacters.getRawData());
      }
      return this._data;
    }
    static isInvisibleCharacter(codePoint) {
      return _InvisibleCharacters.getData().has(codePoint);
    }
    static get codePoints() {
      return _InvisibleCharacters.getData();
    }
  };
  InvisibleCharacters._data = void 0;

  // node_modules/monaco-editor/esm/vs/base/common/worker/simpleWorker.js
  var INITIALIZE = "$initialize";
  var RequestMessage = class {
    constructor(vsWorker, req, method, args) {
      this.vsWorker = vsWorker;
      this.req = req;
      this.method = method;
      this.args = args;
      this.type = 0;
    }
  };
  var ReplyMessage = class {
    constructor(vsWorker, seq, res, err) {
      this.vsWorker = vsWorker;
      this.seq = seq;
      this.res = res;
      this.err = err;
      this.type = 1;
    }
  };
  var SubscribeEventMessage = class {
    constructor(vsWorker, req, eventName, arg) {
      this.vsWorker = vsWorker;
      this.req = req;
      this.eventName = eventName;
      this.arg = arg;
      this.type = 2;
    }
  };
  var EventMessage = class {
    constructor(vsWorker, req, event) {
      this.vsWorker = vsWorker;
      this.req = req;
      this.event = event;
      this.type = 3;
    }
  };
  var UnsubscribeEventMessage = class {
    constructor(vsWorker, req) {
      this.vsWorker = vsWorker;
      this.req = req;
      this.type = 4;
    }
  };
  var SimpleWorkerProtocol = class {
    constructor(handler) {
      this._workerId = -1;
      this._handler = handler;
      this._lastSentReq = 0;
      this._pendingReplies = /* @__PURE__ */ Object.create(null);
      this._pendingEmitters = /* @__PURE__ */ new Map();
      this._pendingEvents = /* @__PURE__ */ new Map();
    }
    setWorkerId(workerId) {
      this._workerId = workerId;
    }
    sendMessage(method, args) {
      const req = String(++this._lastSentReq);
      return new Promise((resolve2, reject) => {
        this._pendingReplies[req] = {
          resolve: resolve2,
          reject
        };
        this._send(new RequestMessage(this._workerId, req, method, args));
      });
    }
    listen(eventName, arg) {
      let req = null;
      const emitter = new Emitter({
        onWillAddFirstListener: () => {
          req = String(++this._lastSentReq);
          this._pendingEmitters.set(req, emitter);
          this._send(new SubscribeEventMessage(this._workerId, req, eventName, arg));
        },
        onDidRemoveLastListener: () => {
          this._pendingEmitters.delete(req);
          this._send(new UnsubscribeEventMessage(this._workerId, req));
          req = null;
        }
      });
      return emitter.event;
    }
    handleMessage(message) {
      if (!message || !message.vsWorker) {
        return;
      }
      if (this._workerId !== -1 && message.vsWorker !== this._workerId) {
        return;
      }
      this._handleMessage(message);
    }
    _handleMessage(msg) {
      switch (msg.type) {
        case 1:
          return this._handleReplyMessage(msg);
        case 0:
          return this._handleRequestMessage(msg);
        case 2:
          return this._handleSubscribeEventMessage(msg);
        case 3:
          return this._handleEventMessage(msg);
        case 4:
          return this._handleUnsubscribeEventMessage(msg);
      }
    }
    _handleReplyMessage(replyMessage) {
      if (!this._pendingReplies[replyMessage.seq]) {
        console.warn("Got reply to unknown seq");
        return;
      }
      const reply = this._pendingReplies[replyMessage.seq];
      delete this._pendingReplies[replyMessage.seq];
      if (replyMessage.err) {
        let err = replyMessage.err;
        if (replyMessage.err.$isError) {
          err = new Error();
          err.name = replyMessage.err.name;
          err.message = replyMessage.err.message;
          err.stack = replyMessage.err.stack;
        }
        reply.reject(err);
        return;
      }
      reply.resolve(replyMessage.res);
    }
    _handleRequestMessage(requestMessage) {
      const req = requestMessage.req;
      const result = this._handler.handleMessage(requestMessage.method, requestMessage.args);
      result.then((r) => {
        this._send(new ReplyMessage(this._workerId, req, r, void 0));
      }, (e) => {
        if (e.detail instanceof Error) {
          e.detail = transformErrorForSerialization(e.detail);
        }
        this._send(new ReplyMessage(this._workerId, req, void 0, transformErrorForSerialization(e)));
      });
    }
    _handleSubscribeEventMessage(msg) {
      const req = msg.req;
      const disposable = this._handler.handleEvent(msg.eventName, msg.arg)((event) => {
        this._send(new EventMessage(this._workerId, req, event));
      });
      this._pendingEvents.set(req, disposable);
    }
    _handleEventMessage(msg) {
      if (!this._pendingEmitters.has(msg.req)) {
        console.warn("Got event for unknown req");
        return;
      }
      this._pendingEmitters.get(msg.req).fire(msg.event);
    }
    _handleUnsubscribeEventMessage(msg) {
      if (!this._pendingEvents.has(msg.req)) {
        console.warn("Got unsubscribe for unknown req");
        return;
      }
      this._pendingEvents.get(msg.req).dispose();
      this._pendingEvents.delete(msg.req);
    }
    _send(msg) {
      const transfer = [];
      if (msg.type === 0) {
        for (let i = 0; i < msg.args.length; i++) {
          if (msg.args[i] instanceof ArrayBuffer) {
            transfer.push(msg.args[i]);
          }
        }
      } else if (msg.type === 1) {
        if (msg.res instanceof ArrayBuffer) {
          transfer.push(msg.res);
        }
      }
      this._handler.sendMessage(msg, transfer);
    }
  };
  function propertyIsEvent(name) {
    return name[0] === "o" && name[1] === "n" && isUpperAsciiLetter(name.charCodeAt(2));
  }
  function propertyIsDynamicEvent(name) {
    return /^onDynamic/.test(name) && isUpperAsciiLetter(name.charCodeAt(9));
  }
  function createProxyObject2(methodNames, invoke, proxyListen) {
    const createProxyMethod = (method) => {
      return function() {
        const args = Array.prototype.slice.call(arguments, 0);
        return invoke(method, args);
      };
    };
    const createProxyDynamicEvent = (eventName) => {
      return function(arg) {
        return proxyListen(eventName, arg);
      };
    };
    const result = {};
    for (const methodName of methodNames) {
      if (propertyIsDynamicEvent(methodName)) {
        result[methodName] = createProxyDynamicEvent(methodName);
        continue;
      }
      if (propertyIsEvent(methodName)) {
        result[methodName] = proxyListen(methodName, void 0);
        continue;
      }
      result[methodName] = createProxyMethod(methodName);
    }
    return result;
  }
  var SimpleWorkerServer = class {
    constructor(postMessage, requestHandlerFactory) {
      this._requestHandlerFactory = requestHandlerFactory;
      this._requestHandler = null;
      this._protocol = new SimpleWorkerProtocol({
        sendMessage: (msg, transfer) => {
          postMessage(msg, transfer);
        },
        handleMessage: (method, args) => this._handleMessage(method, args),
        handleEvent: (eventName, arg) => this._handleEvent(eventName, arg)
      });
    }
    onmessage(msg) {
      this._protocol.handleMessage(msg);
    }
    _handleMessage(method, args) {
      if (method === INITIALIZE) {
        return this.initialize(args[0], args[1], args[2], args[3]);
      }
      if (!this._requestHandler || typeof this._requestHandler[method] !== "function") {
        return Promise.reject(new Error("Missing requestHandler or method: " + method));
      }
      try {
        return Promise.resolve(this._requestHandler[method].apply(this._requestHandler, args));
      } catch (e) {
        return Promise.reject(e);
      }
    }
    _handleEvent(eventName, arg) {
      if (!this._requestHandler) {
        throw new Error(`Missing requestHandler`);
      }
      if (propertyIsDynamicEvent(eventName)) {
        const event = this._requestHandler[eventName].call(this._requestHandler, arg);
        if (typeof event !== "function") {
          throw new Error(`Missing dynamic event ${eventName} on request handler.`);
        }
        return event;
      }
      if (propertyIsEvent(eventName)) {
        const event = this._requestHandler[eventName];
        if (typeof event !== "function") {
          throw new Error(`Missing event ${eventName} on request handler.`);
        }
        return event;
      }
      throw new Error(`Malformed event name ${eventName}`);
    }
    initialize(workerId, loaderConfig, moduleId, hostMethods) {
      this._protocol.setWorkerId(workerId);
      const proxyMethodRequest = (method, args) => {
        return this._protocol.sendMessage(method, args);
      };
      const proxyListen = (eventName, arg) => {
        return this._protocol.listen(eventName, arg);
      };
      const hostProxy = createProxyObject2(hostMethods, proxyMethodRequest, proxyListen);
      if (this._requestHandlerFactory) {
        this._requestHandler = this._requestHandlerFactory(hostProxy);
        return Promise.resolve(getAllMethodNames(this._requestHandler));
      }
      if (loaderConfig) {
        if (typeof loaderConfig.baseUrl !== "undefined") {
          delete loaderConfig["baseUrl"];
        }
        if (typeof loaderConfig.paths !== "undefined") {
          if (typeof loaderConfig.paths.vs !== "undefined") {
            delete loaderConfig.paths["vs"];
          }
        }
        if (typeof loaderConfig.trustedTypesPolicy !== "undefined") {
          delete loaderConfig["trustedTypesPolicy"];
        }
        loaderConfig.catchError = true;
        globalThis.require.config(loaderConfig);
      }
      return new Promise((resolve2, reject) => {
        const req = globalThis.require;
        req([moduleId], (module) => {
          this._requestHandler = module.create(hostProxy);
          if (!this._requestHandler) {
            reject(new Error(`No RequestHandler!`));
            return;
          }
          resolve2(getAllMethodNames(this._requestHandler));
        }, reject);
      });
    }
  };

  // node_modules/monaco-editor/esm/vs/base/common/diff/diffChange.js
  var DiffChange = class {
    /**
     * Constructs a new DiffChange with the given sequence information
     * and content.
     */
    constructor(originalStart, originalLength, modifiedStart, modifiedLength) {
      this.originalStart = originalStart;
      this.originalLength = originalLength;
      this.modifiedStart = modifiedStart;
      this.modifiedLength = modifiedLength;
    }
    /**
     * The end point (exclusive) of the change in the original sequence.
     */
    getOriginalEnd() {
      return this.originalStart + this.originalLength;
    }
    /**
     * The end point (exclusive) of the change in the modified sequence.
     */
    getModifiedEnd() {
      return this.modifiedStart + this.modifiedLength;
    }
  };

  // node_modules/monaco-editor/esm/vs/base/common/hash.js
  function numberHash(val, initialHashVal) {
    return (initialHashVal << 5) - initialHashVal + val | 0;
  }
  function stringHash(s, hashVal) {
    hashVal = numberHash(149417, hashVal);
    for (let i = 0, length = s.length; i < length; i++) {
      hashVal = numberHash(s.charCodeAt(i), hashVal);
    }
    return hashVal;
  }
  function leftRotate(value, bits, totalBits = 32) {
    const delta = totalBits - bits;
    const mask = ~((1 << delta) - 1);
    return (value << bits | (mask & value) >>> delta) >>> 0;
  }
  function fill(dest, index = 0, count = dest.byteLength, value = 0) {
    for (let i = 0; i < count; i++) {
      dest[index + i] = value;
    }
  }
  function leftPad(value, length, char = "0") {
    while (value.length < length) {
      value = char + value;
    }
    return value;
  }
  function toHexString(bufferOrValue, bitsize = 32) {
    if (bufferOrValue instanceof ArrayBuffer) {
      return Array.from(new Uint8Array(bufferOrValue)).map((b) => b.toString(16).padStart(2, "0")).join("");
    }
    return leftPad((bufferOrValue >>> 0).toString(16), bitsize / 4);
  }
  var StringSHA1 = class _StringSHA1 {
    constructor() {
      this._h0 = 1732584193;
      this._h1 = 4023233417;
      this._h2 = 2562383102;
      this._h3 = 271733878;
      this._h4 = 3285377520;
      this._buff = new Uint8Array(
        64 + 3
        /* to fit any utf-8 */
      );
      this._buffDV = new DataView(this._buff.buffer);
      this._buffLen = 0;
      this._totalLen = 0;
      this._leftoverHighSurrogate = 0;
      this._finished = false;
    }
    update(str) {
      const strLen = str.length;
      if (strLen === 0) {
        return;
      }
      const buff = this._buff;
      let buffLen = this._buffLen;
      let leftoverHighSurrogate = this._leftoverHighSurrogate;
      let charCode;
      let offset;
      if (leftoverHighSurrogate !== 0) {
        charCode = leftoverHighSurrogate;
        offset = -1;
        leftoverHighSurrogate = 0;
      } else {
        charCode = str.charCodeAt(0);
        offset = 0;
      }
      while (true) {
        let codePoint = charCode;
        if (isHighSurrogate(charCode)) {
          if (offset + 1 < strLen) {
            const nextCharCode = str.charCodeAt(offset + 1);
            if (isLowSurrogate(nextCharCode)) {
              offset++;
              codePoint = computeCodePoint(charCode, nextCharCode);
            } else {
              codePoint = 65533;
            }
          } else {
            leftoverHighSurrogate = charCode;
            break;
          }
        } else if (isLowSurrogate(charCode)) {
          codePoint = 65533;
        }
        buffLen = this._push(buff, buffLen, codePoint);
        offset++;
        if (offset < strLen) {
          charCode = str.charCodeAt(offset);
        } else {
          break;
        }
      }
      this._buffLen = buffLen;
      this._leftoverHighSurrogate = leftoverHighSurrogate;
    }
    _push(buff, buffLen, codePoint) {
      if (codePoint < 128) {
        buff[buffLen++] = codePoint;
      } else if (codePoint < 2048) {
        buff[buffLen++] = 192 | (codePoint & 1984) >>> 6;
        buff[buffLen++] = 128 | (codePoint & 63) >>> 0;
      } else if (codePoint < 65536) {
        buff[buffLen++] = 224 | (codePoint & 61440) >>> 12;
        buff[buffLen++] = 128 | (codePoint & 4032) >>> 6;
        buff[buffLen++] = 128 | (codePoint & 63) >>> 0;
      } else {
        buff[buffLen++] = 240 | (codePoint & 1835008) >>> 18;
        buff[buffLen++] = 128 | (codePoint & 258048) >>> 12;
        buff[buffLen++] = 128 | (codePoint & 4032) >>> 6;
        buff[buffLen++] = 128 | (codePoint & 63) >>> 0;
      }
      if (buffLen >= 64) {
        this._step();
        buffLen -= 64;
        this._totalLen += 64;
        buff[0] = buff[64 + 0];
        buff[1] = buff[64 + 1];
        buff[2] = buff[64 + 2];
      }
      return buffLen;
    }
    digest() {
      if (!this._finished) {
        this._finished = true;
        if (this._leftoverHighSurrogate) {
          this._leftoverHighSurrogate = 0;
          this._buffLen = this._push(
            this._buff,
            this._buffLen,
            65533
            /* SHA1Constant.UNICODE_REPLACEMENT */
          );
        }
        this._totalLen += this._buffLen;
        this._wrapUp();
      }
      return toHexString(this._h0) + toHexString(this._h1) + toHexString(this._h2) + toHexString(this._h3) + toHexString(this._h4);
    }
    _wrapUp() {
      this._buff[this._buffLen++] = 128;
      fill(this._buff, this._buffLen);
      if (this._buffLen > 56) {
        this._step();
        fill(this._buff);
      }
      const ml = 8 * this._totalLen;
      this._buffDV.setUint32(56, Math.floor(ml / 4294967296), false);
      this._buffDV.setUint32(60, ml % 4294967296, false);
      this._step();
    }
    _step() {
      const bigBlock32 = _StringSHA1._bigBlock32;
      const data = this._buffDV;
      for (let j = 0; j < 64; j += 4) {
        bigBlock32.setUint32(j, data.getUint32(j, false), false);
      }
      for (let j = 64; j < 320; j += 4) {
        bigBlock32.setUint32(j, leftRotate(bigBlock32.getUint32(j - 12, false) ^ bigBlock32.getUint32(j - 32, false) ^ bigBlock32.getUint32(j - 56, false) ^ bigBlock32.getUint32(j - 64, false), 1), false);
      }
      let a2 = this._h0;
      let b = this._h1;
      let c = this._h2;
      let d = this._h3;
      let e = this._h4;
      let f2, k;
      let temp;
      for (let j = 0; j < 80; j++) {
        if (j < 20) {
          f2 = b & c | ~b & d;
          k = 1518500249;
        } else if (j < 40) {
          f2 = b ^ c ^ d;
          k = 1859775393;
        } else if (j < 60) {
          f2 = b & c | b & d | c & d;
          k = 2400959708;
        } else {
          f2 = b ^ c ^ d;
          k = 3395469782;
        }
        temp = leftRotate(a2, 5) + f2 + e + k + bigBlock32.getUint32(j * 4, false) & 4294967295;
        e = d;
        d = c;
        c = leftRotate(b, 30);
        b = a2;
        a2 = temp;
      }
      this._h0 = this._h0 + a2 & 4294967295;
      this._h1 = this._h1 + b & 4294967295;
      this._h2 = this._h2 + c & 4294967295;
      this._h3 = this._h3 + d & 4294967295;
      this._h4 = this._h4 + e & 4294967295;
    }
  };
  StringSHA1._bigBlock32 = new DataView(new ArrayBuffer(320));

  // node_modules/monaco-editor/esm/vs/base/common/diff/diff.js
  var StringDiffSequence = class {
    constructor(source) {
      this.source = source;
    }
    getElements() {
      const source = this.source;
      const characters = new Int32Array(source.length);
      for (let i = 0, len = source.length; i < len; i++) {
        characters[i] = source.charCodeAt(i);
      }
      return characters;
    }
  };
  function stringDiff(original, modified, pretty) {
    return new LcsDiff(new StringDiffSequence(original), new StringDiffSequence(modified)).ComputeDiff(pretty).changes;
  }
  var Debug = class {
    static Assert(condition, message) {
      if (!condition) {
        throw new Error(message);
      }
    }
  };
  var MyArray = class {
    /**
     * Copies a range of elements from an Array starting at the specified source index and pastes
     * them to another Array starting at the specified destination index. The length and the indexes
     * are specified as 64-bit integers.
     * sourceArray:
     *		The Array that contains the data to copy.
     * sourceIndex:
     *		A 64-bit integer that represents the index in the sourceArray at which copying begins.
     * destinationArray:
     *		The Array that receives the data.
     * destinationIndex:
     *		A 64-bit integer that represents the index in the destinationArray at which storing begins.
     * length:
     *		A 64-bit integer that represents the number of elements to copy.
     */
    static Copy(sourceArray, sourceIndex, destinationArray, destinationIndex, length) {
      for (let i = 0; i < length; i++) {
        destinationArray[destinationIndex + i] = sourceArray[sourceIndex + i];
      }
    }
    static Copy2(sourceArray, sourceIndex, destinationArray, destinationIndex, length) {
      for (let i = 0; i < length; i++) {
        destinationArray[destinationIndex + i] = sourceArray[sourceIndex + i];
      }
    }
  };
  var DiffChangeHelper = class {
    /**
     * Constructs a new DiffChangeHelper for the given DiffSequences.
     */
    constructor() {
      this.m_changes = [];
      this.m_originalStart = 1073741824;
      this.m_modifiedStart = 1073741824;
      this.m_originalCount = 0;
      this.m_modifiedCount = 0;
    }
    /**
     * Marks the beginning of the next change in the set of differences.
     */
    MarkNextChange() {
      if (this.m_originalCount > 0 || this.m_modifiedCount > 0) {
        this.m_changes.push(new DiffChange(this.m_originalStart, this.m_originalCount, this.m_modifiedStart, this.m_modifiedCount));
      }
      this.m_originalCount = 0;
      this.m_modifiedCount = 0;
      this.m_originalStart = 1073741824;
      this.m_modifiedStart = 1073741824;
    }
    /**
     * Adds the original element at the given position to the elements
     * affected by the current change. The modified index gives context
     * to the change position with respect to the original sequence.
     * @param originalIndex The index of the original element to add.
     * @param modifiedIndex The index of the modified element that provides corresponding position in the modified sequence.
     */
    AddOriginalElement(originalIndex, modifiedIndex) {
      this.m_originalStart = Math.min(this.m_originalStart, originalIndex);
      this.m_modifiedStart = Math.min(this.m_modifiedStart, modifiedIndex);
      this.m_originalCount++;
    }
    /**
     * Adds the modified element at the given position to the elements
     * affected by the current change. The original index gives context
     * to the change position with respect to the modified sequence.
     * @param originalIndex The index of the original element that provides corresponding position in the original sequence.
     * @param modifiedIndex The index of the modified element to add.
     */
    AddModifiedElement(originalIndex, modifiedIndex) {
      this.m_originalStart = Math.min(this.m_originalStart, originalIndex);
      this.m_modifiedStart = Math.min(this.m_modifiedStart, modifiedIndex);
      this.m_modifiedCount++;
    }
    /**
     * Retrieves all of the changes marked by the class.
     */
    getChanges() {
      if (this.m_originalCount > 0 || this.m_modifiedCount > 0) {
        this.MarkNextChange();
      }
      return this.m_changes;
    }
    /**
     * Retrieves all of the changes marked by the class in the reverse order
     */
    getReverseChanges() {
      if (this.m_originalCount > 0 || this.m_modifiedCount > 0) {
        this.MarkNextChange();
      }
      this.m_changes.reverse();
      return this.m_changes;
    }
  };
  var LcsDiff = class _LcsDiff {
    /**
     * Constructs the DiffFinder
     */
    constructor(originalSequence, modifiedSequence, continueProcessingPredicate = null) {
      this.ContinueProcessingPredicate = continueProcessingPredicate;
      this._originalSequence = originalSequence;
      this._modifiedSequence = modifiedSequence;
      const [originalStringElements, originalElementsOrHash, originalHasStrings] = _LcsDiff._getElements(originalSequence);
      const [modifiedStringElements, modifiedElementsOrHash, modifiedHasStrings] = _LcsDiff._getElements(modifiedSequence);
      this._hasStrings = originalHasStrings && modifiedHasStrings;
      this._originalStringElements = originalStringElements;
      this._originalElementsOrHash = originalElementsOrHash;
      this._modifiedStringElements = modifiedStringElements;
      this._modifiedElementsOrHash = modifiedElementsOrHash;
      this.m_forwardHistory = [];
      this.m_reverseHistory = [];
    }
    static _isStringArray(arr) {
      return arr.length > 0 && typeof arr[0] === "string";
    }
    static _getElements(sequence) {
      const elements = sequence.getElements();
      if (_LcsDiff._isStringArray(elements)) {
        const hashes = new Int32Array(elements.length);
        for (let i = 0, len = elements.length; i < len; i++) {
          hashes[i] = stringHash(elements[i], 0);
        }
        return [elements, hashes, true];
      }
      if (elements instanceof Int32Array) {
        return [[], elements, false];
      }
      return [[], new Int32Array(elements), false];
    }
    ElementsAreEqual(originalIndex, newIndex) {
      if (this._originalElementsOrHash[originalIndex] !== this._modifiedElementsOrHash[newIndex]) {
        return false;
      }
      return this._hasStrings ? this._originalStringElements[originalIndex] === this._modifiedStringElements[newIndex] : true;
    }
    ElementsAreStrictEqual(originalIndex, newIndex) {
      if (!this.ElementsAreEqual(originalIndex, newIndex)) {
        return false;
      }
      const originalElement = _LcsDiff._getStrictElement(this._originalSequence, originalIndex);
      const modifiedElement = _LcsDiff._getStrictElement(this._modifiedSequence, newIndex);
      return originalElement === modifiedElement;
    }
    static _getStrictElement(sequence, index) {
      if (typeof sequence.getStrictElement === "function") {
        return sequence.getStrictElement(index);
      }
      return null;
    }
    OriginalElementsAreEqual(index1, index2) {
      if (this._originalElementsOrHash[index1] !== this._originalElementsOrHash[index2]) {
        return false;
      }
      return this._hasStrings ? this._originalStringElements[index1] === this._originalStringElements[index2] : true;
    }
    ModifiedElementsAreEqual(index1, index2) {
      if (this._modifiedElementsOrHash[index1] !== this._modifiedElementsOrHash[index2]) {
        return false;
      }
      return this._hasStrings ? this._modifiedStringElements[index1] === this._modifiedStringElements[index2] : true;
    }
    ComputeDiff(pretty) {
      return this._ComputeDiff(0, this._originalElementsOrHash.length - 1, 0, this._modifiedElementsOrHash.length - 1, pretty);
    }
    /**
     * Computes the differences between the original and modified input
     * sequences on the bounded range.
     * @returns An array of the differences between the two input sequences.
     */
    _ComputeDiff(originalStart, originalEnd, modifiedStart, modifiedEnd, pretty) {
      const quitEarlyArr = [false];
      let changes = this.ComputeDiffRecursive(originalStart, originalEnd, modifiedStart, modifiedEnd, quitEarlyArr);
      if (pretty) {
        changes = this.PrettifyChanges(changes);
      }
      return {
        quitEarly: quitEarlyArr[0],
        changes
      };
    }
    /**
     * Private helper method which computes the differences on the bounded range
     * recursively.
     * @returns An array of the differences between the two input sequences.
     */
    ComputeDiffRecursive(originalStart, originalEnd, modifiedStart, modifiedEnd, quitEarlyArr) {
      quitEarlyArr[0] = false;
      while (originalStart <= originalEnd && modifiedStart <= modifiedEnd && this.ElementsAreEqual(originalStart, modifiedStart)) {
        originalStart++;
        modifiedStart++;
      }
      while (originalEnd >= originalStart && modifiedEnd >= modifiedStart && this.ElementsAreEqual(originalEnd, modifiedEnd)) {
        originalEnd--;
        modifiedEnd--;
      }
      if (originalStart > originalEnd || modifiedStart > modifiedEnd) {
        let changes;
        if (modifiedStart <= modifiedEnd) {
          Debug.Assert(originalStart === originalEnd + 1, "originalStart should only be one more than originalEnd");
          changes = [
            new DiffChange(originalStart, 0, modifiedStart, modifiedEnd - modifiedStart + 1)
          ];
        } else if (originalStart <= originalEnd) {
          Debug.Assert(modifiedStart === modifiedEnd + 1, "modifiedStart should only be one more than modifiedEnd");
          changes = [
            new DiffChange(originalStart, originalEnd - originalStart + 1, modifiedStart, 0)
          ];
        } else {
          Debug.Assert(originalStart === originalEnd + 1, "originalStart should only be one more than originalEnd");
          Debug.Assert(modifiedStart === modifiedEnd + 1, "modifiedStart should only be one more than modifiedEnd");
          changes = [];
        }
        return changes;
      }
      const midOriginalArr = [0];
      const midModifiedArr = [0];
      const result = this.ComputeRecursionPoint(originalStart, originalEnd, modifiedStart, modifiedEnd, midOriginalArr, midModifiedArr, quitEarlyArr);
      const midOriginal = midOriginalArr[0];
      const midModified = midModifiedArr[0];
      if (result !== null) {
        return result;
      } else if (!quitEarlyArr[0]) {
        const leftChanges = this.ComputeDiffRecursive(originalStart, midOriginal, modifiedStart, midModified, quitEarlyArr);
        let rightChanges = [];
        if (!quitEarlyArr[0]) {
          rightChanges = this.ComputeDiffRecursive(midOriginal + 1, originalEnd, midModified + 1, modifiedEnd, quitEarlyArr);
        } else {
          rightChanges = [
            new DiffChange(midOriginal + 1, originalEnd - (midOriginal + 1) + 1, midModified + 1, modifiedEnd - (midModified + 1) + 1)
          ];
        }
        return this.ConcatenateChanges(leftChanges, rightChanges);
      }
      return [
        new DiffChange(originalStart, originalEnd - originalStart + 1, modifiedStart, modifiedEnd - modifiedStart + 1)
      ];
    }
    WALKTRACE(diagonalForwardBase, diagonalForwardStart, diagonalForwardEnd, diagonalForwardOffset, diagonalReverseBase, diagonalReverseStart, diagonalReverseEnd, diagonalReverseOffset, forwardPoints, reversePoints, originalIndex, originalEnd, midOriginalArr, modifiedIndex, modifiedEnd, midModifiedArr, deltaIsEven, quitEarlyArr) {
      let forwardChanges = null;
      let reverseChanges = null;
      let changeHelper = new DiffChangeHelper();
      let diagonalMin = diagonalForwardStart;
      let diagonalMax = diagonalForwardEnd;
      let diagonalRelative = midOriginalArr[0] - midModifiedArr[0] - diagonalForwardOffset;
      let lastOriginalIndex = -1073741824;
      let historyIndex = this.m_forwardHistory.length - 1;
      do {
        const diagonal = diagonalRelative + diagonalForwardBase;
        if (diagonal === diagonalMin || diagonal < diagonalMax && forwardPoints[diagonal - 1] < forwardPoints[diagonal + 1]) {
          originalIndex = forwardPoints[diagonal + 1];
          modifiedIndex = originalIndex - diagonalRelative - diagonalForwardOffset;
          if (originalIndex < lastOriginalIndex) {
            changeHelper.MarkNextChange();
          }
          lastOriginalIndex = originalIndex;
          changeHelper.AddModifiedElement(originalIndex + 1, modifiedIndex);
          diagonalRelative = diagonal + 1 - diagonalForwardBase;
        } else {
          originalIndex = forwardPoints[diagonal - 1] + 1;
          modifiedIndex = originalIndex - diagonalRelative - diagonalForwardOffset;
          if (originalIndex < lastOriginalIndex) {
            changeHelper.MarkNextChange();
          }
          lastOriginalIndex = originalIndex - 1;
          changeHelper.AddOriginalElement(originalIndex, modifiedIndex + 1);
          diagonalRelative = diagonal - 1 - diagonalForwardBase;
        }
        if (historyIndex >= 0) {
          forwardPoints = this.m_forwardHistory[historyIndex];
          diagonalForwardBase = forwardPoints[0];
          diagonalMin = 1;
          diagonalMax = forwardPoints.length - 1;
        }
      } while (--historyIndex >= -1);
      forwardChanges = changeHelper.getReverseChanges();
      if (quitEarlyArr[0]) {
        let originalStartPoint = midOriginalArr[0] + 1;
        let modifiedStartPoint = midModifiedArr[0] + 1;
        if (forwardChanges !== null && forwardChanges.length > 0) {
          const lastForwardChange = forwardChanges[forwardChanges.length - 1];
          originalStartPoint = Math.max(originalStartPoint, lastForwardChange.getOriginalEnd());
          modifiedStartPoint = Math.max(modifiedStartPoint, lastForwardChange.getModifiedEnd());
        }
        reverseChanges = [
          new DiffChange(originalStartPoint, originalEnd - originalStartPoint + 1, modifiedStartPoint, modifiedEnd - modifiedStartPoint + 1)
        ];
      } else {
        changeHelper = new DiffChangeHelper();
        diagonalMin = diagonalReverseStart;
        diagonalMax = diagonalReverseEnd;
        diagonalRelative = midOriginalArr[0] - midModifiedArr[0] - diagonalReverseOffset;
        lastOriginalIndex = 1073741824;
        historyIndex = deltaIsEven ? this.m_reverseHistory.length - 1 : this.m_reverseHistory.length - 2;
        do {
          const diagonal = diagonalRelative + diagonalReverseBase;
          if (diagonal === diagonalMin || diagonal < diagonalMax && reversePoints[diagonal - 1] >= reversePoints[diagonal + 1]) {
            originalIndex = reversePoints[diagonal + 1] - 1;
            modifiedIndex = originalIndex - diagonalRelative - diagonalReverseOffset;
            if (originalIndex > lastOriginalIndex) {
              changeHelper.MarkNextChange();
            }
            lastOriginalIndex = originalIndex + 1;
            changeHelper.AddOriginalElement(originalIndex + 1, modifiedIndex + 1);
            diagonalRelative = diagonal + 1 - diagonalReverseBase;
          } else {
            originalIndex = reversePoints[diagonal - 1];
            modifiedIndex = originalIndex - diagonalRelative - diagonalReverseOffset;
            if (originalIndex > lastOriginalIndex) {
              changeHelper.MarkNextChange();
            }
            lastOriginalIndex = originalIndex;
            changeHelper.AddModifiedElement(originalIndex + 1, modifiedIndex + 1);
            diagonalRelative = diagonal - 1 - diagonalReverseBase;
          }
          if (historyIndex >= 0) {
            reversePoints = this.m_reverseHistory[historyIndex];
            diagonalReverseBase = reversePoints[0];
            diagonalMin = 1;
            diagonalMax = reversePoints.length - 1;
          }
        } while (--historyIndex >= -1);
        reverseChanges = changeHelper.getChanges();
      }
      return this.ConcatenateChanges(forwardChanges, reverseChanges);
    }
    /**
     * Given the range to compute the diff on, this method finds the point:
     * (midOriginal, midModified)
     * that exists in the middle of the LCS of the two sequences and
     * is the point at which the LCS problem may be broken down recursively.
     * This method will try to keep the LCS trace in memory. If the LCS recursion
     * point is calculated and the full trace is available in memory, then this method
     * will return the change list.
     * @param originalStart The start bound of the original sequence range
     * @param originalEnd The end bound of the original sequence range
     * @param modifiedStart The start bound of the modified sequence range
     * @param modifiedEnd The end bound of the modified sequence range
     * @param midOriginal The middle point of the original sequence range
     * @param midModified The middle point of the modified sequence range
     * @returns The diff changes, if available, otherwise null
     */
    ComputeRecursionPoint(originalStart, originalEnd, modifiedStart, modifiedEnd, midOriginalArr, midModifiedArr, quitEarlyArr) {
      let originalIndex = 0, modifiedIndex = 0;
      let diagonalForwardStart = 0, diagonalForwardEnd = 0;
      let diagonalReverseStart = 0, diagonalReverseEnd = 0;
      originalStart--;
      modifiedStart--;
      midOriginalArr[0] = 0;
      midModifiedArr[0] = 0;
      this.m_forwardHistory = [];
      this.m_reverseHistory = [];
      const maxDifferences = originalEnd - originalStart + (modifiedEnd - modifiedStart);
      const numDiagonals = maxDifferences + 1;
      const forwardPoints = new Int32Array(numDiagonals);
      const reversePoints = new Int32Array(numDiagonals);
      const diagonalForwardBase = modifiedEnd - modifiedStart;
      const diagonalReverseBase = originalEnd - originalStart;
      const diagonalForwardOffset = originalStart - modifiedStart;
      const diagonalReverseOffset = originalEnd - modifiedEnd;
      const delta = diagonalReverseBase - diagonalForwardBase;
      const deltaIsEven = delta % 2 === 0;
      forwardPoints[diagonalForwardBase] = originalStart;
      reversePoints[diagonalReverseBase] = originalEnd;
      quitEarlyArr[0] = false;
      for (let numDifferences = 1; numDifferences <= maxDifferences / 2 + 1; numDifferences++) {
        let furthestOriginalIndex = 0;
        let furthestModifiedIndex = 0;
        diagonalForwardStart = this.ClipDiagonalBound(diagonalForwardBase - numDifferences, numDifferences, diagonalForwardBase, numDiagonals);
        diagonalForwardEnd = this.ClipDiagonalBound(diagonalForwardBase + numDifferences, numDifferences, diagonalForwardBase, numDiagonals);
        for (let diagonal = diagonalForwardStart; diagonal <= diagonalForwardEnd; diagonal += 2) {
          if (diagonal === diagonalForwardStart || diagonal < diagonalForwardEnd && forwardPoints[diagonal - 1] < forwardPoints[diagonal + 1]) {
            originalIndex = forwardPoints[diagonal + 1];
          } else {
            originalIndex = forwardPoints[diagonal - 1] + 1;
          }
          modifiedIndex = originalIndex - (diagonal - diagonalForwardBase) - diagonalForwardOffset;
          const tempOriginalIndex = originalIndex;
          while (originalIndex < originalEnd && modifiedIndex < modifiedEnd && this.ElementsAreEqual(originalIndex + 1, modifiedIndex + 1)) {
            originalIndex++;
            modifiedIndex++;
          }
          forwardPoints[diagonal] = originalIndex;
          if (originalIndex + modifiedIndex > furthestOriginalIndex + furthestModifiedIndex) {
            furthestOriginalIndex = originalIndex;
            furthestModifiedIndex = modifiedIndex;
          }
          if (!deltaIsEven && Math.abs(diagonal - diagonalReverseBase) <= numDifferences - 1) {
            if (originalIndex >= reversePoints[diagonal]) {
              midOriginalArr[0] = originalIndex;
              midModifiedArr[0] = modifiedIndex;
              if (tempOriginalIndex <= reversePoints[diagonal] && 1447 > 0 && numDifferences <= 1447 + 1) {
                return this.WALKTRACE(diagonalForwardBase, diagonalForwardStart, diagonalForwardEnd, diagonalForwardOffset, diagonalReverseBase, diagonalReverseStart, diagonalReverseEnd, diagonalReverseOffset, forwardPoints, reversePoints, originalIndex, originalEnd, midOriginalArr, modifiedIndex, modifiedEnd, midModifiedArr, deltaIsEven, quitEarlyArr);
              } else {
                return null;
              }
            }
          }
        }
        const matchLengthOfLongest = (furthestOriginalIndex - originalStart + (furthestModifiedIndex - modifiedStart) - numDifferences) / 2;
        if (this.ContinueProcessingPredicate !== null && !this.ContinueProcessingPredicate(furthestOriginalIndex, matchLengthOfLongest)) {
          quitEarlyArr[0] = true;
          midOriginalArr[0] = furthestOriginalIndex;
          midModifiedArr[0] = furthestModifiedIndex;
          if (matchLengthOfLongest > 0 && 1447 > 0 && numDifferences <= 1447 + 1) {
            return this.WALKTRACE(diagonalForwardBase, diagonalForwardStart, diagonalForwardEnd, diagonalForwardOffset, diagonalReverseBase, diagonalReverseStart, diagonalReverseEnd, diagonalReverseOffset, forwardPoints, reversePoints, originalIndex, originalEnd, midOriginalArr, modifiedIndex, modifiedEnd, midModifiedArr, deltaIsEven, quitEarlyArr);
          } else {
            originalStart++;
            modifiedStart++;
            return [
              new DiffChange(originalStart, originalEnd - originalStart + 1, modifiedStart, modifiedEnd - modifiedStart + 1)
            ];
          }
        }
        diagonalReverseStart = this.ClipDiagonalBound(diagonalReverseBase - numDifferences, numDifferences, diagonalReverseBase, numDiagonals);
        diagonalReverseEnd = this.ClipDiagonalBound(diagonalReverseBase + numDifferences, numDifferences, diagonalReverseBase, numDiagonals);
        for (let diagonal = diagonalReverseStart; diagonal <= diagonalReverseEnd; diagonal += 2) {
          if (diagonal === diagonalReverseStart || diagonal < diagonalReverseEnd && reversePoints[diagonal - 1] >= reversePoints[diagonal + 1]) {
            originalIndex = reversePoints[diagonal + 1] - 1;
          } else {
            originalIndex = reversePoints[diagonal - 1];
          }
          modifiedIndex = originalIndex - (diagonal - diagonalReverseBase) - diagonalReverseOffset;
          const tempOriginalIndex = originalIndex;
          while (originalIndex > originalStart && modifiedIndex > modifiedStart && this.ElementsAreEqual(originalIndex, modifiedIndex)) {
            originalIndex--;
            modifiedIndex--;
          }
          reversePoints[diagonal] = originalIndex;
          if (deltaIsEven && Math.abs(diagonal - diagonalForwardBase) <= numDifferences) {
            if (originalIndex <= forwardPoints[diagonal]) {
              midOriginalArr[0] = originalIndex;
              midModifiedArr[0] = modifiedIndex;
              if (tempOriginalIndex >= forwardPoints[diagonal] && 1447 > 0 && numDifferences <= 1447 + 1) {
                return this.WALKTRACE(diagonalForwardBase, diagonalForwardStart, diagonalForwardEnd, diagonalForwardOffset, diagonalReverseBase, diagonalReverseStart, diagonalReverseEnd, diagonalReverseOffset, forwardPoints, reversePoints, originalIndex, originalEnd, midOriginalArr, modifiedIndex, modifiedEnd, midModifiedArr, deltaIsEven, quitEarlyArr);
              } else {
                return null;
              }
            }
          }
        }
        if (numDifferences <= 1447) {
          let temp = new Int32Array(diagonalForwardEnd - diagonalForwardStart + 2);
          temp[0] = diagonalForwardBase - diagonalForwardStart + 1;
          MyArray.Copy2(forwardPoints, diagonalForwardStart, temp, 1, diagonalForwardEnd - diagonalForwardStart + 1);
          this.m_forwardHistory.push(temp);
          temp = new Int32Array(diagonalReverseEnd - diagonalReverseStart + 2);
          temp[0] = diagonalReverseBase - diagonalReverseStart + 1;
          MyArray.Copy2(reversePoints, diagonalReverseStart, temp, 1, diagonalReverseEnd - diagonalReverseStart + 1);
          this.m_reverseHistory.push(temp);
        }
      }
      return this.WALKTRACE(diagonalForwardBase, diagonalForwardStart, diagonalForwardEnd, diagonalForwardOffset, diagonalReverseBase, diagonalReverseStart, diagonalReverseEnd, diagonalReverseOffset, forwardPoints, reversePoints, originalIndex, originalEnd, midOriginalArr, modifiedIndex, modifiedEnd, midModifiedArr, deltaIsEven, quitEarlyArr);
    }
    /**
     * Shifts the given changes to provide a more intuitive diff.
     * While the first element in a diff matches the first element after the diff,
     * we shift the diff down.
     *
     * @param changes The list of changes to shift
     * @returns The shifted changes
     */
    PrettifyChanges(changes) {
      for (let i = 0; i < changes.length; i++) {
        const change = changes[i];
        const originalStop = i < changes.length - 1 ? changes[i + 1].originalStart : this._originalElementsOrHash.length;
        const modifiedStop = i < changes.length - 1 ? changes[i + 1].modifiedStart : this._modifiedElementsOrHash.length;
        const checkOriginal = change.originalLength > 0;
        const checkModified = change.modifiedLength > 0;
        while (change.originalStart + change.originalLength < originalStop && change.modifiedStart + change.modifiedLength < modifiedStop && (!checkOriginal || this.OriginalElementsAreEqual(change.originalStart, change.originalStart + change.originalLength)) && (!checkModified || this.ModifiedElementsAreEqual(change.modifiedStart, change.modifiedStart + change.modifiedLength))) {
          const startStrictEqual = this.ElementsAreStrictEqual(change.originalStart, change.modifiedStart);
          const endStrictEqual = this.ElementsAreStrictEqual(change.originalStart + change.originalLength, change.modifiedStart + change.modifiedLength);
          if (endStrictEqual && !startStrictEqual) {
            break;
          }
          change.originalStart++;
          change.modifiedStart++;
        }
        const mergedChangeArr = [null];
        if (i < changes.length - 1 && this.ChangesOverlap(changes[i], changes[i + 1], mergedChangeArr)) {
          changes[i] = mergedChangeArr[0];
          changes.splice(i + 1, 1);
          i--;
          continue;
        }
      }
      for (let i = changes.length - 1; i >= 0; i--) {
        const change = changes[i];
        let originalStop = 0;
        let modifiedStop = 0;
        if (i > 0) {
          const prevChange = changes[i - 1];
          originalStop = prevChange.originalStart + prevChange.originalLength;
          modifiedStop = prevChange.modifiedStart + prevChange.modifiedLength;
        }
        const checkOriginal = change.originalLength > 0;
        const checkModified = change.modifiedLength > 0;
        let bestDelta = 0;
        let bestScore = this._boundaryScore(change.originalStart, change.originalLength, change.modifiedStart, change.modifiedLength);
        for (let delta = 1; ; delta++) {
          const originalStart = change.originalStart - delta;
          const modifiedStart = change.modifiedStart - delta;
          if (originalStart < originalStop || modifiedStart < modifiedStop) {
            break;
          }
          if (checkOriginal && !this.OriginalElementsAreEqual(originalStart, originalStart + change.originalLength)) {
            break;
          }
          if (checkModified && !this.ModifiedElementsAreEqual(modifiedStart, modifiedStart + change.modifiedLength)) {
            break;
          }
          const touchingPreviousChange = originalStart === originalStop && modifiedStart === modifiedStop;
          const score2 = (touchingPreviousChange ? 5 : 0) + this._boundaryScore(originalStart, change.originalLength, modifiedStart, change.modifiedLength);
          if (score2 > bestScore) {
            bestScore = score2;
            bestDelta = delta;
          }
        }
        change.originalStart -= bestDelta;
        change.modifiedStart -= bestDelta;
        const mergedChangeArr = [null];
        if (i > 0 && this.ChangesOverlap(changes[i - 1], changes[i], mergedChangeArr)) {
          changes[i - 1] = mergedChangeArr[0];
          changes.splice(i, 1);
          i++;
          continue;
        }
      }
      if (this._hasStrings) {
        for (let i = 1, len = changes.length; i < len; i++) {
          const aChange = changes[i - 1];
          const bChange = changes[i];
          const matchedLength = bChange.originalStart - aChange.originalStart - aChange.originalLength;
          const aOriginalStart = aChange.originalStart;
          const bOriginalEnd = bChange.originalStart + bChange.originalLength;
          const abOriginalLength = bOriginalEnd - aOriginalStart;
          const aModifiedStart = aChange.modifiedStart;
          const bModifiedEnd = bChange.modifiedStart + bChange.modifiedLength;
          const abModifiedLength = bModifiedEnd - aModifiedStart;
          if (matchedLength < 5 && abOriginalLength < 20 && abModifiedLength < 20) {
            const t2 = this._findBetterContiguousSequence(aOriginalStart, abOriginalLength, aModifiedStart, abModifiedLength, matchedLength);
            if (t2) {
              const [originalMatchStart, modifiedMatchStart] = t2;
              if (originalMatchStart !== aChange.originalStart + aChange.originalLength || modifiedMatchStart !== aChange.modifiedStart + aChange.modifiedLength) {
                aChange.originalLength = originalMatchStart - aChange.originalStart;
                aChange.modifiedLength = modifiedMatchStart - aChange.modifiedStart;
                bChange.originalStart = originalMatchStart + matchedLength;
                bChange.modifiedStart = modifiedMatchStart + matchedLength;
                bChange.originalLength = bOriginalEnd - bChange.originalStart;
                bChange.modifiedLength = bModifiedEnd - bChange.modifiedStart;
              }
            }
          }
        }
      }
      return changes;
    }
    _findBetterContiguousSequence(originalStart, originalLength, modifiedStart, modifiedLength, desiredLength) {
      if (originalLength < desiredLength || modifiedLength < desiredLength) {
        return null;
      }
      const originalMax = originalStart + originalLength - desiredLength + 1;
      const modifiedMax = modifiedStart + modifiedLength - desiredLength + 1;
      let bestScore = 0;
      let bestOriginalStart = 0;
      let bestModifiedStart = 0;
      for (let i = originalStart; i < originalMax; i++) {
        for (let j = modifiedStart; j < modifiedMax; j++) {
          const score2 = this._contiguousSequenceScore(i, j, desiredLength);
          if (score2 > 0 && score2 > bestScore) {
            bestScore = score2;
            bestOriginalStart = i;
            bestModifiedStart = j;
          }
        }
      }
      if (bestScore > 0) {
        return [bestOriginalStart, bestModifiedStart];
      }
      return null;
    }
    _contiguousSequenceScore(originalStart, modifiedStart, length) {
      let score2 = 0;
      for (let l = 0; l < length; l++) {
        if (!this.ElementsAreEqual(originalStart + l, modifiedStart + l)) {
          return 0;
        }
        score2 += this._originalStringElements[originalStart + l].length;
      }
      return score2;
    }
    _OriginalIsBoundary(index) {
      if (index <= 0 || index >= this._originalElementsOrHash.length - 1) {
        return true;
      }
      return this._hasStrings && /^\s*$/.test(this._originalStringElements[index]);
    }
    _OriginalRegionIsBoundary(originalStart, originalLength) {
      if (this._OriginalIsBoundary(originalStart) || this._OriginalIsBoundary(originalStart - 1)) {
        return true;
      }
      if (originalLength > 0) {
        const originalEnd = originalStart + originalLength;
        if (this._OriginalIsBoundary(originalEnd - 1) || this._OriginalIsBoundary(originalEnd)) {
          return true;
        }
      }
      return false;
    }
    _ModifiedIsBoundary(index) {
      if (index <= 0 || index >= this._modifiedElementsOrHash.length - 1) {
        return true;
      }
      return this._hasStrings && /^\s*$/.test(this._modifiedStringElements[index]);
    }
    _ModifiedRegionIsBoundary(modifiedStart, modifiedLength) {
      if (this._ModifiedIsBoundary(modifiedStart) || this._ModifiedIsBoundary(modifiedStart - 1)) {
        return true;
      }
      if (modifiedLength > 0) {
        const modifiedEnd = modifiedStart + modifiedLength;
        if (this._ModifiedIsBoundary(modifiedEnd - 1) || this._ModifiedIsBoundary(modifiedEnd)) {
          return true;
        }
      }
      return false;
    }
    _boundaryScore(originalStart, originalLength, modifiedStart, modifiedLength) {
      const originalScore = this._OriginalRegionIsBoundary(originalStart, originalLength) ? 1 : 0;
      const modifiedScore = this._ModifiedRegionIsBoundary(modifiedStart, modifiedLength) ? 1 : 0;
      return originalScore + modifiedScore;
    }
    /**
     * Concatenates the two input DiffChange lists and returns the resulting
     * list.
     * @param The left changes
     * @param The right changes
     * @returns The concatenated list
     */
    ConcatenateChanges(left, right) {
      const mergedChangeArr = [];
      if (left.length === 0 || right.length === 0) {
        return right.length > 0 ? right : left;
      } else if (this.ChangesOverlap(left[left.length - 1], right[0], mergedChangeArr)) {
        const result = new Array(left.length + right.length - 1);
        MyArray.Copy(left, 0, result, 0, left.length - 1);
        result[left.length - 1] = mergedChangeArr[0];
        MyArray.Copy(right, 1, result, left.length, right.length - 1);
        return result;
      } else {
        const result = new Array(left.length + right.length);
        MyArray.Copy(left, 0, result, 0, left.length);
        MyArray.Copy(right, 0, result, left.length, right.length);
        return result;
      }
    }
    /**
     * Returns true if the two changes overlap and can be merged into a single
     * change
     * @param left The left change
     * @param right The right change
     * @param mergedChange The merged change if the two overlap, null otherwise
     * @returns True if the two changes overlap
     */
    ChangesOverlap(left, right, mergedChangeArr) {
      Debug.Assert(left.originalStart <= right.originalStart, "Left change is not less than or equal to right change");
      Debug.Assert(left.modifiedStart <= right.modifiedStart, "Left change is not less than or equal to right change");
      if (left.originalStart + left.originalLength >= right.originalStart || left.modifiedStart + left.modifiedLength >= right.modifiedStart) {
        const originalStart = left.originalStart;
        let originalLength = left.originalLength;
        const modifiedStart = left.modifiedStart;
        let modifiedLength = left.modifiedLength;
        if (left.originalStart + left.originalLength >= right.originalStart) {
          originalLength = right.originalStart + right.originalLength - left.originalStart;
        }
        if (left.modifiedStart + left.modifiedLength >= right.modifiedStart) {
          modifiedLength = right.modifiedStart + right.modifiedLength - left.modifiedStart;
        }
        mergedChangeArr[0] = new DiffChange(originalStart, originalLength, modifiedStart, modifiedLength);
        return true;
      } else {
        mergedChangeArr[0] = null;
        return false;
      }
    }
    /**
     * Helper method used to clip a diagonal index to the range of valid
     * diagonals. This also decides whether or not the diagonal index,
     * if it exceeds the boundary, should be clipped to the boundary or clipped
     * one inside the boundary depending on the Even/Odd status of the boundary
     * and numDifferences.
     * @param diagonal The index of the diagonal to clip.
     * @param numDifferences The current number of differences being iterated upon.
     * @param diagonalBaseIndex The base reference diagonal.
     * @param numDiagonals The total number of diagonals.
     * @returns The clipped diagonal index.
     */
    ClipDiagonalBound(diagonal, numDifferences, diagonalBaseIndex, numDiagonals) {
      if (diagonal >= 0 && diagonal < numDiagonals) {
        return diagonal;
      }
      const diagonalsBelow = diagonalBaseIndex;
      const diagonalsAbove = numDiagonals - diagonalBaseIndex - 1;
      const diffEven = numDifferences % 2 === 0;
      if (diagonal < 0) {
        const lowerBoundEven = diagonalsBelow % 2 === 0;
        return diffEven === lowerBoundEven ? 0 : 1;
      } else {
        const upperBoundEven = diagonalsAbove % 2 === 0;
        return diffEven === upperBoundEven ? numDiagonals - 1 : numDiagonals - 2;
      }
    }
  };

  // node_modules/monaco-editor/esm/vs/base/common/process.js
  var safeProcess;
  var vscodeGlobal = globalThis.vscode;
  if (typeof vscodeGlobal !== "undefined" && typeof vscodeGlobal.process !== "undefined") {
    const sandboxProcess = vscodeGlobal.process;
    safeProcess = {
      get platform() {
        return sandboxProcess.platform;
      },
      get arch() {
        return sandboxProcess.arch;
      },
      get env() {
        return sandboxProcess.env;
      },
      cwd() {
        return sandboxProcess.cwd();
      }
    };
  } else if (typeof process !== "undefined") {
    safeProcess = {
      get platform() {
        return process.platform;
      },
      get arch() {
        return process.arch;
      },
      get env() {
        return process.env;
      },
      cwd() {
        return process.env["VSCODE_CWD"] || process.cwd();
      }
    };
  } else {
    safeProcess = {
      // Supported
      get platform() {
        return isWindows ? "win32" : isMacintosh ? "darwin" : "linux";
      },
      get arch() {
        return void 0;
      },
      // Unsupported
      get env() {
        return {};
      },
      cwd() {
        return "/";
      }
    };
  }
  var cwd = safeProcess.cwd;
  var env = safeProcess.env;
  var platform = safeProcess.platform;

  // node_modules/monaco-editor/esm/vs/base/common/path.js
  var CHAR_UPPERCASE_A = 65;
  var CHAR_LOWERCASE_A = 97;
  var CHAR_UPPERCASE_Z = 90;
  var CHAR_LOWERCASE_Z = 122;
  var CHAR_DOT = 46;
  var CHAR_FORWARD_SLASH = 47;
  var CHAR_BACKWARD_SLASH = 92;
  var CHAR_COLON = 58;
  var CHAR_QUESTION_MARK = 63;
  var ErrorInvalidArgType = class extends Error {
    constructor(name, expected, actual) {
      let determiner;
      if (typeof expected === "string" && expected.indexOf("not ") === 0) {
        determiner = "must not be";
        expected = expected.replace(/^not /, "");
      } else {
        determiner = "must be";
      }
      const type = name.indexOf(".") !== -1 ? "property" : "argument";
      let msg = `The "${name}" ${type} ${determiner} of type ${expected}`;
      msg += `. Received type ${typeof actual}`;
      super(msg);
      this.code = "ERR_INVALID_ARG_TYPE";
    }
  };
  function validateObject(pathObject, name) {
    if (pathObject === null || typeof pathObject !== "object") {
      throw new ErrorInvalidArgType(name, "Object", pathObject);
    }
  }
  function validateString(value, name) {
    if (typeof value !== "string") {
      throw new ErrorInvalidArgType(name, "string", value);
    }
  }
  var platformIsWin32 = platform === "win32";
  function isPathSeparator(code) {
    return code === CHAR_FORWARD_SLASH || code === CHAR_BACKWARD_SLASH;
  }
  function isPosixPathSeparator(code) {
    return code === CHAR_FORWARD_SLASH;
  }
  function isWindowsDeviceRoot(code) {
    return code >= CHAR_UPPERCASE_A && code <= CHAR_UPPERCASE_Z || code >= CHAR_LOWERCASE_A && code <= CHAR_LOWERCASE_Z;
  }
  function normalizeString(path, allowAboveRoot, separator, isPathSeparator2) {
    let res = "";
    let lastSegmentLength = 0;
    let lastSlash = -1;
    let dots = 0;
    let code = 0;
    for (let i = 0; i <= path.length; ++i) {
      if (i < path.length) {
        code = path.charCodeAt(i);
      } else if (isPathSeparator2(code)) {
        break;
      } else {
        code = CHAR_FORWARD_SLASH;
      }
      if (isPathSeparator2(code)) {
        if (lastSlash === i - 1 || dots === 1) {
        } else if (dots === 2) {
          if (res.length < 2 || lastSegmentLength !== 2 || res.charCodeAt(res.length - 1) !== CHAR_DOT || res.charCodeAt(res.length - 2) !== CHAR_DOT) {
            if (res.length > 2) {
              const lastSlashIndex = res.lastIndexOf(separator);
              if (lastSlashIndex === -1) {
                res = "";
                lastSegmentLength = 0;
              } else {
                res = res.slice(0, lastSlashIndex);
                lastSegmentLength = res.length - 1 - res.lastIndexOf(separator);
              }
              lastSlash = i;
              dots = 0;
              continue;
            } else if (res.length !== 0) {
              res = "";
              lastSegmentLength = 0;
              lastSlash = i;
              dots = 0;
              continue;
            }
          }
          if (allowAboveRoot) {
            res += res.length > 0 ? `${separator}..` : "..";
            lastSegmentLength = 2;
          }
        } else {
          if (res.length > 0) {
            res += `${separator}${path.slice(lastSlash + 1, i)}`;
          } else {
            res = path.slice(lastSlash + 1, i);
          }
          lastSegmentLength = i - lastSlash - 1;
        }
        lastSlash = i;
        dots = 0;
      } else if (code === CHAR_DOT && dots !== -1) {
        ++dots;
      } else {
        dots = -1;
      }
    }
    return res;
  }
  function _format2(sep2, pathObject) {
    validateObject(pathObject, "pathObject");
    const dir = pathObject.dir || pathObject.root;
    const base = pathObject.base || `${pathObject.name || ""}${pathObject.ext || ""}`;
    if (!dir) {
      return base;
    }
    return dir === pathObject.root ? `${dir}${base}` : `${dir}${sep2}${base}`;
  }
  var win32 = {
    // path.resolve([from ...], to)
    resolve(...pathSegments) {
      let resolvedDevice = "";
      let resolvedTail = "";
      let resolvedAbsolute = false;
      for (let i = pathSegments.length - 1; i >= -1; i--) {
        let path;
        if (i >= 0) {
          path = pathSegments[i];
          validateString(path, "path");
          if (path.length === 0) {
            continue;
          }
        } else if (resolvedDevice.length === 0) {
          path = cwd();
        } else {
          path = env[`=${resolvedDevice}`] || cwd();
          if (path === void 0 || path.slice(0, 2).toLowerCase() !== resolvedDevice.toLowerCase() && path.charCodeAt(2) === CHAR_BACKWARD_SLASH) {
            path = `${resolvedDevice}\\`;
          }
        }
        const len = path.length;
        let rootEnd = 0;
        let device = "";
        let isAbsolute = false;
        const code = path.charCodeAt(0);
        if (len === 1) {
          if (isPathSeparator(code)) {
            rootEnd = 1;
            isAbsolute = true;
          }
        } else if (isPathSeparator(code)) {
          isAbsolute = true;
          if (isPathSeparator(path.charCodeAt(1))) {
            let j = 2;
            let last = j;
            while (j < len && !isPathSeparator(path.charCodeAt(j))) {
              j++;
            }
            if (j < len && j !== last) {
              const firstPart = path.slice(last, j);
              last = j;
              while (j < len && isPathSeparator(path.charCodeAt(j))) {
                j++;
              }
              if (j < len && j !== last) {
                last = j;
                while (j < len && !isPathSeparator(path.charCodeAt(j))) {
                  j++;
                }
                if (j === len || j !== last) {
                  device = `\\\\${firstPart}\\${path.slice(last, j)}`;
                  rootEnd = j;
                }
              }
            }
          } else {
            rootEnd = 1;
          }
        } else if (isWindowsDeviceRoot(code) && path.charCodeAt(1) === CHAR_COLON) {
          device = path.slice(0, 2);
          rootEnd = 2;
          if (len > 2 && isPathSeparator(path.charCodeAt(2))) {
            isAbsolute = true;
            rootEnd = 3;
          }
        }
        if (device.length > 0) {
          if (resolvedDevice.length > 0) {
            if (device.toLowerCase() !== resolvedDevice.toLowerCase()) {
              continue;
            }
          } else {
            resolvedDevice = device;
          }
        }
        if (resolvedAbsolute) {
          if (resolvedDevice.length > 0) {
            break;
          }
        } else {
          resolvedTail = `${path.slice(rootEnd)}\\${resolvedTail}`;
          resolvedAbsolute = isAbsolute;
          if (isAbsolute && resolvedDevice.length > 0) {
            break;
          }
        }
      }
      resolvedTail = normalizeString(resolvedTail, !resolvedAbsolute, "\\", isPathSeparator);
      return resolvedAbsolute ? `${resolvedDevice}\\${resolvedTail}` : `${resolvedDevice}${resolvedTail}` || ".";
    },
    normalize(path) {
      validateString(path, "path");
      const len = path.length;
      if (len === 0) {
        return ".";
      }
      let rootEnd = 0;
      let device;
      let isAbsolute = false;
      const code = path.charCodeAt(0);
      if (len === 1) {
        return isPosixPathSeparator(code) ? "\\" : path;
      }
      if (isPathSeparator(code)) {
        isAbsolute = true;
        if (isPathSeparator(path.charCodeAt(1))) {
          let j = 2;
          let last = j;
          while (j < len && !isPathSeparator(path.charCodeAt(j))) {
            j++;
          }
          if (j < len && j !== last) {
            const firstPart = path.slice(last, j);
            last = j;
            while (j < len && isPathSeparator(path.charCodeAt(j))) {
              j++;
            }
            if (j < len && j !== last) {
              last = j;
              while (j < len && !isPathSeparator(path.charCodeAt(j))) {
                j++;
              }
              if (j === len) {
                return `\\\\${firstPart}\\${path.slice(last)}\\`;
              }
              if (j !== last) {
                device = `\\\\${firstPart}\\${path.slice(last, j)}`;
                rootEnd = j;
              }
            }
          }
        } else {
          rootEnd = 1;
        }
      } else if (isWindowsDeviceRoot(code) && path.charCodeAt(1) === CHAR_COLON) {
        device = path.slice(0, 2);
        rootEnd = 2;
        if (len > 2 && isPathSeparator(path.charCodeAt(2))) {
          isAbsolute = true;
          rootEnd = 3;
        }
      }
      let tail = rootEnd < len ? normalizeString(path.slice(rootEnd), !isAbsolute, "\\", isPathSeparator) : "";
      if (tail.length === 0 && !isAbsolute) {
        tail = ".";
      }
      if (tail.length > 0 && isPathSeparator(path.charCodeAt(len - 1))) {
        tail += "\\";
      }
      if (device === void 0) {
        return isAbsolute ? `\\${tail}` : tail;
      }
      return isAbsolute ? `${device}\\${tail}` : `${device}${tail}`;
    },
    isAbsolute(path) {
      validateString(path, "path");
      const len = path.length;
      if (len === 0) {
        return false;
      }
      const code = path.charCodeAt(0);
      return isPathSeparator(code) || // Possible device root
      len > 2 && isWindowsDeviceRoot(code) && path.charCodeAt(1) === CHAR_COLON && isPathSeparator(path.charCodeAt(2));
    },
    join(...paths) {
      if (paths.length === 0) {
        return ".";
      }
      let joined;
      let firstPart;
      for (let i = 0; i < paths.length; ++i) {
        const arg = paths[i];
        validateString(arg, "path");
        if (arg.length > 0) {
          if (joined === void 0) {
            joined = firstPart = arg;
          } else {
            joined += `\\${arg}`;
          }
        }
      }
      if (joined === void 0) {
        return ".";
      }
      let needsReplace = true;
      let slashCount = 0;
      if (typeof firstPart === "string" && isPathSeparator(firstPart.charCodeAt(0))) {
        ++slashCount;
        const firstLen = firstPart.length;
        if (firstLen > 1 && isPathSeparator(firstPart.charCodeAt(1))) {
          ++slashCount;
          if (firstLen > 2) {
            if (isPathSeparator(firstPart.charCodeAt(2))) {
              ++slashCount;
            } else {
              needsReplace = false;
            }
          }
        }
      }
      if (needsReplace) {
        while (slashCount < joined.length && isPathSeparator(joined.charCodeAt(slashCount))) {
          slashCount++;
        }
        if (slashCount >= 2) {
          joined = `\\${joined.slice(slashCount)}`;
        }
      }
      return win32.normalize(joined);
    },
    // It will solve the relative path from `from` to `to`, for instance:
    //  from = 'C:\\orandea\\test\\aaa'
    //  to = 'C:\\orandea\\impl\\bbb'
    // The output of the function should be: '..\\..\\impl\\bbb'
    relative(from, to) {
      validateString(from, "from");
      validateString(to, "to");
      if (from === to) {
        return "";
      }
      const fromOrig = win32.resolve(from);
      const toOrig = win32.resolve(to);
      if (fromOrig === toOrig) {
        return "";
      }
      from = fromOrig.toLowerCase();
      to = toOrig.toLowerCase();
      if (from === to) {
        return "";
      }
      let fromStart = 0;
      while (fromStart < from.length && from.charCodeAt(fromStart) === CHAR_BACKWARD_SLASH) {
        fromStart++;
      }
      let fromEnd = from.length;
      while (fromEnd - 1 > fromStart && from.charCodeAt(fromEnd - 1) === CHAR_BACKWARD_SLASH) {
        fromEnd--;
      }
      const fromLen = fromEnd - fromStart;
      let toStart = 0;
      while (toStart < to.length && to.charCodeAt(toStart) === CHAR_BACKWARD_SLASH) {
        toStart++;
      }
      let toEnd = to.length;
      while (toEnd - 1 > toStart && to.charCodeAt(toEnd - 1) === CHAR_BACKWARD_SLASH) {
        toEnd--;
      }
      const toLen = toEnd - toStart;
      const length = fromLen < toLen ? fromLen : toLen;
      let lastCommonSep = -1;
      let i = 0;
      for (; i < length; i++) {
        const fromCode = from.charCodeAt(fromStart + i);
        if (fromCode !== to.charCodeAt(toStart + i)) {
          break;
        } else if (fromCode === CHAR_BACKWARD_SLASH) {
          lastCommonSep = i;
        }
      }
      if (i !== length) {
        if (lastCommonSep === -1) {
          return toOrig;
        }
      } else {
        if (toLen > length) {
          if (to.charCodeAt(toStart + i) === CHAR_BACKWARD_SLASH) {
            return toOrig.slice(toStart + i + 1);
          }
          if (i === 2) {
            return toOrig.slice(toStart + i);
          }
        }
        if (fromLen > length) {
          if (from.charCodeAt(fromStart + i) === CHAR_BACKWARD_SLASH) {
            lastCommonSep = i;
          } else if (i === 2) {
            lastCommonSep = 3;
          }
        }
        if (lastCommonSep === -1) {
          lastCommonSep = 0;
        }
      }
      let out = "";
      for (i = fromStart + lastCommonSep + 1; i <= fromEnd; ++i) {
        if (i === fromEnd || from.charCodeAt(i) === CHAR_BACKWARD_SLASH) {
          out += out.length === 0 ? ".." : "\\..";
        }
      }
      toStart += lastCommonSep;
      if (out.length > 0) {
        return `${out}${toOrig.slice(toStart, toEnd)}`;
      }
      if (toOrig.charCodeAt(toStart) === CHAR_BACKWARD_SLASH) {
        ++toStart;
      }
      return toOrig.slice(toStart, toEnd);
    },
    toNamespacedPath(path) {
      if (typeof path !== "string" || path.length === 0) {
        return path;
      }
      const resolvedPath = win32.resolve(path);
      if (resolvedPath.length <= 2) {
        return path;
      }
      if (resolvedPath.charCodeAt(0) === CHAR_BACKWARD_SLASH) {
        if (resolvedPath.charCodeAt(1) === CHAR_BACKWARD_SLASH) {
          const code = resolvedPath.charCodeAt(2);
          if (code !== CHAR_QUESTION_MARK && code !== CHAR_DOT) {
            return `\\\\?\\UNC\\${resolvedPath.slice(2)}`;
          }
        }
      } else if (isWindowsDeviceRoot(resolvedPath.charCodeAt(0)) && resolvedPath.charCodeAt(1) === CHAR_COLON && resolvedPath.charCodeAt(2) === CHAR_BACKWARD_SLASH) {
        return `\\\\?\\${resolvedPath}`;
      }
      return path;
    },
    dirname(path) {
      validateString(path, "path");
      const len = path.length;
      if (len === 0) {
        return ".";
      }
      let rootEnd = -1;
      let offset = 0;
      const code = path.charCodeAt(0);
      if (len === 1) {
        return isPathSeparator(code) ? path : ".";
      }
      if (isPathSeparator(code)) {
        rootEnd = offset = 1;
        if (isPathSeparator(path.charCodeAt(1))) {
          let j = 2;
          let last = j;
          while (j < len && !isPathSeparator(path.charCodeAt(j))) {
            j++;
          }
          if (j < len && j !== last) {
            last = j;
            while (j < len && isPathSeparator(path.charCodeAt(j))) {
              j++;
            }
            if (j < len && j !== last) {
              last = j;
              while (j < len && !isPathSeparator(path.charCodeAt(j))) {
                j++;
              }
              if (j === len) {
                return path;
              }
              if (j !== last) {
                rootEnd = offset = j + 1;
              }
            }
          }
        }
      } else if (isWindowsDeviceRoot(code) && path.charCodeAt(1) === CHAR_COLON) {
        rootEnd = len > 2 && isPathSeparator(path.charCodeAt(2)) ? 3 : 2;
        offset = rootEnd;
      }
      let end = -1;
      let matchedSlash = true;
      for (let i = len - 1; i >= offset; --i) {
        if (isPathSeparator(path.charCodeAt(i))) {
          if (!matchedSlash) {
            end = i;
            break;
          }
        } else {
          matchedSlash = false;
        }
      }
      if (end === -1) {
        if (rootEnd === -1) {
          return ".";
        }
        end = rootEnd;
      }
      return path.slice(0, end);
    },
    basename(path, ext) {
      if (ext !== void 0) {
        validateString(ext, "ext");
      }
      validateString(path, "path");
      let start = 0;
      let end = -1;
      let matchedSlash = true;
      let i;
      if (path.length >= 2 && isWindowsDeviceRoot(path.charCodeAt(0)) && path.charCodeAt(1) === CHAR_COLON) {
        start = 2;
      }
      if (ext !== void 0 && ext.length > 0 && ext.length <= path.length) {
        if (ext === path) {
          return "";
        }
        let extIdx = ext.length - 1;
        let firstNonSlashEnd = -1;
        for (i = path.length - 1; i >= start; --i) {
          const code = path.charCodeAt(i);
          if (isPathSeparator(code)) {
            if (!matchedSlash) {
              start = i + 1;
              break;
            }
          } else {
            if (firstNonSlashEnd === -1) {
              matchedSlash = false;
              firstNonSlashEnd = i + 1;
            }
            if (extIdx >= 0) {
              if (code === ext.charCodeAt(extIdx)) {
                if (--extIdx === -1) {
                  end = i;
                }
              } else {
                extIdx = -1;
                end = firstNonSlashEnd;
              }
            }
          }
        }
        if (start === end) {
          end = firstNonSlashEnd;
        } else if (end === -1) {
          end = path.length;
        }
        return path.slice(start, end);
      }
      for (i = path.length - 1; i >= start; --i) {
        if (isPathSeparator(path.charCodeAt(i))) {
          if (!matchedSlash) {
            start = i + 1;
            break;
          }
        } else if (end === -1) {
          matchedSlash = false;
          end = i + 1;
        }
      }
      if (end === -1) {
        return "";
      }
      return path.slice(start, end);
    },
    extname(path) {
      validateString(path, "path");
      let start = 0;
      let startDot = -1;
      let startPart = 0;
      let end = -1;
      let matchedSlash = true;
      let preDotState = 0;
      if (path.length >= 2 && path.charCodeAt(1) === CHAR_COLON && isWindowsDeviceRoot(path.charCodeAt(0))) {
        start = startPart = 2;
      }
      for (let i = path.length - 1; i >= start; --i) {
        const code = path.charCodeAt(i);
        if (isPathSeparator(code)) {
          if (!matchedSlash) {
            startPart = i + 1;
            break;
          }
          continue;
        }
        if (end === -1) {
          matchedSlash = false;
          end = i + 1;
        }
        if (code === CHAR_DOT) {
          if (startDot === -1) {
            startDot = i;
          } else if (preDotState !== 1) {
            preDotState = 1;
          }
        } else if (startDot !== -1) {
          preDotState = -1;
        }
      }
      if (startDot === -1 || end === -1 || // We saw a non-dot character immediately before the dot
      preDotState === 0 || // The (right-most) trimmed path component is exactly '..'
      preDotState === 1 && startDot === end - 1 && startDot === startPart + 1) {
        return "";
      }
      return path.slice(startDot, end);
    },
    format: _format2.bind(null, "\\"),
    parse(path) {
      validateString(path, "path");
      const ret = { root: "", dir: "", base: "", ext: "", name: "" };
      if (path.length === 0) {
        return ret;
      }
      const len = path.length;
      let rootEnd = 0;
      let code = path.charCodeAt(0);
      if (len === 1) {
        if (isPathSeparator(code)) {
          ret.root = ret.dir = path;
          return ret;
        }
        ret.base = ret.name = path;
        return ret;
      }
      if (isPathSeparator(code)) {
        rootEnd = 1;
        if (isPathSeparator(path.charCodeAt(1))) {
          let j = 2;
          let last = j;
          while (j < len && !isPathSeparator(path.charCodeAt(j))) {
            j++;
          }
          if (j < len && j !== last) {
            last = j;
            while (j < len && isPathSeparator(path.charCodeAt(j))) {
              j++;
            }
            if (j < len && j !== last) {
              last = j;
              while (j < len && !isPathSeparator(path.charCodeAt(j))) {
                j++;
              }
              if (j === len) {
                rootEnd = j;
              } else if (j !== last) {
                rootEnd = j + 1;
              }
            }
          }
        }
      } else if (isWindowsDeviceRoot(code) && path.charCodeAt(1) === CHAR_COLON) {
        if (len <= 2) {
          ret.root = ret.dir = path;
          return ret;
        }
        rootEnd = 2;
        if (isPathSeparator(path.charCodeAt(2))) {
          if (len === 3) {
            ret.root = ret.dir = path;
            return ret;
          }
          rootEnd = 3;
        }
      }
      if (rootEnd > 0) {
        ret.root = path.slice(0, rootEnd);
      }
      let startDot = -1;
      let startPart = rootEnd;
      let end = -1;
      let matchedSlash = true;
      let i = path.length - 1;
      let preDotState = 0;
      for (; i >= rootEnd; --i) {
        code = path.charCodeAt(i);
        if (isPathSeparator(code)) {
          if (!matchedSlash) {
            startPart = i + 1;
            break;
          }
          continue;
        }
        if (end === -1) {
          matchedSlash = false;
          end = i + 1;
        }
        if (code === CHAR_DOT) {
          if (startDot === -1) {
            startDot = i;
          } else if (preDotState !== 1) {
            preDotState = 1;
          }
        } else if (startDot !== -1) {
          preDotState = -1;
        }
      }
      if (end !== -1) {
        if (startDot === -1 || // We saw a non-dot character immediately before the dot
        preDotState === 0 || // The (right-most) trimmed path component is exactly '..'
        preDotState === 1 && startDot === end - 1 && startDot === startPart + 1) {
          ret.base = ret.name = path.slice(startPart, end);
        } else {
          ret.name = path.slice(startPart, startDot);
          ret.base = path.slice(startPart, end);
          ret.ext = path.slice(startDot, end);
        }
      }
      if (startPart > 0 && startPart !== rootEnd) {
        ret.dir = path.slice(0, startPart - 1);
      } else {
        ret.dir = ret.root;
      }
      return ret;
    },
    sep: "\\",
    delimiter: ";",
    win32: null,
    posix: null
  };
  var posixCwd = (() => {
    if (platformIsWin32) {
      const regexp = /\\/g;
      return () => {
        const cwd2 = cwd().replace(regexp, "/");
        return cwd2.slice(cwd2.indexOf("/"));
      };
    }
    return () => cwd();
  })();
  var posix = {
    // path.resolve([from ...], to)
    resolve(...pathSegments) {
      let resolvedPath = "";
      let resolvedAbsolute = false;
      for (let i = pathSegments.length - 1; i >= -1 && !resolvedAbsolute; i--) {
        const path = i >= 0 ? pathSegments[i] : posixCwd();
        validateString(path, "path");
        if (path.length === 0) {
          continue;
        }
        resolvedPath = `${path}/${resolvedPath}`;
        resolvedAbsolute = path.charCodeAt(0) === CHAR_FORWARD_SLASH;
      }
      resolvedPath = normalizeString(resolvedPath, !resolvedAbsolute, "/", isPosixPathSeparator);
      if (resolvedAbsolute) {
        return `/${resolvedPath}`;
      }
      return resolvedPath.length > 0 ? resolvedPath : ".";
    },
    normalize(path) {
      validateString(path, "path");
      if (path.length === 0) {
        return ".";
      }
      const isAbsolute = path.charCodeAt(0) === CHAR_FORWARD_SLASH;
      const trailingSeparator = path.charCodeAt(path.length - 1) === CHAR_FORWARD_SLASH;
      path = normalizeString(path, !isAbsolute, "/", isPosixPathSeparator);
      if (path.length === 0) {
        if (isAbsolute) {
          return "/";
        }
        return trailingSeparator ? "./" : ".";
      }
      if (trailingSeparator) {
        path += "/";
      }
      return isAbsolute ? `/${path}` : path;
    },
    isAbsolute(path) {
      validateString(path, "path");
      return path.length > 0 && path.charCodeAt(0) === CHAR_FORWARD_SLASH;
    },
    join(...paths) {
      if (paths.length === 0) {
        return ".";
      }
      let joined;
      for (let i = 0; i < paths.length; ++i) {
        const arg = paths[i];
        validateString(arg, "path");
        if (arg.length > 0) {
          if (joined === void 0) {
            joined = arg;
          } else {
            joined += `/${arg}`;
          }
        }
      }
      if (joined === void 0) {
        return ".";
      }
      return posix.normalize(joined);
    },
    relative(from, to) {
      validateString(from, "from");
      validateString(to, "to");
      if (from === to) {
        return "";
      }
      from = posix.resolve(from);
      to = posix.resolve(to);
      if (from === to) {
        return "";
      }
      const fromStart = 1;
      const fromEnd = from.length;
      const fromLen = fromEnd - fromStart;
      const toStart = 1;
      const toLen = to.length - toStart;
      const length = fromLen < toLen ? fromLen : toLen;
      let lastCommonSep = -1;
      let i = 0;
      for (; i < length; i++) {
        const fromCode = from.charCodeAt(fromStart + i);
        if (fromCode !== to.charCodeAt(toStart + i)) {
          break;
        } else if (fromCode === CHAR_FORWARD_SLASH) {
          lastCommonSep = i;
        }
      }
      if (i === length) {
        if (toLen > length) {
          if (to.charCodeAt(toStart + i) === CHAR_FORWARD_SLASH) {
            return to.slice(toStart + i + 1);
          }
          if (i === 0) {
            return to.slice(toStart + i);
          }
        } else if (fromLen > length) {
          if (from.charCodeAt(fromStart + i) === CHAR_FORWARD_SLASH) {
            lastCommonSep = i;
          } else if (i === 0) {
            lastCommonSep = 0;
          }
        }
      }
      let out = "";
      for (i = fromStart + lastCommonSep + 1; i <= fromEnd; ++i) {
        if (i === fromEnd || from.charCodeAt(i) === CHAR_FORWARD_SLASH) {
          out += out.length === 0 ? ".." : "/..";
        }
      }
      return `${out}${to.slice(toStart + lastCommonSep)}`;
    },
    toNamespacedPath(path) {
      return path;
    },
    dirname(path) {
      validateString(path, "path");
      if (path.length === 0) {
        return ".";
      }
      const hasRoot = path.charCodeAt(0) === CHAR_FORWARD_SLASH;
      let end = -1;
      let matchedSlash = true;
      for (let i = path.length - 1; i >= 1; --i) {
        if (path.charCodeAt(i) === CHAR_FORWARD_SLASH) {
          if (!matchedSlash) {
            end = i;
            break;
          }
        } else {
          matchedSlash = false;
        }
      }
      if (end === -1) {
        return hasRoot ? "/" : ".";
      }
      if (hasRoot && end === 1) {
        return "//";
      }
      return path.slice(0, end);
    },
    basename(path, ext) {
      if (ext !== void 0) {
        validateString(ext, "ext");
      }
      validateString(path, "path");
      let start = 0;
      let end = -1;
      let matchedSlash = true;
      let i;
      if (ext !== void 0 && ext.length > 0 && ext.length <= path.length) {
        if (ext === path) {
          return "";
        }
        let extIdx = ext.length - 1;
        let firstNonSlashEnd = -1;
        for (i = path.length - 1; i >= 0; --i) {
          const code = path.charCodeAt(i);
          if (code === CHAR_FORWARD_SLASH) {
            if (!matchedSlash) {
              start = i + 1;
              break;
            }
          } else {
            if (firstNonSlashEnd === -1) {
              matchedSlash = false;
              firstNonSlashEnd = i + 1;
            }
            if (extIdx >= 0) {
              if (code === ext.charCodeAt(extIdx)) {
                if (--extIdx === -1) {
                  end = i;
                }
              } else {
                extIdx = -1;
                end = firstNonSlashEnd;
              }
            }
          }
        }
        if (start === end) {
          end = firstNonSlashEnd;
        } else if (end === -1) {
          end = path.length;
        }
        return path.slice(start, end);
      }
      for (i = path.length - 1; i >= 0; --i) {
        if (path.charCodeAt(i) === CHAR_FORWARD_SLASH) {
          if (!matchedSlash) {
            start = i + 1;
            break;
          }
        } else if (end === -1) {
          matchedSlash = false;
          end = i + 1;
        }
      }
      if (end === -1) {
        return "";
      }
      return path.slice(start, end);
    },
    extname(path) {
      validateString(path, "path");
      let startDot = -1;
      let startPart = 0;
      let end = -1;
      let matchedSlash = true;
      let preDotState = 0;
      for (let i = path.length - 1; i >= 0; --i) {
        const code = path.charCodeAt(i);
        if (code === CHAR_FORWARD_SLASH) {
          if (!matchedSlash) {
            startPart = i + 1;
            break;
          }
          continue;
        }
        if (end === -1) {
          matchedSlash = false;
          end = i + 1;
        }
        if (code === CHAR_DOT) {
          if (startDot === -1) {
            startDot = i;
          } else if (preDotState !== 1) {
            preDotState = 1;
          }
        } else if (startDot !== -1) {
          preDotState = -1;
        }
      }
      if (startDot === -1 || end === -1 || // We saw a non-dot character immediately before the dot
      preDotState === 0 || // The (right-most) trimmed path component is exactly '..'
      preDotState === 1 && startDot === end - 1 && startDot === startPart + 1) {
        return "";
      }
      return path.slice(startDot, end);
    },
    format: _format2.bind(null, "/"),
    parse(path) {
      validateString(path, "path");
      const ret = { root: "", dir: "", base: "", ext: "", name: "" };
      if (path.length === 0) {
        return ret;
      }
      const isAbsolute = path.charCodeAt(0) === CHAR_FORWARD_SLASH;
      let start;
      if (isAbsolute) {
        ret.root = "/";
        start = 1;
      } else {
        start = 0;
      }
      let startDot = -1;
      let startPart = 0;
      let end = -1;
      let matchedSlash = true;
      let i = path.length - 1;
      let preDotState = 0;
      for (; i >= start; --i) {
        const code = path.charCodeAt(i);
        if (code === CHAR_FORWARD_SLASH) {
          if (!matchedSlash) {
            startPart = i + 1;
            break;
          }
          continue;
        }
        if (end === -1) {
          matchedSlash = false;
          end = i + 1;
        }
        if (code === CHAR_DOT) {
          if (startDot === -1) {
            startDot = i;
          } else if (preDotState !== 1) {
            preDotState = 1;
          }
        } else if (startDot !== -1) {
          preDotState = -1;
        }
      }
      if (end !== -1) {
        const start2 = startPart === 0 && isAbsolute ? 1 : startPart;
        if (startDot === -1 || // We saw a non-dot character immediately before the dot
        preDotState === 0 || // The (right-most) trimmed path component is exactly '..'
        preDotState === 1 && startDot === end - 1 && startDot === startPart + 1) {
          ret.base = ret.name = path.slice(start2, end);
        } else {
          ret.name = path.slice(start2, startDot);
          ret.base = path.slice(start2, end);
          ret.ext = path.slice(startDot, end);
        }
      }
      if (startPart > 0) {
        ret.dir = path.slice(0, startPart - 1);
      } else if (isAbsolute) {
        ret.dir = "/";
      }
      return ret;
    },
    sep: "/",
    delimiter: ":",
    win32: null,
    posix: null
  };
  posix.win32 = win32.win32 = win32;
  posix.posix = win32.posix = posix;
  var normalize = platformIsWin32 ? win32.normalize : posix.normalize;
  var resolve = platformIsWin32 ? win32.resolve : posix.resolve;
  var relative = platformIsWin32 ? win32.relative : posix.relative;
  var dirname = platformIsWin32 ? win32.dirname : posix.dirname;
  var basename = platformIsWin32 ? win32.basename : posix.basename;
  var extname = platformIsWin32 ? win32.extname : posix.extname;
  var sep = platformIsWin32 ? win32.sep : posix.sep;

  // node_modules/monaco-editor/esm/vs/base/common/uri.js
  var _schemePattern = /^\w[\w\d+.-]*$/;
  var _singleSlashStart = /^\//;
  var _doubleSlashStart = /^\/\//;
  function _validateUri(ret, _strict) {
    if (!ret.scheme && _strict) {
      throw new Error(`[UriError]: Scheme is missing: {scheme: "", authority: "${ret.authority}", path: "${ret.path}", query: "${ret.query}", fragment: "${ret.fragment}"}`);
    }
    if (ret.scheme && !_schemePattern.test(ret.scheme)) {
      throw new Error("[UriError]: Scheme contains illegal characters.");
    }
    if (ret.path) {
      if (ret.authority) {
        if (!_singleSlashStart.test(ret.path)) {
          throw new Error('[UriError]: If a URI contains an authority component, then the path component must either be empty or begin with a slash ("/") character');
        }
      } else {
        if (_doubleSlashStart.test(ret.path)) {
          throw new Error('[UriError]: If a URI does not contain an authority component, then the path cannot begin with two slash characters ("//")');
        }
      }
    }
  }
  function _schemeFix(scheme, _strict) {
    if (!scheme && !_strict) {
      return "file";
    }
    return scheme;
  }
  function _referenceResolution(scheme, path) {
    switch (scheme) {
      case "https":
      case "http":
      case "file":
        if (!path) {
          path = _slash;
        } else if (path[0] !== _slash) {
          path = _slash + path;
        }
        break;
    }
    return path;
  }
  var _empty = "";
  var _slash = "/";
  var _regexp = /^(([^:/?#]+?):)?(\/\/([^/?#]*))?([^?#]*)(\?([^#]*))?(#(.*))?/;
  var URI = class _URI {
    static isUri(thing) {
      if (thing instanceof _URI) {
        return true;
      }
      if (!thing) {
        return false;
      }
      return typeof thing.authority === "string" && typeof thing.fragment === "string" && typeof thing.path === "string" && typeof thing.query === "string" && typeof thing.scheme === "string" && typeof thing.fsPath === "string" && typeof thing.with === "function" && typeof thing.toString === "function";
    }
    /**
     * @internal
     */
    constructor(schemeOrData, authority, path, query, fragment, _strict = false) {
      if (typeof schemeOrData === "object") {
        this.scheme = schemeOrData.scheme || _empty;
        this.authority = schemeOrData.authority || _empty;
        this.path = schemeOrData.path || _empty;
        this.query = schemeOrData.query || _empty;
        this.fragment = schemeOrData.fragment || _empty;
      } else {
        this.scheme = _schemeFix(schemeOrData, _strict);
        this.authority = authority || _empty;
        this.path = _referenceResolution(this.scheme, path || _empty);
        this.query = query || _empty;
        this.fragment = fragment || _empty;
        _validateUri(this, _strict);
      }
    }
    // ---- filesystem path -----------------------
    /**
     * Returns a string representing the corresponding file system path of this URI.
     * Will handle UNC paths, normalizes windows drive letters to lower-case, and uses the
     * platform specific path separator.
     *
     * * Will *not* validate the path for invalid characters and semantics.
     * * Will *not* look at the scheme of this URI.
     * * The result shall *not* be used for display purposes but for accessing a file on disk.
     *
     *
     * The *difference* to `URI#path` is the use of the platform specific separator and the handling
     * of UNC paths. See the below sample of a file-uri with an authority (UNC path).
     *
     * ```ts
        const u = URI.parse('file://server/c$/folder/file.txt')
        u.authority === 'server'
        u.path === '/shares/c$/file.txt'
        u.fsPath === '\\server\c$\folder\file.txt'
    ```
     *
     * Using `URI#path` to read a file (using fs-apis) would not be enough because parts of the path,
     * namely the server name, would be missing. Therefore `URI#fsPath` exists - it's sugar to ease working
     * with URIs that represent files on disk (`file` scheme).
     */
    get fsPath() {
      return uriToFsPath(this, false);
    }
    // ---- modify to new -------------------------
    with(change) {
      if (!change) {
        return this;
      }
      let { scheme, authority, path, query, fragment } = change;
      if (scheme === void 0) {
        scheme = this.scheme;
      } else if (scheme === null) {
        scheme = _empty;
      }
      if (authority === void 0) {
        authority = this.authority;
      } else if (authority === null) {
        authority = _empty;
      }
      if (path === void 0) {
        path = this.path;
      } else if (path === null) {
        path = _empty;
      }
      if (query === void 0) {
        query = this.query;
      } else if (query === null) {
        query = _empty;
      }
      if (fragment === void 0) {
        fragment = this.fragment;
      } else if (fragment === null) {
        fragment = _empty;
      }
      if (scheme === this.scheme && authority === this.authority && path === this.path && query === this.query && fragment === this.fragment) {
        return this;
      }
      return new Uri(scheme, authority, path, query, fragment);
    }
    // ---- parse & validate ------------------------
    /**
     * Creates a new URI from a string, e.g. `http://www.example.com/some/path`,
     * `file:///usr/home`, or `scheme:with/path`.
     *
     * @param value A string which represents an URI (see `URI#toString`).
     */
    static parse(value, _strict = false) {
      const match = _regexp.exec(value);
      if (!match) {
        return new Uri(_empty, _empty, _empty, _empty, _empty);
      }
      return new Uri(match[2] || _empty, percentDecode(match[4] || _empty), percentDecode(match[5] || _empty), percentDecode(match[7] || _empty), percentDecode(match[9] || _empty), _strict);
    }
    /**
     * Creates a new URI from a file system path, e.g. `c:\my\files`,
     * `/usr/home`, or `\\server\share\some\path`.
     *
     * The *difference* between `URI#parse` and `URI#file` is that the latter treats the argument
     * as path, not as stringified-uri. E.g. `URI.file(path)` is **not the same as**
     * `URI.parse('file://' + path)` because the path might contain characters that are
     * interpreted (# and ?). See the following sample:
     * ```ts
    const good = URI.file('/coding/c#/project1');
    good.scheme === 'file';
    good.path === '/coding/c#/project1';
    good.fragment === '';
    const bad = URI.parse('file://' + '/coding/c#/project1');
    bad.scheme === 'file';
    bad.path === '/coding/c'; // path is now broken
    bad.fragment === '/project1';
    ```
     *
     * @param path A file system path (see `URI#fsPath`)
     */
    static file(path) {
      let authority = _empty;
      if (isWindows) {
        path = path.replace(/\\/g, _slash);
      }
      if (path[0] === _slash && path[1] === _slash) {
        const idx = path.indexOf(_slash, 2);
        if (idx === -1) {
          authority = path.substring(2);
          path = _slash;
        } else {
          authority = path.substring(2, idx);
          path = path.substring(idx) || _slash;
        }
      }
      return new Uri("file", authority, path, _empty, _empty);
    }
    /**
     * Creates new URI from uri components.
     *
     * Unless `strict` is `true` the scheme is defaults to be `file`. This function performs
     * validation and should be used for untrusted uri components retrieved from storage,
     * user input, command arguments etc
     */
    static from(components, strict) {
      const result = new Uri(components.scheme, components.authority, components.path, components.query, components.fragment, strict);
      return result;
    }
    /**
     * Join a URI path with path fragments and normalizes the resulting path.
     *
     * @param uri The input URI.
     * @param pathFragment The path fragment to add to the URI path.
     * @returns The resulting URI.
     */
    static joinPath(uri, ...pathFragment) {
      if (!uri.path) {
        throw new Error(`[UriError]: cannot call joinPath on URI without path`);
      }
      let newPath;
      if (isWindows && uri.scheme === "file") {
        newPath = _URI.file(win32.join(uriToFsPath(uri, true), ...pathFragment)).path;
      } else {
        newPath = posix.join(uri.path, ...pathFragment);
      }
      return uri.with({ path: newPath });
    }
    // ---- printing/externalize ---------------------------
    /**
     * Creates a string representation for this URI. It's guaranteed that calling
     * `URI.parse` with the result of this function creates an URI which is equal
     * to this URI.
     *
     * * The result shall *not* be used for display purposes but for externalization or transport.
     * * The result will be encoded using the percentage encoding and encoding happens mostly
     * ignore the scheme-specific encoding rules.
     *
     * @param skipEncoding Do not encode the result, default is `false`
     */
    toString(skipEncoding = false) {
      return _asFormatted(this, skipEncoding);
    }
    toJSON() {
      return this;
    }
    static revive(data) {
      var _a4, _b3;
      if (!data) {
        return data;
      } else if (data instanceof _URI) {
        return data;
      } else {
        const result = new Uri(data);
        result._formatted = (_a4 = data.external) !== null && _a4 !== void 0 ? _a4 : null;
        result._fsPath = data._sep === _pathSepMarker ? (_b3 = data.fsPath) !== null && _b3 !== void 0 ? _b3 : null : null;
        return result;
      }
    }
  };
  var _pathSepMarker = isWindows ? 1 : void 0;
  var Uri = class extends URI {
    constructor() {
      super(...arguments);
      this._formatted = null;
      this._fsPath = null;
    }
    get fsPath() {
      if (!this._fsPath) {
        this._fsPath = uriToFsPath(this, false);
      }
      return this._fsPath;
    }
    toString(skipEncoding = false) {
      if (!skipEncoding) {
        if (!this._formatted) {
          this._formatted = _asFormatted(this, false);
        }
        return this._formatted;
      } else {
        return _asFormatted(this, true);
      }
    }
    toJSON() {
      const res = {
        $mid: 1
        /* MarshalledId.Uri */
      };
      if (this._fsPath) {
        res.fsPath = this._fsPath;
        res._sep = _pathSepMarker;
      }
      if (this._formatted) {
        res.external = this._formatted;
      }
      if (this.path) {
        res.path = this.path;
      }
      if (this.scheme) {
        res.scheme = this.scheme;
      }
      if (this.authority) {
        res.authority = this.authority;
      }
      if (this.query) {
        res.query = this.query;
      }
      if (this.fragment) {
        res.fragment = this.fragment;
      }
      return res;
    }
  };
  var encodeTable = {
    [
      58
      /* CharCode.Colon */
    ]: "%3A",
    // gen-delims
    [
      47
      /* CharCode.Slash */
    ]: "%2F",
    [
      63
      /* CharCode.QuestionMark */
    ]: "%3F",
    [
      35
      /* CharCode.Hash */
    ]: "%23",
    [
      91
      /* CharCode.OpenSquareBracket */
    ]: "%5B",
    [
      93
      /* CharCode.CloseSquareBracket */
    ]: "%5D",
    [
      64
      /* CharCode.AtSign */
    ]: "%40",
    [
      33
      /* CharCode.ExclamationMark */
    ]: "%21",
    // sub-delims
    [
      36
      /* CharCode.DollarSign */
    ]: "%24",
    [
      38
      /* CharCode.Ampersand */
    ]: "%26",
    [
      39
      /* CharCode.SingleQuote */
    ]: "%27",
    [
      40
      /* CharCode.OpenParen */
    ]: "%28",
    [
      41
      /* CharCode.CloseParen */
    ]: "%29",
    [
      42
      /* CharCode.Asterisk */
    ]: "%2A",
    [
      43
      /* CharCode.Plus */
    ]: "%2B",
    [
      44
      /* CharCode.Comma */
    ]: "%2C",
    [
      59
      /* CharCode.Semicolon */
    ]: "%3B",
    [
      61
      /* CharCode.Equals */
    ]: "%3D",
    [
      32
      /* CharCode.Space */
    ]: "%20"
  };
  function encodeURIComponentFast(uriComponent, isPath, isAuthority) {
    let res = void 0;
    let nativeEncodePos = -1;
    for (let pos = 0; pos < uriComponent.length; pos++) {
      const code = uriComponent.charCodeAt(pos);
      if (code >= 97 && code <= 122 || code >= 65 && code <= 90 || code >= 48 && code <= 57 || code === 45 || code === 46 || code === 95 || code === 126 || isPath && code === 47 || isAuthority && code === 91 || isAuthority && code === 93 || isAuthority && code === 58) {
        if (nativeEncodePos !== -1) {
          res += encodeURIComponent(uriComponent.substring(nativeEncodePos, pos));
          nativeEncodePos = -1;
        }
        if (res !== void 0) {
          res += uriComponent.charAt(pos);
        }
      } else {
        if (res === void 0) {
          res = uriComponent.substr(0, pos);
        }
        const escaped = encodeTable[code];
        if (escaped !== void 0) {
          if (nativeEncodePos !== -1) {
            res += encodeURIComponent(uriComponent.substring(nativeEncodePos, pos));
            nativeEncodePos = -1;
          }
          res += escaped;
        } else if (nativeEncodePos === -1) {
          nativeEncodePos = pos;
        }
      }
    }
    if (nativeEncodePos !== -1) {
      res += encodeURIComponent(uriComponent.substring(nativeEncodePos));
    }
    return res !== void 0 ? res : uriComponent;
  }
  function encodeURIComponentMinimal(path) {
    let res = void 0;
    for (let pos = 0; pos < path.length; pos++) {
      const code = path.charCodeAt(pos);
      if (code === 35 || code === 63) {
        if (res === void 0) {
          res = path.substr(0, pos);
        }
        res += encodeTable[code];
      } else {
        if (res !== void 0) {
          res += path[pos];
        }
      }
    }
    return res !== void 0 ? res : path;
  }
  function uriToFsPath(uri, keepDriveLetterCasing) {
    let value;
    if (uri.authority && uri.path.length > 1 && uri.scheme === "file") {
      value = `//${uri.authority}${uri.path}`;
    } else if (uri.path.charCodeAt(0) === 47 && (uri.path.charCodeAt(1) >= 65 && uri.path.charCodeAt(1) <= 90 || uri.path.charCodeAt(1) >= 97 && uri.path.charCodeAt(1) <= 122) && uri.path.charCodeAt(2) === 58) {
      if (!keepDriveLetterCasing) {
        value = uri.path[1].toLowerCase() + uri.path.substr(2);
      } else {
        value = uri.path.substr(1);
      }
    } else {
      value = uri.path;
    }
    if (isWindows) {
      value = value.replace(/\//g, "\\");
    }
    return value;
  }
  function _asFormatted(uri, skipEncoding) {
    const encoder = !skipEncoding ? encodeURIComponentFast : encodeURIComponentMinimal;
    let res = "";
    let { scheme, authority, path, query, fragment } = uri;
    if (scheme) {
      res += scheme;
      res += ":";
    }
    if (authority || scheme === "file") {
      res += _slash;
      res += _slash;
    }
    if (authority) {
      let idx = authority.indexOf("@");
      if (idx !== -1) {
        const userinfo = authority.substr(0, idx);
        authority = authority.substr(idx + 1);
        idx = userinfo.lastIndexOf(":");
        if (idx === -1) {
          res += encoder(userinfo, false, false);
        } else {
          res += encoder(userinfo.substr(0, idx), false, false);
          res += ":";
          res += encoder(userinfo.substr(idx + 1), false, true);
        }
        res += "@";
      }
      authority = authority.toLowerCase();
      idx = authority.lastIndexOf(":");
      if (idx === -1) {
        res += encoder(authority, false, true);
      } else {
        res += encoder(authority.substr(0, idx), false, true);
        res += authority.substr(idx);
      }
    }
    if (path) {
      if (path.length >= 3 && path.charCodeAt(0) === 47 && path.charCodeAt(2) === 58) {
        const code = path.charCodeAt(1);
        if (code >= 65 && code <= 90) {
          path = `/${String.fromCharCode(code + 32)}:${path.substr(3)}`;
        }
      } else if (path.length >= 2 && path.charCodeAt(1) === 58) {
        const code = path.charCodeAt(0);
        if (code >= 65 && code <= 90) {
          path = `${String.fromCharCode(code + 32)}:${path.substr(2)}`;
        }
      }
      res += encoder(path, true, false);
    }
    if (query) {
      res += "?";
      res += encoder(query, false, false);
    }
    if (fragment) {
      res += "#";
      res += !skipEncoding ? encodeURIComponentFast(fragment, false, false) : fragment;
    }
    return res;
  }
  function decodeURIComponentGraceful(str) {
    try {
      return decodeURIComponent(str);
    } catch (_a4) {
      if (str.length > 3) {
        return str.substr(0, 3) + decodeURIComponentGraceful(str.substr(3));
      } else {
        return str;
      }
    }
  }
  var _rEncodedAsHex = /(%[0-9A-Za-z][0-9A-Za-z])+/g;
  function percentDecode(str) {
    if (!str.match(_rEncodedAsHex)) {
      return str;
    }
    return str.replace(_rEncodedAsHex, (match) => decodeURIComponentGraceful(match));
  }

  // node_modules/monaco-editor/esm/vs/editor/common/core/position.js
  var Position = class _Position {
    constructor(lineNumber, column) {
      this.lineNumber = lineNumber;
      this.column = column;
    }
    /**
     * Create a new position from this position.
     *
     * @param newLineNumber new line number
     * @param newColumn new column
     */
    with(newLineNumber = this.lineNumber, newColumn = this.column) {
      if (newLineNumber === this.lineNumber && newColumn === this.column) {
        return this;
      } else {
        return new _Position(newLineNumber, newColumn);
      }
    }
    /**
     * Derive a new position from this position.
     *
     * @param deltaLineNumber line number delta
     * @param deltaColumn column delta
     */
    delta(deltaLineNumber = 0, deltaColumn = 0) {
      return this.with(this.lineNumber + deltaLineNumber, this.column + deltaColumn);
    }
    /**
     * Test if this position equals other position
     */
    equals(other) {
      return _Position.equals(this, other);
    }
    /**
     * Test if position `a` equals position `b`
     */
    static equals(a2, b) {
      if (!a2 && !b) {
        return true;
      }
      return !!a2 && !!b && a2.lineNumber === b.lineNumber && a2.column === b.column;
    }
    /**
     * Test if this position is before other position.
     * If the two positions are equal, the result will be false.
     */
    isBefore(other) {
      return _Position.isBefore(this, other);
    }
    /**
     * Test if position `a` is before position `b`.
     * If the two positions are equal, the result will be false.
     */
    static isBefore(a2, b) {
      if (a2.lineNumber < b.lineNumber) {
        return true;
      }
      if (b.lineNumber < a2.lineNumber) {
        return false;
      }
      return a2.column < b.column;
    }
    /**
     * Test if this position is before other position.
     * If the two positions are equal, the result will be true.
     */
    isBeforeOrEqual(other) {
      return _Position.isBeforeOrEqual(this, other);
    }
    /**
     * Test if position `a` is before position `b`.
     * If the two positions are equal, the result will be true.
     */
    static isBeforeOrEqual(a2, b) {
      if (a2.lineNumber < b.lineNumber) {
        return true;
      }
      if (b.lineNumber < a2.lineNumber) {
        return false;
      }
      return a2.column <= b.column;
    }
    /**
     * A function that compares positions, useful for sorting
     */
    static compare(a2, b) {
      const aLineNumber = a2.lineNumber | 0;
      const bLineNumber = b.lineNumber | 0;
      if (aLineNumber === bLineNumber) {
        const aColumn = a2.column | 0;
        const bColumn = b.column | 0;
        return aColumn - bColumn;
      }
      return aLineNumber - bLineNumber;
    }
    /**
     * Clone this position.
     */
    clone() {
      return new _Position(this.lineNumber, this.column);
    }
    /**
     * Convert to a human-readable representation.
     */
    toString() {
      return "(" + this.lineNumber + "," + this.column + ")";
    }
    // ---
    /**
     * Create a `Position` from an `IPosition`.
     */
    static lift(pos) {
      return new _Position(pos.lineNumber, pos.column);
    }
    /**
     * Test if `obj` is an `IPosition`.
     */
    static isIPosition(obj) {
      return obj && typeof obj.lineNumber === "number" && typeof obj.column === "number";
    }
    toJSON() {
      return {
        lineNumber: this.lineNumber,
        column: this.column
      };
    }
  };

  // node_modules/monaco-editor/esm/vs/editor/common/core/range.js
  var Range = class _Range {
    constructor(startLineNumber, startColumn, endLineNumber, endColumn) {
      if (startLineNumber > endLineNumber || startLineNumber === endLineNumber && startColumn > endColumn) {
        this.startLineNumber = endLineNumber;
        this.startColumn = endColumn;
        this.endLineNumber = startLineNumber;
        this.endColumn = startColumn;
      } else {
        this.startLineNumber = startLineNumber;
        this.startColumn = startColumn;
        this.endLineNumber = endLineNumber;
        this.endColumn = endColumn;
      }
    }
    /**
     * Test if this range is empty.
     */
    isEmpty() {
      return _Range.isEmpty(this);
    }
    /**
     * Test if `range` is empty.
     */
    static isEmpty(range) {
      return range.startLineNumber === range.endLineNumber && range.startColumn === range.endColumn;
    }
    /**
     * Test if position is in this range. If the position is at the edges, will return true.
     */
    containsPosition(position) {
      return _Range.containsPosition(this, position);
    }
    /**
     * Test if `position` is in `range`. If the position is at the edges, will return true.
     */
    static containsPosition(range, position) {
      if (position.lineNumber < range.startLineNumber || position.lineNumber > range.endLineNumber) {
        return false;
      }
      if (position.lineNumber === range.startLineNumber && position.column < range.startColumn) {
        return false;
      }
      if (position.lineNumber === range.endLineNumber && position.column > range.endColumn) {
        return false;
      }
      return true;
    }
    /**
     * Test if `position` is in `range`. If the position is at the edges, will return false.
     * @internal
     */
    static strictContainsPosition(range, position) {
      if (position.lineNumber < range.startLineNumber || position.lineNumber > range.endLineNumber) {
        return false;
      }
      if (position.lineNumber === range.startLineNumber && position.column <= range.startColumn) {
        return false;
      }
      if (position.lineNumber === range.endLineNumber && position.column >= range.endColumn) {
        return false;
      }
      return true;
    }
    /**
     * Test if range is in this range. If the range is equal to this range, will return true.
     */
    containsRange(range) {
      return _Range.containsRange(this, range);
    }
    /**
     * Test if `otherRange` is in `range`. If the ranges are equal, will return true.
     */
    static containsRange(range, otherRange) {
      if (otherRange.startLineNumber < range.startLineNumber || otherRange.endLineNumber < range.startLineNumber) {
        return false;
      }
      if (otherRange.startLineNumber > range.endLineNumber || otherRange.endLineNumber > range.endLineNumber) {
        return false;
      }
      if (otherRange.startLineNumber === range.startLineNumber && otherRange.startColumn < range.startColumn) {
        return false;
      }
      if (otherRange.endLineNumber === range.endLineNumber && otherRange.endColumn > range.endColumn) {
        return false;
      }
      return true;
    }
    /**
     * Test if `range` is strictly in this range. `range` must start after and end before this range for the result to be true.
     */
    strictContainsRange(range) {
      return _Range.strictContainsRange(this, range);
    }
    /**
     * Test if `otherRange` is strictly in `range` (must start after, and end before). If the ranges are equal, will return false.
     */
    static strictContainsRange(range, otherRange) {
      if (otherRange.startLineNumber < range.startLineNumber || otherRange.endLineNumber < range.startLineNumber) {
        return false;
      }
      if (otherRange.startLineNumber > range.endLineNumber || otherRange.endLineNumber > range.endLineNumber) {
        return false;
      }
      if (otherRange.startLineNumber === range.startLineNumber && otherRange.startColumn <= range.startColumn) {
        return false;
      }
      if (otherRange.endLineNumber === range.endLineNumber && otherRange.endColumn >= range.endColumn) {
        return false;
      }
      return true;
    }
    /**
     * A reunion of the two ranges.
     * The smallest position will be used as the start point, and the largest one as the end point.
     */
    plusRange(range) {
      return _Range.plusRange(this, range);
    }
    /**
     * A reunion of the two ranges.
     * The smallest position will be used as the start point, and the largest one as the end point.
     */
    static plusRange(a2, b) {
      let startLineNumber;
      let startColumn;
      let endLineNumber;
      let endColumn;
      if (b.startLineNumber < a2.startLineNumber) {
        startLineNumber = b.startLineNumber;
        startColumn = b.startColumn;
      } else if (b.startLineNumber === a2.startLineNumber) {
        startLineNumber = b.startLineNumber;
        startColumn = Math.min(b.startColumn, a2.startColumn);
      } else {
        startLineNumber = a2.startLineNumber;
        startColumn = a2.startColumn;
      }
      if (b.endLineNumber > a2.endLineNumber) {
        endLineNumber = b.endLineNumber;
        endColumn = b.endColumn;
      } else if (b.endLineNumber === a2.endLineNumber) {
        endLineNumber = b.endLineNumber;
        endColumn = Math.max(b.endColumn, a2.endColumn);
      } else {
        endLineNumber = a2.endLineNumber;
        endColumn = a2.endColumn;
      }
      return new _Range(startLineNumber, startColumn, endLineNumber, endColumn);
    }
    /**
     * A intersection of the two ranges.
     */
    intersectRanges(range) {
      return _Range.intersectRanges(this, range);
    }
    /**
     * A intersection of the two ranges.
     */
    static intersectRanges(a2, b) {
      let resultStartLineNumber = a2.startLineNumber;
      let resultStartColumn = a2.startColumn;
      let resultEndLineNumber = a2.endLineNumber;
      let resultEndColumn = a2.endColumn;
      const otherStartLineNumber = b.startLineNumber;
      const otherStartColumn = b.startColumn;
      const otherEndLineNumber = b.endLineNumber;
      const otherEndColumn = b.endColumn;
      if (resultStartLineNumber < otherStartLineNumber) {
        resultStartLineNumber = otherStartLineNumber;
        resultStartColumn = otherStartColumn;
      } else if (resultStartLineNumber === otherStartLineNumber) {
        resultStartColumn = Math.max(resultStartColumn, otherStartColumn);
      }
      if (resultEndLineNumber > otherEndLineNumber) {
        resultEndLineNumber = otherEndLineNumber;
        resultEndColumn = otherEndColumn;
      } else if (resultEndLineNumber === otherEndLineNumber) {
        resultEndColumn = Math.min(resultEndColumn, otherEndColumn);
      }
      if (resultStartLineNumber > resultEndLineNumber) {
        return null;
      }
      if (resultStartLineNumber === resultEndLineNumber && resultStartColumn > resultEndColumn) {
        return null;
      }
      return new _Range(resultStartLineNumber, resultStartColumn, resultEndLineNumber, resultEndColumn);
    }
    /**
     * Test if this range equals other.
     */
    equalsRange(other) {
      return _Range.equalsRange(this, other);
    }
    /**
     * Test if range `a` equals `b`.
     */
    static equalsRange(a2, b) {
      if (!a2 && !b) {
        return true;
      }
      return !!a2 && !!b && a2.startLineNumber === b.startLineNumber && a2.startColumn === b.startColumn && a2.endLineNumber === b.endLineNumber && a2.endColumn === b.endColumn;
    }
    /**
     * Return the end position (which will be after or equal to the start position)
     */
    getEndPosition() {
      return _Range.getEndPosition(this);
    }
    /**
     * Return the end position (which will be after or equal to the start position)
     */
    static getEndPosition(range) {
      return new Position(range.endLineNumber, range.endColumn);
    }
    /**
     * Return the start position (which will be before or equal to the end position)
     */
    getStartPosition() {
      return _Range.getStartPosition(this);
    }
    /**
     * Return the start position (which will be before or equal to the end position)
     */
    static getStartPosition(range) {
      return new Position(range.startLineNumber, range.startColumn);
    }
    /**
     * Transform to a user presentable string representation.
     */
    toString() {
      return "[" + this.startLineNumber + "," + this.startColumn + " -> " + this.endLineNumber + "," + this.endColumn + "]";
    }
    /**
     * Create a new range using this range's start position, and using endLineNumber and endColumn as the end position.
     */
    setEndPosition(endLineNumber, endColumn) {
      return new _Range(this.startLineNumber, this.startColumn, endLineNumber, endColumn);
    }
    /**
     * Create a new range using this range's end position, and using startLineNumber and startColumn as the start position.
     */
    setStartPosition(startLineNumber, startColumn) {
      return new _Range(startLineNumber, startColumn, this.endLineNumber, this.endColumn);
    }
    /**
     * Create a new empty range using this range's start position.
     */
    collapseToStart() {
      return _Range.collapseToStart(this);
    }
    /**
     * Create a new empty range using this range's start position.
     */
    static collapseToStart(range) {
      return new _Range(range.startLineNumber, range.startColumn, range.startLineNumber, range.startColumn);
    }
    /**
     * Create a new empty range using this range's end position.
     */
    collapseToEnd() {
      return _Range.collapseToEnd(this);
    }
    /**
     * Create a new empty range using this range's end position.
     */
    static collapseToEnd(range) {
      return new _Range(range.endLineNumber, range.endColumn, range.endLineNumber, range.endColumn);
    }
    /**
     * Moves the range by the given amount of lines.
     */
    delta(lineCount) {
      return new _Range(this.startLineNumber + lineCount, this.startColumn, this.endLineNumber + lineCount, this.endColumn);
    }
    // ---
    static fromPositions(start, end = start) {
      return new _Range(start.lineNumber, start.column, end.lineNumber, end.column);
    }
    static lift(range) {
      if (!range) {
        return null;
      }
      return new _Range(range.startLineNumber, range.startColumn, range.endLineNumber, range.endColumn);
    }
    /**
     * Test if `obj` is an `IRange`.
     */
    static isIRange(obj) {
      return obj && typeof obj.startLineNumber === "number" && typeof obj.startColumn === "number" && typeof obj.endLineNumber === "number" && typeof obj.endColumn === "number";
    }
    /**
     * Test if the two ranges are touching in any way.
     */
    static areIntersectingOrTouching(a2, b) {
      if (a2.endLineNumber < b.startLineNumber || a2.endLineNumber === b.startLineNumber && a2.endColumn < b.startColumn) {
        return false;
      }
      if (b.endLineNumber < a2.startLineNumber || b.endLineNumber === a2.startLineNumber && b.endColumn < a2.startColumn) {
        return false;
      }
      return true;
    }
    /**
     * Test if the two ranges are intersecting. If the ranges are touching it returns true.
     */
    static areIntersecting(a2, b) {
      if (a2.endLineNumber < b.startLineNumber || a2.endLineNumber === b.startLineNumber && a2.endColumn <= b.startColumn) {
        return false;
      }
      if (b.endLineNumber < a2.startLineNumber || b.endLineNumber === a2.startLineNumber && b.endColumn <= a2.startColumn) {
        return false;
      }
      return true;
    }
    /**
     * A function that compares ranges, useful for sorting ranges
     * It will first compare ranges on the startPosition and then on the endPosition
     */
    static compareRangesUsingStarts(a2, b) {
      if (a2 && b) {
        const aStartLineNumber = a2.startLineNumber | 0;
        const bStartLineNumber = b.startLineNumber | 0;
        if (aStartLineNumber === bStartLineNumber) {
          const aStartColumn = a2.startColumn | 0;
          const bStartColumn = b.startColumn | 0;
          if (aStartColumn === bStartColumn) {
            const aEndLineNumber = a2.endLineNumber | 0;
            const bEndLineNumber = b.endLineNumber | 0;
            if (aEndLineNumber === bEndLineNumber) {
              const aEndColumn = a2.endColumn | 0;
              const bEndColumn = b.endColumn | 0;
              return aEndColumn - bEndColumn;
            }
            return aEndLineNumber - bEndLineNumber;
          }
          return aStartColumn - bStartColumn;
        }
        return aStartLineNumber - bStartLineNumber;
      }
      const aExists = a2 ? 1 : 0;
      const bExists = b ? 1 : 0;
      return aExists - bExists;
    }
    /**
     * A function that compares ranges, useful for sorting ranges
     * It will first compare ranges on the endPosition and then on the startPosition
     */
    static compareRangesUsingEnds(a2, b) {
      if (a2.endLineNumber === b.endLineNumber) {
        if (a2.endColumn === b.endColumn) {
          if (a2.startLineNumber === b.startLineNumber) {
            return a2.startColumn - b.startColumn;
          }
          return a2.startLineNumber - b.startLineNumber;
        }
        return a2.endColumn - b.endColumn;
      }
      return a2.endLineNumber - b.endLineNumber;
    }
    /**
     * Test if the range spans multiple lines.
     */
    static spansMultipleLines(range) {
      return range.endLineNumber > range.startLineNumber;
    }
    toJSON() {
      return this;
    }
  };

  // node_modules/monaco-editor/esm/vs/base/common/arrays.js
  function equals(one, other, itemEquals = (a2, b) => a2 === b) {
    if (one === other) {
      return true;
    }
    if (!one || !other) {
      return false;
    }
    if (one.length !== other.length) {
      return false;
    }
    for (let i = 0, len = one.length; i < len; i++) {
      if (!itemEquals(one[i], other[i])) {
        return false;
      }
    }
    return true;
  }
  function* groupAdjacentBy(items, shouldBeGrouped) {
    let currentGroup;
    let last;
    for (const item of items) {
      if (last !== void 0 && shouldBeGrouped(last, item)) {
        currentGroup.push(item);
      } else {
        if (currentGroup) {
          yield currentGroup;
        }
        currentGroup = [item];
      }
      last = item;
    }
    if (currentGroup) {
      yield currentGroup;
    }
  }
  function forEachAdjacent(arr, f2) {
    for (let i = 0; i <= arr.length; i++) {
      f2(i === 0 ? void 0 : arr[i - 1], i === arr.length ? void 0 : arr[i]);
    }
  }
  function forEachWithNeighbors(arr, f2) {
    for (let i = 0; i < arr.length; i++) {
      f2(i === 0 ? void 0 : arr[i - 1], arr[i], i + 1 === arr.length ? void 0 : arr[i + 1]);
    }
  }
  function pushMany(arr, items) {
    for (const item of items) {
      arr.push(item);
    }
  }
  var CompareResult;
  (function(CompareResult2) {
    function isLessThan(result) {
      return result < 0;
    }
    CompareResult2.isLessThan = isLessThan;
    function isLessThanOrEqual(result) {
      return result <= 0;
    }
    CompareResult2.isLessThanOrEqual = isLessThanOrEqual;
    function isGreaterThan(result) {
      return result > 0;
    }
    CompareResult2.isGreaterThan = isGreaterThan;
    function isNeitherLessOrGreaterThan(result) {
      return result === 0;
    }
    CompareResult2.isNeitherLessOrGreaterThan = isNeitherLessOrGreaterThan;
    CompareResult2.greaterThan = 1;
    CompareResult2.lessThan = -1;
    CompareResult2.neitherLessOrGreaterThan = 0;
  })(CompareResult || (CompareResult = {}));
  function compareBy(selector, comparator) {
    return (a2, b) => comparator(selector(a2), selector(b));
  }
  var numberComparator = (a2, b) => a2 - b;
  function reverseOrder(comparator) {
    return (a2, b) => -comparator(a2, b);
  }
  var CallbackIterable = class _CallbackIterable {
    constructor(iterate) {
      this.iterate = iterate;
    }
    toArray() {
      const result = [];
      this.iterate((item) => {
        result.push(item);
        return true;
      });
      return result;
    }
    filter(predicate) {
      return new _CallbackIterable((cb) => this.iterate((item) => predicate(item) ? cb(item) : true));
    }
    map(mapFn) {
      return new _CallbackIterable((cb) => this.iterate((item) => cb(mapFn(item))));
    }
    findLast(predicate) {
      let result;
      this.iterate((item) => {
        if (predicate(item)) {
          result = item;
        }
        return true;
      });
      return result;
    }
    findLastMaxBy(comparator) {
      let result;
      let first = true;
      this.iterate((item) => {
        if (first || CompareResult.isGreaterThan(comparator(item, result))) {
          first = false;
          result = item;
        }
        return true;
      });
      return result;
    }
  };
  CallbackIterable.empty = new CallbackIterable((_callback) => {
  });

  // node_modules/monaco-editor/esm/vs/base/common/uint.js
  function toUint8(v) {
    if (v < 0) {
      return 0;
    }
    if (v > 255) {
      return 255;
    }
    return v | 0;
  }
  function toUint32(v) {
    if (v < 0) {
      return 0;
    }
    if (v > 4294967295) {
      return 4294967295;
    }
    return v | 0;
  }

  // node_modules/monaco-editor/esm/vs/editor/common/model/prefixSumComputer.js
  var PrefixSumComputer = class {
    constructor(values) {
      this.values = values;
      this.prefixSum = new Uint32Array(values.length);
      this.prefixSumValidIndex = new Int32Array(1);
      this.prefixSumValidIndex[0] = -1;
    }
    insertValues(insertIndex, insertValues) {
      insertIndex = toUint32(insertIndex);
      const oldValues = this.values;
      const oldPrefixSum = this.prefixSum;
      const insertValuesLen = insertValues.length;
      if (insertValuesLen === 0) {
        return false;
      }
      this.values = new Uint32Array(oldValues.length + insertValuesLen);
      this.values.set(oldValues.subarray(0, insertIndex), 0);
      this.values.set(oldValues.subarray(insertIndex), insertIndex + insertValuesLen);
      this.values.set(insertValues, insertIndex);
      if (insertIndex - 1 < this.prefixSumValidIndex[0]) {
        this.prefixSumValidIndex[0] = insertIndex - 1;
      }
      this.prefixSum = new Uint32Array(this.values.length);
      if (this.prefixSumValidIndex[0] >= 0) {
        this.prefixSum.set(oldPrefixSum.subarray(0, this.prefixSumValidIndex[0] + 1));
      }
      return true;
    }
    setValue(index, value) {
      index = toUint32(index);
      value = toUint32(value);
      if (this.values[index] === value) {
        return false;
      }
      this.values[index] = value;
      if (index - 1 < this.prefixSumValidIndex[0]) {
        this.prefixSumValidIndex[0] = index - 1;
      }
      return true;
    }
    removeValues(startIndex, count) {
      startIndex = toUint32(startIndex);
      count = toUint32(count);
      const oldValues = this.values;
      const oldPrefixSum = this.prefixSum;
      if (startIndex >= oldValues.length) {
        return false;
      }
      const maxCount = oldValues.length - startIndex;
      if (count >= maxCount) {
        count = maxCount;
      }
      if (count === 0) {
        return false;
      }
      this.values = new Uint32Array(oldValues.length - count);
      this.values.set(oldValues.subarray(0, startIndex), 0);
      this.values.set(oldValues.subarray(startIndex + count), startIndex);
      this.prefixSum = new Uint32Array(this.values.length);
      if (startIndex - 1 < this.prefixSumValidIndex[0]) {
        this.prefixSumValidIndex[0] = startIndex - 1;
      }
      if (this.prefixSumValidIndex[0] >= 0) {
        this.prefixSum.set(oldPrefixSum.subarray(0, this.prefixSumValidIndex[0] + 1));
      }
      return true;
    }
    getTotalSum() {
      if (this.values.length === 0) {
        return 0;
      }
      return this._getPrefixSum(this.values.length - 1);
    }
    /**
     * Returns the sum of the first `index + 1` many items.
     * @returns `SUM(0 <= j <= index, values[j])`.
     */
    getPrefixSum(index) {
      if (index < 0) {
        return 0;
      }
      index = toUint32(index);
      return this._getPrefixSum(index);
    }
    _getPrefixSum(index) {
      if (index <= this.prefixSumValidIndex[0]) {
        return this.prefixSum[index];
      }
      let startIndex = this.prefixSumValidIndex[0] + 1;
      if (startIndex === 0) {
        this.prefixSum[0] = this.values[0];
        startIndex++;
      }
      if (index >= this.values.length) {
        index = this.values.length - 1;
      }
      for (let i = startIndex; i <= index; i++) {
        this.prefixSum[i] = this.prefixSum[i - 1] + this.values[i];
      }
      this.prefixSumValidIndex[0] = Math.max(this.prefixSumValidIndex[0], index);
      return this.prefixSum[index];
    }
    getIndexOf(sum) {
      sum = Math.floor(sum);
      this.getTotalSum();
      let low = 0;
      let high = this.values.length - 1;
      let mid = 0;
      let midStop = 0;
      let midStart = 0;
      while (low <= high) {
        mid = low + (high - low) / 2 | 0;
        midStop = this.prefixSum[mid];
        midStart = midStop - this.values[mid];
        if (sum < midStart) {
          high = mid - 1;
        } else if (sum >= midStop) {
          low = mid + 1;
        } else {
          break;
        }
      }
      return new PrefixSumIndexOfResult(mid, sum - midStart);
    }
  };
  var PrefixSumIndexOfResult = class {
    constructor(index, remainder) {
      this.index = index;
      this.remainder = remainder;
      this._prefixSumIndexOfResultBrand = void 0;
      this.index = index;
      this.remainder = remainder;
    }
  };

  // node_modules/monaco-editor/esm/vs/editor/common/model/mirrorTextModel.js
  var MirrorTextModel = class {
    constructor(uri, lines, eol, versionId) {
      this._uri = uri;
      this._lines = lines;
      this._eol = eol;
      this._versionId = versionId;
      this._lineStarts = null;
      this._cachedTextValue = null;
    }
    dispose() {
      this._lines.length = 0;
    }
    get version() {
      return this._versionId;
    }
    getText() {
      if (this._cachedTextValue === null) {
        this._cachedTextValue = this._lines.join(this._eol);
      }
      return this._cachedTextValue;
    }
    onEvents(e) {
      if (e.eol && e.eol !== this._eol) {
        this._eol = e.eol;
        this._lineStarts = null;
      }
      const changes = e.changes;
      for (const change of changes) {
        this._acceptDeleteRange(change.range);
        this._acceptInsertText(new Position(change.range.startLineNumber, change.range.startColumn), change.text);
      }
      this._versionId = e.versionId;
      this._cachedTextValue = null;
    }
    _ensureLineStarts() {
      if (!this._lineStarts) {
        const eolLength = this._eol.length;
        const linesLength = this._lines.length;
        const lineStartValues = new Uint32Array(linesLength);
        for (let i = 0; i < linesLength; i++) {
          lineStartValues[i] = this._lines[i].length + eolLength;
        }
        this._lineStarts = new PrefixSumComputer(lineStartValues);
      }
    }
    /**
     * All changes to a line's text go through this method
     */
    _setLineText(lineIndex, newValue) {
      this._lines[lineIndex] = newValue;
      if (this._lineStarts) {
        this._lineStarts.setValue(lineIndex, this._lines[lineIndex].length + this._eol.length);
      }
    }
    _acceptDeleteRange(range) {
      if (range.startLineNumber === range.endLineNumber) {
        if (range.startColumn === range.endColumn) {
          return;
        }
        this._setLineText(range.startLineNumber - 1, this._lines[range.startLineNumber - 1].substring(0, range.startColumn - 1) + this._lines[range.startLineNumber - 1].substring(range.endColumn - 1));
        return;
      }
      this._setLineText(range.startLineNumber - 1, this._lines[range.startLineNumber - 1].substring(0, range.startColumn - 1) + this._lines[range.endLineNumber - 1].substring(range.endColumn - 1));
      this._lines.splice(range.startLineNumber, range.endLineNumber - range.startLineNumber);
      if (this._lineStarts) {
        this._lineStarts.removeValues(range.startLineNumber, range.endLineNumber - range.startLineNumber);
      }
    }
    _acceptInsertText(position, insertText) {
      if (insertText.length === 0) {
        return;
      }
      const insertLines = splitLines(insertText);
      if (insertLines.length === 1) {
        this._setLineText(position.lineNumber - 1, this._lines[position.lineNumber - 1].substring(0, position.column - 1) + insertLines[0] + this._lines[position.lineNumber - 1].substring(position.column - 1));
        return;
      }
      insertLines[insertLines.length - 1] += this._lines[position.lineNumber - 1].substring(position.column - 1);
      this._setLineText(position.lineNumber - 1, this._lines[position.lineNumber - 1].substring(0, position.column - 1) + insertLines[0]);
      const newLengths = new Uint32Array(insertLines.length - 1);
      for (let i = 1; i < insertLines.length; i++) {
        this._lines.splice(position.lineNumber + i - 1, 0, insertLines[i]);
        newLengths[i - 1] = insertLines[i].length + this._eol.length;
      }
      if (this._lineStarts) {
        this._lineStarts.insertValues(position.lineNumber, newLengths);
      }
    }
  };

  // node_modules/monaco-editor/esm/vs/editor/common/core/wordHelper.js
  var USUAL_WORD_SEPARATORS = "`~!@#$%^&*()-=+[{]}\\|;:'\",.<>/?";
  function createWordRegExp(allowInWords = "") {
    let source = "(-?\\d*\\.\\d\\w*)|([^";
    for (const sep2 of USUAL_WORD_SEPARATORS) {
      if (allowInWords.indexOf(sep2) >= 0) {
        continue;
      }
      source += "\\" + sep2;
    }
    source += "\\s]+)";
    return new RegExp(source, "g");
  }
  var DEFAULT_WORD_REGEXP = createWordRegExp();
  function ensureValidWordDefinition(wordDefinition) {
    let result = DEFAULT_WORD_REGEXP;
    if (wordDefinition && wordDefinition instanceof RegExp) {
      if (!wordDefinition.global) {
        let flags = "g";
        if (wordDefinition.ignoreCase) {
          flags += "i";
        }
        if (wordDefinition.multiline) {
          flags += "m";
        }
        if (wordDefinition.unicode) {
          flags += "u";
        }
        result = new RegExp(wordDefinition.source, flags);
      } else {
        result = wordDefinition;
      }
    }
    result.lastIndex = 0;
    return result;
  }
  var _defaultConfig = new LinkedList();
  _defaultConfig.unshift({
    maxLen: 1e3,
    windowSize: 15,
    timeBudget: 150
  });
  function getWordAtText(column, wordDefinition, text, textOffset, config) {
    wordDefinition = ensureValidWordDefinition(wordDefinition);
    if (!config) {
      config = Iterable.first(_defaultConfig);
    }
    if (text.length > config.maxLen) {
      let start = column - config.maxLen / 2;
      if (start < 0) {
        start = 0;
      } else {
        textOffset += start;
      }
      text = text.substring(start, column + config.maxLen / 2);
      return getWordAtText(column, wordDefinition, text, textOffset, config);
    }
    const t1 = Date.now();
    const pos = column - 1 - textOffset;
    let prevRegexIndex = -1;
    let match = null;
    for (let i = 1; ; i++) {
      if (Date.now() - t1 >= config.timeBudget) {
        break;
      }
      const regexIndex = pos - config.windowSize * i;
      wordDefinition.lastIndex = Math.max(0, regexIndex);
      const thisMatch = _findRegexMatchEnclosingPosition(wordDefinition, text, pos, prevRegexIndex);
      if (!thisMatch && match) {
        break;
      }
      match = thisMatch;
      if (regexIndex <= 0) {
        break;
      }
      prevRegexIndex = regexIndex;
    }
    if (match) {
      const result = {
        word: match[0],
        startColumn: textOffset + 1 + match.index,
        endColumn: textOffset + 1 + match.index + match[0].length
      };
      wordDefinition.lastIndex = 0;
      return result;
    }
    return null;
  }
  function _findRegexMatchEnclosingPosition(wordDefinition, text, pos, stopPos) {
    let match;
    while (match = wordDefinition.exec(text)) {
      const matchIndex = match.index || 0;
      if (matchIndex <= pos && wordDefinition.lastIndex >= pos) {
        return match;
      } else if (stopPos > 0 && matchIndex > stopPos) {
        return null;
      }
    }
    return null;
  }

  // node_modules/monaco-editor/esm/vs/editor/common/core/characterClassifier.js
  var CharacterClassifier = class _CharacterClassifier {
    constructor(_defaultValue) {
      const defaultValue = toUint8(_defaultValue);
      this._defaultValue = defaultValue;
      this._asciiMap = _CharacterClassifier._createAsciiMap(defaultValue);
      this._map = /* @__PURE__ */ new Map();
    }
    static _createAsciiMap(defaultValue) {
      const asciiMap = new Uint8Array(256);
      asciiMap.fill(defaultValue);
      return asciiMap;
    }
    set(charCode, _value) {
      const value = toUint8(_value);
      if (charCode >= 0 && charCode < 256) {
        this._asciiMap[charCode] = value;
      } else {
        this._map.set(charCode, value);
      }
    }
    get(charCode) {
      if (charCode >= 0 && charCode < 256) {
        return this._asciiMap[charCode];
      } else {
        return this._map.get(charCode) || this._defaultValue;
      }
    }
    clear() {
      this._asciiMap.fill(this._defaultValue);
      this._map.clear();
    }
  };

  // node_modules/monaco-editor/esm/vs/editor/common/languages/linkComputer.js
  var Uint8Matrix = class {
    constructor(rows, cols, defaultValue) {
      const data = new Uint8Array(rows * cols);
      for (let i = 0, len = rows * cols; i < len; i++) {
        data[i] = defaultValue;
      }
      this._data = data;
      this.rows = rows;
      this.cols = cols;
    }
    get(row, col) {
      return this._data[row * this.cols + col];
    }
    set(row, col, value) {
      this._data[row * this.cols + col] = value;
    }
  };
  var StateMachine = class {
    constructor(edges) {
      let maxCharCode = 0;
      let maxState = 0;
      for (let i = 0, len = edges.length; i < len; i++) {
        const [from, chCode, to] = edges[i];
        if (chCode > maxCharCode) {
          maxCharCode = chCode;
        }
        if (from > maxState) {
          maxState = from;
        }
        if (to > maxState) {
          maxState = to;
        }
      }
      maxCharCode++;
      maxState++;
      const states = new Uint8Matrix(
        maxState,
        maxCharCode,
        0
        /* State.Invalid */
      );
      for (let i = 0, len = edges.length; i < len; i++) {
        const [from, chCode, to] = edges[i];
        states.set(from, chCode, to);
      }
      this._states = states;
      this._maxCharCode = maxCharCode;
    }
    nextState(currentState, chCode) {
      if (chCode < 0 || chCode >= this._maxCharCode) {
        return 0;
      }
      return this._states.get(currentState, chCode);
    }
  };
  var _stateMachine = null;
  function getStateMachine() {
    if (_stateMachine === null) {
      _stateMachine = new StateMachine([
        [
          1,
          104,
          2
          /* State.H */
        ],
        [
          1,
          72,
          2
          /* State.H */
        ],
        [
          1,
          102,
          6
          /* State.F */
        ],
        [
          1,
          70,
          6
          /* State.F */
        ],
        [
          2,
          116,
          3
          /* State.HT */
        ],
        [
          2,
          84,
          3
          /* State.HT */
        ],
        [
          3,
          116,
          4
          /* State.HTT */
        ],
        [
          3,
          84,
          4
          /* State.HTT */
        ],
        [
          4,
          112,
          5
          /* State.HTTP */
        ],
        [
          4,
          80,
          5
          /* State.HTTP */
        ],
        [
          5,
          115,
          9
          /* State.BeforeColon */
        ],
        [
          5,
          83,
          9
          /* State.BeforeColon */
        ],
        [
          5,
          58,
          10
          /* State.AfterColon */
        ],
        [
          6,
          105,
          7
          /* State.FI */
        ],
        [
          6,
          73,
          7
          /* State.FI */
        ],
        [
          7,
          108,
          8
          /* State.FIL */
        ],
        [
          7,
          76,
          8
          /* State.FIL */
        ],
        [
          8,
          101,
          9
          /* State.BeforeColon */
        ],
        [
          8,
          69,
          9
          /* State.BeforeColon */
        ],
        [
          9,
          58,
          10
          /* State.AfterColon */
        ],
        [
          10,
          47,
          11
          /* State.AlmostThere */
        ],
        [
          11,
          47,
          12
          /* State.End */
        ]
      ]);
    }
    return _stateMachine;
  }
  var _classifier = null;
  function getClassifier() {
    if (_classifier === null) {
      _classifier = new CharacterClassifier(
        0
        /* CharacterClass.None */
      );
      const FORCE_TERMINATION_CHARACTERS = ` 	<>'"\u3001\u3002\uFF61\uFF64\uFF0C\uFF0E\uFF1A\uFF1B\u2018\u3008\u300C\u300E\u3014\uFF08\uFF3B\uFF5B\uFF62\uFF63\uFF5D\uFF3D\uFF09\u3015\u300F\u300D\u3009\u2019\uFF40\uFF5E\u2026`;
      for (let i = 0; i < FORCE_TERMINATION_CHARACTERS.length; i++) {
        _classifier.set(
          FORCE_TERMINATION_CHARACTERS.charCodeAt(i),
          1
          /* CharacterClass.ForceTermination */
        );
      }
      const CANNOT_END_WITH_CHARACTERS = ".,;:";
      for (let i = 0; i < CANNOT_END_WITH_CHARACTERS.length; i++) {
        _classifier.set(
          CANNOT_END_WITH_CHARACTERS.charCodeAt(i),
          2
          /* CharacterClass.CannotEndIn */
        );
      }
    }
    return _classifier;
  }
  var LinkComputer = class _LinkComputer {
    static _createLink(classifier, line, lineNumber, linkBeginIndex, linkEndIndex) {
      let lastIncludedCharIndex = linkEndIndex - 1;
      do {
        const chCode = line.charCodeAt(lastIncludedCharIndex);
        const chClass = classifier.get(chCode);
        if (chClass !== 2) {
          break;
        }
        lastIncludedCharIndex--;
      } while (lastIncludedCharIndex > linkBeginIndex);
      if (linkBeginIndex > 0) {
        const charCodeBeforeLink = line.charCodeAt(linkBeginIndex - 1);
        const lastCharCodeInLink = line.charCodeAt(lastIncludedCharIndex);
        if (charCodeBeforeLink === 40 && lastCharCodeInLink === 41 || charCodeBeforeLink === 91 && lastCharCodeInLink === 93 || charCodeBeforeLink === 123 && lastCharCodeInLink === 125) {
          lastIncludedCharIndex--;
        }
      }
      return {
        range: {
          startLineNumber: lineNumber,
          startColumn: linkBeginIndex + 1,
          endLineNumber: lineNumber,
          endColumn: lastIncludedCharIndex + 2
        },
        url: line.substring(linkBeginIndex, lastIncludedCharIndex + 1)
      };
    }
    static computeLinks(model, stateMachine = getStateMachine()) {
      const classifier = getClassifier();
      const result = [];
      for (let i = 1, lineCount = model.getLineCount(); i <= lineCount; i++) {
        const line = model.getLineContent(i);
        const len = line.length;
        let j = 0;
        let linkBeginIndex = 0;
        let linkBeginChCode = 0;
        let state = 1;
        let hasOpenParens = false;
        let hasOpenSquareBracket = false;
        let inSquareBrackets = false;
        let hasOpenCurlyBracket = false;
        while (j < len) {
          let resetStateMachine = false;
          const chCode = line.charCodeAt(j);
          if (state === 13) {
            let chClass;
            switch (chCode) {
              case 40:
                hasOpenParens = true;
                chClass = 0;
                break;
              case 41:
                chClass = hasOpenParens ? 0 : 1;
                break;
              case 91:
                inSquareBrackets = true;
                hasOpenSquareBracket = true;
                chClass = 0;
                break;
              case 93:
                inSquareBrackets = false;
                chClass = hasOpenSquareBracket ? 0 : 1;
                break;
              case 123:
                hasOpenCurlyBracket = true;
                chClass = 0;
                break;
              case 125:
                chClass = hasOpenCurlyBracket ? 0 : 1;
                break;
              case 39:
              case 34:
              case 96:
                if (linkBeginChCode === chCode) {
                  chClass = 1;
                } else if (linkBeginChCode === 39 || linkBeginChCode === 34 || linkBeginChCode === 96) {
                  chClass = 0;
                } else {
                  chClass = 1;
                }
                break;
              case 42:
                chClass = linkBeginChCode === 42 ? 1 : 0;
                break;
              case 124:
                chClass = linkBeginChCode === 124 ? 1 : 0;
                break;
              case 32:
                chClass = inSquareBrackets ? 0 : 1;
                break;
              default:
                chClass = classifier.get(chCode);
            }
            if (chClass === 1) {
              result.push(_LinkComputer._createLink(classifier, line, i, linkBeginIndex, j));
              resetStateMachine = true;
            }
          } else if (state === 12) {
            let chClass;
            if (chCode === 91) {
              hasOpenSquareBracket = true;
              chClass = 0;
            } else {
              chClass = classifier.get(chCode);
            }
            if (chClass === 1) {
              resetStateMachine = true;
            } else {
              state = 13;
            }
          } else {
            state = stateMachine.nextState(state, chCode);
            if (state === 0) {
              resetStateMachine = true;
            }
          }
          if (resetStateMachine) {
            state = 1;
            hasOpenParens = false;
            hasOpenSquareBracket = false;
            hasOpenCurlyBracket = false;
            linkBeginIndex = j + 1;
            linkBeginChCode = chCode;
          }
          j++;
        }
        if (state === 13) {
          result.push(_LinkComputer._createLink(classifier, line, i, linkBeginIndex, len));
        }
      }
      return result;
    }
  };
  function computeLinks(model) {
    if (!model || typeof model.getLineCount !== "function" || typeof model.getLineContent !== "function") {
      return [];
    }
    return LinkComputer.computeLinks(model);
  }

  // node_modules/monaco-editor/esm/vs/editor/common/languages/supports/inplaceReplaceSupport.js
  var BasicInplaceReplace = class {
    constructor() {
      this._defaultValueSet = [
        ["true", "false"],
        ["True", "False"],
        ["Private", "Public", "Friend", "ReadOnly", "Partial", "Protected", "WriteOnly"],
        ["public", "protected", "private"]
      ];
    }
    navigateValueSet(range1, text1, range2, text2, up) {
      if (range1 && text1) {
        const result = this.doNavigateValueSet(text1, up);
        if (result) {
          return {
            range: range1,
            value: result
          };
        }
      }
      if (range2 && text2) {
        const result = this.doNavigateValueSet(text2, up);
        if (result) {
          return {
            range: range2,
            value: result
          };
        }
      }
      return null;
    }
    doNavigateValueSet(text, up) {
      const numberResult = this.numberReplace(text, up);
      if (numberResult !== null) {
        return numberResult;
      }
      return this.textReplace(text, up);
    }
    numberReplace(value, up) {
      const precision = Math.pow(10, value.length - (value.lastIndexOf(".") + 1));
      let n1 = Number(value);
      const n2 = parseFloat(value);
      if (!isNaN(n1) && !isNaN(n2) && n1 === n2) {
        if (n1 === 0 && !up) {
          return null;
        } else {
          n1 = Math.floor(n1 * precision);
          n1 += up ? precision : -precision;
          return String(n1 / precision);
        }
      }
      return null;
    }
    textReplace(value, up) {
      return this.valueSetsReplace(this._defaultValueSet, value, up);
    }
    valueSetsReplace(valueSets, value, up) {
      let result = null;
      for (let i = 0, len = valueSets.length; result === null && i < len; i++) {
        result = this.valueSetReplace(valueSets[i], value, up);
      }
      return result;
    }
    valueSetReplace(valueSet, value, up) {
      let idx = valueSet.indexOf(value);
      if (idx >= 0) {
        idx += up ? 1 : -1;
        if (idx < 0) {
          idx = valueSet.length - 1;
        } else {
          idx %= valueSet.length;
        }
        return valueSet[idx];
      }
      return null;
    }
  };
  BasicInplaceReplace.INSTANCE = new BasicInplaceReplace();

  // node_modules/monaco-editor/esm/vs/base/common/cancellation.js
  var shortcutEvent = Object.freeze(function(callback, context) {
    const handle = setTimeout(callback.bind(context), 0);
    return { dispose() {
      clearTimeout(handle);
    } };
  });
  var CancellationToken;
  (function(CancellationToken2) {
    function isCancellationToken(thing) {
      if (thing === CancellationToken2.None || thing === CancellationToken2.Cancelled) {
        return true;
      }
      if (thing instanceof MutableToken) {
        return true;
      }
      if (!thing || typeof thing !== "object") {
        return false;
      }
      return typeof thing.isCancellationRequested === "boolean" && typeof thing.onCancellationRequested === "function";
    }
    CancellationToken2.isCancellationToken = isCancellationToken;
    CancellationToken2.None = Object.freeze({
      isCancellationRequested: false,
      onCancellationRequested: Event.None
    });
    CancellationToken2.Cancelled = Object.freeze({
      isCancellationRequested: true,
      onCancellationRequested: shortcutEvent
    });
  })(CancellationToken || (CancellationToken = {}));
  var MutableToken = class {
    constructor() {
      this._isCancelled = false;
      this._emitter = null;
    }
    cancel() {
      if (!this._isCancelled) {
        this._isCancelled = true;
        if (this._emitter) {
          this._emitter.fire(void 0);
          this.dispose();
        }
      }
    }
    get isCancellationRequested() {
      return this._isCancelled;
    }
    get onCancellationRequested() {
      if (this._isCancelled) {
        return shortcutEvent;
      }
      if (!this._emitter) {
        this._emitter = new Emitter();
      }
      return this._emitter.event;
    }
    dispose() {
      if (this._emitter) {
        this._emitter.dispose();
        this._emitter = null;
      }
    }
  };
  var CancellationTokenSource = class {
    constructor(parent) {
      this._token = void 0;
      this._parentListener = void 0;
      this._parentListener = parent && parent.onCancellationRequested(this.cancel, this);
    }
    get token() {
      if (!this._token) {
        this._token = new MutableToken();
      }
      return this._token;
    }
    cancel() {
      if (!this._token) {
        this._token = CancellationToken.Cancelled;
      } else if (this._token instanceof MutableToken) {
        this._token.cancel();
      }
    }
    dispose(cancel = false) {
      var _a4;
      if (cancel) {
        this.cancel();
      }
      (_a4 = this._parentListener) === null || _a4 === void 0 ? void 0 : _a4.dispose();
      if (!this._token) {
        this._token = CancellationToken.None;
      } else if (this._token instanceof MutableToken) {
        this._token.dispose();
      }
    }
  };

  // node_modules/monaco-editor/esm/vs/base/common/keyCodes.js
  var KeyCodeStrMap = class {
    constructor() {
      this._keyCodeToStr = [];
      this._strToKeyCode = /* @__PURE__ */ Object.create(null);
    }
    define(keyCode, str) {
      this._keyCodeToStr[keyCode] = str;
      this._strToKeyCode[str.toLowerCase()] = keyCode;
    }
    keyCodeToStr(keyCode) {
      return this._keyCodeToStr[keyCode];
    }
    strToKeyCode(str) {
      return this._strToKeyCode[str.toLowerCase()] || 0;
    }
  };
  var uiMap = new KeyCodeStrMap();
  var userSettingsUSMap = new KeyCodeStrMap();
  var userSettingsGeneralMap = new KeyCodeStrMap();
  var EVENT_KEY_CODE_MAP = new Array(230);
  var NATIVE_WINDOWS_KEY_CODE_TO_KEY_CODE = {};
  var scanCodeIntToStr = [];
  var scanCodeStrToInt = /* @__PURE__ */ Object.create(null);
  var scanCodeLowerCaseStrToInt = /* @__PURE__ */ Object.create(null);
  var IMMUTABLE_CODE_TO_KEY_CODE = [];
  var IMMUTABLE_KEY_CODE_TO_CODE = [];
  for (let i = 0; i <= 193; i++) {
    IMMUTABLE_CODE_TO_KEY_CODE[i] = -1;
  }
  for (let i = 0; i <= 132; i++) {
    IMMUTABLE_KEY_CODE_TO_CODE[i] = -1;
  }
  (function() {
    const empty = "";
    const mappings = [
      // immutable, scanCode, scanCodeStr, keyCode, keyCodeStr, eventKeyCode, vkey, usUserSettingsLabel, generalUserSettingsLabel
      [1, 0, "None", 0, "unknown", 0, "VK_UNKNOWN", empty, empty],
      [1, 1, "Hyper", 0, empty, 0, empty, empty, empty],
      [1, 2, "Super", 0, empty, 0, empty, empty, empty],
      [1, 3, "Fn", 0, empty, 0, empty, empty, empty],
      [1, 4, "FnLock", 0, empty, 0, empty, empty, empty],
      [1, 5, "Suspend", 0, empty, 0, empty, empty, empty],
      [1, 6, "Resume", 0, empty, 0, empty, empty, empty],
      [1, 7, "Turbo", 0, empty, 0, empty, empty, empty],
      [1, 8, "Sleep", 0, empty, 0, "VK_SLEEP", empty, empty],
      [1, 9, "WakeUp", 0, empty, 0, empty, empty, empty],
      [0, 10, "KeyA", 31, "A", 65, "VK_A", empty, empty],
      [0, 11, "KeyB", 32, "B", 66, "VK_B", empty, empty],
      [0, 12, "KeyC", 33, "C", 67, "VK_C", empty, empty],
      [0, 13, "KeyD", 34, "D", 68, "VK_D", empty, empty],
      [0, 14, "KeyE", 35, "E", 69, "VK_E", empty, empty],
      [0, 15, "KeyF", 36, "F", 70, "VK_F", empty, empty],
      [0, 16, "KeyG", 37, "G", 71, "VK_G", empty, empty],
      [0, 17, "KeyH", 38, "H", 72, "VK_H", empty, empty],
      [0, 18, "KeyI", 39, "I", 73, "VK_I", empty, empty],
      [0, 19, "KeyJ", 40, "J", 74, "VK_J", empty, empty],
      [0, 20, "KeyK", 41, "K", 75, "VK_K", empty, empty],
      [0, 21, "KeyL", 42, "L", 76, "VK_L", empty, empty],
      [0, 22, "KeyM", 43, "M", 77, "VK_M", empty, empty],
      [0, 23, "KeyN", 44, "N", 78, "VK_N", empty, empty],
      [0, 24, "KeyO", 45, "O", 79, "VK_O", empty, empty],
      [0, 25, "KeyP", 46, "P", 80, "VK_P", empty, empty],
      [0, 26, "KeyQ", 47, "Q", 81, "VK_Q", empty, empty],
      [0, 27, "KeyR", 48, "R", 82, "VK_R", empty, empty],
      [0, 28, "KeyS", 49, "S", 83, "VK_S", empty, empty],
      [0, 29, "KeyT", 50, "T", 84, "VK_T", empty, empty],
      [0, 30, "KeyU", 51, "U", 85, "VK_U", empty, empty],
      [0, 31, "KeyV", 52, "V", 86, "VK_V", empty, empty],
      [0, 32, "KeyW", 53, "W", 87, "VK_W", empty, empty],
      [0, 33, "KeyX", 54, "X", 88, "VK_X", empty, empty],
      [0, 34, "KeyY", 55, "Y", 89, "VK_Y", empty, empty],
      [0, 35, "KeyZ", 56, "Z", 90, "VK_Z", empty, empty],
      [0, 36, "Digit1", 22, "1", 49, "VK_1", empty, empty],
      [0, 37, "Digit2", 23, "2", 50, "VK_2", empty, empty],
      [0, 38, "Digit3", 24, "3", 51, "VK_3", empty, empty],
      [0, 39, "Digit4", 25, "4", 52, "VK_4", empty, empty],
      [0, 40, "Digit5", 26, "5", 53, "VK_5", empty, empty],
      [0, 41, "Digit6", 27, "6", 54, "VK_6", empty, empty],
      [0, 42, "Digit7", 28, "7", 55, "VK_7", empty, empty],
      [0, 43, "Digit8", 29, "8", 56, "VK_8", empty, empty],
      [0, 44, "Digit9", 30, "9", 57, "VK_9", empty, empty],
      [0, 45, "Digit0", 21, "0", 48, "VK_0", empty, empty],
      [1, 46, "Enter", 3, "Enter", 13, "VK_RETURN", empty, empty],
      [1, 47, "Escape", 9, "Escape", 27, "VK_ESCAPE", empty, empty],
      [1, 48, "Backspace", 1, "Backspace", 8, "VK_BACK", empty, empty],
      [1, 49, "Tab", 2, "Tab", 9, "VK_TAB", empty, empty],
      [1, 50, "Space", 10, "Space", 32, "VK_SPACE", empty, empty],
      [0, 51, "Minus", 88, "-", 189, "VK_OEM_MINUS", "-", "OEM_MINUS"],
      [0, 52, "Equal", 86, "=", 187, "VK_OEM_PLUS", "=", "OEM_PLUS"],
      [0, 53, "BracketLeft", 92, "[", 219, "VK_OEM_4", "[", "OEM_4"],
      [0, 54, "BracketRight", 94, "]", 221, "VK_OEM_6", "]", "OEM_6"],
      [0, 55, "Backslash", 93, "\\", 220, "VK_OEM_5", "\\", "OEM_5"],
      [0, 56, "IntlHash", 0, empty, 0, empty, empty, empty],
      // has been dropped from the w3c spec
      [0, 57, "Semicolon", 85, ";", 186, "VK_OEM_1", ";", "OEM_1"],
      [0, 58, "Quote", 95, "'", 222, "VK_OEM_7", "'", "OEM_7"],
      [0, 59, "Backquote", 91, "`", 192, "VK_OEM_3", "`", "OEM_3"],
      [0, 60, "Comma", 87, ",", 188, "VK_OEM_COMMA", ",", "OEM_COMMA"],
      [0, 61, "Period", 89, ".", 190, "VK_OEM_PERIOD", ".", "OEM_PERIOD"],
      [0, 62, "Slash", 90, "/", 191, "VK_OEM_2", "/", "OEM_2"],
      [1, 63, "CapsLock", 8, "CapsLock", 20, "VK_CAPITAL", empty, empty],
      [1, 64, "F1", 59, "F1", 112, "VK_F1", empty, empty],
      [1, 65, "F2", 60, "F2", 113, "VK_F2", empty, empty],
      [1, 66, "F3", 61, "F3", 114, "VK_F3", empty, empty],
      [1, 67, "F4", 62, "F4", 115, "VK_F4", empty, empty],
      [1, 68, "F5", 63, "F5", 116, "VK_F5", empty, empty],
      [1, 69, "F6", 64, "F6", 117, "VK_F6", empty, empty],
      [1, 70, "F7", 65, "F7", 118, "VK_F7", empty, empty],
      [1, 71, "F8", 66, "F8", 119, "VK_F8", empty, empty],
      [1, 72, "F9", 67, "F9", 120, "VK_F9", empty, empty],
      [1, 73, "F10", 68, "F10", 121, "VK_F10", empty, empty],
      [1, 74, "F11", 69, "F11", 122, "VK_F11", empty, empty],
      [1, 75, "F12", 70, "F12", 123, "VK_F12", empty, empty],
      [1, 76, "PrintScreen", 0, empty, 0, empty, empty, empty],
      [1, 77, "ScrollLock", 84, "ScrollLock", 145, "VK_SCROLL", empty, empty],
      [1, 78, "Pause", 7, "PauseBreak", 19, "VK_PAUSE", empty, empty],
      [1, 79, "Insert", 19, "Insert", 45, "VK_INSERT", empty, empty],
      [1, 80, "Home", 14, "Home", 36, "VK_HOME", empty, empty],
      [1, 81, "PageUp", 11, "PageUp", 33, "VK_PRIOR", empty, empty],
      [1, 82, "Delete", 20, "Delete", 46, "VK_DELETE", empty, empty],
      [1, 83, "End", 13, "End", 35, "VK_END", empty, empty],
      [1, 84, "PageDown", 12, "PageDown", 34, "VK_NEXT", empty, empty],
      [1, 85, "ArrowRight", 17, "RightArrow", 39, "VK_RIGHT", "Right", empty],
      [1, 86, "ArrowLeft", 15, "LeftArrow", 37, "VK_LEFT", "Left", empty],
      [1, 87, "ArrowDown", 18, "DownArrow", 40, "VK_DOWN", "Down", empty],
      [1, 88, "ArrowUp", 16, "UpArrow", 38, "VK_UP", "Up", empty],
      [1, 89, "NumLock", 83, "NumLock", 144, "VK_NUMLOCK", empty, empty],
      [1, 90, "NumpadDivide", 113, "NumPad_Divide", 111, "VK_DIVIDE", empty, empty],
      [1, 91, "NumpadMultiply", 108, "NumPad_Multiply", 106, "VK_MULTIPLY", empty, empty],
      [1, 92, "NumpadSubtract", 111, "NumPad_Subtract", 109, "VK_SUBTRACT", empty, empty],
      [1, 93, "NumpadAdd", 109, "NumPad_Add", 107, "VK_ADD", empty, empty],
      [1, 94, "NumpadEnter", 3, empty, 0, empty, empty, empty],
      [1, 95, "Numpad1", 99, "NumPad1", 97, "VK_NUMPAD1", empty, empty],
      [1, 96, "Numpad2", 100, "NumPad2", 98, "VK_NUMPAD2", empty, empty],
      [1, 97, "Numpad3", 101, "NumPad3", 99, "VK_NUMPAD3", empty, empty],
      [1, 98, "Numpad4", 102, "NumPad4", 100, "VK_NUMPAD4", empty, empty],
      [1, 99, "Numpad5", 103, "NumPad5", 101, "VK_NUMPAD5", empty, empty],
      [1, 100, "Numpad6", 104, "NumPad6", 102, "VK_NUMPAD6", empty, empty],
      [1, 101, "Numpad7", 105, "NumPad7", 103, "VK_NUMPAD7", empty, empty],
      [1, 102, "Numpad8", 106, "NumPad8", 104, "VK_NUMPAD8", empty, empty],
      [1, 103, "Numpad9", 107, "NumPad9", 105, "VK_NUMPAD9", empty, empty],
      [1, 104, "Numpad0", 98, "NumPad0", 96, "VK_NUMPAD0", empty, empty],
      [1, 105, "NumpadDecimal", 112, "NumPad_Decimal", 110, "VK_DECIMAL", empty, empty],
      [0, 106, "IntlBackslash", 97, "OEM_102", 226, "VK_OEM_102", empty, empty],
      [1, 107, "ContextMenu", 58, "ContextMenu", 93, empty, empty, empty],
      [1, 108, "Power", 0, empty, 0, empty, empty, empty],
      [1, 109, "NumpadEqual", 0, empty, 0, empty, empty, empty],
      [1, 110, "F13", 71, "F13", 124, "VK_F13", empty, empty],
      [1, 111, "F14", 72, "F14", 125, "VK_F14", empty, empty],
      [1, 112, "F15", 73, "F15", 126, "VK_F15", empty, empty],
      [1, 113, "F16", 74, "F16", 127, "VK_F16", empty, empty],
      [1, 114, "F17", 75, "F17", 128, "VK_F17", empty, empty],
      [1, 115, "F18", 76, "F18", 129, "VK_F18", empty, empty],
      [1, 116, "F19", 77, "F19", 130, "VK_F19", empty, empty],
      [1, 117, "F20", 78, "F20", 131, "VK_F20", empty, empty],
      [1, 118, "F21", 79, "F21", 132, "VK_F21", empty, empty],
      [1, 119, "F22", 80, "F22", 133, "VK_F22", empty, empty],
      [1, 120, "F23", 81, "F23", 134, "VK_F23", empty, empty],
      [1, 121, "F24", 82, "F24", 135, "VK_F24", empty, empty],
      [1, 122, "Open", 0, empty, 0, empty, empty, empty],
      [1, 123, "Help", 0, empty, 0, empty, empty, empty],
      [1, 124, "Select", 0, empty, 0, empty, empty, empty],
      [1, 125, "Again", 0, empty, 0, empty, empty, empty],
      [1, 126, "Undo", 0, empty, 0, empty, empty, empty],
      [1, 127, "Cut", 0, empty, 0, empty, empty, empty],
      [1, 128, "Copy", 0, empty, 0, empty, empty, empty],
      [1, 129, "Paste", 0, empty, 0, empty, empty, empty],
      [1, 130, "Find", 0, empty, 0, empty, empty, empty],
      [1, 131, "AudioVolumeMute", 117, "AudioVolumeMute", 173, "VK_VOLUME_MUTE", empty, empty],
      [1, 132, "AudioVolumeUp", 118, "AudioVolumeUp", 175, "VK_VOLUME_UP", empty, empty],
      [1, 133, "AudioVolumeDown", 119, "AudioVolumeDown", 174, "VK_VOLUME_DOWN", empty, empty],
      [1, 134, "NumpadComma", 110, "NumPad_Separator", 108, "VK_SEPARATOR", empty, empty],
      [0, 135, "IntlRo", 115, "ABNT_C1", 193, "VK_ABNT_C1", empty, empty],
      [1, 136, "KanaMode", 0, empty, 0, empty, empty, empty],
      [0, 137, "IntlYen", 0, empty, 0, empty, empty, empty],
      [1, 138, "Convert", 0, empty, 0, empty, empty, empty],
      [1, 139, "NonConvert", 0, empty, 0, empty, empty, empty],
      [1, 140, "Lang1", 0, empty, 0, empty, empty, empty],
      [1, 141, "Lang2", 0, empty, 0, empty, empty, empty],
      [1, 142, "Lang3", 0, empty, 0, empty, empty, empty],
      [1, 143, "Lang4", 0, empty, 0, empty, empty, empty],
      [1, 144, "Lang5", 0, empty, 0, empty, empty, empty],
      [1, 145, "Abort", 0, empty, 0, empty, empty, empty],
      [1, 146, "Props", 0, empty, 0, empty, empty, empty],
      [1, 147, "NumpadParenLeft", 0, empty, 0, empty, empty, empty],
      [1, 148, "NumpadParenRight", 0, empty, 0, empty, empty, empty],
      [1, 149, "NumpadBackspace", 0, empty, 0, empty, empty, empty],
      [1, 150, "NumpadMemoryStore", 0, empty, 0, empty, empty, empty],
      [1, 151, "NumpadMemoryRecall", 0, empty, 0, empty, empty, empty],
      [1, 152, "NumpadMemoryClear", 0, empty, 0, empty, empty, empty],
      [1, 153, "NumpadMemoryAdd", 0, empty, 0, empty, empty, empty],
      [1, 154, "NumpadMemorySubtract", 0, empty, 0, empty, empty, empty],
      [1, 155, "NumpadClear", 131, "Clear", 12, "VK_CLEAR", empty, empty],
      [1, 156, "NumpadClearEntry", 0, empty, 0, empty, empty, empty],
      [1, 0, empty, 5, "Ctrl", 17, "VK_CONTROL", empty, empty],
      [1, 0, empty, 4, "Shift", 16, "VK_SHIFT", empty, empty],
      [1, 0, empty, 6, "Alt", 18, "VK_MENU", empty, empty],
      [1, 0, empty, 57, "Meta", 91, "VK_COMMAND", empty, empty],
      [1, 157, "ControlLeft", 5, empty, 0, "VK_LCONTROL", empty, empty],
      [1, 158, "ShiftLeft", 4, empty, 0, "VK_LSHIFT", empty, empty],
      [1, 159, "AltLeft", 6, empty, 0, "VK_LMENU", empty, empty],
      [1, 160, "MetaLeft", 57, empty, 0, "VK_LWIN", empty, empty],
      [1, 161, "ControlRight", 5, empty, 0, "VK_RCONTROL", empty, empty],
      [1, 162, "ShiftRight", 4, empty, 0, "VK_RSHIFT", empty, empty],
      [1, 163, "AltRight", 6, empty, 0, "VK_RMENU", empty, empty],
      [1, 164, "MetaRight", 57, empty, 0, "VK_RWIN", empty, empty],
      [1, 165, "BrightnessUp", 0, empty, 0, empty, empty, empty],
      [1, 166, "BrightnessDown", 0, empty, 0, empty, empty, empty],
      [1, 167, "MediaPlay", 0, empty, 0, empty, empty, empty],
      [1, 168, "MediaRecord", 0, empty, 0, empty, empty, empty],
      [1, 169, "MediaFastForward", 0, empty, 0, empty, empty, empty],
      [1, 170, "MediaRewind", 0, empty, 0, empty, empty, empty],
      [1, 171, "MediaTrackNext", 124, "MediaTrackNext", 176, "VK_MEDIA_NEXT_TRACK", empty, empty],
      [1, 172, "MediaTrackPrevious", 125, "MediaTrackPrevious", 177, "VK_MEDIA_PREV_TRACK", empty, empty],
      [1, 173, "MediaStop", 126, "MediaStop", 178, "VK_MEDIA_STOP", empty, empty],
      [1, 174, "Eject", 0, empty, 0, empty, empty, empty],
      [1, 175, "MediaPlayPause", 127, "MediaPlayPause", 179, "VK_MEDIA_PLAY_PAUSE", empty, empty],
      [1, 176, "MediaSelect", 128, "LaunchMediaPlayer", 181, "VK_MEDIA_LAUNCH_MEDIA_SELECT", empty, empty],
      [1, 177, "LaunchMail", 129, "LaunchMail", 180, "VK_MEDIA_LAUNCH_MAIL", empty, empty],
      [1, 178, "LaunchApp2", 130, "LaunchApp2", 183, "VK_MEDIA_LAUNCH_APP2", empty, empty],
      [1, 179, "LaunchApp1", 0, empty, 0, "VK_MEDIA_LAUNCH_APP1", empty, empty],
      [1, 180, "SelectTask", 0, empty, 0, empty, empty, empty],
      [1, 181, "LaunchScreenSaver", 0, empty, 0, empty, empty, empty],
      [1, 182, "BrowserSearch", 120, "BrowserSearch", 170, "VK_BROWSER_SEARCH", empty, empty],
      [1, 183, "BrowserHome", 121, "BrowserHome", 172, "VK_BROWSER_HOME", empty, empty],
      [1, 184, "BrowserBack", 122, "BrowserBack", 166, "VK_BROWSER_BACK", empty, empty],
      [1, 185, "BrowserForward", 123, "BrowserForward", 167, "VK_BROWSER_FORWARD", empty, empty],
      [1, 186, "BrowserStop", 0, empty, 0, "VK_BROWSER_STOP", empty, empty],
      [1, 187, "BrowserRefresh", 0, empty, 0, "VK_BROWSER_REFRESH", empty, empty],
      [1, 188, "BrowserFavorites", 0, empty, 0, "VK_BROWSER_FAVORITES", empty, empty],
      [1, 189, "ZoomToggle", 0, empty, 0, empty, empty, empty],
      [1, 190, "MailReply", 0, empty, 0, empty, empty, empty],
      [1, 191, "MailForward", 0, empty, 0, empty, empty, empty],
      [1, 192, "MailSend", 0, empty, 0, empty, empty, empty],
      // See https://lists.w3.org/Archives/Public/www-dom/2010JulSep/att-0182/keyCode-spec.html
      // If an Input Method Editor is processing key input and the event is keydown, return 229.
      [1, 0, empty, 114, "KeyInComposition", 229, empty, empty, empty],
      [1, 0, empty, 116, "ABNT_C2", 194, "VK_ABNT_C2", empty, empty],
      [1, 0, empty, 96, "OEM_8", 223, "VK_OEM_8", empty, empty],
      [1, 0, empty, 0, empty, 0, "VK_KANA", empty, empty],
      [1, 0, empty, 0, empty, 0, "VK_HANGUL", empty, empty],
      [1, 0, empty, 0, empty, 0, "VK_JUNJA", empty, empty],
      [1, 0, empty, 0, empty, 0, "VK_FINAL", empty, empty],
      [1, 0, empty, 0, empty, 0, "VK_HANJA", empty, empty],
      [1, 0, empty, 0, empty, 0, "VK_KANJI", empty, empty],
      [1, 0, empty, 0, empty, 0, "VK_CONVERT", empty, empty],
      [1, 0, empty, 0, empty, 0, "VK_NONCONVERT", empty, empty],
      [1, 0, empty, 0, empty, 0, "VK_ACCEPT", empty, empty],
      [1, 0, empty, 0, empty, 0, "VK_MODECHANGE", empty, empty],
      [1, 0, empty, 0, empty, 0, "VK_SELECT", empty, empty],
      [1, 0, empty, 0, empty, 0, "VK_PRINT", empty, empty],
      [1, 0, empty, 0, empty, 0, "VK_EXECUTE", empty, empty],
      [1, 0, empty, 0, empty, 0, "VK_SNAPSHOT", empty, empty],
      [1, 0, empty, 0, empty, 0, "VK_HELP", empty, empty],
      [1, 0, empty, 0, empty, 0, "VK_APPS", empty, empty],
      [1, 0, empty, 0, empty, 0, "VK_PROCESSKEY", empty, empty],
      [1, 0, empty, 0, empty, 0, "VK_PACKET", empty, empty],
      [1, 0, empty, 0, empty, 0, "VK_DBE_SBCSCHAR", empty, empty],
      [1, 0, empty, 0, empty, 0, "VK_DBE_DBCSCHAR", empty, empty],
      [1, 0, empty, 0, empty, 0, "VK_ATTN", empty, empty],
      [1, 0, empty, 0, empty, 0, "VK_CRSEL", empty, empty],
      [1, 0, empty, 0, empty, 0, "VK_EXSEL", empty, empty],
      [1, 0, empty, 0, empty, 0, "VK_EREOF", empty, empty],
      [1, 0, empty, 0, empty, 0, "VK_PLAY", empty, empty],
      [1, 0, empty, 0, empty, 0, "VK_ZOOM", empty, empty],
      [1, 0, empty, 0, empty, 0, "VK_NONAME", empty, empty],
      [1, 0, empty, 0, empty, 0, "VK_PA1", empty, empty],
      [1, 0, empty, 0, empty, 0, "VK_OEM_CLEAR", empty, empty]
    ];
    const seenKeyCode = [];
    const seenScanCode = [];
    for (const mapping of mappings) {
      const [immutable, scanCode, scanCodeStr, keyCode, keyCodeStr, eventKeyCode, vkey, usUserSettingsLabel, generalUserSettingsLabel] = mapping;
      if (!seenScanCode[scanCode]) {
        seenScanCode[scanCode] = true;
        scanCodeIntToStr[scanCode] = scanCodeStr;
        scanCodeStrToInt[scanCodeStr] = scanCode;
        scanCodeLowerCaseStrToInt[scanCodeStr.toLowerCase()] = scanCode;
        if (immutable) {
          IMMUTABLE_CODE_TO_KEY_CODE[scanCode] = keyCode;
          if (keyCode !== 0 && keyCode !== 3 && keyCode !== 5 && keyCode !== 4 && keyCode !== 6 && keyCode !== 57) {
            IMMUTABLE_KEY_CODE_TO_CODE[keyCode] = scanCode;
          }
        }
      }
      if (!seenKeyCode[keyCode]) {
        seenKeyCode[keyCode] = true;
        if (!keyCodeStr) {
          throw new Error(`String representation missing for key code ${keyCode} around scan code ${scanCodeStr}`);
        }
        uiMap.define(keyCode, keyCodeStr);
        userSettingsUSMap.define(keyCode, usUserSettingsLabel || keyCodeStr);
        userSettingsGeneralMap.define(keyCode, generalUserSettingsLabel || usUserSettingsLabel || keyCodeStr);
      }
      if (eventKeyCode) {
        EVENT_KEY_CODE_MAP[eventKeyCode] = keyCode;
      }
      if (vkey) {
        NATIVE_WINDOWS_KEY_CODE_TO_KEY_CODE[vkey] = keyCode;
      }
    }
    IMMUTABLE_KEY_CODE_TO_CODE[
      3
      /* KeyCode.Enter */
    ] = 46;
  })();
  var KeyCodeUtils;
  (function(KeyCodeUtils2) {
    function toString(keyCode) {
      return uiMap.keyCodeToStr(keyCode);
    }
    KeyCodeUtils2.toString = toString;
    function fromString(key) {
      return uiMap.strToKeyCode(key);
    }
    KeyCodeUtils2.fromString = fromString;
    function toUserSettingsUS(keyCode) {
      return userSettingsUSMap.keyCodeToStr(keyCode);
    }
    KeyCodeUtils2.toUserSettingsUS = toUserSettingsUS;
    function toUserSettingsGeneral(keyCode) {
      return userSettingsGeneralMap.keyCodeToStr(keyCode);
    }
    KeyCodeUtils2.toUserSettingsGeneral = toUserSettingsGeneral;
    function fromUserSettings(key) {
      return userSettingsUSMap.strToKeyCode(key) || userSettingsGeneralMap.strToKeyCode(key);
    }
    KeyCodeUtils2.fromUserSettings = fromUserSettings;
    function toElectronAccelerator(keyCode) {
      if (keyCode >= 98 && keyCode <= 113) {
        return null;
      }
      switch (keyCode) {
        case 16:
          return "Up";
        case 18:
          return "Down";
        case 15:
          return "Left";
        case 17:
          return "Right";
      }
      return uiMap.keyCodeToStr(keyCode);
    }
    KeyCodeUtils2.toElectronAccelerator = toElectronAccelerator;
  })(KeyCodeUtils || (KeyCodeUtils = {}));
  function KeyChord(firstPart, secondPart) {
    const chordPart = (secondPart & 65535) << 16 >>> 0;
    return (firstPart | chordPart) >>> 0;
  }

  // node_modules/monaco-editor/esm/vs/editor/common/core/selection.js
  var Selection = class _Selection extends Range {
    constructor(selectionStartLineNumber, selectionStartColumn, positionLineNumber, positionColumn) {
      super(selectionStartLineNumber, selectionStartColumn, positionLineNumber, positionColumn);
      this.selectionStartLineNumber = selectionStartLineNumber;
      this.selectionStartColumn = selectionStartColumn;
      this.positionLineNumber = positionLineNumber;
      this.positionColumn = positionColumn;
    }
    /**
     * Transform to a human-readable representation.
     */
    toString() {
      return "[" + this.selectionStartLineNumber + "," + this.selectionStartColumn + " -> " + this.positionLineNumber + "," + this.positionColumn + "]";
    }
    /**
     * Test if equals other selection.
     */
    equalsSelection(other) {
      return _Selection.selectionsEqual(this, other);
    }
    /**
     * Test if the two selections are equal.
     */
    static selectionsEqual(a2, b) {
      return a2.selectionStartLineNumber === b.selectionStartLineNumber && a2.selectionStartColumn === b.selectionStartColumn && a2.positionLineNumber === b.positionLineNumber && a2.positionColumn === b.positionColumn;
    }
    /**
     * Get directions (LTR or RTL).
     */
    getDirection() {
      if (this.selectionStartLineNumber === this.startLineNumber && this.selectionStartColumn === this.startColumn) {
        return 0;
      }
      return 1;
    }
    /**
     * Create a new selection with a different `positionLineNumber` and `positionColumn`.
     */
    setEndPosition(endLineNumber, endColumn) {
      if (this.getDirection() === 0) {
        return new _Selection(this.startLineNumber, this.startColumn, endLineNumber, endColumn);
      }
      return new _Selection(endLineNumber, endColumn, this.startLineNumber, this.startColumn);
    }
    /**
     * Get the position at `positionLineNumber` and `positionColumn`.
     */
    getPosition() {
      return new Position(this.positionLineNumber, this.positionColumn);
    }
    /**
     * Get the position at the start of the selection.
    */
    getSelectionStart() {
      return new Position(this.selectionStartLineNumber, this.selectionStartColumn);
    }
    /**
     * Create a new selection with a different `selectionStartLineNumber` and `selectionStartColumn`.
     */
    setStartPosition(startLineNumber, startColumn) {
      if (this.getDirection() === 0) {
        return new _Selection(startLineNumber, startColumn, this.endLineNumber, this.endColumn);
      }
      return new _Selection(this.endLineNumber, this.endColumn, startLineNumber, startColumn);
    }
    // ----
    /**
     * Create a `Selection` from one or two positions
     */
    static fromPositions(start, end = start) {
      return new _Selection(start.lineNumber, start.column, end.lineNumber, end.column);
    }
    /**
     * Creates a `Selection` from a range, given a direction.
     */
    static fromRange(range, direction) {
      if (direction === 0) {
        return new _Selection(range.startLineNumber, range.startColumn, range.endLineNumber, range.endColumn);
      } else {
        return new _Selection(range.endLineNumber, range.endColumn, range.startLineNumber, range.startColumn);
      }
    }
    /**
     * Create a `Selection` from an `ISelection`.
     */
    static liftSelection(sel) {
      return new _Selection(sel.selectionStartLineNumber, sel.selectionStartColumn, sel.positionLineNumber, sel.positionColumn);
    }
    /**
     * `a` equals `b`.
     */
    static selectionsArrEqual(a2, b) {
      if (a2 && !b || !a2 && b) {
        return false;
      }
      if (!a2 && !b) {
        return true;
      }
      if (a2.length !== b.length) {
        return false;
      }
      for (let i = 0, len = a2.length; i < len; i++) {
        if (!this.selectionsEqual(a2[i], b[i])) {
          return false;
        }
      }
      return true;
    }
    /**
     * Test if `obj` is an `ISelection`.
     */
    static isISelection(obj) {
      return obj && typeof obj.selectionStartLineNumber === "number" && typeof obj.selectionStartColumn === "number" && typeof obj.positionLineNumber === "number" && typeof obj.positionColumn === "number";
    }
    /**
     * Create with a direction.
     */
    static createWithDirection(startLineNumber, startColumn, endLineNumber, endColumn, direction) {
      if (direction === 0) {
        return new _Selection(startLineNumber, startColumn, endLineNumber, endColumn);
      }
      return new _Selection(endLineNumber, endColumn, startLineNumber, startColumn);
    }
  };

  // node_modules/monaco-editor/esm/vs/base/common/codiconsUtil.js
  var _codiconFontCharacters = /* @__PURE__ */ Object.create(null);
  function register(id, fontCharacter) {
    if (isString(fontCharacter)) {
      const val = _codiconFontCharacters[fontCharacter];
      if (val === void 0) {
        throw new Error(`${id} references an unknown codicon: ${fontCharacter}`);
      }
      fontCharacter = val;
    }
    _codiconFontCharacters[id] = fontCharacter;
    return { id };
  }

  // node_modules/monaco-editor/esm/vs/base/common/codiconsLibrary.js
  var codiconsLibrary = {
    add: register("add", 6e4),
    plus: register("plus", 6e4),
    gistNew: register("gist-new", 6e4),
    repoCreate: register("repo-create", 6e4),
    lightbulb: register("lightbulb", 60001),
    lightBulb: register("light-bulb", 60001),
    repo: register("repo", 60002),
    repoDelete: register("repo-delete", 60002),
    gistFork: register("gist-fork", 60003),
    repoForked: register("repo-forked", 60003),
    gitPullRequest: register("git-pull-request", 60004),
    gitPullRequestAbandoned: register("git-pull-request-abandoned", 60004),
    recordKeys: register("record-keys", 60005),
    keyboard: register("keyboard", 60005),
    tag: register("tag", 60006),
    gitPullRequestLabel: register("git-pull-request-label", 60006),
    tagAdd: register("tag-add", 60006),
    tagRemove: register("tag-remove", 60006),
    person: register("person", 60007),
    personFollow: register("person-follow", 60007),
    personOutline: register("person-outline", 60007),
    personFilled: register("person-filled", 60007),
    gitBranch: register("git-branch", 60008),
    gitBranchCreate: register("git-branch-create", 60008),
    gitBranchDelete: register("git-branch-delete", 60008),
    sourceControl: register("source-control", 60008),
    mirror: register("mirror", 60009),
    mirrorPublic: register("mirror-public", 60009),
    star: register("star", 60010),
    starAdd: register("star-add", 60010),
    starDelete: register("star-delete", 60010),
    starEmpty: register("star-empty", 60010),
    comment: register("comment", 60011),
    commentAdd: register("comment-add", 60011),
    alert: register("alert", 60012),
    warning: register("warning", 60012),
    search: register("search", 60013),
    searchSave: register("search-save", 60013),
    logOut: register("log-out", 60014),
    signOut: register("sign-out", 60014),
    logIn: register("log-in", 60015),
    signIn: register("sign-in", 60015),
    eye: register("eye", 60016),
    eyeUnwatch: register("eye-unwatch", 60016),
    eyeWatch: register("eye-watch", 60016),
    circleFilled: register("circle-filled", 60017),
    primitiveDot: register("primitive-dot", 60017),
    closeDirty: register("close-dirty", 60017),
    debugBreakpoint: register("debug-breakpoint", 60017),
    debugBreakpointDisabled: register("debug-breakpoint-disabled", 60017),
    debugHint: register("debug-hint", 60017),
    terminalDecorationSuccess: register("terminal-decoration-success", 60017),
    primitiveSquare: register("primitive-square", 60018),
    edit: register("edit", 60019),
    pencil: register("pencil", 60019),
    info: register("info", 60020),
    issueOpened: register("issue-opened", 60020),
    gistPrivate: register("gist-private", 60021),
    gitForkPrivate: register("git-fork-private", 60021),
    lock: register("lock", 60021),
    mirrorPrivate: register("mirror-private", 60021),
    close: register("close", 60022),
    removeClose: register("remove-close", 60022),
    x: register("x", 60022),
    repoSync: register("repo-sync", 60023),
    sync: register("sync", 60023),
    clone: register("clone", 60024),
    desktopDownload: register("desktop-download", 60024),
    beaker: register("beaker", 60025),
    microscope: register("microscope", 60025),
    vm: register("vm", 60026),
    deviceDesktop: register("device-desktop", 60026),
    file: register("file", 60027),
    fileText: register("file-text", 60027),
    more: register("more", 60028),
    ellipsis: register("ellipsis", 60028),
    kebabHorizontal: register("kebab-horizontal", 60028),
    mailReply: register("mail-reply", 60029),
    reply: register("reply", 60029),
    organization: register("organization", 60030),
    organizationFilled: register("organization-filled", 60030),
    organizationOutline: register("organization-outline", 60030),
    newFile: register("new-file", 60031),
    fileAdd: register("file-add", 60031),
    newFolder: register("new-folder", 60032),
    fileDirectoryCreate: register("file-directory-create", 60032),
    trash: register("trash", 60033),
    trashcan: register("trashcan", 60033),
    history: register("history", 60034),
    clock: register("clock", 60034),
    folder: register("folder", 60035),
    fileDirectory: register("file-directory", 60035),
    symbolFolder: register("symbol-folder", 60035),
    logoGithub: register("logo-github", 60036),
    markGithub: register("mark-github", 60036),
    github: register("github", 60036),
    terminal: register("terminal", 60037),
    console: register("console", 60037),
    repl: register("repl", 60037),
    zap: register("zap", 60038),
    symbolEvent: register("symbol-event", 60038),
    error: register("error", 60039),
    stop: register("stop", 60039),
    variable: register("variable", 60040),
    symbolVariable: register("symbol-variable", 60040),
    array: register("array", 60042),
    symbolArray: register("symbol-array", 60042),
    symbolModule: register("symbol-module", 60043),
    symbolPackage: register("symbol-package", 60043),
    symbolNamespace: register("symbol-namespace", 60043),
    symbolObject: register("symbol-object", 60043),
    symbolMethod: register("symbol-method", 60044),
    symbolFunction: register("symbol-function", 60044),
    symbolConstructor: register("symbol-constructor", 60044),
    symbolBoolean: register("symbol-boolean", 60047),
    symbolNull: register("symbol-null", 60047),
    symbolNumeric: register("symbol-numeric", 60048),
    symbolNumber: register("symbol-number", 60048),
    symbolStructure: register("symbol-structure", 60049),
    symbolStruct: register("symbol-struct", 60049),
    symbolParameter: register("symbol-parameter", 60050),
    symbolTypeParameter: register("symbol-type-parameter", 60050),
    symbolKey: register("symbol-key", 60051),
    symbolText: register("symbol-text", 60051),
    symbolReference: register("symbol-reference", 60052),
    goToFile: register("go-to-file", 60052),
    symbolEnum: register("symbol-enum", 60053),
    symbolValue: register("symbol-value", 60053),
    symbolRuler: register("symbol-ruler", 60054),
    symbolUnit: register("symbol-unit", 60054),
    activateBreakpoints: register("activate-breakpoints", 60055),
    archive: register("archive", 60056),
    arrowBoth: register("arrow-both", 60057),
    arrowDown: register("arrow-down", 60058),
    arrowLeft: register("arrow-left", 60059),
    arrowRight: register("arrow-right", 60060),
    arrowSmallDown: register("arrow-small-down", 60061),
    arrowSmallLeft: register("arrow-small-left", 60062),
    arrowSmallRight: register("arrow-small-right", 60063),
    arrowSmallUp: register("arrow-small-up", 60064),
    arrowUp: register("arrow-up", 60065),
    bell: register("bell", 60066),
    bold: register("bold", 60067),
    book: register("book", 60068),
    bookmark: register("bookmark", 60069),
    debugBreakpointConditionalUnverified: register("debug-breakpoint-conditional-unverified", 60070),
    debugBreakpointConditional: register("debug-breakpoint-conditional", 60071),
    debugBreakpointConditionalDisabled: register("debug-breakpoint-conditional-disabled", 60071),
    debugBreakpointDataUnverified: register("debug-breakpoint-data-unverified", 60072),
    debugBreakpointData: register("debug-breakpoint-data", 60073),
    debugBreakpointDataDisabled: register("debug-breakpoint-data-disabled", 60073),
    debugBreakpointLogUnverified: register("debug-breakpoint-log-unverified", 60074),
    debugBreakpointLog: register("debug-breakpoint-log", 60075),
    debugBreakpointLogDisabled: register("debug-breakpoint-log-disabled", 60075),
    briefcase: register("briefcase", 60076),
    broadcast: register("broadcast", 60077),
    browser: register("browser", 60078),
    bug: register("bug", 60079),
    calendar: register("calendar", 60080),
    caseSensitive: register("case-sensitive", 60081),
    check: register("check", 60082),
    checklist: register("checklist", 60083),
    chevronDown: register("chevron-down", 60084),
    chevronLeft: register("chevron-left", 60085),
    chevronRight: register("chevron-right", 60086),
    chevronUp: register("chevron-up", 60087),
    chromeClose: register("chrome-close", 60088),
    chromeMaximize: register("chrome-maximize", 60089),
    chromeMinimize: register("chrome-minimize", 60090),
    chromeRestore: register("chrome-restore", 60091),
    circleOutline: register("circle-outline", 60092),
    circle: register("circle", 60092),
    debugBreakpointUnverified: register("debug-breakpoint-unverified", 60092),
    terminalDecorationIncomplete: register("terminal-decoration-incomplete", 60092),
    circleSlash: register("circle-slash", 60093),
    circuitBoard: register("circuit-board", 60094),
    clearAll: register("clear-all", 60095),
    clippy: register("clippy", 60096),
    closeAll: register("close-all", 60097),
    cloudDownload: register("cloud-download", 60098),
    cloudUpload: register("cloud-upload", 60099),
    code: register("code", 60100),
    collapseAll: register("collapse-all", 60101),
    colorMode: register("color-mode", 60102),
    commentDiscussion: register("comment-discussion", 60103),
    creditCard: register("credit-card", 60105),
    dash: register("dash", 60108),
    dashboard: register("dashboard", 60109),
    database: register("database", 60110),
    debugContinue: register("debug-continue", 60111),
    debugDisconnect: register("debug-disconnect", 60112),
    debugPause: register("debug-pause", 60113),
    debugRestart: register("debug-restart", 60114),
    debugStart: register("debug-start", 60115),
    debugStepInto: register("debug-step-into", 60116),
    debugStepOut: register("debug-step-out", 60117),
    debugStepOver: register("debug-step-over", 60118),
    debugStop: register("debug-stop", 60119),
    debug: register("debug", 60120),
    deviceCameraVideo: register("device-camera-video", 60121),
    deviceCamera: register("device-camera", 60122),
    deviceMobile: register("device-mobile", 60123),
    diffAdded: register("diff-added", 60124),
    diffIgnored: register("diff-ignored", 60125),
    diffModified: register("diff-modified", 60126),
    diffRemoved: register("diff-removed", 60127),
    diffRenamed: register("diff-renamed", 60128),
    diff: register("diff", 60129),
    diffSidebyside: register("diff-sidebyside", 60129),
    discard: register("discard", 60130),
    editorLayout: register("editor-layout", 60131),
    emptyWindow: register("empty-window", 60132),
    exclude: register("exclude", 60133),
    extensions: register("extensions", 60134),
    eyeClosed: register("eye-closed", 60135),
    fileBinary: register("file-binary", 60136),
    fileCode: register("file-code", 60137),
    fileMedia: register("file-media", 60138),
    filePdf: register("file-pdf", 60139),
    fileSubmodule: register("file-submodule", 60140),
    fileSymlinkDirectory: register("file-symlink-directory", 60141),
    fileSymlinkFile: register("file-symlink-file", 60142),
    fileZip: register("file-zip", 60143),
    files: register("files", 60144),
    filter: register("filter", 60145),
    flame: register("flame", 60146),
    foldDown: register("fold-down", 60147),
    foldUp: register("fold-up", 60148),
    fold: register("fold", 60149),
    folderActive: register("folder-active", 60150),
    folderOpened: register("folder-opened", 60151),
    gear: register("gear", 60152),
    gift: register("gift", 60153),
    gistSecret: register("gist-secret", 60154),
    gist: register("gist", 60155),
    gitCommit: register("git-commit", 60156),
    gitCompare: register("git-compare", 60157),
    compareChanges: register("compare-changes", 60157),
    gitMerge: register("git-merge", 60158),
    githubAction: register("github-action", 60159),
    githubAlt: register("github-alt", 60160),
    globe: register("globe", 60161),
    grabber: register("grabber", 60162),
    graph: register("graph", 60163),
    gripper: register("gripper", 60164),
    heart: register("heart", 60165),
    home: register("home", 60166),
    horizontalRule: register("horizontal-rule", 60167),
    hubot: register("hubot", 60168),
    inbox: register("inbox", 60169),
    issueReopened: register("issue-reopened", 60171),
    issues: register("issues", 60172),
    italic: register("italic", 60173),
    jersey: register("jersey", 60174),
    json: register("json", 60175),
    kebabVertical: register("kebab-vertical", 60176),
    key: register("key", 60177),
    law: register("law", 60178),
    lightbulbAutofix: register("lightbulb-autofix", 60179),
    linkExternal: register("link-external", 60180),
    link: register("link", 60181),
    listOrdered: register("list-ordered", 60182),
    listUnordered: register("list-unordered", 60183),
    liveShare: register("live-share", 60184),
    loading: register("loading", 60185),
    location: register("location", 60186),
    mailRead: register("mail-read", 60187),
    mail: register("mail", 60188),
    markdown: register("markdown", 60189),
    megaphone: register("megaphone", 60190),
    mention: register("mention", 60191),
    milestone: register("milestone", 60192),
    gitPullRequestMilestone: register("git-pull-request-milestone", 60192),
    mortarBoard: register("mortar-board", 60193),
    move: register("move", 60194),
    multipleWindows: register("multiple-windows", 60195),
    mute: register("mute", 60196),
    noNewline: register("no-newline", 60197),
    note: register("note", 60198),
    octoface: register("octoface", 60199),
    openPreview: register("open-preview", 60200),
    package: register("package", 60201),
    paintcan: register("paintcan", 60202),
    pin: register("pin", 60203),
    play: register("play", 60204),
    run: register("run", 60204),
    plug: register("plug", 60205),
    preserveCase: register("preserve-case", 60206),
    preview: register("preview", 60207),
    project: register("project", 60208),
    pulse: register("pulse", 60209),
    question: register("question", 60210),
    quote: register("quote", 60211),
    radioTower: register("radio-tower", 60212),
    reactions: register("reactions", 60213),
    references: register("references", 60214),
    refresh: register("refresh", 60215),
    regex: register("regex", 60216),
    remoteExplorer: register("remote-explorer", 60217),
    remote: register("remote", 60218),
    remove: register("remove", 60219),
    replaceAll: register("replace-all", 60220),
    replace: register("replace", 60221),
    repoClone: register("repo-clone", 60222),
    repoForcePush: register("repo-force-push", 60223),
    repoPull: register("repo-pull", 60224),
    repoPush: register("repo-push", 60225),
    report: register("report", 60226),
    requestChanges: register("request-changes", 60227),
    rocket: register("rocket", 60228),
    rootFolderOpened: register("root-folder-opened", 60229),
    rootFolder: register("root-folder", 60230),
    rss: register("rss", 60231),
    ruby: register("ruby", 60232),
    saveAll: register("save-all", 60233),
    saveAs: register("save-as", 60234),
    save: register("save", 60235),
    screenFull: register("screen-full", 60236),
    screenNormal: register("screen-normal", 60237),
    searchStop: register("search-stop", 60238),
    server: register("server", 60240),
    settingsGear: register("settings-gear", 60241),
    settings: register("settings", 60242),
    shield: register("shield", 60243),
    smiley: register("smiley", 60244),
    sortPrecedence: register("sort-precedence", 60245),
    splitHorizontal: register("split-horizontal", 60246),
    splitVertical: register("split-vertical", 60247),
    squirrel: register("squirrel", 60248),
    starFull: register("star-full", 60249),
    starHalf: register("star-half", 60250),
    symbolClass: register("symbol-class", 60251),
    symbolColor: register("symbol-color", 60252),
    symbolConstant: register("symbol-constant", 60253),
    symbolEnumMember: register("symbol-enum-member", 60254),
    symbolField: register("symbol-field", 60255),
    symbolFile: register("symbol-file", 60256),
    symbolInterface: register("symbol-interface", 60257),
    symbolKeyword: register("symbol-keyword", 60258),
    symbolMisc: register("symbol-misc", 60259),
    symbolOperator: register("symbol-operator", 60260),
    symbolProperty: register("symbol-property", 60261),
    wrench: register("wrench", 60261),
    wrenchSubaction: register("wrench-subaction", 60261),
    symbolSnippet: register("symbol-snippet", 60262),
    tasklist: register("tasklist", 60263),
    telescope: register("telescope", 60264),
    textSize: register("text-size", 60265),
    threeBars: register("three-bars", 60266),
    thumbsdown: register("thumbsdown", 60267),
    thumbsup: register("thumbsup", 60268),
    tools: register("tools", 60269),
    triangleDown: register("triangle-down", 60270),
    triangleLeft: register("triangle-left", 60271),
    triangleRight: register("triangle-right", 60272),
    triangleUp: register("triangle-up", 60273),
    twitter: register("twitter", 60274),
    unfold: register("unfold", 60275),
    unlock: register("unlock", 60276),
    unmute: register("unmute", 60277),
    unverified: register("unverified", 60278),
    verified: register("verified", 60279),
    versions: register("versions", 60280),
    vmActive: register("vm-active", 60281),
    vmOutline: register("vm-outline", 60282),
    vmRunning: register("vm-running", 60283),
    watch: register("watch", 60284),
    whitespace: register("whitespace", 60285),
    wholeWord: register("whole-word", 60286),
    window: register("window", 60287),
    wordWrap: register("word-wrap", 60288),
    zoomIn: register("zoom-in", 60289),
    zoomOut: register("zoom-out", 60290),
    listFilter: register("list-filter", 60291),
    listFlat: register("list-flat", 60292),
    listSelection: register("list-selection", 60293),
    selection: register("selection", 60293),
    listTree: register("list-tree", 60294),
    debugBreakpointFunctionUnverified: register("debug-breakpoint-function-unverified", 60295),
    debugBreakpointFunction: register("debug-breakpoint-function", 60296),
    debugBreakpointFunctionDisabled: register("debug-breakpoint-function-disabled", 60296),
    debugStackframeActive: register("debug-stackframe-active", 60297),
    circleSmallFilled: register("circle-small-filled", 60298),
    debugStackframeDot: register("debug-stackframe-dot", 60298),
    terminalDecorationMark: register("terminal-decoration-mark", 60298),
    debugStackframe: register("debug-stackframe", 60299),
    debugStackframeFocused: register("debug-stackframe-focused", 60299),
    debugBreakpointUnsupported: register("debug-breakpoint-unsupported", 60300),
    symbolString: register("symbol-string", 60301),
    debugReverseContinue: register("debug-reverse-continue", 60302),
    debugStepBack: register("debug-step-back", 60303),
    debugRestartFrame: register("debug-restart-frame", 60304),
    debugAlt: register("debug-alt", 60305),
    callIncoming: register("call-incoming", 60306),
    callOutgoing: register("call-outgoing", 60307),
    menu: register("menu", 60308),
    expandAll: register("expand-all", 60309),
    feedback: register("feedback", 60310),
    gitPullRequestReviewer: register("git-pull-request-reviewer", 60310),
    groupByRefType: register("group-by-ref-type", 60311),
    ungroupByRefType: register("ungroup-by-ref-type", 60312),
    account: register("account", 60313),
    gitPullRequestAssignee: register("git-pull-request-assignee", 60313),
    bellDot: register("bell-dot", 60314),
    debugConsole: register("debug-console", 60315),
    library: register("library", 60316),
    output: register("output", 60317),
    runAll: register("run-all", 60318),
    syncIgnored: register("sync-ignored", 60319),
    pinned: register("pinned", 60320),
    githubInverted: register("github-inverted", 60321),
    serverProcess: register("server-process", 60322),
    serverEnvironment: register("server-environment", 60323),
    pass: register("pass", 60324),
    issueClosed: register("issue-closed", 60324),
    stopCircle: register("stop-circle", 60325),
    playCircle: register("play-circle", 60326),
    record: register("record", 60327),
    debugAltSmall: register("debug-alt-small", 60328),
    vmConnect: register("vm-connect", 60329),
    cloud: register("cloud", 60330),
    merge: register("merge", 60331),
    export: register("export", 60332),
    graphLeft: register("graph-left", 60333),
    magnet: register("magnet", 60334),
    notebook: register("notebook", 60335),
    redo: register("redo", 60336),
    checkAll: register("check-all", 60337),
    pinnedDirty: register("pinned-dirty", 60338),
    passFilled: register("pass-filled", 60339),
    circleLargeFilled: register("circle-large-filled", 60340),
    circleLarge: register("circle-large", 60341),
    circleLargeOutline: register("circle-large-outline", 60341),
    combine: register("combine", 60342),
    gather: register("gather", 60342),
    table: register("table", 60343),
    variableGroup: register("variable-group", 60344),
    typeHierarchy: register("type-hierarchy", 60345),
    typeHierarchySub: register("type-hierarchy-sub", 60346),
    typeHierarchySuper: register("type-hierarchy-super", 60347),
    gitPullRequestCreate: register("git-pull-request-create", 60348),
    runAbove: register("run-above", 60349),
    runBelow: register("run-below", 60350),
    notebookTemplate: register("notebook-template", 60351),
    debugRerun: register("debug-rerun", 60352),
    workspaceTrusted: register("workspace-trusted", 60353),
    workspaceUntrusted: register("workspace-untrusted", 60354),
    workspaceUnknown: register("workspace-unknown", 60355),
    terminalCmd: register("terminal-cmd", 60356),
    terminalDebian: register("terminal-debian", 60357),
    terminalLinux: register("terminal-linux", 60358),
    terminalPowershell: register("terminal-powershell", 60359),
    terminalTmux: register("terminal-tmux", 60360),
    terminalUbuntu: register("terminal-ubuntu", 60361),
    terminalBash: register("terminal-bash", 60362),
    arrowSwap: register("arrow-swap", 60363),
    copy: register("copy", 60364),
    personAdd: register("person-add", 60365),
    filterFilled: register("filter-filled", 60366),
    wand: register("wand", 60367),
    debugLineByLine: register("debug-line-by-line", 60368),
    inspect: register("inspect", 60369),
    layers: register("layers", 60370),
    layersDot: register("layers-dot", 60371),
    layersActive: register("layers-active", 60372),
    compass: register("compass", 60373),
    compassDot: register("compass-dot", 60374),
    compassActive: register("compass-active", 60375),
    azure: register("azure", 60376),
    issueDraft: register("issue-draft", 60377),
    gitPullRequestClosed: register("git-pull-request-closed", 60378),
    gitPullRequestDraft: register("git-pull-request-draft", 60379),
    debugAll: register("debug-all", 60380),
    debugCoverage: register("debug-coverage", 60381),
    runErrors: register("run-errors", 60382),
    folderLibrary: register("folder-library", 60383),
    debugContinueSmall: register("debug-continue-small", 60384),
    beakerStop: register("beaker-stop", 60385),
    graphLine: register("graph-line", 60386),
    graphScatter: register("graph-scatter", 60387),
    pieChart: register("pie-chart", 60388),
    bracket: register("bracket", 60175),
    bracketDot: register("bracket-dot", 60389),
    bracketError: register("bracket-error", 60390),
    lockSmall: register("lock-small", 60391),
    azureDevops: register("azure-devops", 60392),
    verifiedFilled: register("verified-filled", 60393),
    newline: register("newline", 60394),
    layout: register("layout", 60395),
    layoutActivitybarLeft: register("layout-activitybar-left", 60396),
    layoutActivitybarRight: register("layout-activitybar-right", 60397),
    layoutPanelLeft: register("layout-panel-left", 60398),
    layoutPanelCenter: register("layout-panel-center", 60399),
    layoutPanelJustify: register("layout-panel-justify", 60400),
    layoutPanelRight: register("layout-panel-right", 60401),
    layoutPanel: register("layout-panel", 60402),
    layoutSidebarLeft: register("layout-sidebar-left", 60403),
    layoutSidebarRight: register("layout-sidebar-right", 60404),
    layoutStatusbar: register("layout-statusbar", 60405),
    layoutMenubar: register("layout-menubar", 60406),
    layoutCentered: register("layout-centered", 60407),
    target: register("target", 60408),
    indent: register("indent", 60409),
    recordSmall: register("record-small", 60410),
    errorSmall: register("error-small", 60411),
    terminalDecorationError: register("terminal-decoration-error", 60411),
    arrowCircleDown: register("arrow-circle-down", 60412),
    arrowCircleLeft: register("arrow-circle-left", 60413),
    arrowCircleRight: register("arrow-circle-right", 60414),
    arrowCircleUp: register("arrow-circle-up", 60415),
    layoutSidebarRightOff: register("layout-sidebar-right-off", 60416),
    layoutPanelOff: register("layout-panel-off", 60417),
    layoutSidebarLeftOff: register("layout-sidebar-left-off", 60418),
    blank: register("blank", 60419),
    heartFilled: register("heart-filled", 60420),
    map: register("map", 60421),
    mapHorizontal: register("map-horizontal", 60421),
    foldHorizontal: register("fold-horizontal", 60421),
    mapFilled: register("map-filled", 60422),
    mapHorizontalFilled: register("map-horizontal-filled", 60422),
    foldHorizontalFilled: register("fold-horizontal-filled", 60422),
    circleSmall: register("circle-small", 60423),
    bellSlash: register("bell-slash", 60424),
    bellSlashDot: register("bell-slash-dot", 60425),
    commentUnresolved: register("comment-unresolved", 60426),
    gitPullRequestGoToChanges: register("git-pull-request-go-to-changes", 60427),
    gitPullRequestNewChanges: register("git-pull-request-new-changes", 60428),
    searchFuzzy: register("search-fuzzy", 60429),
    commentDraft: register("comment-draft", 60430),
    send: register("send", 60431),
    sparkle: register("sparkle", 60432),
    insert: register("insert", 60433),
    mic: register("mic", 60434),
    thumbsdownFilled: register("thumbsdown-filled", 60435),
    thumbsupFilled: register("thumbsup-filled", 60436),
    coffee: register("coffee", 60437),
    snake: register("snake", 60438),
    game: register("game", 60439),
    vr: register("vr", 60440),
    chip: register("chip", 60441),
    piano: register("piano", 60442),
    music: register("music", 60443),
    micFilled: register("mic-filled", 60444),
    repoFetch: register("repo-fetch", 60445),
    copilot: register("copilot", 60446),
    lightbulbSparkle: register("lightbulb-sparkle", 60447),
    robot: register("robot", 60448),
    sparkleFilled: register("sparkle-filled", 60449),
    diffSingle: register("diff-single", 60450),
    diffMultiple: register("diff-multiple", 60451),
    surroundWith: register("surround-with", 60452),
    share: register("share", 60453),
    gitStash: register("git-stash", 60454),
    gitStashApply: register("git-stash-apply", 60455),
    gitStashPop: register("git-stash-pop", 60456),
    vscode: register("vscode", 60457),
    vscodeInsiders: register("vscode-insiders", 60458),
    codeOss: register("code-oss", 60459),
    runCoverage: register("run-coverage", 60460),
    runAllCoverage: register("run-all-coverage", 60461),
    coverage: register("coverage", 60462),
    githubProject: register("github-project", 60463),
    mapVertical: register("map-vertical", 60464),
    foldVertical: register("fold-vertical", 60464),
    mapVerticalFilled: register("map-vertical-filled", 60465),
    foldVerticalFilled: register("fold-vertical-filled", 60465),
    goToSearch: register("go-to-search", 60466),
    percentage: register("percentage", 60467),
    sortPercentage: register("sort-percentage", 60467),
    attach: register("attach", 60468)
  };

  // node_modules/monaco-editor/esm/vs/base/common/codicons.js
  var codiconsDerived = {
    dialogError: register("dialog-error", "error"),
    dialogWarning: register("dialog-warning", "warning"),
    dialogInfo: register("dialog-info", "info"),
    dialogClose: register("dialog-close", "close"),
    treeItemExpanded: register("tree-item-expanded", "chevron-down"),
    // collapsed is done with rotation
    treeFilterOnTypeOn: register("tree-filter-on-type-on", "list-filter"),
    treeFilterOnTypeOff: register("tree-filter-on-type-off", "list-selection"),
    treeFilterClear: register("tree-filter-clear", "close"),
    treeItemLoading: register("tree-item-loading", "loading"),
    menuSelection: register("menu-selection", "check"),
    menuSubmenu: register("menu-submenu", "chevron-right"),
    menuBarMore: register("menubar-more", "more"),
    scrollbarButtonLeft: register("scrollbar-button-left", "triangle-left"),
    scrollbarButtonRight: register("scrollbar-button-right", "triangle-right"),
    scrollbarButtonUp: register("scrollbar-button-up", "triangle-up"),
    scrollbarButtonDown: register("scrollbar-button-down", "triangle-down"),
    toolBarMore: register("toolbar-more", "more"),
    quickInputBack: register("quick-input-back", "arrow-left"),
    dropDownButton: register("drop-down-button", 60084),
    symbolCustomColor: register("symbol-customcolor", 60252),
    exportIcon: register("export", 60332),
    workspaceUnspecified: register("workspace-unspecified", 60355),
    newLine: register("newline", 60394),
    thumbsDownFilled: register("thumbsdown-filled", 60435),
    thumbsUpFilled: register("thumbsup-filled", 60436),
    gitFetch: register("git-fetch", 60445),
    lightbulbSparkleAutofix: register("lightbulb-sparkle-autofix", 60447),
    debugBreakpointPending: register("debug-breakpoint-pending", 60377)
  };
  var Codicon = {
    ...codiconsLibrary,
    ...codiconsDerived
  };

  // node_modules/monaco-editor/esm/vs/editor/common/tokenizationRegistry.js
  var TokenizationRegistry = class {
    constructor() {
      this._tokenizationSupports = /* @__PURE__ */ new Map();
      this._factories = /* @__PURE__ */ new Map();
      this._onDidChange = new Emitter();
      this.onDidChange = this._onDidChange.event;
      this._colorMap = null;
    }
    handleChange(languageIds) {
      this._onDidChange.fire({
        changedLanguages: languageIds,
        changedColorMap: false
      });
    }
    register(languageId, support) {
      this._tokenizationSupports.set(languageId, support);
      this.handleChange([languageId]);
      return toDisposable(() => {
        if (this._tokenizationSupports.get(languageId) !== support) {
          return;
        }
        this._tokenizationSupports.delete(languageId);
        this.handleChange([languageId]);
      });
    }
    get(languageId) {
      return this._tokenizationSupports.get(languageId) || null;
    }
    registerFactory(languageId, factory) {
      var _a4;
      (_a4 = this._factories.get(languageId)) === null || _a4 === void 0 ? void 0 : _a4.dispose();
      const myData = new TokenizationSupportFactoryData(this, languageId, factory);
      this._factories.set(languageId, myData);
      return toDisposable(() => {
        const v = this._factories.get(languageId);
        if (!v || v !== myData) {
          return;
        }
        this._factories.delete(languageId);
        v.dispose();
      });
    }
    async getOrCreate(languageId) {
      const tokenizationSupport = this.get(languageId);
      if (tokenizationSupport) {
        return tokenizationSupport;
      }
      const factory = this._factories.get(languageId);
      if (!factory || factory.isResolved) {
        return null;
      }
      await factory.resolve();
      return this.get(languageId);
    }
    isResolved(languageId) {
      const tokenizationSupport = this.get(languageId);
      if (tokenizationSupport) {
        return true;
      }
      const factory = this._factories.get(languageId);
      if (!factory || factory.isResolved) {
        return true;
      }
      return false;
    }
    setColorMap(colorMap) {
      this._colorMap = colorMap;
      this._onDidChange.fire({
        changedLanguages: Array.from(this._tokenizationSupports.keys()),
        changedColorMap: true
      });
    }
    getColorMap() {
      return this._colorMap;
    }
    getDefaultBackground() {
      if (this._colorMap && this._colorMap.length > 2) {
        return this._colorMap[
          2
          /* ColorId.DefaultBackground */
        ];
      }
      return null;
    }
  };
  var TokenizationSupportFactoryData = class extends Disposable {
    get isResolved() {
      return this._isResolved;
    }
    constructor(_registry, _languageId, _factory) {
      super();
      this._registry = _registry;
      this._languageId = _languageId;
      this._factory = _factory;
      this._isDisposed = false;
      this._resolvePromise = null;
      this._isResolved = false;
    }
    dispose() {
      this._isDisposed = true;
      super.dispose();
    }
    async resolve() {
      if (!this._resolvePromise) {
        this._resolvePromise = this._create();
      }
      return this._resolvePromise;
    }
    async _create() {
      const value = await this._factory.tokenizationSupport;
      this._isResolved = true;
      if (value && !this._isDisposed) {
        this._register(this._registry.register(this._languageId, value));
      }
    }
  };

  // node_modules/monaco-editor/esm/vs/editor/common/languages.js
  var Token = class {
    constructor(offset, type, language) {
      this.offset = offset;
      this.type = type;
      this.language = language;
      this._tokenBrand = void 0;
    }
    toString() {
      return "(" + this.offset + ", " + this.type + ")";
    }
  };
  var HoverVerbosityAction;
  (function(HoverVerbosityAction3) {
    HoverVerbosityAction3[HoverVerbosityAction3["Increase"] = 0] = "Increase";
    HoverVerbosityAction3[HoverVerbosityAction3["Decrease"] = 1] = "Decrease";
  })(HoverVerbosityAction || (HoverVerbosityAction = {}));
  var CompletionItemKinds;
  (function(CompletionItemKinds2) {
    const byKind = /* @__PURE__ */ new Map();
    byKind.set(0, Codicon.symbolMethod);
    byKind.set(1, Codicon.symbolFunction);
    byKind.set(2, Codicon.symbolConstructor);
    byKind.set(3, Codicon.symbolField);
    byKind.set(4, Codicon.symbolVariable);
    byKind.set(5, Codicon.symbolClass);
    byKind.set(6, Codicon.symbolStruct);
    byKind.set(7, Codicon.symbolInterface);
    byKind.set(8, Codicon.symbolModule);
    byKind.set(9, Codicon.symbolProperty);
    byKind.set(10, Codicon.symbolEvent);
    byKind.set(11, Codicon.symbolOperator);
    byKind.set(12, Codicon.symbolUnit);
    byKind.set(13, Codicon.symbolValue);
    byKind.set(15, Codicon.symbolEnum);
    byKind.set(14, Codicon.symbolConstant);
    byKind.set(15, Codicon.symbolEnum);
    byKind.set(16, Codicon.symbolEnumMember);
    byKind.set(17, Codicon.symbolKeyword);
    byKind.set(27, Codicon.symbolSnippet);
    byKind.set(18, Codicon.symbolText);
    byKind.set(19, Codicon.symbolColor);
    byKind.set(20, Codicon.symbolFile);
    byKind.set(21, Codicon.symbolReference);
    byKind.set(22, Codicon.symbolCustomColor);
    byKind.set(23, Codicon.symbolFolder);
    byKind.set(24, Codicon.symbolTypeParameter);
    byKind.set(25, Codicon.account);
    byKind.set(26, Codicon.issues);
    function toIcon(kind) {
      let codicon = byKind.get(kind);
      if (!codicon) {
        console.info("No codicon found for CompletionItemKind " + kind);
        codicon = Codicon.symbolProperty;
      }
      return codicon;
    }
    CompletionItemKinds2.toIcon = toIcon;
    const data = /* @__PURE__ */ new Map();
    data.set(
      "method",
      0
      /* CompletionItemKind.Method */
    );
    data.set(
      "function",
      1
      /* CompletionItemKind.Function */
    );
    data.set(
      "constructor",
      2
      /* CompletionItemKind.Constructor */
    );
    data.set(
      "field",
      3
      /* CompletionItemKind.Field */
    );
    data.set(
      "variable",
      4
      /* CompletionItemKind.Variable */
    );
    data.set(
      "class",
      5
      /* CompletionItemKind.Class */
    );
    data.set(
      "struct",
      6
      /* CompletionItemKind.Struct */
    );
    data.set(
      "interface",
      7
      /* CompletionItemKind.Interface */
    );
    data.set(
      "module",
      8
      /* CompletionItemKind.Module */
    );
    data.set(
      "property",
      9
      /* CompletionItemKind.Property */
    );
    data.set(
      "event",
      10
      /* CompletionItemKind.Event */
    );
    data.set(
      "operator",
      11
      /* CompletionItemKind.Operator */
    );
    data.set(
      "unit",
      12
      /* CompletionItemKind.Unit */
    );
    data.set(
      "value",
      13
      /* CompletionItemKind.Value */
    );
    data.set(
      "constant",
      14
      /* CompletionItemKind.Constant */
    );
    data.set(
      "enum",
      15
      /* CompletionItemKind.Enum */
    );
    data.set(
      "enum-member",
      16
      /* CompletionItemKind.EnumMember */
    );
    data.set(
      "enumMember",
      16
      /* CompletionItemKind.EnumMember */
    );
    data.set(
      "keyword",
      17
      /* CompletionItemKind.Keyword */
    );
    data.set(
      "snippet",
      27
      /* CompletionItemKind.Snippet */
    );
    data.set(
      "text",
      18
      /* CompletionItemKind.Text */
    );
    data.set(
      "color",
      19
      /* CompletionItemKind.Color */
    );
    data.set(
      "file",
      20
      /* CompletionItemKind.File */
    );
    data.set(
      "reference",
      21
      /* CompletionItemKind.Reference */
    );
    data.set(
      "customcolor",
      22
      /* CompletionItemKind.Customcolor */
    );
    data.set(
      "folder",
      23
      /* CompletionItemKind.Folder */
    );
    data.set(
      "type-parameter",
      24
      /* CompletionItemKind.TypeParameter */
    );
    data.set(
      "typeParameter",
      24
      /* CompletionItemKind.TypeParameter */
    );
    data.set(
      "account",
      25
      /* CompletionItemKind.User */
    );
    data.set(
      "issue",
      26
      /* CompletionItemKind.Issue */
    );
    function fromString(value, strict) {
      let res = data.get(value);
      if (typeof res === "undefined" && !strict) {
        res = 9;
      }
      return res;
    }
    CompletionItemKinds2.fromString = fromString;
  })(CompletionItemKinds || (CompletionItemKinds = {}));
  var InlineCompletionTriggerKind;
  (function(InlineCompletionTriggerKind4) {
    InlineCompletionTriggerKind4[InlineCompletionTriggerKind4["Automatic"] = 0] = "Automatic";
    InlineCompletionTriggerKind4[InlineCompletionTriggerKind4["Explicit"] = 1] = "Explicit";
  })(InlineCompletionTriggerKind || (InlineCompletionTriggerKind = {}));
  var DocumentPasteTriggerKind;
  (function(DocumentPasteTriggerKind2) {
    DocumentPasteTriggerKind2[DocumentPasteTriggerKind2["Automatic"] = 0] = "Automatic";
    DocumentPasteTriggerKind2[DocumentPasteTriggerKind2["PasteAs"] = 1] = "PasteAs";
  })(DocumentPasteTriggerKind || (DocumentPasteTriggerKind = {}));
  var SignatureHelpTriggerKind;
  (function(SignatureHelpTriggerKind3) {
    SignatureHelpTriggerKind3[SignatureHelpTriggerKind3["Invoke"] = 1] = "Invoke";
    SignatureHelpTriggerKind3[SignatureHelpTriggerKind3["TriggerCharacter"] = 2] = "TriggerCharacter";
    SignatureHelpTriggerKind3[SignatureHelpTriggerKind3["ContentChange"] = 3] = "ContentChange";
  })(SignatureHelpTriggerKind || (SignatureHelpTriggerKind = {}));
  var DocumentHighlightKind;
  (function(DocumentHighlightKind4) {
    DocumentHighlightKind4[DocumentHighlightKind4["Text"] = 0] = "Text";
    DocumentHighlightKind4[DocumentHighlightKind4["Read"] = 1] = "Read";
    DocumentHighlightKind4[DocumentHighlightKind4["Write"] = 2] = "Write";
  })(DocumentHighlightKind || (DocumentHighlightKind = {}));
  var symbolKindNames = {
    [
      17
      /* SymbolKind.Array */
    ]: localize("Array", "array"),
    [
      16
      /* SymbolKind.Boolean */
    ]: localize("Boolean", "boolean"),
    [
      4
      /* SymbolKind.Class */
    ]: localize("Class", "class"),
    [
      13
      /* SymbolKind.Constant */
    ]: localize("Constant", "constant"),
    [
      8
      /* SymbolKind.Constructor */
    ]: localize("Constructor", "constructor"),
    [
      9
      /* SymbolKind.Enum */
    ]: localize("Enum", "enumeration"),
    [
      21
      /* SymbolKind.EnumMember */
    ]: localize("EnumMember", "enumeration member"),
    [
      23
      /* SymbolKind.Event */
    ]: localize("Event", "event"),
    [
      7
      /* SymbolKind.Field */
    ]: localize("Field", "field"),
    [
      0
      /* SymbolKind.File */
    ]: localize("File", "file"),
    [
      11
      /* SymbolKind.Function */
    ]: localize("Function", "function"),
    [
      10
      /* SymbolKind.Interface */
    ]: localize("Interface", "interface"),
    [
      19
      /* SymbolKind.Key */
    ]: localize("Key", "key"),
    [
      5
      /* SymbolKind.Method */
    ]: localize("Method", "method"),
    [
      1
      /* SymbolKind.Module */
    ]: localize("Module", "module"),
    [
      2
      /* SymbolKind.Namespace */
    ]: localize("Namespace", "namespace"),
    [
      20
      /* SymbolKind.Null */
    ]: localize("Null", "null"),
    [
      15
      /* SymbolKind.Number */
    ]: localize("Number", "number"),
    [
      18
      /* SymbolKind.Object */
    ]: localize("Object", "object"),
    [
      24
      /* SymbolKind.Operator */
    ]: localize("Operator", "operator"),
    [
      3
      /* SymbolKind.Package */
    ]: localize("Package", "package"),
    [
      6
      /* SymbolKind.Property */
    ]: localize("Property", "property"),
    [
      14
      /* SymbolKind.String */
    ]: localize("String", "string"),
    [
      22
      /* SymbolKind.Struct */
    ]: localize("Struct", "struct"),
    [
      25
      /* SymbolKind.TypeParameter */
    ]: localize("TypeParameter", "type parameter"),
    [
      12
      /* SymbolKind.Variable */
    ]: localize("Variable", "variable")
  };
  var SymbolKinds;
  (function(SymbolKinds2) {
    const byKind = /* @__PURE__ */ new Map();
    byKind.set(0, Codicon.symbolFile);
    byKind.set(1, Codicon.symbolModule);
    byKind.set(2, Codicon.symbolNamespace);
    byKind.set(3, Codicon.symbolPackage);
    byKind.set(4, Codicon.symbolClass);
    byKind.set(5, Codicon.symbolMethod);
    byKind.set(6, Codicon.symbolProperty);
    byKind.set(7, Codicon.symbolField);
    byKind.set(8, Codicon.symbolConstructor);
    byKind.set(9, Codicon.symbolEnum);
    byKind.set(10, Codicon.symbolInterface);
    byKind.set(11, Codicon.symbolFunction);
    byKind.set(12, Codicon.symbolVariable);
    byKind.set(13, Codicon.symbolConstant);
    byKind.set(14, Codicon.symbolString);
    byKind.set(15, Codicon.symbolNumber);
    byKind.set(16, Codicon.symbolBoolean);
    byKind.set(17, Codicon.symbolArray);
    byKind.set(18, Codicon.symbolObject);
    byKind.set(19, Codicon.symbolKey);
    byKind.set(20, Codicon.symbolNull);
    byKind.set(21, Codicon.symbolEnumMember);
    byKind.set(22, Codicon.symbolStruct);
    byKind.set(23, Codicon.symbolEvent);
    byKind.set(24, Codicon.symbolOperator);
    byKind.set(25, Codicon.symbolTypeParameter);
    function toIcon(kind) {
      let icon = byKind.get(kind);
      if (!icon) {
        console.info("No codicon found for SymbolKind " + kind);
        icon = Codicon.symbolProperty;
      }
      return icon;
    }
    SymbolKinds2.toIcon = toIcon;
  })(SymbolKinds || (SymbolKinds = {}));
  var FoldingRangeKind = class _FoldingRangeKind {
    /**
     * Returns a {@link FoldingRangeKind} for the given value.
     *
     * @param value of the kind.
     */
    static fromValue(value) {
      switch (value) {
        case "comment":
          return _FoldingRangeKind.Comment;
        case "imports":
          return _FoldingRangeKind.Imports;
        case "region":
          return _FoldingRangeKind.Region;
      }
      return new _FoldingRangeKind(value);
    }
    /**
     * Creates a new {@link FoldingRangeKind}.
     *
     * @param value of the kind.
     */
    constructor(value) {
      this.value = value;
    }
  };
  FoldingRangeKind.Comment = new FoldingRangeKind("comment");
  FoldingRangeKind.Imports = new FoldingRangeKind("imports");
  FoldingRangeKind.Region = new FoldingRangeKind("region");
  var NewSymbolNameTag;
  (function(NewSymbolNameTag3) {
    NewSymbolNameTag3[NewSymbolNameTag3["AIGenerated"] = 1] = "AIGenerated";
  })(NewSymbolNameTag || (NewSymbolNameTag = {}));
  var NewSymbolNameTriggerKind;
  (function(NewSymbolNameTriggerKind3) {
    NewSymbolNameTriggerKind3[NewSymbolNameTriggerKind3["Invoke"] = 0] = "Invoke";
    NewSymbolNameTriggerKind3[NewSymbolNameTriggerKind3["Automatic"] = 1] = "Automatic";
  })(NewSymbolNameTriggerKind || (NewSymbolNameTriggerKind = {}));
  var Command;
  (function(Command3) {
    function is(obj) {
      if (!obj || typeof obj !== "object") {
        return false;
      }
      return typeof obj.id === "string" && typeof obj.title === "string";
    }
    Command3.is = is;
  })(Command || (Command = {}));
  var InlayHintKind;
  (function(InlayHintKind4) {
    InlayHintKind4[InlayHintKind4["Type"] = 1] = "Type";
    InlayHintKind4[InlayHintKind4["Parameter"] = 2] = "Parameter";
  })(InlayHintKind || (InlayHintKind = {}));
  var TokenizationRegistry2 = new TokenizationRegistry();
  var InlineEditTriggerKind;
  (function(InlineEditTriggerKind3) {
    InlineEditTriggerKind3[InlineEditTriggerKind3["Invoke"] = 0] = "Invoke";
    InlineEditTriggerKind3[InlineEditTriggerKind3["Automatic"] = 1] = "Automatic";
  })(InlineEditTriggerKind || (InlineEditTriggerKind = {}));

  // node_modules/monaco-editor/esm/vs/editor/common/standalone/standaloneEnums.js
  var AccessibilitySupport;
  (function(AccessibilitySupport2) {
    AccessibilitySupport2[AccessibilitySupport2["Unknown"] = 0] = "Unknown";
    AccessibilitySupport2[AccessibilitySupport2["Disabled"] = 1] = "Disabled";
    AccessibilitySupport2[AccessibilitySupport2["Enabled"] = 2] = "Enabled";
  })(AccessibilitySupport || (AccessibilitySupport = {}));
  var CodeActionTriggerType;
  (function(CodeActionTriggerType2) {
    CodeActionTriggerType2[CodeActionTriggerType2["Invoke"] = 1] = "Invoke";
    CodeActionTriggerType2[CodeActionTriggerType2["Auto"] = 2] = "Auto";
  })(CodeActionTriggerType || (CodeActionTriggerType = {}));
  var CompletionItemInsertTextRule;
  (function(CompletionItemInsertTextRule2) {
    CompletionItemInsertTextRule2[CompletionItemInsertTextRule2["None"] = 0] = "None";
    CompletionItemInsertTextRule2[CompletionItemInsertTextRule2["KeepWhitespace"] = 1] = "KeepWhitespace";
    CompletionItemInsertTextRule2[CompletionItemInsertTextRule2["InsertAsSnippet"] = 4] = "InsertAsSnippet";
  })(CompletionItemInsertTextRule || (CompletionItemInsertTextRule = {}));
  var CompletionItemKind;
  (function(CompletionItemKind3) {
    CompletionItemKind3[CompletionItemKind3["Method"] = 0] = "Method";
    CompletionItemKind3[CompletionItemKind3["Function"] = 1] = "Function";
    CompletionItemKind3[CompletionItemKind3["Constructor"] = 2] = "Constructor";
    CompletionItemKind3[CompletionItemKind3["Field"] = 3] = "Field";
    CompletionItemKind3[CompletionItemKind3["Variable"] = 4] = "Variable";
    CompletionItemKind3[CompletionItemKind3["Class"] = 5] = "Class";
    CompletionItemKind3[CompletionItemKind3["Struct"] = 6] = "Struct";
    CompletionItemKind3[CompletionItemKind3["Interface"] = 7] = "Interface";
    CompletionItemKind3[CompletionItemKind3["Module"] = 8] = "Module";
    CompletionItemKind3[CompletionItemKind3["Property"] = 9] = "Property";
    CompletionItemKind3[CompletionItemKind3["Event"] = 10] = "Event";
    CompletionItemKind3[CompletionItemKind3["Operator"] = 11] = "Operator";
    CompletionItemKind3[CompletionItemKind3["Unit"] = 12] = "Unit";
    CompletionItemKind3[CompletionItemKind3["Value"] = 13] = "Value";
    CompletionItemKind3[CompletionItemKind3["Constant"] = 14] = "Constant";
    CompletionItemKind3[CompletionItemKind3["Enum"] = 15] = "Enum";
    CompletionItemKind3[CompletionItemKind3["EnumMember"] = 16] = "EnumMember";
    CompletionItemKind3[CompletionItemKind3["Keyword"] = 17] = "Keyword";
    CompletionItemKind3[CompletionItemKind3["Text"] = 18] = "Text";
    CompletionItemKind3[CompletionItemKind3["Color"] = 19] = "Color";
    CompletionItemKind3[CompletionItemKind3["File"] = 20] = "File";
    CompletionItemKind3[CompletionItemKind3["Reference"] = 21] = "Reference";
    CompletionItemKind3[CompletionItemKind3["Customcolor"] = 22] = "Customcolor";
    CompletionItemKind3[CompletionItemKind3["Folder"] = 23] = "Folder";
    CompletionItemKind3[CompletionItemKind3["TypeParameter"] = 24] = "TypeParameter";
    CompletionItemKind3[CompletionItemKind3["User"] = 25] = "User";
    CompletionItemKind3[CompletionItemKind3["Issue"] = 26] = "Issue";
    CompletionItemKind3[CompletionItemKind3["Snippet"] = 27] = "Snippet";
  })(CompletionItemKind || (CompletionItemKind = {}));
  var CompletionItemTag;
  (function(CompletionItemTag3) {
    CompletionItemTag3[CompletionItemTag3["Deprecated"] = 1] = "Deprecated";
  })(CompletionItemTag || (CompletionItemTag = {}));
  var CompletionTriggerKind;
  (function(CompletionTriggerKind2) {
    CompletionTriggerKind2[CompletionTriggerKind2["Invoke"] = 0] = "Invoke";
    CompletionTriggerKind2[CompletionTriggerKind2["TriggerCharacter"] = 1] = "TriggerCharacter";
    CompletionTriggerKind2[CompletionTriggerKind2["TriggerForIncompleteCompletions"] = 2] = "TriggerForIncompleteCompletions";
  })(CompletionTriggerKind || (CompletionTriggerKind = {}));
  var ContentWidgetPositionPreference;
  (function(ContentWidgetPositionPreference2) {
    ContentWidgetPositionPreference2[ContentWidgetPositionPreference2["EXACT"] = 0] = "EXACT";
    ContentWidgetPositionPreference2[ContentWidgetPositionPreference2["ABOVE"] = 1] = "ABOVE";
    ContentWidgetPositionPreference2[ContentWidgetPositionPreference2["BELOW"] = 2] = "BELOW";
  })(ContentWidgetPositionPreference || (ContentWidgetPositionPreference = {}));
  var CursorChangeReason;
  (function(CursorChangeReason2) {
    CursorChangeReason2[CursorChangeReason2["NotSet"] = 0] = "NotSet";
    CursorChangeReason2[CursorChangeReason2["ContentFlush"] = 1] = "ContentFlush";
    CursorChangeReason2[CursorChangeReason2["RecoverFromMarkers"] = 2] = "RecoverFromMarkers";
    CursorChangeReason2[CursorChangeReason2["Explicit"] = 3] = "Explicit";
    CursorChangeReason2[CursorChangeReason2["Paste"] = 4] = "Paste";
    CursorChangeReason2[CursorChangeReason2["Undo"] = 5] = "Undo";
    CursorChangeReason2[CursorChangeReason2["Redo"] = 6] = "Redo";
  })(CursorChangeReason || (CursorChangeReason = {}));
  var DefaultEndOfLine;
  (function(DefaultEndOfLine2) {
    DefaultEndOfLine2[DefaultEndOfLine2["LF"] = 1] = "LF";
    DefaultEndOfLine2[DefaultEndOfLine2["CRLF"] = 2] = "CRLF";
  })(DefaultEndOfLine || (DefaultEndOfLine = {}));
  var DocumentHighlightKind2;
  (function(DocumentHighlightKind4) {
    DocumentHighlightKind4[DocumentHighlightKind4["Text"] = 0] = "Text";
    DocumentHighlightKind4[DocumentHighlightKind4["Read"] = 1] = "Read";
    DocumentHighlightKind4[DocumentHighlightKind4["Write"] = 2] = "Write";
  })(DocumentHighlightKind2 || (DocumentHighlightKind2 = {}));
  var EditorAutoIndentStrategy;
  (function(EditorAutoIndentStrategy2) {
    EditorAutoIndentStrategy2[EditorAutoIndentStrategy2["None"] = 0] = "None";
    EditorAutoIndentStrategy2[EditorAutoIndentStrategy2["Keep"] = 1] = "Keep";
    EditorAutoIndentStrategy2[EditorAutoIndentStrategy2["Brackets"] = 2] = "Brackets";
    EditorAutoIndentStrategy2[EditorAutoIndentStrategy2["Advanced"] = 3] = "Advanced";
    EditorAutoIndentStrategy2[EditorAutoIndentStrategy2["Full"] = 4] = "Full";
  })(EditorAutoIndentStrategy || (EditorAutoIndentStrategy = {}));
  var EditorOption;
  (function(EditorOption2) {
    EditorOption2[EditorOption2["acceptSuggestionOnCommitCharacter"] = 0] = "acceptSuggestionOnCommitCharacter";
    EditorOption2[EditorOption2["acceptSuggestionOnEnter"] = 1] = "acceptSuggestionOnEnter";
    EditorOption2[EditorOption2["accessibilitySupport"] = 2] = "accessibilitySupport";
    EditorOption2[EditorOption2["accessibilityPageSize"] = 3] = "accessibilityPageSize";
    EditorOption2[EditorOption2["ariaLabel"] = 4] = "ariaLabel";
    EditorOption2[EditorOption2["ariaRequired"] = 5] = "ariaRequired";
    EditorOption2[EditorOption2["autoClosingBrackets"] = 6] = "autoClosingBrackets";
    EditorOption2[EditorOption2["autoClosingComments"] = 7] = "autoClosingComments";
    EditorOption2[EditorOption2["screenReaderAnnounceInlineSuggestion"] = 8] = "screenReaderAnnounceInlineSuggestion";
    EditorOption2[EditorOption2["autoClosingDelete"] = 9] = "autoClosingDelete";
    EditorOption2[EditorOption2["autoClosingOvertype"] = 10] = "autoClosingOvertype";
    EditorOption2[EditorOption2["autoClosingQuotes"] = 11] = "autoClosingQuotes";
    EditorOption2[EditorOption2["autoIndent"] = 12] = "autoIndent";
    EditorOption2[EditorOption2["automaticLayout"] = 13] = "automaticLayout";
    EditorOption2[EditorOption2["autoSurround"] = 14] = "autoSurround";
    EditorOption2[EditorOption2["bracketPairColorization"] = 15] = "bracketPairColorization";
    EditorOption2[EditorOption2["guides"] = 16] = "guides";
    EditorOption2[EditorOption2["codeLens"] = 17] = "codeLens";
    EditorOption2[EditorOption2["codeLensFontFamily"] = 18] = "codeLensFontFamily";
    EditorOption2[EditorOption2["codeLensFontSize"] = 19] = "codeLensFontSize";
    EditorOption2[EditorOption2["colorDecorators"] = 20] = "colorDecorators";
    EditorOption2[EditorOption2["colorDecoratorsLimit"] = 21] = "colorDecoratorsLimit";
    EditorOption2[EditorOption2["columnSelection"] = 22] = "columnSelection";
    EditorOption2[EditorOption2["comments"] = 23] = "comments";
    EditorOption2[EditorOption2["contextmenu"] = 24] = "contextmenu";
    EditorOption2[EditorOption2["copyWithSyntaxHighlighting"] = 25] = "copyWithSyntaxHighlighting";
    EditorOption2[EditorOption2["cursorBlinking"] = 26] = "cursorBlinking";
    EditorOption2[EditorOption2["cursorSmoothCaretAnimation"] = 27] = "cursorSmoothCaretAnimation";
    EditorOption2[EditorOption2["cursorStyle"] = 28] = "cursorStyle";
    EditorOption2[EditorOption2["cursorSurroundingLines"] = 29] = "cursorSurroundingLines";
    EditorOption2[EditorOption2["cursorSurroundingLinesStyle"] = 30] = "cursorSurroundingLinesStyle";
    EditorOption2[EditorOption2["cursorWidth"] = 31] = "cursorWidth";
    EditorOption2[EditorOption2["disableLayerHinting"] = 32] = "disableLayerHinting";
    EditorOption2[EditorOption2["disableMonospaceOptimizations"] = 33] = "disableMonospaceOptimizations";
    EditorOption2[EditorOption2["domReadOnly"] = 34] = "domReadOnly";
    EditorOption2[EditorOption2["dragAndDrop"] = 35] = "dragAndDrop";
    EditorOption2[EditorOption2["dropIntoEditor"] = 36] = "dropIntoEditor";
    EditorOption2[EditorOption2["emptySelectionClipboard"] = 37] = "emptySelectionClipboard";
    EditorOption2[EditorOption2["experimentalWhitespaceRendering"] = 38] = "experimentalWhitespaceRendering";
    EditorOption2[EditorOption2["extraEditorClassName"] = 39] = "extraEditorClassName";
    EditorOption2[EditorOption2["fastScrollSensitivity"] = 40] = "fastScrollSensitivity";
    EditorOption2[EditorOption2["find"] = 41] = "find";
    EditorOption2[EditorOption2["fixedOverflowWidgets"] = 42] = "fixedOverflowWidgets";
    EditorOption2[EditorOption2["folding"] = 43] = "folding";
    EditorOption2[EditorOption2["foldingStrategy"] = 44] = "foldingStrategy";
    EditorOption2[EditorOption2["foldingHighlight"] = 45] = "foldingHighlight";
    EditorOption2[EditorOption2["foldingImportsByDefault"] = 46] = "foldingImportsByDefault";
    EditorOption2[EditorOption2["foldingMaximumRegions"] = 47] = "foldingMaximumRegions";
    EditorOption2[EditorOption2["unfoldOnClickAfterEndOfLine"] = 48] = "unfoldOnClickAfterEndOfLine";
    EditorOption2[EditorOption2["fontFamily"] = 49] = "fontFamily";
    EditorOption2[EditorOption2["fontInfo"] = 50] = "fontInfo";
    EditorOption2[EditorOption2["fontLigatures"] = 51] = "fontLigatures";
    EditorOption2[EditorOption2["fontSize"] = 52] = "fontSize";
    EditorOption2[EditorOption2["fontWeight"] = 53] = "fontWeight";
    EditorOption2[EditorOption2["fontVariations"] = 54] = "fontVariations";
    EditorOption2[EditorOption2["formatOnPaste"] = 55] = "formatOnPaste";
    EditorOption2[EditorOption2["formatOnType"] = 56] = "formatOnType";
    EditorOption2[EditorOption2["glyphMargin"] = 57] = "glyphMargin";
    EditorOption2[EditorOption2["gotoLocation"] = 58] = "gotoLocation";
    EditorOption2[EditorOption2["hideCursorInOverviewRuler"] = 59] = "hideCursorInOverviewRuler";
    EditorOption2[EditorOption2["hover"] = 60] = "hover";
    EditorOption2[EditorOption2["inDiffEditor"] = 61] = "inDiffEditor";
    EditorOption2[EditorOption2["inlineSuggest"] = 62] = "inlineSuggest";
    EditorOption2[EditorOption2["inlineEdit"] = 63] = "inlineEdit";
    EditorOption2[EditorOption2["letterSpacing"] = 64] = "letterSpacing";
    EditorOption2[EditorOption2["lightbulb"] = 65] = "lightbulb";
    EditorOption2[EditorOption2["lineDecorationsWidth"] = 66] = "lineDecorationsWidth";
    EditorOption2[EditorOption2["lineHeight"] = 67] = "lineHeight";
    EditorOption2[EditorOption2["lineNumbers"] = 68] = "lineNumbers";
    EditorOption2[EditorOption2["lineNumbersMinChars"] = 69] = "lineNumbersMinChars";
    EditorOption2[EditorOption2["linkedEditing"] = 70] = "linkedEditing";
    EditorOption2[EditorOption2["links"] = 71] = "links";
    EditorOption2[EditorOption2["matchBrackets"] = 72] = "matchBrackets";
    EditorOption2[EditorOption2["minimap"] = 73] = "minimap";
    EditorOption2[EditorOption2["mouseStyle"] = 74] = "mouseStyle";
    EditorOption2[EditorOption2["mouseWheelScrollSensitivity"] = 75] = "mouseWheelScrollSensitivity";
    EditorOption2[EditorOption2["mouseWheelZoom"] = 76] = "mouseWheelZoom";
    EditorOption2[EditorOption2["multiCursorMergeOverlapping"] = 77] = "multiCursorMergeOverlapping";
    EditorOption2[EditorOption2["multiCursorModifier"] = 78] = "multiCursorModifier";
    EditorOption2[EditorOption2["multiCursorPaste"] = 79] = "multiCursorPaste";
    EditorOption2[EditorOption2["multiCursorLimit"] = 80] = "multiCursorLimit";
    EditorOption2[EditorOption2["occurrencesHighlight"] = 81] = "occurrencesHighlight";
    EditorOption2[EditorOption2["overviewRulerBorder"] = 82] = "overviewRulerBorder";
    EditorOption2[EditorOption2["overviewRulerLanes"] = 83] = "overviewRulerLanes";
    EditorOption2[EditorOption2["padding"] = 84] = "padding";
    EditorOption2[EditorOption2["pasteAs"] = 85] = "pasteAs";
    EditorOption2[EditorOption2["parameterHints"] = 86] = "parameterHints";
    EditorOption2[EditorOption2["peekWidgetDefaultFocus"] = 87] = "peekWidgetDefaultFocus";
    EditorOption2[EditorOption2["definitionLinkOpensInPeek"] = 88] = "definitionLinkOpensInPeek";
    EditorOption2[EditorOption2["quickSuggestions"] = 89] = "quickSuggestions";
    EditorOption2[EditorOption2["quickSuggestionsDelay"] = 90] = "quickSuggestionsDelay";
    EditorOption2[EditorOption2["readOnly"] = 91] = "readOnly";
    EditorOption2[EditorOption2["readOnlyMessage"] = 92] = "readOnlyMessage";
    EditorOption2[EditorOption2["renameOnType"] = 93] = "renameOnType";
    EditorOption2[EditorOption2["renderControlCharacters"] = 94] = "renderControlCharacters";
    EditorOption2[EditorOption2["renderFinalNewline"] = 95] = "renderFinalNewline";
    EditorOption2[EditorOption2["renderLineHighlight"] = 96] = "renderLineHighlight";
    EditorOption2[EditorOption2["renderLineHighlightOnlyWhenFocus"] = 97] = "renderLineHighlightOnlyWhenFocus";
    EditorOption2[EditorOption2["renderValidationDecorations"] = 98] = "renderValidationDecorations";
    EditorOption2[EditorOption2["renderWhitespace"] = 99] = "renderWhitespace";
    EditorOption2[EditorOption2["revealHorizontalRightPadding"] = 100] = "revealHorizontalRightPadding";
    EditorOption2[EditorOption2["roundedSelection"] = 101] = "roundedSelection";
    EditorOption2[EditorOption2["rulers"] = 102] = "rulers";
    EditorOption2[EditorOption2["scrollbar"] = 103] = "scrollbar";
    EditorOption2[EditorOption2["scrollBeyondLastColumn"] = 104] = "scrollBeyondLastColumn";
    EditorOption2[EditorOption2["scrollBeyondLastLine"] = 105] = "scrollBeyondLastLine";
    EditorOption2[EditorOption2["scrollPredominantAxis"] = 106] = "scrollPredominantAxis";
    EditorOption2[EditorOption2["selectionClipboard"] = 107] = "selectionClipboard";
    EditorOption2[EditorOption2["selectionHighlight"] = 108] = "selectionHighlight";
    EditorOption2[EditorOption2["selectOnLineNumbers"] = 109] = "selectOnLineNumbers";
    EditorOption2[EditorOption2["showFoldingControls"] = 110] = "showFoldingControls";
    EditorOption2[EditorOption2["showUnused"] = 111] = "showUnused";
    EditorOption2[EditorOption2["snippetSuggestions"] = 112] = "snippetSuggestions";
    EditorOption2[EditorOption2["smartSelect"] = 113] = "smartSelect";
    EditorOption2[EditorOption2["smoothScrolling"] = 114] = "smoothScrolling";
    EditorOption2[EditorOption2["stickyScroll"] = 115] = "stickyScroll";
    EditorOption2[EditorOption2["stickyTabStops"] = 116] = "stickyTabStops";
    EditorOption2[EditorOption2["stopRenderingLineAfter"] = 117] = "stopRenderingLineAfter";
    EditorOption2[EditorOption2["suggest"] = 118] = "suggest";
    EditorOption2[EditorOption2["suggestFontSize"] = 119] = "suggestFontSize";
    EditorOption2[EditorOption2["suggestLineHeight"] = 120] = "suggestLineHeight";
    EditorOption2[EditorOption2["suggestOnTriggerCharacters"] = 121] = "suggestOnTriggerCharacters";
    EditorOption2[EditorOption2["suggestSelection"] = 122] = "suggestSelection";
    EditorOption2[EditorOption2["tabCompletion"] = 123] = "tabCompletion";
    EditorOption2[EditorOption2["tabIndex"] = 124] = "tabIndex";
    EditorOption2[EditorOption2["unicodeHighlighting"] = 125] = "unicodeHighlighting";
    EditorOption2[EditorOption2["unusualLineTerminators"] = 126] = "unusualLineTerminators";
    EditorOption2[EditorOption2["useShadowDOM"] = 127] = "useShadowDOM";
    EditorOption2[EditorOption2["useTabStops"] = 128] = "useTabStops";
    EditorOption2[EditorOption2["wordBreak"] = 129] = "wordBreak";
    EditorOption2[EditorOption2["wordSegmenterLocales"] = 130] = "wordSegmenterLocales";
    EditorOption2[EditorOption2["wordSeparators"] = 131] = "wordSeparators";
    EditorOption2[EditorOption2["wordWrap"] = 132] = "wordWrap";
    EditorOption2[EditorOption2["wordWrapBreakAfterCharacters"] = 133] = "wordWrapBreakAfterCharacters";
    EditorOption2[EditorOption2["wordWrapBreakBeforeCharacters"] = 134] = "wordWrapBreakBeforeCharacters";
    EditorOption2[EditorOption2["wordWrapColumn"] = 135] = "wordWrapColumn";
    EditorOption2[EditorOption2["wordWrapOverride1"] = 136] = "wordWrapOverride1";
    EditorOption2[EditorOption2["wordWrapOverride2"] = 137] = "wordWrapOverride2";
    EditorOption2[EditorOption2["wrappingIndent"] = 138] = "wrappingIndent";
    EditorOption2[EditorOption2["wrappingStrategy"] = 139] = "wrappingStrategy";
    EditorOption2[EditorOption2["showDeprecated"] = 140] = "showDeprecated";
    EditorOption2[EditorOption2["inlayHints"] = 141] = "inlayHints";
    EditorOption2[EditorOption2["editorClassName"] = 142] = "editorClassName";
    EditorOption2[EditorOption2["pixelRatio"] = 143] = "pixelRatio";
    EditorOption2[EditorOption2["tabFocusMode"] = 144] = "tabFocusMode";
    EditorOption2[EditorOption2["layoutInfo"] = 145] = "layoutInfo";
    EditorOption2[EditorOption2["wrappingInfo"] = 146] = "wrappingInfo";
    EditorOption2[EditorOption2["defaultColorDecorators"] = 147] = "defaultColorDecorators";
    EditorOption2[EditorOption2["colorDecoratorsActivatedOn"] = 148] = "colorDecoratorsActivatedOn";
    EditorOption2[EditorOption2["inlineCompletionsAccessibilityVerbose"] = 149] = "inlineCompletionsAccessibilityVerbose";
  })(EditorOption || (EditorOption = {}));
  var EndOfLinePreference;
  (function(EndOfLinePreference2) {
    EndOfLinePreference2[EndOfLinePreference2["TextDefined"] = 0] = "TextDefined";
    EndOfLinePreference2[EndOfLinePreference2["LF"] = 1] = "LF";
    EndOfLinePreference2[EndOfLinePreference2["CRLF"] = 2] = "CRLF";
  })(EndOfLinePreference || (EndOfLinePreference = {}));
  var EndOfLineSequence;
  (function(EndOfLineSequence2) {
    EndOfLineSequence2[EndOfLineSequence2["LF"] = 0] = "LF";
    EndOfLineSequence2[EndOfLineSequence2["CRLF"] = 1] = "CRLF";
  })(EndOfLineSequence || (EndOfLineSequence = {}));
  var GlyphMarginLane;
  (function(GlyphMarginLane3) {
    GlyphMarginLane3[GlyphMarginLane3["Left"] = 1] = "Left";
    GlyphMarginLane3[GlyphMarginLane3["Center"] = 2] = "Center";
    GlyphMarginLane3[GlyphMarginLane3["Right"] = 3] = "Right";
  })(GlyphMarginLane || (GlyphMarginLane = {}));
  var HoverVerbosityAction2;
  (function(HoverVerbosityAction3) {
    HoverVerbosityAction3[HoverVerbosityAction3["Increase"] = 0] = "Increase";
    HoverVerbosityAction3[HoverVerbosityAction3["Decrease"] = 1] = "Decrease";
  })(HoverVerbosityAction2 || (HoverVerbosityAction2 = {}));
  var IndentAction;
  (function(IndentAction2) {
    IndentAction2[IndentAction2["None"] = 0] = "None";
    IndentAction2[IndentAction2["Indent"] = 1] = "Indent";
    IndentAction2[IndentAction2["IndentOutdent"] = 2] = "IndentOutdent";
    IndentAction2[IndentAction2["Outdent"] = 3] = "Outdent";
  })(IndentAction || (IndentAction = {}));
  var InjectedTextCursorStops;
  (function(InjectedTextCursorStops3) {
    InjectedTextCursorStops3[InjectedTextCursorStops3["Both"] = 0] = "Both";
    InjectedTextCursorStops3[InjectedTextCursorStops3["Right"] = 1] = "Right";
    InjectedTextCursorStops3[InjectedTextCursorStops3["Left"] = 2] = "Left";
    InjectedTextCursorStops3[InjectedTextCursorStops3["None"] = 3] = "None";
  })(InjectedTextCursorStops || (InjectedTextCursorStops = {}));
  var InlayHintKind2;
  (function(InlayHintKind4) {
    InlayHintKind4[InlayHintKind4["Type"] = 1] = "Type";
    InlayHintKind4[InlayHintKind4["Parameter"] = 2] = "Parameter";
  })(InlayHintKind2 || (InlayHintKind2 = {}));
  var InlineCompletionTriggerKind2;
  (function(InlineCompletionTriggerKind4) {
    InlineCompletionTriggerKind4[InlineCompletionTriggerKind4["Automatic"] = 0] = "Automatic";
    InlineCompletionTriggerKind4[InlineCompletionTriggerKind4["Explicit"] = 1] = "Explicit";
  })(InlineCompletionTriggerKind2 || (InlineCompletionTriggerKind2 = {}));
  var InlineEditTriggerKind2;
  (function(InlineEditTriggerKind3) {
    InlineEditTriggerKind3[InlineEditTriggerKind3["Invoke"] = 0] = "Invoke";
    InlineEditTriggerKind3[InlineEditTriggerKind3["Automatic"] = 1] = "Automatic";
  })(InlineEditTriggerKind2 || (InlineEditTriggerKind2 = {}));
  var KeyCode;
  (function(KeyCode2) {
    KeyCode2[KeyCode2["DependsOnKbLayout"] = -1] = "DependsOnKbLayout";
    KeyCode2[KeyCode2["Unknown"] = 0] = "Unknown";
    KeyCode2[KeyCode2["Backspace"] = 1] = "Backspace";
    KeyCode2[KeyCode2["Tab"] = 2] = "Tab";
    KeyCode2[KeyCode2["Enter"] = 3] = "Enter";
    KeyCode2[KeyCode2["Shift"] = 4] = "Shift";
    KeyCode2[KeyCode2["Ctrl"] = 5] = "Ctrl";
    KeyCode2[KeyCode2["Alt"] = 6] = "Alt";
    KeyCode2[KeyCode2["PauseBreak"] = 7] = "PauseBreak";
    KeyCode2[KeyCode2["CapsLock"] = 8] = "CapsLock";
    KeyCode2[KeyCode2["Escape"] = 9] = "Escape";
    KeyCode2[KeyCode2["Space"] = 10] = "Space";
    KeyCode2[KeyCode2["PageUp"] = 11] = "PageUp";
    KeyCode2[KeyCode2["PageDown"] = 12] = "PageDown";
    KeyCode2[KeyCode2["End"] = 13] = "End";
    KeyCode2[KeyCode2["Home"] = 14] = "Home";
    KeyCode2[KeyCode2["LeftArrow"] = 15] = "LeftArrow";
    KeyCode2[KeyCode2["UpArrow"] = 16] = "UpArrow";
    KeyCode2[KeyCode2["RightArrow"] = 17] = "RightArrow";
    KeyCode2[KeyCode2["DownArrow"] = 18] = "DownArrow";
    KeyCode2[KeyCode2["Insert"] = 19] = "Insert";
    KeyCode2[KeyCode2["Delete"] = 20] = "Delete";
    KeyCode2[KeyCode2["Digit0"] = 21] = "Digit0";
    KeyCode2[KeyCode2["Digit1"] = 22] = "Digit1";
    KeyCode2[KeyCode2["Digit2"] = 23] = "Digit2";
    KeyCode2[KeyCode2["Digit3"] = 24] = "Digit3";
    KeyCode2[KeyCode2["Digit4"] = 25] = "Digit4";
    KeyCode2[KeyCode2["Digit5"] = 26] = "Digit5";
    KeyCode2[KeyCode2["Digit6"] = 27] = "Digit6";
    KeyCode2[KeyCode2["Digit7"] = 28] = "Digit7";
    KeyCode2[KeyCode2["Digit8"] = 29] = "Digit8";
    KeyCode2[KeyCode2["Digit9"] = 30] = "Digit9";
    KeyCode2[KeyCode2["KeyA"] = 31] = "KeyA";
    KeyCode2[KeyCode2["KeyB"] = 32] = "KeyB";
    KeyCode2[KeyCode2["KeyC"] = 33] = "KeyC";
    KeyCode2[KeyCode2["KeyD"] = 34] = "KeyD";
    KeyCode2[KeyCode2["KeyE"] = 35] = "KeyE";
    KeyCode2[KeyCode2["KeyF"] = 36] = "KeyF";
    KeyCode2[KeyCode2["KeyG"] = 37] = "KeyG";
    KeyCode2[KeyCode2["KeyH"] = 38] = "KeyH";
    KeyCode2[KeyCode2["KeyI"] = 39] = "KeyI";
    KeyCode2[KeyCode2["KeyJ"] = 40] = "KeyJ";
    KeyCode2[KeyCode2["KeyK"] = 41] = "KeyK";
    KeyCode2[KeyCode2["KeyL"] = 42] = "KeyL";
    KeyCode2[KeyCode2["KeyM"] = 43] = "KeyM";
    KeyCode2[KeyCode2["KeyN"] = 44] = "KeyN";
    KeyCode2[KeyCode2["KeyO"] = 45] = "KeyO";
    KeyCode2[KeyCode2["KeyP"] = 46] = "KeyP";
    KeyCode2[KeyCode2["KeyQ"] = 47] = "KeyQ";
    KeyCode2[KeyCode2["KeyR"] = 48] = "KeyR";
    KeyCode2[KeyCode2["KeyS"] = 49] = "KeyS";
    KeyCode2[KeyCode2["KeyT"] = 50] = "KeyT";
    KeyCode2[KeyCode2["KeyU"] = 51] = "KeyU";
    KeyCode2[KeyCode2["KeyV"] = 52] = "KeyV";
    KeyCode2[KeyCode2["KeyW"] = 53] = "KeyW";
    KeyCode2[KeyCode2["KeyX"] = 54] = "KeyX";
    KeyCode2[KeyCode2["KeyY"] = 55] = "KeyY";
    KeyCode2[KeyCode2["KeyZ"] = 56] = "KeyZ";
    KeyCode2[KeyCode2["Meta"] = 57] = "Meta";
    KeyCode2[KeyCode2["ContextMenu"] = 58] = "ContextMenu";
    KeyCode2[KeyCode2["F1"] = 59] = "F1";
    KeyCode2[KeyCode2["F2"] = 60] = "F2";
    KeyCode2[KeyCode2["F3"] = 61] = "F3";
    KeyCode2[KeyCode2["F4"] = 62] = "F4";
    KeyCode2[KeyCode2["F5"] = 63] = "F5";
    KeyCode2[KeyCode2["F6"] = 64] = "F6";
    KeyCode2[KeyCode2["F7"] = 65] = "F7";
    KeyCode2[KeyCode2["F8"] = 66] = "F8";
    KeyCode2[KeyCode2["F9"] = 67] = "F9";
    KeyCode2[KeyCode2["F10"] = 68] = "F10";
    KeyCode2[KeyCode2["F11"] = 69] = "F11";
    KeyCode2[KeyCode2["F12"] = 70] = "F12";
    KeyCode2[KeyCode2["F13"] = 71] = "F13";
    KeyCode2[KeyCode2["F14"] = 72] = "F14";
    KeyCode2[KeyCode2["F15"] = 73] = "F15";
    KeyCode2[KeyCode2["F16"] = 74] = "F16";
    KeyCode2[KeyCode2["F17"] = 75] = "F17";
    KeyCode2[KeyCode2["F18"] = 76] = "F18";
    KeyCode2[KeyCode2["F19"] = 77] = "F19";
    KeyCode2[KeyCode2["F20"] = 78] = "F20";
    KeyCode2[KeyCode2["F21"] = 79] = "F21";
    KeyCode2[KeyCode2["F22"] = 80] = "F22";
    KeyCode2[KeyCode2["F23"] = 81] = "F23";
    KeyCode2[KeyCode2["F24"] = 82] = "F24";
    KeyCode2[KeyCode2["NumLock"] = 83] = "NumLock";
    KeyCode2[KeyCode2["ScrollLock"] = 84] = "ScrollLock";
    KeyCode2[KeyCode2["Semicolon"] = 85] = "Semicolon";
    KeyCode2[KeyCode2["Equal"] = 86] = "Equal";
    KeyCode2[KeyCode2["Comma"] = 87] = "Comma";
    KeyCode2[KeyCode2["Minus"] = 88] = "Minus";
    KeyCode2[KeyCode2["Period"] = 89] = "Period";
    KeyCode2[KeyCode2["Slash"] = 90] = "Slash";
    KeyCode2[KeyCode2["Backquote"] = 91] = "Backquote";
    KeyCode2[KeyCode2["BracketLeft"] = 92] = "BracketLeft";
    KeyCode2[KeyCode2["Backslash"] = 93] = "Backslash";
    KeyCode2[KeyCode2["BracketRight"] = 94] = "BracketRight";
    KeyCode2[KeyCode2["Quote"] = 95] = "Quote";
    KeyCode2[KeyCode2["OEM_8"] = 96] = "OEM_8";
    KeyCode2[KeyCode2["IntlBackslash"] = 97] = "IntlBackslash";
    KeyCode2[KeyCode2["Numpad0"] = 98] = "Numpad0";
    KeyCode2[KeyCode2["Numpad1"] = 99] = "Numpad1";
    KeyCode2[KeyCode2["Numpad2"] = 100] = "Numpad2";
    KeyCode2[KeyCode2["Numpad3"] = 101] = "Numpad3";
    KeyCode2[KeyCode2["Numpad4"] = 102] = "Numpad4";
    KeyCode2[KeyCode2["Numpad5"] = 103] = "Numpad5";
    KeyCode2[KeyCode2["Numpad6"] = 104] = "Numpad6";
    KeyCode2[KeyCode2["Numpad7"] = 105] = "Numpad7";
    KeyCode2[KeyCode2["Numpad8"] = 106] = "Numpad8";
    KeyCode2[KeyCode2["Numpad9"] = 107] = "Numpad9";
    KeyCode2[KeyCode2["NumpadMultiply"] = 108] = "NumpadMultiply";
    KeyCode2[KeyCode2["NumpadAdd"] = 109] = "NumpadAdd";
    KeyCode2[KeyCode2["NUMPAD_SEPARATOR"] = 110] = "NUMPAD_SEPARATOR";
    KeyCode2[KeyCode2["NumpadSubtract"] = 111] = "NumpadSubtract";
    KeyCode2[KeyCode2["NumpadDecimal"] = 112] = "NumpadDecimal";
    KeyCode2[KeyCode2["NumpadDivide"] = 113] = "NumpadDivide";
    KeyCode2[KeyCode2["KEY_IN_COMPOSITION"] = 114] = "KEY_IN_COMPOSITION";
    KeyCode2[KeyCode2["ABNT_C1"] = 115] = "ABNT_C1";
    KeyCode2[KeyCode2["ABNT_C2"] = 116] = "ABNT_C2";
    KeyCode2[KeyCode2["AudioVolumeMute"] = 117] = "AudioVolumeMute";
    KeyCode2[KeyCode2["AudioVolumeUp"] = 118] = "AudioVolumeUp";
    KeyCode2[KeyCode2["AudioVolumeDown"] = 119] = "AudioVolumeDown";
    KeyCode2[KeyCode2["BrowserSearch"] = 120] = "BrowserSearch";
    KeyCode2[KeyCode2["BrowserHome"] = 121] = "BrowserHome";
    KeyCode2[KeyCode2["BrowserBack"] = 122] = "BrowserBack";
    KeyCode2[KeyCode2["BrowserForward"] = 123] = "BrowserForward";
    KeyCode2[KeyCode2["MediaTrackNext"] = 124] = "MediaTrackNext";
    KeyCode2[KeyCode2["MediaTrackPrevious"] = 125] = "MediaTrackPrevious";
    KeyCode2[KeyCode2["MediaStop"] = 126] = "MediaStop";
    KeyCode2[KeyCode2["MediaPlayPause"] = 127] = "MediaPlayPause";
    KeyCode2[KeyCode2["LaunchMediaPlayer"] = 128] = "LaunchMediaPlayer";
    KeyCode2[KeyCode2["LaunchMail"] = 129] = "LaunchMail";
    KeyCode2[KeyCode2["LaunchApp2"] = 130] = "LaunchApp2";
    KeyCode2[KeyCode2["Clear"] = 131] = "Clear";
    KeyCode2[KeyCode2["MAX_VALUE"] = 132] = "MAX_VALUE";
  })(KeyCode || (KeyCode = {}));
  var MarkerSeverity;
  (function(MarkerSeverity2) {
    MarkerSeverity2[MarkerSeverity2["Hint"] = 1] = "Hint";
    MarkerSeverity2[MarkerSeverity2["Info"] = 2] = "Info";
    MarkerSeverity2[MarkerSeverity2["Warning"] = 4] = "Warning";
    MarkerSeverity2[MarkerSeverity2["Error"] = 8] = "Error";
  })(MarkerSeverity || (MarkerSeverity = {}));
  var MarkerTag;
  (function(MarkerTag2) {
    MarkerTag2[MarkerTag2["Unnecessary"] = 1] = "Unnecessary";
    MarkerTag2[MarkerTag2["Deprecated"] = 2] = "Deprecated";
  })(MarkerTag || (MarkerTag = {}));
  var MinimapPosition;
  (function(MinimapPosition2) {
    MinimapPosition2[MinimapPosition2["Inline"] = 1] = "Inline";
    MinimapPosition2[MinimapPosition2["Gutter"] = 2] = "Gutter";
  })(MinimapPosition || (MinimapPosition = {}));
  var MinimapSectionHeaderStyle;
  (function(MinimapSectionHeaderStyle2) {
    MinimapSectionHeaderStyle2[MinimapSectionHeaderStyle2["Normal"] = 1] = "Normal";
    MinimapSectionHeaderStyle2[MinimapSectionHeaderStyle2["Underlined"] = 2] = "Underlined";
  })(MinimapSectionHeaderStyle || (MinimapSectionHeaderStyle = {}));
  var MouseTargetType;
  (function(MouseTargetType2) {
    MouseTargetType2[MouseTargetType2["UNKNOWN"] = 0] = "UNKNOWN";
    MouseTargetType2[MouseTargetType2["TEXTAREA"] = 1] = "TEXTAREA";
    MouseTargetType2[MouseTargetType2["GUTTER_GLYPH_MARGIN"] = 2] = "GUTTER_GLYPH_MARGIN";
    MouseTargetType2[MouseTargetType2["GUTTER_LINE_NUMBERS"] = 3] = "GUTTER_LINE_NUMBERS";
    MouseTargetType2[MouseTargetType2["GUTTER_LINE_DECORATIONS"] = 4] = "GUTTER_LINE_DECORATIONS";
    MouseTargetType2[MouseTargetType2["GUTTER_VIEW_ZONE"] = 5] = "GUTTER_VIEW_ZONE";
    MouseTargetType2[MouseTargetType2["CONTENT_TEXT"] = 6] = "CONTENT_TEXT";
    MouseTargetType2[MouseTargetType2["CONTENT_EMPTY"] = 7] = "CONTENT_EMPTY";
    MouseTargetType2[MouseTargetType2["CONTENT_VIEW_ZONE"] = 8] = "CONTENT_VIEW_ZONE";
    MouseTargetType2[MouseTargetType2["CONTENT_WIDGET"] = 9] = "CONTENT_WIDGET";
    MouseTargetType2[MouseTargetType2["OVERVIEW_RULER"] = 10] = "OVERVIEW_RULER";
    MouseTargetType2[MouseTargetType2["SCROLLBAR"] = 11] = "SCROLLBAR";
    MouseTargetType2[MouseTargetType2["OVERLAY_WIDGET"] = 12] = "OVERLAY_WIDGET";
    MouseTargetType2[MouseTargetType2["OUTSIDE_EDITOR"] = 13] = "OUTSIDE_EDITOR";
  })(MouseTargetType || (MouseTargetType = {}));
  var NewSymbolNameTag2;
  (function(NewSymbolNameTag3) {
    NewSymbolNameTag3[NewSymbolNameTag3["AIGenerated"] = 1] = "AIGenerated";
  })(NewSymbolNameTag2 || (NewSymbolNameTag2 = {}));
  var NewSymbolNameTriggerKind2;
  (function(NewSymbolNameTriggerKind3) {
    NewSymbolNameTriggerKind3[NewSymbolNameTriggerKind3["Invoke"] = 0] = "Invoke";
    NewSymbolNameTriggerKind3[NewSymbolNameTriggerKind3["Automatic"] = 1] = "Automatic";
  })(NewSymbolNameTriggerKind2 || (NewSymbolNameTriggerKind2 = {}));
  var OverlayWidgetPositionPreference;
  (function(OverlayWidgetPositionPreference2) {
    OverlayWidgetPositionPreference2[OverlayWidgetPositionPreference2["TOP_RIGHT_CORNER"] = 0] = "TOP_RIGHT_CORNER";
    OverlayWidgetPositionPreference2[OverlayWidgetPositionPreference2["BOTTOM_RIGHT_CORNER"] = 1] = "BOTTOM_RIGHT_CORNER";
    OverlayWidgetPositionPreference2[OverlayWidgetPositionPreference2["TOP_CENTER"] = 2] = "TOP_CENTER";
  })(OverlayWidgetPositionPreference || (OverlayWidgetPositionPreference = {}));
  var OverviewRulerLane;
  (function(OverviewRulerLane3) {
    OverviewRulerLane3[OverviewRulerLane3["Left"] = 1] = "Left";
    OverviewRulerLane3[OverviewRulerLane3["Center"] = 2] = "Center";
    OverviewRulerLane3[OverviewRulerLane3["Right"] = 4] = "Right";
    OverviewRulerLane3[OverviewRulerLane3["Full"] = 7] = "Full";
  })(OverviewRulerLane || (OverviewRulerLane = {}));
  var PartialAcceptTriggerKind;
  (function(PartialAcceptTriggerKind2) {
    PartialAcceptTriggerKind2[PartialAcceptTriggerKind2["Word"] = 0] = "Word";
    PartialAcceptTriggerKind2[PartialAcceptTriggerKind2["Line"] = 1] = "Line";
    PartialAcceptTriggerKind2[PartialAcceptTriggerKind2["Suggest"] = 2] = "Suggest";
  })(PartialAcceptTriggerKind || (PartialAcceptTriggerKind = {}));
  var PositionAffinity;
  (function(PositionAffinity2) {
    PositionAffinity2[PositionAffinity2["Left"] = 0] = "Left";
    PositionAffinity2[PositionAffinity2["Right"] = 1] = "Right";
    PositionAffinity2[PositionAffinity2["None"] = 2] = "None";
    PositionAffinity2[PositionAffinity2["LeftOfInjectedText"] = 3] = "LeftOfInjectedText";
    PositionAffinity2[PositionAffinity2["RightOfInjectedText"] = 4] = "RightOfInjectedText";
  })(PositionAffinity || (PositionAffinity = {}));
  var RenderLineNumbersType;
  (function(RenderLineNumbersType2) {
    RenderLineNumbersType2[RenderLineNumbersType2["Off"] = 0] = "Off";
    RenderLineNumbersType2[RenderLineNumbersType2["On"] = 1] = "On";
    RenderLineNumbersType2[RenderLineNumbersType2["Relative"] = 2] = "Relative";
    RenderLineNumbersType2[RenderLineNumbersType2["Interval"] = 3] = "Interval";
    RenderLineNumbersType2[RenderLineNumbersType2["Custom"] = 4] = "Custom";
  })(RenderLineNumbersType || (RenderLineNumbersType = {}));
  var RenderMinimap;
  (function(RenderMinimap2) {
    RenderMinimap2[RenderMinimap2["None"] = 0] = "None";
    RenderMinimap2[RenderMinimap2["Text"] = 1] = "Text";
    RenderMinimap2[RenderMinimap2["Blocks"] = 2] = "Blocks";
  })(RenderMinimap || (RenderMinimap = {}));
  var ScrollType;
  (function(ScrollType2) {
    ScrollType2[ScrollType2["Smooth"] = 0] = "Smooth";
    ScrollType2[ScrollType2["Immediate"] = 1] = "Immediate";
  })(ScrollType || (ScrollType = {}));
  var ScrollbarVisibility;
  (function(ScrollbarVisibility2) {
    ScrollbarVisibility2[ScrollbarVisibility2["Auto"] = 1] = "Auto";
    ScrollbarVisibility2[ScrollbarVisibility2["Hidden"] = 2] = "Hidden";
    ScrollbarVisibility2[ScrollbarVisibility2["Visible"] = 3] = "Visible";
  })(ScrollbarVisibility || (ScrollbarVisibility = {}));
  var SelectionDirection;
  (function(SelectionDirection2) {
    SelectionDirection2[SelectionDirection2["LTR"] = 0] = "LTR";
    SelectionDirection2[SelectionDirection2["RTL"] = 1] = "RTL";
  })(SelectionDirection || (SelectionDirection = {}));
  var ShowLightbulbIconMode;
  (function(ShowLightbulbIconMode2) {
    ShowLightbulbIconMode2["Off"] = "off";
    ShowLightbulbIconMode2["OnCode"] = "onCode";
    ShowLightbulbIconMode2["On"] = "on";
  })(ShowLightbulbIconMode || (ShowLightbulbIconMode = {}));
  var SignatureHelpTriggerKind2;
  (function(SignatureHelpTriggerKind3) {
    SignatureHelpTriggerKind3[SignatureHelpTriggerKind3["Invoke"] = 1] = "Invoke";
    SignatureHelpTriggerKind3[SignatureHelpTriggerKind3["TriggerCharacter"] = 2] = "TriggerCharacter";
    SignatureHelpTriggerKind3[SignatureHelpTriggerKind3["ContentChange"] = 3] = "ContentChange";
  })(SignatureHelpTriggerKind2 || (SignatureHelpTriggerKind2 = {}));
  var SymbolKind;
  (function(SymbolKind3) {
    SymbolKind3[SymbolKind3["File"] = 0] = "File";
    SymbolKind3[SymbolKind3["Module"] = 1] = "Module";
    SymbolKind3[SymbolKind3["Namespace"] = 2] = "Namespace";
    SymbolKind3[SymbolKind3["Package"] = 3] = "Package";
    SymbolKind3[SymbolKind3["Class"] = 4] = "Class";
    SymbolKind3[SymbolKind3["Method"] = 5] = "Method";
    SymbolKind3[SymbolKind3["Property"] = 6] = "Property";
    SymbolKind3[SymbolKind3["Field"] = 7] = "Field";
    SymbolKind3[SymbolKind3["Constructor"] = 8] = "Constructor";
    SymbolKind3[SymbolKind3["Enum"] = 9] = "Enum";
    SymbolKind3[SymbolKind3["Interface"] = 10] = "Interface";
    SymbolKind3[SymbolKind3["Function"] = 11] = "Function";
    SymbolKind3[SymbolKind3["Variable"] = 12] = "Variable";
    SymbolKind3[SymbolKind3["Constant"] = 13] = "Constant";
    SymbolKind3[SymbolKind3["String"] = 14] = "String";
    SymbolKind3[SymbolKind3["Number"] = 15] = "Number";
    SymbolKind3[SymbolKind3["Boolean"] = 16] = "Boolean";
    SymbolKind3[SymbolKind3["Array"] = 17] = "Array";
    SymbolKind3[SymbolKind3["Object"] = 18] = "Object";
    SymbolKind3[SymbolKind3["Key"] = 19] = "Key";
    SymbolKind3[SymbolKind3["Null"] = 20] = "Null";
    SymbolKind3[SymbolKind3["EnumMember"] = 21] = "EnumMember";
    SymbolKind3[SymbolKind3["Struct"] = 22] = "Struct";
    SymbolKind3[SymbolKind3["Event"] = 23] = "Event";
    SymbolKind3[SymbolKind3["Operator"] = 24] = "Operator";
    SymbolKind3[SymbolKind3["TypeParameter"] = 25] = "TypeParameter";
  })(SymbolKind || (SymbolKind = {}));
  var SymbolTag;
  (function(SymbolTag3) {
    SymbolTag3[SymbolTag3["Deprecated"] = 1] = "Deprecated";
  })(SymbolTag || (SymbolTag = {}));
  var TextEditorCursorBlinkingStyle;
  (function(TextEditorCursorBlinkingStyle2) {
    TextEditorCursorBlinkingStyle2[TextEditorCursorBlinkingStyle2["Hidden"] = 0] = "Hidden";
    TextEditorCursorBlinkingStyle2[TextEditorCursorBlinkingStyle2["Blink"] = 1] = "Blink";
    TextEditorCursorBlinkingStyle2[TextEditorCursorBlinkingStyle2["Smooth"] = 2] = "Smooth";
    TextEditorCursorBlinkingStyle2[TextEditorCursorBlinkingStyle2["Phase"] = 3] = "Phase";
    TextEditorCursorBlinkingStyle2[TextEditorCursorBlinkingStyle2["Expand"] = 4] = "Expand";
    TextEditorCursorBlinkingStyle2[TextEditorCursorBlinkingStyle2["Solid"] = 5] = "Solid";
  })(TextEditorCursorBlinkingStyle || (TextEditorCursorBlinkingStyle = {}));
  var TextEditorCursorStyle;
  (function(TextEditorCursorStyle2) {
    TextEditorCursorStyle2[TextEditorCursorStyle2["Line"] = 1] = "Line";
    TextEditorCursorStyle2[TextEditorCursorStyle2["Block"] = 2] = "Block";
    TextEditorCursorStyle2[TextEditorCursorStyle2["Underline"] = 3] = "Underline";
    TextEditorCursorStyle2[TextEditorCursorStyle2["LineThin"] = 4] = "LineThin";
    TextEditorCursorStyle2[TextEditorCursorStyle2["BlockOutline"] = 5] = "BlockOutline";
    TextEditorCursorStyle2[TextEditorCursorStyle2["UnderlineThin"] = 6] = "UnderlineThin";
  })(TextEditorCursorStyle || (TextEditorCursorStyle = {}));
  var TrackedRangeStickiness;
  (function(TrackedRangeStickiness2) {
    TrackedRangeStickiness2[TrackedRangeStickiness2["AlwaysGrowsWhenTypingAtEdges"] = 0] = "AlwaysGrowsWhenTypingAtEdges";
    TrackedRangeStickiness2[TrackedRangeStickiness2["NeverGrowsWhenTypingAtEdges"] = 1] = "NeverGrowsWhenTypingAtEdges";
    TrackedRangeStickiness2[TrackedRangeStickiness2["GrowsOnlyWhenTypingBefore"] = 2] = "GrowsOnlyWhenTypingBefore";
    TrackedRangeStickiness2[TrackedRangeStickiness2["GrowsOnlyWhenTypingAfter"] = 3] = "GrowsOnlyWhenTypingAfter";
  })(TrackedRangeStickiness || (TrackedRangeStickiness = {}));
  var WrappingIndent;
  (function(WrappingIndent2) {
    WrappingIndent2[WrappingIndent2["None"] = 0] = "None";
    WrappingIndent2[WrappingIndent2["Same"] = 1] = "Same";
    WrappingIndent2[WrappingIndent2["Indent"] = 2] = "Indent";
    WrappingIndent2[WrappingIndent2["DeepIndent"] = 3] = "DeepIndent";
  })(WrappingIndent || (WrappingIndent = {}));

  // node_modules/monaco-editor/esm/vs/editor/common/services/editorBaseApi.js
  var KeyMod = class {
    static chord(firstPart, secondPart) {
      return KeyChord(firstPart, secondPart);
    }
  };
  KeyMod.CtrlCmd = 2048;
  KeyMod.Shift = 1024;
  KeyMod.Alt = 512;
  KeyMod.WinCtrl = 256;
  function createMonacoBaseAPI() {
    return {
      editor: void 0,
      // undefined override expected here
      languages: void 0,
      // undefined override expected here
      CancellationTokenSource,
      Emitter,
      KeyCode,
      KeyMod,
      Position,
      Range,
      Selection,
      SelectionDirection,
      MarkerSeverity,
      MarkerTag,
      Uri: URI,
      Token
    };
  }

  // node_modules/monaco-editor/esm/vs/base/common/map.js
  var _a3;
  var _b2;
  var ResourceMapEntry = class {
    constructor(uri, value) {
      this.uri = uri;
      this.value = value;
    }
  };
  function isEntries(arg) {
    return Array.isArray(arg);
  }
  var ResourceMap = class _ResourceMap {
    constructor(arg, toKey) {
      this[_a3] = "ResourceMap";
      if (arg instanceof _ResourceMap) {
        this.map = new Map(arg.map);
        this.toKey = toKey !== null && toKey !== void 0 ? toKey : _ResourceMap.defaultToKey;
      } else if (isEntries(arg)) {
        this.map = /* @__PURE__ */ new Map();
        this.toKey = toKey !== null && toKey !== void 0 ? toKey : _ResourceMap.defaultToKey;
        for (const [resource, value] of arg) {
          this.set(resource, value);
        }
      } else {
        this.map = /* @__PURE__ */ new Map();
        this.toKey = arg !== null && arg !== void 0 ? arg : _ResourceMap.defaultToKey;
      }
    }
    set(resource, value) {
      this.map.set(this.toKey(resource), new ResourceMapEntry(resource, value));
      return this;
    }
    get(resource) {
      var _c;
      return (_c = this.map.get(this.toKey(resource))) === null || _c === void 0 ? void 0 : _c.value;
    }
    has(resource) {
      return this.map.has(this.toKey(resource));
    }
    get size() {
      return this.map.size;
    }
    clear() {
      this.map.clear();
    }
    delete(resource) {
      return this.map.delete(this.toKey(resource));
    }
    forEach(clb, thisArg) {
      if (typeof thisArg !== "undefined") {
        clb = clb.bind(thisArg);
      }
      for (const [_, entry] of this.map) {
        clb(entry.value, entry.uri, this);
      }
    }
    *values() {
      for (const entry of this.map.values()) {
        yield entry.value;
      }
    }
    *keys() {
      for (const entry of this.map.values()) {
        yield entry.uri;
      }
    }
    *entries() {
      for (const entry of this.map.values()) {
        yield [entry.uri, entry.value];
      }
    }
    *[(_a3 = Symbol.toStringTag, Symbol.iterator)]() {
      for (const [, entry] of this.map) {
        yield [entry.uri, entry.value];
      }
    }
  };
  ResourceMap.defaultToKey = (resource) => resource.toString();
  var LinkedMap = class {
    constructor() {
      this[_b2] = "LinkedMap";
      this._map = /* @__PURE__ */ new Map();
      this._head = void 0;
      this._tail = void 0;
      this._size = 0;
      this._state = 0;
    }
    clear() {
      this._map.clear();
      this._head = void 0;
      this._tail = void 0;
      this._size = 0;
      this._state++;
    }
    isEmpty() {
      return !this._head && !this._tail;
    }
    get size() {
      return this._size;
    }
    get first() {
      var _c;
      return (_c = this._head) === null || _c === void 0 ? void 0 : _c.value;
    }
    get last() {
      var _c;
      return (_c = this._tail) === null || _c === void 0 ? void 0 : _c.value;
    }
    has(key) {
      return this._map.has(key);
    }
    get(key, touch = 0) {
      const item = this._map.get(key);
      if (!item) {
        return void 0;
      }
      if (touch !== 0) {
        this.touch(item, touch);
      }
      return item.value;
    }
    set(key, value, touch = 0) {
      let item = this._map.get(key);
      if (item) {
        item.value = value;
        if (touch !== 0) {
          this.touch(item, touch);
        }
      } else {
        item = { key, value, next: void 0, previous: void 0 };
        switch (touch) {
          case 0:
            this.addItemLast(item);
            break;
          case 1:
            this.addItemFirst(item);
            break;
          case 2:
            this.addItemLast(item);
            break;
          default:
            this.addItemLast(item);
            break;
        }
        this._map.set(key, item);
        this._size++;
      }
      return this;
    }
    delete(key) {
      return !!this.remove(key);
    }
    remove(key) {
      const item = this._map.get(key);
      if (!item) {
        return void 0;
      }
      this._map.delete(key);
      this.removeItem(item);
      this._size--;
      return item.value;
    }
    shift() {
      if (!this._head && !this._tail) {
        return void 0;
      }
      if (!this._head || !this._tail) {
        throw new Error("Invalid list");
      }
      const item = this._head;
      this._map.delete(item.key);
      this.removeItem(item);
      this._size--;
      return item.value;
    }
    forEach(callbackfn, thisArg) {
      const state = this._state;
      let current = this._head;
      while (current) {
        if (thisArg) {
          callbackfn.bind(thisArg)(current.value, current.key, this);
        } else {
          callbackfn(current.value, current.key, this);
        }
        if (this._state !== state) {
          throw new Error(`LinkedMap got modified during iteration.`);
        }
        current = current.next;
      }
    }
    keys() {
      const map = this;
      const state = this._state;
      let current = this._head;
      const iterator = {
        [Symbol.iterator]() {
          return iterator;
        },
        next() {
          if (map._state !== state) {
            throw new Error(`LinkedMap got modified during iteration.`);
          }
          if (current) {
            const result = { value: current.key, done: false };
            current = current.next;
            return result;
          } else {
            return { value: void 0, done: true };
          }
        }
      };
      return iterator;
    }
    values() {
      const map = this;
      const state = this._state;
      let current = this._head;
      const iterator = {
        [Symbol.iterator]() {
          return iterator;
        },
        next() {
          if (map._state !== state) {
            throw new Error(`LinkedMap got modified during iteration.`);
          }
          if (current) {
            const result = { value: current.value, done: false };
            current = current.next;
            return result;
          } else {
            return { value: void 0, done: true };
          }
        }
      };
      return iterator;
    }
    entries() {
      const map = this;
      const state = this._state;
      let current = this._head;
      const iterator = {
        [Symbol.iterator]() {
          return iterator;
        },
        next() {
          if (map._state !== state) {
            throw new Error(`LinkedMap got modified during iteration.`);
          }
          if (current) {
            const result = { value: [current.key, current.value], done: false };
            current = current.next;
            return result;
          } else {
            return { value: void 0, done: true };
          }
        }
      };
      return iterator;
    }
    [(_b2 = Symbol.toStringTag, Symbol.iterator)]() {
      return this.entries();
    }
    trimOld(newSize) {
      if (newSize >= this.size) {
        return;
      }
      if (newSize === 0) {
        this.clear();
        return;
      }
      let current = this._head;
      let currentSize = this.size;
      while (current && currentSize > newSize) {
        this._map.delete(current.key);
        current = current.next;
        currentSize--;
      }
      this._head = current;
      this._size = currentSize;
      if (current) {
        current.previous = void 0;
      }
      this._state++;
    }
    trimNew(newSize) {
      if (newSize >= this.size) {
        return;
      }
      if (newSize === 0) {
        this.clear();
        return;
      }
      let current = this._tail;
      let currentSize = this.size;
      while (current && currentSize > newSize) {
        this._map.delete(current.key);
        current = current.previous;
        currentSize--;
      }
      this._tail = current;
      this._size = currentSize;
      if (current) {
        current.next = void 0;
      }
      this._state++;
    }
    addItemFirst(item) {
      if (!this._head && !this._tail) {
        this._tail = item;
      } else if (!this._head) {
        throw new Error("Invalid list");
      } else {
        item.next = this._head;
        this._head.previous = item;
      }
      this._head = item;
      this._state++;
    }
    addItemLast(item) {
      if (!this._head && !this._tail) {
        this._head = item;
      } else if (!this._tail) {
        throw new Error("Invalid list");
      } else {
        item.previous = this._tail;
        this._tail.next = item;
      }
      this._tail = item;
      this._state++;
    }
    removeItem(item) {
      if (item === this._head && item === this._tail) {
        this._head = void 0;
        this._tail = void 0;
      } else if (item === this._head) {
        if (!item.next) {
          throw new Error("Invalid list");
        }
        item.next.previous = void 0;
        this._head = item.next;
      } else if (item === this._tail) {
        if (!item.previous) {
          throw new Error("Invalid list");
        }
        item.previous.next = void 0;
        this._tail = item.previous;
      } else {
        const next = item.next;
        const previous = item.previous;
        if (!next || !previous) {
          throw new Error("Invalid list");
        }
        next.previous = previous;
        previous.next = next;
      }
      item.next = void 0;
      item.previous = void 0;
      this._state++;
    }
    touch(item, touch) {
      if (!this._head || !this._tail) {
        throw new Error("Invalid list");
      }
      if (touch !== 1 && touch !== 2) {
        return;
      }
      if (touch === 1) {
        if (item === this._head) {
          return;
        }
        const next = item.next;
        const previous = item.previous;
        if (item === this._tail) {
          previous.next = void 0;
          this._tail = previous;
        } else {
          next.previous = previous;
          previous.next = next;
        }
        item.previous = void 0;
        item.next = this._head;
        this._head.previous = item;
        this._head = item;
        this._state++;
      } else if (touch === 2) {
        if (item === this._tail) {
          return;
        }
        const next = item.next;
        const previous = item.previous;
        if (item === this._head) {
          next.previous = void 0;
          this._head = next;
        } else {
          next.previous = previous;
          previous.next = next;
        }
        item.next = void 0;
        item.previous = this._tail;
        this._tail.next = item;
        this._tail = item;
        this._state++;
      }
    }
    toJSON() {
      const data = [];
      this.forEach((value, key) => {
        data.push([key, value]);
      });
      return data;
    }
    fromJSON(data) {
      this.clear();
      for (const [key, value] of data) {
        this.set(key, value);
      }
    }
  };
  var Cache = class extends LinkedMap {
    constructor(limit, ratio = 1) {
      super();
      this._limit = limit;
      this._ratio = Math.min(Math.max(0, ratio), 1);
    }
    get limit() {
      return this._limit;
    }
    set limit(limit) {
      this._limit = limit;
      this.checkTrim();
    }
    get(key, touch = 2) {
      return super.get(key, touch);
    }
    peek(key) {
      return super.get(
        key,
        0
        /* Touch.None */
      );
    }
    set(key, value) {
      super.set(
        key,
        value,
        2
        /* Touch.AsNew */
      );
      return this;
    }
    checkTrim() {
      if (this.size > this._limit) {
        this.trim(Math.round(this._limit * this._ratio));
      }
    }
  };
  var LRUCache = class extends Cache {
    constructor(limit, ratio = 1) {
      super(limit, ratio);
    }
    trim(newSize) {
      this.trimOld(newSize);
    }
    set(key, value) {
      super.set(key, value);
      this.checkTrim();
      return this;
    }
  };
  var SetMap = class {
    constructor() {
      this.map = /* @__PURE__ */ new Map();
    }
    add(key, value) {
      let values = this.map.get(key);
      if (!values) {
        values = /* @__PURE__ */ new Set();
        this.map.set(key, values);
      }
      values.add(value);
    }
    delete(key, value) {
      const values = this.map.get(key);
      if (!values) {
        return;
      }
      values.delete(value);
      if (values.size === 0) {
        this.map.delete(key);
      }
    }
    forEach(key, fn) {
      const values = this.map.get(key);
      if (!values) {
        return;
      }
      values.forEach(fn);
    }
    get(key) {
      const values = this.map.get(key);
      if (!values) {
        return /* @__PURE__ */ new Set();
      }
      return values;
    }
  };

  // node_modules/monaco-editor/esm/vs/editor/common/core/wordCharacterClassifier.js
  var wordClassifierCache = new LRUCache(10);

  // node_modules/monaco-editor/esm/vs/editor/common/model.js
  var OverviewRulerLane2;
  (function(OverviewRulerLane3) {
    OverviewRulerLane3[OverviewRulerLane3["Left"] = 1] = "Left";
    OverviewRulerLane3[OverviewRulerLane3["Center"] = 2] = "Center";
    OverviewRulerLane3[OverviewRulerLane3["Right"] = 4] = "Right";
    OverviewRulerLane3[OverviewRulerLane3["Full"] = 7] = "Full";
  })(OverviewRulerLane2 || (OverviewRulerLane2 = {}));
  var GlyphMarginLane2;
  (function(GlyphMarginLane3) {
    GlyphMarginLane3[GlyphMarginLane3["Left"] = 1] = "Left";
    GlyphMarginLane3[GlyphMarginLane3["Center"] = 2] = "Center";
    GlyphMarginLane3[GlyphMarginLane3["Right"] = 3] = "Right";
  })(GlyphMarginLane2 || (GlyphMarginLane2 = {}));
  var InjectedTextCursorStops2;
  (function(InjectedTextCursorStops3) {
    InjectedTextCursorStops3[InjectedTextCursorStops3["Both"] = 0] = "Both";
    InjectedTextCursorStops3[InjectedTextCursorStops3["Right"] = 1] = "Right";
    InjectedTextCursorStops3[InjectedTextCursorStops3["Left"] = 2] = "Left";
    InjectedTextCursorStops3[InjectedTextCursorStops3["None"] = 3] = "None";
  })(InjectedTextCursorStops2 || (InjectedTextCursorStops2 = {}));

  // node_modules/monaco-editor/esm/vs/editor/common/model/textModelSearch.js
  function leftIsWordBounday(wordSeparators, text, textLength, matchStartIndex, matchLength) {
    if (matchStartIndex === 0) {
      return true;
    }
    const charBefore = text.charCodeAt(matchStartIndex - 1);
    if (wordSeparators.get(charBefore) !== 0) {
      return true;
    }
    if (charBefore === 13 || charBefore === 10) {
      return true;
    }
    if (matchLength > 0) {
      const firstCharInMatch = text.charCodeAt(matchStartIndex);
      if (wordSeparators.get(firstCharInMatch) !== 0) {
        return true;
      }
    }
    return false;
  }
  function rightIsWordBounday(wordSeparators, text, textLength, matchStartIndex, matchLength) {
    if (matchStartIndex + matchLength === textLength) {
      return true;
    }
    const charAfter = text.charCodeAt(matchStartIndex + matchLength);
    if (wordSeparators.get(charAfter) !== 0) {
      return true;
    }
    if (charAfter === 13 || charAfter === 10) {
      return true;
    }
    if (matchLength > 0) {
      const lastCharInMatch = text.charCodeAt(matchStartIndex + matchLength - 1);
      if (wordSeparators.get(lastCharInMatch) !== 0) {
        return true;
      }
    }
    return false;
  }
  function isValidMatch(wordSeparators, text, textLength, matchStartIndex, matchLength) {
    return leftIsWordBounday(wordSeparators, text, textLength, matchStartIndex, matchLength) && rightIsWordBounday(wordSeparators, text, textLength, matchStartIndex, matchLength);
  }
  var Searcher = class {
    constructor(wordSeparators, searchRegex) {
      this._wordSeparators = wordSeparators;
      this._searchRegex = searchRegex;
      this._prevMatchStartIndex = -1;
      this._prevMatchLength = 0;
    }
    reset(lastIndex) {
      this._searchRegex.lastIndex = lastIndex;
      this._prevMatchStartIndex = -1;
      this._prevMatchLength = 0;
    }
    next(text) {
      const textLength = text.length;
      let m;
      do {
        if (this._prevMatchStartIndex + this._prevMatchLength === textLength) {
          return null;
        }
        m = this._searchRegex.exec(text);
        if (!m) {
          return null;
        }
        const matchStartIndex = m.index;
        const matchLength = m[0].length;
        if (matchStartIndex === this._prevMatchStartIndex && matchLength === this._prevMatchLength) {
          if (matchLength === 0) {
            if (getNextCodePoint(text, textLength, this._searchRegex.lastIndex) > 65535) {
              this._searchRegex.lastIndex += 2;
            } else {
              this._searchRegex.lastIndex += 1;
            }
            continue;
          }
          return null;
        }
        this._prevMatchStartIndex = matchStartIndex;
        this._prevMatchLength = matchLength;
        if (!this._wordSeparators || isValidMatch(this._wordSeparators, text, textLength, matchStartIndex, matchLength)) {
          return m;
        }
      } while (m);
      return null;
    }
  };

  // node_modules/monaco-editor/esm/vs/base/common/assert.js
  function assertNever(value, message = "Unreachable") {
    throw new Error(message);
  }
  function assertFn(condition) {
    if (!condition()) {
      debugger;
      condition();
      onUnexpectedError(new BugIndicatingError("Assertion Failed"));
    }
  }
  function checkAdjacentItems(items, predicate) {
    let i = 0;
    while (i < items.length - 1) {
      const a2 = items[i];
      const b = items[i + 1];
      if (!predicate(a2, b)) {
        return false;
      }
      i++;
    }
    return true;
  }

  // node_modules/monaco-editor/esm/vs/editor/common/services/unicodeTextModelHighlighter.js
  var UnicodeTextModelHighlighter = class {
    static computeUnicodeHighlights(model, options, range) {
      const startLine = range ? range.startLineNumber : 1;
      const endLine = range ? range.endLineNumber : model.getLineCount();
      const codePointHighlighter = new CodePointHighlighter(options);
      const candidates = codePointHighlighter.getCandidateCodePoints();
      let regex;
      if (candidates === "allNonBasicAscii") {
        regex = new RegExp("[^\\t\\n\\r\\x20-\\x7E]", "g");
      } else {
        regex = new RegExp(`${buildRegExpCharClassExpr(Array.from(candidates))}`, "g");
      }
      const searcher = new Searcher(null, regex);
      const ranges = [];
      let hasMore = false;
      let m;
      let ambiguousCharacterCount = 0;
      let invisibleCharacterCount = 0;
      let nonBasicAsciiCharacterCount = 0;
      forLoop: for (let lineNumber = startLine, lineCount = endLine; lineNumber <= lineCount; lineNumber++) {
        const lineContent = model.getLineContent(lineNumber);
        const lineLength = lineContent.length;
        searcher.reset(0);
        do {
          m = searcher.next(lineContent);
          if (m) {
            let startIndex = m.index;
            let endIndex = m.index + m[0].length;
            if (startIndex > 0) {
              const charCodeBefore = lineContent.charCodeAt(startIndex - 1);
              if (isHighSurrogate(charCodeBefore)) {
                startIndex--;
              }
            }
            if (endIndex + 1 < lineLength) {
              const charCodeBefore = lineContent.charCodeAt(endIndex - 1);
              if (isHighSurrogate(charCodeBefore)) {
                endIndex++;
              }
            }
            const str = lineContent.substring(startIndex, endIndex);
            let word = getWordAtText(startIndex + 1, DEFAULT_WORD_REGEXP, lineContent, 0);
            if (word && word.endColumn <= startIndex + 1) {
              word = null;
            }
            const highlightReason = codePointHighlighter.shouldHighlightNonBasicASCII(str, word ? word.word : null);
            if (highlightReason !== 0) {
              if (highlightReason === 3) {
                ambiguousCharacterCount++;
              } else if (highlightReason === 2) {
                invisibleCharacterCount++;
              } else if (highlightReason === 1) {
                nonBasicAsciiCharacterCount++;
              } else {
                assertNever(highlightReason);
              }
              const MAX_RESULT_LENGTH = 1e3;
              if (ranges.length >= MAX_RESULT_LENGTH) {
                hasMore = true;
                break forLoop;
              }
              ranges.push(new Range(lineNumber, startIndex + 1, lineNumber, endIndex + 1));
            }
          }
        } while (m);
      }
      return {
        ranges,
        hasMore,
        ambiguousCharacterCount,
        invisibleCharacterCount,
        nonBasicAsciiCharacterCount
      };
    }
    static computeUnicodeHighlightReason(char, options) {
      const codePointHighlighter = new CodePointHighlighter(options);
      const reason = codePointHighlighter.shouldHighlightNonBasicASCII(char, null);
      switch (reason) {
        case 0:
          return null;
        case 2:
          return {
            kind: 1
            /* UnicodeHighlighterReasonKind.Invisible */
          };
        case 3: {
          const codePoint = char.codePointAt(0);
          const primaryConfusable = codePointHighlighter.ambiguousCharacters.getPrimaryConfusable(codePoint);
          const notAmbiguousInLocales = AmbiguousCharacters.getLocales().filter((l) => !AmbiguousCharacters.getInstance(/* @__PURE__ */ new Set([...options.allowedLocales, l])).isAmbiguous(codePoint));
          return { kind: 0, confusableWith: String.fromCodePoint(primaryConfusable), notAmbiguousInLocales };
        }
        case 1:
          return {
            kind: 2
            /* UnicodeHighlighterReasonKind.NonBasicAscii */
          };
      }
    }
  };
  function buildRegExpCharClassExpr(codePoints, flags) {
    const src = `[${escapeRegExpCharacters(codePoints.map((i) => String.fromCodePoint(i)).join(""))}]`;
    return src;
  }
  var CodePointHighlighter = class {
    constructor(options) {
      this.options = options;
      this.allowedCodePoints = new Set(options.allowedCodePoints);
      this.ambiguousCharacters = AmbiguousCharacters.getInstance(new Set(options.allowedLocales));
    }
    getCandidateCodePoints() {
      if (this.options.nonBasicASCII) {
        return "allNonBasicAscii";
      }
      const set = /* @__PURE__ */ new Set();
      if (this.options.invisibleCharacters) {
        for (const cp of InvisibleCharacters.codePoints) {
          if (!isAllowedInvisibleCharacter(String.fromCodePoint(cp))) {
            set.add(cp);
          }
        }
      }
      if (this.options.ambiguousCharacters) {
        for (const cp of this.ambiguousCharacters.getConfusableCodePoints()) {
          set.add(cp);
        }
      }
      for (const cp of this.allowedCodePoints) {
        set.delete(cp);
      }
      return set;
    }
    shouldHighlightNonBasicASCII(character, wordContext) {
      const codePoint = character.codePointAt(0);
      if (this.allowedCodePoints.has(codePoint)) {
        return 0;
      }
      if (this.options.nonBasicASCII) {
        return 1;
      }
      let hasBasicASCIICharacters = false;
      let hasNonConfusableNonBasicAsciiCharacter = false;
      if (wordContext) {
        for (const char of wordContext) {
          const codePoint2 = char.codePointAt(0);
          const isBasicASCII2 = isBasicASCII(char);
          hasBasicASCIICharacters = hasBasicASCIICharacters || isBasicASCII2;
          if (!isBasicASCII2 && !this.ambiguousCharacters.isAmbiguous(codePoint2) && !InvisibleCharacters.isInvisibleCharacter(codePoint2)) {
            hasNonConfusableNonBasicAsciiCharacter = true;
          }
        }
      }
      if (
        /* Don't allow mixing weird looking characters with ASCII */
        !hasBasicASCIICharacters && /* Is there an obviously weird looking character? */
        hasNonConfusableNonBasicAsciiCharacter
      ) {
        return 0;
      }
      if (this.options.invisibleCharacters) {
        if (!isAllowedInvisibleCharacter(character) && InvisibleCharacters.isInvisibleCharacter(codePoint)) {
          return 2;
        }
      }
      if (this.options.ambiguousCharacters) {
        if (this.ambiguousCharacters.isAmbiguous(codePoint)) {
          return 3;
        }
      }
      return 0;
    }
  };
  function isAllowedInvisibleCharacter(character) {
    return character === " " || character === "\n" || character === "	";
  }

  // node_modules/monaco-editor/esm/vs/editor/common/diff/linesDiffComputer.js
  var LinesDiff = class {
    constructor(changes, moves, hitTimeout) {
      this.changes = changes;
      this.moves = moves;
      this.hitTimeout = hitTimeout;
    }
  };
  var MovedText = class {
    constructor(lineRangeMapping, changes) {
      this.lineRangeMapping = lineRangeMapping;
      this.changes = changes;
    }
  };

  // node_modules/monaco-editor/esm/vs/editor/common/core/offsetRange.js
  var OffsetRange = class _OffsetRange {
    static addRange(range, sortedRanges) {
      let i = 0;
      while (i < sortedRanges.length && sortedRanges[i].endExclusive < range.start) {
        i++;
      }
      let j = i;
      while (j < sortedRanges.length && sortedRanges[j].start <= range.endExclusive) {
        j++;
      }
      if (i === j) {
        sortedRanges.splice(i, 0, range);
      } else {
        const start = Math.min(range.start, sortedRanges[i].start);
        const end = Math.max(range.endExclusive, sortedRanges[j - 1].endExclusive);
        sortedRanges.splice(i, j - i, new _OffsetRange(start, end));
      }
    }
    static tryCreate(start, endExclusive) {
      if (start > endExclusive) {
        return void 0;
      }
      return new _OffsetRange(start, endExclusive);
    }
    static ofLength(length) {
      return new _OffsetRange(0, length);
    }
    static ofStartAndLength(start, length) {
      return new _OffsetRange(start, start + length);
    }
    constructor(start, endExclusive) {
      this.start = start;
      this.endExclusive = endExclusive;
      if (start > endExclusive) {
        throw new BugIndicatingError(`Invalid range: ${this.toString()}`);
      }
    }
    get isEmpty() {
      return this.start === this.endExclusive;
    }
    delta(offset) {
      return new _OffsetRange(this.start + offset, this.endExclusive + offset);
    }
    deltaStart(offset) {
      return new _OffsetRange(this.start + offset, this.endExclusive);
    }
    deltaEnd(offset) {
      return new _OffsetRange(this.start, this.endExclusive + offset);
    }
    get length() {
      return this.endExclusive - this.start;
    }
    toString() {
      return `[${this.start}, ${this.endExclusive})`;
    }
    contains(offset) {
      return this.start <= offset && offset < this.endExclusive;
    }
    /**
     * for all numbers n: range1.contains(n) or range2.contains(n) => range1.join(range2).contains(n)
     * The joined range is the smallest range that contains both ranges.
     */
    join(other) {
      return new _OffsetRange(Math.min(this.start, other.start), Math.max(this.endExclusive, other.endExclusive));
    }
    /**
     * for all numbers n: range1.contains(n) and range2.contains(n) <=> range1.intersect(range2).contains(n)
     *
     * The resulting range is empty if the ranges do not intersect, but touch.
     * If the ranges don't even touch, the result is undefined.
     */
    intersect(other) {
      const start = Math.max(this.start, other.start);
      const end = Math.min(this.endExclusive, other.endExclusive);
      if (start <= end) {
        return new _OffsetRange(start, end);
      }
      return void 0;
    }
    intersects(other) {
      const start = Math.max(this.start, other.start);
      const end = Math.min(this.endExclusive, other.endExclusive);
      return start < end;
    }
    isBefore(other) {
      return this.endExclusive <= other.start;
    }
    isAfter(other) {
      return this.start >= other.endExclusive;
    }
    slice(arr) {
      return arr.slice(this.start, this.endExclusive);
    }
    substring(str) {
      return str.substring(this.start, this.endExclusive);
    }
    /**
     * Returns the given value if it is contained in this instance, otherwise the closest value that is contained.
     * The range must not be empty.
     */
    clip(value) {
      if (this.isEmpty) {
        throw new BugIndicatingError(`Invalid clipping range: ${this.toString()}`);
      }
      return Math.max(this.start, Math.min(this.endExclusive - 1, value));
    }
    /**
     * Returns `r := value + k * length` such that `r` is contained in this range.
     * The range must not be empty.
     *
     * E.g. `[5, 10).clipCyclic(10) === 5`, `[5, 10).clipCyclic(11) === 6` and `[5, 10).clipCyclic(4) === 9`.
     */
    clipCyclic(value) {
      if (this.isEmpty) {
        throw new BugIndicatingError(`Invalid clipping range: ${this.toString()}`);
      }
      if (value < this.start) {
        return this.endExclusive - (this.start - value) % this.length;
      }
      if (value >= this.endExclusive) {
        return this.start + (value - this.start) % this.length;
      }
      return value;
    }
    forEach(f2) {
      for (let i = this.start; i < this.endExclusive; i++) {
        f2(i);
      }
    }
  };

  // node_modules/monaco-editor/esm/vs/base/common/arraysFind.js
  function findLastMonotonous(array, predicate) {
    const idx = findLastIdxMonotonous(array, predicate);
    return idx === -1 ? void 0 : array[idx];
  }
  function findLastIdxMonotonous(array, predicate, startIdx = 0, endIdxEx = array.length) {
    let i = startIdx;
    let j = endIdxEx;
    while (i < j) {
      const k = Math.floor((i + j) / 2);
      if (predicate(array[k])) {
        i = k + 1;
      } else {
        j = k;
      }
    }
    return i - 1;
  }
  function findFirstMonotonous(array, predicate) {
    const idx = findFirstIdxMonotonousOrArrLen(array, predicate);
    return idx === array.length ? void 0 : array[idx];
  }
  function findFirstIdxMonotonousOrArrLen(array, predicate, startIdx = 0, endIdxEx = array.length) {
    let i = startIdx;
    let j = endIdxEx;
    while (i < j) {
      const k = Math.floor((i + j) / 2);
      if (predicate(array[k])) {
        j = k;
      } else {
        i = k + 1;
      }
    }
    return i;
  }
  var MonotonousArray = class _MonotonousArray {
    constructor(_array) {
      this._array = _array;
      this._findLastMonotonousLastIdx = 0;
    }
    /**
     * The predicate must be monotonous, i.e. `arr.map(predicate)` must be like `[true, ..., true, false, ..., false]`!
     * For subsequent calls, current predicate must be weaker than (or equal to) the previous predicate, i.e. more entries must be `true`.
     */
    findLastMonotonous(predicate) {
      if (_MonotonousArray.assertInvariants) {
        if (this._prevFindLastPredicate) {
          for (const item of this._array) {
            if (this._prevFindLastPredicate(item) && !predicate(item)) {
              throw new Error("MonotonousArray: current predicate must be weaker than (or equal to) the previous predicate.");
            }
          }
        }
        this._prevFindLastPredicate = predicate;
      }
      const idx = findLastIdxMonotonous(this._array, predicate, this._findLastMonotonousLastIdx);
      this._findLastMonotonousLastIdx = idx + 1;
      return idx === -1 ? void 0 : this._array[idx];
    }
  };
  MonotonousArray.assertInvariants = false;

  // node_modules/monaco-editor/esm/vs/editor/common/core/lineRange.js
  var LineRange = class _LineRange {
    static fromRangeInclusive(range) {
      return new _LineRange(range.startLineNumber, range.endLineNumber + 1);
    }
    /**
     * @param lineRanges An array of sorted line ranges.
     */
    static joinMany(lineRanges) {
      if (lineRanges.length === 0) {
        return [];
      }
      let result = new LineRangeSet(lineRanges[0].slice());
      for (let i = 1; i < lineRanges.length; i++) {
        result = result.getUnion(new LineRangeSet(lineRanges[i].slice()));
      }
      return result.ranges;
    }
    static join(lineRanges) {
      if (lineRanges.length === 0) {
        throw new BugIndicatingError("lineRanges cannot be empty");
      }
      let startLineNumber = lineRanges[0].startLineNumber;
      let endLineNumberExclusive = lineRanges[0].endLineNumberExclusive;
      for (let i = 1; i < lineRanges.length; i++) {
        startLineNumber = Math.min(startLineNumber, lineRanges[i].startLineNumber);
        endLineNumberExclusive = Math.max(endLineNumberExclusive, lineRanges[i].endLineNumberExclusive);
      }
      return new _LineRange(startLineNumber, endLineNumberExclusive);
    }
    static ofLength(startLineNumber, length) {
      return new _LineRange(startLineNumber, startLineNumber + length);
    }
    /**
     * @internal
     */
    static deserialize(lineRange) {
      return new _LineRange(lineRange[0], lineRange[1]);
    }
    constructor(startLineNumber, endLineNumberExclusive) {
      if (startLineNumber > endLineNumberExclusive) {
        throw new BugIndicatingError(`startLineNumber ${startLineNumber} cannot be after endLineNumberExclusive ${endLineNumberExclusive}`);
      }
      this.startLineNumber = startLineNumber;
      this.endLineNumberExclusive = endLineNumberExclusive;
    }
    /**
     * Indicates if this line range contains the given line number.
     */
    contains(lineNumber) {
      return this.startLineNumber <= lineNumber && lineNumber < this.endLineNumberExclusive;
    }
    /**
     * Indicates if this line range is empty.
     */
    get isEmpty() {
      return this.startLineNumber === this.endLineNumberExclusive;
    }
    /**
     * Moves this line range by the given offset of line numbers.
     */
    delta(offset) {
      return new _LineRange(this.startLineNumber + offset, this.endLineNumberExclusive + offset);
    }
    deltaLength(offset) {
      return new _LineRange(this.startLineNumber, this.endLineNumberExclusive + offset);
    }
    /**
     * The number of lines this line range spans.
     */
    get length() {
      return this.endLineNumberExclusive - this.startLineNumber;
    }
    /**
     * Creates a line range that combines this and the given line range.
     */
    join(other) {
      return new _LineRange(Math.min(this.startLineNumber, other.startLineNumber), Math.max(this.endLineNumberExclusive, other.endLineNumberExclusive));
    }
    toString() {
      return `[${this.startLineNumber},${this.endLineNumberExclusive})`;
    }
    /**
     * The resulting range is empty if the ranges do not intersect, but touch.
     * If the ranges don't even touch, the result is undefined.
     */
    intersect(other) {
      const startLineNumber = Math.max(this.startLineNumber, other.startLineNumber);
      const endLineNumberExclusive = Math.min(this.endLineNumberExclusive, other.endLineNumberExclusive);
      if (startLineNumber <= endLineNumberExclusive) {
        return new _LineRange(startLineNumber, endLineNumberExclusive);
      }
      return void 0;
    }
    intersectsStrict(other) {
      return this.startLineNumber < other.endLineNumberExclusive && other.startLineNumber < this.endLineNumberExclusive;
    }
    overlapOrTouch(other) {
      return this.startLineNumber <= other.endLineNumberExclusive && other.startLineNumber <= this.endLineNumberExclusive;
    }
    equals(b) {
      return this.startLineNumber === b.startLineNumber && this.endLineNumberExclusive === b.endLineNumberExclusive;
    }
    toInclusiveRange() {
      if (this.isEmpty) {
        return null;
      }
      return new Range(this.startLineNumber, 1, this.endLineNumberExclusive - 1, Number.MAX_SAFE_INTEGER);
    }
    /**
     * @deprecated Using this function is discouraged because it might lead to bugs: The end position is not guaranteed to be a valid position!
    */
    toExclusiveRange() {
      return new Range(this.startLineNumber, 1, this.endLineNumberExclusive, 1);
    }
    mapToLineArray(f2) {
      const result = [];
      for (let lineNumber = this.startLineNumber; lineNumber < this.endLineNumberExclusive; lineNumber++) {
        result.push(f2(lineNumber));
      }
      return result;
    }
    forEach(f2) {
      for (let lineNumber = this.startLineNumber; lineNumber < this.endLineNumberExclusive; lineNumber++) {
        f2(lineNumber);
      }
    }
    /**
     * @internal
     */
    serialize() {
      return [this.startLineNumber, this.endLineNumberExclusive];
    }
    includes(lineNumber) {
      return this.startLineNumber <= lineNumber && lineNumber < this.endLineNumberExclusive;
    }
    /**
     * Converts this 1-based line range to a 0-based offset range (subtracts 1!).
     * @internal
     */
    toOffsetRange() {
      return new OffsetRange(this.startLineNumber - 1, this.endLineNumberExclusive - 1);
    }
  };
  var LineRangeSet = class _LineRangeSet {
    constructor(_normalizedRanges = []) {
      this._normalizedRanges = _normalizedRanges;
    }
    get ranges() {
      return this._normalizedRanges;
    }
    addRange(range) {
      if (range.length === 0) {
        return;
      }
      const joinRangeStartIdx = findFirstIdxMonotonousOrArrLen(this._normalizedRanges, (r) => r.endLineNumberExclusive >= range.startLineNumber);
      const joinRangeEndIdxExclusive = findLastIdxMonotonous(this._normalizedRanges, (r) => r.startLineNumber <= range.endLineNumberExclusive) + 1;
      if (joinRangeStartIdx === joinRangeEndIdxExclusive) {
        this._normalizedRanges.splice(joinRangeStartIdx, 0, range);
      } else if (joinRangeStartIdx === joinRangeEndIdxExclusive - 1) {
        const joinRange = this._normalizedRanges[joinRangeStartIdx];
        this._normalizedRanges[joinRangeStartIdx] = joinRange.join(range);
      } else {
        const joinRange = this._normalizedRanges[joinRangeStartIdx].join(this._normalizedRanges[joinRangeEndIdxExclusive - 1]).join(range);
        this._normalizedRanges.splice(joinRangeStartIdx, joinRangeEndIdxExclusive - joinRangeStartIdx, joinRange);
      }
    }
    contains(lineNumber) {
      const rangeThatStartsBeforeEnd = findLastMonotonous(this._normalizedRanges, (r) => r.startLineNumber <= lineNumber);
      return !!rangeThatStartsBeforeEnd && rangeThatStartsBeforeEnd.endLineNumberExclusive > lineNumber;
    }
    intersects(range) {
      const rangeThatStartsBeforeEnd = findLastMonotonous(this._normalizedRanges, (r) => r.startLineNumber < range.endLineNumberExclusive);
      return !!rangeThatStartsBeforeEnd && rangeThatStartsBeforeEnd.endLineNumberExclusive > range.startLineNumber;
    }
    getUnion(other) {
      if (this._normalizedRanges.length === 0) {
        return other;
      }
      if (other._normalizedRanges.length === 0) {
        return this;
      }
      const result = [];
      let i1 = 0;
      let i2 = 0;
      let current = null;
      while (i1 < this._normalizedRanges.length || i2 < other._normalizedRanges.length) {
        let next = null;
        if (i1 < this._normalizedRanges.length && i2 < other._normalizedRanges.length) {
          const lineRange1 = this._normalizedRanges[i1];
          const lineRange2 = other._normalizedRanges[i2];
          if (lineRange1.startLineNumber < lineRange2.startLineNumber) {
            next = lineRange1;
            i1++;
          } else {
            next = lineRange2;
            i2++;
          }
        } else if (i1 < this._normalizedRanges.length) {
          next = this._normalizedRanges[i1];
          i1++;
        } else {
          next = other._normalizedRanges[i2];
          i2++;
        }
        if (current === null) {
          current = next;
        } else {
          if (current.endLineNumberExclusive >= next.startLineNumber) {
            current = new LineRange(current.startLineNumber, Math.max(current.endLineNumberExclusive, next.endLineNumberExclusive));
          } else {
            result.push(current);
            current = next;
          }
        }
      }
      if (current !== null) {
        result.push(current);
      }
      return new _LineRangeSet(result);
    }
    /**
     * Subtracts all ranges in this set from `range` and returns the result.
     */
    subtractFrom(range) {
      const joinRangeStartIdx = findFirstIdxMonotonousOrArrLen(this._normalizedRanges, (r) => r.endLineNumberExclusive >= range.startLineNumber);
      const joinRangeEndIdxExclusive = findLastIdxMonotonous(this._normalizedRanges, (r) => r.startLineNumber <= range.endLineNumberExclusive) + 1;
      if (joinRangeStartIdx === joinRangeEndIdxExclusive) {
        return new _LineRangeSet([range]);
      }
      const result = [];
      let startLineNumber = range.startLineNumber;
      for (let i = joinRangeStartIdx; i < joinRangeEndIdxExclusive; i++) {
        const r = this._normalizedRanges[i];
        if (r.startLineNumber > startLineNumber) {
          result.push(new LineRange(startLineNumber, r.startLineNumber));
        }
        startLineNumber = r.endLineNumberExclusive;
      }
      if (startLineNumber < range.endLineNumberExclusive) {
        result.push(new LineRange(startLineNumber, range.endLineNumberExclusive));
      }
      return new _LineRangeSet(result);
    }
    toString() {
      return this._normalizedRanges.map((r) => r.toString()).join(", ");
    }
    getIntersection(other) {
      const result = [];
      let i1 = 0;
      let i2 = 0;
      while (i1 < this._normalizedRanges.length && i2 < other._normalizedRanges.length) {
        const r1 = this._normalizedRanges[i1];
        const r2 = other._normalizedRanges[i2];
        const i = r1.intersect(r2);
        if (i && !i.isEmpty) {
          result.push(i);
        }
        if (r1.endLineNumberExclusive < r2.endLineNumberExclusive) {
          i1++;
        } else {
          i2++;
        }
      }
      return new _LineRangeSet(result);
    }
    getWithDelta(value) {
      return new _LineRangeSet(this._normalizedRanges.map((r) => r.delta(value)));
    }
  };

  // node_modules/monaco-editor/esm/vs/editor/common/core/textLength.js
  var TextLength = class _TextLength {
    static betweenPositions(position1, position2) {
      if (position1.lineNumber === position2.lineNumber) {
        return new _TextLength(0, position2.column - position1.column);
      } else {
        return new _TextLength(position2.lineNumber - position1.lineNumber, position2.column - 1);
      }
    }
    static ofRange(range) {
      return _TextLength.betweenPositions(range.getStartPosition(), range.getEndPosition());
    }
    static ofText(text) {
      let line = 0;
      let column = 0;
      for (const c of text) {
        if (c === "\n") {
          line++;
          column = 0;
        } else {
          column++;
        }
      }
      return new _TextLength(line, column);
    }
    constructor(lineCount, columnCount) {
      this.lineCount = lineCount;
      this.columnCount = columnCount;
    }
    isGreaterThanOrEqualTo(other) {
      if (this.lineCount !== other.lineCount) {
        return this.lineCount > other.lineCount;
      }
      return this.columnCount >= other.columnCount;
    }
    createRange(startPosition) {
      if (this.lineCount === 0) {
        return new Range(startPosition.lineNumber, startPosition.column, startPosition.lineNumber, startPosition.column + this.columnCount);
      } else {
        return new Range(startPosition.lineNumber, startPosition.column, startPosition.lineNumber + this.lineCount, this.columnCount + 1);
      }
    }
    addToPosition(position) {
      if (this.lineCount === 0) {
        return new Position(position.lineNumber, position.column + this.columnCount);
      } else {
        return new Position(position.lineNumber + this.lineCount, this.columnCount + 1);
      }
    }
    toString() {
      return `${this.lineCount},${this.columnCount}`;
    }
  };
  TextLength.zero = new TextLength(0, 0);

  // node_modules/monaco-editor/esm/vs/editor/common/core/textEdit.js
  var SingleTextEdit = class {
    constructor(range, text) {
      this.range = range;
      this.text = text;
    }
  };

  // node_modules/monaco-editor/esm/vs/editor/common/diff/rangeMapping.js
  var LineRangeMapping = class _LineRangeMapping {
    static inverse(mapping, originalLineCount, modifiedLineCount) {
      const result = [];
      let lastOriginalEndLineNumber = 1;
      let lastModifiedEndLineNumber = 1;
      for (const m of mapping) {
        const r2 = new _LineRangeMapping(new LineRange(lastOriginalEndLineNumber, m.original.startLineNumber), new LineRange(lastModifiedEndLineNumber, m.modified.startLineNumber));
        if (!r2.modified.isEmpty) {
          result.push(r2);
        }
        lastOriginalEndLineNumber = m.original.endLineNumberExclusive;
        lastModifiedEndLineNumber = m.modified.endLineNumberExclusive;
      }
      const r = new _LineRangeMapping(new LineRange(lastOriginalEndLineNumber, originalLineCount + 1), new LineRange(lastModifiedEndLineNumber, modifiedLineCount + 1));
      if (!r.modified.isEmpty) {
        result.push(r);
      }
      return result;
    }
    static clip(mapping, originalRange, modifiedRange) {
      const result = [];
      for (const m of mapping) {
        const original = m.original.intersect(originalRange);
        const modified = m.modified.intersect(modifiedRange);
        if (original && !original.isEmpty && modified && !modified.isEmpty) {
          result.push(new _LineRangeMapping(original, modified));
        }
      }
      return result;
    }
    constructor(originalRange, modifiedRange) {
      this.original = originalRange;
      this.modified = modifiedRange;
    }
    toString() {
      return `{${this.original.toString()}->${this.modified.toString()}}`;
    }
    flip() {
      return new _LineRangeMapping(this.modified, this.original);
    }
    join(other) {
      return new _LineRangeMapping(this.original.join(other.original), this.modified.join(other.modified));
    }
    /**
     * This method assumes that the LineRangeMapping describes a valid diff!
     * I.e. if one range is empty, the other range cannot be the entire document.
     * It avoids various problems when the line range points to non-existing line-numbers.
    */
    toRangeMapping() {
      const origInclusiveRange = this.original.toInclusiveRange();
      const modInclusiveRange = this.modified.toInclusiveRange();
      if (origInclusiveRange && modInclusiveRange) {
        return new RangeMapping(origInclusiveRange, modInclusiveRange);
      } else if (this.original.startLineNumber === 1 || this.modified.startLineNumber === 1) {
        if (!(this.modified.startLineNumber === 1 && this.original.startLineNumber === 1)) {
          throw new BugIndicatingError("not a valid diff");
        }
        return new RangeMapping(new Range(this.original.startLineNumber, 1, this.original.endLineNumberExclusive, 1), new Range(this.modified.startLineNumber, 1, this.modified.endLineNumberExclusive, 1));
      } else {
        return new RangeMapping(new Range(this.original.startLineNumber - 1, Number.MAX_SAFE_INTEGER, this.original.endLineNumberExclusive - 1, Number.MAX_SAFE_INTEGER), new Range(this.modified.startLineNumber - 1, Number.MAX_SAFE_INTEGER, this.modified.endLineNumberExclusive - 1, Number.MAX_SAFE_INTEGER));
      }
    }
  };
  var DetailedLineRangeMapping = class _DetailedLineRangeMapping extends LineRangeMapping {
    static fromRangeMappings(rangeMappings) {
      const originalRange = LineRange.join(rangeMappings.map((r) => LineRange.fromRangeInclusive(r.originalRange)));
      const modifiedRange = LineRange.join(rangeMappings.map((r) => LineRange.fromRangeInclusive(r.modifiedRange)));
      return new _DetailedLineRangeMapping(originalRange, modifiedRange, rangeMappings);
    }
    constructor(originalRange, modifiedRange, innerChanges) {
      super(originalRange, modifiedRange);
      this.innerChanges = innerChanges;
    }
    flip() {
      var _a4;
      return new _DetailedLineRangeMapping(this.modified, this.original, (_a4 = this.innerChanges) === null || _a4 === void 0 ? void 0 : _a4.map((c) => c.flip()));
    }
    withInnerChangesFromLineRanges() {
      return new _DetailedLineRangeMapping(this.original, this.modified, [this.toRangeMapping()]);
    }
  };
  var RangeMapping = class _RangeMapping {
    constructor(originalRange, modifiedRange) {
      this.originalRange = originalRange;
      this.modifiedRange = modifiedRange;
    }
    toString() {
      return `{${this.originalRange.toString()}->${this.modifiedRange.toString()}}`;
    }
    flip() {
      return new _RangeMapping(this.modifiedRange, this.originalRange);
    }
    /**
     * Creates a single text edit that describes the change from the original to the modified text.
    */
    toTextEdit(modified) {
      const newText = modified.getValueOfRange(this.modifiedRange);
      return new SingleTextEdit(this.originalRange, newText);
    }
  };

  // node_modules/monaco-editor/esm/vs/editor/common/diff/legacyLinesDiffComputer.js
  var MINIMUM_MATCHING_CHARACTER_LENGTH = 3;
  var LegacyLinesDiffComputer = class {
    computeDiff(originalLines, modifiedLines, options) {
      var _a4;
      const diffComputer = new DiffComputer(originalLines, modifiedLines, {
        maxComputationTime: options.maxComputationTimeMs,
        shouldIgnoreTrimWhitespace: options.ignoreTrimWhitespace,
        shouldComputeCharChanges: true,
        shouldMakePrettyDiff: true,
        shouldPostProcessCharChanges: true
      });
      const result = diffComputer.computeDiff();
      const changes = [];
      let lastChange = null;
      for (const c of result.changes) {
        let originalRange;
        if (c.originalEndLineNumber === 0) {
          originalRange = new LineRange(c.originalStartLineNumber + 1, c.originalStartLineNumber + 1);
        } else {
          originalRange = new LineRange(c.originalStartLineNumber, c.originalEndLineNumber + 1);
        }
        let modifiedRange;
        if (c.modifiedEndLineNumber === 0) {
          modifiedRange = new LineRange(c.modifiedStartLineNumber + 1, c.modifiedStartLineNumber + 1);
        } else {
          modifiedRange = new LineRange(c.modifiedStartLineNumber, c.modifiedEndLineNumber + 1);
        }
        let change = new DetailedLineRangeMapping(originalRange, modifiedRange, (_a4 = c.charChanges) === null || _a4 === void 0 ? void 0 : _a4.map((c2) => new RangeMapping(new Range(c2.originalStartLineNumber, c2.originalStartColumn, c2.originalEndLineNumber, c2.originalEndColumn), new Range(c2.modifiedStartLineNumber, c2.modifiedStartColumn, c2.modifiedEndLineNumber, c2.modifiedEndColumn))));
        if (lastChange) {
          if (lastChange.modified.endLineNumberExclusive === change.modified.startLineNumber || lastChange.original.endLineNumberExclusive === change.original.startLineNumber) {
            change = new DetailedLineRangeMapping(lastChange.original.join(change.original), lastChange.modified.join(change.modified), lastChange.innerChanges && change.innerChanges ? lastChange.innerChanges.concat(change.innerChanges) : void 0);
            changes.pop();
          }
        }
        changes.push(change);
        lastChange = change;
      }
      assertFn(() => {
        return checkAdjacentItems(changes, (m1, m2) => m2.original.startLineNumber - m1.original.endLineNumberExclusive === m2.modified.startLineNumber - m1.modified.endLineNumberExclusive && // There has to be an unchanged line in between (otherwise both diffs should have been joined)
        m1.original.endLineNumberExclusive < m2.original.startLineNumber && m1.modified.endLineNumberExclusive < m2.modified.startLineNumber);
      });
      return new LinesDiff(changes, [], result.quitEarly);
    }
  };
  function computeDiff(originalSequence, modifiedSequence, continueProcessingPredicate, pretty) {
    const diffAlgo = new LcsDiff(originalSequence, modifiedSequence, continueProcessingPredicate);
    return diffAlgo.ComputeDiff(pretty);
  }
  var LineSequence = class {
    constructor(lines) {
      const startColumns = [];
      const endColumns = [];
      for (let i = 0, length = lines.length; i < length; i++) {
        startColumns[i] = getFirstNonBlankColumn(lines[i], 1);
        endColumns[i] = getLastNonBlankColumn(lines[i], 1);
      }
      this.lines = lines;
      this._startColumns = startColumns;
      this._endColumns = endColumns;
    }
    getElements() {
      const elements = [];
      for (let i = 0, len = this.lines.length; i < len; i++) {
        elements[i] = this.lines[i].substring(this._startColumns[i] - 1, this._endColumns[i] - 1);
      }
      return elements;
    }
    getStrictElement(index) {
      return this.lines[index];
    }
    getStartLineNumber(i) {
      return i + 1;
    }
    getEndLineNumber(i) {
      return i + 1;
    }
    createCharSequence(shouldIgnoreTrimWhitespace, startIndex, endIndex) {
      const charCodes = [];
      const lineNumbers = [];
      const columns = [];
      let len = 0;
      for (let index = startIndex; index <= endIndex; index++) {
        const lineContent = this.lines[index];
        const startColumn = shouldIgnoreTrimWhitespace ? this._startColumns[index] : 1;
        const endColumn = shouldIgnoreTrimWhitespace ? this._endColumns[index] : lineContent.length + 1;
        for (let col = startColumn; col < endColumn; col++) {
          charCodes[len] = lineContent.charCodeAt(col - 1);
          lineNumbers[len] = index + 1;
          columns[len] = col;
          len++;
        }
        if (!shouldIgnoreTrimWhitespace && index < endIndex) {
          charCodes[len] = 10;
          lineNumbers[len] = index + 1;
          columns[len] = lineContent.length + 1;
          len++;
        }
      }
      return new CharSequence(charCodes, lineNumbers, columns);
    }
  };
  var CharSequence = class {
    constructor(charCodes, lineNumbers, columns) {
      this._charCodes = charCodes;
      this._lineNumbers = lineNumbers;
      this._columns = columns;
    }
    toString() {
      return "[" + this._charCodes.map((s, idx) => (s === 10 ? "\\n" : String.fromCharCode(s)) + `-(${this._lineNumbers[idx]},${this._columns[idx]})`).join(", ") + "]";
    }
    _assertIndex(index, arr) {
      if (index < 0 || index >= arr.length) {
        throw new Error(`Illegal index`);
      }
    }
    getElements() {
      return this._charCodes;
    }
    getStartLineNumber(i) {
      if (i > 0 && i === this._lineNumbers.length) {
        return this.getEndLineNumber(i - 1);
      }
      this._assertIndex(i, this._lineNumbers);
      return this._lineNumbers[i];
    }
    getEndLineNumber(i) {
      if (i === -1) {
        return this.getStartLineNumber(i + 1);
      }
      this._assertIndex(i, this._lineNumbers);
      if (this._charCodes[i] === 10) {
        return this._lineNumbers[i] + 1;
      }
      return this._lineNumbers[i];
    }
    getStartColumn(i) {
      if (i > 0 && i === this._columns.length) {
        return this.getEndColumn(i - 1);
      }
      this._assertIndex(i, this._columns);
      return this._columns[i];
    }
    getEndColumn(i) {
      if (i === -1) {
        return this.getStartColumn(i + 1);
      }
      this._assertIndex(i, this._columns);
      if (this._charCodes[i] === 10) {
        return 1;
      }
      return this._columns[i] + 1;
    }
  };
  var CharChange = class _CharChange {
    constructor(originalStartLineNumber, originalStartColumn, originalEndLineNumber, originalEndColumn, modifiedStartLineNumber, modifiedStartColumn, modifiedEndLineNumber, modifiedEndColumn) {
      this.originalStartLineNumber = originalStartLineNumber;
      this.originalStartColumn = originalStartColumn;
      this.originalEndLineNumber = originalEndLineNumber;
      this.originalEndColumn = originalEndColumn;
      this.modifiedStartLineNumber = modifiedStartLineNumber;
      this.modifiedStartColumn = modifiedStartColumn;
      this.modifiedEndLineNumber = modifiedEndLineNumber;
      this.modifiedEndColumn = modifiedEndColumn;
    }
    static createFromDiffChange(diffChange, originalCharSequence, modifiedCharSequence) {
      const originalStartLineNumber = originalCharSequence.getStartLineNumber(diffChange.originalStart);
      const originalStartColumn = originalCharSequence.getStartColumn(diffChange.originalStart);
      const originalEndLineNumber = originalCharSequence.getEndLineNumber(diffChange.originalStart + diffChange.originalLength - 1);
      const originalEndColumn = originalCharSequence.getEndColumn(diffChange.originalStart + diffChange.originalLength - 1);
      const modifiedStartLineNumber = modifiedCharSequence.getStartLineNumber(diffChange.modifiedStart);
      const modifiedStartColumn = modifiedCharSequence.getStartColumn(diffChange.modifiedStart);
      const modifiedEndLineNumber = modifiedCharSequence.getEndLineNumber(diffChange.modifiedStart + diffChange.modifiedLength - 1);
      const modifiedEndColumn = modifiedCharSequence.getEndColumn(diffChange.modifiedStart + diffChange.modifiedLength - 1);
      return new _CharChange(originalStartLineNumber, originalStartColumn, originalEndLineNumber, originalEndColumn, modifiedStartLineNumber, modifiedStartColumn, modifiedEndLineNumber, modifiedEndColumn);
    }
  };
  function postProcessCharChanges(rawChanges) {
    if (rawChanges.length <= 1) {
      return rawChanges;
    }
    const result = [rawChanges[0]];
    let prevChange = result[0];
    for (let i = 1, len = rawChanges.length; i < len; i++) {
      const currChange = rawChanges[i];
      const originalMatchingLength = currChange.originalStart - (prevChange.originalStart + prevChange.originalLength);
      const modifiedMatchingLength = currChange.modifiedStart - (prevChange.modifiedStart + prevChange.modifiedLength);
      const matchingLength = Math.min(originalMatchingLength, modifiedMatchingLength);
      if (matchingLength < MINIMUM_MATCHING_CHARACTER_LENGTH) {
        prevChange.originalLength = currChange.originalStart + currChange.originalLength - prevChange.originalStart;
        prevChange.modifiedLength = currChange.modifiedStart + currChange.modifiedLength - prevChange.modifiedStart;
      } else {
        result.push(currChange);
        prevChange = currChange;
      }
    }
    return result;
  }
  var LineChange = class _LineChange {
    constructor(originalStartLineNumber, originalEndLineNumber, modifiedStartLineNumber, modifiedEndLineNumber, charChanges) {
      this.originalStartLineNumber = originalStartLineNumber;
      this.originalEndLineNumber = originalEndLineNumber;
      this.modifiedStartLineNumber = modifiedStartLineNumber;
      this.modifiedEndLineNumber = modifiedEndLineNumber;
      this.charChanges = charChanges;
    }
    static createFromDiffResult(shouldIgnoreTrimWhitespace, diffChange, originalLineSequence, modifiedLineSequence, continueCharDiff, shouldComputeCharChanges, shouldPostProcessCharChanges) {
      let originalStartLineNumber;
      let originalEndLineNumber;
      let modifiedStartLineNumber;
      let modifiedEndLineNumber;
      let charChanges = void 0;
      if (diffChange.originalLength === 0) {
        originalStartLineNumber = originalLineSequence.getStartLineNumber(diffChange.originalStart) - 1;
        originalEndLineNumber = 0;
      } else {
        originalStartLineNumber = originalLineSequence.getStartLineNumber(diffChange.originalStart);
        originalEndLineNumber = originalLineSequence.getEndLineNumber(diffChange.originalStart + diffChange.originalLength - 1);
      }
      if (diffChange.modifiedLength === 0) {
        modifiedStartLineNumber = modifiedLineSequence.getStartLineNumber(diffChange.modifiedStart) - 1;
        modifiedEndLineNumber = 0;
      } else {
        modifiedStartLineNumber = modifiedLineSequence.getStartLineNumber(diffChange.modifiedStart);
        modifiedEndLineNumber = modifiedLineSequence.getEndLineNumber(diffChange.modifiedStart + diffChange.modifiedLength - 1);
      }
      if (shouldComputeCharChanges && diffChange.originalLength > 0 && diffChange.originalLength < 20 && diffChange.modifiedLength > 0 && diffChange.modifiedLength < 20 && continueCharDiff()) {
        const originalCharSequence = originalLineSequence.createCharSequence(shouldIgnoreTrimWhitespace, diffChange.originalStart, diffChange.originalStart + diffChange.originalLength - 1);
        const modifiedCharSequence = modifiedLineSequence.createCharSequence(shouldIgnoreTrimWhitespace, diffChange.modifiedStart, diffChange.modifiedStart + diffChange.modifiedLength - 1);
        if (originalCharSequence.getElements().length > 0 && modifiedCharSequence.getElements().length > 0) {
          let rawChanges = computeDiff(originalCharSequence, modifiedCharSequence, continueCharDiff, true).changes;
          if (shouldPostProcessCharChanges) {
            rawChanges = postProcessCharChanges(rawChanges);
          }
          charChanges = [];
          for (let i = 0, length = rawChanges.length; i < length; i++) {
            charChanges.push(CharChange.createFromDiffChange(rawChanges[i], originalCharSequence, modifiedCharSequence));
          }
        }
      }
      return new _LineChange(originalStartLineNumber, originalEndLineNumber, modifiedStartLineNumber, modifiedEndLineNumber, charChanges);
    }
  };
  var DiffComputer = class {
    constructor(originalLines, modifiedLines, opts) {
      this.shouldComputeCharChanges = opts.shouldComputeCharChanges;
      this.shouldPostProcessCharChanges = opts.shouldPostProcessCharChanges;
      this.shouldIgnoreTrimWhitespace = opts.shouldIgnoreTrimWhitespace;
      this.shouldMakePrettyDiff = opts.shouldMakePrettyDiff;
      this.originalLines = originalLines;
      this.modifiedLines = modifiedLines;
      this.original = new LineSequence(originalLines);
      this.modified = new LineSequence(modifiedLines);
      this.continueLineDiff = createContinueProcessingPredicate(opts.maxComputationTime);
      this.continueCharDiff = createContinueProcessingPredicate(opts.maxComputationTime === 0 ? 0 : Math.min(opts.maxComputationTime, 5e3));
    }
    computeDiff() {
      if (this.original.lines.length === 1 && this.original.lines[0].length === 0) {
        if (this.modified.lines.length === 1 && this.modified.lines[0].length === 0) {
          return {
            quitEarly: false,
            changes: []
          };
        }
        return {
          quitEarly: false,
          changes: [{
            originalStartLineNumber: 1,
            originalEndLineNumber: 1,
            modifiedStartLineNumber: 1,
            modifiedEndLineNumber: this.modified.lines.length,
            charChanges: void 0
          }]
        };
      }
      if (this.modified.lines.length === 1 && this.modified.lines[0].length === 0) {
        return {
          quitEarly: false,
          changes: [{
            originalStartLineNumber: 1,
            originalEndLineNumber: this.original.lines.length,
            modifiedStartLineNumber: 1,
            modifiedEndLineNumber: 1,
            charChanges: void 0
          }]
        };
      }
      const diffResult = computeDiff(this.original, this.modified, this.continueLineDiff, this.shouldMakePrettyDiff);
      const rawChanges = diffResult.changes;
      const quitEarly = diffResult.quitEarly;
      if (this.shouldIgnoreTrimWhitespace) {
        const lineChanges = [];
        for (let i = 0, length = rawChanges.length; i < length; i++) {
          lineChanges.push(LineChange.createFromDiffResult(this.shouldIgnoreTrimWhitespace, rawChanges[i], this.original, this.modified, this.continueCharDiff, this.shouldComputeCharChanges, this.shouldPostProcessCharChanges));
        }
        return {
          quitEarly,
          changes: lineChanges
        };
      }
      const result = [];
      let originalLineIndex = 0;
      let modifiedLineIndex = 0;
      for (let i = -1, len = rawChanges.length; i < len; i++) {
        const nextChange = i + 1 < len ? rawChanges[i + 1] : null;
        const originalStop = nextChange ? nextChange.originalStart : this.originalLines.length;
        const modifiedStop = nextChange ? nextChange.modifiedStart : this.modifiedLines.length;
        while (originalLineIndex < originalStop && modifiedLineIndex < modifiedStop) {
          const originalLine = this.originalLines[originalLineIndex];
          const modifiedLine = this.modifiedLines[modifiedLineIndex];
          if (originalLine !== modifiedLine) {
            {
              let originalStartColumn = getFirstNonBlankColumn(originalLine, 1);
              let modifiedStartColumn = getFirstNonBlankColumn(modifiedLine, 1);
              while (originalStartColumn > 1 && modifiedStartColumn > 1) {
                const originalChar = originalLine.charCodeAt(originalStartColumn - 2);
                const modifiedChar = modifiedLine.charCodeAt(modifiedStartColumn - 2);
                if (originalChar !== modifiedChar) {
                  break;
                }
                originalStartColumn--;
                modifiedStartColumn--;
              }
              if (originalStartColumn > 1 || modifiedStartColumn > 1) {
                this._pushTrimWhitespaceCharChange(result, originalLineIndex + 1, 1, originalStartColumn, modifiedLineIndex + 1, 1, modifiedStartColumn);
              }
            }
            {
              let originalEndColumn = getLastNonBlankColumn(originalLine, 1);
              let modifiedEndColumn = getLastNonBlankColumn(modifiedLine, 1);
              const originalMaxColumn = originalLine.length + 1;
              const modifiedMaxColumn = modifiedLine.length + 1;
              while (originalEndColumn < originalMaxColumn && modifiedEndColumn < modifiedMaxColumn) {
                const originalChar = originalLine.charCodeAt(originalEndColumn - 1);
                const modifiedChar = originalLine.charCodeAt(modifiedEndColumn - 1);
                if (originalChar !== modifiedChar) {
                  break;
                }
                originalEndColumn++;
                modifiedEndColumn++;
              }
              if (originalEndColumn < originalMaxColumn || modifiedEndColumn < modifiedMaxColumn) {
                this._pushTrimWhitespaceCharChange(result, originalLineIndex + 1, originalEndColumn, originalMaxColumn, modifiedLineIndex + 1, modifiedEndColumn, modifiedMaxColumn);
              }
            }
          }
          originalLineIndex++;
          modifiedLineIndex++;
        }
        if (nextChange) {
          result.push(LineChange.createFromDiffResult(this.shouldIgnoreTrimWhitespace, nextChange, this.original, this.modified, this.continueCharDiff, this.shouldComputeCharChanges, this.shouldPostProcessCharChanges));
          originalLineIndex += nextChange.originalLength;
          modifiedLineIndex += nextChange.modifiedLength;
        }
      }
      return {
        quitEarly,
        changes: result
      };
    }
    _pushTrimWhitespaceCharChange(result, originalLineNumber, originalStartColumn, originalEndColumn, modifiedLineNumber, modifiedStartColumn, modifiedEndColumn) {
      if (this._mergeTrimWhitespaceCharChange(result, originalLineNumber, originalStartColumn, originalEndColumn, modifiedLineNumber, modifiedStartColumn, modifiedEndColumn)) {
        return;
      }
      let charChanges = void 0;
      if (this.shouldComputeCharChanges) {
        charChanges = [new CharChange(originalLineNumber, originalStartColumn, originalLineNumber, originalEndColumn, modifiedLineNumber, modifiedStartColumn, modifiedLineNumber, modifiedEndColumn)];
      }
      result.push(new LineChange(originalLineNumber, originalLineNumber, modifiedLineNumber, modifiedLineNumber, charChanges));
    }
    _mergeTrimWhitespaceCharChange(result, originalLineNumber, originalStartColumn, originalEndColumn, modifiedLineNumber, modifiedStartColumn, modifiedEndColumn) {
      const len = result.length;
      if (len === 0) {
        return false;
      }
      const prevChange = result[len - 1];
      if (prevChange.originalEndLineNumber === 0 || prevChange.modifiedEndLineNumber === 0) {
        return false;
      }
      if (prevChange.originalEndLineNumber === originalLineNumber && prevChange.modifiedEndLineNumber === modifiedLineNumber) {
        if (this.shouldComputeCharChanges && prevChange.charChanges) {
          prevChange.charChanges.push(new CharChange(originalLineNumber, originalStartColumn, originalLineNumber, originalEndColumn, modifiedLineNumber, modifiedStartColumn, modifiedLineNumber, modifiedEndColumn));
        }
        return true;
      }
      if (prevChange.originalEndLineNumber + 1 === originalLineNumber && prevChange.modifiedEndLineNumber + 1 === modifiedLineNumber) {
        prevChange.originalEndLineNumber = originalLineNumber;
        prevChange.modifiedEndLineNumber = modifiedLineNumber;
        if (this.shouldComputeCharChanges && prevChange.charChanges) {
          prevChange.charChanges.push(new CharChange(originalLineNumber, originalStartColumn, originalLineNumber, originalEndColumn, modifiedLineNumber, modifiedStartColumn, modifiedLineNumber, modifiedEndColumn));
        }
        return true;
      }
      return false;
    }
  };
  function getFirstNonBlankColumn(txt, defaultValue) {
    const r = firstNonWhitespaceIndex(txt);
    if (r === -1) {
      return defaultValue;
    }
    return r + 1;
  }
  function getLastNonBlankColumn(txt, defaultValue) {
    const r = lastNonWhitespaceIndex(txt);
    if (r === -1) {
      return defaultValue;
    }
    return r + 2;
  }
  function createContinueProcessingPredicate(maximumRuntime) {
    if (maximumRuntime === 0) {
      return () => true;
    }
    const startTime = Date.now();
    return () => {
      return Date.now() - startTime < maximumRuntime;
    };
  }

  // node_modules/monaco-editor/esm/vs/editor/common/diff/defaultLinesDiffComputer/algorithms/diffAlgorithm.js
  var DiffAlgorithmResult = class _DiffAlgorithmResult {
    static trivial(seq1, seq2) {
      return new _DiffAlgorithmResult([new SequenceDiff(OffsetRange.ofLength(seq1.length), OffsetRange.ofLength(seq2.length))], false);
    }
    static trivialTimedOut(seq1, seq2) {
      return new _DiffAlgorithmResult([new SequenceDiff(OffsetRange.ofLength(seq1.length), OffsetRange.ofLength(seq2.length))], true);
    }
    constructor(diffs, hitTimeout) {
      this.diffs = diffs;
      this.hitTimeout = hitTimeout;
    }
  };
  var SequenceDiff = class _SequenceDiff {
    static invert(sequenceDiffs, doc1Length) {
      const result = [];
      forEachAdjacent(sequenceDiffs, (a2, b) => {
        result.push(_SequenceDiff.fromOffsetPairs(a2 ? a2.getEndExclusives() : OffsetPair.zero, b ? b.getStarts() : new OffsetPair(doc1Length, (a2 ? a2.seq2Range.endExclusive - a2.seq1Range.endExclusive : 0) + doc1Length)));
      });
      return result;
    }
    static fromOffsetPairs(start, endExclusive) {
      return new _SequenceDiff(new OffsetRange(start.offset1, endExclusive.offset1), new OffsetRange(start.offset2, endExclusive.offset2));
    }
    constructor(seq1Range, seq2Range) {
      this.seq1Range = seq1Range;
      this.seq2Range = seq2Range;
    }
    swap() {
      return new _SequenceDiff(this.seq2Range, this.seq1Range);
    }
    toString() {
      return `${this.seq1Range} <-> ${this.seq2Range}`;
    }
    join(other) {
      return new _SequenceDiff(this.seq1Range.join(other.seq1Range), this.seq2Range.join(other.seq2Range));
    }
    delta(offset) {
      if (offset === 0) {
        return this;
      }
      return new _SequenceDiff(this.seq1Range.delta(offset), this.seq2Range.delta(offset));
    }
    deltaStart(offset) {
      if (offset === 0) {
        return this;
      }
      return new _SequenceDiff(this.seq1Range.deltaStart(offset), this.seq2Range.deltaStart(offset));
    }
    deltaEnd(offset) {
      if (offset === 0) {
        return this;
      }
      return new _SequenceDiff(this.seq1Range.deltaEnd(offset), this.seq2Range.deltaEnd(offset));
    }
    intersect(other) {
      const i1 = this.seq1Range.intersect(other.seq1Range);
      const i2 = this.seq2Range.intersect(other.seq2Range);
      if (!i1 || !i2) {
        return void 0;
      }
      return new _SequenceDiff(i1, i2);
    }
    getStarts() {
      return new OffsetPair(this.seq1Range.start, this.seq2Range.start);
    }
    getEndExclusives() {
      return new OffsetPair(this.seq1Range.endExclusive, this.seq2Range.endExclusive);
    }
  };
  var OffsetPair = class _OffsetPair {
    constructor(offset1, offset2) {
      this.offset1 = offset1;
      this.offset2 = offset2;
    }
    toString() {
      return `${this.offset1} <-> ${this.offset2}`;
    }
    delta(offset) {
      if (offset === 0) {
        return this;
      }
      return new _OffsetPair(this.offset1 + offset, this.offset2 + offset);
    }
    equals(other) {
      return this.offset1 === other.offset1 && this.offset2 === other.offset2;
    }
  };
  OffsetPair.zero = new OffsetPair(0, 0);
  OffsetPair.max = new OffsetPair(Number.MAX_SAFE_INTEGER, Number.MAX_SAFE_INTEGER);
  var InfiniteTimeout = class {
    isValid() {
      return true;
    }
  };
  InfiniteTimeout.instance = new InfiniteTimeout();
  var DateTimeout = class {
    constructor(timeout) {
      this.timeout = timeout;
      this.startTime = Date.now();
      this.valid = true;
      if (timeout <= 0) {
        throw new BugIndicatingError("timeout must be positive");
      }
    }
    // Recommendation: Set a log-point `{this.disable()}` in the body
    isValid() {
      const valid = Date.now() - this.startTime < this.timeout;
      if (!valid && this.valid) {
        this.valid = false;
        debugger;
      }
      return this.valid;
    }
  };

  // node_modules/monaco-editor/esm/vs/editor/common/diff/defaultLinesDiffComputer/utils.js
  var Array2D = class {
    constructor(width, height) {
      this.width = width;
      this.height = height;
      this.array = [];
      this.array = new Array(width * height);
    }
    get(x, y) {
      return this.array[x + y * this.width];
    }
    set(x, y, value) {
      this.array[x + y * this.width] = value;
    }
  };
  function isSpace(charCode) {
    return charCode === 32 || charCode === 9;
  }
  var LineRangeFragment = class _LineRangeFragment {
    static getKey(chr) {
      let key = this.chrKeys.get(chr);
      if (key === void 0) {
        key = this.chrKeys.size;
        this.chrKeys.set(chr, key);
      }
      return key;
    }
    constructor(range, lines, source) {
      this.range = range;
      this.lines = lines;
      this.source = source;
      this.histogram = [];
      let counter = 0;
      for (let i = range.startLineNumber - 1; i < range.endLineNumberExclusive - 1; i++) {
        const line = lines[i];
        for (let j = 0; j < line.length; j++) {
          counter++;
          const chr = line[j];
          const key2 = _LineRangeFragment.getKey(chr);
          this.histogram[key2] = (this.histogram[key2] || 0) + 1;
        }
        counter++;
        const key = _LineRangeFragment.getKey("\n");
        this.histogram[key] = (this.histogram[key] || 0) + 1;
      }
      this.totalCount = counter;
    }
    computeSimilarity(other) {
      var _a4, _b3;
      let sumDifferences = 0;
      const maxLength = Math.max(this.histogram.length, other.histogram.length);
      for (let i = 0; i < maxLength; i++) {
        sumDifferences += Math.abs(((_a4 = this.histogram[i]) !== null && _a4 !== void 0 ? _a4 : 0) - ((_b3 = other.histogram[i]) !== null && _b3 !== void 0 ? _b3 : 0));
      }
      return 1 - sumDifferences / (this.totalCount + other.totalCount);
    }
  };
  LineRangeFragment.chrKeys = /* @__PURE__ */ new Map();

  // node_modules/monaco-editor/esm/vs/editor/common/diff/defaultLinesDiffComputer/algorithms/dynamicProgrammingDiffing.js
  var DynamicProgrammingDiffing = class {
    compute(sequence1, sequence2, timeout = InfiniteTimeout.instance, equalityScore) {
      if (sequence1.length === 0 || sequence2.length === 0) {
        return DiffAlgorithmResult.trivial(sequence1, sequence2);
      }
      const lcsLengths = new Array2D(sequence1.length, sequence2.length);
      const directions = new Array2D(sequence1.length, sequence2.length);
      const lengths = new Array2D(sequence1.length, sequence2.length);
      for (let s12 = 0; s12 < sequence1.length; s12++) {
        for (let s22 = 0; s22 < sequence2.length; s22++) {
          if (!timeout.isValid()) {
            return DiffAlgorithmResult.trivialTimedOut(sequence1, sequence2);
          }
          const horizontalLen = s12 === 0 ? 0 : lcsLengths.get(s12 - 1, s22);
          const verticalLen = s22 === 0 ? 0 : lcsLengths.get(s12, s22 - 1);
          let extendedSeqScore;
          if (sequence1.getElement(s12) === sequence2.getElement(s22)) {
            if (s12 === 0 || s22 === 0) {
              extendedSeqScore = 0;
            } else {
              extendedSeqScore = lcsLengths.get(s12 - 1, s22 - 1);
            }
            if (s12 > 0 && s22 > 0 && directions.get(s12 - 1, s22 - 1) === 3) {
              extendedSeqScore += lengths.get(s12 - 1, s22 - 1);
            }
            extendedSeqScore += equalityScore ? equalityScore(s12, s22) : 1;
          } else {
            extendedSeqScore = -1;
          }
          const newValue = Math.max(horizontalLen, verticalLen, extendedSeqScore);
          if (newValue === extendedSeqScore) {
            const prevLen = s12 > 0 && s22 > 0 ? lengths.get(s12 - 1, s22 - 1) : 0;
            lengths.set(s12, s22, prevLen + 1);
            directions.set(s12, s22, 3);
          } else if (newValue === horizontalLen) {
            lengths.set(s12, s22, 0);
            directions.set(s12, s22, 1);
          } else if (newValue === verticalLen) {
            lengths.set(s12, s22, 0);
            directions.set(s12, s22, 2);
          }
          lcsLengths.set(s12, s22, newValue);
        }
      }
      const result = [];
      let lastAligningPosS1 = sequence1.length;
      let lastAligningPosS2 = sequence2.length;
      function reportDecreasingAligningPositions(s12, s22) {
        if (s12 + 1 !== lastAligningPosS1 || s22 + 1 !== lastAligningPosS2) {
          result.push(new SequenceDiff(new OffsetRange(s12 + 1, lastAligningPosS1), new OffsetRange(s22 + 1, lastAligningPosS2)));
        }
        lastAligningPosS1 = s12;
        lastAligningPosS2 = s22;
      }
      let s1 = sequence1.length - 1;
      let s2 = sequence2.length - 1;
      while (s1 >= 0 && s2 >= 0) {
        if (directions.get(s1, s2) === 3) {
          reportDecreasingAligningPositions(s1, s2);
          s1--;
          s2--;
        } else {
          if (directions.get(s1, s2) === 1) {
            s1--;
          } else {
            s2--;
          }
        }
      }
      reportDecreasingAligningPositions(-1, -1);
      result.reverse();
      return new DiffAlgorithmResult(result, false);
    }
  };

  // node_modules/monaco-editor/esm/vs/editor/common/diff/defaultLinesDiffComputer/algorithms/myersDiffAlgorithm.js
  var MyersDiffAlgorithm = class {
    compute(seq1, seq2, timeout = InfiniteTimeout.instance) {
      if (seq1.length === 0 || seq2.length === 0) {
        return DiffAlgorithmResult.trivial(seq1, seq2);
      }
      const seqX = seq1;
      const seqY = seq2;
      function getXAfterSnake(x, y) {
        while (x < seqX.length && y < seqY.length && seqX.getElement(x) === seqY.getElement(y)) {
          x++;
          y++;
        }
        return x;
      }
      let d = 0;
      const V = new FastInt32Array();
      V.set(0, getXAfterSnake(0, 0));
      const paths = new FastArrayNegativeIndices();
      paths.set(0, V.get(0) === 0 ? null : new SnakePath(null, 0, 0, V.get(0)));
      let k = 0;
      loop: while (true) {
        d++;
        if (!timeout.isValid()) {
          return DiffAlgorithmResult.trivialTimedOut(seqX, seqY);
        }
        const lowerBound = -Math.min(d, seqY.length + d % 2);
        const upperBound = Math.min(d, seqX.length + d % 2);
        for (k = lowerBound; k <= upperBound; k += 2) {
          let step = 0;
          const maxXofDLineTop = k === upperBound ? -1 : V.get(k + 1);
          const maxXofDLineLeft = k === lowerBound ? -1 : V.get(k - 1) + 1;
          step++;
          const x = Math.min(Math.max(maxXofDLineTop, maxXofDLineLeft), seqX.length);
          const y = x - k;
          step++;
          if (x > seqX.length || y > seqY.length) {
            continue;
          }
          const newMaxX = getXAfterSnake(x, y);
          V.set(k, newMaxX);
          const lastPath = x === maxXofDLineTop ? paths.get(k + 1) : paths.get(k - 1);
          paths.set(k, newMaxX !== x ? new SnakePath(lastPath, x, y, newMaxX - x) : lastPath);
          if (V.get(k) === seqX.length && V.get(k) - k === seqY.length) {
            break loop;
          }
        }
      }
      let path = paths.get(k);
      const result = [];
      let lastAligningPosS1 = seqX.length;
      let lastAligningPosS2 = seqY.length;
      while (true) {
        const endX = path ? path.x + path.length : 0;
        const endY = path ? path.y + path.length : 0;
        if (endX !== lastAligningPosS1 || endY !== lastAligningPosS2) {
          result.push(new SequenceDiff(new OffsetRange(endX, lastAligningPosS1), new OffsetRange(endY, lastAligningPosS2)));
        }
        if (!path) {
          break;
        }
        lastAligningPosS1 = path.x;
        lastAligningPosS2 = path.y;
        path = path.prev;
      }
      result.reverse();
      return new DiffAlgorithmResult(result, false);
    }
  };
  var SnakePath = class {
    constructor(prev, x, y, length) {
      this.prev = prev;
      this.x = x;
      this.y = y;
      this.length = length;
    }
  };
  var FastInt32Array = class {
    constructor() {
      this.positiveArr = new Int32Array(10);
      this.negativeArr = new Int32Array(10);
    }
    get(idx) {
      if (idx < 0) {
        idx = -idx - 1;
        return this.negativeArr[idx];
      } else {
        return this.positiveArr[idx];
      }
    }
    set(idx, value) {
      if (idx < 0) {
        idx = -idx - 1;
        if (idx >= this.negativeArr.length) {
          const arr = this.negativeArr;
          this.negativeArr = new Int32Array(arr.length * 2);
          this.negativeArr.set(arr);
        }
        this.negativeArr[idx] = value;
      } else {
        if (idx >= this.positiveArr.length) {
          const arr = this.positiveArr;
          this.positiveArr = new Int32Array(arr.length * 2);
          this.positiveArr.set(arr);
        }
        this.positiveArr[idx] = value;
      }
    }
  };
  var FastArrayNegativeIndices = class {
    constructor() {
      this.positiveArr = [];
      this.negativeArr = [];
    }
    get(idx) {
      if (idx < 0) {
        idx = -idx - 1;
        return this.negativeArr[idx];
      } else {
        return this.positiveArr[idx];
      }
    }
    set(idx, value) {
      if (idx < 0) {
        idx = -idx - 1;
        this.negativeArr[idx] = value;
      } else {
        this.positiveArr[idx] = value;
      }
    }
  };

  // node_modules/monaco-editor/esm/vs/editor/common/diff/defaultLinesDiffComputer/linesSliceCharSequence.js
  var LinesSliceCharSequence = class {
    constructor(lines, lineRange, considerWhitespaceChanges) {
      this.lines = lines;
      this.considerWhitespaceChanges = considerWhitespaceChanges;
      this.elements = [];
      this.firstCharOffsetByLine = [];
      this.additionalOffsetByLine = [];
      let trimFirstLineFully = false;
      if (lineRange.start > 0 && lineRange.endExclusive >= lines.length) {
        lineRange = new OffsetRange(lineRange.start - 1, lineRange.endExclusive);
        trimFirstLineFully = true;
      }
      this.lineRange = lineRange;
      this.firstCharOffsetByLine[0] = 0;
      for (let i = this.lineRange.start; i < this.lineRange.endExclusive; i++) {
        let line = lines[i];
        let offset = 0;
        if (trimFirstLineFully) {
          offset = line.length;
          line = "";
          trimFirstLineFully = false;
        } else if (!considerWhitespaceChanges) {
          const trimmedStartLine = line.trimStart();
          offset = line.length - trimmedStartLine.length;
          line = trimmedStartLine.trimEnd();
        }
        this.additionalOffsetByLine.push(offset);
        for (let i2 = 0; i2 < line.length; i2++) {
          this.elements.push(line.charCodeAt(i2));
        }
        if (i < lines.length - 1) {
          this.elements.push("\n".charCodeAt(0));
          this.firstCharOffsetByLine[i - this.lineRange.start + 1] = this.elements.length;
        }
      }
      this.additionalOffsetByLine.push(0);
    }
    toString() {
      return `Slice: "${this.text}"`;
    }
    get text() {
      return this.getText(new OffsetRange(0, this.length));
    }
    getText(range) {
      return this.elements.slice(range.start, range.endExclusive).map((e) => String.fromCharCode(e)).join("");
    }
    getElement(offset) {
      return this.elements[offset];
    }
    get length() {
      return this.elements.length;
    }
    getBoundaryScore(length) {
      const prevCategory = getCategory(length > 0 ? this.elements[length - 1] : -1);
      const nextCategory = getCategory(length < this.elements.length ? this.elements[length] : -1);
      if (prevCategory === 7 && nextCategory === 8) {
        return 0;
      }
      if (prevCategory === 8) {
        return 150;
      }
      let score2 = 0;
      if (prevCategory !== nextCategory) {
        score2 += 10;
        if (prevCategory === 0 && nextCategory === 1) {
          score2 += 1;
        }
      }
      score2 += getCategoryBoundaryScore(prevCategory);
      score2 += getCategoryBoundaryScore(nextCategory);
      return score2;
    }
    translateOffset(offset) {
      if (this.lineRange.isEmpty) {
        return new Position(this.lineRange.start + 1, 1);
      }
      const i = findLastIdxMonotonous(this.firstCharOffsetByLine, (value) => value <= offset);
      return new Position(this.lineRange.start + i + 1, offset - this.firstCharOffsetByLine[i] + this.additionalOffsetByLine[i] + 1);
    }
    translateRange(range) {
      return Range.fromPositions(this.translateOffset(range.start), this.translateOffset(range.endExclusive));
    }
    /**
     * Finds the word that contains the character at the given offset
     */
    findWordContaining(offset) {
      if (offset < 0 || offset >= this.elements.length) {
        return void 0;
      }
      if (!isWordChar(this.elements[offset])) {
        return void 0;
      }
      let start = offset;
      while (start > 0 && isWordChar(this.elements[start - 1])) {
        start--;
      }
      let end = offset;
      while (end < this.elements.length && isWordChar(this.elements[end])) {
        end++;
      }
      return new OffsetRange(start, end);
    }
    countLinesIn(range) {
      return this.translateOffset(range.endExclusive).lineNumber - this.translateOffset(range.start).lineNumber;
    }
    isStronglyEqual(offset1, offset2) {
      return this.elements[offset1] === this.elements[offset2];
    }
    extendToFullLines(range) {
      var _a4, _b3;
      const start = (_a4 = findLastMonotonous(this.firstCharOffsetByLine, (x) => x <= range.start)) !== null && _a4 !== void 0 ? _a4 : 0;
      const end = (_b3 = findFirstMonotonous(this.firstCharOffsetByLine, (x) => range.endExclusive <= x)) !== null && _b3 !== void 0 ? _b3 : this.elements.length;
      return new OffsetRange(start, end);
    }
  };
  function isWordChar(charCode) {
    return charCode >= 97 && charCode <= 122 || charCode >= 65 && charCode <= 90 || charCode >= 48 && charCode <= 57;
  }
  var score = {
    [
      0
      /* CharBoundaryCategory.WordLower */
    ]: 0,
    [
      1
      /* CharBoundaryCategory.WordUpper */
    ]: 0,
    [
      2
      /* CharBoundaryCategory.WordNumber */
    ]: 0,
    [
      3
      /* CharBoundaryCategory.End */
    ]: 10,
    [
      4
      /* CharBoundaryCategory.Other */
    ]: 2,
    [
      5
      /* CharBoundaryCategory.Separator */
    ]: 30,
    [
      6
      /* CharBoundaryCategory.Space */
    ]: 3,
    [
      7
      /* CharBoundaryCategory.LineBreakCR */
    ]: 10,
    [
      8
      /* CharBoundaryCategory.LineBreakLF */
    ]: 10
  };
  function getCategoryBoundaryScore(category) {
    return score[category];
  }
  function getCategory(charCode) {
    if (charCode === 10) {
      return 8;
    } else if (charCode === 13) {
      return 7;
    } else if (isSpace(charCode)) {
      return 6;
    } else if (charCode >= 97 && charCode <= 122) {
      return 0;
    } else if (charCode >= 65 && charCode <= 90) {
      return 1;
    } else if (charCode >= 48 && charCode <= 57) {
      return 2;
    } else if (charCode === -1) {
      return 3;
    } else if (charCode === 44 || charCode === 59) {
      return 5;
    } else {
      return 4;
    }
  }

  // node_modules/monaco-editor/esm/vs/editor/common/diff/defaultLinesDiffComputer/computeMovedLines.js
  function computeMovedLines(changes, originalLines, modifiedLines, hashedOriginalLines, hashedModifiedLines, timeout) {
    let { moves, excludedChanges } = computeMovesFromSimpleDeletionsToSimpleInsertions(changes, originalLines, modifiedLines, timeout);
    if (!timeout.isValid()) {
      return [];
    }
    const filteredChanges = changes.filter((c) => !excludedChanges.has(c));
    const unchangedMoves = computeUnchangedMoves(filteredChanges, hashedOriginalLines, hashedModifiedLines, originalLines, modifiedLines, timeout);
    pushMany(moves, unchangedMoves);
    moves = joinCloseConsecutiveMoves(moves);
    moves = moves.filter((current) => {
      const lines = current.original.toOffsetRange().slice(originalLines).map((l) => l.trim());
      const originalText = lines.join("\n");
      return originalText.length >= 15 && countWhere(lines, (l) => l.length >= 2) >= 2;
    });
    moves = removeMovesInSameDiff(changes, moves);
    return moves;
  }
  function countWhere(arr, predicate) {
    let count = 0;
    for (const t2 of arr) {
      if (predicate(t2)) {
        count++;
      }
    }
    return count;
  }
  function computeMovesFromSimpleDeletionsToSimpleInsertions(changes, originalLines, modifiedLines, timeout) {
    const moves = [];
    const deletions = changes.filter((c) => c.modified.isEmpty && c.original.length >= 3).map((d) => new LineRangeFragment(d.original, originalLines, d));
    const insertions = new Set(changes.filter((c) => c.original.isEmpty && c.modified.length >= 3).map((d) => new LineRangeFragment(d.modified, modifiedLines, d)));
    const excludedChanges = /* @__PURE__ */ new Set();
    for (const deletion of deletions) {
      let highestSimilarity = -1;
      let best;
      for (const insertion of insertions) {
        const similarity = deletion.computeSimilarity(insertion);
        if (similarity > highestSimilarity) {
          highestSimilarity = similarity;
          best = insertion;
        }
      }
      if (highestSimilarity > 0.9 && best) {
        insertions.delete(best);
        moves.push(new LineRangeMapping(deletion.range, best.range));
        excludedChanges.add(deletion.source);
        excludedChanges.add(best.source);
      }
      if (!timeout.isValid()) {
        return { moves, excludedChanges };
      }
    }
    return { moves, excludedChanges };
  }
  function computeUnchangedMoves(changes, hashedOriginalLines, hashedModifiedLines, originalLines, modifiedLines, timeout) {
    const moves = [];
    const original3LineHashes = new SetMap();
    for (const change of changes) {
      for (let i = change.original.startLineNumber; i < change.original.endLineNumberExclusive - 2; i++) {
        const key = `${hashedOriginalLines[i - 1]}:${hashedOriginalLines[i + 1 - 1]}:${hashedOriginalLines[i + 2 - 1]}`;
        original3LineHashes.add(key, { range: new LineRange(i, i + 3) });
      }
    }
    const possibleMappings = [];
    changes.sort(compareBy((c) => c.modified.startLineNumber, numberComparator));
    for (const change of changes) {
      let lastMappings = [];
      for (let i = change.modified.startLineNumber; i < change.modified.endLineNumberExclusive - 2; i++) {
        const key = `${hashedModifiedLines[i - 1]}:${hashedModifiedLines[i + 1 - 1]}:${hashedModifiedLines[i + 2 - 1]}`;
        const currentModifiedRange = new LineRange(i, i + 3);
        const nextMappings = [];
        original3LineHashes.forEach(key, ({ range }) => {
          for (const lastMapping of lastMappings) {
            if (lastMapping.originalLineRange.endLineNumberExclusive + 1 === range.endLineNumberExclusive && lastMapping.modifiedLineRange.endLineNumberExclusive + 1 === currentModifiedRange.endLineNumberExclusive) {
              lastMapping.originalLineRange = new LineRange(lastMapping.originalLineRange.startLineNumber, range.endLineNumberExclusive);
              lastMapping.modifiedLineRange = new LineRange(lastMapping.modifiedLineRange.startLineNumber, currentModifiedRange.endLineNumberExclusive);
              nextMappings.push(lastMapping);
              return;
            }
          }
          const mapping = {
            modifiedLineRange: currentModifiedRange,
            originalLineRange: range
          };
          possibleMappings.push(mapping);
          nextMappings.push(mapping);
        });
        lastMappings = nextMappings;
      }
      if (!timeout.isValid()) {
        return [];
      }
    }
    possibleMappings.sort(reverseOrder(compareBy((m) => m.modifiedLineRange.length, numberComparator)));
    const modifiedSet = new LineRangeSet();
    const originalSet = new LineRangeSet();
    for (const mapping of possibleMappings) {
      const diffOrigToMod = mapping.modifiedLineRange.startLineNumber - mapping.originalLineRange.startLineNumber;
      const modifiedSections = modifiedSet.subtractFrom(mapping.modifiedLineRange);
      const originalTranslatedSections = originalSet.subtractFrom(mapping.originalLineRange).getWithDelta(diffOrigToMod);
      const modifiedIntersectedSections = modifiedSections.getIntersection(originalTranslatedSections);
      for (const s of modifiedIntersectedSections.ranges) {
        if (s.length < 3) {
          continue;
        }
        const modifiedLineRange = s;
        const originalLineRange = s.delta(-diffOrigToMod);
        moves.push(new LineRangeMapping(originalLineRange, modifiedLineRange));
        modifiedSet.addRange(modifiedLineRange);
        originalSet.addRange(originalLineRange);
      }
    }
    moves.sort(compareBy((m) => m.original.startLineNumber, numberComparator));
    const monotonousChanges = new MonotonousArray(changes);
    for (let i = 0; i < moves.length; i++) {
      const move = moves[i];
      const firstTouchingChangeOrig = monotonousChanges.findLastMonotonous((c) => c.original.startLineNumber <= move.original.startLineNumber);
      const firstTouchingChangeMod = findLastMonotonous(changes, (c) => c.modified.startLineNumber <= move.modified.startLineNumber);
      const linesAbove = Math.max(move.original.startLineNumber - firstTouchingChangeOrig.original.startLineNumber, move.modified.startLineNumber - firstTouchingChangeMod.modified.startLineNumber);
      const lastTouchingChangeOrig = monotonousChanges.findLastMonotonous((c) => c.original.startLineNumber < move.original.endLineNumberExclusive);
      const lastTouchingChangeMod = findLastMonotonous(changes, (c) => c.modified.startLineNumber < move.modified.endLineNumberExclusive);
      const linesBelow = Math.max(lastTouchingChangeOrig.original.endLineNumberExclusive - move.original.endLineNumberExclusive, lastTouchingChangeMod.modified.endLineNumberExclusive - move.modified.endLineNumberExclusive);
      let extendToTop;
      for (extendToTop = 0; extendToTop < linesAbove; extendToTop++) {
        const origLine = move.original.startLineNumber - extendToTop - 1;
        const modLine = move.modified.startLineNumber - extendToTop - 1;
        if (origLine > originalLines.length || modLine > modifiedLines.length) {
          break;
        }
        if (modifiedSet.contains(modLine) || originalSet.contains(origLine)) {
          break;
        }
        if (!areLinesSimilar(originalLines[origLine - 1], modifiedLines[modLine - 1], timeout)) {
          break;
        }
      }
      if (extendToTop > 0) {
        originalSet.addRange(new LineRange(move.original.startLineNumber - extendToTop, move.original.startLineNumber));
        modifiedSet.addRange(new LineRange(move.modified.startLineNumber - extendToTop, move.modified.startLineNumber));
      }
      let extendToBottom;
      for (extendToBottom = 0; extendToBottom < linesBelow; extendToBottom++) {
        const origLine = move.original.endLineNumberExclusive + extendToBottom;
        const modLine = move.modified.endLineNumberExclusive + extendToBottom;
        if (origLine > originalLines.length || modLine > modifiedLines.length) {
          break;
        }
        if (modifiedSet.contains(modLine) || originalSet.contains(origLine)) {
          break;
        }
        if (!areLinesSimilar(originalLines[origLine - 1], modifiedLines[modLine - 1], timeout)) {
          break;
        }
      }
      if (extendToBottom > 0) {
        originalSet.addRange(new LineRange(move.original.endLineNumberExclusive, move.original.endLineNumberExclusive + extendToBottom));
        modifiedSet.addRange(new LineRange(move.modified.endLineNumberExclusive, move.modified.endLineNumberExclusive + extendToBottom));
      }
      if (extendToTop > 0 || extendToBottom > 0) {
        moves[i] = new LineRangeMapping(new LineRange(move.original.startLineNumber - extendToTop, move.original.endLineNumberExclusive + extendToBottom), new LineRange(move.modified.startLineNumber - extendToTop, move.modified.endLineNumberExclusive + extendToBottom));
      }
    }
    return moves;
  }
  function areLinesSimilar(line1, line2, timeout) {
    if (line1.trim() === line2.trim()) {
      return true;
    }
    if (line1.length > 300 && line2.length > 300) {
      return false;
    }
    const myersDiffingAlgorithm = new MyersDiffAlgorithm();
    const result = myersDiffingAlgorithm.compute(new LinesSliceCharSequence([line1], new OffsetRange(0, 1), false), new LinesSliceCharSequence([line2], new OffsetRange(0, 1), false), timeout);
    let commonNonSpaceCharCount = 0;
    const inverted = SequenceDiff.invert(result.diffs, line1.length);
    for (const seq of inverted) {
      seq.seq1Range.forEach((idx) => {
        if (!isSpace(line1.charCodeAt(idx))) {
          commonNonSpaceCharCount++;
        }
      });
    }
    function countNonWsChars(str) {
      let count = 0;
      for (let i = 0; i < line1.length; i++) {
        if (!isSpace(str.charCodeAt(i))) {
          count++;
        }
      }
      return count;
    }
    const longerLineLength = countNonWsChars(line1.length > line2.length ? line1 : line2);
    const r = commonNonSpaceCharCount / longerLineLength > 0.6 && longerLineLength > 10;
    return r;
  }
  function joinCloseConsecutiveMoves(moves) {
    if (moves.length === 0) {
      return moves;
    }
    moves.sort(compareBy((m) => m.original.startLineNumber, numberComparator));
    const result = [moves[0]];
    for (let i = 1; i < moves.length; i++) {
      const last = result[result.length - 1];
      const current = moves[i];
      const originalDist = current.original.startLineNumber - last.original.endLineNumberExclusive;
      const modifiedDist = current.modified.startLineNumber - last.modified.endLineNumberExclusive;
      const currentMoveAfterLast = originalDist >= 0 && modifiedDist >= 0;
      if (currentMoveAfterLast && originalDist + modifiedDist <= 2) {
        result[result.length - 1] = last.join(current);
        continue;
      }
      result.push(current);
    }
    return result;
  }
  function removeMovesInSameDiff(changes, moves) {
    const changesMonotonous = new MonotonousArray(changes);
    moves = moves.filter((m) => {
      const diffBeforeEndOfMoveOriginal = changesMonotonous.findLastMonotonous((c) => c.original.startLineNumber < m.original.endLineNumberExclusive) || new LineRangeMapping(new LineRange(1, 1), new LineRange(1, 1));
      const diffBeforeEndOfMoveModified = findLastMonotonous(changes, (c) => c.modified.startLineNumber < m.modified.endLineNumberExclusive);
      const differentDiffs = diffBeforeEndOfMoveOriginal !== diffBeforeEndOfMoveModified;
      return differentDiffs;
    });
    return moves;
  }

  // node_modules/monaco-editor/esm/vs/editor/common/diff/defaultLinesDiffComputer/heuristicSequenceOptimizations.js
  function optimizeSequenceDiffs(sequence1, sequence2, sequenceDiffs) {
    let result = sequenceDiffs;
    result = joinSequenceDiffsByShifting(sequence1, sequence2, result);
    result = joinSequenceDiffsByShifting(sequence1, sequence2, result);
    result = shiftSequenceDiffs(sequence1, sequence2, result);
    return result;
  }
  function joinSequenceDiffsByShifting(sequence1, sequence2, sequenceDiffs) {
    if (sequenceDiffs.length === 0) {
      return sequenceDiffs;
    }
    const result = [];
    result.push(sequenceDiffs[0]);
    for (let i = 1; i < sequenceDiffs.length; i++) {
      const prevResult = result[result.length - 1];
      let cur = sequenceDiffs[i];
      if (cur.seq1Range.isEmpty || cur.seq2Range.isEmpty) {
        const length = cur.seq1Range.start - prevResult.seq1Range.endExclusive;
        let d;
        for (d = 1; d <= length; d++) {
          if (sequence1.getElement(cur.seq1Range.start - d) !== sequence1.getElement(cur.seq1Range.endExclusive - d) || sequence2.getElement(cur.seq2Range.start - d) !== sequence2.getElement(cur.seq2Range.endExclusive - d)) {
            break;
          }
        }
        d--;
        if (d === length) {
          result[result.length - 1] = new SequenceDiff(new OffsetRange(prevResult.seq1Range.start, cur.seq1Range.endExclusive - length), new OffsetRange(prevResult.seq2Range.start, cur.seq2Range.endExclusive - length));
          continue;
        }
        cur = cur.delta(-d);
      }
      result.push(cur);
    }
    const result2 = [];
    for (let i = 0; i < result.length - 1; i++) {
      const nextResult = result[i + 1];
      let cur = result[i];
      if (cur.seq1Range.isEmpty || cur.seq2Range.isEmpty) {
        const length = nextResult.seq1Range.start - cur.seq1Range.endExclusive;
        let d;
        for (d = 0; d < length; d++) {
          if (!sequence1.isStronglyEqual(cur.seq1Range.start + d, cur.seq1Range.endExclusive + d) || !sequence2.isStronglyEqual(cur.seq2Range.start + d, cur.seq2Range.endExclusive + d)) {
            break;
          }
        }
        if (d === length) {
          result[i + 1] = new SequenceDiff(new OffsetRange(cur.seq1Range.start + length, nextResult.seq1Range.endExclusive), new OffsetRange(cur.seq2Range.start + length, nextResult.seq2Range.endExclusive));
          continue;
        }
        if (d > 0) {
          cur = cur.delta(d);
        }
      }
      result2.push(cur);
    }
    if (result.length > 0) {
      result2.push(result[result.length - 1]);
    }
    return result2;
  }
  function shiftSequenceDiffs(sequence1, sequence2, sequenceDiffs) {
    if (!sequence1.getBoundaryScore || !sequence2.getBoundaryScore) {
      return sequenceDiffs;
    }
    for (let i = 0; i < sequenceDiffs.length; i++) {
      const prevDiff = i > 0 ? sequenceDiffs[i - 1] : void 0;
      const diff = sequenceDiffs[i];
      const nextDiff = i + 1 < sequenceDiffs.length ? sequenceDiffs[i + 1] : void 0;
      const seq1ValidRange = new OffsetRange(prevDiff ? prevDiff.seq1Range.endExclusive + 1 : 0, nextDiff ? nextDiff.seq1Range.start - 1 : sequence1.length);
      const seq2ValidRange = new OffsetRange(prevDiff ? prevDiff.seq2Range.endExclusive + 1 : 0, nextDiff ? nextDiff.seq2Range.start - 1 : sequence2.length);
      if (diff.seq1Range.isEmpty) {
        sequenceDiffs[i] = shiftDiffToBetterPosition(diff, sequence1, sequence2, seq1ValidRange, seq2ValidRange);
      } else if (diff.seq2Range.isEmpty) {
        sequenceDiffs[i] = shiftDiffToBetterPosition(diff.swap(), sequence2, sequence1, seq2ValidRange, seq1ValidRange).swap();
      }
    }
    return sequenceDiffs;
  }
  function shiftDiffToBetterPosition(diff, sequence1, sequence2, seq1ValidRange, seq2ValidRange) {
    const maxShiftLimit = 100;
    let deltaBefore = 1;
    while (diff.seq1Range.start - deltaBefore >= seq1ValidRange.start && diff.seq2Range.start - deltaBefore >= seq2ValidRange.start && sequence2.isStronglyEqual(diff.seq2Range.start - deltaBefore, diff.seq2Range.endExclusive - deltaBefore) && deltaBefore < maxShiftLimit) {
      deltaBefore++;
    }
    deltaBefore--;
    let deltaAfter = 0;
    while (diff.seq1Range.start + deltaAfter < seq1ValidRange.endExclusive && diff.seq2Range.endExclusive + deltaAfter < seq2ValidRange.endExclusive && sequence2.isStronglyEqual(diff.seq2Range.start + deltaAfter, diff.seq2Range.endExclusive + deltaAfter) && deltaAfter < maxShiftLimit) {
      deltaAfter++;
    }
    if (deltaBefore === 0 && deltaAfter === 0) {
      return diff;
    }
    let bestDelta = 0;
    let bestScore = -1;
    for (let delta = -deltaBefore; delta <= deltaAfter; delta++) {
      const seq2OffsetStart = diff.seq2Range.start + delta;
      const seq2OffsetEndExclusive = diff.seq2Range.endExclusive + delta;
      const seq1Offset = diff.seq1Range.start + delta;
      const score2 = sequence1.getBoundaryScore(seq1Offset) + sequence2.getBoundaryScore(seq2OffsetStart) + sequence2.getBoundaryScore(seq2OffsetEndExclusive);
      if (score2 > bestScore) {
        bestScore = score2;
        bestDelta = delta;
      }
    }
    return diff.delta(bestDelta);
  }
  function removeShortMatches(sequence1, sequence2, sequenceDiffs) {
    const result = [];
    for (const s of sequenceDiffs) {
      const last = result[result.length - 1];
      if (!last) {
        result.push(s);
        continue;
      }
      if (s.seq1Range.start - last.seq1Range.endExclusive <= 2 || s.seq2Range.start - last.seq2Range.endExclusive <= 2) {
        result[result.length - 1] = new SequenceDiff(last.seq1Range.join(s.seq1Range), last.seq2Range.join(s.seq2Range));
      } else {
        result.push(s);
      }
    }
    return result;
  }
  function extendDiffsToEntireWordIfAppropriate(sequence1, sequence2, sequenceDiffs) {
    const equalMappings = SequenceDiff.invert(sequenceDiffs, sequence1.length);
    const additional = [];
    let lastPoint = new OffsetPair(0, 0);
    function scanWord(pair, equalMapping) {
      if (pair.offset1 < lastPoint.offset1 || pair.offset2 < lastPoint.offset2) {
        return;
      }
      const w1 = sequence1.findWordContaining(pair.offset1);
      const w2 = sequence2.findWordContaining(pair.offset2);
      if (!w1 || !w2) {
        return;
      }
      let w = new SequenceDiff(w1, w2);
      const equalPart = w.intersect(equalMapping);
      let equalChars1 = equalPart.seq1Range.length;
      let equalChars2 = equalPart.seq2Range.length;
      while (equalMappings.length > 0) {
        const next = equalMappings[0];
        const intersects = next.seq1Range.intersects(w.seq1Range) || next.seq2Range.intersects(w.seq2Range);
        if (!intersects) {
          break;
        }
        const v1 = sequence1.findWordContaining(next.seq1Range.start);
        const v2 = sequence2.findWordContaining(next.seq2Range.start);
        const v = new SequenceDiff(v1, v2);
        const equalPart2 = v.intersect(next);
        equalChars1 += equalPart2.seq1Range.length;
        equalChars2 += equalPart2.seq2Range.length;
        w = w.join(v);
        if (w.seq1Range.endExclusive >= next.seq1Range.endExclusive) {
          equalMappings.shift();
        } else {
          break;
        }
      }
      if (equalChars1 + equalChars2 < (w.seq1Range.length + w.seq2Range.length) * 2 / 3) {
        additional.push(w);
      }
      lastPoint = w.getEndExclusives();
    }
    while (equalMappings.length > 0) {
      const next = equalMappings.shift();
      if (next.seq1Range.isEmpty) {
        continue;
      }
      scanWord(next.getStarts(), next);
      scanWord(next.getEndExclusives().delta(-1), next);
    }
    const merged = mergeSequenceDiffs(sequenceDiffs, additional);
    return merged;
  }
  function mergeSequenceDiffs(sequenceDiffs1, sequenceDiffs2) {
    const result = [];
    while (sequenceDiffs1.length > 0 || sequenceDiffs2.length > 0) {
      const sd1 = sequenceDiffs1[0];
      const sd2 = sequenceDiffs2[0];
      let next;
      if (sd1 && (!sd2 || sd1.seq1Range.start < sd2.seq1Range.start)) {
        next = sequenceDiffs1.shift();
      } else {
        next = sequenceDiffs2.shift();
      }
      if (result.length > 0 && result[result.length - 1].seq1Range.endExclusive >= next.seq1Range.start) {
        result[result.length - 1] = result[result.length - 1].join(next);
      } else {
        result.push(next);
      }
    }
    return result;
  }
  function removeVeryShortMatchingLinesBetweenDiffs(sequence1, _sequence2, sequenceDiffs) {
    let diffs = sequenceDiffs;
    if (diffs.length === 0) {
      return diffs;
    }
    let counter = 0;
    let shouldRepeat;
    do {
      shouldRepeat = false;
      const result = [
        diffs[0]
      ];
      for (let i = 1; i < diffs.length; i++) {
        let shouldJoinDiffs = function(before, after) {
          const unchangedRange = new OffsetRange(lastResult.seq1Range.endExclusive, cur.seq1Range.start);
          const unchangedText = sequence1.getText(unchangedRange);
          const unchangedTextWithoutWs = unchangedText.replace(/\s/g, "");
          if (unchangedTextWithoutWs.length <= 4 && (before.seq1Range.length + before.seq2Range.length > 5 || after.seq1Range.length + after.seq2Range.length > 5)) {
            return true;
          }
          return false;
        };
        const cur = diffs[i];
        const lastResult = result[result.length - 1];
        const shouldJoin = shouldJoinDiffs(lastResult, cur);
        if (shouldJoin) {
          shouldRepeat = true;
          result[result.length - 1] = result[result.length - 1].join(cur);
        } else {
          result.push(cur);
        }
      }
      diffs = result;
    } while (counter++ < 10 && shouldRepeat);
    return diffs;
  }
  function removeVeryShortMatchingTextBetweenLongDiffs(sequence1, sequence2, sequenceDiffs) {
    let diffs = sequenceDiffs;
    if (diffs.length === 0) {
      return diffs;
    }
    let counter = 0;
    let shouldRepeat;
    do {
      shouldRepeat = false;
      const result = [
        diffs[0]
      ];
      for (let i = 1; i < diffs.length; i++) {
        let shouldJoinDiffs = function(before, after) {
          const unchangedRange = new OffsetRange(lastResult.seq1Range.endExclusive, cur.seq1Range.start);
          const unchangedLineCount = sequence1.countLinesIn(unchangedRange);
          if (unchangedLineCount > 5 || unchangedRange.length > 500) {
            return false;
          }
          const unchangedText = sequence1.getText(unchangedRange).trim();
          if (unchangedText.length > 20 || unchangedText.split(/\r\n|\r|\n/).length > 1) {
            return false;
          }
          const beforeLineCount1 = sequence1.countLinesIn(before.seq1Range);
          const beforeSeq1Length = before.seq1Range.length;
          const beforeLineCount2 = sequence2.countLinesIn(before.seq2Range);
          const beforeSeq2Length = before.seq2Range.length;
          const afterLineCount1 = sequence1.countLinesIn(after.seq1Range);
          const afterSeq1Length = after.seq1Range.length;
          const afterLineCount2 = sequence2.countLinesIn(after.seq2Range);
          const afterSeq2Length = after.seq2Range.length;
          const max = 2 * 40 + 50;
          function cap(v) {
            return Math.min(v, max);
          }
          if (Math.pow(Math.pow(cap(beforeLineCount1 * 40 + beforeSeq1Length), 1.5) + Math.pow(cap(beforeLineCount2 * 40 + beforeSeq2Length), 1.5), 1.5) + Math.pow(Math.pow(cap(afterLineCount1 * 40 + afterSeq1Length), 1.5) + Math.pow(cap(afterLineCount2 * 40 + afterSeq2Length), 1.5), 1.5) > (max ** 1.5) ** 1.5 * 1.3) {
            return true;
          }
          return false;
        };
        const cur = diffs[i];
        const lastResult = result[result.length - 1];
        const shouldJoin = shouldJoinDiffs(lastResult, cur);
        if (shouldJoin) {
          shouldRepeat = true;
          result[result.length - 1] = result[result.length - 1].join(cur);
        } else {
          result.push(cur);
        }
      }
      diffs = result;
    } while (counter++ < 10 && shouldRepeat);
    const newDiffs = [];
    forEachWithNeighbors(diffs, (prev, cur, next) => {
      let newDiff = cur;
      function shouldMarkAsChanged(text) {
        return text.length > 0 && text.trim().length <= 3 && cur.seq1Range.length + cur.seq2Range.length > 100;
      }
      const fullRange1 = sequence1.extendToFullLines(cur.seq1Range);
      const prefix = sequence1.getText(new OffsetRange(fullRange1.start, cur.seq1Range.start));
      if (shouldMarkAsChanged(prefix)) {
        newDiff = newDiff.deltaStart(-prefix.length);
      }
      const suffix = sequence1.getText(new OffsetRange(cur.seq1Range.endExclusive, fullRange1.endExclusive));
      if (shouldMarkAsChanged(suffix)) {
        newDiff = newDiff.deltaEnd(suffix.length);
      }
      const availableSpace = SequenceDiff.fromOffsetPairs(prev ? prev.getEndExclusives() : OffsetPair.zero, next ? next.getStarts() : OffsetPair.max);
      const result = newDiff.intersect(availableSpace);
      if (newDiffs.length > 0 && result.getStarts().equals(newDiffs[newDiffs.length - 1].getEndExclusives())) {
        newDiffs[newDiffs.length - 1] = newDiffs[newDiffs.length - 1].join(result);
      } else {
        newDiffs.push(result);
      }
    });
    return newDiffs;
  }

  // node_modules/monaco-editor/esm/vs/editor/common/diff/defaultLinesDiffComputer/lineSequence.js
  var LineSequence2 = class {
    constructor(trimmedHash, lines) {
      this.trimmedHash = trimmedHash;
      this.lines = lines;
    }
    getElement(offset) {
      return this.trimmedHash[offset];
    }
    get length() {
      return this.trimmedHash.length;
    }
    getBoundaryScore(length) {
      const indentationBefore = length === 0 ? 0 : getIndentation(this.lines[length - 1]);
      const indentationAfter = length === this.lines.length ? 0 : getIndentation(this.lines[length]);
      return 1e3 - (indentationBefore + indentationAfter);
    }
    getText(range) {
      return this.lines.slice(range.start, range.endExclusive).join("\n");
    }
    isStronglyEqual(offset1, offset2) {
      return this.lines[offset1] === this.lines[offset2];
    }
  };
  function getIndentation(str) {
    let i = 0;
    while (i < str.length && (str.charCodeAt(i) === 32 || str.charCodeAt(i) === 9)) {
      i++;
    }
    return i;
  }

  // node_modules/monaco-editor/esm/vs/editor/common/diff/defaultLinesDiffComputer/defaultLinesDiffComputer.js
  var DefaultLinesDiffComputer = class {
    constructor() {
      this.dynamicProgrammingDiffing = new DynamicProgrammingDiffing();
      this.myersDiffingAlgorithm = new MyersDiffAlgorithm();
    }
    computeDiff(originalLines, modifiedLines, options) {
      if (originalLines.length <= 1 && equals(originalLines, modifiedLines, (a2, b) => a2 === b)) {
        return new LinesDiff([], [], false);
      }
      if (originalLines.length === 1 && originalLines[0].length === 0 || modifiedLines.length === 1 && modifiedLines[0].length === 0) {
        return new LinesDiff([
          new DetailedLineRangeMapping(new LineRange(1, originalLines.length + 1), new LineRange(1, modifiedLines.length + 1), [
            new RangeMapping(new Range(1, 1, originalLines.length, originalLines[originalLines.length - 1].length + 1), new Range(1, 1, modifiedLines.length, modifiedLines[modifiedLines.length - 1].length + 1))
          ])
        ], [], false);
      }
      const timeout = options.maxComputationTimeMs === 0 ? InfiniteTimeout.instance : new DateTimeout(options.maxComputationTimeMs);
      const considerWhitespaceChanges = !options.ignoreTrimWhitespace;
      const perfectHashes = /* @__PURE__ */ new Map();
      function getOrCreateHash(text) {
        let hash = perfectHashes.get(text);
        if (hash === void 0) {
          hash = perfectHashes.size;
          perfectHashes.set(text, hash);
        }
        return hash;
      }
      const originalLinesHashes = originalLines.map((l) => getOrCreateHash(l.trim()));
      const modifiedLinesHashes = modifiedLines.map((l) => getOrCreateHash(l.trim()));
      const sequence1 = new LineSequence2(originalLinesHashes, originalLines);
      const sequence2 = new LineSequence2(modifiedLinesHashes, modifiedLines);
      const lineAlignmentResult = (() => {
        if (sequence1.length + sequence2.length < 1700) {
          return this.dynamicProgrammingDiffing.compute(sequence1, sequence2, timeout, (offset1, offset2) => originalLines[offset1] === modifiedLines[offset2] ? modifiedLines[offset2].length === 0 ? 0.1 : 1 + Math.log(1 + modifiedLines[offset2].length) : 0.99);
        }
        return this.myersDiffingAlgorithm.compute(sequence1, sequence2, timeout);
      })();
      let lineAlignments = lineAlignmentResult.diffs;
      let hitTimeout = lineAlignmentResult.hitTimeout;
      lineAlignments = optimizeSequenceDiffs(sequence1, sequence2, lineAlignments);
      lineAlignments = removeVeryShortMatchingLinesBetweenDiffs(sequence1, sequence2, lineAlignments);
      const alignments = [];
      const scanForWhitespaceChanges = (equalLinesCount) => {
        if (!considerWhitespaceChanges) {
          return;
        }
        for (let i = 0; i < equalLinesCount; i++) {
          const seq1Offset = seq1LastStart + i;
          const seq2Offset = seq2LastStart + i;
          if (originalLines[seq1Offset] !== modifiedLines[seq2Offset]) {
            const characterDiffs = this.refineDiff(originalLines, modifiedLines, new SequenceDiff(new OffsetRange(seq1Offset, seq1Offset + 1), new OffsetRange(seq2Offset, seq2Offset + 1)), timeout, considerWhitespaceChanges);
            for (const a2 of characterDiffs.mappings) {
              alignments.push(a2);
            }
            if (characterDiffs.hitTimeout) {
              hitTimeout = true;
            }
          }
        }
      };
      let seq1LastStart = 0;
      let seq2LastStart = 0;
      for (const diff of lineAlignments) {
        assertFn(() => diff.seq1Range.start - seq1LastStart === diff.seq2Range.start - seq2LastStart);
        const equalLinesCount = diff.seq1Range.start - seq1LastStart;
        scanForWhitespaceChanges(equalLinesCount);
        seq1LastStart = diff.seq1Range.endExclusive;
        seq2LastStart = diff.seq2Range.endExclusive;
        const characterDiffs = this.refineDiff(originalLines, modifiedLines, diff, timeout, considerWhitespaceChanges);
        if (characterDiffs.hitTimeout) {
          hitTimeout = true;
        }
        for (const a2 of characterDiffs.mappings) {
          alignments.push(a2);
        }
      }
      scanForWhitespaceChanges(originalLines.length - seq1LastStart);
      const changes = lineRangeMappingFromRangeMappings(alignments, originalLines, modifiedLines);
      let moves = [];
      if (options.computeMoves) {
        moves = this.computeMoves(changes, originalLines, modifiedLines, originalLinesHashes, modifiedLinesHashes, timeout, considerWhitespaceChanges);
      }
      assertFn(() => {
        function validatePosition(pos, lines) {
          if (pos.lineNumber < 1 || pos.lineNumber > lines.length) {
            return false;
          }
          const line = lines[pos.lineNumber - 1];
          if (pos.column < 1 || pos.column > line.length + 1) {
            return false;
          }
          return true;
        }
        function validateRange(range, lines) {
          if (range.startLineNumber < 1 || range.startLineNumber > lines.length + 1) {
            return false;
          }
          if (range.endLineNumberExclusive < 1 || range.endLineNumberExclusive > lines.length + 1) {
            return false;
          }
          return true;
        }
        for (const c of changes) {
          if (!c.innerChanges) {
            return false;
          }
          for (const ic of c.innerChanges) {
            const valid = validatePosition(ic.modifiedRange.getStartPosition(), modifiedLines) && validatePosition(ic.modifiedRange.getEndPosition(), modifiedLines) && validatePosition(ic.originalRange.getStartPosition(), originalLines) && validatePosition(ic.originalRange.getEndPosition(), originalLines);
            if (!valid) {
              return false;
            }
          }
          if (!validateRange(c.modified, modifiedLines) || !validateRange(c.original, originalLines)) {
            return false;
          }
        }
        return true;
      });
      return new LinesDiff(changes, moves, hitTimeout);
    }
    computeMoves(changes, originalLines, modifiedLines, hashedOriginalLines, hashedModifiedLines, timeout, considerWhitespaceChanges) {
      const moves = computeMovedLines(changes, originalLines, modifiedLines, hashedOriginalLines, hashedModifiedLines, timeout);
      const movesWithDiffs = moves.map((m) => {
        const moveChanges = this.refineDiff(originalLines, modifiedLines, new SequenceDiff(m.original.toOffsetRange(), m.modified.toOffsetRange()), timeout, considerWhitespaceChanges);
        const mappings = lineRangeMappingFromRangeMappings(moveChanges.mappings, originalLines, modifiedLines, true);
        return new MovedText(m, mappings);
      });
      return movesWithDiffs;
    }
    refineDiff(originalLines, modifiedLines, diff, timeout, considerWhitespaceChanges) {
      const slice1 = new LinesSliceCharSequence(originalLines, diff.seq1Range, considerWhitespaceChanges);
      const slice2 = new LinesSliceCharSequence(modifiedLines, diff.seq2Range, considerWhitespaceChanges);
      const diffResult = slice1.length + slice2.length < 500 ? this.dynamicProgrammingDiffing.compute(slice1, slice2, timeout) : this.myersDiffingAlgorithm.compute(slice1, slice2, timeout);
      let diffs = diffResult.diffs;
      diffs = optimizeSequenceDiffs(slice1, slice2, diffs);
      diffs = extendDiffsToEntireWordIfAppropriate(slice1, slice2, diffs);
      diffs = removeShortMatches(slice1, slice2, diffs);
      diffs = removeVeryShortMatchingTextBetweenLongDiffs(slice1, slice2, diffs);
      const result = diffs.map((d) => new RangeMapping(slice1.translateRange(d.seq1Range), slice2.translateRange(d.seq2Range)));
      return {
        mappings: result,
        hitTimeout: diffResult.hitTimeout
      };
    }
  };
  function lineRangeMappingFromRangeMappings(alignments, originalLines, modifiedLines, dontAssertStartLine = false) {
    const changes = [];
    for (const g of groupAdjacentBy(alignments.map((a2) => getLineRangeMapping(a2, originalLines, modifiedLines)), (a1, a2) => a1.original.overlapOrTouch(a2.original) || a1.modified.overlapOrTouch(a2.modified))) {
      const first = g[0];
      const last = g[g.length - 1];
      changes.push(new DetailedLineRangeMapping(first.original.join(last.original), first.modified.join(last.modified), g.map((a2) => a2.innerChanges[0])));
    }
    assertFn(() => {
      if (!dontAssertStartLine && changes.length > 0) {
        if (changes[0].modified.startLineNumber !== changes[0].original.startLineNumber) {
          return false;
        }
        if (modifiedLines.length - changes[changes.length - 1].modified.endLineNumberExclusive !== originalLines.length - changes[changes.length - 1].original.endLineNumberExclusive) {
          return false;
        }
      }
      return checkAdjacentItems(changes, (m1, m2) => m2.original.startLineNumber - m1.original.endLineNumberExclusive === m2.modified.startLineNumber - m1.modified.endLineNumberExclusive && // There has to be an unchanged line in between (otherwise both diffs should have been joined)
      m1.original.endLineNumberExclusive < m2.original.startLineNumber && m1.modified.endLineNumberExclusive < m2.modified.startLineNumber);
    });
    return changes;
  }
  function getLineRangeMapping(rangeMapping, originalLines, modifiedLines) {
    let lineStartDelta = 0;
    let lineEndDelta = 0;
    if (rangeMapping.modifiedRange.endColumn === 1 && rangeMapping.originalRange.endColumn === 1 && rangeMapping.originalRange.startLineNumber + lineStartDelta <= rangeMapping.originalRange.endLineNumber && rangeMapping.modifiedRange.startLineNumber + lineStartDelta <= rangeMapping.modifiedRange.endLineNumber) {
      lineEndDelta = -1;
    }
    if (rangeMapping.modifiedRange.startColumn - 1 >= modifiedLines[rangeMapping.modifiedRange.startLineNumber - 1].length && rangeMapping.originalRange.startColumn - 1 >= originalLines[rangeMapping.originalRange.startLineNumber - 1].length && rangeMapping.originalRange.startLineNumber <= rangeMapping.originalRange.endLineNumber + lineEndDelta && rangeMapping.modifiedRange.startLineNumber <= rangeMapping.modifiedRange.endLineNumber + lineEndDelta) {
      lineStartDelta = 1;
    }
    const originalLineRange = new LineRange(rangeMapping.originalRange.startLineNumber + lineStartDelta, rangeMapping.originalRange.endLineNumber + 1 + lineEndDelta);
    const modifiedLineRange = new LineRange(rangeMapping.modifiedRange.startLineNumber + lineStartDelta, rangeMapping.modifiedRange.endLineNumber + 1 + lineEndDelta);
    return new DetailedLineRangeMapping(originalLineRange, modifiedLineRange, [rangeMapping]);
  }

  // node_modules/monaco-editor/esm/vs/editor/common/diff/linesDiffComputers.js
  var linesDiffComputers = {
    getLegacy: () => new LegacyLinesDiffComputer(),
    getDefault: () => new DefaultLinesDiffComputer()
  };

  // node_modules/monaco-editor/esm/vs/base/common/color.js
  function roundFloat(number, decimalPoints) {
    const decimal = Math.pow(10, decimalPoints);
    return Math.round(number * decimal) / decimal;
  }
  var RGBA = class {
    constructor(r, g, b, a2 = 1) {
      this._rgbaBrand = void 0;
      this.r = Math.min(255, Math.max(0, r)) | 0;
      this.g = Math.min(255, Math.max(0, g)) | 0;
      this.b = Math.min(255, Math.max(0, b)) | 0;
      this.a = roundFloat(Math.max(Math.min(1, a2), 0), 3);
    }
    static equals(a2, b) {
      return a2.r === b.r && a2.g === b.g && a2.b === b.b && a2.a === b.a;
    }
  };
  var HSLA = class _HSLA {
    constructor(h, s, l, a2) {
      this._hslaBrand = void 0;
      this.h = Math.max(Math.min(360, h), 0) | 0;
      this.s = roundFloat(Math.max(Math.min(1, s), 0), 3);
      this.l = roundFloat(Math.max(Math.min(1, l), 0), 3);
      this.a = roundFloat(Math.max(Math.min(1, a2), 0), 3);
    }
    static equals(a2, b) {
      return a2.h === b.h && a2.s === b.s && a2.l === b.l && a2.a === b.a;
    }
    /**
     * Converts an RGB color value to HSL. Conversion formula
     * adapted from http://en.wikipedia.org/wiki/HSL_color_space.
     * Assumes r, g, and b are contained in the set [0, 255] and
     * returns h in the set [0, 360], s, and l in the set [0, 1].
     */
    static fromRGBA(rgba) {
      const r = rgba.r / 255;
      const g = rgba.g / 255;
      const b = rgba.b / 255;
      const a2 = rgba.a;
      const max = Math.max(r, g, b);
      const min = Math.min(r, g, b);
      let h = 0;
      let s = 0;
      const l = (min + max) / 2;
      const chroma = max - min;
      if (chroma > 0) {
        s = Math.min(l <= 0.5 ? chroma / (2 * l) : chroma / (2 - 2 * l), 1);
        switch (max) {
          case r:
            h = (g - b) / chroma + (g < b ? 6 : 0);
            break;
          case g:
            h = (b - r) / chroma + 2;
            break;
          case b:
            h = (r - g) / chroma + 4;
            break;
        }
        h *= 60;
        h = Math.round(h);
      }
      return new _HSLA(h, s, l, a2);
    }
    static _hue2rgb(p, q, t2) {
      if (t2 < 0) {
        t2 += 1;
      }
      if (t2 > 1) {
        t2 -= 1;
      }
      if (t2 < 1 / 6) {
        return p + (q - p) * 6 * t2;
      }
      if (t2 < 1 / 2) {
        return q;
      }
      if (t2 < 2 / 3) {
        return p + (q - p) * (2 / 3 - t2) * 6;
      }
      return p;
    }
    /**
     * Converts an HSL color value to RGB. Conversion formula
     * adapted from http://en.wikipedia.org/wiki/HSL_color_space.
     * Assumes h in the set [0, 360] s, and l are contained in the set [0, 1] and
     * returns r, g, and b in the set [0, 255].
     */
    static toRGBA(hsla) {
      const h = hsla.h / 360;
      const { s, l, a: a2 } = hsla;
      let r, g, b;
      if (s === 0) {
        r = g = b = l;
      } else {
        const q = l < 0.5 ? l * (1 + s) : l + s - l * s;
        const p = 2 * l - q;
        r = _HSLA._hue2rgb(p, q, h + 1 / 3);
        g = _HSLA._hue2rgb(p, q, h);
        b = _HSLA._hue2rgb(p, q, h - 1 / 3);
      }
      return new RGBA(Math.round(r * 255), Math.round(g * 255), Math.round(b * 255), a2);
    }
  };
  var HSVA = class _HSVA {
    constructor(h, s, v, a2) {
      this._hsvaBrand = void 0;
      this.h = Math.max(Math.min(360, h), 0) | 0;
      this.s = roundFloat(Math.max(Math.min(1, s), 0), 3);
      this.v = roundFloat(Math.max(Math.min(1, v), 0), 3);
      this.a = roundFloat(Math.max(Math.min(1, a2), 0), 3);
    }
    static equals(a2, b) {
      return a2.h === b.h && a2.s === b.s && a2.v === b.v && a2.a === b.a;
    }
    // from http://www.rapidtables.com/convert/color/rgb-to-hsv.htm
    static fromRGBA(rgba) {
      const r = rgba.r / 255;
      const g = rgba.g / 255;
      const b = rgba.b / 255;
      const cmax = Math.max(r, g, b);
      const cmin = Math.min(r, g, b);
      const delta = cmax - cmin;
      const s = cmax === 0 ? 0 : delta / cmax;
      let m;
      if (delta === 0) {
        m = 0;
      } else if (cmax === r) {
        m = ((g - b) / delta % 6 + 6) % 6;
      } else if (cmax === g) {
        m = (b - r) / delta + 2;
      } else {
        m = (r - g) / delta + 4;
      }
      return new _HSVA(Math.round(m * 60), s, cmax, rgba.a);
    }
    // from http://www.rapidtables.com/convert/color/hsv-to-rgb.htm
    static toRGBA(hsva) {
      const { h, s, v, a: a2 } = hsva;
      const c = v * s;
      const x = c * (1 - Math.abs(h / 60 % 2 - 1));
      const m = v - c;
      let [r, g, b] = [0, 0, 0];
      if (h < 60) {
        r = c;
        g = x;
      } else if (h < 120) {
        r = x;
        g = c;
      } else if (h < 180) {
        g = c;
        b = x;
      } else if (h < 240) {
        g = x;
        b = c;
      } else if (h < 300) {
        r = x;
        b = c;
      } else if (h <= 360) {
        r = c;
        b = x;
      }
      r = Math.round((r + m) * 255);
      g = Math.round((g + m) * 255);
      b = Math.round((b + m) * 255);
      return new RGBA(r, g, b, a2);
    }
  };
  var Color = class _Color {
    static fromHex(hex) {
      return _Color.Format.CSS.parseHex(hex) || _Color.red;
    }
    static equals(a2, b) {
      if (!a2 && !b) {
        return true;
      }
      if (!a2 || !b) {
        return false;
      }
      return a2.equals(b);
    }
    get hsla() {
      if (this._hsla) {
        return this._hsla;
      } else {
        return HSLA.fromRGBA(this.rgba);
      }
    }
    get hsva() {
      if (this._hsva) {
        return this._hsva;
      }
      return HSVA.fromRGBA(this.rgba);
    }
    constructor(arg) {
      if (!arg) {
        throw new Error("Color needs a value");
      } else if (arg instanceof RGBA) {
        this.rgba = arg;
      } else if (arg instanceof HSLA) {
        this._hsla = arg;
        this.rgba = HSLA.toRGBA(arg);
      } else if (arg instanceof HSVA) {
        this._hsva = arg;
        this.rgba = HSVA.toRGBA(arg);
      } else {
        throw new Error("Invalid color ctor argument");
      }
    }
    equals(other) {
      return !!other && RGBA.equals(this.rgba, other.rgba) && HSLA.equals(this.hsla, other.hsla) && HSVA.equals(this.hsva, other.hsva);
    }
    /**
     * http://www.w3.org/TR/WCAG20/#relativeluminancedef
     * Returns the number in the set [0, 1]. O => Darkest Black. 1 => Lightest white.
     */
    getRelativeLuminance() {
      const R = _Color._relativeLuminanceForComponent(this.rgba.r);
      const G = _Color._relativeLuminanceForComponent(this.rgba.g);
      const B = _Color._relativeLuminanceForComponent(this.rgba.b);
      const luminance = 0.2126 * R + 0.7152 * G + 0.0722 * B;
      return roundFloat(luminance, 4);
    }
    static _relativeLuminanceForComponent(color) {
      const c = color / 255;
      return c <= 0.03928 ? c / 12.92 : Math.pow((c + 0.055) / 1.055, 2.4);
    }
    /**
     *	http://24ways.org/2010/calculating-color-contrast
     *  Return 'true' if lighter color otherwise 'false'
     */
    isLighter() {
      const yiq = (this.rgba.r * 299 + this.rgba.g * 587 + this.rgba.b * 114) / 1e3;
      return yiq >= 128;
    }
    isLighterThan(another) {
      const lum1 = this.getRelativeLuminance();
      const lum2 = another.getRelativeLuminance();
      return lum1 > lum2;
    }
    isDarkerThan(another) {
      const lum1 = this.getRelativeLuminance();
      const lum2 = another.getRelativeLuminance();
      return lum1 < lum2;
    }
    lighten(factor) {
      return new _Color(new HSLA(this.hsla.h, this.hsla.s, this.hsla.l + this.hsla.l * factor, this.hsla.a));
    }
    darken(factor) {
      return new _Color(new HSLA(this.hsla.h, this.hsla.s, this.hsla.l - this.hsla.l * factor, this.hsla.a));
    }
    transparent(factor) {
      const { r, g, b, a: a2 } = this.rgba;
      return new _Color(new RGBA(r, g, b, a2 * factor));
    }
    isTransparent() {
      return this.rgba.a === 0;
    }
    isOpaque() {
      return this.rgba.a === 1;
    }
    opposite() {
      return new _Color(new RGBA(255 - this.rgba.r, 255 - this.rgba.g, 255 - this.rgba.b, this.rgba.a));
    }
    makeOpaque(opaqueBackground) {
      if (this.isOpaque() || opaqueBackground.rgba.a !== 1) {
        return this;
      }
      const { r, g, b, a: a2 } = this.rgba;
      return new _Color(new RGBA(opaqueBackground.rgba.r - a2 * (opaqueBackground.rgba.r - r), opaqueBackground.rgba.g - a2 * (opaqueBackground.rgba.g - g), opaqueBackground.rgba.b - a2 * (opaqueBackground.rgba.b - b), 1));
    }
    toString() {
      if (!this._toString) {
        this._toString = _Color.Format.CSS.format(this);
      }
      return this._toString;
    }
    static getLighterColor(of, relative2, factor) {
      if (of.isLighterThan(relative2)) {
        return of;
      }
      factor = factor ? factor : 0.5;
      const lum1 = of.getRelativeLuminance();
      const lum2 = relative2.getRelativeLuminance();
      factor = factor * (lum2 - lum1) / lum2;
      return of.lighten(factor);
    }
    static getDarkerColor(of, relative2, factor) {
      if (of.isDarkerThan(relative2)) {
        return of;
      }
      factor = factor ? factor : 0.5;
      const lum1 = of.getRelativeLuminance();
      const lum2 = relative2.getRelativeLuminance();
      factor = factor * (lum1 - lum2) / lum1;
      return of.darken(factor);
    }
  };
  Color.white = new Color(new RGBA(255, 255, 255, 1));
  Color.black = new Color(new RGBA(0, 0, 0, 1));
  Color.red = new Color(new RGBA(255, 0, 0, 1));
  Color.blue = new Color(new RGBA(0, 0, 255, 1));
  Color.green = new Color(new RGBA(0, 255, 0, 1));
  Color.cyan = new Color(new RGBA(0, 255, 255, 1));
  Color.lightgrey = new Color(new RGBA(211, 211, 211, 1));
  Color.transparent = new Color(new RGBA(0, 0, 0, 0));
  (function(Color3) {
    let Format;
    (function(Format2) {
      let CSS;
      (function(CSS2) {
        function formatRGB(color) {
          if (color.rgba.a === 1) {
            return `rgb(${color.rgba.r}, ${color.rgba.g}, ${color.rgba.b})`;
          }
          return Color3.Format.CSS.formatRGBA(color);
        }
        CSS2.formatRGB = formatRGB;
        function formatRGBA(color) {
          return `rgba(${color.rgba.r}, ${color.rgba.g}, ${color.rgba.b}, ${+color.rgba.a.toFixed(2)})`;
        }
        CSS2.formatRGBA = formatRGBA;
        function formatHSL(color) {
          if (color.hsla.a === 1) {
            return `hsl(${color.hsla.h}, ${(color.hsla.s * 100).toFixed(2)}%, ${(color.hsla.l * 100).toFixed(2)}%)`;
          }
          return Color3.Format.CSS.formatHSLA(color);
        }
        CSS2.formatHSL = formatHSL;
        function formatHSLA(color) {
          return `hsla(${color.hsla.h}, ${(color.hsla.s * 100).toFixed(2)}%, ${(color.hsla.l * 100).toFixed(2)}%, ${color.hsla.a.toFixed(2)})`;
        }
        CSS2.formatHSLA = formatHSLA;
        function _toTwoDigitHex(n) {
          const r = n.toString(16);
          return r.length !== 2 ? "0" + r : r;
        }
        function formatHex(color) {
          return `#${_toTwoDigitHex(color.rgba.r)}${_toTwoDigitHex(color.rgba.g)}${_toTwoDigitHex(color.rgba.b)}`;
        }
        CSS2.formatHex = formatHex;
        function formatHexA(color, compact = false) {
          if (compact && color.rgba.a === 1) {
            return Color3.Format.CSS.formatHex(color);
          }
          return `#${_toTwoDigitHex(color.rgba.r)}${_toTwoDigitHex(color.rgba.g)}${_toTwoDigitHex(color.rgba.b)}${_toTwoDigitHex(Math.round(color.rgba.a * 255))}`;
        }
        CSS2.formatHexA = formatHexA;
        function format5(color) {
          if (color.isOpaque()) {
            return Color3.Format.CSS.formatHex(color);
          }
          return Color3.Format.CSS.formatRGBA(color);
        }
        CSS2.format = format5;
        function parseHex(hex) {
          const length = hex.length;
          if (length === 0) {
            return null;
          }
          if (hex.charCodeAt(0) !== 35) {
            return null;
          }
          if (length === 7) {
            const r = 16 * _parseHexDigit(hex.charCodeAt(1)) + _parseHexDigit(hex.charCodeAt(2));
            const g = 16 * _parseHexDigit(hex.charCodeAt(3)) + _parseHexDigit(hex.charCodeAt(4));
            const b = 16 * _parseHexDigit(hex.charCodeAt(5)) + _parseHexDigit(hex.charCodeAt(6));
            return new Color3(new RGBA(r, g, b, 1));
          }
          if (length === 9) {
            const r = 16 * _parseHexDigit(hex.charCodeAt(1)) + _parseHexDigit(hex.charCodeAt(2));
            const g = 16 * _parseHexDigit(hex.charCodeAt(3)) + _parseHexDigit(hex.charCodeAt(4));
            const b = 16 * _parseHexDigit(hex.charCodeAt(5)) + _parseHexDigit(hex.charCodeAt(6));
            const a2 = 16 * _parseHexDigit(hex.charCodeAt(7)) + _parseHexDigit(hex.charCodeAt(8));
            return new Color3(new RGBA(r, g, b, a2 / 255));
          }
          if (length === 4) {
            const r = _parseHexDigit(hex.charCodeAt(1));
            const g = _parseHexDigit(hex.charCodeAt(2));
            const b = _parseHexDigit(hex.charCodeAt(3));
            return new Color3(new RGBA(16 * r + r, 16 * g + g, 16 * b + b));
          }
          if (length === 5) {
            const r = _parseHexDigit(hex.charCodeAt(1));
            const g = _parseHexDigit(hex.charCodeAt(2));
            const b = _parseHexDigit(hex.charCodeAt(3));
            const a2 = _parseHexDigit(hex.charCodeAt(4));
            return new Color3(new RGBA(16 * r + r, 16 * g + g, 16 * b + b, (16 * a2 + a2) / 255));
          }
          return null;
        }
        CSS2.parseHex = parseHex;
        function _parseHexDigit(charCode) {
          switch (charCode) {
            case 48:
              return 0;
            case 49:
              return 1;
            case 50:
              return 2;
            case 51:
              return 3;
            case 52:
              return 4;
            case 53:
              return 5;
            case 54:
              return 6;
            case 55:
              return 7;
            case 56:
              return 8;
            case 57:
              return 9;
            case 97:
              return 10;
            case 65:
              return 10;
            case 98:
              return 11;
            case 66:
              return 11;
            case 99:
              return 12;
            case 67:
              return 12;
            case 100:
              return 13;
            case 68:
              return 13;
            case 101:
              return 14;
            case 69:
              return 14;
            case 102:
              return 15;
            case 70:
              return 15;
          }
          return 0;
        }
      })(CSS = Format2.CSS || (Format2.CSS = {}));
    })(Format = Color3.Format || (Color3.Format = {}));
  })(Color || (Color = {}));

  // node_modules/monaco-editor/esm/vs/editor/common/languages/defaultDocumentColorsComputer.js
  function _parseCaptureGroups(captureGroups) {
    const values = [];
    for (const captureGroup of captureGroups) {
      const parsedNumber = Number(captureGroup);
      if (parsedNumber || parsedNumber === 0 && captureGroup.replace(/\s/g, "") !== "") {
        values.push(parsedNumber);
      }
    }
    return values;
  }
  function _toIColor(r, g, b, a2) {
    return {
      red: r / 255,
      blue: b / 255,
      green: g / 255,
      alpha: a2
    };
  }
  function _findRange(model, match) {
    const index = match.index;
    const length = match[0].length;
    if (!index) {
      return;
    }
    const startPosition = model.positionAt(index);
    const range = {
      startLineNumber: startPosition.lineNumber,
      startColumn: startPosition.column,
      endLineNumber: startPosition.lineNumber,
      endColumn: startPosition.column + length
    };
    return range;
  }
  function _findHexColorInformation(range, hexValue) {
    if (!range) {
      return;
    }
    const parsedHexColor = Color.Format.CSS.parseHex(hexValue);
    if (!parsedHexColor) {
      return;
    }
    return {
      range,
      color: _toIColor(parsedHexColor.rgba.r, parsedHexColor.rgba.g, parsedHexColor.rgba.b, parsedHexColor.rgba.a)
    };
  }
  function _findRGBColorInformation(range, matches, isAlpha) {
    if (!range || matches.length !== 1) {
      return;
    }
    const match = matches[0];
    const captureGroups = match.values();
    const parsedRegex = _parseCaptureGroups(captureGroups);
    return {
      range,
      color: _toIColor(parsedRegex[0], parsedRegex[1], parsedRegex[2], isAlpha ? parsedRegex[3] : 1)
    };
  }
  function _findHSLColorInformation(range, matches, isAlpha) {
    if (!range || matches.length !== 1) {
      return;
    }
    const match = matches[0];
    const captureGroups = match.values();
    const parsedRegex = _parseCaptureGroups(captureGroups);
    const colorEquivalent = new Color(new HSLA(parsedRegex[0], parsedRegex[1] / 100, parsedRegex[2] / 100, isAlpha ? parsedRegex[3] : 1));
    return {
      range,
      color: _toIColor(colorEquivalent.rgba.r, colorEquivalent.rgba.g, colorEquivalent.rgba.b, colorEquivalent.rgba.a)
    };
  }
  function _findMatches(model, regex) {
    if (typeof model === "string") {
      return [...model.matchAll(regex)];
    } else {
      return model.findMatches(regex);
    }
  }
  function computeColors(model) {
    const result = [];
    const initialValidationRegex = /\b(rgb|rgba|hsl|hsla)(\([0-9\s,.\%]*\))|(#)([A-Fa-f0-9]{3})\b|(#)([A-Fa-f0-9]{4})\b|(#)([A-Fa-f0-9]{6})\b|(#)([A-Fa-f0-9]{8})\b/gm;
    const initialValidationMatches = _findMatches(model, initialValidationRegex);
    if (initialValidationMatches.length > 0) {
      for (const initialMatch of initialValidationMatches) {
        const initialCaptureGroups = initialMatch.filter((captureGroup) => captureGroup !== void 0);
        const colorScheme = initialCaptureGroups[1];
        const colorParameters = initialCaptureGroups[2];
        if (!colorParameters) {
          continue;
        }
        let colorInformation;
        if (colorScheme === "rgb") {
          const regexParameters = /^\(\s*(25[0-5]|2[0-4][0-9]|1[0-9]{2}|[1-9][0-9]|[0-9])\s*,\s*(25[0-5]|2[0-4][0-9]|1[0-9]{2}|[1-9][0-9]|[0-9])\s*,\s*(25[0-5]|2[0-4][0-9]|1[0-9]{2}|[1-9][0-9]|[0-9])\s*\)$/gm;
          colorInformation = _findRGBColorInformation(_findRange(model, initialMatch), _findMatches(colorParameters, regexParameters), false);
        } else if (colorScheme === "rgba") {
          const regexParameters = /^\(\s*(25[0-5]|2[0-4][0-9]|1[0-9]{2}|[1-9][0-9]|[0-9])\s*,\s*(25[0-5]|2[0-4][0-9]|1[0-9]{2}|[1-9][0-9]|[0-9])\s*,\s*(25[0-5]|2[0-4][0-9]|1[0-9]{2}|[1-9][0-9]|[0-9])\s*,\s*(0[.][0-9]+|[.][0-9]+|[01][.]|[01])\s*\)$/gm;
          colorInformation = _findRGBColorInformation(_findRange(model, initialMatch), _findMatches(colorParameters, regexParameters), true);
        } else if (colorScheme === "hsl") {
          const regexParameters = /^\(\s*(36[0]|3[0-5][0-9]|[12][0-9][0-9]|[1-9]?[0-9])\s*,\s*(100|\d{1,2}[.]\d*|\d{1,2})%\s*,\s*(100|\d{1,2}[.]\d*|\d{1,2})%\s*\)$/gm;
          colorInformation = _findHSLColorInformation(_findRange(model, initialMatch), _findMatches(colorParameters, regexParameters), false);
        } else if (colorScheme === "hsla") {
          const regexParameters = /^\(\s*(36[0]|3[0-5][0-9]|[12][0-9][0-9]|[1-9]?[0-9])\s*,\s*(100|\d{1,2}[.]\d*|\d{1,2})%\s*,\s*(100|\d{1,2}[.]\d*|\d{1,2})%\s*,\s*(0[.][0-9]+|[.][0-9]+|[01][.]|[01])\s*\)$/gm;
          colorInformation = _findHSLColorInformation(_findRange(model, initialMatch), _findMatches(colorParameters, regexParameters), true);
        } else if (colorScheme === "#") {
          colorInformation = _findHexColorInformation(_findRange(model, initialMatch), colorScheme + colorParameters);
        }
        if (colorInformation) {
          result.push(colorInformation);
        }
      }
    }
    return result;
  }
  function computeDefaultDocumentColors(model) {
    if (!model || typeof model.getValue !== "function" || typeof model.positionAt !== "function") {
      return [];
    }
    return computeColors(model);
  }

  // node_modules/monaco-editor/esm/vs/editor/common/services/findSectionHeaders.js
  var markRegex = new RegExp("\\bMARK:\\s*(.*)$", "d");
  var trimDashesRegex = /^-+|-+$/g;
  function findSectionHeaders(model, options) {
    var _a4;
    let headers = [];
    if (options.findRegionSectionHeaders && ((_a4 = options.foldingRules) === null || _a4 === void 0 ? void 0 : _a4.markers)) {
      const regionHeaders = collectRegionHeaders(model, options);
      headers = headers.concat(regionHeaders);
    }
    if (options.findMarkSectionHeaders) {
      const markHeaders = collectMarkHeaders(model);
      headers = headers.concat(markHeaders);
    }
    return headers;
  }
  function collectRegionHeaders(model, options) {
    const regionHeaders = [];
    const endLineNumber = model.getLineCount();
    for (let lineNumber = 1; lineNumber <= endLineNumber; lineNumber++) {
      const lineContent = model.getLineContent(lineNumber);
      const match = lineContent.match(options.foldingRules.markers.start);
      if (match) {
        const range = { startLineNumber: lineNumber, startColumn: match[0].length + 1, endLineNumber: lineNumber, endColumn: lineContent.length + 1 };
        if (range.endColumn > range.startColumn) {
          const sectionHeader = {
            range,
            ...getHeaderText(lineContent.substring(match[0].length)),
            shouldBeInComments: false
          };
          if (sectionHeader.text || sectionHeader.hasSeparatorLine) {
            regionHeaders.push(sectionHeader);
          }
        }
      }
    }
    return regionHeaders;
  }
  function collectMarkHeaders(model) {
    const markHeaders = [];
    const endLineNumber = model.getLineCount();
    for (let lineNumber = 1; lineNumber <= endLineNumber; lineNumber++) {
      const lineContent = model.getLineContent(lineNumber);
      addMarkHeaderIfFound(lineContent, lineNumber, markHeaders);
    }
    return markHeaders;
  }
  function addMarkHeaderIfFound(lineContent, lineNumber, sectionHeaders) {
    markRegex.lastIndex = 0;
    const match = markRegex.exec(lineContent);
    if (match) {
      const column = match.indices[1][0] + 1;
      const endColumn = match.indices[1][1] + 1;
      const range = { startLineNumber: lineNumber, startColumn: column, endLineNumber: lineNumber, endColumn };
      if (range.endColumn > range.startColumn) {
        const sectionHeader = {
          range,
          ...getHeaderText(match[1]),
          shouldBeInComments: true
        };
        if (sectionHeader.text || sectionHeader.hasSeparatorLine) {
          sectionHeaders.push(sectionHeader);
        }
      }
    }
  }
  function getHeaderText(text) {
    text = text.trim();
    const hasSeparatorLine = text.startsWith("-");
    text = text.replace(trimDashesRegex, "");
    return { text, hasSeparatorLine };
  }

  // node_modules/monaco-editor/esm/vs/editor/common/services/editorSimpleWorker.js
  var MirrorModel = class extends MirrorTextModel {
    get uri() {
      return this._uri;
    }
    get eol() {
      return this._eol;
    }
    getValue() {
      return this.getText();
    }
    findMatches(regex) {
      const matches = [];
      for (let i = 0; i < this._lines.length; i++) {
        const line = this._lines[i];
        const offsetToAdd = this.offsetAt(new Position(i + 1, 1));
        const iteratorOverMatches = line.matchAll(regex);
        for (const match of iteratorOverMatches) {
          if (match.index || match.index === 0) {
            match.index = match.index + offsetToAdd;
          }
          matches.push(match);
        }
      }
      return matches;
    }
    getLinesContent() {
      return this._lines.slice(0);
    }
    getLineCount() {
      return this._lines.length;
    }
    getLineContent(lineNumber) {
      return this._lines[lineNumber - 1];
    }
    getWordAtPosition(position, wordDefinition) {
      const wordAtText = getWordAtText(position.column, ensureValidWordDefinition(wordDefinition), this._lines[position.lineNumber - 1], 0);
      if (wordAtText) {
        return new Range(position.lineNumber, wordAtText.startColumn, position.lineNumber, wordAtText.endColumn);
      }
      return null;
    }
    words(wordDefinition) {
      const lines = this._lines;
      const wordenize = this._wordenize.bind(this);
      let lineNumber = 0;
      let lineText = "";
      let wordRangesIdx = 0;
      let wordRanges = [];
      return {
        *[Symbol.iterator]() {
          while (true) {
            if (wordRangesIdx < wordRanges.length) {
              const value = lineText.substring(wordRanges[wordRangesIdx].start, wordRanges[wordRangesIdx].end);
              wordRangesIdx += 1;
              yield value;
            } else {
              if (lineNumber < lines.length) {
                lineText = lines[lineNumber];
                wordRanges = wordenize(lineText, wordDefinition);
                wordRangesIdx = 0;
                lineNumber += 1;
              } else {
                break;
              }
            }
          }
        }
      };
    }
    getLineWords(lineNumber, wordDefinition) {
      const content = this._lines[lineNumber - 1];
      const ranges = this._wordenize(content, wordDefinition);
      const words = [];
      for (const range of ranges) {
        words.push({
          word: content.substring(range.start, range.end),
          startColumn: range.start + 1,
          endColumn: range.end + 1
        });
      }
      return words;
    }
    _wordenize(content, wordDefinition) {
      const result = [];
      let match;
      wordDefinition.lastIndex = 0;
      while (match = wordDefinition.exec(content)) {
        if (match[0].length === 0) {
          break;
        }
        result.push({ start: match.index, end: match.index + match[0].length });
      }
      return result;
    }
    getValueInRange(range) {
      range = this._validateRange(range);
      if (range.startLineNumber === range.endLineNumber) {
        return this._lines[range.startLineNumber - 1].substring(range.startColumn - 1, range.endColumn - 1);
      }
      const lineEnding = this._eol;
      const startLineIndex = range.startLineNumber - 1;
      const endLineIndex = range.endLineNumber - 1;
      const resultLines = [];
      resultLines.push(this._lines[startLineIndex].substring(range.startColumn - 1));
      for (let i = startLineIndex + 1; i < endLineIndex; i++) {
        resultLines.push(this._lines[i]);
      }
      resultLines.push(this._lines[endLineIndex].substring(0, range.endColumn - 1));
      return resultLines.join(lineEnding);
    }
    offsetAt(position) {
      position = this._validatePosition(position);
      this._ensureLineStarts();
      return this._lineStarts.getPrefixSum(position.lineNumber - 2) + (position.column - 1);
    }
    positionAt(offset) {
      offset = Math.floor(offset);
      offset = Math.max(0, offset);
      this._ensureLineStarts();
      const out = this._lineStarts.getIndexOf(offset);
      const lineLength = this._lines[out.index].length;
      return {
        lineNumber: 1 + out.index,
        column: 1 + Math.min(out.remainder, lineLength)
      };
    }
    _validateRange(range) {
      const start = this._validatePosition({ lineNumber: range.startLineNumber, column: range.startColumn });
      const end = this._validatePosition({ lineNumber: range.endLineNumber, column: range.endColumn });
      if (start.lineNumber !== range.startLineNumber || start.column !== range.startColumn || end.lineNumber !== range.endLineNumber || end.column !== range.endColumn) {
        return {
          startLineNumber: start.lineNumber,
          startColumn: start.column,
          endLineNumber: end.lineNumber,
          endColumn: end.column
        };
      }
      return range;
    }
    _validatePosition(position) {
      if (!Position.isIPosition(position)) {
        throw new Error("bad position");
      }
      let { lineNumber, column } = position;
      let hasChanged = false;
      if (lineNumber < 1) {
        lineNumber = 1;
        column = 1;
        hasChanged = true;
      } else if (lineNumber > this._lines.length) {
        lineNumber = this._lines.length;
        column = this._lines[lineNumber - 1].length + 1;
        hasChanged = true;
      } else {
        const maxCharacter = this._lines[lineNumber - 1].length + 1;
        if (column < 1) {
          column = 1;
          hasChanged = true;
        } else if (column > maxCharacter) {
          column = maxCharacter;
          hasChanged = true;
        }
      }
      if (!hasChanged) {
        return position;
      } else {
        return { lineNumber, column };
      }
    }
  };
  var EditorSimpleWorker = class _EditorSimpleWorker {
    constructor(host, foreignModuleFactory) {
      this._host = host;
      this._models = /* @__PURE__ */ Object.create(null);
      this._foreignModuleFactory = foreignModuleFactory;
      this._foreignModule = null;
    }
    dispose() {
      this._models = /* @__PURE__ */ Object.create(null);
    }
    _getModel(uri) {
      return this._models[uri];
    }
    _getModels() {
      const all = [];
      Object.keys(this._models).forEach((key) => all.push(this._models[key]));
      return all;
    }
    acceptNewModel(data) {
      this._models[data.url] = new MirrorModel(URI.parse(data.url), data.lines, data.EOL, data.versionId);
    }
    acceptModelChanged(strURL, e) {
      if (!this._models[strURL]) {
        return;
      }
      const model = this._models[strURL];
      model.onEvents(e);
    }
    acceptRemovedModel(strURL) {
      if (!this._models[strURL]) {
        return;
      }
      delete this._models[strURL];
    }
    async computeUnicodeHighlights(url, options, range) {
      const model = this._getModel(url);
      if (!model) {
        return { ranges: [], hasMore: false, ambiguousCharacterCount: 0, invisibleCharacterCount: 0, nonBasicAsciiCharacterCount: 0 };
      }
      return UnicodeTextModelHighlighter.computeUnicodeHighlights(model, options, range);
    }
    async findSectionHeaders(url, options) {
      const model = this._getModel(url);
      if (!model) {
        return [];
      }
      return findSectionHeaders(model, options);
    }
    // ---- BEGIN diff --------------------------------------------------------------------------
    async computeDiff(originalUrl, modifiedUrl, options, algorithm) {
      const original = this._getModel(originalUrl);
      const modified = this._getModel(modifiedUrl);
      if (!original || !modified) {
        return null;
      }
      const result = _EditorSimpleWorker.computeDiff(original, modified, options, algorithm);
      return result;
    }
    static computeDiff(originalTextModel, modifiedTextModel, options, algorithm) {
      const diffAlgorithm = algorithm === "advanced" ? linesDiffComputers.getDefault() : linesDiffComputers.getLegacy();
      const originalLines = originalTextModel.getLinesContent();
      const modifiedLines = modifiedTextModel.getLinesContent();
      const result = diffAlgorithm.computeDiff(originalLines, modifiedLines, options);
      const identical = result.changes.length > 0 ? false : this._modelsAreIdentical(originalTextModel, modifiedTextModel);
      function getLineChanges(changes) {
        return changes.map((m) => {
          var _a4;
          return [m.original.startLineNumber, m.original.endLineNumberExclusive, m.modified.startLineNumber, m.modified.endLineNumberExclusive, (_a4 = m.innerChanges) === null || _a4 === void 0 ? void 0 : _a4.map((m2) => [
            m2.originalRange.startLineNumber,
            m2.originalRange.startColumn,
            m2.originalRange.endLineNumber,
            m2.originalRange.endColumn,
            m2.modifiedRange.startLineNumber,
            m2.modifiedRange.startColumn,
            m2.modifiedRange.endLineNumber,
            m2.modifiedRange.endColumn
          ])];
        });
      }
      return {
        identical,
        quitEarly: result.hitTimeout,
        changes: getLineChanges(result.changes),
        moves: result.moves.map((m) => [
          m.lineRangeMapping.original.startLineNumber,
          m.lineRangeMapping.original.endLineNumberExclusive,
          m.lineRangeMapping.modified.startLineNumber,
          m.lineRangeMapping.modified.endLineNumberExclusive,
          getLineChanges(m.changes)
        ])
      };
    }
    static _modelsAreIdentical(original, modified) {
      const originalLineCount = original.getLineCount();
      const modifiedLineCount = modified.getLineCount();
      if (originalLineCount !== modifiedLineCount) {
        return false;
      }
      for (let line = 1; line <= originalLineCount; line++) {
        const originalLine = original.getLineContent(line);
        const modifiedLine = modified.getLineContent(line);
        if (originalLine !== modifiedLine) {
          return false;
        }
      }
      return true;
    }
    async computeMoreMinimalEdits(modelUrl, edits, pretty) {
      const model = this._getModel(modelUrl);
      if (!model) {
        return edits;
      }
      const result = [];
      let lastEol = void 0;
      edits = edits.slice(0).sort((a2, b) => {
        if (a2.range && b.range) {
          return Range.compareRangesUsingStarts(a2.range, b.range);
        }
        const aRng = a2.range ? 0 : 1;
        const bRng = b.range ? 0 : 1;
        return aRng - bRng;
      });
      let writeIndex = 0;
      for (let readIndex = 1; readIndex < edits.length; readIndex++) {
        if (Range.getEndPosition(edits[writeIndex].range).equals(Range.getStartPosition(edits[readIndex].range))) {
          edits[writeIndex].range = Range.fromPositions(Range.getStartPosition(edits[writeIndex].range), Range.getEndPosition(edits[readIndex].range));
          edits[writeIndex].text += edits[readIndex].text;
        } else {
          writeIndex++;
          edits[writeIndex] = edits[readIndex];
        }
      }
      edits.length = writeIndex + 1;
      for (let { range, text, eol } of edits) {
        if (typeof eol === "number") {
          lastEol = eol;
        }
        if (Range.isEmpty(range) && !text) {
          continue;
        }
        const original = model.getValueInRange(range);
        text = text.replace(/\r\n|\n|\r/g, model.eol);
        if (original === text) {
          continue;
        }
        if (Math.max(text.length, original.length) > _EditorSimpleWorker._diffLimit) {
          result.push({ range, text });
          continue;
        }
        const changes = stringDiff(original, text, pretty);
        const editOffset = model.offsetAt(Range.lift(range).getStartPosition());
        for (const change of changes) {
          const start = model.positionAt(editOffset + change.originalStart);
          const end = model.positionAt(editOffset + change.originalStart + change.originalLength);
          const newEdit = {
            text: text.substr(change.modifiedStart, change.modifiedLength),
            range: { startLineNumber: start.lineNumber, startColumn: start.column, endLineNumber: end.lineNumber, endColumn: end.column }
          };
          if (model.getValueInRange(newEdit.range) !== newEdit.text) {
            result.push(newEdit);
          }
        }
      }
      if (typeof lastEol === "number") {
        result.push({ eol: lastEol, text: "", range: { startLineNumber: 0, startColumn: 0, endLineNumber: 0, endColumn: 0 } });
      }
      return result;
    }
    // ---- END minimal edits ---------------------------------------------------------------
    async computeLinks(modelUrl) {
      const model = this._getModel(modelUrl);
      if (!model) {
        return null;
      }
      return computeLinks(model);
    }
    // --- BEGIN default document colors -----------------------------------------------------------
    async computeDefaultDocumentColors(modelUrl) {
      const model = this._getModel(modelUrl);
      if (!model) {
        return null;
      }
      return computeDefaultDocumentColors(model);
    }
    async textualSuggest(modelUrls, leadingWord, wordDef, wordDefFlags) {
      const sw = new StopWatch();
      const wordDefRegExp = new RegExp(wordDef, wordDefFlags);
      const seen = /* @__PURE__ */ new Set();
      outer: for (const url of modelUrls) {
        const model = this._getModel(url);
        if (!model) {
          continue;
        }
        for (const word of model.words(wordDefRegExp)) {
          if (word === leadingWord || !isNaN(Number(word))) {
            continue;
          }
          seen.add(word);
          if (seen.size > _EditorSimpleWorker._suggestionsLimit) {
            break outer;
          }
        }
      }
      return { words: Array.from(seen), duration: sw.elapsed() };
    }
    // ---- END suggest --------------------------------------------------------------------------
    //#region -- word ranges --
    async computeWordRanges(modelUrl, range, wordDef, wordDefFlags) {
      const model = this._getModel(modelUrl);
      if (!model) {
        return /* @__PURE__ */ Object.create(null);
      }
      const wordDefRegExp = new RegExp(wordDef, wordDefFlags);
      const result = /* @__PURE__ */ Object.create(null);
      for (let line = range.startLineNumber; line < range.endLineNumber; line++) {
        const words = model.getLineWords(line, wordDefRegExp);
        for (const word of words) {
          if (!isNaN(Number(word.word))) {
            continue;
          }
          let array = result[word.word];
          if (!array) {
            array = [];
            result[word.word] = array;
          }
          array.push({
            startLineNumber: line,
            startColumn: word.startColumn,
            endLineNumber: line,
            endColumn: word.endColumn
          });
        }
      }
      return result;
    }
    //#endregion
    async navigateValueSet(modelUrl, range, up, wordDef, wordDefFlags) {
      const model = this._getModel(modelUrl);
      if (!model) {
        return null;
      }
      const wordDefRegExp = new RegExp(wordDef, wordDefFlags);
      if (range.startColumn === range.endColumn) {
        range = {
          startLineNumber: range.startLineNumber,
          startColumn: range.startColumn,
          endLineNumber: range.endLineNumber,
          endColumn: range.endColumn + 1
        };
      }
      const selectionText = model.getValueInRange(range);
      const wordRange = model.getWordAtPosition({ lineNumber: range.startLineNumber, column: range.startColumn }, wordDefRegExp);
      if (!wordRange) {
        return null;
      }
      const word = model.getValueInRange(wordRange);
      const result = BasicInplaceReplace.INSTANCE.navigateValueSet(range, selectionText, wordRange, word, up);
      return result;
    }
    // ---- BEGIN foreign module support --------------------------------------------------------------------------
    loadForeignModule(moduleId, createData, foreignHostMethods) {
      const proxyMethodRequest = (method, args) => {
        return this._host.fhr(method, args);
      };
      const foreignHost = createProxyObject(foreignHostMethods, proxyMethodRequest);
      const ctx = {
        host: foreignHost,
        getMirrorModels: () => {
          return this._getModels();
        }
      };
      if (this._foreignModuleFactory) {
        this._foreignModule = this._foreignModuleFactory(ctx, createData);
        return Promise.resolve(getAllMethodNames(this._foreignModule));
      }
      return Promise.reject(new Error(`Unexpected usage`));
    }
    // foreign method request
    fmr(method, args) {
      if (!this._foreignModule || typeof this._foreignModule[method] !== "function") {
        return Promise.reject(new Error("Missing requestHandler or method: " + method));
      }
      try {
        return Promise.resolve(this._foreignModule[method].apply(this._foreignModule, args));
      } catch (e) {
        return Promise.reject(e);
      }
    }
  };
  EditorSimpleWorker._diffLimit = 1e5;
  EditorSimpleWorker._suggestionsLimit = 1e4;
  if (typeof importScripts === "function") {
    globalThis.monaco = createMonacoBaseAPI();
  }

  // node_modules/monaco-editor/esm/vs/editor/editor.worker.js
  var initialized = false;
  function initialize(foreignModule) {
    if (initialized) {
      return;
    }
    initialized = true;
    const simpleWorker = new SimpleWorkerServer((msg) => {
      globalThis.postMessage(msg);
    }, (host) => new EditorSimpleWorker(host, foreignModule));
    globalThis.onmessage = (e) => {
      simpleWorker.onmessage(e.data);
    };
  }
  globalThis.onmessage = (e) => {
    if (!initialized) {
      initialize(null);
    }
  };

  // node_modules/monaco-editor/esm/vs/language/json/json.worker.js
  function createScanner(text, ignoreTrivia = false) {
    const len = text.length;
    let pos = 0, value = "", tokenOffset = 0, token = 16, lineNumber = 0, lineStartOffset = 0, tokenLineStartOffset = 0, prevTokenLineStartOffset = 0, scanError = 0;
    function scanHexDigits(count, exact) {
      let digits = 0;
      let value2 = 0;
      while (digits < count || !exact) {
        let ch = text.charCodeAt(pos);
        if (ch >= 48 && ch <= 57) {
          value2 = value2 * 16 + ch - 48;
        } else if (ch >= 65 && ch <= 70) {
          value2 = value2 * 16 + ch - 65 + 10;
        } else if (ch >= 97 && ch <= 102) {
          value2 = value2 * 16 + ch - 97 + 10;
        } else {
          break;
        }
        pos++;
        digits++;
      }
      if (digits < count) {
        value2 = -1;
      }
      return value2;
    }
    function setPosition(newPosition) {
      pos = newPosition;
      value = "";
      tokenOffset = 0;
      token = 16;
      scanError = 0;
    }
    function scanNumber() {
      let start = pos;
      if (text.charCodeAt(pos) === 48) {
        pos++;
      } else {
        pos++;
        while (pos < text.length && isDigit(text.charCodeAt(pos))) {
          pos++;
        }
      }
      if (pos < text.length && text.charCodeAt(pos) === 46) {
        pos++;
        if (pos < text.length && isDigit(text.charCodeAt(pos))) {
          pos++;
          while (pos < text.length && isDigit(text.charCodeAt(pos))) {
            pos++;
          }
        } else {
          scanError = 3;
          return text.substring(start, pos);
        }
      }
      let end = pos;
      if (pos < text.length && (text.charCodeAt(pos) === 69 || text.charCodeAt(pos) === 101)) {
        pos++;
        if (pos < text.length && text.charCodeAt(pos) === 43 || text.charCodeAt(pos) === 45) {
          pos++;
        }
        if (pos < text.length && isDigit(text.charCodeAt(pos))) {
          pos++;
          while (pos < text.length && isDigit(text.charCodeAt(pos))) {
            pos++;
          }
          end = pos;
        } else {
          scanError = 3;
        }
      }
      return text.substring(start, end);
    }
    function scanString() {
      let result = "", start = pos;
      while (true) {
        if (pos >= len) {
          result += text.substring(start, pos);
          scanError = 2;
          break;
        }
        const ch = text.charCodeAt(pos);
        if (ch === 34) {
          result += text.substring(start, pos);
          pos++;
          break;
        }
        if (ch === 92) {
          result += text.substring(start, pos);
          pos++;
          if (pos >= len) {
            scanError = 2;
            break;
          }
          const ch2 = text.charCodeAt(pos++);
          switch (ch2) {
            case 34:
              result += '"';
              break;
            case 92:
              result += "\\";
              break;
            case 47:
              result += "/";
              break;
            case 98:
              result += "\b";
              break;
            case 102:
              result += "\f";
              break;
            case 110:
              result += "\n";
              break;
            case 114:
              result += "\r";
              break;
            case 116:
              result += "	";
              break;
            case 117:
              const ch3 = scanHexDigits(4, true);
              if (ch3 >= 0) {
                result += String.fromCharCode(ch3);
              } else {
                scanError = 4;
              }
              break;
            default:
              scanError = 5;
          }
          start = pos;
          continue;
        }
        if (ch >= 0 && ch <= 31) {
          if (isLineBreak(ch)) {
            result += text.substring(start, pos);
            scanError = 2;
            break;
          } else {
            scanError = 6;
          }
        }
        pos++;
      }
      return result;
    }
    function scanNext() {
      value = "";
      scanError = 0;
      tokenOffset = pos;
      lineStartOffset = lineNumber;
      prevTokenLineStartOffset = tokenLineStartOffset;
      if (pos >= len) {
        tokenOffset = len;
        return token = 17;
      }
      let code = text.charCodeAt(pos);
      if (isWhiteSpace(code)) {
        do {
          pos++;
          value += String.fromCharCode(code);
          code = text.charCodeAt(pos);
        } while (isWhiteSpace(code));
        return token = 15;
      }
      if (isLineBreak(code)) {
        pos++;
        value += String.fromCharCode(code);
        if (code === 13 && text.charCodeAt(pos) === 10) {
          pos++;
          value += "\n";
        }
        lineNumber++;
        tokenLineStartOffset = pos;
        return token = 14;
      }
      switch (code) {
        case 123:
          pos++;
          return token = 1;
        case 125:
          pos++;
          return token = 2;
        case 91:
          pos++;
          return token = 3;
        case 93:
          pos++;
          return token = 4;
        case 58:
          pos++;
          return token = 6;
        case 44:
          pos++;
          return token = 5;
        case 34:
          pos++;
          value = scanString();
          return token = 10;
        case 47:
          const start = pos - 1;
          if (text.charCodeAt(pos + 1) === 47) {
            pos += 2;
            while (pos < len) {
              if (isLineBreak(text.charCodeAt(pos))) {
                break;
              }
              pos++;
            }
            value = text.substring(start, pos);
            return token = 12;
          }
          if (text.charCodeAt(pos + 1) === 42) {
            pos += 2;
            const safeLength = len - 1;
            let commentClosed = false;
            while (pos < safeLength) {
              const ch = text.charCodeAt(pos);
              if (ch === 42 && text.charCodeAt(pos + 1) === 47) {
                pos += 2;
                commentClosed = true;
                break;
              }
              pos++;
              if (isLineBreak(ch)) {
                if (ch === 13 && text.charCodeAt(pos) === 10) {
                  pos++;
                }
                lineNumber++;
                tokenLineStartOffset = pos;
              }
            }
            if (!commentClosed) {
              pos++;
              scanError = 1;
            }
            value = text.substring(start, pos);
            return token = 13;
          }
          value += String.fromCharCode(code);
          pos++;
          return token = 16;
        case 45:
          value += String.fromCharCode(code);
          pos++;
          if (pos === len || !isDigit(text.charCodeAt(pos))) {
            return token = 16;
          }
        case 48:
        case 49:
        case 50:
        case 51:
        case 52:
        case 53:
        case 54:
        case 55:
        case 56:
        case 57:
          value += scanNumber();
          return token = 11;
        default:
          while (pos < len && isUnknownContentCharacter(code)) {
            pos++;
            code = text.charCodeAt(pos);
          }
          if (tokenOffset !== pos) {
            value = text.substring(tokenOffset, pos);
            switch (value) {
              case "true":
                return token = 8;
              case "false":
                return token = 9;
              case "null":
                return token = 7;
            }
            return token = 16;
          }
          value += String.fromCharCode(code);
          pos++;
          return token = 16;
      }
    }
    function isUnknownContentCharacter(code) {
      if (isWhiteSpace(code) || isLineBreak(code)) {
        return false;
      }
      switch (code) {
        case 125:
        case 93:
        case 123:
        case 91:
        case 34:
        case 58:
        case 44:
        case 47:
          return false;
      }
      return true;
    }
    function scanNextNonTrivia() {
      let result;
      do {
        result = scanNext();
      } while (result >= 12 && result <= 15);
      return result;
    }
    return {
      setPosition,
      getPosition: () => pos,
      scan: ignoreTrivia ? scanNextNonTrivia : scanNext,
      getToken: () => token,
      getTokenValue: () => value,
      getTokenOffset: () => tokenOffset,
      getTokenLength: () => pos - tokenOffset,
      getTokenStartLine: () => lineStartOffset,
      getTokenStartCharacter: () => tokenOffset - prevTokenLineStartOffset,
      getTokenError: () => scanError
    };
  }
  function isWhiteSpace(ch) {
    return ch === 32 || ch === 9;
  }
  function isLineBreak(ch) {
    return ch === 10 || ch === 13;
  }
  function isDigit(ch) {
    return ch >= 48 && ch <= 57;
  }
  var CharacterCodes;
  (function(CharacterCodes2) {
    CharacterCodes2[CharacterCodes2["lineFeed"] = 10] = "lineFeed";
    CharacterCodes2[CharacterCodes2["carriageReturn"] = 13] = "carriageReturn";
    CharacterCodes2[CharacterCodes2["space"] = 32] = "space";
    CharacterCodes2[CharacterCodes2["_0"] = 48] = "_0";
    CharacterCodes2[CharacterCodes2["_1"] = 49] = "_1";
    CharacterCodes2[CharacterCodes2["_2"] = 50] = "_2";
    CharacterCodes2[CharacterCodes2["_3"] = 51] = "_3";
    CharacterCodes2[CharacterCodes2["_4"] = 52] = "_4";
    CharacterCodes2[CharacterCodes2["_5"] = 53] = "_5";
    CharacterCodes2[CharacterCodes2["_6"] = 54] = "_6";
    CharacterCodes2[CharacterCodes2["_7"] = 55] = "_7";
    CharacterCodes2[CharacterCodes2["_8"] = 56] = "_8";
    CharacterCodes2[CharacterCodes2["_9"] = 57] = "_9";
    CharacterCodes2[CharacterCodes2["a"] = 97] = "a";
    CharacterCodes2[CharacterCodes2["b"] = 98] = "b";
    CharacterCodes2[CharacterCodes2["c"] = 99] = "c";
    CharacterCodes2[CharacterCodes2["d"] = 100] = "d";
    CharacterCodes2[CharacterCodes2["e"] = 101] = "e";
    CharacterCodes2[CharacterCodes2["f"] = 102] = "f";
    CharacterCodes2[CharacterCodes2["g"] = 103] = "g";
    CharacterCodes2[CharacterCodes2["h"] = 104] = "h";
    CharacterCodes2[CharacterCodes2["i"] = 105] = "i";
    CharacterCodes2[CharacterCodes2["j"] = 106] = "j";
    CharacterCodes2[CharacterCodes2["k"] = 107] = "k";
    CharacterCodes2[CharacterCodes2["l"] = 108] = "l";
    CharacterCodes2[CharacterCodes2["m"] = 109] = "m";
    CharacterCodes2[CharacterCodes2["n"] = 110] = "n";
    CharacterCodes2[CharacterCodes2["o"] = 111] = "o";
    CharacterCodes2[CharacterCodes2["p"] = 112] = "p";
    CharacterCodes2[CharacterCodes2["q"] = 113] = "q";
    CharacterCodes2[CharacterCodes2["r"] = 114] = "r";
    CharacterCodes2[CharacterCodes2["s"] = 115] = "s";
    CharacterCodes2[CharacterCodes2["t"] = 116] = "t";
    CharacterCodes2[CharacterCodes2["u"] = 117] = "u";
    CharacterCodes2[CharacterCodes2["v"] = 118] = "v";
    CharacterCodes2[CharacterCodes2["w"] = 119] = "w";
    CharacterCodes2[CharacterCodes2["x"] = 120] = "x";
    CharacterCodes2[CharacterCodes2["y"] = 121] = "y";
    CharacterCodes2[CharacterCodes2["z"] = 122] = "z";
    CharacterCodes2[CharacterCodes2["A"] = 65] = "A";
    CharacterCodes2[CharacterCodes2["B"] = 66] = "B";
    CharacterCodes2[CharacterCodes2["C"] = 67] = "C";
    CharacterCodes2[CharacterCodes2["D"] = 68] = "D";
    CharacterCodes2[CharacterCodes2["E"] = 69] = "E";
    CharacterCodes2[CharacterCodes2["F"] = 70] = "F";
    CharacterCodes2[CharacterCodes2["G"] = 71] = "G";
    CharacterCodes2[CharacterCodes2["H"] = 72] = "H";
    CharacterCodes2[CharacterCodes2["I"] = 73] = "I";
    CharacterCodes2[CharacterCodes2["J"] = 74] = "J";
    CharacterCodes2[CharacterCodes2["K"] = 75] = "K";
    CharacterCodes2[CharacterCodes2["L"] = 76] = "L";
    CharacterCodes2[CharacterCodes2["M"] = 77] = "M";
    CharacterCodes2[CharacterCodes2["N"] = 78] = "N";
    CharacterCodes2[CharacterCodes2["O"] = 79] = "O";
    CharacterCodes2[CharacterCodes2["P"] = 80] = "P";
    CharacterCodes2[CharacterCodes2["Q"] = 81] = "Q";
    CharacterCodes2[CharacterCodes2["R"] = 82] = "R";
    CharacterCodes2[CharacterCodes2["S"] = 83] = "S";
    CharacterCodes2[CharacterCodes2["T"] = 84] = "T";
    CharacterCodes2[CharacterCodes2["U"] = 85] = "U";
    CharacterCodes2[CharacterCodes2["V"] = 86] = "V";
    CharacterCodes2[CharacterCodes2["W"] = 87] = "W";
    CharacterCodes2[CharacterCodes2["X"] = 88] = "X";
    CharacterCodes2[CharacterCodes2["Y"] = 89] = "Y";
    CharacterCodes2[CharacterCodes2["Z"] = 90] = "Z";
    CharacterCodes2[CharacterCodes2["asterisk"] = 42] = "asterisk";
    CharacterCodes2[CharacterCodes2["backslash"] = 92] = "backslash";
    CharacterCodes2[CharacterCodes2["closeBrace"] = 125] = "closeBrace";
    CharacterCodes2[CharacterCodes2["closeBracket"] = 93] = "closeBracket";
    CharacterCodes2[CharacterCodes2["colon"] = 58] = "colon";
    CharacterCodes2[CharacterCodes2["comma"] = 44] = "comma";
    CharacterCodes2[CharacterCodes2["dot"] = 46] = "dot";
    CharacterCodes2[CharacterCodes2["doubleQuote"] = 34] = "doubleQuote";
    CharacterCodes2[CharacterCodes2["minus"] = 45] = "minus";
    CharacterCodes2[CharacterCodes2["openBrace"] = 123] = "openBrace";
    CharacterCodes2[CharacterCodes2["openBracket"] = 91] = "openBracket";
    CharacterCodes2[CharacterCodes2["plus"] = 43] = "plus";
    CharacterCodes2[CharacterCodes2["slash"] = 47] = "slash";
    CharacterCodes2[CharacterCodes2["formFeed"] = 12] = "formFeed";
    CharacterCodes2[CharacterCodes2["tab"] = 9] = "tab";
  })(CharacterCodes || (CharacterCodes = {}));
  var cachedSpaces = new Array(20).fill(0).map((_, index) => {
    return " ".repeat(index);
  });
  var maxCachedValues = 200;
  var cachedBreakLinesWithSpaces = {
    " ": {
      "\n": new Array(maxCachedValues).fill(0).map((_, index) => {
        return "\n" + " ".repeat(index);
      }),
      "\r": new Array(maxCachedValues).fill(0).map((_, index) => {
        return "\r" + " ".repeat(index);
      }),
      "\r\n": new Array(maxCachedValues).fill(0).map((_, index) => {
        return "\r\n" + " ".repeat(index);
      })
    },
    "	": {
      "\n": new Array(maxCachedValues).fill(0).map((_, index) => {
        return "\n" + "	".repeat(index);
      }),
      "\r": new Array(maxCachedValues).fill(0).map((_, index) => {
        return "\r" + "	".repeat(index);
      }),
      "\r\n": new Array(maxCachedValues).fill(0).map((_, index) => {
        return "\r\n" + "	".repeat(index);
      })
    }
  };
  var supportedEols = ["\n", "\r", "\r\n"];
  function format(documentText, range, options) {
    let initialIndentLevel;
    let formatText;
    let formatTextStart;
    let rangeStart;
    let rangeEnd;
    if (range) {
      rangeStart = range.offset;
      rangeEnd = rangeStart + range.length;
      formatTextStart = rangeStart;
      while (formatTextStart > 0 && !isEOL(documentText, formatTextStart - 1)) {
        formatTextStart--;
      }
      let endOffset = rangeEnd;
      while (endOffset < documentText.length && !isEOL(documentText, endOffset)) {
        endOffset++;
      }
      formatText = documentText.substring(formatTextStart, endOffset);
      initialIndentLevel = computeIndentLevel(formatText, options);
    } else {
      formatText = documentText;
      initialIndentLevel = 0;
      formatTextStart = 0;
      rangeStart = 0;
      rangeEnd = documentText.length;
    }
    const eol = getEOL(options, documentText);
    const eolFastPathSupported = supportedEols.includes(eol);
    let numberLineBreaks = 0;
    let indentLevel = 0;
    let indentValue;
    if (options.insertSpaces) {
      indentValue = cachedSpaces[options.tabSize || 4] ?? repeat(cachedSpaces[1], options.tabSize || 4);
    } else {
      indentValue = "	";
    }
    const indentType = indentValue === "	" ? "	" : " ";
    let scanner = createScanner(formatText, false);
    let hasError = false;
    function newLinesAndIndent() {
      if (numberLineBreaks > 1) {
        return repeat(eol, numberLineBreaks) + repeat(indentValue, initialIndentLevel + indentLevel);
      }
      const amountOfSpaces = indentValue.length * (initialIndentLevel + indentLevel);
      if (!eolFastPathSupported || amountOfSpaces > cachedBreakLinesWithSpaces[indentType][eol].length) {
        return eol + repeat(indentValue, initialIndentLevel + indentLevel);
      }
      if (amountOfSpaces <= 0) {
        return eol;
      }
      return cachedBreakLinesWithSpaces[indentType][eol][amountOfSpaces];
    }
    function scanNext() {
      let token = scanner.scan();
      numberLineBreaks = 0;
      while (token === 15 || token === 14) {
        if (token === 14 && options.keepLines) {
          numberLineBreaks += 1;
        } else if (token === 14) {
          numberLineBreaks = 1;
        }
        token = scanner.scan();
      }
      hasError = token === 16 || scanner.getTokenError() !== 0;
      return token;
    }
    const editOperations = [];
    function addEdit(text, startOffset, endOffset) {
      if (!hasError && (!range || startOffset < rangeEnd && endOffset > rangeStart) && documentText.substring(startOffset, endOffset) !== text) {
        editOperations.push({ offset: startOffset, length: endOffset - startOffset, content: text });
      }
    }
    let firstToken = scanNext();
    if (options.keepLines && numberLineBreaks > 0) {
      addEdit(repeat(eol, numberLineBreaks), 0, 0);
    }
    if (firstToken !== 17) {
      let firstTokenStart = scanner.getTokenOffset() + formatTextStart;
      let initialIndent = indentValue.length * initialIndentLevel < 20 && options.insertSpaces ? cachedSpaces[indentValue.length * initialIndentLevel] : repeat(indentValue, initialIndentLevel);
      addEdit(initialIndent, formatTextStart, firstTokenStart);
    }
    while (firstToken !== 17) {
      let firstTokenEnd = scanner.getTokenOffset() + scanner.getTokenLength() + formatTextStart;
      let secondToken = scanNext();
      let replaceContent = "";
      let needsLineBreak = false;
      while (numberLineBreaks === 0 && (secondToken === 12 || secondToken === 13)) {
        let commentTokenStart = scanner.getTokenOffset() + formatTextStart;
        addEdit(cachedSpaces[1], firstTokenEnd, commentTokenStart);
        firstTokenEnd = scanner.getTokenOffset() + scanner.getTokenLength() + formatTextStart;
        needsLineBreak = secondToken === 12;
        replaceContent = needsLineBreak ? newLinesAndIndent() : "";
        secondToken = scanNext();
      }
      if (secondToken === 2) {
        if (firstToken !== 1) {
          indentLevel--;
        }
        ;
        if (options.keepLines && numberLineBreaks > 0 || !options.keepLines && firstToken !== 1) {
          replaceContent = newLinesAndIndent();
        } else if (options.keepLines) {
          replaceContent = cachedSpaces[1];
        }
      } else if (secondToken === 4) {
        if (firstToken !== 3) {
          indentLevel--;
        }
        ;
        if (options.keepLines && numberLineBreaks > 0 || !options.keepLines && firstToken !== 3) {
          replaceContent = newLinesAndIndent();
        } else if (options.keepLines) {
          replaceContent = cachedSpaces[1];
        }
      } else {
        switch (firstToken) {
          case 3:
          case 1:
            indentLevel++;
            if (options.keepLines && numberLineBreaks > 0 || !options.keepLines) {
              replaceContent = newLinesAndIndent();
            } else {
              replaceContent = cachedSpaces[1];
            }
            break;
          case 5:
            if (options.keepLines && numberLineBreaks > 0 || !options.keepLines) {
              replaceContent = newLinesAndIndent();
            } else {
              replaceContent = cachedSpaces[1];
            }
            break;
          case 12:
            replaceContent = newLinesAndIndent();
            break;
          case 13:
            if (numberLineBreaks > 0) {
              replaceContent = newLinesAndIndent();
            } else if (!needsLineBreak) {
              replaceContent = cachedSpaces[1];
            }
            break;
          case 6:
            if (options.keepLines && numberLineBreaks > 0) {
              replaceContent = newLinesAndIndent();
            } else if (!needsLineBreak) {
              replaceContent = cachedSpaces[1];
            }
            break;
          case 10:
            if (options.keepLines && numberLineBreaks > 0) {
              replaceContent = newLinesAndIndent();
            } else if (secondToken === 6 && !needsLineBreak) {
              replaceContent = "";
            }
            break;
          case 7:
          case 8:
          case 9:
          case 11:
          case 2:
          case 4:
            if (options.keepLines && numberLineBreaks > 0) {
              replaceContent = newLinesAndIndent();
            } else {
              if ((secondToken === 12 || secondToken === 13) && !needsLineBreak) {
                replaceContent = cachedSpaces[1];
              } else if (secondToken !== 5 && secondToken !== 17) {
                hasError = true;
              }
            }
            break;
          case 16:
            hasError = true;
            break;
        }
        if (numberLineBreaks > 0 && (secondToken === 12 || secondToken === 13)) {
          replaceContent = newLinesAndIndent();
        }
      }
      if (secondToken === 17) {
        if (options.keepLines && numberLineBreaks > 0) {
          replaceContent = newLinesAndIndent();
        } else {
          replaceContent = options.insertFinalNewline ? eol : "";
        }
      }
      const secondTokenStart = scanner.getTokenOffset() + formatTextStart;
      addEdit(replaceContent, firstTokenEnd, secondTokenStart);
      firstToken = secondToken;
    }
    return editOperations;
  }
  function repeat(s, count) {
    let result = "";
    for (let i = 0; i < count; i++) {
      result += s;
    }
    return result;
  }
  function computeIndentLevel(content, options) {
    let i = 0;
    let nChars = 0;
    const tabSize = options.tabSize || 4;
    while (i < content.length) {
      let ch = content.charAt(i);
      if (ch === cachedSpaces[1]) {
        nChars++;
      } else if (ch === "	") {
        nChars += tabSize;
      } else {
        break;
      }
      i++;
    }
    return Math.floor(nChars / tabSize);
  }
  function getEOL(options, text) {
    for (let i = 0; i < text.length; i++) {
      const ch = text.charAt(i);
      if (ch === "\r") {
        if (i + 1 < text.length && text.charAt(i + 1) === "\n") {
          return "\r\n";
        }
        return "\r";
      } else if (ch === "\n") {
        return "\n";
      }
    }
    return options && options.eol || "\n";
  }
  function isEOL(text, offset) {
    return "\r\n".indexOf(text.charAt(offset)) !== -1;
  }
  var ParseOptions;
  (function(ParseOptions2) {
    ParseOptions2.DEFAULT = {
      allowTrailingComma: false
    };
  })(ParseOptions || (ParseOptions = {}));
  function parse(text, errors = [], options = ParseOptions.DEFAULT) {
    let currentProperty = null;
    let currentParent = [];
    const previousParents = [];
    function onValue(value) {
      if (Array.isArray(currentParent)) {
        currentParent.push(value);
      } else if (currentProperty !== null) {
        currentParent[currentProperty] = value;
      }
    }
    const visitor = {
      onObjectBegin: () => {
        const object = {};
        onValue(object);
        previousParents.push(currentParent);
        currentParent = object;
        currentProperty = null;
      },
      onObjectProperty: (name) => {
        currentProperty = name;
      },
      onObjectEnd: () => {
        currentParent = previousParents.pop();
      },
      onArrayBegin: () => {
        const array = [];
        onValue(array);
        previousParents.push(currentParent);
        currentParent = array;
        currentProperty = null;
      },
      onArrayEnd: () => {
        currentParent = previousParents.pop();
      },
      onLiteralValue: onValue,
      onError: (error, offset, length) => {
        errors.push({ error, offset, length });
      }
    };
    visit(text, visitor, options);
    return currentParent[0];
  }
  function getNodePath(node) {
    if (!node.parent || !node.parent.children) {
      return [];
    }
    const path = getNodePath(node.parent);
    if (node.parent.type === "property") {
      const key = node.parent.children[0].value;
      path.push(key);
    } else if (node.parent.type === "array") {
      const index = node.parent.children.indexOf(node);
      if (index !== -1) {
        path.push(index);
      }
    }
    return path;
  }
  function getNodeValue(node) {
    switch (node.type) {
      case "array":
        return node.children.map(getNodeValue);
      case "object":
        const obj = /* @__PURE__ */ Object.create(null);
        for (let prop of node.children) {
          const valueNode = prop.children[1];
          if (valueNode) {
            obj[prop.children[0].value] = getNodeValue(valueNode);
          }
        }
        return obj;
      case "null":
      case "string":
      case "number":
      case "boolean":
        return node.value;
      default:
        return void 0;
    }
  }
  function contains(node, offset, includeRightBound = false) {
    return offset >= node.offset && offset < node.offset + node.length || includeRightBound && offset === node.offset + node.length;
  }
  function findNodeAtOffset(node, offset, includeRightBound = false) {
    if (contains(node, offset, includeRightBound)) {
      const children = node.children;
      if (Array.isArray(children)) {
        for (let i = 0; i < children.length && children[i].offset <= offset; i++) {
          const item = findNodeAtOffset(children[i], offset, includeRightBound);
          if (item) {
            return item;
          }
        }
      }
      return node;
    }
    return void 0;
  }
  function visit(text, visitor, options = ParseOptions.DEFAULT) {
    const _scanner = createScanner(text, false);
    const _jsonPath = [];
    function toNoArgVisit(visitFunction) {
      return visitFunction ? () => visitFunction(_scanner.getTokenOffset(), _scanner.getTokenLength(), _scanner.getTokenStartLine(), _scanner.getTokenStartCharacter()) : () => true;
    }
    function toNoArgVisitWithPath(visitFunction) {
      return visitFunction ? () => visitFunction(_scanner.getTokenOffset(), _scanner.getTokenLength(), _scanner.getTokenStartLine(), _scanner.getTokenStartCharacter(), () => _jsonPath.slice()) : () => true;
    }
    function toOneArgVisit(visitFunction) {
      return visitFunction ? (arg) => visitFunction(arg, _scanner.getTokenOffset(), _scanner.getTokenLength(), _scanner.getTokenStartLine(), _scanner.getTokenStartCharacter()) : () => true;
    }
    function toOneArgVisitWithPath(visitFunction) {
      return visitFunction ? (arg) => visitFunction(arg, _scanner.getTokenOffset(), _scanner.getTokenLength(), _scanner.getTokenStartLine(), _scanner.getTokenStartCharacter(), () => _jsonPath.slice()) : () => true;
    }
    const onObjectBegin = toNoArgVisitWithPath(visitor.onObjectBegin), onObjectProperty = toOneArgVisitWithPath(visitor.onObjectProperty), onObjectEnd = toNoArgVisit(visitor.onObjectEnd), onArrayBegin = toNoArgVisitWithPath(visitor.onArrayBegin), onArrayEnd = toNoArgVisit(visitor.onArrayEnd), onLiteralValue = toOneArgVisitWithPath(visitor.onLiteralValue), onSeparator = toOneArgVisit(visitor.onSeparator), onComment = toNoArgVisit(visitor.onComment), onError = toOneArgVisit(visitor.onError);
    const disallowComments = options && options.disallowComments;
    const allowTrailingComma = options && options.allowTrailingComma;
    function scanNext() {
      while (true) {
        const token = _scanner.scan();
        switch (_scanner.getTokenError()) {
          case 4:
            handleError(
              14
              /* ParseErrorCode.InvalidUnicode */
            );
            break;
          case 5:
            handleError(
              15
              /* ParseErrorCode.InvalidEscapeCharacter */
            );
            break;
          case 3:
            handleError(
              13
              /* ParseErrorCode.UnexpectedEndOfNumber */
            );
            break;
          case 1:
            if (!disallowComments) {
              handleError(
                11
                /* ParseErrorCode.UnexpectedEndOfComment */
              );
            }
            break;
          case 2:
            handleError(
              12
              /* ParseErrorCode.UnexpectedEndOfString */
            );
            break;
          case 6:
            handleError(
              16
              /* ParseErrorCode.InvalidCharacter */
            );
            break;
        }
        switch (token) {
          case 12:
          case 13:
            if (disallowComments) {
              handleError(
                10
                /* ParseErrorCode.InvalidCommentToken */
              );
            } else {
              onComment();
            }
            break;
          case 16:
            handleError(
              1
              /* ParseErrorCode.InvalidSymbol */
            );
            break;
          case 15:
          case 14:
            break;
          default:
            return token;
        }
      }
    }
    function handleError(error, skipUntilAfter = [], skipUntil = []) {
      onError(error);
      if (skipUntilAfter.length + skipUntil.length > 0) {
        let token = _scanner.getToken();
        while (token !== 17) {
          if (skipUntilAfter.indexOf(token) !== -1) {
            scanNext();
            break;
          } else if (skipUntil.indexOf(token) !== -1) {
            break;
          }
          token = scanNext();
        }
      }
    }
    function parseString(isValue) {
      const value = _scanner.getTokenValue();
      if (isValue) {
        onLiteralValue(value);
      } else {
        onObjectProperty(value);
        _jsonPath.push(value);
      }
      scanNext();
      return true;
    }
    function parseLiteral() {
      switch (_scanner.getToken()) {
        case 11:
          const tokenValue = _scanner.getTokenValue();
          let value = Number(tokenValue);
          if (isNaN(value)) {
            handleError(
              2
              /* ParseErrorCode.InvalidNumberFormat */
            );
            value = 0;
          }
          onLiteralValue(value);
          break;
        case 7:
          onLiteralValue(null);
          break;
        case 8:
          onLiteralValue(true);
          break;
        case 9:
          onLiteralValue(false);
          break;
        default:
          return false;
      }
      scanNext();
      return true;
    }
    function parseProperty() {
      if (_scanner.getToken() !== 10) {
        handleError(3, [], [
          2,
          5
          /* SyntaxKind.CommaToken */
        ]);
        return false;
      }
      parseString(false);
      if (_scanner.getToken() === 6) {
        onSeparator(":");
        scanNext();
        if (!parseValue()) {
          handleError(4, [], [
            2,
            5
            /* SyntaxKind.CommaToken */
          ]);
        }
      } else {
        handleError(5, [], [
          2,
          5
          /* SyntaxKind.CommaToken */
        ]);
      }
      _jsonPath.pop();
      return true;
    }
    function parseObject() {
      onObjectBegin();
      scanNext();
      let needsComma = false;
      while (_scanner.getToken() !== 2 && _scanner.getToken() !== 17) {
        if (_scanner.getToken() === 5) {
          if (!needsComma) {
            handleError(4, [], []);
          }
          onSeparator(",");
          scanNext();
          if (_scanner.getToken() === 2 && allowTrailingComma) {
            break;
          }
        } else if (needsComma) {
          handleError(6, [], []);
        }
        if (!parseProperty()) {
          handleError(4, [], [
            2,
            5
            /* SyntaxKind.CommaToken */
          ]);
        }
        needsComma = true;
      }
      onObjectEnd();
      if (_scanner.getToken() !== 2) {
        handleError(7, [
          2
          /* SyntaxKind.CloseBraceToken */
        ], []);
      } else {
        scanNext();
      }
      return true;
    }
    function parseArray() {
      onArrayBegin();
      scanNext();
      let isFirstElement = true;
      let needsComma = false;
      while (_scanner.getToken() !== 4 && _scanner.getToken() !== 17) {
        if (_scanner.getToken() === 5) {
          if (!needsComma) {
            handleError(4, [], []);
          }
          onSeparator(",");
          scanNext();
          if (_scanner.getToken() === 4 && allowTrailingComma) {
            break;
          }
        } else if (needsComma) {
          handleError(6, [], []);
        }
        if (isFirstElement) {
          _jsonPath.push(0);
          isFirstElement = false;
        } else {
          _jsonPath[_jsonPath.length - 1]++;
        }
        if (!parseValue()) {
          handleError(4, [], [
            4,
            5
            /* SyntaxKind.CommaToken */
          ]);
        }
        needsComma = true;
      }
      onArrayEnd();
      if (!isFirstElement) {
        _jsonPath.pop();
      }
      if (_scanner.getToken() !== 4) {
        handleError(8, [
          4
          /* SyntaxKind.CloseBracketToken */
        ], []);
      } else {
        scanNext();
      }
      return true;
    }
    function parseValue() {
      switch (_scanner.getToken()) {
        case 3:
          return parseArray();
        case 1:
          return parseObject();
        case 10:
          return parseString(true);
        default:
          return parseLiteral();
      }
    }
    scanNext();
    if (_scanner.getToken() === 17) {
      if (options.allowEmptyContent) {
        return true;
      }
      handleError(4, [], []);
      return false;
    }
    if (!parseValue()) {
      handleError(4, [], []);
      return false;
    }
    if (_scanner.getToken() !== 17) {
      handleError(9, [], []);
    }
    return true;
  }
  var createScanner2 = createScanner;
  var ScanError;
  (function(ScanError2) {
    ScanError2[ScanError2["None"] = 0] = "None";
    ScanError2[ScanError2["UnexpectedEndOfComment"] = 1] = "UnexpectedEndOfComment";
    ScanError2[ScanError2["UnexpectedEndOfString"] = 2] = "UnexpectedEndOfString";
    ScanError2[ScanError2["UnexpectedEndOfNumber"] = 3] = "UnexpectedEndOfNumber";
    ScanError2[ScanError2["InvalidUnicode"] = 4] = "InvalidUnicode";
    ScanError2[ScanError2["InvalidEscapeCharacter"] = 5] = "InvalidEscapeCharacter";
    ScanError2[ScanError2["InvalidCharacter"] = 6] = "InvalidCharacter";
  })(ScanError || (ScanError = {}));
  var SyntaxKind;
  (function(SyntaxKind2) {
    SyntaxKind2[SyntaxKind2["OpenBraceToken"] = 1] = "OpenBraceToken";
    SyntaxKind2[SyntaxKind2["CloseBraceToken"] = 2] = "CloseBraceToken";
    SyntaxKind2[SyntaxKind2["OpenBracketToken"] = 3] = "OpenBracketToken";
    SyntaxKind2[SyntaxKind2["CloseBracketToken"] = 4] = "CloseBracketToken";
    SyntaxKind2[SyntaxKind2["CommaToken"] = 5] = "CommaToken";
    SyntaxKind2[SyntaxKind2["ColonToken"] = 6] = "ColonToken";
    SyntaxKind2[SyntaxKind2["NullKeyword"] = 7] = "NullKeyword";
    SyntaxKind2[SyntaxKind2["TrueKeyword"] = 8] = "TrueKeyword";
    SyntaxKind2[SyntaxKind2["FalseKeyword"] = 9] = "FalseKeyword";
    SyntaxKind2[SyntaxKind2["StringLiteral"] = 10] = "StringLiteral";
    SyntaxKind2[SyntaxKind2["NumericLiteral"] = 11] = "NumericLiteral";
    SyntaxKind2[SyntaxKind2["LineCommentTrivia"] = 12] = "LineCommentTrivia";
    SyntaxKind2[SyntaxKind2["BlockCommentTrivia"] = 13] = "BlockCommentTrivia";
    SyntaxKind2[SyntaxKind2["LineBreakTrivia"] = 14] = "LineBreakTrivia";
    SyntaxKind2[SyntaxKind2["Trivia"] = 15] = "Trivia";
    SyntaxKind2[SyntaxKind2["Unknown"] = 16] = "Unknown";
    SyntaxKind2[SyntaxKind2["EOF"] = 17] = "EOF";
  })(SyntaxKind || (SyntaxKind = {}));
  var parse2 = parse;
  var findNodeAtOffset2 = findNodeAtOffset;
  var getNodePath2 = getNodePath;
  var getNodeValue2 = getNodeValue;
  var ParseErrorCode;
  (function(ParseErrorCode2) {
    ParseErrorCode2[ParseErrorCode2["InvalidSymbol"] = 1] = "InvalidSymbol";
    ParseErrorCode2[ParseErrorCode2["InvalidNumberFormat"] = 2] = "InvalidNumberFormat";
    ParseErrorCode2[ParseErrorCode2["PropertyNameExpected"] = 3] = "PropertyNameExpected";
    ParseErrorCode2[ParseErrorCode2["ValueExpected"] = 4] = "ValueExpected";
    ParseErrorCode2[ParseErrorCode2["ColonExpected"] = 5] = "ColonExpected";
    ParseErrorCode2[ParseErrorCode2["CommaExpected"] = 6] = "CommaExpected";
    ParseErrorCode2[ParseErrorCode2["CloseBraceExpected"] = 7] = "CloseBraceExpected";
    ParseErrorCode2[ParseErrorCode2["CloseBracketExpected"] = 8] = "CloseBracketExpected";
    ParseErrorCode2[ParseErrorCode2["EndOfFileExpected"] = 9] = "EndOfFileExpected";
    ParseErrorCode2[ParseErrorCode2["InvalidCommentToken"] = 10] = "InvalidCommentToken";
    ParseErrorCode2[ParseErrorCode2["UnexpectedEndOfComment"] = 11] = "UnexpectedEndOfComment";
    ParseErrorCode2[ParseErrorCode2["UnexpectedEndOfString"] = 12] = "UnexpectedEndOfString";
    ParseErrorCode2[ParseErrorCode2["UnexpectedEndOfNumber"] = 13] = "UnexpectedEndOfNumber";
    ParseErrorCode2[ParseErrorCode2["InvalidUnicode"] = 14] = "InvalidUnicode";
    ParseErrorCode2[ParseErrorCode2["InvalidEscapeCharacter"] = 15] = "InvalidEscapeCharacter";
    ParseErrorCode2[ParseErrorCode2["InvalidCharacter"] = 16] = "InvalidCharacter";
  })(ParseErrorCode || (ParseErrorCode = {}));
  function format2(documentText, range, options) {
    return format(documentText, range, options);
  }
  function equals3(one, other) {
    if (one === other) {
      return true;
    }
    if (one === null || one === void 0 || other === null || other === void 0) {
      return false;
    }
    if (typeof one !== typeof other) {
      return false;
    }
    if (typeof one !== "object") {
      return false;
    }
    if (Array.isArray(one) !== Array.isArray(other)) {
      return false;
    }
    let i, key;
    if (Array.isArray(one)) {
      if (one.length !== other.length) {
        return false;
      }
      for (i = 0; i < one.length; i++) {
        if (!equals3(one[i], other[i])) {
          return false;
        }
      }
    } else {
      const oneKeys = [];
      for (key in one) {
        oneKeys.push(key);
      }
      oneKeys.sort();
      const otherKeys = [];
      for (key in other) {
        otherKeys.push(key);
      }
      otherKeys.sort();
      if (!equals3(oneKeys, otherKeys)) {
        return false;
      }
      for (i = 0; i < oneKeys.length; i++) {
        if (!equals3(one[oneKeys[i]], other[oneKeys[i]])) {
          return false;
        }
      }
    }
    return true;
  }
  function isNumber(val) {
    return typeof val === "number";
  }
  function isDefined(val) {
    return typeof val !== "undefined";
  }
  function isBoolean(val) {
    return typeof val === "boolean";
  }
  function isString2(val) {
    return typeof val === "string";
  }
  function isObject2(val) {
    return typeof val === "object" && val !== null && !Array.isArray(val);
  }
  function startsWith(haystack, needle) {
    if (haystack.length < needle.length) {
      return false;
    }
    for (let i = 0; i < needle.length; i++) {
      if (haystack[i] !== needle[i]) {
        return false;
      }
    }
    return true;
  }
  function endsWith(haystack, needle) {
    const diff = haystack.length - needle.length;
    if (diff > 0) {
      return haystack.lastIndexOf(needle) === diff;
    } else if (diff === 0) {
      return haystack === needle;
    } else {
      return false;
    }
  }
  function extendedRegExp(pattern) {
    let flags = "";
    if (startsWith(pattern, "(?i)")) {
      pattern = pattern.substring(4);
      flags = "i";
    }
    try {
      return new RegExp(pattern, flags + "u");
    } catch (e) {
      try {
        return new RegExp(pattern, flags);
      } catch (e2) {
        return void 0;
      }
    }
  }
  function stringLength(str) {
    let count = 0;
    for (let i = 0; i < str.length; i++) {
      count++;
      const code = str.charCodeAt(i);
      if (55296 <= code && code <= 56319) {
        i++;
      }
    }
    return count;
  }
  var DocumentUri;
  (function(DocumentUri2) {
    function is(value) {
      return typeof value === "string";
    }
    DocumentUri2.is = is;
  })(DocumentUri || (DocumentUri = {}));
  var URI2;
  (function(URI3) {
    function is(value) {
      return typeof value === "string";
    }
    URI3.is = is;
  })(URI2 || (URI2 = {}));
  var integer;
  (function(integer2) {
    integer2.MIN_VALUE = -2147483648;
    integer2.MAX_VALUE = 2147483647;
    function is(value) {
      return typeof value === "number" && integer2.MIN_VALUE <= value && value <= integer2.MAX_VALUE;
    }
    integer2.is = is;
  })(integer || (integer = {}));
  var uinteger;
  (function(uinteger2) {
    uinteger2.MIN_VALUE = 0;
    uinteger2.MAX_VALUE = 2147483647;
    function is(value) {
      return typeof value === "number" && uinteger2.MIN_VALUE <= value && value <= uinteger2.MAX_VALUE;
    }
    uinteger2.is = is;
  })(uinteger || (uinteger = {}));
  var Position2;
  (function(Position22) {
    function create(line, character) {
      if (line === Number.MAX_VALUE) {
        line = uinteger.MAX_VALUE;
      }
      if (character === Number.MAX_VALUE) {
        character = uinteger.MAX_VALUE;
      }
      return { line, character };
    }
    Position22.create = create;
    function is(value) {
      let candidate = value;
      return Is.objectLiteral(candidate) && Is.uinteger(candidate.line) && Is.uinteger(candidate.character);
    }
    Position22.is = is;
  })(Position2 || (Position2 = {}));
  var Range2;
  (function(Range22) {
    function create(one, two, three, four) {
      if (Is.uinteger(one) && Is.uinteger(two) && Is.uinteger(three) && Is.uinteger(four)) {
        return { start: Position2.create(one, two), end: Position2.create(three, four) };
      } else if (Position2.is(one) && Position2.is(two)) {
        return { start: one, end: two };
      } else {
        throw new Error(`Range#create called with invalid arguments[${one}, ${two}, ${three}, ${four}]`);
      }
    }
    Range22.create = create;
    function is(value) {
      let candidate = value;
      return Is.objectLiteral(candidate) && Position2.is(candidate.start) && Position2.is(candidate.end);
    }
    Range22.is = is;
  })(Range2 || (Range2 = {}));
  var Location;
  (function(Location2) {
    function create(uri, range) {
      return { uri, range };
    }
    Location2.create = create;
    function is(value) {
      let candidate = value;
      return Is.objectLiteral(candidate) && Range2.is(candidate.range) && (Is.string(candidate.uri) || Is.undefined(candidate.uri));
    }
    Location2.is = is;
  })(Location || (Location = {}));
  var LocationLink;
  (function(LocationLink2) {
    function create(targetUri, targetRange, targetSelectionRange, originSelectionRange) {
      return { targetUri, targetRange, targetSelectionRange, originSelectionRange };
    }
    LocationLink2.create = create;
    function is(value) {
      let candidate = value;
      return Is.objectLiteral(candidate) && Range2.is(candidate.targetRange) && Is.string(candidate.targetUri) && Range2.is(candidate.targetSelectionRange) && (Range2.is(candidate.originSelectionRange) || Is.undefined(candidate.originSelectionRange));
    }
    LocationLink2.is = is;
  })(LocationLink || (LocationLink = {}));
  var Color2;
  (function(Color22) {
    function create(red, green, blue, alpha) {
      return {
        red,
        green,
        blue,
        alpha
      };
    }
    Color22.create = create;
    function is(value) {
      const candidate = value;
      return Is.objectLiteral(candidate) && Is.numberRange(candidate.red, 0, 1) && Is.numberRange(candidate.green, 0, 1) && Is.numberRange(candidate.blue, 0, 1) && Is.numberRange(candidate.alpha, 0, 1);
    }
    Color22.is = is;
  })(Color2 || (Color2 = {}));
  var ColorInformation;
  (function(ColorInformation2) {
    function create(range, color) {
      return {
        range,
        color
      };
    }
    ColorInformation2.create = create;
    function is(value) {
      const candidate = value;
      return Is.objectLiteral(candidate) && Range2.is(candidate.range) && Color2.is(candidate.color);
    }
    ColorInformation2.is = is;
  })(ColorInformation || (ColorInformation = {}));
  var ColorPresentation;
  (function(ColorPresentation2) {
    function create(label, textEdit, additionalTextEdits) {
      return {
        label,
        textEdit,
        additionalTextEdits
      };
    }
    ColorPresentation2.create = create;
    function is(value) {
      const candidate = value;
      return Is.objectLiteral(candidate) && Is.string(candidate.label) && (Is.undefined(candidate.textEdit) || TextEdit.is(candidate)) && (Is.undefined(candidate.additionalTextEdits) || Is.typedArray(candidate.additionalTextEdits, TextEdit.is));
    }
    ColorPresentation2.is = is;
  })(ColorPresentation || (ColorPresentation = {}));
  var FoldingRangeKind2;
  (function(FoldingRangeKind22) {
    FoldingRangeKind22.Comment = "comment";
    FoldingRangeKind22.Imports = "imports";
    FoldingRangeKind22.Region = "region";
  })(FoldingRangeKind2 || (FoldingRangeKind2 = {}));
  var FoldingRange;
  (function(FoldingRange2) {
    function create(startLine, endLine, startCharacter, endCharacter, kind, collapsedText) {
      const result = {
        startLine,
        endLine
      };
      if (Is.defined(startCharacter)) {
        result.startCharacter = startCharacter;
      }
      if (Is.defined(endCharacter)) {
        result.endCharacter = endCharacter;
      }
      if (Is.defined(kind)) {
        result.kind = kind;
      }
      if (Is.defined(collapsedText)) {
        result.collapsedText = collapsedText;
      }
      return result;
    }
    FoldingRange2.create = create;
    function is(value) {
      const candidate = value;
      return Is.objectLiteral(candidate) && Is.uinteger(candidate.startLine) && Is.uinteger(candidate.startLine) && (Is.undefined(candidate.startCharacter) || Is.uinteger(candidate.startCharacter)) && (Is.undefined(candidate.endCharacter) || Is.uinteger(candidate.endCharacter)) && (Is.undefined(candidate.kind) || Is.string(candidate.kind));
    }
    FoldingRange2.is = is;
  })(FoldingRange || (FoldingRange = {}));
  var DiagnosticRelatedInformation;
  (function(DiagnosticRelatedInformation2) {
    function create(location, message) {
      return {
        location,
        message
      };
    }
    DiagnosticRelatedInformation2.create = create;
    function is(value) {
      let candidate = value;
      return Is.defined(candidate) && Location.is(candidate.location) && Is.string(candidate.message);
    }
    DiagnosticRelatedInformation2.is = is;
  })(DiagnosticRelatedInformation || (DiagnosticRelatedInformation = {}));
  var DiagnosticSeverity;
  (function(DiagnosticSeverity2) {
    DiagnosticSeverity2.Error = 1;
    DiagnosticSeverity2.Warning = 2;
    DiagnosticSeverity2.Information = 3;
    DiagnosticSeverity2.Hint = 4;
  })(DiagnosticSeverity || (DiagnosticSeverity = {}));
  var DiagnosticTag;
  (function(DiagnosticTag2) {
    DiagnosticTag2.Unnecessary = 1;
    DiagnosticTag2.Deprecated = 2;
  })(DiagnosticTag || (DiagnosticTag = {}));
  var CodeDescription;
  (function(CodeDescription2) {
    function is(value) {
      const candidate = value;
      return Is.objectLiteral(candidate) && Is.string(candidate.href);
    }
    CodeDescription2.is = is;
  })(CodeDescription || (CodeDescription = {}));
  var Diagnostic;
  (function(Diagnostic2) {
    function create(range, message, severity, code, source, relatedInformation) {
      let result = { range, message };
      if (Is.defined(severity)) {
        result.severity = severity;
      }
      if (Is.defined(code)) {
        result.code = code;
      }
      if (Is.defined(source)) {
        result.source = source;
      }
      if (Is.defined(relatedInformation)) {
        result.relatedInformation = relatedInformation;
      }
      return result;
    }
    Diagnostic2.create = create;
    function is(value) {
      var _a4;
      let candidate = value;
      return Is.defined(candidate) && Range2.is(candidate.range) && Is.string(candidate.message) && (Is.number(candidate.severity) || Is.undefined(candidate.severity)) && (Is.integer(candidate.code) || Is.string(candidate.code) || Is.undefined(candidate.code)) && (Is.undefined(candidate.codeDescription) || Is.string((_a4 = candidate.codeDescription) === null || _a4 === void 0 ? void 0 : _a4.href)) && (Is.string(candidate.source) || Is.undefined(candidate.source)) && (Is.undefined(candidate.relatedInformation) || Is.typedArray(candidate.relatedInformation, DiagnosticRelatedInformation.is));
    }
    Diagnostic2.is = is;
  })(Diagnostic || (Diagnostic = {}));
  var Command2;
  (function(Command22) {
    function create(title, command, ...args) {
      let result = { title, command };
      if (Is.defined(args) && args.length > 0) {
        result.arguments = args;
      }
      return result;
    }
    Command22.create = create;
    function is(value) {
      let candidate = value;
      return Is.defined(candidate) && Is.string(candidate.title) && Is.string(candidate.command);
    }
    Command22.is = is;
  })(Command2 || (Command2 = {}));
  var TextEdit;
  (function(TextEdit2) {
    function replace(range, newText) {
      return { range, newText };
    }
    TextEdit2.replace = replace;
    function insert(position, newText) {
      return { range: { start: position, end: position }, newText };
    }
    TextEdit2.insert = insert;
    function del(range) {
      return { range, newText: "" };
    }
    TextEdit2.del = del;
    function is(value) {
      const candidate = value;
      return Is.objectLiteral(candidate) && Is.string(candidate.newText) && Range2.is(candidate.range);
    }
    TextEdit2.is = is;
  })(TextEdit || (TextEdit = {}));
  var ChangeAnnotation;
  (function(ChangeAnnotation2) {
    function create(label, needsConfirmation, description) {
      const result = { label };
      if (needsConfirmation !== void 0) {
        result.needsConfirmation = needsConfirmation;
      }
      if (description !== void 0) {
        result.description = description;
      }
      return result;
    }
    ChangeAnnotation2.create = create;
    function is(value) {
      const candidate = value;
      return Is.objectLiteral(candidate) && Is.string(candidate.label) && (Is.boolean(candidate.needsConfirmation) || candidate.needsConfirmation === void 0) && (Is.string(candidate.description) || candidate.description === void 0);
    }
    ChangeAnnotation2.is = is;
  })(ChangeAnnotation || (ChangeAnnotation = {}));
  var ChangeAnnotationIdentifier;
  (function(ChangeAnnotationIdentifier2) {
    function is(value) {
      const candidate = value;
      return Is.string(candidate);
    }
    ChangeAnnotationIdentifier2.is = is;
  })(ChangeAnnotationIdentifier || (ChangeAnnotationIdentifier = {}));
  var AnnotatedTextEdit;
  (function(AnnotatedTextEdit2) {
    function replace(range, newText, annotation) {
      return { range, newText, annotationId: annotation };
    }
    AnnotatedTextEdit2.replace = replace;
    function insert(position, newText, annotation) {
      return { range: { start: position, end: position }, newText, annotationId: annotation };
    }
    AnnotatedTextEdit2.insert = insert;
    function del(range, annotation) {
      return { range, newText: "", annotationId: annotation };
    }
    AnnotatedTextEdit2.del = del;
    function is(value) {
      const candidate = value;
      return TextEdit.is(candidate) && (ChangeAnnotation.is(candidate.annotationId) || ChangeAnnotationIdentifier.is(candidate.annotationId));
    }
    AnnotatedTextEdit2.is = is;
  })(AnnotatedTextEdit || (AnnotatedTextEdit = {}));
  var TextDocumentEdit;
  (function(TextDocumentEdit2) {
    function create(textDocument, edits) {
      return { textDocument, edits };
    }
    TextDocumentEdit2.create = create;
    function is(value) {
      let candidate = value;
      return Is.defined(candidate) && OptionalVersionedTextDocumentIdentifier.is(candidate.textDocument) && Array.isArray(candidate.edits);
    }
    TextDocumentEdit2.is = is;
  })(TextDocumentEdit || (TextDocumentEdit = {}));
  var CreateFile;
  (function(CreateFile2) {
    function create(uri, options, annotation) {
      let result = {
        kind: "create",
        uri
      };
      if (options !== void 0 && (options.overwrite !== void 0 || options.ignoreIfExists !== void 0)) {
        result.options = options;
      }
      if (annotation !== void 0) {
        result.annotationId = annotation;
      }
      return result;
    }
    CreateFile2.create = create;
    function is(value) {
      let candidate = value;
      return candidate && candidate.kind === "create" && Is.string(candidate.uri) && (candidate.options === void 0 || (candidate.options.overwrite === void 0 || Is.boolean(candidate.options.overwrite)) && (candidate.options.ignoreIfExists === void 0 || Is.boolean(candidate.options.ignoreIfExists))) && (candidate.annotationId === void 0 || ChangeAnnotationIdentifier.is(candidate.annotationId));
    }
    CreateFile2.is = is;
  })(CreateFile || (CreateFile = {}));
  var RenameFile;
  (function(RenameFile2) {
    function create(oldUri, newUri, options, annotation) {
      let result = {
        kind: "rename",
        oldUri,
        newUri
      };
      if (options !== void 0 && (options.overwrite !== void 0 || options.ignoreIfExists !== void 0)) {
        result.options = options;
      }
      if (annotation !== void 0) {
        result.annotationId = annotation;
      }
      return result;
    }
    RenameFile2.create = create;
    function is(value) {
      let candidate = value;
      return candidate && candidate.kind === "rename" && Is.string(candidate.oldUri) && Is.string(candidate.newUri) && (candidate.options === void 0 || (candidate.options.overwrite === void 0 || Is.boolean(candidate.options.overwrite)) && (candidate.options.ignoreIfExists === void 0 || Is.boolean(candidate.options.ignoreIfExists))) && (candidate.annotationId === void 0 || ChangeAnnotationIdentifier.is(candidate.annotationId));
    }
    RenameFile2.is = is;
  })(RenameFile || (RenameFile = {}));
  var DeleteFile;
  (function(DeleteFile2) {
    function create(uri, options, annotation) {
      let result = {
        kind: "delete",
        uri
      };
      if (options !== void 0 && (options.recursive !== void 0 || options.ignoreIfNotExists !== void 0)) {
        result.options = options;
      }
      if (annotation !== void 0) {
        result.annotationId = annotation;
      }
      return result;
    }
    DeleteFile2.create = create;
    function is(value) {
      let candidate = value;
      return candidate && candidate.kind === "delete" && Is.string(candidate.uri) && (candidate.options === void 0 || (candidate.options.recursive === void 0 || Is.boolean(candidate.options.recursive)) && (candidate.options.ignoreIfNotExists === void 0 || Is.boolean(candidate.options.ignoreIfNotExists))) && (candidate.annotationId === void 0 || ChangeAnnotationIdentifier.is(candidate.annotationId));
    }
    DeleteFile2.is = is;
  })(DeleteFile || (DeleteFile = {}));
  var WorkspaceEdit;
  (function(WorkspaceEdit2) {
    function is(value) {
      let candidate = value;
      return candidate && (candidate.changes !== void 0 || candidate.documentChanges !== void 0) && (candidate.documentChanges === void 0 || candidate.documentChanges.every((change) => {
        if (Is.string(change.kind)) {
          return CreateFile.is(change) || RenameFile.is(change) || DeleteFile.is(change);
        } else {
          return TextDocumentEdit.is(change);
        }
      }));
    }
    WorkspaceEdit2.is = is;
  })(WorkspaceEdit || (WorkspaceEdit = {}));
  var TextDocumentIdentifier;
  (function(TextDocumentIdentifier2) {
    function create(uri) {
      return { uri };
    }
    TextDocumentIdentifier2.create = create;
    function is(value) {
      let candidate = value;
      return Is.defined(candidate) && Is.string(candidate.uri);
    }
    TextDocumentIdentifier2.is = is;
  })(TextDocumentIdentifier || (TextDocumentIdentifier = {}));
  var VersionedTextDocumentIdentifier;
  (function(VersionedTextDocumentIdentifier2) {
    function create(uri, version) {
      return { uri, version };
    }
    VersionedTextDocumentIdentifier2.create = create;
    function is(value) {
      let candidate = value;
      return Is.defined(candidate) && Is.string(candidate.uri) && Is.integer(candidate.version);
    }
    VersionedTextDocumentIdentifier2.is = is;
  })(VersionedTextDocumentIdentifier || (VersionedTextDocumentIdentifier = {}));
  var OptionalVersionedTextDocumentIdentifier;
  (function(OptionalVersionedTextDocumentIdentifier2) {
    function create(uri, version) {
      return { uri, version };
    }
    OptionalVersionedTextDocumentIdentifier2.create = create;
    function is(value) {
      let candidate = value;
      return Is.defined(candidate) && Is.string(candidate.uri) && (candidate.version === null || Is.integer(candidate.version));
    }
    OptionalVersionedTextDocumentIdentifier2.is = is;
  })(OptionalVersionedTextDocumentIdentifier || (OptionalVersionedTextDocumentIdentifier = {}));
  var TextDocumentItem;
  (function(TextDocumentItem2) {
    function create(uri, languageId, version, text) {
      return { uri, languageId, version, text };
    }
    TextDocumentItem2.create = create;
    function is(value) {
      let candidate = value;
      return Is.defined(candidate) && Is.string(candidate.uri) && Is.string(candidate.languageId) && Is.integer(candidate.version) && Is.string(candidate.text);
    }
    TextDocumentItem2.is = is;
  })(TextDocumentItem || (TextDocumentItem = {}));
  var MarkupKind;
  (function(MarkupKind2) {
    MarkupKind2.PlainText = "plaintext";
    MarkupKind2.Markdown = "markdown";
    function is(value) {
      const candidate = value;
      return candidate === MarkupKind2.PlainText || candidate === MarkupKind2.Markdown;
    }
    MarkupKind2.is = is;
  })(MarkupKind || (MarkupKind = {}));
  var MarkupContent;
  (function(MarkupContent2) {
    function is(value) {
      const candidate = value;
      return Is.objectLiteral(value) && MarkupKind.is(candidate.kind) && Is.string(candidate.value);
    }
    MarkupContent2.is = is;
  })(MarkupContent || (MarkupContent = {}));
  var CompletionItemKind2;
  (function(CompletionItemKind22) {
    CompletionItemKind22.Text = 1;
    CompletionItemKind22.Method = 2;
    CompletionItemKind22.Function = 3;
    CompletionItemKind22.Constructor = 4;
    CompletionItemKind22.Field = 5;
    CompletionItemKind22.Variable = 6;
    CompletionItemKind22.Class = 7;
    CompletionItemKind22.Interface = 8;
    CompletionItemKind22.Module = 9;
    CompletionItemKind22.Property = 10;
    CompletionItemKind22.Unit = 11;
    CompletionItemKind22.Value = 12;
    CompletionItemKind22.Enum = 13;
    CompletionItemKind22.Keyword = 14;
    CompletionItemKind22.Snippet = 15;
    CompletionItemKind22.Color = 16;
    CompletionItemKind22.File = 17;
    CompletionItemKind22.Reference = 18;
    CompletionItemKind22.Folder = 19;
    CompletionItemKind22.EnumMember = 20;
    CompletionItemKind22.Constant = 21;
    CompletionItemKind22.Struct = 22;
    CompletionItemKind22.Event = 23;
    CompletionItemKind22.Operator = 24;
    CompletionItemKind22.TypeParameter = 25;
  })(CompletionItemKind2 || (CompletionItemKind2 = {}));
  var InsertTextFormat;
  (function(InsertTextFormat2) {
    InsertTextFormat2.PlainText = 1;
    InsertTextFormat2.Snippet = 2;
  })(InsertTextFormat || (InsertTextFormat = {}));
  var CompletionItemTag2;
  (function(CompletionItemTag22) {
    CompletionItemTag22.Deprecated = 1;
  })(CompletionItemTag2 || (CompletionItemTag2 = {}));
  var InsertReplaceEdit;
  (function(InsertReplaceEdit2) {
    function create(newText, insert, replace) {
      return { newText, insert, replace };
    }
    InsertReplaceEdit2.create = create;
    function is(value) {
      const candidate = value;
      return candidate && Is.string(candidate.newText) && Range2.is(candidate.insert) && Range2.is(candidate.replace);
    }
    InsertReplaceEdit2.is = is;
  })(InsertReplaceEdit || (InsertReplaceEdit = {}));
  var InsertTextMode;
  (function(InsertTextMode2) {
    InsertTextMode2.asIs = 1;
    InsertTextMode2.adjustIndentation = 2;
  })(InsertTextMode || (InsertTextMode = {}));
  var CompletionItemLabelDetails;
  (function(CompletionItemLabelDetails2) {
    function is(value) {
      const candidate = value;
      return candidate && (Is.string(candidate.detail) || candidate.detail === void 0) && (Is.string(candidate.description) || candidate.description === void 0);
    }
    CompletionItemLabelDetails2.is = is;
  })(CompletionItemLabelDetails || (CompletionItemLabelDetails = {}));
  var CompletionItem;
  (function(CompletionItem2) {
    function create(label) {
      return { label };
    }
    CompletionItem2.create = create;
  })(CompletionItem || (CompletionItem = {}));
  var CompletionList;
  (function(CompletionList2) {
    function create(items, isIncomplete) {
      return { items: items ? items : [], isIncomplete: !!isIncomplete };
    }
    CompletionList2.create = create;
  })(CompletionList || (CompletionList = {}));
  var MarkedString;
  (function(MarkedString2) {
    function fromPlainText(plainText) {
      return plainText.replace(/[\\`*_{}[\]()#+\-.!]/g, "\\$&");
    }
    MarkedString2.fromPlainText = fromPlainText;
    function is(value) {
      const candidate = value;
      return Is.string(candidate) || Is.objectLiteral(candidate) && Is.string(candidate.language) && Is.string(candidate.value);
    }
    MarkedString2.is = is;
  })(MarkedString || (MarkedString = {}));
  var Hover;
  (function(Hover2) {
    function is(value) {
      let candidate = value;
      return !!candidate && Is.objectLiteral(candidate) && (MarkupContent.is(candidate.contents) || MarkedString.is(candidate.contents) || Is.typedArray(candidate.contents, MarkedString.is)) && (value.range === void 0 || Range2.is(value.range));
    }
    Hover2.is = is;
  })(Hover || (Hover = {}));
  var ParameterInformation;
  (function(ParameterInformation2) {
    function create(label, documentation) {
      return documentation ? { label, documentation } : { label };
    }
    ParameterInformation2.create = create;
  })(ParameterInformation || (ParameterInformation = {}));
  var SignatureInformation;
  (function(SignatureInformation2) {
    function create(label, documentation, ...parameters) {
      let result = { label };
      if (Is.defined(documentation)) {
        result.documentation = documentation;
      }
      if (Is.defined(parameters)) {
        result.parameters = parameters;
      } else {
        result.parameters = [];
      }
      return result;
    }
    SignatureInformation2.create = create;
  })(SignatureInformation || (SignatureInformation = {}));
  var DocumentHighlightKind3;
  (function(DocumentHighlightKind22) {
    DocumentHighlightKind22.Text = 1;
    DocumentHighlightKind22.Read = 2;
    DocumentHighlightKind22.Write = 3;
  })(DocumentHighlightKind3 || (DocumentHighlightKind3 = {}));
  var DocumentHighlight;
  (function(DocumentHighlight2) {
    function create(range, kind) {
      let result = { range };
      if (Is.number(kind)) {
        result.kind = kind;
      }
      return result;
    }
    DocumentHighlight2.create = create;
  })(DocumentHighlight || (DocumentHighlight = {}));
  var SymbolKind2;
  (function(SymbolKind22) {
    SymbolKind22.File = 1;
    SymbolKind22.Module = 2;
    SymbolKind22.Namespace = 3;
    SymbolKind22.Package = 4;
    SymbolKind22.Class = 5;
    SymbolKind22.Method = 6;
    SymbolKind22.Property = 7;
    SymbolKind22.Field = 8;
    SymbolKind22.Constructor = 9;
    SymbolKind22.Enum = 10;
    SymbolKind22.Interface = 11;
    SymbolKind22.Function = 12;
    SymbolKind22.Variable = 13;
    SymbolKind22.Constant = 14;
    SymbolKind22.String = 15;
    SymbolKind22.Number = 16;
    SymbolKind22.Boolean = 17;
    SymbolKind22.Array = 18;
    SymbolKind22.Object = 19;
    SymbolKind22.Key = 20;
    SymbolKind22.Null = 21;
    SymbolKind22.EnumMember = 22;
    SymbolKind22.Struct = 23;
    SymbolKind22.Event = 24;
    SymbolKind22.Operator = 25;
    SymbolKind22.TypeParameter = 26;
  })(SymbolKind2 || (SymbolKind2 = {}));
  var SymbolTag2;
  (function(SymbolTag22) {
    SymbolTag22.Deprecated = 1;
  })(SymbolTag2 || (SymbolTag2 = {}));
  var SymbolInformation;
  (function(SymbolInformation2) {
    function create(name, kind, range, uri, containerName) {
      let result = {
        name,
        kind,
        location: { uri, range }
      };
      if (containerName) {
        result.containerName = containerName;
      }
      return result;
    }
    SymbolInformation2.create = create;
  })(SymbolInformation || (SymbolInformation = {}));
  var WorkspaceSymbol;
  (function(WorkspaceSymbol2) {
    function create(name, kind, uri, range) {
      return range !== void 0 ? { name, kind, location: { uri, range } } : { name, kind, location: { uri } };
    }
    WorkspaceSymbol2.create = create;
  })(WorkspaceSymbol || (WorkspaceSymbol = {}));
  var DocumentSymbol;
  (function(DocumentSymbol2) {
    function create(name, detail, kind, range, selectionRange, children) {
      let result = {
        name,
        detail,
        kind,
        range,
        selectionRange
      };
      if (children !== void 0) {
        result.children = children;
      }
      return result;
    }
    DocumentSymbol2.create = create;
    function is(value) {
      let candidate = value;
      return candidate && Is.string(candidate.name) && Is.number(candidate.kind) && Range2.is(candidate.range) && Range2.is(candidate.selectionRange) && (candidate.detail === void 0 || Is.string(candidate.detail)) && (candidate.deprecated === void 0 || Is.boolean(candidate.deprecated)) && (candidate.children === void 0 || Array.isArray(candidate.children)) && (candidate.tags === void 0 || Array.isArray(candidate.tags));
    }
    DocumentSymbol2.is = is;
  })(DocumentSymbol || (DocumentSymbol = {}));
  var CodeActionKind;
  (function(CodeActionKind2) {
    CodeActionKind2.Empty = "";
    CodeActionKind2.QuickFix = "quickfix";
    CodeActionKind2.Refactor = "refactor";
    CodeActionKind2.RefactorExtract = "refactor.extract";
    CodeActionKind2.RefactorInline = "refactor.inline";
    CodeActionKind2.RefactorRewrite = "refactor.rewrite";
    CodeActionKind2.Source = "source";
    CodeActionKind2.SourceOrganizeImports = "source.organizeImports";
    CodeActionKind2.SourceFixAll = "source.fixAll";
  })(CodeActionKind || (CodeActionKind = {}));
  var CodeActionTriggerKind;
  (function(CodeActionTriggerKind2) {
    CodeActionTriggerKind2.Invoked = 1;
    CodeActionTriggerKind2.Automatic = 2;
  })(CodeActionTriggerKind || (CodeActionTriggerKind = {}));
  var CodeActionContext;
  (function(CodeActionContext2) {
    function create(diagnostics, only, triggerKind) {
      let result = { diagnostics };
      if (only !== void 0 && only !== null) {
        result.only = only;
      }
      if (triggerKind !== void 0 && triggerKind !== null) {
        result.triggerKind = triggerKind;
      }
      return result;
    }
    CodeActionContext2.create = create;
    function is(value) {
      let candidate = value;
      return Is.defined(candidate) && Is.typedArray(candidate.diagnostics, Diagnostic.is) && (candidate.only === void 0 || Is.typedArray(candidate.only, Is.string)) && (candidate.triggerKind === void 0 || candidate.triggerKind === CodeActionTriggerKind.Invoked || candidate.triggerKind === CodeActionTriggerKind.Automatic);
    }
    CodeActionContext2.is = is;
  })(CodeActionContext || (CodeActionContext = {}));
  var CodeAction;
  (function(CodeAction2) {
    function create(title, kindOrCommandOrEdit, kind) {
      let result = { title };
      let checkKind = true;
      if (typeof kindOrCommandOrEdit === "string") {
        checkKind = false;
        result.kind = kindOrCommandOrEdit;
      } else if (Command2.is(kindOrCommandOrEdit)) {
        result.command = kindOrCommandOrEdit;
      } else {
        result.edit = kindOrCommandOrEdit;
      }
      if (checkKind && kind !== void 0) {
        result.kind = kind;
      }
      return result;
    }
    CodeAction2.create = create;
    function is(value) {
      let candidate = value;
      return candidate && Is.string(candidate.title) && (candidate.diagnostics === void 0 || Is.typedArray(candidate.diagnostics, Diagnostic.is)) && (candidate.kind === void 0 || Is.string(candidate.kind)) && (candidate.edit !== void 0 || candidate.command !== void 0) && (candidate.command === void 0 || Command2.is(candidate.command)) && (candidate.isPreferred === void 0 || Is.boolean(candidate.isPreferred)) && (candidate.edit === void 0 || WorkspaceEdit.is(candidate.edit));
    }
    CodeAction2.is = is;
  })(CodeAction || (CodeAction = {}));
  var CodeLens;
  (function(CodeLens2) {
    function create(range, data) {
      let result = { range };
      if (Is.defined(data)) {
        result.data = data;
      }
      return result;
    }
    CodeLens2.create = create;
    function is(value) {
      let candidate = value;
      return Is.defined(candidate) && Range2.is(candidate.range) && (Is.undefined(candidate.command) || Command2.is(candidate.command));
    }
    CodeLens2.is = is;
  })(CodeLens || (CodeLens = {}));
  var FormattingOptions;
  (function(FormattingOptions2) {
    function create(tabSize, insertSpaces) {
      return { tabSize, insertSpaces };
    }
    FormattingOptions2.create = create;
    function is(value) {
      let candidate = value;
      return Is.defined(candidate) && Is.uinteger(candidate.tabSize) && Is.boolean(candidate.insertSpaces);
    }
    FormattingOptions2.is = is;
  })(FormattingOptions || (FormattingOptions = {}));
  var DocumentLink;
  (function(DocumentLink2) {
    function create(range, target, data) {
      return { range, target, data };
    }
    DocumentLink2.create = create;
    function is(value) {
      let candidate = value;
      return Is.defined(candidate) && Range2.is(candidate.range) && (Is.undefined(candidate.target) || Is.string(candidate.target));
    }
    DocumentLink2.is = is;
  })(DocumentLink || (DocumentLink = {}));
  var SelectionRange;
  (function(SelectionRange2) {
    function create(range, parent) {
      return { range, parent };
    }
    SelectionRange2.create = create;
    function is(value) {
      let candidate = value;
      return Is.objectLiteral(candidate) && Range2.is(candidate.range) && (candidate.parent === void 0 || SelectionRange2.is(candidate.parent));
    }
    SelectionRange2.is = is;
  })(SelectionRange || (SelectionRange = {}));
  var SemanticTokenTypes;
  (function(SemanticTokenTypes2) {
    SemanticTokenTypes2["namespace"] = "namespace";
    SemanticTokenTypes2["type"] = "type";
    SemanticTokenTypes2["class"] = "class";
    SemanticTokenTypes2["enum"] = "enum";
    SemanticTokenTypes2["interface"] = "interface";
    SemanticTokenTypes2["struct"] = "struct";
    SemanticTokenTypes2["typeParameter"] = "typeParameter";
    SemanticTokenTypes2["parameter"] = "parameter";
    SemanticTokenTypes2["variable"] = "variable";
    SemanticTokenTypes2["property"] = "property";
    SemanticTokenTypes2["enumMember"] = "enumMember";
    SemanticTokenTypes2["event"] = "event";
    SemanticTokenTypes2["function"] = "function";
    SemanticTokenTypes2["method"] = "method";
    SemanticTokenTypes2["macro"] = "macro";
    SemanticTokenTypes2["keyword"] = "keyword";
    SemanticTokenTypes2["modifier"] = "modifier";
    SemanticTokenTypes2["comment"] = "comment";
    SemanticTokenTypes2["string"] = "string";
    SemanticTokenTypes2["number"] = "number";
    SemanticTokenTypes2["regexp"] = "regexp";
    SemanticTokenTypes2["operator"] = "operator";
    SemanticTokenTypes2["decorator"] = "decorator";
  })(SemanticTokenTypes || (SemanticTokenTypes = {}));
  var SemanticTokenModifiers;
  (function(SemanticTokenModifiers2) {
    SemanticTokenModifiers2["declaration"] = "declaration";
    SemanticTokenModifiers2["definition"] = "definition";
    SemanticTokenModifiers2["readonly"] = "readonly";
    SemanticTokenModifiers2["static"] = "static";
    SemanticTokenModifiers2["deprecated"] = "deprecated";
    SemanticTokenModifiers2["abstract"] = "abstract";
    SemanticTokenModifiers2["async"] = "async";
    SemanticTokenModifiers2["modification"] = "modification";
    SemanticTokenModifiers2["documentation"] = "documentation";
    SemanticTokenModifiers2["defaultLibrary"] = "defaultLibrary";
  })(SemanticTokenModifiers || (SemanticTokenModifiers = {}));
  var SemanticTokens;
  (function(SemanticTokens2) {
    function is(value) {
      const candidate = value;
      return Is.objectLiteral(candidate) && (candidate.resultId === void 0 || typeof candidate.resultId === "string") && Array.isArray(candidate.data) && (candidate.data.length === 0 || typeof candidate.data[0] === "number");
    }
    SemanticTokens2.is = is;
  })(SemanticTokens || (SemanticTokens = {}));
  var InlineValueText;
  (function(InlineValueText2) {
    function create(range, text) {
      return { range, text };
    }
    InlineValueText2.create = create;
    function is(value) {
      const candidate = value;
      return candidate !== void 0 && candidate !== null && Range2.is(candidate.range) && Is.string(candidate.text);
    }
    InlineValueText2.is = is;
  })(InlineValueText || (InlineValueText = {}));
  var InlineValueVariableLookup;
  (function(InlineValueVariableLookup2) {
    function create(range, variableName, caseSensitiveLookup) {
      return { range, variableName, caseSensitiveLookup };
    }
    InlineValueVariableLookup2.create = create;
    function is(value) {
      const candidate = value;
      return candidate !== void 0 && candidate !== null && Range2.is(candidate.range) && Is.boolean(candidate.caseSensitiveLookup) && (Is.string(candidate.variableName) || candidate.variableName === void 0);
    }
    InlineValueVariableLookup2.is = is;
  })(InlineValueVariableLookup || (InlineValueVariableLookup = {}));
  var InlineValueEvaluatableExpression;
  (function(InlineValueEvaluatableExpression2) {
    function create(range, expression) {
      return { range, expression };
    }
    InlineValueEvaluatableExpression2.create = create;
    function is(value) {
      const candidate = value;
      return candidate !== void 0 && candidate !== null && Range2.is(candidate.range) && (Is.string(candidate.expression) || candidate.expression === void 0);
    }
    InlineValueEvaluatableExpression2.is = is;
  })(InlineValueEvaluatableExpression || (InlineValueEvaluatableExpression = {}));
  var InlineValueContext;
  (function(InlineValueContext2) {
    function create(frameId, stoppedLocation) {
      return { frameId, stoppedLocation };
    }
    InlineValueContext2.create = create;
    function is(value) {
      const candidate = value;
      return Is.defined(candidate) && Range2.is(value.stoppedLocation);
    }
    InlineValueContext2.is = is;
  })(InlineValueContext || (InlineValueContext = {}));
  var InlayHintKind3;
  (function(InlayHintKind22) {
    InlayHintKind22.Type = 1;
    InlayHintKind22.Parameter = 2;
    function is(value) {
      return value === 1 || value === 2;
    }
    InlayHintKind22.is = is;
  })(InlayHintKind3 || (InlayHintKind3 = {}));
  var InlayHintLabelPart;
  (function(InlayHintLabelPart2) {
    function create(value) {
      return { value };
    }
    InlayHintLabelPart2.create = create;
    function is(value) {
      const candidate = value;
      return Is.objectLiteral(candidate) && (candidate.tooltip === void 0 || Is.string(candidate.tooltip) || MarkupContent.is(candidate.tooltip)) && (candidate.location === void 0 || Location.is(candidate.location)) && (candidate.command === void 0 || Command2.is(candidate.command));
    }
    InlayHintLabelPart2.is = is;
  })(InlayHintLabelPart || (InlayHintLabelPart = {}));
  var InlayHint;
  (function(InlayHint2) {
    function create(position, label, kind) {
      const result = { position, label };
      if (kind !== void 0) {
        result.kind = kind;
      }
      return result;
    }
    InlayHint2.create = create;
    function is(value) {
      const candidate = value;
      return Is.objectLiteral(candidate) && Position2.is(candidate.position) && (Is.string(candidate.label) || Is.typedArray(candidate.label, InlayHintLabelPart.is)) && (candidate.kind === void 0 || InlayHintKind3.is(candidate.kind)) && candidate.textEdits === void 0 || Is.typedArray(candidate.textEdits, TextEdit.is) && (candidate.tooltip === void 0 || Is.string(candidate.tooltip) || MarkupContent.is(candidate.tooltip)) && (candidate.paddingLeft === void 0 || Is.boolean(candidate.paddingLeft)) && (candidate.paddingRight === void 0 || Is.boolean(candidate.paddingRight));
    }
    InlayHint2.is = is;
  })(InlayHint || (InlayHint = {}));
  var StringValue;
  (function(StringValue2) {
    function createSnippet(value) {
      return { kind: "snippet", value };
    }
    StringValue2.createSnippet = createSnippet;
  })(StringValue || (StringValue = {}));
  var InlineCompletionItem;
  (function(InlineCompletionItem2) {
    function create(insertText, filterText, range, command) {
      return { insertText, filterText, range, command };
    }
    InlineCompletionItem2.create = create;
  })(InlineCompletionItem || (InlineCompletionItem = {}));
  var InlineCompletionList;
  (function(InlineCompletionList2) {
    function create(items) {
      return { items };
    }
    InlineCompletionList2.create = create;
  })(InlineCompletionList || (InlineCompletionList = {}));
  var InlineCompletionTriggerKind3;
  (function(InlineCompletionTriggerKind22) {
    InlineCompletionTriggerKind22.Invoked = 0;
    InlineCompletionTriggerKind22.Automatic = 1;
  })(InlineCompletionTriggerKind3 || (InlineCompletionTriggerKind3 = {}));
  var SelectedCompletionInfo;
  (function(SelectedCompletionInfo2) {
    function create(range, text) {
      return { range, text };
    }
    SelectedCompletionInfo2.create = create;
  })(SelectedCompletionInfo || (SelectedCompletionInfo = {}));
  var InlineCompletionContext;
  (function(InlineCompletionContext2) {
    function create(triggerKind, selectedCompletionInfo) {
      return { triggerKind, selectedCompletionInfo };
    }
    InlineCompletionContext2.create = create;
  })(InlineCompletionContext || (InlineCompletionContext = {}));
  var WorkspaceFolder;
  (function(WorkspaceFolder2) {
    function is(value) {
      const candidate = value;
      return Is.objectLiteral(candidate) && URI2.is(candidate.uri) && Is.string(candidate.name);
    }
    WorkspaceFolder2.is = is;
  })(WorkspaceFolder || (WorkspaceFolder = {}));
  var TextDocument;
  (function(TextDocument3) {
    function create(uri, languageId, version, content) {
      return new FullTextDocument(uri, languageId, version, content);
    }
    TextDocument3.create = create;
    function is(value) {
      let candidate = value;
      return Is.defined(candidate) && Is.string(candidate.uri) && (Is.undefined(candidate.languageId) || Is.string(candidate.languageId)) && Is.uinteger(candidate.lineCount) && Is.func(candidate.getText) && Is.func(candidate.positionAt) && Is.func(candidate.offsetAt) ? true : false;
    }
    TextDocument3.is = is;
    function applyEdits(document2, edits) {
      let text = document2.getText();
      let sortedEdits = mergeSort2(edits, (a2, b) => {
        let diff = a2.range.start.line - b.range.start.line;
        if (diff === 0) {
          return a2.range.start.character - b.range.start.character;
        }
        return diff;
      });
      let lastModifiedOffset = text.length;
      for (let i = sortedEdits.length - 1; i >= 0; i--) {
        let e = sortedEdits[i];
        let startOffset = document2.offsetAt(e.range.start);
        let endOffset = document2.offsetAt(e.range.end);
        if (endOffset <= lastModifiedOffset) {
          text = text.substring(0, startOffset) + e.newText + text.substring(endOffset, text.length);
        } else {
          throw new Error("Overlapping edit");
        }
        lastModifiedOffset = startOffset;
      }
      return text;
    }
    TextDocument3.applyEdits = applyEdits;
    function mergeSort2(data, compare) {
      if (data.length <= 1) {
        return data;
      }
      const p = data.length / 2 | 0;
      const left = data.slice(0, p);
      const right = data.slice(p);
      mergeSort2(left, compare);
      mergeSort2(right, compare);
      let leftIdx = 0;
      let rightIdx = 0;
      let i = 0;
      while (leftIdx < left.length && rightIdx < right.length) {
        let ret = compare(left[leftIdx], right[rightIdx]);
        if (ret <= 0) {
          data[i++] = left[leftIdx++];
        } else {
          data[i++] = right[rightIdx++];
        }
      }
      while (leftIdx < left.length) {
        data[i++] = left[leftIdx++];
      }
      while (rightIdx < right.length) {
        data[i++] = right[rightIdx++];
      }
      return data;
    }
  })(TextDocument || (TextDocument = {}));
  var FullTextDocument = class {
    constructor(uri, languageId, version, content) {
      this._uri = uri;
      this._languageId = languageId;
      this._version = version;
      this._content = content;
      this._lineOffsets = void 0;
    }
    get uri() {
      return this._uri;
    }
    get languageId() {
      return this._languageId;
    }
    get version() {
      return this._version;
    }
    getText(range) {
      if (range) {
        let start = this.offsetAt(range.start);
        let end = this.offsetAt(range.end);
        return this._content.substring(start, end);
      }
      return this._content;
    }
    update(event, version) {
      this._content = event.text;
      this._version = version;
      this._lineOffsets = void 0;
    }
    getLineOffsets() {
      if (this._lineOffsets === void 0) {
        let lineOffsets = [];
        let text = this._content;
        let isLineStart = true;
        for (let i = 0; i < text.length; i++) {
          if (isLineStart) {
            lineOffsets.push(i);
            isLineStart = false;
          }
          let ch = text.charAt(i);
          isLineStart = ch === "\r" || ch === "\n";
          if (ch === "\r" && i + 1 < text.length && text.charAt(i + 1) === "\n") {
            i++;
          }
        }
        if (isLineStart && text.length > 0) {
          lineOffsets.push(text.length);
        }
        this._lineOffsets = lineOffsets;
      }
      return this._lineOffsets;
    }
    positionAt(offset) {
      offset = Math.max(Math.min(offset, this._content.length), 0);
      let lineOffsets = this.getLineOffsets();
      let low = 0, high = lineOffsets.length;
      if (high === 0) {
        return Position2.create(0, offset);
      }
      while (low < high) {
        let mid = Math.floor((low + high) / 2);
        if (lineOffsets[mid] > offset) {
          high = mid;
        } else {
          low = mid + 1;
        }
      }
      let line = low - 1;
      return Position2.create(line, offset - lineOffsets[line]);
    }
    offsetAt(position) {
      let lineOffsets = this.getLineOffsets();
      if (position.line >= lineOffsets.length) {
        return this._content.length;
      } else if (position.line < 0) {
        return 0;
      }
      let lineOffset = lineOffsets[position.line];
      let nextLineOffset = position.line + 1 < lineOffsets.length ? lineOffsets[position.line + 1] : this._content.length;
      return Math.max(Math.min(lineOffset + position.character, nextLineOffset), lineOffset);
    }
    get lineCount() {
      return this.getLineOffsets().length;
    }
  };
  var Is;
  (function(Is2) {
    const toString = Object.prototype.toString;
    function defined(value) {
      return typeof value !== "undefined";
    }
    Is2.defined = defined;
    function undefined2(value) {
      return typeof value === "undefined";
    }
    Is2.undefined = undefined2;
    function boolean(value) {
      return value === true || value === false;
    }
    Is2.boolean = boolean;
    function string(value) {
      return toString.call(value) === "[object String]";
    }
    Is2.string = string;
    function number(value) {
      return toString.call(value) === "[object Number]";
    }
    Is2.number = number;
    function numberRange(value, min, max) {
      return toString.call(value) === "[object Number]" && min <= value && value <= max;
    }
    Is2.numberRange = numberRange;
    function integer2(value) {
      return toString.call(value) === "[object Number]" && -2147483648 <= value && value <= 2147483647;
    }
    Is2.integer = integer2;
    function uinteger2(value) {
      return toString.call(value) === "[object Number]" && 0 <= value && value <= 2147483647;
    }
    Is2.uinteger = uinteger2;
    function func(value) {
      return toString.call(value) === "[object Function]";
    }
    Is2.func = func;
    function objectLiteral(value) {
      return value !== null && typeof value === "object";
    }
    Is2.objectLiteral = objectLiteral;
    function typedArray(value, check) {
      return Array.isArray(value) && value.every(check);
    }
    Is2.typedArray = typedArray;
  })(Is || (Is = {}));
  var FullTextDocument2 = class _FullTextDocument {
    constructor(uri, languageId, version, content) {
      this._uri = uri;
      this._languageId = languageId;
      this._version = version;
      this._content = content;
      this._lineOffsets = void 0;
    }
    get uri() {
      return this._uri;
    }
    get languageId() {
      return this._languageId;
    }
    get version() {
      return this._version;
    }
    getText(range) {
      if (range) {
        const start = this.offsetAt(range.start);
        const end = this.offsetAt(range.end);
        return this._content.substring(start, end);
      }
      return this._content;
    }
    update(changes, version) {
      for (let change of changes) {
        if (_FullTextDocument.isIncremental(change)) {
          const range = getWellformedRange(change.range);
          const startOffset = this.offsetAt(range.start);
          const endOffset = this.offsetAt(range.end);
          this._content = this._content.substring(0, startOffset) + change.text + this._content.substring(endOffset, this._content.length);
          const startLine = Math.max(range.start.line, 0);
          const endLine = Math.max(range.end.line, 0);
          let lineOffsets = this._lineOffsets;
          const addedLineOffsets = computeLineOffsets(change.text, false, startOffset);
          if (endLine - startLine === addedLineOffsets.length) {
            for (let i = 0, len = addedLineOffsets.length; i < len; i++) {
              lineOffsets[i + startLine + 1] = addedLineOffsets[i];
            }
          } else {
            if (addedLineOffsets.length < 1e4) {
              lineOffsets.splice(startLine + 1, endLine - startLine, ...addedLineOffsets);
            } else {
              this._lineOffsets = lineOffsets = lineOffsets.slice(0, startLine + 1).concat(addedLineOffsets, lineOffsets.slice(endLine + 1));
            }
          }
          const diff = change.text.length - (endOffset - startOffset);
          if (diff !== 0) {
            for (let i = startLine + 1 + addedLineOffsets.length, len = lineOffsets.length; i < len; i++) {
              lineOffsets[i] = lineOffsets[i] + diff;
            }
          }
        } else if (_FullTextDocument.isFull(change)) {
          this._content = change.text;
          this._lineOffsets = void 0;
        } else {
          throw new Error("Unknown change event received");
        }
      }
      this._version = version;
    }
    getLineOffsets() {
      if (this._lineOffsets === void 0) {
        this._lineOffsets = computeLineOffsets(this._content, true);
      }
      return this._lineOffsets;
    }
    positionAt(offset) {
      offset = Math.max(Math.min(offset, this._content.length), 0);
      let lineOffsets = this.getLineOffsets();
      let low = 0, high = lineOffsets.length;
      if (high === 0) {
        return { line: 0, character: offset };
      }
      while (low < high) {
        let mid = Math.floor((low + high) / 2);
        if (lineOffsets[mid] > offset) {
          high = mid;
        } else {
          low = mid + 1;
        }
      }
      let line = low - 1;
      return { line, character: offset - lineOffsets[line] };
    }
    offsetAt(position) {
      let lineOffsets = this.getLineOffsets();
      if (position.line >= lineOffsets.length) {
        return this._content.length;
      } else if (position.line < 0) {
        return 0;
      }
      let lineOffset = lineOffsets[position.line];
      let nextLineOffset = position.line + 1 < lineOffsets.length ? lineOffsets[position.line + 1] : this._content.length;
      return Math.max(Math.min(lineOffset + position.character, nextLineOffset), lineOffset);
    }
    get lineCount() {
      return this.getLineOffsets().length;
    }
    static isIncremental(event) {
      let candidate = event;
      return candidate !== void 0 && candidate !== null && typeof candidate.text === "string" && candidate.range !== void 0 && (candidate.rangeLength === void 0 || typeof candidate.rangeLength === "number");
    }
    static isFull(event) {
      let candidate = event;
      return candidate !== void 0 && candidate !== null && typeof candidate.text === "string" && candidate.range === void 0 && candidate.rangeLength === void 0;
    }
  };
  var TextDocument2;
  (function(TextDocument3) {
    function create(uri, languageId, version, content) {
      return new FullTextDocument2(uri, languageId, version, content);
    }
    TextDocument3.create = create;
    function update(document2, changes, version) {
      if (document2 instanceof FullTextDocument2) {
        document2.update(changes, version);
        return document2;
      } else {
        throw new Error("TextDocument.update: document must be created by TextDocument.create");
      }
    }
    TextDocument3.update = update;
    function applyEdits(document2, edits) {
      let text = document2.getText();
      let sortedEdits = mergeSort(edits.map(getWellformedEdit), (a2, b) => {
        let diff = a2.range.start.line - b.range.start.line;
        if (diff === 0) {
          return a2.range.start.character - b.range.start.character;
        }
        return diff;
      });
      let lastModifiedOffset = 0;
      const spans = [];
      for (const e of sortedEdits) {
        let startOffset = document2.offsetAt(e.range.start);
        if (startOffset < lastModifiedOffset) {
          throw new Error("Overlapping edit");
        } else if (startOffset > lastModifiedOffset) {
          spans.push(text.substring(lastModifiedOffset, startOffset));
        }
        if (e.newText.length) {
          spans.push(e.newText);
        }
        lastModifiedOffset = document2.offsetAt(e.range.end);
      }
      spans.push(text.substr(lastModifiedOffset));
      return spans.join("");
    }
    TextDocument3.applyEdits = applyEdits;
  })(TextDocument2 || (TextDocument2 = {}));
  function mergeSort(data, compare) {
    if (data.length <= 1) {
      return data;
    }
    const p = data.length / 2 | 0;
    const left = data.slice(0, p);
    const right = data.slice(p);
    mergeSort(left, compare);
    mergeSort(right, compare);
    let leftIdx = 0;
    let rightIdx = 0;
    let i = 0;
    while (leftIdx < left.length && rightIdx < right.length) {
      let ret = compare(left[leftIdx], right[rightIdx]);
      if (ret <= 0) {
        data[i++] = left[leftIdx++];
      } else {
        data[i++] = right[rightIdx++];
      }
    }
    while (leftIdx < left.length) {
      data[i++] = left[leftIdx++];
    }
    while (rightIdx < right.length) {
      data[i++] = right[rightIdx++];
    }
    return data;
  }
  function computeLineOffsets(text, isAtLineStart, textOffset = 0) {
    const result = isAtLineStart ? [textOffset] : [];
    for (let i = 0; i < text.length; i++) {
      let ch = text.charCodeAt(i);
      if (ch === 13 || ch === 10) {
        if (ch === 13 && i + 1 < text.length && text.charCodeAt(i + 1) === 10) {
          i++;
        }
        result.push(textOffset + i + 1);
      }
    }
    return result;
  }
  function getWellformedRange(range) {
    const start = range.start;
    const end = range.end;
    if (start.line > end.line || start.line === end.line && start.character > end.character) {
      return { start: end, end: start };
    }
    return range;
  }
  function getWellformedEdit(textEdit) {
    const range = getWellformedRange(textEdit.range);
    if (range !== textEdit.range) {
      return { newText: textEdit.newText, range };
    }
    return textEdit;
  }
  var ErrorCode;
  (function(ErrorCode2) {
    ErrorCode2[ErrorCode2["Undefined"] = 0] = "Undefined";
    ErrorCode2[ErrorCode2["EnumValueMismatch"] = 1] = "EnumValueMismatch";
    ErrorCode2[ErrorCode2["Deprecated"] = 2] = "Deprecated";
    ErrorCode2[ErrorCode2["UnexpectedEndOfComment"] = 257] = "UnexpectedEndOfComment";
    ErrorCode2[ErrorCode2["UnexpectedEndOfString"] = 258] = "UnexpectedEndOfString";
    ErrorCode2[ErrorCode2["UnexpectedEndOfNumber"] = 259] = "UnexpectedEndOfNumber";
    ErrorCode2[ErrorCode2["InvalidUnicode"] = 260] = "InvalidUnicode";
    ErrorCode2[ErrorCode2["InvalidEscapeCharacter"] = 261] = "InvalidEscapeCharacter";
    ErrorCode2[ErrorCode2["InvalidCharacter"] = 262] = "InvalidCharacter";
    ErrorCode2[ErrorCode2["PropertyExpected"] = 513] = "PropertyExpected";
    ErrorCode2[ErrorCode2["CommaExpected"] = 514] = "CommaExpected";
    ErrorCode2[ErrorCode2["ColonExpected"] = 515] = "ColonExpected";
    ErrorCode2[ErrorCode2["ValueExpected"] = 516] = "ValueExpected";
    ErrorCode2[ErrorCode2["CommaOrCloseBacketExpected"] = 517] = "CommaOrCloseBacketExpected";
    ErrorCode2[ErrorCode2["CommaOrCloseBraceExpected"] = 518] = "CommaOrCloseBraceExpected";
    ErrorCode2[ErrorCode2["TrailingComma"] = 519] = "TrailingComma";
    ErrorCode2[ErrorCode2["DuplicateKey"] = 520] = "DuplicateKey";
    ErrorCode2[ErrorCode2["CommentNotPermitted"] = 521] = "CommentNotPermitted";
    ErrorCode2[ErrorCode2["PropertyKeysMustBeDoublequoted"] = 528] = "PropertyKeysMustBeDoublequoted";
    ErrorCode2[ErrorCode2["SchemaResolveError"] = 768] = "SchemaResolveError";
    ErrorCode2[ErrorCode2["SchemaUnsupportedFeature"] = 769] = "SchemaUnsupportedFeature";
  })(ErrorCode || (ErrorCode = {}));
  var SchemaDraft;
  (function(SchemaDraft2) {
    SchemaDraft2[SchemaDraft2["v3"] = 3] = "v3";
    SchemaDraft2[SchemaDraft2["v4"] = 4] = "v4";
    SchemaDraft2[SchemaDraft2["v6"] = 6] = "v6";
    SchemaDraft2[SchemaDraft2["v7"] = 7] = "v7";
    SchemaDraft2[SchemaDraft2["v2019_09"] = 19] = "v2019_09";
    SchemaDraft2[SchemaDraft2["v2020_12"] = 20] = "v2020_12";
  })(SchemaDraft || (SchemaDraft = {}));
  var ClientCapabilities;
  (function(ClientCapabilities2) {
    ClientCapabilities2.LATEST = {
      textDocument: {
        completion: {
          completionItem: {
            documentationFormat: [MarkupKind.Markdown, MarkupKind.PlainText],
            commitCharactersSupport: true,
            labelDetailsSupport: true
          }
        }
      }
    };
  })(ClientCapabilities || (ClientCapabilities = {}));
  var bundle;
  function t(...args) {
    const firstArg = args[0];
    let key;
    let message;
    let formatArgs;
    if (typeof firstArg === "string") {
      key = firstArg;
      message = firstArg;
      args.splice(0, 1);
      formatArgs = !args || typeof args[0] !== "object" ? args : args[0];
    } else if (firstArg instanceof Array) {
      const replacements = args.slice(1);
      if (firstArg.length !== replacements.length + 1) {
        throw new Error("expected a string as the first argument to l10n.t");
      }
      let str = firstArg[0];
      for (let i = 1; i < firstArg.length; i++) {
        str += `{${i - 1}}` + firstArg[i];
      }
      return t(str, ...replacements);
    } else {
      message = firstArg.message;
      key = message;
      if (firstArg.comment && firstArg.comment.length > 0) {
        key += `/${Array.isArray(firstArg.comment) ? firstArg.comment.join("") : firstArg.comment}`;
      }
      formatArgs = firstArg.args ?? {};
    }
    const messageFromBundle = bundle?.[key];
    if (!messageFromBundle) {
      return format3(message, formatArgs);
    }
    if (typeof messageFromBundle === "string") {
      return format3(messageFromBundle, formatArgs);
    }
    if (messageFromBundle.comment) {
      return format3(messageFromBundle.message, formatArgs);
    }
    return format3(message, formatArgs);
  }
  var _format2Regexp = /{([^}]+)}/g;
  function format3(template, values) {
    if (Object.keys(values).length === 0) {
      return template;
    }
    return template.replace(_format2Regexp, (match, group) => values[group] ?? match);
  }
  var formats = {
    "color-hex": { errorMessage: t("Invalid color format. Use #RGB, #RGBA, #RRGGBB or #RRGGBBAA."), pattern: /^#([0-9A-Fa-f]{3,4}|([0-9A-Fa-f]{2}){3,4})$/ },
    "date-time": { errorMessage: t("String is not a RFC3339 date-time."), pattern: /^(\d{4})-(0[1-9]|1[0-2])-(0[1-9]|[12][0-9]|3[01])T([01][0-9]|2[0-3]):([0-5][0-9]):([0-5][0-9]|60)(\.[0-9]+)?(Z|(\+|-)([01][0-9]|2[0-3]):([0-5][0-9]))$/i },
    "date": { errorMessage: t("String is not a RFC3339 date."), pattern: /^(\d{4})-(0[1-9]|1[0-2])-(0[1-9]|[12][0-9]|3[01])$/i },
    "time": { errorMessage: t("String is not a RFC3339 time."), pattern: /^([01][0-9]|2[0-3]):([0-5][0-9]):([0-5][0-9]|60)(\.[0-9]+)?(Z|(\+|-)([01][0-9]|2[0-3]):([0-5][0-9]))$/i },
    "email": { errorMessage: t("String is not an e-mail address."), pattern: /^(([^<>()\[\]\\.,;:\s@"]+(\.[^<>()\[\]\\.,;:\s@"]+)*)|(".+"))@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}])|(([a-zA-Z0-9-]+\.)+[a-zA-Z]{2,}))$/ },
    "hostname": { errorMessage: t("String is not a hostname."), pattern: /^(?=.{1,253}\.?$)[a-z0-9](?:[a-z0-9-]{0,61}[a-z0-9])?(?:\.[a-z0-9](?:[-0-9a-z]{0,61}[0-9a-z])?)*\.?$/i },
    "ipv4": { errorMessage: t("String is not an IPv4 address."), pattern: /^(?:(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)\.){3}(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)$/ },
    "ipv6": { errorMessage: t("String is not an IPv6 address."), pattern: /^((([0-9a-f]{1,4}:){7}([0-9a-f]{1,4}|:))|(([0-9a-f]{1,4}:){6}(:[0-9a-f]{1,4}|((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3})|:))|(([0-9a-f]{1,4}:){5}(((:[0-9a-f]{1,4}){1,2})|:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3})|:))|(([0-9a-f]{1,4}:){4}(((:[0-9a-f]{1,4}){1,3})|((:[0-9a-f]{1,4})?:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:))|(([0-9a-f]{1,4}:){3}(((:[0-9a-f]{1,4}){1,4})|((:[0-9a-f]{1,4}){0,2}:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:))|(([0-9a-f]{1,4}:){2}(((:[0-9a-f]{1,4}){1,5})|((:[0-9a-f]{1,4}){0,3}:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:))|(([0-9a-f]{1,4}:){1}(((:[0-9a-f]{1,4}){1,6})|((:[0-9a-f]{1,4}){0,4}:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:))|(:(((:[0-9a-f]{1,4}){1,7})|((:[0-9a-f]{1,4}){0,5}:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:)))$/i }
  };
  var ASTNodeImpl = class {
    constructor(parent, offset, length = 0) {
      this.offset = offset;
      this.length = length;
      this.parent = parent;
    }
    get children() {
      return [];
    }
    toString() {
      return "type: " + this.type + " (" + this.offset + "/" + this.length + ")" + (this.parent ? " parent: {" + this.parent.toString() + "}" : "");
    }
  };
  var NullASTNodeImpl = class extends ASTNodeImpl {
    constructor(parent, offset) {
      super(parent, offset);
      this.type = "null";
      this.value = null;
    }
  };
  var BooleanASTNodeImpl = class extends ASTNodeImpl {
    constructor(parent, boolValue, offset) {
      super(parent, offset);
      this.type = "boolean";
      this.value = boolValue;
    }
  };
  var ArrayASTNodeImpl = class extends ASTNodeImpl {
    constructor(parent, offset) {
      super(parent, offset);
      this.type = "array";
      this.items = [];
    }
    get children() {
      return this.items;
    }
  };
  var NumberASTNodeImpl = class extends ASTNodeImpl {
    constructor(parent, offset) {
      super(parent, offset);
      this.type = "number";
      this.isInteger = true;
      this.value = Number.NaN;
    }
  };
  var StringASTNodeImpl = class extends ASTNodeImpl {
    constructor(parent, offset, length) {
      super(parent, offset, length);
      this.type = "string";
      this.value = "";
    }
  };
  var PropertyASTNodeImpl = class extends ASTNodeImpl {
    constructor(parent, offset, keyNode) {
      super(parent, offset);
      this.type = "property";
      this.colonOffset = -1;
      this.keyNode = keyNode;
    }
    get children() {
      return this.valueNode ? [this.keyNode, this.valueNode] : [this.keyNode];
    }
  };
  var ObjectASTNodeImpl = class extends ASTNodeImpl {
    constructor(parent, offset) {
      super(parent, offset);
      this.type = "object";
      this.properties = [];
    }
    get children() {
      return this.properties;
    }
  };
  function asSchema(schema) {
    if (isBoolean(schema)) {
      return schema ? {} : { "not": {} };
    }
    return schema;
  }
  var EnumMatch;
  (function(EnumMatch2) {
    EnumMatch2[EnumMatch2["Key"] = 0] = "Key";
    EnumMatch2[EnumMatch2["Enum"] = 1] = "Enum";
  })(EnumMatch || (EnumMatch = {}));
  var schemaDraftFromId = {
    "http://json-schema.org/draft-03/schema#": SchemaDraft.v3,
    "http://json-schema.org/draft-04/schema#": SchemaDraft.v4,
    "http://json-schema.org/draft-06/schema#": SchemaDraft.v6,
    "http://json-schema.org/draft-07/schema#": SchemaDraft.v7,
    "https://json-schema.org/draft/2019-09/schema": SchemaDraft.v2019_09,
    "https://json-schema.org/draft/2020-12/schema": SchemaDraft.v2020_12
  };
  var EvaluationContext = class {
    constructor(schemaDraft) {
      this.schemaDraft = schemaDraft;
    }
  };
  var SchemaCollector = class _SchemaCollector {
    constructor(focusOffset = -1, exclude) {
      this.focusOffset = focusOffset;
      this.exclude = exclude;
      this.schemas = [];
    }
    add(schema) {
      this.schemas.push(schema);
    }
    merge(other) {
      Array.prototype.push.apply(this.schemas, other.schemas);
    }
    include(node) {
      return (this.focusOffset === -1 || contains2(node, this.focusOffset)) && node !== this.exclude;
    }
    newSub() {
      return new _SchemaCollector(-1, this.exclude);
    }
  };
  var NoOpSchemaCollector = class {
    constructor() {
    }
    get schemas() {
      return [];
    }
    add(_schema) {
    }
    merge(_other) {
    }
    include(_node) {
      return true;
    }
    newSub() {
      return this;
    }
  };
  NoOpSchemaCollector.instance = new NoOpSchemaCollector();
  var ValidationResult = class {
    constructor() {
      this.problems = [];
      this.propertiesMatches = 0;
      this.processedProperties = /* @__PURE__ */ new Set();
      this.propertiesValueMatches = 0;
      this.primaryValueMatches = 0;
      this.enumValueMatch = false;
      this.enumValues = void 0;
    }
    hasProblems() {
      return !!this.problems.length;
    }
    merge(validationResult) {
      this.problems = this.problems.concat(validationResult.problems);
      this.propertiesMatches += validationResult.propertiesMatches;
      this.propertiesValueMatches += validationResult.propertiesValueMatches;
      this.mergeProcessedProperties(validationResult);
    }
    mergeEnumValues(validationResult) {
      if (!this.enumValueMatch && !validationResult.enumValueMatch && this.enumValues && validationResult.enumValues) {
        this.enumValues = this.enumValues.concat(validationResult.enumValues);
        for (const error of this.problems) {
          if (error.code === ErrorCode.EnumValueMismatch) {
            error.message = t("Value is not accepted. Valid values: {0}.", this.enumValues.map((v) => JSON.stringify(v)).join(", "));
          }
        }
      }
    }
    mergePropertyMatch(propertyValidationResult) {
      this.problems = this.problems.concat(propertyValidationResult.problems);
      this.propertiesMatches++;
      if (propertyValidationResult.enumValueMatch || !propertyValidationResult.hasProblems() && propertyValidationResult.propertiesMatches) {
        this.propertiesValueMatches++;
      }
      if (propertyValidationResult.enumValueMatch && propertyValidationResult.enumValues && propertyValidationResult.enumValues.length === 1) {
        this.primaryValueMatches++;
      }
    }
    mergeProcessedProperties(validationResult) {
      validationResult.processedProperties.forEach((p) => this.processedProperties.add(p));
    }
    compare(other) {
      const hasProblems = this.hasProblems();
      if (hasProblems !== other.hasProblems()) {
        return hasProblems ? -1 : 1;
      }
      if (this.enumValueMatch !== other.enumValueMatch) {
        return other.enumValueMatch ? -1 : 1;
      }
      if (this.primaryValueMatches !== other.primaryValueMatches) {
        return this.primaryValueMatches - other.primaryValueMatches;
      }
      if (this.propertiesValueMatches !== other.propertiesValueMatches) {
        return this.propertiesValueMatches - other.propertiesValueMatches;
      }
      return this.propertiesMatches - other.propertiesMatches;
    }
  };
  function newJSONDocument(root, diagnostics = []) {
    return new JSONDocument(root, diagnostics, []);
  }
  function getNodeValue3(node) {
    return getNodeValue2(node);
  }
  function getNodePath3(node) {
    return getNodePath2(node);
  }
  function contains2(node, offset, includeRightBound = false) {
    return offset >= node.offset && offset < node.offset + node.length || includeRightBound && offset === node.offset + node.length;
  }
  var JSONDocument = class {
    constructor(root, syntaxErrors = [], comments = []) {
      this.root = root;
      this.syntaxErrors = syntaxErrors;
      this.comments = comments;
    }
    getNodeFromOffset(offset, includeRightBound = false) {
      if (this.root) {
        return findNodeAtOffset2(this.root, offset, includeRightBound);
      }
      return void 0;
    }
    visit(visitor) {
      if (this.root) {
        const doVisit = (node) => {
          let ctn = visitor(node);
          const children = node.children;
          if (Array.isArray(children)) {
            for (let i = 0; i < children.length && ctn; i++) {
              ctn = doVisit(children[i]);
            }
          }
          return ctn;
        };
        doVisit(this.root);
      }
    }
    validate(textDocument, schema, severity = DiagnosticSeverity.Warning, schemaDraft) {
      if (this.root && schema) {
        const validationResult = new ValidationResult();
        validate(this.root, schema, validationResult, NoOpSchemaCollector.instance, new EvaluationContext(schemaDraft ?? getSchemaDraft(schema)));
        return validationResult.problems.map((p) => {
          const range = Range2.create(textDocument.positionAt(p.location.offset), textDocument.positionAt(p.location.offset + p.location.length));
          return Diagnostic.create(range, p.message, p.severity ?? severity, p.code);
        });
      }
      return void 0;
    }
    getMatchingSchemas(schema, focusOffset = -1, exclude) {
      if (this.root && schema) {
        const matchingSchemas = new SchemaCollector(focusOffset, exclude);
        const schemaDraft = getSchemaDraft(schema);
        const context = new EvaluationContext(schemaDraft);
        validate(this.root, schema, new ValidationResult(), matchingSchemas, context);
        return matchingSchemas.schemas;
      }
      return [];
    }
  };
  function getSchemaDraft(schema, fallBack = SchemaDraft.v2020_12) {
    let schemaId = schema.$schema;
    if (schemaId) {
      return schemaDraftFromId[schemaId] ?? fallBack;
    }
    return fallBack;
  }
  function validate(n, schema, validationResult, matchingSchemas, context) {
    if (!n || !matchingSchemas.include(n)) {
      return;
    }
    if (n.type === "property") {
      return validate(n.valueNode, schema, validationResult, matchingSchemas, context);
    }
    const node = n;
    _validateNode();
    switch (node.type) {
      case "object":
        _validateObjectNode(node);
        break;
      case "array":
        _validateArrayNode(node);
        break;
      case "string":
        _validateStringNode(node);
        break;
      case "number":
        _validateNumberNode(node);
        break;
    }
    matchingSchemas.add({ node, schema });
    function _validateNode() {
      function matchesType(type) {
        return node.type === type || type === "integer" && node.type === "number" && node.isInteger;
      }
      if (Array.isArray(schema.type)) {
        if (!schema.type.some(matchesType)) {
          validationResult.problems.push({
            location: { offset: node.offset, length: node.length },
            message: schema.errorMessage || t("Incorrect type. Expected one of {0}.", schema.type.join(", "))
          });
        }
      } else if (schema.type) {
        if (!matchesType(schema.type)) {
          validationResult.problems.push({
            location: { offset: node.offset, length: node.length },
            message: schema.errorMessage || t('Incorrect type. Expected "{0}".', schema.type)
          });
        }
      }
      if (Array.isArray(schema.allOf)) {
        for (const subSchemaRef of schema.allOf) {
          const subValidationResult = new ValidationResult();
          const subMatchingSchemas = matchingSchemas.newSub();
          validate(node, asSchema(subSchemaRef), subValidationResult, subMatchingSchemas, context);
          validationResult.merge(subValidationResult);
          matchingSchemas.merge(subMatchingSchemas);
        }
      }
      const notSchema = asSchema(schema.not);
      if (notSchema) {
        const subValidationResult = new ValidationResult();
        const subMatchingSchemas = matchingSchemas.newSub();
        validate(node, notSchema, subValidationResult, subMatchingSchemas, context);
        if (!subValidationResult.hasProblems()) {
          validationResult.problems.push({
            location: { offset: node.offset, length: node.length },
            message: schema.errorMessage || t("Matches a schema that is not allowed.")
          });
        }
        for (const ms of subMatchingSchemas.schemas) {
          ms.inverted = !ms.inverted;
          matchingSchemas.add(ms);
        }
      }
      const testAlternatives = (alternatives, maxOneMatch) => {
        const matches = [];
        let bestMatch = void 0;
        for (const subSchemaRef of alternatives) {
          const subSchema = asSchema(subSchemaRef);
          const subValidationResult = new ValidationResult();
          const subMatchingSchemas = matchingSchemas.newSub();
          validate(node, subSchema, subValidationResult, subMatchingSchemas, context);
          if (!subValidationResult.hasProblems()) {
            matches.push(subSchema);
          }
          if (!bestMatch) {
            bestMatch = { schema: subSchema, validationResult: subValidationResult, matchingSchemas: subMatchingSchemas };
          } else {
            if (!maxOneMatch && !subValidationResult.hasProblems() && !bestMatch.validationResult.hasProblems()) {
              bestMatch.matchingSchemas.merge(subMatchingSchemas);
              bestMatch.validationResult.propertiesMatches += subValidationResult.propertiesMatches;
              bestMatch.validationResult.propertiesValueMatches += subValidationResult.propertiesValueMatches;
              bestMatch.validationResult.mergeProcessedProperties(subValidationResult);
            } else {
              const compareResult = subValidationResult.compare(bestMatch.validationResult);
              if (compareResult > 0) {
                bestMatch = { schema: subSchema, validationResult: subValidationResult, matchingSchemas: subMatchingSchemas };
              } else if (compareResult === 0) {
                bestMatch.matchingSchemas.merge(subMatchingSchemas);
                bestMatch.validationResult.mergeEnumValues(subValidationResult);
              }
            }
          }
        }
        if (matches.length > 1 && maxOneMatch) {
          validationResult.problems.push({
            location: { offset: node.offset, length: 1 },
            message: t("Matches multiple schemas when only one must validate.")
          });
        }
        if (bestMatch) {
          validationResult.merge(bestMatch.validationResult);
          matchingSchemas.merge(bestMatch.matchingSchemas);
        }
        return matches.length;
      };
      if (Array.isArray(schema.anyOf)) {
        testAlternatives(schema.anyOf, false);
      }
      if (Array.isArray(schema.oneOf)) {
        testAlternatives(schema.oneOf, true);
      }
      const testBranch = (schema2) => {
        const subValidationResult = new ValidationResult();
        const subMatchingSchemas = matchingSchemas.newSub();
        validate(node, asSchema(schema2), subValidationResult, subMatchingSchemas, context);
        validationResult.merge(subValidationResult);
        matchingSchemas.merge(subMatchingSchemas);
      };
      const testCondition = (ifSchema2, thenSchema, elseSchema) => {
        const subSchema = asSchema(ifSchema2);
        const subValidationResult = new ValidationResult();
        const subMatchingSchemas = matchingSchemas.newSub();
        validate(node, subSchema, subValidationResult, subMatchingSchemas, context);
        matchingSchemas.merge(subMatchingSchemas);
        validationResult.mergeProcessedProperties(subValidationResult);
        if (!subValidationResult.hasProblems()) {
          if (thenSchema) {
            testBranch(thenSchema);
          }
        } else if (elseSchema) {
          testBranch(elseSchema);
        }
      };
      const ifSchema = asSchema(schema.if);
      if (ifSchema) {
        testCondition(ifSchema, asSchema(schema.then), asSchema(schema.else));
      }
      if (Array.isArray(schema.enum)) {
        const val = getNodeValue3(node);
        let enumValueMatch = false;
        for (const e of schema.enum) {
          if (equals3(val, e)) {
            enumValueMatch = true;
            break;
          }
        }
        validationResult.enumValues = schema.enum;
        validationResult.enumValueMatch = enumValueMatch;
        if (!enumValueMatch) {
          validationResult.problems.push({
            location: { offset: node.offset, length: node.length },
            code: ErrorCode.EnumValueMismatch,
            message: schema.errorMessage || t("Value is not accepted. Valid values: {0}.", schema.enum.map((v) => JSON.stringify(v)).join(", "))
          });
        }
      }
      if (isDefined(schema.const)) {
        const val = getNodeValue3(node);
        if (!equals3(val, schema.const)) {
          validationResult.problems.push({
            location: { offset: node.offset, length: node.length },
            code: ErrorCode.EnumValueMismatch,
            message: schema.errorMessage || t("Value must be {0}.", JSON.stringify(schema.const))
          });
          validationResult.enumValueMatch = false;
        } else {
          validationResult.enumValueMatch = true;
        }
        validationResult.enumValues = [schema.const];
      }
      let deprecationMessage = schema.deprecationMessage;
      if (deprecationMessage || schema.deprecated) {
        deprecationMessage = deprecationMessage || t("Value is deprecated");
        let targetNode = node.parent?.type === "property" ? node.parent : node;
        validationResult.problems.push({
          location: { offset: targetNode.offset, length: targetNode.length },
          severity: DiagnosticSeverity.Warning,
          message: deprecationMessage,
          code: ErrorCode.Deprecated
        });
      }
    }
    function _validateNumberNode(node2) {
      const val = node2.value;
      function normalizeFloats(float) {
        const parts = /^(-?\d+)(?:\.(\d+))?(?:e([-+]\d+))?$/.exec(float.toString());
        return parts && {
          value: Number(parts[1] + (parts[2] || "")),
          multiplier: (parts[2]?.length || 0) - (parseInt(parts[3]) || 0)
        };
      }
      ;
      if (isNumber(schema.multipleOf)) {
        let remainder = -1;
        if (Number.isInteger(schema.multipleOf)) {
          remainder = val % schema.multipleOf;
        } else {
          let normMultipleOf = normalizeFloats(schema.multipleOf);
          let normValue = normalizeFloats(val);
          if (normMultipleOf && normValue) {
            const multiplier = 10 ** Math.abs(normValue.multiplier - normMultipleOf.multiplier);
            if (normValue.multiplier < normMultipleOf.multiplier) {
              normValue.value *= multiplier;
            } else {
              normMultipleOf.value *= multiplier;
            }
            remainder = normValue.value % normMultipleOf.value;
          }
        }
        if (remainder !== 0) {
          validationResult.problems.push({
            location: { offset: node2.offset, length: node2.length },
            message: t("Value is not divisible by {0}.", schema.multipleOf)
          });
        }
      }
      function getExclusiveLimit(limit, exclusive) {
        if (isNumber(exclusive)) {
          return exclusive;
        }
        if (isBoolean(exclusive) && exclusive) {
          return limit;
        }
        return void 0;
      }
      function getLimit(limit, exclusive) {
        if (!isBoolean(exclusive) || !exclusive) {
          return limit;
        }
        return void 0;
      }
      const exclusiveMinimum = getExclusiveLimit(schema.minimum, schema.exclusiveMinimum);
      if (isNumber(exclusiveMinimum) && val <= exclusiveMinimum) {
        validationResult.problems.push({
          location: { offset: node2.offset, length: node2.length },
          message: t("Value is below the exclusive minimum of {0}.", exclusiveMinimum)
        });
      }
      const exclusiveMaximum = getExclusiveLimit(schema.maximum, schema.exclusiveMaximum);
      if (isNumber(exclusiveMaximum) && val >= exclusiveMaximum) {
        validationResult.problems.push({
          location: { offset: node2.offset, length: node2.length },
          message: t("Value is above the exclusive maximum of {0}.", exclusiveMaximum)
        });
      }
      const minimum = getLimit(schema.minimum, schema.exclusiveMinimum);
      if (isNumber(minimum) && val < minimum) {
        validationResult.problems.push({
          location: { offset: node2.offset, length: node2.length },
          message: t("Value is below the minimum of {0}.", minimum)
        });
      }
      const maximum = getLimit(schema.maximum, schema.exclusiveMaximum);
      if (isNumber(maximum) && val > maximum) {
        validationResult.problems.push({
          location: { offset: node2.offset, length: node2.length },
          message: t("Value is above the maximum of {0}.", maximum)
        });
      }
    }
    function _validateStringNode(node2) {
      if (isNumber(schema.minLength) && stringLength(node2.value) < schema.minLength) {
        validationResult.problems.push({
          location: { offset: node2.offset, length: node2.length },
          message: t("String is shorter than the minimum length of {0}.", schema.minLength)
        });
      }
      if (isNumber(schema.maxLength) && stringLength(node2.value) > schema.maxLength) {
        validationResult.problems.push({
          location: { offset: node2.offset, length: node2.length },
          message: t("String is longer than the maximum length of {0}.", schema.maxLength)
        });
      }
      if (isString2(schema.pattern)) {
        const regex = extendedRegExp(schema.pattern);
        if (!regex?.test(node2.value)) {
          validationResult.problems.push({
            location: { offset: node2.offset, length: node2.length },
            message: schema.patternErrorMessage || schema.errorMessage || t('String does not match the pattern of "{0}".', schema.pattern)
          });
        }
      }
      if (schema.format) {
        switch (schema.format) {
          case "uri":
          case "uri-reference":
            {
              let errorMessage;
              if (!node2.value) {
                errorMessage = t("URI expected.");
              } else {
                const match = /^(([^:/?#]+?):)?(\/\/([^/?#]*))?([^?#]*)(\?([^#]*))?(#(.*))?/.exec(node2.value);
                if (!match) {
                  errorMessage = t("URI is expected.");
                } else if (!match[2] && schema.format === "uri") {
                  errorMessage = t("URI with a scheme is expected.");
                }
              }
              if (errorMessage) {
                validationResult.problems.push({
                  location: { offset: node2.offset, length: node2.length },
                  message: schema.patternErrorMessage || schema.errorMessage || t("String is not a URI: {0}", errorMessage)
                });
              }
            }
            break;
          case "color-hex":
          case "date-time":
          case "date":
          case "time":
          case "email":
          case "hostname":
          case "ipv4":
          case "ipv6":
            const format5 = formats[schema.format];
            if (!node2.value || !format5.pattern.exec(node2.value)) {
              validationResult.problems.push({
                location: { offset: node2.offset, length: node2.length },
                message: schema.patternErrorMessage || schema.errorMessage || format5.errorMessage
              });
            }
          default:
        }
      }
    }
    function _validateArrayNode(node2) {
      let prefixItemsSchemas;
      let additionalItemSchema;
      if (context.schemaDraft >= SchemaDraft.v2020_12) {
        prefixItemsSchemas = schema.prefixItems;
        additionalItemSchema = !Array.isArray(schema.items) ? schema.items : void 0;
      } else {
        prefixItemsSchemas = Array.isArray(schema.items) ? schema.items : void 0;
        additionalItemSchema = !Array.isArray(schema.items) ? schema.items : schema.additionalItems;
      }
      let index = 0;
      if (prefixItemsSchemas !== void 0) {
        const max = Math.min(prefixItemsSchemas.length, node2.items.length);
        for (; index < max; index++) {
          const subSchemaRef = prefixItemsSchemas[index];
          const subSchema = asSchema(subSchemaRef);
          const itemValidationResult = new ValidationResult();
          const item = node2.items[index];
          if (item) {
            validate(item, subSchema, itemValidationResult, matchingSchemas, context);
            validationResult.mergePropertyMatch(itemValidationResult);
          }
          validationResult.processedProperties.add(String(index));
        }
      }
      if (additionalItemSchema !== void 0 && index < node2.items.length) {
        if (typeof additionalItemSchema === "boolean") {
          if (additionalItemSchema === false) {
            validationResult.problems.push({
              location: { offset: node2.offset, length: node2.length },
              message: t("Array has too many items according to schema. Expected {0} or fewer.", index)
            });
          }
          for (; index < node2.items.length; index++) {
            validationResult.processedProperties.add(String(index));
            validationResult.propertiesValueMatches++;
          }
        } else {
          for (; index < node2.items.length; index++) {
            const itemValidationResult = new ValidationResult();
            validate(node2.items[index], additionalItemSchema, itemValidationResult, matchingSchemas, context);
            validationResult.mergePropertyMatch(itemValidationResult);
            validationResult.processedProperties.add(String(index));
          }
        }
      }
      const containsSchema = asSchema(schema.contains);
      if (containsSchema) {
        let containsCount = 0;
        for (let index2 = 0; index2 < node2.items.length; index2++) {
          const item = node2.items[index2];
          const itemValidationResult = new ValidationResult();
          validate(item, containsSchema, itemValidationResult, NoOpSchemaCollector.instance, context);
          if (!itemValidationResult.hasProblems()) {
            containsCount++;
            if (context.schemaDraft >= SchemaDraft.v2020_12) {
              validationResult.processedProperties.add(String(index2));
            }
          }
        }
        if (containsCount === 0 && !isNumber(schema.minContains)) {
          validationResult.problems.push({
            location: { offset: node2.offset, length: node2.length },
            message: schema.errorMessage || t("Array does not contain required item.")
          });
        }
        if (isNumber(schema.minContains) && containsCount < schema.minContains) {
          validationResult.problems.push({
            location: { offset: node2.offset, length: node2.length },
            message: schema.errorMessage || t("Array has too few items that match the contains contraint. Expected {0} or more.", schema.minContains)
          });
        }
        if (isNumber(schema.maxContains) && containsCount > schema.maxContains) {
          validationResult.problems.push({
            location: { offset: node2.offset, length: node2.length },
            message: schema.errorMessage || t("Array has too many items that match the contains contraint. Expected {0} or less.", schema.maxContains)
          });
        }
      }
      const unevaluatedItems = schema.unevaluatedItems;
      if (unevaluatedItems !== void 0) {
        for (let i = 0; i < node2.items.length; i++) {
          if (!validationResult.processedProperties.has(String(i))) {
            if (unevaluatedItems === false) {
              validationResult.problems.push({
                location: { offset: node2.offset, length: node2.length },
                message: t("Item does not match any validation rule from the array.")
              });
            } else {
              const itemValidationResult = new ValidationResult();
              validate(node2.items[i], schema.unevaluatedItems, itemValidationResult, matchingSchemas, context);
              validationResult.mergePropertyMatch(itemValidationResult);
            }
          }
          validationResult.processedProperties.add(String(i));
          validationResult.propertiesValueMatches++;
        }
      }
      if (isNumber(schema.minItems) && node2.items.length < schema.minItems) {
        validationResult.problems.push({
          location: { offset: node2.offset, length: node2.length },
          message: t("Array has too few items. Expected {0} or more.", schema.minItems)
        });
      }
      if (isNumber(schema.maxItems) && node2.items.length > schema.maxItems) {
        validationResult.problems.push({
          location: { offset: node2.offset, length: node2.length },
          message: t("Array has too many items. Expected {0} or fewer.", schema.maxItems)
        });
      }
      if (schema.uniqueItems === true) {
        let hasDuplicates = function() {
          for (let i = 0; i < values.length - 1; i++) {
            const value = values[i];
            for (let j = i + 1; j < values.length; j++) {
              if (equals3(value, values[j])) {
                return true;
              }
            }
          }
          return false;
        };
        const values = getNodeValue3(node2);
        if (hasDuplicates()) {
          validationResult.problems.push({
            location: { offset: node2.offset, length: node2.length },
            message: t("Array has duplicate items.")
          });
        }
      }
    }
    function _validateObjectNode(node2) {
      const seenKeys = /* @__PURE__ */ Object.create(null);
      const unprocessedProperties = /* @__PURE__ */ new Set();
      for (const propertyNode of node2.properties) {
        const key = propertyNode.keyNode.value;
        seenKeys[key] = propertyNode.valueNode;
        unprocessedProperties.add(key);
      }
      if (Array.isArray(schema.required)) {
        for (const propertyName of schema.required) {
          if (!seenKeys[propertyName]) {
            const keyNode = node2.parent && node2.parent.type === "property" && node2.parent.keyNode;
            const location = keyNode ? { offset: keyNode.offset, length: keyNode.length } : { offset: node2.offset, length: 1 };
            validationResult.problems.push({
              location,
              message: t('Missing property "{0}".', propertyName)
            });
          }
        }
      }
      const propertyProcessed = (prop) => {
        unprocessedProperties.delete(prop);
        validationResult.processedProperties.add(prop);
      };
      if (schema.properties) {
        for (const propertyName of Object.keys(schema.properties)) {
          propertyProcessed(propertyName);
          const propertySchema = schema.properties[propertyName];
          const child = seenKeys[propertyName];
          if (child) {
            if (isBoolean(propertySchema)) {
              if (!propertySchema) {
                const propertyNode = child.parent;
                validationResult.problems.push({
                  location: { offset: propertyNode.keyNode.offset, length: propertyNode.keyNode.length },
                  message: schema.errorMessage || t("Property {0} is not allowed.", propertyName)
                });
              } else {
                validationResult.propertiesMatches++;
                validationResult.propertiesValueMatches++;
              }
            } else {
              const propertyValidationResult = new ValidationResult();
              validate(child, propertySchema, propertyValidationResult, matchingSchemas, context);
              validationResult.mergePropertyMatch(propertyValidationResult);
            }
          }
        }
      }
      if (schema.patternProperties) {
        for (const propertyPattern of Object.keys(schema.patternProperties)) {
          const regex = extendedRegExp(propertyPattern);
          if (regex) {
            const processed = [];
            for (const propertyName of unprocessedProperties) {
              if (regex.test(propertyName)) {
                processed.push(propertyName);
                const child = seenKeys[propertyName];
                if (child) {
                  const propertySchema = schema.patternProperties[propertyPattern];
                  if (isBoolean(propertySchema)) {
                    if (!propertySchema) {
                      const propertyNode = child.parent;
                      validationResult.problems.push({
                        location: { offset: propertyNode.keyNode.offset, length: propertyNode.keyNode.length },
                        message: schema.errorMessage || t("Property {0} is not allowed.", propertyName)
                      });
                    } else {
                      validationResult.propertiesMatches++;
                      validationResult.propertiesValueMatches++;
                    }
                  } else {
                    const propertyValidationResult = new ValidationResult();
                    validate(child, propertySchema, propertyValidationResult, matchingSchemas, context);
                    validationResult.mergePropertyMatch(propertyValidationResult);
                  }
                }
              }
            }
            processed.forEach(propertyProcessed);
          }
        }
      }
      const additionalProperties = schema.additionalProperties;
      if (additionalProperties !== void 0) {
        for (const propertyName of unprocessedProperties) {
          propertyProcessed(propertyName);
          const child = seenKeys[propertyName];
          if (child) {
            if (additionalProperties === false) {
              const propertyNode = child.parent;
              validationResult.problems.push({
                location: { offset: propertyNode.keyNode.offset, length: propertyNode.keyNode.length },
                message: schema.errorMessage || t("Property {0} is not allowed.", propertyName)
              });
            } else if (additionalProperties !== true) {
              const propertyValidationResult = new ValidationResult();
              validate(child, additionalProperties, propertyValidationResult, matchingSchemas, context);
              validationResult.mergePropertyMatch(propertyValidationResult);
            }
          }
        }
      }
      const unevaluatedProperties = schema.unevaluatedProperties;
      if (unevaluatedProperties !== void 0) {
        const processed = [];
        for (const propertyName of unprocessedProperties) {
          if (!validationResult.processedProperties.has(propertyName)) {
            processed.push(propertyName);
            const child = seenKeys[propertyName];
            if (child) {
              if (unevaluatedProperties === false) {
                const propertyNode = child.parent;
                validationResult.problems.push({
                  location: { offset: propertyNode.keyNode.offset, length: propertyNode.keyNode.length },
                  message: schema.errorMessage || t("Property {0} is not allowed.", propertyName)
                });
              } else if (unevaluatedProperties !== true) {
                const propertyValidationResult = new ValidationResult();
                validate(child, unevaluatedProperties, propertyValidationResult, matchingSchemas, context);
                validationResult.mergePropertyMatch(propertyValidationResult);
              }
            }
          }
        }
        processed.forEach(propertyProcessed);
      }
      if (isNumber(schema.maxProperties)) {
        if (node2.properties.length > schema.maxProperties) {
          validationResult.problems.push({
            location: { offset: node2.offset, length: node2.length },
            message: t("Object has more properties than limit of {0}.", schema.maxProperties)
          });
        }
      }
      if (isNumber(schema.minProperties)) {
        if (node2.properties.length < schema.minProperties) {
          validationResult.problems.push({
            location: { offset: node2.offset, length: node2.length },
            message: t("Object has fewer properties than the required number of {0}", schema.minProperties)
          });
        }
      }
      if (schema.dependentRequired) {
        for (const key in schema.dependentRequired) {
          const prop = seenKeys[key];
          const propertyDeps = schema.dependentRequired[key];
          if (prop && Array.isArray(propertyDeps)) {
            _validatePropertyDependencies(key, propertyDeps);
          }
        }
      }
      if (schema.dependentSchemas) {
        for (const key in schema.dependentSchemas) {
          const prop = seenKeys[key];
          const propertyDeps = schema.dependentSchemas[key];
          if (prop && isObject2(propertyDeps)) {
            _validatePropertyDependencies(key, propertyDeps);
          }
        }
      }
      if (schema.dependencies) {
        for (const key in schema.dependencies) {
          const prop = seenKeys[key];
          if (prop) {
            _validatePropertyDependencies(key, schema.dependencies[key]);
          }
        }
      }
      const propertyNames = asSchema(schema.propertyNames);
      if (propertyNames) {
        for (const f2 of node2.properties) {
          const key = f2.keyNode;
          if (key) {
            validate(key, propertyNames, validationResult, NoOpSchemaCollector.instance, context);
          }
        }
      }
      function _validatePropertyDependencies(key, propertyDep) {
        if (Array.isArray(propertyDep)) {
          for (const requiredProp of propertyDep) {
            if (!seenKeys[requiredProp]) {
              validationResult.problems.push({
                location: { offset: node2.offset, length: node2.length },
                message: t("Object is missing property {0} required by property {1}.", requiredProp, key)
              });
            } else {
              validationResult.propertiesValueMatches++;
            }
          }
        } else {
          const propertySchema = asSchema(propertyDep);
          if (propertySchema) {
            const propertyValidationResult = new ValidationResult();
            validate(node2, propertySchema, propertyValidationResult, matchingSchemas, context);
            validationResult.mergePropertyMatch(propertyValidationResult);
          }
        }
      }
    }
  }
  function parse3(textDocument, config) {
    const problems = [];
    let lastProblemOffset = -1;
    const text = textDocument.getText();
    const scanner = createScanner2(text, false);
    const commentRanges = config && config.collectComments ? [] : void 0;
    function _scanNext() {
      while (true) {
        const token2 = scanner.scan();
        _checkScanError();
        switch (token2) {
          case 12:
          case 13:
            if (Array.isArray(commentRanges)) {
              commentRanges.push(Range2.create(textDocument.positionAt(scanner.getTokenOffset()), textDocument.positionAt(scanner.getTokenOffset() + scanner.getTokenLength())));
            }
            break;
          case 15:
          case 14:
            break;
          default:
            return token2;
        }
      }
    }
    function _accept(token2) {
      if (scanner.getToken() === token2) {
        _scanNext();
        return true;
      }
      return false;
    }
    function _errorAtRange(message, code, startOffset, endOffset, severity = DiagnosticSeverity.Error) {
      if (problems.length === 0 || startOffset !== lastProblemOffset) {
        const range = Range2.create(textDocument.positionAt(startOffset), textDocument.positionAt(endOffset));
        problems.push(Diagnostic.create(range, message, severity, code, textDocument.languageId));
        lastProblemOffset = startOffset;
      }
    }
    function _error(message, code, node = void 0, skipUntilAfter = [], skipUntil = []) {
      let start = scanner.getTokenOffset();
      let end = scanner.getTokenOffset() + scanner.getTokenLength();
      if (start === end && start > 0) {
        start--;
        while (start > 0 && /\s/.test(text.charAt(start))) {
          start--;
        }
        end = start + 1;
      }
      _errorAtRange(message, code, start, end);
      if (node) {
        _finalize(node, false);
      }
      if (skipUntilAfter.length + skipUntil.length > 0) {
        let token2 = scanner.getToken();
        while (token2 !== 17) {
          if (skipUntilAfter.indexOf(token2) !== -1) {
            _scanNext();
            break;
          } else if (skipUntil.indexOf(token2) !== -1) {
            break;
          }
          token2 = _scanNext();
        }
      }
      return node;
    }
    function _checkScanError() {
      switch (scanner.getTokenError()) {
        case 4:
          _error(t("Invalid unicode sequence in string."), ErrorCode.InvalidUnicode);
          return true;
        case 5:
          _error(t("Invalid escape character in string."), ErrorCode.InvalidEscapeCharacter);
          return true;
        case 3:
          _error(t("Unexpected end of number."), ErrorCode.UnexpectedEndOfNumber);
          return true;
        case 1:
          _error(t("Unexpected end of comment."), ErrorCode.UnexpectedEndOfComment);
          return true;
        case 2:
          _error(t("Unexpected end of string."), ErrorCode.UnexpectedEndOfString);
          return true;
        case 6:
          _error(t("Invalid characters in string. Control characters must be escaped."), ErrorCode.InvalidCharacter);
          return true;
      }
      return false;
    }
    function _finalize(node, scanNext) {
      node.length = scanner.getTokenOffset() + scanner.getTokenLength() - node.offset;
      if (scanNext) {
        _scanNext();
      }
      return node;
    }
    function _parseArray(parent) {
      if (scanner.getToken() !== 3) {
        return void 0;
      }
      const node = new ArrayASTNodeImpl(parent, scanner.getTokenOffset());
      _scanNext();
      const count = 0;
      let needsComma = false;
      while (scanner.getToken() !== 4 && scanner.getToken() !== 17) {
        if (scanner.getToken() === 5) {
          if (!needsComma) {
            _error(t("Value expected"), ErrorCode.ValueExpected);
          }
          const commaOffset = scanner.getTokenOffset();
          _scanNext();
          if (scanner.getToken() === 4) {
            if (needsComma) {
              _errorAtRange(t("Trailing comma"), ErrorCode.TrailingComma, commaOffset, commaOffset + 1);
            }
            continue;
          }
        } else if (needsComma) {
          _error(t("Expected comma"), ErrorCode.CommaExpected);
        }
        const item = _parseValue(node);
        if (!item) {
          _error(t("Value expected"), ErrorCode.ValueExpected, void 0, [], [
            4,
            5
            /* Json.SyntaxKind.CommaToken */
          ]);
        } else {
          node.items.push(item);
        }
        needsComma = true;
      }
      if (scanner.getToken() !== 4) {
        return _error(t("Expected comma or closing bracket"), ErrorCode.CommaOrCloseBacketExpected, node);
      }
      return _finalize(node, true);
    }
    const keyPlaceholder = new StringASTNodeImpl(void 0, 0, 0);
    function _parseProperty(parent, keysSeen) {
      const node = new PropertyASTNodeImpl(parent, scanner.getTokenOffset(), keyPlaceholder);
      let key = _parseString(node);
      if (!key) {
        if (scanner.getToken() === 16) {
          _error(t("Property keys must be doublequoted"), ErrorCode.PropertyKeysMustBeDoublequoted);
          const keyNode = new StringASTNodeImpl(node, scanner.getTokenOffset(), scanner.getTokenLength());
          keyNode.value = scanner.getTokenValue();
          key = keyNode;
          _scanNext();
        } else {
          return void 0;
        }
      }
      node.keyNode = key;
      if (key.value !== "//") {
        const seen = keysSeen[key.value];
        if (seen) {
          _errorAtRange(t("Duplicate object key"), ErrorCode.DuplicateKey, node.keyNode.offset, node.keyNode.offset + node.keyNode.length, DiagnosticSeverity.Warning);
          if (isObject2(seen)) {
            _errorAtRange(t("Duplicate object key"), ErrorCode.DuplicateKey, seen.keyNode.offset, seen.keyNode.offset + seen.keyNode.length, DiagnosticSeverity.Warning);
          }
          keysSeen[key.value] = true;
        } else {
          keysSeen[key.value] = node;
        }
      }
      if (scanner.getToken() === 6) {
        node.colonOffset = scanner.getTokenOffset();
        _scanNext();
      } else {
        _error(t("Colon expected"), ErrorCode.ColonExpected);
        if (scanner.getToken() === 10 && textDocument.positionAt(key.offset + key.length).line < textDocument.positionAt(scanner.getTokenOffset()).line) {
          node.length = key.length;
          return node;
        }
      }
      const value = _parseValue(node);
      if (!value) {
        return _error(t("Value expected"), ErrorCode.ValueExpected, node, [], [
          2,
          5
          /* Json.SyntaxKind.CommaToken */
        ]);
      }
      node.valueNode = value;
      node.length = value.offset + value.length - node.offset;
      return node;
    }
    function _parseObject(parent) {
      if (scanner.getToken() !== 1) {
        return void 0;
      }
      const node = new ObjectASTNodeImpl(parent, scanner.getTokenOffset());
      const keysSeen = /* @__PURE__ */ Object.create(null);
      _scanNext();
      let needsComma = false;
      while (scanner.getToken() !== 2 && scanner.getToken() !== 17) {
        if (scanner.getToken() === 5) {
          if (!needsComma) {
            _error(t("Property expected"), ErrorCode.PropertyExpected);
          }
          const commaOffset = scanner.getTokenOffset();
          _scanNext();
          if (scanner.getToken() === 2) {
            if (needsComma) {
              _errorAtRange(t("Trailing comma"), ErrorCode.TrailingComma, commaOffset, commaOffset + 1);
            }
            continue;
          }
        } else if (needsComma) {
          _error(t("Expected comma"), ErrorCode.CommaExpected);
        }
        const property = _parseProperty(node, keysSeen);
        if (!property) {
          _error(t("Property expected"), ErrorCode.PropertyExpected, void 0, [], [
            2,
            5
            /* Json.SyntaxKind.CommaToken */
          ]);
        } else {
          node.properties.push(property);
        }
        needsComma = true;
      }
      if (scanner.getToken() !== 2) {
        return _error(t("Expected comma or closing brace"), ErrorCode.CommaOrCloseBraceExpected, node);
      }
      return _finalize(node, true);
    }
    function _parseString(parent) {
      if (scanner.getToken() !== 10) {
        return void 0;
      }
      const node = new StringASTNodeImpl(parent, scanner.getTokenOffset());
      node.value = scanner.getTokenValue();
      return _finalize(node, true);
    }
    function _parseNumber(parent) {
      if (scanner.getToken() !== 11) {
        return void 0;
      }
      const node = new NumberASTNodeImpl(parent, scanner.getTokenOffset());
      if (scanner.getTokenError() === 0) {
        const tokenValue = scanner.getTokenValue();
        try {
          const numberValue = JSON.parse(tokenValue);
          if (!isNumber(numberValue)) {
            return _error(t("Invalid number format."), ErrorCode.Undefined, node);
          }
          node.value = numberValue;
        } catch (e) {
          return _error(t("Invalid number format."), ErrorCode.Undefined, node);
        }
        node.isInteger = tokenValue.indexOf(".") === -1;
      }
      return _finalize(node, true);
    }
    function _parseLiteral(parent) {
      let node;
      switch (scanner.getToken()) {
        case 7:
          return _finalize(new NullASTNodeImpl(parent, scanner.getTokenOffset()), true);
        case 8:
          return _finalize(new BooleanASTNodeImpl(parent, true, scanner.getTokenOffset()), true);
        case 9:
          return _finalize(new BooleanASTNodeImpl(parent, false, scanner.getTokenOffset()), true);
        default:
          return void 0;
      }
    }
    function _parseValue(parent) {
      return _parseArray(parent) || _parseObject(parent) || _parseString(parent) || _parseNumber(parent) || _parseLiteral(parent);
    }
    let _root = void 0;
    const token = _scanNext();
    if (token !== 17) {
      _root = _parseValue(_root);
      if (!_root) {
        _error(t("Expected a JSON object, array or literal."), ErrorCode.Undefined);
      } else if (scanner.getToken() !== 17) {
        _error(t("End of file expected."), ErrorCode.Undefined);
      }
    }
    return new JSONDocument(_root, problems, commentRanges);
  }
  function stringifyObject(obj, indent, stringifyLiteral) {
    if (obj !== null && typeof obj === "object") {
      const newIndent = indent + "	";
      if (Array.isArray(obj)) {
        if (obj.length === 0) {
          return "[]";
        }
        let result = "[\n";
        for (let i = 0; i < obj.length; i++) {
          result += newIndent + stringifyObject(obj[i], newIndent, stringifyLiteral);
          if (i < obj.length - 1) {
            result += ",";
          }
          result += "\n";
        }
        result += indent + "]";
        return result;
      } else {
        const keys = Object.keys(obj);
        if (keys.length === 0) {
          return "{}";
        }
        let result = "{\n";
        for (let i = 0; i < keys.length; i++) {
          const key = keys[i];
          result += newIndent + JSON.stringify(key) + ": " + stringifyObject(obj[key], newIndent, stringifyLiteral);
          if (i < keys.length - 1) {
            result += ",";
          }
          result += "\n";
        }
        result += indent + "}";
        return result;
      }
    }
    return stringifyLiteral(obj);
  }
  var valueCommitCharacters = [",", "}", "]"];
  var propertyCommitCharacters = [":"];
  var JSONCompletion = class {
    constructor(schemaService, contributions = [], promiseConstructor = Promise, clientCapabilities = {}) {
      this.schemaService = schemaService;
      this.contributions = contributions;
      this.promiseConstructor = promiseConstructor;
      this.clientCapabilities = clientCapabilities;
    }
    doResolve(item) {
      for (let i = this.contributions.length - 1; i >= 0; i--) {
        const resolveCompletion = this.contributions[i].resolveCompletion;
        if (resolveCompletion) {
          const resolver = resolveCompletion(item);
          if (resolver) {
            return resolver;
          }
        }
      }
      return this.promiseConstructor.resolve(item);
    }
    doComplete(document2, position, doc) {
      const result = {
        items: [],
        isIncomplete: false
      };
      const text = document2.getText();
      const offset = document2.offsetAt(position);
      let node = doc.getNodeFromOffset(offset, true);
      if (this.isInComment(document2, node ? node.offset : 0, offset)) {
        return Promise.resolve(result);
      }
      if (node && offset === node.offset + node.length && offset > 0) {
        const ch = text[offset - 1];
        if (node.type === "object" && ch === "}" || node.type === "array" && ch === "]") {
          node = node.parent;
        }
      }
      const currentWord = this.getCurrentWord(document2, offset);
      let overwriteRange;
      if (node && (node.type === "string" || node.type === "number" || node.type === "boolean" || node.type === "null")) {
        overwriteRange = Range2.create(document2.positionAt(node.offset), document2.positionAt(node.offset + node.length));
      } else {
        let overwriteStart = offset - currentWord.length;
        if (overwriteStart > 0 && text[overwriteStart - 1] === '"') {
          overwriteStart--;
        }
        overwriteRange = Range2.create(document2.positionAt(overwriteStart), position);
      }
      const supportsCommitCharacters = false;
      const proposed = /* @__PURE__ */ new Map();
      const collector = {
        add: (suggestion) => {
          let label = suggestion.label;
          const existing = proposed.get(label);
          if (!existing) {
            label = label.replace(/[\n]/g, "\u21B5");
            if (label.length > 60) {
              const shortendedLabel = label.substr(0, 57).trim() + "...";
              if (!proposed.has(shortendedLabel)) {
                label = shortendedLabel;
              }
            }
            suggestion.textEdit = TextEdit.replace(overwriteRange, suggestion.insertText);
            if (supportsCommitCharacters) {
              suggestion.commitCharacters = suggestion.kind === CompletionItemKind2.Property ? propertyCommitCharacters : valueCommitCharacters;
            }
            suggestion.label = label;
            proposed.set(label, suggestion);
            result.items.push(suggestion);
          } else {
            if (!existing.documentation) {
              existing.documentation = suggestion.documentation;
            }
            if (!existing.detail) {
              existing.detail = suggestion.detail;
            }
            if (!existing.labelDetails) {
              existing.labelDetails = suggestion.labelDetails;
            }
          }
        },
        setAsIncomplete: () => {
          result.isIncomplete = true;
        },
        error: (message) => {
          console.error(message);
        },
        getNumberOfProposals: () => {
          return result.items.length;
        }
      };
      return this.schemaService.getSchemaForResource(document2.uri, doc).then((schema) => {
        const collectionPromises = [];
        let addValue = true;
        let currentKey = "";
        let currentProperty = void 0;
        if (node) {
          if (node.type === "string") {
            const parent = node.parent;
            if (parent && parent.type === "property" && parent.keyNode === node) {
              addValue = !parent.valueNode;
              currentProperty = parent;
              currentKey = text.substr(node.offset + 1, node.length - 2);
              if (parent) {
                node = parent.parent;
              }
            }
          }
        }
        if (node && node.type === "object") {
          if (node.offset === offset) {
            return result;
          }
          const properties = node.properties;
          properties.forEach((p) => {
            if (!currentProperty || currentProperty !== p) {
              proposed.set(p.keyNode.value, CompletionItem.create("__"));
            }
          });
          let separatorAfter = "";
          if (addValue) {
            separatorAfter = this.evaluateSeparatorAfter(document2, document2.offsetAt(overwriteRange.end));
          }
          if (schema) {
            this.getPropertyCompletions(schema, doc, node, addValue, separatorAfter, collector);
          } else {
            this.getSchemaLessPropertyCompletions(doc, node, currentKey, collector);
          }
          const location = getNodePath3(node);
          this.contributions.forEach((contribution) => {
            const collectPromise = contribution.collectPropertyCompletions(document2.uri, location, currentWord, addValue, separatorAfter === "", collector);
            if (collectPromise) {
              collectionPromises.push(collectPromise);
            }
          });
          if (!schema && currentWord.length > 0 && text.charAt(offset - currentWord.length - 1) !== '"') {
            collector.add({
              kind: CompletionItemKind2.Property,
              label: this.getLabelForValue(currentWord),
              insertText: this.getInsertTextForProperty(currentWord, void 0, false, separatorAfter),
              insertTextFormat: InsertTextFormat.Snippet,
              documentation: ""
            });
            collector.setAsIncomplete();
          }
        }
        const types = {};
        if (schema) {
          this.getValueCompletions(schema, doc, node, offset, document2, collector, types);
        } else {
          this.getSchemaLessValueCompletions(doc, node, offset, document2, collector);
        }
        if (this.contributions.length > 0) {
          this.getContributedValueCompletions(doc, node, offset, document2, collector, collectionPromises);
        }
        return this.promiseConstructor.all(collectionPromises).then(() => {
          if (collector.getNumberOfProposals() === 0) {
            let offsetForSeparator = offset;
            if (node && (node.type === "string" || node.type === "number" || node.type === "boolean" || node.type === "null")) {
              offsetForSeparator = node.offset + node.length;
            }
            const separatorAfter = this.evaluateSeparatorAfter(document2, offsetForSeparator);
            this.addFillerValueCompletions(types, separatorAfter, collector);
          }
          return result;
        });
      });
    }
    getPropertyCompletions(schema, doc, node, addValue, separatorAfter, collector) {
      const matchingSchemas = doc.getMatchingSchemas(schema.schema, node.offset);
      matchingSchemas.forEach((s) => {
        if (s.node === node && !s.inverted) {
          const schemaProperties = s.schema.properties;
          if (schemaProperties) {
            Object.keys(schemaProperties).forEach((key) => {
              const propertySchema = schemaProperties[key];
              if (typeof propertySchema === "object" && !propertySchema.deprecationMessage && !propertySchema.doNotSuggest) {
                const proposal = {
                  kind: CompletionItemKind2.Property,
                  label: key,
                  insertText: this.getInsertTextForProperty(key, propertySchema, addValue, separatorAfter),
                  insertTextFormat: InsertTextFormat.Snippet,
                  filterText: this.getFilterTextForValue(key),
                  documentation: this.fromMarkup(propertySchema.markdownDescription) || propertySchema.description || ""
                };
                if (propertySchema.suggestSortText !== void 0) {
                  proposal.sortText = propertySchema.suggestSortText;
                }
                if (proposal.insertText && endsWith(proposal.insertText, `$1${separatorAfter}`)) {
                  proposal.command = {
                    title: "Suggest",
                    command: "editor.action.triggerSuggest"
                  };
                }
                collector.add(proposal);
              }
            });
          }
          const schemaPropertyNames = s.schema.propertyNames;
          if (typeof schemaPropertyNames === "object" && !schemaPropertyNames.deprecationMessage && !schemaPropertyNames.doNotSuggest) {
            const propertyNameCompletionItem = (name, enumDescription = void 0) => {
              const proposal = {
                kind: CompletionItemKind2.Property,
                label: name,
                insertText: this.getInsertTextForProperty(name, void 0, addValue, separatorAfter),
                insertTextFormat: InsertTextFormat.Snippet,
                filterText: this.getFilterTextForValue(name),
                documentation: enumDescription || this.fromMarkup(schemaPropertyNames.markdownDescription) || schemaPropertyNames.description || ""
              };
              if (schemaPropertyNames.suggestSortText !== void 0) {
                proposal.sortText = schemaPropertyNames.suggestSortText;
              }
              if (proposal.insertText && endsWith(proposal.insertText, `$1${separatorAfter}`)) {
                proposal.command = {
                  title: "Suggest",
                  command: "editor.action.triggerSuggest"
                };
              }
              collector.add(proposal);
            };
            if (schemaPropertyNames.enum) {
              for (let i = 0; i < schemaPropertyNames.enum.length; i++) {
                let enumDescription = void 0;
                if (schemaPropertyNames.markdownEnumDescriptions && i < schemaPropertyNames.markdownEnumDescriptions.length) {
                  enumDescription = this.fromMarkup(schemaPropertyNames.markdownEnumDescriptions[i]);
                } else if (schemaPropertyNames.enumDescriptions && i < schemaPropertyNames.enumDescriptions.length) {
                  enumDescription = schemaPropertyNames.enumDescriptions[i];
                }
                propertyNameCompletionItem(schemaPropertyNames.enum[i], enumDescription);
              }
            }
            if (schemaPropertyNames.const) {
              propertyNameCompletionItem(schemaPropertyNames.const);
            }
          }
        }
      });
    }
    getSchemaLessPropertyCompletions(doc, node, currentKey, collector) {
      const collectCompletionsForSimilarObject = (obj) => {
        obj.properties.forEach((p) => {
          const key = p.keyNode.value;
          collector.add({
            kind: CompletionItemKind2.Property,
            label: key,
            insertText: this.getInsertTextForValue(key, ""),
            insertTextFormat: InsertTextFormat.Snippet,
            filterText: this.getFilterTextForValue(key),
            documentation: ""
          });
        });
      };
      if (node.parent) {
        if (node.parent.type === "property") {
          const parentKey = node.parent.keyNode.value;
          doc.visit((n) => {
            if (n.type === "property" && n !== node.parent && n.keyNode.value === parentKey && n.valueNode && n.valueNode.type === "object") {
              collectCompletionsForSimilarObject(n.valueNode);
            }
            return true;
          });
        } else if (node.parent.type === "array") {
          node.parent.items.forEach((n) => {
            if (n.type === "object" && n !== node) {
              collectCompletionsForSimilarObject(n);
            }
          });
        }
      } else if (node.type === "object") {
        collector.add({
          kind: CompletionItemKind2.Property,
          label: "$schema",
          insertText: this.getInsertTextForProperty("$schema", void 0, true, ""),
          insertTextFormat: InsertTextFormat.Snippet,
          documentation: "",
          filterText: this.getFilterTextForValue("$schema")
        });
      }
    }
    getSchemaLessValueCompletions(doc, node, offset, document2, collector) {
      let offsetForSeparator = offset;
      if (node && (node.type === "string" || node.type === "number" || node.type === "boolean" || node.type === "null")) {
        offsetForSeparator = node.offset + node.length;
        node = node.parent;
      }
      if (!node) {
        collector.add({
          kind: this.getSuggestionKind("object"),
          label: "Empty object",
          insertText: this.getInsertTextForValue({}, ""),
          insertTextFormat: InsertTextFormat.Snippet,
          documentation: ""
        });
        collector.add({
          kind: this.getSuggestionKind("array"),
          label: "Empty array",
          insertText: this.getInsertTextForValue([], ""),
          insertTextFormat: InsertTextFormat.Snippet,
          documentation: ""
        });
        return;
      }
      const separatorAfter = this.evaluateSeparatorAfter(document2, offsetForSeparator);
      const collectSuggestionsForValues = (value) => {
        if (value.parent && !contains2(value.parent, offset, true)) {
          collector.add({
            kind: this.getSuggestionKind(value.type),
            label: this.getLabelTextForMatchingNode(value, document2),
            insertText: this.getInsertTextForMatchingNode(value, document2, separatorAfter),
            insertTextFormat: InsertTextFormat.Snippet,
            documentation: ""
          });
        }
        if (value.type === "boolean") {
          this.addBooleanValueCompletion(!value.value, separatorAfter, collector);
        }
      };
      if (node.type === "property") {
        if (offset > (node.colonOffset || 0)) {
          const valueNode = node.valueNode;
          if (valueNode && (offset > valueNode.offset + valueNode.length || valueNode.type === "object" || valueNode.type === "array")) {
            return;
          }
          const parentKey = node.keyNode.value;
          doc.visit((n) => {
            if (n.type === "property" && n.keyNode.value === parentKey && n.valueNode) {
              collectSuggestionsForValues(n.valueNode);
            }
            return true;
          });
          if (parentKey === "$schema" && node.parent && !node.parent.parent) {
            this.addDollarSchemaCompletions(separatorAfter, collector);
          }
        }
      }
      if (node.type === "array") {
        if (node.parent && node.parent.type === "property") {
          const parentKey = node.parent.keyNode.value;
          doc.visit((n) => {
            if (n.type === "property" && n.keyNode.value === parentKey && n.valueNode && n.valueNode.type === "array") {
              n.valueNode.items.forEach(collectSuggestionsForValues);
            }
            return true;
          });
        } else {
          node.items.forEach(collectSuggestionsForValues);
        }
      }
    }
    getValueCompletions(schema, doc, node, offset, document2, collector, types) {
      let offsetForSeparator = offset;
      let parentKey = void 0;
      let valueNode = void 0;
      if (node && (node.type === "string" || node.type === "number" || node.type === "boolean" || node.type === "null")) {
        offsetForSeparator = node.offset + node.length;
        valueNode = node;
        node = node.parent;
      }
      if (!node) {
        this.addSchemaValueCompletions(schema.schema, "", collector, types);
        return;
      }
      if (node.type === "property" && offset > (node.colonOffset || 0)) {
        const valueNode2 = node.valueNode;
        if (valueNode2 && offset > valueNode2.offset + valueNode2.length) {
          return;
        }
        parentKey = node.keyNode.value;
        node = node.parent;
      }
      if (node && (parentKey !== void 0 || node.type === "array")) {
        const separatorAfter = this.evaluateSeparatorAfter(document2, offsetForSeparator);
        const matchingSchemas = doc.getMatchingSchemas(schema.schema, node.offset, valueNode);
        for (const s of matchingSchemas) {
          if (s.node === node && !s.inverted && s.schema) {
            if (node.type === "array" && s.schema.items) {
              let c = collector;
              if (s.schema.uniqueItems) {
                const existingValues = /* @__PURE__ */ new Set();
                node.children.forEach((n) => {
                  if (n.type !== "array" && n.type !== "object") {
                    existingValues.add(this.getLabelForValue(getNodeValue3(n)));
                  }
                });
                c = {
                  ...collector,
                  add(suggestion) {
                    if (!existingValues.has(suggestion.label)) {
                      collector.add(suggestion);
                    }
                  }
                };
              }
              if (Array.isArray(s.schema.items)) {
                const index = this.findItemAtOffset(node, document2, offset);
                if (index < s.schema.items.length) {
                  this.addSchemaValueCompletions(s.schema.items[index], separatorAfter, c, types);
                }
              } else {
                this.addSchemaValueCompletions(s.schema.items, separatorAfter, c, types);
              }
            }
            if (parentKey !== void 0) {
              let propertyMatched = false;
              if (s.schema.properties) {
                const propertySchema = s.schema.properties[parentKey];
                if (propertySchema) {
                  propertyMatched = true;
                  this.addSchemaValueCompletions(propertySchema, separatorAfter, collector, types);
                }
              }
              if (s.schema.patternProperties && !propertyMatched) {
                for (const pattern of Object.keys(s.schema.patternProperties)) {
                  const regex = extendedRegExp(pattern);
                  if (regex?.test(parentKey)) {
                    propertyMatched = true;
                    const propertySchema = s.schema.patternProperties[pattern];
                    this.addSchemaValueCompletions(propertySchema, separatorAfter, collector, types);
                  }
                }
              }
              if (s.schema.additionalProperties && !propertyMatched) {
                const propertySchema = s.schema.additionalProperties;
                this.addSchemaValueCompletions(propertySchema, separatorAfter, collector, types);
              }
            }
          }
        }
        if (parentKey === "$schema" && !node.parent) {
          this.addDollarSchemaCompletions(separatorAfter, collector);
        }
        if (types["boolean"]) {
          this.addBooleanValueCompletion(true, separatorAfter, collector);
          this.addBooleanValueCompletion(false, separatorAfter, collector);
        }
        if (types["null"]) {
          this.addNullValueCompletion(separatorAfter, collector);
        }
      }
    }
    getContributedValueCompletions(doc, node, offset, document2, collector, collectionPromises) {
      if (!node) {
        this.contributions.forEach((contribution) => {
          const collectPromise = contribution.collectDefaultCompletions(document2.uri, collector);
          if (collectPromise) {
            collectionPromises.push(collectPromise);
          }
        });
      } else {
        if (node.type === "string" || node.type === "number" || node.type === "boolean" || node.type === "null") {
          node = node.parent;
        }
        if (node && node.type === "property" && offset > (node.colonOffset || 0)) {
          const parentKey = node.keyNode.value;
          const valueNode = node.valueNode;
          if ((!valueNode || offset <= valueNode.offset + valueNode.length) && node.parent) {
            const location = getNodePath3(node.parent);
            this.contributions.forEach((contribution) => {
              const collectPromise = contribution.collectValueCompletions(document2.uri, location, parentKey, collector);
              if (collectPromise) {
                collectionPromises.push(collectPromise);
              }
            });
          }
        }
      }
    }
    addSchemaValueCompletions(schema, separatorAfter, collector, types) {
      if (typeof schema === "object") {
        this.addEnumValueCompletions(schema, separatorAfter, collector);
        this.addDefaultValueCompletions(schema, separatorAfter, collector);
        this.collectTypes(schema, types);
        if (Array.isArray(schema.allOf)) {
          schema.allOf.forEach((s) => this.addSchemaValueCompletions(s, separatorAfter, collector, types));
        }
        if (Array.isArray(schema.anyOf)) {
          schema.anyOf.forEach((s) => this.addSchemaValueCompletions(s, separatorAfter, collector, types));
        }
        if (Array.isArray(schema.oneOf)) {
          schema.oneOf.forEach((s) => this.addSchemaValueCompletions(s, separatorAfter, collector, types));
        }
      }
    }
    addDefaultValueCompletions(schema, separatorAfter, collector, arrayDepth = 0) {
      let hasProposals = false;
      if (isDefined(schema.default)) {
        let type = schema.type;
        let value = schema.default;
        for (let i = arrayDepth; i > 0; i--) {
          value = [value];
          type = "array";
        }
        const completionItem = {
          kind: this.getSuggestionKind(type),
          label: this.getLabelForValue(value),
          insertText: this.getInsertTextForValue(value, separatorAfter),
          insertTextFormat: InsertTextFormat.Snippet
        };
        if (this.doesSupportsLabelDetails()) {
          completionItem.labelDetails = { description: t("Default value") };
        } else {
          completionItem.detail = t("Default value");
        }
        collector.add(completionItem);
        hasProposals = true;
      }
      if (Array.isArray(schema.examples)) {
        schema.examples.forEach((example) => {
          let type = schema.type;
          let value = example;
          for (let i = arrayDepth; i > 0; i--) {
            value = [value];
            type = "array";
          }
          collector.add({
            kind: this.getSuggestionKind(type),
            label: this.getLabelForValue(value),
            insertText: this.getInsertTextForValue(value, separatorAfter),
            insertTextFormat: InsertTextFormat.Snippet
          });
          hasProposals = true;
        });
      }
      if (Array.isArray(schema.defaultSnippets)) {
        schema.defaultSnippets.forEach((s) => {
          let type = schema.type;
          let value = s.body;
          let label = s.label;
          let insertText;
          let filterText;
          if (isDefined(value)) {
            let type2 = schema.type;
            for (let i = arrayDepth; i > 0; i--) {
              value = [value];
              type2 = "array";
            }
            insertText = this.getInsertTextForSnippetValue(value, separatorAfter);
            filterText = this.getFilterTextForSnippetValue(value);
            label = label || this.getLabelForSnippetValue(value);
          } else if (typeof s.bodyText === "string") {
            let prefix = "", suffix = "", indent = "";
            for (let i = arrayDepth; i > 0; i--) {
              prefix = prefix + indent + "[\n";
              suffix = suffix + "\n" + indent + "]";
              indent += "	";
              type = "array";
            }
            insertText = prefix + indent + s.bodyText.split("\n").join("\n" + indent) + suffix + separatorAfter;
            label = label || insertText, filterText = insertText.replace(/[\n]/g, "");
          } else {
            return;
          }
          collector.add({
            kind: this.getSuggestionKind(type),
            label,
            documentation: this.fromMarkup(s.markdownDescription) || s.description,
            insertText,
            insertTextFormat: InsertTextFormat.Snippet,
            filterText
          });
          hasProposals = true;
        });
      }
      if (!hasProposals && typeof schema.items === "object" && !Array.isArray(schema.items) && arrayDepth < 5) {
        this.addDefaultValueCompletions(schema.items, separatorAfter, collector, arrayDepth + 1);
      }
    }
    addEnumValueCompletions(schema, separatorAfter, collector) {
      if (isDefined(schema.const)) {
        collector.add({
          kind: this.getSuggestionKind(schema.type),
          label: this.getLabelForValue(schema.const),
          insertText: this.getInsertTextForValue(schema.const, separatorAfter),
          insertTextFormat: InsertTextFormat.Snippet,
          documentation: this.fromMarkup(schema.markdownDescription) || schema.description
        });
      }
      if (Array.isArray(schema.enum)) {
        for (let i = 0, length = schema.enum.length; i < length; i++) {
          const enm = schema.enum[i];
          let documentation = this.fromMarkup(schema.markdownDescription) || schema.description;
          if (schema.markdownEnumDescriptions && i < schema.markdownEnumDescriptions.length && this.doesSupportMarkdown()) {
            documentation = this.fromMarkup(schema.markdownEnumDescriptions[i]);
          } else if (schema.enumDescriptions && i < schema.enumDescriptions.length) {
            documentation = schema.enumDescriptions[i];
          }
          collector.add({
            kind: this.getSuggestionKind(schema.type),
            label: this.getLabelForValue(enm),
            insertText: this.getInsertTextForValue(enm, separatorAfter),
            insertTextFormat: InsertTextFormat.Snippet,
            documentation
          });
        }
      }
    }
    collectTypes(schema, types) {
      if (Array.isArray(schema.enum) || isDefined(schema.const)) {
        return;
      }
      const type = schema.type;
      if (Array.isArray(type)) {
        type.forEach((t2) => types[t2] = true);
      } else if (type) {
        types[type] = true;
      }
    }
    addFillerValueCompletions(types, separatorAfter, collector) {
      if (types["object"]) {
        collector.add({
          kind: this.getSuggestionKind("object"),
          label: "{}",
          insertText: this.getInsertTextForGuessedValue({}, separatorAfter),
          insertTextFormat: InsertTextFormat.Snippet,
          detail: t("New object"),
          documentation: ""
        });
      }
      if (types["array"]) {
        collector.add({
          kind: this.getSuggestionKind("array"),
          label: "[]",
          insertText: this.getInsertTextForGuessedValue([], separatorAfter),
          insertTextFormat: InsertTextFormat.Snippet,
          detail: t("New array"),
          documentation: ""
        });
      }
    }
    addBooleanValueCompletion(value, separatorAfter, collector) {
      collector.add({
        kind: this.getSuggestionKind("boolean"),
        label: value ? "true" : "false",
        insertText: this.getInsertTextForValue(value, separatorAfter),
        insertTextFormat: InsertTextFormat.Snippet,
        documentation: ""
      });
    }
    addNullValueCompletion(separatorAfter, collector) {
      collector.add({
        kind: this.getSuggestionKind("null"),
        label: "null",
        insertText: "null" + separatorAfter,
        insertTextFormat: InsertTextFormat.Snippet,
        documentation: ""
      });
    }
    addDollarSchemaCompletions(separatorAfter, collector) {
      const schemaIds = this.schemaService.getRegisteredSchemaIds((schema) => schema === "http" || schema === "https");
      schemaIds.forEach((schemaId) => {
        if (schemaId.startsWith("http://json-schema.org/draft-")) {
          schemaId = schemaId + "#";
        }
        collector.add({
          kind: CompletionItemKind2.Module,
          label: this.getLabelForValue(schemaId),
          filterText: this.getFilterTextForValue(schemaId),
          insertText: this.getInsertTextForValue(schemaId, separatorAfter),
          insertTextFormat: InsertTextFormat.Snippet,
          documentation: ""
        });
      });
    }
    getLabelForValue(value) {
      return JSON.stringify(value);
    }
    getValueFromLabel(value) {
      return JSON.parse(value);
    }
    getFilterTextForValue(value) {
      return JSON.stringify(value);
    }
    getFilterTextForSnippetValue(value) {
      return JSON.stringify(value).replace(/\$\{\d+:([^}]+)\}|\$\d+/g, "$1");
    }
    getLabelForSnippetValue(value) {
      const label = JSON.stringify(value);
      return label.replace(/\$\{\d+:([^}]+)\}|\$\d+/g, "$1");
    }
    getInsertTextForPlainText(text) {
      return text.replace(/[\\\$\}]/g, "\\$&");
    }
    getInsertTextForValue(value, separatorAfter) {
      const text = JSON.stringify(value, null, "	");
      if (text === "{}") {
        return "{$1}" + separatorAfter;
      } else if (text === "[]") {
        return "[$1]" + separatorAfter;
      }
      return this.getInsertTextForPlainText(text + separatorAfter);
    }
    getInsertTextForSnippetValue(value, separatorAfter) {
      const replacer = (value2) => {
        if (typeof value2 === "string") {
          if (value2[0] === "^") {
            return value2.substr(1);
          }
        }
        return JSON.stringify(value2);
      };
      return stringifyObject(value, "", replacer) + separatorAfter;
    }
    getInsertTextForGuessedValue(value, separatorAfter) {
      switch (typeof value) {
        case "object":
          if (value === null) {
            return "${1:null}" + separatorAfter;
          }
          return this.getInsertTextForValue(value, separatorAfter);
        case "string":
          let snippetValue = JSON.stringify(value);
          snippetValue = snippetValue.substr(1, snippetValue.length - 2);
          snippetValue = this.getInsertTextForPlainText(snippetValue);
          return '"${1:' + snippetValue + '}"' + separatorAfter;
        case "number":
        case "boolean":
          return "${1:" + JSON.stringify(value) + "}" + separatorAfter;
      }
      return this.getInsertTextForValue(value, separatorAfter);
    }
    getSuggestionKind(type) {
      if (Array.isArray(type)) {
        const array = type;
        type = array.length > 0 ? array[0] : void 0;
      }
      if (!type) {
        return CompletionItemKind2.Value;
      }
      switch (type) {
        case "string":
          return CompletionItemKind2.Value;
        case "object":
          return CompletionItemKind2.Module;
        case "property":
          return CompletionItemKind2.Property;
        default:
          return CompletionItemKind2.Value;
      }
    }
    getLabelTextForMatchingNode(node, document2) {
      switch (node.type) {
        case "array":
          return "[]";
        case "object":
          return "{}";
        default:
          const content = document2.getText().substr(node.offset, node.length);
          return content;
      }
    }
    getInsertTextForMatchingNode(node, document2, separatorAfter) {
      switch (node.type) {
        case "array":
          return this.getInsertTextForValue([], separatorAfter);
        case "object":
          return this.getInsertTextForValue({}, separatorAfter);
        default:
          const content = document2.getText().substr(node.offset, node.length) + separatorAfter;
          return this.getInsertTextForPlainText(content);
      }
    }
    getInsertTextForProperty(key, propertySchema, addValue, separatorAfter) {
      const propertyText = this.getInsertTextForValue(key, "");
      if (!addValue) {
        return propertyText;
      }
      const resultText = propertyText + ": ";
      let value;
      let nValueProposals = 0;
      if (propertySchema) {
        if (Array.isArray(propertySchema.defaultSnippets)) {
          if (propertySchema.defaultSnippets.length === 1) {
            const body = propertySchema.defaultSnippets[0].body;
            if (isDefined(body)) {
              value = this.getInsertTextForSnippetValue(body, "");
            }
          }
          nValueProposals += propertySchema.defaultSnippets.length;
        }
        if (propertySchema.enum) {
          if (!value && propertySchema.enum.length === 1) {
            value = this.getInsertTextForGuessedValue(propertySchema.enum[0], "");
          }
          nValueProposals += propertySchema.enum.length;
        }
        if (isDefined(propertySchema.const)) {
          if (!value) {
            value = this.getInsertTextForGuessedValue(propertySchema.const, "");
          }
          nValueProposals++;
        }
        if (isDefined(propertySchema.default)) {
          if (!value) {
            value = this.getInsertTextForGuessedValue(propertySchema.default, "");
          }
          nValueProposals++;
        }
        if (Array.isArray(propertySchema.examples) && propertySchema.examples.length) {
          if (!value) {
            value = this.getInsertTextForGuessedValue(propertySchema.examples[0], "");
          }
          nValueProposals += propertySchema.examples.length;
        }
        if (nValueProposals === 0) {
          let type = Array.isArray(propertySchema.type) ? propertySchema.type[0] : propertySchema.type;
          if (!type) {
            if (propertySchema.properties) {
              type = "object";
            } else if (propertySchema.items) {
              type = "array";
            }
          }
          switch (type) {
            case "boolean":
              value = "$1";
              break;
            case "string":
              value = '"$1"';
              break;
            case "object":
              value = "{$1}";
              break;
            case "array":
              value = "[$1]";
              break;
            case "number":
            case "integer":
              value = "${1:0}";
              break;
            case "null":
              value = "${1:null}";
              break;
            default:
              return propertyText;
          }
        }
      }
      if (!value || nValueProposals > 1) {
        value = "$1";
      }
      return resultText + value + separatorAfter;
    }
    getCurrentWord(document2, offset) {
      let i = offset - 1;
      const text = document2.getText();
      while (i >= 0 && ' 	\n\r\v":{[,]}'.indexOf(text.charAt(i)) === -1) {
        i--;
      }
      return text.substring(i + 1, offset);
    }
    evaluateSeparatorAfter(document2, offset) {
      const scanner = createScanner2(document2.getText(), true);
      scanner.setPosition(offset);
      const token = scanner.scan();
      switch (token) {
        case 5:
        case 2:
        case 4:
        case 17:
          return "";
        default:
          return ",";
      }
    }
    findItemAtOffset(node, document2, offset) {
      const scanner = createScanner2(document2.getText(), true);
      const children = node.items;
      for (let i = children.length - 1; i >= 0; i--) {
        const child = children[i];
        if (offset > child.offset + child.length) {
          scanner.setPosition(child.offset + child.length);
          const token = scanner.scan();
          if (token === 5 && offset >= scanner.getTokenOffset() + scanner.getTokenLength()) {
            return i + 1;
          }
          return i;
        } else if (offset >= child.offset) {
          return i;
        }
      }
      return 0;
    }
    isInComment(document2, start, offset) {
      const scanner = createScanner2(document2.getText(), false);
      scanner.setPosition(start);
      let token = scanner.scan();
      while (token !== 17 && scanner.getTokenOffset() + scanner.getTokenLength() < offset) {
        token = scanner.scan();
      }
      return (token === 12 || token === 13) && scanner.getTokenOffset() <= offset;
    }
    fromMarkup(markupString) {
      if (markupString && this.doesSupportMarkdown()) {
        return {
          kind: MarkupKind.Markdown,
          value: markupString
        };
      }
      return void 0;
    }
    doesSupportMarkdown() {
      if (!isDefined(this.supportsMarkdown)) {
        const documentationFormat = this.clientCapabilities.textDocument?.completion?.completionItem?.documentationFormat;
        this.supportsMarkdown = Array.isArray(documentationFormat) && documentationFormat.indexOf(MarkupKind.Markdown) !== -1;
      }
      return this.supportsMarkdown;
    }
    doesSupportsCommitCharacters() {
      if (!isDefined(this.supportsCommitCharacters)) {
        this.labelDetailsSupport = this.clientCapabilities.textDocument?.completion?.completionItem?.commitCharactersSupport;
      }
      return this.supportsCommitCharacters;
    }
    doesSupportsLabelDetails() {
      if (!isDefined(this.labelDetailsSupport)) {
        this.labelDetailsSupport = this.clientCapabilities.textDocument?.completion?.completionItem?.labelDetailsSupport;
      }
      return this.labelDetailsSupport;
    }
  };
  var JSONHover = class {
    constructor(schemaService, contributions = [], promiseConstructor) {
      this.schemaService = schemaService;
      this.contributions = contributions;
      this.promise = promiseConstructor || Promise;
    }
    doHover(document2, position, doc) {
      const offset = document2.offsetAt(position);
      let node = doc.getNodeFromOffset(offset);
      if (!node || (node.type === "object" || node.type === "array") && offset > node.offset + 1 && offset < node.offset + node.length - 1) {
        return this.promise.resolve(null);
      }
      const hoverRangeNode = node;
      if (node.type === "string") {
        const parent = node.parent;
        if (parent && parent.type === "property" && parent.keyNode === node) {
          node = parent.valueNode;
          if (!node) {
            return this.promise.resolve(null);
          }
        }
      }
      const hoverRange = Range2.create(document2.positionAt(hoverRangeNode.offset), document2.positionAt(hoverRangeNode.offset + hoverRangeNode.length));
      const createHover = (contents) => {
        const result = {
          contents,
          range: hoverRange
        };
        return result;
      };
      const location = getNodePath3(node);
      for (let i = this.contributions.length - 1; i >= 0; i--) {
        const contribution = this.contributions[i];
        const promise = contribution.getInfoContribution(document2.uri, location);
        if (promise) {
          return promise.then((htmlContent) => createHover(htmlContent));
        }
      }
      return this.schemaService.getSchemaForResource(document2.uri, doc).then((schema) => {
        if (schema && node) {
          const matchingSchemas = doc.getMatchingSchemas(schema.schema, node.offset);
          let title = void 0;
          let markdownDescription = void 0;
          let markdownEnumValueDescription = void 0, enumValue = void 0;
          matchingSchemas.every((s) => {
            if (s.node === node && !s.inverted && s.schema) {
              title = title || s.schema.title;
              markdownDescription = markdownDescription || s.schema.markdownDescription || toMarkdown(s.schema.description);
              if (s.schema.enum) {
                const idx = s.schema.enum.indexOf(getNodeValue3(node));
                if (s.schema.markdownEnumDescriptions) {
                  markdownEnumValueDescription = s.schema.markdownEnumDescriptions[idx];
                } else if (s.schema.enumDescriptions) {
                  markdownEnumValueDescription = toMarkdown(s.schema.enumDescriptions[idx]);
                }
                if (markdownEnumValueDescription) {
                  enumValue = s.schema.enum[idx];
                  if (typeof enumValue !== "string") {
                    enumValue = JSON.stringify(enumValue);
                  }
                }
              }
            }
            return true;
          });
          let result = "";
          if (title) {
            result = toMarkdown(title);
          }
          if (markdownDescription) {
            if (result.length > 0) {
              result += "\n\n";
            }
            result += markdownDescription;
          }
          if (markdownEnumValueDescription) {
            if (result.length > 0) {
              result += "\n\n";
            }
            result += `\`${toMarkdownCodeBlock(enumValue)}\`: ${markdownEnumValueDescription}`;
          }
          return createHover([result]);
        }
        return null;
      });
    }
  };
  function toMarkdown(plain) {
    if (plain) {
      const res = plain.replace(/([^\n\r])(\r?\n)([^\n\r])/gm, "$1\n\n$3");
      return res.replace(/[\\`*_{}[\]()#+\-.!]/g, "\\$&");
    }
    return void 0;
  }
  function toMarkdownCodeBlock(content) {
    if (content.indexOf("`") !== -1) {
      return "`` " + content + " ``";
    }
    return content;
  }
  var JSONValidation = class {
    constructor(jsonSchemaService, promiseConstructor) {
      this.jsonSchemaService = jsonSchemaService;
      this.promise = promiseConstructor;
      this.validationEnabled = true;
    }
    configure(raw) {
      if (raw) {
        this.validationEnabled = raw.validate !== false;
        this.commentSeverity = raw.allowComments ? void 0 : DiagnosticSeverity.Error;
      }
    }
    doValidation(textDocument, jsonDocument, documentSettings, schema) {
      if (!this.validationEnabled) {
        return this.promise.resolve([]);
      }
      const diagnostics = [];
      const added = {};
      const addProblem = (problem) => {
        const signature = problem.range.start.line + " " + problem.range.start.character + " " + problem.message;
        if (!added[signature]) {
          added[signature] = true;
          diagnostics.push(problem);
        }
      };
      const getDiagnostics = (schema2) => {
        let trailingCommaSeverity = documentSettings?.trailingCommas ? toDiagnosticSeverity(documentSettings.trailingCommas) : DiagnosticSeverity.Error;
        let commentSeverity = documentSettings?.comments ? toDiagnosticSeverity(documentSettings.comments) : this.commentSeverity;
        let schemaValidation = documentSettings?.schemaValidation ? toDiagnosticSeverity(documentSettings.schemaValidation) : DiagnosticSeverity.Warning;
        let schemaRequest = documentSettings?.schemaRequest ? toDiagnosticSeverity(documentSettings.schemaRequest) : DiagnosticSeverity.Warning;
        if (schema2) {
          const addSchemaProblem = (errorMessage, errorCode) => {
            if (jsonDocument.root && schemaRequest) {
              const astRoot = jsonDocument.root;
              const property = astRoot.type === "object" ? astRoot.properties[0] : void 0;
              if (property && property.keyNode.value === "$schema") {
                const node = property.valueNode || property;
                const range = Range2.create(textDocument.positionAt(node.offset), textDocument.positionAt(node.offset + node.length));
                addProblem(Diagnostic.create(range, errorMessage, schemaRequest, errorCode));
              } else {
                const range = Range2.create(textDocument.positionAt(astRoot.offset), textDocument.positionAt(astRoot.offset + 1));
                addProblem(Diagnostic.create(range, errorMessage, schemaRequest, errorCode));
              }
            }
          };
          if (schema2.errors.length) {
            addSchemaProblem(schema2.errors[0], ErrorCode.SchemaResolveError);
          } else if (schemaValidation) {
            for (const warning of schema2.warnings) {
              addSchemaProblem(warning, ErrorCode.SchemaUnsupportedFeature);
            }
            const semanticErrors = jsonDocument.validate(textDocument, schema2.schema, schemaValidation, documentSettings?.schemaDraft);
            if (semanticErrors) {
              semanticErrors.forEach(addProblem);
            }
          }
          if (schemaAllowsComments(schema2.schema)) {
            commentSeverity = void 0;
          }
          if (schemaAllowsTrailingCommas(schema2.schema)) {
            trailingCommaSeverity = void 0;
          }
        }
        for (const p of jsonDocument.syntaxErrors) {
          if (p.code === ErrorCode.TrailingComma) {
            if (typeof trailingCommaSeverity !== "number") {
              continue;
            }
            p.severity = trailingCommaSeverity;
          }
          addProblem(p);
        }
        if (typeof commentSeverity === "number") {
          const message = t("Comments are not permitted in JSON.");
          jsonDocument.comments.forEach((c) => {
            addProblem(Diagnostic.create(c, message, commentSeverity, ErrorCode.CommentNotPermitted));
          });
        }
        return diagnostics;
      };
      if (schema) {
        const uri = schema.id || "schemaservice://untitled/" + idCounter++;
        const handle = this.jsonSchemaService.registerExternalSchema({ uri, schema });
        return handle.getResolvedSchema().then((resolvedSchema) => {
          return getDiagnostics(resolvedSchema);
        });
      }
      return this.jsonSchemaService.getSchemaForResource(textDocument.uri, jsonDocument).then((schema2) => {
        return getDiagnostics(schema2);
      });
    }
    getLanguageStatus(textDocument, jsonDocument) {
      return { schemas: this.jsonSchemaService.getSchemaURIsForResource(textDocument.uri, jsonDocument) };
    }
  };
  var idCounter = 0;
  function schemaAllowsComments(schemaRef) {
    if (schemaRef && typeof schemaRef === "object") {
      if (isBoolean(schemaRef.allowComments)) {
        return schemaRef.allowComments;
      }
      if (schemaRef.allOf) {
        for (const schema of schemaRef.allOf) {
          const allow = schemaAllowsComments(schema);
          if (isBoolean(allow)) {
            return allow;
          }
        }
      }
    }
    return void 0;
  }
  function schemaAllowsTrailingCommas(schemaRef) {
    if (schemaRef && typeof schemaRef === "object") {
      if (isBoolean(schemaRef.allowTrailingCommas)) {
        return schemaRef.allowTrailingCommas;
      }
      const deprSchemaRef = schemaRef;
      if (isBoolean(deprSchemaRef["allowsTrailingCommas"])) {
        return deprSchemaRef["allowsTrailingCommas"];
      }
      if (schemaRef.allOf) {
        for (const schema of schemaRef.allOf) {
          const allow = schemaAllowsTrailingCommas(schema);
          if (isBoolean(allow)) {
            return allow;
          }
        }
      }
    }
    return void 0;
  }
  function toDiagnosticSeverity(severityLevel) {
    switch (severityLevel) {
      case "error":
        return DiagnosticSeverity.Error;
      case "warning":
        return DiagnosticSeverity.Warning;
      case "ignore":
        return void 0;
    }
    return void 0;
  }
  var Digit0 = 48;
  var Digit9 = 57;
  var A = 65;
  var a = 97;
  var f = 102;
  function hexDigit(charCode) {
    if (charCode < Digit0) {
      return 0;
    }
    if (charCode <= Digit9) {
      return charCode - Digit0;
    }
    if (charCode < a) {
      charCode += a - A;
    }
    if (charCode >= a && charCode <= f) {
      return charCode - a + 10;
    }
    return 0;
  }
  function colorFromHex(text) {
    if (text[0] !== "#") {
      return void 0;
    }
    switch (text.length) {
      case 4:
        return {
          red: hexDigit(text.charCodeAt(1)) * 17 / 255,
          green: hexDigit(text.charCodeAt(2)) * 17 / 255,
          blue: hexDigit(text.charCodeAt(3)) * 17 / 255,
          alpha: 1
        };
      case 5:
        return {
          red: hexDigit(text.charCodeAt(1)) * 17 / 255,
          green: hexDigit(text.charCodeAt(2)) * 17 / 255,
          blue: hexDigit(text.charCodeAt(3)) * 17 / 255,
          alpha: hexDigit(text.charCodeAt(4)) * 17 / 255
        };
      case 7:
        return {
          red: (hexDigit(text.charCodeAt(1)) * 16 + hexDigit(text.charCodeAt(2))) / 255,
          green: (hexDigit(text.charCodeAt(3)) * 16 + hexDigit(text.charCodeAt(4))) / 255,
          blue: (hexDigit(text.charCodeAt(5)) * 16 + hexDigit(text.charCodeAt(6))) / 255,
          alpha: 1
        };
      case 9:
        return {
          red: (hexDigit(text.charCodeAt(1)) * 16 + hexDigit(text.charCodeAt(2))) / 255,
          green: (hexDigit(text.charCodeAt(3)) * 16 + hexDigit(text.charCodeAt(4))) / 255,
          blue: (hexDigit(text.charCodeAt(5)) * 16 + hexDigit(text.charCodeAt(6))) / 255,
          alpha: (hexDigit(text.charCodeAt(7)) * 16 + hexDigit(text.charCodeAt(8))) / 255
        };
    }
    return void 0;
  }
  var JSONDocumentSymbols = class {
    constructor(schemaService) {
      this.schemaService = schemaService;
    }
    findDocumentSymbols(document2, doc, context = { resultLimit: Number.MAX_VALUE }) {
      const root = doc.root;
      if (!root) {
        return [];
      }
      let limit = context.resultLimit || Number.MAX_VALUE;
      const resourceString = document2.uri;
      if (resourceString === "vscode://defaultsettings/keybindings.json" || endsWith(resourceString.toLowerCase(), "/user/keybindings.json")) {
        if (root.type === "array") {
          const result2 = [];
          for (const item of root.items) {
            if (item.type === "object") {
              for (const property of item.properties) {
                if (property.keyNode.value === "key" && property.valueNode) {
                  const location = Location.create(document2.uri, getRange(document2, item));
                  result2.push({ name: getName(property.valueNode), kind: SymbolKind2.Function, location });
                  limit--;
                  if (limit <= 0) {
                    if (context && context.onResultLimitExceeded) {
                      context.onResultLimitExceeded(resourceString);
                    }
                    return result2;
                  }
                }
              }
            }
          }
          return result2;
        }
      }
      const toVisit = [
        { node: root, containerName: "" }
      ];
      let nextToVisit = 0;
      let limitExceeded = false;
      const result = [];
      const collectOutlineEntries = (node, containerName) => {
        if (node.type === "array") {
          node.items.forEach((node2) => {
            if (node2) {
              toVisit.push({ node: node2, containerName });
            }
          });
        } else if (node.type === "object") {
          node.properties.forEach((property) => {
            const valueNode = property.valueNode;
            if (valueNode) {
              if (limit > 0) {
                limit--;
                const location = Location.create(document2.uri, getRange(document2, property));
                const childContainerName = containerName ? containerName + "." + property.keyNode.value : property.keyNode.value;
                result.push({ name: this.getKeyLabel(property), kind: this.getSymbolKind(valueNode.type), location, containerName });
                toVisit.push({ node: valueNode, containerName: childContainerName });
              } else {
                limitExceeded = true;
              }
            }
          });
        }
      };
      while (nextToVisit < toVisit.length) {
        const next = toVisit[nextToVisit++];
        collectOutlineEntries(next.node, next.containerName);
      }
      if (limitExceeded && context && context.onResultLimitExceeded) {
        context.onResultLimitExceeded(resourceString);
      }
      return result;
    }
    findDocumentSymbols2(document2, doc, context = { resultLimit: Number.MAX_VALUE }) {
      const root = doc.root;
      if (!root) {
        return [];
      }
      let limit = context.resultLimit || Number.MAX_VALUE;
      const resourceString = document2.uri;
      if (resourceString === "vscode://defaultsettings/keybindings.json" || endsWith(resourceString.toLowerCase(), "/user/keybindings.json")) {
        if (root.type === "array") {
          const result2 = [];
          for (const item of root.items) {
            if (item.type === "object") {
              for (const property of item.properties) {
                if (property.keyNode.value === "key" && property.valueNode) {
                  const range = getRange(document2, item);
                  const selectionRange = getRange(document2, property.keyNode);
                  result2.push({ name: getName(property.valueNode), kind: SymbolKind2.Function, range, selectionRange });
                  limit--;
                  if (limit <= 0) {
                    if (context && context.onResultLimitExceeded) {
                      context.onResultLimitExceeded(resourceString);
                    }
                    return result2;
                  }
                }
              }
            }
          }
          return result2;
        }
      }
      const result = [];
      const toVisit = [
        { node: root, result }
      ];
      let nextToVisit = 0;
      let limitExceeded = false;
      const collectOutlineEntries = (node, result2) => {
        if (node.type === "array") {
          node.items.forEach((node2, index) => {
            if (node2) {
              if (limit > 0) {
                limit--;
                const range = getRange(document2, node2);
                const selectionRange = range;
                const name = String(index);
                const symbol = { name, kind: this.getSymbolKind(node2.type), range, selectionRange, children: [] };
                result2.push(symbol);
                toVisit.push({ result: symbol.children, node: node2 });
              } else {
                limitExceeded = true;
              }
            }
          });
        } else if (node.type === "object") {
          node.properties.forEach((property) => {
            const valueNode = property.valueNode;
            if (valueNode) {
              if (limit > 0) {
                limit--;
                const range = getRange(document2, property);
                const selectionRange = getRange(document2, property.keyNode);
                const children = [];
                const symbol = { name: this.getKeyLabel(property), kind: this.getSymbolKind(valueNode.type), range, selectionRange, children, detail: this.getDetail(valueNode) };
                result2.push(symbol);
                toVisit.push({ result: children, node: valueNode });
              } else {
                limitExceeded = true;
              }
            }
          });
        }
      };
      while (nextToVisit < toVisit.length) {
        const next = toVisit[nextToVisit++];
        collectOutlineEntries(next.node, next.result);
      }
      if (limitExceeded && context && context.onResultLimitExceeded) {
        context.onResultLimitExceeded(resourceString);
      }
      return result;
    }
    getSymbolKind(nodeType) {
      switch (nodeType) {
        case "object":
          return SymbolKind2.Module;
        case "string":
          return SymbolKind2.String;
        case "number":
          return SymbolKind2.Number;
        case "array":
          return SymbolKind2.Array;
        case "boolean":
          return SymbolKind2.Boolean;
        default:
          return SymbolKind2.Variable;
      }
    }
    getKeyLabel(property) {
      let name = property.keyNode.value;
      if (name) {
        name = name.replace(/[\n]/g, "\u21B5");
      }
      if (name && name.trim()) {
        return name;
      }
      return `"${name}"`;
    }
    getDetail(node) {
      if (!node) {
        return void 0;
      }
      if (node.type === "boolean" || node.type === "number" || node.type === "null" || node.type === "string") {
        return String(node.value);
      } else {
        if (node.type === "array") {
          return node.children.length ? void 0 : "[]";
        } else if (node.type === "object") {
          return node.children.length ? void 0 : "{}";
        }
      }
      return void 0;
    }
    findDocumentColors(document2, doc, context) {
      return this.schemaService.getSchemaForResource(document2.uri, doc).then((schema) => {
        const result = [];
        if (schema) {
          let limit = context && typeof context.resultLimit === "number" ? context.resultLimit : Number.MAX_VALUE;
          const matchingSchemas = doc.getMatchingSchemas(schema.schema);
          const visitedNode = {};
          for (const s of matchingSchemas) {
            if (!s.inverted && s.schema && (s.schema.format === "color" || s.schema.format === "color-hex") && s.node && s.node.type === "string") {
              const nodeId = String(s.node.offset);
              if (!visitedNode[nodeId]) {
                const color = colorFromHex(getNodeValue3(s.node));
                if (color) {
                  const range = getRange(document2, s.node);
                  result.push({ color, range });
                }
                visitedNode[nodeId] = true;
                limit--;
                if (limit <= 0) {
                  if (context && context.onResultLimitExceeded) {
                    context.onResultLimitExceeded(document2.uri);
                  }
                  return result;
                }
              }
            }
          }
        }
        return result;
      });
    }
    getColorPresentations(document2, doc, color, range) {
      const result = [];
      const red256 = Math.round(color.red * 255), green256 = Math.round(color.green * 255), blue256 = Math.round(color.blue * 255);
      function toTwoDigitHex(n) {
        const r = n.toString(16);
        return r.length !== 2 ? "0" + r : r;
      }
      let label;
      if (color.alpha === 1) {
        label = `#${toTwoDigitHex(red256)}${toTwoDigitHex(green256)}${toTwoDigitHex(blue256)}`;
      } else {
        label = `#${toTwoDigitHex(red256)}${toTwoDigitHex(green256)}${toTwoDigitHex(blue256)}${toTwoDigitHex(Math.round(color.alpha * 255))}`;
      }
      result.push({ label, textEdit: TextEdit.replace(range, JSON.stringify(label)) });
      return result;
    }
  };
  function getRange(document2, node) {
    return Range2.create(document2.positionAt(node.offset), document2.positionAt(node.offset + node.length));
  }
  function getName(node) {
    return getNodeValue3(node) || t("<empty>");
  }
  var schemaContributions = {
    schemaAssociations: [],
    schemas: {
      // bundle the schema-schema to include (localized) descriptions
      "http://json-schema.org/draft-04/schema#": {
        "$schema": "http://json-schema.org/draft-04/schema#",
        "definitions": {
          "schemaArray": {
            "type": "array",
            "minItems": 1,
            "items": {
              "$ref": "#"
            }
          },
          "positiveInteger": {
            "type": "integer",
            "minimum": 0
          },
          "positiveIntegerDefault0": {
            "allOf": [
              {
                "$ref": "#/definitions/positiveInteger"
              },
              {
                "default": 0
              }
            ]
          },
          "simpleTypes": {
            "type": "string",
            "enum": [
              "array",
              "boolean",
              "integer",
              "null",
              "number",
              "object",
              "string"
            ]
          },
          "stringArray": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "minItems": 1,
            "uniqueItems": true
          }
        },
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uri"
          },
          "$schema": {
            "type": "string",
            "format": "uri"
          },
          "title": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "default": {},
          "multipleOf": {
            "type": "number",
            "minimum": 0,
            "exclusiveMinimum": true
          },
          "maximum": {
            "type": "number"
          },
          "exclusiveMaximum": {
            "type": "boolean",
            "default": false
          },
          "minimum": {
            "type": "number"
          },
          "exclusiveMinimum": {
            "type": "boolean",
            "default": false
          },
          "maxLength": {
            "allOf": [
              {
                "$ref": "#/definitions/positiveInteger"
              }
            ]
          },
          "minLength": {
            "allOf": [
              {
                "$ref": "#/definitions/positiveIntegerDefault0"
              }
            ]
          },
          "pattern": {
            "type": "string",
            "format": "regex"
          },
          "additionalItems": {
            "anyOf": [
              {
                "type": "boolean"
              },
              {
                "$ref": "#"
              }
            ],
            "default": {}
          },
          "items": {
            "anyOf": [
              {
                "$ref": "#"
              },
              {
                "$ref": "#/definitions/schemaArray"
              }
            ],
            "default": {}
          },
          "maxItems": {
            "allOf": [
              {
                "$ref": "#/definitions/positiveInteger"
              }
            ]
          },
          "minItems": {
            "allOf": [
              {
                "$ref": "#/definitions/positiveIntegerDefault0"
              }
            ]
          },
          "uniqueItems": {
            "type": "boolean",
            "default": false
          },
          "maxProperties": {
            "allOf": [
              {
                "$ref": "#/definitions/positiveInteger"
              }
            ]
          },
          "minProperties": {
            "allOf": [
              {
                "$ref": "#/definitions/positiveIntegerDefault0"
              }
            ]
          },
          "required": {
            "allOf": [
              {
                "$ref": "#/definitions/stringArray"
              }
            ]
          },
          "additionalProperties": {
            "anyOf": [
              {
                "type": "boolean"
              },
              {
                "$ref": "#"
              }
            ],
            "default": {}
          },
          "definitions": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#"
            },
            "default": {}
          },
          "properties": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#"
            },
            "default": {}
          },
          "patternProperties": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#"
            },
            "default": {}
          },
          "dependencies": {
            "type": "object",
            "additionalProperties": {
              "anyOf": [
                {
                  "$ref": "#"
                },
                {
                  "$ref": "#/definitions/stringArray"
                }
              ]
            }
          },
          "enum": {
            "type": "array",
            "minItems": 1,
            "uniqueItems": true
          },
          "type": {
            "anyOf": [
              {
                "$ref": "#/definitions/simpleTypes"
              },
              {
                "type": "array",
                "items": {
                  "$ref": "#/definitions/simpleTypes"
                },
                "minItems": 1,
                "uniqueItems": true
              }
            ]
          },
          "format": {
            "anyOf": [
              {
                "type": "string",
                "enum": [
                  "date-time",
                  "uri",
                  "email",
                  "hostname",
                  "ipv4",
                  "ipv6",
                  "regex"
                ]
              },
              {
                "type": "string"
              }
            ]
          },
          "allOf": {
            "allOf": [
              {
                "$ref": "#/definitions/schemaArray"
              }
            ]
          },
          "anyOf": {
            "allOf": [
              {
                "$ref": "#/definitions/schemaArray"
              }
            ]
          },
          "oneOf": {
            "allOf": [
              {
                "$ref": "#/definitions/schemaArray"
              }
            ]
          },
          "not": {
            "allOf": [
              {
                "$ref": "#"
              }
            ]
          }
        },
        "dependencies": {
          "exclusiveMaximum": [
            "maximum"
          ],
          "exclusiveMinimum": [
            "minimum"
          ]
        },
        "default": {}
      },
      "http://json-schema.org/draft-07/schema#": {
        "definitions": {
          "schemaArray": {
            "type": "array",
            "minItems": 1,
            "items": { "$ref": "#" }
          },
          "nonNegativeInteger": {
            "type": "integer",
            "minimum": 0
          },
          "nonNegativeIntegerDefault0": {
            "allOf": [
              { "$ref": "#/definitions/nonNegativeInteger" },
              { "default": 0 }
            ]
          },
          "simpleTypes": {
            "enum": [
              "array",
              "boolean",
              "integer",
              "null",
              "number",
              "object",
              "string"
            ]
          },
          "stringArray": {
            "type": "array",
            "items": { "type": "string" },
            "uniqueItems": true,
            "default": []
          }
        },
        "type": ["object", "boolean"],
        "properties": {
          "$id": {
            "type": "string",
            "format": "uri-reference"
          },
          "$schema": {
            "type": "string",
            "format": "uri"
          },
          "$ref": {
            "type": "string",
            "format": "uri-reference"
          },
          "$comment": {
            "type": "string"
          },
          "title": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "default": true,
          "readOnly": {
            "type": "boolean",
            "default": false
          },
          "examples": {
            "type": "array",
            "items": true
          },
          "multipleOf": {
            "type": "number",
            "exclusiveMinimum": 0
          },
          "maximum": {
            "type": "number"
          },
          "exclusiveMaximum": {
            "type": "number"
          },
          "minimum": {
            "type": "number"
          },
          "exclusiveMinimum": {
            "type": "number"
          },
          "maxLength": { "$ref": "#/definitions/nonNegativeInteger" },
          "minLength": { "$ref": "#/definitions/nonNegativeIntegerDefault0" },
          "pattern": {
            "type": "string",
            "format": "regex"
          },
          "additionalItems": { "$ref": "#" },
          "items": {
            "anyOf": [
              { "$ref": "#" },
              { "$ref": "#/definitions/schemaArray" }
            ],
            "default": true
          },
          "maxItems": { "$ref": "#/definitions/nonNegativeInteger" },
          "minItems": { "$ref": "#/definitions/nonNegativeIntegerDefault0" },
          "uniqueItems": {
            "type": "boolean",
            "default": false
          },
          "contains": { "$ref": "#" },
          "maxProperties": { "$ref": "#/definitions/nonNegativeInteger" },
          "minProperties": { "$ref": "#/definitions/nonNegativeIntegerDefault0" },
          "required": { "$ref": "#/definitions/stringArray" },
          "additionalProperties": { "$ref": "#" },
          "definitions": {
            "type": "object",
            "additionalProperties": { "$ref": "#" },
            "default": {}
          },
          "properties": {
            "type": "object",
            "additionalProperties": { "$ref": "#" },
            "default": {}
          },
          "patternProperties": {
            "type": "object",
            "additionalProperties": { "$ref": "#" },
            "propertyNames": { "format": "regex" },
            "default": {}
          },
          "dependencies": {
            "type": "object",
            "additionalProperties": {
              "anyOf": [
                { "$ref": "#" },
                { "$ref": "#/definitions/stringArray" }
              ]
            }
          },
          "propertyNames": { "$ref": "#" },
          "const": true,
          "enum": {
            "type": "array",
            "items": true,
            "minItems": 1,
            "uniqueItems": true
          },
          "type": {
            "anyOf": [
              { "$ref": "#/definitions/simpleTypes" },
              {
                "type": "array",
                "items": { "$ref": "#/definitions/simpleTypes" },
                "minItems": 1,
                "uniqueItems": true
              }
            ]
          },
          "format": { "type": "string" },
          "contentMediaType": { "type": "string" },
          "contentEncoding": { "type": "string" },
          "if": { "$ref": "#" },
          "then": { "$ref": "#" },
          "else": { "$ref": "#" },
          "allOf": { "$ref": "#/definitions/schemaArray" },
          "anyOf": { "$ref": "#/definitions/schemaArray" },
          "oneOf": { "$ref": "#/definitions/schemaArray" },
          "not": { "$ref": "#" }
        },
        "default": true
      }
    }
  };
  var descriptions = {
    id: t("A unique identifier for the schema."),
    $schema: t("The schema to verify this document against."),
    title: t("A descriptive title of the element."),
    description: t("A long description of the element. Used in hover menus and suggestions."),
    default: t("A default value. Used by suggestions."),
    multipleOf: t("A number that should cleanly divide the current value (i.e. have no remainder)."),
    maximum: t("The maximum numerical value, inclusive by default."),
    exclusiveMaximum: t("Makes the maximum property exclusive."),
    minimum: t("The minimum numerical value, inclusive by default."),
    exclusiveMinimum: t("Makes the minimum property exclusive."),
    maxLength: t("The maximum length of a string."),
    minLength: t("The minimum length of a string."),
    pattern: t("A regular expression to match the string against. It is not implicitly anchored."),
    additionalItems: t("For arrays, only when items is set as an array. If it is a schema, then this schema validates items after the ones specified by the items array. If it is false, then additional items will cause validation to fail."),
    items: t("For arrays. Can either be a schema to validate every element against or an array of schemas to validate each item against in order (the first schema will validate the first element, the second schema will validate the second element, and so on."),
    maxItems: t("The maximum number of items that can be inside an array. Inclusive."),
    minItems: t("The minimum number of items that can be inside an array. Inclusive."),
    uniqueItems: t("If all of the items in the array must be unique. Defaults to false."),
    maxProperties: t("The maximum number of properties an object can have. Inclusive."),
    minProperties: t("The minimum number of properties an object can have. Inclusive."),
    required: t("An array of strings that lists the names of all properties required on this object."),
    additionalProperties: t("Either a schema or a boolean. If a schema, then used to validate all properties not matched by 'properties' or 'patternProperties'. If false, then any properties not matched by either will cause this schema to fail."),
    definitions: t("Not used for validation. Place subschemas here that you wish to reference inline with $ref."),
    properties: t("A map of property names to schemas for each property."),
    patternProperties: t("A map of regular expressions on property names to schemas for matching properties."),
    dependencies: t("A map of property names to either an array of property names or a schema. An array of property names means the property named in the key depends on the properties in the array being present in the object in order to be valid. If the value is a schema, then the schema is only applied to the object if the property in the key exists on the object."),
    enum: t("The set of literal values that are valid."),
    type: t("Either a string of one of the basic schema types (number, integer, null, array, object, boolean, string) or an array of strings specifying a subset of those types."),
    format: t("Describes the format expected for the value."),
    allOf: t("An array of schemas, all of which must match."),
    anyOf: t("An array of schemas, where at least one must match."),
    oneOf: t("An array of schemas, exactly one of which must match."),
    not: t("A schema which must not match."),
    $id: t("A unique identifier for the schema."),
    $ref: t("Reference a definition hosted on any location."),
    $comment: t("Comments from schema authors to readers or maintainers of the schema."),
    readOnly: t("Indicates that the value of the instance is managed exclusively by the owning authority."),
    examples: t("Sample JSON values associated with a particular schema, for the purpose of illustrating usage."),
    contains: t('An array instance is valid against "contains" if at least one of its elements is valid against the given schema.'),
    propertyNames: t("If the instance is an object, this keyword validates if every property name in the instance validates against the provided schema."),
    const: t("An instance validates successfully against this keyword if its value is equal to the value of the keyword."),
    contentMediaType: t("Describes the media type of a string property."),
    contentEncoding: t("Describes the content encoding of a string property."),
    if: t('The validation outcome of the "if" subschema controls which of the "then" or "else" keywords are evaluated.'),
    then: t('The "if" subschema is used for validation when the "if" subschema succeeds.'),
    else: t('The "else" subschema is used for validation when the "if" subschema fails.')
  };
  for (const schemaName in schemaContributions.schemas) {
    const schema = schemaContributions.schemas[schemaName];
    for (const property in schema.properties) {
      let propertyObject = schema.properties[property];
      if (typeof propertyObject === "boolean") {
        propertyObject = schema.properties[property] = {};
      }
      const description = descriptions[property];
      if (description) {
        propertyObject["description"] = description;
      }
    }
  }
  var LIB;
  (() => {
    "use strict";
    var t2 = { 470: (t3) => {
      function e2(t4) {
        if ("string" != typeof t4)
          throw new TypeError("Path must be a string. Received " + JSON.stringify(t4));
      }
      function r2(t4, e3) {
        for (var r3, n3 = "", i = 0, o = -1, s = 0, h = 0; h <= t4.length; ++h) {
          if (h < t4.length)
            r3 = t4.charCodeAt(h);
          else {
            if (47 === r3)
              break;
            r3 = 47;
          }
          if (47 === r3) {
            if (o === h - 1 || 1 === s)
              ;
            else if (o !== h - 1 && 2 === s) {
              if (n3.length < 2 || 2 !== i || 46 !== n3.charCodeAt(n3.length - 1) || 46 !== n3.charCodeAt(n3.length - 2)) {
                if (n3.length > 2) {
                  var a2 = n3.lastIndexOf("/");
                  if (a2 !== n3.length - 1) {
                    -1 === a2 ? (n3 = "", i = 0) : i = (n3 = n3.slice(0, a2)).length - 1 - n3.lastIndexOf("/"), o = h, s = 0;
                    continue;
                  }
                } else if (2 === n3.length || 1 === n3.length) {
                  n3 = "", i = 0, o = h, s = 0;
                  continue;
                }
              }
              e3 && (n3.length > 0 ? n3 += "/.." : n3 = "..", i = 2);
            } else
              n3.length > 0 ? n3 += "/" + t4.slice(o + 1, h) : n3 = t4.slice(o + 1, h), i = h - o - 1;
            o = h, s = 0;
          } else
            46 === r3 && -1 !== s ? ++s : s = -1;
        }
        return n3;
      }
      var n2 = { resolve: function() {
        for (var t4, n3 = "", i = false, o = arguments.length - 1; o >= -1 && !i; o--) {
          var s;
          o >= 0 ? s = arguments[o] : (void 0 === t4 && (t4 = process.cwd()), s = t4), e2(s), 0 !== s.length && (n3 = s + "/" + n3, i = 47 === s.charCodeAt(0));
        }
        return n3 = r2(n3, !i), i ? n3.length > 0 ? "/" + n3 : "/" : n3.length > 0 ? n3 : ".";
      }, normalize: function(t4) {
        if (e2(t4), 0 === t4.length)
          return ".";
        var n3 = 47 === t4.charCodeAt(0), i = 47 === t4.charCodeAt(t4.length - 1);
        return 0 !== (t4 = r2(t4, !n3)).length || n3 || (t4 = "."), t4.length > 0 && i && (t4 += "/"), n3 ? "/" + t4 : t4;
      }, isAbsolute: function(t4) {
        return e2(t4), t4.length > 0 && 47 === t4.charCodeAt(0);
      }, join: function() {
        if (0 === arguments.length)
          return ".";
        for (var t4, r3 = 0; r3 < arguments.length; ++r3) {
          var i = arguments[r3];
          e2(i), i.length > 0 && (void 0 === t4 ? t4 = i : t4 += "/" + i);
        }
        return void 0 === t4 ? "." : n2.normalize(t4);
      }, relative: function(t4, r3) {
        if (e2(t4), e2(r3), t4 === r3)
          return "";
        if ((t4 = n2.resolve(t4)) === (r3 = n2.resolve(r3)))
          return "";
        for (var i = 1; i < t4.length && 47 === t4.charCodeAt(i); ++i)
          ;
        for (var o = t4.length, s = o - i, h = 1; h < r3.length && 47 === r3.charCodeAt(h); ++h)
          ;
        for (var a2 = r3.length - h, c = s < a2 ? s : a2, f2 = -1, u = 0; u <= c; ++u) {
          if (u === c) {
            if (a2 > c) {
              if (47 === r3.charCodeAt(h + u))
                return r3.slice(h + u + 1);
              if (0 === u)
                return r3.slice(h + u);
            } else
              s > c && (47 === t4.charCodeAt(i + u) ? f2 = u : 0 === u && (f2 = 0));
            break;
          }
          var l = t4.charCodeAt(i + u);
          if (l !== r3.charCodeAt(h + u))
            break;
          47 === l && (f2 = u);
        }
        var g = "";
        for (u = i + f2 + 1; u <= o; ++u)
          u !== o && 47 !== t4.charCodeAt(u) || (0 === g.length ? g += ".." : g += "/..");
        return g.length > 0 ? g + r3.slice(h + f2) : (h += f2, 47 === r3.charCodeAt(h) && ++h, r3.slice(h));
      }, _makeLong: function(t4) {
        return t4;
      }, dirname: function(t4) {
        if (e2(t4), 0 === t4.length)
          return ".";
        for (var r3 = t4.charCodeAt(0), n3 = 47 === r3, i = -1, o = true, s = t4.length - 1; s >= 1; --s)
          if (47 === (r3 = t4.charCodeAt(s))) {
            if (!o) {
              i = s;
              break;
            }
          } else
            o = false;
        return -1 === i ? n3 ? "/" : "." : n3 && 1 === i ? "//" : t4.slice(0, i);
      }, basename: function(t4, r3) {
        if (void 0 !== r3 && "string" != typeof r3)
          throw new TypeError('"ext" argument must be a string');
        e2(t4);
        var n3, i = 0, o = -1, s = true;
        if (void 0 !== r3 && r3.length > 0 && r3.length <= t4.length) {
          if (r3.length === t4.length && r3 === t4)
            return "";
          var h = r3.length - 1, a2 = -1;
          for (n3 = t4.length - 1; n3 >= 0; --n3) {
            var c = t4.charCodeAt(n3);
            if (47 === c) {
              if (!s) {
                i = n3 + 1;
                break;
              }
            } else
              -1 === a2 && (s = false, a2 = n3 + 1), h >= 0 && (c === r3.charCodeAt(h) ? -1 == --h && (o = n3) : (h = -1, o = a2));
          }
          return i === o ? o = a2 : -1 === o && (o = t4.length), t4.slice(i, o);
        }
        for (n3 = t4.length - 1; n3 >= 0; --n3)
          if (47 === t4.charCodeAt(n3)) {
            if (!s) {
              i = n3 + 1;
              break;
            }
          } else
            -1 === o && (s = false, o = n3 + 1);
        return -1 === o ? "" : t4.slice(i, o);
      }, extname: function(t4) {
        e2(t4);
        for (var r3 = -1, n3 = 0, i = -1, o = true, s = 0, h = t4.length - 1; h >= 0; --h) {
          var a2 = t4.charCodeAt(h);
          if (47 !== a2)
            -1 === i && (o = false, i = h + 1), 46 === a2 ? -1 === r3 ? r3 = h : 1 !== s && (s = 1) : -1 !== r3 && (s = -1);
          else if (!o) {
            n3 = h + 1;
            break;
          }
        }
        return -1 === r3 || -1 === i || 0 === s || 1 === s && r3 === i - 1 && r3 === n3 + 1 ? "" : t4.slice(r3, i);
      }, format: function(t4) {
        if (null === t4 || "object" != typeof t4)
          throw new TypeError('The "pathObject" argument must be of type Object. Received type ' + typeof t4);
        return function(t5, e3) {
          var r3 = e3.dir || e3.root, n3 = e3.base || (e3.name || "") + (e3.ext || "");
          return r3 ? r3 === e3.root ? r3 + n3 : r3 + "/" + n3 : n3;
        }(0, t4);
      }, parse: function(t4) {
        e2(t4);
        var r3 = { root: "", dir: "", base: "", ext: "", name: "" };
        if (0 === t4.length)
          return r3;
        var n3, i = t4.charCodeAt(0), o = 47 === i;
        o ? (r3.root = "/", n3 = 1) : n3 = 0;
        for (var s = -1, h = 0, a2 = -1, c = true, f2 = t4.length - 1, u = 0; f2 >= n3; --f2)
          if (47 !== (i = t4.charCodeAt(f2)))
            -1 === a2 && (c = false, a2 = f2 + 1), 46 === i ? -1 === s ? s = f2 : 1 !== u && (u = 1) : -1 !== s && (u = -1);
          else if (!c) {
            h = f2 + 1;
            break;
          }
        return -1 === s || -1 === a2 || 0 === u || 1 === u && s === a2 - 1 && s === h + 1 ? -1 !== a2 && (r3.base = r3.name = 0 === h && o ? t4.slice(1, a2) : t4.slice(h, a2)) : (0 === h && o ? (r3.name = t4.slice(1, s), r3.base = t4.slice(1, a2)) : (r3.name = t4.slice(h, s), r3.base = t4.slice(h, a2)), r3.ext = t4.slice(s, a2)), h > 0 ? r3.dir = t4.slice(0, h - 1) : o && (r3.dir = "/"), r3;
      }, sep: "/", delimiter: ":", win32: null, posix: null };
      n2.posix = n2, t3.exports = n2;
    } }, e = {};
    function r(n2) {
      var i = e[n2];
      if (void 0 !== i)
        return i.exports;
      var o = e[n2] = { exports: {} };
      return t2[n2](o, o.exports, r), o.exports;
    }
    r.d = (t3, e2) => {
      for (var n2 in e2)
        r.o(e2, n2) && !r.o(t3, n2) && Object.defineProperty(t3, n2, { enumerable: true, get: e2[n2] });
    }, r.o = (t3, e2) => Object.prototype.hasOwnProperty.call(t3, e2), r.r = (t3) => {
      "undefined" != typeof Symbol && Symbol.toStringTag && Object.defineProperty(t3, Symbol.toStringTag, { value: "Module" }), Object.defineProperty(t3, "__esModule", { value: true });
    };
    var n = {};
    (() => {
      let t3;
      if (r.r(n), r.d(n, { URI: () => f2, Utils: () => P }), "object" == typeof process)
        t3 = "win32" === process.platform;
      else if ("object" == typeof navigator) {
        let e3 = navigator.userAgent;
        t3 = e3.indexOf("Windows") >= 0;
      }
      const e2 = /^\w[\w\d+.-]*$/, i = /^\//, o = /^\/\//;
      function s(t4, r2) {
        if (!t4.scheme && r2)
          throw new Error(`[UriError]: Scheme is missing: {scheme: "", authority: "${t4.authority}", path: "${t4.path}", query: "${t4.query}", fragment: "${t4.fragment}"}`);
        if (t4.scheme && !e2.test(t4.scheme))
          throw new Error("[UriError]: Scheme contains illegal characters.");
        if (t4.path) {
          if (t4.authority) {
            if (!i.test(t4.path))
              throw new Error('[UriError]: If a URI contains an authority component, then the path component must either be empty or begin with a slash ("/") character');
          } else if (o.test(t4.path))
            throw new Error('[UriError]: If a URI does not contain an authority component, then the path cannot begin with two slash characters ("//")');
        }
      }
      const h = "", a2 = "/", c = /^(([^:/?#]+?):)?(\/\/([^/?#]*))?([^?#]*)(\?([^#]*))?(#(.*))?/;
      class f2 {
        static isUri(t4) {
          return t4 instanceof f2 || !!t4 && "string" == typeof t4.authority && "string" == typeof t4.fragment && "string" == typeof t4.path && "string" == typeof t4.query && "string" == typeof t4.scheme && "string" == typeof t4.fsPath && "function" == typeof t4.with && "function" == typeof t4.toString;
        }
        scheme;
        authority;
        path;
        query;
        fragment;
        constructor(t4, e3, r2, n2, i2, o2 = false) {
          "object" == typeof t4 ? (this.scheme = t4.scheme || h, this.authority = t4.authority || h, this.path = t4.path || h, this.query = t4.query || h, this.fragment = t4.fragment || h) : (this.scheme = /* @__PURE__ */ function(t5, e4) {
            return t5 || e4 ? t5 : "file";
          }(t4, o2), this.authority = e3 || h, this.path = function(t5, e4) {
            switch (t5) {
              case "https":
              case "http":
              case "file":
                e4 ? e4[0] !== a2 && (e4 = a2 + e4) : e4 = a2;
            }
            return e4;
          }(this.scheme, r2 || h), this.query = n2 || h, this.fragment = i2 || h, s(this, o2));
        }
        get fsPath() {
          return m(this, false);
        }
        with(t4) {
          if (!t4)
            return this;
          let { scheme: e3, authority: r2, path: n2, query: i2, fragment: o2 } = t4;
          return void 0 === e3 ? e3 = this.scheme : null === e3 && (e3 = h), void 0 === r2 ? r2 = this.authority : null === r2 && (r2 = h), void 0 === n2 ? n2 = this.path : null === n2 && (n2 = h), void 0 === i2 ? i2 = this.query : null === i2 && (i2 = h), void 0 === o2 ? o2 = this.fragment : null === o2 && (o2 = h), e3 === this.scheme && r2 === this.authority && n2 === this.path && i2 === this.query && o2 === this.fragment ? this : new l(e3, r2, n2, i2, o2);
        }
        static parse(t4, e3 = false) {
          const r2 = c.exec(t4);
          return r2 ? new l(r2[2] || h, C(r2[4] || h), C(r2[5] || h), C(r2[7] || h), C(r2[9] || h), e3) : new l(h, h, h, h, h);
        }
        static file(e3) {
          let r2 = h;
          if (t3 && (e3 = e3.replace(/\\/g, a2)), e3[0] === a2 && e3[1] === a2) {
            const t4 = e3.indexOf(a2, 2);
            -1 === t4 ? (r2 = e3.substring(2), e3 = a2) : (r2 = e3.substring(2, t4), e3 = e3.substring(t4) || a2);
          }
          return new l("file", r2, e3, h, h);
        }
        static from(t4) {
          const e3 = new l(t4.scheme, t4.authority, t4.path, t4.query, t4.fragment);
          return s(e3, true), e3;
        }
        toString(t4 = false) {
          return y(this, t4);
        }
        toJSON() {
          return this;
        }
        static revive(t4) {
          if (t4) {
            if (t4 instanceof f2)
              return t4;
            {
              const e3 = new l(t4);
              return e3._formatted = t4.external, e3._fsPath = t4._sep === u ? t4.fsPath : null, e3;
            }
          }
          return t4;
        }
      }
      const u = t3 ? 1 : void 0;
      class l extends f2 {
        _formatted = null;
        _fsPath = null;
        get fsPath() {
          return this._fsPath || (this._fsPath = m(this, false)), this._fsPath;
        }
        toString(t4 = false) {
          return t4 ? y(this, true) : (this._formatted || (this._formatted = y(this, false)), this._formatted);
        }
        toJSON() {
          const t4 = { $mid: 1 };
          return this._fsPath && (t4.fsPath = this._fsPath, t4._sep = u), this._formatted && (t4.external = this._formatted), this.path && (t4.path = this.path), this.scheme && (t4.scheme = this.scheme), this.authority && (t4.authority = this.authority), this.query && (t4.query = this.query), this.fragment && (t4.fragment = this.fragment), t4;
        }
      }
      const g = { 58: "%3A", 47: "%2F", 63: "%3F", 35: "%23", 91: "%5B", 93: "%5D", 64: "%40", 33: "%21", 36: "%24", 38: "%26", 39: "%27", 40: "%28", 41: "%29", 42: "%2A", 43: "%2B", 44: "%2C", 59: "%3B", 61: "%3D", 32: "%20" };
      function d(t4, e3, r2) {
        let n2, i2 = -1;
        for (let o2 = 0; o2 < t4.length; o2++) {
          const s2 = t4.charCodeAt(o2);
          if (s2 >= 97 && s2 <= 122 || s2 >= 65 && s2 <= 90 || s2 >= 48 && s2 <= 57 || 45 === s2 || 46 === s2 || 95 === s2 || 126 === s2 || e3 && 47 === s2 || r2 && 91 === s2 || r2 && 93 === s2 || r2 && 58 === s2)
            -1 !== i2 && (n2 += encodeURIComponent(t4.substring(i2, o2)), i2 = -1), void 0 !== n2 && (n2 += t4.charAt(o2));
          else {
            void 0 === n2 && (n2 = t4.substr(0, o2));
            const e4 = g[s2];
            void 0 !== e4 ? (-1 !== i2 && (n2 += encodeURIComponent(t4.substring(i2, o2)), i2 = -1), n2 += e4) : -1 === i2 && (i2 = o2);
          }
        }
        return -1 !== i2 && (n2 += encodeURIComponent(t4.substring(i2))), void 0 !== n2 ? n2 : t4;
      }
      function p(t4) {
        let e3;
        for (let r2 = 0; r2 < t4.length; r2++) {
          const n2 = t4.charCodeAt(r2);
          35 === n2 || 63 === n2 ? (void 0 === e3 && (e3 = t4.substr(0, r2)), e3 += g[n2]) : void 0 !== e3 && (e3 += t4[r2]);
        }
        return void 0 !== e3 ? e3 : t4;
      }
      function m(e3, r2) {
        let n2;
        return n2 = e3.authority && e3.path.length > 1 && "file" === e3.scheme ? `//${e3.authority}${e3.path}` : 47 === e3.path.charCodeAt(0) && (e3.path.charCodeAt(1) >= 65 && e3.path.charCodeAt(1) <= 90 || e3.path.charCodeAt(1) >= 97 && e3.path.charCodeAt(1) <= 122) && 58 === e3.path.charCodeAt(2) ? r2 ? e3.path.substr(1) : e3.path[1].toLowerCase() + e3.path.substr(2) : e3.path, t3 && (n2 = n2.replace(/\//g, "\\")), n2;
      }
      function y(t4, e3) {
        const r2 = e3 ? p : d;
        let n2 = "", { scheme: i2, authority: o2, path: s2, query: h2, fragment: c2 } = t4;
        if (i2 && (n2 += i2, n2 += ":"), (o2 || "file" === i2) && (n2 += a2, n2 += a2), o2) {
          let t5 = o2.indexOf("@");
          if (-1 !== t5) {
            const e4 = o2.substr(0, t5);
            o2 = o2.substr(t5 + 1), t5 = e4.lastIndexOf(":"), -1 === t5 ? n2 += r2(e4, false, false) : (n2 += r2(e4.substr(0, t5), false, false), n2 += ":", n2 += r2(e4.substr(t5 + 1), false, true)), n2 += "@";
          }
          o2 = o2.toLowerCase(), t5 = o2.lastIndexOf(":"), -1 === t5 ? n2 += r2(o2, false, true) : (n2 += r2(o2.substr(0, t5), false, true), n2 += o2.substr(t5));
        }
        if (s2) {
          if (s2.length >= 3 && 47 === s2.charCodeAt(0) && 58 === s2.charCodeAt(2)) {
            const t5 = s2.charCodeAt(1);
            t5 >= 65 && t5 <= 90 && (s2 = `/${String.fromCharCode(t5 + 32)}:${s2.substr(3)}`);
          } else if (s2.length >= 2 && 58 === s2.charCodeAt(1)) {
            const t5 = s2.charCodeAt(0);
            t5 >= 65 && t5 <= 90 && (s2 = `${String.fromCharCode(t5 + 32)}:${s2.substr(2)}`);
          }
          n2 += r2(s2, true, false);
        }
        return h2 && (n2 += "?", n2 += r2(h2, false, false)), c2 && (n2 += "#", n2 += e3 ? c2 : d(c2, false, false)), n2;
      }
      function v(t4) {
        try {
          return decodeURIComponent(t4);
        } catch {
          return t4.length > 3 ? t4.substr(0, 3) + v(t4.substr(3)) : t4;
        }
      }
      const b = /(%[0-9A-Za-z][0-9A-Za-z])+/g;
      function C(t4) {
        return t4.match(b) ? t4.replace(b, (t5) => v(t5)) : t4;
      }
      var A2 = r(470);
      const w = A2.posix || A2, x = "/";
      var P;
      !function(t4) {
        t4.joinPath = function(t5, ...e3) {
          return t5.with({ path: w.join(t5.path, ...e3) });
        }, t4.resolvePath = function(t5, ...e3) {
          let r2 = t5.path, n2 = false;
          r2[0] !== x && (r2 = x + r2, n2 = true);
          let i2 = w.resolve(r2, ...e3);
          return n2 && i2[0] === x && !t5.authority && (i2 = i2.substring(1)), t5.with({ path: i2 });
        }, t4.dirname = function(t5) {
          if (0 === t5.path.length || t5.path === x)
            return t5;
          let e3 = w.dirname(t5.path);
          return 1 === e3.length && 46 === e3.charCodeAt(0) && (e3 = ""), t5.with({ path: e3 });
        }, t4.basename = function(t5) {
          return w.basename(t5.path);
        }, t4.extname = function(t5) {
          return w.extname(t5.path);
        };
      }(P || (P = {}));
    })(), LIB = n;
  })();
  var { URI: URI22, Utils } = LIB;
  function createRegex(glob, opts) {
    if (typeof glob !== "string") {
      throw new TypeError("Expected a string");
    }
    const str = String(glob);
    let reStr = "";
    const extended = opts ? !!opts.extended : false;
    const globstar = opts ? !!opts.globstar : false;
    let inGroup = false;
    const flags = opts && typeof opts.flags === "string" ? opts.flags : "";
    let c;
    for (let i = 0, len = str.length; i < len; i++) {
      c = str[i];
      switch (c) {
        case "/":
        case "$":
        case "^":
        case "+":
        case ".":
        case "(":
        case ")":
        case "=":
        case "!":
        case "|":
          reStr += "\\" + c;
          break;
        case "?":
          if (extended) {
            reStr += ".";
            break;
          }
        case "[":
        case "]":
          if (extended) {
            reStr += c;
            break;
          }
        case "{":
          if (extended) {
            inGroup = true;
            reStr += "(";
            break;
          }
        case "}":
          if (extended) {
            inGroup = false;
            reStr += ")";
            break;
          }
        case ",":
          if (inGroup) {
            reStr += "|";
            break;
          }
          reStr += "\\" + c;
          break;
        case "*":
          const prevChar = str[i - 1];
          let starCount = 1;
          while (str[i + 1] === "*") {
            starCount++;
            i++;
          }
          const nextChar = str[i + 1];
          if (!globstar) {
            reStr += ".*";
          } else {
            const isGlobstar = starCount > 1 && (prevChar === "/" || prevChar === void 0 || prevChar === "{" || prevChar === ",") && (nextChar === "/" || nextChar === void 0 || nextChar === "," || nextChar === "}");
            if (isGlobstar) {
              if (nextChar === "/") {
                i++;
              } else if (prevChar === "/" && reStr.endsWith("\\/")) {
                reStr = reStr.substr(0, reStr.length - 2);
              }
              reStr += "((?:[^/]*(?:/|$))*)";
            } else {
              reStr += "([^/]*)";
            }
          }
          break;
        default:
          reStr += c;
      }
    }
    if (!flags || !~flags.indexOf("g")) {
      reStr = "^" + reStr + "$";
    }
    return new RegExp(reStr, flags);
  }
  var BANG = "!";
  var PATH_SEP = "/";
  var FilePatternAssociation = class {
    constructor(pattern, folderUri, uris) {
      this.folderUri = folderUri;
      this.uris = uris;
      this.globWrappers = [];
      try {
        for (let patternString of pattern) {
          const include = patternString[0] !== BANG;
          if (!include) {
            patternString = patternString.substring(1);
          }
          if (patternString.length > 0) {
            if (patternString[0] === PATH_SEP) {
              patternString = patternString.substring(1);
            }
            this.globWrappers.push({
              regexp: createRegex("**/" + patternString, { extended: true, globstar: true }),
              include
            });
          }
        }
        ;
        if (folderUri) {
          folderUri = normalizeResourceForMatching(folderUri);
          if (!folderUri.endsWith("/")) {
            folderUri = folderUri + "/";
          }
          this.folderUri = folderUri;
        }
      } catch (e) {
        this.globWrappers.length = 0;
        this.uris = [];
      }
    }
    matchesPattern(fileName) {
      if (this.folderUri && !fileName.startsWith(this.folderUri)) {
        return false;
      }
      let match = false;
      for (const { regexp, include } of this.globWrappers) {
        if (regexp.test(fileName)) {
          match = include;
        }
      }
      return match;
    }
    getURIs() {
      return this.uris;
    }
  };
  var SchemaHandle = class {
    constructor(service, uri, unresolvedSchemaContent) {
      this.service = service;
      this.uri = uri;
      this.dependencies = /* @__PURE__ */ new Set();
      this.anchors = void 0;
      if (unresolvedSchemaContent) {
        this.unresolvedSchema = this.service.promise.resolve(new UnresolvedSchema(unresolvedSchemaContent));
      }
    }
    getUnresolvedSchema() {
      if (!this.unresolvedSchema) {
        this.unresolvedSchema = this.service.loadSchema(this.uri);
      }
      return this.unresolvedSchema;
    }
    getResolvedSchema() {
      if (!this.resolvedSchema) {
        this.resolvedSchema = this.getUnresolvedSchema().then((unresolved) => {
          return this.service.resolveSchemaContent(unresolved, this);
        });
      }
      return this.resolvedSchema;
    }
    clearSchema() {
      const hasChanges = !!this.unresolvedSchema;
      this.resolvedSchema = void 0;
      this.unresolvedSchema = void 0;
      this.dependencies.clear();
      this.anchors = void 0;
      return hasChanges;
    }
  };
  var UnresolvedSchema = class {
    constructor(schema, errors = []) {
      this.schema = schema;
      this.errors = errors;
    }
  };
  var ResolvedSchema = class {
    constructor(schema, errors = [], warnings = [], schemaDraft) {
      this.schema = schema;
      this.errors = errors;
      this.warnings = warnings;
      this.schemaDraft = schemaDraft;
    }
    getSection(path) {
      const schemaRef = this.getSectionRecursive(path, this.schema);
      if (schemaRef) {
        return asSchema(schemaRef);
      }
      return void 0;
    }
    getSectionRecursive(path, schema) {
      if (!schema || typeof schema === "boolean" || path.length === 0) {
        return schema;
      }
      const next = path.shift();
      if (schema.properties && typeof schema.properties[next]) {
        return this.getSectionRecursive(path, schema.properties[next]);
      } else if (schema.patternProperties) {
        for (const pattern of Object.keys(schema.patternProperties)) {
          const regex = extendedRegExp(pattern);
          if (regex?.test(next)) {
            return this.getSectionRecursive(path, schema.patternProperties[pattern]);
          }
        }
      } else if (typeof schema.additionalProperties === "object") {
        return this.getSectionRecursive(path, schema.additionalProperties);
      } else if (next.match("[0-9]+")) {
        if (Array.isArray(schema.items)) {
          const index = parseInt(next, 10);
          if (!isNaN(index) && schema.items[index]) {
            return this.getSectionRecursive(path, schema.items[index]);
          }
        } else if (schema.items) {
          return this.getSectionRecursive(path, schema.items);
        }
      }
      return void 0;
    }
  };
  var JSONSchemaService = class {
    constructor(requestService, contextService, promiseConstructor) {
      this.contextService = contextService;
      this.requestService = requestService;
      this.promiseConstructor = promiseConstructor || Promise;
      this.callOnDispose = [];
      this.contributionSchemas = {};
      this.contributionAssociations = [];
      this.schemasById = {};
      this.filePatternAssociations = [];
      this.registeredSchemasIds = {};
    }
    getRegisteredSchemaIds(filter) {
      return Object.keys(this.registeredSchemasIds).filter((id) => {
        const scheme = URI22.parse(id).scheme;
        return scheme !== "schemaservice" && (!filter || filter(scheme));
      });
    }
    get promise() {
      return this.promiseConstructor;
    }
    dispose() {
      while (this.callOnDispose.length > 0) {
        this.callOnDispose.pop()();
      }
    }
    onResourceChange(uri) {
      this.cachedSchemaForResource = void 0;
      let hasChanges = false;
      uri = normalizeId(uri);
      const toWalk = [uri];
      const all = Object.keys(this.schemasById).map((key) => this.schemasById[key]);
      while (toWalk.length) {
        const curr = toWalk.pop();
        for (let i = 0; i < all.length; i++) {
          const handle = all[i];
          if (handle && (handle.uri === curr || handle.dependencies.has(curr))) {
            if (handle.uri !== curr) {
              toWalk.push(handle.uri);
            }
            if (handle.clearSchema()) {
              hasChanges = true;
            }
            all[i] = void 0;
          }
        }
      }
      return hasChanges;
    }
    setSchemaContributions(schemaContributions2) {
      if (schemaContributions2.schemas) {
        const schemas = schemaContributions2.schemas;
        for (const id in schemas) {
          const normalizedId = normalizeId(id);
          this.contributionSchemas[normalizedId] = this.addSchemaHandle(normalizedId, schemas[id]);
        }
      }
      if (Array.isArray(schemaContributions2.schemaAssociations)) {
        const schemaAssociations = schemaContributions2.schemaAssociations;
        for (let schemaAssociation of schemaAssociations) {
          const uris = schemaAssociation.uris.map(normalizeId);
          const association = this.addFilePatternAssociation(schemaAssociation.pattern, schemaAssociation.folderUri, uris);
          this.contributionAssociations.push(association);
        }
      }
    }
    addSchemaHandle(id, unresolvedSchemaContent) {
      const schemaHandle = new SchemaHandle(this, id, unresolvedSchemaContent);
      this.schemasById[id] = schemaHandle;
      return schemaHandle;
    }
    getOrAddSchemaHandle(id, unresolvedSchemaContent) {
      return this.schemasById[id] || this.addSchemaHandle(id, unresolvedSchemaContent);
    }
    addFilePatternAssociation(pattern, folderUri, uris) {
      const fpa = new FilePatternAssociation(pattern, folderUri, uris);
      this.filePatternAssociations.push(fpa);
      return fpa;
    }
    registerExternalSchema(config) {
      const id = normalizeId(config.uri);
      this.registeredSchemasIds[id] = true;
      this.cachedSchemaForResource = void 0;
      if (config.fileMatch && config.fileMatch.length) {
        this.addFilePatternAssociation(config.fileMatch, config.folderUri, [id]);
      }
      return config.schema ? this.addSchemaHandle(id, config.schema) : this.getOrAddSchemaHandle(id);
    }
    clearExternalSchemas() {
      this.schemasById = {};
      this.filePatternAssociations = [];
      this.registeredSchemasIds = {};
      this.cachedSchemaForResource = void 0;
      for (const id in this.contributionSchemas) {
        this.schemasById[id] = this.contributionSchemas[id];
        this.registeredSchemasIds[id] = true;
      }
      for (const contributionAssociation of this.contributionAssociations) {
        this.filePatternAssociations.push(contributionAssociation);
      }
    }
    getResolvedSchema(schemaId) {
      const id = normalizeId(schemaId);
      const schemaHandle = this.schemasById[id];
      if (schemaHandle) {
        return schemaHandle.getResolvedSchema();
      }
      return this.promise.resolve(void 0);
    }
    loadSchema(url) {
      if (!this.requestService) {
        const errorMessage = t("Unable to load schema from '{0}'. No schema request service available", toDisplayString(url));
        return this.promise.resolve(new UnresolvedSchema({}, [errorMessage]));
      }
      if (url.startsWith("http://json-schema.org/")) {
        url = "https" + url.substring(4);
      }
      return this.requestService(url).then((content) => {
        if (!content) {
          const errorMessage = t("Unable to load schema from '{0}': No content.", toDisplayString(url));
          return new UnresolvedSchema({}, [errorMessage]);
        }
        const errors = [];
        if (content.charCodeAt(0) === 65279) {
          errors.push(t("Problem reading content from '{0}': UTF-8 with BOM detected, only UTF 8 is allowed.", toDisplayString(url)));
          content = content.trimStart();
        }
        let schemaContent = {};
        const jsonErrors = [];
        schemaContent = parse2(content, jsonErrors);
        if (jsonErrors.length) {
          errors.push(t("Unable to parse content from '{0}': Parse error at offset {1}.", toDisplayString(url), jsonErrors[0].offset));
        }
        return new UnresolvedSchema(schemaContent, errors);
      }, (error) => {
        let errorMessage = error.toString();
        const errorSplit = error.toString().split("Error: ");
        if (errorSplit.length > 1) {
          errorMessage = errorSplit[1];
        }
        if (endsWith(errorMessage, ".")) {
          errorMessage = errorMessage.substr(0, errorMessage.length - 1);
        }
        return new UnresolvedSchema({}, [t("Unable to load schema from '{0}': {1}.", toDisplayString(url), errorMessage)]);
      });
    }
    resolveSchemaContent(schemaToResolve, handle) {
      const resolveErrors = schemaToResolve.errors.slice(0);
      const schema = schemaToResolve.schema;
      let schemaDraft = schema.$schema ? normalizeId(schema.$schema) : void 0;
      if (schemaDraft === "http://json-schema.org/draft-03/schema") {
        return this.promise.resolve(new ResolvedSchema({}, [t("Draft-03 schemas are not supported.")], [], schemaDraft));
      }
      let usesUnsupportedFeatures = /* @__PURE__ */ new Set();
      const contextService = this.contextService;
      const findSectionByJSONPointer = (schema2, path) => {
        path = decodeURIComponent(path);
        let current = schema2;
        if (path[0] === "/") {
          path = path.substring(1);
        }
        path.split("/").some((part) => {
          part = part.replace(/~1/g, "/").replace(/~0/g, "~");
          current = current[part];
          return !current;
        });
        return current;
      };
      const findSchemaById = (schema2, handle2, id) => {
        if (!handle2.anchors) {
          handle2.anchors = collectAnchors(schema2);
        }
        return handle2.anchors.get(id);
      };
      const merge = (target, section) => {
        for (const key in section) {
          if (section.hasOwnProperty(key) && key !== "id" && key !== "$id") {
            target[key] = section[key];
          }
        }
      };
      const mergeRef = (target, sourceRoot, sourceHandle, refSegment) => {
        let section;
        if (refSegment === void 0 || refSegment.length === 0) {
          section = sourceRoot;
        } else if (refSegment.charAt(0) === "/") {
          section = findSectionByJSONPointer(sourceRoot, refSegment);
        } else {
          section = findSchemaById(sourceRoot, sourceHandle, refSegment);
        }
        if (section) {
          merge(target, section);
        } else {
          resolveErrors.push(t("$ref '{0}' in '{1}' can not be resolved.", refSegment || "", sourceHandle.uri));
        }
      };
      const resolveExternalLink = (node, uri, refSegment, parentHandle) => {
        if (contextService && !/^[A-Za-z][A-Za-z0-9+\-.+]*:\/\/.*/.test(uri)) {
          uri = contextService.resolveRelativePath(uri, parentHandle.uri);
        }
        uri = normalizeId(uri);
        const referencedHandle = this.getOrAddSchemaHandle(uri);
        return referencedHandle.getUnresolvedSchema().then((unresolvedSchema) => {
          parentHandle.dependencies.add(uri);
          if (unresolvedSchema.errors.length) {
            const loc = refSegment ? uri + "#" + refSegment : uri;
            resolveErrors.push(t("Problems loading reference '{0}': {1}", loc, unresolvedSchema.errors[0]));
          }
          mergeRef(node, unresolvedSchema.schema, referencedHandle, refSegment);
          return resolveRefs(node, unresolvedSchema.schema, referencedHandle);
        });
      };
      const resolveRefs = (node, parentSchema, parentHandle) => {
        const openPromises = [];
        this.traverseNodes(node, (next) => {
          const seenRefs = /* @__PURE__ */ new Set();
          while (next.$ref) {
            const ref = next.$ref;
            const segments = ref.split("#", 2);
            delete next.$ref;
            if (segments[0].length > 0) {
              openPromises.push(resolveExternalLink(next, segments[0], segments[1], parentHandle));
              return;
            } else {
              if (!seenRefs.has(ref)) {
                const id = segments[1];
                mergeRef(next, parentSchema, parentHandle, id);
                seenRefs.add(ref);
              }
            }
          }
          if (next.$recursiveRef) {
            usesUnsupportedFeatures.add("$recursiveRef");
          }
          if (next.$dynamicRef) {
            usesUnsupportedFeatures.add("$dynamicRef");
          }
        });
        return this.promise.all(openPromises);
      };
      const collectAnchors = (root) => {
        const result = /* @__PURE__ */ new Map();
        this.traverseNodes(root, (next) => {
          const id = next.$id || next.id;
          const anchor = isString2(id) && id.charAt(0) === "#" ? id.substring(1) : next.$anchor;
          if (anchor) {
            if (result.has(anchor)) {
              resolveErrors.push(t("Duplicate anchor declaration: '{0}'", anchor));
            } else {
              result.set(anchor, next);
            }
          }
          if (next.$recursiveAnchor) {
            usesUnsupportedFeatures.add("$recursiveAnchor");
          }
          if (next.$dynamicAnchor) {
            usesUnsupportedFeatures.add("$dynamicAnchor");
          }
        });
        return result;
      };
      return resolveRefs(schema, schema, handle).then((_) => {
        let resolveWarnings = [];
        if (usesUnsupportedFeatures.size) {
          resolveWarnings.push(t("The schema uses meta-schema features ({0}) that are not yet supported by the validator.", Array.from(usesUnsupportedFeatures.keys()).join(", ")));
        }
        return new ResolvedSchema(schema, resolveErrors, resolveWarnings, schemaDraft);
      });
    }
    traverseNodes(root, handle) {
      if (!root || typeof root !== "object") {
        return Promise.resolve(null);
      }
      const seen = /* @__PURE__ */ new Set();
      const collectEntries = (...entries) => {
        for (const entry of entries) {
          if (isObject2(entry)) {
            toWalk.push(entry);
          }
        }
      };
      const collectMapEntries = (...maps) => {
        for (const map of maps) {
          if (isObject2(map)) {
            for (const k in map) {
              const key = k;
              const entry = map[key];
              if (isObject2(entry)) {
                toWalk.push(entry);
              }
            }
          }
        }
      };
      const collectArrayEntries = (...arrays) => {
        for (const array of arrays) {
          if (Array.isArray(array)) {
            for (const entry of array) {
              if (isObject2(entry)) {
                toWalk.push(entry);
              }
            }
          }
        }
      };
      const collectEntryOrArrayEntries = (items) => {
        if (Array.isArray(items)) {
          for (const entry of items) {
            if (isObject2(entry)) {
              toWalk.push(entry);
            }
          }
        } else if (isObject2(items)) {
          toWalk.push(items);
        }
      };
      const toWalk = [root];
      let next = toWalk.pop();
      while (next) {
        if (!seen.has(next)) {
          seen.add(next);
          handle(next);
          collectEntries(next.additionalItems, next.additionalProperties, next.not, next.contains, next.propertyNames, next.if, next.then, next.else, next.unevaluatedItems, next.unevaluatedProperties);
          collectMapEntries(next.definitions, next.$defs, next.properties, next.patternProperties, next.dependencies, next.dependentSchemas);
          collectArrayEntries(next.anyOf, next.allOf, next.oneOf, next.prefixItems);
          collectEntryOrArrayEntries(next.items);
        }
        next = toWalk.pop();
      }
    }
    getSchemaFromProperty(resource, document2) {
      if (document2.root?.type === "object") {
        for (const p of document2.root.properties) {
          if (p.keyNode.value === "$schema" && p.valueNode?.type === "string") {
            let schemaId = p.valueNode.value;
            if (this.contextService && !/^\w[\w\d+.-]*:/.test(schemaId)) {
              schemaId = this.contextService.resolveRelativePath(schemaId, resource);
            }
            return schemaId;
          }
        }
      }
      return void 0;
    }
    getAssociatedSchemas(resource) {
      const seen = /* @__PURE__ */ Object.create(null);
      const schemas = [];
      const normalizedResource = normalizeResourceForMatching(resource);
      for (const entry of this.filePatternAssociations) {
        if (entry.matchesPattern(normalizedResource)) {
          for (const schemaId of entry.getURIs()) {
            if (!seen[schemaId]) {
              schemas.push(schemaId);
              seen[schemaId] = true;
            }
          }
        }
      }
      return schemas;
    }
    getSchemaURIsForResource(resource, document2) {
      let schemeId = document2 && this.getSchemaFromProperty(resource, document2);
      if (schemeId) {
        return [schemeId];
      }
      return this.getAssociatedSchemas(resource);
    }
    getSchemaForResource(resource, document2) {
      if (document2) {
        let schemeId = this.getSchemaFromProperty(resource, document2);
        if (schemeId) {
          const id = normalizeId(schemeId);
          return this.getOrAddSchemaHandle(id).getResolvedSchema();
        }
      }
      if (this.cachedSchemaForResource && this.cachedSchemaForResource.resource === resource) {
        return this.cachedSchemaForResource.resolvedSchema;
      }
      const schemas = this.getAssociatedSchemas(resource);
      const resolvedSchema = schemas.length > 0 ? this.createCombinedSchema(resource, schemas).getResolvedSchema() : this.promise.resolve(void 0);
      this.cachedSchemaForResource = { resource, resolvedSchema };
      return resolvedSchema;
    }
    createCombinedSchema(resource, schemaIds) {
      if (schemaIds.length === 1) {
        return this.getOrAddSchemaHandle(schemaIds[0]);
      } else {
        const combinedSchemaId = "schemaservice://combinedSchema/" + encodeURIComponent(resource);
        const combinedSchema = {
          allOf: schemaIds.map((schemaId) => ({ $ref: schemaId }))
        };
        return this.addSchemaHandle(combinedSchemaId, combinedSchema);
      }
    }
    getMatchingSchemas(document2, jsonDocument, schema) {
      if (schema) {
        const id = schema.id || "schemaservice://untitled/matchingSchemas/" + idCounter2++;
        const handle = this.addSchemaHandle(id, schema);
        return handle.getResolvedSchema().then((resolvedSchema) => {
          return jsonDocument.getMatchingSchemas(resolvedSchema.schema).filter((s) => !s.inverted);
        });
      }
      return this.getSchemaForResource(document2.uri, jsonDocument).then((schema2) => {
        if (schema2) {
          return jsonDocument.getMatchingSchemas(schema2.schema).filter((s) => !s.inverted);
        }
        return [];
      });
    }
  };
  var idCounter2 = 0;
  function normalizeId(id) {
    try {
      return URI22.parse(id).toString(true);
    } catch (e) {
      return id;
    }
  }
  function normalizeResourceForMatching(resource) {
    try {
      return URI22.parse(resource).with({ fragment: null, query: null }).toString(true);
    } catch (e) {
      return resource;
    }
  }
  function toDisplayString(url) {
    try {
      const uri = URI22.parse(url);
      if (uri.scheme === "file") {
        return uri.fsPath;
      }
    } catch (e) {
    }
    return url;
  }
  function getFoldingRanges(document2, context) {
    const ranges = [];
    const nestingLevels = [];
    const stack = [];
    let prevStart = -1;
    const scanner = createScanner2(document2.getText(), false);
    let token = scanner.scan();
    function addRange(range) {
      ranges.push(range);
      nestingLevels.push(stack.length);
    }
    while (token !== 17) {
      switch (token) {
        case 1:
        case 3: {
          const startLine = document2.positionAt(scanner.getTokenOffset()).line;
          const range = { startLine, endLine: startLine, kind: token === 1 ? "object" : "array" };
          stack.push(range);
          break;
        }
        case 2:
        case 4: {
          const kind = token === 2 ? "object" : "array";
          if (stack.length > 0 && stack[stack.length - 1].kind === kind) {
            const range = stack.pop();
            const line = document2.positionAt(scanner.getTokenOffset()).line;
            if (range && line > range.startLine + 1 && prevStart !== range.startLine) {
              range.endLine = line - 1;
              addRange(range);
              prevStart = range.startLine;
            }
          }
          break;
        }
        case 13: {
          const startLine = document2.positionAt(scanner.getTokenOffset()).line;
          const endLine = document2.positionAt(scanner.getTokenOffset() + scanner.getTokenLength()).line;
          if (scanner.getTokenError() === 1 && startLine + 1 < document2.lineCount) {
            scanner.setPosition(document2.offsetAt(Position2.create(startLine + 1, 0)));
          } else {
            if (startLine < endLine) {
              addRange({ startLine, endLine, kind: FoldingRangeKind2.Comment });
              prevStart = startLine;
            }
          }
          break;
        }
        case 12: {
          const text = document2.getText().substr(scanner.getTokenOffset(), scanner.getTokenLength());
          const m = text.match(/^\/\/\s*#(region\b)|(endregion\b)/);
          if (m) {
            const line = document2.positionAt(scanner.getTokenOffset()).line;
            if (m[1]) {
              const range = { startLine: line, endLine: line, kind: FoldingRangeKind2.Region };
              stack.push(range);
            } else {
              let i = stack.length - 1;
              while (i >= 0 && stack[i].kind !== FoldingRangeKind2.Region) {
                i--;
              }
              if (i >= 0) {
                const range = stack[i];
                stack.length = i;
                if (line > range.startLine && prevStart !== range.startLine) {
                  range.endLine = line;
                  addRange(range);
                  prevStart = range.startLine;
                }
              }
            }
          }
          break;
        }
      }
      token = scanner.scan();
    }
    const rangeLimit = context && context.rangeLimit;
    if (typeof rangeLimit !== "number" || ranges.length <= rangeLimit) {
      return ranges;
    }
    if (context && context.onRangeLimitExceeded) {
      context.onRangeLimitExceeded(document2.uri);
    }
    const counts = [];
    for (let level of nestingLevels) {
      if (level < 30) {
        counts[level] = (counts[level] || 0) + 1;
      }
    }
    let entries = 0;
    let maxLevel = 0;
    for (let i = 0; i < counts.length; i++) {
      const n = counts[i];
      if (n) {
        if (n + entries > rangeLimit) {
          maxLevel = i;
          break;
        }
        entries += n;
      }
    }
    const result = [];
    for (let i = 0; i < ranges.length; i++) {
      const level = nestingLevels[i];
      if (typeof level === "number") {
        if (level < maxLevel || level === maxLevel && entries++ < rangeLimit) {
          result.push(ranges[i]);
        }
      }
    }
    return result;
  }
  function getSelectionRanges(document2, positions, doc) {
    function getSelectionRange(position) {
      let offset = document2.offsetAt(position);
      let node = doc.getNodeFromOffset(offset, true);
      const result = [];
      while (node) {
        switch (node.type) {
          case "string":
          case "object":
          case "array":
            const cStart = node.offset + 1, cEnd = node.offset + node.length - 1;
            if (cStart < cEnd && offset >= cStart && offset <= cEnd) {
              result.push(newRange(cStart, cEnd));
            }
            result.push(newRange(node.offset, node.offset + node.length));
            break;
          case "number":
          case "boolean":
          case "null":
          case "property":
            result.push(newRange(node.offset, node.offset + node.length));
            break;
        }
        if (node.type === "property" || node.parent && node.parent.type === "array") {
          const afterCommaOffset = getOffsetAfterNextToken(
            node.offset + node.length,
            5
            /* SyntaxKind.CommaToken */
          );
          if (afterCommaOffset !== -1) {
            result.push(newRange(node.offset, afterCommaOffset));
          }
        }
        node = node.parent;
      }
      let current = void 0;
      for (let index = result.length - 1; index >= 0; index--) {
        current = SelectionRange.create(result[index], current);
      }
      if (!current) {
        current = SelectionRange.create(Range2.create(position, position));
      }
      return current;
    }
    function newRange(start, end) {
      return Range2.create(document2.positionAt(start), document2.positionAt(end));
    }
    const scanner = createScanner2(document2.getText(), true);
    function getOffsetAfterNextToken(offset, expectedToken) {
      scanner.setPosition(offset);
      let token = scanner.scan();
      if (token === expectedToken) {
        return scanner.getTokenOffset() + scanner.getTokenLength();
      }
      return -1;
    }
    return positions.map(getSelectionRange);
  }
  function format4(documentToFormat, formattingOptions, formattingRange) {
    let range = void 0;
    if (formattingRange) {
      const offset = documentToFormat.offsetAt(formattingRange.start);
      const length = documentToFormat.offsetAt(formattingRange.end) - offset;
      range = { offset, length };
    }
    const options = {
      tabSize: formattingOptions ? formattingOptions.tabSize : 4,
      insertSpaces: formattingOptions?.insertSpaces === true,
      insertFinalNewline: formattingOptions?.insertFinalNewline === true,
      eol: "\n",
      keepLines: formattingOptions?.keepLines === true
    };
    return format2(documentToFormat.getText(), range, options).map((edit) => {
      return TextEdit.replace(Range2.create(documentToFormat.positionAt(edit.offset), documentToFormat.positionAt(edit.offset + edit.length)), edit.content);
    });
  }
  var Container;
  (function(Container2) {
    Container2[Container2["Object"] = 0] = "Object";
    Container2[Container2["Array"] = 1] = "Array";
  })(Container || (Container = {}));
  var PropertyTree = class {
    constructor(propertyName, beginningLineNumber) {
      this.propertyName = propertyName ?? "";
      this.beginningLineNumber = beginningLineNumber;
      this.childrenProperties = [];
      this.lastProperty = false;
      this.noKeyName = false;
    }
    addChildProperty(childProperty) {
      childProperty.parent = this;
      if (this.childrenProperties.length > 0) {
        let insertionIndex = 0;
        if (childProperty.noKeyName) {
          insertionIndex = this.childrenProperties.length;
        } else {
          insertionIndex = binarySearchOnPropertyArray(this.childrenProperties, childProperty, compareProperties);
        }
        if (insertionIndex < 0) {
          insertionIndex = insertionIndex * -1 - 1;
        }
        this.childrenProperties.splice(insertionIndex, 0, childProperty);
      } else {
        this.childrenProperties.push(childProperty);
      }
      return childProperty;
    }
  };
  function compareProperties(propertyTree1, propertyTree2) {
    const propertyName1 = propertyTree1.propertyName.toLowerCase();
    const propertyName2 = propertyTree2.propertyName.toLowerCase();
    if (propertyName1 < propertyName2) {
      return -1;
    } else if (propertyName1 > propertyName2) {
      return 1;
    }
    return 0;
  }
  function binarySearchOnPropertyArray(propertyTreeArray, propertyTree, compare_fn) {
    const propertyName = propertyTree.propertyName.toLowerCase();
    const firstPropertyInArrayName = propertyTreeArray[0].propertyName.toLowerCase();
    const lastPropertyInArrayName = propertyTreeArray[propertyTreeArray.length - 1].propertyName.toLowerCase();
    if (propertyName < firstPropertyInArrayName) {
      return 0;
    }
    if (propertyName > lastPropertyInArrayName) {
      return propertyTreeArray.length;
    }
    let m = 0;
    let n = propertyTreeArray.length - 1;
    while (m <= n) {
      let k = n + m >> 1;
      let cmp = compare_fn(propertyTree, propertyTreeArray[k]);
      if (cmp > 0) {
        m = k + 1;
      } else if (cmp < 0) {
        n = k - 1;
      } else {
        return k;
      }
    }
    return -m - 1;
  }
  function sort(documentToSort, formattingOptions) {
    const options = {
      ...formattingOptions,
      keepLines: false
      // keepLines must be false so that the properties are on separate lines for the sorting
    };
    const formattedJsonString = TextDocument2.applyEdits(documentToSort, format4(documentToSort, options, void 0));
    const formattedJsonDocument = TextDocument2.create("test://test.json", "json", 0, formattedJsonString);
    const jsonPropertyTree = findJsoncPropertyTree(formattedJsonDocument);
    const sortedJsonDocument = sortJsoncDocument(formattedJsonDocument, jsonPropertyTree);
    const edits = format4(sortedJsonDocument, options, void 0);
    const sortedAndFormattedJsonDocument = TextDocument2.applyEdits(sortedJsonDocument, edits);
    return [TextEdit.replace(Range2.create(Position2.create(0, 0), documentToSort.positionAt(documentToSort.getText().length)), sortedAndFormattedJsonDocument)];
  }
  function findJsoncPropertyTree(formattedDocument) {
    const formattedString = formattedDocument.getText();
    const scanner = createScanner2(formattedString, false);
    let rootTree = new PropertyTree();
    let currentTree = rootTree;
    let currentProperty = rootTree;
    let lastProperty = rootTree;
    let token = void 0;
    let lastTokenLine = 0;
    let numberOfCharactersOnPreviousLines = 0;
    let lastNonTriviaNonCommentToken = void 0;
    let secondToLastNonTriviaNonCommentToken = void 0;
    let lineOfLastNonTriviaNonCommentToken = -1;
    let endIndexOfLastNonTriviaNonCommentToken = -1;
    let beginningLineNumber = 0;
    let endLineNumber = 0;
    let currentContainerStack = [];
    let updateLastPropertyEndLineNumber = false;
    let updateBeginningLineNumber = false;
    while ((token = scanner.scan()) !== 17) {
      if (updateLastPropertyEndLineNumber === true && token !== 14 && token !== 15 && token !== 12 && token !== 13 && currentProperty.endLineNumber === void 0) {
        let endLineNumber2 = scanner.getTokenStartLine();
        if (secondToLastNonTriviaNonCommentToken === 2 || secondToLastNonTriviaNonCommentToken === 4) {
          lastProperty.endLineNumber = endLineNumber2 - 1;
        } else {
          currentProperty.endLineNumber = endLineNumber2 - 1;
        }
        beginningLineNumber = endLineNumber2;
        updateLastPropertyEndLineNumber = false;
      }
      if (updateBeginningLineNumber === true && token !== 14 && token !== 15 && token !== 12 && token !== 13) {
        beginningLineNumber = scanner.getTokenStartLine();
        updateBeginningLineNumber = false;
      }
      if (scanner.getTokenStartLine() !== lastTokenLine) {
        for (let i = lastTokenLine; i < scanner.getTokenStartLine(); i++) {
          const lengthOfLine = formattedDocument.getText(Range2.create(Position2.create(i, 0), Position2.create(i + 1, 0))).length;
          numberOfCharactersOnPreviousLines = numberOfCharactersOnPreviousLines + lengthOfLine;
        }
        lastTokenLine = scanner.getTokenStartLine();
      }
      switch (token) {
        case 10: {
          if (lastNonTriviaNonCommentToken === void 0 || lastNonTriviaNonCommentToken === 1 || lastNonTriviaNonCommentToken === 5 && currentContainerStack[currentContainerStack.length - 1] === Container.Object) {
            const childProperty = new PropertyTree(scanner.getTokenValue(), beginningLineNumber);
            lastProperty = currentProperty;
            currentProperty = currentTree.addChildProperty(childProperty);
          }
          break;
        }
        case 3: {
          if (rootTree.beginningLineNumber === void 0) {
            rootTree.beginningLineNumber = scanner.getTokenStartLine();
          }
          if (currentContainerStack[currentContainerStack.length - 1] === Container.Object) {
            currentTree = currentProperty;
          } else if (currentContainerStack[currentContainerStack.length - 1] === Container.Array) {
            const childProperty = new PropertyTree(scanner.getTokenValue(), beginningLineNumber);
            childProperty.noKeyName = true;
            lastProperty = currentProperty;
            currentProperty = currentTree.addChildProperty(childProperty);
            currentTree = currentProperty;
          }
          currentContainerStack.push(Container.Array);
          currentProperty.type = Container.Array;
          beginningLineNumber = scanner.getTokenStartLine();
          beginningLineNumber++;
          break;
        }
        case 1: {
          if (rootTree.beginningLineNumber === void 0) {
            rootTree.beginningLineNumber = scanner.getTokenStartLine();
          } else if (currentContainerStack[currentContainerStack.length - 1] === Container.Array) {
            const childProperty = new PropertyTree(scanner.getTokenValue(), beginningLineNumber);
            childProperty.noKeyName = true;
            lastProperty = currentProperty;
            currentProperty = currentTree.addChildProperty(childProperty);
          }
          currentProperty.type = Container.Object;
          currentContainerStack.push(Container.Object);
          currentTree = currentProperty;
          beginningLineNumber = scanner.getTokenStartLine();
          beginningLineNumber++;
          break;
        }
        case 4: {
          endLineNumber = scanner.getTokenStartLine();
          currentContainerStack.pop();
          if (currentProperty.endLineNumber === void 0 && (lastNonTriviaNonCommentToken === 2 || lastNonTriviaNonCommentToken === 4)) {
            currentProperty.endLineNumber = endLineNumber - 1;
            currentProperty.lastProperty = true;
            currentProperty.lineWhereToAddComma = lineOfLastNonTriviaNonCommentToken;
            currentProperty.indexWhereToAddComa = endIndexOfLastNonTriviaNonCommentToken;
            lastProperty = currentProperty;
            currentProperty = currentProperty ? currentProperty.parent : void 0;
            currentTree = currentProperty;
          }
          rootTree.endLineNumber = endLineNumber;
          beginningLineNumber = endLineNumber + 1;
          break;
        }
        case 2: {
          endLineNumber = scanner.getTokenStartLine();
          currentContainerStack.pop();
          if (lastNonTriviaNonCommentToken !== 1) {
            if (currentProperty.endLineNumber === void 0) {
              currentProperty.endLineNumber = endLineNumber - 1;
              currentProperty.lastProperty = true;
              currentProperty.lineWhereToAddComma = lineOfLastNonTriviaNonCommentToken;
              currentProperty.indexWhereToAddComa = endIndexOfLastNonTriviaNonCommentToken;
            }
            lastProperty = currentProperty;
            currentProperty = currentProperty ? currentProperty.parent : void 0;
            currentTree = currentProperty;
          }
          rootTree.endLineNumber = scanner.getTokenStartLine();
          beginningLineNumber = endLineNumber + 1;
          break;
        }
        case 5: {
          endLineNumber = scanner.getTokenStartLine();
          if (currentProperty.endLineNumber === void 0 && (currentContainerStack[currentContainerStack.length - 1] === Container.Object || currentContainerStack[currentContainerStack.length - 1] === Container.Array && (lastNonTriviaNonCommentToken === 2 || lastNonTriviaNonCommentToken === 4))) {
            currentProperty.endLineNumber = endLineNumber;
            currentProperty.commaIndex = scanner.getTokenOffset() - numberOfCharactersOnPreviousLines;
            currentProperty.commaLine = endLineNumber;
          }
          if (lastNonTriviaNonCommentToken === 2 || lastNonTriviaNonCommentToken === 4) {
            lastProperty = currentProperty;
            currentProperty = currentProperty ? currentProperty.parent : void 0;
            currentTree = currentProperty;
          }
          beginningLineNumber = endLineNumber + 1;
          break;
        }
        case 13: {
          if (lastNonTriviaNonCommentToken === 5 && lineOfLastNonTriviaNonCommentToken === scanner.getTokenStartLine() && (currentContainerStack[currentContainerStack.length - 1] === Container.Array && (secondToLastNonTriviaNonCommentToken === 2 || secondToLastNonTriviaNonCommentToken === 4) || currentContainerStack[currentContainerStack.length - 1] === Container.Object)) {
            if (currentContainerStack[currentContainerStack.length - 1] === Container.Array && (secondToLastNonTriviaNonCommentToken === 2 || secondToLastNonTriviaNonCommentToken === 4) || currentContainerStack[currentContainerStack.length - 1] === Container.Object) {
              currentProperty.endLineNumber = void 0;
              updateLastPropertyEndLineNumber = true;
            }
          }
          if ((lastNonTriviaNonCommentToken === 1 || lastNonTriviaNonCommentToken === 3) && lineOfLastNonTriviaNonCommentToken === scanner.getTokenStartLine()) {
            updateBeginningLineNumber = true;
          }
          break;
        }
      }
      if (token !== 14 && token !== 13 && token !== 12 && token !== 15) {
        secondToLastNonTriviaNonCommentToken = lastNonTriviaNonCommentToken;
        lastNonTriviaNonCommentToken = token;
        lineOfLastNonTriviaNonCommentToken = scanner.getTokenStartLine();
        endIndexOfLastNonTriviaNonCommentToken = scanner.getTokenOffset() + scanner.getTokenLength() - numberOfCharactersOnPreviousLines;
      }
    }
    return rootTree;
  }
  function sortJsoncDocument(jsonDocument, propertyTree) {
    if (propertyTree.childrenProperties.length === 0) {
      return jsonDocument;
    }
    const sortedJsonDocument = TextDocument2.create("test://test.json", "json", 0, jsonDocument.getText());
    const queueToSort = [];
    updateSortingQueue(queueToSort, propertyTree, propertyTree.beginningLineNumber);
    while (queueToSort.length > 0) {
      const dataToSort = queueToSort.shift();
      const propertyTreeArray = dataToSort.propertyTreeArray;
      let beginningLineNumber = dataToSort.beginningLineNumber;
      for (let i = 0; i < propertyTreeArray.length; i++) {
        const propertyTree2 = propertyTreeArray[i];
        const range = Range2.create(Position2.create(propertyTree2.beginningLineNumber, 0), Position2.create(propertyTree2.endLineNumber + 1, 0));
        const jsonContentToReplace = jsonDocument.getText(range);
        const jsonDocumentToReplace = TextDocument2.create("test://test.json", "json", 0, jsonContentToReplace);
        if (propertyTree2.lastProperty === true && i !== propertyTreeArray.length - 1) {
          const lineWhereToAddComma = propertyTree2.lineWhereToAddComma - propertyTree2.beginningLineNumber;
          const indexWhereToAddComma = propertyTree2.indexWhereToAddComa;
          const edit2 = {
            range: Range2.create(Position2.create(lineWhereToAddComma, indexWhereToAddComma), Position2.create(lineWhereToAddComma, indexWhereToAddComma)),
            text: ","
          };
          TextDocument2.update(jsonDocumentToReplace, [edit2], 1);
        } else if (propertyTree2.lastProperty === false && i === propertyTreeArray.length - 1) {
          const commaIndex = propertyTree2.commaIndex;
          const commaLine = propertyTree2.commaLine;
          const lineWhereToRemoveComma = commaLine - propertyTree2.beginningLineNumber;
          const edit2 = {
            range: Range2.create(Position2.create(lineWhereToRemoveComma, commaIndex), Position2.create(lineWhereToRemoveComma, commaIndex + 1)),
            text: ""
          };
          TextDocument2.update(jsonDocumentToReplace, [edit2], 1);
        }
        const length = propertyTree2.endLineNumber - propertyTree2.beginningLineNumber + 1;
        const edit = {
          range: Range2.create(Position2.create(beginningLineNumber, 0), Position2.create(beginningLineNumber + length, 0)),
          text: jsonDocumentToReplace.getText()
        };
        TextDocument2.update(sortedJsonDocument, [edit], 1);
        updateSortingQueue(queueToSort, propertyTree2, beginningLineNumber);
        beginningLineNumber = beginningLineNumber + length;
      }
    }
    return sortedJsonDocument;
  }
  function updateSortingQueue(queue, propertyTree, beginningLineNumber) {
    if (propertyTree.childrenProperties.length === 0) {
      return;
    }
    if (propertyTree.type === Container.Object) {
      let minimumBeginningLineNumber = Infinity;
      for (const childProperty of propertyTree.childrenProperties) {
        if (childProperty.beginningLineNumber < minimumBeginningLineNumber) {
          minimumBeginningLineNumber = childProperty.beginningLineNumber;
        }
      }
      const diff = minimumBeginningLineNumber - propertyTree.beginningLineNumber;
      beginningLineNumber = beginningLineNumber + diff;
      queue.push(new SortingRange(beginningLineNumber, propertyTree.childrenProperties));
    } else if (propertyTree.type === Container.Array) {
      updateSortingQueueForArrayProperties(queue, propertyTree, beginningLineNumber);
    }
  }
  function updateSortingQueueForArrayProperties(queue, propertyTree, beginningLineNumber) {
    for (const subObject of propertyTree.childrenProperties) {
      if (subObject.type === Container.Object) {
        let minimumBeginningLineNumber = Infinity;
        for (const childProperty of subObject.childrenProperties) {
          if (childProperty.beginningLineNumber < minimumBeginningLineNumber) {
            minimumBeginningLineNumber = childProperty.beginningLineNumber;
          }
        }
        const diff = minimumBeginningLineNumber - subObject.beginningLineNumber;
        queue.push(new SortingRange(beginningLineNumber + subObject.beginningLineNumber - propertyTree.beginningLineNumber + diff, subObject.childrenProperties));
      }
      if (subObject.type === Container.Array) {
        updateSortingQueueForArrayProperties(queue, subObject, beginningLineNumber + subObject.beginningLineNumber - propertyTree.beginningLineNumber);
      }
    }
  }
  var SortingRange = class {
    constructor(beginningLineNumber, propertyTreeArray) {
      this.beginningLineNumber = beginningLineNumber;
      this.propertyTreeArray = propertyTreeArray;
    }
  };
  function findLinks(document2, doc) {
    const links = [];
    doc.visit((node) => {
      if (node.type === "property" && node.keyNode.value === "$ref" && node.valueNode?.type === "string") {
        const path = node.valueNode.value;
        const targetNode = findTargetNode(doc, path);
        if (targetNode) {
          const targetPos = document2.positionAt(targetNode.offset);
          links.push({
            target: `${document2.uri}#${targetPos.line + 1},${targetPos.character + 1}`,
            range: createRange(document2, node.valueNode)
          });
        }
      }
      return true;
    });
    return Promise.resolve(links);
  }
  function createRange(document2, node) {
    return Range2.create(document2.positionAt(node.offset + 1), document2.positionAt(node.offset + node.length - 1));
  }
  function findTargetNode(doc, path) {
    const tokens = parseJSONPointer(path);
    if (!tokens) {
      return null;
    }
    return findNode(tokens, doc.root);
  }
  function findNode(pointer, node) {
    if (!node) {
      return null;
    }
    if (pointer.length === 0) {
      return node;
    }
    const token = pointer.shift();
    if (node && node.type === "object") {
      const propertyNode = node.properties.find((propertyNode2) => propertyNode2.keyNode.value === token);
      if (!propertyNode) {
        return null;
      }
      return findNode(pointer, propertyNode.valueNode);
    } else if (node && node.type === "array") {
      if (token.match(/^(0|[1-9][0-9]*)$/)) {
        const index = Number.parseInt(token);
        const arrayItem = node.items[index];
        if (!arrayItem) {
          return null;
        }
        return findNode(pointer, arrayItem);
      }
    }
    return null;
  }
  function parseJSONPointer(path) {
    if (path === "#") {
      return [];
    }
    if (path[0] !== "#" || path[1] !== "/") {
      return null;
    }
    return path.substring(2).split(/\//).map(unescape);
  }
  function unescape(str) {
    return str.replace(/~1/g, "/").replace(/~0/g, "~");
  }
  function getLanguageService(params) {
    const promise = params.promiseConstructor || Promise;
    const jsonSchemaService = new JSONSchemaService(params.schemaRequestService, params.workspaceContext, promise);
    jsonSchemaService.setSchemaContributions(schemaContributions);
    const jsonCompletion = new JSONCompletion(jsonSchemaService, params.contributions, promise, params.clientCapabilities);
    const jsonHover = new JSONHover(jsonSchemaService, params.contributions, promise);
    const jsonDocumentSymbols = new JSONDocumentSymbols(jsonSchemaService);
    const jsonValidation = new JSONValidation(jsonSchemaService, promise);
    return {
      configure: (settings) => {
        jsonSchemaService.clearExternalSchemas();
        settings.schemas?.forEach(jsonSchemaService.registerExternalSchema.bind(jsonSchemaService));
        jsonValidation.configure(settings);
      },
      resetSchema: (uri) => jsonSchemaService.onResourceChange(uri),
      doValidation: jsonValidation.doValidation.bind(jsonValidation),
      getLanguageStatus: jsonValidation.getLanguageStatus.bind(jsonValidation),
      parseJSONDocument: (document2) => parse3(document2, { collectComments: true }),
      newJSONDocument: (root, diagnostics) => newJSONDocument(root, diagnostics),
      getMatchingSchemas: jsonSchemaService.getMatchingSchemas.bind(jsonSchemaService),
      doResolve: jsonCompletion.doResolve.bind(jsonCompletion),
      doComplete: jsonCompletion.doComplete.bind(jsonCompletion),
      findDocumentSymbols: jsonDocumentSymbols.findDocumentSymbols.bind(jsonDocumentSymbols),
      findDocumentSymbols2: jsonDocumentSymbols.findDocumentSymbols2.bind(jsonDocumentSymbols),
      findDocumentColors: jsonDocumentSymbols.findDocumentColors.bind(jsonDocumentSymbols),
      getColorPresentations: jsonDocumentSymbols.getColorPresentations.bind(jsonDocumentSymbols),
      doHover: jsonHover.doHover.bind(jsonHover),
      getFoldingRanges,
      getSelectionRanges,
      findDefinition: () => Promise.resolve([]),
      findLinks,
      format: (document2, range, options) => format4(document2, options, range),
      sort: (document2, options) => sort(document2, options)
    };
  }
  var defaultSchemaRequestService;
  if (typeof fetch !== "undefined") {
    defaultSchemaRequestService = function(url) {
      return fetch(url).then((response) => response.text());
    };
  }
  var JSONWorker = class {
    constructor(ctx, createData) {
      this._ctx = ctx;
      this._languageSettings = createData.languageSettings;
      this._languageId = createData.languageId;
      this._languageService = getLanguageService({
        workspaceContext: {
          resolveRelativePath: (relativePath, resource) => {
            const base = resource.substr(0, resource.lastIndexOf("/") + 1);
            return resolvePath(base, relativePath);
          }
        },
        schemaRequestService: createData.enableSchemaRequest ? defaultSchemaRequestService : void 0,
        clientCapabilities: ClientCapabilities.LATEST
      });
      this._languageService.configure(this._languageSettings);
    }
    async doValidation(uri) {
      let document2 = this._getTextDocument(uri);
      if (document2) {
        let jsonDocument = this._languageService.parseJSONDocument(document2);
        return this._languageService.doValidation(document2, jsonDocument, this._languageSettings);
      }
      return Promise.resolve([]);
    }
    async doComplete(uri, position) {
      let document2 = this._getTextDocument(uri);
      if (!document2) {
        return null;
      }
      let jsonDocument = this._languageService.parseJSONDocument(document2);
      return this._languageService.doComplete(document2, position, jsonDocument);
    }
    async doResolve(item) {
      return this._languageService.doResolve(item);
    }
    async doHover(uri, position) {
      let document2 = this._getTextDocument(uri);
      if (!document2) {
        return null;
      }
      let jsonDocument = this._languageService.parseJSONDocument(document2);
      return this._languageService.doHover(document2, position, jsonDocument);
    }
    async format(uri, range, options) {
      let document2 = this._getTextDocument(uri);
      if (!document2) {
        return [];
      }
      let textEdits = this._languageService.format(document2, range, options);
      return Promise.resolve(textEdits);
    }
    async resetSchema(uri) {
      return Promise.resolve(this._languageService.resetSchema(uri));
    }
    async findDocumentSymbols(uri) {
      let document2 = this._getTextDocument(uri);
      if (!document2) {
        return [];
      }
      let jsonDocument = this._languageService.parseJSONDocument(document2);
      let symbols = this._languageService.findDocumentSymbols2(document2, jsonDocument);
      return Promise.resolve(symbols);
    }
    async findDocumentColors(uri) {
      let document2 = this._getTextDocument(uri);
      if (!document2) {
        return [];
      }
      let jsonDocument = this._languageService.parseJSONDocument(document2);
      let colorSymbols = this._languageService.findDocumentColors(document2, jsonDocument);
      return Promise.resolve(colorSymbols);
    }
    async getColorPresentations(uri, color, range) {
      let document2 = this._getTextDocument(uri);
      if (!document2) {
        return [];
      }
      let jsonDocument = this._languageService.parseJSONDocument(document2);
      let colorPresentations = this._languageService.getColorPresentations(
        document2,
        jsonDocument,
        color,
        range
      );
      return Promise.resolve(colorPresentations);
    }
    async getFoldingRanges(uri, context) {
      let document2 = this._getTextDocument(uri);
      if (!document2) {
        return [];
      }
      let ranges = this._languageService.getFoldingRanges(document2, context);
      return Promise.resolve(ranges);
    }
    async getSelectionRanges(uri, positions) {
      let document2 = this._getTextDocument(uri);
      if (!document2) {
        return [];
      }
      let jsonDocument = this._languageService.parseJSONDocument(document2);
      let ranges = this._languageService.getSelectionRanges(document2, positions, jsonDocument);
      return Promise.resolve(ranges);
    }
    async parseJSONDocument(uri) {
      let document2 = this._getTextDocument(uri);
      if (!document2) {
        return null;
      }
      let jsonDocument = this._languageService.parseJSONDocument(document2);
      return Promise.resolve(jsonDocument);
    }
    async getMatchingSchemas(uri) {
      let document2 = this._getTextDocument(uri);
      if (!document2) {
        return [];
      }
      let jsonDocument = this._languageService.parseJSONDocument(document2);
      return Promise.resolve(this._languageService.getMatchingSchemas(document2, jsonDocument));
    }
    _getTextDocument(uri) {
      let models = this._ctx.getMirrorModels();
      for (let model of models) {
        if (model.uri.toString() === uri) {
          return TextDocument2.create(
            uri,
            this._languageId,
            model.version,
            model.getValue()
          );
        }
      }
      return null;
    }
  };
  var Slash = "/".charCodeAt(0);
  var Dot = ".".charCodeAt(0);
  function isAbsolutePath(path) {
    return path.charCodeAt(0) === Slash;
  }
  function resolvePath(uriString, path) {
    if (isAbsolutePath(path)) {
      const uri = URI22.parse(uriString);
      const parts = path.split("/");
      return uri.with({ path: normalizePath(parts) }).toString();
    }
    return joinPath(uriString, path);
  }
  function normalizePath(parts) {
    const newParts = [];
    for (const part of parts) {
      if (part.length === 0 || part.length === 1 && part.charCodeAt(0) === Dot) {
      } else if (part.length === 2 && part.charCodeAt(0) === Dot && part.charCodeAt(1) === Dot) {
        newParts.pop();
      } else {
        newParts.push(part);
      }
    }
    if (parts.length > 1 && parts[parts.length - 1].length === 0) {
      newParts.push("");
    }
    let res = newParts.join("/");
    if (parts[0].length === 0) {
      res = "/" + res;
    }
    return res;
  }
  function joinPath(uriString, ...paths) {
    const uri = URI22.parse(uriString);
    const parts = uri.path.split("/");
    for (let path of paths) {
      parts.push(...path.split("/"));
    }
    return uri.with({ path: normalizePath(parts) }).toString();
  }
  self.onmessage = () => {
    initialize((ctx, createData) => {
      return new JSONWorker(ctx, createData);
    });
  };
})();
/*! Bundled license information:

monaco-editor/esm/vs/language/json/json.worker.js:
  (*!-----------------------------------------------------------------------------
   * Copyright (c) Microsoft Corporation. All rights reserved.
   * Version: 0.50.0(c321d0fbecb50ab8a5365fa1965476b0ae63fc87)
   * Released under the MIT license
   * https://github.com/microsoft/monaco-editor/blob/main/LICENSE.txt
   *-----------------------------------------------------------------------------*)
*/
//# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAic291cmNlcyI6IFsiLi4vLi4vLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL21vbmFjby1lZGl0b3IvZXNtL3ZzL2Jhc2UvY29tbW9uL2Vycm9ycy5qcyIsICIuLi8uLi8uLi8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvbW9uYWNvLWVkaXRvci9lc20vdnMvYmFzZS9jb21tb24vZnVuY3Rpb25hbC5qcyIsICIuLi8uLi8uLi8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvbW9uYWNvLWVkaXRvci9lc20vdnMvYmFzZS9jb21tb24vaXRlcmF0b3IuanMiLCAiLi4vLi4vLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL21vbmFjby1lZGl0b3IvZXNtL3ZzL2Jhc2UvY29tbW9uL2xpZmVjeWNsZS5qcyIsICIuLi8uLi8uLi8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvbW9uYWNvLWVkaXRvci9lc20vdnMvYmFzZS9jb21tb24vbGlua2VkTGlzdC5qcyIsICIuLi8uLi8uLi8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvbW9uYWNvLWVkaXRvci9lc20vdnMvYmFzZS9jb21tb24vc3RvcHdhdGNoLmpzIiwgIi4uLy4uLy4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9tb25hY28tZWRpdG9yL2VzbS92cy9iYXNlL2NvbW1vbi9ldmVudC5qcyIsICIuLi8uLi8uLi8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvbW9uYWNvLWVkaXRvci9lc20vdnMvYmFzZS9jb21tb24vdHlwZXMuanMiLCAiLi4vLi4vLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL21vbmFjby1lZGl0b3IvZXNtL3ZzL2Jhc2UvY29tbW9uL29iamVjdHMuanMiLCAiLi4vLi4vLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL21vbmFjby1lZGl0b3IvZXNtL3ZzL25scy5qcyIsICIuLi8uLi8uLi8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvbW9uYWNvLWVkaXRvci9lc20vdnMvYmFzZS9jb21tb24vcGxhdGZvcm0uanMiLCAiLi4vLi4vLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL21vbmFjby1lZGl0b3IvZXNtL3ZzL2Jhc2UvY29tbW9uL2NhY2hlLmpzIiwgIi4uLy4uLy4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9tb25hY28tZWRpdG9yL2VzbS92cy9iYXNlL2NvbW1vbi9sYXp5LmpzIiwgIi4uLy4uLy4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9tb25hY28tZWRpdG9yL2VzbS92cy9iYXNlL2NvbW1vbi9zdHJpbmdzLmpzIiwgIi4uLy4uLy4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9tb25hY28tZWRpdG9yL2VzbS92cy9iYXNlL2NvbW1vbi93b3JrZXIvc2ltcGxlV29ya2VyLmpzIiwgIi4uLy4uLy4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9tb25hY28tZWRpdG9yL2VzbS92cy9iYXNlL2NvbW1vbi9kaWZmL2RpZmZDaGFuZ2UuanMiLCAiLi4vLi4vLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL21vbmFjby1lZGl0b3IvZXNtL3ZzL2Jhc2UvY29tbW9uL2hhc2guanMiLCAiLi4vLi4vLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL21vbmFjby1lZGl0b3IvZXNtL3ZzL2Jhc2UvY29tbW9uL2RpZmYvZGlmZi5qcyIsICIuLi8uLi8uLi8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvbW9uYWNvLWVkaXRvci9lc20vdnMvYmFzZS9jb21tb24vcHJvY2Vzcy5qcyIsICIuLi8uLi8uLi8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvbW9uYWNvLWVkaXRvci9lc20vdnMvYmFzZS9jb21tb24vcGF0aC5qcyIsICIuLi8uLi8uLi8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvbW9uYWNvLWVkaXRvci9lc20vdnMvYmFzZS9jb21tb24vdXJpLmpzIiwgIi4uLy4uLy4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9tb25hY28tZWRpdG9yL2VzbS92cy9lZGl0b3IvY29tbW9uL2NvcmUvcG9zaXRpb24uanMiLCAiLi4vLi4vLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL21vbmFjby1lZGl0b3IvZXNtL3ZzL2VkaXRvci9jb21tb24vY29yZS9yYW5nZS5qcyIsICIuLi8uLi8uLi8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvbW9uYWNvLWVkaXRvci9lc20vdnMvYmFzZS9jb21tb24vYXJyYXlzLmpzIiwgIi4uLy4uLy4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9tb25hY28tZWRpdG9yL2VzbS92cy9iYXNlL2NvbW1vbi91aW50LmpzIiwgIi4uLy4uLy4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9tb25hY28tZWRpdG9yL2VzbS92cy9lZGl0b3IvY29tbW9uL21vZGVsL3ByZWZpeFN1bUNvbXB1dGVyLmpzIiwgIi4uLy4uLy4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9tb25hY28tZWRpdG9yL2VzbS92cy9lZGl0b3IvY29tbW9uL21vZGVsL21pcnJvclRleHRNb2RlbC5qcyIsICIuLi8uLi8uLi8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvbW9uYWNvLWVkaXRvci9lc20vdnMvZWRpdG9yL2NvbW1vbi9jb3JlL3dvcmRIZWxwZXIuanMiLCAiLi4vLi4vLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL21vbmFjby1lZGl0b3IvZXNtL3ZzL2VkaXRvci9jb21tb24vY29yZS9jaGFyYWN0ZXJDbGFzc2lmaWVyLmpzIiwgIi4uLy4uLy4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9tb25hY28tZWRpdG9yL2VzbS92cy9lZGl0b3IvY29tbW9uL2xhbmd1YWdlcy9saW5rQ29tcHV0ZXIuanMiLCAiLi4vLi4vLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL21vbmFjby1lZGl0b3IvZXNtL3ZzL2VkaXRvci9jb21tb24vbGFuZ3VhZ2VzL3N1cHBvcnRzL2lucGxhY2VSZXBsYWNlU3VwcG9ydC5qcyIsICIuLi8uLi8uLi8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvbW9uYWNvLWVkaXRvci9lc20vdnMvYmFzZS9jb21tb24vY2FuY2VsbGF0aW9uLmpzIiwgIi4uLy4uLy4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9tb25hY28tZWRpdG9yL2VzbS92cy9iYXNlL2NvbW1vbi9rZXlDb2Rlcy5qcyIsICIuLi8uLi8uLi8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvbW9uYWNvLWVkaXRvci9lc20vdnMvZWRpdG9yL2NvbW1vbi9jb3JlL3NlbGVjdGlvbi5qcyIsICIuLi8uLi8uLi8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvbW9uYWNvLWVkaXRvci9lc20vdnMvYmFzZS9jb21tb24vY29kaWNvbnNVdGlsLmpzIiwgIi4uLy4uLy4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9tb25hY28tZWRpdG9yL2VzbS92cy9iYXNlL2NvbW1vbi9jb2RpY29uc0xpYnJhcnkuanMiLCAiLi4vLi4vLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL21vbmFjby1lZGl0b3IvZXNtL3ZzL2Jhc2UvY29tbW9uL2NvZGljb25zLmpzIiwgIi4uLy4uLy4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9tb25hY28tZWRpdG9yL2VzbS92cy9lZGl0b3IvY29tbW9uL3Rva2VuaXphdGlvblJlZ2lzdHJ5LmpzIiwgIi4uLy4uLy4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9tb25hY28tZWRpdG9yL2VzbS92cy9lZGl0b3IvY29tbW9uL2xhbmd1YWdlcy5qcyIsICIuLi8uLi8uLi8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvbW9uYWNvLWVkaXRvci9lc20vdnMvZWRpdG9yL2NvbW1vbi9zdGFuZGFsb25lL3N0YW5kYWxvbmVFbnVtcy5qcyIsICIuLi8uLi8uLi8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvbW9uYWNvLWVkaXRvci9lc20vdnMvZWRpdG9yL2NvbW1vbi9zZXJ2aWNlcy9lZGl0b3JCYXNlQXBpLmpzIiwgIi4uLy4uLy4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9tb25hY28tZWRpdG9yL2VzbS92cy9iYXNlL2NvbW1vbi9tYXAuanMiLCAiLi4vLi4vLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL21vbmFjby1lZGl0b3IvZXNtL3ZzL2VkaXRvci9jb21tb24vY29yZS93b3JkQ2hhcmFjdGVyQ2xhc3NpZmllci5qcyIsICIuLi8uLi8uLi8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvbW9uYWNvLWVkaXRvci9lc20vdnMvZWRpdG9yL2NvbW1vbi9tb2RlbC5qcyIsICIuLi8uLi8uLi8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvbW9uYWNvLWVkaXRvci9lc20vdnMvZWRpdG9yL2NvbW1vbi9tb2RlbC90ZXh0TW9kZWxTZWFyY2guanMiLCAiLi4vLi4vLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL21vbmFjby1lZGl0b3IvZXNtL3ZzL2Jhc2UvY29tbW9uL2Fzc2VydC5qcyIsICIuLi8uLi8uLi8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvbW9uYWNvLWVkaXRvci9lc20vdnMvZWRpdG9yL2NvbW1vbi9zZXJ2aWNlcy91bmljb2RlVGV4dE1vZGVsSGlnaGxpZ2h0ZXIuanMiLCAiLi4vLi4vLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL21vbmFjby1lZGl0b3IvZXNtL3ZzL2VkaXRvci9jb21tb24vZGlmZi9saW5lc0RpZmZDb21wdXRlci5qcyIsICIuLi8uLi8uLi8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvbW9uYWNvLWVkaXRvci9lc20vdnMvZWRpdG9yL2NvbW1vbi9jb3JlL29mZnNldFJhbmdlLmpzIiwgIi4uLy4uLy4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9tb25hY28tZWRpdG9yL2VzbS92cy9iYXNlL2NvbW1vbi9hcnJheXNGaW5kLmpzIiwgIi4uLy4uLy4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9tb25hY28tZWRpdG9yL2VzbS92cy9lZGl0b3IvY29tbW9uL2NvcmUvbGluZVJhbmdlLmpzIiwgIi4uLy4uLy4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9tb25hY28tZWRpdG9yL2VzbS92cy9lZGl0b3IvY29tbW9uL2NvcmUvdGV4dExlbmd0aC5qcyIsICIuLi8uLi8uLi8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvbW9uYWNvLWVkaXRvci9lc20vdnMvZWRpdG9yL2NvbW1vbi9jb3JlL3RleHRFZGl0LmpzIiwgIi4uLy4uLy4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9tb25hY28tZWRpdG9yL2VzbS92cy9lZGl0b3IvY29tbW9uL2RpZmYvcmFuZ2VNYXBwaW5nLmpzIiwgIi4uLy4uLy4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9tb25hY28tZWRpdG9yL2VzbS92cy9lZGl0b3IvY29tbW9uL2RpZmYvbGVnYWN5TGluZXNEaWZmQ29tcHV0ZXIuanMiLCAiLi4vLi4vLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL21vbmFjby1lZGl0b3IvZXNtL3ZzL2VkaXRvci9jb21tb24vZGlmZi9kZWZhdWx0TGluZXNEaWZmQ29tcHV0ZXIvYWxnb3JpdGhtcy9kaWZmQWxnb3JpdGhtLmpzIiwgIi4uLy4uLy4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9tb25hY28tZWRpdG9yL2VzbS92cy9lZGl0b3IvY29tbW9uL2RpZmYvZGVmYXVsdExpbmVzRGlmZkNvbXB1dGVyL3V0aWxzLmpzIiwgIi4uLy4uLy4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9tb25hY28tZWRpdG9yL2VzbS92cy9lZGl0b3IvY29tbW9uL2RpZmYvZGVmYXVsdExpbmVzRGlmZkNvbXB1dGVyL2FsZ29yaXRobXMvZHluYW1pY1Byb2dyYW1taW5nRGlmZmluZy5qcyIsICIuLi8uLi8uLi8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvbW9uYWNvLWVkaXRvci9lc20vdnMvZWRpdG9yL2NvbW1vbi9kaWZmL2RlZmF1bHRMaW5lc0RpZmZDb21wdXRlci9hbGdvcml0aG1zL215ZXJzRGlmZkFsZ29yaXRobS5qcyIsICIuLi8uLi8uLi8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvbW9uYWNvLWVkaXRvci9lc20vdnMvZWRpdG9yL2NvbW1vbi9kaWZmL2RlZmF1bHRMaW5lc0RpZmZDb21wdXRlci9saW5lc1NsaWNlQ2hhclNlcXVlbmNlLmpzIiwgIi4uLy4uLy4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9tb25hY28tZWRpdG9yL2VzbS92cy9lZGl0b3IvY29tbW9uL2RpZmYvZGVmYXVsdExpbmVzRGlmZkNvbXB1dGVyL2NvbXB1dGVNb3ZlZExpbmVzLmpzIiwgIi4uLy4uLy4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9tb25hY28tZWRpdG9yL2VzbS92cy9lZGl0b3IvY29tbW9uL2RpZmYvZGVmYXVsdExpbmVzRGlmZkNvbXB1dGVyL2hldXJpc3RpY1NlcXVlbmNlT3B0aW1pemF0aW9ucy5qcyIsICIuLi8uLi8uLi8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvbW9uYWNvLWVkaXRvci9lc20vdnMvZWRpdG9yL2NvbW1vbi9kaWZmL2RlZmF1bHRMaW5lc0RpZmZDb21wdXRlci9saW5lU2VxdWVuY2UuanMiLCAiLi4vLi4vLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL21vbmFjby1lZGl0b3IvZXNtL3ZzL2VkaXRvci9jb21tb24vZGlmZi9kZWZhdWx0TGluZXNEaWZmQ29tcHV0ZXIvZGVmYXVsdExpbmVzRGlmZkNvbXB1dGVyLmpzIiwgIi4uLy4uLy4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9tb25hY28tZWRpdG9yL2VzbS92cy9lZGl0b3IvY29tbW9uL2RpZmYvbGluZXNEaWZmQ29tcHV0ZXJzLmpzIiwgIi4uLy4uLy4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9tb25hY28tZWRpdG9yL2VzbS92cy9iYXNlL2NvbW1vbi9jb2xvci5qcyIsICIuLi8uLi8uLi8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvbW9uYWNvLWVkaXRvci9lc20vdnMvZWRpdG9yL2NvbW1vbi9sYW5ndWFnZXMvZGVmYXVsdERvY3VtZW50Q29sb3JzQ29tcHV0ZXIuanMiLCAiLi4vLi4vLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL21vbmFjby1lZGl0b3IvZXNtL3ZzL2VkaXRvci9jb21tb24vc2VydmljZXMvZmluZFNlY3Rpb25IZWFkZXJzLmpzIiwgIi4uLy4uLy4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9tb25hY28tZWRpdG9yL2VzbS92cy9lZGl0b3IvY29tbW9uL3NlcnZpY2VzL2VkaXRvclNpbXBsZVdvcmtlci5qcyIsICIuLi8uLi8uLi8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvbW9uYWNvLWVkaXRvci9lc20vdnMvZWRpdG9yL2VkaXRvci53b3JrZXIuanMiLCAiLi4vLi4vLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL21vbmFjby1lZGl0b3IvZXNtL3ZzL2xhbmd1YWdlL2pzb24vanNvbi53b3JrZXIuanMiXSwKICAic291cmNlc0NvbnRlbnQiOiBbIi8qLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gKiAgQ29weXJpZ2h0IChjKSBNaWNyb3NvZnQgQ29ycG9yYXRpb24uIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKiAgTGljZW5zZWQgdW5kZXIgdGhlIE1JVCBMaWNlbnNlLiBTZWUgTGljZW5zZS50eHQgaW4gdGhlIHByb2plY3Qgcm9vdCBmb3IgbGljZW5zZSBpbmZvcm1hdGlvbi5cbiAqLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qL1xuLy8gQXZvaWQgY2lyY3VsYXIgZGVwZW5kZW5jeSBvbiBFdmVudEVtaXR0ZXIgYnkgaW1wbGVtZW50aW5nIGEgc3Vic2V0IG9mIHRoZSBpbnRlcmZhY2UuXG5leHBvcnQgY2xhc3MgRXJyb3JIYW5kbGVyIHtcbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgdGhpcy5saXN0ZW5lcnMgPSBbXTtcbiAgICAgICAgdGhpcy51bmV4cGVjdGVkRXJyb3JIYW5kbGVyID0gZnVuY3Rpb24gKGUpIHtcbiAgICAgICAgICAgIHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgICAgICAgICAgIGlmIChlLnN0YWNrKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChFcnJvck5vVGVsZW1ldHJ5LmlzRXJyb3JOb1RlbGVtZXRyeShlKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yTm9UZWxlbWV0cnkoZS5tZXNzYWdlICsgJ1xcblxcbicgKyBlLnN0YWNrKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoZS5tZXNzYWdlICsgJ1xcblxcbicgKyBlLnN0YWNrKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgdGhyb3cgZTtcbiAgICAgICAgICAgIH0sIDApO1xuICAgICAgICB9O1xuICAgIH1cbiAgICBlbWl0KGUpIHtcbiAgICAgICAgdGhpcy5saXN0ZW5lcnMuZm9yRWFjaCgobGlzdGVuZXIpID0+IHtcbiAgICAgICAgICAgIGxpc3RlbmVyKGUpO1xuICAgICAgICB9KTtcbiAgICB9XG4gICAgb25VbmV4cGVjdGVkRXJyb3IoZSkge1xuICAgICAgICB0aGlzLnVuZXhwZWN0ZWRFcnJvckhhbmRsZXIoZSk7XG4gICAgICAgIHRoaXMuZW1pdChlKTtcbiAgICB9XG4gICAgLy8gRm9yIGV4dGVybmFsIGVycm9ycywgd2UgZG9uJ3Qgd2FudCB0aGUgbGlzdGVuZXJzIHRvIGJlIGNhbGxlZFxuICAgIG9uVW5leHBlY3RlZEV4dGVybmFsRXJyb3IoZSkge1xuICAgICAgICB0aGlzLnVuZXhwZWN0ZWRFcnJvckhhbmRsZXIoZSk7XG4gICAgfVxufVxuZXhwb3J0IGNvbnN0IGVycm9ySGFuZGxlciA9IG5ldyBFcnJvckhhbmRsZXIoKTtcbmV4cG9ydCBmdW5jdGlvbiBvblVuZXhwZWN0ZWRFcnJvcihlKSB7XG4gICAgLy8gaWdub3JlIGVycm9ycyBmcm9tIGNhbmNlbGxlZCBwcm9taXNlc1xuICAgIGlmICghaXNDYW5jZWxsYXRpb25FcnJvcihlKSkge1xuICAgICAgICBlcnJvckhhbmRsZXIub25VbmV4cGVjdGVkRXJyb3IoZSk7XG4gICAgfVxuICAgIHJldHVybiB1bmRlZmluZWQ7XG59XG5leHBvcnQgZnVuY3Rpb24gb25VbmV4cGVjdGVkRXh0ZXJuYWxFcnJvcihlKSB7XG4gICAgLy8gaWdub3JlIGVycm9ycyBmcm9tIGNhbmNlbGxlZCBwcm9taXNlc1xuICAgIGlmICghaXNDYW5jZWxsYXRpb25FcnJvcihlKSkge1xuICAgICAgICBlcnJvckhhbmRsZXIub25VbmV4cGVjdGVkRXh0ZXJuYWxFcnJvcihlKTtcbiAgICB9XG4gICAgcmV0dXJuIHVuZGVmaW5lZDtcbn1cbmV4cG9ydCBmdW5jdGlvbiB0cmFuc2Zvcm1FcnJvckZvclNlcmlhbGl6YXRpb24oZXJyb3IpIHtcbiAgICBpZiAoZXJyb3IgaW5zdGFuY2VvZiBFcnJvcikge1xuICAgICAgICBjb25zdCB7IG5hbWUsIG1lc3NhZ2UgfSA9IGVycm9yO1xuICAgICAgICBjb25zdCBzdGFjayA9IGVycm9yLnN0YWNrdHJhY2UgfHwgZXJyb3Iuc3RhY2s7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAkaXNFcnJvcjogdHJ1ZSxcbiAgICAgICAgICAgIG5hbWUsXG4gICAgICAgICAgICBtZXNzYWdlLFxuICAgICAgICAgICAgc3RhY2ssXG4gICAgICAgICAgICBub1RlbGVtZXRyeTogRXJyb3JOb1RlbGVtZXRyeS5pc0Vycm9yTm9UZWxlbWV0cnkoZXJyb3IpXG4gICAgICAgIH07XG4gICAgfVxuICAgIC8vIHJldHVybiBhcyBpc1xuICAgIHJldHVybiBlcnJvcjtcbn1cbmNvbnN0IGNhbmNlbGVkTmFtZSA9ICdDYW5jZWxlZCc7XG4vKipcbiAqIENoZWNrcyBpZiB0aGUgZ2l2ZW4gZXJyb3IgaXMgYSBwcm9taXNlIGluIGNhbmNlbGVkIHN0YXRlXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBpc0NhbmNlbGxhdGlvbkVycm9yKGVycm9yKSB7XG4gICAgaWYgKGVycm9yIGluc3RhbmNlb2YgQ2FuY2VsbGF0aW9uRXJyb3IpIHtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICAgIHJldHVybiBlcnJvciBpbnN0YW5jZW9mIEVycm9yICYmIGVycm9yLm5hbWUgPT09IGNhbmNlbGVkTmFtZSAmJiBlcnJvci5tZXNzYWdlID09PSBjYW5jZWxlZE5hbWU7XG59XG4vLyAhISFJTVBPUlRBTlQhISFcbi8vIERvIE5PVCBjaGFuZ2UgdGhpcyBjbGFzcyBiZWNhdXNlIGl0IGlzIGFsc28gdXNlZCBhcyBhbiBBUEktdHlwZS5cbmV4cG9ydCBjbGFzcyBDYW5jZWxsYXRpb25FcnJvciBleHRlbmRzIEVycm9yIHtcbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgc3VwZXIoY2FuY2VsZWROYW1lKTtcbiAgICAgICAgdGhpcy5uYW1lID0gdGhpcy5tZXNzYWdlO1xuICAgIH1cbn1cbi8qKlxuICogQGRlcHJlY2F0ZWQgdXNlIHtAbGluayBDYW5jZWxsYXRpb25FcnJvciBgbmV3IENhbmNlbGxhdGlvbkVycm9yKClgfSBpbnN0ZWFkXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBjYW5jZWxlZCgpIHtcbiAgICBjb25zdCBlcnJvciA9IG5ldyBFcnJvcihjYW5jZWxlZE5hbWUpO1xuICAgIGVycm9yLm5hbWUgPSBlcnJvci5tZXNzYWdlO1xuICAgIHJldHVybiBlcnJvcjtcbn1cbmV4cG9ydCBmdW5jdGlvbiBpbGxlZ2FsQXJndW1lbnQobmFtZSkge1xuICAgIGlmIChuYW1lKSB7XG4gICAgICAgIHJldHVybiBuZXcgRXJyb3IoYElsbGVnYWwgYXJndW1lbnQ6ICR7bmFtZX1gKTtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIHJldHVybiBuZXcgRXJyb3IoJ0lsbGVnYWwgYXJndW1lbnQnKTtcbiAgICB9XG59XG5leHBvcnQgZnVuY3Rpb24gaWxsZWdhbFN0YXRlKG5hbWUpIHtcbiAgICBpZiAobmFtZSkge1xuICAgICAgICByZXR1cm4gbmV3IEVycm9yKGBJbGxlZ2FsIHN0YXRlOiAke25hbWV9YCk7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICByZXR1cm4gbmV3IEVycm9yKCdJbGxlZ2FsIHN0YXRlJyk7XG4gICAgfVxufVxuZXhwb3J0IGNsYXNzIE5vdFN1cHBvcnRlZEVycm9yIGV4dGVuZHMgRXJyb3Ige1xuICAgIGNvbnN0cnVjdG9yKG1lc3NhZ2UpIHtcbiAgICAgICAgc3VwZXIoJ05vdFN1cHBvcnRlZCcpO1xuICAgICAgICBpZiAobWVzc2FnZSkge1xuICAgICAgICAgICAgdGhpcy5tZXNzYWdlID0gbWVzc2FnZTtcbiAgICAgICAgfVxuICAgIH1cbn1cbi8qKlxuICogRXJyb3IgdGhhdCB3aGVuIHRocm93biB3b24ndCBiZSBsb2dnZWQgaW4gdGVsZW1ldHJ5IGFzIGFuIHVuaGFuZGxlZCBlcnJvci5cbiAqL1xuZXhwb3J0IGNsYXNzIEVycm9yTm9UZWxlbWV0cnkgZXh0ZW5kcyBFcnJvciB7XG4gICAgY29uc3RydWN0b3IobXNnKSB7XG4gICAgICAgIHN1cGVyKG1zZyk7XG4gICAgICAgIHRoaXMubmFtZSA9ICdDb2RlRXhwZWN0ZWRFcnJvcic7XG4gICAgfVxuICAgIHN0YXRpYyBmcm9tRXJyb3IoZXJyKSB7XG4gICAgICAgIGlmIChlcnIgaW5zdGFuY2VvZiBFcnJvck5vVGVsZW1ldHJ5KSB7XG4gICAgICAgICAgICByZXR1cm4gZXJyO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IHJlc3VsdCA9IG5ldyBFcnJvck5vVGVsZW1ldHJ5KCk7XG4gICAgICAgIHJlc3VsdC5tZXNzYWdlID0gZXJyLm1lc3NhZ2U7XG4gICAgICAgIHJlc3VsdC5zdGFjayA9IGVyci5zdGFjaztcbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG4gICAgc3RhdGljIGlzRXJyb3JOb1RlbGVtZXRyeShlcnIpIHtcbiAgICAgICAgcmV0dXJuIGVyci5uYW1lID09PSAnQ29kZUV4cGVjdGVkRXJyb3InO1xuICAgIH1cbn1cbi8qKlxuICogVGhpcyBlcnJvciBpbmRpY2F0ZXMgYSBidWcuXG4gKiBEbyBub3QgdGhyb3cgdGhpcyBmb3IgaW52YWxpZCB1c2VyIGlucHV0LlxuICogT25seSBjYXRjaCB0aGlzIGVycm9yIHRvIHJlY292ZXIgZ3JhY2VmdWxseSBmcm9tIGJ1Z3MuXG4gKi9cbmV4cG9ydCBjbGFzcyBCdWdJbmRpY2F0aW5nRXJyb3IgZXh0ZW5kcyBFcnJvciB7XG4gICAgY29uc3RydWN0b3IobWVzc2FnZSkge1xuICAgICAgICBzdXBlcihtZXNzYWdlIHx8ICdBbiB1bmV4cGVjdGVkIGJ1ZyBvY2N1cnJlZC4nKTtcbiAgICAgICAgT2JqZWN0LnNldFByb3RvdHlwZU9mKHRoaXMsIEJ1Z0luZGljYXRpbmdFcnJvci5wcm90b3R5cGUpO1xuICAgICAgICAvLyBCZWNhdXNlIHdlIGtub3cgZm9yIHN1cmUgb25seSBidWdneSBjb2RlIHRocm93cyB0aGlzLFxuICAgICAgICAvLyB3ZSBkZWZpbml0ZWx5IHdhbnQgdG8gYnJlYWsgaGVyZSBhbmQgZml4IHRoZSBidWcuXG4gICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1kZWJ1Z2dlclxuICAgICAgICAvLyBkZWJ1Z2dlcjtcbiAgICB9XG59XG4iLCAiLyotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAqICBDb3B5cmlnaHQgKGMpIE1pY3Jvc29mdCBDb3Jwb3JhdGlvbi4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqICBMaWNlbnNlZCB1bmRlciB0aGUgTUlUIExpY2Vuc2UuIFNlZSBMaWNlbnNlLnR4dCBpbiB0aGUgcHJvamVjdCByb290IGZvciBsaWNlbnNlIGluZm9ybWF0aW9uLlxuICotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSovXG4vKipcbiAqIEdpdmVuIGEgZnVuY3Rpb24sIHJldHVybnMgYSBmdW5jdGlvbiB0aGF0IGlzIG9ubHkgY2FsbGluZyB0aGF0IGZ1bmN0aW9uIG9uY2UuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBjcmVhdGVTaW5nbGVDYWxsRnVuY3Rpb24oZm4sIGZuRGlkUnVuQ2FsbGJhY2spIHtcbiAgICBjb25zdCBfdGhpcyA9IHRoaXM7XG4gICAgbGV0IGRpZENhbGwgPSBmYWxzZTtcbiAgICBsZXQgcmVzdWx0O1xuICAgIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGlmIChkaWRDYWxsKSB7XG4gICAgICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgICAgICB9XG4gICAgICAgIGRpZENhbGwgPSB0cnVlO1xuICAgICAgICBpZiAoZm5EaWRSdW5DYWxsYmFjaykge1xuICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICByZXN1bHQgPSBmbi5hcHBseShfdGhpcywgYXJndW1lbnRzKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGZpbmFsbHkge1xuICAgICAgICAgICAgICAgIGZuRGlkUnVuQ2FsbGJhY2soKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHJlc3VsdCA9IGZuLmFwcGx5KF90aGlzLCBhcmd1bWVudHMpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfTtcbn1cbiIsICIvKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICogIENvcHlyaWdodCAoYykgTWljcm9zb2Z0IENvcnBvcmF0aW9uLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICogIExpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgTGljZW5zZS4gU2VlIExpY2Vuc2UudHh0IGluIHRoZSBwcm9qZWN0IHJvb3QgZm9yIGxpY2Vuc2UgaW5mb3JtYXRpb24uXG4gKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKi9cbmV4cG9ydCB2YXIgSXRlcmFibGU7XG4oZnVuY3Rpb24gKEl0ZXJhYmxlKSB7XG4gICAgZnVuY3Rpb24gaXModGhpbmcpIHtcbiAgICAgICAgcmV0dXJuIHRoaW5nICYmIHR5cGVvZiB0aGluZyA9PT0gJ29iamVjdCcgJiYgdHlwZW9mIHRoaW5nW1N5bWJvbC5pdGVyYXRvcl0gPT09ICdmdW5jdGlvbic7XG4gICAgfVxuICAgIEl0ZXJhYmxlLmlzID0gaXM7XG4gICAgY29uc3QgX2VtcHR5ID0gT2JqZWN0LmZyZWV6ZShbXSk7XG4gICAgZnVuY3Rpb24gZW1wdHkoKSB7XG4gICAgICAgIHJldHVybiBfZW1wdHk7XG4gICAgfVxuICAgIEl0ZXJhYmxlLmVtcHR5ID0gZW1wdHk7XG4gICAgZnVuY3Rpb24qIHNpbmdsZShlbGVtZW50KSB7XG4gICAgICAgIHlpZWxkIGVsZW1lbnQ7XG4gICAgfVxuICAgIEl0ZXJhYmxlLnNpbmdsZSA9IHNpbmdsZTtcbiAgICBmdW5jdGlvbiB3cmFwKGl0ZXJhYmxlT3JFbGVtZW50KSB7XG4gICAgICAgIGlmIChpcyhpdGVyYWJsZU9yRWxlbWVudCkpIHtcbiAgICAgICAgICAgIHJldHVybiBpdGVyYWJsZU9yRWxlbWVudDtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiBzaW5nbGUoaXRlcmFibGVPckVsZW1lbnQpO1xuICAgICAgICB9XG4gICAgfVxuICAgIEl0ZXJhYmxlLndyYXAgPSB3cmFwO1xuICAgIGZ1bmN0aW9uIGZyb20oaXRlcmFibGUpIHtcbiAgICAgICAgcmV0dXJuIGl0ZXJhYmxlIHx8IF9lbXB0eTtcbiAgICB9XG4gICAgSXRlcmFibGUuZnJvbSA9IGZyb207XG4gICAgZnVuY3Rpb24qIHJldmVyc2UoYXJyYXkpIHtcbiAgICAgICAgZm9yIChsZXQgaSA9IGFycmF5Lmxlbmd0aCAtIDE7IGkgPj0gMDsgaS0tKSB7XG4gICAgICAgICAgICB5aWVsZCBhcnJheVtpXTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBJdGVyYWJsZS5yZXZlcnNlID0gcmV2ZXJzZTtcbiAgICBmdW5jdGlvbiBpc0VtcHR5KGl0ZXJhYmxlKSB7XG4gICAgICAgIHJldHVybiAhaXRlcmFibGUgfHwgaXRlcmFibGVbU3ltYm9sLml0ZXJhdG9yXSgpLm5leHQoKS5kb25lID09PSB0cnVlO1xuICAgIH1cbiAgICBJdGVyYWJsZS5pc0VtcHR5ID0gaXNFbXB0eTtcbiAgICBmdW5jdGlvbiBmaXJzdChpdGVyYWJsZSkge1xuICAgICAgICByZXR1cm4gaXRlcmFibGVbU3ltYm9sLml0ZXJhdG9yXSgpLm5leHQoKS52YWx1ZTtcbiAgICB9XG4gICAgSXRlcmFibGUuZmlyc3QgPSBmaXJzdDtcbiAgICBmdW5jdGlvbiBzb21lKGl0ZXJhYmxlLCBwcmVkaWNhdGUpIHtcbiAgICAgICAgZm9yIChjb25zdCBlbGVtZW50IG9mIGl0ZXJhYmxlKSB7XG4gICAgICAgICAgICBpZiAocHJlZGljYXRlKGVsZW1lbnQpKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICBJdGVyYWJsZS5zb21lID0gc29tZTtcbiAgICBmdW5jdGlvbiBmaW5kKGl0ZXJhYmxlLCBwcmVkaWNhdGUpIHtcbiAgICAgICAgZm9yIChjb25zdCBlbGVtZW50IG9mIGl0ZXJhYmxlKSB7XG4gICAgICAgICAgICBpZiAocHJlZGljYXRlKGVsZW1lbnQpKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGVsZW1lbnQ7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICB9XG4gICAgSXRlcmFibGUuZmluZCA9IGZpbmQ7XG4gICAgZnVuY3Rpb24qIGZpbHRlcihpdGVyYWJsZSwgcHJlZGljYXRlKSB7XG4gICAgICAgIGZvciAoY29uc3QgZWxlbWVudCBvZiBpdGVyYWJsZSkge1xuICAgICAgICAgICAgaWYgKHByZWRpY2F0ZShlbGVtZW50KSkge1xuICAgICAgICAgICAgICAgIHlpZWxkIGVsZW1lbnQ7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG4gICAgSXRlcmFibGUuZmlsdGVyID0gZmlsdGVyO1xuICAgIGZ1bmN0aW9uKiBtYXAoaXRlcmFibGUsIGZuKSB7XG4gICAgICAgIGxldCBpbmRleCA9IDA7XG4gICAgICAgIGZvciAoY29uc3QgZWxlbWVudCBvZiBpdGVyYWJsZSkge1xuICAgICAgICAgICAgeWllbGQgZm4oZWxlbWVudCwgaW5kZXgrKyk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgSXRlcmFibGUubWFwID0gbWFwO1xuICAgIGZ1bmN0aW9uKiBjb25jYXQoLi4uaXRlcmFibGVzKSB7XG4gICAgICAgIGZvciAoY29uc3QgaXRlcmFibGUgb2YgaXRlcmFibGVzKSB7XG4gICAgICAgICAgICB5aWVsZCogaXRlcmFibGU7XG4gICAgICAgIH1cbiAgICB9XG4gICAgSXRlcmFibGUuY29uY2F0ID0gY29uY2F0O1xuICAgIGZ1bmN0aW9uIHJlZHVjZShpdGVyYWJsZSwgcmVkdWNlciwgaW5pdGlhbFZhbHVlKSB7XG4gICAgICAgIGxldCB2YWx1ZSA9IGluaXRpYWxWYWx1ZTtcbiAgICAgICAgZm9yIChjb25zdCBlbGVtZW50IG9mIGl0ZXJhYmxlKSB7XG4gICAgICAgICAgICB2YWx1ZSA9IHJlZHVjZXIodmFsdWUsIGVsZW1lbnQpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB2YWx1ZTtcbiAgICB9XG4gICAgSXRlcmFibGUucmVkdWNlID0gcmVkdWNlO1xuICAgIC8qKlxuICAgICAqIFJldHVybnMgYW4gaXRlcmFibGUgc2xpY2Ugb2YgdGhlIGFycmF5LCB3aXRoIHRoZSBzYW1lIHNlbWFudGljcyBhcyBgYXJyYXkuc2xpY2UoKWAuXG4gICAgICovXG4gICAgZnVuY3Rpb24qIHNsaWNlKGFyciwgZnJvbSwgdG8gPSBhcnIubGVuZ3RoKSB7XG4gICAgICAgIGlmIChmcm9tIDwgMCkge1xuICAgICAgICAgICAgZnJvbSArPSBhcnIubGVuZ3RoO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0byA8IDApIHtcbiAgICAgICAgICAgIHRvICs9IGFyci5sZW5ndGg7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAodG8gPiBhcnIubGVuZ3RoKSB7XG4gICAgICAgICAgICB0byA9IGFyci5sZW5ndGg7XG4gICAgICAgIH1cbiAgICAgICAgZm9yICg7IGZyb20gPCB0bzsgZnJvbSsrKSB7XG4gICAgICAgICAgICB5aWVsZCBhcnJbZnJvbV07XG4gICAgICAgIH1cbiAgICB9XG4gICAgSXRlcmFibGUuc2xpY2UgPSBzbGljZTtcbiAgICAvKipcbiAgICAgKiBDb25zdW1lcyBgYXRNb3N0YCBlbGVtZW50cyBmcm9tIGl0ZXJhYmxlIGFuZCByZXR1cm5zIHRoZSBjb25zdW1lZCBlbGVtZW50cyxcbiAgICAgKiBhbmQgYW4gaXRlcmFibGUgZm9yIHRoZSByZXN0IG9mIHRoZSBlbGVtZW50cy5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBjb25zdW1lKGl0ZXJhYmxlLCBhdE1vc3QgPSBOdW1iZXIuUE9TSVRJVkVfSU5GSU5JVFkpIHtcbiAgICAgICAgY29uc3QgY29uc3VtZWQgPSBbXTtcbiAgICAgICAgaWYgKGF0TW9zdCA9PT0gMCkge1xuICAgICAgICAgICAgcmV0dXJuIFtjb25zdW1lZCwgaXRlcmFibGVdO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IGl0ZXJhdG9yID0gaXRlcmFibGVbU3ltYm9sLml0ZXJhdG9yXSgpO1xuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGF0TW9zdDsgaSsrKSB7XG4gICAgICAgICAgICBjb25zdCBuZXh0ID0gaXRlcmF0b3IubmV4dCgpO1xuICAgICAgICAgICAgaWYgKG5leHQuZG9uZSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBbY29uc3VtZWQsIEl0ZXJhYmxlLmVtcHR5KCldO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY29uc3VtZWQucHVzaChuZXh0LnZhbHVlKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gW2NvbnN1bWVkLCB7IFtTeW1ib2wuaXRlcmF0b3JdKCkgeyByZXR1cm4gaXRlcmF0b3I7IH0gfV07XG4gICAgfVxuICAgIEl0ZXJhYmxlLmNvbnN1bWUgPSBjb25zdW1lO1xuICAgIGFzeW5jIGZ1bmN0aW9uIGFzeW5jVG9BcnJheShpdGVyYWJsZSkge1xuICAgICAgICBjb25zdCByZXN1bHQgPSBbXTtcbiAgICAgICAgZm9yIGF3YWl0IChjb25zdCBpdGVtIG9mIGl0ZXJhYmxlKSB7XG4gICAgICAgICAgICByZXN1bHQucHVzaChpdGVtKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKHJlc3VsdCk7XG4gICAgfVxuICAgIEl0ZXJhYmxlLmFzeW5jVG9BcnJheSA9IGFzeW5jVG9BcnJheTtcbn0pKEl0ZXJhYmxlIHx8IChJdGVyYWJsZSA9IHt9KSk7XG4iLCAiaW1wb3J0IHsgY3JlYXRlU2luZ2xlQ2FsbEZ1bmN0aW9uIH0gZnJvbSAnLi9mdW5jdGlvbmFsLmpzJztcbmltcG9ydCB7IEl0ZXJhYmxlIH0gZnJvbSAnLi9pdGVyYXRvci5qcyc7XG4vLyAjcmVnaW9uIERpc3Bvc2FibGUgVHJhY2tpbmdcbi8qKlxuICogRW5hYmxlcyBsb2dnaW5nIG9mIHBvdGVudGlhbGx5IGxlYWtlZCBkaXNwb3NhYmxlcy5cbiAqXG4gKiBBIGRpc3Bvc2FibGUgaXMgY29uc2lkZXJlZCBsZWFrZWQgaWYgaXQgaXMgbm90IGRpc3Bvc2VkIG9yIG5vdCByZWdpc3RlcmVkIGFzIHRoZSBjaGlsZCBvZlxuICogYW5vdGhlciBkaXNwb3NhYmxlLiBUaGlzIHRyYWNraW5nIGlzIHZlcnkgc2ltcGxlIGFuIG9ubHkgd29ya3MgZm9yIGNsYXNzZXMgdGhhdCBlaXRoZXJcbiAqIGV4dGVuZCBEaXNwb3NhYmxlIG9yIHVzZSBhIERpc3Bvc2FibGVTdG9yZS4gVGhpcyBtZWFucyB0aGVyZSBhcmUgYSBsb3Qgb2YgZmFsc2UgcG9zaXRpdmVzLlxuICovXG5jb25zdCBUUkFDS19ESVNQT1NBQkxFUyA9IGZhbHNlO1xubGV0IGRpc3Bvc2FibGVUcmFja2VyID0gbnVsbDtcbmV4cG9ydCBmdW5jdGlvbiBzZXREaXNwb3NhYmxlVHJhY2tlcih0cmFja2VyKSB7XG4gICAgZGlzcG9zYWJsZVRyYWNrZXIgPSB0cmFja2VyO1xufVxuaWYgKFRSQUNLX0RJU1BPU0FCTEVTKSB7XG4gICAgY29uc3QgX19pc19kaXNwb3NhYmxlX3RyYWNrZWRfXyA9ICdfX2lzX2Rpc3Bvc2FibGVfdHJhY2tlZF9fJztcbiAgICBzZXREaXNwb3NhYmxlVHJhY2tlcihuZXcgY2xhc3Mge1xuICAgICAgICB0cmFja0Rpc3Bvc2FibGUoeCkge1xuICAgICAgICAgICAgY29uc3Qgc3RhY2sgPSBuZXcgRXJyb3IoJ1BvdGVudGlhbGx5IGxlYWtlZCBkaXNwb3NhYmxlJykuc3RhY2s7XG4gICAgICAgICAgICBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgICAgICAgICAgICBpZiAoIXhbX19pc19kaXNwb3NhYmxlX3RyYWNrZWRfX10pIHtcbiAgICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2coc3RhY2spO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0sIDMwMDApO1xuICAgICAgICB9XG4gICAgICAgIHNldFBhcmVudChjaGlsZCwgcGFyZW50KSB7XG4gICAgICAgICAgICBpZiAoY2hpbGQgJiYgY2hpbGQgIT09IERpc3Bvc2FibGUuTm9uZSkge1xuICAgICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgICAgIGNoaWxkW19faXNfZGlzcG9zYWJsZV90cmFja2VkX19dID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgY2F0Y2ggKF9hKSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIG5vb3BcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgbWFya0FzRGlzcG9zZWQoZGlzcG9zYWJsZSkge1xuICAgICAgICAgICAgaWYgKGRpc3Bvc2FibGUgJiYgZGlzcG9zYWJsZSAhPT0gRGlzcG9zYWJsZS5Ob25lKSB7XG4gICAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICAgICAgZGlzcG9zYWJsZVtfX2lzX2Rpc3Bvc2FibGVfdHJhY2tlZF9fXSA9IHRydWU7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGNhdGNoIChfYSkge1xuICAgICAgICAgICAgICAgICAgICAvLyBub29wXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIG1hcmtBc1NpbmdsZXRvbihkaXNwb3NhYmxlKSB7IH1cbiAgICB9KTtcbn1cbmV4cG9ydCBmdW5jdGlvbiB0cmFja0Rpc3Bvc2FibGUoeCkge1xuICAgIGRpc3Bvc2FibGVUcmFja2VyID09PSBudWxsIHx8IGRpc3Bvc2FibGVUcmFja2VyID09PSB2b2lkIDAgPyB2b2lkIDAgOiBkaXNwb3NhYmxlVHJhY2tlci50cmFja0Rpc3Bvc2FibGUoeCk7XG4gICAgcmV0dXJuIHg7XG59XG5leHBvcnQgZnVuY3Rpb24gbWFya0FzRGlzcG9zZWQoZGlzcG9zYWJsZSkge1xuICAgIGRpc3Bvc2FibGVUcmFja2VyID09PSBudWxsIHx8IGRpc3Bvc2FibGVUcmFja2VyID09PSB2b2lkIDAgPyB2b2lkIDAgOiBkaXNwb3NhYmxlVHJhY2tlci5tYXJrQXNEaXNwb3NlZChkaXNwb3NhYmxlKTtcbn1cbmZ1bmN0aW9uIHNldFBhcmVudE9mRGlzcG9zYWJsZShjaGlsZCwgcGFyZW50KSB7XG4gICAgZGlzcG9zYWJsZVRyYWNrZXIgPT09IG51bGwgfHwgZGlzcG9zYWJsZVRyYWNrZXIgPT09IHZvaWQgMCA/IHZvaWQgMCA6IGRpc3Bvc2FibGVUcmFja2VyLnNldFBhcmVudChjaGlsZCwgcGFyZW50KTtcbn1cbmZ1bmN0aW9uIHNldFBhcmVudE9mRGlzcG9zYWJsZXMoY2hpbGRyZW4sIHBhcmVudCkge1xuICAgIGlmICghZGlzcG9zYWJsZVRyYWNrZXIpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBmb3IgKGNvbnN0IGNoaWxkIG9mIGNoaWxkcmVuKSB7XG4gICAgICAgIGRpc3Bvc2FibGVUcmFja2VyLnNldFBhcmVudChjaGlsZCwgcGFyZW50KTtcbiAgICB9XG59XG4vKipcbiAqIEluZGljYXRlcyB0aGF0IHRoZSBnaXZlbiBvYmplY3QgaXMgYSBzaW5nbGV0b24gd2hpY2ggZG9lcyBub3QgbmVlZCB0byBiZSBkaXNwb3NlZC5cbiovXG5leHBvcnQgZnVuY3Rpb24gbWFya0FzU2luZ2xldG9uKHNpbmdsZXRvbikge1xuICAgIGRpc3Bvc2FibGVUcmFja2VyID09PSBudWxsIHx8IGRpc3Bvc2FibGVUcmFja2VyID09PSB2b2lkIDAgPyB2b2lkIDAgOiBkaXNwb3NhYmxlVHJhY2tlci5tYXJrQXNTaW5nbGV0b24oc2luZ2xldG9uKTtcbiAgICByZXR1cm4gc2luZ2xldG9uO1xufVxuLyoqXG4gKiBDaGVjayBpZiBgdGhpbmdgIGlzIHtAbGluayBJRGlzcG9zYWJsZSBkaXNwb3NhYmxlfS5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGlzRGlzcG9zYWJsZSh0aGluZykge1xuICAgIHJldHVybiB0eXBlb2YgdGhpbmcgPT09ICdvYmplY3QnICYmIHRoaW5nICE9PSBudWxsICYmIHR5cGVvZiB0aGluZy5kaXNwb3NlID09PSAnZnVuY3Rpb24nICYmIHRoaW5nLmRpc3Bvc2UubGVuZ3RoID09PSAwO1xufVxuZXhwb3J0IGZ1bmN0aW9uIGRpc3Bvc2UoYXJnKSB7XG4gICAgaWYgKEl0ZXJhYmxlLmlzKGFyZykpIHtcbiAgICAgICAgY29uc3QgZXJyb3JzID0gW107XG4gICAgICAgIGZvciAoY29uc3QgZCBvZiBhcmcpIHtcbiAgICAgICAgICAgIGlmIChkKSB7XG4gICAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICAgICAgZC5kaXNwb3NlKCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGNhdGNoIChlKSB7XG4gICAgICAgICAgICAgICAgICAgIGVycm9ycy5wdXNoKGUpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBpZiAoZXJyb3JzLmxlbmd0aCA9PT0gMSkge1xuICAgICAgICAgICAgdGhyb3cgZXJyb3JzWzBdO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKGVycm9ycy5sZW5ndGggPiAxKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgQWdncmVnYXRlRXJyb3IoZXJyb3JzLCAnRW5jb3VudGVyZWQgZXJyb3JzIHdoaWxlIGRpc3Bvc2luZyBvZiBzdG9yZScpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBBcnJheS5pc0FycmF5KGFyZykgPyBbXSA6IGFyZztcbiAgICB9XG4gICAgZWxzZSBpZiAoYXJnKSB7XG4gICAgICAgIGFyZy5kaXNwb3NlKCk7XG4gICAgICAgIHJldHVybiBhcmc7XG4gICAgfVxufVxuLyoqXG4gKiBDb21iaW5lIG11bHRpcGxlIGRpc3Bvc2FibGUgdmFsdWVzIGludG8gYSBzaW5nbGUge0BsaW5rIElEaXNwb3NhYmxlfS5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGNvbWJpbmVkRGlzcG9zYWJsZSguLi5kaXNwb3NhYmxlcykge1xuICAgIGNvbnN0IHBhcmVudCA9IHRvRGlzcG9zYWJsZSgoKSA9PiBkaXNwb3NlKGRpc3Bvc2FibGVzKSk7XG4gICAgc2V0UGFyZW50T2ZEaXNwb3NhYmxlcyhkaXNwb3NhYmxlcywgcGFyZW50KTtcbiAgICByZXR1cm4gcGFyZW50O1xufVxuLyoqXG4gKiBUdXJuIGEgZnVuY3Rpb24gdGhhdCBpbXBsZW1lbnRzIGRpc3Bvc2UgaW50byBhbiB7QGxpbmsgSURpc3Bvc2FibGV9LlxuICpcbiAqIEBwYXJhbSBmbiBDbGVhbiB1cCBmdW5jdGlvbiwgZ3VhcmFudGVlZCB0byBiZSBjYWxsZWQgb25seSAqKm9uY2UqKi5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHRvRGlzcG9zYWJsZShmbikge1xuICAgIGNvbnN0IHNlbGYgPSB0cmFja0Rpc3Bvc2FibGUoe1xuICAgICAgICBkaXNwb3NlOiBjcmVhdGVTaW5nbGVDYWxsRnVuY3Rpb24oKCkgPT4ge1xuICAgICAgICAgICAgbWFya0FzRGlzcG9zZWQoc2VsZik7XG4gICAgICAgICAgICBmbigpO1xuICAgICAgICB9KVxuICAgIH0pO1xuICAgIHJldHVybiBzZWxmO1xufVxuLyoqXG4gKiBNYW5hZ2VzIGEgY29sbGVjdGlvbiBvZiBkaXNwb3NhYmxlIHZhbHVlcy5cbiAqXG4gKiBUaGlzIGlzIHRoZSBwcmVmZXJyZWQgd2F5IHRvIG1hbmFnZSBtdWx0aXBsZSBkaXNwb3NhYmxlcy4gQSBgRGlzcG9zYWJsZVN0b3JlYCBpcyBzYWZlciB0byB3b3JrIHdpdGggdGhhbiBhblxuICogYElEaXNwb3NhYmxlW11gIGFzIGl0IGNvbnNpZGVycyBlZGdlIGNhc2VzLCBzdWNoIGFzIHJlZ2lzdGVyaW5nIHRoZSBzYW1lIHZhbHVlIG11bHRpcGxlIHRpbWVzIG9yIGFkZGluZyBhbiBpdGVtIHRvIGFcbiAqIHN0b3JlIHRoYXQgaGFzIGFscmVhZHkgYmVlbiBkaXNwb3NlZCBvZi5cbiAqL1xuZXhwb3J0IGNsYXNzIERpc3Bvc2FibGVTdG9yZSB7XG4gICAgY29uc3RydWN0b3IoKSB7XG4gICAgICAgIHRoaXMuX3RvRGlzcG9zZSA9IG5ldyBTZXQoKTtcbiAgICAgICAgdGhpcy5faXNEaXNwb3NlZCA9IGZhbHNlO1xuICAgICAgICB0cmFja0Rpc3Bvc2FibGUodGhpcyk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIERpc3Bvc2Ugb2YgYWxsIHJlZ2lzdGVyZWQgZGlzcG9zYWJsZXMgYW5kIG1hcmsgdGhpcyBvYmplY3QgYXMgZGlzcG9zZWQuXG4gICAgICpcbiAgICAgKiBBbnkgZnV0dXJlIGRpc3Bvc2FibGVzIGFkZGVkIHRvIHRoaXMgb2JqZWN0IHdpbGwgYmUgZGlzcG9zZWQgb2Ygb24gYGFkZGAuXG4gICAgICovXG4gICAgZGlzcG9zZSgpIHtcbiAgICAgICAgaWYgKHRoaXMuX2lzRGlzcG9zZWQpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBtYXJrQXNEaXNwb3NlZCh0aGlzKTtcbiAgICAgICAgdGhpcy5faXNEaXNwb3NlZCA9IHRydWU7XG4gICAgICAgIHRoaXMuY2xlYXIoKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQHJldHVybiBgdHJ1ZWAgaWYgdGhpcyBvYmplY3QgaGFzIGJlZW4gZGlzcG9zZWQgb2YuXG4gICAgICovXG4gICAgZ2V0IGlzRGlzcG9zZWQoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9pc0Rpc3Bvc2VkO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBEaXNwb3NlIG9mIGFsbCByZWdpc3RlcmVkIGRpc3Bvc2FibGVzIGJ1dCBkbyBub3QgbWFyayB0aGlzIG9iamVjdCBhcyBkaXNwb3NlZC5cbiAgICAgKi9cbiAgICBjbGVhcigpIHtcbiAgICAgICAgaWYgKHRoaXMuX3RvRGlzcG9zZS5zaXplID09PSAwKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIGRpc3Bvc2UodGhpcy5fdG9EaXNwb3NlKTtcbiAgICAgICAgfVxuICAgICAgICBmaW5hbGx5IHtcbiAgICAgICAgICAgIHRoaXMuX3RvRGlzcG9zZS5jbGVhcigpO1xuICAgICAgICB9XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEFkZCBhIG5ldyB7QGxpbmsgSURpc3Bvc2FibGUgZGlzcG9zYWJsZX0gdG8gdGhlIGNvbGxlY3Rpb24uXG4gICAgICovXG4gICAgYWRkKG8pIHtcbiAgICAgICAgaWYgKCFvKSB7XG4gICAgICAgICAgICByZXR1cm4gbztcbiAgICAgICAgfVxuICAgICAgICBpZiAobyA9PT0gdGhpcykge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdDYW5ub3QgcmVnaXN0ZXIgYSBkaXNwb3NhYmxlIG9uIGl0c2VsZiEnKTtcbiAgICAgICAgfVxuICAgICAgICBzZXRQYXJlbnRPZkRpc3Bvc2FibGUobywgdGhpcyk7XG4gICAgICAgIGlmICh0aGlzLl9pc0Rpc3Bvc2VkKSB7XG4gICAgICAgICAgICBpZiAoIURpc3Bvc2FibGVTdG9yZS5ESVNBQkxFX0RJU1BPU0VEX1dBUk5JTkcpIHtcbiAgICAgICAgICAgICAgICBjb25zb2xlLndhcm4obmV3IEVycm9yKCdUcnlpbmcgdG8gYWRkIGEgZGlzcG9zYWJsZSB0byBhIERpc3Bvc2FibGVTdG9yZSB0aGF0IGhhcyBhbHJlYWR5IGJlZW4gZGlzcG9zZWQgb2YuIFRoZSBhZGRlZCBvYmplY3Qgd2lsbCBiZSBsZWFrZWQhJykuc3RhY2spO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5fdG9EaXNwb3NlLmFkZChvKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbztcbiAgICB9XG4gICAgLyoqXG4gICAgICogRGVsZXRlcyB0aGUgdmFsdWUgZnJvbSB0aGUgc3RvcmUsIGJ1dCBkb2VzIG5vdCBkaXNwb3NlIGl0LlxuICAgICAqL1xuICAgIGRlbGV0ZUFuZExlYWsobykge1xuICAgICAgICBpZiAoIW8pIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBpZiAodGhpcy5fdG9EaXNwb3NlLmhhcyhvKSkge1xuICAgICAgICAgICAgdGhpcy5fdG9EaXNwb3NlLmRlbGV0ZShvKTtcbiAgICAgICAgICAgIHNldFBhcmVudE9mRGlzcG9zYWJsZShvLCBudWxsKTtcbiAgICAgICAgfVxuICAgIH1cbn1cbkRpc3Bvc2FibGVTdG9yZS5ESVNBQkxFX0RJU1BPU0VEX1dBUk5JTkcgPSBmYWxzZTtcbi8qKlxuICogQWJzdHJhY3QgYmFzZSBjbGFzcyBmb3IgYSB7QGxpbmsgSURpc3Bvc2FibGUgZGlzcG9zYWJsZX0gb2JqZWN0LlxuICpcbiAqIFN1YmNsYXNzZXMgY2FuIHtAbGlua2NvZGUgX3JlZ2lzdGVyfSBkaXNwb3NhYmxlcyB0aGF0IHdpbGwgYmUgYXV0b21hdGljYWxseSBjbGVhbmVkIHVwIHdoZW4gdGhpcyBvYmplY3QgaXMgZGlzcG9zZWQgb2YuXG4gKi9cbmV4cG9ydCBjbGFzcyBEaXNwb3NhYmxlIHtcbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgdGhpcy5fc3RvcmUgPSBuZXcgRGlzcG9zYWJsZVN0b3JlKCk7XG4gICAgICAgIHRyYWNrRGlzcG9zYWJsZSh0aGlzKTtcbiAgICAgICAgc2V0UGFyZW50T2ZEaXNwb3NhYmxlKHRoaXMuX3N0b3JlLCB0aGlzKTtcbiAgICB9XG4gICAgZGlzcG9zZSgpIHtcbiAgICAgICAgbWFya0FzRGlzcG9zZWQodGhpcyk7XG4gICAgICAgIHRoaXMuX3N0b3JlLmRpc3Bvc2UoKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQWRkcyBgb2AgdG8gdGhlIGNvbGxlY3Rpb24gb2YgZGlzcG9zYWJsZXMgbWFuYWdlZCBieSB0aGlzIG9iamVjdC5cbiAgICAgKi9cbiAgICBfcmVnaXN0ZXIobykge1xuICAgICAgICBpZiAobyA9PT0gdGhpcykge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdDYW5ub3QgcmVnaXN0ZXIgYSBkaXNwb3NhYmxlIG9uIGl0c2VsZiEnKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdGhpcy5fc3RvcmUuYWRkKG8pO1xuICAgIH1cbn1cbi8qKlxuICogQSBkaXNwb3NhYmxlIHRoYXQgZG9lcyBub3RoaW5nIHdoZW4gaXQgaXMgZGlzcG9zZWQgb2YuXG4gKlxuICogVE9ETzogVGhpcyBzaG91bGQgbm90IGJlIGEgc3RhdGljIHByb3BlcnR5LlxuICovXG5EaXNwb3NhYmxlLk5vbmUgPSBPYmplY3QuZnJlZXplKHsgZGlzcG9zZSgpIHsgfSB9KTtcbi8qKlxuICogTWFuYWdlcyB0aGUgbGlmZWN5Y2xlIG9mIGEgZGlzcG9zYWJsZSB2YWx1ZSB0aGF0IG1heSBiZSBjaGFuZ2VkLlxuICpcbiAqIFRoaXMgZW5zdXJlcyB0aGF0IHdoZW4gdGhlIGRpc3Bvc2FibGUgdmFsdWUgaXMgY2hhbmdlZCwgdGhlIHByZXZpb3VzbHkgaGVsZCBkaXNwb3NhYmxlIGlzIGRpc3Bvc2VkIG9mLiBZb3UgY2FuXG4gKiBhbHNvIHJlZ2lzdGVyIGEgYE11dGFibGVEaXNwb3NhYmxlYCBvbiBhIGBEaXNwb3NhYmxlYCB0byBlbnN1cmUgaXQgaXMgYXV0b21hdGljYWxseSBjbGVhbmVkIHVwLlxuICovXG5leHBvcnQgY2xhc3MgTXV0YWJsZURpc3Bvc2FibGUge1xuICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICB0aGlzLl9pc0Rpc3Bvc2VkID0gZmFsc2U7XG4gICAgICAgIHRyYWNrRGlzcG9zYWJsZSh0aGlzKTtcbiAgICB9XG4gICAgZ2V0IHZhbHVlKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5faXNEaXNwb3NlZCA/IHVuZGVmaW5lZCA6IHRoaXMuX3ZhbHVlO1xuICAgIH1cbiAgICBzZXQgdmFsdWUodmFsdWUpIHtcbiAgICAgICAgdmFyIF9hO1xuICAgICAgICBpZiAodGhpcy5faXNEaXNwb3NlZCB8fCB2YWx1ZSA9PT0gdGhpcy5fdmFsdWUpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICAoX2EgPSB0aGlzLl92YWx1ZSkgPT09IG51bGwgfHwgX2EgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9hLmRpc3Bvc2UoKTtcbiAgICAgICAgaWYgKHZhbHVlKSB7XG4gICAgICAgICAgICBzZXRQYXJlbnRPZkRpc3Bvc2FibGUodmFsdWUsIHRoaXMpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuX3ZhbHVlID0gdmFsdWU7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFJlc2V0cyB0aGUgc3RvcmVkIHZhbHVlIGFuZCBkaXNwb3NlZCBvZiB0aGUgcHJldmlvdXNseSBzdG9yZWQgdmFsdWUuXG4gICAgICovXG4gICAgY2xlYXIoKSB7XG4gICAgICAgIHRoaXMudmFsdWUgPSB1bmRlZmluZWQ7XG4gICAgfVxuICAgIGRpc3Bvc2UoKSB7XG4gICAgICAgIHZhciBfYTtcbiAgICAgICAgdGhpcy5faXNEaXNwb3NlZCA9IHRydWU7XG4gICAgICAgIG1hcmtBc0Rpc3Bvc2VkKHRoaXMpO1xuICAgICAgICAoX2EgPSB0aGlzLl92YWx1ZSkgPT09IG51bGwgfHwgX2EgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9hLmRpc3Bvc2UoKTtcbiAgICAgICAgdGhpcy5fdmFsdWUgPSB1bmRlZmluZWQ7XG4gICAgfVxufVxuZXhwb3J0IGNsYXNzIFJlZkNvdW50ZWREaXNwb3NhYmxlIHtcbiAgICBjb25zdHJ1Y3RvcihfZGlzcG9zYWJsZSkge1xuICAgICAgICB0aGlzLl9kaXNwb3NhYmxlID0gX2Rpc3Bvc2FibGU7XG4gICAgICAgIHRoaXMuX2NvdW50ZXIgPSAxO1xuICAgIH1cbiAgICBhY3F1aXJlKCkge1xuICAgICAgICB0aGlzLl9jb3VudGVyKys7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cbiAgICByZWxlYXNlKCkge1xuICAgICAgICBpZiAoLS10aGlzLl9jb3VudGVyID09PSAwKSB7XG4gICAgICAgICAgICB0aGlzLl9kaXNwb3NhYmxlLmRpc3Bvc2UoKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG59XG5leHBvcnQgY2xhc3MgSW1tb3J0YWxSZWZlcmVuY2Uge1xuICAgIGNvbnN0cnVjdG9yKG9iamVjdCkge1xuICAgICAgICB0aGlzLm9iamVjdCA9IG9iamVjdDtcbiAgICB9XG4gICAgZGlzcG9zZSgpIHsgfVxufVxuLyoqXG4gKiBBIG1hcCB0aGUgbWFuYWdlcyB0aGUgbGlmZWN5Y2xlIG9mIHRoZSB2YWx1ZXMgdGhhdCBpdCBzdG9yZXMuXG4gKi9cbmV4cG9ydCBjbGFzcyBEaXNwb3NhYmxlTWFwIHtcbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgdGhpcy5fc3RvcmUgPSBuZXcgTWFwKCk7XG4gICAgICAgIHRoaXMuX2lzRGlzcG9zZWQgPSBmYWxzZTtcbiAgICAgICAgdHJhY2tEaXNwb3NhYmxlKHRoaXMpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBEaXNwb3NlcyBvZiBhbGwgc3RvcmVkIHZhbHVlcyBhbmQgbWFyayB0aGlzIG9iamVjdCBhcyBkaXNwb3NlZC5cbiAgICAgKlxuICAgICAqIFRyeWluZyB0byB1c2UgdGhpcyBvYmplY3QgYWZ0ZXIgaXQgaGFzIGJlZW4gZGlzcG9zZWQgb2YgaXMgYW4gZXJyb3IuXG4gICAgICovXG4gICAgZGlzcG9zZSgpIHtcbiAgICAgICAgbWFya0FzRGlzcG9zZWQodGhpcyk7XG4gICAgICAgIHRoaXMuX2lzRGlzcG9zZWQgPSB0cnVlO1xuICAgICAgICB0aGlzLmNsZWFyQW5kRGlzcG9zZUFsbCgpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBEaXNwb3NlcyBvZiBhbGwgc3RvcmVkIHZhbHVlcyBhbmQgY2xlYXIgdGhlIG1hcCwgYnV0IERPIE5PVCBtYXJrIHRoaXMgb2JqZWN0IGFzIGRpc3Bvc2VkLlxuICAgICAqL1xuICAgIGNsZWFyQW5kRGlzcG9zZUFsbCgpIHtcbiAgICAgICAgaWYgKCF0aGlzLl9zdG9yZS5zaXplKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIGRpc3Bvc2UodGhpcy5fc3RvcmUudmFsdWVzKCkpO1xuICAgICAgICB9XG4gICAgICAgIGZpbmFsbHkge1xuICAgICAgICAgICAgdGhpcy5fc3RvcmUuY2xlYXIoKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBnZXQoa2V5KSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9zdG9yZS5nZXQoa2V5KTtcbiAgICB9XG4gICAgc2V0KGtleSwgdmFsdWUsIHNraXBEaXNwb3NlT25PdmVyd3JpdGUgPSBmYWxzZSkge1xuICAgICAgICB2YXIgX2E7XG4gICAgICAgIGlmICh0aGlzLl9pc0Rpc3Bvc2VkKSB7XG4gICAgICAgICAgICBjb25zb2xlLndhcm4obmV3IEVycm9yKCdUcnlpbmcgdG8gYWRkIGEgZGlzcG9zYWJsZSB0byBhIERpc3Bvc2FibGVNYXAgdGhhdCBoYXMgYWxyZWFkeSBiZWVuIGRpc3Bvc2VkIG9mLiBUaGUgYWRkZWQgb2JqZWN0IHdpbGwgYmUgbGVha2VkIScpLnN0YWNrKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoIXNraXBEaXNwb3NlT25PdmVyd3JpdGUpIHtcbiAgICAgICAgICAgIChfYSA9IHRoaXMuX3N0b3JlLmdldChrZXkpKSA9PT0gbnVsbCB8fCBfYSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2EuZGlzcG9zZSgpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuX3N0b3JlLnNldChrZXksIHZhbHVlKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogRGVsZXRlIHRoZSB2YWx1ZSBzdG9yZWQgZm9yIGBrZXlgIGZyb20gdGhpcyBtYXAgYW5kIGFsc28gZGlzcG9zZSBvZiBpdC5cbiAgICAgKi9cbiAgICBkZWxldGVBbmREaXNwb3NlKGtleSkge1xuICAgICAgICB2YXIgX2E7XG4gICAgICAgIChfYSA9IHRoaXMuX3N0b3JlLmdldChrZXkpKSA9PT0gbnVsbCB8fCBfYSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2EuZGlzcG9zZSgpO1xuICAgICAgICB0aGlzLl9zdG9yZS5kZWxldGUoa2V5KTtcbiAgICB9XG4gICAgW1N5bWJvbC5pdGVyYXRvcl0oKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9zdG9yZVtTeW1ib2wuaXRlcmF0b3JdKCk7XG4gICAgfVxufVxuIiwgIi8qLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gKiAgQ29weXJpZ2h0IChjKSBNaWNyb3NvZnQgQ29ycG9yYXRpb24uIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKiAgTGljZW5zZWQgdW5kZXIgdGhlIE1JVCBMaWNlbnNlLiBTZWUgTGljZW5zZS50eHQgaW4gdGhlIHByb2plY3Qgcm9vdCBmb3IgbGljZW5zZSBpbmZvcm1hdGlvbi5cbiAqLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qL1xuY2xhc3MgTm9kZSB7XG4gICAgY29uc3RydWN0b3IoZWxlbWVudCkge1xuICAgICAgICB0aGlzLmVsZW1lbnQgPSBlbGVtZW50O1xuICAgICAgICB0aGlzLm5leHQgPSBOb2RlLlVuZGVmaW5lZDtcbiAgICAgICAgdGhpcy5wcmV2ID0gTm9kZS5VbmRlZmluZWQ7XG4gICAgfVxufVxuTm9kZS5VbmRlZmluZWQgPSBuZXcgTm9kZSh1bmRlZmluZWQpO1xuZXhwb3J0IGNsYXNzIExpbmtlZExpc3Qge1xuICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICB0aGlzLl9maXJzdCA9IE5vZGUuVW5kZWZpbmVkO1xuICAgICAgICB0aGlzLl9sYXN0ID0gTm9kZS5VbmRlZmluZWQ7XG4gICAgICAgIHRoaXMuX3NpemUgPSAwO1xuICAgIH1cbiAgICBnZXQgc2l6ZSgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX3NpemU7XG4gICAgfVxuICAgIGlzRW1wdHkoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9maXJzdCA9PT0gTm9kZS5VbmRlZmluZWQ7XG4gICAgfVxuICAgIGNsZWFyKCkge1xuICAgICAgICBsZXQgbm9kZSA9IHRoaXMuX2ZpcnN0O1xuICAgICAgICB3aGlsZSAobm9kZSAhPT0gTm9kZS5VbmRlZmluZWQpIHtcbiAgICAgICAgICAgIGNvbnN0IG5leHQgPSBub2RlLm5leHQ7XG4gICAgICAgICAgICBub2RlLnByZXYgPSBOb2RlLlVuZGVmaW5lZDtcbiAgICAgICAgICAgIG5vZGUubmV4dCA9IE5vZGUuVW5kZWZpbmVkO1xuICAgICAgICAgICAgbm9kZSA9IG5leHQ7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5fZmlyc3QgPSBOb2RlLlVuZGVmaW5lZDtcbiAgICAgICAgdGhpcy5fbGFzdCA9IE5vZGUuVW5kZWZpbmVkO1xuICAgICAgICB0aGlzLl9zaXplID0gMDtcbiAgICB9XG4gICAgdW5zaGlmdChlbGVtZW50KSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9pbnNlcnQoZWxlbWVudCwgZmFsc2UpO1xuICAgIH1cbiAgICBwdXNoKGVsZW1lbnQpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2luc2VydChlbGVtZW50LCB0cnVlKTtcbiAgICB9XG4gICAgX2luc2VydChlbGVtZW50LCBhdFRoZUVuZCkge1xuICAgICAgICBjb25zdCBuZXdOb2RlID0gbmV3IE5vZGUoZWxlbWVudCk7XG4gICAgICAgIGlmICh0aGlzLl9maXJzdCA9PT0gTm9kZS5VbmRlZmluZWQpIHtcbiAgICAgICAgICAgIHRoaXMuX2ZpcnN0ID0gbmV3Tm9kZTtcbiAgICAgICAgICAgIHRoaXMuX2xhc3QgPSBuZXdOb2RlO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKGF0VGhlRW5kKSB7XG4gICAgICAgICAgICAvLyBwdXNoXG4gICAgICAgICAgICBjb25zdCBvbGRMYXN0ID0gdGhpcy5fbGFzdDtcbiAgICAgICAgICAgIHRoaXMuX2xhc3QgPSBuZXdOb2RlO1xuICAgICAgICAgICAgbmV3Tm9kZS5wcmV2ID0gb2xkTGFzdDtcbiAgICAgICAgICAgIG9sZExhc3QubmV4dCA9IG5ld05vZGU7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAvLyB1bnNoaWZ0XG4gICAgICAgICAgICBjb25zdCBvbGRGaXJzdCA9IHRoaXMuX2ZpcnN0O1xuICAgICAgICAgICAgdGhpcy5fZmlyc3QgPSBuZXdOb2RlO1xuICAgICAgICAgICAgbmV3Tm9kZS5uZXh0ID0gb2xkRmlyc3Q7XG4gICAgICAgICAgICBvbGRGaXJzdC5wcmV2ID0gbmV3Tm9kZTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLl9zaXplICs9IDE7XG4gICAgICAgIGxldCBkaWRSZW1vdmUgPSBmYWxzZTtcbiAgICAgICAgcmV0dXJuICgpID0+IHtcbiAgICAgICAgICAgIGlmICghZGlkUmVtb3ZlKSB7XG4gICAgICAgICAgICAgICAgZGlkUmVtb3ZlID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICB0aGlzLl9yZW1vdmUobmV3Tm9kZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgfVxuICAgIHNoaWZ0KCkge1xuICAgICAgICBpZiAodGhpcy5fZmlyc3QgPT09IE5vZGUuVW5kZWZpbmVkKSB7XG4gICAgICAgICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgY29uc3QgcmVzID0gdGhpcy5fZmlyc3QuZWxlbWVudDtcbiAgICAgICAgICAgIHRoaXMuX3JlbW92ZSh0aGlzLl9maXJzdCk7XG4gICAgICAgICAgICByZXR1cm4gcmVzO1xuICAgICAgICB9XG4gICAgfVxuICAgIHBvcCgpIHtcbiAgICAgICAgaWYgKHRoaXMuX2xhc3QgPT09IE5vZGUuVW5kZWZpbmVkKSB7XG4gICAgICAgICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgY29uc3QgcmVzID0gdGhpcy5fbGFzdC5lbGVtZW50O1xuICAgICAgICAgICAgdGhpcy5fcmVtb3ZlKHRoaXMuX2xhc3QpO1xuICAgICAgICAgICAgcmV0dXJuIHJlcztcbiAgICAgICAgfVxuICAgIH1cbiAgICBfcmVtb3ZlKG5vZGUpIHtcbiAgICAgICAgaWYgKG5vZGUucHJldiAhPT0gTm9kZS5VbmRlZmluZWQgJiYgbm9kZS5uZXh0ICE9PSBOb2RlLlVuZGVmaW5lZCkge1xuICAgICAgICAgICAgLy8gbWlkZGxlXG4gICAgICAgICAgICBjb25zdCBhbmNob3IgPSBub2RlLnByZXY7XG4gICAgICAgICAgICBhbmNob3IubmV4dCA9IG5vZGUubmV4dDtcbiAgICAgICAgICAgIG5vZGUubmV4dC5wcmV2ID0gYW5jaG9yO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKG5vZGUucHJldiA9PT0gTm9kZS5VbmRlZmluZWQgJiYgbm9kZS5uZXh0ID09PSBOb2RlLlVuZGVmaW5lZCkge1xuICAgICAgICAgICAgLy8gb25seSBub2RlXG4gICAgICAgICAgICB0aGlzLl9maXJzdCA9IE5vZGUuVW5kZWZpbmVkO1xuICAgICAgICAgICAgdGhpcy5fbGFzdCA9IE5vZGUuVW5kZWZpbmVkO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKG5vZGUubmV4dCA9PT0gTm9kZS5VbmRlZmluZWQpIHtcbiAgICAgICAgICAgIC8vIGxhc3RcbiAgICAgICAgICAgIHRoaXMuX2xhc3QgPSB0aGlzLl9sYXN0LnByZXY7XG4gICAgICAgICAgICB0aGlzLl9sYXN0Lm5leHQgPSBOb2RlLlVuZGVmaW5lZDtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChub2RlLnByZXYgPT09IE5vZGUuVW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAvLyBmaXJzdFxuICAgICAgICAgICAgdGhpcy5fZmlyc3QgPSB0aGlzLl9maXJzdC5uZXh0O1xuICAgICAgICAgICAgdGhpcy5fZmlyc3QucHJldiA9IE5vZGUuVW5kZWZpbmVkO1xuICAgICAgICB9XG4gICAgICAgIC8vIGRvbmVcbiAgICAgICAgdGhpcy5fc2l6ZSAtPSAxO1xuICAgIH1cbiAgICAqW1N5bWJvbC5pdGVyYXRvcl0oKSB7XG4gICAgICAgIGxldCBub2RlID0gdGhpcy5fZmlyc3Q7XG4gICAgICAgIHdoaWxlIChub2RlICE9PSBOb2RlLlVuZGVmaW5lZCkge1xuICAgICAgICAgICAgeWllbGQgbm9kZS5lbGVtZW50O1xuICAgICAgICAgICAgbm9kZSA9IG5vZGUubmV4dDtcbiAgICAgICAgfVxuICAgIH1cbn1cbiIsICIvKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICogIENvcHlyaWdodCAoYykgTWljcm9zb2Z0IENvcnBvcmF0aW9uLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICogIExpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgTGljZW5zZS4gU2VlIExpY2Vuc2UudHh0IGluIHRoZSBwcm9qZWN0IHJvb3QgZm9yIGxpY2Vuc2UgaW5mb3JtYXRpb24uXG4gKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKi9cbmNvbnN0IGhhc1BlcmZvcm1hbmNlTm93ID0gKGdsb2JhbFRoaXMucGVyZm9ybWFuY2UgJiYgdHlwZW9mIGdsb2JhbFRoaXMucGVyZm9ybWFuY2Uubm93ID09PSAnZnVuY3Rpb24nKTtcbmV4cG9ydCBjbGFzcyBTdG9wV2F0Y2gge1xuICAgIHN0YXRpYyBjcmVhdGUoaGlnaFJlc29sdXRpb24pIHtcbiAgICAgICAgcmV0dXJuIG5ldyBTdG9wV2F0Y2goaGlnaFJlc29sdXRpb24pO1xuICAgIH1cbiAgICBjb25zdHJ1Y3RvcihoaWdoUmVzb2x1dGlvbikge1xuICAgICAgICB0aGlzLl9ub3cgPSBoYXNQZXJmb3JtYW5jZU5vdyAmJiBoaWdoUmVzb2x1dGlvbiA9PT0gZmFsc2UgPyBEYXRlLm5vdyA6IGdsb2JhbFRoaXMucGVyZm9ybWFuY2Uubm93LmJpbmQoZ2xvYmFsVGhpcy5wZXJmb3JtYW5jZSk7XG4gICAgICAgIHRoaXMuX3N0YXJ0VGltZSA9IHRoaXMuX25vdygpO1xuICAgICAgICB0aGlzLl9zdG9wVGltZSA9IC0xO1xuICAgIH1cbiAgICBzdG9wKCkge1xuICAgICAgICB0aGlzLl9zdG9wVGltZSA9IHRoaXMuX25vdygpO1xuICAgIH1cbiAgICByZXNldCgpIHtcbiAgICAgICAgdGhpcy5fc3RhcnRUaW1lID0gdGhpcy5fbm93KCk7XG4gICAgICAgIHRoaXMuX3N0b3BUaW1lID0gLTE7XG4gICAgfVxuICAgIGVsYXBzZWQoKSB7XG4gICAgICAgIGlmICh0aGlzLl9zdG9wVGltZSAhPT0gLTEpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLl9zdG9wVGltZSAtIHRoaXMuX3N0YXJ0VGltZTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdGhpcy5fbm93KCkgLSB0aGlzLl9zdGFydFRpbWU7XG4gICAgfVxufVxuIiwgImltcG9ydCB7IG9uVW5leHBlY3RlZEVycm9yIH0gZnJvbSAnLi9lcnJvcnMuanMnO1xuaW1wb3J0IHsgY3JlYXRlU2luZ2xlQ2FsbEZ1bmN0aW9uIH0gZnJvbSAnLi9mdW5jdGlvbmFsLmpzJztcbmltcG9ydCB7IGNvbWJpbmVkRGlzcG9zYWJsZSwgRGlzcG9zYWJsZSwgRGlzcG9zYWJsZVN0b3JlLCB0b0Rpc3Bvc2FibGUgfSBmcm9tICcuL2xpZmVjeWNsZS5qcyc7XG5pbXBvcnQgeyBMaW5rZWRMaXN0IH0gZnJvbSAnLi9saW5rZWRMaXN0LmpzJztcbmltcG9ydCB7IFN0b3BXYXRjaCB9IGZyb20gJy4vc3RvcHdhdGNoLmpzJztcbi8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4vLyBVbmNvbW1lbnQgdGhlIG5leHQgbGluZSB0byBwcmludCB3YXJuaW5ncyB3aGVuZXZlciBhIGxpc3RlbmVyIGlzIEdDJ2VkIHdpdGhvdXQgaGF2aW5nIGJlZW4gZGlzcG9zZWQuIFRoaXMgaXMgYSBMRUFLLlxuLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbmNvbnN0IF9lbmFibGVMaXN0ZW5lckdDZWRXYXJuaW5nID0gZmFsc2U7XG4vLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuLy8gVW5jb21tZW50IHRoZSBuZXh0IGxpbmUgdG8gcHJpbnQgd2FybmluZ3Mgd2hlbmV2ZXIgYW4gZW1pdHRlciB3aXRoIGxpc3RlbmVycyBpcyBkaXNwb3NlZC4gVGhhdCBpcyBhIHNpZ24gb2YgY29kZSBzbWVsbC5cbi8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG5jb25zdCBfZW5hYmxlRGlzcG9zZVdpdGhMaXN0ZW5lcldhcm5pbmcgPSBmYWxzZTtcbi8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4vLyBVbmNvbW1lbnQgdGhlIG5leHQgbGluZSB0byBwcmludCB3YXJuaW5ncyB3aGVuZXZlciBhIHNuYXBzaG90dGVkIGV2ZW50IGlzIHVzZWQgcmVwZWF0ZWRseSB3aXRob3V0IGNsZWFudXAuXG4vLyBTZWUgaHR0cHM6Ly9naXRodWIuY29tL21pY3Jvc29mdC92c2NvZGUvaXNzdWVzLzE0Mjg1MVxuLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbmNvbnN0IF9lbmFibGVTbmFwc2hvdFBvdGVudGlhbExlYWtXYXJuaW5nID0gZmFsc2U7XG5leHBvcnQgdmFyIEV2ZW50O1xuKGZ1bmN0aW9uIChFdmVudCkge1xuICAgIEV2ZW50Lk5vbmUgPSAoKSA9PiBEaXNwb3NhYmxlLk5vbmU7XG4gICAgZnVuY3Rpb24gX2FkZExlYWthZ2VUcmFjZUxvZ2ljKG9wdGlvbnMpIHtcbiAgICAgICAgaWYgKF9lbmFibGVTbmFwc2hvdFBvdGVudGlhbExlYWtXYXJuaW5nKSB7XG4gICAgICAgICAgICBjb25zdCB7IG9uRGlkQWRkTGlzdGVuZXI6IG9yaWdMaXN0ZW5lckRpZEFkZCB9ID0gb3B0aW9ucztcbiAgICAgICAgICAgIGNvbnN0IHN0YWNrID0gU3RhY2t0cmFjZS5jcmVhdGUoKTtcbiAgICAgICAgICAgIGxldCBjb3VudCA9IDA7XG4gICAgICAgICAgICBvcHRpb25zLm9uRGlkQWRkTGlzdGVuZXIgPSAoKSA9PiB7XG4gICAgICAgICAgICAgICAgaWYgKCsrY291bnQgPT09IDIpIHtcbiAgICAgICAgICAgICAgICAgICAgY29uc29sZS53YXJuKCdzbmFwc2hvdHRlZCBlbWl0dGVyIExJS0VMWSB1c2VkIHB1YmxpYyBhbmQgU0hPVUxEIEhBVkUgQkVFTiBjcmVhdGVkIHdpdGggRGlzcG9zYWJsZVN0b3JlLiBzbmFwc2hvdHRlZCBoZXJlJyk7XG4gICAgICAgICAgICAgICAgICAgIHN0YWNrLnByaW50KCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIG9yaWdMaXN0ZW5lckRpZEFkZCA9PT0gbnVsbCB8fCBvcmlnTGlzdGVuZXJEaWRBZGQgPT09IHZvaWQgMCA/IHZvaWQgMCA6IG9yaWdMaXN0ZW5lckRpZEFkZCgpO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgfVxuICAgIH1cbiAgICAvKipcbiAgICAgKiBHaXZlbiBhbiBldmVudCwgcmV0dXJucyBhbm90aGVyIGV2ZW50IHdoaWNoIGRlYm91bmNlcyBjYWxscyBhbmQgZGVmZXJzIHRoZSBsaXN0ZW5lcnMgdG8gYSBsYXRlciB0YXNrIHZpYSBhIHNoYXJlZFxuICAgICAqIGBzZXRUaW1lb3V0YC4gVGhlIGV2ZW50IGlzIGNvbnZlcnRlZCBpbnRvIGEgc2lnbmFsIChgRXZlbnQ8dm9pZD5gKSB0byBhdm9pZCBhZGRpdGlvbmFsIG9iamVjdCBjcmVhdGlvbiBhcyBhXG4gICAgICogcmVzdWx0IG9mIG1lcmdpbmcgZXZlbnRzIGFuZCB0byB0cnkgcHJldmVudCByYWNlIGNvbmRpdGlvbnMgdGhhdCBjb3VsZCBhcmlzZSB3aGVuIHVzaW5nIHJlbGF0ZWQgZGVmZXJyZWQgYW5kXG4gICAgICogbm9uLWRlZmVycmVkIGV2ZW50cy5cbiAgICAgKlxuICAgICAqIFRoaXMgaXMgdXNlZnVsIGZvciBkZWZlcnJpbmcgbm9uLWNyaXRpY2FsIHdvcmsgKGVnLiBnZW5lcmFsIFVJIHVwZGF0ZXMpIHRvIGVuc3VyZSBpdCBkb2VzIG5vdCBibG9jayBjcml0aWNhbCB3b3JrXG4gICAgICogKGVnLiBsYXRlbmN5IG9mIGtleXByZXNzIHRvIHRleHQgcmVuZGVyZWQpLlxuICAgICAqXG4gICAgICogKk5PVEUqIHRoYXQgdGhpcyBmdW5jdGlvbiByZXR1cm5zIGFuIGBFdmVudGAgYW5kIGl0IE1VU1QgYmUgY2FsbGVkIHdpdGggYSBgRGlzcG9zYWJsZVN0b3JlYCB3aGVuZXZlciB0aGUgcmV0dXJuZWRcbiAgICAgKiBldmVudCBpcyBhY2Nlc3NpYmxlIHRvIFwidGhpcmQgcGFydGllc1wiLCBlLmcgdGhlIGV2ZW50IGlzIGEgcHVibGljIHByb3BlcnR5LiBPdGhlcndpc2UgYSBsZWFrZWQgbGlzdGVuZXIgb24gdGhlXG4gICAgICogcmV0dXJuZWQgZXZlbnQgY2F1c2VzIHRoaXMgdXRpbGl0eSB0byBsZWFrIGEgbGlzdGVuZXIgb24gdGhlIG9yaWdpbmFsIGV2ZW50LlxuICAgICAqXG4gICAgICogQHBhcmFtIGV2ZW50IFRoZSBldmVudCBzb3VyY2UgZm9yIHRoZSBuZXcgZXZlbnQuXG4gICAgICogQHBhcmFtIGRpc3Bvc2FibGUgQSBkaXNwb3NhYmxlIHN0b3JlIHRvIGFkZCB0aGUgbmV3IEV2ZW50RW1pdHRlciB0by5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBkZWZlcihldmVudCwgZGlzcG9zYWJsZSkge1xuICAgICAgICByZXR1cm4gZGVib3VuY2UoZXZlbnQsICgpID0+IHZvaWQgMCwgMCwgdW5kZWZpbmVkLCB0cnVlLCB1bmRlZmluZWQsIGRpc3Bvc2FibGUpO1xuICAgIH1cbiAgICBFdmVudC5kZWZlciA9IGRlZmVyO1xuICAgIC8qKlxuICAgICAqIEdpdmVuIGFuIGV2ZW50LCByZXR1cm5zIGFub3RoZXIgZXZlbnQgd2hpY2ggb25seSBmaXJlcyBvbmNlLlxuICAgICAqXG4gICAgICogQHBhcmFtIGV2ZW50IFRoZSBldmVudCBzb3VyY2UgZm9yIHRoZSBuZXcgZXZlbnQuXG4gICAgICovXG4gICAgZnVuY3Rpb24gb25jZShldmVudCkge1xuICAgICAgICByZXR1cm4gKGxpc3RlbmVyLCB0aGlzQXJncyA9IG51bGwsIGRpc3Bvc2FibGVzKSA9PiB7XG4gICAgICAgICAgICAvLyB3ZSBuZWVkIHRoaXMsIGluIGNhc2UgdGhlIGV2ZW50IGZpcmVzIGR1cmluZyB0aGUgbGlzdGVuZXIgY2FsbFxuICAgICAgICAgICAgbGV0IGRpZEZpcmUgPSBmYWxzZTtcbiAgICAgICAgICAgIGxldCByZXN1bHQgPSB1bmRlZmluZWQ7XG4gICAgICAgICAgICByZXN1bHQgPSBldmVudChlID0+IHtcbiAgICAgICAgICAgICAgICBpZiAoZGlkRmlyZSkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2UgaWYgKHJlc3VsdCkge1xuICAgICAgICAgICAgICAgICAgICByZXN1bHQuZGlzcG9zZSgpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgZGlkRmlyZSA9IHRydWU7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJldHVybiBsaXN0ZW5lci5jYWxsKHRoaXNBcmdzLCBlKTtcbiAgICAgICAgICAgIH0sIG51bGwsIGRpc3Bvc2FibGVzKTtcbiAgICAgICAgICAgIGlmIChkaWRGaXJlKSB7XG4gICAgICAgICAgICAgICAgcmVzdWx0LmRpc3Bvc2UoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgICAgIH07XG4gICAgfVxuICAgIEV2ZW50Lm9uY2UgPSBvbmNlO1xuICAgIC8qKlxuICAgICAqIE1hcHMgYW4gZXZlbnQgb2Ygb25lIHR5cGUgaW50byBhbiBldmVudCBvZiBhbm90aGVyIHR5cGUgdXNpbmcgYSBtYXBwaW5nIGZ1bmN0aW9uLCBzaW1pbGFyIHRvIGhvd1xuICAgICAqIGBBcnJheS5wcm90b3R5cGUubWFwYCB3b3Jrcy5cbiAgICAgKlxuICAgICAqICpOT1RFKiB0aGF0IHRoaXMgZnVuY3Rpb24gcmV0dXJucyBhbiBgRXZlbnRgIGFuZCBpdCBNVVNUIGJlIGNhbGxlZCB3aXRoIGEgYERpc3Bvc2FibGVTdG9yZWAgd2hlbmV2ZXIgdGhlIHJldHVybmVkXG4gICAgICogZXZlbnQgaXMgYWNjZXNzaWJsZSB0byBcInRoaXJkIHBhcnRpZXNcIiwgZS5nIHRoZSBldmVudCBpcyBhIHB1YmxpYyBwcm9wZXJ0eS4gT3RoZXJ3aXNlIGEgbGVha2VkIGxpc3RlbmVyIG9uIHRoZVxuICAgICAqIHJldHVybmVkIGV2ZW50IGNhdXNlcyB0aGlzIHV0aWxpdHkgdG8gbGVhayBhIGxpc3RlbmVyIG9uIHRoZSBvcmlnaW5hbCBldmVudC5cbiAgICAgKlxuICAgICAqIEBwYXJhbSBldmVudCBUaGUgZXZlbnQgc291cmNlIGZvciB0aGUgbmV3IGV2ZW50LlxuICAgICAqIEBwYXJhbSBtYXAgVGhlIG1hcHBpbmcgZnVuY3Rpb24uXG4gICAgICogQHBhcmFtIGRpc3Bvc2FibGUgQSBkaXNwb3NhYmxlIHN0b3JlIHRvIGFkZCB0aGUgbmV3IEV2ZW50RW1pdHRlciB0by5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBtYXAoZXZlbnQsIG1hcCwgZGlzcG9zYWJsZSkge1xuICAgICAgICByZXR1cm4gc25hcHNob3QoKGxpc3RlbmVyLCB0aGlzQXJncyA9IG51bGwsIGRpc3Bvc2FibGVzKSA9PiBldmVudChpID0+IGxpc3RlbmVyLmNhbGwodGhpc0FyZ3MsIG1hcChpKSksIG51bGwsIGRpc3Bvc2FibGVzKSwgZGlzcG9zYWJsZSk7XG4gICAgfVxuICAgIEV2ZW50Lm1hcCA9IG1hcDtcbiAgICAvKipcbiAgICAgKiBXcmFwcyBhbiBldmVudCBpbiBhbm90aGVyIGV2ZW50IHRoYXQgcGVyZm9ybXMgc29tZSBmdW5jdGlvbiBvbiB0aGUgZXZlbnQgb2JqZWN0IGJlZm9yZSBmaXJpbmcuXG4gICAgICpcbiAgICAgKiAqTk9URSogdGhhdCB0aGlzIGZ1bmN0aW9uIHJldHVybnMgYW4gYEV2ZW50YCBhbmQgaXQgTVVTVCBiZSBjYWxsZWQgd2l0aCBhIGBEaXNwb3NhYmxlU3RvcmVgIHdoZW5ldmVyIHRoZSByZXR1cm5lZFxuICAgICAqIGV2ZW50IGlzIGFjY2Vzc2libGUgdG8gXCJ0aGlyZCBwYXJ0aWVzXCIsIGUuZyB0aGUgZXZlbnQgaXMgYSBwdWJsaWMgcHJvcGVydHkuIE90aGVyd2lzZSBhIGxlYWtlZCBsaXN0ZW5lciBvbiB0aGVcbiAgICAgKiByZXR1cm5lZCBldmVudCBjYXVzZXMgdGhpcyB1dGlsaXR5IHRvIGxlYWsgYSBsaXN0ZW5lciBvbiB0aGUgb3JpZ2luYWwgZXZlbnQuXG4gICAgICpcbiAgICAgKiBAcGFyYW0gZXZlbnQgVGhlIGV2ZW50IHNvdXJjZSBmb3IgdGhlIG5ldyBldmVudC5cbiAgICAgKiBAcGFyYW0gZWFjaCBUaGUgZnVuY3Rpb24gdG8gcGVyZm9ybSBvbiB0aGUgZXZlbnQgb2JqZWN0LlxuICAgICAqIEBwYXJhbSBkaXNwb3NhYmxlIEEgZGlzcG9zYWJsZSBzdG9yZSB0byBhZGQgdGhlIG5ldyBFdmVudEVtaXR0ZXIgdG8uXG4gICAgICovXG4gICAgZnVuY3Rpb24gZm9yRWFjaChldmVudCwgZWFjaCwgZGlzcG9zYWJsZSkge1xuICAgICAgICByZXR1cm4gc25hcHNob3QoKGxpc3RlbmVyLCB0aGlzQXJncyA9IG51bGwsIGRpc3Bvc2FibGVzKSA9PiBldmVudChpID0+IHsgZWFjaChpKTsgbGlzdGVuZXIuY2FsbCh0aGlzQXJncywgaSk7IH0sIG51bGwsIGRpc3Bvc2FibGVzKSwgZGlzcG9zYWJsZSk7XG4gICAgfVxuICAgIEV2ZW50LmZvckVhY2ggPSBmb3JFYWNoO1xuICAgIGZ1bmN0aW9uIGZpbHRlcihldmVudCwgZmlsdGVyLCBkaXNwb3NhYmxlKSB7XG4gICAgICAgIHJldHVybiBzbmFwc2hvdCgobGlzdGVuZXIsIHRoaXNBcmdzID0gbnVsbCwgZGlzcG9zYWJsZXMpID0+IGV2ZW50KGUgPT4gZmlsdGVyKGUpICYmIGxpc3RlbmVyLmNhbGwodGhpc0FyZ3MsIGUpLCBudWxsLCBkaXNwb3NhYmxlcyksIGRpc3Bvc2FibGUpO1xuICAgIH1cbiAgICBFdmVudC5maWx0ZXIgPSBmaWx0ZXI7XG4gICAgLyoqXG4gICAgICogR2l2ZW4gYW4gZXZlbnQsIHJldHVybnMgdGhlIHNhbWUgZXZlbnQgYnV0IHR5cGVkIGFzIGBFdmVudDx2b2lkPmAuXG4gICAgICovXG4gICAgZnVuY3Rpb24gc2lnbmFsKGV2ZW50KSB7XG4gICAgICAgIHJldHVybiBldmVudDtcbiAgICB9XG4gICAgRXZlbnQuc2lnbmFsID0gc2lnbmFsO1xuICAgIGZ1bmN0aW9uIGFueSguLi5ldmVudHMpIHtcbiAgICAgICAgcmV0dXJuIChsaXN0ZW5lciwgdGhpc0FyZ3MgPSBudWxsLCBkaXNwb3NhYmxlcykgPT4ge1xuICAgICAgICAgICAgY29uc3QgZGlzcG9zYWJsZSA9IGNvbWJpbmVkRGlzcG9zYWJsZSguLi5ldmVudHMubWFwKGV2ZW50ID0+IGV2ZW50KGUgPT4gbGlzdGVuZXIuY2FsbCh0aGlzQXJncywgZSkpKSk7XG4gICAgICAgICAgICByZXR1cm4gYWRkQW5kUmV0dXJuRGlzcG9zYWJsZShkaXNwb3NhYmxlLCBkaXNwb3NhYmxlcyk7XG4gICAgICAgIH07XG4gICAgfVxuICAgIEV2ZW50LmFueSA9IGFueTtcbiAgICAvKipcbiAgICAgKiAqTk9URSogdGhhdCB0aGlzIGZ1bmN0aW9uIHJldHVybnMgYW4gYEV2ZW50YCBhbmQgaXQgTVVTVCBiZSBjYWxsZWQgd2l0aCBhIGBEaXNwb3NhYmxlU3RvcmVgIHdoZW5ldmVyIHRoZSByZXR1cm5lZFxuICAgICAqIGV2ZW50IGlzIGFjY2Vzc2libGUgdG8gXCJ0aGlyZCBwYXJ0aWVzXCIsIGUuZyB0aGUgZXZlbnQgaXMgYSBwdWJsaWMgcHJvcGVydHkuIE90aGVyd2lzZSBhIGxlYWtlZCBsaXN0ZW5lciBvbiB0aGVcbiAgICAgKiByZXR1cm5lZCBldmVudCBjYXVzZXMgdGhpcyB1dGlsaXR5IHRvIGxlYWsgYSBsaXN0ZW5lciBvbiB0aGUgb3JpZ2luYWwgZXZlbnQuXG4gICAgICovXG4gICAgZnVuY3Rpb24gcmVkdWNlKGV2ZW50LCBtZXJnZSwgaW5pdGlhbCwgZGlzcG9zYWJsZSkge1xuICAgICAgICBsZXQgb3V0cHV0ID0gaW5pdGlhbDtcbiAgICAgICAgcmV0dXJuIG1hcChldmVudCwgZSA9PiB7XG4gICAgICAgICAgICBvdXRwdXQgPSBtZXJnZShvdXRwdXQsIGUpO1xuICAgICAgICAgICAgcmV0dXJuIG91dHB1dDtcbiAgICAgICAgfSwgZGlzcG9zYWJsZSk7XG4gICAgfVxuICAgIEV2ZW50LnJlZHVjZSA9IHJlZHVjZTtcbiAgICBmdW5jdGlvbiBzbmFwc2hvdChldmVudCwgZGlzcG9zYWJsZSkge1xuICAgICAgICBsZXQgbGlzdGVuZXI7XG4gICAgICAgIGNvbnN0IG9wdGlvbnMgPSB7XG4gICAgICAgICAgICBvbldpbGxBZGRGaXJzdExpc3RlbmVyKCkge1xuICAgICAgICAgICAgICAgIGxpc3RlbmVyID0gZXZlbnQoZW1pdHRlci5maXJlLCBlbWl0dGVyKTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBvbkRpZFJlbW92ZUxhc3RMaXN0ZW5lcigpIHtcbiAgICAgICAgICAgICAgICBsaXN0ZW5lciA9PT0gbnVsbCB8fCBsaXN0ZW5lciA9PT0gdm9pZCAwID8gdm9pZCAwIDogbGlzdGVuZXIuZGlzcG9zZSgpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuICAgICAgICBpZiAoIWRpc3Bvc2FibGUpIHtcbiAgICAgICAgICAgIF9hZGRMZWFrYWdlVHJhY2VMb2dpYyhvcHRpb25zKTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBlbWl0dGVyID0gbmV3IEVtaXR0ZXIob3B0aW9ucyk7XG4gICAgICAgIGRpc3Bvc2FibGUgPT09IG51bGwgfHwgZGlzcG9zYWJsZSA9PT0gdm9pZCAwID8gdm9pZCAwIDogZGlzcG9zYWJsZS5hZGQoZW1pdHRlcik7XG4gICAgICAgIHJldHVybiBlbWl0dGVyLmV2ZW50O1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBBZGRzIHRoZSBJRGlzcG9zYWJsZSB0byB0aGUgc3RvcmUgaWYgaXQncyBzZXQsIGFuZCByZXR1cm5zIGl0LiBVc2VmdWwgdG9cbiAgICAgKiBFdmVudCBmdW5jdGlvbiBpbXBsZW1lbnRhdGlvbi5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBhZGRBbmRSZXR1cm5EaXNwb3NhYmxlKGQsIHN0b3JlKSB7XG4gICAgICAgIGlmIChzdG9yZSBpbnN0YW5jZW9mIEFycmF5KSB7XG4gICAgICAgICAgICBzdG9yZS5wdXNoKGQpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKHN0b3JlKSB7XG4gICAgICAgICAgICBzdG9yZS5hZGQoZCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGQ7XG4gICAgfVxuICAgIGZ1bmN0aW9uIGRlYm91bmNlKGV2ZW50LCBtZXJnZSwgZGVsYXkgPSAxMDAsIGxlYWRpbmcgPSBmYWxzZSwgZmx1c2hPbkxpc3RlbmVyUmVtb3ZlID0gZmFsc2UsIGxlYWtXYXJuaW5nVGhyZXNob2xkLCBkaXNwb3NhYmxlKSB7XG4gICAgICAgIGxldCBzdWJzY3JpcHRpb247XG4gICAgICAgIGxldCBvdXRwdXQgPSB1bmRlZmluZWQ7XG4gICAgICAgIGxldCBoYW5kbGUgPSB1bmRlZmluZWQ7XG4gICAgICAgIGxldCBudW1EZWJvdW5jZWRDYWxscyA9IDA7XG4gICAgICAgIGxldCBkb0ZpcmU7XG4gICAgICAgIGNvbnN0IG9wdGlvbnMgPSB7XG4gICAgICAgICAgICBsZWFrV2FybmluZ1RocmVzaG9sZCxcbiAgICAgICAgICAgIG9uV2lsbEFkZEZpcnN0TGlzdGVuZXIoKSB7XG4gICAgICAgICAgICAgICAgc3Vic2NyaXB0aW9uID0gZXZlbnQoY3VyID0+IHtcbiAgICAgICAgICAgICAgICAgICAgbnVtRGVib3VuY2VkQ2FsbHMrKztcbiAgICAgICAgICAgICAgICAgICAgb3V0cHV0ID0gbWVyZ2Uob3V0cHV0LCBjdXIpO1xuICAgICAgICAgICAgICAgICAgICBpZiAobGVhZGluZyAmJiAhaGFuZGxlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBlbWl0dGVyLmZpcmUob3V0cHV0KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIG91dHB1dCA9IHVuZGVmaW5lZDtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBkb0ZpcmUgPSAoKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBfb3V0cHV0ID0gb3V0cHV0O1xuICAgICAgICAgICAgICAgICAgICAgICAgb3V0cHV0ID0gdW5kZWZpbmVkO1xuICAgICAgICAgICAgICAgICAgICAgICAgaGFuZGxlID0gdW5kZWZpbmVkO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCFsZWFkaW5nIHx8IG51bURlYm91bmNlZENhbGxzID4gMSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVtaXR0ZXIuZmlyZShfb3V0cHV0KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIG51bURlYm91bmNlZENhbGxzID0gMDtcbiAgICAgICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHR5cGVvZiBkZWxheSA9PT0gJ251bWJlcicpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNsZWFyVGltZW91dChoYW5kbGUpO1xuICAgICAgICAgICAgICAgICAgICAgICAgaGFuZGxlID0gc2V0VGltZW91dChkb0ZpcmUsIGRlbGF5KTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChoYW5kbGUgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGhhbmRsZSA9IDA7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcXVldWVNaWNyb3Rhc2soZG9GaXJlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIG9uV2lsbFJlbW92ZUxpc3RlbmVyKCkge1xuICAgICAgICAgICAgICAgIGlmIChmbHVzaE9uTGlzdGVuZXJSZW1vdmUgJiYgbnVtRGVib3VuY2VkQ2FsbHMgPiAwKSB7XG4gICAgICAgICAgICAgICAgICAgIGRvRmlyZSA9PT0gbnVsbCB8fCBkb0ZpcmUgPT09IHZvaWQgMCA/IHZvaWQgMCA6IGRvRmlyZSgpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBvbkRpZFJlbW92ZUxhc3RMaXN0ZW5lcigpIHtcbiAgICAgICAgICAgICAgICBkb0ZpcmUgPSB1bmRlZmluZWQ7XG4gICAgICAgICAgICAgICAgc3Vic2NyaXB0aW9uLmRpc3Bvc2UoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICAgICAgaWYgKCFkaXNwb3NhYmxlKSB7XG4gICAgICAgICAgICBfYWRkTGVha2FnZVRyYWNlTG9naWMob3B0aW9ucyk7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgZW1pdHRlciA9IG5ldyBFbWl0dGVyKG9wdGlvbnMpO1xuICAgICAgICBkaXNwb3NhYmxlID09PSBudWxsIHx8IGRpc3Bvc2FibGUgPT09IHZvaWQgMCA/IHZvaWQgMCA6IGRpc3Bvc2FibGUuYWRkKGVtaXR0ZXIpO1xuICAgICAgICByZXR1cm4gZW1pdHRlci5ldmVudDtcbiAgICB9XG4gICAgRXZlbnQuZGVib3VuY2UgPSBkZWJvdW5jZTtcbiAgICAvKipcbiAgICAgKiBEZWJvdW5jZXMgYW4gZXZlbnQsIGZpcmluZyBhZnRlciBzb21lIGRlbGF5IChkZWZhdWx0PTApIHdpdGggYW4gYXJyYXkgb2YgYWxsIGV2ZW50IG9yaWdpbmFsIG9iamVjdHMuXG4gICAgICpcbiAgICAgKiAqTk9URSogdGhhdCB0aGlzIGZ1bmN0aW9uIHJldHVybnMgYW4gYEV2ZW50YCBhbmQgaXQgTVVTVCBiZSBjYWxsZWQgd2l0aCBhIGBEaXNwb3NhYmxlU3RvcmVgIHdoZW5ldmVyIHRoZSByZXR1cm5lZFxuICAgICAqIGV2ZW50IGlzIGFjY2Vzc2libGUgdG8gXCJ0aGlyZCBwYXJ0aWVzXCIsIGUuZyB0aGUgZXZlbnQgaXMgYSBwdWJsaWMgcHJvcGVydHkuIE90aGVyd2lzZSBhIGxlYWtlZCBsaXN0ZW5lciBvbiB0aGVcbiAgICAgKiByZXR1cm5lZCBldmVudCBjYXVzZXMgdGhpcyB1dGlsaXR5IHRvIGxlYWsgYSBsaXN0ZW5lciBvbiB0aGUgb3JpZ2luYWwgZXZlbnQuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYWNjdW11bGF0ZShldmVudCwgZGVsYXkgPSAwLCBkaXNwb3NhYmxlKSB7XG4gICAgICAgIHJldHVybiBFdmVudC5kZWJvdW5jZShldmVudCwgKGxhc3QsIGUpID0+IHtcbiAgICAgICAgICAgIGlmICghbGFzdCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBbZV07XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBsYXN0LnB1c2goZSk7XG4gICAgICAgICAgICByZXR1cm4gbGFzdDtcbiAgICAgICAgfSwgZGVsYXksIHVuZGVmaW5lZCwgdHJ1ZSwgdW5kZWZpbmVkLCBkaXNwb3NhYmxlKTtcbiAgICB9XG4gICAgRXZlbnQuYWNjdW11bGF0ZSA9IGFjY3VtdWxhdGU7XG4gICAgLyoqXG4gICAgICogRmlsdGVycyBhbiBldmVudCBzdWNoIHRoYXQgc29tZSBjb25kaXRpb24gaXMgX25vdF8gbWV0IG1vcmUgdGhhbiBvbmNlIGluIGEgcm93LCBlZmZlY3RpdmVseSBlbnN1cmluZyBkdXBsaWNhdGVcbiAgICAgKiBldmVudCBvYmplY3RzIGZyb20gZGlmZmVyZW50IHNvdXJjZXMgZG8gbm90IGZpcmUgdGhlIHNhbWUgZXZlbnQgb2JqZWN0LlxuICAgICAqXG4gICAgICogKk5PVEUqIHRoYXQgdGhpcyBmdW5jdGlvbiByZXR1cm5zIGFuIGBFdmVudGAgYW5kIGl0IE1VU1QgYmUgY2FsbGVkIHdpdGggYSBgRGlzcG9zYWJsZVN0b3JlYCB3aGVuZXZlciB0aGUgcmV0dXJuZWRcbiAgICAgKiBldmVudCBpcyBhY2Nlc3NpYmxlIHRvIFwidGhpcmQgcGFydGllc1wiLCBlLmcgdGhlIGV2ZW50IGlzIGEgcHVibGljIHByb3BlcnR5LiBPdGhlcndpc2UgYSBsZWFrZWQgbGlzdGVuZXIgb24gdGhlXG4gICAgICogcmV0dXJuZWQgZXZlbnQgY2F1c2VzIHRoaXMgdXRpbGl0eSB0byBsZWFrIGEgbGlzdGVuZXIgb24gdGhlIG9yaWdpbmFsIGV2ZW50LlxuICAgICAqXG4gICAgICogQHBhcmFtIGV2ZW50IFRoZSBldmVudCBzb3VyY2UgZm9yIHRoZSBuZXcgZXZlbnQuXG4gICAgICogQHBhcmFtIGVxdWFscyBUaGUgZXF1YWxpdHkgY29uZGl0aW9uLlxuICAgICAqIEBwYXJhbSBkaXNwb3NhYmxlIEEgZGlzcG9zYWJsZSBzdG9yZSB0byBhZGQgdGhlIG5ldyBFdmVudEVtaXR0ZXIgdG8uXG4gICAgICpcbiAgICAgKiBAZXhhbXBsZVxuICAgICAqIGBgYFxuICAgICAqIC8vIEZpcmUgb25seSBvbmUgdGltZSB3aGVuIGEgc2luZ2xlIHdpbmRvdyBpcyBvcGVuZWQgb3IgZm9jdXNlZFxuICAgICAqIEV2ZW50LmxhdGNoKEV2ZW50LmFueShvbkRpZE9wZW5XaW5kb3csIG9uRGlkRm9jdXNXaW5kb3cpKVxuICAgICAqIGBgYFxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGxhdGNoKGV2ZW50LCBlcXVhbHMgPSAoYSwgYikgPT4gYSA9PT0gYiwgZGlzcG9zYWJsZSkge1xuICAgICAgICBsZXQgZmlyc3RDYWxsID0gdHJ1ZTtcbiAgICAgICAgbGV0IGNhY2hlO1xuICAgICAgICByZXR1cm4gZmlsdGVyKGV2ZW50LCB2YWx1ZSA9PiB7XG4gICAgICAgICAgICBjb25zdCBzaG91bGRFbWl0ID0gZmlyc3RDYWxsIHx8ICFlcXVhbHModmFsdWUsIGNhY2hlKTtcbiAgICAgICAgICAgIGZpcnN0Q2FsbCA9IGZhbHNlO1xuICAgICAgICAgICAgY2FjaGUgPSB2YWx1ZTtcbiAgICAgICAgICAgIHJldHVybiBzaG91bGRFbWl0O1xuICAgICAgICB9LCBkaXNwb3NhYmxlKTtcbiAgICB9XG4gICAgRXZlbnQubGF0Y2ggPSBsYXRjaDtcbiAgICAvKipcbiAgICAgKiBTcGxpdHMgYW4gZXZlbnQgd2hvc2UgcGFyYW1ldGVyIGlzIGEgdW5pb24gdHlwZSBpbnRvIDIgc2VwYXJhdGUgZXZlbnRzIGZvciBlYWNoIHR5cGUgaW4gdGhlIHVuaW9uLlxuICAgICAqXG4gICAgICogKk5PVEUqIHRoYXQgdGhpcyBmdW5jdGlvbiByZXR1cm5zIGFuIGBFdmVudGAgYW5kIGl0IE1VU1QgYmUgY2FsbGVkIHdpdGggYSBgRGlzcG9zYWJsZVN0b3JlYCB3aGVuZXZlciB0aGUgcmV0dXJuZWRcbiAgICAgKiBldmVudCBpcyBhY2Nlc3NpYmxlIHRvIFwidGhpcmQgcGFydGllc1wiLCBlLmcgdGhlIGV2ZW50IGlzIGEgcHVibGljIHByb3BlcnR5LiBPdGhlcndpc2UgYSBsZWFrZWQgbGlzdGVuZXIgb24gdGhlXG4gICAgICogcmV0dXJuZWQgZXZlbnQgY2F1c2VzIHRoaXMgdXRpbGl0eSB0byBsZWFrIGEgbGlzdGVuZXIgb24gdGhlIG9yaWdpbmFsIGV2ZW50LlxuICAgICAqXG4gICAgICogQGV4YW1wbGVcbiAgICAgKiBgYGBcbiAgICAgKiBjb25zdCBldmVudCA9IG5ldyBFdmVudEVtaXR0ZXI8bnVtYmVyIHwgdW5kZWZpbmVkPigpLmV2ZW50O1xuICAgICAqIGNvbnN0IFtudW1iZXJFdmVudCwgdW5kZWZpbmVkRXZlbnRdID0gRXZlbnQuc3BsaXQoZXZlbnQsIGlzVW5kZWZpbmVkKTtcbiAgICAgKiBgYGBcbiAgICAgKlxuICAgICAqIEBwYXJhbSBldmVudCBUaGUgZXZlbnQgc291cmNlIGZvciB0aGUgbmV3IGV2ZW50LlxuICAgICAqIEBwYXJhbSBpc1QgQSBmdW5jdGlvbiB0aGF0IGRldGVybWluZXMgd2hhdCBldmVudCBpcyBvZiB0aGUgZmlyc3QgdHlwZS5cbiAgICAgKiBAcGFyYW0gZGlzcG9zYWJsZSBBIGRpc3Bvc2FibGUgc3RvcmUgdG8gYWRkIHRoZSBuZXcgRXZlbnRFbWl0dGVyIHRvLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHNwbGl0KGV2ZW50LCBpc1QsIGRpc3Bvc2FibGUpIHtcbiAgICAgICAgcmV0dXJuIFtcbiAgICAgICAgICAgIEV2ZW50LmZpbHRlcihldmVudCwgaXNULCBkaXNwb3NhYmxlKSxcbiAgICAgICAgICAgIEV2ZW50LmZpbHRlcihldmVudCwgZSA9PiAhaXNUKGUpLCBkaXNwb3NhYmxlKSxcbiAgICAgICAgXTtcbiAgICB9XG4gICAgRXZlbnQuc3BsaXQgPSBzcGxpdDtcbiAgICAvKipcbiAgICAgKiBCdWZmZXJzIGFuIGV2ZW50IHVudGlsIGl0IGhhcyBhIGxpc3RlbmVyIGF0dGFjaGVkLlxuICAgICAqXG4gICAgICogKk5PVEUqIHRoYXQgdGhpcyBmdW5jdGlvbiByZXR1cm5zIGFuIGBFdmVudGAgYW5kIGl0IE1VU1QgYmUgY2FsbGVkIHdpdGggYSBgRGlzcG9zYWJsZVN0b3JlYCB3aGVuZXZlciB0aGUgcmV0dXJuZWRcbiAgICAgKiBldmVudCBpcyBhY2Nlc3NpYmxlIHRvIFwidGhpcmQgcGFydGllc1wiLCBlLmcgdGhlIGV2ZW50IGlzIGEgcHVibGljIHByb3BlcnR5LiBPdGhlcndpc2UgYSBsZWFrZWQgbGlzdGVuZXIgb24gdGhlXG4gICAgICogcmV0dXJuZWQgZXZlbnQgY2F1c2VzIHRoaXMgdXRpbGl0eSB0byBsZWFrIGEgbGlzdGVuZXIgb24gdGhlIG9yaWdpbmFsIGV2ZW50LlxuICAgICAqXG4gICAgICogQHBhcmFtIGV2ZW50IFRoZSBldmVudCBzb3VyY2UgZm9yIHRoZSBuZXcgZXZlbnQuXG4gICAgICogQHBhcmFtIGZsdXNoQWZ0ZXJUaW1lb3V0IERldGVybWluZXMgd2hldGhlciB0byBmbHVzaCB0aGUgYnVmZmVyIGFmdGVyIGEgdGltZW91dCBpbW1lZGlhdGVseSBvciBhZnRlciBhXG4gICAgICogYHNldFRpbWVvdXRgIHdoZW4gdGhlIGZpcnN0IGV2ZW50IGxpc3RlbmVyIGlzIGFkZGVkLlxuICAgICAqIEBwYXJhbSBfYnVmZmVyIEludGVybmFsOiBBIHNvdXJjZSBldmVudCBhcnJheSB1c2VkIGZvciB0ZXN0cy5cbiAgICAgKlxuICAgICAqIEBleGFtcGxlXG4gICAgICogYGBgXG4gICAgICogLy8gU3RhcnQgYWNjdW11bGF0aW5nIGV2ZW50cywgd2hlbiB0aGUgZmlyc3QgbGlzdGVuZXIgaXMgYXR0YWNoZWQsIGZsdXNoXG4gICAgICogLy8gdGhlIGV2ZW50IGFmdGVyIGEgdGltZW91dCBzdWNoIHRoYXQgbXVsdGlwbGUgbGlzdGVuZXJzIGF0dGFjaGVkIGJlZm9yZVxuICAgICAqIC8vIHRoZSB0aW1lb3V0IHdvdWxkIHJlY2VpdmUgdGhlIGV2ZW50XG4gICAgICogdGhpcy5vbkluc3RhbGxFeHRlbnNpb24gPSBFdmVudC5idWZmZXIoc2VydmljZS5vbkluc3RhbGxFeHRlbnNpb24sIHRydWUpO1xuICAgICAqIGBgYFxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJ1ZmZlcihldmVudCwgZmx1c2hBZnRlclRpbWVvdXQgPSBmYWxzZSwgX2J1ZmZlciA9IFtdLCBkaXNwb3NhYmxlKSB7XG4gICAgICAgIGxldCBidWZmZXIgPSBfYnVmZmVyLnNsaWNlKCk7XG4gICAgICAgIGxldCBsaXN0ZW5lciA9IGV2ZW50KGUgPT4ge1xuICAgICAgICAgICAgaWYgKGJ1ZmZlcikge1xuICAgICAgICAgICAgICAgIGJ1ZmZlci5wdXNoKGUpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgZW1pdHRlci5maXJlKGUpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgICAgaWYgKGRpc3Bvc2FibGUpIHtcbiAgICAgICAgICAgIGRpc3Bvc2FibGUuYWRkKGxpc3RlbmVyKTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBmbHVzaCA9ICgpID0+IHtcbiAgICAgICAgICAgIGJ1ZmZlciA9PT0gbnVsbCB8fCBidWZmZXIgPT09IHZvaWQgMCA/IHZvaWQgMCA6IGJ1ZmZlci5mb3JFYWNoKGUgPT4gZW1pdHRlci5maXJlKGUpKTtcbiAgICAgICAgICAgIGJ1ZmZlciA9IG51bGw7XG4gICAgICAgIH07XG4gICAgICAgIGNvbnN0IGVtaXR0ZXIgPSBuZXcgRW1pdHRlcih7XG4gICAgICAgICAgICBvbldpbGxBZGRGaXJzdExpc3RlbmVyKCkge1xuICAgICAgICAgICAgICAgIGlmICghbGlzdGVuZXIpIHtcbiAgICAgICAgICAgICAgICAgICAgbGlzdGVuZXIgPSBldmVudChlID0+IGVtaXR0ZXIuZmlyZShlKSk7XG4gICAgICAgICAgICAgICAgICAgIGlmIChkaXNwb3NhYmxlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBkaXNwb3NhYmxlLmFkZChsaXN0ZW5lcik7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgb25EaWRBZGRGaXJzdExpc3RlbmVyKCkge1xuICAgICAgICAgICAgICAgIGlmIChidWZmZXIpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGZsdXNoQWZ0ZXJUaW1lb3V0KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBzZXRUaW1lb3V0KGZsdXNoKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGZsdXNoKCk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgb25EaWRSZW1vdmVMYXN0TGlzdGVuZXIoKSB7XG4gICAgICAgICAgICAgICAgaWYgKGxpc3RlbmVyKSB7XG4gICAgICAgICAgICAgICAgICAgIGxpc3RlbmVyLmRpc3Bvc2UoKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgbGlzdGVuZXIgPSBudWxsO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgICAgaWYgKGRpc3Bvc2FibGUpIHtcbiAgICAgICAgICAgIGRpc3Bvc2FibGUuYWRkKGVtaXR0ZXIpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBlbWl0dGVyLmV2ZW50O1xuICAgIH1cbiAgICBFdmVudC5idWZmZXIgPSBidWZmZXI7XG4gICAgLyoqXG4gICAgICogV3JhcHMgdGhlIGV2ZW50IGluIGFuIHtAbGluayBJQ2hhaW5hYmxlRXZlbnR9LCBhbGxvd2luZyBhIG1vcmUgZnVuY3Rpb25hbCBwcm9ncmFtbWluZyBzdHlsZS5cbiAgICAgKlxuICAgICAqIEBleGFtcGxlXG4gICAgICogYGBgXG4gICAgICogLy8gTm9ybWFsXG4gICAgICogY29uc3Qgb25FbnRlclByZXNzTm9ybWFsID0gRXZlbnQuZmlsdGVyKFxuICAgICAqICAgRXZlbnQubWFwKG9uS2V5UHJlc3MuZXZlbnQsIGUgPT4gbmV3IFN0YW5kYXJkS2V5Ym9hcmRFdmVudChlKSksXG4gICAgICogICBlLmtleUNvZGUgPT09IEtleUNvZGUuRW50ZXJcbiAgICAgKiApLmV2ZW50O1xuICAgICAqXG4gICAgICogLy8gVXNpbmcgY2hhaW5cbiAgICAgKiBjb25zdCBvbkVudGVyUHJlc3NDaGFpbiA9IEV2ZW50LmNoYWluKG9uS2V5UHJlc3MuZXZlbnQsICQgPT4gJFxuICAgICAqICAgLm1hcChlID0+IG5ldyBTdGFuZGFyZEtleWJvYXJkRXZlbnQoZSkpXG4gICAgICogICAuZmlsdGVyKGUgPT4gZS5rZXlDb2RlID09PSBLZXlDb2RlLkVudGVyKVxuICAgICAqICk7XG4gICAgICogYGBgXG4gICAgICovXG4gICAgZnVuY3Rpb24gY2hhaW4oZXZlbnQsIHN5dGhlbnNpemUpIHtcbiAgICAgICAgY29uc3QgZm4gPSAobGlzdGVuZXIsIHRoaXNBcmdzLCBkaXNwb3NhYmxlcykgPT4ge1xuICAgICAgICAgICAgY29uc3QgY3MgPSBzeXRoZW5zaXplKG5ldyBDaGFpbmFibGVTeW50aGVzaXMoKSk7XG4gICAgICAgICAgICByZXR1cm4gZXZlbnQoZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgcmVzdWx0ID0gY3MuZXZhbHVhdGUodmFsdWUpO1xuICAgICAgICAgICAgICAgIGlmIChyZXN1bHQgIT09IEhhbHRDaGFpbmFibGUpIHtcbiAgICAgICAgICAgICAgICAgICAgbGlzdGVuZXIuY2FsbCh0aGlzQXJncywgcmVzdWx0KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9LCB1bmRlZmluZWQsIGRpc3Bvc2FibGVzKTtcbiAgICAgICAgfTtcbiAgICAgICAgcmV0dXJuIGZuO1xuICAgIH1cbiAgICBFdmVudC5jaGFpbiA9IGNoYWluO1xuICAgIGNvbnN0IEhhbHRDaGFpbmFibGUgPSBTeW1ib2woJ0hhbHRDaGFpbmFibGUnKTtcbiAgICBjbGFzcyBDaGFpbmFibGVTeW50aGVzaXMge1xuICAgICAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgICAgIHRoaXMuc3RlcHMgPSBbXTtcbiAgICAgICAgfVxuICAgICAgICBtYXAoZm4pIHtcbiAgICAgICAgICAgIHRoaXMuc3RlcHMucHVzaChmbik7XG4gICAgICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgICAgfVxuICAgICAgICBmb3JFYWNoKGZuKSB7XG4gICAgICAgICAgICB0aGlzLnN0ZXBzLnB1c2godiA9PiB7XG4gICAgICAgICAgICAgICAgZm4odik7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHY7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgICB9XG4gICAgICAgIGZpbHRlcihmbikge1xuICAgICAgICAgICAgdGhpcy5zdGVwcy5wdXNoKHYgPT4gZm4odikgPyB2IDogSGFsdENoYWluYWJsZSk7XG4gICAgICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgICAgfVxuICAgICAgICByZWR1Y2UobWVyZ2UsIGluaXRpYWwpIHtcbiAgICAgICAgICAgIGxldCBsYXN0ID0gaW5pdGlhbDtcbiAgICAgICAgICAgIHRoaXMuc3RlcHMucHVzaCh2ID0+IHtcbiAgICAgICAgICAgICAgICBsYXN0ID0gbWVyZ2UobGFzdCwgdik7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGxhc3Q7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgICB9XG4gICAgICAgIGxhdGNoKGVxdWFscyA9IChhLCBiKSA9PiBhID09PSBiKSB7XG4gICAgICAgICAgICBsZXQgZmlyc3RDYWxsID0gdHJ1ZTtcbiAgICAgICAgICAgIGxldCBjYWNoZTtcbiAgICAgICAgICAgIHRoaXMuc3RlcHMucHVzaCh2YWx1ZSA9PiB7XG4gICAgICAgICAgICAgICAgY29uc3Qgc2hvdWxkRW1pdCA9IGZpcnN0Q2FsbCB8fCAhZXF1YWxzKHZhbHVlLCBjYWNoZSk7XG4gICAgICAgICAgICAgICAgZmlyc3RDYWxsID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgY2FjaGUgPSB2YWx1ZTtcbiAgICAgICAgICAgICAgICByZXR1cm4gc2hvdWxkRW1pdCA/IHZhbHVlIDogSGFsdENoYWluYWJsZTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICAgIH1cbiAgICAgICAgZXZhbHVhdGUodmFsdWUpIHtcbiAgICAgICAgICAgIGZvciAoY29uc3Qgc3RlcCBvZiB0aGlzLnN0ZXBzKSB7XG4gICAgICAgICAgICAgICAgdmFsdWUgPSBzdGVwKHZhbHVlKTtcbiAgICAgICAgICAgICAgICBpZiAodmFsdWUgPT09IEhhbHRDaGFpbmFibGUpIHtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIHZhbHVlO1xuICAgICAgICB9XG4gICAgfVxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYW4ge0BsaW5rIEV2ZW50fSBmcm9tIGEgbm9kZSBldmVudCBlbWl0dGVyLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGZyb21Ob2RlRXZlbnRFbWl0dGVyKGVtaXR0ZXIsIGV2ZW50TmFtZSwgbWFwID0gaWQgPT4gaWQpIHtcbiAgICAgICAgY29uc3QgZm4gPSAoLi4uYXJncykgPT4gcmVzdWx0LmZpcmUobWFwKC4uLmFyZ3MpKTtcbiAgICAgICAgY29uc3Qgb25GaXJzdExpc3RlbmVyQWRkID0gKCkgPT4gZW1pdHRlci5vbihldmVudE5hbWUsIGZuKTtcbiAgICAgICAgY29uc3Qgb25MYXN0TGlzdGVuZXJSZW1vdmUgPSAoKSA9PiBlbWl0dGVyLnJlbW92ZUxpc3RlbmVyKGV2ZW50TmFtZSwgZm4pO1xuICAgICAgICBjb25zdCByZXN1bHQgPSBuZXcgRW1pdHRlcih7IG9uV2lsbEFkZEZpcnN0TGlzdGVuZXI6IG9uRmlyc3RMaXN0ZW5lckFkZCwgb25EaWRSZW1vdmVMYXN0TGlzdGVuZXI6IG9uTGFzdExpc3RlbmVyUmVtb3ZlIH0pO1xuICAgICAgICByZXR1cm4gcmVzdWx0LmV2ZW50O1xuICAgIH1cbiAgICBFdmVudC5mcm9tTm9kZUV2ZW50RW1pdHRlciA9IGZyb21Ob2RlRXZlbnRFbWl0dGVyO1xuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYW4ge0BsaW5rIEV2ZW50fSBmcm9tIGEgRE9NIGV2ZW50IGVtaXR0ZXIuXG4gICAgICovXG4gICAgZnVuY3Rpb24gZnJvbURPTUV2ZW50RW1pdHRlcihlbWl0dGVyLCBldmVudE5hbWUsIG1hcCA9IGlkID0+IGlkKSB7XG4gICAgICAgIGNvbnN0IGZuID0gKC4uLmFyZ3MpID0+IHJlc3VsdC5maXJlKG1hcCguLi5hcmdzKSk7XG4gICAgICAgIGNvbnN0IG9uRmlyc3RMaXN0ZW5lckFkZCA9ICgpID0+IGVtaXR0ZXIuYWRkRXZlbnRMaXN0ZW5lcihldmVudE5hbWUsIGZuKTtcbiAgICAgICAgY29uc3Qgb25MYXN0TGlzdGVuZXJSZW1vdmUgPSAoKSA9PiBlbWl0dGVyLnJlbW92ZUV2ZW50TGlzdGVuZXIoZXZlbnROYW1lLCBmbik7XG4gICAgICAgIGNvbnN0IHJlc3VsdCA9IG5ldyBFbWl0dGVyKHsgb25XaWxsQWRkRmlyc3RMaXN0ZW5lcjogb25GaXJzdExpc3RlbmVyQWRkLCBvbkRpZFJlbW92ZUxhc3RMaXN0ZW5lcjogb25MYXN0TGlzdGVuZXJSZW1vdmUgfSk7XG4gICAgICAgIHJldHVybiByZXN1bHQuZXZlbnQ7XG4gICAgfVxuICAgIEV2ZW50LmZyb21ET01FdmVudEVtaXR0ZXIgPSBmcm9tRE9NRXZlbnRFbWl0dGVyO1xuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBwcm9taXNlIG91dCBvZiBhbiBldmVudCwgdXNpbmcgdGhlIHtAbGluayBFdmVudC5vbmNlfSBoZWxwZXIuXG4gICAgICovXG4gICAgZnVuY3Rpb24gdG9Qcm9taXNlKGV2ZW50KSB7XG4gICAgICAgIHJldHVybiBuZXcgUHJvbWlzZShyZXNvbHZlID0+IG9uY2UoZXZlbnQpKHJlc29sdmUpKTtcbiAgICB9XG4gICAgRXZlbnQudG9Qcm9taXNlID0gdG9Qcm9taXNlO1xuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYW4gZXZlbnQgb3V0IG9mIGEgcHJvbWlzZSB0aGF0IGZpcmVzIG9uY2Ugd2hlbiB0aGUgcHJvbWlzZSBpc1xuICAgICAqIHJlc29sdmVkIHdpdGggdGhlIHJlc3VsdCBvZiB0aGUgcHJvbWlzZSBvciBgdW5kZWZpbmVkYC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBmcm9tUHJvbWlzZShwcm9taXNlKSB7XG4gICAgICAgIGNvbnN0IHJlc3VsdCA9IG5ldyBFbWl0dGVyKCk7XG4gICAgICAgIHByb21pc2UudGhlbihyZXMgPT4ge1xuICAgICAgICAgICAgcmVzdWx0LmZpcmUocmVzKTtcbiAgICAgICAgfSwgKCkgPT4ge1xuICAgICAgICAgICAgcmVzdWx0LmZpcmUodW5kZWZpbmVkKTtcbiAgICAgICAgfSkuZmluYWxseSgoKSA9PiB7XG4gICAgICAgICAgICByZXN1bHQuZGlzcG9zZSgpO1xuICAgICAgICB9KTtcbiAgICAgICAgcmV0dXJuIHJlc3VsdC5ldmVudDtcbiAgICB9XG4gICAgRXZlbnQuZnJvbVByb21pc2UgPSBmcm9tUHJvbWlzZTtcbiAgICBmdW5jdGlvbiBydW5BbmRTdWJzY3JpYmUoZXZlbnQsIGhhbmRsZXIsIGluaXRpYWwpIHtcbiAgICAgICAgaGFuZGxlcihpbml0aWFsKTtcbiAgICAgICAgcmV0dXJuIGV2ZW50KGUgPT4gaGFuZGxlcihlKSk7XG4gICAgfVxuICAgIEV2ZW50LnJ1bkFuZFN1YnNjcmliZSA9IHJ1bkFuZFN1YnNjcmliZTtcbiAgICBjbGFzcyBFbWl0dGVyT2JzZXJ2ZXIge1xuICAgICAgICBjb25zdHJ1Y3Rvcihfb2JzZXJ2YWJsZSwgc3RvcmUpIHtcbiAgICAgICAgICAgIHRoaXMuX29ic2VydmFibGUgPSBfb2JzZXJ2YWJsZTtcbiAgICAgICAgICAgIHRoaXMuX2NvdW50ZXIgPSAwO1xuICAgICAgICAgICAgdGhpcy5faGFzQ2hhbmdlZCA9IGZhbHNlO1xuICAgICAgICAgICAgY29uc3Qgb3B0aW9ucyA9IHtcbiAgICAgICAgICAgICAgICBvbldpbGxBZGRGaXJzdExpc3RlbmVyOiAoKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIF9vYnNlcnZhYmxlLmFkZE9ic2VydmVyKHRoaXMpO1xuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgb25EaWRSZW1vdmVMYXN0TGlzdGVuZXI6ICgpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgX29ic2VydmFibGUucmVtb3ZlT2JzZXJ2ZXIodGhpcyk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIGlmICghc3RvcmUpIHtcbiAgICAgICAgICAgICAgICBfYWRkTGVha2FnZVRyYWNlTG9naWMob3B0aW9ucyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0aGlzLmVtaXR0ZXIgPSBuZXcgRW1pdHRlcihvcHRpb25zKTtcbiAgICAgICAgICAgIGlmIChzdG9yZSkge1xuICAgICAgICAgICAgICAgIHN0b3JlLmFkZCh0aGlzLmVtaXR0ZXIpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGJlZ2luVXBkYXRlKF9vYnNlcnZhYmxlKSB7XG4gICAgICAgICAgICAvLyBhc3NlcnQoX29ic2VydmFibGUgPT09IHRoaXMub2JzKTtcbiAgICAgICAgICAgIHRoaXMuX2NvdW50ZXIrKztcbiAgICAgICAgfVxuICAgICAgICBoYW5kbGVQb3NzaWJsZUNoYW5nZShfb2JzZXJ2YWJsZSkge1xuICAgICAgICAgICAgLy8gYXNzZXJ0KF9vYnNlcnZhYmxlID09PSB0aGlzLm9icyk7XG4gICAgICAgIH1cbiAgICAgICAgaGFuZGxlQ2hhbmdlKF9vYnNlcnZhYmxlLCBfY2hhbmdlKSB7XG4gICAgICAgICAgICAvLyBhc3NlcnQoX29ic2VydmFibGUgPT09IHRoaXMub2JzKTtcbiAgICAgICAgICAgIHRoaXMuX2hhc0NoYW5nZWQgPSB0cnVlO1xuICAgICAgICB9XG4gICAgICAgIGVuZFVwZGF0ZShfb2JzZXJ2YWJsZSkge1xuICAgICAgICAgICAgLy8gYXNzZXJ0KF9vYnNlcnZhYmxlID09PSB0aGlzLm9icyk7XG4gICAgICAgICAgICB0aGlzLl9jb3VudGVyLS07XG4gICAgICAgICAgICBpZiAodGhpcy5fY291bnRlciA9PT0gMCkge1xuICAgICAgICAgICAgICAgIHRoaXMuX29ic2VydmFibGUucmVwb3J0Q2hhbmdlcygpO1xuICAgICAgICAgICAgICAgIGlmICh0aGlzLl9oYXNDaGFuZ2VkKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX2hhc0NoYW5nZWQgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5lbWl0dGVyLmZpcmUodGhpcy5fb2JzZXJ2YWJsZS5nZXQoKSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYW4gZXZlbnQgZW1pdHRlciB0aGF0IGlzIGZpcmVkIHdoZW4gdGhlIG9ic2VydmFibGUgY2hhbmdlcy5cbiAgICAgKiBFYWNoIGxpc3RlbmVycyBzdWJzY3JpYmVzIHRvIHRoZSBlbWl0dGVyLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGZyb21PYnNlcnZhYmxlKG9icywgc3RvcmUpIHtcbiAgICAgICAgY29uc3Qgb2JzZXJ2ZXIgPSBuZXcgRW1pdHRlck9ic2VydmVyKG9icywgc3RvcmUpO1xuICAgICAgICByZXR1cm4gb2JzZXJ2ZXIuZW1pdHRlci5ldmVudDtcbiAgICB9XG4gICAgRXZlbnQuZnJvbU9ic2VydmFibGUgPSBmcm9tT2JzZXJ2YWJsZTtcbiAgICAvKipcbiAgICAgKiBFYWNoIGxpc3RlbmVyIGlzIGF0dGFjaGVkIHRvIHRoZSBvYnNlcnZhYmxlIGRpcmVjdGx5LlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGZyb21PYnNlcnZhYmxlTGlnaHQob2JzZXJ2YWJsZSkge1xuICAgICAgICByZXR1cm4gKGxpc3RlbmVyLCB0aGlzQXJncywgZGlzcG9zYWJsZXMpID0+IHtcbiAgICAgICAgICAgIGxldCBjb3VudCA9IDA7XG4gICAgICAgICAgICBsZXQgZGlkQ2hhbmdlID0gZmFsc2U7XG4gICAgICAgICAgICBjb25zdCBvYnNlcnZlciA9IHtcbiAgICAgICAgICAgICAgICBiZWdpblVwZGF0ZSgpIHtcbiAgICAgICAgICAgICAgICAgICAgY291bnQrKztcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIGVuZFVwZGF0ZSgpIHtcbiAgICAgICAgICAgICAgICAgICAgY291bnQtLTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGNvdW50ID09PSAwKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBvYnNlcnZhYmxlLnJlcG9ydENoYW5nZXMoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChkaWRDaGFuZ2UpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkaWRDaGFuZ2UgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBsaXN0ZW5lci5jYWxsKHRoaXNBcmdzKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgaGFuZGxlUG9zc2libGVDaGFuZ2UoKSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIG5vb3BcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIGhhbmRsZUNoYW5nZSgpIHtcbiAgICAgICAgICAgICAgICAgICAgZGlkQ2hhbmdlID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgb2JzZXJ2YWJsZS5hZGRPYnNlcnZlcihvYnNlcnZlcik7XG4gICAgICAgICAgICBvYnNlcnZhYmxlLnJlcG9ydENoYW5nZXMoKTtcbiAgICAgICAgICAgIGNvbnN0IGRpc3Bvc2FibGUgPSB7XG4gICAgICAgICAgICAgICAgZGlzcG9zZSgpIHtcbiAgICAgICAgICAgICAgICAgICAgb2JzZXJ2YWJsZS5yZW1vdmVPYnNlcnZlcihvYnNlcnZlcik7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIGlmIChkaXNwb3NhYmxlcyBpbnN0YW5jZW9mIERpc3Bvc2FibGVTdG9yZSkge1xuICAgICAgICAgICAgICAgIGRpc3Bvc2FibGVzLmFkZChkaXNwb3NhYmxlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKEFycmF5LmlzQXJyYXkoZGlzcG9zYWJsZXMpKSB7XG4gICAgICAgICAgICAgICAgZGlzcG9zYWJsZXMucHVzaChkaXNwb3NhYmxlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBkaXNwb3NhYmxlO1xuICAgICAgICB9O1xuICAgIH1cbiAgICBFdmVudC5mcm9tT2JzZXJ2YWJsZUxpZ2h0ID0gZnJvbU9ic2VydmFibGVMaWdodDtcbn0pKEV2ZW50IHx8IChFdmVudCA9IHt9KSk7XG5leHBvcnQgY2xhc3MgRXZlbnRQcm9maWxpbmcge1xuICAgIGNvbnN0cnVjdG9yKG5hbWUpIHtcbiAgICAgICAgdGhpcy5saXN0ZW5lckNvdW50ID0gMDtcbiAgICAgICAgdGhpcy5pbnZvY2F0aW9uQ291bnQgPSAwO1xuICAgICAgICB0aGlzLmVsYXBzZWRPdmVyYWxsID0gMDtcbiAgICAgICAgdGhpcy5kdXJhdGlvbnMgPSBbXTtcbiAgICAgICAgdGhpcy5uYW1lID0gYCR7bmFtZX1fJHtFdmVudFByb2ZpbGluZy5faWRQb29sKyt9YDtcbiAgICAgICAgRXZlbnRQcm9maWxpbmcuYWxsLmFkZCh0aGlzKTtcbiAgICB9XG4gICAgc3RhcnQobGlzdGVuZXJDb3VudCkge1xuICAgICAgICB0aGlzLl9zdG9wV2F0Y2ggPSBuZXcgU3RvcFdhdGNoKCk7XG4gICAgICAgIHRoaXMubGlzdGVuZXJDb3VudCA9IGxpc3RlbmVyQ291bnQ7XG4gICAgfVxuICAgIHN0b3AoKSB7XG4gICAgICAgIGlmICh0aGlzLl9zdG9wV2F0Y2gpIHtcbiAgICAgICAgICAgIGNvbnN0IGVsYXBzZWQgPSB0aGlzLl9zdG9wV2F0Y2guZWxhcHNlZCgpO1xuICAgICAgICAgICAgdGhpcy5kdXJhdGlvbnMucHVzaChlbGFwc2VkKTtcbiAgICAgICAgICAgIHRoaXMuZWxhcHNlZE92ZXJhbGwgKz0gZWxhcHNlZDtcbiAgICAgICAgICAgIHRoaXMuaW52b2NhdGlvbkNvdW50ICs9IDE7XG4gICAgICAgICAgICB0aGlzLl9zdG9wV2F0Y2ggPSB1bmRlZmluZWQ7XG4gICAgICAgIH1cbiAgICB9XG59XG5FdmVudFByb2ZpbGluZy5hbGwgPSBuZXcgU2V0KCk7XG5FdmVudFByb2ZpbGluZy5faWRQb29sID0gMDtcbmxldCBfZ2xvYmFsTGVha1dhcm5pbmdUaHJlc2hvbGQgPSAtMTtcbmNsYXNzIExlYWthZ2VNb25pdG9yIHtcbiAgICBjb25zdHJ1Y3RvcihfZXJyb3JIYW5kbGVyLCB0aHJlc2hvbGQsIG5hbWUgPSBNYXRoLnJhbmRvbSgpLnRvU3RyaW5nKDE4KS5zbGljZSgyLCA1KSkge1xuICAgICAgICB0aGlzLl9lcnJvckhhbmRsZXIgPSBfZXJyb3JIYW5kbGVyO1xuICAgICAgICB0aGlzLnRocmVzaG9sZCA9IHRocmVzaG9sZDtcbiAgICAgICAgdGhpcy5uYW1lID0gbmFtZTtcbiAgICAgICAgdGhpcy5fd2FybkNvdW50ZG93biA9IDA7XG4gICAgfVxuICAgIGRpc3Bvc2UoKSB7XG4gICAgICAgIHZhciBfYTtcbiAgICAgICAgKF9hID0gdGhpcy5fc3RhY2tzKSA9PT0gbnVsbCB8fCBfYSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2EuY2xlYXIoKTtcbiAgICB9XG4gICAgY2hlY2soc3RhY2ssIGxpc3RlbmVyQ291bnQpIHtcbiAgICAgICAgY29uc3QgdGhyZXNob2xkID0gdGhpcy50aHJlc2hvbGQ7XG4gICAgICAgIGlmICh0aHJlc2hvbGQgPD0gMCB8fCBsaXN0ZW5lckNvdW50IDwgdGhyZXNob2xkKSB7XG4gICAgICAgICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICAgICAgICB9XG4gICAgICAgIGlmICghdGhpcy5fc3RhY2tzKSB7XG4gICAgICAgICAgICB0aGlzLl9zdGFja3MgPSBuZXcgTWFwKCk7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgY291bnQgPSAodGhpcy5fc3RhY2tzLmdldChzdGFjay52YWx1ZSkgfHwgMCk7XG4gICAgICAgIHRoaXMuX3N0YWNrcy5zZXQoc3RhY2sudmFsdWUsIGNvdW50ICsgMSk7XG4gICAgICAgIHRoaXMuX3dhcm5Db3VudGRvd24gLT0gMTtcbiAgICAgICAgaWYgKHRoaXMuX3dhcm5Db3VudGRvd24gPD0gMCkge1xuICAgICAgICAgICAgLy8gb25seSB3YXJuIG9uIGZpcnN0IGV4Y2VlZCBhbmQgdGhlbiBldmVyeSB0aW1lIHRoZSBsaW1pdFxuICAgICAgICAgICAgLy8gaXMgZXhjZWVkZWQgYnkgNTAlIGFnYWluXG4gICAgICAgICAgICB0aGlzLl93YXJuQ291bnRkb3duID0gdGhyZXNob2xkICogMC41O1xuICAgICAgICAgICAgY29uc3QgW3RvcFN0YWNrLCB0b3BDb3VudF0gPSB0aGlzLmdldE1vc3RGcmVxdWVudFN0YWNrKCk7XG4gICAgICAgICAgICBjb25zdCBtZXNzYWdlID0gYFske3RoaXMubmFtZX1dIHBvdGVudGlhbCBsaXN0ZW5lciBMRUFLIGRldGVjdGVkLCBoYXZpbmcgJHtsaXN0ZW5lckNvdW50fSBsaXN0ZW5lcnMgYWxyZWFkeS4gTU9TVCBmcmVxdWVudCBsaXN0ZW5lciAoJHt0b3BDb3VudH0pOmA7XG4gICAgICAgICAgICBjb25zb2xlLndhcm4obWVzc2FnZSk7XG4gICAgICAgICAgICBjb25zb2xlLndhcm4odG9wU3RhY2spO1xuICAgICAgICAgICAgY29uc3QgZXJyb3IgPSBuZXcgTGlzdGVuZXJMZWFrRXJyb3IobWVzc2FnZSwgdG9wU3RhY2spO1xuICAgICAgICAgICAgdGhpcy5fZXJyb3JIYW5kbGVyKGVycm9yKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gKCkgPT4ge1xuICAgICAgICAgICAgY29uc3QgY291bnQgPSAodGhpcy5fc3RhY2tzLmdldChzdGFjay52YWx1ZSkgfHwgMCk7XG4gICAgICAgICAgICB0aGlzLl9zdGFja3Muc2V0KHN0YWNrLnZhbHVlLCBjb3VudCAtIDEpO1xuICAgICAgICB9O1xuICAgIH1cbiAgICBnZXRNb3N0RnJlcXVlbnRTdGFjaygpIHtcbiAgICAgICAgaWYgKCF0aGlzLl9zdGFja3MpIHtcbiAgICAgICAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgICAgIH1cbiAgICAgICAgbGV0IHRvcFN0YWNrO1xuICAgICAgICBsZXQgdG9wQ291bnQgPSAwO1xuICAgICAgICBmb3IgKGNvbnN0IFtzdGFjaywgY291bnRdIG9mIHRoaXMuX3N0YWNrcykge1xuICAgICAgICAgICAgaWYgKCF0b3BTdGFjayB8fCB0b3BDb3VudCA8IGNvdW50KSB7XG4gICAgICAgICAgICAgICAgdG9wU3RhY2sgPSBbc3RhY2ssIGNvdW50XTtcbiAgICAgICAgICAgICAgICB0b3BDb3VudCA9IGNvdW50O1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0b3BTdGFjaztcbiAgICB9XG59XG5jbGFzcyBTdGFja3RyYWNlIHtcbiAgICBzdGF0aWMgY3JlYXRlKCkge1xuICAgICAgICB2YXIgX2E7XG4gICAgICAgIGNvbnN0IGVyciA9IG5ldyBFcnJvcigpO1xuICAgICAgICByZXR1cm4gbmV3IFN0YWNrdHJhY2UoKF9hID0gZXJyLnN0YWNrKSAhPT0gbnVsbCAmJiBfYSAhPT0gdm9pZCAwID8gX2EgOiAnJyk7XG4gICAgfVxuICAgIGNvbnN0cnVjdG9yKHZhbHVlKSB7XG4gICAgICAgIHRoaXMudmFsdWUgPSB2YWx1ZTtcbiAgICB9XG4gICAgcHJpbnQoKSB7XG4gICAgICAgIGNvbnNvbGUud2Fybih0aGlzLnZhbHVlLnNwbGl0KCdcXG4nKS5zbGljZSgyKS5qb2luKCdcXG4nKSk7XG4gICAgfVxufVxuLy8gZXJyb3IgdGhhdCBpcyBsb2dnZWQgd2hlbiBnb2luZyBvdmVyIHRoZSBjb25maWd1cmVkIGxpc3RlbmVyIHRocmVzaG9sZFxuZXhwb3J0IGNsYXNzIExpc3RlbmVyTGVha0Vycm9yIGV4dGVuZHMgRXJyb3Ige1xuICAgIGNvbnN0cnVjdG9yKG1lc3NhZ2UsIHN0YWNrKSB7XG4gICAgICAgIHN1cGVyKG1lc3NhZ2UpO1xuICAgICAgICB0aGlzLm5hbWUgPSAnTGlzdGVuZXJMZWFrRXJyb3InO1xuICAgICAgICB0aGlzLnN0YWNrID0gc3RhY2s7XG4gICAgfVxufVxuLy8gU0VWRVJFIGVycm9yIHRoYXQgaXMgbG9nZ2VkIHdoZW4gaGF2aW5nIGdvbmUgd2F5IG92ZXIgdGhlIGNvbmZpZ3VyZWQgbGlzdGVuZXJcbi8vIHRocmVzaG9sZCBzbyB0aGF0IHRoZSBlbWl0dGVyIHJlZnVzZXMgdG8gYWNjZXB0IG1vcmUgbGlzdGVuZXJzXG5leHBvcnQgY2xhc3MgTGlzdGVuZXJSZWZ1c2FsRXJyb3IgZXh0ZW5kcyBFcnJvciB7XG4gICAgY29uc3RydWN0b3IobWVzc2FnZSwgc3RhY2spIHtcbiAgICAgICAgc3VwZXIobWVzc2FnZSk7XG4gICAgICAgIHRoaXMubmFtZSA9ICdMaXN0ZW5lclJlZnVzYWxFcnJvcic7XG4gICAgICAgIHRoaXMuc3RhY2sgPSBzdGFjaztcbiAgICB9XG59XG5jbGFzcyBVbmlxdWVDb250YWluZXIge1xuICAgIGNvbnN0cnVjdG9yKHZhbHVlKSB7XG4gICAgICAgIHRoaXMudmFsdWUgPSB2YWx1ZTtcbiAgICB9XG59XG5jb25zdCBjb21wYWN0aW9uVGhyZXNob2xkID0gMjtcbmNvbnN0IGZvckVhY2hMaXN0ZW5lciA9IChsaXN0ZW5lcnMsIGZuKSA9PiB7XG4gICAgaWYgKGxpc3RlbmVycyBpbnN0YW5jZW9mIFVuaXF1ZUNvbnRhaW5lcikge1xuICAgICAgICBmbihsaXN0ZW5lcnMpO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBsaXN0ZW5lcnMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIGNvbnN0IGwgPSBsaXN0ZW5lcnNbaV07XG4gICAgICAgICAgICBpZiAobCkge1xuICAgICAgICAgICAgICAgIGZuKGwpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxufTtcbmNvbnN0IF9saXN0ZW5lckZpbmFsaXplcnMgPSBfZW5hYmxlTGlzdGVuZXJHQ2VkV2FybmluZ1xuICAgID8gbmV3IEZpbmFsaXphdGlvblJlZ2lzdHJ5KGhlbGRWYWx1ZSA9PiB7XG4gICAgICAgIGlmICh0eXBlb2YgaGVsZFZhbHVlID09PSAnc3RyaW5nJykge1xuICAgICAgICAgICAgY29uc29sZS53YXJuKCdbTEVBS0lORyBMSVNURU5FUl0gR0NcXCdlZCBhIGxpc3RlbmVyIHRoYXQgd2FzIE5PVCB5ZXQgZGlzcG9zZWQuIFRoaXMgaXMgd2hlcmUgaXMgd2FzIGNyZWF0ZWQ6Jyk7XG4gICAgICAgICAgICBjb25zb2xlLndhcm4oaGVsZFZhbHVlKTtcbiAgICAgICAgfVxuICAgIH0pXG4gICAgOiB1bmRlZmluZWQ7XG4vKipcbiAqIFRoZSBFbWl0dGVyIGNhbiBiZSB1c2VkIHRvIGV4cG9zZSBhbiBFdmVudCB0byB0aGUgcHVibGljXG4gKiB0byBmaXJlIGl0IGZyb20gdGhlIGluc2lkZXMuXG4gKiBTYW1wbGU6XG4gICAgY2xhc3MgRG9jdW1lbnQge1xuXG4gICAgICAgIHByaXZhdGUgcmVhZG9ubHkgX29uRGlkQ2hhbmdlID0gbmV3IEVtaXR0ZXI8KHZhbHVlOnN0cmluZyk9PmFueT4oKTtcblxuICAgICAgICBwdWJsaWMgb25EaWRDaGFuZ2UgPSB0aGlzLl9vbkRpZENoYW5nZS5ldmVudDtcblxuICAgICAgICAvLyBnZXR0ZXItc3R5bGVcbiAgICAgICAgLy8gZ2V0IG9uRGlkQ2hhbmdlKCk6IEV2ZW50PCh2YWx1ZTpzdHJpbmcpPT5hbnk+IHtcbiAgICAgICAgLy8gXHRyZXR1cm4gdGhpcy5fb25EaWRDaGFuZ2UuZXZlbnQ7XG4gICAgICAgIC8vIH1cblxuICAgICAgICBwcml2YXRlIF9kb0l0KCkge1xuICAgICAgICAgICAgLy8uLi5cbiAgICAgICAgICAgIHRoaXMuX29uRGlkQ2hhbmdlLmZpcmUodmFsdWUpO1xuICAgICAgICB9XG4gICAgfVxuICovXG5leHBvcnQgY2xhc3MgRW1pdHRlciB7XG4gICAgY29uc3RydWN0b3Iob3B0aW9ucykge1xuICAgICAgICB2YXIgX2EsIF9iLCBfYywgX2QsIF9lLCBfZjtcbiAgICAgICAgdGhpcy5fc2l6ZSA9IDA7XG4gICAgICAgIHRoaXMuX29wdGlvbnMgPSBvcHRpb25zO1xuICAgICAgICB0aGlzLl9sZWFrYWdlTW9uID0gKF9nbG9iYWxMZWFrV2FybmluZ1RocmVzaG9sZCA+IDAgfHwgKChfYSA9IHRoaXMuX29wdGlvbnMpID09PSBudWxsIHx8IF9hID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYS5sZWFrV2FybmluZ1RocmVzaG9sZCkpXG4gICAgICAgICAgICA/IG5ldyBMZWFrYWdlTW9uaXRvcigoX2IgPSBvcHRpb25zID09PSBudWxsIHx8IG9wdGlvbnMgPT09IHZvaWQgMCA/IHZvaWQgMCA6IG9wdGlvbnMub25MaXN0ZW5lckVycm9yKSAhPT0gbnVsbCAmJiBfYiAhPT0gdm9pZCAwID8gX2IgOiBvblVuZXhwZWN0ZWRFcnJvciwgKF9kID0gKF9jID0gdGhpcy5fb3B0aW9ucykgPT09IG51bGwgfHwgX2MgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9jLmxlYWtXYXJuaW5nVGhyZXNob2xkKSAhPT0gbnVsbCAmJiBfZCAhPT0gdm9pZCAwID8gX2QgOiBfZ2xvYmFsTGVha1dhcm5pbmdUaHJlc2hvbGQpIDpcbiAgICAgICAgICAgIHVuZGVmaW5lZDtcbiAgICAgICAgdGhpcy5fcGVyZk1vbiA9ICgoX2UgPSB0aGlzLl9vcHRpb25zKSA9PT0gbnVsbCB8fCBfZSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2UuX3Byb2ZOYW1lKSA/IG5ldyBFdmVudFByb2ZpbGluZyh0aGlzLl9vcHRpb25zLl9wcm9mTmFtZSkgOiB1bmRlZmluZWQ7XG4gICAgICAgIHRoaXMuX2RlbGl2ZXJ5UXVldWUgPSAoX2YgPSB0aGlzLl9vcHRpb25zKSA9PT0gbnVsbCB8fCBfZiA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2YuZGVsaXZlcnlRdWV1ZTtcbiAgICB9XG4gICAgZGlzcG9zZSgpIHtcbiAgICAgICAgdmFyIF9hLCBfYiwgX2MsIF9kO1xuICAgICAgICBpZiAoIXRoaXMuX2Rpc3Bvc2VkKSB7XG4gICAgICAgICAgICB0aGlzLl9kaXNwb3NlZCA9IHRydWU7XG4gICAgICAgICAgICAvLyBJdCBpcyBiYWQgdG8gaGF2ZSBsaXN0ZW5lcnMgYXQgdGhlIHRpbWUgb2YgZGlzcG9zaW5nIGFuIGVtaXR0ZXIsIGl0IGlzIHdvcnN0IHRvIGhhdmUgbGlzdGVuZXJzIGtlZXAgdGhlIGVtaXR0ZXJcbiAgICAgICAgICAgIC8vIGFsaXZlIHZpYSB0aGUgcmVmZXJlbmNlIHRoYXQncyBlbWJlZGRlZCBpbiB0aGVpciBkaXNwb3NhYmxlcy4gVGhlcmVmb3JlIHdlIGxvb3Agb3ZlciBhbGwgcmVtYWluaW5nIGxpc3RlbmVycyBhbmRcbiAgICAgICAgICAgIC8vIHVuc2V0IHRoZWlyIHN1YnNjcmlwdGlvbnMvZGlzcG9zYWJsZXMuIExvb3BpbmcgYW5kIGJsYW1pbmcgcmVtYWluaW5nIGxpc3RlbmVycyBpcyBkb25lIG9uIG5leHQgdGljayBiZWNhdXNlIHRoZVxuICAgICAgICAgICAgLy8gdGhlIGZvbGxvd2luZyBwcm9ncmFtbWluZyBwYXR0ZXJuIGlzIHZlcnkgcG9wdWxhcjpcbiAgICAgICAgICAgIC8vXG4gICAgICAgICAgICAvLyBjb25zdCBzb21lTW9kZWwgPSB0aGlzLl9kaXNwb3NhYmxlcy5hZGQobmV3IE1vZGVsT2JqZWN0KCkpOyAvLyAoMSkgY3JlYXRlIGFuZCByZWdpc3RlciBtb2RlbFxuICAgICAgICAgICAgLy8gdGhpcy5fZGlzcG9zYWJsZXMuYWRkKHNvbWVNb2RlbC5vbkRpZENoYW5nZSgoKSA9PiB7IC4uLiB9KTsgLy8gKDIpIHN1YnNjcmliZSBhbmQgcmVnaXN0ZXIgbW9kZWwtZXZlbnQgbGlzdGVuZXJcbiAgICAgICAgICAgIC8vIC4uLmxhdGVyLi4uXG4gICAgICAgICAgICAvLyB0aGlzLl9kaXNwb3NhYmxlcy5kaXNwb3NlKCk7IGRpc3Bvc2VzICgxKSB0aGVuICgyKTogZG9uJ3Qgd2FybiBhZnRlciAoMSkgYnV0IGFmdGVyIHRoZSBcIm92ZXJhbGwgZGlzcG9zZVwiIGlzIGRvbmVcbiAgICAgICAgICAgIGlmICgoKF9hID0gdGhpcy5fZGVsaXZlcnlRdWV1ZSkgPT09IG51bGwgfHwgX2EgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9hLmN1cnJlbnQpID09PSB0aGlzKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5fZGVsaXZlcnlRdWV1ZS5yZXNldCgpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKHRoaXMuX2xpc3RlbmVycykge1xuICAgICAgICAgICAgICAgIGlmIChfZW5hYmxlRGlzcG9zZVdpdGhMaXN0ZW5lcldhcm5pbmcpIHtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgbGlzdGVuZXJzID0gdGhpcy5fbGlzdGVuZXJzO1xuICAgICAgICAgICAgICAgICAgICBxdWV1ZU1pY3JvdGFzaygoKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBmb3JFYWNoTGlzdGVuZXIobGlzdGVuZXJzLCBsID0+IHsgdmFyIF9hOyByZXR1cm4gKF9hID0gbC5zdGFjaykgPT09IG51bGwgfHwgX2EgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9hLnByaW50KCk7IH0pO1xuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgdGhpcy5fbGlzdGVuZXJzID0gdW5kZWZpbmVkO1xuICAgICAgICAgICAgICAgIHRoaXMuX3NpemUgPSAwO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgKF9jID0gKF9iID0gdGhpcy5fb3B0aW9ucykgPT09IG51bGwgfHwgX2IgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9iLm9uRGlkUmVtb3ZlTGFzdExpc3RlbmVyKSA9PT0gbnVsbCB8fCBfYyA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2MuY2FsbChfYik7XG4gICAgICAgICAgICAoX2QgPSB0aGlzLl9sZWFrYWdlTW9uKSA9PT0gbnVsbCB8fCBfZCA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2QuZGlzcG9zZSgpO1xuICAgICAgICB9XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEZvciB0aGUgcHVibGljIHRvIGFsbG93IHRvIHN1YnNjcmliZVxuICAgICAqIHRvIGV2ZW50cyBmcm9tIHRoaXMgRW1pdHRlclxuICAgICAqL1xuICAgIGdldCBldmVudCgpIHtcbiAgICAgICAgdmFyIF9hO1xuICAgICAgICAoX2EgPSB0aGlzLl9ldmVudCkgIT09IG51bGwgJiYgX2EgIT09IHZvaWQgMCA/IF9hIDogKHRoaXMuX2V2ZW50ID0gKGNhbGxiYWNrLCB0aGlzQXJncywgZGlzcG9zYWJsZXMpID0+IHtcbiAgICAgICAgICAgIHZhciBfYSwgX2IsIF9jLCBfZCwgX2UsIF9mLCBfZztcbiAgICAgICAgICAgIGlmICh0aGlzLl9sZWFrYWdlTW9uICYmIHRoaXMuX3NpemUgPiB0aGlzLl9sZWFrYWdlTW9uLnRocmVzaG9sZCAqKiAyKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgbWVzc2FnZSA9IGBbJHt0aGlzLl9sZWFrYWdlTW9uLm5hbWV9XSBSRUZVU0VTIHRvIGFjY2VwdCBuZXcgbGlzdGVuZXJzIGJlY2F1c2UgaXQgZXhjZWVkZWQgaXRzIHRocmVzaG9sZCBieSBmYXIgKCR7dGhpcy5fc2l6ZX0gdnMgJHt0aGlzLl9sZWFrYWdlTW9uLnRocmVzaG9sZH0pYDtcbiAgICAgICAgICAgICAgICBjb25zb2xlLndhcm4obWVzc2FnZSk7XG4gICAgICAgICAgICAgICAgY29uc3QgdHVwbGUgPSAoX2EgPSB0aGlzLl9sZWFrYWdlTW9uLmdldE1vc3RGcmVxdWVudFN0YWNrKCkpICE9PSBudWxsICYmIF9hICE9PSB2b2lkIDAgPyBfYSA6IFsnVU5LTk9XTiBzdGFjaycsIC0xXTtcbiAgICAgICAgICAgICAgICBjb25zdCBlcnJvciA9IG5ldyBMaXN0ZW5lclJlZnVzYWxFcnJvcihgJHttZXNzYWdlfS4gSElOVDogU3RhY2sgc2hvd3MgbW9zdCBmcmVxdWVudCBsaXN0ZW5lciAoJHt0dXBsZVsxXX0tdGltZXMpYCwgdHVwbGVbMF0pO1xuICAgICAgICAgICAgICAgIGNvbnN0IGVycm9ySGFuZGxlciA9ICgoX2IgPSB0aGlzLl9vcHRpb25zKSA9PT0gbnVsbCB8fCBfYiA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2Iub25MaXN0ZW5lckVycm9yKSB8fCBvblVuZXhwZWN0ZWRFcnJvcjtcbiAgICAgICAgICAgICAgICBlcnJvckhhbmRsZXIoZXJyb3IpO1xuICAgICAgICAgICAgICAgIHJldHVybiBEaXNwb3NhYmxlLk5vbmU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAodGhpcy5fZGlzcG9zZWQpIHtcbiAgICAgICAgICAgICAgICAvLyB0b2RvOiBzaG91bGQgd2Ugd2FybiBpZiBhIGxpc3RlbmVyIGlzIGFkZGVkIHRvIGEgZGlzcG9zZWQgZW1pdHRlcj8gVGhpcyBoYXBwZW5zIG9mdGVuXG4gICAgICAgICAgICAgICAgcmV0dXJuIERpc3Bvc2FibGUuTm9uZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICh0aGlzQXJncykge1xuICAgICAgICAgICAgICAgIGNhbGxiYWNrID0gY2FsbGJhY2suYmluZCh0aGlzQXJncyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjb25zdCBjb250YWluZWQgPSBuZXcgVW5pcXVlQ29udGFpbmVyKGNhbGxiYWNrKTtcbiAgICAgICAgICAgIGxldCByZW1vdmVNb25pdG9yO1xuICAgICAgICAgICAgbGV0IHN0YWNrO1xuICAgICAgICAgICAgaWYgKHRoaXMuX2xlYWthZ2VNb24gJiYgdGhpcy5fc2l6ZSA+PSBNYXRoLmNlaWwodGhpcy5fbGVha2FnZU1vbi50aHJlc2hvbGQgKiAwLjIpKSB7XG4gICAgICAgICAgICAgICAgLy8gY2hlY2sgYW5kIHJlY29yZCB0aGlzIGVtaXR0ZXIgZm9yIHBvdGVudGlhbCBsZWFrYWdlXG4gICAgICAgICAgICAgICAgY29udGFpbmVkLnN0YWNrID0gU3RhY2t0cmFjZS5jcmVhdGUoKTtcbiAgICAgICAgICAgICAgICByZW1vdmVNb25pdG9yID0gdGhpcy5fbGVha2FnZU1vbi5jaGVjayhjb250YWluZWQuc3RhY2ssIHRoaXMuX3NpemUgKyAxKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChfZW5hYmxlRGlzcG9zZVdpdGhMaXN0ZW5lcldhcm5pbmcpIHtcbiAgICAgICAgICAgICAgICBjb250YWluZWQuc3RhY2sgPSBzdGFjayAhPT0gbnVsbCAmJiBzdGFjayAhPT0gdm9pZCAwID8gc3RhY2sgOiBTdGFja3RyYWNlLmNyZWF0ZSgpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKCF0aGlzLl9saXN0ZW5lcnMpIHtcbiAgICAgICAgICAgICAgICAoX2QgPSAoX2MgPSB0aGlzLl9vcHRpb25zKSA9PT0gbnVsbCB8fCBfYyA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2Mub25XaWxsQWRkRmlyc3RMaXN0ZW5lcikgPT09IG51bGwgfHwgX2QgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9kLmNhbGwoX2MsIHRoaXMpO1xuICAgICAgICAgICAgICAgIHRoaXMuX2xpc3RlbmVycyA9IGNvbnRhaW5lZDtcbiAgICAgICAgICAgICAgICAoX2YgPSAoX2UgPSB0aGlzLl9vcHRpb25zKSA9PT0gbnVsbCB8fCBfZSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2Uub25EaWRBZGRGaXJzdExpc3RlbmVyKSA9PT0gbnVsbCB8fCBfZiA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2YuY2FsbChfZSwgdGhpcyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmICh0aGlzLl9saXN0ZW5lcnMgaW5zdGFuY2VvZiBVbmlxdWVDb250YWluZXIpIHtcbiAgICAgICAgICAgICAgICAoX2cgPSB0aGlzLl9kZWxpdmVyeVF1ZXVlKSAhPT0gbnVsbCAmJiBfZyAhPT0gdm9pZCAwID8gX2cgOiAodGhpcy5fZGVsaXZlcnlRdWV1ZSA9IG5ldyBFdmVudERlbGl2ZXJ5UXVldWVQcml2YXRlKCkpO1xuICAgICAgICAgICAgICAgIHRoaXMuX2xpc3RlbmVycyA9IFt0aGlzLl9saXN0ZW5lcnMsIGNvbnRhaW5lZF07XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICB0aGlzLl9saXN0ZW5lcnMucHVzaChjb250YWluZWQpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGhpcy5fc2l6ZSsrO1xuICAgICAgICAgICAgY29uc3QgcmVzdWx0ID0gdG9EaXNwb3NhYmxlKCgpID0+IHtcbiAgICAgICAgICAgICAgICBfbGlzdGVuZXJGaW5hbGl6ZXJzID09PSBudWxsIHx8IF9saXN0ZW5lckZpbmFsaXplcnMgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9saXN0ZW5lckZpbmFsaXplcnMudW5yZWdpc3RlcihyZXN1bHQpO1xuICAgICAgICAgICAgICAgIHJlbW92ZU1vbml0b3IgPT09IG51bGwgfHwgcmVtb3ZlTW9uaXRvciA9PT0gdm9pZCAwID8gdm9pZCAwIDogcmVtb3ZlTW9uaXRvcigpO1xuICAgICAgICAgICAgICAgIHRoaXMuX3JlbW92ZUxpc3RlbmVyKGNvbnRhaW5lZCk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIGlmIChkaXNwb3NhYmxlcyBpbnN0YW5jZW9mIERpc3Bvc2FibGVTdG9yZSkge1xuICAgICAgICAgICAgICAgIGRpc3Bvc2FibGVzLmFkZChyZXN1bHQpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAoQXJyYXkuaXNBcnJheShkaXNwb3NhYmxlcykpIHtcbiAgICAgICAgICAgICAgICBkaXNwb3NhYmxlcy5wdXNoKHJlc3VsdCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoX2xpc3RlbmVyRmluYWxpemVycykge1xuICAgICAgICAgICAgICAgIGNvbnN0IHN0YWNrID0gbmV3IEVycm9yKCkuc3RhY2suc3BsaXQoJ1xcbicpLnNsaWNlKDIpLmpvaW4oJ1xcbicpLnRyaW0oKTtcbiAgICAgICAgICAgICAgICBfbGlzdGVuZXJGaW5hbGl6ZXJzLnJlZ2lzdGVyKHJlc3VsdCwgc3RhY2ssIHJlc3VsdCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgICAgICB9KTtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2V2ZW50O1xuICAgIH1cbiAgICBfcmVtb3ZlTGlzdGVuZXIobGlzdGVuZXIpIHtcbiAgICAgICAgdmFyIF9hLCBfYiwgX2MsIF9kO1xuICAgICAgICAoX2IgPSAoX2EgPSB0aGlzLl9vcHRpb25zKSA9PT0gbnVsbCB8fCBfYSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2Eub25XaWxsUmVtb3ZlTGlzdGVuZXIpID09PSBudWxsIHx8IF9iID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYi5jYWxsKF9hLCB0aGlzKTtcbiAgICAgICAgaWYgKCF0aGlzLl9saXN0ZW5lcnMpIHtcbiAgICAgICAgICAgIHJldHVybjsgLy8gZXhwZWN0ZWQgaWYgYSBsaXN0ZW5lciBnZXRzIGRpc3Bvc2VkXG4gICAgICAgIH1cbiAgICAgICAgaWYgKHRoaXMuX3NpemUgPT09IDEpIHtcbiAgICAgICAgICAgIHRoaXMuX2xpc3RlbmVycyA9IHVuZGVmaW5lZDtcbiAgICAgICAgICAgIChfZCA9IChfYyA9IHRoaXMuX29wdGlvbnMpID09PSBudWxsIHx8IF9jID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYy5vbkRpZFJlbW92ZUxhc3RMaXN0ZW5lcikgPT09IG51bGwgfHwgX2QgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9kLmNhbGwoX2MsIHRoaXMpO1xuICAgICAgICAgICAgdGhpcy5fc2l6ZSA9IDA7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgLy8gc2l6ZSA+IDEgd2hpY2ggcmVxdWlyZXMgdGhhdCBsaXN0ZW5lcnMgYmUgYSBsaXN0OlxuICAgICAgICBjb25zdCBsaXN0ZW5lcnMgPSB0aGlzLl9saXN0ZW5lcnM7XG4gICAgICAgIGNvbnN0IGluZGV4ID0gbGlzdGVuZXJzLmluZGV4T2YobGlzdGVuZXIpO1xuICAgICAgICBpZiAoaW5kZXggPT09IC0xKSB7XG4gICAgICAgICAgICBjb25zb2xlLmxvZygnZGlzcG9zZWQ/JywgdGhpcy5fZGlzcG9zZWQpO1xuICAgICAgICAgICAgY29uc29sZS5sb2coJ3NpemU/JywgdGhpcy5fc2l6ZSk7XG4gICAgICAgICAgICBjb25zb2xlLmxvZygnYXJyPycsIEpTT04uc3RyaW5naWZ5KHRoaXMuX2xpc3RlbmVycykpO1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdBdHRlbXB0ZWQgdG8gZGlzcG9zZSB1bmtub3duIGxpc3RlbmVyJyk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5fc2l6ZS0tO1xuICAgICAgICBsaXN0ZW5lcnNbaW5kZXhdID0gdW5kZWZpbmVkO1xuICAgICAgICBjb25zdCBhZGp1c3REZWxpdmVyeVF1ZXVlID0gdGhpcy5fZGVsaXZlcnlRdWV1ZS5jdXJyZW50ID09PSB0aGlzO1xuICAgICAgICBpZiAodGhpcy5fc2l6ZSAqIGNvbXBhY3Rpb25UaHJlc2hvbGQgPD0gbGlzdGVuZXJzLmxlbmd0aCkge1xuICAgICAgICAgICAgbGV0IG4gPSAwO1xuICAgICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBsaXN0ZW5lcnMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgICAgICBpZiAobGlzdGVuZXJzW2ldKSB7XG4gICAgICAgICAgICAgICAgICAgIGxpc3RlbmVyc1tuKytdID0gbGlzdGVuZXJzW2ldO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIGlmIChhZGp1c3REZWxpdmVyeVF1ZXVlKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX2RlbGl2ZXJ5UXVldWUuZW5kLS07XG4gICAgICAgICAgICAgICAgICAgIGlmIChuIDwgdGhpcy5fZGVsaXZlcnlRdWV1ZS5pKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl9kZWxpdmVyeVF1ZXVlLmktLTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGxpc3RlbmVycy5sZW5ndGggPSBuO1xuICAgICAgICB9XG4gICAgfVxuICAgIF9kZWxpdmVyKGxpc3RlbmVyLCB2YWx1ZSkge1xuICAgICAgICB2YXIgX2E7XG4gICAgICAgIGlmICghbGlzdGVuZXIpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBlcnJvckhhbmRsZXIgPSAoKF9hID0gdGhpcy5fb3B0aW9ucykgPT09IG51bGwgfHwgX2EgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9hLm9uTGlzdGVuZXJFcnJvcikgfHwgb25VbmV4cGVjdGVkRXJyb3I7XG4gICAgICAgIGlmICghZXJyb3JIYW5kbGVyKSB7XG4gICAgICAgICAgICBsaXN0ZW5lci52YWx1ZSh2YWx1ZSk7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIGxpc3RlbmVyLnZhbHVlKHZhbHVlKTtcbiAgICAgICAgfVxuICAgICAgICBjYXRjaCAoZSkge1xuICAgICAgICAgICAgZXJyb3JIYW5kbGVyKGUpO1xuICAgICAgICB9XG4gICAgfVxuICAgIC8qKiBEZWxpdmVycyBpdGVtcyBpbiB0aGUgcXVldWUuIEFzc3VtZXMgdGhlIHF1ZXVlIGlzIHJlYWR5IHRvIGdvLiAqL1xuICAgIF9kZWxpdmVyUXVldWUoZHEpIHtcbiAgICAgICAgY29uc3QgbGlzdGVuZXJzID0gZHEuY3VycmVudC5fbGlzdGVuZXJzO1xuICAgICAgICB3aGlsZSAoZHEuaSA8IGRxLmVuZCkge1xuICAgICAgICAgICAgLy8gaW1wb3J0YW50OiBkcS5pIGlzIGluY3JlbWVudGVkIGJlZm9yZSBjYWxsaW5nIGRlbGl2ZXIoKSBiZWNhdXNlIGl0IG1pZ2h0IHJlZW50ZXIgZGVsaXZlclF1ZXVlKClcbiAgICAgICAgICAgIHRoaXMuX2RlbGl2ZXIobGlzdGVuZXJzW2RxLmkrK10sIGRxLnZhbHVlKTtcbiAgICAgICAgfVxuICAgICAgICBkcS5yZXNldCgpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBUbyBiZSBrZXB0IHByaXZhdGUgdG8gZmlyZSBhbiBldmVudCB0b1xuICAgICAqIHN1YnNjcmliZXJzXG4gICAgICovXG4gICAgZmlyZShldmVudCkge1xuICAgICAgICB2YXIgX2EsIF9iLCBfYywgX2Q7XG4gICAgICAgIGlmICgoX2EgPSB0aGlzLl9kZWxpdmVyeVF1ZXVlKSA9PT0gbnVsbCB8fCBfYSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2EuY3VycmVudCkge1xuICAgICAgICAgICAgdGhpcy5fZGVsaXZlclF1ZXVlKHRoaXMuX2RlbGl2ZXJ5UXVldWUpO1xuICAgICAgICAgICAgKF9iID0gdGhpcy5fcGVyZk1vbikgPT09IG51bGwgfHwgX2IgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9iLnN0b3AoKTsgLy8gbGFzdCBmaXJlKCkgd2lsbCBoYXZlIHN0YXJ0aW5nIHBlcmZtb24sIHN0b3AgaXQgYmVmb3JlIHN0YXJ0aW5nIHRoZSBuZXh0IGRpc3BhdGNoXG4gICAgICAgIH1cbiAgICAgICAgKF9jID0gdGhpcy5fcGVyZk1vbikgPT09IG51bGwgfHwgX2MgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9jLnN0YXJ0KHRoaXMuX3NpemUpO1xuICAgICAgICBpZiAoIXRoaXMuX2xpc3RlbmVycykge1xuICAgICAgICAgICAgLy8gbm8tb3BcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmICh0aGlzLl9saXN0ZW5lcnMgaW5zdGFuY2VvZiBVbmlxdWVDb250YWluZXIpIHtcbiAgICAgICAgICAgIHRoaXMuX2RlbGl2ZXIodGhpcy5fbGlzdGVuZXJzLCBldmVudCk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBjb25zdCBkcSA9IHRoaXMuX2RlbGl2ZXJ5UXVldWU7XG4gICAgICAgICAgICBkcS5lbnF1ZXVlKHRoaXMsIGV2ZW50LCB0aGlzLl9saXN0ZW5lcnMubGVuZ3RoKTtcbiAgICAgICAgICAgIHRoaXMuX2RlbGl2ZXJRdWV1ZShkcSk7XG4gICAgICAgIH1cbiAgICAgICAgKF9kID0gdGhpcy5fcGVyZk1vbikgPT09IG51bGwgfHwgX2QgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9kLnN0b3AoKTtcbiAgICB9XG4gICAgaGFzTGlzdGVuZXJzKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fc2l6ZSA+IDA7XG4gICAgfVxufVxuZXhwb3J0IGNvbnN0IGNyZWF0ZUV2ZW50RGVsaXZlcnlRdWV1ZSA9ICgpID0+IG5ldyBFdmVudERlbGl2ZXJ5UXVldWVQcml2YXRlKCk7XG5jbGFzcyBFdmVudERlbGl2ZXJ5UXVldWVQcml2YXRlIHtcbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIEluZGV4IGluIGN1cnJlbnQncyBsaXN0ZW5lciBsaXN0LlxuICAgICAgICAgKi9cbiAgICAgICAgdGhpcy5pID0gLTE7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBUaGUgbGFzdCBpbmRleCBpbiB0aGUgbGlzdGVuZXIncyBsaXN0IHRvIGRlbGl2ZXIuXG4gICAgICAgICAqL1xuICAgICAgICB0aGlzLmVuZCA9IDA7XG4gICAgfVxuICAgIGVucXVldWUoZW1pdHRlciwgdmFsdWUsIGVuZCkge1xuICAgICAgICB0aGlzLmkgPSAwO1xuICAgICAgICB0aGlzLmVuZCA9IGVuZDtcbiAgICAgICAgdGhpcy5jdXJyZW50ID0gZW1pdHRlcjtcbiAgICAgICAgdGhpcy52YWx1ZSA9IHZhbHVlO1xuICAgIH1cbiAgICByZXNldCgpIHtcbiAgICAgICAgdGhpcy5pID0gdGhpcy5lbmQ7IC8vIGZvcmNlIGFueSBjdXJyZW50IGVtaXNzaW9uIGxvb3AgdG8gc3RvcCwgbWFpbmx5IGZvciBkdXJpbmcgZGlzcG9zZVxuICAgICAgICB0aGlzLmN1cnJlbnQgPSB1bmRlZmluZWQ7XG4gICAgICAgIHRoaXMudmFsdWUgPSB1bmRlZmluZWQ7XG4gICAgfVxufVxuZXhwb3J0IGNsYXNzIFBhdXNlYWJsZUVtaXR0ZXIgZXh0ZW5kcyBFbWl0dGVyIHtcbiAgICBjb25zdHJ1Y3RvcihvcHRpb25zKSB7XG4gICAgICAgIHN1cGVyKG9wdGlvbnMpO1xuICAgICAgICB0aGlzLl9pc1BhdXNlZCA9IDA7XG4gICAgICAgIHRoaXMuX2V2ZW50UXVldWUgPSBuZXcgTGlua2VkTGlzdCgpO1xuICAgICAgICB0aGlzLl9tZXJnZUZuID0gb3B0aW9ucyA9PT0gbnVsbCB8fCBvcHRpb25zID09PSB2b2lkIDAgPyB2b2lkIDAgOiBvcHRpb25zLm1lcmdlO1xuICAgIH1cbiAgICBwYXVzZSgpIHtcbiAgICAgICAgdGhpcy5faXNQYXVzZWQrKztcbiAgICB9XG4gICAgcmVzdW1lKCkge1xuICAgICAgICBpZiAodGhpcy5faXNQYXVzZWQgIT09IDAgJiYgLS10aGlzLl9pc1BhdXNlZCA9PT0gMCkge1xuICAgICAgICAgICAgaWYgKHRoaXMuX21lcmdlRm4pIHtcbiAgICAgICAgICAgICAgICAvLyB1c2UgdGhlIG1lcmdlIGZ1bmN0aW9uIHRvIGNyZWF0ZSBhIHNpbmdsZSBjb21wb3NpdGVcbiAgICAgICAgICAgICAgICAvLyBldmVudC4gbWFrZSBhIGNvcHkgaW4gY2FzZSBmaXJpbmcgcGF1c2VzIHRoaXMgZW1pdHRlclxuICAgICAgICAgICAgICAgIGlmICh0aGlzLl9ldmVudFF1ZXVlLnNpemUgPiAwKSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGV2ZW50cyA9IEFycmF5LmZyb20odGhpcy5fZXZlbnRRdWV1ZSk7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX2V2ZW50UXVldWUuY2xlYXIoKTtcbiAgICAgICAgICAgICAgICAgICAgc3VwZXIuZmlyZSh0aGlzLl9tZXJnZUZuKGV2ZW50cykpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIC8vIG5vIG1lcmdpbmcsIGZpcmUgZWFjaCBldmVudCBpbmRpdmlkdWFsbHkgYW5kIHRlc3RcbiAgICAgICAgICAgICAgICAvLyB0aGF0IHRoaXMgZW1pdHRlciBpc24ndCBwYXVzZWQgaGFsZndheSB0aHJvdWdoXG4gICAgICAgICAgICAgICAgd2hpbGUgKCF0aGlzLl9pc1BhdXNlZCAmJiB0aGlzLl9ldmVudFF1ZXVlLnNpemUgIT09IDApIHtcbiAgICAgICAgICAgICAgICAgICAgc3VwZXIuZmlyZSh0aGlzLl9ldmVudFF1ZXVlLnNoaWZ0KCkpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbiAgICBmaXJlKGV2ZW50KSB7XG4gICAgICAgIGlmICh0aGlzLl9zaXplKSB7XG4gICAgICAgICAgICBpZiAodGhpcy5faXNQYXVzZWQgIT09IDApIHtcbiAgICAgICAgICAgICAgICB0aGlzLl9ldmVudFF1ZXVlLnB1c2goZXZlbnQpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgc3VwZXIuZmlyZShldmVudCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG59XG5leHBvcnQgY2xhc3MgRGVib3VuY2VFbWl0dGVyIGV4dGVuZHMgUGF1c2VhYmxlRW1pdHRlciB7XG4gICAgY29uc3RydWN0b3Iob3B0aW9ucykge1xuICAgICAgICB2YXIgX2E7XG4gICAgICAgIHN1cGVyKG9wdGlvbnMpO1xuICAgICAgICB0aGlzLl9kZWxheSA9IChfYSA9IG9wdGlvbnMuZGVsYXkpICE9PSBudWxsICYmIF9hICE9PSB2b2lkIDAgPyBfYSA6IDEwMDtcbiAgICB9XG4gICAgZmlyZShldmVudCkge1xuICAgICAgICBpZiAoIXRoaXMuX2hhbmRsZSkge1xuICAgICAgICAgICAgdGhpcy5wYXVzZSgpO1xuICAgICAgICAgICAgdGhpcy5faGFuZGxlID0gc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICAgICAgICAgICAgdGhpcy5faGFuZGxlID0gdW5kZWZpbmVkO1xuICAgICAgICAgICAgICAgIHRoaXMucmVzdW1lKCk7XG4gICAgICAgICAgICB9LCB0aGlzLl9kZWxheSk7XG4gICAgICAgIH1cbiAgICAgICAgc3VwZXIuZmlyZShldmVudCk7XG4gICAgfVxufVxuLyoqXG4gKiBBbiBlbWl0dGVyIHdoaWNoIHF1ZXVlIGFsbCBldmVudHMgYW5kIHRoZW4gcHJvY2VzcyB0aGVtIGF0IHRoZVxuICogZW5kIG9mIHRoZSBldmVudCBsb29wLlxuICovXG5leHBvcnQgY2xhc3MgTWljcm90YXNrRW1pdHRlciBleHRlbmRzIEVtaXR0ZXIge1xuICAgIGNvbnN0cnVjdG9yKG9wdGlvbnMpIHtcbiAgICAgICAgc3VwZXIob3B0aW9ucyk7XG4gICAgICAgIHRoaXMuX3F1ZXVlZEV2ZW50cyA9IFtdO1xuICAgICAgICB0aGlzLl9tZXJnZUZuID0gb3B0aW9ucyA9PT0gbnVsbCB8fCBvcHRpb25zID09PSB2b2lkIDAgPyB2b2lkIDAgOiBvcHRpb25zLm1lcmdlO1xuICAgIH1cbiAgICBmaXJlKGV2ZW50KSB7XG4gICAgICAgIGlmICghdGhpcy5oYXNMaXN0ZW5lcnMoKSkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuX3F1ZXVlZEV2ZW50cy5wdXNoKGV2ZW50KTtcbiAgICAgICAgaWYgKHRoaXMuX3F1ZXVlZEV2ZW50cy5sZW5ndGggPT09IDEpIHtcbiAgICAgICAgICAgIHF1ZXVlTWljcm90YXNrKCgpID0+IHtcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5fbWVyZ2VGbikge1xuICAgICAgICAgICAgICAgICAgICBzdXBlci5maXJlKHRoaXMuX21lcmdlRm4odGhpcy5fcXVldWVkRXZlbnRzKSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLl9xdWV1ZWRFdmVudHMuZm9yRWFjaChlID0+IHN1cGVyLmZpcmUoZSkpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB0aGlzLl9xdWV1ZWRFdmVudHMgPSBbXTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgfVxufVxuLyoqXG4gKiBBbiBldmVudCBlbWl0dGVyIHRoYXQgbXVsdGlwbGV4ZXMgbWFueSBldmVudHMgaW50byBhIHNpbmdsZSBldmVudC5cbiAqXG4gKiBAZXhhbXBsZSBMaXN0ZW4gdG8gdGhlIGBvbkRhdGFgIGV2ZW50IG9mIGFsbCBgVGhpbmdgcywgZHluYW1pY2FsbHkgYWRkaW5nIGFuZCByZW1vdmluZyBgVGhpbmdgc1xuICogdG8gdGhlIG11bHRpcGxleGVyIGFzIG5lZWRlZC5cbiAqXG4gKiBgYGB0eXBlc2NyaXB0XG4gKiBjb25zdCBhbnl0aGluZ0RhdGFNdWx0aXBsZXhlciA9IG5ldyBFdmVudE11bHRpcGxleGVyPHsgZGF0YTogc3RyaW5nIH0+KCk7XG4gKlxuICogY29uc3QgdGhpbmdMaXN0ZW5lcnMgPSBEaXNwb3NhYmxlTWFwPFRoaW5nLCBJRGlzcG9zYWJsZT4oKTtcbiAqXG4gKiB0aGluZ1NlcnZpY2Uub25EaWRBZGRUaGluZyh0aGluZyA9PiB7XG4gKiAgIHRoaW5nTGlzdGVuZXJzLnNldCh0aGluZywgYW55dGhpbmdEYXRhTXVsdGlwbGV4ZXIuYWRkKHRoaW5nLm9uRGF0YSk7XG4gKiB9KTtcbiAqIHRoaW5nU2VydmljZS5vbkRpZFJlbW92ZVRoaW5nKHRoaW5nID0+IHtcbiAqICAgdGhpbmdMaXN0ZW5lcnMuZGVsZXRlQW5kRGlzcG9zZSh0aGluZyk7XG4gKiB9KTtcbiAqXG4gKiBhbnl0aGluZ0RhdGFNdWx0aXBsZXhlci5ldmVudChlID0+IHtcbiAqICAgY29uc29sZS5sb2coJ1NvbWV0aGluZyBmaXJlZCBkYXRhICcgKyBlLmRhdGEpXG4gKiB9KTtcbiAqIGBgYFxuICovXG5leHBvcnQgY2xhc3MgRXZlbnRNdWx0aXBsZXhlciB7XG4gICAgY29uc3RydWN0b3IoKSB7XG4gICAgICAgIHRoaXMuaGFzTGlzdGVuZXJzID0gZmFsc2U7XG4gICAgICAgIHRoaXMuZXZlbnRzID0gW107XG4gICAgICAgIHRoaXMuZW1pdHRlciA9IG5ldyBFbWl0dGVyKHtcbiAgICAgICAgICAgIG9uV2lsbEFkZEZpcnN0TGlzdGVuZXI6ICgpID0+IHRoaXMub25GaXJzdExpc3RlbmVyQWRkKCksXG4gICAgICAgICAgICBvbkRpZFJlbW92ZUxhc3RMaXN0ZW5lcjogKCkgPT4gdGhpcy5vbkxhc3RMaXN0ZW5lclJlbW92ZSgpXG4gICAgICAgIH0pO1xuICAgIH1cbiAgICBnZXQgZXZlbnQoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmVtaXR0ZXIuZXZlbnQ7XG4gICAgfVxuICAgIGFkZChldmVudCkge1xuICAgICAgICBjb25zdCBlID0geyBldmVudDogZXZlbnQsIGxpc3RlbmVyOiBudWxsIH07XG4gICAgICAgIHRoaXMuZXZlbnRzLnB1c2goZSk7XG4gICAgICAgIGlmICh0aGlzLmhhc0xpc3RlbmVycykge1xuICAgICAgICAgICAgdGhpcy5ob29rKGUpO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IGRpc3Bvc2UgPSAoKSA9PiB7XG4gICAgICAgICAgICBpZiAodGhpcy5oYXNMaXN0ZW5lcnMpIHtcbiAgICAgICAgICAgICAgICB0aGlzLnVuaG9vayhlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNvbnN0IGlkeCA9IHRoaXMuZXZlbnRzLmluZGV4T2YoZSk7XG4gICAgICAgICAgICB0aGlzLmV2ZW50cy5zcGxpY2UoaWR4LCAxKTtcbiAgICAgICAgfTtcbiAgICAgICAgcmV0dXJuIHRvRGlzcG9zYWJsZShjcmVhdGVTaW5nbGVDYWxsRnVuY3Rpb24oZGlzcG9zZSkpO1xuICAgIH1cbiAgICBvbkZpcnN0TGlzdGVuZXJBZGQoKSB7XG4gICAgICAgIHRoaXMuaGFzTGlzdGVuZXJzID0gdHJ1ZTtcbiAgICAgICAgdGhpcy5ldmVudHMuZm9yRWFjaChlID0+IHRoaXMuaG9vayhlKSk7XG4gICAgfVxuICAgIG9uTGFzdExpc3RlbmVyUmVtb3ZlKCkge1xuICAgICAgICB0aGlzLmhhc0xpc3RlbmVycyA9IGZhbHNlO1xuICAgICAgICB0aGlzLmV2ZW50cy5mb3JFYWNoKGUgPT4gdGhpcy51bmhvb2soZSkpO1xuICAgIH1cbiAgICBob29rKGUpIHtcbiAgICAgICAgZS5saXN0ZW5lciA9IGUuZXZlbnQociA9PiB0aGlzLmVtaXR0ZXIuZmlyZShyKSk7XG4gICAgfVxuICAgIHVuaG9vayhlKSB7XG4gICAgICAgIHZhciBfYTtcbiAgICAgICAgKF9hID0gZS5saXN0ZW5lcikgPT09IG51bGwgfHwgX2EgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9hLmRpc3Bvc2UoKTtcbiAgICAgICAgZS5saXN0ZW5lciA9IG51bGw7XG4gICAgfVxuICAgIGRpc3Bvc2UoKSB7XG4gICAgICAgIHZhciBfYTtcbiAgICAgICAgdGhpcy5lbWl0dGVyLmRpc3Bvc2UoKTtcbiAgICAgICAgZm9yIChjb25zdCBlIG9mIHRoaXMuZXZlbnRzKSB7XG4gICAgICAgICAgICAoX2EgPSBlLmxpc3RlbmVyKSA9PT0gbnVsbCB8fCBfYSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2EuZGlzcG9zZSgpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuZXZlbnRzID0gW107XG4gICAgfVxufVxuLyoqXG4gKiBUaGUgRXZlbnRCdWZmZXJlciBpcyB1c2VmdWwgaW4gc2l0dWF0aW9ucyBpbiB3aGljaCB5b3Ugd2FudFxuICogdG8gZGVsYXkgZmlyaW5nIHlvdXIgZXZlbnRzIGR1cmluZyBzb21lIGNvZGUuXG4gKiBZb3UgY2FuIHdyYXAgdGhhdCBjb2RlIGFuZCBiZSBzdXJlIHRoYXQgdGhlIGV2ZW50IHdpbGwgbm90XG4gKiBiZSBmaXJlZCBkdXJpbmcgdGhhdCB3cmFwLlxuICpcbiAqIGBgYFxuICogY29uc3QgZW1pdHRlcjogRW1pdHRlcjtcbiAqIGNvbnN0IGRlbGF5ZXIgPSBuZXcgRXZlbnREZWxheWVyKCk7XG4gKiBjb25zdCBkZWxheWVkRXZlbnQgPSBkZWxheWVyLndyYXBFdmVudChlbWl0dGVyLmV2ZW50KTtcbiAqXG4gKiBkZWxheWVkRXZlbnQoY29uc29sZS5sb2cpO1xuICpcbiAqIGRlbGF5ZXIuYnVmZmVyRXZlbnRzKCgpID0+IHtcbiAqICAgZW1pdHRlci5maXJlKCk7IC8vIGV2ZW50IHdpbGwgbm90IGJlIGZpcmVkIHlldFxuICogfSk7XG4gKlxuICogLy8gZXZlbnQgd2lsbCBvbmx5IGJlIGZpcmVkIGF0IHRoaXMgcG9pbnRcbiAqIGBgYFxuICovXG5leHBvcnQgY2xhc3MgRXZlbnRCdWZmZXJlciB7XG4gICAgY29uc3RydWN0b3IoKSB7XG4gICAgICAgIHRoaXMuZGF0YSA9IFtdO1xuICAgIH1cbiAgICB3cmFwRXZlbnQoZXZlbnQsIHJlZHVjZSwgaW5pdGlhbCkge1xuICAgICAgICByZXR1cm4gKGxpc3RlbmVyLCB0aGlzQXJncywgZGlzcG9zYWJsZXMpID0+IHtcbiAgICAgICAgICAgIHJldHVybiBldmVudChpID0+IHtcbiAgICAgICAgICAgICAgICB2YXIgX2E7XG4gICAgICAgICAgICAgICAgY29uc3QgZGF0YSA9IHRoaXMuZGF0YVt0aGlzLmRhdGEubGVuZ3RoIC0gMV07XG4gICAgICAgICAgICAgICAgLy8gTm9uLXJlZHVjZSBzY2VuYXJpb1xuICAgICAgICAgICAgICAgIGlmICghcmVkdWNlKSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIEJ1ZmZlcmluZyBjYXNlXG4gICAgICAgICAgICAgICAgICAgIGlmIChkYXRhKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBkYXRhLmJ1ZmZlcnMucHVzaCgoKSA9PiBsaXN0ZW5lci5jYWxsKHRoaXNBcmdzLCBpKSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBOb3QgYnVmZmVyaW5nIGNhc2VcbiAgICAgICAgICAgICAgICAgICAgICAgIGxpc3RlbmVyLmNhbGwodGhpc0FyZ3MsIGkpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgLy8gUmVkdWNlIHNjZW5hcmlvXG4gICAgICAgICAgICAgICAgY29uc3QgcmVkdWNlRGF0YSA9IGRhdGE7XG4gICAgICAgICAgICAgICAgLy8gTm90IGJ1ZmZlcmluZyBjYXNlXG4gICAgICAgICAgICAgICAgaWYgKCFyZWR1Y2VEYXRhKSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIFRPRE86IElzIHRoZXJlIGEgd2F5IHRvIGNhY2hlIHRoaXMgcmVkdWNlIGNhbGwgZm9yIGFsbCBsaXN0ZW5lcnM/XG4gICAgICAgICAgICAgICAgICAgIGxpc3RlbmVyLmNhbGwodGhpc0FyZ3MsIHJlZHVjZShpbml0aWFsLCBpKSk7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgLy8gQnVmZmVyaW5nIGNhc2VcbiAgICAgICAgICAgICAgICAoX2EgPSByZWR1Y2VEYXRhLml0ZW1zKSAhPT0gbnVsbCAmJiBfYSAhPT0gdm9pZCAwID8gX2EgOiAocmVkdWNlRGF0YS5pdGVtcyA9IFtdKTtcbiAgICAgICAgICAgICAgICByZWR1Y2VEYXRhLml0ZW1zLnB1c2goaSk7XG4gICAgICAgICAgICAgICAgaWYgKHJlZHVjZURhdGEuYnVmZmVycy5sZW5ndGggPT09IDApIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gSW5jbHVkZSBhIHNpbmdsZSBidWZmZXJlZCBmdW5jdGlvbiB0aGF0IHdpbGwgcmVkdWNlIGFsbCBldmVudHMgd2hlbiB3ZSdyZSBkb25lIGJ1ZmZlcmluZyBldmVudHNcbiAgICAgICAgICAgICAgICAgICAgZGF0YS5idWZmZXJzLnB1c2goKCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIF9hO1xuICAgICAgICAgICAgICAgICAgICAgICAgLy8gY2FjaGUgdGhlIHJlZHVjZWQgcmVzdWx0IHNvIHRoYXQgdGhlIHZhbHVlIGNhbiBiZSBzaGFyZWQgYWNyb3NzIGFsbCBsaXN0ZW5lcnNcbiAgICAgICAgICAgICAgICAgICAgICAgIChfYSA9IHJlZHVjZURhdGEucmVkdWNlZFJlc3VsdCkgIT09IG51bGwgJiYgX2EgIT09IHZvaWQgMCA/IF9hIDogKHJlZHVjZURhdGEucmVkdWNlZFJlc3VsdCA9IGluaXRpYWxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA/IHJlZHVjZURhdGEuaXRlbXMucmVkdWNlKHJlZHVjZSwgaW5pdGlhbClcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA6IHJlZHVjZURhdGEuaXRlbXMucmVkdWNlKHJlZHVjZSkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgbGlzdGVuZXIuY2FsbCh0aGlzQXJncywgcmVkdWNlRGF0YS5yZWR1Y2VkUmVzdWx0KTtcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSwgdW5kZWZpbmVkLCBkaXNwb3NhYmxlcyk7XG4gICAgICAgIH07XG4gICAgfVxuICAgIGJ1ZmZlckV2ZW50cyhmbikge1xuICAgICAgICBjb25zdCBkYXRhID0geyBidWZmZXJzOiBuZXcgQXJyYXkoKSB9O1xuICAgICAgICB0aGlzLmRhdGEucHVzaChkYXRhKTtcbiAgICAgICAgY29uc3QgciA9IGZuKCk7XG4gICAgICAgIHRoaXMuZGF0YS5wb3AoKTtcbiAgICAgICAgZGF0YS5idWZmZXJzLmZvckVhY2goZmx1c2ggPT4gZmx1c2goKSk7XG4gICAgICAgIHJldHVybiByO1xuICAgIH1cbn1cbi8qKlxuICogQSBSZWxheSBpcyBhbiBldmVudCBmb3J3YXJkZXIgd2hpY2ggZnVuY3Rpb25zIGFzIGEgcmVwbHVnYWJibGUgZXZlbnQgcGlwZS5cbiAqIE9uY2UgY3JlYXRlZCwgeW91IGNhbiBjb25uZWN0IGFuIGlucHV0IGV2ZW50IHRvIGl0IGFuZCBpdCB3aWxsIHNpbXBseSBmb3J3YXJkXG4gKiBldmVudHMgZnJvbSB0aGF0IGlucHV0IGV2ZW50IHRocm91Z2ggaXRzIG93biBgZXZlbnRgIHByb3BlcnR5LiBUaGUgYGlucHV0YFxuICogY2FuIGJlIGNoYW5nZWQgYXQgYW55IHBvaW50IGluIHRpbWUuXG4gKi9cbmV4cG9ydCBjbGFzcyBSZWxheSB7XG4gICAgY29uc3RydWN0b3IoKSB7XG4gICAgICAgIHRoaXMubGlzdGVuaW5nID0gZmFsc2U7XG4gICAgICAgIHRoaXMuaW5wdXRFdmVudCA9IEV2ZW50Lk5vbmU7XG4gICAgICAgIHRoaXMuaW5wdXRFdmVudExpc3RlbmVyID0gRGlzcG9zYWJsZS5Ob25lO1xuICAgICAgICB0aGlzLmVtaXR0ZXIgPSBuZXcgRW1pdHRlcih7XG4gICAgICAgICAgICBvbkRpZEFkZEZpcnN0TGlzdGVuZXI6ICgpID0+IHtcbiAgICAgICAgICAgICAgICB0aGlzLmxpc3RlbmluZyA9IHRydWU7XG4gICAgICAgICAgICAgICAgdGhpcy5pbnB1dEV2ZW50TGlzdGVuZXIgPSB0aGlzLmlucHV0RXZlbnQodGhpcy5lbWl0dGVyLmZpcmUsIHRoaXMuZW1pdHRlcik7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgb25EaWRSZW1vdmVMYXN0TGlzdGVuZXI6ICgpID0+IHtcbiAgICAgICAgICAgICAgICB0aGlzLmxpc3RlbmluZyA9IGZhbHNlO1xuICAgICAgICAgICAgICAgIHRoaXMuaW5wdXRFdmVudExpc3RlbmVyLmRpc3Bvc2UoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICAgIHRoaXMuZXZlbnQgPSB0aGlzLmVtaXR0ZXIuZXZlbnQ7XG4gICAgfVxuICAgIHNldCBpbnB1dChldmVudCkge1xuICAgICAgICB0aGlzLmlucHV0RXZlbnQgPSBldmVudDtcbiAgICAgICAgaWYgKHRoaXMubGlzdGVuaW5nKSB7XG4gICAgICAgICAgICB0aGlzLmlucHV0RXZlbnRMaXN0ZW5lci5kaXNwb3NlKCk7XG4gICAgICAgICAgICB0aGlzLmlucHV0RXZlbnRMaXN0ZW5lciA9IGV2ZW50KHRoaXMuZW1pdHRlci5maXJlLCB0aGlzLmVtaXR0ZXIpO1xuICAgICAgICB9XG4gICAgfVxuICAgIGRpc3Bvc2UoKSB7XG4gICAgICAgIHRoaXMuaW5wdXRFdmVudExpc3RlbmVyLmRpc3Bvc2UoKTtcbiAgICAgICAgdGhpcy5lbWl0dGVyLmRpc3Bvc2UoKTtcbiAgICB9XG59XG4iLCAiLyotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAqICBDb3B5cmlnaHQgKGMpIE1pY3Jvc29mdCBDb3Jwb3JhdGlvbi4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqICBMaWNlbnNlZCB1bmRlciB0aGUgTUlUIExpY2Vuc2UuIFNlZSBMaWNlbnNlLnR4dCBpbiB0aGUgcHJvamVjdCByb290IGZvciBsaWNlbnNlIGluZm9ybWF0aW9uLlxuICotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSovXG4vKipcbiAqIEByZXR1cm5zIHdoZXRoZXIgdGhlIHByb3ZpZGVkIHBhcmFtZXRlciBpcyBhIEphdmFTY3JpcHQgU3RyaW5nIG9yIG5vdC5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGlzU3RyaW5nKHN0cikge1xuICAgIHJldHVybiAodHlwZW9mIHN0ciA9PT0gJ3N0cmluZycpO1xufVxuLyoqXG4gKiBAcmV0dXJucyB3aGV0aGVyIHRoZSBwcm92aWRlZCBwYXJhbWV0ZXIgaXMgb2YgdHlwZSBgb2JqZWN0YCBidXQgKipub3QqKlxuICpcdGBudWxsYCwgYW4gYGFycmF5YCwgYSBgcmVnZXhwYCwgbm9yIGEgYGRhdGVgLlxuICovXG5leHBvcnQgZnVuY3Rpb24gaXNPYmplY3Qob2JqKSB7XG4gICAgLy8gVGhlIG1ldGhvZCBjYW4ndCBkbyBhIHR5cGUgY2FzdCBzaW5jZSB0aGVyZSBhcmUgdHlwZSAobGlrZSBzdHJpbmdzKSB3aGljaFxuICAgIC8vIGFyZSBzdWJjbGFzc2VzIG9mIGFueSBwdXQgbm90IHBvc2l0dmVseSBtYXRjaGVkIGJ5IHRoZSBmdW5jdGlvbi4gSGVuY2UgdHlwZVxuICAgIC8vIG5hcnJvd2luZyByZXN1bHRzIGluIHdyb25nIHJlc3VsdHMuXG4gICAgcmV0dXJuIHR5cGVvZiBvYmogPT09ICdvYmplY3QnXG4gICAgICAgICYmIG9iaiAhPT0gbnVsbFxuICAgICAgICAmJiAhQXJyYXkuaXNBcnJheShvYmopXG4gICAgICAgICYmICEob2JqIGluc3RhbmNlb2YgUmVnRXhwKVxuICAgICAgICAmJiAhKG9iaiBpbnN0YW5jZW9mIERhdGUpO1xufVxuLyoqXG4gKiBAcmV0dXJucyB3aGV0aGVyIHRoZSBwcm92aWRlZCBwYXJhbWV0ZXIgaXMgb2YgdHlwZSBgQnVmZmVyYCBvciBVaW50OEFycmF5IGRlcnZpdmVkIHR5cGVcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGlzVHlwZWRBcnJheShvYmopIHtcbiAgICBjb25zdCBUeXBlZEFycmF5ID0gT2JqZWN0LmdldFByb3RvdHlwZU9mKFVpbnQ4QXJyYXkpO1xuICAgIHJldHVybiB0eXBlb2Ygb2JqID09PSAnb2JqZWN0J1xuICAgICAgICAmJiBvYmogaW5zdGFuY2VvZiBUeXBlZEFycmF5O1xufVxuLyoqXG4gKiBJbiAqKmNvbnRyYXN0KiogdG8ganVzdCBjaGVja2luZyBgdHlwZW9mYCB0aGlzIHdpbGwgcmV0dXJuIGBmYWxzZWAgZm9yIGBOYU5gLlxuICogQHJldHVybnMgd2hldGhlciB0aGUgcHJvdmlkZWQgcGFyYW1ldGVyIGlzIGEgSmF2YVNjcmlwdCBOdW1iZXIgb3Igbm90LlxuICovXG5leHBvcnQgZnVuY3Rpb24gaXNOdW1iZXIob2JqKSB7XG4gICAgcmV0dXJuICh0eXBlb2Ygb2JqID09PSAnbnVtYmVyJyAmJiAhaXNOYU4ob2JqKSk7XG59XG4vKipcbiAqIEByZXR1cm5zIHdoZXRoZXIgdGhlIHByb3ZpZGVkIHBhcmFtZXRlciBpcyBhbiBJdGVyYWJsZSwgY2FzdGluZyB0byB0aGUgZ2l2ZW4gZ2VuZXJpY1xuICovXG5leHBvcnQgZnVuY3Rpb24gaXNJdGVyYWJsZShvYmopIHtcbiAgICByZXR1cm4gISFvYmogJiYgdHlwZW9mIG9ialtTeW1ib2wuaXRlcmF0b3JdID09PSAnZnVuY3Rpb24nO1xufVxuLyoqXG4gKiBAcmV0dXJucyB3aGV0aGVyIHRoZSBwcm92aWRlZCBwYXJhbWV0ZXIgaXMgYSBKYXZhU2NyaXB0IEJvb2xlYW4gb3Igbm90LlxuICovXG5leHBvcnQgZnVuY3Rpb24gaXNCb29sZWFuKG9iaikge1xuICAgIHJldHVybiAob2JqID09PSB0cnVlIHx8IG9iaiA9PT0gZmFsc2UpO1xufVxuLyoqXG4gKiBAcmV0dXJucyB3aGV0aGVyIHRoZSBwcm92aWRlZCBwYXJhbWV0ZXIgaXMgdW5kZWZpbmVkLlxuICovXG5leHBvcnQgZnVuY3Rpb24gaXNVbmRlZmluZWQob2JqKSB7XG4gICAgcmV0dXJuICh0eXBlb2Ygb2JqID09PSAndW5kZWZpbmVkJyk7XG59XG4vKipcbiAqIEByZXR1cm5zIHdoZXRoZXIgdGhlIHByb3ZpZGVkIHBhcmFtZXRlciBpcyBkZWZpbmVkLlxuICovXG5leHBvcnQgZnVuY3Rpb24gaXNEZWZpbmVkKGFyZykge1xuICAgIHJldHVybiAhaXNVbmRlZmluZWRPck51bGwoYXJnKTtcbn1cbi8qKlxuICogQHJldHVybnMgd2hldGhlciB0aGUgcHJvdmlkZWQgcGFyYW1ldGVyIGlzIHVuZGVmaW5lZCBvciBudWxsLlxuICovXG5leHBvcnQgZnVuY3Rpb24gaXNVbmRlZmluZWRPck51bGwob2JqKSB7XG4gICAgcmV0dXJuIChpc1VuZGVmaW5lZChvYmopIHx8IG9iaiA9PT0gbnVsbCk7XG59XG5leHBvcnQgZnVuY3Rpb24gYXNzZXJ0VHlwZShjb25kaXRpb24sIHR5cGUpIHtcbiAgICBpZiAoIWNvbmRpdGlvbikge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IodHlwZSA/IGBVbmV4cGVjdGVkIHR5cGUsIGV4cGVjdGVkICcke3R5cGV9J2AgOiAnVW5leHBlY3RlZCB0eXBlJyk7XG4gICAgfVxufVxuLyoqXG4gKiBBc3NlcnRzIHRoYXQgdGhlIGFyZ3VtZW50IHBhc3NlZCBpbiBpcyBuZWl0aGVyIHVuZGVmaW5lZCBub3IgbnVsbC5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGFzc2VydElzRGVmaW5lZChhcmcpIHtcbiAgICBpZiAoaXNVbmRlZmluZWRPck51bGwoYXJnKSkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ0Fzc2VydGlvbiBGYWlsZWQ6IGFyZ3VtZW50IGlzIHVuZGVmaW5lZCBvciBudWxsJyk7XG4gICAgfVxuICAgIHJldHVybiBhcmc7XG59XG4vKipcbiAqIEByZXR1cm5zIHdoZXRoZXIgdGhlIHByb3ZpZGVkIHBhcmFtZXRlciBpcyBhIEphdmFTY3JpcHQgRnVuY3Rpb24gb3Igbm90LlxuICovXG5leHBvcnQgZnVuY3Rpb24gaXNGdW5jdGlvbihvYmopIHtcbiAgICByZXR1cm4gKHR5cGVvZiBvYmogPT09ICdmdW5jdGlvbicpO1xufVxuZXhwb3J0IGZ1bmN0aW9uIHZhbGlkYXRlQ29uc3RyYWludHMoYXJncywgY29uc3RyYWludHMpIHtcbiAgICBjb25zdCBsZW4gPSBNYXRoLm1pbihhcmdzLmxlbmd0aCwgY29uc3RyYWludHMubGVuZ3RoKTtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IGxlbjsgaSsrKSB7XG4gICAgICAgIHZhbGlkYXRlQ29uc3RyYWludChhcmdzW2ldLCBjb25zdHJhaW50c1tpXSk7XG4gICAgfVxufVxuZXhwb3J0IGZ1bmN0aW9uIHZhbGlkYXRlQ29uc3RyYWludChhcmcsIGNvbnN0cmFpbnQpIHtcbiAgICBpZiAoaXNTdHJpbmcoY29uc3RyYWludCkpIHtcbiAgICAgICAgaWYgKHR5cGVvZiBhcmcgIT09IGNvbnN0cmFpbnQpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihgYXJndW1lbnQgZG9lcyBub3QgbWF0Y2ggY29uc3RyYWludDogdHlwZW9mICR7Y29uc3RyYWludH1gKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBlbHNlIGlmIChpc0Z1bmN0aW9uKGNvbnN0cmFpbnQpKSB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICBpZiAoYXJnIGluc3RhbmNlb2YgY29uc3RyYWludCkge1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBjYXRjaCAoX2EpIHtcbiAgICAgICAgICAgIC8vIGlnbm9yZVxuICAgICAgICB9XG4gICAgICAgIGlmICghaXNVbmRlZmluZWRPck51bGwoYXJnKSAmJiBhcmcuY29uc3RydWN0b3IgPT09IGNvbnN0cmFpbnQpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBpZiAoY29uc3RyYWludC5sZW5ndGggPT09IDEgJiYgY29uc3RyYWludC5jYWxsKHVuZGVmaW5lZCwgYXJnKSA9PT0gdHJ1ZSkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihgYXJndW1lbnQgZG9lcyBub3QgbWF0Y2ggb25lIG9mIHRoZXNlIGNvbnN0cmFpbnRzOiBhcmcgaW5zdGFuY2VvZiBjb25zdHJhaW50LCBhcmcuY29uc3RydWN0b3IgPT09IGNvbnN0cmFpbnQsIG5vciBjb25zdHJhaW50KGFyZykgPT09IHRydWVgKTtcbiAgICB9XG59XG4iLCAiLyotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAqICBDb3B5cmlnaHQgKGMpIE1pY3Jvc29mdCBDb3Jwb3JhdGlvbi4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqICBMaWNlbnNlZCB1bmRlciB0aGUgTUlUIExpY2Vuc2UuIFNlZSBMaWNlbnNlLnR4dCBpbiB0aGUgcHJvamVjdCByb290IGZvciBsaWNlbnNlIGluZm9ybWF0aW9uLlxuICotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSovXG5pbXBvcnQgeyBpc1R5cGVkQXJyYXksIGlzT2JqZWN0LCBpc1VuZGVmaW5lZE9yTnVsbCB9IGZyb20gJy4vdHlwZXMuanMnO1xuZXhwb3J0IGZ1bmN0aW9uIGRlZXBDbG9uZShvYmopIHtcbiAgICBpZiAoIW9iaiB8fCB0eXBlb2Ygb2JqICE9PSAnb2JqZWN0Jykge1xuICAgICAgICByZXR1cm4gb2JqO1xuICAgIH1cbiAgICBpZiAob2JqIGluc3RhbmNlb2YgUmVnRXhwKSB7XG4gICAgICAgIHJldHVybiBvYmo7XG4gICAgfVxuICAgIGNvbnN0IHJlc3VsdCA9IEFycmF5LmlzQXJyYXkob2JqKSA/IFtdIDoge307XG4gICAgT2JqZWN0LmVudHJpZXMob2JqKS5mb3JFYWNoKChba2V5LCB2YWx1ZV0pID0+IHtcbiAgICAgICAgcmVzdWx0W2tleV0gPSB2YWx1ZSAmJiB0eXBlb2YgdmFsdWUgPT09ICdvYmplY3QnID8gZGVlcENsb25lKHZhbHVlKSA6IHZhbHVlO1xuICAgIH0pO1xuICAgIHJldHVybiByZXN1bHQ7XG59XG5leHBvcnQgZnVuY3Rpb24gZGVlcEZyZWV6ZShvYmopIHtcbiAgICBpZiAoIW9iaiB8fCB0eXBlb2Ygb2JqICE9PSAnb2JqZWN0Jykge1xuICAgICAgICByZXR1cm4gb2JqO1xuICAgIH1cbiAgICBjb25zdCBzdGFjayA9IFtvYmpdO1xuICAgIHdoaWxlIChzdGFjay5sZW5ndGggPiAwKSB7XG4gICAgICAgIGNvbnN0IG9iaiA9IHN0YWNrLnNoaWZ0KCk7XG4gICAgICAgIE9iamVjdC5mcmVlemUob2JqKTtcbiAgICAgICAgZm9yIChjb25zdCBrZXkgaW4gb2JqKSB7XG4gICAgICAgICAgICBpZiAoX2hhc093blByb3BlcnR5LmNhbGwob2JqLCBrZXkpKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgcHJvcCA9IG9ialtrZXldO1xuICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgcHJvcCA9PT0gJ29iamVjdCcgJiYgIU9iamVjdC5pc0Zyb3plbihwcm9wKSAmJiAhaXNUeXBlZEFycmF5KHByb3ApKSB7XG4gICAgICAgICAgICAgICAgICAgIHN0YWNrLnB1c2gocHJvcCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiBvYmo7XG59XG5jb25zdCBfaGFzT3duUHJvcGVydHkgPSBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5O1xuZXhwb3J0IGZ1bmN0aW9uIGNsb25lQW5kQ2hhbmdlKG9iaiwgY2hhbmdlcikge1xuICAgIHJldHVybiBfY2xvbmVBbmRDaGFuZ2Uob2JqLCBjaGFuZ2VyLCBuZXcgU2V0KCkpO1xufVxuZnVuY3Rpb24gX2Nsb25lQW5kQ2hhbmdlKG9iaiwgY2hhbmdlciwgc2Vlbikge1xuICAgIGlmIChpc1VuZGVmaW5lZE9yTnVsbChvYmopKSB7XG4gICAgICAgIHJldHVybiBvYmo7XG4gICAgfVxuICAgIGNvbnN0IGNoYW5nZWQgPSBjaGFuZ2VyKG9iaik7XG4gICAgaWYgKHR5cGVvZiBjaGFuZ2VkICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgICByZXR1cm4gY2hhbmdlZDtcbiAgICB9XG4gICAgaWYgKEFycmF5LmlzQXJyYXkob2JqKSkge1xuICAgICAgICBjb25zdCByMSA9IFtdO1xuICAgICAgICBmb3IgKGNvbnN0IGUgb2Ygb2JqKSB7XG4gICAgICAgICAgICByMS5wdXNoKF9jbG9uZUFuZENoYW5nZShlLCBjaGFuZ2VyLCBzZWVuKSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHIxO1xuICAgIH1cbiAgICBpZiAoaXNPYmplY3Qob2JqKSkge1xuICAgICAgICBpZiAoc2Vlbi5oYXMob2JqKSkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdDYW5ub3QgY2xvbmUgcmVjdXJzaXZlIGRhdGEtc3RydWN0dXJlJyk7XG4gICAgICAgIH1cbiAgICAgICAgc2Vlbi5hZGQob2JqKTtcbiAgICAgICAgY29uc3QgcjIgPSB7fTtcbiAgICAgICAgZm9yIChjb25zdCBpMiBpbiBvYmopIHtcbiAgICAgICAgICAgIGlmIChfaGFzT3duUHJvcGVydHkuY2FsbChvYmosIGkyKSkge1xuICAgICAgICAgICAgICAgIHIyW2kyXSA9IF9jbG9uZUFuZENoYW5nZShvYmpbaTJdLCBjaGFuZ2VyLCBzZWVuKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBzZWVuLmRlbGV0ZShvYmopO1xuICAgICAgICByZXR1cm4gcjI7XG4gICAgfVxuICAgIHJldHVybiBvYmo7XG59XG4vKipcbiAqIENvcGllcyBhbGwgcHJvcGVydGllcyBvZiBzb3VyY2UgaW50byBkZXN0aW5hdGlvbi4gVGhlIG9wdGlvbmFsIHBhcmFtZXRlciBcIm92ZXJ3cml0ZVwiIGFsbG93cyB0byBjb250cm9sXG4gKiBpZiBleGlzdGluZyBwcm9wZXJ0aWVzIG9uIHRoZSBkZXN0aW5hdGlvbiBzaG91bGQgYmUgb3ZlcndyaXR0ZW4gb3Igbm90LiBEZWZhdWx0cyB0byB0cnVlIChvdmVyd3JpdGUpLlxuICovXG5leHBvcnQgZnVuY3Rpb24gbWl4aW4oZGVzdGluYXRpb24sIHNvdXJjZSwgb3ZlcndyaXRlID0gdHJ1ZSkge1xuICAgIGlmICghaXNPYmplY3QoZGVzdGluYXRpb24pKSB7XG4gICAgICAgIHJldHVybiBzb3VyY2U7XG4gICAgfVxuICAgIGlmIChpc09iamVjdChzb3VyY2UpKSB7XG4gICAgICAgIE9iamVjdC5rZXlzKHNvdXJjZSkuZm9yRWFjaChrZXkgPT4ge1xuICAgICAgICAgICAgaWYgKGtleSBpbiBkZXN0aW5hdGlvbikge1xuICAgICAgICAgICAgICAgIGlmIChvdmVyd3JpdGUpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGlzT2JqZWN0KGRlc3RpbmF0aW9uW2tleV0pICYmIGlzT2JqZWN0KHNvdXJjZVtrZXldKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgbWl4aW4oZGVzdGluYXRpb25ba2V5XSwgc291cmNlW2tleV0sIG92ZXJ3cml0ZSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBkZXN0aW5hdGlvbltrZXldID0gc291cmNlW2tleV07XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICBkZXN0aW5hdGlvbltrZXldID0gc291cmNlW2tleV07XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICByZXR1cm4gZGVzdGluYXRpb247XG59XG5leHBvcnQgZnVuY3Rpb24gZXF1YWxzKG9uZSwgb3RoZXIpIHtcbiAgICBpZiAob25lID09PSBvdGhlcikge1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gICAgaWYgKG9uZSA9PT0gbnVsbCB8fCBvbmUgPT09IHVuZGVmaW5lZCB8fCBvdGhlciA9PT0gbnVsbCB8fCBvdGhlciA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgaWYgKHR5cGVvZiBvbmUgIT09IHR5cGVvZiBvdGhlcikge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIGlmICh0eXBlb2Ygb25lICE9PSAnb2JqZWN0Jykge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIGlmICgoQXJyYXkuaXNBcnJheShvbmUpKSAhPT0gKEFycmF5LmlzQXJyYXkob3RoZXIpKSkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIGxldCBpO1xuICAgIGxldCBrZXk7XG4gICAgaWYgKEFycmF5LmlzQXJyYXkob25lKSkge1xuICAgICAgICBpZiAob25lLmxlbmd0aCAhPT0gb3RoZXIubGVuZ3RoKSB7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgICAgZm9yIChpID0gMDsgaSA8IG9uZS5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgaWYgKCFlcXVhbHMob25lW2ldLCBvdGhlcltpXSkpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIGNvbnN0IG9uZUtleXMgPSBbXTtcbiAgICAgICAgZm9yIChrZXkgaW4gb25lKSB7XG4gICAgICAgICAgICBvbmVLZXlzLnB1c2goa2V5KTtcbiAgICAgICAgfVxuICAgICAgICBvbmVLZXlzLnNvcnQoKTtcbiAgICAgICAgY29uc3Qgb3RoZXJLZXlzID0gW107XG4gICAgICAgIGZvciAoa2V5IGluIG90aGVyKSB7XG4gICAgICAgICAgICBvdGhlcktleXMucHVzaChrZXkpO1xuICAgICAgICB9XG4gICAgICAgIG90aGVyS2V5cy5zb3J0KCk7XG4gICAgICAgIGlmICghZXF1YWxzKG9uZUtleXMsIG90aGVyS2V5cykpIHtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgICBmb3IgKGkgPSAwOyBpIDwgb25lS2V5cy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgaWYgKCFlcXVhbHMob25lW29uZUtleXNbaV1dLCBvdGhlcltvbmVLZXlzW2ldXSkpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHRydWU7XG59XG5leHBvcnQgZnVuY3Rpb24gZ2V0QWxsUHJvcGVydHlOYW1lcyhvYmopIHtcbiAgICBsZXQgcmVzID0gW107XG4gICAgd2hpbGUgKE9iamVjdC5wcm90b3R5cGUgIT09IG9iaikge1xuICAgICAgICByZXMgPSByZXMuY29uY2F0KE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzKG9iaikpO1xuICAgICAgICBvYmogPSBPYmplY3QuZ2V0UHJvdG90eXBlT2Yob2JqKTtcbiAgICB9XG4gICAgcmV0dXJuIHJlcztcbn1cbmV4cG9ydCBmdW5jdGlvbiBnZXRBbGxNZXRob2ROYW1lcyhvYmopIHtcbiAgICBjb25zdCBtZXRob2RzID0gW107XG4gICAgZm9yIChjb25zdCBwcm9wIG9mIGdldEFsbFByb3BlcnR5TmFtZXMob2JqKSkge1xuICAgICAgICBpZiAodHlwZW9mIG9ialtwcm9wXSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgbWV0aG9kcy5wdXNoKHByb3ApO1xuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiBtZXRob2RzO1xufVxuZXhwb3J0IGZ1bmN0aW9uIGNyZWF0ZVByb3h5T2JqZWN0KG1ldGhvZE5hbWVzLCBpbnZva2UpIHtcbiAgICBjb25zdCBjcmVhdGVQcm94eU1ldGhvZCA9IChtZXRob2QpID0+IHtcbiAgICAgICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIGNvbnN0IGFyZ3MgPSBBcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChhcmd1bWVudHMsIDApO1xuICAgICAgICAgICAgcmV0dXJuIGludm9rZShtZXRob2QsIGFyZ3MpO1xuICAgICAgICB9O1xuICAgIH07XG4gICAgY29uc3QgcmVzdWx0ID0ge307XG4gICAgZm9yIChjb25zdCBtZXRob2ROYW1lIG9mIG1ldGhvZE5hbWVzKSB7XG4gICAgICAgIHJlc3VsdFttZXRob2ROYW1lXSA9IGNyZWF0ZVByb3h5TWV0aG9kKG1ldGhvZE5hbWUpO1xuICAgIH1cbiAgICByZXR1cm4gcmVzdWx0O1xufVxuIiwgIi8qLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gKiAgQ29weXJpZ2h0IChjKSBNaWNyb3NvZnQgQ29ycG9yYXRpb24uIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKiAgTGljZW5zZWQgdW5kZXIgdGhlIE1JVCBMaWNlbnNlLiBTZWUgTGljZW5zZS50eHQgaW4gdGhlIHByb2plY3Qgcm9vdCBmb3IgbGljZW5zZSBpbmZvcm1hdGlvbi5cbiAqLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qL1xubGV0IGlzUHNldWRvID0gKHR5cGVvZiBkb2N1bWVudCAhPT0gJ3VuZGVmaW5lZCcgJiYgZG9jdW1lbnQubG9jYXRpb24gJiYgZG9jdW1lbnQubG9jYXRpb24uaGFzaC5pbmRleE9mKCdwc2V1ZG89dHJ1ZScpID49IDApO1xuY29uc3QgREVGQVVMVF9UQUcgPSAnaS1kZWZhdWx0JztcbmZ1bmN0aW9uIF9mb3JtYXQobWVzc2FnZSwgYXJncykge1xuICAgIGxldCByZXN1bHQ7XG4gICAgaWYgKGFyZ3MubGVuZ3RoID09PSAwKSB7XG4gICAgICAgIHJlc3VsdCA9IG1lc3NhZ2U7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICByZXN1bHQgPSBtZXNzYWdlLnJlcGxhY2UoL1xceyhcXGQrKVxcfS9nLCAobWF0Y2gsIHJlc3QpID0+IHtcbiAgICAgICAgICAgIGNvbnN0IGluZGV4ID0gcmVzdFswXTtcbiAgICAgICAgICAgIGNvbnN0IGFyZyA9IGFyZ3NbaW5kZXhdO1xuICAgICAgICAgICAgbGV0IHJlc3VsdCA9IG1hdGNoO1xuICAgICAgICAgICAgaWYgKHR5cGVvZiBhcmcgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgICAgICAgcmVzdWx0ID0gYXJnO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAodHlwZW9mIGFyZyA9PT0gJ251bWJlcicgfHwgdHlwZW9mIGFyZyA9PT0gJ2Jvb2xlYW4nIHx8IGFyZyA9PT0gdm9pZCAwIHx8IGFyZyA9PT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIHJlc3VsdCA9IFN0cmluZyhhcmcpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIGlmIChpc1BzZXVkbykge1xuICAgICAgICAvLyBGRjNCIGFuZCBGRjNEIGlzIHRoZSBVbmljb2RlIHplbmtha3UgcmVwcmVzZW50YXRpb24gZm9yIFsgYW5kIF1cbiAgICAgICAgcmVzdWx0ID0gJ1xcdUZGM0InICsgcmVzdWx0LnJlcGxhY2UoL1thb3VlaV0vZywgJyQmJCYnKSArICdcXHVGRjNEJztcbiAgICB9XG4gICAgcmV0dXJuIHJlc3VsdDtcbn1cbmZ1bmN0aW9uIGZpbmRMYW5ndWFnZUZvck1vZHVsZShjb25maWcsIG5hbWUpIHtcbiAgICBsZXQgcmVzdWx0ID0gY29uZmlnW25hbWVdO1xuICAgIGlmIChyZXN1bHQpIHtcbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG4gICAgcmVzdWx0ID0gY29uZmlnWycqJ107XG4gICAgaWYgKHJlc3VsdCkge1xuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cbiAgICByZXR1cm4gbnVsbDtcbn1cbmZ1bmN0aW9uIGVuZFdpdGhTbGFzaChwYXRoKSB7XG4gICAgaWYgKHBhdGguY2hhckF0KHBhdGgubGVuZ3RoIC0gMSkgPT09ICcvJykge1xuICAgICAgICByZXR1cm4gcGF0aDtcbiAgICB9XG4gICAgcmV0dXJuIHBhdGggKyAnLyc7XG59XG5hc3luYyBmdW5jdGlvbiBnZXRNZXNzYWdlc0Zyb21UcmFuc2xhdGlvbnNTZXJ2aWNlKHRyYW5zbGF0aW9uU2VydmljZVVybCwgbGFuZ3VhZ2UsIG5hbWUpIHtcbiAgICBjb25zdCB1cmwgPSBlbmRXaXRoU2xhc2godHJhbnNsYXRpb25TZXJ2aWNlVXJsKSArIGVuZFdpdGhTbGFzaChsYW5ndWFnZSkgKyAndnNjb2RlLycgKyBlbmRXaXRoU2xhc2gobmFtZSk7XG4gICAgY29uc3QgcmVzID0gYXdhaXQgZmV0Y2godXJsKTtcbiAgICBpZiAocmVzLm9rKSB7XG4gICAgICAgIGNvbnN0IG1lc3NhZ2VzID0gYXdhaXQgcmVzLmpzb24oKTtcbiAgICAgICAgcmV0dXJuIG1lc3NhZ2VzO1xuICAgIH1cbiAgICB0aHJvdyBuZXcgRXJyb3IoYCR7cmVzLnN0YXR1c30gLSAke3Jlcy5zdGF0dXNUZXh0fWApO1xufVxuZnVuY3Rpb24gY3JlYXRlU2NvcGVkTG9jYWxpemUoc2NvcGUpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24gKGlkeCwgZGVmYXVsdFZhbHVlKSB7XG4gICAgICAgIGNvbnN0IHJlc3RBcmdzID0gQXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoYXJndW1lbnRzLCAyKTtcbiAgICAgICAgcmV0dXJuIF9mb3JtYXQoc2NvcGVbaWR4XSwgcmVzdEFyZ3MpO1xuICAgIH07XG59XG5mdW5jdGlvbiBjcmVhdGVTY29wZWRMb2NhbGl6ZTIoc2NvcGUpIHtcbiAgICByZXR1cm4gKGlkeCwgZGVmYXVsdFZhbHVlLCAuLi5hcmdzKSA9PiAoe1xuICAgICAgICB2YWx1ZTogX2Zvcm1hdChzY29wZVtpZHhdLCBhcmdzKSxcbiAgICAgICAgb3JpZ2luYWw6IF9mb3JtYXQoZGVmYXVsdFZhbHVlLCBhcmdzKVxuICAgIH0pO1xufVxuLyoqXG4gKiBAc2tpcE1hbmdsZVxuICovXG5leHBvcnQgZnVuY3Rpb24gbG9jYWxpemUoZGF0YSwgbWVzc2FnZSwgLi4uYXJncykge1xuICAgIHJldHVybiBfZm9ybWF0KG1lc3NhZ2UsIGFyZ3MpO1xufVxuLyoqXG4gKiBAc2tpcE1hbmdsZVxuICovXG5leHBvcnQgZnVuY3Rpb24gbG9jYWxpemUyKGRhdGEsIG1lc3NhZ2UsIC4uLmFyZ3MpIHtcbiAgICBjb25zdCBvcmlnaW5hbCA9IF9mb3JtYXQobWVzc2FnZSwgYXJncyk7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgdmFsdWU6IG9yaWdpbmFsLFxuICAgICAgICBvcmlnaW5hbFxuICAgIH07XG59XG4vKipcbiAqIEBza2lwTWFuZ2xlXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBnZXRDb25maWd1cmVkRGVmYXVsdExvY2FsZShfKSB7XG4gICAgLy8gVGhpcyByZXR1cm5zIHVuZGVmaW5lZCBiZWNhdXNlIHRoaXMgaW1wbGVtZW50YXRpb24gaXNuJ3QgdXNlZCBhbmQgaXMgb3ZlcndyaXR0ZW4gYnkgdGhlIGxvYWRlclxuICAgIC8vIHdoZW4gbG9hZGVkLlxuICAgIHJldHVybiB1bmRlZmluZWQ7XG59XG4vKipcbiAqIEBza2lwTWFuZ2xlXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBzZXRQc2V1ZG9UcmFuc2xhdGlvbih2YWx1ZSkge1xuICAgIGlzUHNldWRvID0gdmFsdWU7XG59XG4vKipcbiAqIEludm9rZWQgaW4gYSBidWlsdCBwcm9kdWN0IGF0IHJ1bi10aW1lXG4gKiBAc2tpcE1hbmdsZVxuICovXG5leHBvcnQgZnVuY3Rpb24gY3JlYXRlKGtleSwgZGF0YSkge1xuICAgIHZhciBfYTtcbiAgICByZXR1cm4ge1xuICAgICAgICBsb2NhbGl6ZTogY3JlYXRlU2NvcGVkTG9jYWxpemUoZGF0YVtrZXldKSxcbiAgICAgICAgbG9jYWxpemUyOiBjcmVhdGVTY29wZWRMb2NhbGl6ZTIoZGF0YVtrZXldKSxcbiAgICAgICAgZ2V0Q29uZmlndXJlZERlZmF1bHRMb2NhbGU6IChfYSA9IGRhdGEuZ2V0Q29uZmlndXJlZERlZmF1bHRMb2NhbGUpICE9PSBudWxsICYmIF9hICE9PSB2b2lkIDAgPyBfYSA6ICgoXykgPT4gdW5kZWZpbmVkKVxuICAgIH07XG59XG4vKipcbiAqIEludm9rZWQgYnkgdGhlIGxvYWRlciBhdCBydW4tdGltZVxuICogQHNraXBNYW5nbGVcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGxvYWQobmFtZSwgcmVxLCBsb2FkLCBjb25maWcpIHtcbiAgICB2YXIgX2E7XG4gICAgY29uc3QgcGx1Z2luQ29uZmlnID0gKF9hID0gY29uZmlnWyd2cy9ubHMnXSkgIT09IG51bGwgJiYgX2EgIT09IHZvaWQgMCA/IF9hIDoge307XG4gICAgaWYgKCFuYW1lIHx8IG5hbWUubGVuZ3RoID09PSAwKSB7XG4gICAgICAgIC8vIFRPRE86IFdlIG5lZWQgdG8gZ2l2ZSBiYWNrIHRoZSBtYW5nbGVkIG5hbWVzIGhlcmVcbiAgICAgICAgcmV0dXJuIGxvYWQoe1xuICAgICAgICAgICAgbG9jYWxpemU6IGxvY2FsaXplLFxuICAgICAgICAgICAgbG9jYWxpemUyOiBsb2NhbGl6ZTIsXG4gICAgICAgICAgICBnZXRDb25maWd1cmVkRGVmYXVsdExvY2FsZTogKCkgPT4geyB2YXIgX2E7IHJldHVybiAoX2EgPSBwbHVnaW5Db25maWcuYXZhaWxhYmxlTGFuZ3VhZ2VzKSA9PT0gbnVsbCB8fCBfYSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2FbJyonXTsgfVxuICAgICAgICB9KTtcbiAgICB9XG4gICAgY29uc3QgbGFuZ3VhZ2UgPSBwbHVnaW5Db25maWcuYXZhaWxhYmxlTGFuZ3VhZ2VzID8gZmluZExhbmd1YWdlRm9yTW9kdWxlKHBsdWdpbkNvbmZpZy5hdmFpbGFibGVMYW5ndWFnZXMsIG5hbWUpIDogbnVsbDtcbiAgICBjb25zdCB1c2VEZWZhdWx0TGFuZ3VhZ2UgPSBsYW5ndWFnZSA9PT0gbnVsbCB8fCBsYW5ndWFnZSA9PT0gREVGQVVMVF9UQUc7XG4gICAgbGV0IHN1ZmZpeCA9ICcubmxzJztcbiAgICBpZiAoIXVzZURlZmF1bHRMYW5ndWFnZSkge1xuICAgICAgICBzdWZmaXggPSBzdWZmaXggKyAnLicgKyBsYW5ndWFnZTtcbiAgICB9XG4gICAgY29uc3QgbWVzc2FnZXNMb2FkZWQgPSAobWVzc2FnZXMpID0+IHtcbiAgICAgICAgaWYgKEFycmF5LmlzQXJyYXkobWVzc2FnZXMpKSB7XG4gICAgICAgICAgICBtZXNzYWdlcy5sb2NhbGl6ZSA9IGNyZWF0ZVNjb3BlZExvY2FsaXplKG1lc3NhZ2VzKTtcbiAgICAgICAgICAgIG1lc3NhZ2VzLmxvY2FsaXplMiA9IGNyZWF0ZVNjb3BlZExvY2FsaXplMihtZXNzYWdlcyk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBtZXNzYWdlcy5sb2NhbGl6ZSA9IGNyZWF0ZVNjb3BlZExvY2FsaXplKG1lc3NhZ2VzW25hbWVdKTtcbiAgICAgICAgICAgIG1lc3NhZ2VzLmxvY2FsaXplMiA9IGNyZWF0ZVNjb3BlZExvY2FsaXplMihtZXNzYWdlc1tuYW1lXSk7XG4gICAgICAgIH1cbiAgICAgICAgbWVzc2FnZXMuZ2V0Q29uZmlndXJlZERlZmF1bHRMb2NhbGUgPSAoKSA9PiB7IHZhciBfYTsgcmV0dXJuIChfYSA9IHBsdWdpbkNvbmZpZy5hdmFpbGFibGVMYW5ndWFnZXMpID09PSBudWxsIHx8IF9hID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYVsnKiddOyB9O1xuICAgICAgICBsb2FkKG1lc3NhZ2VzKTtcbiAgICB9O1xuICAgIGlmICh0eXBlb2YgcGx1Z2luQ29uZmlnLmxvYWRCdW5kbGUgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgcGx1Z2luQ29uZmlnLmxvYWRCdW5kbGUobmFtZSwgbGFuZ3VhZ2UsIChlcnIsIG1lc3NhZ2VzKSA9PiB7XG4gICAgICAgICAgICAvLyBXZSBoYXZlIGFuIGVycm9yLiBMb2FkIHRoZSBFbmdsaXNoIGRlZmF1bHQgc3RyaW5ncyB0byBub3QgZmFpbFxuICAgICAgICAgICAgaWYgKGVycikge1xuICAgICAgICAgICAgICAgIHJlcShbbmFtZSArICcubmxzJ10sIG1lc3NhZ2VzTG9hZGVkKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIG1lc3NhZ2VzTG9hZGVkKG1lc3NhZ2VzKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgfVxuICAgIGVsc2UgaWYgKHBsdWdpbkNvbmZpZy50cmFuc2xhdGlvblNlcnZpY2VVcmwgJiYgIXVzZURlZmF1bHRMYW5ndWFnZSkge1xuICAgICAgICAoYXN5bmMgKCkgPT4ge1xuICAgICAgICAgICAgdmFyIF9hO1xuICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICBjb25zdCBtZXNzYWdlcyA9IGF3YWl0IGdldE1lc3NhZ2VzRnJvbVRyYW5zbGF0aW9uc1NlcnZpY2UocGx1Z2luQ29uZmlnLnRyYW5zbGF0aW9uU2VydmljZVVybCwgbGFuZ3VhZ2UsIG5hbWUpO1xuICAgICAgICAgICAgICAgIHJldHVybiBtZXNzYWdlc0xvYWRlZChtZXNzYWdlcyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjYXRjaCAoZXJyKSB7XG4gICAgICAgICAgICAgICAgLy8gTGFuZ3VhZ2UgaXMgYWxyZWFkeSBhcyBnZW5lcmljIGFzIGl0IGdldHMsIHNvIHJlcXVpcmUgZGVmYXVsdCBtZXNzYWdlc1xuICAgICAgICAgICAgICAgIGlmICghbGFuZ3VhZ2UuaW5jbHVkZXMoJy0nKSkge1xuICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmVycm9yKGVycik7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiByZXEoW25hbWUgKyAnLm5scyddLCBtZXNzYWdlc0xvYWRlZCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIFNpbmNlIHRoZXJlIGlzIGEgZGFzaCwgdGhlIGxhbmd1YWdlIGNvbmZpZ3VyZWQgaXMgYSBzcGVjaWZpYyBzdWItbGFuZ3VhZ2Ugb2YgdGhlIHNhbWUgZ2VuZXJpYyBsYW5ndWFnZS5cbiAgICAgICAgICAgICAgICAgICAgLy8gU2luY2Ugd2Ugd2VyZSB1bmFibGUgdG8gbG9hZCB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UsIHRyeSB0byBsb2FkIHRoZSBnZW5lcmljIGxhbmd1YWdlLiBFeC4gd2UgZmFpbGVkIHRvIGZpbmQgYVxuICAgICAgICAgICAgICAgICAgICAvLyBTd2lzcyBHZXJtYW4gKGRlLUNIKSwgc28gdHJ5IHRvIGxvYWQgdGhlIGdlbmVyaWMgR2VybWFuIChkZSkgbWVzc2FnZXMgaW5zdGVhZC5cbiAgICAgICAgICAgICAgICAgICAgY29uc3QgZ2VuZXJpY0xhbmd1YWdlID0gbGFuZ3VhZ2Uuc3BsaXQoJy0nKVswXTtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgbWVzc2FnZXMgPSBhd2FpdCBnZXRNZXNzYWdlc0Zyb21UcmFuc2xhdGlvbnNTZXJ2aWNlKHBsdWdpbkNvbmZpZy50cmFuc2xhdGlvblNlcnZpY2VVcmwsIGdlbmVyaWNMYW5ndWFnZSwgbmFtZSk7XG4gICAgICAgICAgICAgICAgICAgIC8vIFdlIGdvdCBzb21lIG1lc3NhZ2VzLCBzbyB3ZSBjb25maWd1cmUgdGhlIGNvbmZpZ3VyYXRpb24gdG8gdXNlIHRoZSBnZW5lcmljIGxhbmd1YWdlIGZvciB0aGlzIHNlc3Npb24uXG4gICAgICAgICAgICAgICAgICAgIChfYSA9IHBsdWdpbkNvbmZpZy5hdmFpbGFibGVMYW5ndWFnZXMpICE9PSBudWxsICYmIF9hICE9PSB2b2lkIDAgPyBfYSA6IChwbHVnaW5Db25maWcuYXZhaWxhYmxlTGFuZ3VhZ2VzID0ge30pO1xuICAgICAgICAgICAgICAgICAgICBwbHVnaW5Db25maWcuYXZhaWxhYmxlTGFuZ3VhZ2VzWycqJ10gPSBnZW5lcmljTGFuZ3VhZ2U7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBtZXNzYWdlc0xvYWRlZChtZXNzYWdlcyk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGNhdGNoIChlcnIpIHtcbiAgICAgICAgICAgICAgICAgICAgY29uc29sZS5lcnJvcihlcnIpO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gcmVxKFtuYW1lICsgJy5ubHMnXSwgbWVzc2FnZXNMb2FkZWQpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfSkoKTtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIHJlcShbbmFtZSArIHN1ZmZpeF0sIG1lc3NhZ2VzTG9hZGVkLCAoZXJyKSA9PiB7XG4gICAgICAgICAgICBpZiAoc3VmZml4ID09PSAnLm5scycpIHtcbiAgICAgICAgICAgICAgICBjb25zb2xlLmVycm9yKCdGYWlsZWQgdHJ5aW5nIHRvIGxvYWQgZGVmYXVsdCBsYW5ndWFnZSBzdHJpbmdzJywgZXJyKTtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjb25zb2xlLmVycm9yKGBGYWlsZWQgdG8gbG9hZCBtZXNzYWdlIGJ1bmRsZSBmb3IgbGFuZ3VhZ2UgJHtsYW5ndWFnZX0uIEZhbGxpbmcgYmFjayB0byB0aGUgZGVmYXVsdCBsYW5ndWFnZTpgLCBlcnIpO1xuICAgICAgICAgICAgcmVxKFtuYW1lICsgJy5ubHMnXSwgbWVzc2FnZXNMb2FkZWQpO1xuICAgICAgICB9KTtcbiAgICB9XG59XG4iLCAidmFyIF9hLCBfYjtcbi8qLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gKiAgQ29weXJpZ2h0IChjKSBNaWNyb3NvZnQgQ29ycG9yYXRpb24uIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKiAgTGljZW5zZWQgdW5kZXIgdGhlIE1JVCBMaWNlbnNlLiBTZWUgTGljZW5zZS50eHQgaW4gdGhlIHByb2plY3Qgcm9vdCBmb3IgbGljZW5zZSBpbmZvcm1hdGlvbi5cbiAqLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qL1xuaW1wb3J0ICogYXMgbmxzIGZyb20gJy4uLy4uL25scy5qcyc7XG5leHBvcnQgY29uc3QgTEFOR1VBR0VfREVGQVVMVCA9ICdlbic7XG5sZXQgX2lzV2luZG93cyA9IGZhbHNlO1xubGV0IF9pc01hY2ludG9zaCA9IGZhbHNlO1xubGV0IF9pc0xpbnV4ID0gZmFsc2U7XG5sZXQgX2lzTGludXhTbmFwID0gZmFsc2U7XG5sZXQgX2lzTmF0aXZlID0gZmFsc2U7XG5sZXQgX2lzV2ViID0gZmFsc2U7XG5sZXQgX2lzRWxlY3Ryb24gPSBmYWxzZTtcbmxldCBfaXNJT1MgPSBmYWxzZTtcbmxldCBfaXNDSSA9IGZhbHNlO1xubGV0IF9pc01vYmlsZSA9IGZhbHNlO1xubGV0IF9sb2NhbGUgPSB1bmRlZmluZWQ7XG5sZXQgX2xhbmd1YWdlID0gTEFOR1VBR0VfREVGQVVMVDtcbmxldCBfcGxhdGZvcm1Mb2NhbGUgPSBMQU5HVUFHRV9ERUZBVUxUO1xubGV0IF90cmFuc2xhdGlvbnNDb25maWdGaWxlID0gdW5kZWZpbmVkO1xubGV0IF91c2VyQWdlbnQgPSB1bmRlZmluZWQ7XG5jb25zdCAkZ2xvYmFsVGhpcyA9IGdsb2JhbFRoaXM7XG5sZXQgbm9kZVByb2Nlc3MgPSB1bmRlZmluZWQ7XG5pZiAodHlwZW9mICRnbG9iYWxUaGlzLnZzY29kZSAhPT0gJ3VuZGVmaW5lZCcgJiYgdHlwZW9mICRnbG9iYWxUaGlzLnZzY29kZS5wcm9jZXNzICE9PSAndW5kZWZpbmVkJykge1xuICAgIC8vIE5hdGl2ZSBlbnZpcm9ubWVudCAoc2FuZGJveGVkKVxuICAgIG5vZGVQcm9jZXNzID0gJGdsb2JhbFRoaXMudnNjb2RlLnByb2Nlc3M7XG59XG5lbHNlIGlmICh0eXBlb2YgcHJvY2VzcyAhPT0gJ3VuZGVmaW5lZCcgJiYgdHlwZW9mICgoX2EgPSBwcm9jZXNzID09PSBudWxsIHx8IHByb2Nlc3MgPT09IHZvaWQgMCA/IHZvaWQgMCA6IHByb2Nlc3MudmVyc2lvbnMpID09PSBudWxsIHx8IF9hID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYS5ub2RlKSA9PT0gJ3N0cmluZycpIHtcbiAgICAvLyBOYXRpdmUgZW52aXJvbm1lbnQgKG5vbi1zYW5kYm94ZWQpXG4gICAgbm9kZVByb2Nlc3MgPSBwcm9jZXNzO1xufVxuY29uc3QgaXNFbGVjdHJvblByb2Nlc3MgPSB0eXBlb2YgKChfYiA9IG5vZGVQcm9jZXNzID09PSBudWxsIHx8IG5vZGVQcm9jZXNzID09PSB2b2lkIDAgPyB2b2lkIDAgOiBub2RlUHJvY2Vzcy52ZXJzaW9ucykgPT09IG51bGwgfHwgX2IgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9iLmVsZWN0cm9uKSA9PT0gJ3N0cmluZyc7XG5jb25zdCBpc0VsZWN0cm9uUmVuZGVyZXIgPSBpc0VsZWN0cm9uUHJvY2VzcyAmJiAobm9kZVByb2Nlc3MgPT09IG51bGwgfHwgbm9kZVByb2Nlc3MgPT09IHZvaWQgMCA/IHZvaWQgMCA6IG5vZGVQcm9jZXNzLnR5cGUpID09PSAncmVuZGVyZXInO1xuLy8gTmF0aXZlIGVudmlyb25tZW50XG5pZiAodHlwZW9mIG5vZGVQcm9jZXNzID09PSAnb2JqZWN0Jykge1xuICAgIF9pc1dpbmRvd3MgPSAobm9kZVByb2Nlc3MucGxhdGZvcm0gPT09ICd3aW4zMicpO1xuICAgIF9pc01hY2ludG9zaCA9IChub2RlUHJvY2Vzcy5wbGF0Zm9ybSA9PT0gJ2RhcndpbicpO1xuICAgIF9pc0xpbnV4ID0gKG5vZGVQcm9jZXNzLnBsYXRmb3JtID09PSAnbGludXgnKTtcbiAgICBfaXNMaW51eFNuYXAgPSBfaXNMaW51eCAmJiAhIW5vZGVQcm9jZXNzLmVudlsnU05BUCddICYmICEhbm9kZVByb2Nlc3MuZW52WydTTkFQX1JFVklTSU9OJ107XG4gICAgX2lzRWxlY3Ryb24gPSBpc0VsZWN0cm9uUHJvY2VzcztcbiAgICBfaXNDSSA9ICEhbm9kZVByb2Nlc3MuZW52WydDSSddIHx8ICEhbm9kZVByb2Nlc3MuZW52WydCVUlMRF9BUlRJRkFDVFNUQUdJTkdESVJFQ1RPUlknXTtcbiAgICBfbG9jYWxlID0gTEFOR1VBR0VfREVGQVVMVDtcbiAgICBfbGFuZ3VhZ2UgPSBMQU5HVUFHRV9ERUZBVUxUO1xuICAgIGNvbnN0IHJhd05sc0NvbmZpZyA9IG5vZGVQcm9jZXNzLmVudlsnVlNDT0RFX05MU19DT05GSUcnXTtcbiAgICBpZiAocmF3TmxzQ29uZmlnKSB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICBjb25zdCBubHNDb25maWcgPSBKU09OLnBhcnNlKHJhd05sc0NvbmZpZyk7XG4gICAgICAgICAgICBjb25zdCByZXNvbHZlZCA9IG5sc0NvbmZpZy5hdmFpbGFibGVMYW5ndWFnZXNbJyonXTtcbiAgICAgICAgICAgIF9sb2NhbGUgPSBubHNDb25maWcubG9jYWxlO1xuICAgICAgICAgICAgX3BsYXRmb3JtTG9jYWxlID0gbmxzQ29uZmlnLm9zTG9jYWxlO1xuICAgICAgICAgICAgLy8gVlNDb2RlJ3MgZGVmYXVsdCBsYW5ndWFnZSBpcyAnZW4nXG4gICAgICAgICAgICBfbGFuZ3VhZ2UgPSByZXNvbHZlZCA/IHJlc29sdmVkIDogTEFOR1VBR0VfREVGQVVMVDtcbiAgICAgICAgICAgIF90cmFuc2xhdGlvbnNDb25maWdGaWxlID0gbmxzQ29uZmlnLl90cmFuc2xhdGlvbnNDb25maWdGaWxlO1xuICAgICAgICB9XG4gICAgICAgIGNhdGNoIChlKSB7XG4gICAgICAgIH1cbiAgICB9XG4gICAgX2lzTmF0aXZlID0gdHJ1ZTtcbn1cbi8vIFdlYiBlbnZpcm9ubWVudFxuZWxzZSBpZiAodHlwZW9mIG5hdmlnYXRvciA9PT0gJ29iamVjdCcgJiYgIWlzRWxlY3Ryb25SZW5kZXJlcikge1xuICAgIF91c2VyQWdlbnQgPSBuYXZpZ2F0b3IudXNlckFnZW50O1xuICAgIF9pc1dpbmRvd3MgPSBfdXNlckFnZW50LmluZGV4T2YoJ1dpbmRvd3MnKSA+PSAwO1xuICAgIF9pc01hY2ludG9zaCA9IF91c2VyQWdlbnQuaW5kZXhPZignTWFjaW50b3NoJykgPj0gMDtcbiAgICBfaXNJT1MgPSAoX3VzZXJBZ2VudC5pbmRleE9mKCdNYWNpbnRvc2gnKSA+PSAwIHx8IF91c2VyQWdlbnQuaW5kZXhPZignaVBhZCcpID49IDAgfHwgX3VzZXJBZ2VudC5pbmRleE9mKCdpUGhvbmUnKSA+PSAwKSAmJiAhIW5hdmlnYXRvci5tYXhUb3VjaFBvaW50cyAmJiBuYXZpZ2F0b3IubWF4VG91Y2hQb2ludHMgPiAwO1xuICAgIF9pc0xpbnV4ID0gX3VzZXJBZ2VudC5pbmRleE9mKCdMaW51eCcpID49IDA7XG4gICAgX2lzTW9iaWxlID0gKF91c2VyQWdlbnQgPT09IG51bGwgfHwgX3VzZXJBZ2VudCA9PT0gdm9pZCAwID8gdm9pZCAwIDogX3VzZXJBZ2VudC5pbmRleE9mKCdNb2JpJykpID49IDA7XG4gICAgX2lzV2ViID0gdHJ1ZTtcbiAgICBjb25zdCBjb25maWd1cmVkTG9jYWxlID0gbmxzLmdldENvbmZpZ3VyZWREZWZhdWx0TG9jYWxlKFxuICAgIC8vIFRoaXMgY2FsbCBfbXVzdF8gYmUgZG9uZSBpbiB0aGUgZmlsZSB0aGF0IGNhbGxzIGBubHMuZ2V0Q29uZmlndXJlZERlZmF1bHRMb2NhbGVgXG4gICAgLy8gdG8gZW5zdXJlIHRoYXQgdGhlIE5MUyBBTUQgTG9hZGVyIHBsdWdpbiBoYXMgYmVlbiBsb2FkZWQgYW5kIGNvbmZpZ3VyZWQuXG4gICAgLy8gVGhpcyBpcyBiZWNhdXNlIHRoZSBsb2FkZXIgcGx1Z2luIGRlY2lkZXMgd2hhdCB0aGUgZGVmYXVsdCBsb2NhbGUgaXMgYmFzZWQgb25cbiAgICAvLyBob3cgaXQncyBhYmxlIHRvIHJlc29sdmUgdGhlIHN0cmluZ3MuXG4gICAgbmxzLmxvY2FsaXplKHsga2V5OiAnZW5zdXJlTG9hZGVyUGx1Z2luSXNMb2FkZWQnLCBjb21tZW50OiBbJ3tMb2NrZWR9J10gfSwgJ18nKSk7XG4gICAgX2xvY2FsZSA9IGNvbmZpZ3VyZWRMb2NhbGUgfHwgTEFOR1VBR0VfREVGQVVMVDtcbiAgICBfbGFuZ3VhZ2UgPSBfbG9jYWxlO1xuICAgIF9wbGF0Zm9ybUxvY2FsZSA9IG5hdmlnYXRvci5sYW5ndWFnZTtcbn1cbi8vIFVua25vd24gZW52aXJvbm1lbnRcbmVsc2Uge1xuICAgIGNvbnNvbGUuZXJyb3IoJ1VuYWJsZSB0byByZXNvbHZlIHBsYXRmb3JtLicpO1xufVxubGV0IF9wbGF0Zm9ybSA9IDAgLyogUGxhdGZvcm0uV2ViICovO1xuaWYgKF9pc01hY2ludG9zaCkge1xuICAgIF9wbGF0Zm9ybSA9IDEgLyogUGxhdGZvcm0uTWFjICovO1xufVxuZWxzZSBpZiAoX2lzV2luZG93cykge1xuICAgIF9wbGF0Zm9ybSA9IDMgLyogUGxhdGZvcm0uV2luZG93cyAqLztcbn1cbmVsc2UgaWYgKF9pc0xpbnV4KSB7XG4gICAgX3BsYXRmb3JtID0gMiAvKiBQbGF0Zm9ybS5MaW51eCAqLztcbn1cbmV4cG9ydCBjb25zdCBpc1dpbmRvd3MgPSBfaXNXaW5kb3dzO1xuZXhwb3J0IGNvbnN0IGlzTWFjaW50b3NoID0gX2lzTWFjaW50b3NoO1xuZXhwb3J0IGNvbnN0IGlzTGludXggPSBfaXNMaW51eDtcbmV4cG9ydCBjb25zdCBpc05hdGl2ZSA9IF9pc05hdGl2ZTtcbmV4cG9ydCBjb25zdCBpc1dlYiA9IF9pc1dlYjtcbmV4cG9ydCBjb25zdCBpc1dlYldvcmtlciA9IChfaXNXZWIgJiYgdHlwZW9mICRnbG9iYWxUaGlzLmltcG9ydFNjcmlwdHMgPT09ICdmdW5jdGlvbicpO1xuZXhwb3J0IGNvbnN0IHdlYldvcmtlck9yaWdpbiA9IGlzV2ViV29ya2VyID8gJGdsb2JhbFRoaXMub3JpZ2luIDogdW5kZWZpbmVkO1xuZXhwb3J0IGNvbnN0IGlzSU9TID0gX2lzSU9TO1xuZXhwb3J0IGNvbnN0IGlzTW9iaWxlID0gX2lzTW9iaWxlO1xuZXhwb3J0IGNvbnN0IHVzZXJBZ2VudCA9IF91c2VyQWdlbnQ7XG4vKipcbiAqIFRoZSBsYW5ndWFnZSB1c2VkIGZvciB0aGUgdXNlciBpbnRlcmZhY2UuIFRoZSBmb3JtYXQgb2ZcbiAqIHRoZSBzdHJpbmcgaXMgYWxsIGxvd2VyIGNhc2UgKGUuZy4gemgtdHcgZm9yIFRyYWRpdGlvbmFsXG4gKiBDaGluZXNlKVxuICovXG5leHBvcnQgY29uc3QgbGFuZ3VhZ2UgPSBfbGFuZ3VhZ2U7XG5leHBvcnQgY29uc3Qgc2V0VGltZW91dDBJc0Zhc3RlciA9ICh0eXBlb2YgJGdsb2JhbFRoaXMucG9zdE1lc3NhZ2UgPT09ICdmdW5jdGlvbicgJiYgISRnbG9iYWxUaGlzLmltcG9ydFNjcmlwdHMpO1xuLyoqXG4gKiBTZWUgaHR0cHM6Ly9odG1sLnNwZWMud2hhdHdnLm9yZy9tdWx0aXBhZ2UvdGltZXJzLWFuZC11c2VyLXByb21wdHMuaHRtbCM6fjp0ZXh0PXRoYW4lMjA0JTJDJTIwdGhlbi0sc2V0JTIwdGltZW91dCUyMHRvJTIwNCwtLlxuICpcbiAqIFdvcmtzIHNpbWlsYXJseSB0byBgc2V0VGltZW91dCgwKWAgYnV0IGRvZXNuJ3Qgc3VmZmVyIGZyb20gdGhlIDRtcyBhcnRpZmljaWFsIGRlbGF5XG4gKiB0aGF0IGJyb3dzZXJzIHNldCB3aGVuIHRoZSBuZXN0aW5nIGxldmVsIGlzID4gNS5cbiAqL1xuZXhwb3J0IGNvbnN0IHNldFRpbWVvdXQwID0gKCgpID0+IHtcbiAgICBpZiAoc2V0VGltZW91dDBJc0Zhc3Rlcikge1xuICAgICAgICBjb25zdCBwZW5kaW5nID0gW107XG4gICAgICAgICRnbG9iYWxUaGlzLmFkZEV2ZW50TGlzdGVuZXIoJ21lc3NhZ2UnLCAoZSkgPT4ge1xuICAgICAgICAgICAgaWYgKGUuZGF0YSAmJiBlLmRhdGEudnNjb2RlU2NoZWR1bGVBc3luY1dvcmspIHtcbiAgICAgICAgICAgICAgICBmb3IgKGxldCBpID0gMCwgbGVuID0gcGVuZGluZy5sZW5ndGg7IGkgPCBsZW47IGkrKykge1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBjYW5kaWRhdGUgPSBwZW5kaW5nW2ldO1xuICAgICAgICAgICAgICAgICAgICBpZiAoY2FuZGlkYXRlLmlkID09PSBlLmRhdGEudnNjb2RlU2NoZWR1bGVBc3luY1dvcmspIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHBlbmRpbmcuc3BsaWNlKGksIDEpO1xuICAgICAgICAgICAgICAgICAgICAgICAgY2FuZGlkYXRlLmNhbGxiYWNrKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgICBsZXQgbGFzdElkID0gMDtcbiAgICAgICAgcmV0dXJuIChjYWxsYmFjaykgPT4ge1xuICAgICAgICAgICAgY29uc3QgbXlJZCA9ICsrbGFzdElkO1xuICAgICAgICAgICAgcGVuZGluZy5wdXNoKHtcbiAgICAgICAgICAgICAgICBpZDogbXlJZCxcbiAgICAgICAgICAgICAgICBjYWxsYmFjazogY2FsbGJhY2tcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgJGdsb2JhbFRoaXMucG9zdE1lc3NhZ2UoeyB2c2NvZGVTY2hlZHVsZUFzeW5jV29yazogbXlJZCB9LCAnKicpO1xuICAgICAgICB9O1xuICAgIH1cbiAgICByZXR1cm4gKGNhbGxiYWNrKSA9PiBzZXRUaW1lb3V0KGNhbGxiYWNrKTtcbn0pKCk7XG5leHBvcnQgY29uc3QgT1MgPSAoX2lzTWFjaW50b3NoIHx8IF9pc0lPUyA/IDIgLyogT3BlcmF0aW5nU3lzdGVtLk1hY2ludG9zaCAqLyA6IChfaXNXaW5kb3dzID8gMSAvKiBPcGVyYXRpbmdTeXN0ZW0uV2luZG93cyAqLyA6IDMgLyogT3BlcmF0aW5nU3lzdGVtLkxpbnV4ICovKSk7XG5sZXQgX2lzTGl0dGxlRW5kaWFuID0gdHJ1ZTtcbmxldCBfaXNMaXR0bGVFbmRpYW5Db21wdXRlZCA9IGZhbHNlO1xuZXhwb3J0IGZ1bmN0aW9uIGlzTGl0dGxlRW5kaWFuKCkge1xuICAgIGlmICghX2lzTGl0dGxlRW5kaWFuQ29tcHV0ZWQpIHtcbiAgICAgICAgX2lzTGl0dGxlRW5kaWFuQ29tcHV0ZWQgPSB0cnVlO1xuICAgICAgICBjb25zdCB0ZXN0ID0gbmV3IFVpbnQ4QXJyYXkoMik7XG4gICAgICAgIHRlc3RbMF0gPSAxO1xuICAgICAgICB0ZXN0WzFdID0gMjtcbiAgICAgICAgY29uc3QgdmlldyA9IG5ldyBVaW50MTZBcnJheSh0ZXN0LmJ1ZmZlcik7XG4gICAgICAgIF9pc0xpdHRsZUVuZGlhbiA9ICh2aWV3WzBdID09PSAoMiA8PCA4KSArIDEpO1xuICAgIH1cbiAgICByZXR1cm4gX2lzTGl0dGxlRW5kaWFuO1xufVxuZXhwb3J0IGNvbnN0IGlzQ2hyb21lID0gISEodXNlckFnZW50ICYmIHVzZXJBZ2VudC5pbmRleE9mKCdDaHJvbWUnKSA+PSAwKTtcbmV4cG9ydCBjb25zdCBpc0ZpcmVmb3ggPSAhISh1c2VyQWdlbnQgJiYgdXNlckFnZW50LmluZGV4T2YoJ0ZpcmVmb3gnKSA+PSAwKTtcbmV4cG9ydCBjb25zdCBpc1NhZmFyaSA9ICEhKCFpc0Nocm9tZSAmJiAodXNlckFnZW50ICYmIHVzZXJBZ2VudC5pbmRleE9mKCdTYWZhcmknKSA+PSAwKSk7XG5leHBvcnQgY29uc3QgaXNFZGdlID0gISEodXNlckFnZW50ICYmIHVzZXJBZ2VudC5pbmRleE9mKCdFZGcvJykgPj0gMCk7XG5leHBvcnQgY29uc3QgaXNBbmRyb2lkID0gISEodXNlckFnZW50ICYmIHVzZXJBZ2VudC5pbmRleE9mKCdBbmRyb2lkJykgPj0gMCk7XG4iLCAiZXhwb3J0IGZ1bmN0aW9uIGlkZW50aXR5KHQpIHtcbiAgICByZXR1cm4gdDtcbn1cbi8qKlxuICogVXNlcyBhIExSVSBjYWNoZSB0byBtYWtlIGEgZ2l2ZW4gcGFyYW1ldHJpemVkIGZ1bmN0aW9uIGNhY2hlZC5cbiAqIENhY2hlcyBqdXN0IHRoZSBsYXN0IGtleS92YWx1ZS5cbiovXG5leHBvcnQgY2xhc3MgTFJVQ2FjaGVkRnVuY3Rpb24ge1xuICAgIGNvbnN0cnVjdG9yKGFyZzEsIGFyZzIpIHtcbiAgICAgICAgdGhpcy5sYXN0Q2FjaGUgPSB1bmRlZmluZWQ7XG4gICAgICAgIHRoaXMubGFzdEFyZ0tleSA9IHVuZGVmaW5lZDtcbiAgICAgICAgaWYgKHR5cGVvZiBhcmcxID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICB0aGlzLl9mbiA9IGFyZzE7XG4gICAgICAgICAgICB0aGlzLl9jb21wdXRlS2V5ID0gaWRlbnRpdHk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICB0aGlzLl9mbiA9IGFyZzI7XG4gICAgICAgICAgICB0aGlzLl9jb21wdXRlS2V5ID0gYXJnMS5nZXRDYWNoZUtleTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBnZXQoYXJnKSB7XG4gICAgICAgIGNvbnN0IGtleSA9IHRoaXMuX2NvbXB1dGVLZXkoYXJnKTtcbiAgICAgICAgaWYgKHRoaXMubGFzdEFyZ0tleSAhPT0ga2V5KSB7XG4gICAgICAgICAgICB0aGlzLmxhc3RBcmdLZXkgPSBrZXk7XG4gICAgICAgICAgICB0aGlzLmxhc3RDYWNoZSA9IHRoaXMuX2ZuKGFyZyk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRoaXMubGFzdENhY2hlO1xuICAgIH1cbn1cbi8qKlxuICogVXNlcyBhbiB1bmJvdW5kZWQgY2FjaGUgdG8gbWVtb2l6ZSB0aGUgcmVzdWx0cyBvZiB0aGUgZ2l2ZW4gZnVuY3Rpb24uXG4qL1xuZXhwb3J0IGNsYXNzIENhY2hlZEZ1bmN0aW9uIHtcbiAgICBnZXQgY2FjaGVkVmFsdWVzKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fbWFwO1xuICAgIH1cbiAgICBjb25zdHJ1Y3RvcihhcmcxLCBhcmcyKSB7XG4gICAgICAgIHRoaXMuX21hcCA9IG5ldyBNYXAoKTtcbiAgICAgICAgdGhpcy5fbWFwMiA9IG5ldyBNYXAoKTtcbiAgICAgICAgaWYgKHR5cGVvZiBhcmcxID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICB0aGlzLl9mbiA9IGFyZzE7XG4gICAgICAgICAgICB0aGlzLl9jb21wdXRlS2V5ID0gaWRlbnRpdHk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICB0aGlzLl9mbiA9IGFyZzI7XG4gICAgICAgICAgICB0aGlzLl9jb21wdXRlS2V5ID0gYXJnMS5nZXRDYWNoZUtleTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBnZXQoYXJnKSB7XG4gICAgICAgIGNvbnN0IGtleSA9IHRoaXMuX2NvbXB1dGVLZXkoYXJnKTtcbiAgICAgICAgaWYgKHRoaXMuX21hcDIuaGFzKGtleSkpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLl9tYXAyLmdldChrZXkpO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IHZhbHVlID0gdGhpcy5fZm4oYXJnKTtcbiAgICAgICAgdGhpcy5fbWFwLnNldChhcmcsIHZhbHVlKTtcbiAgICAgICAgdGhpcy5fbWFwMi5zZXQoa2V5LCB2YWx1ZSk7XG4gICAgICAgIHJldHVybiB2YWx1ZTtcbiAgICB9XG59XG4iLCAiLyotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAqICBDb3B5cmlnaHQgKGMpIE1pY3Jvc29mdCBDb3Jwb3JhdGlvbi4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqICBMaWNlbnNlZCB1bmRlciB0aGUgTUlUIExpY2Vuc2UuIFNlZSBMaWNlbnNlLnR4dCBpbiB0aGUgcHJvamVjdCByb290IGZvciBsaWNlbnNlIGluZm9ybWF0aW9uLlxuICotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSovXG5leHBvcnQgY2xhc3MgTGF6eSB7XG4gICAgY29uc3RydWN0b3IoZXhlY3V0b3IpIHtcbiAgICAgICAgdGhpcy5leGVjdXRvciA9IGV4ZWN1dG9yO1xuICAgICAgICB0aGlzLl9kaWRSdW4gPSBmYWxzZTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogR2V0IHRoZSB3cmFwcGVkIHZhbHVlLlxuICAgICAqXG4gICAgICogVGhpcyB3aWxsIGZvcmNlIGV2YWx1YXRpb24gb2YgdGhlIGxhenkgdmFsdWUgaWYgaXQgaGFzIG5vdCBiZWVuIHJlc29sdmVkIHlldC4gTGF6eSB2YWx1ZXMgYXJlIG9ubHlcbiAgICAgKiByZXNvbHZlZCBvbmNlLiBgZ2V0VmFsdWVgIHdpbGwgcmUtdGhyb3cgZXhjZXB0aW9ucyB0aGF0IGFyZSBoaXQgd2hpbGUgcmVzb2x2aW5nIHRoZSB2YWx1ZVxuICAgICAqL1xuICAgIGdldCB2YWx1ZSgpIHtcbiAgICAgICAgaWYgKCF0aGlzLl9kaWRSdW4pIHtcbiAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgdGhpcy5fdmFsdWUgPSB0aGlzLmV4ZWN1dG9yKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjYXRjaCAoZXJyKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5fZXJyb3IgPSBlcnI7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBmaW5hbGx5IHtcbiAgICAgICAgICAgICAgICB0aGlzLl9kaWRSdW4gPSB0cnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGlmICh0aGlzLl9lcnJvcikge1xuICAgICAgICAgICAgdGhyb3cgdGhpcy5fZXJyb3I7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRoaXMuX3ZhbHVlO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBHZXQgdGhlIHdyYXBwZWQgdmFsdWUgd2l0aG91dCBmb3JjaW5nIGV2YWx1YXRpb24uXG4gICAgICovXG4gICAgZ2V0IHJhd1ZhbHVlKCkgeyByZXR1cm4gdGhpcy5fdmFsdWU7IH1cbn1cbiIsICIvKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICogIENvcHlyaWdodCAoYykgTWljcm9zb2Z0IENvcnBvcmF0aW9uLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICogIExpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgTGljZW5zZS4gU2VlIExpY2Vuc2UudHh0IGluIHRoZSBwcm9qZWN0IHJvb3QgZm9yIGxpY2Vuc2UgaW5mb3JtYXRpb24uXG4gKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKi9cbnZhciBfYTtcbmltcG9ydCB7IExSVUNhY2hlZEZ1bmN0aW9uIH0gZnJvbSAnLi9jYWNoZS5qcyc7XG5pbXBvcnQgeyBMYXp5IH0gZnJvbSAnLi9sYXp5LmpzJztcbmV4cG9ydCBmdW5jdGlvbiBpc0ZhbHN5T3JXaGl0ZXNwYWNlKHN0cikge1xuICAgIGlmICghc3RyIHx8IHR5cGVvZiBzdHIgIT09ICdzdHJpbmcnKSB7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgICByZXR1cm4gc3RyLnRyaW0oKS5sZW5ndGggPT09IDA7XG59XG5jb25zdCBfZm9ybWF0UmVnZXhwID0gL3soXFxkKyl9L2c7XG4vKipcbiAqIEhlbHBlciB0byBwcm9kdWNlIGEgc3RyaW5nIHdpdGggYSB2YXJpYWJsZSBudW1iZXIgb2YgYXJndW1lbnRzLiBJbnNlcnQgdmFyaWFibGUgc2VnbWVudHNcbiAqIGludG8gdGhlIHN0cmluZyB1c2luZyB0aGUge259IG5vdGF0aW9uIHdoZXJlIE4gaXMgdGhlIGluZGV4IG9mIHRoZSBhcmd1bWVudCBmb2xsb3dpbmcgdGhlIHN0cmluZy5cbiAqIEBwYXJhbSB2YWx1ZSBzdHJpbmcgdG8gd2hpY2ggZm9ybWF0dGluZyBpcyBhcHBsaWVkXG4gKiBAcGFyYW0gYXJncyByZXBsYWNlbWVudHMgZm9yIHtufS1lbnRyaWVzXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBmb3JtYXQodmFsdWUsIC4uLmFyZ3MpIHtcbiAgICBpZiAoYXJncy5sZW5ndGggPT09IDApIHtcbiAgICAgICAgcmV0dXJuIHZhbHVlO1xuICAgIH1cbiAgICByZXR1cm4gdmFsdWUucmVwbGFjZShfZm9ybWF0UmVnZXhwLCBmdW5jdGlvbiAobWF0Y2gsIGdyb3VwKSB7XG4gICAgICAgIGNvbnN0IGlkeCA9IHBhcnNlSW50KGdyb3VwLCAxMCk7XG4gICAgICAgIHJldHVybiBpc05hTihpZHgpIHx8IGlkeCA8IDAgfHwgaWR4ID49IGFyZ3MubGVuZ3RoID9cbiAgICAgICAgICAgIG1hdGNoIDpcbiAgICAgICAgICAgIGFyZ3NbaWR4XTtcbiAgICB9KTtcbn1cbi8qKlxuICogRW5jb2RlcyB0aGUgZ2l2ZW4gdmFsdWUgc28gdGhhdCBpdCBjYW4gYmUgdXNlZCBhcyBsaXRlcmFsIHZhbHVlIGluIGh0bWwgYXR0cmlidXRlcy5cbiAqXG4gKiBJbiBvdGhlciB3b3JkcywgY29tcHV0ZXMgYCR2YWxgLCBzdWNoIHRoYXQgYGF0dHJgIGluIGA8ZGl2IGF0dHI9XCIkdmFsXCIgLz5gIGhhcyB0aGUgcnVudGltZSB2YWx1ZSBgdmFsdWVgLlxuICogVGhpcyBwcmV2ZW50cyBYU1MgaW5qZWN0aW9uLlxuICovXG5leHBvcnQgZnVuY3Rpb24gaHRtbEF0dHJpYnV0ZUVuY29kZVZhbHVlKHZhbHVlKSB7XG4gICAgcmV0dXJuIHZhbHVlLnJlcGxhY2UoL1s8PlwiJyZdL2csIGNoID0+IHtcbiAgICAgICAgc3dpdGNoIChjaCkge1xuICAgICAgICAgICAgY2FzZSAnPCc6IHJldHVybiAnJmx0Oyc7XG4gICAgICAgICAgICBjYXNlICc+JzogcmV0dXJuICcmZ3Q7JztcbiAgICAgICAgICAgIGNhc2UgJ1wiJzogcmV0dXJuICcmcXVvdDsnO1xuICAgICAgICAgICAgY2FzZSAnXFwnJzogcmV0dXJuICcmYXBvczsnO1xuICAgICAgICAgICAgY2FzZSAnJic6IHJldHVybiAnJmFtcDsnO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBjaDtcbiAgICB9KTtcbn1cbi8qKlxuICogQ29udmVydHMgSFRNTCBjaGFyYWN0ZXJzIGluc2lkZSB0aGUgc3RyaW5nIHRvIHVzZSBlbnRpdGllcyBpbnN0ZWFkLiBNYWtlcyB0aGUgc3RyaW5nIHNhZmUgZnJvbVxuICogYmVpbmcgdXNlZCBlLmcuIGluIEhUTUxFbGVtZW50LmlubmVySFRNTC5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGVzY2FwZShodG1sKSB7XG4gICAgcmV0dXJuIGh0bWwucmVwbGFjZSgvWzw+Jl0vZywgZnVuY3Rpb24gKG1hdGNoKSB7XG4gICAgICAgIHN3aXRjaCAobWF0Y2gpIHtcbiAgICAgICAgICAgIGNhc2UgJzwnOiByZXR1cm4gJyZsdDsnO1xuICAgICAgICAgICAgY2FzZSAnPic6IHJldHVybiAnJmd0Oyc7XG4gICAgICAgICAgICBjYXNlICcmJzogcmV0dXJuICcmYW1wOyc7XG4gICAgICAgICAgICBkZWZhdWx0OiByZXR1cm4gbWF0Y2g7XG4gICAgICAgIH1cbiAgICB9KTtcbn1cbi8qKlxuICogRXNjYXBlcyByZWd1bGFyIGV4cHJlc3Npb24gY2hhcmFjdGVycyBpbiBhIGdpdmVuIHN0cmluZ1xuICovXG5leHBvcnQgZnVuY3Rpb24gZXNjYXBlUmVnRXhwQ2hhcmFjdGVycyh2YWx1ZSkge1xuICAgIHJldHVybiB2YWx1ZS5yZXBsYWNlKC9bXFxcXFxce1xcfVxcKlxcK1xcP1xcfFxcXlxcJFxcLlxcW1xcXVxcKFxcKV0vZywgJ1xcXFwkJicpO1xufVxuLyoqXG4gKiBSZW1vdmVzIGFsbCBvY2N1cnJlbmNlcyBvZiBuZWVkbGUgZnJvbSB0aGUgYmVnaW5uaW5nIGFuZCBlbmQgb2YgaGF5c3RhY2suXG4gKiBAcGFyYW0gaGF5c3RhY2sgc3RyaW5nIHRvIHRyaW1cbiAqIEBwYXJhbSBuZWVkbGUgdGhlIHRoaW5nIHRvIHRyaW0gKGRlZmF1bHQgaXMgYSBibGFuaylcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHRyaW0oaGF5c3RhY2ssIG5lZWRsZSA9ICcgJykge1xuICAgIGNvbnN0IHRyaW1tZWQgPSBsdHJpbShoYXlzdGFjaywgbmVlZGxlKTtcbiAgICByZXR1cm4gcnRyaW0odHJpbW1lZCwgbmVlZGxlKTtcbn1cbi8qKlxuICogUmVtb3ZlcyBhbGwgb2NjdXJyZW5jZXMgb2YgbmVlZGxlIGZyb20gdGhlIGJlZ2lubmluZyBvZiBoYXlzdGFjay5cbiAqIEBwYXJhbSBoYXlzdGFjayBzdHJpbmcgdG8gdHJpbVxuICogQHBhcmFtIG5lZWRsZSB0aGUgdGhpbmcgdG8gdHJpbVxuICovXG5leHBvcnQgZnVuY3Rpb24gbHRyaW0oaGF5c3RhY2ssIG5lZWRsZSkge1xuICAgIGlmICghaGF5c3RhY2sgfHwgIW5lZWRsZSkge1xuICAgICAgICByZXR1cm4gaGF5c3RhY2s7XG4gICAgfVxuICAgIGNvbnN0IG5lZWRsZUxlbiA9IG5lZWRsZS5sZW5ndGg7XG4gICAgaWYgKG5lZWRsZUxlbiA9PT0gMCB8fCBoYXlzdGFjay5sZW5ndGggPT09IDApIHtcbiAgICAgICAgcmV0dXJuIGhheXN0YWNrO1xuICAgIH1cbiAgICBsZXQgb2Zmc2V0ID0gMDtcbiAgICB3aGlsZSAoaGF5c3RhY2suaW5kZXhPZihuZWVkbGUsIG9mZnNldCkgPT09IG9mZnNldCkge1xuICAgICAgICBvZmZzZXQgPSBvZmZzZXQgKyBuZWVkbGVMZW47XG4gICAgfVxuICAgIHJldHVybiBoYXlzdGFjay5zdWJzdHJpbmcob2Zmc2V0KTtcbn1cbi8qKlxuICogUmVtb3ZlcyBhbGwgb2NjdXJyZW5jZXMgb2YgbmVlZGxlIGZyb20gdGhlIGVuZCBvZiBoYXlzdGFjay5cbiAqIEBwYXJhbSBoYXlzdGFjayBzdHJpbmcgdG8gdHJpbVxuICogQHBhcmFtIG5lZWRsZSB0aGUgdGhpbmcgdG8gdHJpbVxuICovXG5leHBvcnQgZnVuY3Rpb24gcnRyaW0oaGF5c3RhY2ssIG5lZWRsZSkge1xuICAgIGlmICghaGF5c3RhY2sgfHwgIW5lZWRsZSkge1xuICAgICAgICByZXR1cm4gaGF5c3RhY2s7XG4gICAgfVxuICAgIGNvbnN0IG5lZWRsZUxlbiA9IG5lZWRsZS5sZW5ndGgsIGhheXN0YWNrTGVuID0gaGF5c3RhY2subGVuZ3RoO1xuICAgIGlmIChuZWVkbGVMZW4gPT09IDAgfHwgaGF5c3RhY2tMZW4gPT09IDApIHtcbiAgICAgICAgcmV0dXJuIGhheXN0YWNrO1xuICAgIH1cbiAgICBsZXQgb2Zmc2V0ID0gaGF5c3RhY2tMZW4sIGlkeCA9IC0xO1xuICAgIHdoaWxlICh0cnVlKSB7XG4gICAgICAgIGlkeCA9IGhheXN0YWNrLmxhc3RJbmRleE9mKG5lZWRsZSwgb2Zmc2V0IC0gMSk7XG4gICAgICAgIGlmIChpZHggPT09IC0xIHx8IGlkeCArIG5lZWRsZUxlbiAhPT0gb2Zmc2V0KSB7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgICBpZiAoaWR4ID09PSAwKSB7XG4gICAgICAgICAgICByZXR1cm4gJyc7XG4gICAgICAgIH1cbiAgICAgICAgb2Zmc2V0ID0gaWR4O1xuICAgIH1cbiAgICByZXR1cm4gaGF5c3RhY2suc3Vic3RyaW5nKDAsIG9mZnNldCk7XG59XG5leHBvcnQgZnVuY3Rpb24gY29udmVydFNpbXBsZTJSZWdFeHBQYXR0ZXJuKHBhdHRlcm4pIHtcbiAgICByZXR1cm4gcGF0dGVybi5yZXBsYWNlKC9bXFwtXFxcXFxce1xcfVxcK1xcP1xcfFxcXlxcJFxcLlxcLFxcW1xcXVxcKFxcKVxcI1xcc10vZywgJ1xcXFwkJicpLnJlcGxhY2UoL1tcXCpdL2csICcuKicpO1xufVxuZXhwb3J0IGZ1bmN0aW9uIHN0cmlwV2lsZGNhcmRzKHBhdHRlcm4pIHtcbiAgICByZXR1cm4gcGF0dGVybi5yZXBsYWNlKC9cXCovZywgJycpO1xufVxuZXhwb3J0IGZ1bmN0aW9uIGNyZWF0ZVJlZ0V4cChzZWFyY2hTdHJpbmcsIGlzUmVnZXgsIG9wdGlvbnMgPSB7fSkge1xuICAgIGlmICghc2VhcmNoU3RyaW5nKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcignQ2Fubm90IGNyZWF0ZSByZWdleCBmcm9tIGVtcHR5IHN0cmluZycpO1xuICAgIH1cbiAgICBpZiAoIWlzUmVnZXgpIHtcbiAgICAgICAgc2VhcmNoU3RyaW5nID0gZXNjYXBlUmVnRXhwQ2hhcmFjdGVycyhzZWFyY2hTdHJpbmcpO1xuICAgIH1cbiAgICBpZiAob3B0aW9ucy53aG9sZVdvcmQpIHtcbiAgICAgICAgaWYgKCEvXFxCLy50ZXN0KHNlYXJjaFN0cmluZy5jaGFyQXQoMCkpKSB7XG4gICAgICAgICAgICBzZWFyY2hTdHJpbmcgPSAnXFxcXGInICsgc2VhcmNoU3RyaW5nO1xuICAgICAgICB9XG4gICAgICAgIGlmICghL1xcQi8udGVzdChzZWFyY2hTdHJpbmcuY2hhckF0KHNlYXJjaFN0cmluZy5sZW5ndGggLSAxKSkpIHtcbiAgICAgICAgICAgIHNlYXJjaFN0cmluZyA9IHNlYXJjaFN0cmluZyArICdcXFxcYic7XG4gICAgICAgIH1cbiAgICB9XG4gICAgbGV0IG1vZGlmaWVycyA9ICcnO1xuICAgIGlmIChvcHRpb25zLmdsb2JhbCkge1xuICAgICAgICBtb2RpZmllcnMgKz0gJ2cnO1xuICAgIH1cbiAgICBpZiAoIW9wdGlvbnMubWF0Y2hDYXNlKSB7XG4gICAgICAgIG1vZGlmaWVycyArPSAnaSc7XG4gICAgfVxuICAgIGlmIChvcHRpb25zLm11bHRpbGluZSkge1xuICAgICAgICBtb2RpZmllcnMgKz0gJ20nO1xuICAgIH1cbiAgICBpZiAob3B0aW9ucy51bmljb2RlKSB7XG4gICAgICAgIG1vZGlmaWVycyArPSAndSc7XG4gICAgfVxuICAgIHJldHVybiBuZXcgUmVnRXhwKHNlYXJjaFN0cmluZywgbW9kaWZpZXJzKTtcbn1cbmV4cG9ydCBmdW5jdGlvbiByZWdFeHBMZWFkc1RvRW5kbGVzc0xvb3AocmVnZXhwKSB7XG4gICAgLy8gRXhpdCBlYXJseSBpZiBpdCdzIG9uZSBvZiB0aGVzZSBzcGVjaWFsIGNhc2VzIHdoaWNoIGFyZSBtZWFudCB0byBtYXRjaFxuICAgIC8vIGFnYWluc3QgYW4gZW1wdHkgc3RyaW5nXG4gICAgaWYgKHJlZ2V4cC5zb3VyY2UgPT09ICdeJyB8fCByZWdleHAuc291cmNlID09PSAnXiQnIHx8IHJlZ2V4cC5zb3VyY2UgPT09ICckJyB8fCByZWdleHAuc291cmNlID09PSAnXlxcXFxzKiQnKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgLy8gV2UgY2hlY2sgYWdhaW5zdCBhbiBlbXB0eSBzdHJpbmcuIElmIHRoZSByZWd1bGFyIGV4cHJlc3Npb24gZG9lc24ndCBhZHZhbmNlXG4gICAgLy8gKGUuZy4gZW5kcyBpbiBhbiBlbmRsZXNzIGxvb3ApIGl0IHdpbGwgbWF0Y2ggYW4gZW1wdHkgc3RyaW5nLlxuICAgIGNvbnN0IG1hdGNoID0gcmVnZXhwLmV4ZWMoJycpO1xuICAgIHJldHVybiAhIShtYXRjaCAmJiByZWdleHAubGFzdEluZGV4ID09PSAwKTtcbn1cbmV4cG9ydCBmdW5jdGlvbiBzcGxpdExpbmVzKHN0cikge1xuICAgIHJldHVybiBzdHIuc3BsaXQoL1xcclxcbnxcXHJ8XFxuLyk7XG59XG5leHBvcnQgZnVuY3Rpb24gc3BsaXRMaW5lc0luY2x1ZGVTZXBhcmF0b3JzKHN0cikge1xuICAgIHZhciBfYjtcbiAgICBjb25zdCBsaW5lc1dpdGhTZXBhcmF0b3JzID0gW107XG4gICAgY29uc3Qgc3BsaXRMaW5lc0FuZFNlcGFyYXRvcnMgPSBzdHIuc3BsaXQoLyhcXHJcXG58XFxyfFxcbikvKTtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IE1hdGguY2VpbChzcGxpdExpbmVzQW5kU2VwYXJhdG9ycy5sZW5ndGggLyAyKTsgaSsrKSB7XG4gICAgICAgIGxpbmVzV2l0aFNlcGFyYXRvcnMucHVzaChzcGxpdExpbmVzQW5kU2VwYXJhdG9yc1syICogaV0gKyAoKF9iID0gc3BsaXRMaW5lc0FuZFNlcGFyYXRvcnNbMiAqIGkgKyAxXSkgIT09IG51bGwgJiYgX2IgIT09IHZvaWQgMCA/IF9iIDogJycpKTtcbiAgICB9XG4gICAgcmV0dXJuIGxpbmVzV2l0aFNlcGFyYXRvcnM7XG59XG4vKipcbiAqIFJldHVybnMgZmlyc3QgaW5kZXggb2YgdGhlIHN0cmluZyB0aGF0IGlzIG5vdCB3aGl0ZXNwYWNlLlxuICogSWYgc3RyaW5nIGlzIGVtcHR5IG9yIGNvbnRhaW5zIG9ubHkgd2hpdGVzcGFjZXMsIHJldHVybnMgLTFcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGZpcnN0Tm9uV2hpdGVzcGFjZUluZGV4KHN0cikge1xuICAgIGZvciAobGV0IGkgPSAwLCBsZW4gPSBzdHIubGVuZ3RoOyBpIDwgbGVuOyBpKyspIHtcbiAgICAgICAgY29uc3QgY2hDb2RlID0gc3RyLmNoYXJDb2RlQXQoaSk7XG4gICAgICAgIGlmIChjaENvZGUgIT09IDMyIC8qIENoYXJDb2RlLlNwYWNlICovICYmIGNoQ29kZSAhPT0gOSAvKiBDaGFyQ29kZS5UYWIgKi8pIHtcbiAgICAgICAgICAgIHJldHVybiBpO1xuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiAtMTtcbn1cbi8qKlxuICogUmV0dXJucyB0aGUgbGVhZGluZyB3aGl0ZXNwYWNlIG9mIHRoZSBzdHJpbmcuXG4gKiBJZiB0aGUgc3RyaW5nIGNvbnRhaW5zIG9ubHkgd2hpdGVzcGFjZXMsIHJldHVybnMgZW50aXJlIHN0cmluZ1xuICovXG5leHBvcnQgZnVuY3Rpb24gZ2V0TGVhZGluZ1doaXRlc3BhY2Uoc3RyLCBzdGFydCA9IDAsIGVuZCA9IHN0ci5sZW5ndGgpIHtcbiAgICBmb3IgKGxldCBpID0gc3RhcnQ7IGkgPCBlbmQ7IGkrKykge1xuICAgICAgICBjb25zdCBjaENvZGUgPSBzdHIuY2hhckNvZGVBdChpKTtcbiAgICAgICAgaWYgKGNoQ29kZSAhPT0gMzIgLyogQ2hhckNvZGUuU3BhY2UgKi8gJiYgY2hDb2RlICE9PSA5IC8qIENoYXJDb2RlLlRhYiAqLykge1xuICAgICAgICAgICAgcmV0dXJuIHN0ci5zdWJzdHJpbmcoc3RhcnQsIGkpO1xuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiBzdHIuc3Vic3RyaW5nKHN0YXJ0LCBlbmQpO1xufVxuLyoqXG4gKiBSZXR1cm5zIGxhc3QgaW5kZXggb2YgdGhlIHN0cmluZyB0aGF0IGlzIG5vdCB3aGl0ZXNwYWNlLlxuICogSWYgc3RyaW5nIGlzIGVtcHR5IG9yIGNvbnRhaW5zIG9ubHkgd2hpdGVzcGFjZXMsIHJldHVybnMgLTFcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGxhc3ROb25XaGl0ZXNwYWNlSW5kZXgoc3RyLCBzdGFydEluZGV4ID0gc3RyLmxlbmd0aCAtIDEpIHtcbiAgICBmb3IgKGxldCBpID0gc3RhcnRJbmRleDsgaSA+PSAwOyBpLS0pIHtcbiAgICAgICAgY29uc3QgY2hDb2RlID0gc3RyLmNoYXJDb2RlQXQoaSk7XG4gICAgICAgIGlmIChjaENvZGUgIT09IDMyIC8qIENoYXJDb2RlLlNwYWNlICovICYmIGNoQ29kZSAhPT0gOSAvKiBDaGFyQ29kZS5UYWIgKi8pIHtcbiAgICAgICAgICAgIHJldHVybiBpO1xuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiAtMTtcbn1cbmV4cG9ydCBmdW5jdGlvbiBjb21wYXJlKGEsIGIpIHtcbiAgICBpZiAoYSA8IGIpIHtcbiAgICAgICAgcmV0dXJuIC0xO1xuICAgIH1cbiAgICBlbHNlIGlmIChhID4gYikge1xuICAgICAgICByZXR1cm4gMTtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIHJldHVybiAwO1xuICAgIH1cbn1cbmV4cG9ydCBmdW5jdGlvbiBjb21wYXJlU3Vic3RyaW5nKGEsIGIsIGFTdGFydCA9IDAsIGFFbmQgPSBhLmxlbmd0aCwgYlN0YXJ0ID0gMCwgYkVuZCA9IGIubGVuZ3RoKSB7XG4gICAgZm9yICg7IGFTdGFydCA8IGFFbmQgJiYgYlN0YXJ0IDwgYkVuZDsgYVN0YXJ0KyssIGJTdGFydCsrKSB7XG4gICAgICAgIGNvbnN0IGNvZGVBID0gYS5jaGFyQ29kZUF0KGFTdGFydCk7XG4gICAgICAgIGNvbnN0IGNvZGVCID0gYi5jaGFyQ29kZUF0KGJTdGFydCk7XG4gICAgICAgIGlmIChjb2RlQSA8IGNvZGVCKSB7XG4gICAgICAgICAgICByZXR1cm4gLTE7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAoY29kZUEgPiBjb2RlQikge1xuICAgICAgICAgICAgcmV0dXJuIDE7XG4gICAgICAgIH1cbiAgICB9XG4gICAgY29uc3QgYUxlbiA9IGFFbmQgLSBhU3RhcnQ7XG4gICAgY29uc3QgYkxlbiA9IGJFbmQgLSBiU3RhcnQ7XG4gICAgaWYgKGFMZW4gPCBiTGVuKSB7XG4gICAgICAgIHJldHVybiAtMTtcbiAgICB9XG4gICAgZWxzZSBpZiAoYUxlbiA+IGJMZW4pIHtcbiAgICAgICAgcmV0dXJuIDE7XG4gICAgfVxuICAgIHJldHVybiAwO1xufVxuZXhwb3J0IGZ1bmN0aW9uIGNvbXBhcmVJZ25vcmVDYXNlKGEsIGIpIHtcbiAgICByZXR1cm4gY29tcGFyZVN1YnN0cmluZ0lnbm9yZUNhc2UoYSwgYiwgMCwgYS5sZW5ndGgsIDAsIGIubGVuZ3RoKTtcbn1cbmV4cG9ydCBmdW5jdGlvbiBjb21wYXJlU3Vic3RyaW5nSWdub3JlQ2FzZShhLCBiLCBhU3RhcnQgPSAwLCBhRW5kID0gYS5sZW5ndGgsIGJTdGFydCA9IDAsIGJFbmQgPSBiLmxlbmd0aCkge1xuICAgIGZvciAoOyBhU3RhcnQgPCBhRW5kICYmIGJTdGFydCA8IGJFbmQ7IGFTdGFydCsrLCBiU3RhcnQrKykge1xuICAgICAgICBsZXQgY29kZUEgPSBhLmNoYXJDb2RlQXQoYVN0YXJ0KTtcbiAgICAgICAgbGV0IGNvZGVCID0gYi5jaGFyQ29kZUF0KGJTdGFydCk7XG4gICAgICAgIGlmIChjb2RlQSA9PT0gY29kZUIpIHtcbiAgICAgICAgICAgIC8vIGVxdWFsXG4gICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoY29kZUEgPj0gMTI4IHx8IGNvZGVCID49IDEyOCkge1xuICAgICAgICAgICAgLy8gbm90IEFTQ0lJIGxldHRlcnMgLT4gZmFsbGJhY2sgdG8gbG93ZXItY2FzaW5nIHN0cmluZ3NcbiAgICAgICAgICAgIHJldHVybiBjb21wYXJlU3Vic3RyaW5nKGEudG9Mb3dlckNhc2UoKSwgYi50b0xvd2VyQ2FzZSgpLCBhU3RhcnQsIGFFbmQsIGJTdGFydCwgYkVuZCk7XG4gICAgICAgIH1cbiAgICAgICAgLy8gbWFwcGVyIGxvd2VyLWNhc2UgYXNjaWkgbGV0dGVyIG9udG8gdXBwZXItY2FzZSB2YXJpbmF0c1xuICAgICAgICAvLyBbOTctMTIyXSAobG93ZXIgYXNjaWkpIC0tPiBbNjUtOTBdICh1cHBlciBhc2NpaSlcbiAgICAgICAgaWYgKGlzTG93ZXJBc2NpaUxldHRlcihjb2RlQSkpIHtcbiAgICAgICAgICAgIGNvZGVBIC09IDMyO1xuICAgICAgICB9XG4gICAgICAgIGlmIChpc0xvd2VyQXNjaWlMZXR0ZXIoY29kZUIpKSB7XG4gICAgICAgICAgICBjb2RlQiAtPSAzMjtcbiAgICAgICAgfVxuICAgICAgICAvLyBjb21wYXJlIGJvdGggY29kZSBwb2ludHNcbiAgICAgICAgY29uc3QgZGlmZiA9IGNvZGVBIC0gY29kZUI7XG4gICAgICAgIGlmIChkaWZmID09PSAwKSB7XG4gICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gZGlmZjtcbiAgICB9XG4gICAgY29uc3QgYUxlbiA9IGFFbmQgLSBhU3RhcnQ7XG4gICAgY29uc3QgYkxlbiA9IGJFbmQgLSBiU3RhcnQ7XG4gICAgaWYgKGFMZW4gPCBiTGVuKSB7XG4gICAgICAgIHJldHVybiAtMTtcbiAgICB9XG4gICAgZWxzZSBpZiAoYUxlbiA+IGJMZW4pIHtcbiAgICAgICAgcmV0dXJuIDE7XG4gICAgfVxuICAgIHJldHVybiAwO1xufVxuZXhwb3J0IGZ1bmN0aW9uIGlzQXNjaWlEaWdpdChjb2RlKSB7XG4gICAgcmV0dXJuIGNvZGUgPj0gNDggLyogQ2hhckNvZGUuRGlnaXQwICovICYmIGNvZGUgPD0gNTcgLyogQ2hhckNvZGUuRGlnaXQ5ICovO1xufVxuZXhwb3J0IGZ1bmN0aW9uIGlzTG93ZXJBc2NpaUxldHRlcihjb2RlKSB7XG4gICAgcmV0dXJuIGNvZGUgPj0gOTcgLyogQ2hhckNvZGUuYSAqLyAmJiBjb2RlIDw9IDEyMiAvKiBDaGFyQ29kZS56ICovO1xufVxuZXhwb3J0IGZ1bmN0aW9uIGlzVXBwZXJBc2NpaUxldHRlcihjb2RlKSB7XG4gICAgcmV0dXJuIGNvZGUgPj0gNjUgLyogQ2hhckNvZGUuQSAqLyAmJiBjb2RlIDw9IDkwIC8qIENoYXJDb2RlLlogKi87XG59XG5leHBvcnQgZnVuY3Rpb24gZXF1YWxzSWdub3JlQ2FzZShhLCBiKSB7XG4gICAgcmV0dXJuIGEubGVuZ3RoID09PSBiLmxlbmd0aCAmJiBjb21wYXJlU3Vic3RyaW5nSWdub3JlQ2FzZShhLCBiKSA9PT0gMDtcbn1cbmV4cG9ydCBmdW5jdGlvbiBzdGFydHNXaXRoSWdub3JlQ2FzZShzdHIsIGNhbmRpZGF0ZSkge1xuICAgIGNvbnN0IGNhbmRpZGF0ZUxlbmd0aCA9IGNhbmRpZGF0ZS5sZW5ndGg7XG4gICAgaWYgKGNhbmRpZGF0ZS5sZW5ndGggPiBzdHIubGVuZ3RoKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgcmV0dXJuIGNvbXBhcmVTdWJzdHJpbmdJZ25vcmVDYXNlKHN0ciwgY2FuZGlkYXRlLCAwLCBjYW5kaWRhdGVMZW5ndGgpID09PSAwO1xufVxuLyoqXG4gKiBAcmV0dXJucyB0aGUgbGVuZ3RoIG9mIHRoZSBjb21tb24gcHJlZml4IG9mIHRoZSB0d28gc3RyaW5ncy5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGNvbW1vblByZWZpeExlbmd0aChhLCBiKSB7XG4gICAgY29uc3QgbGVuID0gTWF0aC5taW4oYS5sZW5ndGgsIGIubGVuZ3RoKTtcbiAgICBsZXQgaTtcbiAgICBmb3IgKGkgPSAwOyBpIDwgbGVuOyBpKyspIHtcbiAgICAgICAgaWYgKGEuY2hhckNvZGVBdChpKSAhPT0gYi5jaGFyQ29kZUF0KGkpKSB7XG4gICAgICAgICAgICByZXR1cm4gaTtcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gbGVuO1xufVxuLyoqXG4gKiBAcmV0dXJucyB0aGUgbGVuZ3RoIG9mIHRoZSBjb21tb24gc3VmZml4IG9mIHRoZSB0d28gc3RyaW5ncy5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGNvbW1vblN1ZmZpeExlbmd0aChhLCBiKSB7XG4gICAgY29uc3QgbGVuID0gTWF0aC5taW4oYS5sZW5ndGgsIGIubGVuZ3RoKTtcbiAgICBsZXQgaTtcbiAgICBjb25zdCBhTGFzdEluZGV4ID0gYS5sZW5ndGggLSAxO1xuICAgIGNvbnN0IGJMYXN0SW5kZXggPSBiLmxlbmd0aCAtIDE7XG4gICAgZm9yIChpID0gMDsgaSA8IGxlbjsgaSsrKSB7XG4gICAgICAgIGlmIChhLmNoYXJDb2RlQXQoYUxhc3RJbmRleCAtIGkpICE9PSBiLmNoYXJDb2RlQXQoYkxhc3RJbmRleCAtIGkpKSB7XG4gICAgICAgICAgICByZXR1cm4gaTtcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gbGVuO1xufVxuLyoqXG4gKiBTZWUgaHR0cDovL2VuLndpa2lwZWRpYS5vcmcvd2lraS9TdXJyb2dhdGVfcGFpclxuICovXG5leHBvcnQgZnVuY3Rpb24gaXNIaWdoU3Vycm9nYXRlKGNoYXJDb2RlKSB7XG4gICAgcmV0dXJuICgweEQ4MDAgPD0gY2hhckNvZGUgJiYgY2hhckNvZGUgPD0gMHhEQkZGKTtcbn1cbi8qKlxuICogU2VlIGh0dHA6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvU3Vycm9nYXRlX3BhaXJcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGlzTG93U3Vycm9nYXRlKGNoYXJDb2RlKSB7XG4gICAgcmV0dXJuICgweERDMDAgPD0gY2hhckNvZGUgJiYgY2hhckNvZGUgPD0gMHhERkZGKTtcbn1cbi8qKlxuICogU2VlIGh0dHA6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvU3Vycm9nYXRlX3BhaXJcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGNvbXB1dGVDb2RlUG9pbnQoaGlnaFN1cnJvZ2F0ZSwgbG93U3Vycm9nYXRlKSB7XG4gICAgcmV0dXJuICgoaGlnaFN1cnJvZ2F0ZSAtIDB4RDgwMCkgPDwgMTApICsgKGxvd1N1cnJvZ2F0ZSAtIDB4REMwMCkgKyAweDEwMDAwO1xufVxuLyoqXG4gKiBnZXQgdGhlIGNvZGUgcG9pbnQgdGhhdCBiZWdpbnMgYXQgb2Zmc2V0IGBvZmZzZXRgXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBnZXROZXh0Q29kZVBvaW50KHN0ciwgbGVuLCBvZmZzZXQpIHtcbiAgICBjb25zdCBjaGFyQ29kZSA9IHN0ci5jaGFyQ29kZUF0KG9mZnNldCk7XG4gICAgaWYgKGlzSGlnaFN1cnJvZ2F0ZShjaGFyQ29kZSkgJiYgb2Zmc2V0ICsgMSA8IGxlbikge1xuICAgICAgICBjb25zdCBuZXh0Q2hhckNvZGUgPSBzdHIuY2hhckNvZGVBdChvZmZzZXQgKyAxKTtcbiAgICAgICAgaWYgKGlzTG93U3Vycm9nYXRlKG5leHRDaGFyQ29kZSkpIHtcbiAgICAgICAgICAgIHJldHVybiBjb21wdXRlQ29kZVBvaW50KGNoYXJDb2RlLCBuZXh0Q2hhckNvZGUpO1xuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiBjaGFyQ29kZTtcbn1cbi8qKlxuICogZ2V0IHRoZSBjb2RlIHBvaW50IHRoYXQgZW5kcyByaWdodCBiZWZvcmUgb2Zmc2V0IGBvZmZzZXRgXG4gKi9cbmZ1bmN0aW9uIGdldFByZXZDb2RlUG9pbnQoc3RyLCBvZmZzZXQpIHtcbiAgICBjb25zdCBjaGFyQ29kZSA9IHN0ci5jaGFyQ29kZUF0KG9mZnNldCAtIDEpO1xuICAgIGlmIChpc0xvd1N1cnJvZ2F0ZShjaGFyQ29kZSkgJiYgb2Zmc2V0ID4gMSkge1xuICAgICAgICBjb25zdCBwcmV2Q2hhckNvZGUgPSBzdHIuY2hhckNvZGVBdChvZmZzZXQgLSAyKTtcbiAgICAgICAgaWYgKGlzSGlnaFN1cnJvZ2F0ZShwcmV2Q2hhckNvZGUpKSB7XG4gICAgICAgICAgICByZXR1cm4gY29tcHV0ZUNvZGVQb2ludChwcmV2Q2hhckNvZGUsIGNoYXJDb2RlKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gY2hhckNvZGU7XG59XG5leHBvcnQgY2xhc3MgQ29kZVBvaW50SXRlcmF0b3Ige1xuICAgIGdldCBvZmZzZXQoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9vZmZzZXQ7XG4gICAgfVxuICAgIGNvbnN0cnVjdG9yKHN0ciwgb2Zmc2V0ID0gMCkge1xuICAgICAgICB0aGlzLl9zdHIgPSBzdHI7XG4gICAgICAgIHRoaXMuX2xlbiA9IHN0ci5sZW5ndGg7XG4gICAgICAgIHRoaXMuX29mZnNldCA9IG9mZnNldDtcbiAgICB9XG4gICAgc2V0T2Zmc2V0KG9mZnNldCkge1xuICAgICAgICB0aGlzLl9vZmZzZXQgPSBvZmZzZXQ7XG4gICAgfVxuICAgIHByZXZDb2RlUG9pbnQoKSB7XG4gICAgICAgIGNvbnN0IGNvZGVQb2ludCA9IGdldFByZXZDb2RlUG9pbnQodGhpcy5fc3RyLCB0aGlzLl9vZmZzZXQpO1xuICAgICAgICB0aGlzLl9vZmZzZXQgLT0gKGNvZGVQb2ludCA+PSA2NTUzNiAvKiBDb25zdGFudHMuVU5JQ09ERV9TVVBQTEVNRU5UQVJZX1BMQU5FX0JFR0lOICovID8gMiA6IDEpO1xuICAgICAgICByZXR1cm4gY29kZVBvaW50O1xuICAgIH1cbiAgICBuZXh0Q29kZVBvaW50KCkge1xuICAgICAgICBjb25zdCBjb2RlUG9pbnQgPSBnZXROZXh0Q29kZVBvaW50KHRoaXMuX3N0ciwgdGhpcy5fbGVuLCB0aGlzLl9vZmZzZXQpO1xuICAgICAgICB0aGlzLl9vZmZzZXQgKz0gKGNvZGVQb2ludCA+PSA2NTUzNiAvKiBDb25zdGFudHMuVU5JQ09ERV9TVVBQTEVNRU5UQVJZX1BMQU5FX0JFR0lOICovID8gMiA6IDEpO1xuICAgICAgICByZXR1cm4gY29kZVBvaW50O1xuICAgIH1cbiAgICBlb2woKSB7XG4gICAgICAgIHJldHVybiAodGhpcy5fb2Zmc2V0ID49IHRoaXMuX2xlbik7XG4gICAgfVxufVxuZXhwb3J0IGNsYXNzIEdyYXBoZW1lSXRlcmF0b3Ige1xuICAgIGdldCBvZmZzZXQoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9pdGVyYXRvci5vZmZzZXQ7XG4gICAgfVxuICAgIGNvbnN0cnVjdG9yKHN0ciwgb2Zmc2V0ID0gMCkge1xuICAgICAgICB0aGlzLl9pdGVyYXRvciA9IG5ldyBDb2RlUG9pbnRJdGVyYXRvcihzdHIsIG9mZnNldCk7XG4gICAgfVxuICAgIG5leHRHcmFwaGVtZUxlbmd0aCgpIHtcbiAgICAgICAgY29uc3QgZ3JhcGhlbWVCcmVha1RyZWUgPSBHcmFwaGVtZUJyZWFrVHJlZS5nZXRJbnN0YW5jZSgpO1xuICAgICAgICBjb25zdCBpdGVyYXRvciA9IHRoaXMuX2l0ZXJhdG9yO1xuICAgICAgICBjb25zdCBpbml0aWFsT2Zmc2V0ID0gaXRlcmF0b3Iub2Zmc2V0O1xuICAgICAgICBsZXQgZ3JhcGhlbWVCcmVha1R5cGUgPSBncmFwaGVtZUJyZWFrVHJlZS5nZXRHcmFwaGVtZUJyZWFrVHlwZShpdGVyYXRvci5uZXh0Q29kZVBvaW50KCkpO1xuICAgICAgICB3aGlsZSAoIWl0ZXJhdG9yLmVvbCgpKSB7XG4gICAgICAgICAgICBjb25zdCBvZmZzZXQgPSBpdGVyYXRvci5vZmZzZXQ7XG4gICAgICAgICAgICBjb25zdCBuZXh0R3JhcGhlbWVCcmVha1R5cGUgPSBncmFwaGVtZUJyZWFrVHJlZS5nZXRHcmFwaGVtZUJyZWFrVHlwZShpdGVyYXRvci5uZXh0Q29kZVBvaW50KCkpO1xuICAgICAgICAgICAgaWYgKGJyZWFrQmV0d2VlbkdyYXBoZW1lQnJlYWtUeXBlKGdyYXBoZW1lQnJlYWtUeXBlLCBuZXh0R3JhcGhlbWVCcmVha1R5cGUpKSB7XG4gICAgICAgICAgICAgICAgLy8gbW92ZSBpdGVyYXRvciBiYWNrXG4gICAgICAgICAgICAgICAgaXRlcmF0b3Iuc2V0T2Zmc2V0KG9mZnNldCk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBncmFwaGVtZUJyZWFrVHlwZSA9IG5leHRHcmFwaGVtZUJyZWFrVHlwZTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gKGl0ZXJhdG9yLm9mZnNldCAtIGluaXRpYWxPZmZzZXQpO1xuICAgIH1cbiAgICBwcmV2R3JhcGhlbWVMZW5ndGgoKSB7XG4gICAgICAgIGNvbnN0IGdyYXBoZW1lQnJlYWtUcmVlID0gR3JhcGhlbWVCcmVha1RyZWUuZ2V0SW5zdGFuY2UoKTtcbiAgICAgICAgY29uc3QgaXRlcmF0b3IgPSB0aGlzLl9pdGVyYXRvcjtcbiAgICAgICAgY29uc3QgaW5pdGlhbE9mZnNldCA9IGl0ZXJhdG9yLm9mZnNldDtcbiAgICAgICAgbGV0IGdyYXBoZW1lQnJlYWtUeXBlID0gZ3JhcGhlbWVCcmVha1RyZWUuZ2V0R3JhcGhlbWVCcmVha1R5cGUoaXRlcmF0b3IucHJldkNvZGVQb2ludCgpKTtcbiAgICAgICAgd2hpbGUgKGl0ZXJhdG9yLm9mZnNldCA+IDApIHtcbiAgICAgICAgICAgIGNvbnN0IG9mZnNldCA9IGl0ZXJhdG9yLm9mZnNldDtcbiAgICAgICAgICAgIGNvbnN0IHByZXZHcmFwaGVtZUJyZWFrVHlwZSA9IGdyYXBoZW1lQnJlYWtUcmVlLmdldEdyYXBoZW1lQnJlYWtUeXBlKGl0ZXJhdG9yLnByZXZDb2RlUG9pbnQoKSk7XG4gICAgICAgICAgICBpZiAoYnJlYWtCZXR3ZWVuR3JhcGhlbWVCcmVha1R5cGUocHJldkdyYXBoZW1lQnJlYWtUeXBlLCBncmFwaGVtZUJyZWFrVHlwZSkpIHtcbiAgICAgICAgICAgICAgICAvLyBtb3ZlIGl0ZXJhdG9yIGJhY2tcbiAgICAgICAgICAgICAgICBpdGVyYXRvci5zZXRPZmZzZXQob2Zmc2V0KTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGdyYXBoZW1lQnJlYWtUeXBlID0gcHJldkdyYXBoZW1lQnJlYWtUeXBlO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiAoaW5pdGlhbE9mZnNldCAtIGl0ZXJhdG9yLm9mZnNldCk7XG4gICAgfVxuICAgIGVvbCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2l0ZXJhdG9yLmVvbCgpO1xuICAgIH1cbn1cbmV4cG9ydCBmdW5jdGlvbiBuZXh0Q2hhckxlbmd0aChzdHIsIGluaXRpYWxPZmZzZXQpIHtcbiAgICBjb25zdCBpdGVyYXRvciA9IG5ldyBHcmFwaGVtZUl0ZXJhdG9yKHN0ciwgaW5pdGlhbE9mZnNldCk7XG4gICAgcmV0dXJuIGl0ZXJhdG9yLm5leHRHcmFwaGVtZUxlbmd0aCgpO1xufVxuZXhwb3J0IGZ1bmN0aW9uIHByZXZDaGFyTGVuZ3RoKHN0ciwgaW5pdGlhbE9mZnNldCkge1xuICAgIGNvbnN0IGl0ZXJhdG9yID0gbmV3IEdyYXBoZW1lSXRlcmF0b3Ioc3RyLCBpbml0aWFsT2Zmc2V0KTtcbiAgICByZXR1cm4gaXRlcmF0b3IucHJldkdyYXBoZW1lTGVuZ3RoKCk7XG59XG5leHBvcnQgZnVuY3Rpb24gZ2V0Q2hhckNvbnRhaW5pbmdPZmZzZXQoc3RyLCBvZmZzZXQpIHtcbiAgICBpZiAob2Zmc2V0ID4gMCAmJiBpc0xvd1N1cnJvZ2F0ZShzdHIuY2hhckNvZGVBdChvZmZzZXQpKSkge1xuICAgICAgICBvZmZzZXQtLTtcbiAgICB9XG4gICAgY29uc3QgZW5kT2Zmc2V0ID0gb2Zmc2V0ICsgbmV4dENoYXJMZW5ndGgoc3RyLCBvZmZzZXQpO1xuICAgIGNvbnN0IHN0YXJ0T2Zmc2V0ID0gZW5kT2Zmc2V0IC0gcHJldkNoYXJMZW5ndGgoc3RyLCBlbmRPZmZzZXQpO1xuICAgIHJldHVybiBbc3RhcnRPZmZzZXQsIGVuZE9mZnNldF07XG59XG5sZXQgQ09OVEFJTlNfUlRMID0gdW5kZWZpbmVkO1xuZnVuY3Rpb24gbWFrZUNvbnRhaW5zUnRsKCkge1xuICAgIC8vIEdlbmVyYXRlZCB1c2luZyBodHRwczovL2dpdGh1Yi5jb20vYWxleGRpbWEvdW5pY29kZS11dGlscy9ibG9iL21haW4vcnRsLXRlc3QuanNcbiAgICByZXR1cm4gLyg/OltcXHUwNUJFXFx1MDVDMFxcdTA1QzNcXHUwNUM2XFx1MDVEMC1cXHUwNUY0XFx1MDYwOFxcdTA2MEJcXHUwNjBEXFx1MDYxQi1cXHUwNjRBXFx1MDY2RC1cXHUwNjZGXFx1MDY3MS1cXHUwNkQ1XFx1MDZFNVxcdTA2RTZcXHUwNkVFXFx1MDZFRlxcdTA2RkEtXFx1MDcxMFxcdTA3MTItXFx1MDcyRlxcdTA3NEQtXFx1MDdBNVxcdTA3QjEtXFx1MDdFQVxcdTA3RjRcXHUwN0Y1XFx1MDdGQVxcdTA3RkUtXFx1MDgxNVxcdTA4MUFcXHUwODI0XFx1MDgyOFxcdTA4MzAtXFx1MDg1OFxcdTA4NUUtXFx1MDg4RVxcdTA4QTAtXFx1MDhDOVxcdTIwMEZcXHVGQjFEXFx1RkIxRi1cXHVGQjI4XFx1RkIyQS1cXHVGRDNEXFx1RkQ1MC1cXHVGREM3XFx1RkRGMC1cXHVGREZDXFx1RkU3MC1cXHVGRUZDXXxcXHVEODAyW1xcdURDMDAtXFx1REQxQlxcdUREMjAtXFx1REUwMFxcdURFMTAtXFx1REUzNVxcdURFNDAtXFx1REVFNFxcdURFRUItXFx1REYzNVxcdURGNDAtXFx1REZGRl18XFx1RDgwM1tcXHVEQzAwLVxcdUREMjNcXHVERTgwLVxcdURFQTlcXHVERUFELVxcdURGNDVcXHVERjUxLVxcdURGODFcXHVERjg2LVxcdURGRjZdfFxcdUQ4M0FbXFx1REMwMC1cXHVEQ0NGXFx1REQwMC1cXHVERDQzXFx1REQ0Qi1cXHVERkZGXXxcXHVEODNCW1xcdURDMDAtXFx1REVCQl0pLztcbn1cbi8qKlxuICogUmV0dXJucyB0cnVlIGlmIGBzdHJgIGNvbnRhaW5zIGFueSBVbmljb2RlIGNoYXJhY3RlciB0aGF0IGlzIGNsYXNzaWZpZWQgYXMgXCJSXCIgb3IgXCJBTFwiLlxuICovXG5leHBvcnQgZnVuY3Rpb24gY29udGFpbnNSVEwoc3RyKSB7XG4gICAgaWYgKCFDT05UQUlOU19SVEwpIHtcbiAgICAgICAgQ09OVEFJTlNfUlRMID0gbWFrZUNvbnRhaW5zUnRsKCk7XG4gICAgfVxuICAgIHJldHVybiBDT05UQUlOU19SVEwudGVzdChzdHIpO1xufVxuY29uc3QgSVNfQkFTSUNfQVNDSUkgPSAvXltcXHRcXG5cXHJcXHgyMC1cXHg3RV0qJC87XG4vKipcbiAqIFJldHVybnMgdHJ1ZSBpZiBgc3RyYCBjb250YWlucyBvbmx5IGJhc2ljIEFTQ0lJIGNoYXJhY3RlcnMgaW4gdGhlIHJhbmdlIDMyIC0gMTI2IChpbmNsdWRpbmcgMzIgYW5kIDEyNikgb3IgXFxuLCBcXHIsIFxcdFxuICovXG5leHBvcnQgZnVuY3Rpb24gaXNCYXNpY0FTQ0lJKHN0cikge1xuICAgIHJldHVybiBJU19CQVNJQ19BU0NJSS50ZXN0KHN0cik7XG59XG5leHBvcnQgY29uc3QgVU5VU1VBTF9MSU5FX1RFUk1JTkFUT1JTID0gL1tcXHUyMDI4XFx1MjAyOV0vOyAvLyBMSU5FIFNFUEFSQVRPUiAoTFMpIG9yIFBBUkFHUkFQSCBTRVBBUkFUT1IgKFBTKVxuLyoqXG4gKiBSZXR1cm5zIHRydWUgaWYgYHN0cmAgY29udGFpbnMgdW51c3VhbCBsaW5lIHRlcm1pbmF0b3JzLCBsaWtlIExTIG9yIFBTXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBjb250YWluc1VudXN1YWxMaW5lVGVybWluYXRvcnMoc3RyKSB7XG4gICAgcmV0dXJuIFVOVVNVQUxfTElORV9URVJNSU5BVE9SUy50ZXN0KHN0cik7XG59XG5leHBvcnQgZnVuY3Rpb24gaXNGdWxsV2lkdGhDaGFyYWN0ZXIoY2hhckNvZGUpIHtcbiAgICAvLyBEbyBhIGNoZWFwIHRyaWNrIHRvIGJldHRlciBzdXBwb3J0IHdyYXBwaW5nIG9mIHdpZGUgY2hhcmFjdGVycywgdHJlYXQgdGhlbSBhcyAyIGNvbHVtbnNcbiAgICAvLyBodHRwOi8vanJncmFwaGl4Lm5ldC9yZXNlYXJjaC91bmljb2RlX2Jsb2Nrcy5waHBcbiAgICAvLyAgICAgICAgICAyRTgwIC0gMkVGRiAgIENKSyBSYWRpY2FscyBTdXBwbGVtZW50XG4gICAgLy8gICAgICAgICAgMkYwMCAtIDJGREYgICBLYW5neGkgUmFkaWNhbHNcbiAgICAvLyAgICAgICAgICAyRkYwIC0gMkZGRiAgIElkZW9ncmFwaGljIERlc2NyaXB0aW9uIENoYXJhY3RlcnNcbiAgICAvLyAgICAgICAgICAzMDAwIC0gMzAzRiAgIENKSyBTeW1ib2xzIGFuZCBQdW5jdHVhdGlvblxuICAgIC8vICAgICAgICAgIDMwNDAgLSAzMDlGICAgSGlyYWdhbmFcbiAgICAvLyAgICAgICAgICAzMEEwIC0gMzBGRiAgIEthdGFrYW5hXG4gICAgLy8gICAgICAgICAgMzEwMCAtIDMxMkYgICBCb3BvbW9mb1xuICAgIC8vICAgICAgICAgIDMxMzAgLSAzMThGICAgSGFuZ3VsIENvbXBhdGliaWxpdHkgSmFtb1xuICAgIC8vICAgICAgICAgIDMxOTAgLSAzMTlGICAgS2FuYnVuXG4gICAgLy8gICAgICAgICAgMzFBMCAtIDMxQkYgICBCb3BvbW9mbyBFeHRlbmRlZFxuICAgIC8vICAgICAgICAgIDMxRjAgLSAzMUZGICAgS2F0YWthbmEgUGhvbmV0aWMgRXh0ZW5zaW9uc1xuICAgIC8vICAgICAgICAgIDMyMDAgLSAzMkZGICAgRW5jbG9zZWQgQ0pLIExldHRlcnMgYW5kIE1vbnRoc1xuICAgIC8vICAgICAgICAgIDMzMDAgLSAzM0ZGICAgQ0pLIENvbXBhdGliaWxpdHlcbiAgICAvLyAgICAgICAgICAzNDAwIC0gNERCRiAgIENKSyBVbmlmaWVkIElkZW9ncmFwaHMgRXh0ZW5zaW9uIEFcbiAgICAvLyAgICAgICAgICA0REMwIC0gNERGRiAgIFlpamluZyBIZXhhZ3JhbSBTeW1ib2xzXG4gICAgLy8gICAgICAgICAgNEUwMCAtIDlGRkYgICBDSksgVW5pZmllZCBJZGVvZ3JhcGhzXG4gICAgLy8gICAgICAgICAgQTAwMCAtIEE0OEYgICBZaSBTeWxsYWJsZXNcbiAgICAvLyAgICAgICAgICBBNDkwIC0gQTRDRiAgIFlpIFJhZGljYWxzXG4gICAgLy8gICAgICAgICAgQUMwMCAtIEQ3QUYgICBIYW5ndWwgU3lsbGFibGVzXG4gICAgLy8gW0lHTk9SRV0gRDgwMCAtIERCN0YgICBIaWdoIFN1cnJvZ2F0ZXNcbiAgICAvLyBbSUdOT1JFXSBEQjgwIC0gREJGRiAgIEhpZ2ggUHJpdmF0ZSBVc2UgU3Vycm9nYXRlc1xuICAgIC8vIFtJR05PUkVdIERDMDAgLSBERkZGICAgTG93IFN1cnJvZ2F0ZXNcbiAgICAvLyBbSUdOT1JFXSBFMDAwIC0gRjhGRiAgIFByaXZhdGUgVXNlIEFyZWFcbiAgICAvLyAgICAgICAgICBGOTAwIC0gRkFGRiAgIENKSyBDb21wYXRpYmlsaXR5IElkZW9ncmFwaHNcbiAgICAvLyBbSUdOT1JFXSBGQjAwIC0gRkI0RiAgIEFscGhhYmV0aWMgUHJlc2VudGF0aW9uIEZvcm1zXG4gICAgLy8gW0lHTk9SRV0gRkI1MCAtIEZERkYgICBBcmFiaWMgUHJlc2VudGF0aW9uIEZvcm1zLUFcbiAgICAvLyBbSUdOT1JFXSBGRTAwIC0gRkUwRiAgIFZhcmlhdGlvbiBTZWxlY3RvcnNcbiAgICAvLyBbSUdOT1JFXSBGRTIwIC0gRkUyRiAgIENvbWJpbmluZyBIYWxmIE1hcmtzXG4gICAgLy8gW0lHTk9SRV0gRkUzMCAtIEZFNEYgICBDSksgQ29tcGF0aWJpbGl0eSBGb3Jtc1xuICAgIC8vIFtJR05PUkVdIEZFNTAgLSBGRTZGICAgU21hbGwgRm9ybSBWYXJpYW50c1xuICAgIC8vIFtJR05PUkVdIEZFNzAgLSBGRUZGICAgQXJhYmljIFByZXNlbnRhdGlvbiBGb3Jtcy1CXG4gICAgLy8gICAgICAgICAgRkYwMCAtIEZGRUYgICBIYWxmd2lkdGggYW5kIEZ1bGx3aWR0aCBGb3Jtc1xuICAgIC8vICAgICAgICAgICAgICAgW2h0dHBzOi8vZW4ud2lraXBlZGlhLm9yZy93aWtpL0hhbGZ3aWR0aF9hbmRfZnVsbHdpZHRoX2Zvcm1zXVxuICAgIC8vICAgICAgICAgICAgICAgb2Ygd2hpY2ggRkYwMSAtIEZGNUUgZnVsbHdpZHRoIEFTQ0lJIG9mIDIxIHRvIDdFXG4gICAgLy8gW0lHTk9SRV0gICAgYW5kIEZGNjUgLSBGRkRDIGhhbGZ3aWR0aCBvZiBLYXRha2FuYSBhbmQgSGFuZ3VsXG4gICAgLy8gW0lHTk9SRV0gRkZGMCAtIEZGRkYgICBTcGVjaWFsc1xuICAgIHJldHVybiAoKGNoYXJDb2RlID49IDB4MkU4MCAmJiBjaGFyQ29kZSA8PSAweEQ3QUYpXG4gICAgICAgIHx8IChjaGFyQ29kZSA+PSAweEY5MDAgJiYgY2hhckNvZGUgPD0gMHhGQUZGKVxuICAgICAgICB8fCAoY2hhckNvZGUgPj0gMHhGRjAxICYmIGNoYXJDb2RlIDw9IDB4RkY1RSkpO1xufVxuLyoqXG4gKiBBIGZhc3QgZnVuY3Rpb24gKHRoZXJlZm9yZSBpbXByZWNpc2UpIHRvIGNoZWNrIGlmIGNvZGUgcG9pbnRzIGFyZSBlbW9qaXMuXG4gKiBHZW5lcmF0ZWQgdXNpbmcgaHR0cHM6Ly9naXRodWIuY29tL2FsZXhkaW1hL3VuaWNvZGUtdXRpbHMvYmxvYi9tYWluL2Vtb2ppLXRlc3QuanNcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGlzRW1vamlJbXByZWNpc2UoeCkge1xuICAgIHJldHVybiAoKHggPj0gMHgxRjFFNiAmJiB4IDw9IDB4MUYxRkYpIHx8ICh4ID09PSA4OTg2KSB8fCAoeCA9PT0gODk4NykgfHwgKHggPT09IDkyMDApXG4gICAgICAgIHx8ICh4ID09PSA5MjAzKSB8fCAoeCA+PSA5NzI4ICYmIHggPD0gMTAxNzUpIHx8ICh4ID09PSAxMTA4OCkgfHwgKHggPT09IDExMDkzKVxuICAgICAgICB8fCAoeCA+PSAxMjc3NDQgJiYgeCA8PSAxMjg1OTEpIHx8ICh4ID49IDEyODY0MCAmJiB4IDw9IDEyODc2NClcbiAgICAgICAgfHwgKHggPj0gMTI4OTkyICYmIHggPD0gMTI5MDA4KSB8fCAoeCA+PSAxMjkyODAgJiYgeCA8PSAxMjk1MzUpXG4gICAgICAgIHx8ICh4ID49IDEyOTY0OCAmJiB4IDw9IDEyOTc4MikpO1xufVxuLy8gLS0gVVRGLTggQk9NXG5leHBvcnQgY29uc3QgVVRGOF9CT01fQ0hBUkFDVEVSID0gU3RyaW5nLmZyb21DaGFyQ29kZSg2NTI3OSAvKiBDaGFyQ29kZS5VVEY4X0JPTSAqLyk7XG5leHBvcnQgZnVuY3Rpb24gc3RhcnRzV2l0aFVURjhCT00oc3RyKSB7XG4gICAgcmV0dXJuICEhKHN0ciAmJiBzdHIubGVuZ3RoID4gMCAmJiBzdHIuY2hhckNvZGVBdCgwKSA9PT0gNjUyNzkgLyogQ2hhckNvZGUuVVRGOF9CT00gKi8pO1xufVxuZXhwb3J0IGZ1bmN0aW9uIGNvbnRhaW5zVXBwZXJjYXNlQ2hhcmFjdGVyKHRhcmdldCwgaWdub3JlRXNjYXBlZENoYXJzID0gZmFsc2UpIHtcbiAgICBpZiAoIXRhcmdldCkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIGlmIChpZ25vcmVFc2NhcGVkQ2hhcnMpIHtcbiAgICAgICAgdGFyZ2V0ID0gdGFyZ2V0LnJlcGxhY2UoL1xcXFwuL2csICcnKTtcbiAgICB9XG4gICAgcmV0dXJuIHRhcmdldC50b0xvd2VyQ2FzZSgpICE9PSB0YXJnZXQ7XG59XG4vKipcbiAqIFByb2R1Y2VzICdhJy0neicsIGZvbGxvd2VkIGJ5ICdBJy0nWicuLi4gZm9sbG93ZWQgYnkgJ2EnLSd6JywgZXRjLlxuICovXG5leHBvcnQgZnVuY3Rpb24gc2luZ2xlTGV0dGVySGFzaChuKSB7XG4gICAgY29uc3QgTEVUVEVSU19DTlQgPSAoOTAgLyogQ2hhckNvZGUuWiAqLyAtIDY1IC8qIENoYXJDb2RlLkEgKi8gKyAxKTtcbiAgICBuID0gbiAlICgyICogTEVUVEVSU19DTlQpO1xuICAgIGlmIChuIDwgTEVUVEVSU19DTlQpIHtcbiAgICAgICAgcmV0dXJuIFN0cmluZy5mcm9tQ2hhckNvZGUoOTcgLyogQ2hhckNvZGUuYSAqLyArIG4pO1xuICAgIH1cbiAgICByZXR1cm4gU3RyaW5nLmZyb21DaGFyQ29kZSg2NSAvKiBDaGFyQ29kZS5BICovICsgbiAtIExFVFRFUlNfQ05UKTtcbn1cbmZ1bmN0aW9uIGJyZWFrQmV0d2VlbkdyYXBoZW1lQnJlYWtUeXBlKGJyZWFrVHlwZUEsIGJyZWFrVHlwZUIpIHtcbiAgICAvLyBodHRwOi8vd3d3LnVuaWNvZGUub3JnL3JlcG9ydHMvdHIyOS8jR3JhcGhlbWVfQ2x1c3Rlcl9Cb3VuZGFyeV9SdWxlc1xuICAgIC8vICEhISBMZXQncyBtYWtlIHRoZSBjb21tb24gY2FzZSBhIGJpdCBmYXN0ZXJcbiAgICBpZiAoYnJlYWtUeXBlQSA9PT0gMCAvKiBHcmFwaGVtZUJyZWFrVHlwZS5PdGhlciAqLykge1xuICAgICAgICAvLyBzZWUgaHR0cHM6Ly93d3cudW5pY29kZS5vcmcvUHVibGljLzEzLjAuMC91Y2QvYXV4aWxpYXJ5L0dyYXBoZW1lQnJlYWtUZXN0LTEzLjAuMGQxMC5odG1sI3RhYmxlXG4gICAgICAgIHJldHVybiAoYnJlYWtUeXBlQiAhPT0gNSAvKiBHcmFwaGVtZUJyZWFrVHlwZS5FeHRlbmQgKi8gJiYgYnJlYWtUeXBlQiAhPT0gNyAvKiBHcmFwaGVtZUJyZWFrVHlwZS5TcGFjaW5nTWFyayAqLyk7XG4gICAgfVxuICAgIC8vIERvIG5vdCBicmVhayBiZXR3ZWVuIGEgQ1IgYW5kIExGLiBPdGhlcndpc2UsIGJyZWFrIGJlZm9yZSBhbmQgYWZ0ZXIgY29udHJvbHMuXG4gICAgLy8gR0IzICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIENSIFx1MDBENyBMRlxuICAgIC8vIEdCNCAgICAgICAgICAgICAgICAgICAgICAgKENvbnRyb2wgfCBDUiB8IExGKSBcdTAwRjdcbiAgICAvLyBHQjUgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXHUwMEY3IChDb250cm9sIHwgQ1IgfCBMRilcbiAgICBpZiAoYnJlYWtUeXBlQSA9PT0gMiAvKiBHcmFwaGVtZUJyZWFrVHlwZS5DUiAqLykge1xuICAgICAgICBpZiAoYnJlYWtUeXBlQiA9PT0gMyAvKiBHcmFwaGVtZUJyZWFrVHlwZS5MRiAqLykge1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlOyAvLyBHQjNcbiAgICAgICAgfVxuICAgIH1cbiAgICBpZiAoYnJlYWtUeXBlQSA9PT0gNCAvKiBHcmFwaGVtZUJyZWFrVHlwZS5Db250cm9sICovIHx8IGJyZWFrVHlwZUEgPT09IDIgLyogR3JhcGhlbWVCcmVha1R5cGUuQ1IgKi8gfHwgYnJlYWtUeXBlQSA9PT0gMyAvKiBHcmFwaGVtZUJyZWFrVHlwZS5MRiAqLykge1xuICAgICAgICByZXR1cm4gdHJ1ZTsgLy8gR0I0XG4gICAgfVxuICAgIGlmIChicmVha1R5cGVCID09PSA0IC8qIEdyYXBoZW1lQnJlYWtUeXBlLkNvbnRyb2wgKi8gfHwgYnJlYWtUeXBlQiA9PT0gMiAvKiBHcmFwaGVtZUJyZWFrVHlwZS5DUiAqLyB8fCBicmVha1R5cGVCID09PSAzIC8qIEdyYXBoZW1lQnJlYWtUeXBlLkxGICovKSB7XG4gICAgICAgIHJldHVybiB0cnVlOyAvLyBHQjVcbiAgICB9XG4gICAgLy8gRG8gbm90IGJyZWFrIEhhbmd1bCBzeWxsYWJsZSBzZXF1ZW5jZXMuXG4gICAgLy8gR0I2ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBMIFx1MDBENyAoTCB8IFYgfCBMViB8IExWVClcbiAgICAvLyBHQjcgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKExWIHwgVikgXHUwMEQ3IChWIHwgVClcbiAgICAvLyBHQjggICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAoTFZUIHwgVCkgXHUwMEQ3IFRcbiAgICBpZiAoYnJlYWtUeXBlQSA9PT0gOCAvKiBHcmFwaGVtZUJyZWFrVHlwZS5MICovKSB7XG4gICAgICAgIGlmIChicmVha1R5cGVCID09PSA4IC8qIEdyYXBoZW1lQnJlYWtUeXBlLkwgKi8gfHwgYnJlYWtUeXBlQiA9PT0gOSAvKiBHcmFwaGVtZUJyZWFrVHlwZS5WICovIHx8IGJyZWFrVHlwZUIgPT09IDExIC8qIEdyYXBoZW1lQnJlYWtUeXBlLkxWICovIHx8IGJyZWFrVHlwZUIgPT09IDEyIC8qIEdyYXBoZW1lQnJlYWtUeXBlLkxWVCAqLykge1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlOyAvLyBHQjZcbiAgICAgICAgfVxuICAgIH1cbiAgICBpZiAoYnJlYWtUeXBlQSA9PT0gMTEgLyogR3JhcGhlbWVCcmVha1R5cGUuTFYgKi8gfHwgYnJlYWtUeXBlQSA9PT0gOSAvKiBHcmFwaGVtZUJyZWFrVHlwZS5WICovKSB7XG4gICAgICAgIGlmIChicmVha1R5cGVCID09PSA5IC8qIEdyYXBoZW1lQnJlYWtUeXBlLlYgKi8gfHwgYnJlYWtUeXBlQiA9PT0gMTAgLyogR3JhcGhlbWVCcmVha1R5cGUuVCAqLykge1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlOyAvLyBHQjdcbiAgICAgICAgfVxuICAgIH1cbiAgICBpZiAoYnJlYWtUeXBlQSA9PT0gMTIgLyogR3JhcGhlbWVCcmVha1R5cGUuTFZUICovIHx8IGJyZWFrVHlwZUEgPT09IDEwIC8qIEdyYXBoZW1lQnJlYWtUeXBlLlQgKi8pIHtcbiAgICAgICAgaWYgKGJyZWFrVHlwZUIgPT09IDEwIC8qIEdyYXBoZW1lQnJlYWtUeXBlLlQgKi8pIHtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTsgLy8gR0I4XG4gICAgICAgIH1cbiAgICB9XG4gICAgLy8gRG8gbm90IGJyZWFrIGJlZm9yZSBleHRlbmRpbmcgY2hhcmFjdGVycyBvciBaV0ouXG4gICAgLy8gR0I5ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFx1MDBENyAoRXh0ZW5kIHwgWldKKVxuICAgIGlmIChicmVha1R5cGVCID09PSA1IC8qIEdyYXBoZW1lQnJlYWtUeXBlLkV4dGVuZCAqLyB8fCBicmVha1R5cGVCID09PSAxMyAvKiBHcmFwaGVtZUJyZWFrVHlwZS5aV0ogKi8pIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlOyAvLyBHQjlcbiAgICB9XG4gICAgLy8gVGhlIEdCOWEgYW5kIEdCOWIgcnVsZXMgb25seSBhcHBseSB0byBleHRlbmRlZCBncmFwaGVtZSBjbHVzdGVyczpcbiAgICAvLyBEbyBub3QgYnJlYWsgYmVmb3JlIFNwYWNpbmdNYXJrcywgb3IgYWZ0ZXIgUHJlcGVuZCBjaGFyYWN0ZXJzLlxuICAgIC8vIEdCOWEgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcdTAwRDcgU3BhY2luZ01hcmtcbiAgICAvLyBHQjliICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFByZXBlbmQgXHUwMEQ3XG4gICAgaWYgKGJyZWFrVHlwZUIgPT09IDcgLyogR3JhcGhlbWVCcmVha1R5cGUuU3BhY2luZ01hcmsgKi8pIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlOyAvLyBHQjlhXG4gICAgfVxuICAgIGlmIChicmVha1R5cGVBID09PSAxIC8qIEdyYXBoZW1lQnJlYWtUeXBlLlByZXBlbmQgKi8pIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlOyAvLyBHQjliXG4gICAgfVxuICAgIC8vIERvIG5vdCBicmVhayB3aXRoaW4gZW1vamkgbW9kaWZpZXIgc2VxdWVuY2VzIG9yIGVtb2ppIHp3aiBzZXF1ZW5jZXMuXG4gICAgLy8gR0IxMSAgICBcXHB7RXh0ZW5kZWRfUGljdG9ncmFwaGljfSBFeHRlbmQqIFpXSiBcdTAwRDcgXFxwe0V4dGVuZGVkX1BpY3RvZ3JhcGhpY31cbiAgICBpZiAoYnJlYWtUeXBlQSA9PT0gMTMgLyogR3JhcGhlbWVCcmVha1R5cGUuWldKICovICYmIGJyZWFrVHlwZUIgPT09IDE0IC8qIEdyYXBoZW1lQnJlYWtUeXBlLkV4dGVuZGVkX1BpY3RvZ3JhcGhpYyAqLykge1xuICAgICAgICAvLyBOb3RlOiB3ZSBhcmUgbm90IGltcGxlbWVudGluZyB0aGUgcnVsZSBlbnRpcmVseSBoZXJlIHRvIGF2b2lkIGludHJvZHVjaW5nIHN0YXRlc1xuICAgICAgICByZXR1cm4gZmFsc2U7IC8vIEdCMTFcbiAgICB9XG4gICAgLy8gR0IxMiAgICAgICAgICAgICAgICAgICAgICAgICAgc290IChSSSBSSSkqIFJJIFx1MDBENyBSSVxuICAgIC8vIEdCMTMgICAgICAgICAgICAgICAgICAgICAgICBbXlJJXSAoUkkgUkkpKiBSSSBcdTAwRDcgUklcbiAgICBpZiAoYnJlYWtUeXBlQSA9PT0gNiAvKiBHcmFwaGVtZUJyZWFrVHlwZS5SZWdpb25hbF9JbmRpY2F0b3IgKi8gJiYgYnJlYWtUeXBlQiA9PT0gNiAvKiBHcmFwaGVtZUJyZWFrVHlwZS5SZWdpb25hbF9JbmRpY2F0b3IgKi8pIHtcbiAgICAgICAgLy8gTm90ZTogd2UgYXJlIG5vdCBpbXBsZW1lbnRpbmcgdGhlIHJ1bGUgZW50aXJlbHkgaGVyZSB0byBhdm9pZCBpbnRyb2R1Y2luZyBzdGF0ZXNcbiAgICAgICAgcmV0dXJuIGZhbHNlOyAvLyBHQjEyICYgR0IxM1xuICAgIH1cbiAgICAvLyBHQjk5OSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBBbnkgXHUwMEY3IEFueVxuICAgIHJldHVybiB0cnVlO1xufVxuY2xhc3MgR3JhcGhlbWVCcmVha1RyZWUge1xuICAgIHN0YXRpYyBnZXRJbnN0YW5jZSgpIHtcbiAgICAgICAgaWYgKCFHcmFwaGVtZUJyZWFrVHJlZS5fSU5TVEFOQ0UpIHtcbiAgICAgICAgICAgIEdyYXBoZW1lQnJlYWtUcmVlLl9JTlNUQU5DRSA9IG5ldyBHcmFwaGVtZUJyZWFrVHJlZSgpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBHcmFwaGVtZUJyZWFrVHJlZS5fSU5TVEFOQ0U7XG4gICAgfVxuICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICB0aGlzLl9kYXRhID0gZ2V0R3JhcGhlbWVCcmVha1Jhd0RhdGEoKTtcbiAgICB9XG4gICAgZ2V0R3JhcGhlbWVCcmVha1R5cGUoY29kZVBvaW50KSB7XG4gICAgICAgIC8vICEhISBMZXQncyBtYWtlIDdiaXQgQVNDSUkgYSBiaXQgZmFzdGVyOiAwLi4zMVxuICAgICAgICBpZiAoY29kZVBvaW50IDwgMzIpIHtcbiAgICAgICAgICAgIGlmIChjb2RlUG9pbnQgPT09IDEwIC8qIENoYXJDb2RlLkxpbmVGZWVkICovKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIDMgLyogR3JhcGhlbWVCcmVha1R5cGUuTEYgKi87XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoY29kZVBvaW50ID09PSAxMyAvKiBDaGFyQ29kZS5DYXJyaWFnZVJldHVybiAqLykge1xuICAgICAgICAgICAgICAgIHJldHVybiAyIC8qIEdyYXBoZW1lQnJlYWtUeXBlLkNSICovO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIDQgLyogR3JhcGhlbWVCcmVha1R5cGUuQ29udHJvbCAqLztcbiAgICAgICAgfVxuICAgICAgICAvLyAhISEgTGV0J3MgbWFrZSA3Yml0IEFTQ0lJIGEgYml0IGZhc3RlcjogMzIuLjEyNlxuICAgICAgICBpZiAoY29kZVBvaW50IDwgMTI3KSB7XG4gICAgICAgICAgICByZXR1cm4gMCAvKiBHcmFwaGVtZUJyZWFrVHlwZS5PdGhlciAqLztcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBkYXRhID0gdGhpcy5fZGF0YTtcbiAgICAgICAgY29uc3Qgbm9kZUNvdW50ID0gZGF0YS5sZW5ndGggLyAzO1xuICAgICAgICBsZXQgbm9kZUluZGV4ID0gMTtcbiAgICAgICAgd2hpbGUgKG5vZGVJbmRleCA8PSBub2RlQ291bnQpIHtcbiAgICAgICAgICAgIGlmIChjb2RlUG9pbnQgPCBkYXRhWzMgKiBub2RlSW5kZXhdKSB7XG4gICAgICAgICAgICAgICAgLy8gZ28gbGVmdFxuICAgICAgICAgICAgICAgIG5vZGVJbmRleCA9IDIgKiBub2RlSW5kZXg7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmIChjb2RlUG9pbnQgPiBkYXRhWzMgKiBub2RlSW5kZXggKyAxXSkge1xuICAgICAgICAgICAgICAgIC8vIGdvIHJpZ2h0XG4gICAgICAgICAgICAgICAgbm9kZUluZGV4ID0gMiAqIG5vZGVJbmRleCArIDE7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAvLyBoaXRcbiAgICAgICAgICAgICAgICByZXR1cm4gZGF0YVszICogbm9kZUluZGV4ICsgMl07XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIDAgLyogR3JhcGhlbWVCcmVha1R5cGUuT3RoZXIgKi87XG4gICAgfVxufVxuR3JhcGhlbWVCcmVha1RyZWUuX0lOU1RBTkNFID0gbnVsbDtcbmZ1bmN0aW9uIGdldEdyYXBoZW1lQnJlYWtSYXdEYXRhKCkge1xuICAgIC8vIGdlbmVyYXRlZCB1c2luZyBodHRwczovL2dpdGh1Yi5jb20vYWxleGRpbWEvdW5pY29kZS11dGlscy9ibG9iL21haW4vZ3JhcGhlbWUtYnJlYWsuanNcbiAgICByZXR1cm4gSlNPTi5wYXJzZSgnWzAsMCwwLDUxMjI5LDUxMjU1LDEyLDQ0MDYxLDQ0MDg3LDEyLDEyNzQ2MiwxMjc0ODcsNiw3MDgzLDcwODUsNSw0NzY0NSw0NzY3MSwxMiw1NDgxMyw1NDgzOSwxMiwxMjg2NzgsMTI4Njc4LDE0LDMyNzAsMzI3MCw1LDk5MTksOTkyMywxNCw0NTg1Myw0NTg3OSwxMiw0OTQzNyw0OTQ2MywxMiw1MzAyMSw1MzA0NywxMiw3MTIxNiw3MTIxOCw3LDEyODM5OCwxMjgzOTksMTQsMTI5MzYwLDEyOTM3NCwxNCwyNTE5LDI1MTksNSw0NDQ4LDQ1MTksOSw5NzQyLDk3NDIsMTQsMTIzMzYsMTIzMzYsMTQsNDQ5NTcsNDQ5ODMsMTIsNDY3NDksNDY3NzUsMTIsNDg1NDEsNDg1NjcsMTIsNTAzMzMsNTAzNTksMTIsNTIxMjUsNTIxNTEsMTIsNTM5MTcsNTM5NDMsMTIsNjk4ODgsNjk4OTAsNSw3MzAxOCw3MzAxOCw1LDEyNzk5MCwxMjc5OTAsMTQsMTI4NTU4LDEyODU1OSwxNCwxMjg3NTksMTI4NzYwLDE0LDEyOTY1MywxMjk2NTUsMTQsMjAyNywyMDM1LDUsMjg5MSwyODkyLDcsMzc2MSwzNzYxLDUsNjY4Myw2NjgzLDUsODI5Myw4MjkzLDQsOTgyNSw5ODI2LDE0LDk5OTksOTk5OSwxNCw0MzQ1Miw0MzQ1Myw1LDQ0NTA5LDQ0NTM1LDEyLDQ1NDA1LDQ1NDMxLDEyLDQ2MzAxLDQ2MzI3LDEyLDQ3MTk3LDQ3MjIzLDEyLDQ4MDkzLDQ4MTE5LDEyLDQ4OTg5LDQ5MDE1LDEyLDQ5ODg1LDQ5OTExLDEyLDUwNzgxLDUwODA3LDEyLDUxNjc3LDUxNzAzLDEyLDUyNTczLDUyNTk5LDEyLDUzNDY5LDUzNDk1LDEyLDU0MzY1LDU0MzkxLDEyLDY1Mjc5LDY1Mjc5LDQsNzA0NzEsNzA0NzIsNyw3MjE0NSw3MjE0Nyw3LDExOTE3MywxMTkxNzksNSwxMjc3OTksMTI3ODE4LDE0LDEyODI0MCwxMjgyNDQsMTQsMTI4NTEyLDEyODUxMiwxNCwxMjg2NTIsMTI4NjUyLDE0LDEyODcyMSwxMjg3MjIsMTQsMTI5MjkyLDEyOTI5MiwxNCwxMjk0NDUsMTI5NDUwLDE0LDEyOTczNCwxMjk3NDMsMTQsMTQ3NiwxNDc3LDUsMjM2NiwyMzY4LDcsMjc1MCwyNzUyLDcsMzA3NiwzMDc2LDUsMzQxNSwzNDE1LDUsNDE0MSw0MTQ0LDUsNjEwOSw2MTA5LDUsNjk2NCw2OTY0LDUsNzM5NCw3NDAwLDUsOTE5Nyw5MTk4LDE0LDk3NzAsOTc3MCwxNCw5ODc3LDk4NzcsMTQsOTk2OCw5OTY5LDE0LDEwMDg0LDEwMDg0LDE0LDQzMDUyLDQzMDUyLDUsNDM3MTMsNDM3MTMsNSw0NDI4NSw0NDMxMSwxMiw0NDczMyw0NDc1OSwxMiw0NTE4MSw0NTIwNywxMiw0NTYyOSw0NTY1NSwxMiw0NjA3Nyw0NjEwMywxMiw0NjUyNSw0NjU1MSwxMiw0Njk3Myw0Njk5OSwxMiw0NzQyMSw0NzQ0NywxMiw0Nzg2OSw0Nzg5NSwxMiw0ODMxNyw0ODM0MywxMiw0ODc2NSw0ODc5MSwxMiw0OTIxMyw0OTIzOSwxMiw0OTY2MSw0OTY4NywxMiw1MDEwOSw1MDEzNSwxMiw1MDU1Nyw1MDU4MywxMiw1MTAwNSw1MTAzMSwxMiw1MTQ1Myw1MTQ3OSwxMiw1MTkwMSw1MTkyNywxMiw1MjM0OSw1MjM3NSwxMiw1Mjc5Nyw1MjgyMywxMiw1MzI0NSw1MzI3MSwxMiw1MzY5Myw1MzcxOSwxMiw1NDE0MSw1NDE2NywxMiw1NDU4OSw1NDYxNSwxMiw1NTAzNyw1NTA2MywxMiw2OTUwNiw2OTUwOSw1LDcwMTkxLDcwMTkzLDUsNzA4NDEsNzA4NDEsNyw3MTQ2Myw3MTQ2Nyw1LDcyMzMwLDcyMzQyLDUsOTQwMzEsOTQwMzEsNSwxMjM2MjgsMTIzNjMxLDUsMTI3NzYzLDEyNzc2NSwxNCwxMjc5NDEsMTI3OTQxLDE0LDEyODA0MywxMjgwNjIsMTQsMTI4MzAyLDEyODMxNywxNCwxMjg0NjUsMTI4NDY3LDE0LDEyODUzOSwxMjg1MzksMTQsMTI4NjQwLDEyODY0MCwxNCwxMjg2NjIsMTI4NjYyLDE0LDEyODcwMywxMjg3MDMsMTQsMTI4NzQ1LDEyODc0NSwxNCwxMjkwMDQsMTI5MDA3LDE0LDEyOTMyOSwxMjkzMzAsMTQsMTI5NDAyLDEyOTQwMiwxNCwxMjk0ODMsMTI5NDgzLDE0LDEyOTY4NiwxMjk3MDQsMTQsMTMwMDQ4LDEzMTA2OSwxNCwxNzMsMTczLDQsMTc1NywxNzU3LDEsMjIwMCwyMjA3LDUsMjQzNCwyNDM1LDcsMjYzMSwyNjMyLDUsMjgxNywyODE3LDUsMzAwOCwzMDA4LDUsMzIwMSwzMjAxLDUsMzM4NywzMzg4LDUsMzU0MiwzNTQyLDUsMzkwMiwzOTAzLDcsNDE5MCw0MTkyLDUsNjAwMiw2MDAzLDUsNjQzOSw2NDQwLDUsNjc2NSw2NzcwLDcsNzAxOSw3MDI3LDUsNzE1NCw3MTU1LDcsODIwNSw4MjA1LDEzLDg1MDUsODUwNSwxNCw5NjU0LDk2NTQsMTQsOTc1Nyw5NzU3LDE0LDk3OTIsOTc5MiwxNCw5ODUyLDk4NTMsMTQsOTg5MCw5ODk0LDE0LDk5MzcsOTkzNywxNCw5OTgxLDk5ODEsMTQsMTAwMzUsMTAwMzYsMTQsMTEwMzUsMTEwMzYsMTQsNDI2NTQsNDI2NTUsNSw0MzM0Niw0MzM0Nyw3LDQzNTg3LDQzNTg3LDUsNDQwMDYsNDQwMDcsNyw0NDE3Myw0NDE5OSwxMiw0NDM5Nyw0NDQyMywxMiw0NDYyMSw0NDY0NywxMiw0NDg0NSw0NDg3MSwxMiw0NTA2OSw0NTA5NSwxMiw0NTI5Myw0NTMxOSwxMiw0NTUxNyw0NTU0MywxMiw0NTc0MSw0NTc2NywxMiw0NTk2NSw0NTk5MSwxMiw0NjE4OSw0NjIxNSwxMiw0NjQxMyw0NjQzOSwxMiw0NjYzNyw0NjY2MywxMiw0Njg2MSw0Njg4NywxMiw0NzA4NSw0NzExMSwxMiw0NzMwOSw0NzMzNSwxMiw0NzUzMyw0NzU1OSwxMiw0Nzc1Nyw0Nzc4MywxMiw0Nzk4MSw0ODAwNywxMiw0ODIwNSw0ODIzMSwxMiw0ODQyOSw0ODQ1NSwxMiw0ODY1Myw0ODY3OSwxMiw0ODg3Nyw0ODkwMywxMiw0OTEwMSw0OTEyNywxMiw0OTMyNSw0OTM1MSwxMiw0OTU0OSw0OTU3NSwxMiw0OTc3Myw0OTc5OSwxMiw0OTk5Nyw1MDAyMywxMiw1MDIyMSw1MDI0NywxMiw1MDQ0NSw1MDQ3MSwxMiw1MDY2OSw1MDY5NSwxMiw1MDg5Myw1MDkxOSwxMiw1MTExNyw1MTE0MywxMiw1MTM0MSw1MTM2NywxMiw1MTU2NSw1MTU5MSwxMiw1MTc4OSw1MTgxNSwxMiw1MjAxMyw1MjAzOSwxMiw1MjIzNyw1MjI2MywxMiw1MjQ2MSw1MjQ4NywxMiw1MjY4NSw1MjcxMSwxMiw1MjkwOSw1MjkzNSwxMiw1MzEzMyw1MzE1OSwxMiw1MzM1Nyw1MzM4MywxMiw1MzU4MSw1MzYwNywxMiw1MzgwNSw1MzgzMSwxMiw1NDAyOSw1NDA1NSwxMiw1NDI1Myw1NDI3OSwxMiw1NDQ3Nyw1NDUwMywxMiw1NDcwMSw1NDcyNywxMiw1NDkyNSw1NDk1MSwxMiw1NTE0OSw1NTE3NSwxMiw2ODEwMSw2ODEwMiw1LDY5NzYyLDY5NzYyLDcsNzAwNjcsNzAwNjksNyw3MDM3MSw3MDM3OCw1LDcwNzIwLDcwNzIxLDcsNzEwODcsNzEwODcsNSw3MTM0MSw3MTM0MSw1LDcxOTk1LDcxOTk2LDUsNzIyNDksNzIyNDksNyw3Mjg1MCw3Mjg3MSw1LDczMTA5LDczMTA5LDUsMTE4NTc2LDExODU5OCw1LDEyMTUwNSwxMjE1MTksNSwxMjcyNDUsMTI3MjQ3LDE0LDEyNzU2OCwxMjc1NjksMTQsMTI3Nzc3LDEyNzc3NywxNCwxMjc4NzIsMTI3ODkxLDE0LDEyNzk1NiwxMjc5NjcsMTQsMTI4MDE1LDEyODAxNiwxNCwxMjgxMTAsMTI4MTcyLDE0LDEyODI1OSwxMjgyNTksMTQsMTI4MzY3LDEyODM2OCwxNCwxMjg0MjQsMTI4NDI0LDE0LDEyODQ4OCwxMjg0ODgsMTQsMTI4NTMwLDEyODUzMiwxNCwxMjg1NTAsMTI4NTUxLDE0LDEyODU2NiwxMjg1NjYsMTQsMTI4NjQ3LDEyODY0NywxNCwxMjg2NTYsMTI4NjU2LDE0LDEyODY2NywxMjg2NzMsMTQsMTI4NjkxLDEyODY5MywxNCwxMjg3MTUsMTI4NzE1LDE0LDEyODcyOCwxMjg3MzIsMTQsMTI4NzUyLDEyODc1MiwxNCwxMjg3NjUsMTI4NzY3LDE0LDEyOTA5NiwxMjkxMDMsMTQsMTI5MzExLDEyOTMxMSwxNCwxMjkzNDQsMTI5MzQ5LDE0LDEyOTM5NCwxMjkzOTQsMTQsMTI5NDEzLDEyOTQyNSwxNCwxMjk0NjYsMTI5NDcxLDE0LDEyOTUxMSwxMjk1MzUsMTQsMTI5NjY0LDEyOTY2NiwxNCwxMjk3MTksMTI5NzIyLDE0LDEyOTc2MCwxMjk3NjcsMTQsOTE3NTM2LDkxNzYzMSw1LDEzLDEzLDIsMTE2MCwxMTYxLDUsMTU2NCwxNTY0LDQsMTgwNywxODA3LDEsMjA4NSwyMDg3LDUsMjMwNywyMzA3LDcsMjM4MiwyMzgzLDcsMjQ5NywyNTAwLDUsMjU2MywyNTYzLDcsMjY3NywyNjc3LDUsMjc2MywyNzY0LDcsMjg3OSwyODc5LDUsMjkxNCwyOTE1LDUsMzAyMSwzMDIxLDUsMzE0MiwzMTQ0LDUsMzI2MywzMjYzLDUsMzI4NSwzMjg2LDUsMzM5OCwzNDAwLDcsMzUzMCwzNTMwLDUsMzYzMywzNjMzLDUsMzg2NCwzODY1LDUsMzk3NCwzOTc1LDUsNDE1NSw0MTU2LDcsNDIyOSw0MjMwLDUsNTkwOSw1OTA5LDcsNjA3OCw2MDg1LDcsNjI3Nyw2Mjc4LDUsNjQ1MSw2NDU2LDcsNjc0NCw2NzUwLDUsNjg0Niw2ODQ2LDUsNjk3Miw2OTcyLDUsNzA3NCw3MDc3LDUsNzE0Niw3MTQ4LDcsNzIyMiw3MjIzLDUsNzQxNiw3NDE3LDUsODIzNCw4MjM4LDQsODQxNyw4NDE3LDUsOTAwMCw5MDAwLDE0LDkyMDMsOTIwMywxNCw5NzMwLDk3MzEsMTQsOTc0OCw5NzQ5LDE0LDk3NjIsOTc2MywxNCw5Nzc2LDk3ODMsMTQsOTgwMCw5ODExLDE0LDk4MzEsOTgzMSwxNCw5ODcyLDk4NzMsMTQsOTg4Miw5ODgyLDE0LDk5MDAsOTkwMywxNCw5OTI5LDk5MzMsMTQsOTk0MSw5OTYwLDE0LDk5NzQsOTk3NCwxNCw5OTg5LDk5ODksMTQsMTAwMDYsMTAwMDYsMTQsMTAwNjIsMTAwNjIsMTQsMTAxNjAsMTAxNjAsMTQsMTE2NDcsMTE2NDcsNSwxMjk1MywxMjk1MywxNCw0MzAxOSw0MzAxOSw1LDQzMjMyLDQzMjQ5LDUsNDM0NDMsNDM0NDMsNSw0MzU2Nyw0MzU2OCw3LDQzNjk2LDQzNjk2LDUsNDM3NjUsNDM3NjUsNyw0NDAxMyw0NDAxMyw1LDQ0MTE3LDQ0MTQzLDEyLDQ0MjI5LDQ0MjU1LDEyLDQ0MzQxLDQ0MzY3LDEyLDQ0NDUzLDQ0NDc5LDEyLDQ0NTY1LDQ0NTkxLDEyLDQ0Njc3LDQ0NzAzLDEyLDQ0Nzg5LDQ0ODE1LDEyLDQ0OTAxLDQ0OTI3LDEyLDQ1MDEzLDQ1MDM5LDEyLDQ1MTI1LDQ1MTUxLDEyLDQ1MjM3LDQ1MjYzLDEyLDQ1MzQ5LDQ1Mzc1LDEyLDQ1NDYxLDQ1NDg3LDEyLDQ1NTczLDQ1NTk5LDEyLDQ1Njg1LDQ1NzExLDEyLDQ1Nzk3LDQ1ODIzLDEyLDQ1OTA5LDQ1OTM1LDEyLDQ2MDIxLDQ2MDQ3LDEyLDQ2MTMzLDQ2MTU5LDEyLDQ2MjQ1LDQ2MjcxLDEyLDQ2MzU3LDQ2MzgzLDEyLDQ2NDY5LDQ2NDk1LDEyLDQ2NTgxLDQ2NjA3LDEyLDQ2NjkzLDQ2NzE5LDEyLDQ2ODA1LDQ2ODMxLDEyLDQ2OTE3LDQ2OTQzLDEyLDQ3MDI5LDQ3MDU1LDEyLDQ3MTQxLDQ3MTY3LDEyLDQ3MjUzLDQ3Mjc5LDEyLDQ3MzY1LDQ3MzkxLDEyLDQ3NDc3LDQ3NTAzLDEyLDQ3NTg5LDQ3NjE1LDEyLDQ3NzAxLDQ3NzI3LDEyLDQ3ODEzLDQ3ODM5LDEyLDQ3OTI1LDQ3OTUxLDEyLDQ4MDM3LDQ4MDYzLDEyLDQ4MTQ5LDQ4MTc1LDEyLDQ4MjYxLDQ4Mjg3LDEyLDQ4MzczLDQ4Mzk5LDEyLDQ4NDg1LDQ4NTExLDEyLDQ4NTk3LDQ4NjIzLDEyLDQ4NzA5LDQ4NzM1LDEyLDQ4ODIxLDQ4ODQ3LDEyLDQ4OTMzLDQ4OTU5LDEyLDQ5MDQ1LDQ5MDcxLDEyLDQ5MTU3LDQ5MTgzLDEyLDQ5MjY5LDQ5Mjk1LDEyLDQ5MzgxLDQ5NDA3LDEyLDQ5NDkzLDQ5NTE5LDEyLDQ5NjA1LDQ5NjMxLDEyLDQ5NzE3LDQ5NzQzLDEyLDQ5ODI5LDQ5ODU1LDEyLDQ5OTQxLDQ5OTY3LDEyLDUwMDUzLDUwMDc5LDEyLDUwMTY1LDUwMTkxLDEyLDUwMjc3LDUwMzAzLDEyLDUwMzg5LDUwNDE1LDEyLDUwNTAxLDUwNTI3LDEyLDUwNjEzLDUwNjM5LDEyLDUwNzI1LDUwNzUxLDEyLDUwODM3LDUwODYzLDEyLDUwOTQ5LDUwOTc1LDEyLDUxMDYxLDUxMDg3LDEyLDUxMTczLDUxMTk5LDEyLDUxMjg1LDUxMzExLDEyLDUxMzk3LDUxNDIzLDEyLDUxNTA5LDUxNTM1LDEyLDUxNjIxLDUxNjQ3LDEyLDUxNzMzLDUxNzU5LDEyLDUxODQ1LDUxODcxLDEyLDUxOTU3LDUxOTgzLDEyLDUyMDY5LDUyMDk1LDEyLDUyMTgxLDUyMjA3LDEyLDUyMjkzLDUyMzE5LDEyLDUyNDA1LDUyNDMxLDEyLDUyNTE3LDUyNTQzLDEyLDUyNjI5LDUyNjU1LDEyLDUyNzQxLDUyNzY3LDEyLDUyODUzLDUyODc5LDEyLDUyOTY1LDUyOTkxLDEyLDUzMDc3LDUzMTAzLDEyLDUzMTg5LDUzMjE1LDEyLDUzMzAxLDUzMzI3LDEyLDUzNDEzLDUzNDM5LDEyLDUzNTI1LDUzNTUxLDEyLDUzNjM3LDUzNjYzLDEyLDUzNzQ5LDUzNzc1LDEyLDUzODYxLDUzODg3LDEyLDUzOTczLDUzOTk5LDEyLDU0MDg1LDU0MTExLDEyLDU0MTk3LDU0MjIzLDEyLDU0MzA5LDU0MzM1LDEyLDU0NDIxLDU0NDQ3LDEyLDU0NTMzLDU0NTU5LDEyLDU0NjQ1LDU0NjcxLDEyLDU0NzU3LDU0NzgzLDEyLDU0ODY5LDU0ODk1LDEyLDU0OTgxLDU1MDA3LDEyLDU1MDkzLDU1MTE5LDEyLDU1MjQzLDU1MjkxLDEwLDY2MDQ1LDY2MDQ1LDUsNjgzMjUsNjgzMjYsNSw2OTY4OCw2OTcwMiw1LDY5ODE3LDY5ODE4LDUsNjk5NTcsNjk5NTgsNyw3MDA4OSw3MDA5Miw1LDcwMTk4LDcwMTk5LDUsNzA0NjIsNzA0NjIsNSw3MDUwMiw3MDUwOCw1LDcwNzUwLDcwNzUwLDUsNzA4NDYsNzA4NDYsNyw3MTEwMCw3MTEwMSw1LDcxMjMwLDcxMjMwLDcsNzEzNTEsNzEzNTEsNSw3MTczNyw3MTczOCw1LDcyMDAwLDcyMDAwLDcsNzIxNjAsNzIxNjAsNSw3MjI3Myw3MjI3OCw1LDcyNzUyLDcyNzU4LDUsNzI4ODIsNzI4ODMsNSw3MzAzMSw3MzAzMSw1LDczNDYxLDczNDYyLDcsOTQxOTIsOTQxOTMsNywxMTkxNDksMTE5MTQ5LDcsMTIxNDAzLDEyMTQ1Miw1LDEyMjkxNSwxMjI5MTYsNSwxMjY5ODAsMTI2OTgwLDE0LDEyNzM1OCwxMjczNTksMTQsMTI3NTM1LDEyNzUzNSwxNCwxMjc3NTksMTI3NzU5LDE0LDEyNzc3MSwxMjc3NzEsMTQsMTI3NzkyLDEyNzc5MywxNCwxMjc4MjUsMTI3ODY3LDE0LDEyNzg5NywxMjc4OTksMTQsMTI3OTQ1LDEyNzk0NSwxNCwxMjc5ODUsMTI3OTg2LDE0LDEyODAwMCwxMjgwMDcsMTQsMTI4MDIxLDEyODAyMSwxNCwxMjgwNjYsMTI4MTAwLDE0LDEyODE4NCwxMjgyMzUsMTQsMTI4MjQ5LDEyODI1MiwxNCwxMjgyNjYsMTI4Mjc2LDE0LDEyODMzNSwxMjgzMzUsMTQsMTI4Mzc5LDEyODM5MCwxNCwxMjg0MDcsMTI4NDE5LDE0LDEyODQ0NCwxMjg0NDQsMTQsMTI4NDgxLDEyODQ4MSwxNCwxMjg0OTksMTI4NDk5LDE0LDEyODUyNiwxMjg1MjYsMTQsMTI4NTM2LDEyODUzNiwxNCwxMjg1NDMsMTI4NTQzLDE0LDEyODU1NiwxMjg1NTYsMTQsMTI4NTY0LDEyODU2NCwxNCwxMjg1NzcsMTI4NTgwLDE0LDEyODY0MywxMjg2NDUsMTQsMTI4NjQ5LDEyODY0OSwxNCwxMjg2NTQsMTI4NjU0LDE0LDEyODY2MCwxMjg2NjAsMTQsMTI4NjY0LDEyODY2NCwxNCwxMjg2NzUsMTI4Njc1LDE0LDEyODY4NiwxMjg2ODksMTQsMTI4Njk1LDEyODY5NiwxNCwxMjg3MDUsMTI4NzA5LDE0LDEyODcxNywxMjg3MTksMTQsMTI4NzI1LDEyODcyNSwxNCwxMjg3MzYsMTI4NzQxLDE0LDEyODc0NywxMjg3NDgsMTQsMTI4NzU1LDEyODc1NSwxNCwxMjg3NjIsMTI4NzYyLDE0LDEyODk4MSwxMjg5OTEsMTQsMTI5MDA5LDEyOTAyMywxNCwxMjkxNjAsMTI5MTY3LDE0LDEyOTI5NiwxMjkzMDQsMTQsMTI5MzIwLDEyOTMyNywxNCwxMjkzNDAsMTI5MzQyLDE0LDEyOTM1NiwxMjkzNTYsMTQsMTI5Mzg4LDEyOTM5MiwxNCwxMjkzOTksMTI5NDAwLDE0LDEyOTQwNCwxMjk0MDcsMTQsMTI5NDMyLDEyOTQ0MiwxNCwxMjk0NTQsMTI5NDU1LDE0LDEyOTQ3MywxMjk0NzQsMTQsMTI5NDg1LDEyOTQ4NywxNCwxMjk2NDgsMTI5NjUxLDE0LDEyOTY1OSwxMjk2NjAsMTQsMTI5NjcxLDEyOTY3OSwxNCwxMjk3MDksMTI5NzExLDE0LDEyOTcyOCwxMjk3MzAsMTQsMTI5NzUxLDEyOTc1MywxNCwxMjk3NzYsMTI5NzgyLDE0LDkxNzUwNSw5MTc1MDUsNCw5MTc3NjAsOTE3OTk5LDUsMTAsMTAsMywxMjcsMTU5LDQsNzY4LDg3OSw1LDE0NzEsMTQ3MSw1LDE1MzYsMTU0MSwxLDE2NDgsMTY0OCw1LDE3NjcsMTc2OCw1LDE4NDAsMTg2Niw1LDIwNzAsMjA3Myw1LDIxMzcsMjEzOSw1LDIyNzQsMjI3NCwxLDIzNjMsMjM2Myw3LDIzNzcsMjM4MCw3LDI0MDIsMjQwMyw1LDI0OTQsMjQ5NCw1LDI1MDcsMjUwOCw3LDI1NTgsMjU1OCw1LDI2MjIsMjYyNCw3LDI2NDEsMjY0MSw1LDI2OTEsMjY5MSw3LDI3NTksMjc2MCw1LDI3ODYsMjc4Nyw1LDI4NzYsMjg3Niw1LDI4ODEsMjg4NCw1LDI5MDEsMjkwMiw1LDMwMDYsMzAwNiw1LDMwMTQsMzAxNiw3LDMwNzIsMzA3Miw1LDMxMzQsMzEzNiw1LDMxNTcsMzE1OCw1LDMyNjAsMzI2MCw1LDMyNjYsMzI2Niw1LDMyNzQsMzI3NSw3LDMzMjgsMzMyOSw1LDMzOTEsMzM5Miw3LDM0MDUsMzQwNSw1LDM0NTcsMzQ1Nyw1LDM1MzYsMzUzNyw3LDM1NTEsMzU1MSw1LDM2MzYsMzY0Miw1LDM3NjQsMzc3Miw1LDM4OTUsMzg5NSw1LDM5NjcsMzk2Nyw3LDM5OTMsNDAyOCw1LDQxNDYsNDE1MSw1LDQxODIsNDE4Myw3LDQyMjYsNDIyNiw1LDQyNTMsNDI1Myw1LDQ5NTcsNDk1OSw1LDU5NDAsNTk0MCw3LDYwNzAsNjA3MCw3LDYwODcsNjA4OCw3LDYxNTgsNjE1OCw0LDY0MzIsNjQzNCw1LDY0NDgsNjQ0OSw3LDY2NzksNjY4MCw1LDY3NDIsNjc0Miw1LDY3NTQsNjc1NCw1LDY3ODMsNjc4Myw1LDY5MTIsNjkxNSw1LDY5NjYsNjk3MCw1LDY5NzgsNjk3OCw1LDcwNDIsNzA0Miw3LDcwODAsNzA4MSw1LDcxNDMsNzE0Myw3LDcxNTAsNzE1MCw3LDcyMTIsNzIxOSw1LDczODAsNzM5Miw1LDc0MTIsNzQxMiw1LDgyMDMsODIwMyw0LDgyMzIsODIzMiw0LDgyNjUsODI2NSwxNCw4NDAwLDg0MTIsNSw4NDIxLDg0MzIsNSw4NjE3LDg2MTgsMTQsOTE2Nyw5MTY3LDE0LDkyMDAsOTIwMCwxNCw5NDEwLDk0MTAsMTQsOTcyMyw5NzI2LDE0LDk3MzMsOTczMywxNCw5NzQ1LDk3NDUsMTQsOTc1Miw5NzUyLDE0LDk3NjAsOTc2MCwxNCw5NzY2LDk3NjYsMTQsOTc3NCw5Nzc0LDE0LDk3ODYsOTc4NiwxNCw5Nzk0LDk3OTQsMTQsOTgyMyw5ODIzLDE0LDk4MjgsOTgyOCwxNCw5ODMzLDk4NTAsMTQsOTg1NSw5ODU1LDE0LDk4NzUsOTg3NSwxNCw5ODgwLDk4ODAsMTQsOTg4NSw5ODg3LDE0LDk4OTYsOTg5NywxNCw5OTA2LDk5MTYsMTQsOTkyNiw5OTI3LDE0LDk5MzUsOTkzNSwxNCw5OTM5LDk5MzksMTQsOTk2Miw5OTYyLDE0LDk5NzIsOTk3MiwxNCw5OTc4LDk5NzgsMTQsOTk4Niw5OTg2LDE0LDk5OTcsOTk5NywxNCwxMDAwMiwxMDAwMiwxNCwxMDAxNywxMDAxNywxNCwxMDA1NSwxMDA1NSwxNCwxMDA3MSwxMDA3MSwxNCwxMDEzMywxMDEzNSwxNCwxMDU0OCwxMDU0OSwxNCwxMTA5MywxMTA5MywxNCwxMjMzMCwxMjMzMyw1LDEyNDQxLDEyNDQyLDUsNDI2MDgsNDI2MTAsNSw0MzAxMCw0MzAxMCw1LDQzMDQ1LDQzMDQ2LDUsNDMxODgsNDMyMDMsNyw0MzMwMiw0MzMwOSw1LDQzMzkyLDQzMzk0LDUsNDM0NDYsNDM0NDksNSw0MzQ5Myw0MzQ5Myw1LDQzNTcxLDQzNTcyLDcsNDM1OTcsNDM1OTcsNyw0MzcwMyw0MzcwNCw1LDQzNzU2LDQzNzU3LDUsNDQwMDMsNDQwMDQsNyw0NDAwOSw0NDAxMCw3LDQ0MDMzLDQ0MDU5LDEyLDQ0MDg5LDQ0MTE1LDEyLDQ0MTQ1LDQ0MTcxLDEyLDQ0MjAxLDQ0MjI3LDEyLDQ0MjU3LDQ0MjgzLDEyLDQ0MzEzLDQ0MzM5LDEyLDQ0MzY5LDQ0Mzk1LDEyLDQ0NDI1LDQ0NDUxLDEyLDQ0NDgxLDQ0NTA3LDEyLDQ0NTM3LDQ0NTYzLDEyLDQ0NTkzLDQ0NjE5LDEyLDQ0NjQ5LDQ0Njc1LDEyLDQ0NzA1LDQ0NzMxLDEyLDQ0NzYxLDQ0Nzg3LDEyLDQ0ODE3LDQ0ODQzLDEyLDQ0ODczLDQ0ODk5LDEyLDQ0OTI5LDQ0OTU1LDEyLDQ0OTg1LDQ1MDExLDEyLDQ1MDQxLDQ1MDY3LDEyLDQ1MDk3LDQ1MTIzLDEyLDQ1MTUzLDQ1MTc5LDEyLDQ1MjA5LDQ1MjM1LDEyLDQ1MjY1LDQ1MjkxLDEyLDQ1MzIxLDQ1MzQ3LDEyLDQ1Mzc3LDQ1NDAzLDEyLDQ1NDMzLDQ1NDU5LDEyLDQ1NDg5LDQ1NTE1LDEyLDQ1NTQ1LDQ1NTcxLDEyLDQ1NjAxLDQ1NjI3LDEyLDQ1NjU3LDQ1NjgzLDEyLDQ1NzEzLDQ1NzM5LDEyLDQ1NzY5LDQ1Nzk1LDEyLDQ1ODI1LDQ1ODUxLDEyLDQ1ODgxLDQ1OTA3LDEyLDQ1OTM3LDQ1OTYzLDEyLDQ1OTkzLDQ2MDE5LDEyLDQ2MDQ5LDQ2MDc1LDEyLDQ2MTA1LDQ2MTMxLDEyLDQ2MTYxLDQ2MTg3LDEyLDQ2MjE3LDQ2MjQzLDEyLDQ2MjczLDQ2Mjk5LDEyLDQ2MzI5LDQ2MzU1LDEyLDQ2Mzg1LDQ2NDExLDEyLDQ2NDQxLDQ2NDY3LDEyLDQ2NDk3LDQ2NTIzLDEyLDQ2NTUzLDQ2NTc5LDEyLDQ2NjA5LDQ2NjM1LDEyLDQ2NjY1LDQ2NjkxLDEyLDQ2NzIxLDQ2NzQ3LDEyLDQ2Nzc3LDQ2ODAzLDEyLDQ2ODMzLDQ2ODU5LDEyLDQ2ODg5LDQ2OTE1LDEyLDQ2OTQ1LDQ2OTcxLDEyLDQ3MDAxLDQ3MDI3LDEyLDQ3MDU3LDQ3MDgzLDEyLDQ3MTEzLDQ3MTM5LDEyLDQ3MTY5LDQ3MTk1LDEyLDQ3MjI1LDQ3MjUxLDEyLDQ3MjgxLDQ3MzA3LDEyLDQ3MzM3LDQ3MzYzLDEyLDQ3MzkzLDQ3NDE5LDEyLDQ3NDQ5LDQ3NDc1LDEyLDQ3NTA1LDQ3NTMxLDEyLDQ3NTYxLDQ3NTg3LDEyLDQ3NjE3LDQ3NjQzLDEyLDQ3NjczLDQ3Njk5LDEyLDQ3NzI5LDQ3NzU1LDEyLDQ3Nzg1LDQ3ODExLDEyLDQ3ODQxLDQ3ODY3LDEyLDQ3ODk3LDQ3OTIzLDEyLDQ3OTUzLDQ3OTc5LDEyLDQ4MDA5LDQ4MDM1LDEyLDQ4MDY1LDQ4MDkxLDEyLDQ4MTIxLDQ4MTQ3LDEyLDQ4MTc3LDQ4MjAzLDEyLDQ4MjMzLDQ4MjU5LDEyLDQ4Mjg5LDQ4MzE1LDEyLDQ4MzQ1LDQ4MzcxLDEyLDQ4NDAxLDQ4NDI3LDEyLDQ4NDU3LDQ4NDgzLDEyLDQ4NTEzLDQ4NTM5LDEyLDQ4NTY5LDQ4NTk1LDEyLDQ4NjI1LDQ4NjUxLDEyLDQ4NjgxLDQ4NzA3LDEyLDQ4NzM3LDQ4NzYzLDEyLDQ4NzkzLDQ4ODE5LDEyLDQ4ODQ5LDQ4ODc1LDEyLDQ4OTA1LDQ4OTMxLDEyLDQ4OTYxLDQ4OTg3LDEyLDQ5MDE3LDQ5MDQzLDEyLDQ5MDczLDQ5MDk5LDEyLDQ5MTI5LDQ5MTU1LDEyLDQ5MTg1LDQ5MjExLDEyLDQ5MjQxLDQ5MjY3LDEyLDQ5Mjk3LDQ5MzIzLDEyLDQ5MzUzLDQ5Mzc5LDEyLDQ5NDA5LDQ5NDM1LDEyLDQ5NDY1LDQ5NDkxLDEyLDQ5NTIxLDQ5NTQ3LDEyLDQ5NTc3LDQ5NjAzLDEyLDQ5NjMzLDQ5NjU5LDEyLDQ5Njg5LDQ5NzE1LDEyLDQ5NzQ1LDQ5NzcxLDEyLDQ5ODAxLDQ5ODI3LDEyLDQ5ODU3LDQ5ODgzLDEyLDQ5OTEzLDQ5OTM5LDEyLDQ5OTY5LDQ5OTk1LDEyLDUwMDI1LDUwMDUxLDEyLDUwMDgxLDUwMTA3LDEyLDUwMTM3LDUwMTYzLDEyLDUwMTkzLDUwMjE5LDEyLDUwMjQ5LDUwMjc1LDEyLDUwMzA1LDUwMzMxLDEyLDUwMzYxLDUwMzg3LDEyLDUwNDE3LDUwNDQzLDEyLDUwNDczLDUwNDk5LDEyLDUwNTI5LDUwNTU1LDEyLDUwNTg1LDUwNjExLDEyLDUwNjQxLDUwNjY3LDEyLDUwNjk3LDUwNzIzLDEyLDUwNzUzLDUwNzc5LDEyLDUwODA5LDUwODM1LDEyLDUwODY1LDUwODkxLDEyLDUwOTIxLDUwOTQ3LDEyLDUwOTc3LDUxMDAzLDEyLDUxMDMzLDUxMDU5LDEyLDUxMDg5LDUxMTE1LDEyLDUxMTQ1LDUxMTcxLDEyLDUxMjAxLDUxMjI3LDEyLDUxMjU3LDUxMjgzLDEyLDUxMzEzLDUxMzM5LDEyLDUxMzY5LDUxMzk1LDEyLDUxNDI1LDUxNDUxLDEyLDUxNDgxLDUxNTA3LDEyLDUxNTM3LDUxNTYzLDEyLDUxNTkzLDUxNjE5LDEyLDUxNjQ5LDUxNjc1LDEyLDUxNzA1LDUxNzMxLDEyLDUxNzYxLDUxNzg3LDEyLDUxODE3LDUxODQzLDEyLDUxODczLDUxODk5LDEyLDUxOTI5LDUxOTU1LDEyLDUxOTg1LDUyMDExLDEyLDUyMDQxLDUyMDY3LDEyLDUyMDk3LDUyMTIzLDEyLDUyMTUzLDUyMTc5LDEyLDUyMjA5LDUyMjM1LDEyLDUyMjY1LDUyMjkxLDEyLDUyMzIxLDUyMzQ3LDEyLDUyMzc3LDUyNDAzLDEyLDUyNDMzLDUyNDU5LDEyLDUyNDg5LDUyNTE1LDEyLDUyNTQ1LDUyNTcxLDEyLDUyNjAxLDUyNjI3LDEyLDUyNjU3LDUyNjgzLDEyLDUyNzEzLDUyNzM5LDEyLDUyNzY5LDUyNzk1LDEyLDUyODI1LDUyODUxLDEyLDUyODgxLDUyOTA3LDEyLDUyOTM3LDUyOTYzLDEyLDUyOTkzLDUzMDE5LDEyLDUzMDQ5LDUzMDc1LDEyLDUzMTA1LDUzMTMxLDEyLDUzMTYxLDUzMTg3LDEyLDUzMjE3LDUzMjQzLDEyLDUzMjczLDUzMjk5LDEyLDUzMzI5LDUzMzU1LDEyLDUzMzg1LDUzNDExLDEyLDUzNDQxLDUzNDY3LDEyLDUzNDk3LDUzNTIzLDEyLDUzNTUzLDUzNTc5LDEyLDUzNjA5LDUzNjM1LDEyLDUzNjY1LDUzNjkxLDEyLDUzNzIxLDUzNzQ3LDEyLDUzNzc3LDUzODAzLDEyLDUzODMzLDUzODU5LDEyLDUzODg5LDUzOTE1LDEyLDUzOTQ1LDUzOTcxLDEyLDU0MDAxLDU0MDI3LDEyLDU0MDU3LDU0MDgzLDEyLDU0MTEzLDU0MTM5LDEyLDU0MTY5LDU0MTk1LDEyLDU0MjI1LDU0MjUxLDEyLDU0MjgxLDU0MzA3LDEyLDU0MzM3LDU0MzYzLDEyLDU0MzkzLDU0NDE5LDEyLDU0NDQ5LDU0NDc1LDEyLDU0NTA1LDU0NTMxLDEyLDU0NTYxLDU0NTg3LDEyLDU0NjE3LDU0NjQzLDEyLDU0NjczLDU0Njk5LDEyLDU0NzI5LDU0NzU1LDEyLDU0Nzg1LDU0ODExLDEyLDU0ODQxLDU0ODY3LDEyLDU0ODk3LDU0OTIzLDEyLDU0OTUzLDU0OTc5LDEyLDU1MDA5LDU1MDM1LDEyLDU1MDY1LDU1MDkxLDEyLDU1MTIxLDU1MTQ3LDEyLDU1MTc3LDU1MjAzLDEyLDY1MDI0LDY1MDM5LDUsNjU1MjAsNjU1MjgsNCw2NjQyMiw2NjQyNiw1LDY4MTUyLDY4MTU0LDUsNjkyOTEsNjkyOTIsNSw2OTYzMyw2OTYzMyw1LDY5NzQ3LDY5NzQ4LDUsNjk4MTEsNjk4MTQsNSw2OTgyNiw2OTgyNiw1LDY5OTMyLDY5OTMyLDcsNzAwMTYsNzAwMTcsNSw3MDA3OSw3MDA4MCw3LDcwMDk1LDcwMDk1LDUsNzAxOTYsNzAxOTYsNSw3MDM2Nyw3MDM2Nyw1LDcwNDAyLDcwNDAzLDcsNzA0NjQsNzA0NjQsNSw3MDQ4Nyw3MDQ4Nyw1LDcwNzA5LDcwNzExLDcsNzA3MjUsNzA3MjUsNyw3MDgzMyw3MDgzNCw3LDcwODQzLDcwODQ0LDcsNzA4NDksNzA4NDksNyw3MTA5MCw3MTA5Myw1LDcxMTAzLDcxMTA0LDUsNzEyMjcsNzEyMjgsNyw3MTMzOSw3MTMzOSw1LDcxMzQ0LDcxMzQ5LDUsNzE0NTgsNzE0NjEsNSw3MTcyNyw3MTczNSw1LDcxOTg1LDcxOTg5LDcsNzE5OTgsNzE5OTgsNSw3MjAwMiw3MjAwMiw3LDcyMTU0LDcyMTU1LDUsNzIxOTMsNzIyMDIsNSw3MjI1MSw3MjI1NCw1LDcyMjgxLDcyMjgzLDUsNzIzNDQsNzIzNDUsNSw3Mjc2Niw3Mjc2Niw3LDcyODc0LDcyODgwLDUsNzI4ODUsNzI4ODYsNSw3MzAyMyw3MzAyOSw1LDczMTA0LDczMTA1LDUsNzMxMTEsNzMxMTEsNSw5MjkxMiw5MjkxNiw1LDk0MDk1LDk0MDk4LDUsMTEzODI0LDExMzgyNyw0LDExOTE0MiwxMTkxNDIsNywxMTkxNTUsMTE5MTYyLDQsMTE5MzYyLDExOTM2NCw1LDEyMTQ3NiwxMjE0NzYsNSwxMjI4ODgsMTIyOTA0LDUsMTIzMTg0LDEyMzE5MCw1LDEyNTI1MiwxMjUyNTgsNSwxMjcxODMsMTI3MTgzLDE0LDEyNzM0MCwxMjczNDMsMTQsMTI3Mzc3LDEyNzM4NiwxNCwxMjc0OTEsMTI3NTAzLDE0LDEyNzU0OCwxMjc1NTEsMTQsMTI3NzQ0LDEyNzc1NiwxNCwxMjc3NjEsMTI3NzYxLDE0LDEyNzc2OSwxMjc3NjksMTQsMTI3NzczLDEyNzc3NCwxNCwxMjc3ODAsMTI3Nzg4LDE0LDEyNzc5NiwxMjc3OTcsMTQsMTI3ODIwLDEyNzgyMywxNCwxMjc4NjksMTI3ODY5LDE0LDEyNzg5NCwxMjc4OTUsMTQsMTI3OTAyLDEyNzkwMywxNCwxMjc5NDMsMTI3OTQzLDE0LDEyNzk0NywxMjc5NTAsMTQsMTI3OTcyLDEyNzk3MiwxNCwxMjc5ODgsMTI3OTg4LDE0LDEyNzk5MiwxMjc5OTQsMTQsMTI4MDA5LDEyODAxMSwxNCwxMjgwMTksMTI4MDE5LDE0LDEyODAyMywxMjgwNDEsMTQsMTI4MDY0LDEyODA2NCwxNCwxMjgxMDIsMTI4MTA3LDE0LDEyODE3NCwxMjgxODEsMTQsMTI4MjM4LDEyODIzOCwxNCwxMjgyNDYsMTI4MjQ3LDE0LDEyODI1NCwxMjgyNTQsMTQsMTI4MjY0LDEyODI2NCwxNCwxMjgyNzgsMTI4Mjk5LDE0LDEyODMyOSwxMjgzMzAsMTQsMTI4MzQ4LDEyODM1OSwxNCwxMjgzNzEsMTI4Mzc3LDE0LDEyODM5MiwxMjgzOTMsMTQsMTI4NDAxLDEyODQwNCwxNCwxMjg0MjEsMTI4NDIxLDE0LDEyODQzMywxMjg0MzQsMTQsMTI4NDUwLDEyODQ1MiwxNCwxMjg0NzYsMTI4NDc4LDE0LDEyODQ4MywxMjg0ODMsMTQsMTI4NDk1LDEyODQ5NSwxNCwxMjg1MDYsMTI4NTA2LDE0LDEyODUxOSwxMjg1MjAsMTQsMTI4NTI4LDEyODUyOCwxNCwxMjg1MzQsMTI4NTM0LDE0LDEyODUzOCwxMjg1MzgsMTQsMTI4NTQwLDEyODU0MiwxNCwxMjg1NDQsMTI4NTQ5LDE0LDEyODU1MiwxMjg1NTUsMTQsMTI4NTU3LDEyODU1NywxNCwxMjg1NjAsMTI4NTYzLDE0LDEyODU2NSwxMjg1NjUsMTQsMTI4NTY3LDEyODU3NiwxNCwxMjg1ODEsMTI4NTkxLDE0LDEyODY0MSwxMjg2NDIsMTQsMTI4NjQ2LDEyODY0NiwxNCwxMjg2NDgsMTI4NjQ4LDE0LDEyODY1MCwxMjg2NTEsMTQsMTI4NjUzLDEyODY1MywxNCwxMjg2NTUsMTI4NjU1LDE0LDEyODY1NywxMjg2NTksMTQsMTI4NjYxLDEyODY2MSwxNCwxMjg2NjMsMTI4NjYzLDE0LDEyODY2NSwxMjg2NjYsMTQsMTI4Njc0LDEyODY3NCwxNCwxMjg2NzYsMTI4Njc3LDE0LDEyODY3OSwxMjg2ODUsMTQsMTI4NjkwLDEyODY5MCwxNCwxMjg2OTQsMTI4Njk0LDE0LDEyODY5NywxMjg3MDIsMTQsMTI4NzA0LDEyODcwNCwxNCwxMjg3MTAsMTI4NzE0LDE0LDEyODcxNiwxMjg3MTYsMTQsMTI4NzIwLDEyODcyMCwxNCwxMjg3MjMsMTI4NzI0LDE0LDEyODcyNiwxMjg3MjcsMTQsMTI4NzMzLDEyODczNSwxNCwxMjg3NDIsMTI4NzQ0LDE0LDEyODc0NiwxMjg3NDYsMTQsMTI4NzQ5LDEyODc1MSwxNCwxMjg3NTMsMTI4NzU0LDE0LDEyODc1NiwxMjg3NTgsMTQsMTI4NzYxLDEyODc2MSwxNCwxMjg3NjMsMTI4NzY0LDE0LDEyODg4NCwxMjg4OTUsMTQsMTI4OTkyLDEyOTAwMywxNCwxMjkwMDgsMTI5MDA4LDE0LDEyOTAzNiwxMjkwMzksMTQsMTI5MTE0LDEyOTExOSwxNCwxMjkxOTgsMTI5Mjc5LDE0LDEyOTI5MywxMjkyOTUsMTQsMTI5MzA1LDEyOTMxMCwxNCwxMjkzMTIsMTI5MzE5LDE0LDEyOTMyOCwxMjkzMjgsMTQsMTI5MzMxLDEyOTMzOCwxNCwxMjkzNDMsMTI5MzQzLDE0LDEyOTM1MSwxMjkzNTUsMTQsMTI5MzU3LDEyOTM1OSwxNCwxMjkzNzUsMTI5Mzg3LDE0LDEyOTM5MywxMjkzOTMsMTQsMTI5Mzk1LDEyOTM5OCwxNCwxMjk0MDEsMTI5NDAxLDE0LDEyOTQwMywxMjk0MDMsMTQsMTI5NDA4LDEyOTQxMiwxNCwxMjk0MjYsMTI5NDMxLDE0LDEyOTQ0MywxMjk0NDQsMTQsMTI5NDUxLDEyOTQ1MywxNCwxMjk0NTYsMTI5NDY1LDE0LDEyOTQ3MiwxMjk0NzIsMTQsMTI5NDc1LDEyOTQ4MiwxNCwxMjk0ODQsMTI5NDg0LDE0LDEyOTQ4OCwxMjk1MTAsMTQsMTI5NTM2LDEyOTY0NywxNCwxMjk2NTIsMTI5NjUyLDE0LDEyOTY1NiwxMjk2NTgsMTQsMTI5NjYxLDEyOTY2MywxNCwxMjk2NjcsMTI5NjcwLDE0LDEyOTY4MCwxMjk2ODUsMTQsMTI5NzA1LDEyOTcwOCwxNCwxMjk3MTIsMTI5NzE4LDE0LDEyOTcyMywxMjk3MjcsMTQsMTI5NzMxLDEyOTczMywxNCwxMjk3NDQsMTI5NzUwLDE0LDEyOTc1NCwxMjk3NTksMTQsMTI5NzY4LDEyOTc3NSwxNCwxMjk3ODMsMTI5NzkxLDE0LDkxNzUwNCw5MTc1MDQsNCw5MTc1MDYsOTE3NTM1LDQsOTE3NjMyLDkxNzc1OSw0LDkxODAwMCw5MjE1OTksNCwwLDksNCwxMSwxMiw0LDE0LDMxLDQsMTY5LDE2OSwxNCwxNzQsMTc0LDE0LDExNTUsMTE1OSw1LDE0MjUsMTQ2OSw1LDE0NzMsMTQ3NCw1LDE0NzksMTQ3OSw1LDE1NTIsMTU2Miw1LDE2MTEsMTYzMSw1LDE3NTAsMTc1Niw1LDE3NTksMTc2NCw1LDE3NzAsMTc3Myw1LDE4MDksMTgwOSw1LDE5NTgsMTk2OCw1LDIwNDUsMjA0NSw1LDIwNzUsMjA4Myw1LDIwODksMjA5Myw1LDIxOTIsMjE5MywxLDIyNTAsMjI3Myw1LDIyNzUsMjMwNiw1LDIzNjIsMjM2Miw1LDIzNjQsMjM2NCw1LDIzNjksMjM3Niw1LDIzODEsMjM4MSw1LDIzODUsMjM5MSw1LDI0MzMsMjQzMyw1LDI0OTIsMjQ5Miw1LDI0OTUsMjQ5Niw3LDI1MDMsMjUwNCw3LDI1MDksMjUwOSw1LDI1MzAsMjUzMSw1LDI1NjEsMjU2Miw1LDI2MjAsMjYyMCw1LDI2MjUsMjYyNiw1LDI2MzUsMjYzNyw1LDI2NzIsMjY3Myw1LDI2ODksMjY5MCw1LDI3NDgsMjc0OCw1LDI3NTMsMjc1Nyw1LDI3NjEsMjc2MSw3LDI3NjUsMjc2NSw1LDI4MTAsMjgxNSw1LDI4MTgsMjgxOSw3LDI4NzgsMjg3OCw1LDI4ODAsMjg4MCw3LDI4ODcsMjg4OCw3LDI4OTMsMjg5Myw1LDI5MDMsMjkwMyw1LDI5NDYsMjk0Niw1LDMwMDcsMzAwNyw3LDMwMDksMzAxMCw3LDMwMTgsMzAyMCw3LDMwMzEsMzAzMSw1LDMwNzMsMzA3NSw3LDMxMzIsMzEzMiw1LDMxMzcsMzE0MCw3LDMxNDYsMzE0OSw1LDMxNzAsMzE3MSw1LDMyMDIsMzIwMyw3LDMyNjIsMzI2Miw3LDMyNjQsMzI2NSw3LDMyNjcsMzI2OCw3LDMyNzEsMzI3Miw3LDMyNzYsMzI3Nyw1LDMyOTgsMzI5OSw1LDMzMzAsMzMzMSw3LDMzOTAsMzM5MCw1LDMzOTMsMzM5Niw1LDM0MDIsMzQwNCw3LDM0MDYsMzQwNiwxLDM0MjYsMzQyNyw1LDM0NTgsMzQ1OSw3LDM1MzUsMzUzNSw1LDM1MzgsMzU0MCw1LDM1NDQsMzU1MCw3LDM1NzAsMzU3MSw3LDM2MzUsMzYzNSw3LDM2NTUsMzY2Miw1LDM3NjMsMzc2Myw3LDM3ODQsMzc4OSw1LDM4OTMsMzg5Myw1LDM4OTcsMzg5Nyw1LDM5NTMsMzk2Niw1LDM5NjgsMzk3Miw1LDM5ODEsMzk5MSw1LDQwMzgsNDAzOCw1LDQxNDUsNDE0NSw3LDQxNTMsNDE1NCw1LDQxNTcsNDE1OCw1LDQxODQsNDE4NSw1LDQyMDksNDIxMiw1LDQyMjgsNDIyOCw3LDQyMzcsNDIzNyw1LDQzNTIsNDQ0Nyw4LDQ1MjAsNDYwNywxMCw1OTA2LDU5MDgsNSw1OTM4LDU5MzksNSw1OTcwLDU5NzEsNSw2MDY4LDYwNjksNSw2MDcxLDYwNzcsNSw2MDg2LDYwODYsNSw2MDg5LDYwOTksNSw2MTU1LDYxNTcsNSw2MTU5LDYxNTksNSw2MzEzLDYzMTMsNSw2NDM1LDY0MzgsNyw2NDQxLDY0NDMsNyw2NDUwLDY0NTAsNSw2NDU3LDY0NTksNSw2NjgxLDY2ODIsNyw2NzQxLDY3NDEsNyw2NzQzLDY3NDMsNyw2NzUyLDY3NTIsNSw2NzU3LDY3NjQsNSw2NzcxLDY3ODAsNSw2ODMyLDY4NDUsNSw2ODQ3LDY4NjIsNSw2OTE2LDY5MTYsNyw2OTY1LDY5NjUsNSw2OTcxLDY5NzEsNyw2OTczLDY5NzcsNyw2OTc5LDY5ODAsNyw3MDQwLDcwNDEsNSw3MDczLDcwNzMsNyw3MDc4LDcwNzksNyw3MDgyLDcwODIsNyw3MTQyLDcxNDIsNSw3MTQ0LDcxNDUsNSw3MTQ5LDcxNDksNSw3MTUxLDcxNTMsNSw3MjA0LDcyMTEsNyw3MjIwLDcyMjEsNyw3Mzc2LDczNzgsNSw3MzkzLDczOTMsNyw3NDA1LDc0MDUsNSw3NDE1LDc0MTUsNyw3NjE2LDc2NzksNSw4MjA0LDgyMDQsNSw4MjA2LDgyMDcsNCw4MjMzLDgyMzMsNCw4MjUyLDgyNTIsMTQsODI4OCw4MjkyLDQsODI5NCw4MzAzLDQsODQxMyw4NDE2LDUsODQxOCw4NDIwLDUsODQ4Miw4NDgyLDE0LDg1OTYsODYwMSwxNCw4OTg2LDg5ODcsMTQsOTA5Niw5MDk2LDE0LDkxOTMsOTE5NiwxNCw5MTk5LDkxOTksMTQsOTIwMSw5MjAyLDE0LDkyMDgsOTIxMCwxNCw5NjQyLDk2NDMsMTQsOTY2NCw5NjY0LDE0LDk3MjgsOTcyOSwxNCw5NzMyLDk3MzIsMTQsOTczNSw5NzQxLDE0LDk3NDMsOTc0NCwxNCw5NzQ2LDk3NDYsMTQsOTc1MCw5NzUxLDE0LDk3NTMsOTc1NiwxNCw5NzU4LDk3NTksMTQsOTc2MSw5NzYxLDE0LDk3NjQsOTc2NSwxNCw5NzY3LDk3NjksMTQsOTc3MSw5NzczLDE0LDk3NzUsOTc3NSwxNCw5Nzg0LDk3ODUsMTQsOTc4Nyw5NzkxLDE0LDk3OTMsOTc5MywxNCw5Nzk1LDk3OTksMTQsOTgxMiw5ODIyLDE0LDk4MjQsOTgyNCwxNCw5ODI3LDk4MjcsMTQsOTgyOSw5ODMwLDE0LDk4MzIsOTgzMiwxNCw5ODUxLDk4NTEsMTQsOTg1NCw5ODU0LDE0LDk4NTYsOTg2MSwxNCw5ODc0LDk4NzQsMTQsOTg3Niw5ODc2LDE0LDk4NzgsOTg3OSwxNCw5ODgxLDk4ODEsMTQsOTg4Myw5ODg0LDE0LDk4ODgsOTg4OSwxNCw5ODk1LDk4OTUsMTQsOTg5OCw5ODk5LDE0LDk5MDQsOTkwNSwxNCw5OTE3LDk5MTgsMTQsOTkyNCw5OTI1LDE0LDk5MjgsOTkyOCwxNCw5OTM0LDk5MzQsMTQsOTkzNiw5OTM2LDE0LDk5MzgsOTkzOCwxNCw5OTQwLDk5NDAsMTQsOTk2MSw5OTYxLDE0LDk5NjMsOTk2NywxNCw5OTcwLDk5NzEsMTQsOTk3Myw5OTczLDE0LDk5NzUsOTk3NywxNCw5OTc5LDk5ODAsMTQsOTk4Miw5OTg1LDE0LDk5ODcsOTk4OCwxNCw5OTkyLDk5OTYsMTQsOTk5OCw5OTk4LDE0LDEwMDAwLDEwMDAxLDE0LDEwMDA0LDEwMDA0LDE0LDEwMDEzLDEwMDEzLDE0LDEwMDI0LDEwMDI0LDE0LDEwMDUyLDEwMDUyLDE0LDEwMDYwLDEwMDYwLDE0LDEwMDY3LDEwMDY5LDE0LDEwMDgzLDEwMDgzLDE0LDEwMDg1LDEwMDg3LDE0LDEwMTQ1LDEwMTQ1LDE0LDEwMTc1LDEwMTc1LDE0LDExMDEzLDExMDE1LDE0LDExMDg4LDExMDg4LDE0LDExNTAzLDExNTA1LDUsMTE3NDQsMTE3NzUsNSwxMjMzNCwxMjMzNSw1LDEyMzQ5LDEyMzQ5LDE0LDEyOTUxLDEyOTUxLDE0LDQyNjA3LDQyNjA3LDUsNDI2MTIsNDI2MjEsNSw0MjczNiw0MjczNyw1LDQzMDE0LDQzMDE0LDUsNDMwNDMsNDMwNDQsNyw0MzA0Nyw0MzA0Nyw3LDQzMTM2LDQzMTM3LDcsNDMyMDQsNDMyMDUsNSw0MzI2Myw0MzI2Myw1LDQzMzM1LDQzMzQ1LDUsNDMzNjAsNDMzODgsOCw0MzM5NSw0MzM5NSw3LDQzNDQ0LDQzNDQ1LDcsNDM0NTAsNDM0NTEsNyw0MzQ1NCw0MzQ1Niw3LDQzNTYxLDQzNTY2LDUsNDM1NjksNDM1NzAsNSw0MzU3Myw0MzU3NCw1LDQzNTk2LDQzNTk2LDUsNDM2NDQsNDM2NDQsNSw0MzY5OCw0MzcwMCw1LDQzNzEwLDQzNzExLDUsNDM3NTUsNDM3NTUsNyw0Mzc1OCw0Mzc1OSw3LDQzNzY2LDQzNzY2LDUsNDQwMDUsNDQwMDUsNSw0NDAwOCw0NDAwOCw1LDQ0MDEyLDQ0MDEyLDcsNDQwMzIsNDQwMzIsMTEsNDQwNjAsNDQwNjAsMTEsNDQwODgsNDQwODgsMTEsNDQxMTYsNDQxMTYsMTEsNDQxNDQsNDQxNDQsMTEsNDQxNzIsNDQxNzIsMTEsNDQyMDAsNDQyMDAsMTEsNDQyMjgsNDQyMjgsMTEsNDQyNTYsNDQyNTYsMTEsNDQyODQsNDQyODQsMTEsNDQzMTIsNDQzMTIsMTEsNDQzNDAsNDQzNDAsMTEsNDQzNjgsNDQzNjgsMTEsNDQzOTYsNDQzOTYsMTEsNDQ0MjQsNDQ0MjQsMTEsNDQ0NTIsNDQ0NTIsMTEsNDQ0ODAsNDQ0ODAsMTEsNDQ1MDgsNDQ1MDgsMTEsNDQ1MzYsNDQ1MzYsMTEsNDQ1NjQsNDQ1NjQsMTEsNDQ1OTIsNDQ1OTIsMTEsNDQ2MjAsNDQ2MjAsMTEsNDQ2NDgsNDQ2NDgsMTEsNDQ2NzYsNDQ2NzYsMTEsNDQ3MDQsNDQ3MDQsMTEsNDQ3MzIsNDQ3MzIsMTEsNDQ3NjAsNDQ3NjAsMTEsNDQ3ODgsNDQ3ODgsMTEsNDQ4MTYsNDQ4MTYsMTEsNDQ4NDQsNDQ4NDQsMTEsNDQ4NzIsNDQ4NzIsMTEsNDQ5MDAsNDQ5MDAsMTEsNDQ5MjgsNDQ5MjgsMTEsNDQ5NTYsNDQ5NTYsMTEsNDQ5ODQsNDQ5ODQsMTEsNDUwMTIsNDUwMTIsMTEsNDUwNDAsNDUwNDAsMTEsNDUwNjgsNDUwNjgsMTEsNDUwOTYsNDUwOTYsMTEsNDUxMjQsNDUxMjQsMTEsNDUxNTIsNDUxNTIsMTEsNDUxODAsNDUxODAsMTEsNDUyMDgsNDUyMDgsMTEsNDUyMzYsNDUyMzYsMTEsNDUyNjQsNDUyNjQsMTEsNDUyOTIsNDUyOTIsMTEsNDUzMjAsNDUzMjAsMTEsNDUzNDgsNDUzNDgsMTEsNDUzNzYsNDUzNzYsMTEsNDU0MDQsNDU0MDQsMTEsNDU0MzIsNDU0MzIsMTEsNDU0NjAsNDU0NjAsMTEsNDU0ODgsNDU0ODgsMTEsNDU1MTYsNDU1MTYsMTEsNDU1NDQsNDU1NDQsMTEsNDU1NzIsNDU1NzIsMTEsNDU2MDAsNDU2MDAsMTEsNDU2MjgsNDU2MjgsMTEsNDU2NTYsNDU2NTYsMTEsNDU2ODQsNDU2ODQsMTEsNDU3MTIsNDU3MTIsMTEsNDU3NDAsNDU3NDAsMTEsNDU3NjgsNDU3NjgsMTEsNDU3OTYsNDU3OTYsMTEsNDU4MjQsNDU4MjQsMTEsNDU4NTIsNDU4NTIsMTEsNDU4ODAsNDU4ODAsMTEsNDU5MDgsNDU5MDgsMTEsNDU5MzYsNDU5MzYsMTEsNDU5NjQsNDU5NjQsMTEsNDU5OTIsNDU5OTIsMTEsNDYwMjAsNDYwMjAsMTEsNDYwNDgsNDYwNDgsMTEsNDYwNzYsNDYwNzYsMTEsNDYxMDQsNDYxMDQsMTEsNDYxMzIsNDYxMzIsMTEsNDYxNjAsNDYxNjAsMTEsNDYxODgsNDYxODgsMTEsNDYyMTYsNDYyMTYsMTEsNDYyNDQsNDYyNDQsMTEsNDYyNzIsNDYyNzIsMTEsNDYzMDAsNDYzMDAsMTEsNDYzMjgsNDYzMjgsMTEsNDYzNTYsNDYzNTYsMTEsNDYzODQsNDYzODQsMTEsNDY0MTIsNDY0MTIsMTEsNDY0NDAsNDY0NDAsMTEsNDY0NjgsNDY0NjgsMTEsNDY0OTYsNDY0OTYsMTEsNDY1MjQsNDY1MjQsMTEsNDY1NTIsNDY1NTIsMTEsNDY1ODAsNDY1ODAsMTEsNDY2MDgsNDY2MDgsMTEsNDY2MzYsNDY2MzYsMTEsNDY2NjQsNDY2NjQsMTEsNDY2OTIsNDY2OTIsMTEsNDY3MjAsNDY3MjAsMTEsNDY3NDgsNDY3NDgsMTEsNDY3NzYsNDY3NzYsMTEsNDY4MDQsNDY4MDQsMTEsNDY4MzIsNDY4MzIsMTEsNDY4NjAsNDY4NjAsMTEsNDY4ODgsNDY4ODgsMTEsNDY5MTYsNDY5MTYsMTEsNDY5NDQsNDY5NDQsMTEsNDY5NzIsNDY5NzIsMTEsNDcwMDAsNDcwMDAsMTEsNDcwMjgsNDcwMjgsMTEsNDcwNTYsNDcwNTYsMTEsNDcwODQsNDcwODQsMTEsNDcxMTIsNDcxMTIsMTEsNDcxNDAsNDcxNDAsMTEsNDcxNjgsNDcxNjgsMTEsNDcxOTYsNDcxOTYsMTEsNDcyMjQsNDcyMjQsMTEsNDcyNTIsNDcyNTIsMTEsNDcyODAsNDcyODAsMTEsNDczMDgsNDczMDgsMTEsNDczMzYsNDczMzYsMTEsNDczNjQsNDczNjQsMTEsNDczOTIsNDczOTIsMTEsNDc0MjAsNDc0MjAsMTEsNDc0NDgsNDc0NDgsMTEsNDc0NzYsNDc0NzYsMTEsNDc1MDQsNDc1MDQsMTEsNDc1MzIsNDc1MzIsMTEsNDc1NjAsNDc1NjAsMTEsNDc1ODgsNDc1ODgsMTEsNDc2MTYsNDc2MTYsMTEsNDc2NDQsNDc2NDQsMTEsNDc2NzIsNDc2NzIsMTEsNDc3MDAsNDc3MDAsMTEsNDc3MjgsNDc3MjgsMTEsNDc3NTYsNDc3NTYsMTEsNDc3ODQsNDc3ODQsMTEsNDc4MTIsNDc4MTIsMTEsNDc4NDAsNDc4NDAsMTEsNDc4NjgsNDc4NjgsMTEsNDc4OTYsNDc4OTYsMTEsNDc5MjQsNDc5MjQsMTEsNDc5NTIsNDc5NTIsMTEsNDc5ODAsNDc5ODAsMTEsNDgwMDgsNDgwMDgsMTEsNDgwMzYsNDgwMzYsMTEsNDgwNjQsNDgwNjQsMTEsNDgwOTIsNDgwOTIsMTEsNDgxMjAsNDgxMjAsMTEsNDgxNDgsNDgxNDgsMTEsNDgxNzYsNDgxNzYsMTEsNDgyMDQsNDgyMDQsMTEsNDgyMzIsNDgyMzIsMTEsNDgyNjAsNDgyNjAsMTEsNDgyODgsNDgyODgsMTEsNDgzMTYsNDgzMTYsMTEsNDgzNDQsNDgzNDQsMTEsNDgzNzIsNDgzNzIsMTEsNDg0MDAsNDg0MDAsMTEsNDg0MjgsNDg0MjgsMTEsNDg0NTYsNDg0NTYsMTEsNDg0ODQsNDg0ODQsMTEsNDg1MTIsNDg1MTIsMTEsNDg1NDAsNDg1NDAsMTEsNDg1NjgsNDg1NjgsMTEsNDg1OTYsNDg1OTYsMTEsNDg2MjQsNDg2MjQsMTEsNDg2NTIsNDg2NTIsMTEsNDg2ODAsNDg2ODAsMTEsNDg3MDgsNDg3MDgsMTEsNDg3MzYsNDg3MzYsMTEsNDg3NjQsNDg3NjQsMTEsNDg3OTIsNDg3OTIsMTEsNDg4MjAsNDg4MjAsMTEsNDg4NDgsNDg4NDgsMTEsNDg4NzYsNDg4NzYsMTEsNDg5MDQsNDg5MDQsMTEsNDg5MzIsNDg5MzIsMTEsNDg5NjAsNDg5NjAsMTEsNDg5ODgsNDg5ODgsMTEsNDkwMTYsNDkwMTYsMTEsNDkwNDQsNDkwNDQsMTEsNDkwNzIsNDkwNzIsMTEsNDkxMDAsNDkxMDAsMTEsNDkxMjgsNDkxMjgsMTEsNDkxNTYsNDkxNTYsMTEsNDkxODQsNDkxODQsMTEsNDkyMTIsNDkyMTIsMTEsNDkyNDAsNDkyNDAsMTEsNDkyNjgsNDkyNjgsMTEsNDkyOTYsNDkyOTYsMTEsNDkzMjQsNDkzMjQsMTEsNDkzNTIsNDkzNTIsMTEsNDkzODAsNDkzODAsMTEsNDk0MDgsNDk0MDgsMTEsNDk0MzYsNDk0MzYsMTEsNDk0NjQsNDk0NjQsMTEsNDk0OTIsNDk0OTIsMTEsNDk1MjAsNDk1MjAsMTEsNDk1NDgsNDk1NDgsMTEsNDk1NzYsNDk1NzYsMTEsNDk2MDQsNDk2MDQsMTEsNDk2MzIsNDk2MzIsMTEsNDk2NjAsNDk2NjAsMTEsNDk2ODgsNDk2ODgsMTEsNDk3MTYsNDk3MTYsMTEsNDk3NDQsNDk3NDQsMTEsNDk3NzIsNDk3NzIsMTEsNDk4MDAsNDk4MDAsMTEsNDk4MjgsNDk4MjgsMTEsNDk4NTYsNDk4NTYsMTEsNDk4ODQsNDk4ODQsMTEsNDk5MTIsNDk5MTIsMTEsNDk5NDAsNDk5NDAsMTEsNDk5NjgsNDk5NjgsMTEsNDk5OTYsNDk5OTYsMTEsNTAwMjQsNTAwMjQsMTEsNTAwNTIsNTAwNTIsMTEsNTAwODAsNTAwODAsMTEsNTAxMDgsNTAxMDgsMTEsNTAxMzYsNTAxMzYsMTEsNTAxNjQsNTAxNjQsMTEsNTAxOTIsNTAxOTIsMTEsNTAyMjAsNTAyMjAsMTEsNTAyNDgsNTAyNDgsMTEsNTAyNzYsNTAyNzYsMTEsNTAzMDQsNTAzMDQsMTEsNTAzMzIsNTAzMzIsMTEsNTAzNjAsNTAzNjAsMTEsNTAzODgsNTAzODgsMTEsNTA0MTYsNTA0MTYsMTEsNTA0NDQsNTA0NDQsMTEsNTA0NzIsNTA0NzIsMTEsNTA1MDAsNTA1MDAsMTEsNTA1MjgsNTA1MjgsMTEsNTA1NTYsNTA1NTYsMTEsNTA1ODQsNTA1ODQsMTEsNTA2MTIsNTA2MTIsMTEsNTA2NDAsNTA2NDAsMTEsNTA2NjgsNTA2NjgsMTEsNTA2OTYsNTA2OTYsMTEsNTA3MjQsNTA3MjQsMTEsNTA3NTIsNTA3NTIsMTEsNTA3ODAsNTA3ODAsMTEsNTA4MDgsNTA4MDgsMTEsNTA4MzYsNTA4MzYsMTEsNTA4NjQsNTA4NjQsMTEsNTA4OTIsNTA4OTIsMTEsNTA5MjAsNTA5MjAsMTEsNTA5NDgsNTA5NDgsMTEsNTA5NzYsNTA5NzYsMTEsNTEwMDQsNTEwMDQsMTEsNTEwMzIsNTEwMzIsMTEsNTEwNjAsNTEwNjAsMTEsNTEwODgsNTEwODgsMTEsNTExMTYsNTExMTYsMTEsNTExNDQsNTExNDQsMTEsNTExNzIsNTExNzIsMTEsNTEyMDAsNTEyMDAsMTEsNTEyMjgsNTEyMjgsMTEsNTEyNTYsNTEyNTYsMTEsNTEyODQsNTEyODQsMTEsNTEzMTIsNTEzMTIsMTEsNTEzNDAsNTEzNDAsMTEsNTEzNjgsNTEzNjgsMTEsNTEzOTYsNTEzOTYsMTEsNTE0MjQsNTE0MjQsMTEsNTE0NTIsNTE0NTIsMTEsNTE0ODAsNTE0ODAsMTEsNTE1MDgsNTE1MDgsMTEsNTE1MzYsNTE1MzYsMTEsNTE1NjQsNTE1NjQsMTEsNTE1OTIsNTE1OTIsMTEsNTE2MjAsNTE2MjAsMTEsNTE2NDgsNTE2NDgsMTEsNTE2NzYsNTE2NzYsMTEsNTE3MDQsNTE3MDQsMTEsNTE3MzIsNTE3MzIsMTEsNTE3NjAsNTE3NjAsMTEsNTE3ODgsNTE3ODgsMTEsNTE4MTYsNTE4MTYsMTEsNTE4NDQsNTE4NDQsMTEsNTE4NzIsNTE4NzIsMTEsNTE5MDAsNTE5MDAsMTEsNTE5MjgsNTE5MjgsMTEsNTE5NTYsNTE5NTYsMTEsNTE5ODQsNTE5ODQsMTEsNTIwMTIsNTIwMTIsMTEsNTIwNDAsNTIwNDAsMTEsNTIwNjgsNTIwNjgsMTEsNTIwOTYsNTIwOTYsMTEsNTIxMjQsNTIxMjQsMTEsNTIxNTIsNTIxNTIsMTEsNTIxODAsNTIxODAsMTEsNTIyMDgsNTIyMDgsMTEsNTIyMzYsNTIyMzYsMTEsNTIyNjQsNTIyNjQsMTEsNTIyOTIsNTIyOTIsMTEsNTIzMjAsNTIzMjAsMTEsNTIzNDgsNTIzNDgsMTEsNTIzNzYsNTIzNzYsMTEsNTI0MDQsNTI0MDQsMTEsNTI0MzIsNTI0MzIsMTEsNTI0NjAsNTI0NjAsMTEsNTI0ODgsNTI0ODgsMTEsNTI1MTYsNTI1MTYsMTEsNTI1NDQsNTI1NDQsMTEsNTI1NzIsNTI1NzIsMTEsNTI2MDAsNTI2MDAsMTEsNTI2MjgsNTI2MjgsMTEsNTI2NTYsNTI2NTYsMTEsNTI2ODQsNTI2ODQsMTEsNTI3MTIsNTI3MTIsMTEsNTI3NDAsNTI3NDAsMTEsNTI3NjgsNTI3NjgsMTEsNTI3OTYsNTI3OTYsMTEsNTI4MjQsNTI4MjQsMTEsNTI4NTIsNTI4NTIsMTEsNTI4ODAsNTI4ODAsMTEsNTI5MDgsNTI5MDgsMTEsNTI5MzYsNTI5MzYsMTEsNTI5NjQsNTI5NjQsMTEsNTI5OTIsNTI5OTIsMTEsNTMwMjAsNTMwMjAsMTEsNTMwNDgsNTMwNDgsMTEsNTMwNzYsNTMwNzYsMTEsNTMxMDQsNTMxMDQsMTEsNTMxMzIsNTMxMzIsMTEsNTMxNjAsNTMxNjAsMTEsNTMxODgsNTMxODgsMTEsNTMyMTYsNTMyMTYsMTEsNTMyNDQsNTMyNDQsMTEsNTMyNzIsNTMyNzIsMTEsNTMzMDAsNTMzMDAsMTEsNTMzMjgsNTMzMjgsMTEsNTMzNTYsNTMzNTYsMTEsNTMzODQsNTMzODQsMTEsNTM0MTIsNTM0MTIsMTEsNTM0NDAsNTM0NDAsMTEsNTM0NjgsNTM0NjgsMTEsNTM0OTYsNTM0OTYsMTEsNTM1MjQsNTM1MjQsMTEsNTM1NTIsNTM1NTIsMTEsNTM1ODAsNTM1ODAsMTEsNTM2MDgsNTM2MDgsMTEsNTM2MzYsNTM2MzYsMTEsNTM2NjQsNTM2NjQsMTEsNTM2OTIsNTM2OTIsMTEsNTM3MjAsNTM3MjAsMTEsNTM3NDgsNTM3NDgsMTEsNTM3NzYsNTM3NzYsMTEsNTM4MDQsNTM4MDQsMTEsNTM4MzIsNTM4MzIsMTEsNTM4NjAsNTM4NjAsMTEsNTM4ODgsNTM4ODgsMTEsNTM5MTYsNTM5MTYsMTEsNTM5NDQsNTM5NDQsMTEsNTM5NzIsNTM5NzIsMTEsNTQwMDAsNTQwMDAsMTEsNTQwMjgsNTQwMjgsMTEsNTQwNTYsNTQwNTYsMTEsNTQwODQsNTQwODQsMTEsNTQxMTIsNTQxMTIsMTEsNTQxNDAsNTQxNDAsMTEsNTQxNjgsNTQxNjgsMTEsNTQxOTYsNTQxOTYsMTEsNTQyMjQsNTQyMjQsMTEsNTQyNTIsNTQyNTIsMTEsNTQyODAsNTQyODAsMTEsNTQzMDgsNTQzMDgsMTEsNTQzMzYsNTQzMzYsMTEsNTQzNjQsNTQzNjQsMTEsNTQzOTIsNTQzOTIsMTEsNTQ0MjAsNTQ0MjAsMTEsNTQ0NDgsNTQ0NDgsMTEsNTQ0NzYsNTQ0NzYsMTEsNTQ1MDQsNTQ1MDQsMTEsNTQ1MzIsNTQ1MzIsMTEsNTQ1NjAsNTQ1NjAsMTEsNTQ1ODgsNTQ1ODgsMTEsNTQ2MTYsNTQ2MTYsMTEsNTQ2NDQsNTQ2NDQsMTEsNTQ2NzIsNTQ2NzIsMTEsNTQ3MDAsNTQ3MDAsMTEsNTQ3MjgsNTQ3MjgsMTEsNTQ3NTYsNTQ3NTYsMTEsNTQ3ODQsNTQ3ODQsMTEsNTQ4MTIsNTQ4MTIsMTEsNTQ4NDAsNTQ4NDAsMTEsNTQ4NjgsNTQ4NjgsMTEsNTQ4OTYsNTQ4OTYsMTEsNTQ5MjQsNTQ5MjQsMTEsNTQ5NTIsNTQ5NTIsMTEsNTQ5ODAsNTQ5ODAsMTEsNTUwMDgsNTUwMDgsMTEsNTUwMzYsNTUwMzYsMTEsNTUwNjQsNTUwNjQsMTEsNTUwOTIsNTUwOTIsMTEsNTUxMjAsNTUxMjAsMTEsNTUxNDgsNTUxNDgsMTEsNTUxNzYsNTUxNzYsMTEsNTUyMTYsNTUyMzgsOSw2NDI4Niw2NDI4Niw1LDY1MDU2LDY1MDcxLDUsNjU0MzgsNjU0MzksNSw2NTUyOSw2NTUzMSw0LDY2MjcyLDY2MjcyLDUsNjgwOTcsNjgwOTksNSw2ODEwOCw2ODExMSw1LDY4MTU5LDY4MTU5LDUsNjg5MDAsNjg5MDMsNSw2OTQ0Niw2OTQ1Niw1LDY5NjMyLDY5NjMyLDcsNjk2MzQsNjk2MzQsNyw2OTc0NCw2OTc0NCw1LDY5NzU5LDY5NzYxLDUsNjk4MDgsNjk4MTAsNyw2OTgxNSw2OTgxNiw3LDY5ODIxLDY5ODIxLDEsNjk4MzcsNjk4MzcsMSw2OTkyNyw2OTkzMSw1LDY5OTMzLDY5OTQwLDUsNzAwMDMsNzAwMDMsNSw3MDAxOCw3MDAxOCw3LDcwMDcwLDcwMDc4LDUsNzAwODIsNzAwODMsMSw3MDA5NCw3MDA5NCw3LDcwMTg4LDcwMTkwLDcsNzAxOTQsNzAxOTUsNyw3MDE5Nyw3MDE5Nyw3LDcwMjA2LDcwMjA2LDUsNzAzNjgsNzAzNzAsNyw3MDQwMCw3MDQwMSw1LDcwNDU5LDcwNDYwLDUsNzA0NjMsNzA0NjMsNyw3MDQ2NSw3MDQ2OCw3LDcwNDc1LDcwNDc3LDcsNzA0OTgsNzA0OTksNyw3MDUxMiw3MDUxNiw1LDcwNzEyLDcwNzE5LDUsNzA3MjIsNzA3MjQsNSw3MDcyNiw3MDcyNiw1LDcwODMyLDcwODMyLDUsNzA4MzUsNzA4NDAsNSw3MDg0Miw3MDg0Miw1LDcwODQ1LDcwODQ1LDUsNzA4NDcsNzA4NDgsNSw3MDg1MCw3MDg1MSw1LDcxMDg4LDcxMDg5LDcsNzEwOTYsNzEwOTksNyw3MTEwMiw3MTEwMiw3LDcxMTMyLDcxMTMzLDUsNzEyMTksNzEyMjYsNSw3MTIyOSw3MTIyOSw1LDcxMjMxLDcxMjMyLDUsNzEzNDAsNzEzNDAsNyw3MTM0Miw3MTM0Myw3LDcxMzUwLDcxMzUwLDcsNzE0NTMsNzE0NTUsNSw3MTQ2Miw3MTQ2Miw3LDcxNzI0LDcxNzI2LDcsNzE3MzYsNzE3MzYsNyw3MTk4NCw3MTk4NCw1LDcxOTkxLDcxOTkyLDcsNzE5OTcsNzE5OTcsNyw3MTk5OSw3MTk5OSwxLDcyMDAxLDcyMDAxLDEsNzIwMDMsNzIwMDMsNSw3MjE0OCw3MjE1MSw1LDcyMTU2LDcyMTU5LDcsNzIxNjQsNzIxNjQsNyw3MjI0Myw3MjI0OCw1LDcyMjUwLDcyMjUwLDEsNzIyNjMsNzIyNjMsNSw3MjI3OSw3MjI4MCw3LDcyMzI0LDcyMzI5LDEsNzIzNDMsNzIzNDMsNyw3Mjc1MSw3Mjc1MSw3LDcyNzYwLDcyNzY1LDUsNzI3NjcsNzI3NjcsNSw3Mjg3Myw3Mjg3Myw3LDcyODgxLDcyODgxLDcsNzI4ODQsNzI4ODQsNyw3MzAwOSw3MzAxNCw1LDczMDIwLDczMDIxLDUsNzMwMzAsNzMwMzAsMSw3MzA5OCw3MzEwMiw3LDczMTA3LDczMTA4LDcsNzMxMTAsNzMxMTAsNyw3MzQ1OSw3MzQ2MCw1LDc4ODk2LDc4OTA0LDQsOTI5NzYsOTI5ODIsNSw5NDAzMyw5NDA4Nyw3LDk0MTgwLDk0MTgwLDUsMTEzODIxLDExMzgyMiw1LDExODUyOCwxMTg1NzMsNSwxMTkxNDEsMTE5MTQxLDUsMTE5MTQzLDExOTE0NSw1LDExOTE1MCwxMTkxNTQsNSwxMTkxNjMsMTE5MTcwLDUsMTE5MjEwLDExOTIxMyw1LDEyMTM0NCwxMjEzOTgsNSwxMjE0NjEsMTIxNDYxLDUsMTIxNDk5LDEyMTUwMyw1LDEyMjg4MCwxMjI4ODYsNSwxMjI5MDcsMTIyOTEzLDUsMTIyOTE4LDEyMjkyMiw1LDEyMzU2NiwxMjM1NjYsNSwxMjUxMzYsMTI1MTQyLDUsMTI2OTc2LDEyNjk3OSwxNCwxMjY5ODEsMTI3MTgyLDE0LDEyNzE4NCwxMjcyMzEsMTQsMTI3Mjc5LDEyNzI3OSwxNCwxMjczNDQsMTI3MzQ1LDE0LDEyNzM3NCwxMjczNzQsMTQsMTI3NDA1LDEyNzQ2MSwxNCwxMjc0ODksMTI3NDkwLDE0LDEyNzUxNCwxMjc1MTQsMTQsMTI3NTM4LDEyNzU0NiwxNCwxMjc1NjEsMTI3NTY3LDE0LDEyNzU3MCwxMjc3NDMsMTQsMTI3NzU3LDEyNzc1OCwxNCwxMjc3NjAsMTI3NzYwLDE0LDEyNzc2MiwxMjc3NjIsMTQsMTI3NzY2LDEyNzc2OCwxNCwxMjc3NzAsMTI3NzcwLDE0LDEyNzc3MiwxMjc3NzIsMTQsMTI3Nzc1LDEyNzc3NiwxNCwxMjc3NzgsMTI3Nzc5LDE0LDEyNzc4OSwxMjc3OTEsMTQsMTI3Nzk0LDEyNzc5NSwxNCwxMjc3OTgsMTI3Nzk4LDE0LDEyNzgxOSwxMjc4MTksMTQsMTI3ODI0LDEyNzgyNCwxNCwxMjc4NjgsMTI3ODY4LDE0LDEyNzg3MCwxMjc4NzEsMTQsMTI3ODkyLDEyNzg5MywxNCwxMjc4OTYsMTI3ODk2LDE0LDEyNzkwMCwxMjc5MDEsMTQsMTI3OTA0LDEyNzk0MCwxNCwxMjc5NDIsMTI3OTQyLDE0LDEyNzk0NCwxMjc5NDQsMTQsMTI3OTQ2LDEyNzk0NiwxNCwxMjc5NTEsMTI3OTU1LDE0LDEyNzk2OCwxMjc5NzEsMTQsMTI3OTczLDEyNzk4NCwxNCwxMjc5ODcsMTI3OTg3LDE0LDEyNzk4OSwxMjc5ODksMTQsMTI3OTkxLDEyNzk5MSwxNCwxMjc5OTUsMTI3OTk5LDUsMTI4MDA4LDEyODAwOCwxNCwxMjgwMTIsMTI4MDE0LDE0LDEyODAxNywxMjgwMTgsMTQsMTI4MDIwLDEyODAyMCwxNCwxMjgwMjIsMTI4MDIyLDE0LDEyODA0MiwxMjgwNDIsMTQsMTI4MDYzLDEyODA2MywxNCwxMjgwNjUsMTI4MDY1LDE0LDEyODEwMSwxMjgxMDEsMTQsMTI4MTA4LDEyODEwOSwxNCwxMjgxNzMsMTI4MTczLDE0LDEyODE4MiwxMjgxODMsMTQsMTI4MjM2LDEyODIzNywxNCwxMjgyMzksMTI4MjM5LDE0LDEyODI0NSwxMjgyNDUsMTQsMTI4MjQ4LDEyODI0OCwxNCwxMjgyNTMsMTI4MjUzLDE0LDEyODI1NSwxMjgyNTgsMTQsMTI4MjYwLDEyODI2MywxNCwxMjgyNjUsMTI4MjY1LDE0LDEyODI3NywxMjgyNzcsMTQsMTI4MzAwLDEyODMwMSwxNCwxMjgzMjYsMTI4MzI4LDE0LDEyODMzMSwxMjgzMzQsMTQsMTI4MzM2LDEyODM0NywxNCwxMjgzNjAsMTI4MzY2LDE0LDEyODM2OSwxMjgzNzAsMTQsMTI4Mzc4LDEyODM3OCwxNCwxMjgzOTEsMTI4MzkxLDE0LDEyODM5NCwxMjgzOTcsMTQsMTI4NDAwLDEyODQwMCwxNCwxMjg0MDUsMTI4NDA2LDE0LDEyODQyMCwxMjg0MjAsMTQsMTI4NDIyLDEyODQyMywxNCwxMjg0MjUsMTI4NDMyLDE0LDEyODQzNSwxMjg0NDMsMTQsMTI4NDQ1LDEyODQ0OSwxNCwxMjg0NTMsMTI4NDY0LDE0LDEyODQ2OCwxMjg0NzUsMTQsMTI4NDc5LDEyODQ4MCwxNCwxMjg0ODIsMTI4NDgyLDE0LDEyODQ4NCwxMjg0ODcsMTQsMTI4NDg5LDEyODQ5NCwxNCwxMjg0OTYsMTI4NDk4LDE0LDEyODUwMCwxMjg1MDUsMTQsMTI4NTA3LDEyODUxMSwxNCwxMjg1MTMsMTI4NTE4LDE0LDEyODUyMSwxMjg1MjUsMTQsMTI4NTI3LDEyODUyNywxNCwxMjg1MjksMTI4NTI5LDE0LDEyODUzMywxMjg1MzMsMTQsMTI4NTM1LDEyODUzNSwxNCwxMjg1MzcsMTI4NTM3LDE0XScpO1xufVxuLy8jZW5kcmVnaW9uXG4vKipcbiAqIENvbXB1dGVzIHRoZSBvZmZzZXQgYWZ0ZXIgcGVyZm9ybWluZyBhIGxlZnQgZGVsZXRlIG9uIHRoZSBnaXZlbiBzdHJpbmcsXG4gKiB3aGlsZSBjb25zaWRlcmluZyB1bmljb2RlIGdyYXBoZW1lL2Vtb2ppIHJ1bGVzLlxuKi9cbmV4cG9ydCBmdW5jdGlvbiBnZXRMZWZ0RGVsZXRlT2Zmc2V0KG9mZnNldCwgc3RyKSB7XG4gICAgaWYgKG9mZnNldCA9PT0gMCkge1xuICAgICAgICByZXR1cm4gMDtcbiAgICB9XG4gICAgLy8gVHJ5IHRvIGRlbGV0ZSBlbW9qaSBwYXJ0LlxuICAgIGNvbnN0IGVtb2ppT2Zmc2V0ID0gZ2V0T2Zmc2V0QmVmb3JlTGFzdEVtb2ppQ29tcG9uZW50KG9mZnNldCwgc3RyKTtcbiAgICBpZiAoZW1vamlPZmZzZXQgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICByZXR1cm4gZW1vamlPZmZzZXQ7XG4gICAgfVxuICAgIC8vIE90aGVyd2lzZSwganVzdCBza2lwIGEgc2luZ2xlIGNvZGUgcG9pbnQuXG4gICAgY29uc3QgaXRlcmF0b3IgPSBuZXcgQ29kZVBvaW50SXRlcmF0b3Ioc3RyLCBvZmZzZXQpO1xuICAgIGl0ZXJhdG9yLnByZXZDb2RlUG9pbnQoKTtcbiAgICByZXR1cm4gaXRlcmF0b3Iub2Zmc2V0O1xufVxuZnVuY3Rpb24gZ2V0T2Zmc2V0QmVmb3JlTGFzdEVtb2ppQ29tcG9uZW50KGluaXRpYWxPZmZzZXQsIHN0cikge1xuICAgIC8vIFNlZSBodHRwczovL3d3dy51bmljb2RlLm9yZy9yZXBvcnRzL3RyNTEvdHI1MS0xNC5odG1sI0VCTkZfYW5kX1JlZ2V4IGZvciB0aGVcbiAgICAvLyBzdHJ1Y3R1cmUgb2YgZW1vamlzLlxuICAgIGNvbnN0IGl0ZXJhdG9yID0gbmV3IENvZGVQb2ludEl0ZXJhdG9yKHN0ciwgaW5pdGlhbE9mZnNldCk7XG4gICAgbGV0IGNvZGVQb2ludCA9IGl0ZXJhdG9yLnByZXZDb2RlUG9pbnQoKTtcbiAgICAvLyBTa2lwIG1vZGlmaWVyc1xuICAgIHdoaWxlICgoaXNFbW9qaU1vZGlmaWVyKGNvZGVQb2ludCkgfHwgY29kZVBvaW50ID09PSA2NTAzOSAvKiBDb2RlUG9pbnQuZW1vamlWYXJpYW50U2VsZWN0b3IgKi8gfHwgY29kZVBvaW50ID09PSA4NDE5IC8qIENvZGVQb2ludC5lbmNsb3NpbmdLZXlDYXAgKi8pKSB7XG4gICAgICAgIGlmIChpdGVyYXRvci5vZmZzZXQgPT09IDApIHtcbiAgICAgICAgICAgIC8vIENhbm5vdCBza2lwIG1vZGlmaWVyLCBubyBwcmVjZWRpbmcgZW1vamkgYmFzZS5cbiAgICAgICAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgICAgIH1cbiAgICAgICAgY29kZVBvaW50ID0gaXRlcmF0b3IucHJldkNvZGVQb2ludCgpO1xuICAgIH1cbiAgICAvLyBFeHBlY3QgYmFzZSBlbW9qaVxuICAgIGlmICghaXNFbW9qaUltcHJlY2lzZShjb2RlUG9pbnQpKSB7XG4gICAgICAgIC8vIFVuZXhwZWN0ZWQgY29kZSBwb2ludCwgbm90IGEgdmFsaWQgZW1vamkuXG4gICAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgfVxuICAgIGxldCByZXN1bHRPZmZzZXQgPSBpdGVyYXRvci5vZmZzZXQ7XG4gICAgaWYgKHJlc3VsdE9mZnNldCA+IDApIHtcbiAgICAgICAgLy8gU2tpcCBvcHRpb25hbCBaV0ogY29kZSBwb2ludHMgdGhhdCBjb21iaW5lIG11bHRpcGxlIGVtb2ppcy5cbiAgICAgICAgLy8gSW4gdGhlb3J5LCB3ZSBzaG91bGQgY2hlY2sgaWYgdGhhdCBaV0ogYWN0dWFsbHkgY29tYmluZXMgbXVsdGlwbGUgZW1vamlzXG4gICAgICAgIC8vIHRvIHByZXZlbnQgZGVsZXRpbmcgWldKcyBpbiBzaXR1YXRpb25zIHdlIGRpZG4ndCBhY2NvdW50IGZvci5cbiAgICAgICAgY29uc3Qgb3B0aW9uYWxad2pDb2RlUG9pbnQgPSBpdGVyYXRvci5wcmV2Q29kZVBvaW50KCk7XG4gICAgICAgIGlmIChvcHRpb25hbFp3akNvZGVQb2ludCA9PT0gODIwNSAvKiBDb2RlUG9pbnQuendqICovKSB7XG4gICAgICAgICAgICByZXN1bHRPZmZzZXQgPSBpdGVyYXRvci5vZmZzZXQ7XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHJlc3VsdE9mZnNldDtcbn1cbmZ1bmN0aW9uIGlzRW1vamlNb2RpZmllcihjb2RlUG9pbnQpIHtcbiAgICByZXR1cm4gMHgxRjNGQiA8PSBjb2RlUG9pbnQgJiYgY29kZVBvaW50IDw9IDB4MUYzRkY7XG59XG5leHBvcnQgY29uc3Qgbm9CcmVha1doaXRlc3BhY2UgPSAnXFx4YTAnO1xuZXhwb3J0IGNsYXNzIEFtYmlndW91c0NoYXJhY3RlcnMge1xuICAgIHN0YXRpYyBnZXRJbnN0YW5jZShsb2NhbGVzKSB7XG4gICAgICAgIHJldHVybiBfYS5jYWNoZS5nZXQoQXJyYXkuZnJvbShsb2NhbGVzKSk7XG4gICAgfVxuICAgIHN0YXRpYyBnZXRMb2NhbGVzKCkge1xuICAgICAgICByZXR1cm4gX2EuX2xvY2FsZXMudmFsdWU7XG4gICAgfVxuICAgIGNvbnN0cnVjdG9yKGNvbmZ1c2FibGVEaWN0aW9uYXJ5KSB7XG4gICAgICAgIHRoaXMuY29uZnVzYWJsZURpY3Rpb25hcnkgPSBjb25mdXNhYmxlRGljdGlvbmFyeTtcbiAgICB9XG4gICAgaXNBbWJpZ3VvdXMoY29kZVBvaW50KSB7XG4gICAgICAgIHJldHVybiB0aGlzLmNvbmZ1c2FibGVEaWN0aW9uYXJ5Lmhhcyhjb2RlUG9pbnQpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIHRoZSBub24gYmFzaWMgQVNDSUkgY29kZSBwb2ludCB0aGF0IHRoZSBnaXZlbiBjb2RlIHBvaW50IGNhbiBiZSBjb25mdXNlZCxcbiAgICAgKiBvciB1bmRlZmluZWQgaWYgc3VjaCBjb2RlIHBvaW50IGRvZXMgbm90ZSBleGlzdC5cbiAgICAgKi9cbiAgICBnZXRQcmltYXJ5Q29uZnVzYWJsZShjb2RlUG9pbnQpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuY29uZnVzYWJsZURpY3Rpb25hcnkuZ2V0KGNvZGVQb2ludCk7XG4gICAgfVxuICAgIGdldENvbmZ1c2FibGVDb2RlUG9pbnRzKCkge1xuICAgICAgICByZXR1cm4gbmV3IFNldCh0aGlzLmNvbmZ1c2FibGVEaWN0aW9uYXJ5LmtleXMoKSk7XG4gICAgfVxufVxuX2EgPSBBbWJpZ3VvdXNDaGFyYWN0ZXJzO1xuQW1iaWd1b3VzQ2hhcmFjdGVycy5hbWJpZ3VvdXNDaGFyYWN0ZXJEYXRhID0gbmV3IExhenkoKCkgPT4ge1xuICAgIC8vIEdlbmVyYXRlZCB1c2luZyBodHRwczovL2dpdGh1Yi5jb20vaGVkaWV0L3ZzY29kZS11bmljb2RlLWRhdGFcbiAgICAvLyBTdG9yZWQgYXMga2V5MSwgdmFsdWUxLCBrZXkyLCB2YWx1ZTIsIC4uLlxuICAgIHJldHVybiBKU09OLnBhcnNlKCd7XFxcIl9jb21tb25cXFwiOls4MjMyLDMyLDgyMzMsMzIsNTc2MCwzMiw4MTkyLDMyLDgxOTMsMzIsODE5NCwzMiw4MTk1LDMyLDgxOTYsMzIsODE5NywzMiw4MTk4LDMyLDgyMDAsMzIsODIwMSwzMiw4MjAyLDMyLDgyODcsMzIsODE5OSwzMiw4MjM5LDMyLDIwNDIsOTUsNjUxMDEsOTUsNjUxMDIsOTUsNjUxMDMsOTUsODIwOCw0NSw4MjA5LDQ1LDgyMTAsNDUsNjUxMTIsNDUsMTc0OCw0NSw4MjU5LDQ1LDcyNyw0NSw4NzIyLDQ1LDEwMTM0LDQ1LDExNDUwLDQ1LDE1NDksNDQsMTY0Myw0NCw4MjE4LDQ0LDE4NCw0NCw0MjIzMyw0NCw4OTQsNTksMjMwNyw1OCwyNjkxLDU4LDE0MTcsNTgsMTc5NSw1OCwxNzk2LDU4LDU4NjgsNTgsNjUwNzIsNTgsNjE0Nyw1OCw2MTUzLDU4LDgyODIsNTgsMTQ3NSw1OCw3NjAsNTgsNDI4ODksNTgsODc1OCw1OCw3MjAsNTgsNDIyMzcsNTgsNDUxLDMzLDExNjAxLDMzLDY2MCw2Myw1NzcsNjMsMjQyOSw2Myw1MDM4LDYzLDQyNzMxLDYzLDExOTE0OSw0Niw4MjI4LDQ2LDE3OTMsNDYsMTc5NCw0Niw0MjUxMCw0Niw2ODE3Niw0NiwxNjMyLDQ2LDE3NzYsNDYsNDIyMzIsNDYsMTM3Myw5Niw2NTI4Nyw5Niw4MjE5LDk2LDgyNDIsOTYsMTM3MCw5NiwxNTIzLDk2LDgxNzUsOTYsNjUzNDQsOTYsOTAwLDk2LDgxODksOTYsODEyNSw5Niw4MTI3LDk2LDgxOTAsOTYsNjk3LDk2LDg4NCw5Niw3MTIsOTYsNzE0LDk2LDcxNSw5Niw3NTYsOTYsNjk5LDk2LDcwMSw5Niw3MDAsOTYsNzAyLDk2LDQyODkyLDk2LDE0OTcsOTYsMjAzNiw5NiwyMDM3LDk2LDUxOTQsOTYsNTgzNiw5Niw5NDAzMyw5Niw5NDAzNCw5Niw2NTMzOSw5MSwxMDA4OCw0MCwxMDA5OCw0MCwxMjMwOCw0MCw2NDgzMCw0MCw2NTM0MSw5MywxMDA4OSw0MSwxMDA5OSw0MSwxMjMwOSw0MSw2NDgzMSw0MSwxMDEwMCwxMjMsMTE5MDYwLDEyMywxMDEwMSwxMjUsNjUzNDIsOTQsODI3MCw0MiwxNjQ1LDQyLDg3MjcsNDIsNjYzMzUsNDIsNTk0MSw0Nyw4MjU3LDQ3LDg3MjUsNDcsODI2MCw0Nyw5NTg1LDQ3LDEwMTg3LDQ3LDEwNzQ0LDQ3LDExOTM1NCw0NywxMjc1NSw0NywxMjMzOSw0NywxMTQ2Miw0NywyMDAzMSw0NywxMjAzNSw0Nyw2NTM0MCw5Miw2NTEyOCw5Miw4NzI2LDkyLDEwMTg5LDkyLDEwNzQxLDkyLDEwNzQ1LDkyLDExOTMxMSw5MiwxMTkzNTUsOTIsMTI3NTYsOTIsMjAwMjIsOTIsMTIwMzQsOTIsNDI4NzIsMzgsNzA4LDk0LDcxMCw5NCw1ODY5LDQzLDEwMTMzLDQzLDY2MjAzLDQzLDgyNDksNjAsMTAwOTQsNjAsNzA2LDYwLDExOTM1MCw2MCw1MTc2LDYwLDU4MTAsNjAsNTEyMCw2MSwxMTg0MCw2MSwxMjQ0OCw2MSw0MjIzOSw2MSw4MjUwLDYyLDEwMDk1LDYyLDcwNyw2MiwxMTkzNTEsNjIsNTE3MSw2Miw5NDAxNSw2Miw4Mjc1LDEyNiw3MzIsMTI2LDgxMjgsMTI2LDg3NjQsMTI2LDY1MzcyLDEyNCw2NTI5Myw0NSwxMjA3ODQsNTAsMTIwNzk0LDUwLDEyMDgwNCw1MCwxMjA4MTQsNTAsMTIwODI0LDUwLDEzMDAzNCw1MCw0Mjg0Miw1MCw0MjMsNTAsMTAwMCw1MCw0MjU2NCw1MCw1MzExLDUwLDQyNzM1LDUwLDExOTMwMiw1MSwxMjA3ODUsNTEsMTIwNzk1LDUxLDEyMDgwNSw1MSwxMjA4MTUsNTEsMTIwODI1LDUxLDEzMDAzNSw1MSw0MjkyMyw1MSw1NDAsNTEsNDM5LDUxLDQyODU4LDUxLDExNDY4LDUxLDEyNDgsNTEsOTQwMTEsNTEsNzE4ODIsNTEsMTIwNzg2LDUyLDEyMDc5Niw1MiwxMjA4MDYsNTIsMTIwODE2LDUyLDEyMDgyNiw1MiwxMzAwMzYsNTIsNTA3MCw1Miw3MTg1NSw1MiwxMjA3ODcsNTMsMTIwNzk3LDUzLDEyMDgwNyw1MywxMjA4MTcsNTMsMTIwODI3LDUzLDEzMDAzNyw1Myw0NDQsNTMsNzE4NjcsNTMsMTIwNzg4LDU0LDEyMDc5OCw1NCwxMjA4MDgsNTQsMTIwODE4LDU0LDEyMDgyOCw1NCwxMzAwMzgsNTQsMTE0NzQsNTQsNTEwMiw1NCw3MTg5Myw1NCwxMTkzMTQsNTUsMTIwNzg5LDU1LDEyMDc5OSw1NSwxMjA4MDksNTUsMTIwODE5LDU1LDEyMDgyOSw1NSwxMzAwMzksNTUsNjY3NzAsNTUsNzE4NzgsNTUsMjgxOSw1NiwyNTM4LDU2LDI2NjYsNTYsMTI1MTMxLDU2LDEyMDc5MCw1NiwxMjA4MDAsNTYsMTIwODEwLDU2LDEyMDgyMCw1NiwxMjA4MzAsNTYsMTMwMDQwLDU2LDU0Nyw1Niw1NDYsNTYsNjYzMzAsNTYsMjY2Myw1NywyOTIwLDU3LDI1NDEsNTcsMzQzNyw1NywxMjA3OTEsNTcsMTIwODAxLDU3LDEyMDgxMSw1NywxMjA4MjEsNTcsMTIwODMxLDU3LDEzMDA0MSw1Nyw0Mjg2Miw1NywxMTQ2Niw1Nyw3MTg4NCw1Nyw3MTg1Miw1Nyw3MTg5NCw1Nyw5MDgyLDk3LDY1MzQ1LDk3LDExOTgzNCw5NywxMTk4ODYsOTcsMTE5OTM4LDk3LDExOTk5MCw5NywxMjAwNDIsOTcsMTIwMDk0LDk3LDEyMDE0Niw5NywxMjAxOTgsOTcsMTIwMjUwLDk3LDEyMDMwMiw5NywxMjAzNTQsOTcsMTIwNDA2LDk3LDEyMDQ1OCw5Nyw1OTMsOTcsOTQ1LDk3LDEyMDUxNCw5NywxMjA1NzIsOTcsMTIwNjMwLDk3LDEyMDY4OCw5NywxMjA3NDYsOTcsNjUzMTMsNjUsMTE5ODA4LDY1LDExOTg2MCw2NSwxMTk5MTIsNjUsMTE5OTY0LDY1LDEyMDAxNiw2NSwxMjAwNjgsNjUsMTIwMTIwLDY1LDEyMDE3Miw2NSwxMjAyMjQsNjUsMTIwMjc2LDY1LDEyMDMyOCw2NSwxMjAzODAsNjUsMTIwNDMyLDY1LDkxMyw2NSwxMjA0ODgsNjUsMTIwNTQ2LDY1LDEyMDYwNCw2NSwxMjA2NjIsNjUsMTIwNzIwLDY1LDUwMzQsNjUsNTU3Myw2NSw0MjIyMiw2NSw5NDAxNiw2NSw2NjIwOCw2NSwxMTk4MzUsOTgsMTE5ODg3LDk4LDExOTkzOSw5OCwxMTk5OTEsOTgsMTIwMDQzLDk4LDEyMDA5NSw5OCwxMjAxNDcsOTgsMTIwMTk5LDk4LDEyMDI1MSw5OCwxMjAzMDMsOTgsMTIwMzU1LDk4LDEyMDQwNyw5OCwxMjA0NTksOTgsMzg4LDk4LDUwNzEsOTgsNTIzNCw5OCw1NTUxLDk4LDY1MzE0LDY2LDg0OTIsNjYsMTE5ODA5LDY2LDExOTg2MSw2NiwxMTk5MTMsNjYsMTIwMDE3LDY2LDEyMDA2OSw2NiwxMjAxMjEsNjYsMTIwMTczLDY2LDEyMDIyNSw2NiwxMjAyNzcsNjYsMTIwMzI5LDY2LDEyMDM4MSw2NiwxMjA0MzMsNjYsNDI5MzIsNjYsOTE0LDY2LDEyMDQ4OSw2NiwxMjA1NDcsNjYsMTIwNjA1LDY2LDEyMDY2Myw2NiwxMjA3MjEsNjYsNTEwOCw2Niw1NjIzLDY2LDQyMTkyLDY2LDY2MTc4LDY2LDY2MjA5LDY2LDY2MzA1LDY2LDY1MzQ3LDk5LDg1NzMsOTksMTE5ODM2LDk5LDExOTg4OCw5OSwxMTk5NDAsOTksMTE5OTkyLDk5LDEyMDA0NCw5OSwxMjAwOTYsOTksMTIwMTQ4LDk5LDEyMDIwMCw5OSwxMjAyNTIsOTksMTIwMzA0LDk5LDEyMDM1Niw5OSwxMjA0MDgsOTksMTIwNDYwLDk5LDc0MjgsOTksMTAxMCw5OSwxMTQyOSw5OSw0Mzk1MSw5OSw2NjYyMSw5OSwxMjg4NDQsNjcsNzE5MjIsNjcsNzE5MTMsNjcsNjUzMTUsNjcsODU1Nyw2Nyw4NDUwLDY3LDg0OTMsNjcsMTE5ODEwLDY3LDExOTg2Miw2NywxMTk5MTQsNjcsMTE5OTY2LDY3LDEyMDAxOCw2NywxMjAxNzQsNjcsMTIwMjI2LDY3LDEyMDI3OCw2NywxMjAzMzAsNjcsMTIwMzgyLDY3LDEyMDQzNCw2NywxMDE3LDY3LDExNDI4LDY3LDUwODcsNjcsNDIyMDIsNjcsNjYyMTAsNjcsNjYzMDYsNjcsNjY1ODEsNjcsNjY4NDQsNjcsODU3NCwxMDAsODUxOCwxMDAsMTE5ODM3LDEwMCwxMTk4ODksMTAwLDExOTk0MSwxMDAsMTE5OTkzLDEwMCwxMjAwNDUsMTAwLDEyMDA5NywxMDAsMTIwMTQ5LDEwMCwxMjAyMDEsMTAwLDEyMDI1MywxMDAsMTIwMzA1LDEwMCwxMjAzNTcsMTAwLDEyMDQwOSwxMDAsMTIwNDYxLDEwMCwxMjgxLDEwMCw1MDk1LDEwMCw1MjMxLDEwMCw0MjE5NCwxMDAsODU1OCw2OCw4NTE3LDY4LDExOTgxMSw2OCwxMTk4NjMsNjgsMTE5OTE1LDY4LDExOTk2Nyw2OCwxMjAwMTksNjgsMTIwMDcxLDY4LDEyMDEyMyw2OCwxMjAxNzUsNjgsMTIwMjI3LDY4LDEyMDI3OSw2OCwxMjAzMzEsNjgsMTIwMzgzLDY4LDEyMDQzNSw2OCw1MDI0LDY4LDU1OTgsNjgsNTYxMCw2OCw0MjE5NSw2OCw4NDk0LDEwMSw2NTM0OSwxMDEsODQ5NSwxMDEsODUxOSwxMDEsMTE5ODM4LDEwMSwxMTk4OTAsMTAxLDExOTk0MiwxMDEsMTIwMDQ2LDEwMSwxMjAwOTgsMTAxLDEyMDE1MCwxMDEsMTIwMjAyLDEwMSwxMjAyNTQsMTAxLDEyMDMwNiwxMDEsMTIwMzU4LDEwMSwxMjA0MTAsMTAxLDEyMDQ2MiwxMDEsNDM4MjYsMTAxLDEyMTMsMTAxLDg5NTksNjksNjUzMTcsNjksODQ5Niw2OSwxMTk4MTIsNjksMTE5ODY0LDY5LDExOTkxNiw2OSwxMjAwMjAsNjksMTIwMDcyLDY5LDEyMDEyNCw2OSwxMjAxNzYsNjksMTIwMjI4LDY5LDEyMDI4MCw2OSwxMjAzMzIsNjksMTIwMzg0LDY5LDEyMDQzNiw2OSw5MTcsNjksMTIwNDkyLDY5LDEyMDU1MCw2OSwxMjA2MDgsNjksMTIwNjY2LDY5LDEyMDcyNCw2OSwxMTU3Nyw2OSw1MDM2LDY5LDQyMjI0LDY5LDcxODQ2LDY5LDcxODU0LDY5LDY2MTgyLDY5LDExOTgzOSwxMDIsMTE5ODkxLDEwMiwxMTk5NDMsMTAyLDExOTk5NSwxMDIsMTIwMDQ3LDEwMiwxMjAwOTksMTAyLDEyMDE1MSwxMDIsMTIwMjAzLDEwMiwxMjAyNTUsMTAyLDEyMDMwNywxMDIsMTIwMzU5LDEwMiwxMjA0MTEsMTAyLDEyMDQ2MywxMDIsNDM4MjksMTAyLDQyOTA1LDEwMiwzODMsMTAyLDc4MzcsMTAyLDE0MTIsMTAyLDExOTMxNSw3MCw4NDk3LDcwLDExOTgxMyw3MCwxMTk4NjUsNzAsMTE5OTE3LDcwLDEyMDAyMSw3MCwxMjAwNzMsNzAsMTIwMTI1LDcwLDEyMDE3Nyw3MCwxMjAyMjksNzAsMTIwMjgxLDcwLDEyMDMzMyw3MCwxMjAzODUsNzAsMTIwNDM3LDcwLDQyOTA0LDcwLDk4OCw3MCwxMjA3NzgsNzAsNTU1Niw3MCw0MjIwNSw3MCw3MTg3NCw3MCw3MTg0Miw3MCw2NjE4Myw3MCw2NjIxMyw3MCw2Njg1Myw3MCw2NTM1MSwxMDMsODQ1OCwxMDMsMTE5ODQwLDEwMywxMTk4OTIsMTAzLDExOTk0NCwxMDMsMTIwMDQ4LDEwMywxMjAxMDAsMTAzLDEyMDE1MiwxMDMsMTIwMjA0LDEwMywxMjAyNTYsMTAzLDEyMDMwOCwxMDMsMTIwMzYwLDEwMywxMjA0MTIsMTAzLDEyMDQ2NCwxMDMsNjA5LDEwMyw3NTU1LDEwMywzOTcsMTAzLDE0MDksMTAzLDExOTgxNCw3MSwxMTk4NjYsNzEsMTE5OTE4LDcxLDExOTk3MCw3MSwxMjAwMjIsNzEsMTIwMDc0LDcxLDEyMDEyNiw3MSwxMjAxNzgsNzEsMTIwMjMwLDcxLDEyMDI4Miw3MSwxMjAzMzQsNzEsMTIwMzg2LDcxLDEyMDQzOCw3MSwxMjkyLDcxLDUwNTYsNzEsNTEwNyw3MSw0MjE5OCw3MSw2NTM1MiwxMDQsODQ2MiwxMDQsMTE5ODQxLDEwNCwxMTk5NDUsMTA0LDExOTk5NywxMDQsMTIwMDQ5LDEwNCwxMjAxMDEsMTA0LDEyMDE1MywxMDQsMTIwMjA1LDEwNCwxMjAyNTcsMTA0LDEyMDMwOSwxMDQsMTIwMzYxLDEwNCwxMjA0MTMsMTA0LDEyMDQ2NSwxMDQsMTIxMSwxMDQsMTM5MiwxMDQsNTA1OCwxMDQsNjUzMjAsNzIsODQ1OSw3Miw4NDYwLDcyLDg0NjEsNzIsMTE5ODE1LDcyLDExOTg2Nyw3MiwxMTk5MTksNzIsMTIwMDIzLDcyLDEyMDE3OSw3MiwxMjAyMzEsNzIsMTIwMjgzLDcyLDEyMDMzNSw3MiwxMjAzODcsNzIsMTIwNDM5LDcyLDkxOSw3MiwxMjA0OTQsNzIsMTIwNTUyLDcyLDEyMDYxMCw3MiwxMjA2NjgsNzIsMTIwNzI2LDcyLDExNDA2LDcyLDUwNTEsNzIsNTUwMCw3Miw0MjIxNSw3Miw2NjI1NSw3Miw3MzEsMTA1LDkwNzUsMTA1LDY1MzUzLDEwNSw4NTYwLDEwNSw4NTA1LDEwNSw4NTIwLDEwNSwxMTk4NDIsMTA1LDExOTg5NCwxMDUsMTE5OTQ2LDEwNSwxMTk5OTgsMTA1LDEyMDA1MCwxMDUsMTIwMTAyLDEwNSwxMjAxNTQsMTA1LDEyMDIwNiwxMDUsMTIwMjU4LDEwNSwxMjAzMTAsMTA1LDEyMDM2MiwxMDUsMTIwNDE0LDEwNSwxMjA0NjYsMTA1LDEyMDQ4NCwxMDUsNjE4LDEwNSw2MTcsMTA1LDk1MywxMDUsODEyNiwxMDUsODkwLDEwNSwxMjA1MjIsMTA1LDEyMDU4MCwxMDUsMTIwNjM4LDEwNSwxMjA2OTYsMTA1LDEyMDc1NCwxMDUsMTExMCwxMDUsNDI1NjcsMTA1LDEyMzEsMTA1LDQzODkzLDEwNSw1MDI5LDEwNSw3MTg3NSwxMDUsNjUzNTQsMTA2LDg1MjEsMTA2LDExOTg0MywxMDYsMTE5ODk1LDEwNiwxMTk5NDcsMTA2LDExOTk5OSwxMDYsMTIwMDUxLDEwNiwxMjAxMDMsMTA2LDEyMDE1NSwxMDYsMTIwMjA3LDEwNiwxMjAyNTksMTA2LDEyMDMxMSwxMDYsMTIwMzYzLDEwNiwxMjA0MTUsMTA2LDEyMDQ2NywxMDYsMTAxMSwxMDYsMTExMiwxMDYsNjUzMjIsNzQsMTE5ODE3LDc0LDExOTg2OSw3NCwxMTk5MjEsNzQsMTE5OTczLDc0LDEyMDAyNSw3NCwxMjAwNzcsNzQsMTIwMTI5LDc0LDEyMDE4MSw3NCwxMjAyMzMsNzQsMTIwMjg1LDc0LDEyMDMzNyw3NCwxMjAzODksNzQsMTIwNDQxLDc0LDQyOTMwLDc0LDg5NSw3NCwxMDMyLDc0LDUwMzUsNzQsNTI2MSw3NCw0MjIwMSw3NCwxMTk4NDQsMTA3LDExOTg5NiwxMDcsMTE5OTQ4LDEwNywxMjAwMDAsMTA3LDEyMDA1MiwxMDcsMTIwMTA0LDEwNywxMjAxNTYsMTA3LDEyMDIwOCwxMDcsMTIwMjYwLDEwNywxMjAzMTIsMTA3LDEyMDM2NCwxMDcsMTIwNDE2LDEwNywxMjA0NjgsMTA3LDg0OTAsNzUsNjUzMjMsNzUsMTE5ODE4LDc1LDExOTg3MCw3NSwxMTk5MjIsNzUsMTE5OTc0LDc1LDEyMDAyNiw3NSwxMjAwNzgsNzUsMTIwMTMwLDc1LDEyMDE4Miw3NSwxMjAyMzQsNzUsMTIwMjg2LDc1LDEyMDMzOCw3NSwxMjAzOTAsNzUsMTIwNDQyLDc1LDkyMiw3NSwxMjA0OTcsNzUsMTIwNTU1LDc1LDEyMDYxMyw3NSwxMjA2NzEsNzUsMTIwNzI5LDc1LDExNDEyLDc1LDUwOTQsNzUsNTg0NSw3NSw0MjE5OSw3NSw2Njg0MCw3NSwxNDcyLDEwOCw4NzM5LDczLDkyMTMsNzMsNjU1MTIsNzMsMTYzMywxMDgsMTc3Nyw3Myw2NjMzNiwxMDgsMTI1MTI3LDEwOCwxMjA3ODMsNzMsMTIwNzkzLDczLDEyMDgwMyw3MywxMjA4MTMsNzMsMTIwODIzLDczLDEzMDAzMyw3Myw2NTMyMSw3Myw4NTQ0LDczLDg0NjQsNzMsODQ2NSw3MywxMTk4MTYsNzMsMTE5ODY4LDczLDExOTkyMCw3MywxMjAwMjQsNzMsMTIwMTI4LDczLDEyMDE4MCw3MywxMjAyMzIsNzMsMTIwMjg0LDczLDEyMDMzNiw3MywxMjAzODgsNzMsMTIwNDQwLDczLDY1MzU2LDEwOCw4NTcyLDczLDg0NjcsMTA4LDExOTg0NSwxMDgsMTE5ODk3LDEwOCwxMTk5NDksMTA4LDEyMDAwMSwxMDgsMTIwMDUzLDEwOCwxMjAxMDUsNzMsMTIwMTU3LDczLDEyMDIwOSw3MywxMjAyNjEsNzMsMTIwMzEzLDczLDEyMDM2NSw3MywxMjA0MTcsNzMsMTIwNDY5LDczLDQ0OCw3MywxMjA0OTYsNzMsMTIwNTU0LDczLDEyMDYxMiw3MywxMjA2NzAsNzMsMTIwNzI4LDczLDExNDEwLDczLDEwMzAsNzMsMTIxNiw3MywxNDkzLDEwOCwxNTAzLDEwOCwxNTc1LDEwOCwxMjY0NjQsMTA4LDEyNjU5MiwxMDgsNjUxNjYsMTA4LDY1MTY1LDEwOCwxOTk0LDEwOCwxMTU5OSw3Myw1ODI1LDczLDQyMjI2LDczLDkzOTkyLDczLDY2MTg2LDEyNCw2NjMxMywxMjQsMTE5MzM4LDc2LDg1NTYsNzYsODQ2Niw3NiwxMTk4MTksNzYsMTE5ODcxLDc2LDExOTkyMyw3NiwxMjAwMjcsNzYsMTIwMDc5LDc2LDEyMDEzMSw3NiwxMjAxODMsNzYsMTIwMjM1LDc2LDEyMDI4Nyw3NiwxMjAzMzksNzYsMTIwMzkxLDc2LDEyMDQ0Myw3NiwxMTQ3Miw3Niw1MDg2LDc2LDUyOTAsNzYsNDIyMDksNzYsOTM5NzQsNzYsNzE4NDMsNzYsNzE4NTgsNzYsNjY1ODcsNzYsNjY4NTQsNzYsNjUzMjUsNzcsODU1OSw3Nyw4NDk5LDc3LDExOTgyMCw3NywxMTk4NzIsNzcsMTE5OTI0LDc3LDEyMDAyOCw3NywxMjAwODAsNzcsMTIwMTMyLDc3LDEyMDE4NCw3NywxMjAyMzYsNzcsMTIwMjg4LDc3LDEyMDM0MCw3NywxMjAzOTIsNzcsMTIwNDQ0LDc3LDkyNCw3NywxMjA0OTksNzcsMTIwNTU3LDc3LDEyMDYxNSw3NywxMjA2NzMsNzcsMTIwNzMxLDc3LDEwMTgsNzcsMTE0MTYsNzcsNTA0Nyw3Nyw1NjE2LDc3LDU4NDYsNzcsNDIyMDcsNzcsNjYyMjQsNzcsNjYzMjEsNzcsMTE5ODQ3LDExMCwxMTk4OTksMTEwLDExOTk1MSwxMTAsMTIwMDAzLDExMCwxMjAwNTUsMTEwLDEyMDEwNywxMTAsMTIwMTU5LDExMCwxMjAyMTEsMTEwLDEyMDI2MywxMTAsMTIwMzE1LDExMCwxMjAzNjcsMTEwLDEyMDQxOSwxMTAsMTIwNDcxLDExMCwxNDAwLDExMCwxNDA0LDExMCw2NTMyNiw3OCw4NDY5LDc4LDExOTgyMSw3OCwxMTk4NzMsNzgsMTE5OTI1LDc4LDExOTk3Nyw3OCwxMjAwMjksNzgsMTIwMDgxLDc4LDEyMDE4NSw3OCwxMjAyMzcsNzgsMTIwMjg5LDc4LDEyMDM0MSw3OCwxMjAzOTMsNzgsMTIwNDQ1LDc4LDkyNSw3OCwxMjA1MDAsNzgsMTIwNTU4LDc4LDEyMDYxNiw3OCwxMjA2NzQsNzgsMTIwNzMyLDc4LDExNDE4LDc4LDQyMjA4LDc4LDY2ODM1LDc4LDMwNzQsMTExLDMyMDIsMTExLDMzMzAsMTExLDM0NTgsMTExLDI0MDYsMTExLDI2NjIsMTExLDI3OTAsMTExLDMwNDYsMTExLDMxNzQsMTExLDMzMDIsMTExLDM0MzAsMTExLDM2NjQsMTExLDM3OTIsMTExLDQxNjAsMTExLDE2MzcsMTExLDE3ODEsMTExLDY1MzU5LDExMSw4NTAwLDExMSwxMTk4NDgsMTExLDExOTkwMCwxMTEsMTE5OTUyLDExMSwxMjAwNTYsMTExLDEyMDEwOCwxMTEsMTIwMTYwLDExMSwxMjAyMTIsMTExLDEyMDI2NCwxMTEsMTIwMzE2LDExMSwxMjAzNjgsMTExLDEyMDQyMCwxMTEsMTIwNDcyLDExMSw3NDM5LDExMSw3NDQxLDExMSw0MzgzNywxMTEsOTU5LDExMSwxMjA1MjgsMTExLDEyMDU4NiwxMTEsMTIwNjQ0LDExMSwxMjA3MDIsMTExLDEyMDc2MCwxMTEsOTYzLDExMSwxMjA1MzIsMTExLDEyMDU5MCwxMTEsMTIwNjQ4LDExMSwxMjA3MDYsMTExLDEyMDc2NCwxMTEsMTE0MjMsMTExLDQzNTEsMTExLDE0MTMsMTExLDE1MDUsMTExLDE2MDcsMTExLDEyNjUwMCwxMTEsMTI2NTY0LDExMSwxMjY1OTYsMTExLDY1MjU5LDExMSw2NTI2MCwxMTEsNjUyNTgsMTExLDY1MjU3LDExMSwxNzI2LDExMSw2NDQyOCwxMTEsNjQ0MjksMTExLDY0NDI3LDExMSw2NDQyNiwxMTEsMTcyOSwxMTEsNjQ0MjQsMTExLDY0NDI1LDExMSw2NDQyMywxMTEsNjQ0MjIsMTExLDE3NDksMTExLDMzNjAsMTExLDQxMjUsMTExLDY2Nzk0LDExMSw3MTg4MCwxMTEsNzE4OTUsMTExLDY2NjA0LDExMSwxOTg0LDc5LDI1MzQsNzksMjkxOCw3OSwxMjI5NSw3OSw3MDg2NCw3OSw3MTkwNCw3OSwxMjA3ODIsNzksMTIwNzkyLDc5LDEyMDgwMiw3OSwxMjA4MTIsNzksMTIwODIyLDc5LDEzMDAzMiw3OSw2NTMyNyw3OSwxMTk4MjIsNzksMTE5ODc0LDc5LDExOTkyNiw3OSwxMTk5NzgsNzksMTIwMDMwLDc5LDEyMDA4Miw3OSwxMjAxMzQsNzksMTIwMTg2LDc5LDEyMDIzOCw3OSwxMjAyOTAsNzksMTIwMzQyLDc5LDEyMDM5NCw3OSwxMjA0NDYsNzksOTI3LDc5LDEyMDUwMiw3OSwxMjA1NjAsNzksMTIwNjE4LDc5LDEyMDY3Niw3OSwxMjA3MzQsNzksMTE0MjIsNzksMTM2NSw3OSwxMTYwNCw3OSw0ODE2LDc5LDI4NDgsNzksNjY3NTQsNzksNDIyMjcsNzksNzE4NjEsNzksNjYxOTQsNzksNjYyMTksNzksNjY1NjQsNzksNjY4MzgsNzksOTA3NiwxMTIsNjUzNjAsMTEyLDExOTg0OSwxMTIsMTE5OTAxLDExMiwxMTk5NTMsMTEyLDEyMDAwNSwxMTIsMTIwMDU3LDExMiwxMjAxMDksMTEyLDEyMDE2MSwxMTIsMTIwMjEzLDExMiwxMjAyNjUsMTEyLDEyMDMxNywxMTIsMTIwMzY5LDExMiwxMjA0MjEsMTEyLDEyMDQ3MywxMTIsOTYxLDExMiwxMjA1MzAsMTEyLDEyMDU0NCwxMTIsMTIwNTg4LDExMiwxMjA2MDIsMTEyLDEyMDY0NiwxMTIsMTIwNjYwLDExMiwxMjA3MDQsMTEyLDEyMDcxOCwxMTIsMTIwNzYyLDExMiwxMjA3NzYsMTEyLDExNDI3LDExMiw2NTMyOCw4MCw4NDczLDgwLDExOTgyMyw4MCwxMTk4NzUsODAsMTE5OTI3LDgwLDExOTk3OSw4MCwxMjAwMzEsODAsMTIwMDgzLDgwLDEyMDE4Nyw4MCwxMjAyMzksODAsMTIwMjkxLDgwLDEyMDM0Myw4MCwxMjAzOTUsODAsMTIwNDQ3LDgwLDkyOSw4MCwxMjA1MDQsODAsMTIwNTYyLDgwLDEyMDYyMCw4MCwxMjA2NzgsODAsMTIwNzM2LDgwLDExNDI2LDgwLDUwOTAsODAsNTIyOSw4MCw0MjE5Myw4MCw2NjE5Nyw4MCwxMTk4NTAsMTEzLDExOTkwMiwxMTMsMTE5OTU0LDExMywxMjAwMDYsMTEzLDEyMDA1OCwxMTMsMTIwMTEwLDExMywxMjAxNjIsMTEzLDEyMDIxNCwxMTMsMTIwMjY2LDExMywxMjAzMTgsMTEzLDEyMDM3MCwxMTMsMTIwNDIyLDExMywxMjA0NzQsMTEzLDEzMDcsMTEzLDEzNzksMTEzLDEzODIsMTEzLDg0NzQsODEsMTE5ODI0LDgxLDExOTg3Niw4MSwxMTk5MjgsODEsMTE5OTgwLDgxLDEyMDAzMiw4MSwxMjAwODQsODEsMTIwMTg4LDgxLDEyMDI0MCw4MSwxMjAyOTIsODEsMTIwMzQ0LDgxLDEyMDM5Niw4MSwxMjA0NDgsODEsMTE2MDUsODEsMTE5ODUxLDExNCwxMTk5MDMsMTE0LDExOTk1NSwxMTQsMTIwMDA3LDExNCwxMjAwNTksMTE0LDEyMDExMSwxMTQsMTIwMTYzLDExNCwxMjAyMTUsMTE0LDEyMDI2NywxMTQsMTIwMzE5LDExNCwxMjAzNzEsMTE0LDEyMDQyMywxMTQsMTIwNDc1LDExNCw0Mzg0NywxMTQsNDM4NDgsMTE0LDc0NjIsMTE0LDExMzk3LDExNCw0MzkwNSwxMTQsMTE5MzE4LDgyLDg0NzUsODIsODQ3Niw4Miw4NDc3LDgyLDExOTgyNSw4MiwxMTk4NzcsODIsMTE5OTI5LDgyLDEyMDAzMyw4MiwxMjAxODksODIsMTIwMjQxLDgyLDEyMDI5Myw4MiwxMjAzNDUsODIsMTIwMzk3LDgyLDEyMDQ0OSw4Miw0MjIsODIsNTAyNSw4Miw1MDc0LDgyLDY2NzQwLDgyLDU1MTEsODIsNDIyMTEsODIsOTQwMDUsODIsNjUzNjMsMTE1LDExOTg1MiwxMTUsMTE5OTA0LDExNSwxMTk5NTYsMTE1LDEyMDAwOCwxMTUsMTIwMDYwLDExNSwxMjAxMTIsMTE1LDEyMDE2NCwxMTUsMTIwMjE2LDExNSwxMjAyNjgsMTE1LDEyMDMyMCwxMTUsMTIwMzcyLDExNSwxMjA0MjQsMTE1LDEyMDQ3NiwxMTUsNDI4MDEsMTE1LDQ0NSwxMTUsMTEwOSwxMTUsNDM5NDYsMTE1LDcxODczLDExNSw2NjYzMiwxMTUsNjUzMzEsODMsMTE5ODI2LDgzLDExOTg3OCw4MywxMTk5MzAsODMsMTE5OTgyLDgzLDEyMDAzNCw4MywxMjAwODYsODMsMTIwMTM4LDgzLDEyMDE5MCw4MywxMjAyNDIsODMsMTIwMjk0LDgzLDEyMDM0Niw4MywxMjAzOTgsODMsMTIwNDUwLDgzLDEwMjksODMsMTM1OSw4Myw1MDc3LDgzLDUwODIsODMsNDIyMTAsODMsOTQwMTAsODMsNjYxOTgsODMsNjY1OTIsODMsMTE5ODUzLDExNiwxMTk5MDUsMTE2LDExOTk1NywxMTYsMTIwMDA5LDExNiwxMjAwNjEsMTE2LDEyMDExMywxMTYsMTIwMTY1LDExNiwxMjAyMTcsMTE2LDEyMDI2OSwxMTYsMTIwMzIxLDExNiwxMjAzNzMsMTE2LDEyMDQyNSwxMTYsMTIwNDc3LDExNiw4ODY4LDg0LDEwMjAxLDg0LDEyODg3Miw4NCw2NTMzMiw4NCwxMTk4MjcsODQsMTE5ODc5LDg0LDExOTkzMSw4NCwxMTk5ODMsODQsMTIwMDM1LDg0LDEyMDA4Nyw4NCwxMjAxMzksODQsMTIwMTkxLDg0LDEyMDI0Myw4NCwxMjAyOTUsODQsMTIwMzQ3LDg0LDEyMDM5OSw4NCwxMjA0NTEsODQsOTMyLDg0LDEyMDUwNyw4NCwxMjA1NjUsODQsMTIwNjIzLDg0LDEyMDY4MSw4NCwxMjA3MzksODQsMTE0MzAsODQsNTAyNiw4NCw0MjE5Niw4NCw5Mzk2Miw4NCw3MTg2OCw4NCw2NjE5OSw4NCw2NjIyNSw4NCw2NjMyNSw4NCwxMTk4NTQsMTE3LDExOTkwNiwxMTcsMTE5OTU4LDExNywxMjAwMTAsMTE3LDEyMDA2MiwxMTcsMTIwMTE0LDExNywxMjAxNjYsMTE3LDEyMDIxOCwxMTcsMTIwMjcwLDExNywxMjAzMjIsMTE3LDEyMDM3NCwxMTcsMTIwNDI2LDExNywxMjA0NzgsMTE3LDQyOTExLDExNyw3NDUyLDExNyw0Mzg1NCwxMTcsNDM4NTgsMTE3LDY1MSwxMTcsOTY1LDExNywxMjA1MzQsMTE3LDEyMDU5MiwxMTcsMTIwNjUwLDExNywxMjA3MDgsMTE3LDEyMDc2NiwxMTcsMTQwNSwxMTcsNjY4MDYsMTE3LDcxODk2LDExNyw4NzQ2LDg1LDg4OTksODUsMTE5ODI4LDg1LDExOTg4MCw4NSwxMTk5MzIsODUsMTE5OTg0LDg1LDEyMDAzNiw4NSwxMjAwODgsODUsMTIwMTQwLDg1LDEyMDE5Miw4NSwxMjAyNDQsODUsMTIwMjk2LDg1LDEyMDM0OCw4NSwxMjA0MDAsODUsMTIwNDUyLDg1LDEzNTcsODUsNDYwOCw4NSw2Njc2Niw4NSw1MTk2LDg1LDQyMjI4LDg1LDk0MDE4LDg1LDcxODY0LDg1LDg3NDQsMTE4LDg4OTcsMTE4LDY1MzY2LDExOCw4NTY0LDExOCwxMTk4NTUsMTE4LDExOTkwNywxMTgsMTE5OTU5LDExOCwxMjAwMTEsMTE4LDEyMDA2MywxMTgsMTIwMTE1LDExOCwxMjAxNjcsMTE4LDEyMDIxOSwxMTgsMTIwMjcxLDExOCwxMjAzMjMsMTE4LDEyMDM3NSwxMTgsMTIwNDI3LDExOCwxMjA0NzksMTE4LDc0NTYsMTE4LDk1NywxMTgsMTIwNTI2LDExOCwxMjA1ODQsMTE4LDEyMDY0MiwxMTgsMTIwNzAwLDExOCwxMjA3NTgsMTE4LDExNDEsMTE4LDE0OTYsMTE4LDcxNDMwLDExOCw0Mzk0NSwxMTgsNzE4NzIsMTE4LDExOTMwOSw4NiwxNjM5LDg2LDE3ODMsODYsODU0OCw4NiwxMTk4MjksODYsMTE5ODgxLDg2LDExOTkzMyw4NiwxMTk5ODUsODYsMTIwMDM3LDg2LDEyMDA4OSw4NiwxMjAxNDEsODYsMTIwMTkzLDg2LDEyMDI0NSw4NiwxMjAyOTcsODYsMTIwMzQ5LDg2LDEyMDQwMSw4NiwxMjA0NTMsODYsMTE0MCw4NiwxMTU3Niw4Niw1MDgxLDg2LDUxNjcsODYsNDI3MTksODYsNDIyMTQsODYsOTM5NjAsODYsNzE4NDAsODYsNjY4NDUsODYsNjIzLDExOSwxMTk4NTYsMTE5LDExOTkwOCwxMTksMTE5OTYwLDExOSwxMjAwMTIsMTE5LDEyMDA2NCwxMTksMTIwMTE2LDExOSwxMjAxNjgsMTE5LDEyMDIyMCwxMTksMTIwMjcyLDExOSwxMjAzMjQsMTE5LDEyMDM3NiwxMTksMTIwNDI4LDExOSwxMjA0ODAsMTE5LDc0NTcsMTE5LDExMjEsMTE5LDEzMDksMTE5LDEzNzcsMTE5LDcxNDM0LDExOSw3MTQzOCwxMTksNzE0MzksMTE5LDQzOTA3LDExOSw3MTkxOSw4Nyw3MTkxMCw4NywxMTk4MzAsODcsMTE5ODgyLDg3LDExOTkzNCw4NywxMTk5ODYsODcsMTIwMDM4LDg3LDEyMDA5MCw4NywxMjAxNDIsODcsMTIwMTk0LDg3LDEyMDI0Niw4NywxMjAyOTgsODcsMTIwMzUwLDg3LDEyMDQwMiw4NywxMjA0NTQsODcsMTMwOCw4Nyw1MDQzLDg3LDUwNzYsODcsNDIyMTgsODcsNTc0MiwxMjAsMTA1MzksMTIwLDEwNTQwLDEyMCwxMDc5OSwxMjAsNjUzNjgsMTIwLDg1NjksMTIwLDExOTg1NywxMjAsMTE5OTA5LDEyMCwxMTk5NjEsMTIwLDEyMDAxMywxMjAsMTIwMDY1LDEyMCwxMjAxMTcsMTIwLDEyMDE2OSwxMjAsMTIwMjIxLDEyMCwxMjAyNzMsMTIwLDEyMDMyNSwxMjAsMTIwMzc3LDEyMCwxMjA0MjksMTIwLDEyMDQ4MSwxMjAsNTQ0MSwxMjAsNTUwMSwxMjAsNTc0MSw4OCw5NTg3LDg4LDY2MzM4LDg4LDcxOTE2LDg4LDY1MzM2LDg4LDg1NTMsODgsMTE5ODMxLDg4LDExOTg4Myw4OCwxMTk5MzUsODgsMTE5OTg3LDg4LDEyMDAzOSw4OCwxMjAwOTEsODgsMTIwMTQzLDg4LDEyMDE5NSw4OCwxMjAyNDcsODgsMTIwMjk5LDg4LDEyMDM1MSw4OCwxMjA0MDMsODgsMTIwNDU1LDg4LDQyOTMxLDg4LDkzNSw4OCwxMjA1MTAsODgsMTIwNTY4LDg4LDEyMDYyNiw4OCwxMjA2ODQsODgsMTIwNzQyLDg4LDExNDM2LDg4LDExNjEzLDg4LDU4MTUsODgsNDIyMTksODgsNjYxOTIsODgsNjYyMjgsODgsNjYzMjcsODgsNjY4NTUsODgsNjExLDEyMSw3NTY0LDEyMSw2NTM2OSwxMjEsMTE5ODU4LDEyMSwxMTk5MTAsMTIxLDExOTk2MiwxMjEsMTIwMDE0LDEyMSwxMjAwNjYsMTIxLDEyMDExOCwxMjEsMTIwMTcwLDEyMSwxMjAyMjIsMTIxLDEyMDI3NCwxMjEsMTIwMzI2LDEyMSwxMjAzNzgsMTIxLDEyMDQzMCwxMjEsMTIwNDgyLDEyMSw2NTUsMTIxLDc5MzUsMTIxLDQzODY2LDEyMSw5NDcsMTIxLDg1MDksMTIxLDEyMDUxNiwxMjEsMTIwNTc0LDEyMSwxMjA2MzIsMTIxLDEyMDY5MCwxMjEsMTIwNzQ4LDEyMSwxMTk5LDEyMSw0MzI3LDEyMSw3MTkwMCwxMjEsNjUzMzcsODksMTE5ODMyLDg5LDExOTg4NCw4OSwxMTk5MzYsODksMTE5OTg4LDg5LDEyMDA0MCw4OSwxMjAwOTIsODksMTIwMTQ0LDg5LDEyMDE5Niw4OSwxMjAyNDgsODksMTIwMzAwLDg5LDEyMDM1Miw4OSwxMjA0MDQsODksMTIwNDU2LDg5LDkzMyw4OSw5NzgsODksMTIwNTA4LDg5LDEyMDU2Niw4OSwxMjA2MjQsODksMTIwNjgyLDg5LDEyMDc0MCw4OSwxMTQzMiw4OSwxMTk4LDg5LDUwMzMsODksNTA1Myw4OSw0MjIyMCw4OSw5NDAxOSw4OSw3MTg0NCw4OSw2NjIyNiw4OSwxMTk4NTksMTIyLDExOTkxMSwxMjIsMTE5OTYzLDEyMiwxMjAwMTUsMTIyLDEyMDA2NywxMjIsMTIwMTE5LDEyMiwxMjAxNzEsMTIyLDEyMDIyMywxMjIsMTIwMjc1LDEyMiwxMjAzMjcsMTIyLDEyMDM3OSwxMjIsMTIwNDMxLDEyMiwxMjA0ODMsMTIyLDc0NTgsMTIyLDQzOTIzLDEyMiw3MTg3NiwxMjIsNjYyOTMsOTAsNzE5MDksOTAsNjUzMzgsOTAsODQ4NCw5MCw4NDg4LDkwLDExOTgzMyw5MCwxMTk4ODUsOTAsMTE5OTM3LDkwLDExOTk4OSw5MCwxMjAwNDEsOTAsMTIwMTk3LDkwLDEyMDI0OSw5MCwxMjAzMDEsOTAsMTIwMzUzLDkwLDEyMDQwNSw5MCwxMjA0NTcsOTAsOTE4LDkwLDEyMDQ5Myw5MCwxMjA1NTEsOTAsMTIwNjA5LDkwLDEyMDY2Nyw5MCwxMjA3MjUsOTAsNTA1OSw5MCw0MjIwNCw5MCw3MTg0OSw5MCw2NTI4MiwzNCw2NTI4NCwzNiw2NTI4NSwzNyw2NTI4NiwzOCw2NTI5MCw0Miw2NTI5MSw0Myw2NTI5NCw0Niw2NTI5NSw0Nyw2NTI5Niw0OCw2NTI5Nyw0OSw2NTI5OCw1MCw2NTI5OSw1MSw2NTMwMCw1Miw2NTMwMSw1Myw2NTMwMiw1NCw2NTMwMyw1NSw2NTMwNCw1Niw2NTMwNSw1Nyw2NTMwOCw2MCw2NTMwOSw2MSw2NTMxMCw2Miw2NTMxMiw2NCw2NTMxNiw2OCw2NTMxOCw3MCw2NTMxOSw3MSw2NTMyNCw3Niw2NTMyOSw4MSw2NTMzMCw4Miw2NTMzMyw4NSw2NTMzNCw4Niw2NTMzNSw4Nyw2NTM0Myw5NSw2NTM0Niw5OCw2NTM0OCwxMDAsNjUzNTAsMTAyLDY1MzU1LDEwNyw2NTM1NywxMDksNjUzNTgsMTEwLDY1MzYxLDExMyw2NTM2MiwxMTQsNjUzNjQsMTE2LDY1MzY1LDExNyw2NTM2NywxMTksNjUzNzAsMTIyLDY1MzcxLDEyMyw2NTM3MywxMjUsMTE5ODQ2LDEwOV0sXFxcIl9kZWZhdWx0XFxcIjpbMTYwLDMyLDgyMTEsNDUsNjUzNzQsMTI2LDY1MzA2LDU4LDY1MjgxLDMzLDgyMTYsOTYsODIxNyw5Niw4MjQ1LDk2LDE4MCw5NiwxMjQ5NCw0NywxMDQ3LDUxLDEwNzMsNTQsMTA3Miw5NywxMDQwLDY1LDEwNjgsOTgsMTA0Miw2NiwxMDg5LDk5LDEwNTcsNjcsMTA3NywxMDEsMTA0NSw2OSwxMDUzLDcyLDMwNSwxMDUsMTA1MCw3NSw5MjEsNzMsMTA1Miw3NywxMDg2LDExMSwxMDU0LDc5LDEwMDksMTEyLDEwODgsMTEyLDEwNTYsODAsMTA3NSwxMTQsMTA1OCw4NCwyMTUsMTIwLDEwOTMsMTIwLDEwNjEsODgsMTA5MSwxMjEsMTA1OSw4OSw2NTI4MywzNSw2NTI4OCw0MCw2NTI4OSw0MSw2NTI5Miw0NCw2NTMwNyw1OSw2NTMxMSw2M10sXFxcImNzXFxcIjpbNjUzNzQsMTI2LDY1MzA2LDU4LDY1MjgxLDMzLDgyMTYsOTYsODIxNyw5Niw4MjQ1LDk2LDE4MCw5NiwxMjQ5NCw0NywxMDQ3LDUxLDEwNzMsNTQsMTA3Miw5NywxMDQwLDY1LDEwNjgsOTgsMTA0Miw2NiwxMDg5LDk5LDEwNTcsNjcsMTA3NywxMDEsMTA0NSw2OSwxMDUzLDcyLDMwNSwxMDUsMTA1MCw3NSw5MjEsNzMsMTA1Miw3NywxMDg2LDExMSwxMDU0LDc5LDEwMDksMTEyLDEwODgsMTEyLDEwNTYsODAsMTA3NSwxMTQsMTA1OCw4NCwxMDkzLDEyMCwxMDYxLDg4LDEwOTEsMTIxLDEwNTksODksNjUyODMsMzUsNjUyODgsNDAsNjUyODksNDEsNjUyOTIsNDQsNjUzMDcsNTksNjUzMTEsNjNdLFxcXCJkZVxcXCI6WzY1Mzc0LDEyNiw2NTMwNiw1OCw2NTI4MSwzMyw4MjE2LDk2LDgyMTcsOTYsODI0NSw5NiwxODAsOTYsMTI0OTQsNDcsMTA0Nyw1MSwxMDczLDU0LDEwNzIsOTcsMTA0MCw2NSwxMDY4LDk4LDEwNDIsNjYsMTA4OSw5OSwxMDU3LDY3LDEwNzcsMTAxLDEwNDUsNjksMTA1Myw3MiwzMDUsMTA1LDEwNTAsNzUsOTIxLDczLDEwNTIsNzcsMTA4NiwxMTEsMTA1NCw3OSwxMDA5LDExMiwxMDg4LDExMiwxMDU2LDgwLDEwNzUsMTE0LDEwNTgsODQsMTA5MywxMjAsMTA2MSw4OCwxMDkxLDEyMSwxMDU5LDg5LDY1MjgzLDM1LDY1Mjg4LDQwLDY1Mjg5LDQxLDY1MjkyLDQ0LDY1MzA3LDU5LDY1MzExLDYzXSxcXFwiZXNcXFwiOls4MjExLDQ1LDY1Mzc0LDEyNiw2NTMwNiw1OCw2NTI4MSwzMyw4MjQ1LDk2LDE4MCw5NiwxMjQ5NCw0NywxMDQ3LDUxLDEwNzMsNTQsMTA3Miw5NywxMDQwLDY1LDEwNjgsOTgsMTA0Miw2NiwxMDg5LDk5LDEwNTcsNjcsMTA3NywxMDEsMTA0NSw2OSwxMDUzLDcyLDMwNSwxMDUsMTA1MCw3NSwxMDUyLDc3LDEwODYsMTExLDEwNTQsNzksMTAwOSwxMTIsMTA4OCwxMTIsMTA1Niw4MCwxMDc1LDExNCwxMDU4LDg0LDIxNSwxMjAsMTA5MywxMjAsMTA2MSw4OCwxMDkxLDEyMSwxMDU5LDg5LDY1MjgzLDM1LDY1Mjg4LDQwLDY1Mjg5LDQxLDY1MjkyLDQ0LDY1MzA3LDU5LDY1MzExLDYzXSxcXFwiZnJcXFwiOls2NTM3NCwxMjYsNjUzMDYsNTgsNjUyODEsMzMsODIxNiw5Niw4MjQ1LDk2LDEyNDk0LDQ3LDEwNDcsNTEsMTA3Myw1NCwxMDcyLDk3LDEwNDAsNjUsMTA2OCw5OCwxMDQyLDY2LDEwODksOTksMTA1Nyw2NywxMDc3LDEwMSwxMDQ1LDY5LDEwNTMsNzIsMzA1LDEwNSwxMDUwLDc1LDkyMSw3MywxMDUyLDc3LDEwODYsMTExLDEwNTQsNzksMTAwOSwxMTIsMTA4OCwxMTIsMTA1Niw4MCwxMDc1LDExNCwxMDU4LDg0LDIxNSwxMjAsMTA5MywxMjAsMTA2MSw4OCwxMDkxLDEyMSwxMDU5LDg5LDY1MjgzLDM1LDY1Mjg4LDQwLDY1Mjg5LDQxLDY1MjkyLDQ0LDY1MzA3LDU5LDY1MzExLDYzXSxcXFwiaXRcXFwiOlsxNjAsMzIsODIxMSw0NSw2NTM3NCwxMjYsNjUzMDYsNTgsNjUyODEsMzMsODIxNiw5Niw4MjQ1LDk2LDE4MCw5NiwxMjQ5NCw0NywxMDQ3LDUxLDEwNzMsNTQsMTA3Miw5NywxMDQwLDY1LDEwNjgsOTgsMTA0Miw2NiwxMDg5LDk5LDEwNTcsNjcsMTA3NywxMDEsMTA0NSw2OSwxMDUzLDcyLDMwNSwxMDUsMTA1MCw3NSw5MjEsNzMsMTA1Miw3NywxMDg2LDExMSwxMDU0LDc5LDEwMDksMTEyLDEwODgsMTEyLDEwNTYsODAsMTA3NSwxMTQsMTA1OCw4NCwyMTUsMTIwLDEwOTMsMTIwLDEwNjEsODgsMTA5MSwxMjEsMTA1OSw4OSw2NTI4MywzNSw2NTI4OCw0MCw2NTI4OSw0MSw2NTI5Miw0NCw2NTMwNyw1OSw2NTMxMSw2M10sXFxcImphXFxcIjpbODIxMSw0NSw2NTMwNiw1OCw2NTI4MSwzMyw4MjE2LDk2LDgyMTcsOTYsODI0NSw5NiwxODAsOTYsMTA0Nyw1MSwxMDczLDU0LDEwNzIsOTcsMTA0MCw2NSwxMDY4LDk4LDEwNDIsNjYsMTA4OSw5OSwxMDU3LDY3LDEwNzcsMTAxLDEwNDUsNjksMTA1Myw3MiwzMDUsMTA1LDEwNTAsNzUsOTIxLDczLDEwNTIsNzcsMTA4NiwxMTEsMTA1NCw3OSwxMDA5LDExMiwxMDg4LDExMiwxMDU2LDgwLDEwNzUsMTE0LDEwNTgsODQsMjE1LDEyMCwxMDkzLDEyMCwxMDYxLDg4LDEwOTEsMTIxLDEwNTksODksNjUyODMsMzUsNjUyOTIsNDQsNjUzMDcsNTldLFxcXCJrb1xcXCI6WzgyMTEsNDUsNjUzNzQsMTI2LDY1MzA2LDU4LDY1MjgxLDMzLDgyNDUsOTYsMTgwLDk2LDEyNDk0LDQ3LDEwNDcsNTEsMTA3Myw1NCwxMDcyLDk3LDEwNDAsNjUsMTA2OCw5OCwxMDQyLDY2LDEwODksOTksMTA1Nyw2NywxMDc3LDEwMSwxMDQ1LDY5LDEwNTMsNzIsMzA1LDEwNSwxMDUwLDc1LDkyMSw3MywxMDUyLDc3LDEwODYsMTExLDEwNTQsNzksMTAwOSwxMTIsMTA4OCwxMTIsMTA1Niw4MCwxMDc1LDExNCwxMDU4LDg0LDIxNSwxMjAsMTA5MywxMjAsMTA2MSw4OCwxMDkxLDEyMSwxMDU5LDg5LDY1MjgzLDM1LDY1Mjg4LDQwLDY1Mjg5LDQxLDY1MjkyLDQ0LDY1MzA3LDU5LDY1MzExLDYzXSxcXFwicGxcXFwiOls2NTM3NCwxMjYsNjUzMDYsNTgsNjUyODEsMzMsODIxNiw5Niw4MjE3LDk2LDgyNDUsOTYsMTgwLDk2LDEyNDk0LDQ3LDEwNDcsNTEsMTA3Myw1NCwxMDcyLDk3LDEwNDAsNjUsMTA2OCw5OCwxMDQyLDY2LDEwODksOTksMTA1Nyw2NywxMDc3LDEwMSwxMDQ1LDY5LDEwNTMsNzIsMzA1LDEwNSwxMDUwLDc1LDkyMSw3MywxMDUyLDc3LDEwODYsMTExLDEwNTQsNzksMTAwOSwxMTIsMTA4OCwxMTIsMTA1Niw4MCwxMDc1LDExNCwxMDU4LDg0LDIxNSwxMjAsMTA5MywxMjAsMTA2MSw4OCwxMDkxLDEyMSwxMDU5LDg5LDY1MjgzLDM1LDY1Mjg4LDQwLDY1Mjg5LDQxLDY1MjkyLDQ0LDY1MzA3LDU5LDY1MzExLDYzXSxcXFwicHQtQlJcXFwiOls2NTM3NCwxMjYsNjUzMDYsNTgsNjUyODEsMzMsODIxNiw5Niw4MjE3LDk2LDgyNDUsOTYsMTgwLDk2LDEyNDk0LDQ3LDEwNDcsNTEsMTA3Myw1NCwxMDcyLDk3LDEwNDAsNjUsMTA2OCw5OCwxMDQyLDY2LDEwODksOTksMTA1Nyw2NywxMDc3LDEwMSwxMDQ1LDY5LDEwNTMsNzIsMzA1LDEwNSwxMDUwLDc1LDkyMSw3MywxMDUyLDc3LDEwODYsMTExLDEwNTQsNzksMTAwOSwxMTIsMTA4OCwxMTIsMTA1Niw4MCwxMDc1LDExNCwxMDU4LDg0LDIxNSwxMjAsMTA5MywxMjAsMTA2MSw4OCwxMDkxLDEyMSwxMDU5LDg5LDY1MjgzLDM1LDY1Mjg4LDQwLDY1Mjg5LDQxLDY1MjkyLDQ0LDY1MzA3LDU5LDY1MzExLDYzXSxcXFwicXBzLXBsb2NcXFwiOlsxNjAsMzIsODIxMSw0NSw2NTM3NCwxMjYsNjUzMDYsNTgsNjUyODEsMzMsODIxNiw5Niw4MjE3LDk2LDgyNDUsOTYsMTgwLDk2LDEyNDk0LDQ3LDEwNDcsNTEsMTA3Myw1NCwxMDcyLDk3LDEwNDAsNjUsMTA2OCw5OCwxMDQyLDY2LDEwODksOTksMTA1Nyw2NywxMDc3LDEwMSwxMDQ1LDY5LDEwNTMsNzIsMzA1LDEwNSwxMDUwLDc1LDkyMSw3MywxMDUyLDc3LDEwODYsMTExLDEwNTQsNzksMTA4OCwxMTIsMTA1Niw4MCwxMDc1LDExNCwxMDU4LDg0LDIxNSwxMjAsMTA5MywxMjAsMTA2MSw4OCwxMDkxLDEyMSwxMDU5LDg5LDY1MjgzLDM1LDY1Mjg4LDQwLDY1Mjg5LDQxLDY1MjkyLDQ0LDY1MzA3LDU5LDY1MzExLDYzXSxcXFwicnVcXFwiOls2NTM3NCwxMjYsNjUzMDYsNTgsNjUyODEsMzMsODIxNiw5Niw4MjE3LDk2LDgyNDUsOTYsMTgwLDk2LDEyNDk0LDQ3LDMwNSwxMDUsOTIxLDczLDEwMDksMTEyLDIxNSwxMjAsNjUyODMsMzUsNjUyODgsNDAsNjUyODksNDEsNjUyOTIsNDQsNjUzMDcsNTksNjUzMTEsNjNdLFxcXCJ0clxcXCI6WzE2MCwzMiw4MjExLDQ1LDY1Mzc0LDEyNiw2NTMwNiw1OCw2NTI4MSwzMyw4MjQ1LDk2LDE4MCw5NiwxMjQ5NCw0NywxMDQ3LDUxLDEwNzMsNTQsMTA3Miw5NywxMDQwLDY1LDEwNjgsOTgsMTA0Miw2NiwxMDg5LDk5LDEwNTcsNjcsMTA3NywxMDEsMTA0NSw2OSwxMDUzLDcyLDEwNTAsNzUsOTIxLDczLDEwNTIsNzcsMTA4NiwxMTEsMTA1NCw3OSwxMDA5LDExMiwxMDg4LDExMiwxMDU2LDgwLDEwNzUsMTE0LDEwNTgsODQsMjE1LDEyMCwxMDkzLDEyMCwxMDYxLDg4LDEwOTEsMTIxLDEwNTksODksNjUyODMsMzUsNjUyODgsNDAsNjUyODksNDEsNjUyOTIsNDQsNjUzMDcsNTksNjUzMTEsNjNdLFxcXCJ6aC1oYW5zXFxcIjpbNjUzNzQsMTI2LDY1MzA2LDU4LDY1MjgxLDMzLDgyNDUsOTYsMTgwLDk2LDEyNDk0LDQ3LDEwNDcsNTEsMTA3Myw1NCwxMDcyLDk3LDEwNDAsNjUsMTA2OCw5OCwxMDQyLDY2LDEwODksOTksMTA1Nyw2NywxMDc3LDEwMSwxMDQ1LDY5LDEwNTMsNzIsMzA1LDEwNSwxMDUwLDc1LDkyMSw3MywxMDUyLDc3LDEwODYsMTExLDEwNTQsNzksMTAwOSwxMTIsMTA4OCwxMTIsMTA1Niw4MCwxMDc1LDExNCwxMDU4LDg0LDIxNSwxMjAsMTA5MywxMjAsMTA2MSw4OCwxMDkxLDEyMSwxMDU5LDg5LDY1Mjg4LDQwLDY1Mjg5LDQxXSxcXFwiemgtaGFudFxcXCI6WzgyMTEsNDUsNjUzNzQsMTI2LDE4MCw5NiwxMjQ5NCw0NywxMDQ3LDUxLDEwNzMsNTQsMTA3Miw5NywxMDQwLDY1LDEwNjgsOTgsMTA0Miw2NiwxMDg5LDk5LDEwNTcsNjcsMTA3NywxMDEsMTA0NSw2OSwxMDUzLDcyLDMwNSwxMDUsMTA1MCw3NSw5MjEsNzMsMTA1Miw3NywxMDg2LDExMSwxMDU0LDc5LDEwMDksMTEyLDEwODgsMTEyLDEwNTYsODAsMTA3NSwxMTQsMTA1OCw4NCwyMTUsMTIwLDEwOTMsMTIwLDEwNjEsODgsMTA5MSwxMjEsMTA1OSw4OSw2NTI4MywzNSw2NTMwNyw1OV19Jyk7XG59KTtcbkFtYmlndW91c0NoYXJhY3RlcnMuY2FjaGUgPSBuZXcgTFJVQ2FjaGVkRnVuY3Rpb24oeyBnZXRDYWNoZUtleTogSlNPTi5zdHJpbmdpZnkgfSwgKGxvY2FsZXMpID0+IHtcbiAgICBmdW5jdGlvbiBhcnJheVRvTWFwKGFycikge1xuICAgICAgICBjb25zdCByZXN1bHQgPSBuZXcgTWFwKCk7XG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgYXJyLmxlbmd0aDsgaSArPSAyKSB7XG4gICAgICAgICAgICByZXN1bHQuc2V0KGFycltpXSwgYXJyW2kgKyAxXSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG4gICAgZnVuY3Rpb24gbWVyZ2VNYXBzKG1hcDEsIG1hcDIpIHtcbiAgICAgICAgY29uc3QgcmVzdWx0ID0gbmV3IE1hcChtYXAxKTtcbiAgICAgICAgZm9yIChjb25zdCBba2V5LCB2YWx1ZV0gb2YgbWFwMikge1xuICAgICAgICAgICAgcmVzdWx0LnNldChrZXksIHZhbHVlKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cbiAgICBmdW5jdGlvbiBpbnRlcnNlY3RNYXBzKG1hcDEsIG1hcDIpIHtcbiAgICAgICAgaWYgKCFtYXAxKSB7XG4gICAgICAgICAgICByZXR1cm4gbWFwMjtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCByZXN1bHQgPSBuZXcgTWFwKCk7XG4gICAgICAgIGZvciAoY29uc3QgW2tleSwgdmFsdWVdIG9mIG1hcDEpIHtcbiAgICAgICAgICAgIGlmIChtYXAyLmhhcyhrZXkpKSB7XG4gICAgICAgICAgICAgICAgcmVzdWx0LnNldChrZXksIHZhbHVlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cbiAgICBjb25zdCBkYXRhID0gX2EuYW1iaWd1b3VzQ2hhcmFjdGVyRGF0YS52YWx1ZTtcbiAgICBsZXQgZmlsdGVyZWRMb2NhbGVzID0gbG9jYWxlcy5maWx0ZXIoKGwpID0+ICFsLnN0YXJ0c1dpdGgoJ18nKSAmJiBsIGluIGRhdGEpO1xuICAgIGlmIChmaWx0ZXJlZExvY2FsZXMubGVuZ3RoID09PSAwKSB7XG4gICAgICAgIGZpbHRlcmVkTG9jYWxlcyA9IFsnX2RlZmF1bHQnXTtcbiAgICB9XG4gICAgbGV0IGxhbmd1YWdlU3BlY2lmaWNNYXAgPSB1bmRlZmluZWQ7XG4gICAgZm9yIChjb25zdCBsb2NhbGUgb2YgZmlsdGVyZWRMb2NhbGVzKSB7XG4gICAgICAgIGNvbnN0IG1hcCA9IGFycmF5VG9NYXAoZGF0YVtsb2NhbGVdKTtcbiAgICAgICAgbGFuZ3VhZ2VTcGVjaWZpY01hcCA9IGludGVyc2VjdE1hcHMobGFuZ3VhZ2VTcGVjaWZpY01hcCwgbWFwKTtcbiAgICB9XG4gICAgY29uc3QgY29tbW9uTWFwID0gYXJyYXlUb01hcChkYXRhWydfY29tbW9uJ10pO1xuICAgIGNvbnN0IG1hcCA9IG1lcmdlTWFwcyhjb21tb25NYXAsIGxhbmd1YWdlU3BlY2lmaWNNYXApO1xuICAgIHJldHVybiBuZXcgX2EobWFwKTtcbn0pO1xuQW1iaWd1b3VzQ2hhcmFjdGVycy5fbG9jYWxlcyA9IG5ldyBMYXp5KCgpID0+IE9iamVjdC5rZXlzKF9hLmFtYmlndW91c0NoYXJhY3RlckRhdGEudmFsdWUpLmZpbHRlcigoaykgPT4gIWsuc3RhcnRzV2l0aCgnXycpKSk7XG5leHBvcnQgY2xhc3MgSW52aXNpYmxlQ2hhcmFjdGVycyB7XG4gICAgc3RhdGljIGdldFJhd0RhdGEoKSB7XG4gICAgICAgIC8vIEdlbmVyYXRlZCB1c2luZyBodHRwczovL2dpdGh1Yi5jb20vaGVkaWV0L3ZzY29kZS11bmljb2RlLWRhdGFcbiAgICAgICAgcmV0dXJuIEpTT04ucGFyc2UoJ1s5LDEwLDExLDEyLDEzLDMyLDEyNywxNjAsMTczLDg0NywxNTY0LDQ0NDcsNDQ0OCw2MDY4LDYwNjksNjE1NSw2MTU2LDYxNTcsNjE1OCw3MzU1LDczNTYsODE5Miw4MTkzLDgxOTQsODE5NSw4MTk2LDgxOTcsODE5OCw4MTk5LDgyMDAsODIwMSw4MjAyLDgyMDMsODIwNCw4MjA1LDgyMDYsODIwNyw4MjM0LDgyMzUsODIzNiw4MjM3LDgyMzgsODIzOSw4Mjg3LDgyODgsODI4OSw4MjkwLDgyOTEsODI5Miw4MjkzLDgyOTQsODI5NSw4Mjk2LDgyOTcsODI5OCw4Mjk5LDgzMDAsODMwMSw4MzAyLDgzMDMsMTAyNDAsMTIyODgsMTI2NDQsNjUwMjQsNjUwMjUsNjUwMjYsNjUwMjcsNjUwMjgsNjUwMjksNjUwMzAsNjUwMzEsNjUwMzIsNjUwMzMsNjUwMzQsNjUwMzUsNjUwMzYsNjUwMzcsNjUwMzgsNjUwMzksNjUyNzksNjU0NDAsNjU1MjAsNjU1MjEsNjU1MjIsNjU1MjMsNjU1MjQsNjU1MjUsNjU1MjYsNjU1MjcsNjU1MjgsNjU1MzIsNzg4NDQsMTE5MTU1LDExOTE1NiwxMTkxNTcsMTE5MTU4LDExOTE1OSwxMTkxNjAsMTE5MTYxLDExOTE2Miw5MTc1MDQsOTE3NTA1LDkxNzUwNiw5MTc1MDcsOTE3NTA4LDkxNzUwOSw5MTc1MTAsOTE3NTExLDkxNzUxMiw5MTc1MTMsOTE3NTE0LDkxNzUxNSw5MTc1MTYsOTE3NTE3LDkxNzUxOCw5MTc1MTksOTE3NTIwLDkxNzUyMSw5MTc1MjIsOTE3NTIzLDkxNzUyNCw5MTc1MjUsOTE3NTI2LDkxNzUyNyw5MTc1MjgsOTE3NTI5LDkxNzUzMCw5MTc1MzEsOTE3NTMyLDkxNzUzMyw5MTc1MzQsOTE3NTM1LDkxNzUzNiw5MTc1MzcsOTE3NTM4LDkxNzUzOSw5MTc1NDAsOTE3NTQxLDkxNzU0Miw5MTc1NDMsOTE3NTQ0LDkxNzU0NSw5MTc1NDYsOTE3NTQ3LDkxNzU0OCw5MTc1NDksOTE3NTUwLDkxNzU1MSw5MTc1NTIsOTE3NTUzLDkxNzU1NCw5MTc1NTUsOTE3NTU2LDkxNzU1Nyw5MTc1NTgsOTE3NTU5LDkxNzU2MCw5MTc1NjEsOTE3NTYyLDkxNzU2Myw5MTc1NjQsOTE3NTY1LDkxNzU2Niw5MTc1NjcsOTE3NTY4LDkxNzU2OSw5MTc1NzAsOTE3NTcxLDkxNzU3Miw5MTc1NzMsOTE3NTc0LDkxNzU3NSw5MTc1NzYsOTE3NTc3LDkxNzU3OCw5MTc1NzksOTE3NTgwLDkxNzU4MSw5MTc1ODIsOTE3NTgzLDkxNzU4NCw5MTc1ODUsOTE3NTg2LDkxNzU4Nyw5MTc1ODgsOTE3NTg5LDkxNzU5MCw5MTc1OTEsOTE3NTkyLDkxNzU5Myw5MTc1OTQsOTE3NTk1LDkxNzU5Niw5MTc1OTcsOTE3NTk4LDkxNzU5OSw5MTc2MDAsOTE3NjAxLDkxNzYwMiw5MTc2MDMsOTE3NjA0LDkxNzYwNSw5MTc2MDYsOTE3NjA3LDkxNzYwOCw5MTc2MDksOTE3NjEwLDkxNzYxMSw5MTc2MTIsOTE3NjEzLDkxNzYxNCw5MTc2MTUsOTE3NjE2LDkxNzYxNyw5MTc2MTgsOTE3NjE5LDkxNzYyMCw5MTc2MjEsOTE3NjIyLDkxNzYyMyw5MTc2MjQsOTE3NjI1LDkxNzYyNiw5MTc2MjcsOTE3NjI4LDkxNzYyOSw5MTc2MzAsOTE3NjMxLDkxNzc2MCw5MTc3NjEsOTE3NzYyLDkxNzc2Myw5MTc3NjQsOTE3NzY1LDkxNzc2Niw5MTc3NjcsOTE3NzY4LDkxNzc2OSw5MTc3NzAsOTE3NzcxLDkxNzc3Miw5MTc3NzMsOTE3Nzc0LDkxNzc3NSw5MTc3NzYsOTE3Nzc3LDkxNzc3OCw5MTc3NzksOTE3NzgwLDkxNzc4MSw5MTc3ODIsOTE3NzgzLDkxNzc4NCw5MTc3ODUsOTE3Nzg2LDkxNzc4Nyw5MTc3ODgsOTE3Nzg5LDkxNzc5MCw5MTc3OTEsOTE3NzkyLDkxNzc5Myw5MTc3OTQsOTE3Nzk1LDkxNzc5Niw5MTc3OTcsOTE3Nzk4LDkxNzc5OSw5MTc4MDAsOTE3ODAxLDkxNzgwMiw5MTc4MDMsOTE3ODA0LDkxNzgwNSw5MTc4MDYsOTE3ODA3LDkxNzgwOCw5MTc4MDksOTE3ODEwLDkxNzgxMSw5MTc4MTIsOTE3ODEzLDkxNzgxNCw5MTc4MTUsOTE3ODE2LDkxNzgxNyw5MTc4MTgsOTE3ODE5LDkxNzgyMCw5MTc4MjEsOTE3ODIyLDkxNzgyMyw5MTc4MjQsOTE3ODI1LDkxNzgyNiw5MTc4MjcsOTE3ODI4LDkxNzgyOSw5MTc4MzAsOTE3ODMxLDkxNzgzMiw5MTc4MzMsOTE3ODM0LDkxNzgzNSw5MTc4MzYsOTE3ODM3LDkxNzgzOCw5MTc4MzksOTE3ODQwLDkxNzg0MSw5MTc4NDIsOTE3ODQzLDkxNzg0NCw5MTc4NDUsOTE3ODQ2LDkxNzg0Nyw5MTc4NDgsOTE3ODQ5LDkxNzg1MCw5MTc4NTEsOTE3ODUyLDkxNzg1Myw5MTc4NTQsOTE3ODU1LDkxNzg1Niw5MTc4NTcsOTE3ODU4LDkxNzg1OSw5MTc4NjAsOTE3ODYxLDkxNzg2Miw5MTc4NjMsOTE3ODY0LDkxNzg2NSw5MTc4NjYsOTE3ODY3LDkxNzg2OCw5MTc4NjksOTE3ODcwLDkxNzg3MSw5MTc4NzIsOTE3ODczLDkxNzg3NCw5MTc4NzUsOTE3ODc2LDkxNzg3Nyw5MTc4NzgsOTE3ODc5LDkxNzg4MCw5MTc4ODEsOTE3ODgyLDkxNzg4Myw5MTc4ODQsOTE3ODg1LDkxNzg4Niw5MTc4ODcsOTE3ODg4LDkxNzg4OSw5MTc4OTAsOTE3ODkxLDkxNzg5Miw5MTc4OTMsOTE3ODk0LDkxNzg5NSw5MTc4OTYsOTE3ODk3LDkxNzg5OCw5MTc4OTksOTE3OTAwLDkxNzkwMSw5MTc5MDIsOTE3OTAzLDkxNzkwNCw5MTc5MDUsOTE3OTA2LDkxNzkwNyw5MTc5MDgsOTE3OTA5LDkxNzkxMCw5MTc5MTEsOTE3OTEyLDkxNzkxMyw5MTc5MTQsOTE3OTE1LDkxNzkxNiw5MTc5MTcsOTE3OTE4LDkxNzkxOSw5MTc5MjAsOTE3OTIxLDkxNzkyMiw5MTc5MjMsOTE3OTI0LDkxNzkyNSw5MTc5MjYsOTE3OTI3LDkxNzkyOCw5MTc5MjksOTE3OTMwLDkxNzkzMSw5MTc5MzIsOTE3OTMzLDkxNzkzNCw5MTc5MzUsOTE3OTM2LDkxNzkzNyw5MTc5MzgsOTE3OTM5LDkxNzk0MCw5MTc5NDEsOTE3OTQyLDkxNzk0Myw5MTc5NDQsOTE3OTQ1LDkxNzk0Niw5MTc5NDcsOTE3OTQ4LDkxNzk0OSw5MTc5NTAsOTE3OTUxLDkxNzk1Miw5MTc5NTMsOTE3OTU0LDkxNzk1NSw5MTc5NTYsOTE3OTU3LDkxNzk1OCw5MTc5NTksOTE3OTYwLDkxNzk2MSw5MTc5NjIsOTE3OTYzLDkxNzk2NCw5MTc5NjUsOTE3OTY2LDkxNzk2Nyw5MTc5NjgsOTE3OTY5LDkxNzk3MCw5MTc5NzEsOTE3OTcyLDkxNzk3Myw5MTc5NzQsOTE3OTc1LDkxNzk3Niw5MTc5NzcsOTE3OTc4LDkxNzk3OSw5MTc5ODAsOTE3OTgxLDkxNzk4Miw5MTc5ODMsOTE3OTg0LDkxNzk4NSw5MTc5ODYsOTE3OTg3LDkxNzk4OCw5MTc5ODksOTE3OTkwLDkxNzk5MSw5MTc5OTIsOTE3OTkzLDkxNzk5NCw5MTc5OTUsOTE3OTk2LDkxNzk5Nyw5MTc5OTgsOTE3OTk5XScpO1xuICAgIH1cbiAgICBzdGF0aWMgZ2V0RGF0YSgpIHtcbiAgICAgICAgaWYgKCF0aGlzLl9kYXRhKSB7XG4gICAgICAgICAgICB0aGlzLl9kYXRhID0gbmV3IFNldChJbnZpc2libGVDaGFyYWN0ZXJzLmdldFJhd0RhdGEoKSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRoaXMuX2RhdGE7XG4gICAgfVxuICAgIHN0YXRpYyBpc0ludmlzaWJsZUNoYXJhY3Rlcihjb2RlUG9pbnQpIHtcbiAgICAgICAgcmV0dXJuIEludmlzaWJsZUNoYXJhY3RlcnMuZ2V0RGF0YSgpLmhhcyhjb2RlUG9pbnQpO1xuICAgIH1cbiAgICBzdGF0aWMgZ2V0IGNvZGVQb2ludHMoKSB7XG4gICAgICAgIHJldHVybiBJbnZpc2libGVDaGFyYWN0ZXJzLmdldERhdGEoKTtcbiAgICB9XG59XG5JbnZpc2libGVDaGFyYWN0ZXJzLl9kYXRhID0gdW5kZWZpbmVkO1xuIiwgIi8qLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gKiAgQ29weXJpZ2h0IChjKSBNaWNyb3NvZnQgQ29ycG9yYXRpb24uIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKiAgTGljZW5zZWQgdW5kZXIgdGhlIE1JVCBMaWNlbnNlLiBTZWUgTGljZW5zZS50eHQgaW4gdGhlIHByb2plY3Qgcm9vdCBmb3IgbGljZW5zZSBpbmZvcm1hdGlvbi5cbiAqLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qL1xuaW1wb3J0IHsgdHJhbnNmb3JtRXJyb3JGb3JTZXJpYWxpemF0aW9uIH0gZnJvbSAnLi4vZXJyb3JzLmpzJztcbmltcG9ydCB7IEVtaXR0ZXIgfSBmcm9tICcuLi9ldmVudC5qcyc7XG5pbXBvcnQgeyBEaXNwb3NhYmxlIH0gZnJvbSAnLi4vbGlmZWN5Y2xlLmpzJztcbmltcG9ydCB7IGdldEFsbE1ldGhvZE5hbWVzIH0gZnJvbSAnLi4vb2JqZWN0cy5qcyc7XG5pbXBvcnQgeyBpc1dlYiB9IGZyb20gJy4uL3BsYXRmb3JtLmpzJztcbmltcG9ydCAqIGFzIHN0cmluZ3MgZnJvbSAnLi4vc3RyaW5ncy5qcyc7XG5jb25zdCBJTklUSUFMSVpFID0gJyRpbml0aWFsaXplJztcbmxldCB3ZWJXb3JrZXJXYXJuaW5nTG9nZ2VkID0gZmFsc2U7XG5leHBvcnQgZnVuY3Rpb24gbG9nT25jZVdlYldvcmtlcldhcm5pbmcoZXJyKSB7XG4gICAgaWYgKCFpc1dlYikge1xuICAgICAgICAvLyBydW5uaW5nIHRlc3RzXG4gICAgICAgIHJldHVybjtcbiAgICB9XG4gICAgaWYgKCF3ZWJXb3JrZXJXYXJuaW5nTG9nZ2VkKSB7XG4gICAgICAgIHdlYldvcmtlcldhcm5pbmdMb2dnZWQgPSB0cnVlO1xuICAgICAgICBjb25zb2xlLndhcm4oJ0NvdWxkIG5vdCBjcmVhdGUgd2ViIHdvcmtlcihzKS4gRmFsbGluZyBiYWNrIHRvIGxvYWRpbmcgd2ViIHdvcmtlciBjb2RlIGluIG1haW4gdGhyZWFkLCB3aGljaCBtaWdodCBjYXVzZSBVSSBmcmVlemVzLiBQbGVhc2Ugc2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9taWNyb3NvZnQvbW9uYWNvLWVkaXRvciNmYXEnKTtcbiAgICB9XG4gICAgY29uc29sZS53YXJuKGVyci5tZXNzYWdlKTtcbn1cbmNsYXNzIFJlcXVlc3RNZXNzYWdlIHtcbiAgICBjb25zdHJ1Y3Rvcih2c1dvcmtlciwgcmVxLCBtZXRob2QsIGFyZ3MpIHtcbiAgICAgICAgdGhpcy52c1dvcmtlciA9IHZzV29ya2VyO1xuICAgICAgICB0aGlzLnJlcSA9IHJlcTtcbiAgICAgICAgdGhpcy5tZXRob2QgPSBtZXRob2Q7XG4gICAgICAgIHRoaXMuYXJncyA9IGFyZ3M7XG4gICAgICAgIHRoaXMudHlwZSA9IDAgLyogTWVzc2FnZVR5cGUuUmVxdWVzdCAqLztcbiAgICB9XG59XG5jbGFzcyBSZXBseU1lc3NhZ2Uge1xuICAgIGNvbnN0cnVjdG9yKHZzV29ya2VyLCBzZXEsIHJlcywgZXJyKSB7XG4gICAgICAgIHRoaXMudnNXb3JrZXIgPSB2c1dvcmtlcjtcbiAgICAgICAgdGhpcy5zZXEgPSBzZXE7XG4gICAgICAgIHRoaXMucmVzID0gcmVzO1xuICAgICAgICB0aGlzLmVyciA9IGVycjtcbiAgICAgICAgdGhpcy50eXBlID0gMSAvKiBNZXNzYWdlVHlwZS5SZXBseSAqLztcbiAgICB9XG59XG5jbGFzcyBTdWJzY3JpYmVFdmVudE1lc3NhZ2Uge1xuICAgIGNvbnN0cnVjdG9yKHZzV29ya2VyLCByZXEsIGV2ZW50TmFtZSwgYXJnKSB7XG4gICAgICAgIHRoaXMudnNXb3JrZXIgPSB2c1dvcmtlcjtcbiAgICAgICAgdGhpcy5yZXEgPSByZXE7XG4gICAgICAgIHRoaXMuZXZlbnROYW1lID0gZXZlbnROYW1lO1xuICAgICAgICB0aGlzLmFyZyA9IGFyZztcbiAgICAgICAgdGhpcy50eXBlID0gMiAvKiBNZXNzYWdlVHlwZS5TdWJzY3JpYmVFdmVudCAqLztcbiAgICB9XG59XG5jbGFzcyBFdmVudE1lc3NhZ2Uge1xuICAgIGNvbnN0cnVjdG9yKHZzV29ya2VyLCByZXEsIGV2ZW50KSB7XG4gICAgICAgIHRoaXMudnNXb3JrZXIgPSB2c1dvcmtlcjtcbiAgICAgICAgdGhpcy5yZXEgPSByZXE7XG4gICAgICAgIHRoaXMuZXZlbnQgPSBldmVudDtcbiAgICAgICAgdGhpcy50eXBlID0gMyAvKiBNZXNzYWdlVHlwZS5FdmVudCAqLztcbiAgICB9XG59XG5jbGFzcyBVbnN1YnNjcmliZUV2ZW50TWVzc2FnZSB7XG4gICAgY29uc3RydWN0b3IodnNXb3JrZXIsIHJlcSkge1xuICAgICAgICB0aGlzLnZzV29ya2VyID0gdnNXb3JrZXI7XG4gICAgICAgIHRoaXMucmVxID0gcmVxO1xuICAgICAgICB0aGlzLnR5cGUgPSA0IC8qIE1lc3NhZ2VUeXBlLlVuc3Vic2NyaWJlRXZlbnQgKi87XG4gICAgfVxufVxuY2xhc3MgU2ltcGxlV29ya2VyUHJvdG9jb2wge1xuICAgIGNvbnN0cnVjdG9yKGhhbmRsZXIpIHtcbiAgICAgICAgdGhpcy5fd29ya2VySWQgPSAtMTtcbiAgICAgICAgdGhpcy5faGFuZGxlciA9IGhhbmRsZXI7XG4gICAgICAgIHRoaXMuX2xhc3RTZW50UmVxID0gMDtcbiAgICAgICAgdGhpcy5fcGVuZGluZ1JlcGxpZXMgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuICAgICAgICB0aGlzLl9wZW5kaW5nRW1pdHRlcnMgPSBuZXcgTWFwKCk7XG4gICAgICAgIHRoaXMuX3BlbmRpbmdFdmVudHMgPSBuZXcgTWFwKCk7XG4gICAgfVxuICAgIHNldFdvcmtlcklkKHdvcmtlcklkKSB7XG4gICAgICAgIHRoaXMuX3dvcmtlcklkID0gd29ya2VySWQ7XG4gICAgfVxuICAgIHNlbmRNZXNzYWdlKG1ldGhvZCwgYXJncykge1xuICAgICAgICBjb25zdCByZXEgPSBTdHJpbmcoKyt0aGlzLl9sYXN0U2VudFJlcSk7XG4gICAgICAgIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgICAgICAgICB0aGlzLl9wZW5kaW5nUmVwbGllc1tyZXFdID0ge1xuICAgICAgICAgICAgICAgIHJlc29sdmU6IHJlc29sdmUsXG4gICAgICAgICAgICAgICAgcmVqZWN0OiByZWplY3RcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICB0aGlzLl9zZW5kKG5ldyBSZXF1ZXN0TWVzc2FnZSh0aGlzLl93b3JrZXJJZCwgcmVxLCBtZXRob2QsIGFyZ3MpKTtcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIGxpc3RlbihldmVudE5hbWUsIGFyZykge1xuICAgICAgICBsZXQgcmVxID0gbnVsbDtcbiAgICAgICAgY29uc3QgZW1pdHRlciA9IG5ldyBFbWl0dGVyKHtcbiAgICAgICAgICAgIG9uV2lsbEFkZEZpcnN0TGlzdGVuZXI6ICgpID0+IHtcbiAgICAgICAgICAgICAgICByZXEgPSBTdHJpbmcoKyt0aGlzLl9sYXN0U2VudFJlcSk7XG4gICAgICAgICAgICAgICAgdGhpcy5fcGVuZGluZ0VtaXR0ZXJzLnNldChyZXEsIGVtaXR0ZXIpO1xuICAgICAgICAgICAgICAgIHRoaXMuX3NlbmQobmV3IFN1YnNjcmliZUV2ZW50TWVzc2FnZSh0aGlzLl93b3JrZXJJZCwgcmVxLCBldmVudE5hbWUsIGFyZykpO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIG9uRGlkUmVtb3ZlTGFzdExpc3RlbmVyOiAoKSA9PiB7XG4gICAgICAgICAgICAgICAgdGhpcy5fcGVuZGluZ0VtaXR0ZXJzLmRlbGV0ZShyZXEpO1xuICAgICAgICAgICAgICAgIHRoaXMuX3NlbmQobmV3IFVuc3Vic2NyaWJlRXZlbnRNZXNzYWdlKHRoaXMuX3dvcmtlcklkLCByZXEpKTtcbiAgICAgICAgICAgICAgICByZXEgPSBudWxsO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgICAgcmV0dXJuIGVtaXR0ZXIuZXZlbnQ7XG4gICAgfVxuICAgIGhhbmRsZU1lc3NhZ2UobWVzc2FnZSkge1xuICAgICAgICBpZiAoIW1lc3NhZ2UgfHwgIW1lc3NhZ2UudnNXb3JrZXIpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBpZiAodGhpcy5fd29ya2VySWQgIT09IC0xICYmIG1lc3NhZ2UudnNXb3JrZXIgIT09IHRoaXMuX3dvcmtlcklkKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5faGFuZGxlTWVzc2FnZShtZXNzYWdlKTtcbiAgICB9XG4gICAgX2hhbmRsZU1lc3NhZ2UobXNnKSB7XG4gICAgICAgIHN3aXRjaCAobXNnLnR5cGUpIHtcbiAgICAgICAgICAgIGNhc2UgMSAvKiBNZXNzYWdlVHlwZS5SZXBseSAqLzpcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5faGFuZGxlUmVwbHlNZXNzYWdlKG1zZyk7XG4gICAgICAgICAgICBjYXNlIDAgLyogTWVzc2FnZVR5cGUuUmVxdWVzdCAqLzpcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5faGFuZGxlUmVxdWVzdE1lc3NhZ2UobXNnKTtcbiAgICAgICAgICAgIGNhc2UgMiAvKiBNZXNzYWdlVHlwZS5TdWJzY3JpYmVFdmVudCAqLzpcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5faGFuZGxlU3Vic2NyaWJlRXZlbnRNZXNzYWdlKG1zZyk7XG4gICAgICAgICAgICBjYXNlIDMgLyogTWVzc2FnZVR5cGUuRXZlbnQgKi86XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuX2hhbmRsZUV2ZW50TWVzc2FnZShtc2cpO1xuICAgICAgICAgICAgY2FzZSA0IC8qIE1lc3NhZ2VUeXBlLlVuc3Vic2NyaWJlRXZlbnQgKi86XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuX2hhbmRsZVVuc3Vic2NyaWJlRXZlbnRNZXNzYWdlKG1zZyk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgX2hhbmRsZVJlcGx5TWVzc2FnZShyZXBseU1lc3NhZ2UpIHtcbiAgICAgICAgaWYgKCF0aGlzLl9wZW5kaW5nUmVwbGllc1tyZXBseU1lc3NhZ2Uuc2VxXSkge1xuICAgICAgICAgICAgY29uc29sZS53YXJuKCdHb3QgcmVwbHkgdG8gdW5rbm93biBzZXEnKTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCByZXBseSA9IHRoaXMuX3BlbmRpbmdSZXBsaWVzW3JlcGx5TWVzc2FnZS5zZXFdO1xuICAgICAgICBkZWxldGUgdGhpcy5fcGVuZGluZ1JlcGxpZXNbcmVwbHlNZXNzYWdlLnNlcV07XG4gICAgICAgIGlmIChyZXBseU1lc3NhZ2UuZXJyKSB7XG4gICAgICAgICAgICBsZXQgZXJyID0gcmVwbHlNZXNzYWdlLmVycjtcbiAgICAgICAgICAgIGlmIChyZXBseU1lc3NhZ2UuZXJyLiRpc0Vycm9yKSB7XG4gICAgICAgICAgICAgICAgZXJyID0gbmV3IEVycm9yKCk7XG4gICAgICAgICAgICAgICAgZXJyLm5hbWUgPSByZXBseU1lc3NhZ2UuZXJyLm5hbWU7XG4gICAgICAgICAgICAgICAgZXJyLm1lc3NhZ2UgPSByZXBseU1lc3NhZ2UuZXJyLm1lc3NhZ2U7XG4gICAgICAgICAgICAgICAgZXJyLnN0YWNrID0gcmVwbHlNZXNzYWdlLmVyci5zdGFjaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJlcGx5LnJlamVjdChlcnIpO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIHJlcGx5LnJlc29sdmUocmVwbHlNZXNzYWdlLnJlcyk7XG4gICAgfVxuICAgIF9oYW5kbGVSZXF1ZXN0TWVzc2FnZShyZXF1ZXN0TWVzc2FnZSkge1xuICAgICAgICBjb25zdCByZXEgPSByZXF1ZXN0TWVzc2FnZS5yZXE7XG4gICAgICAgIGNvbnN0IHJlc3VsdCA9IHRoaXMuX2hhbmRsZXIuaGFuZGxlTWVzc2FnZShyZXF1ZXN0TWVzc2FnZS5tZXRob2QsIHJlcXVlc3RNZXNzYWdlLmFyZ3MpO1xuICAgICAgICByZXN1bHQudGhlbigocikgPT4ge1xuICAgICAgICAgICAgdGhpcy5fc2VuZChuZXcgUmVwbHlNZXNzYWdlKHRoaXMuX3dvcmtlcklkLCByZXEsIHIsIHVuZGVmaW5lZCkpO1xuICAgICAgICB9LCAoZSkgPT4ge1xuICAgICAgICAgICAgaWYgKGUuZGV0YWlsIGluc3RhbmNlb2YgRXJyb3IpIHtcbiAgICAgICAgICAgICAgICAvLyBMb2FkaW5nIGVycm9ycyBoYXZlIGEgZGV0YWlsIHByb3BlcnR5IHRoYXQgcG9pbnRzIHRvIHRoZSBhY3R1YWwgZXJyb3JcbiAgICAgICAgICAgICAgICBlLmRldGFpbCA9IHRyYW5zZm9ybUVycm9yRm9yU2VyaWFsaXphdGlvbihlLmRldGFpbCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0aGlzLl9zZW5kKG5ldyBSZXBseU1lc3NhZ2UodGhpcy5fd29ya2VySWQsIHJlcSwgdW5kZWZpbmVkLCB0cmFuc2Zvcm1FcnJvckZvclNlcmlhbGl6YXRpb24oZSkpKTtcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIF9oYW5kbGVTdWJzY3JpYmVFdmVudE1lc3NhZ2UobXNnKSB7XG4gICAgICAgIGNvbnN0IHJlcSA9IG1zZy5yZXE7XG4gICAgICAgIGNvbnN0IGRpc3Bvc2FibGUgPSB0aGlzLl9oYW5kbGVyLmhhbmRsZUV2ZW50KG1zZy5ldmVudE5hbWUsIG1zZy5hcmcpKChldmVudCkgPT4ge1xuICAgICAgICAgICAgdGhpcy5fc2VuZChuZXcgRXZlbnRNZXNzYWdlKHRoaXMuX3dvcmtlcklkLCByZXEsIGV2ZW50KSk7XG4gICAgICAgIH0pO1xuICAgICAgICB0aGlzLl9wZW5kaW5nRXZlbnRzLnNldChyZXEsIGRpc3Bvc2FibGUpO1xuICAgIH1cbiAgICBfaGFuZGxlRXZlbnRNZXNzYWdlKG1zZykge1xuICAgICAgICBpZiAoIXRoaXMuX3BlbmRpbmdFbWl0dGVycy5oYXMobXNnLnJlcSkpIHtcbiAgICAgICAgICAgIGNvbnNvbGUud2FybignR290IGV2ZW50IGZvciB1bmtub3duIHJlcScpO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuX3BlbmRpbmdFbWl0dGVycy5nZXQobXNnLnJlcSkuZmlyZShtc2cuZXZlbnQpO1xuICAgIH1cbiAgICBfaGFuZGxlVW5zdWJzY3JpYmVFdmVudE1lc3NhZ2UobXNnKSB7XG4gICAgICAgIGlmICghdGhpcy5fcGVuZGluZ0V2ZW50cy5oYXMobXNnLnJlcSkpIHtcbiAgICAgICAgICAgIGNvbnNvbGUud2FybignR290IHVuc3Vic2NyaWJlIGZvciB1bmtub3duIHJlcScpO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuX3BlbmRpbmdFdmVudHMuZ2V0KG1zZy5yZXEpLmRpc3Bvc2UoKTtcbiAgICAgICAgdGhpcy5fcGVuZGluZ0V2ZW50cy5kZWxldGUobXNnLnJlcSk7XG4gICAgfVxuICAgIF9zZW5kKG1zZykge1xuICAgICAgICBjb25zdCB0cmFuc2ZlciA9IFtdO1xuICAgICAgICBpZiAobXNnLnR5cGUgPT09IDAgLyogTWVzc2FnZVR5cGUuUmVxdWVzdCAqLykge1xuICAgICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBtc2cuYXJncy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgICAgIGlmIChtc2cuYXJnc1tpXSBpbnN0YW5jZW9mIEFycmF5QnVmZmVyKSB7XG4gICAgICAgICAgICAgICAgICAgIHRyYW5zZmVyLnB1c2gobXNnLmFyZ3NbaV0pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChtc2cudHlwZSA9PT0gMSAvKiBNZXNzYWdlVHlwZS5SZXBseSAqLykge1xuICAgICAgICAgICAgaWYgKG1zZy5yZXMgaW5zdGFuY2VvZiBBcnJheUJ1ZmZlcikge1xuICAgICAgICAgICAgICAgIHRyYW5zZmVyLnB1c2gobXNnLnJlcyk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5faGFuZGxlci5zZW5kTWVzc2FnZShtc2csIHRyYW5zZmVyKTtcbiAgICB9XG59XG4vKipcbiAqIE1haW4gdGhyZWFkIHNpZGVcbiAqL1xuZXhwb3J0IGNsYXNzIFNpbXBsZVdvcmtlckNsaWVudCBleHRlbmRzIERpc3Bvc2FibGUge1xuICAgIGNvbnN0cnVjdG9yKHdvcmtlckZhY3RvcnksIG1vZHVsZUlkLCBob3N0KSB7XG4gICAgICAgIHN1cGVyKCk7XG4gICAgICAgIGxldCBsYXp5UHJveHlSZWplY3QgPSBudWxsO1xuICAgICAgICB0aGlzLl93b3JrZXIgPSB0aGlzLl9yZWdpc3Rlcih3b3JrZXJGYWN0b3J5LmNyZWF0ZSgndnMvYmFzZS9jb21tb24vd29ya2VyL3NpbXBsZVdvcmtlcicsIChtc2cpID0+IHtcbiAgICAgICAgICAgIHRoaXMuX3Byb3RvY29sLmhhbmRsZU1lc3NhZ2UobXNnKTtcbiAgICAgICAgfSwgKGVycikgPT4ge1xuICAgICAgICAgICAgLy8gaW4gRmlyZWZveCwgd2ViIHdvcmtlcnMgZmFpbCBsYXppbHkgOihcbiAgICAgICAgICAgIC8vIHdlIHdpbGwgcmVqZWN0IHRoZSBwcm94eVxuICAgICAgICAgICAgbGF6eVByb3h5UmVqZWN0ID09PSBudWxsIHx8IGxhenlQcm94eVJlamVjdCA9PT0gdm9pZCAwID8gdm9pZCAwIDogbGF6eVByb3h5UmVqZWN0KGVycik7XG4gICAgICAgIH0pKTtcbiAgICAgICAgdGhpcy5fcHJvdG9jb2wgPSBuZXcgU2ltcGxlV29ya2VyUHJvdG9jb2woe1xuICAgICAgICAgICAgc2VuZE1lc3NhZ2U6IChtc2csIHRyYW5zZmVyKSA9PiB7XG4gICAgICAgICAgICAgICAgdGhpcy5fd29ya2VyLnBvc3RNZXNzYWdlKG1zZywgdHJhbnNmZXIpO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGhhbmRsZU1lc3NhZ2U6IChtZXRob2QsIGFyZ3MpID0+IHtcbiAgICAgICAgICAgICAgICBpZiAodHlwZW9mIGhvc3RbbWV0aG9kXSAhPT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gUHJvbWlzZS5yZWplY3QobmV3IEVycm9yKCdNaXNzaW5nIG1ldGhvZCAnICsgbWV0aG9kICsgJyBvbiBtYWluIHRocmVhZCBob3N0LicpKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZShob3N0W21ldGhvZF0uYXBwbHkoaG9zdCwgYXJncykpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBjYXRjaCAoZSkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gUHJvbWlzZS5yZWplY3QoZSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGhhbmRsZUV2ZW50OiAoZXZlbnROYW1lLCBhcmcpID0+IHtcbiAgICAgICAgICAgICAgICBpZiAocHJvcGVydHlJc0R5bmFtaWNFdmVudChldmVudE5hbWUpKSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGV2ZW50ID0gaG9zdFtldmVudE5hbWVdLmNhbGwoaG9zdCwgYXJnKTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHR5cGVvZiBldmVudCAhPT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBNaXNzaW5nIGR5bmFtaWMgZXZlbnQgJHtldmVudE5hbWV9IG9uIG1haW4gdGhyZWFkIGhvc3QuYCk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGV2ZW50O1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAocHJvcGVydHlJc0V2ZW50KGV2ZW50TmFtZSkpIHtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgZXZlbnQgPSBob3N0W2V2ZW50TmFtZV07XG4gICAgICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgZXZlbnQgIT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihgTWlzc2luZyBldmVudCAke2V2ZW50TmFtZX0gb24gbWFpbiB0aHJlYWQgaG9zdC5gKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gZXZlbnQ7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihgTWFsZm9ybWVkIGV2ZW50IG5hbWUgJHtldmVudE5hbWV9YCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgICB0aGlzLl9wcm90b2NvbC5zZXRXb3JrZXJJZCh0aGlzLl93b3JrZXIuZ2V0SWQoKSk7XG4gICAgICAgIC8vIEdhdGhlciBsb2FkZXIgY29uZmlndXJhdGlvblxuICAgICAgICBsZXQgbG9hZGVyQ29uZmlndXJhdGlvbiA9IG51bGw7XG4gICAgICAgIGNvbnN0IGdsb2JhbFJlcXVpcmUgPSBnbG9iYWxUaGlzLnJlcXVpcmU7XG4gICAgICAgIGlmICh0eXBlb2YgZ2xvYmFsUmVxdWlyZSAhPT0gJ3VuZGVmaW5lZCcgJiYgdHlwZW9mIGdsb2JhbFJlcXVpcmUuZ2V0Q29uZmlnID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICAvLyBHZXQgdGhlIGNvbmZpZ3VyYXRpb24gZnJvbSB0aGUgTW9uYWNvIEFNRCBMb2FkZXJcbiAgICAgICAgICAgIGxvYWRlckNvbmZpZ3VyYXRpb24gPSBnbG9iYWxSZXF1aXJlLmdldENvbmZpZygpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKHR5cGVvZiBnbG9iYWxUaGlzLnJlcXVpcmVqcyAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgICAgIC8vIEdldCB0aGUgY29uZmlndXJhdGlvbiBmcm9tIHJlcXVpcmVqc1xuICAgICAgICAgICAgbG9hZGVyQ29uZmlndXJhdGlvbiA9IGdsb2JhbFRoaXMucmVxdWlyZWpzLnMuY29udGV4dHMuXy5jb25maWc7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgaG9zdE1ldGhvZHMgPSBnZXRBbGxNZXRob2ROYW1lcyhob3N0KTtcbiAgICAgICAgLy8gU2VuZCBpbml0aWFsaXplIG1lc3NhZ2VcbiAgICAgICAgdGhpcy5fb25Nb2R1bGVMb2FkZWQgPSB0aGlzLl9wcm90b2NvbC5zZW5kTWVzc2FnZShJTklUSUFMSVpFLCBbXG4gICAgICAgICAgICB0aGlzLl93b3JrZXIuZ2V0SWQoKSxcbiAgICAgICAgICAgIEpTT04ucGFyc2UoSlNPTi5zdHJpbmdpZnkobG9hZGVyQ29uZmlndXJhdGlvbikpLFxuICAgICAgICAgICAgbW9kdWxlSWQsXG4gICAgICAgICAgICBob3N0TWV0aG9kcyxcbiAgICAgICAgXSk7XG4gICAgICAgIC8vIENyZWF0ZSBwcm94eSB0byBsb2FkZWQgY29kZVxuICAgICAgICBjb25zdCBwcm94eU1ldGhvZFJlcXVlc3QgPSAobWV0aG9kLCBhcmdzKSA9PiB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5fcmVxdWVzdChtZXRob2QsIGFyZ3MpO1xuICAgICAgICB9O1xuICAgICAgICBjb25zdCBwcm94eUxpc3RlbiA9IChldmVudE5hbWUsIGFyZykgPT4ge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuX3Byb3RvY29sLmxpc3RlbihldmVudE5hbWUsIGFyZyk7XG4gICAgICAgIH07XG4gICAgICAgIHRoaXMuX2xhenlQcm94eSA9IG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgICAgICAgICAgIGxhenlQcm94eVJlamVjdCA9IHJlamVjdDtcbiAgICAgICAgICAgIHRoaXMuX29uTW9kdWxlTG9hZGVkLnRoZW4oKGF2YWlsYWJsZU1ldGhvZHMpID0+IHtcbiAgICAgICAgICAgICAgICByZXNvbHZlKGNyZWF0ZVByb3h5T2JqZWN0KGF2YWlsYWJsZU1ldGhvZHMsIHByb3h5TWV0aG9kUmVxdWVzdCwgcHJveHlMaXN0ZW4pKTtcbiAgICAgICAgICAgIH0sIChlKSA9PiB7XG4gICAgICAgICAgICAgICAgcmVqZWN0KGUpO1xuICAgICAgICAgICAgICAgIHRoaXMuX29uRXJyb3IoJ1dvcmtlciBmYWlsZWQgdG8gbG9hZCAnICsgbW9kdWxlSWQsIGUpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICBnZXRQcm94eU9iamVjdCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2xhenlQcm94eTtcbiAgICB9XG4gICAgX3JlcXVlc3QobWV0aG9kLCBhcmdzKSB7XG4gICAgICAgIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgICAgICAgICB0aGlzLl9vbk1vZHVsZUxvYWRlZC50aGVuKCgpID0+IHtcbiAgICAgICAgICAgICAgICB0aGlzLl9wcm90b2NvbC5zZW5kTWVzc2FnZShtZXRob2QsIGFyZ3MpLnRoZW4ocmVzb2x2ZSwgcmVqZWN0KTtcbiAgICAgICAgICAgIH0sIHJlamVjdCk7XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICBfb25FcnJvcihtZXNzYWdlLCBlcnJvcikge1xuICAgICAgICBjb25zb2xlLmVycm9yKG1lc3NhZ2UpO1xuICAgICAgICBjb25zb2xlLmluZm8oZXJyb3IpO1xuICAgIH1cbn1cbmZ1bmN0aW9uIHByb3BlcnR5SXNFdmVudChuYW1lKSB7XG4gICAgLy8gQXNzdW1lIGEgcHJvcGVydHkgaXMgYW4gZXZlbnQgaWYgaXQgaGFzIGEgZm9ybSBvZiBcIm9uU29tZXRoaW5nXCJcbiAgICByZXR1cm4gbmFtZVswXSA9PT0gJ28nICYmIG5hbWVbMV0gPT09ICduJyAmJiBzdHJpbmdzLmlzVXBwZXJBc2NpaUxldHRlcihuYW1lLmNoYXJDb2RlQXQoMikpO1xufVxuZnVuY3Rpb24gcHJvcGVydHlJc0R5bmFtaWNFdmVudChuYW1lKSB7XG4gICAgLy8gQXNzdW1lIGEgcHJvcGVydHkgaXMgYSBkeW5hbWljIGV2ZW50IChhIG1ldGhvZCB0aGF0IHJldHVybnMgYW4gZXZlbnQpIGlmIGl0IGhhcyBhIGZvcm0gb2YgXCJvbkR5bmFtaWNTb21ldGhpbmdcIlxuICAgIHJldHVybiAvXm9uRHluYW1pYy8udGVzdChuYW1lKSAmJiBzdHJpbmdzLmlzVXBwZXJBc2NpaUxldHRlcihuYW1lLmNoYXJDb2RlQXQoOSkpO1xufVxuZnVuY3Rpb24gY3JlYXRlUHJveHlPYmplY3QobWV0aG9kTmFtZXMsIGludm9rZSwgcHJveHlMaXN0ZW4pIHtcbiAgICBjb25zdCBjcmVhdGVQcm94eU1ldGhvZCA9IChtZXRob2QpID0+IHtcbiAgICAgICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIGNvbnN0IGFyZ3MgPSBBcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChhcmd1bWVudHMsIDApO1xuICAgICAgICAgICAgcmV0dXJuIGludm9rZShtZXRob2QsIGFyZ3MpO1xuICAgICAgICB9O1xuICAgIH07XG4gICAgY29uc3QgY3JlYXRlUHJveHlEeW5hbWljRXZlbnQgPSAoZXZlbnROYW1lKSA9PiB7XG4gICAgICAgIHJldHVybiBmdW5jdGlvbiAoYXJnKSB7XG4gICAgICAgICAgICByZXR1cm4gcHJveHlMaXN0ZW4oZXZlbnROYW1lLCBhcmcpO1xuICAgICAgICB9O1xuICAgIH07XG4gICAgY29uc3QgcmVzdWx0ID0ge307XG4gICAgZm9yIChjb25zdCBtZXRob2ROYW1lIG9mIG1ldGhvZE5hbWVzKSB7XG4gICAgICAgIGlmIChwcm9wZXJ0eUlzRHluYW1pY0V2ZW50KG1ldGhvZE5hbWUpKSB7XG4gICAgICAgICAgICByZXN1bHRbbWV0aG9kTmFtZV0gPSBjcmVhdGVQcm94eUR5bmFtaWNFdmVudChtZXRob2ROYW1lKTtcbiAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICB9XG4gICAgICAgIGlmIChwcm9wZXJ0eUlzRXZlbnQobWV0aG9kTmFtZSkpIHtcbiAgICAgICAgICAgIHJlc3VsdFttZXRob2ROYW1lXSA9IHByb3h5TGlzdGVuKG1ldGhvZE5hbWUsIHVuZGVmaW5lZCk7XG4gICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgfVxuICAgICAgICByZXN1bHRbbWV0aG9kTmFtZV0gPSBjcmVhdGVQcm94eU1ldGhvZChtZXRob2ROYW1lKTtcbiAgICB9XG4gICAgcmV0dXJuIHJlc3VsdDtcbn1cbi8qKlxuICogV29ya2VyIHNpZGVcbiAqL1xuZXhwb3J0IGNsYXNzIFNpbXBsZVdvcmtlclNlcnZlciB7XG4gICAgY29uc3RydWN0b3IocG9zdE1lc3NhZ2UsIHJlcXVlc3RIYW5kbGVyRmFjdG9yeSkge1xuICAgICAgICB0aGlzLl9yZXF1ZXN0SGFuZGxlckZhY3RvcnkgPSByZXF1ZXN0SGFuZGxlckZhY3Rvcnk7XG4gICAgICAgIHRoaXMuX3JlcXVlc3RIYW5kbGVyID0gbnVsbDtcbiAgICAgICAgdGhpcy5fcHJvdG9jb2wgPSBuZXcgU2ltcGxlV29ya2VyUHJvdG9jb2woe1xuICAgICAgICAgICAgc2VuZE1lc3NhZ2U6IChtc2csIHRyYW5zZmVyKSA9PiB7XG4gICAgICAgICAgICAgICAgcG9zdE1lc3NhZ2UobXNnLCB0cmFuc2Zlcik7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgaGFuZGxlTWVzc2FnZTogKG1ldGhvZCwgYXJncykgPT4gdGhpcy5faGFuZGxlTWVzc2FnZShtZXRob2QsIGFyZ3MpLFxuICAgICAgICAgICAgaGFuZGxlRXZlbnQ6IChldmVudE5hbWUsIGFyZykgPT4gdGhpcy5faGFuZGxlRXZlbnQoZXZlbnROYW1lLCBhcmcpXG4gICAgICAgIH0pO1xuICAgIH1cbiAgICBvbm1lc3NhZ2UobXNnKSB7XG4gICAgICAgIHRoaXMuX3Byb3RvY29sLmhhbmRsZU1lc3NhZ2UobXNnKTtcbiAgICB9XG4gICAgX2hhbmRsZU1lc3NhZ2UobWV0aG9kLCBhcmdzKSB7XG4gICAgICAgIGlmIChtZXRob2QgPT09IElOSVRJQUxJWkUpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmluaXRpYWxpemUoYXJnc1swXSwgYXJnc1sxXSwgYXJnc1syXSwgYXJnc1szXSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCF0aGlzLl9yZXF1ZXN0SGFuZGxlciB8fCB0eXBlb2YgdGhpcy5fcmVxdWVzdEhhbmRsZXJbbWV0aG9kXSAhPT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgcmV0dXJuIFByb21pc2UucmVqZWN0KG5ldyBFcnJvcignTWlzc2luZyByZXF1ZXN0SGFuZGxlciBvciBtZXRob2Q6ICcgKyBtZXRob2QpKTtcbiAgICAgICAgfVxuICAgICAgICB0cnkge1xuICAgICAgICAgICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZSh0aGlzLl9yZXF1ZXN0SGFuZGxlclttZXRob2RdLmFwcGx5KHRoaXMuX3JlcXVlc3RIYW5kbGVyLCBhcmdzKSk7XG4gICAgICAgIH1cbiAgICAgICAgY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgIHJldHVybiBQcm9taXNlLnJlamVjdChlKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBfaGFuZGxlRXZlbnQoZXZlbnROYW1lLCBhcmcpIHtcbiAgICAgICAgaWYgKCF0aGlzLl9yZXF1ZXN0SGFuZGxlcikge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBNaXNzaW5nIHJlcXVlc3RIYW5kbGVyYCk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHByb3BlcnR5SXNEeW5hbWljRXZlbnQoZXZlbnROYW1lKSkge1xuICAgICAgICAgICAgY29uc3QgZXZlbnQgPSB0aGlzLl9yZXF1ZXN0SGFuZGxlcltldmVudE5hbWVdLmNhbGwodGhpcy5fcmVxdWVzdEhhbmRsZXIsIGFyZyk7XG4gICAgICAgICAgICBpZiAodHlwZW9mIGV2ZW50ICE9PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBNaXNzaW5nIGR5bmFtaWMgZXZlbnQgJHtldmVudE5hbWV9IG9uIHJlcXVlc3QgaGFuZGxlci5gKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBldmVudDtcbiAgICAgICAgfVxuICAgICAgICBpZiAocHJvcGVydHlJc0V2ZW50KGV2ZW50TmFtZSkpIHtcbiAgICAgICAgICAgIGNvbnN0IGV2ZW50ID0gdGhpcy5fcmVxdWVzdEhhbmRsZXJbZXZlbnROYW1lXTtcbiAgICAgICAgICAgIGlmICh0eXBlb2YgZXZlbnQgIT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYE1pc3NpbmcgZXZlbnQgJHtldmVudE5hbWV9IG9uIHJlcXVlc3QgaGFuZGxlci5gKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBldmVudDtcbiAgICAgICAgfVxuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYE1hbGZvcm1lZCBldmVudCBuYW1lICR7ZXZlbnROYW1lfWApO1xuICAgIH1cbiAgICBpbml0aWFsaXplKHdvcmtlcklkLCBsb2FkZXJDb25maWcsIG1vZHVsZUlkLCBob3N0TWV0aG9kcykge1xuICAgICAgICB0aGlzLl9wcm90b2NvbC5zZXRXb3JrZXJJZCh3b3JrZXJJZCk7XG4gICAgICAgIGNvbnN0IHByb3h5TWV0aG9kUmVxdWVzdCA9IChtZXRob2QsIGFyZ3MpID0+IHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLl9wcm90b2NvbC5zZW5kTWVzc2FnZShtZXRob2QsIGFyZ3MpO1xuICAgICAgICB9O1xuICAgICAgICBjb25zdCBwcm94eUxpc3RlbiA9IChldmVudE5hbWUsIGFyZykgPT4ge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuX3Byb3RvY29sLmxpc3RlbihldmVudE5hbWUsIGFyZyk7XG4gICAgICAgIH07XG4gICAgICAgIGNvbnN0IGhvc3RQcm94eSA9IGNyZWF0ZVByb3h5T2JqZWN0KGhvc3RNZXRob2RzLCBwcm94eU1ldGhvZFJlcXVlc3QsIHByb3h5TGlzdGVuKTtcbiAgICAgICAgaWYgKHRoaXMuX3JlcXVlc3RIYW5kbGVyRmFjdG9yeSkge1xuICAgICAgICAgICAgLy8gc3RhdGljIHJlcXVlc3QgaGFuZGxlclxuICAgICAgICAgICAgdGhpcy5fcmVxdWVzdEhhbmRsZXIgPSB0aGlzLl9yZXF1ZXN0SGFuZGxlckZhY3RvcnkoaG9zdFByb3h5KTtcbiAgICAgICAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUoZ2V0QWxsTWV0aG9kTmFtZXModGhpcy5fcmVxdWVzdEhhbmRsZXIpKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAobG9hZGVyQ29uZmlnKSB7XG4gICAgICAgICAgICAvLyBSZW1vdmUgJ2Jhc2VVcmwnLCBoYW5kbGluZyBpdCBpcyBiZXlvbmQgc2NvcGUgZm9yIG5vd1xuICAgICAgICAgICAgaWYgKHR5cGVvZiBsb2FkZXJDb25maWcuYmFzZVVybCAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgICAgICAgICBkZWxldGUgbG9hZGVyQ29uZmlnWydiYXNlVXJsJ107XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAodHlwZW9mIGxvYWRlckNvbmZpZy5wYXRocyAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgICAgICAgICBpZiAodHlwZW9mIGxvYWRlckNvbmZpZy5wYXRocy52cyAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgICAgICAgICAgICAgZGVsZXRlIGxvYWRlckNvbmZpZy5wYXRoc1sndnMnXTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAodHlwZW9mIGxvYWRlckNvbmZpZy50cnVzdGVkVHlwZXNQb2xpY3kgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgICAgICAgICAgLy8gZG9uJ3QgdXNlLCBpdCBoYXMgYmVlbiBkZXN0cm95ZWQgZHVyaW5nIHNlcmlhbGl6ZVxuICAgICAgICAgICAgICAgIGRlbGV0ZSBsb2FkZXJDb25maWdbJ3RydXN0ZWRUeXBlc1BvbGljeSddO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLy8gU2luY2UgdGhpcyBpcyBpbiBhIHdlYiB3b3JrZXIsIGVuYWJsZSBjYXRjaGluZyBlcnJvcnNcbiAgICAgICAgICAgIGxvYWRlckNvbmZpZy5jYXRjaEVycm9yID0gdHJ1ZTtcbiAgICAgICAgICAgIGdsb2JhbFRoaXMucmVxdWlyZS5jb25maWcobG9hZGVyQ29uZmlnKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuICAgICAgICAgICAgLy8gVXNlIHRoZSBnbG9iYWwgcmVxdWlyZSB0byBiZSBzdXJlIHRvIGdldCB0aGUgZ2xvYmFsIGNvbmZpZ1xuICAgICAgICAgICAgLy8gRVNNLWNvbW1lbnQtYmVnaW5cbiAgICAgICAgICAgIC8vIFx0XHRcdGNvbnN0IHJlcSA9IChnbG9iYWxUaGlzLnJlcXVpcmUgfHwgcmVxdWlyZSk7XG4gICAgICAgICAgICAvLyBFU00tY29tbWVudC1lbmRcbiAgICAgICAgICAgIC8vIEVTTS11bmNvbW1lbnQtYmVnaW5cbiAgICAgICAgICAgIGNvbnN0IHJlcSA9IGdsb2JhbFRoaXMucmVxdWlyZTtcbiAgICAgICAgICAgIC8vIEVTTS11bmNvbW1lbnQtZW5kXG4gICAgICAgICAgICByZXEoW21vZHVsZUlkXSwgKG1vZHVsZSkgPT4ge1xuICAgICAgICAgICAgICAgIHRoaXMuX3JlcXVlc3RIYW5kbGVyID0gbW9kdWxlLmNyZWF0ZShob3N0UHJveHkpO1xuICAgICAgICAgICAgICAgIGlmICghdGhpcy5fcmVxdWVzdEhhbmRsZXIpIHtcbiAgICAgICAgICAgICAgICAgICAgcmVqZWN0KG5ldyBFcnJvcihgTm8gUmVxdWVzdEhhbmRsZXIhYCkpO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJlc29sdmUoZ2V0QWxsTWV0aG9kTmFtZXModGhpcy5fcmVxdWVzdEhhbmRsZXIpKTtcbiAgICAgICAgICAgIH0sIHJlamVjdCk7XG4gICAgICAgIH0pO1xuICAgIH1cbn1cbi8qKlxuICogQ2FsbGVkIG9uIHRoZSB3b3JrZXIgc2lkZVxuICogQHNraXBNYW5nbGVcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGNyZWF0ZShwb3N0TWVzc2FnZSkge1xuICAgIHJldHVybiBuZXcgU2ltcGxlV29ya2VyU2VydmVyKHBvc3RNZXNzYWdlLCBudWxsKTtcbn1cbiIsICIvKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICogIENvcHlyaWdodCAoYykgTWljcm9zb2Z0IENvcnBvcmF0aW9uLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICogIExpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgTGljZW5zZS4gU2VlIExpY2Vuc2UudHh0IGluIHRoZSBwcm9qZWN0IHJvb3QgZm9yIGxpY2Vuc2UgaW5mb3JtYXRpb24uXG4gKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKi9cbi8qKlxuICogUmVwcmVzZW50cyBpbmZvcm1hdGlvbiBhYm91dCBhIHNwZWNpZmljIGRpZmZlcmVuY2UgYmV0d2VlbiB0d28gc2VxdWVuY2VzLlxuICovXG5leHBvcnQgY2xhc3MgRGlmZkNoYW5nZSB7XG4gICAgLyoqXG4gICAgICogQ29uc3RydWN0cyBhIG5ldyBEaWZmQ2hhbmdlIHdpdGggdGhlIGdpdmVuIHNlcXVlbmNlIGluZm9ybWF0aW9uXG4gICAgICogYW5kIGNvbnRlbnQuXG4gICAgICovXG4gICAgY29uc3RydWN0b3Iob3JpZ2luYWxTdGFydCwgb3JpZ2luYWxMZW5ndGgsIG1vZGlmaWVkU3RhcnQsIG1vZGlmaWVkTGVuZ3RoKSB7XG4gICAgICAgIC8vRGVidWcuQXNzZXJ0KG9yaWdpbmFsTGVuZ3RoID4gMCB8fCBtb2RpZmllZExlbmd0aCA+IDAsIFwib3JpZ2luYWxMZW5ndGggYW5kIG1vZGlmaWVkTGVuZ3RoIGNhbm5vdCBib3RoIGJlIDw9IDBcIik7XG4gICAgICAgIHRoaXMub3JpZ2luYWxTdGFydCA9IG9yaWdpbmFsU3RhcnQ7XG4gICAgICAgIHRoaXMub3JpZ2luYWxMZW5ndGggPSBvcmlnaW5hbExlbmd0aDtcbiAgICAgICAgdGhpcy5tb2RpZmllZFN0YXJ0ID0gbW9kaWZpZWRTdGFydDtcbiAgICAgICAgdGhpcy5tb2RpZmllZExlbmd0aCA9IG1vZGlmaWVkTGVuZ3RoO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBUaGUgZW5kIHBvaW50IChleGNsdXNpdmUpIG9mIHRoZSBjaGFuZ2UgaW4gdGhlIG9yaWdpbmFsIHNlcXVlbmNlLlxuICAgICAqL1xuICAgIGdldE9yaWdpbmFsRW5kKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5vcmlnaW5hbFN0YXJ0ICsgdGhpcy5vcmlnaW5hbExlbmd0aDtcbiAgICB9XG4gICAgLyoqXG4gICAgICogVGhlIGVuZCBwb2ludCAoZXhjbHVzaXZlKSBvZiB0aGUgY2hhbmdlIGluIHRoZSBtb2RpZmllZCBzZXF1ZW5jZS5cbiAgICAgKi9cbiAgICBnZXRNb2RpZmllZEVuZCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMubW9kaWZpZWRTdGFydCArIHRoaXMubW9kaWZpZWRMZW5ndGg7XG4gICAgfVxufVxuIiwgIi8qLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gKiAgQ29weXJpZ2h0IChjKSBNaWNyb3NvZnQgQ29ycG9yYXRpb24uIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKiAgTGljZW5zZWQgdW5kZXIgdGhlIE1JVCBMaWNlbnNlLiBTZWUgTGljZW5zZS50eHQgaW4gdGhlIHByb2plY3Qgcm9vdCBmb3IgbGljZW5zZSBpbmZvcm1hdGlvbi5cbiAqLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qL1xuaW1wb3J0ICogYXMgc3RyaW5ncyBmcm9tICcuL3N0cmluZ3MuanMnO1xuLyoqXG4gKiBSZXR1cm4gYSBoYXNoIHZhbHVlIGZvciBhbiBvYmplY3QuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBoYXNoKG9iaikge1xuICAgIHJldHVybiBkb0hhc2gob2JqLCAwKTtcbn1cbmV4cG9ydCBmdW5jdGlvbiBkb0hhc2gob2JqLCBoYXNoVmFsKSB7XG4gICAgc3dpdGNoICh0eXBlb2Ygb2JqKSB7XG4gICAgICAgIGNhc2UgJ29iamVjdCc6XG4gICAgICAgICAgICBpZiAob2JqID09PSBudWxsKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIG51bWJlckhhc2goMzQ5LCBoYXNoVmFsKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKEFycmF5LmlzQXJyYXkob2JqKSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBhcnJheUhhc2gob2JqLCBoYXNoVmFsKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBvYmplY3RIYXNoKG9iaiwgaGFzaFZhbCk7XG4gICAgICAgIGNhc2UgJ3N0cmluZyc6XG4gICAgICAgICAgICByZXR1cm4gc3RyaW5nSGFzaChvYmosIGhhc2hWYWwpO1xuICAgICAgICBjYXNlICdib29sZWFuJzpcbiAgICAgICAgICAgIHJldHVybiBib29sZWFuSGFzaChvYmosIGhhc2hWYWwpO1xuICAgICAgICBjYXNlICdudW1iZXInOlxuICAgICAgICAgICAgcmV0dXJuIG51bWJlckhhc2gob2JqLCBoYXNoVmFsKTtcbiAgICAgICAgY2FzZSAndW5kZWZpbmVkJzpcbiAgICAgICAgICAgIHJldHVybiBudW1iZXJIYXNoKDkzNywgaGFzaFZhbCk7XG4gICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICByZXR1cm4gbnVtYmVySGFzaCg2MTcsIGhhc2hWYWwpO1xuICAgIH1cbn1cbmV4cG9ydCBmdW5jdGlvbiBudW1iZXJIYXNoKHZhbCwgaW5pdGlhbEhhc2hWYWwpIHtcbiAgICByZXR1cm4gKCgoaW5pdGlhbEhhc2hWYWwgPDwgNSkgLSBpbml0aWFsSGFzaFZhbCkgKyB2YWwpIHwgMDsgLy8gaGFzaFZhbCAqIDMxICsgY2gsIGtlZXAgYXMgaW50MzJcbn1cbmZ1bmN0aW9uIGJvb2xlYW5IYXNoKGIsIGluaXRpYWxIYXNoVmFsKSB7XG4gICAgcmV0dXJuIG51bWJlckhhc2goYiA/IDQzMyA6IDg2MywgaW5pdGlhbEhhc2hWYWwpO1xufVxuZXhwb3J0IGZ1bmN0aW9uIHN0cmluZ0hhc2gocywgaGFzaFZhbCkge1xuICAgIGhhc2hWYWwgPSBudW1iZXJIYXNoKDE0OTQxNywgaGFzaFZhbCk7XG4gICAgZm9yIChsZXQgaSA9IDAsIGxlbmd0aCA9IHMubGVuZ3RoOyBpIDwgbGVuZ3RoOyBpKyspIHtcbiAgICAgICAgaGFzaFZhbCA9IG51bWJlckhhc2gocy5jaGFyQ29kZUF0KGkpLCBoYXNoVmFsKTtcbiAgICB9XG4gICAgcmV0dXJuIGhhc2hWYWw7XG59XG5mdW5jdGlvbiBhcnJheUhhc2goYXJyLCBpbml0aWFsSGFzaFZhbCkge1xuICAgIGluaXRpYWxIYXNoVmFsID0gbnVtYmVySGFzaCgxMDQ1NzksIGluaXRpYWxIYXNoVmFsKTtcbiAgICByZXR1cm4gYXJyLnJlZHVjZSgoaGFzaFZhbCwgaXRlbSkgPT4gZG9IYXNoKGl0ZW0sIGhhc2hWYWwpLCBpbml0aWFsSGFzaFZhbCk7XG59XG5mdW5jdGlvbiBvYmplY3RIYXNoKG9iaiwgaW5pdGlhbEhhc2hWYWwpIHtcbiAgICBpbml0aWFsSGFzaFZhbCA9IG51bWJlckhhc2goMTgxMzg3LCBpbml0aWFsSGFzaFZhbCk7XG4gICAgcmV0dXJuIE9iamVjdC5rZXlzKG9iaikuc29ydCgpLnJlZHVjZSgoaGFzaFZhbCwga2V5KSA9PiB7XG4gICAgICAgIGhhc2hWYWwgPSBzdHJpbmdIYXNoKGtleSwgaGFzaFZhbCk7XG4gICAgICAgIHJldHVybiBkb0hhc2gob2JqW2tleV0sIGhhc2hWYWwpO1xuICAgIH0sIGluaXRpYWxIYXNoVmFsKTtcbn1cbmZ1bmN0aW9uIGxlZnRSb3RhdGUodmFsdWUsIGJpdHMsIHRvdGFsQml0cyA9IDMyKSB7XG4gICAgLy8gZGVsdGEgKyBiaXRzID0gdG90YWxCaXRzXG4gICAgY29uc3QgZGVsdGEgPSB0b3RhbEJpdHMgLSBiaXRzO1xuICAgIC8vIEFsbCBvbmVzLCBleHBlY3QgYGRlbHRhYCB6ZXJvcyBhbGlnbmVkIHRvIHRoZSByaWdodFxuICAgIGNvbnN0IG1hc2sgPSB+KCgxIDw8IGRlbHRhKSAtIDEpO1xuICAgIC8vIEpvaW4gKHZhbHVlIGxlZnQtc2hpZnRlZCBgYml0c2AgYml0cykgd2l0aCAobWFza2VkIHZhbHVlIHJpZ2h0LXNoaWZ0ZWQgYGRlbHRhYCBiaXRzKVxuICAgIHJldHVybiAoKHZhbHVlIDw8IGJpdHMpIHwgKChtYXNrICYgdmFsdWUpID4+PiBkZWx0YSkpID4+PiAwO1xufVxuZnVuY3Rpb24gZmlsbChkZXN0LCBpbmRleCA9IDAsIGNvdW50ID0gZGVzdC5ieXRlTGVuZ3RoLCB2YWx1ZSA9IDApIHtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IGNvdW50OyBpKyspIHtcbiAgICAgICAgZGVzdFtpbmRleCArIGldID0gdmFsdWU7XG4gICAgfVxufVxuZnVuY3Rpb24gbGVmdFBhZCh2YWx1ZSwgbGVuZ3RoLCBjaGFyID0gJzAnKSB7XG4gICAgd2hpbGUgKHZhbHVlLmxlbmd0aCA8IGxlbmd0aCkge1xuICAgICAgICB2YWx1ZSA9IGNoYXIgKyB2YWx1ZTtcbiAgICB9XG4gICAgcmV0dXJuIHZhbHVlO1xufVxuZXhwb3J0IGZ1bmN0aW9uIHRvSGV4U3RyaW5nKGJ1ZmZlck9yVmFsdWUsIGJpdHNpemUgPSAzMikge1xuICAgIGlmIChidWZmZXJPclZhbHVlIGluc3RhbmNlb2YgQXJyYXlCdWZmZXIpIHtcbiAgICAgICAgcmV0dXJuIEFycmF5LmZyb20obmV3IFVpbnQ4QXJyYXkoYnVmZmVyT3JWYWx1ZSkpLm1hcChiID0+IGIudG9TdHJpbmcoMTYpLnBhZFN0YXJ0KDIsICcwJykpLmpvaW4oJycpO1xuICAgIH1cbiAgICByZXR1cm4gbGVmdFBhZCgoYnVmZmVyT3JWYWx1ZSA+Pj4gMCkudG9TdHJpbmcoMTYpLCBiaXRzaXplIC8gNCk7XG59XG4vKipcbiAqIEEgU0hBMSBpbXBsZW1lbnRhdGlvbiB0aGF0IHdvcmtzIHdpdGggc3RyaW5ncyBhbmQgZG9lcyBub3QgYWxsb2NhdGUuXG4gKi9cbmV4cG9ydCBjbGFzcyBTdHJpbmdTSEExIHtcbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgdGhpcy5faDAgPSAweDY3NDUyMzAxO1xuICAgICAgICB0aGlzLl9oMSA9IDB4RUZDREFCODk7XG4gICAgICAgIHRoaXMuX2gyID0gMHg5OEJBRENGRTtcbiAgICAgICAgdGhpcy5faDMgPSAweDEwMzI1NDc2O1xuICAgICAgICB0aGlzLl9oNCA9IDB4QzNEMkUxRjA7XG4gICAgICAgIHRoaXMuX2J1ZmYgPSBuZXcgVWludDhBcnJheSg2NCAvKiBTSEExQ29uc3RhbnQuQkxPQ0tfU0laRSAqLyArIDMgLyogdG8gZml0IGFueSB1dGYtOCAqLyk7XG4gICAgICAgIHRoaXMuX2J1ZmZEViA9IG5ldyBEYXRhVmlldyh0aGlzLl9idWZmLmJ1ZmZlcik7XG4gICAgICAgIHRoaXMuX2J1ZmZMZW4gPSAwO1xuICAgICAgICB0aGlzLl90b3RhbExlbiA9IDA7XG4gICAgICAgIHRoaXMuX2xlZnRvdmVySGlnaFN1cnJvZ2F0ZSA9IDA7XG4gICAgICAgIHRoaXMuX2ZpbmlzaGVkID0gZmFsc2U7XG4gICAgfVxuICAgIHVwZGF0ZShzdHIpIHtcbiAgICAgICAgY29uc3Qgc3RyTGVuID0gc3RyLmxlbmd0aDtcbiAgICAgICAgaWYgKHN0ckxlbiA9PT0gMCkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IGJ1ZmYgPSB0aGlzLl9idWZmO1xuICAgICAgICBsZXQgYnVmZkxlbiA9IHRoaXMuX2J1ZmZMZW47XG4gICAgICAgIGxldCBsZWZ0b3ZlckhpZ2hTdXJyb2dhdGUgPSB0aGlzLl9sZWZ0b3ZlckhpZ2hTdXJyb2dhdGU7XG4gICAgICAgIGxldCBjaGFyQ29kZTtcbiAgICAgICAgbGV0IG9mZnNldDtcbiAgICAgICAgaWYgKGxlZnRvdmVySGlnaFN1cnJvZ2F0ZSAhPT0gMCkge1xuICAgICAgICAgICAgY2hhckNvZGUgPSBsZWZ0b3ZlckhpZ2hTdXJyb2dhdGU7XG4gICAgICAgICAgICBvZmZzZXQgPSAtMTtcbiAgICAgICAgICAgIGxlZnRvdmVySGlnaFN1cnJvZ2F0ZSA9IDA7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBjaGFyQ29kZSA9IHN0ci5jaGFyQ29kZUF0KDApO1xuICAgICAgICAgICAgb2Zmc2V0ID0gMDtcbiAgICAgICAgfVxuICAgICAgICB3aGlsZSAodHJ1ZSkge1xuICAgICAgICAgICAgbGV0IGNvZGVQb2ludCA9IGNoYXJDb2RlO1xuICAgICAgICAgICAgaWYgKHN0cmluZ3MuaXNIaWdoU3Vycm9nYXRlKGNoYXJDb2RlKSkge1xuICAgICAgICAgICAgICAgIGlmIChvZmZzZXQgKyAxIDwgc3RyTGVuKSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IG5leHRDaGFyQ29kZSA9IHN0ci5jaGFyQ29kZUF0KG9mZnNldCArIDEpO1xuICAgICAgICAgICAgICAgICAgICBpZiAoc3RyaW5ncy5pc0xvd1N1cnJvZ2F0ZShuZXh0Q2hhckNvZGUpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBvZmZzZXQrKztcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvZGVQb2ludCA9IHN0cmluZ3MuY29tcHV0ZUNvZGVQb2ludChjaGFyQ29kZSwgbmV4dENoYXJDb2RlKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIGlsbGVnYWwgPT4gdW5pY29kZSByZXBsYWNlbWVudCBjaGFyYWN0ZXJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvZGVQb2ludCA9IDY1NTMzIC8qIFNIQTFDb25zdGFudC5VTklDT0RFX1JFUExBQ0VNRU5UICovO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAvLyBsYXN0IGNoYXJhY3RlciBpcyBhIHN1cnJvZ2F0ZSBwYWlyXG4gICAgICAgICAgICAgICAgICAgIGxlZnRvdmVySGlnaFN1cnJvZ2F0ZSA9IGNoYXJDb2RlO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmIChzdHJpbmdzLmlzTG93U3Vycm9nYXRlKGNoYXJDb2RlKSkge1xuICAgICAgICAgICAgICAgIC8vIGlsbGVnYWwgPT4gdW5pY29kZSByZXBsYWNlbWVudCBjaGFyYWN0ZXJcbiAgICAgICAgICAgICAgICBjb2RlUG9pbnQgPSA2NTUzMyAvKiBTSEExQ29uc3RhbnQuVU5JQ09ERV9SRVBMQUNFTUVOVCAqLztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGJ1ZmZMZW4gPSB0aGlzLl9wdXNoKGJ1ZmYsIGJ1ZmZMZW4sIGNvZGVQb2ludCk7XG4gICAgICAgICAgICBvZmZzZXQrKztcbiAgICAgICAgICAgIGlmIChvZmZzZXQgPCBzdHJMZW4pIHtcbiAgICAgICAgICAgICAgICBjaGFyQ29kZSA9IHN0ci5jaGFyQ29kZUF0KG9mZnNldCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICB0aGlzLl9idWZmTGVuID0gYnVmZkxlbjtcbiAgICAgICAgdGhpcy5fbGVmdG92ZXJIaWdoU3Vycm9nYXRlID0gbGVmdG92ZXJIaWdoU3Vycm9nYXRlO1xuICAgIH1cbiAgICBfcHVzaChidWZmLCBidWZmTGVuLCBjb2RlUG9pbnQpIHtcbiAgICAgICAgaWYgKGNvZGVQb2ludCA8IDB4MDA4MCkge1xuICAgICAgICAgICAgYnVmZltidWZmTGVuKytdID0gY29kZVBvaW50O1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKGNvZGVQb2ludCA8IDB4MDgwMCkge1xuICAgICAgICAgICAgYnVmZltidWZmTGVuKytdID0gMGIxMTAwMDAwMCB8ICgoY29kZVBvaW50ICYgMGIwMDAwMDAwMDAwMDAwMDAwMDAwMDAxMTExMTAwMDAwMCkgPj4+IDYpO1xuICAgICAgICAgICAgYnVmZltidWZmTGVuKytdID0gMGIxMDAwMDAwMCB8ICgoY29kZVBvaW50ICYgMGIwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDExMTExMSkgPj4+IDApO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKGNvZGVQb2ludCA8IDB4MTAwMDApIHtcbiAgICAgICAgICAgIGJ1ZmZbYnVmZkxlbisrXSA9IDBiMTExMDAwMDAgfCAoKGNvZGVQb2ludCAmIDBiMDAwMDAwMDAwMDAwMDAwMDExMTEwMDAwMDAwMDAwMDApID4+PiAxMik7XG4gICAgICAgICAgICBidWZmW2J1ZmZMZW4rK10gPSAwYjEwMDAwMDAwIHwgKChjb2RlUG9pbnQgJiAwYjAwMDAwMDAwMDAwMDAwMDAwMDAwMTExMTExMDAwMDAwKSA+Pj4gNik7XG4gICAgICAgICAgICBidWZmW2J1ZmZMZW4rK10gPSAwYjEwMDAwMDAwIHwgKChjb2RlUG9pbnQgJiAwYjAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMTExMTExKSA+Pj4gMCk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBidWZmW2J1ZmZMZW4rK10gPSAwYjExMTEwMDAwIHwgKChjb2RlUG9pbnQgJiAwYjAwMDAwMDAwMDAwMTExMDAwMDAwMDAwMDAwMDAwMDAwKSA+Pj4gMTgpO1xuICAgICAgICAgICAgYnVmZltidWZmTGVuKytdID0gMGIxMDAwMDAwMCB8ICgoY29kZVBvaW50ICYgMGIwMDAwMDAwMDAwMDAwMDExMTExMTAwMDAwMDAwMDAwMCkgPj4+IDEyKTtcbiAgICAgICAgICAgIGJ1ZmZbYnVmZkxlbisrXSA9IDBiMTAwMDAwMDAgfCAoKGNvZGVQb2ludCAmIDBiMDAwMDAwMDAwMDAwMDAwMDAwMDAxMTExMTEwMDAwMDApID4+PiA2KTtcbiAgICAgICAgICAgIGJ1ZmZbYnVmZkxlbisrXSA9IDBiMTAwMDAwMDAgfCAoKGNvZGVQb2ludCAmIDBiMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAxMTExMTEpID4+PiAwKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoYnVmZkxlbiA+PSA2NCAvKiBTSEExQ29uc3RhbnQuQkxPQ0tfU0laRSAqLykge1xuICAgICAgICAgICAgdGhpcy5fc3RlcCgpO1xuICAgICAgICAgICAgYnVmZkxlbiAtPSA2NCAvKiBTSEExQ29uc3RhbnQuQkxPQ0tfU0laRSAqLztcbiAgICAgICAgICAgIHRoaXMuX3RvdGFsTGVuICs9IDY0IC8qIFNIQTFDb25zdGFudC5CTE9DS19TSVpFICovO1xuICAgICAgICAgICAgLy8gdGFrZSBsYXN0IDMgaW4gY2FzZSBvZiBVVEY4IG92ZXJmbG93XG4gICAgICAgICAgICBidWZmWzBdID0gYnVmZls2NCAvKiBTSEExQ29uc3RhbnQuQkxPQ0tfU0laRSAqLyArIDBdO1xuICAgICAgICAgICAgYnVmZlsxXSA9IGJ1ZmZbNjQgLyogU0hBMUNvbnN0YW50LkJMT0NLX1NJWkUgKi8gKyAxXTtcbiAgICAgICAgICAgIGJ1ZmZbMl0gPSBidWZmWzY0IC8qIFNIQTFDb25zdGFudC5CTE9DS19TSVpFICovICsgMl07XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGJ1ZmZMZW47XG4gICAgfVxuICAgIGRpZ2VzdCgpIHtcbiAgICAgICAgaWYgKCF0aGlzLl9maW5pc2hlZCkge1xuICAgICAgICAgICAgdGhpcy5fZmluaXNoZWQgPSB0cnVlO1xuICAgICAgICAgICAgaWYgKHRoaXMuX2xlZnRvdmVySGlnaFN1cnJvZ2F0ZSkge1xuICAgICAgICAgICAgICAgIC8vIGlsbGVnYWwgPT4gdW5pY29kZSByZXBsYWNlbWVudCBjaGFyYWN0ZXJcbiAgICAgICAgICAgICAgICB0aGlzLl9sZWZ0b3ZlckhpZ2hTdXJyb2dhdGUgPSAwO1xuICAgICAgICAgICAgICAgIHRoaXMuX2J1ZmZMZW4gPSB0aGlzLl9wdXNoKHRoaXMuX2J1ZmYsIHRoaXMuX2J1ZmZMZW4sIDY1NTMzIC8qIFNIQTFDb25zdGFudC5VTklDT0RFX1JFUExBQ0VNRU5UICovKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRoaXMuX3RvdGFsTGVuICs9IHRoaXMuX2J1ZmZMZW47XG4gICAgICAgICAgICB0aGlzLl93cmFwVXAoKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdG9IZXhTdHJpbmcodGhpcy5faDApICsgdG9IZXhTdHJpbmcodGhpcy5faDEpICsgdG9IZXhTdHJpbmcodGhpcy5faDIpICsgdG9IZXhTdHJpbmcodGhpcy5faDMpICsgdG9IZXhTdHJpbmcodGhpcy5faDQpO1xuICAgIH1cbiAgICBfd3JhcFVwKCkge1xuICAgICAgICB0aGlzLl9idWZmW3RoaXMuX2J1ZmZMZW4rK10gPSAweDgwO1xuICAgICAgICBmaWxsKHRoaXMuX2J1ZmYsIHRoaXMuX2J1ZmZMZW4pO1xuICAgICAgICBpZiAodGhpcy5fYnVmZkxlbiA+IDU2KSB7XG4gICAgICAgICAgICB0aGlzLl9zdGVwKCk7XG4gICAgICAgICAgICBmaWxsKHRoaXMuX2J1ZmYpO1xuICAgICAgICB9XG4gICAgICAgIC8vIHRoaXMgd2lsbCBmaXQgYmVjYXVzZSB0aGUgbWFudGlzc2EgY2FuIGNvdmVyIHVwIHRvIDUyIGJpdHNcbiAgICAgICAgY29uc3QgbWwgPSA4ICogdGhpcy5fdG90YWxMZW47XG4gICAgICAgIHRoaXMuX2J1ZmZEVi5zZXRVaW50MzIoNTYsIE1hdGguZmxvb3IobWwgLyA0Mjk0OTY3Mjk2KSwgZmFsc2UpO1xuICAgICAgICB0aGlzLl9idWZmRFYuc2V0VWludDMyKDYwLCBtbCAlIDQyOTQ5NjcyOTYsIGZhbHNlKTtcbiAgICAgICAgdGhpcy5fc3RlcCgpO1xuICAgIH1cbiAgICBfc3RlcCgpIHtcbiAgICAgICAgY29uc3QgYmlnQmxvY2szMiA9IFN0cmluZ1NIQTEuX2JpZ0Jsb2NrMzI7XG4gICAgICAgIGNvbnN0IGRhdGEgPSB0aGlzLl9idWZmRFY7XG4gICAgICAgIGZvciAobGV0IGogPSAwOyBqIDwgNjQgLyogMTYqNCAqLzsgaiArPSA0KSB7XG4gICAgICAgICAgICBiaWdCbG9jazMyLnNldFVpbnQzMihqLCBkYXRhLmdldFVpbnQzMihqLCBmYWxzZSksIGZhbHNlKTtcbiAgICAgICAgfVxuICAgICAgICBmb3IgKGxldCBqID0gNjQ7IGogPCAzMjAgLyogODAqNCAqLzsgaiArPSA0KSB7XG4gICAgICAgICAgICBiaWdCbG9jazMyLnNldFVpbnQzMihqLCBsZWZ0Um90YXRlKChiaWdCbG9jazMyLmdldFVpbnQzMihqIC0gMTIsIGZhbHNlKSBeIGJpZ0Jsb2NrMzIuZ2V0VWludDMyKGogLSAzMiwgZmFsc2UpIF4gYmlnQmxvY2szMi5nZXRVaW50MzIoaiAtIDU2LCBmYWxzZSkgXiBiaWdCbG9jazMyLmdldFVpbnQzMihqIC0gNjQsIGZhbHNlKSksIDEpLCBmYWxzZSk7XG4gICAgICAgIH1cbiAgICAgICAgbGV0IGEgPSB0aGlzLl9oMDtcbiAgICAgICAgbGV0IGIgPSB0aGlzLl9oMTtcbiAgICAgICAgbGV0IGMgPSB0aGlzLl9oMjtcbiAgICAgICAgbGV0IGQgPSB0aGlzLl9oMztcbiAgICAgICAgbGV0IGUgPSB0aGlzLl9oNDtcbiAgICAgICAgbGV0IGYsIGs7XG4gICAgICAgIGxldCB0ZW1wO1xuICAgICAgICBmb3IgKGxldCBqID0gMDsgaiA8IDgwOyBqKyspIHtcbiAgICAgICAgICAgIGlmIChqIDwgMjApIHtcbiAgICAgICAgICAgICAgICBmID0gKGIgJiBjKSB8ICgofmIpICYgZCk7XG4gICAgICAgICAgICAgICAgayA9IDB4NUE4Mjc5OTk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmIChqIDwgNDApIHtcbiAgICAgICAgICAgICAgICBmID0gYiBeIGMgXiBkO1xuICAgICAgICAgICAgICAgIGsgPSAweDZFRDlFQkExO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAoaiA8IDYwKSB7XG4gICAgICAgICAgICAgICAgZiA9IChiICYgYykgfCAoYiAmIGQpIHwgKGMgJiBkKTtcbiAgICAgICAgICAgICAgICBrID0gMHg4RjFCQkNEQztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIGYgPSBiIF4gYyBeIGQ7XG4gICAgICAgICAgICAgICAgayA9IDB4Q0E2MkMxRDY7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0ZW1wID0gKGxlZnRSb3RhdGUoYSwgNSkgKyBmICsgZSArIGsgKyBiaWdCbG9jazMyLmdldFVpbnQzMihqICogNCwgZmFsc2UpKSAmIDB4ZmZmZmZmZmY7XG4gICAgICAgICAgICBlID0gZDtcbiAgICAgICAgICAgIGQgPSBjO1xuICAgICAgICAgICAgYyA9IGxlZnRSb3RhdGUoYiwgMzApO1xuICAgICAgICAgICAgYiA9IGE7XG4gICAgICAgICAgICBhID0gdGVtcDtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLl9oMCA9ICh0aGlzLl9oMCArIGEpICYgMHhmZmZmZmZmZjtcbiAgICAgICAgdGhpcy5faDEgPSAodGhpcy5faDEgKyBiKSAmIDB4ZmZmZmZmZmY7XG4gICAgICAgIHRoaXMuX2gyID0gKHRoaXMuX2gyICsgYykgJiAweGZmZmZmZmZmO1xuICAgICAgICB0aGlzLl9oMyA9ICh0aGlzLl9oMyArIGQpICYgMHhmZmZmZmZmZjtcbiAgICAgICAgdGhpcy5faDQgPSAodGhpcy5faDQgKyBlKSAmIDB4ZmZmZmZmZmY7XG4gICAgfVxufVxuU3RyaW5nU0hBMS5fYmlnQmxvY2szMiA9IG5ldyBEYXRhVmlldyhuZXcgQXJyYXlCdWZmZXIoMzIwKSk7IC8vIDgwICogNCA9IDMyMFxuIiwgIi8qLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gKiAgQ29weXJpZ2h0IChjKSBNaWNyb3NvZnQgQ29ycG9yYXRpb24uIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKiAgTGljZW5zZWQgdW5kZXIgdGhlIE1JVCBMaWNlbnNlLiBTZWUgTGljZW5zZS50eHQgaW4gdGhlIHByb2plY3Qgcm9vdCBmb3IgbGljZW5zZSBpbmZvcm1hdGlvbi5cbiAqLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qL1xuaW1wb3J0IHsgRGlmZkNoYW5nZSB9IGZyb20gJy4vZGlmZkNoYW5nZS5qcyc7XG5pbXBvcnQgeyBzdHJpbmdIYXNoIH0gZnJvbSAnLi4vaGFzaC5qcyc7XG5leHBvcnQgY2xhc3MgU3RyaW5nRGlmZlNlcXVlbmNlIHtcbiAgICBjb25zdHJ1Y3Rvcihzb3VyY2UpIHtcbiAgICAgICAgdGhpcy5zb3VyY2UgPSBzb3VyY2U7XG4gICAgfVxuICAgIGdldEVsZW1lbnRzKCkge1xuICAgICAgICBjb25zdCBzb3VyY2UgPSB0aGlzLnNvdXJjZTtcbiAgICAgICAgY29uc3QgY2hhcmFjdGVycyA9IG5ldyBJbnQzMkFycmF5KHNvdXJjZS5sZW5ndGgpO1xuICAgICAgICBmb3IgKGxldCBpID0gMCwgbGVuID0gc291cmNlLmxlbmd0aDsgaSA8IGxlbjsgaSsrKSB7XG4gICAgICAgICAgICBjaGFyYWN0ZXJzW2ldID0gc291cmNlLmNoYXJDb2RlQXQoaSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGNoYXJhY3RlcnM7XG4gICAgfVxufVxuZXhwb3J0IGZ1bmN0aW9uIHN0cmluZ0RpZmYob3JpZ2luYWwsIG1vZGlmaWVkLCBwcmV0dHkpIHtcbiAgICByZXR1cm4gbmV3IExjc0RpZmYobmV3IFN0cmluZ0RpZmZTZXF1ZW5jZShvcmlnaW5hbCksIG5ldyBTdHJpbmdEaWZmU2VxdWVuY2UobW9kaWZpZWQpKS5Db21wdXRlRGlmZihwcmV0dHkpLmNoYW5nZXM7XG59XG4vL1xuLy8gVGhlIGNvZGUgYmVsb3cgaGFzIGJlZW4gcG9ydGVkIGZyb20gYSBDIyBpbXBsZW1lbnRhdGlvbiBpbiBWU1xuLy9cbmNsYXNzIERlYnVnIHtcbiAgICBzdGF0aWMgQXNzZXJ0KGNvbmRpdGlvbiwgbWVzc2FnZSkge1xuICAgICAgICBpZiAoIWNvbmRpdGlvbikge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKG1lc3NhZ2UpO1xuICAgICAgICB9XG4gICAgfVxufVxuY2xhc3MgTXlBcnJheSB7XG4gICAgLyoqXG4gICAgICogQ29waWVzIGEgcmFuZ2Ugb2YgZWxlbWVudHMgZnJvbSBhbiBBcnJheSBzdGFydGluZyBhdCB0aGUgc3BlY2lmaWVkIHNvdXJjZSBpbmRleCBhbmQgcGFzdGVzXG4gICAgICogdGhlbSB0byBhbm90aGVyIEFycmF5IHN0YXJ0aW5nIGF0IHRoZSBzcGVjaWZpZWQgZGVzdGluYXRpb24gaW5kZXguIFRoZSBsZW5ndGggYW5kIHRoZSBpbmRleGVzXG4gICAgICogYXJlIHNwZWNpZmllZCBhcyA2NC1iaXQgaW50ZWdlcnMuXG4gICAgICogc291cmNlQXJyYXk6XG4gICAgICpcdFx0VGhlIEFycmF5IHRoYXQgY29udGFpbnMgdGhlIGRhdGEgdG8gY29weS5cbiAgICAgKiBzb3VyY2VJbmRleDpcbiAgICAgKlx0XHRBIDY0LWJpdCBpbnRlZ2VyIHRoYXQgcmVwcmVzZW50cyB0aGUgaW5kZXggaW4gdGhlIHNvdXJjZUFycmF5IGF0IHdoaWNoIGNvcHlpbmcgYmVnaW5zLlxuICAgICAqIGRlc3RpbmF0aW9uQXJyYXk6XG4gICAgICpcdFx0VGhlIEFycmF5IHRoYXQgcmVjZWl2ZXMgdGhlIGRhdGEuXG4gICAgICogZGVzdGluYXRpb25JbmRleDpcbiAgICAgKlx0XHRBIDY0LWJpdCBpbnRlZ2VyIHRoYXQgcmVwcmVzZW50cyB0aGUgaW5kZXggaW4gdGhlIGRlc3RpbmF0aW9uQXJyYXkgYXQgd2hpY2ggc3RvcmluZyBiZWdpbnMuXG4gICAgICogbGVuZ3RoOlxuICAgICAqXHRcdEEgNjQtYml0IGludGVnZXIgdGhhdCByZXByZXNlbnRzIHRoZSBudW1iZXIgb2YgZWxlbWVudHMgdG8gY29weS5cbiAgICAgKi9cbiAgICBzdGF0aWMgQ29weShzb3VyY2VBcnJheSwgc291cmNlSW5kZXgsIGRlc3RpbmF0aW9uQXJyYXksIGRlc3RpbmF0aW9uSW5kZXgsIGxlbmd0aCkge1xuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICBkZXN0aW5hdGlvbkFycmF5W2Rlc3RpbmF0aW9uSW5kZXggKyBpXSA9IHNvdXJjZUFycmF5W3NvdXJjZUluZGV4ICsgaV07XG4gICAgICAgIH1cbiAgICB9XG4gICAgc3RhdGljIENvcHkyKHNvdXJjZUFycmF5LCBzb3VyY2VJbmRleCwgZGVzdGluYXRpb25BcnJheSwgZGVzdGluYXRpb25JbmRleCwgbGVuZ3RoKSB7XG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIGRlc3RpbmF0aW9uQXJyYXlbZGVzdGluYXRpb25JbmRleCArIGldID0gc291cmNlQXJyYXlbc291cmNlSW5kZXggKyBpXTtcbiAgICAgICAgfVxuICAgIH1cbn1cbi8qKlxuICogQSB1dGlsaXR5IGNsYXNzIHdoaWNoIGhlbHBzIHRvIGNyZWF0ZSB0aGUgc2V0IG9mIERpZmZDaGFuZ2VzIGZyb21cbiAqIGEgZGlmZmVyZW5jZSBvcGVyYXRpb24uIFRoaXMgY2xhc3MgYWNjZXB0cyBvcmlnaW5hbCBEaWZmRWxlbWVudHMgYW5kXG4gKiBtb2RpZmllZCBEaWZmRWxlbWVudHMgdGhhdCBhcmUgaW52b2x2ZWQgaW4gYSBwYXJ0aWN1bGFyIGNoYW5nZS4gVGhlXG4gKiBNYXJrTmV4dENoYW5nZSgpIG1ldGhvZCBjYW4gYmUgY2FsbGVkIHRvIG1hcmsgdGhlIHNlcGFyYXRpb24gYmV0d2VlblxuICogZGlzdGluY3QgY2hhbmdlcy4gQXQgdGhlIGVuZCwgdGhlIENoYW5nZXMgcHJvcGVydHkgY2FuIGJlIGNhbGxlZCB0byByZXRyaWV2ZVxuICogdGhlIGNvbnN0cnVjdGVkIGNoYW5nZXMuXG4gKi9cbmNsYXNzIERpZmZDaGFuZ2VIZWxwZXIge1xuICAgIC8qKlxuICAgICAqIENvbnN0cnVjdHMgYSBuZXcgRGlmZkNoYW5nZUhlbHBlciBmb3IgdGhlIGdpdmVuIERpZmZTZXF1ZW5jZXMuXG4gICAgICovXG4gICAgY29uc3RydWN0b3IoKSB7XG4gICAgICAgIHRoaXMubV9jaGFuZ2VzID0gW107XG4gICAgICAgIHRoaXMubV9vcmlnaW5hbFN0YXJ0ID0gMTA3Mzc0MTgyNCAvKiBDb25zdGFudHMuTUFYX1NBRkVfU01BTExfSU5URUdFUiAqLztcbiAgICAgICAgdGhpcy5tX21vZGlmaWVkU3RhcnQgPSAxMDczNzQxODI0IC8qIENvbnN0YW50cy5NQVhfU0FGRV9TTUFMTF9JTlRFR0VSICovO1xuICAgICAgICB0aGlzLm1fb3JpZ2luYWxDb3VudCA9IDA7XG4gICAgICAgIHRoaXMubV9tb2RpZmllZENvdW50ID0gMDtcbiAgICB9XG4gICAgLyoqXG4gICAgICogTWFya3MgdGhlIGJlZ2lubmluZyBvZiB0aGUgbmV4dCBjaGFuZ2UgaW4gdGhlIHNldCBvZiBkaWZmZXJlbmNlcy5cbiAgICAgKi9cbiAgICBNYXJrTmV4dENoYW5nZSgpIHtcbiAgICAgICAgLy8gT25seSBhZGQgdG8gdGhlIGxpc3QgaWYgdGhlcmUgaXMgc29tZXRoaW5nIHRvIGFkZFxuICAgICAgICBpZiAodGhpcy5tX29yaWdpbmFsQ291bnQgPiAwIHx8IHRoaXMubV9tb2RpZmllZENvdW50ID4gMCkge1xuICAgICAgICAgICAgLy8gQWRkIHRoZSBuZXcgY2hhbmdlIHRvIG91ciBsaXN0XG4gICAgICAgICAgICB0aGlzLm1fY2hhbmdlcy5wdXNoKG5ldyBEaWZmQ2hhbmdlKHRoaXMubV9vcmlnaW5hbFN0YXJ0LCB0aGlzLm1fb3JpZ2luYWxDb3VudCwgdGhpcy5tX21vZGlmaWVkU3RhcnQsIHRoaXMubV9tb2RpZmllZENvdW50KSk7XG4gICAgICAgIH1cbiAgICAgICAgLy8gUmVzZXQgZm9yIHRoZSBuZXh0IGNoYW5nZVxuICAgICAgICB0aGlzLm1fb3JpZ2luYWxDb3VudCA9IDA7XG4gICAgICAgIHRoaXMubV9tb2RpZmllZENvdW50ID0gMDtcbiAgICAgICAgdGhpcy5tX29yaWdpbmFsU3RhcnQgPSAxMDczNzQxODI0IC8qIENvbnN0YW50cy5NQVhfU0FGRV9TTUFMTF9JTlRFR0VSICovO1xuICAgICAgICB0aGlzLm1fbW9kaWZpZWRTdGFydCA9IDEwNzM3NDE4MjQgLyogQ29uc3RhbnRzLk1BWF9TQUZFX1NNQUxMX0lOVEVHRVIgKi87XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEFkZHMgdGhlIG9yaWdpbmFsIGVsZW1lbnQgYXQgdGhlIGdpdmVuIHBvc2l0aW9uIHRvIHRoZSBlbGVtZW50c1xuICAgICAqIGFmZmVjdGVkIGJ5IHRoZSBjdXJyZW50IGNoYW5nZS4gVGhlIG1vZGlmaWVkIGluZGV4IGdpdmVzIGNvbnRleHRcbiAgICAgKiB0byB0aGUgY2hhbmdlIHBvc2l0aW9uIHdpdGggcmVzcGVjdCB0byB0aGUgb3JpZ2luYWwgc2VxdWVuY2UuXG4gICAgICogQHBhcmFtIG9yaWdpbmFsSW5kZXggVGhlIGluZGV4IG9mIHRoZSBvcmlnaW5hbCBlbGVtZW50IHRvIGFkZC5cbiAgICAgKiBAcGFyYW0gbW9kaWZpZWRJbmRleCBUaGUgaW5kZXggb2YgdGhlIG1vZGlmaWVkIGVsZW1lbnQgdGhhdCBwcm92aWRlcyBjb3JyZXNwb25kaW5nIHBvc2l0aW9uIGluIHRoZSBtb2RpZmllZCBzZXF1ZW5jZS5cbiAgICAgKi9cbiAgICBBZGRPcmlnaW5hbEVsZW1lbnQob3JpZ2luYWxJbmRleCwgbW9kaWZpZWRJbmRleCkge1xuICAgICAgICAvLyBUaGUgJ3RydWUnIHN0YXJ0IGluZGV4IGlzIHRoZSBzbWFsbGVzdCBvZiB0aGUgb25lcyB3ZSd2ZSBzZWVuXG4gICAgICAgIHRoaXMubV9vcmlnaW5hbFN0YXJ0ID0gTWF0aC5taW4odGhpcy5tX29yaWdpbmFsU3RhcnQsIG9yaWdpbmFsSW5kZXgpO1xuICAgICAgICB0aGlzLm1fbW9kaWZpZWRTdGFydCA9IE1hdGgubWluKHRoaXMubV9tb2RpZmllZFN0YXJ0LCBtb2RpZmllZEluZGV4KTtcbiAgICAgICAgdGhpcy5tX29yaWdpbmFsQ291bnQrKztcbiAgICB9XG4gICAgLyoqXG4gICAgICogQWRkcyB0aGUgbW9kaWZpZWQgZWxlbWVudCBhdCB0aGUgZ2l2ZW4gcG9zaXRpb24gdG8gdGhlIGVsZW1lbnRzXG4gICAgICogYWZmZWN0ZWQgYnkgdGhlIGN1cnJlbnQgY2hhbmdlLiBUaGUgb3JpZ2luYWwgaW5kZXggZ2l2ZXMgY29udGV4dFxuICAgICAqIHRvIHRoZSBjaGFuZ2UgcG9zaXRpb24gd2l0aCByZXNwZWN0IHRvIHRoZSBtb2RpZmllZCBzZXF1ZW5jZS5cbiAgICAgKiBAcGFyYW0gb3JpZ2luYWxJbmRleCBUaGUgaW5kZXggb2YgdGhlIG9yaWdpbmFsIGVsZW1lbnQgdGhhdCBwcm92aWRlcyBjb3JyZXNwb25kaW5nIHBvc2l0aW9uIGluIHRoZSBvcmlnaW5hbCBzZXF1ZW5jZS5cbiAgICAgKiBAcGFyYW0gbW9kaWZpZWRJbmRleCBUaGUgaW5kZXggb2YgdGhlIG1vZGlmaWVkIGVsZW1lbnQgdG8gYWRkLlxuICAgICAqL1xuICAgIEFkZE1vZGlmaWVkRWxlbWVudChvcmlnaW5hbEluZGV4LCBtb2RpZmllZEluZGV4KSB7XG4gICAgICAgIC8vIFRoZSAndHJ1ZScgc3RhcnQgaW5kZXggaXMgdGhlIHNtYWxsZXN0IG9mIHRoZSBvbmVzIHdlJ3ZlIHNlZW5cbiAgICAgICAgdGhpcy5tX29yaWdpbmFsU3RhcnQgPSBNYXRoLm1pbih0aGlzLm1fb3JpZ2luYWxTdGFydCwgb3JpZ2luYWxJbmRleCk7XG4gICAgICAgIHRoaXMubV9tb2RpZmllZFN0YXJ0ID0gTWF0aC5taW4odGhpcy5tX21vZGlmaWVkU3RhcnQsIG1vZGlmaWVkSW5kZXgpO1xuICAgICAgICB0aGlzLm1fbW9kaWZpZWRDb3VudCsrO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBSZXRyaWV2ZXMgYWxsIG9mIHRoZSBjaGFuZ2VzIG1hcmtlZCBieSB0aGUgY2xhc3MuXG4gICAgICovXG4gICAgZ2V0Q2hhbmdlcygpIHtcbiAgICAgICAgaWYgKHRoaXMubV9vcmlnaW5hbENvdW50ID4gMCB8fCB0aGlzLm1fbW9kaWZpZWRDb3VudCA+IDApIHtcbiAgICAgICAgICAgIC8vIEZpbmlzaCB1cCBvbiB3aGF0ZXZlciBpcyBsZWZ0XG4gICAgICAgICAgICB0aGlzLk1hcmtOZXh0Q2hhbmdlKCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRoaXMubV9jaGFuZ2VzO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBSZXRyaWV2ZXMgYWxsIG9mIHRoZSBjaGFuZ2VzIG1hcmtlZCBieSB0aGUgY2xhc3MgaW4gdGhlIHJldmVyc2Ugb3JkZXJcbiAgICAgKi9cbiAgICBnZXRSZXZlcnNlQ2hhbmdlcygpIHtcbiAgICAgICAgaWYgKHRoaXMubV9vcmlnaW5hbENvdW50ID4gMCB8fCB0aGlzLm1fbW9kaWZpZWRDb3VudCA+IDApIHtcbiAgICAgICAgICAgIC8vIEZpbmlzaCB1cCBvbiB3aGF0ZXZlciBpcyBsZWZ0XG4gICAgICAgICAgICB0aGlzLk1hcmtOZXh0Q2hhbmdlKCk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5tX2NoYW5nZXMucmV2ZXJzZSgpO1xuICAgICAgICByZXR1cm4gdGhpcy5tX2NoYW5nZXM7XG4gICAgfVxufVxuLyoqXG4gKiBBbiBpbXBsZW1lbnRhdGlvbiBvZiB0aGUgZGlmZmVyZW5jZSBhbGdvcml0aG0gZGVzY3JpYmVkIGluXG4gKiBcIkFuIE8oTkQpIERpZmZlcmVuY2UgQWxnb3JpdGhtIGFuZCBpdHMgdmFyaWF0aW9uc1wiIGJ5IEV1Z2VuZSBXLiBNeWVyc1xuICovXG5leHBvcnQgY2xhc3MgTGNzRGlmZiB7XG4gICAgLyoqXG4gICAgICogQ29uc3RydWN0cyB0aGUgRGlmZkZpbmRlclxuICAgICAqL1xuICAgIGNvbnN0cnVjdG9yKG9yaWdpbmFsU2VxdWVuY2UsIG1vZGlmaWVkU2VxdWVuY2UsIGNvbnRpbnVlUHJvY2Vzc2luZ1ByZWRpY2F0ZSA9IG51bGwpIHtcbiAgICAgICAgdGhpcy5Db250aW51ZVByb2Nlc3NpbmdQcmVkaWNhdGUgPSBjb250aW51ZVByb2Nlc3NpbmdQcmVkaWNhdGU7XG4gICAgICAgIHRoaXMuX29yaWdpbmFsU2VxdWVuY2UgPSBvcmlnaW5hbFNlcXVlbmNlO1xuICAgICAgICB0aGlzLl9tb2RpZmllZFNlcXVlbmNlID0gbW9kaWZpZWRTZXF1ZW5jZTtcbiAgICAgICAgY29uc3QgW29yaWdpbmFsU3RyaW5nRWxlbWVudHMsIG9yaWdpbmFsRWxlbWVudHNPckhhc2gsIG9yaWdpbmFsSGFzU3RyaW5nc10gPSBMY3NEaWZmLl9nZXRFbGVtZW50cyhvcmlnaW5hbFNlcXVlbmNlKTtcbiAgICAgICAgY29uc3QgW21vZGlmaWVkU3RyaW5nRWxlbWVudHMsIG1vZGlmaWVkRWxlbWVudHNPckhhc2gsIG1vZGlmaWVkSGFzU3RyaW5nc10gPSBMY3NEaWZmLl9nZXRFbGVtZW50cyhtb2RpZmllZFNlcXVlbmNlKTtcbiAgICAgICAgdGhpcy5faGFzU3RyaW5ncyA9IChvcmlnaW5hbEhhc1N0cmluZ3MgJiYgbW9kaWZpZWRIYXNTdHJpbmdzKTtcbiAgICAgICAgdGhpcy5fb3JpZ2luYWxTdHJpbmdFbGVtZW50cyA9IG9yaWdpbmFsU3RyaW5nRWxlbWVudHM7XG4gICAgICAgIHRoaXMuX29yaWdpbmFsRWxlbWVudHNPckhhc2ggPSBvcmlnaW5hbEVsZW1lbnRzT3JIYXNoO1xuICAgICAgICB0aGlzLl9tb2RpZmllZFN0cmluZ0VsZW1lbnRzID0gbW9kaWZpZWRTdHJpbmdFbGVtZW50cztcbiAgICAgICAgdGhpcy5fbW9kaWZpZWRFbGVtZW50c09ySGFzaCA9IG1vZGlmaWVkRWxlbWVudHNPckhhc2g7XG4gICAgICAgIHRoaXMubV9mb3J3YXJkSGlzdG9yeSA9IFtdO1xuICAgICAgICB0aGlzLm1fcmV2ZXJzZUhpc3RvcnkgPSBbXTtcbiAgICB9XG4gICAgc3RhdGljIF9pc1N0cmluZ0FycmF5KGFycikge1xuICAgICAgICByZXR1cm4gKGFyci5sZW5ndGggPiAwICYmIHR5cGVvZiBhcnJbMF0gPT09ICdzdHJpbmcnKTtcbiAgICB9XG4gICAgc3RhdGljIF9nZXRFbGVtZW50cyhzZXF1ZW5jZSkge1xuICAgICAgICBjb25zdCBlbGVtZW50cyA9IHNlcXVlbmNlLmdldEVsZW1lbnRzKCk7XG4gICAgICAgIGlmIChMY3NEaWZmLl9pc1N0cmluZ0FycmF5KGVsZW1lbnRzKSkge1xuICAgICAgICAgICAgY29uc3QgaGFzaGVzID0gbmV3IEludDMyQXJyYXkoZWxlbWVudHMubGVuZ3RoKTtcbiAgICAgICAgICAgIGZvciAobGV0IGkgPSAwLCBsZW4gPSBlbGVtZW50cy5sZW5ndGg7IGkgPCBsZW47IGkrKykge1xuICAgICAgICAgICAgICAgIGhhc2hlc1tpXSA9IHN0cmluZ0hhc2goZWxlbWVudHNbaV0sIDApO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIFtlbGVtZW50cywgaGFzaGVzLCB0cnVlXTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoZWxlbWVudHMgaW5zdGFuY2VvZiBJbnQzMkFycmF5KSB7XG4gICAgICAgICAgICByZXR1cm4gW1tdLCBlbGVtZW50cywgZmFsc2VdO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBbW10sIG5ldyBJbnQzMkFycmF5KGVsZW1lbnRzKSwgZmFsc2VdO1xuICAgIH1cbiAgICBFbGVtZW50c0FyZUVxdWFsKG9yaWdpbmFsSW5kZXgsIG5ld0luZGV4KSB7XG4gICAgICAgIGlmICh0aGlzLl9vcmlnaW5hbEVsZW1lbnRzT3JIYXNoW29yaWdpbmFsSW5kZXhdICE9PSB0aGlzLl9tb2RpZmllZEVsZW1lbnRzT3JIYXNoW25ld0luZGV4XSkge1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiAodGhpcy5faGFzU3RyaW5ncyA/IHRoaXMuX29yaWdpbmFsU3RyaW5nRWxlbWVudHNbb3JpZ2luYWxJbmRleF0gPT09IHRoaXMuX21vZGlmaWVkU3RyaW5nRWxlbWVudHNbbmV3SW5kZXhdIDogdHJ1ZSk7XG4gICAgfVxuICAgIEVsZW1lbnRzQXJlU3RyaWN0RXF1YWwob3JpZ2luYWxJbmRleCwgbmV3SW5kZXgpIHtcbiAgICAgICAgaWYgKCF0aGlzLkVsZW1lbnRzQXJlRXF1YWwob3JpZ2luYWxJbmRleCwgbmV3SW5kZXgpKSB7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3Qgb3JpZ2luYWxFbGVtZW50ID0gTGNzRGlmZi5fZ2V0U3RyaWN0RWxlbWVudCh0aGlzLl9vcmlnaW5hbFNlcXVlbmNlLCBvcmlnaW5hbEluZGV4KTtcbiAgICAgICAgY29uc3QgbW9kaWZpZWRFbGVtZW50ID0gTGNzRGlmZi5fZ2V0U3RyaWN0RWxlbWVudCh0aGlzLl9tb2RpZmllZFNlcXVlbmNlLCBuZXdJbmRleCk7XG4gICAgICAgIHJldHVybiAob3JpZ2luYWxFbGVtZW50ID09PSBtb2RpZmllZEVsZW1lbnQpO1xuICAgIH1cbiAgICBzdGF0aWMgX2dldFN0cmljdEVsZW1lbnQoc2VxdWVuY2UsIGluZGV4KSB7XG4gICAgICAgIGlmICh0eXBlb2Ygc2VxdWVuY2UuZ2V0U3RyaWN0RWxlbWVudCA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgcmV0dXJuIHNlcXVlbmNlLmdldFN0cmljdEVsZW1lbnQoaW5kZXgpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgIH1cbiAgICBPcmlnaW5hbEVsZW1lbnRzQXJlRXF1YWwoaW5kZXgxLCBpbmRleDIpIHtcbiAgICAgICAgaWYgKHRoaXMuX29yaWdpbmFsRWxlbWVudHNPckhhc2hbaW5kZXgxXSAhPT0gdGhpcy5fb3JpZ2luYWxFbGVtZW50c09ySGFzaFtpbmRleDJdKSB7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuICh0aGlzLl9oYXNTdHJpbmdzID8gdGhpcy5fb3JpZ2luYWxTdHJpbmdFbGVtZW50c1tpbmRleDFdID09PSB0aGlzLl9vcmlnaW5hbFN0cmluZ0VsZW1lbnRzW2luZGV4Ml0gOiB0cnVlKTtcbiAgICB9XG4gICAgTW9kaWZpZWRFbGVtZW50c0FyZUVxdWFsKGluZGV4MSwgaW5kZXgyKSB7XG4gICAgICAgIGlmICh0aGlzLl9tb2RpZmllZEVsZW1lbnRzT3JIYXNoW2luZGV4MV0gIT09IHRoaXMuX21vZGlmaWVkRWxlbWVudHNPckhhc2hbaW5kZXgyXSkge1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiAodGhpcy5faGFzU3RyaW5ncyA/IHRoaXMuX21vZGlmaWVkU3RyaW5nRWxlbWVudHNbaW5kZXgxXSA9PT0gdGhpcy5fbW9kaWZpZWRTdHJpbmdFbGVtZW50c1tpbmRleDJdIDogdHJ1ZSk7XG4gICAgfVxuICAgIENvbXB1dGVEaWZmKHByZXR0eSkge1xuICAgICAgICByZXR1cm4gdGhpcy5fQ29tcHV0ZURpZmYoMCwgdGhpcy5fb3JpZ2luYWxFbGVtZW50c09ySGFzaC5sZW5ndGggLSAxLCAwLCB0aGlzLl9tb2RpZmllZEVsZW1lbnRzT3JIYXNoLmxlbmd0aCAtIDEsIHByZXR0eSk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIENvbXB1dGVzIHRoZSBkaWZmZXJlbmNlcyBiZXR3ZWVuIHRoZSBvcmlnaW5hbCBhbmQgbW9kaWZpZWQgaW5wdXRcbiAgICAgKiBzZXF1ZW5jZXMgb24gdGhlIGJvdW5kZWQgcmFuZ2UuXG4gICAgICogQHJldHVybnMgQW4gYXJyYXkgb2YgdGhlIGRpZmZlcmVuY2VzIGJldHdlZW4gdGhlIHR3byBpbnB1dCBzZXF1ZW5jZXMuXG4gICAgICovXG4gICAgX0NvbXB1dGVEaWZmKG9yaWdpbmFsU3RhcnQsIG9yaWdpbmFsRW5kLCBtb2RpZmllZFN0YXJ0LCBtb2RpZmllZEVuZCwgcHJldHR5KSB7XG4gICAgICAgIGNvbnN0IHF1aXRFYXJseUFyciA9IFtmYWxzZV07XG4gICAgICAgIGxldCBjaGFuZ2VzID0gdGhpcy5Db21wdXRlRGlmZlJlY3Vyc2l2ZShvcmlnaW5hbFN0YXJ0LCBvcmlnaW5hbEVuZCwgbW9kaWZpZWRTdGFydCwgbW9kaWZpZWRFbmQsIHF1aXRFYXJseUFycik7XG4gICAgICAgIGlmIChwcmV0dHkpIHtcbiAgICAgICAgICAgIC8vIFdlIGhhdmUgdG8gY2xlYW4gdXAgdGhlIGNvbXB1dGVkIGRpZmYgdG8gYmUgbW9yZSBpbnR1aXRpdmVcbiAgICAgICAgICAgIC8vIGJ1dCBpdCB0dXJucyBvdXQgdGhpcyBjYW5ub3QgYmUgZG9uZSBjb3JyZWN0bHkgdW50aWwgdGhlIGVudGlyZSBzZXRcbiAgICAgICAgICAgIC8vIG9mIGRpZmZzIGhhdmUgYmVlbiBjb21wdXRlZFxuICAgICAgICAgICAgY2hhbmdlcyA9IHRoaXMuUHJldHRpZnlDaGFuZ2VzKGNoYW5nZXMpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBxdWl0RWFybHk6IHF1aXRFYXJseUFyclswXSxcbiAgICAgICAgICAgIGNoYW5nZXM6IGNoYW5nZXNcbiAgICAgICAgfTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogUHJpdmF0ZSBoZWxwZXIgbWV0aG9kIHdoaWNoIGNvbXB1dGVzIHRoZSBkaWZmZXJlbmNlcyBvbiB0aGUgYm91bmRlZCByYW5nZVxuICAgICAqIHJlY3Vyc2l2ZWx5LlxuICAgICAqIEByZXR1cm5zIEFuIGFycmF5IG9mIHRoZSBkaWZmZXJlbmNlcyBiZXR3ZWVuIHRoZSB0d28gaW5wdXQgc2VxdWVuY2VzLlxuICAgICAqL1xuICAgIENvbXB1dGVEaWZmUmVjdXJzaXZlKG9yaWdpbmFsU3RhcnQsIG9yaWdpbmFsRW5kLCBtb2RpZmllZFN0YXJ0LCBtb2RpZmllZEVuZCwgcXVpdEVhcmx5QXJyKSB7XG4gICAgICAgIHF1aXRFYXJseUFyclswXSA9IGZhbHNlO1xuICAgICAgICAvLyBGaW5kIHRoZSBzdGFydCBvZiB0aGUgZGlmZmVyZW5jZXNcbiAgICAgICAgd2hpbGUgKG9yaWdpbmFsU3RhcnQgPD0gb3JpZ2luYWxFbmQgJiYgbW9kaWZpZWRTdGFydCA8PSBtb2RpZmllZEVuZCAmJiB0aGlzLkVsZW1lbnRzQXJlRXF1YWwob3JpZ2luYWxTdGFydCwgbW9kaWZpZWRTdGFydCkpIHtcbiAgICAgICAgICAgIG9yaWdpbmFsU3RhcnQrKztcbiAgICAgICAgICAgIG1vZGlmaWVkU3RhcnQrKztcbiAgICAgICAgfVxuICAgICAgICAvLyBGaW5kIHRoZSBlbmQgb2YgdGhlIGRpZmZlcmVuY2VzXG4gICAgICAgIHdoaWxlIChvcmlnaW5hbEVuZCA+PSBvcmlnaW5hbFN0YXJ0ICYmIG1vZGlmaWVkRW5kID49IG1vZGlmaWVkU3RhcnQgJiYgdGhpcy5FbGVtZW50c0FyZUVxdWFsKG9yaWdpbmFsRW5kLCBtb2RpZmllZEVuZCkpIHtcbiAgICAgICAgICAgIG9yaWdpbmFsRW5kLS07XG4gICAgICAgICAgICBtb2RpZmllZEVuZC0tO1xuICAgICAgICB9XG4gICAgICAgIC8vIEluIHRoZSBzcGVjaWFsIGNhc2Ugd2hlcmUgd2UgZWl0aGVyIGhhdmUgYWxsIGluc2VydGlvbnMgb3IgYWxsIGRlbGV0aW9ucyBvciB0aGUgc2VxdWVuY2VzIGFyZSBpZGVudGljYWxcbiAgICAgICAgaWYgKG9yaWdpbmFsU3RhcnQgPiBvcmlnaW5hbEVuZCB8fCBtb2RpZmllZFN0YXJ0ID4gbW9kaWZpZWRFbmQpIHtcbiAgICAgICAgICAgIGxldCBjaGFuZ2VzO1xuICAgICAgICAgICAgaWYgKG1vZGlmaWVkU3RhcnQgPD0gbW9kaWZpZWRFbmQpIHtcbiAgICAgICAgICAgICAgICBEZWJ1Zy5Bc3NlcnQob3JpZ2luYWxTdGFydCA9PT0gb3JpZ2luYWxFbmQgKyAxLCAnb3JpZ2luYWxTdGFydCBzaG91bGQgb25seSBiZSBvbmUgbW9yZSB0aGFuIG9yaWdpbmFsRW5kJyk7XG4gICAgICAgICAgICAgICAgLy8gQWxsIGluc2VydGlvbnNcbiAgICAgICAgICAgICAgICBjaGFuZ2VzID0gW1xuICAgICAgICAgICAgICAgICAgICBuZXcgRGlmZkNoYW5nZShvcmlnaW5hbFN0YXJ0LCAwLCBtb2RpZmllZFN0YXJ0LCBtb2RpZmllZEVuZCAtIG1vZGlmaWVkU3RhcnQgKyAxKVxuICAgICAgICAgICAgICAgIF07XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmIChvcmlnaW5hbFN0YXJ0IDw9IG9yaWdpbmFsRW5kKSB7XG4gICAgICAgICAgICAgICAgRGVidWcuQXNzZXJ0KG1vZGlmaWVkU3RhcnQgPT09IG1vZGlmaWVkRW5kICsgMSwgJ21vZGlmaWVkU3RhcnQgc2hvdWxkIG9ubHkgYmUgb25lIG1vcmUgdGhhbiBtb2RpZmllZEVuZCcpO1xuICAgICAgICAgICAgICAgIC8vIEFsbCBkZWxldGlvbnNcbiAgICAgICAgICAgICAgICBjaGFuZ2VzID0gW1xuICAgICAgICAgICAgICAgICAgICBuZXcgRGlmZkNoYW5nZShvcmlnaW5hbFN0YXJ0LCBvcmlnaW5hbEVuZCAtIG9yaWdpbmFsU3RhcnQgKyAxLCBtb2RpZmllZFN0YXJ0LCAwKVxuICAgICAgICAgICAgICAgIF07XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICBEZWJ1Zy5Bc3NlcnQob3JpZ2luYWxTdGFydCA9PT0gb3JpZ2luYWxFbmQgKyAxLCAnb3JpZ2luYWxTdGFydCBzaG91bGQgb25seSBiZSBvbmUgbW9yZSB0aGFuIG9yaWdpbmFsRW5kJyk7XG4gICAgICAgICAgICAgICAgRGVidWcuQXNzZXJ0KG1vZGlmaWVkU3RhcnQgPT09IG1vZGlmaWVkRW5kICsgMSwgJ21vZGlmaWVkU3RhcnQgc2hvdWxkIG9ubHkgYmUgb25lIG1vcmUgdGhhbiBtb2RpZmllZEVuZCcpO1xuICAgICAgICAgICAgICAgIC8vIElkZW50aWNhbCBzZXF1ZW5jZXMgLSBObyBkaWZmZXJlbmNlc1xuICAgICAgICAgICAgICAgIGNoYW5nZXMgPSBbXTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBjaGFuZ2VzO1xuICAgICAgICB9XG4gICAgICAgIC8vIFRoaXMgcHJvYmxlbSBjYW4gYmUgc29sdmVkIHVzaW5nIHRoZSBEaXZpZGUtQW5kLUNvbnF1ZXIgdGVjaG5pcXVlLlxuICAgICAgICBjb25zdCBtaWRPcmlnaW5hbEFyciA9IFswXTtcbiAgICAgICAgY29uc3QgbWlkTW9kaWZpZWRBcnIgPSBbMF07XG4gICAgICAgIGNvbnN0IHJlc3VsdCA9IHRoaXMuQ29tcHV0ZVJlY3Vyc2lvblBvaW50KG9yaWdpbmFsU3RhcnQsIG9yaWdpbmFsRW5kLCBtb2RpZmllZFN0YXJ0LCBtb2RpZmllZEVuZCwgbWlkT3JpZ2luYWxBcnIsIG1pZE1vZGlmaWVkQXJyLCBxdWl0RWFybHlBcnIpO1xuICAgICAgICBjb25zdCBtaWRPcmlnaW5hbCA9IG1pZE9yaWdpbmFsQXJyWzBdO1xuICAgICAgICBjb25zdCBtaWRNb2RpZmllZCA9IG1pZE1vZGlmaWVkQXJyWzBdO1xuICAgICAgICBpZiAocmVzdWx0ICE9PSBudWxsKSB7XG4gICAgICAgICAgICAvLyBSZXN1bHQgaXMgbm90LW51bGwgd2hlbiB0aGVyZSB3YXMgZW5vdWdoIG1lbW9yeSB0byBjb21wdXRlIHRoZSBjaGFuZ2VzIHdoaWxlXG4gICAgICAgICAgICAvLyBzZWFyY2hpbmcgZm9yIHRoZSByZWN1cnNpb24gcG9pbnRcbiAgICAgICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAoIXF1aXRFYXJseUFyclswXSkge1xuICAgICAgICAgICAgLy8gV2UgY2FuIGJyZWFrIHRoZSBwcm9ibGVtIGRvd24gcmVjdXJzaXZlbHkgYnkgZmluZGluZyB0aGUgY2hhbmdlcyBpbiB0aGVcbiAgICAgICAgICAgIC8vIEZpcnN0IEhhbGY6ICAgKG9yaWdpbmFsU3RhcnQsIG1vZGlmaWVkU3RhcnQpIHRvIChtaWRPcmlnaW5hbCwgbWlkTW9kaWZpZWQpXG4gICAgICAgICAgICAvLyBTZWNvbmQgSGFsZjogIChtaWRPcmlnaW5hbCArIDEsIG1pbk1vZGlmaWVkICsgMSkgdG8gKG9yaWdpbmFsRW5kLCBtb2RpZmllZEVuZClcbiAgICAgICAgICAgIC8vIE5PVEU6IENvbXB1dGVEaWZmKCkgaXMgaW5jbHVzaXZlLCB0aGVyZWZvcmUgdGhlIHNlY29uZCByYW5nZSBzdGFydHMgb24gdGhlIG5leHQgcG9pbnRcbiAgICAgICAgICAgIGNvbnN0IGxlZnRDaGFuZ2VzID0gdGhpcy5Db21wdXRlRGlmZlJlY3Vyc2l2ZShvcmlnaW5hbFN0YXJ0LCBtaWRPcmlnaW5hbCwgbW9kaWZpZWRTdGFydCwgbWlkTW9kaWZpZWQsIHF1aXRFYXJseUFycik7XG4gICAgICAgICAgICBsZXQgcmlnaHRDaGFuZ2VzID0gW107XG4gICAgICAgICAgICBpZiAoIXF1aXRFYXJseUFyclswXSkge1xuICAgICAgICAgICAgICAgIHJpZ2h0Q2hhbmdlcyA9IHRoaXMuQ29tcHV0ZURpZmZSZWN1cnNpdmUobWlkT3JpZ2luYWwgKyAxLCBvcmlnaW5hbEVuZCwgbWlkTW9kaWZpZWQgKyAxLCBtb2RpZmllZEVuZCwgcXVpdEVhcmx5QXJyKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIC8vIFdlIGRpZG4ndCBoYXZlIHRpbWUgdG8gZmluaXNoIHRoZSBmaXJzdCBoYWxmLCBzbyB3ZSBkb24ndCBoYXZlIHRpbWUgdG8gY29tcHV0ZSB0aGlzIGhhbGYuXG4gICAgICAgICAgICAgICAgLy8gQ29uc2lkZXIgdGhlIGVudGlyZSByZXN0IG9mIHRoZSBzZXF1ZW5jZSBkaWZmZXJlbnQuXG4gICAgICAgICAgICAgICAgcmlnaHRDaGFuZ2VzID0gW1xuICAgICAgICAgICAgICAgICAgICBuZXcgRGlmZkNoYW5nZShtaWRPcmlnaW5hbCArIDEsIG9yaWdpbmFsRW5kIC0gKG1pZE9yaWdpbmFsICsgMSkgKyAxLCBtaWRNb2RpZmllZCArIDEsIG1vZGlmaWVkRW5kIC0gKG1pZE1vZGlmaWVkICsgMSkgKyAxKVxuICAgICAgICAgICAgICAgIF07XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5Db25jYXRlbmF0ZUNoYW5nZXMobGVmdENoYW5nZXMsIHJpZ2h0Q2hhbmdlcyk7XG4gICAgICAgIH1cbiAgICAgICAgLy8gSWYgd2UgaGl0IGhlcmUsIHdlIHF1aXQgZWFybHksIGFuZCBzbyBjYW4ndCByZXR1cm4gYW55dGhpbmcgbWVhbmluZ2Z1bFxuICAgICAgICByZXR1cm4gW1xuICAgICAgICAgICAgbmV3IERpZmZDaGFuZ2Uob3JpZ2luYWxTdGFydCwgb3JpZ2luYWxFbmQgLSBvcmlnaW5hbFN0YXJ0ICsgMSwgbW9kaWZpZWRTdGFydCwgbW9kaWZpZWRFbmQgLSBtb2RpZmllZFN0YXJ0ICsgMSlcbiAgICAgICAgXTtcbiAgICB9XG4gICAgV0FMS1RSQUNFKGRpYWdvbmFsRm9yd2FyZEJhc2UsIGRpYWdvbmFsRm9yd2FyZFN0YXJ0LCBkaWFnb25hbEZvcndhcmRFbmQsIGRpYWdvbmFsRm9yd2FyZE9mZnNldCwgZGlhZ29uYWxSZXZlcnNlQmFzZSwgZGlhZ29uYWxSZXZlcnNlU3RhcnQsIGRpYWdvbmFsUmV2ZXJzZUVuZCwgZGlhZ29uYWxSZXZlcnNlT2Zmc2V0LCBmb3J3YXJkUG9pbnRzLCByZXZlcnNlUG9pbnRzLCBvcmlnaW5hbEluZGV4LCBvcmlnaW5hbEVuZCwgbWlkT3JpZ2luYWxBcnIsIG1vZGlmaWVkSW5kZXgsIG1vZGlmaWVkRW5kLCBtaWRNb2RpZmllZEFyciwgZGVsdGFJc0V2ZW4sIHF1aXRFYXJseUFycikge1xuICAgICAgICBsZXQgZm9yd2FyZENoYW5nZXMgPSBudWxsO1xuICAgICAgICBsZXQgcmV2ZXJzZUNoYW5nZXMgPSBudWxsO1xuICAgICAgICAvLyBGaXJzdCwgd2FsayBiYWNrd2FyZCB0aHJvdWdoIHRoZSBmb3J3YXJkIGRpYWdvbmFscyBoaXN0b3J5XG4gICAgICAgIGxldCBjaGFuZ2VIZWxwZXIgPSBuZXcgRGlmZkNoYW5nZUhlbHBlcigpO1xuICAgICAgICBsZXQgZGlhZ29uYWxNaW4gPSBkaWFnb25hbEZvcndhcmRTdGFydDtcbiAgICAgICAgbGV0IGRpYWdvbmFsTWF4ID0gZGlhZ29uYWxGb3J3YXJkRW5kO1xuICAgICAgICBsZXQgZGlhZ29uYWxSZWxhdGl2ZSA9IChtaWRPcmlnaW5hbEFyclswXSAtIG1pZE1vZGlmaWVkQXJyWzBdKSAtIGRpYWdvbmFsRm9yd2FyZE9mZnNldDtcbiAgICAgICAgbGV0IGxhc3RPcmlnaW5hbEluZGV4ID0gLTEwNzM3NDE4MjQgLyogQ29uc3RhbnRzLk1JTl9TQUZFX1NNQUxMX0lOVEVHRVIgKi87XG4gICAgICAgIGxldCBoaXN0b3J5SW5kZXggPSB0aGlzLm1fZm9yd2FyZEhpc3RvcnkubGVuZ3RoIC0gMTtcbiAgICAgICAgZG8ge1xuICAgICAgICAgICAgLy8gR2V0IHRoZSBkaWFnb25hbCBpbmRleCBmcm9tIHRoZSByZWxhdGl2ZSBkaWFnb25hbCBudW1iZXJcbiAgICAgICAgICAgIGNvbnN0IGRpYWdvbmFsID0gZGlhZ29uYWxSZWxhdGl2ZSArIGRpYWdvbmFsRm9yd2FyZEJhc2U7XG4gICAgICAgICAgICAvLyBGaWd1cmUgb3V0IHdoZXJlIHdlIGNhbWUgZnJvbVxuICAgICAgICAgICAgaWYgKGRpYWdvbmFsID09PSBkaWFnb25hbE1pbiB8fCAoZGlhZ29uYWwgPCBkaWFnb25hbE1heCAmJiBmb3J3YXJkUG9pbnRzW2RpYWdvbmFsIC0gMV0gPCBmb3J3YXJkUG9pbnRzW2RpYWdvbmFsICsgMV0pKSB7XG4gICAgICAgICAgICAgICAgLy8gVmVydGljYWwgbGluZSAodGhlIGVsZW1lbnQgaXMgYW4gaW5zZXJ0KVxuICAgICAgICAgICAgICAgIG9yaWdpbmFsSW5kZXggPSBmb3J3YXJkUG9pbnRzW2RpYWdvbmFsICsgMV07XG4gICAgICAgICAgICAgICAgbW9kaWZpZWRJbmRleCA9IG9yaWdpbmFsSW5kZXggLSBkaWFnb25hbFJlbGF0aXZlIC0gZGlhZ29uYWxGb3J3YXJkT2Zmc2V0O1xuICAgICAgICAgICAgICAgIGlmIChvcmlnaW5hbEluZGV4IDwgbGFzdE9yaWdpbmFsSW5kZXgpIHtcbiAgICAgICAgICAgICAgICAgICAgY2hhbmdlSGVscGVyLk1hcmtOZXh0Q2hhbmdlKCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGxhc3RPcmlnaW5hbEluZGV4ID0gb3JpZ2luYWxJbmRleDtcbiAgICAgICAgICAgICAgICBjaGFuZ2VIZWxwZXIuQWRkTW9kaWZpZWRFbGVtZW50KG9yaWdpbmFsSW5kZXggKyAxLCBtb2RpZmllZEluZGV4KTtcbiAgICAgICAgICAgICAgICBkaWFnb25hbFJlbGF0aXZlID0gKGRpYWdvbmFsICsgMSkgLSBkaWFnb25hbEZvcndhcmRCYXNlOyAvL1NldHVwIGZvciB0aGUgbmV4dCBpdGVyYXRpb25cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIC8vIEhvcml6b250YWwgbGluZSAodGhlIGVsZW1lbnQgaXMgYSBkZWxldGlvbilcbiAgICAgICAgICAgICAgICBvcmlnaW5hbEluZGV4ID0gZm9yd2FyZFBvaW50c1tkaWFnb25hbCAtIDFdICsgMTtcbiAgICAgICAgICAgICAgICBtb2RpZmllZEluZGV4ID0gb3JpZ2luYWxJbmRleCAtIGRpYWdvbmFsUmVsYXRpdmUgLSBkaWFnb25hbEZvcndhcmRPZmZzZXQ7XG4gICAgICAgICAgICAgICAgaWYgKG9yaWdpbmFsSW5kZXggPCBsYXN0T3JpZ2luYWxJbmRleCkge1xuICAgICAgICAgICAgICAgICAgICBjaGFuZ2VIZWxwZXIuTWFya05leHRDaGFuZ2UoKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgbGFzdE9yaWdpbmFsSW5kZXggPSBvcmlnaW5hbEluZGV4IC0gMTtcbiAgICAgICAgICAgICAgICBjaGFuZ2VIZWxwZXIuQWRkT3JpZ2luYWxFbGVtZW50KG9yaWdpbmFsSW5kZXgsIG1vZGlmaWVkSW5kZXggKyAxKTtcbiAgICAgICAgICAgICAgICBkaWFnb25hbFJlbGF0aXZlID0gKGRpYWdvbmFsIC0gMSkgLSBkaWFnb25hbEZvcndhcmRCYXNlOyAvL1NldHVwIGZvciB0aGUgbmV4dCBpdGVyYXRpb25cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChoaXN0b3J5SW5kZXggPj0gMCkge1xuICAgICAgICAgICAgICAgIGZvcndhcmRQb2ludHMgPSB0aGlzLm1fZm9yd2FyZEhpc3RvcnlbaGlzdG9yeUluZGV4XTtcbiAgICAgICAgICAgICAgICBkaWFnb25hbEZvcndhcmRCYXNlID0gZm9yd2FyZFBvaW50c1swXTsgLy9XZSBzdG9yZWQgdGhpcyBpbiB0aGUgZmlyc3Qgc3BvdFxuICAgICAgICAgICAgICAgIGRpYWdvbmFsTWluID0gMTtcbiAgICAgICAgICAgICAgICBkaWFnb25hbE1heCA9IGZvcndhcmRQb2ludHMubGVuZ3RoIC0gMTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSB3aGlsZSAoLS1oaXN0b3J5SW5kZXggPj0gLTEpO1xuICAgICAgICAvLyBJcm9uaWNhbGx5LCB3ZSBnZXQgdGhlIGZvcndhcmQgY2hhbmdlcyBhcyB0aGUgcmV2ZXJzZSBvZiB0aGVcbiAgICAgICAgLy8gb3JkZXIgd2UgYWRkZWQgdGhlbSBzaW5jZSB3ZSB0ZWNobmljYWxseSBhZGRlZCB0aGVtIGJhY2t3YXJkc1xuICAgICAgICBmb3J3YXJkQ2hhbmdlcyA9IGNoYW5nZUhlbHBlci5nZXRSZXZlcnNlQ2hhbmdlcygpO1xuICAgICAgICBpZiAocXVpdEVhcmx5QXJyWzBdKSB7XG4gICAgICAgICAgICAvLyBUT0RPOiBDYWxjdWxhdGUgYSBwYXJ0aWFsIGZyb20gdGhlIHJldmVyc2UgZGlhZ29uYWxzLlxuICAgICAgICAgICAgLy8gICAgICAgRm9yIG5vdywganVzdCBhc3N1bWUgZXZlcnl0aGluZyBhZnRlciB0aGUgbWlkT3JpZ2luYWwvbWlkTW9kaWZpZWQgcG9pbnQgaXMgYSBkaWZmXG4gICAgICAgICAgICBsZXQgb3JpZ2luYWxTdGFydFBvaW50ID0gbWlkT3JpZ2luYWxBcnJbMF0gKyAxO1xuICAgICAgICAgICAgbGV0IG1vZGlmaWVkU3RhcnRQb2ludCA9IG1pZE1vZGlmaWVkQXJyWzBdICsgMTtcbiAgICAgICAgICAgIGlmIChmb3J3YXJkQ2hhbmdlcyAhPT0gbnVsbCAmJiBmb3J3YXJkQ2hhbmdlcy5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgbGFzdEZvcndhcmRDaGFuZ2UgPSBmb3J3YXJkQ2hhbmdlc1tmb3J3YXJkQ2hhbmdlcy5sZW5ndGggLSAxXTtcbiAgICAgICAgICAgICAgICBvcmlnaW5hbFN0YXJ0UG9pbnQgPSBNYXRoLm1heChvcmlnaW5hbFN0YXJ0UG9pbnQsIGxhc3RGb3J3YXJkQ2hhbmdlLmdldE9yaWdpbmFsRW5kKCkpO1xuICAgICAgICAgICAgICAgIG1vZGlmaWVkU3RhcnRQb2ludCA9IE1hdGgubWF4KG1vZGlmaWVkU3RhcnRQb2ludCwgbGFzdEZvcndhcmRDaGFuZ2UuZ2V0TW9kaWZpZWRFbmQoKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXZlcnNlQ2hhbmdlcyA9IFtcbiAgICAgICAgICAgICAgICBuZXcgRGlmZkNoYW5nZShvcmlnaW5hbFN0YXJ0UG9pbnQsIG9yaWdpbmFsRW5kIC0gb3JpZ2luYWxTdGFydFBvaW50ICsgMSwgbW9kaWZpZWRTdGFydFBvaW50LCBtb2RpZmllZEVuZCAtIG1vZGlmaWVkU3RhcnRQb2ludCArIDEpXG4gICAgICAgICAgICBdO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgLy8gTm93IHdhbGsgYmFja3dhcmQgdGhyb3VnaCB0aGUgcmV2ZXJzZSBkaWFnb25hbHMgaGlzdG9yeVxuICAgICAgICAgICAgY2hhbmdlSGVscGVyID0gbmV3IERpZmZDaGFuZ2VIZWxwZXIoKTtcbiAgICAgICAgICAgIGRpYWdvbmFsTWluID0gZGlhZ29uYWxSZXZlcnNlU3RhcnQ7XG4gICAgICAgICAgICBkaWFnb25hbE1heCA9IGRpYWdvbmFsUmV2ZXJzZUVuZDtcbiAgICAgICAgICAgIGRpYWdvbmFsUmVsYXRpdmUgPSAobWlkT3JpZ2luYWxBcnJbMF0gLSBtaWRNb2RpZmllZEFyclswXSkgLSBkaWFnb25hbFJldmVyc2VPZmZzZXQ7XG4gICAgICAgICAgICBsYXN0T3JpZ2luYWxJbmRleCA9IDEwNzM3NDE4MjQgLyogQ29uc3RhbnRzLk1BWF9TQUZFX1NNQUxMX0lOVEVHRVIgKi87XG4gICAgICAgICAgICBoaXN0b3J5SW5kZXggPSAoZGVsdGFJc0V2ZW4pID8gdGhpcy5tX3JldmVyc2VIaXN0b3J5Lmxlbmd0aCAtIDEgOiB0aGlzLm1fcmV2ZXJzZUhpc3RvcnkubGVuZ3RoIC0gMjtcbiAgICAgICAgICAgIGRvIHtcbiAgICAgICAgICAgICAgICAvLyBHZXQgdGhlIGRpYWdvbmFsIGluZGV4IGZyb20gdGhlIHJlbGF0aXZlIGRpYWdvbmFsIG51bWJlclxuICAgICAgICAgICAgICAgIGNvbnN0IGRpYWdvbmFsID0gZGlhZ29uYWxSZWxhdGl2ZSArIGRpYWdvbmFsUmV2ZXJzZUJhc2U7XG4gICAgICAgICAgICAgICAgLy8gRmlndXJlIG91dCB3aGVyZSB3ZSBjYW1lIGZyb21cbiAgICAgICAgICAgICAgICBpZiAoZGlhZ29uYWwgPT09IGRpYWdvbmFsTWluIHx8IChkaWFnb25hbCA8IGRpYWdvbmFsTWF4ICYmIHJldmVyc2VQb2ludHNbZGlhZ29uYWwgLSAxXSA+PSByZXZlcnNlUG9pbnRzW2RpYWdvbmFsICsgMV0pKSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIEhvcml6b250YWwgbGluZSAodGhlIGVsZW1lbnQgaXMgYSBkZWxldGlvbikpXG4gICAgICAgICAgICAgICAgICAgIG9yaWdpbmFsSW5kZXggPSByZXZlcnNlUG9pbnRzW2RpYWdvbmFsICsgMV0gLSAxO1xuICAgICAgICAgICAgICAgICAgICBtb2RpZmllZEluZGV4ID0gb3JpZ2luYWxJbmRleCAtIGRpYWdvbmFsUmVsYXRpdmUgLSBkaWFnb25hbFJldmVyc2VPZmZzZXQ7XG4gICAgICAgICAgICAgICAgICAgIGlmIChvcmlnaW5hbEluZGV4ID4gbGFzdE9yaWdpbmFsSW5kZXgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNoYW5nZUhlbHBlci5NYXJrTmV4dENoYW5nZSgpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGxhc3RPcmlnaW5hbEluZGV4ID0gb3JpZ2luYWxJbmRleCArIDE7XG4gICAgICAgICAgICAgICAgICAgIGNoYW5nZUhlbHBlci5BZGRPcmlnaW5hbEVsZW1lbnQob3JpZ2luYWxJbmRleCArIDEsIG1vZGlmaWVkSW5kZXggKyAxKTtcbiAgICAgICAgICAgICAgICAgICAgZGlhZ29uYWxSZWxhdGl2ZSA9IChkaWFnb25hbCArIDEpIC0gZGlhZ29uYWxSZXZlcnNlQmFzZTsgLy9TZXR1cCBmb3IgdGhlIG5leHQgaXRlcmF0aW9uXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAvLyBWZXJ0aWNhbCBsaW5lICh0aGUgZWxlbWVudCBpcyBhbiBpbnNlcnRpb24pXG4gICAgICAgICAgICAgICAgICAgIG9yaWdpbmFsSW5kZXggPSByZXZlcnNlUG9pbnRzW2RpYWdvbmFsIC0gMV07XG4gICAgICAgICAgICAgICAgICAgIG1vZGlmaWVkSW5kZXggPSBvcmlnaW5hbEluZGV4IC0gZGlhZ29uYWxSZWxhdGl2ZSAtIGRpYWdvbmFsUmV2ZXJzZU9mZnNldDtcbiAgICAgICAgICAgICAgICAgICAgaWYgKG9yaWdpbmFsSW5kZXggPiBsYXN0T3JpZ2luYWxJbmRleCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgY2hhbmdlSGVscGVyLk1hcmtOZXh0Q2hhbmdlKCk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgbGFzdE9yaWdpbmFsSW5kZXggPSBvcmlnaW5hbEluZGV4O1xuICAgICAgICAgICAgICAgICAgICBjaGFuZ2VIZWxwZXIuQWRkTW9kaWZpZWRFbGVtZW50KG9yaWdpbmFsSW5kZXggKyAxLCBtb2RpZmllZEluZGV4ICsgMSk7XG4gICAgICAgICAgICAgICAgICAgIGRpYWdvbmFsUmVsYXRpdmUgPSAoZGlhZ29uYWwgLSAxKSAtIGRpYWdvbmFsUmV2ZXJzZUJhc2U7IC8vU2V0dXAgZm9yIHRoZSBuZXh0IGl0ZXJhdGlvblxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAoaGlzdG9yeUluZGV4ID49IDApIHtcbiAgICAgICAgICAgICAgICAgICAgcmV2ZXJzZVBvaW50cyA9IHRoaXMubV9yZXZlcnNlSGlzdG9yeVtoaXN0b3J5SW5kZXhdO1xuICAgICAgICAgICAgICAgICAgICBkaWFnb25hbFJldmVyc2VCYXNlID0gcmV2ZXJzZVBvaW50c1swXTsgLy9XZSBzdG9yZWQgdGhpcyBpbiB0aGUgZmlyc3Qgc3BvdFxuICAgICAgICAgICAgICAgICAgICBkaWFnb25hbE1pbiA9IDE7XG4gICAgICAgICAgICAgICAgICAgIGRpYWdvbmFsTWF4ID0gcmV2ZXJzZVBvaW50cy5sZW5ndGggLSAxO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0gd2hpbGUgKC0taGlzdG9yeUluZGV4ID49IC0xKTtcbiAgICAgICAgICAgIC8vIFRoZXJlIGFyZSBjYXNlcyB3aGVyZSB0aGUgcmV2ZXJzZSBoaXN0b3J5IHdpbGwgZmluZCBkaWZmcyB0aGF0XG4gICAgICAgICAgICAvLyBhcmUgY29ycmVjdCwgYnV0IG5vdCBpbnR1aXRpdmUsIHNvIHdlIG5lZWQgc2hpZnQgdGhlbS5cbiAgICAgICAgICAgIHJldmVyc2VDaGFuZ2VzID0gY2hhbmdlSGVscGVyLmdldENoYW5nZXMoKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdGhpcy5Db25jYXRlbmF0ZUNoYW5nZXMoZm9yd2FyZENoYW5nZXMsIHJldmVyc2VDaGFuZ2VzKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogR2l2ZW4gdGhlIHJhbmdlIHRvIGNvbXB1dGUgdGhlIGRpZmYgb24sIHRoaXMgbWV0aG9kIGZpbmRzIHRoZSBwb2ludDpcbiAgICAgKiAobWlkT3JpZ2luYWwsIG1pZE1vZGlmaWVkKVxuICAgICAqIHRoYXQgZXhpc3RzIGluIHRoZSBtaWRkbGUgb2YgdGhlIExDUyBvZiB0aGUgdHdvIHNlcXVlbmNlcyBhbmRcbiAgICAgKiBpcyB0aGUgcG9pbnQgYXQgd2hpY2ggdGhlIExDUyBwcm9ibGVtIG1heSBiZSBicm9rZW4gZG93biByZWN1cnNpdmVseS5cbiAgICAgKiBUaGlzIG1ldGhvZCB3aWxsIHRyeSB0byBrZWVwIHRoZSBMQ1MgdHJhY2UgaW4gbWVtb3J5LiBJZiB0aGUgTENTIHJlY3Vyc2lvblxuICAgICAqIHBvaW50IGlzIGNhbGN1bGF0ZWQgYW5kIHRoZSBmdWxsIHRyYWNlIGlzIGF2YWlsYWJsZSBpbiBtZW1vcnksIHRoZW4gdGhpcyBtZXRob2RcbiAgICAgKiB3aWxsIHJldHVybiB0aGUgY2hhbmdlIGxpc3QuXG4gICAgICogQHBhcmFtIG9yaWdpbmFsU3RhcnQgVGhlIHN0YXJ0IGJvdW5kIG9mIHRoZSBvcmlnaW5hbCBzZXF1ZW5jZSByYW5nZVxuICAgICAqIEBwYXJhbSBvcmlnaW5hbEVuZCBUaGUgZW5kIGJvdW5kIG9mIHRoZSBvcmlnaW5hbCBzZXF1ZW5jZSByYW5nZVxuICAgICAqIEBwYXJhbSBtb2RpZmllZFN0YXJ0IFRoZSBzdGFydCBib3VuZCBvZiB0aGUgbW9kaWZpZWQgc2VxdWVuY2UgcmFuZ2VcbiAgICAgKiBAcGFyYW0gbW9kaWZpZWRFbmQgVGhlIGVuZCBib3VuZCBvZiB0aGUgbW9kaWZpZWQgc2VxdWVuY2UgcmFuZ2VcbiAgICAgKiBAcGFyYW0gbWlkT3JpZ2luYWwgVGhlIG1pZGRsZSBwb2ludCBvZiB0aGUgb3JpZ2luYWwgc2VxdWVuY2UgcmFuZ2VcbiAgICAgKiBAcGFyYW0gbWlkTW9kaWZpZWQgVGhlIG1pZGRsZSBwb2ludCBvZiB0aGUgbW9kaWZpZWQgc2VxdWVuY2UgcmFuZ2VcbiAgICAgKiBAcmV0dXJucyBUaGUgZGlmZiBjaGFuZ2VzLCBpZiBhdmFpbGFibGUsIG90aGVyd2lzZSBudWxsXG4gICAgICovXG4gICAgQ29tcHV0ZVJlY3Vyc2lvblBvaW50KG9yaWdpbmFsU3RhcnQsIG9yaWdpbmFsRW5kLCBtb2RpZmllZFN0YXJ0LCBtb2RpZmllZEVuZCwgbWlkT3JpZ2luYWxBcnIsIG1pZE1vZGlmaWVkQXJyLCBxdWl0RWFybHlBcnIpIHtcbiAgICAgICAgbGV0IG9yaWdpbmFsSW5kZXggPSAwLCBtb2RpZmllZEluZGV4ID0gMDtcbiAgICAgICAgbGV0IGRpYWdvbmFsRm9yd2FyZFN0YXJ0ID0gMCwgZGlhZ29uYWxGb3J3YXJkRW5kID0gMDtcbiAgICAgICAgbGV0IGRpYWdvbmFsUmV2ZXJzZVN0YXJ0ID0gMCwgZGlhZ29uYWxSZXZlcnNlRW5kID0gMDtcbiAgICAgICAgLy8gVG8gdHJhdmVyc2UgdGhlIGVkaXQgZ3JhcGggYW5kIHByb2R1Y2UgdGhlIHByb3BlciBMQ1MsIG91ciBhY3R1YWxcbiAgICAgICAgLy8gc3RhcnQgcG9zaXRpb24gaXMganVzdCBvdXRzaWRlIHRoZSBnaXZlbiBib3VuZGFyeVxuICAgICAgICBvcmlnaW5hbFN0YXJ0LS07XG4gICAgICAgIG1vZGlmaWVkU3RhcnQtLTtcbiAgICAgICAgLy8gV2Ugc2V0IHRoZXNlIHVwIHRvIG1ha2UgdGhlIGNvbXBpbGVyIGhhcHB5LCBidXQgdGhleSB3aWxsXG4gICAgICAgIC8vIGJlIHJlcGxhY2VkIGJlZm9yZSB3ZSByZXR1cm4gd2l0aCB0aGUgYWN0dWFsIHJlY3Vyc2lvbiBwb2ludFxuICAgICAgICBtaWRPcmlnaW5hbEFyclswXSA9IDA7XG4gICAgICAgIG1pZE1vZGlmaWVkQXJyWzBdID0gMDtcbiAgICAgICAgLy8gQ2xlYXIgb3V0IHRoZSBoaXN0b3J5XG4gICAgICAgIHRoaXMubV9mb3J3YXJkSGlzdG9yeSA9IFtdO1xuICAgICAgICB0aGlzLm1fcmV2ZXJzZUhpc3RvcnkgPSBbXTtcbiAgICAgICAgLy8gRWFjaCBjZWxsIGluIHRoZSB0d28gYXJyYXlzIGNvcnJlc3BvbmRzIHRvIGEgZGlhZ29uYWwgaW4gdGhlIGVkaXQgZ3JhcGguXG4gICAgICAgIC8vIFRoZSBpbnRlZ2VyIHZhbHVlIGluIHRoZSBjZWxsIHJlcHJlc2VudHMgdGhlIG9yaWdpbmFsSW5kZXggb2YgdGhlIGZ1cnRoZXN0XG4gICAgICAgIC8vIHJlYWNoaW5nIHBvaW50IGZvdW5kIHNvIGZhciB0aGF0IGVuZHMgaW4gdGhhdCBkaWFnb25hbC5cbiAgICAgICAgLy8gVGhlIG1vZGlmaWVkSW5kZXggY2FuIGJlIGNvbXB1dGVkIG1hdGhlbWF0aWNhbGx5IGZyb20gdGhlIG9yaWdpbmFsSW5kZXggYW5kIHRoZSBkaWFnb25hbCBudW1iZXIuXG4gICAgICAgIGNvbnN0IG1heERpZmZlcmVuY2VzID0gKG9yaWdpbmFsRW5kIC0gb3JpZ2luYWxTdGFydCkgKyAobW9kaWZpZWRFbmQgLSBtb2RpZmllZFN0YXJ0KTtcbiAgICAgICAgY29uc3QgbnVtRGlhZ29uYWxzID0gbWF4RGlmZmVyZW5jZXMgKyAxO1xuICAgICAgICBjb25zdCBmb3J3YXJkUG9pbnRzID0gbmV3IEludDMyQXJyYXkobnVtRGlhZ29uYWxzKTtcbiAgICAgICAgY29uc3QgcmV2ZXJzZVBvaW50cyA9IG5ldyBJbnQzMkFycmF5KG51bURpYWdvbmFscyk7XG4gICAgICAgIC8vIGRpYWdvbmFsRm9yd2FyZEJhc2U6IEluZGV4IGludG8gZm9yd2FyZFBvaW50cyBvZiB0aGUgZGlhZ29uYWwgd2hpY2ggcGFzc2VzIHRocm91Z2ggKG9yaWdpbmFsU3RhcnQsIG1vZGlmaWVkU3RhcnQpXG4gICAgICAgIC8vIGRpYWdvbmFsUmV2ZXJzZUJhc2U6IEluZGV4IGludG8gcmV2ZXJzZVBvaW50cyBvZiB0aGUgZGlhZ29uYWwgd2hpY2ggcGFzc2VzIHRocm91Z2ggKG9yaWdpbmFsRW5kLCBtb2RpZmllZEVuZClcbiAgICAgICAgY29uc3QgZGlhZ29uYWxGb3J3YXJkQmFzZSA9IChtb2RpZmllZEVuZCAtIG1vZGlmaWVkU3RhcnQpO1xuICAgICAgICBjb25zdCBkaWFnb25hbFJldmVyc2VCYXNlID0gKG9yaWdpbmFsRW5kIC0gb3JpZ2luYWxTdGFydCk7XG4gICAgICAgIC8vIGRpYWdvbmFsRm9yd2FyZE9mZnNldDogR2VvbWV0cmljIG9mZnNldCB3aGljaCBhbGxvd3MgbW9kaWZpZWRJbmRleCB0byBiZSBjb21wdXRlZCBmcm9tIG9yaWdpbmFsSW5kZXggYW5kIHRoZVxuICAgICAgICAvLyAgICBkaWFnb25hbCBudW1iZXIgKHJlbGF0aXZlIHRvIGRpYWdvbmFsRm9yd2FyZEJhc2UpXG4gICAgICAgIC8vIGRpYWdvbmFsUmV2ZXJzZU9mZnNldDogR2VvbWV0cmljIG9mZnNldCB3aGljaCBhbGxvd3MgbW9kaWZpZWRJbmRleCB0byBiZSBjb21wdXRlZCBmcm9tIG9yaWdpbmFsSW5kZXggYW5kIHRoZVxuICAgICAgICAvLyAgICBkaWFnb25hbCBudW1iZXIgKHJlbGF0aXZlIHRvIGRpYWdvbmFsUmV2ZXJzZUJhc2UpXG4gICAgICAgIGNvbnN0IGRpYWdvbmFsRm9yd2FyZE9mZnNldCA9IChvcmlnaW5hbFN0YXJ0IC0gbW9kaWZpZWRTdGFydCk7XG4gICAgICAgIGNvbnN0IGRpYWdvbmFsUmV2ZXJzZU9mZnNldCA9IChvcmlnaW5hbEVuZCAtIG1vZGlmaWVkRW5kKTtcbiAgICAgICAgLy8gZGVsdGE6IFRoZSBkaWZmZXJlbmNlIGJldHdlZW4gdGhlIGVuZCBkaWFnb25hbCBhbmQgdGhlIHN0YXJ0IGRpYWdvbmFsLiBUaGlzIGlzIHVzZWQgdG8gcmVsYXRlIGRpYWdvbmFsIG51bWJlcnNcbiAgICAgICAgLy8gICByZWxhdGl2ZSB0byB0aGUgc3RhcnQgZGlhZ29uYWwgd2l0aCBkaWFnb25hbCBudW1iZXJzIHJlbGF0aXZlIHRvIHRoZSBlbmQgZGlhZ29uYWwuXG4gICAgICAgIC8vIFRoZSBFdmVuL09kZG4tbmVzcyBvZiB0aGlzIGRlbHRhIGlzIGltcG9ydGFudCBmb3IgZGV0ZXJtaW5pbmcgd2hlbiB3ZSBzaG91bGQgY2hlY2sgZm9yIG92ZXJsYXBcbiAgICAgICAgY29uc3QgZGVsdGEgPSBkaWFnb25hbFJldmVyc2VCYXNlIC0gZGlhZ29uYWxGb3J3YXJkQmFzZTtcbiAgICAgICAgY29uc3QgZGVsdGFJc0V2ZW4gPSAoZGVsdGEgJSAyID09PSAwKTtcbiAgICAgICAgLy8gSGVyZSB3ZSBzZXQgdXAgdGhlIHN0YXJ0IGFuZCBlbmQgcG9pbnRzIGFzIHRoZSBmdXJ0aGVzdCBwb2ludHMgZm91bmQgc28gZmFyXG4gICAgICAgIC8vIGluIGJvdGggdGhlIGZvcndhcmQgYW5kIHJldmVyc2UgZGlyZWN0aW9ucywgcmVzcGVjdGl2ZWx5XG4gICAgICAgIGZvcndhcmRQb2ludHNbZGlhZ29uYWxGb3J3YXJkQmFzZV0gPSBvcmlnaW5hbFN0YXJ0O1xuICAgICAgICByZXZlcnNlUG9pbnRzW2RpYWdvbmFsUmV2ZXJzZUJhc2VdID0gb3JpZ2luYWxFbmQ7XG4gICAgICAgIC8vIFJlbWVtYmVyIGlmIHdlIHF1aXQgZWFybHksIGFuZCB0aHVzIG5lZWQgdG8gZG8gYSBiZXN0LWVmZm9ydCByZXN1bHQgaW5zdGVhZCBvZiBhIHJlYWwgcmVzdWx0LlxuICAgICAgICBxdWl0RWFybHlBcnJbMF0gPSBmYWxzZTtcbiAgICAgICAgLy8gQSBjb3VwbGUgb2YgcG9pbnRzOlxuICAgICAgICAvLyAtLVdpdGggdGhpcyBtZXRob2QsIHdlIGl0ZXJhdGUgb24gdGhlIG51bWJlciBvZiBkaWZmZXJlbmNlcyBiZXR3ZWVuIHRoZSB0d28gc2VxdWVuY2VzLlxuICAgICAgICAvLyAgIFRoZSBtb3JlIGRpZmZlcmVuY2VzIHRoZXJlIGFjdHVhbGx5IGFyZSwgdGhlIGxvbmdlciB0aGlzIHdpbGwgdGFrZS5cbiAgICAgICAgLy8gLS1BbHNvLCBhcyB0aGUgbnVtYmVyIG9mIGRpZmZlcmVuY2VzIGluY3JlYXNlcywgd2UgaGF2ZSB0byBzZWFyY2ggb24gZGlhZ29uYWxzIGZ1cnRoZXJcbiAgICAgICAgLy8gICBhd2F5IGZyb20gdGhlIHJlZmVyZW5jZSBkaWFnb25hbCAod2hpY2ggaXMgZGlhZ29uYWxGb3J3YXJkQmFzZSBmb3IgZm9yd2FyZCwgZGlhZ29uYWxSZXZlcnNlQmFzZSBmb3IgcmV2ZXJzZSkuXG4gICAgICAgIC8vIC0tV2UgZXh0ZW5kIG9uIGV2ZW4gZGlhZ29uYWxzIChyZWxhdGl2ZSB0byB0aGUgcmVmZXJlbmNlIGRpYWdvbmFsKSBvbmx5IHdoZW4gbnVtRGlmZmVyZW5jZXNcbiAgICAgICAgLy8gICBpcyBldmVuIGFuZCBvZGQgZGlhZ29uYWxzIG9ubHkgd2hlbiBudW1EaWZmZXJlbmNlcyBpcyBvZGQuXG4gICAgICAgIGZvciAobGV0IG51bURpZmZlcmVuY2VzID0gMTsgbnVtRGlmZmVyZW5jZXMgPD0gKG1heERpZmZlcmVuY2VzIC8gMikgKyAxOyBudW1EaWZmZXJlbmNlcysrKSB7XG4gICAgICAgICAgICBsZXQgZnVydGhlc3RPcmlnaW5hbEluZGV4ID0gMDtcbiAgICAgICAgICAgIGxldCBmdXJ0aGVzdE1vZGlmaWVkSW5kZXggPSAwO1xuICAgICAgICAgICAgLy8gUnVuIHRoZSBhbGdvcml0aG0gaW4gdGhlIGZvcndhcmQgZGlyZWN0aW9uXG4gICAgICAgICAgICBkaWFnb25hbEZvcndhcmRTdGFydCA9IHRoaXMuQ2xpcERpYWdvbmFsQm91bmQoZGlhZ29uYWxGb3J3YXJkQmFzZSAtIG51bURpZmZlcmVuY2VzLCBudW1EaWZmZXJlbmNlcywgZGlhZ29uYWxGb3J3YXJkQmFzZSwgbnVtRGlhZ29uYWxzKTtcbiAgICAgICAgICAgIGRpYWdvbmFsRm9yd2FyZEVuZCA9IHRoaXMuQ2xpcERpYWdvbmFsQm91bmQoZGlhZ29uYWxGb3J3YXJkQmFzZSArIG51bURpZmZlcmVuY2VzLCBudW1EaWZmZXJlbmNlcywgZGlhZ29uYWxGb3J3YXJkQmFzZSwgbnVtRGlhZ29uYWxzKTtcbiAgICAgICAgICAgIGZvciAobGV0IGRpYWdvbmFsID0gZGlhZ29uYWxGb3J3YXJkU3RhcnQ7IGRpYWdvbmFsIDw9IGRpYWdvbmFsRm9yd2FyZEVuZDsgZGlhZ29uYWwgKz0gMikge1xuICAgICAgICAgICAgICAgIC8vIFNURVAgMTogV2UgZXh0ZW5kIHRoZSBmdXJ0aGVzdCByZWFjaGluZyBwb2ludCBpbiB0aGUgcHJlc2VudCBkaWFnb25hbFxuICAgICAgICAgICAgICAgIC8vIGJ5IGxvb2tpbmcgYXQgdGhlIGRpYWdvbmFscyBhYm92ZSBhbmQgYmVsb3cgYW5kIHBpY2tpbmcgdGhlIG9uZSB3aG9zZSBwb2ludFxuICAgICAgICAgICAgICAgIC8vIGlzIGZ1cnRoZXIgYXdheSBmcm9tIHRoZSBzdGFydCBwb2ludCAob3JpZ2luYWxTdGFydCwgbW9kaWZpZWRTdGFydClcbiAgICAgICAgICAgICAgICBpZiAoZGlhZ29uYWwgPT09IGRpYWdvbmFsRm9yd2FyZFN0YXJ0IHx8IChkaWFnb25hbCA8IGRpYWdvbmFsRm9yd2FyZEVuZCAmJiBmb3J3YXJkUG9pbnRzW2RpYWdvbmFsIC0gMV0gPCBmb3J3YXJkUG9pbnRzW2RpYWdvbmFsICsgMV0pKSB7XG4gICAgICAgICAgICAgICAgICAgIG9yaWdpbmFsSW5kZXggPSBmb3J3YXJkUG9pbnRzW2RpYWdvbmFsICsgMV07XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBvcmlnaW5hbEluZGV4ID0gZm9yd2FyZFBvaW50c1tkaWFnb25hbCAtIDFdICsgMTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgbW9kaWZpZWRJbmRleCA9IG9yaWdpbmFsSW5kZXggLSAoZGlhZ29uYWwgLSBkaWFnb25hbEZvcndhcmRCYXNlKSAtIGRpYWdvbmFsRm9yd2FyZE9mZnNldDtcbiAgICAgICAgICAgICAgICAvLyBTYXZlIHRoZSBjdXJyZW50IG9yaWdpbmFsSW5kZXggc28gd2UgY2FuIHRlc3QgZm9yIGZhbHNlIG92ZXJsYXAgaW4gc3RlcCAzXG4gICAgICAgICAgICAgICAgY29uc3QgdGVtcE9yaWdpbmFsSW5kZXggPSBvcmlnaW5hbEluZGV4O1xuICAgICAgICAgICAgICAgIC8vIFNURVAgMjogV2UgY2FuIGNvbnRpbnVlIHRvIGV4dGVuZCB0aGUgZnVydGhlc3QgcmVhY2hpbmcgcG9pbnQgaW4gdGhlIHByZXNlbnQgZGlhZ29uYWxcbiAgICAgICAgICAgICAgICAvLyBzbyBsb25nIGFzIHRoZSBlbGVtZW50cyBhcmUgZXF1YWwuXG4gICAgICAgICAgICAgICAgd2hpbGUgKG9yaWdpbmFsSW5kZXggPCBvcmlnaW5hbEVuZCAmJiBtb2RpZmllZEluZGV4IDwgbW9kaWZpZWRFbmQgJiYgdGhpcy5FbGVtZW50c0FyZUVxdWFsKG9yaWdpbmFsSW5kZXggKyAxLCBtb2RpZmllZEluZGV4ICsgMSkpIHtcbiAgICAgICAgICAgICAgICAgICAgb3JpZ2luYWxJbmRleCsrO1xuICAgICAgICAgICAgICAgICAgICBtb2RpZmllZEluZGV4Kys7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGZvcndhcmRQb2ludHNbZGlhZ29uYWxdID0gb3JpZ2luYWxJbmRleDtcbiAgICAgICAgICAgICAgICBpZiAob3JpZ2luYWxJbmRleCArIG1vZGlmaWVkSW5kZXggPiBmdXJ0aGVzdE9yaWdpbmFsSW5kZXggKyBmdXJ0aGVzdE1vZGlmaWVkSW5kZXgpIHtcbiAgICAgICAgICAgICAgICAgICAgZnVydGhlc3RPcmlnaW5hbEluZGV4ID0gb3JpZ2luYWxJbmRleDtcbiAgICAgICAgICAgICAgICAgICAgZnVydGhlc3RNb2RpZmllZEluZGV4ID0gbW9kaWZpZWRJbmRleDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgLy8gU1RFUCAzOiBJZiBkZWx0YSBpcyBvZGQgKG92ZXJsYXAgZmlyc3QgaGFwcGVucyBvbiBmb3J3YXJkIHdoZW4gZGVsdGEgaXMgb2RkKVxuICAgICAgICAgICAgICAgIC8vIGFuZCBkaWFnb25hbCBpcyBpbiB0aGUgcmFuZ2Ugb2YgcmV2ZXJzZSBkaWFnb25hbHMgY29tcHV0ZWQgZm9yIG51bURpZmZlcmVuY2VzLTFcbiAgICAgICAgICAgICAgICAvLyAodGhlIHByZXZpb3VzIGl0ZXJhdGlvbjsgd2UgaGF2ZW4ndCBjb21wdXRlZCByZXZlcnNlIGRpYWdvbmFscyBmb3IgbnVtRGlmZmVyZW5jZXMgeWV0KVxuICAgICAgICAgICAgICAgIC8vIHRoZW4gY2hlY2sgZm9yIG92ZXJsYXAuXG4gICAgICAgICAgICAgICAgaWYgKCFkZWx0YUlzRXZlbiAmJiBNYXRoLmFicyhkaWFnb25hbCAtIGRpYWdvbmFsUmV2ZXJzZUJhc2UpIDw9IChudW1EaWZmZXJlbmNlcyAtIDEpKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChvcmlnaW5hbEluZGV4ID49IHJldmVyc2VQb2ludHNbZGlhZ29uYWxdKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBtaWRPcmlnaW5hbEFyclswXSA9IG9yaWdpbmFsSW5kZXg7XG4gICAgICAgICAgICAgICAgICAgICAgICBtaWRNb2RpZmllZEFyclswXSA9IG1vZGlmaWVkSW5kZXg7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAodGVtcE9yaWdpbmFsSW5kZXggPD0gcmV2ZXJzZVBvaW50c1tkaWFnb25hbF0gJiYgMTQ0NyAvKiBMb2NhbENvbnN0YW50cy5NYXhEaWZmZXJlbmNlc0hpc3RvcnkgKi8gPiAwICYmIG51bURpZmZlcmVuY2VzIDw9ICgxNDQ3IC8qIExvY2FsQ29uc3RhbnRzLk1heERpZmZlcmVuY2VzSGlzdG9yeSAqLyArIDEpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gQklOR08hIFdlIG92ZXJsYXBwZWQsIGFuZCB3ZSBoYXZlIHRoZSBmdWxsIHRyYWNlIGluIG1lbW9yeSFcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5XQUxLVFJBQ0UoZGlhZ29uYWxGb3J3YXJkQmFzZSwgZGlhZ29uYWxGb3J3YXJkU3RhcnQsIGRpYWdvbmFsRm9yd2FyZEVuZCwgZGlhZ29uYWxGb3J3YXJkT2Zmc2V0LCBkaWFnb25hbFJldmVyc2VCYXNlLCBkaWFnb25hbFJldmVyc2VTdGFydCwgZGlhZ29uYWxSZXZlcnNlRW5kLCBkaWFnb25hbFJldmVyc2VPZmZzZXQsIGZvcndhcmRQb2ludHMsIHJldmVyc2VQb2ludHMsIG9yaWdpbmFsSW5kZXgsIG9yaWdpbmFsRW5kLCBtaWRPcmlnaW5hbEFyciwgbW9kaWZpZWRJbmRleCwgbW9kaWZpZWRFbmQsIG1pZE1vZGlmaWVkQXJyLCBkZWx0YUlzRXZlbiwgcXVpdEVhcmx5QXJyKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIEVpdGhlciBmYWxzZSBvdmVybGFwLCBvciB3ZSBkaWRuJ3QgaGF2ZSBlbm91Z2ggbWVtb3J5IGZvciB0aGUgZnVsbCB0cmFjZVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIEp1c3QgcmV0dXJuIHRoZSByZWN1cnNpb24gcG9pbnRcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8vIENoZWNrIHRvIHNlZSBpZiB3ZSBzaG91bGQgYmUgcXVpdHRpbmcgZWFybHksIGJlZm9yZSBtb3Zpbmcgb24gdG8gdGhlIG5leHQgaXRlcmF0aW9uLlxuICAgICAgICAgICAgY29uc3QgbWF0Y2hMZW5ndGhPZkxvbmdlc3QgPSAoKGZ1cnRoZXN0T3JpZ2luYWxJbmRleCAtIG9yaWdpbmFsU3RhcnQpICsgKGZ1cnRoZXN0TW9kaWZpZWRJbmRleCAtIG1vZGlmaWVkU3RhcnQpIC0gbnVtRGlmZmVyZW5jZXMpIC8gMjtcbiAgICAgICAgICAgIGlmICh0aGlzLkNvbnRpbnVlUHJvY2Vzc2luZ1ByZWRpY2F0ZSAhPT0gbnVsbCAmJiAhdGhpcy5Db250aW51ZVByb2Nlc3NpbmdQcmVkaWNhdGUoZnVydGhlc3RPcmlnaW5hbEluZGV4LCBtYXRjaExlbmd0aE9mTG9uZ2VzdCkpIHtcbiAgICAgICAgICAgICAgICAvLyBXZSBjYW4ndCBmaW5pc2gsIHNvIHNraXAgYWhlYWQgdG8gZ2VuZXJhdGluZyBhIHJlc3VsdCBmcm9tIHdoYXQgd2UgaGF2ZS5cbiAgICAgICAgICAgICAgICBxdWl0RWFybHlBcnJbMF0gPSB0cnVlO1xuICAgICAgICAgICAgICAgIC8vIFVzZSB0aGUgZnVydGhlc3QgZGlzdGFuY2Ugd2UgZ290IGluIHRoZSBmb3J3YXJkIGRpcmVjdGlvbi5cbiAgICAgICAgICAgICAgICBtaWRPcmlnaW5hbEFyclswXSA9IGZ1cnRoZXN0T3JpZ2luYWxJbmRleDtcbiAgICAgICAgICAgICAgICBtaWRNb2RpZmllZEFyclswXSA9IGZ1cnRoZXN0TW9kaWZpZWRJbmRleDtcbiAgICAgICAgICAgICAgICBpZiAobWF0Y2hMZW5ndGhPZkxvbmdlc3QgPiAwICYmIDE0NDcgLyogTG9jYWxDb25zdGFudHMuTWF4RGlmZmVyZW5jZXNIaXN0b3J5ICovID4gMCAmJiBudW1EaWZmZXJlbmNlcyA8PSAoMTQ0NyAvKiBMb2NhbENvbnN0YW50cy5NYXhEaWZmZXJlbmNlc0hpc3RvcnkgKi8gKyAxKSkge1xuICAgICAgICAgICAgICAgICAgICAvLyBFbm91Z2ggb2YgdGhlIGhpc3RvcnkgaXMgaW4gbWVtb3J5IHRvIHdhbGsgaXQgYmFja3dhcmRzXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLldBTEtUUkFDRShkaWFnb25hbEZvcndhcmRCYXNlLCBkaWFnb25hbEZvcndhcmRTdGFydCwgZGlhZ29uYWxGb3J3YXJkRW5kLCBkaWFnb25hbEZvcndhcmRPZmZzZXQsIGRpYWdvbmFsUmV2ZXJzZUJhc2UsIGRpYWdvbmFsUmV2ZXJzZVN0YXJ0LCBkaWFnb25hbFJldmVyc2VFbmQsIGRpYWdvbmFsUmV2ZXJzZU9mZnNldCwgZm9yd2FyZFBvaW50cywgcmV2ZXJzZVBvaW50cywgb3JpZ2luYWxJbmRleCwgb3JpZ2luYWxFbmQsIG1pZE9yaWdpbmFsQXJyLCBtb2RpZmllZEluZGV4LCBtb2RpZmllZEVuZCwgbWlkTW9kaWZpZWRBcnIsIGRlbHRhSXNFdmVuLCBxdWl0RWFybHlBcnIpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gV2UgZGlkbid0IGFjdHVhbGx5IHJlbWVtYmVyIGVub3VnaCBvZiB0aGUgaGlzdG9yeS5cbiAgICAgICAgICAgICAgICAgICAgLy9TaW5jZSB3ZSBhcmUgcXVpdHRpbmcgdGhlIGRpZmYgZWFybHksIHdlIG5lZWQgdG8gc2hpZnQgYmFjayB0aGUgb3JpZ2luYWxTdGFydCBhbmQgbW9kaWZpZWQgc3RhcnRcbiAgICAgICAgICAgICAgICAgICAgLy9iYWNrIGludG8gdGhlIGJvdW5kYXJ5IGxpbWl0cyBzaW5jZSB3ZSBkZWNyZW1lbnRlZCB0aGVpciB2YWx1ZSBhYm92ZSBiZXlvbmQgdGhlIGJvdW5kYXJ5IGxpbWl0LlxuICAgICAgICAgICAgICAgICAgICBvcmlnaW5hbFN0YXJ0Kys7XG4gICAgICAgICAgICAgICAgICAgIG1vZGlmaWVkU3RhcnQrKztcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFtcbiAgICAgICAgICAgICAgICAgICAgICAgIG5ldyBEaWZmQ2hhbmdlKG9yaWdpbmFsU3RhcnQsIG9yaWdpbmFsRW5kIC0gb3JpZ2luYWxTdGFydCArIDEsIG1vZGlmaWVkU3RhcnQsIG1vZGlmaWVkRW5kIC0gbW9kaWZpZWRTdGFydCArIDEpXG4gICAgICAgICAgICAgICAgICAgIF07XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLy8gUnVuIHRoZSBhbGdvcml0aG0gaW4gdGhlIHJldmVyc2UgZGlyZWN0aW9uXG4gICAgICAgICAgICBkaWFnb25hbFJldmVyc2VTdGFydCA9IHRoaXMuQ2xpcERpYWdvbmFsQm91bmQoZGlhZ29uYWxSZXZlcnNlQmFzZSAtIG51bURpZmZlcmVuY2VzLCBudW1EaWZmZXJlbmNlcywgZGlhZ29uYWxSZXZlcnNlQmFzZSwgbnVtRGlhZ29uYWxzKTtcbiAgICAgICAgICAgIGRpYWdvbmFsUmV2ZXJzZUVuZCA9IHRoaXMuQ2xpcERpYWdvbmFsQm91bmQoZGlhZ29uYWxSZXZlcnNlQmFzZSArIG51bURpZmZlcmVuY2VzLCBudW1EaWZmZXJlbmNlcywgZGlhZ29uYWxSZXZlcnNlQmFzZSwgbnVtRGlhZ29uYWxzKTtcbiAgICAgICAgICAgIGZvciAobGV0IGRpYWdvbmFsID0gZGlhZ29uYWxSZXZlcnNlU3RhcnQ7IGRpYWdvbmFsIDw9IGRpYWdvbmFsUmV2ZXJzZUVuZDsgZGlhZ29uYWwgKz0gMikge1xuICAgICAgICAgICAgICAgIC8vIFNURVAgMTogV2UgZXh0ZW5kIHRoZSBmdXJ0aGVzdCByZWFjaGluZyBwb2ludCBpbiB0aGUgcHJlc2VudCBkaWFnb25hbFxuICAgICAgICAgICAgICAgIC8vIGJ5IGxvb2tpbmcgYXQgdGhlIGRpYWdvbmFscyBhYm92ZSBhbmQgYmVsb3cgYW5kIHBpY2tpbmcgdGhlIG9uZSB3aG9zZSBwb2ludFxuICAgICAgICAgICAgICAgIC8vIGlzIGZ1cnRoZXIgYXdheSBmcm9tIHRoZSBzdGFydCBwb2ludCAob3JpZ2luYWxFbmQsIG1vZGlmaWVkRW5kKVxuICAgICAgICAgICAgICAgIGlmIChkaWFnb25hbCA9PT0gZGlhZ29uYWxSZXZlcnNlU3RhcnQgfHwgKGRpYWdvbmFsIDwgZGlhZ29uYWxSZXZlcnNlRW5kICYmIHJldmVyc2VQb2ludHNbZGlhZ29uYWwgLSAxXSA+PSByZXZlcnNlUG9pbnRzW2RpYWdvbmFsICsgMV0pKSB7XG4gICAgICAgICAgICAgICAgICAgIG9yaWdpbmFsSW5kZXggPSByZXZlcnNlUG9pbnRzW2RpYWdvbmFsICsgMV0gLSAxO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgb3JpZ2luYWxJbmRleCA9IHJldmVyc2VQb2ludHNbZGlhZ29uYWwgLSAxXTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgbW9kaWZpZWRJbmRleCA9IG9yaWdpbmFsSW5kZXggLSAoZGlhZ29uYWwgLSBkaWFnb25hbFJldmVyc2VCYXNlKSAtIGRpYWdvbmFsUmV2ZXJzZU9mZnNldDtcbiAgICAgICAgICAgICAgICAvLyBTYXZlIHRoZSBjdXJyZW50IG9yaWdpbmFsSW5kZXggc28gd2UgY2FuIHRlc3QgZm9yIGZhbHNlIG92ZXJsYXBcbiAgICAgICAgICAgICAgICBjb25zdCB0ZW1wT3JpZ2luYWxJbmRleCA9IG9yaWdpbmFsSW5kZXg7XG4gICAgICAgICAgICAgICAgLy8gU1RFUCAyOiBXZSBjYW4gY29udGludWUgdG8gZXh0ZW5kIHRoZSBmdXJ0aGVzdCByZWFjaGluZyBwb2ludCBpbiB0aGUgcHJlc2VudCBkaWFnb25hbFxuICAgICAgICAgICAgICAgIC8vIGFzIGxvbmcgYXMgdGhlIGVsZW1lbnRzIGFyZSBlcXVhbC5cbiAgICAgICAgICAgICAgICB3aGlsZSAob3JpZ2luYWxJbmRleCA+IG9yaWdpbmFsU3RhcnQgJiYgbW9kaWZpZWRJbmRleCA+IG1vZGlmaWVkU3RhcnQgJiYgdGhpcy5FbGVtZW50c0FyZUVxdWFsKG9yaWdpbmFsSW5kZXgsIG1vZGlmaWVkSW5kZXgpKSB7XG4gICAgICAgICAgICAgICAgICAgIG9yaWdpbmFsSW5kZXgtLTtcbiAgICAgICAgICAgICAgICAgICAgbW9kaWZpZWRJbmRleC0tO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByZXZlcnNlUG9pbnRzW2RpYWdvbmFsXSA9IG9yaWdpbmFsSW5kZXg7XG4gICAgICAgICAgICAgICAgLy8gU1RFUCA0OiBJZiBkZWx0YSBpcyBldmVuIChvdmVybGFwIGZpcnN0IGhhcHBlbnMgb24gcmV2ZXJzZSB3aGVuIGRlbHRhIGlzIGV2ZW4pXG4gICAgICAgICAgICAgICAgLy8gYW5kIGRpYWdvbmFsIGlzIGluIHRoZSByYW5nZSBvZiBmb3J3YXJkIGRpYWdvbmFscyBjb21wdXRlZCBmb3IgbnVtRGlmZmVyZW5jZXNcbiAgICAgICAgICAgICAgICAvLyB0aGVuIGNoZWNrIGZvciBvdmVybGFwLlxuICAgICAgICAgICAgICAgIGlmIChkZWx0YUlzRXZlbiAmJiBNYXRoLmFicyhkaWFnb25hbCAtIGRpYWdvbmFsRm9yd2FyZEJhc2UpIDw9IG51bURpZmZlcmVuY2VzKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChvcmlnaW5hbEluZGV4IDw9IGZvcndhcmRQb2ludHNbZGlhZ29uYWxdKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBtaWRPcmlnaW5hbEFyclswXSA9IG9yaWdpbmFsSW5kZXg7XG4gICAgICAgICAgICAgICAgICAgICAgICBtaWRNb2RpZmllZEFyclswXSA9IG1vZGlmaWVkSW5kZXg7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAodGVtcE9yaWdpbmFsSW5kZXggPj0gZm9yd2FyZFBvaW50c1tkaWFnb25hbF0gJiYgMTQ0NyAvKiBMb2NhbENvbnN0YW50cy5NYXhEaWZmZXJlbmNlc0hpc3RvcnkgKi8gPiAwICYmIG51bURpZmZlcmVuY2VzIDw9ICgxNDQ3IC8qIExvY2FsQ29uc3RhbnRzLk1heERpZmZlcmVuY2VzSGlzdG9yeSAqLyArIDEpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gQklOR08hIFdlIG92ZXJsYXBwZWQsIGFuZCB3ZSBoYXZlIHRoZSBmdWxsIHRyYWNlIGluIG1lbW9yeSFcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5XQUxLVFJBQ0UoZGlhZ29uYWxGb3J3YXJkQmFzZSwgZGlhZ29uYWxGb3J3YXJkU3RhcnQsIGRpYWdvbmFsRm9yd2FyZEVuZCwgZGlhZ29uYWxGb3J3YXJkT2Zmc2V0LCBkaWFnb25hbFJldmVyc2VCYXNlLCBkaWFnb25hbFJldmVyc2VTdGFydCwgZGlhZ29uYWxSZXZlcnNlRW5kLCBkaWFnb25hbFJldmVyc2VPZmZzZXQsIGZvcndhcmRQb2ludHMsIHJldmVyc2VQb2ludHMsIG9yaWdpbmFsSW5kZXgsIG9yaWdpbmFsRW5kLCBtaWRPcmlnaW5hbEFyciwgbW9kaWZpZWRJbmRleCwgbW9kaWZpZWRFbmQsIG1pZE1vZGlmaWVkQXJyLCBkZWx0YUlzRXZlbiwgcXVpdEVhcmx5QXJyKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIEVpdGhlciBmYWxzZSBvdmVybGFwLCBvciB3ZSBkaWRuJ3QgaGF2ZSBlbm91Z2ggbWVtb3J5IGZvciB0aGUgZnVsbCB0cmFjZVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIEp1c3QgcmV0dXJuIHRoZSByZWN1cnNpb24gcG9pbnRcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8vIFNhdmUgY3VycmVudCB2ZWN0b3JzIHRvIGhpc3RvcnkgYmVmb3JlIHRoZSBuZXh0IGl0ZXJhdGlvblxuICAgICAgICAgICAgaWYgKG51bURpZmZlcmVuY2VzIDw9IDE0NDcgLyogTG9jYWxDb25zdGFudHMuTWF4RGlmZmVyZW5jZXNIaXN0b3J5ICovKSB7XG4gICAgICAgICAgICAgICAgLy8gV2UgYXJlIGFsbG9jYXRpbmcgc3BhY2UgZm9yIG9uZSBleHRyYSBpbnQsIHdoaWNoIHdlIGZpbGwgd2l0aFxuICAgICAgICAgICAgICAgIC8vIHRoZSBpbmRleCBvZiB0aGUgZGlhZ29uYWwgYmFzZSBpbmRleFxuICAgICAgICAgICAgICAgIGxldCB0ZW1wID0gbmV3IEludDMyQXJyYXkoZGlhZ29uYWxGb3J3YXJkRW5kIC0gZGlhZ29uYWxGb3J3YXJkU3RhcnQgKyAyKTtcbiAgICAgICAgICAgICAgICB0ZW1wWzBdID0gZGlhZ29uYWxGb3J3YXJkQmFzZSAtIGRpYWdvbmFsRm9yd2FyZFN0YXJ0ICsgMTtcbiAgICAgICAgICAgICAgICBNeUFycmF5LkNvcHkyKGZvcndhcmRQb2ludHMsIGRpYWdvbmFsRm9yd2FyZFN0YXJ0LCB0ZW1wLCAxLCBkaWFnb25hbEZvcndhcmRFbmQgLSBkaWFnb25hbEZvcndhcmRTdGFydCArIDEpO1xuICAgICAgICAgICAgICAgIHRoaXMubV9mb3J3YXJkSGlzdG9yeS5wdXNoKHRlbXApO1xuICAgICAgICAgICAgICAgIHRlbXAgPSBuZXcgSW50MzJBcnJheShkaWFnb25hbFJldmVyc2VFbmQgLSBkaWFnb25hbFJldmVyc2VTdGFydCArIDIpO1xuICAgICAgICAgICAgICAgIHRlbXBbMF0gPSBkaWFnb25hbFJldmVyc2VCYXNlIC0gZGlhZ29uYWxSZXZlcnNlU3RhcnQgKyAxO1xuICAgICAgICAgICAgICAgIE15QXJyYXkuQ29weTIocmV2ZXJzZVBvaW50cywgZGlhZ29uYWxSZXZlcnNlU3RhcnQsIHRlbXAsIDEsIGRpYWdvbmFsUmV2ZXJzZUVuZCAtIGRpYWdvbmFsUmV2ZXJzZVN0YXJ0ICsgMSk7XG4gICAgICAgICAgICAgICAgdGhpcy5tX3JldmVyc2VIaXN0b3J5LnB1c2godGVtcCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgLy8gSWYgd2UgZ290IGhlcmUsIHRoZW4gd2UgaGF2ZSB0aGUgZnVsbCB0cmFjZSBpbiBoaXN0b3J5LiBXZSBqdXN0IGhhdmUgdG8gY29udmVydCBpdCB0byBhIGNoYW5nZSBsaXN0XG4gICAgICAgIC8vIE5PVEU6IFRoaXMgcGFydCBpcyBhIGJpdCBtZXNzeVxuICAgICAgICByZXR1cm4gdGhpcy5XQUxLVFJBQ0UoZGlhZ29uYWxGb3J3YXJkQmFzZSwgZGlhZ29uYWxGb3J3YXJkU3RhcnQsIGRpYWdvbmFsRm9yd2FyZEVuZCwgZGlhZ29uYWxGb3J3YXJkT2Zmc2V0LCBkaWFnb25hbFJldmVyc2VCYXNlLCBkaWFnb25hbFJldmVyc2VTdGFydCwgZGlhZ29uYWxSZXZlcnNlRW5kLCBkaWFnb25hbFJldmVyc2VPZmZzZXQsIGZvcndhcmRQb2ludHMsIHJldmVyc2VQb2ludHMsIG9yaWdpbmFsSW5kZXgsIG9yaWdpbmFsRW5kLCBtaWRPcmlnaW5hbEFyciwgbW9kaWZpZWRJbmRleCwgbW9kaWZpZWRFbmQsIG1pZE1vZGlmaWVkQXJyLCBkZWx0YUlzRXZlbiwgcXVpdEVhcmx5QXJyKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogU2hpZnRzIHRoZSBnaXZlbiBjaGFuZ2VzIHRvIHByb3ZpZGUgYSBtb3JlIGludHVpdGl2ZSBkaWZmLlxuICAgICAqIFdoaWxlIHRoZSBmaXJzdCBlbGVtZW50IGluIGEgZGlmZiBtYXRjaGVzIHRoZSBmaXJzdCBlbGVtZW50IGFmdGVyIHRoZSBkaWZmLFxuICAgICAqIHdlIHNoaWZ0IHRoZSBkaWZmIGRvd24uXG4gICAgICpcbiAgICAgKiBAcGFyYW0gY2hhbmdlcyBUaGUgbGlzdCBvZiBjaGFuZ2VzIHRvIHNoaWZ0XG4gICAgICogQHJldHVybnMgVGhlIHNoaWZ0ZWQgY2hhbmdlc1xuICAgICAqL1xuICAgIFByZXR0aWZ5Q2hhbmdlcyhjaGFuZ2VzKSB7XG4gICAgICAgIC8vIFNoaWZ0IGFsbCB0aGUgY2hhbmdlcyBkb3duIGZpcnN0XG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgY2hhbmdlcy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgY29uc3QgY2hhbmdlID0gY2hhbmdlc1tpXTtcbiAgICAgICAgICAgIGNvbnN0IG9yaWdpbmFsU3RvcCA9IChpIDwgY2hhbmdlcy5sZW5ndGggLSAxKSA/IGNoYW5nZXNbaSArIDFdLm9yaWdpbmFsU3RhcnQgOiB0aGlzLl9vcmlnaW5hbEVsZW1lbnRzT3JIYXNoLmxlbmd0aDtcbiAgICAgICAgICAgIGNvbnN0IG1vZGlmaWVkU3RvcCA9IChpIDwgY2hhbmdlcy5sZW5ndGggLSAxKSA/IGNoYW5nZXNbaSArIDFdLm1vZGlmaWVkU3RhcnQgOiB0aGlzLl9tb2RpZmllZEVsZW1lbnRzT3JIYXNoLmxlbmd0aDtcbiAgICAgICAgICAgIGNvbnN0IGNoZWNrT3JpZ2luYWwgPSBjaGFuZ2Uub3JpZ2luYWxMZW5ndGggPiAwO1xuICAgICAgICAgICAgY29uc3QgY2hlY2tNb2RpZmllZCA9IGNoYW5nZS5tb2RpZmllZExlbmd0aCA+IDA7XG4gICAgICAgICAgICB3aGlsZSAoY2hhbmdlLm9yaWdpbmFsU3RhcnQgKyBjaGFuZ2Uub3JpZ2luYWxMZW5ndGggPCBvcmlnaW5hbFN0b3BcbiAgICAgICAgICAgICAgICAmJiBjaGFuZ2UubW9kaWZpZWRTdGFydCArIGNoYW5nZS5tb2RpZmllZExlbmd0aCA8IG1vZGlmaWVkU3RvcFxuICAgICAgICAgICAgICAgICYmICghY2hlY2tPcmlnaW5hbCB8fCB0aGlzLk9yaWdpbmFsRWxlbWVudHNBcmVFcXVhbChjaGFuZ2Uub3JpZ2luYWxTdGFydCwgY2hhbmdlLm9yaWdpbmFsU3RhcnQgKyBjaGFuZ2Uub3JpZ2luYWxMZW5ndGgpKVxuICAgICAgICAgICAgICAgICYmICghY2hlY2tNb2RpZmllZCB8fCB0aGlzLk1vZGlmaWVkRWxlbWVudHNBcmVFcXVhbChjaGFuZ2UubW9kaWZpZWRTdGFydCwgY2hhbmdlLm1vZGlmaWVkU3RhcnQgKyBjaGFuZ2UubW9kaWZpZWRMZW5ndGgpKSkge1xuICAgICAgICAgICAgICAgIGNvbnN0IHN0YXJ0U3RyaWN0RXF1YWwgPSB0aGlzLkVsZW1lbnRzQXJlU3RyaWN0RXF1YWwoY2hhbmdlLm9yaWdpbmFsU3RhcnQsIGNoYW5nZS5tb2RpZmllZFN0YXJ0KTtcbiAgICAgICAgICAgICAgICBjb25zdCBlbmRTdHJpY3RFcXVhbCA9IHRoaXMuRWxlbWVudHNBcmVTdHJpY3RFcXVhbChjaGFuZ2Uub3JpZ2luYWxTdGFydCArIGNoYW5nZS5vcmlnaW5hbExlbmd0aCwgY2hhbmdlLm1vZGlmaWVkU3RhcnQgKyBjaGFuZ2UubW9kaWZpZWRMZW5ndGgpO1xuICAgICAgICAgICAgICAgIGlmIChlbmRTdHJpY3RFcXVhbCAmJiAhc3RhcnRTdHJpY3RFcXVhbCkge1xuICAgICAgICAgICAgICAgICAgICAvLyBtb3ZpbmcgdGhlIGNoYW5nZSBkb3duIHdvdWxkIGNyZWF0ZSBhbiBlcXVhbCBjaGFuZ2UsIGJ1dCB0aGUgZWxlbWVudHMgYXJlIG5vdCBzdHJpY3QgZXF1YWxcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGNoYW5nZS5vcmlnaW5hbFN0YXJ0Kys7XG4gICAgICAgICAgICAgICAgY2hhbmdlLm1vZGlmaWVkU3RhcnQrKztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNvbnN0IG1lcmdlZENoYW5nZUFyciA9IFtudWxsXTtcbiAgICAgICAgICAgIGlmIChpIDwgY2hhbmdlcy5sZW5ndGggLSAxICYmIHRoaXMuQ2hhbmdlc092ZXJsYXAoY2hhbmdlc1tpXSwgY2hhbmdlc1tpICsgMV0sIG1lcmdlZENoYW5nZUFycikpIHtcbiAgICAgICAgICAgICAgICBjaGFuZ2VzW2ldID0gbWVyZ2VkQ2hhbmdlQXJyWzBdO1xuICAgICAgICAgICAgICAgIGNoYW5nZXMuc3BsaWNlKGkgKyAxLCAxKTtcbiAgICAgICAgICAgICAgICBpLS07XG4gICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgLy8gU2hpZnQgY2hhbmdlcyBiYWNrIHVwIHVudGlsIHdlIGhpdCBlbXB0eSBvciB3aGl0ZXNwYWNlLW9ubHkgbGluZXNcbiAgICAgICAgZm9yIChsZXQgaSA9IGNoYW5nZXMubGVuZ3RoIC0gMTsgaSA+PSAwOyBpLS0pIHtcbiAgICAgICAgICAgIGNvbnN0IGNoYW5nZSA9IGNoYW5nZXNbaV07XG4gICAgICAgICAgICBsZXQgb3JpZ2luYWxTdG9wID0gMDtcbiAgICAgICAgICAgIGxldCBtb2RpZmllZFN0b3AgPSAwO1xuICAgICAgICAgICAgaWYgKGkgPiAwKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgcHJldkNoYW5nZSA9IGNoYW5nZXNbaSAtIDFdO1xuICAgICAgICAgICAgICAgIG9yaWdpbmFsU3RvcCA9IHByZXZDaGFuZ2Uub3JpZ2luYWxTdGFydCArIHByZXZDaGFuZ2Uub3JpZ2luYWxMZW5ndGg7XG4gICAgICAgICAgICAgICAgbW9kaWZpZWRTdG9wID0gcHJldkNoYW5nZS5tb2RpZmllZFN0YXJ0ICsgcHJldkNoYW5nZS5tb2RpZmllZExlbmd0aDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNvbnN0IGNoZWNrT3JpZ2luYWwgPSBjaGFuZ2Uub3JpZ2luYWxMZW5ndGggPiAwO1xuICAgICAgICAgICAgY29uc3QgY2hlY2tNb2RpZmllZCA9IGNoYW5nZS5tb2RpZmllZExlbmd0aCA+IDA7XG4gICAgICAgICAgICBsZXQgYmVzdERlbHRhID0gMDtcbiAgICAgICAgICAgIGxldCBiZXN0U2NvcmUgPSB0aGlzLl9ib3VuZGFyeVNjb3JlKGNoYW5nZS5vcmlnaW5hbFN0YXJ0LCBjaGFuZ2Uub3JpZ2luYWxMZW5ndGgsIGNoYW5nZS5tb2RpZmllZFN0YXJ0LCBjaGFuZ2UubW9kaWZpZWRMZW5ndGgpO1xuICAgICAgICAgICAgZm9yIChsZXQgZGVsdGEgPSAxOzsgZGVsdGErKykge1xuICAgICAgICAgICAgICAgIGNvbnN0IG9yaWdpbmFsU3RhcnQgPSBjaGFuZ2Uub3JpZ2luYWxTdGFydCAtIGRlbHRhO1xuICAgICAgICAgICAgICAgIGNvbnN0IG1vZGlmaWVkU3RhcnQgPSBjaGFuZ2UubW9kaWZpZWRTdGFydCAtIGRlbHRhO1xuICAgICAgICAgICAgICAgIGlmIChvcmlnaW5hbFN0YXJ0IDwgb3JpZ2luYWxTdG9wIHx8IG1vZGlmaWVkU3RhcnQgPCBtb2RpZmllZFN0b3ApIHtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmIChjaGVja09yaWdpbmFsICYmICF0aGlzLk9yaWdpbmFsRWxlbWVudHNBcmVFcXVhbChvcmlnaW5hbFN0YXJ0LCBvcmlnaW5hbFN0YXJ0ICsgY2hhbmdlLm9yaWdpbmFsTGVuZ3RoKSkge1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKGNoZWNrTW9kaWZpZWQgJiYgIXRoaXMuTW9kaWZpZWRFbGVtZW50c0FyZUVxdWFsKG1vZGlmaWVkU3RhcnQsIG1vZGlmaWVkU3RhcnQgKyBjaGFuZ2UubW9kaWZpZWRMZW5ndGgpKSB7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBjb25zdCB0b3VjaGluZ1ByZXZpb3VzQ2hhbmdlID0gKG9yaWdpbmFsU3RhcnQgPT09IG9yaWdpbmFsU3RvcCAmJiBtb2RpZmllZFN0YXJ0ID09PSBtb2RpZmllZFN0b3ApO1xuICAgICAgICAgICAgICAgIGNvbnN0IHNjb3JlID0gKCh0b3VjaGluZ1ByZXZpb3VzQ2hhbmdlID8gNSA6IDApXG4gICAgICAgICAgICAgICAgICAgICsgdGhpcy5fYm91bmRhcnlTY29yZShvcmlnaW5hbFN0YXJ0LCBjaGFuZ2Uub3JpZ2luYWxMZW5ndGgsIG1vZGlmaWVkU3RhcnQsIGNoYW5nZS5tb2RpZmllZExlbmd0aCkpO1xuICAgICAgICAgICAgICAgIGlmIChzY29yZSA+IGJlc3RTY29yZSkge1xuICAgICAgICAgICAgICAgICAgICBiZXN0U2NvcmUgPSBzY29yZTtcbiAgICAgICAgICAgICAgICAgICAgYmVzdERlbHRhID0gZGVsdGE7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY2hhbmdlLm9yaWdpbmFsU3RhcnQgLT0gYmVzdERlbHRhO1xuICAgICAgICAgICAgY2hhbmdlLm1vZGlmaWVkU3RhcnQgLT0gYmVzdERlbHRhO1xuICAgICAgICAgICAgY29uc3QgbWVyZ2VkQ2hhbmdlQXJyID0gW251bGxdO1xuICAgICAgICAgICAgaWYgKGkgPiAwICYmIHRoaXMuQ2hhbmdlc092ZXJsYXAoY2hhbmdlc1tpIC0gMV0sIGNoYW5nZXNbaV0sIG1lcmdlZENoYW5nZUFycikpIHtcbiAgICAgICAgICAgICAgICBjaGFuZ2VzW2kgLSAxXSA9IG1lcmdlZENoYW5nZUFyclswXTtcbiAgICAgICAgICAgICAgICBjaGFuZ2VzLnNwbGljZShpLCAxKTtcbiAgICAgICAgICAgICAgICBpKys7XG4gICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgLy8gVGhlcmUgY291bGQgYmUgbXVsdGlwbGUgbG9uZ2VzdCBjb21tb24gc3Vic3RyaW5ncy5cbiAgICAgICAgLy8gR2l2ZSBwcmVmZXJlbmNlIHRvIHRoZSBvbmVzIGNvbnRhaW5pbmcgbG9uZ2VyIGxpbmVzXG4gICAgICAgIGlmICh0aGlzLl9oYXNTdHJpbmdzKSB7XG4gICAgICAgICAgICBmb3IgKGxldCBpID0gMSwgbGVuID0gY2hhbmdlcy5sZW5ndGg7IGkgPCBsZW47IGkrKykge1xuICAgICAgICAgICAgICAgIGNvbnN0IGFDaGFuZ2UgPSBjaGFuZ2VzW2kgLSAxXTtcbiAgICAgICAgICAgICAgICBjb25zdCBiQ2hhbmdlID0gY2hhbmdlc1tpXTtcbiAgICAgICAgICAgICAgICBjb25zdCBtYXRjaGVkTGVuZ3RoID0gYkNoYW5nZS5vcmlnaW5hbFN0YXJ0IC0gYUNoYW5nZS5vcmlnaW5hbFN0YXJ0IC0gYUNoYW5nZS5vcmlnaW5hbExlbmd0aDtcbiAgICAgICAgICAgICAgICBjb25zdCBhT3JpZ2luYWxTdGFydCA9IGFDaGFuZ2Uub3JpZ2luYWxTdGFydDtcbiAgICAgICAgICAgICAgICBjb25zdCBiT3JpZ2luYWxFbmQgPSBiQ2hhbmdlLm9yaWdpbmFsU3RhcnQgKyBiQ2hhbmdlLm9yaWdpbmFsTGVuZ3RoO1xuICAgICAgICAgICAgICAgIGNvbnN0IGFiT3JpZ2luYWxMZW5ndGggPSBiT3JpZ2luYWxFbmQgLSBhT3JpZ2luYWxTdGFydDtcbiAgICAgICAgICAgICAgICBjb25zdCBhTW9kaWZpZWRTdGFydCA9IGFDaGFuZ2UubW9kaWZpZWRTdGFydDtcbiAgICAgICAgICAgICAgICBjb25zdCBiTW9kaWZpZWRFbmQgPSBiQ2hhbmdlLm1vZGlmaWVkU3RhcnQgKyBiQ2hhbmdlLm1vZGlmaWVkTGVuZ3RoO1xuICAgICAgICAgICAgICAgIGNvbnN0IGFiTW9kaWZpZWRMZW5ndGggPSBiTW9kaWZpZWRFbmQgLSBhTW9kaWZpZWRTdGFydDtcbiAgICAgICAgICAgICAgICAvLyBBdm9pZCB3YXN0aW5nIGEgbG90IG9mIHRpbWUgd2l0aCB0aGVzZSBzZWFyY2hlc1xuICAgICAgICAgICAgICAgIGlmIChtYXRjaGVkTGVuZ3RoIDwgNSAmJiBhYk9yaWdpbmFsTGVuZ3RoIDwgMjAgJiYgYWJNb2RpZmllZExlbmd0aCA8IDIwKSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHQgPSB0aGlzLl9maW5kQmV0dGVyQ29udGlndW91c1NlcXVlbmNlKGFPcmlnaW5hbFN0YXJ0LCBhYk9yaWdpbmFsTGVuZ3RoLCBhTW9kaWZpZWRTdGFydCwgYWJNb2RpZmllZExlbmd0aCwgbWF0Y2hlZExlbmd0aCk7XG4gICAgICAgICAgICAgICAgICAgIGlmICh0KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBbb3JpZ2luYWxNYXRjaFN0YXJ0LCBtb2RpZmllZE1hdGNoU3RhcnRdID0gdDtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChvcmlnaW5hbE1hdGNoU3RhcnQgIT09IGFDaGFuZ2Uub3JpZ2luYWxTdGFydCArIGFDaGFuZ2Uub3JpZ2luYWxMZW5ndGggfHwgbW9kaWZpZWRNYXRjaFN0YXJ0ICE9PSBhQ2hhbmdlLm1vZGlmaWVkU3RhcnQgKyBhQ2hhbmdlLm1vZGlmaWVkTGVuZ3RoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gc3dpdGNoIHRvIGFub3RoZXIgc2VxdWVuY2UgdGhhdCBoYXMgYSBiZXR0ZXIgc2NvcmVcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhQ2hhbmdlLm9yaWdpbmFsTGVuZ3RoID0gb3JpZ2luYWxNYXRjaFN0YXJ0IC0gYUNoYW5nZS5vcmlnaW5hbFN0YXJ0O1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFDaGFuZ2UubW9kaWZpZWRMZW5ndGggPSBtb2RpZmllZE1hdGNoU3RhcnQgLSBhQ2hhbmdlLm1vZGlmaWVkU3RhcnQ7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYkNoYW5nZS5vcmlnaW5hbFN0YXJ0ID0gb3JpZ2luYWxNYXRjaFN0YXJ0ICsgbWF0Y2hlZExlbmd0aDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBiQ2hhbmdlLm1vZGlmaWVkU3RhcnQgPSBtb2RpZmllZE1hdGNoU3RhcnQgKyBtYXRjaGVkTGVuZ3RoO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJDaGFuZ2Uub3JpZ2luYWxMZW5ndGggPSBiT3JpZ2luYWxFbmQgLSBiQ2hhbmdlLm9yaWdpbmFsU3RhcnQ7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYkNoYW5nZS5tb2RpZmllZExlbmd0aCA9IGJNb2RpZmllZEVuZCAtIGJDaGFuZ2UubW9kaWZpZWRTdGFydDtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gY2hhbmdlcztcbiAgICB9XG4gICAgX2ZpbmRCZXR0ZXJDb250aWd1b3VzU2VxdWVuY2Uob3JpZ2luYWxTdGFydCwgb3JpZ2luYWxMZW5ndGgsIG1vZGlmaWVkU3RhcnQsIG1vZGlmaWVkTGVuZ3RoLCBkZXNpcmVkTGVuZ3RoKSB7XG4gICAgICAgIGlmIChvcmlnaW5hbExlbmd0aCA8IGRlc2lyZWRMZW5ndGggfHwgbW9kaWZpZWRMZW5ndGggPCBkZXNpcmVkTGVuZ3RoKSB7XG4gICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBvcmlnaW5hbE1heCA9IG9yaWdpbmFsU3RhcnQgKyBvcmlnaW5hbExlbmd0aCAtIGRlc2lyZWRMZW5ndGggKyAxO1xuICAgICAgICBjb25zdCBtb2RpZmllZE1heCA9IG1vZGlmaWVkU3RhcnQgKyBtb2RpZmllZExlbmd0aCAtIGRlc2lyZWRMZW5ndGggKyAxO1xuICAgICAgICBsZXQgYmVzdFNjb3JlID0gMDtcbiAgICAgICAgbGV0IGJlc3RPcmlnaW5hbFN0YXJ0ID0gMDtcbiAgICAgICAgbGV0IGJlc3RNb2RpZmllZFN0YXJ0ID0gMDtcbiAgICAgICAgZm9yIChsZXQgaSA9IG9yaWdpbmFsU3RhcnQ7IGkgPCBvcmlnaW5hbE1heDsgaSsrKSB7XG4gICAgICAgICAgICBmb3IgKGxldCBqID0gbW9kaWZpZWRTdGFydDsgaiA8IG1vZGlmaWVkTWF4OyBqKyspIHtcbiAgICAgICAgICAgICAgICBjb25zdCBzY29yZSA9IHRoaXMuX2NvbnRpZ3VvdXNTZXF1ZW5jZVNjb3JlKGksIGosIGRlc2lyZWRMZW5ndGgpO1xuICAgICAgICAgICAgICAgIGlmIChzY29yZSA+IDAgJiYgc2NvcmUgPiBiZXN0U2NvcmUpIHtcbiAgICAgICAgICAgICAgICAgICAgYmVzdFNjb3JlID0gc2NvcmU7XG4gICAgICAgICAgICAgICAgICAgIGJlc3RPcmlnaW5hbFN0YXJ0ID0gaTtcbiAgICAgICAgICAgICAgICAgICAgYmVzdE1vZGlmaWVkU3RhcnQgPSBqO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBpZiAoYmVzdFNjb3JlID4gMCkge1xuICAgICAgICAgICAgcmV0dXJuIFtiZXN0T3JpZ2luYWxTdGFydCwgYmVzdE1vZGlmaWVkU3RhcnRdO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgIH1cbiAgICBfY29udGlndW91c1NlcXVlbmNlU2NvcmUob3JpZ2luYWxTdGFydCwgbW9kaWZpZWRTdGFydCwgbGVuZ3RoKSB7XG4gICAgICAgIGxldCBzY29yZSA9IDA7XG4gICAgICAgIGZvciAobGV0IGwgPSAwOyBsIDwgbGVuZ3RoOyBsKyspIHtcbiAgICAgICAgICAgIGlmICghdGhpcy5FbGVtZW50c0FyZUVxdWFsKG9yaWdpbmFsU3RhcnQgKyBsLCBtb2RpZmllZFN0YXJ0ICsgbCkpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gMDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHNjb3JlICs9IHRoaXMuX29yaWdpbmFsU3RyaW5nRWxlbWVudHNbb3JpZ2luYWxTdGFydCArIGxdLmxlbmd0aDtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gc2NvcmU7XG4gICAgfVxuICAgIF9PcmlnaW5hbElzQm91bmRhcnkoaW5kZXgpIHtcbiAgICAgICAgaWYgKGluZGV4IDw9IDAgfHwgaW5kZXggPj0gdGhpcy5fb3JpZ2luYWxFbGVtZW50c09ySGFzaC5sZW5ndGggLSAxKSB7XG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gKHRoaXMuX2hhc1N0cmluZ3MgJiYgL15cXHMqJC8udGVzdCh0aGlzLl9vcmlnaW5hbFN0cmluZ0VsZW1lbnRzW2luZGV4XSkpO1xuICAgIH1cbiAgICBfT3JpZ2luYWxSZWdpb25Jc0JvdW5kYXJ5KG9yaWdpbmFsU3RhcnQsIG9yaWdpbmFsTGVuZ3RoKSB7XG4gICAgICAgIGlmICh0aGlzLl9PcmlnaW5hbElzQm91bmRhcnkob3JpZ2luYWxTdGFydCkgfHwgdGhpcy5fT3JpZ2luYWxJc0JvdW5kYXJ5KG9yaWdpbmFsU3RhcnQgLSAxKSkge1xuICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKG9yaWdpbmFsTGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgY29uc3Qgb3JpZ2luYWxFbmQgPSBvcmlnaW5hbFN0YXJ0ICsgb3JpZ2luYWxMZW5ndGg7XG4gICAgICAgICAgICBpZiAodGhpcy5fT3JpZ2luYWxJc0JvdW5kYXJ5KG9yaWdpbmFsRW5kIC0gMSkgfHwgdGhpcy5fT3JpZ2luYWxJc0JvdW5kYXJ5KG9yaWdpbmFsRW5kKSkge1xuICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgX01vZGlmaWVkSXNCb3VuZGFyeShpbmRleCkge1xuICAgICAgICBpZiAoaW5kZXggPD0gMCB8fCBpbmRleCA+PSB0aGlzLl9tb2RpZmllZEVsZW1lbnRzT3JIYXNoLmxlbmd0aCAtIDEpIHtcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiAodGhpcy5faGFzU3RyaW5ncyAmJiAvXlxccyokLy50ZXN0KHRoaXMuX21vZGlmaWVkU3RyaW5nRWxlbWVudHNbaW5kZXhdKSk7XG4gICAgfVxuICAgIF9Nb2RpZmllZFJlZ2lvbklzQm91bmRhcnkobW9kaWZpZWRTdGFydCwgbW9kaWZpZWRMZW5ndGgpIHtcbiAgICAgICAgaWYgKHRoaXMuX01vZGlmaWVkSXNCb3VuZGFyeShtb2RpZmllZFN0YXJ0KSB8fCB0aGlzLl9Nb2RpZmllZElzQm91bmRhcnkobW9kaWZpZWRTdGFydCAtIDEpKSB7XG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgICBpZiAobW9kaWZpZWRMZW5ndGggPiAwKSB7XG4gICAgICAgICAgICBjb25zdCBtb2RpZmllZEVuZCA9IG1vZGlmaWVkU3RhcnQgKyBtb2RpZmllZExlbmd0aDtcbiAgICAgICAgICAgIGlmICh0aGlzLl9Nb2RpZmllZElzQm91bmRhcnkobW9kaWZpZWRFbmQgLSAxKSB8fCB0aGlzLl9Nb2RpZmllZElzQm91bmRhcnkobW9kaWZpZWRFbmQpKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICBfYm91bmRhcnlTY29yZShvcmlnaW5hbFN0YXJ0LCBvcmlnaW5hbExlbmd0aCwgbW9kaWZpZWRTdGFydCwgbW9kaWZpZWRMZW5ndGgpIHtcbiAgICAgICAgY29uc3Qgb3JpZ2luYWxTY29yZSA9ICh0aGlzLl9PcmlnaW5hbFJlZ2lvbklzQm91bmRhcnkob3JpZ2luYWxTdGFydCwgb3JpZ2luYWxMZW5ndGgpID8gMSA6IDApO1xuICAgICAgICBjb25zdCBtb2RpZmllZFNjb3JlID0gKHRoaXMuX01vZGlmaWVkUmVnaW9uSXNCb3VuZGFyeShtb2RpZmllZFN0YXJ0LCBtb2RpZmllZExlbmd0aCkgPyAxIDogMCk7XG4gICAgICAgIHJldHVybiAob3JpZ2luYWxTY29yZSArIG1vZGlmaWVkU2NvcmUpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBDb25jYXRlbmF0ZXMgdGhlIHR3byBpbnB1dCBEaWZmQ2hhbmdlIGxpc3RzIGFuZCByZXR1cm5zIHRoZSByZXN1bHRpbmdcbiAgICAgKiBsaXN0LlxuICAgICAqIEBwYXJhbSBUaGUgbGVmdCBjaGFuZ2VzXG4gICAgICogQHBhcmFtIFRoZSByaWdodCBjaGFuZ2VzXG4gICAgICogQHJldHVybnMgVGhlIGNvbmNhdGVuYXRlZCBsaXN0XG4gICAgICovXG4gICAgQ29uY2F0ZW5hdGVDaGFuZ2VzKGxlZnQsIHJpZ2h0KSB7XG4gICAgICAgIGNvbnN0IG1lcmdlZENoYW5nZUFyciA9IFtdO1xuICAgICAgICBpZiAobGVmdC5sZW5ndGggPT09IDAgfHwgcmlnaHQubGVuZ3RoID09PSAwKSB7XG4gICAgICAgICAgICByZXR1cm4gKHJpZ2h0Lmxlbmd0aCA+IDApID8gcmlnaHQgOiBsZWZ0O1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKHRoaXMuQ2hhbmdlc092ZXJsYXAobGVmdFtsZWZ0Lmxlbmd0aCAtIDFdLCByaWdodFswXSwgbWVyZ2VkQ2hhbmdlQXJyKSkge1xuICAgICAgICAgICAgLy8gU2luY2Ugd2UgYnJlYWsgdGhlIHByb2JsZW0gZG93biByZWN1cnNpdmVseSwgaXQgaXMgcG9zc2libGUgdGhhdCB3ZVxuICAgICAgICAgICAgLy8gbWlnaHQgcmVjdXJzZSBpbiB0aGUgbWlkZGxlIG9mIGEgY2hhbmdlIHRoZXJlYnkgc3BsaXR0aW5nIGl0IGludG9cbiAgICAgICAgICAgIC8vIHR3byBjaGFuZ2VzLiBIZXJlIGluIHRoZSBjb21iaW5pbmcgc3RhZ2UsIHdlIGRldGVjdCBhbmQgZnVzZSB0aG9zZVxuICAgICAgICAgICAgLy8gY2hhbmdlcyBiYWNrIHRvZ2V0aGVyXG4gICAgICAgICAgICBjb25zdCByZXN1bHQgPSBuZXcgQXJyYXkobGVmdC5sZW5ndGggKyByaWdodC5sZW5ndGggLSAxKTtcbiAgICAgICAgICAgIE15QXJyYXkuQ29weShsZWZ0LCAwLCByZXN1bHQsIDAsIGxlZnQubGVuZ3RoIC0gMSk7XG4gICAgICAgICAgICByZXN1bHRbbGVmdC5sZW5ndGggLSAxXSA9IG1lcmdlZENoYW5nZUFyclswXTtcbiAgICAgICAgICAgIE15QXJyYXkuQ29weShyaWdodCwgMSwgcmVzdWx0LCBsZWZ0Lmxlbmd0aCwgcmlnaHQubGVuZ3RoIC0gMSk7XG4gICAgICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgY29uc3QgcmVzdWx0ID0gbmV3IEFycmF5KGxlZnQubGVuZ3RoICsgcmlnaHQubGVuZ3RoKTtcbiAgICAgICAgICAgIE15QXJyYXkuQ29weShsZWZ0LCAwLCByZXN1bHQsIDAsIGxlZnQubGVuZ3RoKTtcbiAgICAgICAgICAgIE15QXJyYXkuQ29weShyaWdodCwgMCwgcmVzdWx0LCBsZWZ0Lmxlbmd0aCwgcmlnaHQubGVuZ3RoKTtcbiAgICAgICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgICAgIH1cbiAgICB9XG4gICAgLyoqXG4gICAgICogUmV0dXJucyB0cnVlIGlmIHRoZSB0d28gY2hhbmdlcyBvdmVybGFwIGFuZCBjYW4gYmUgbWVyZ2VkIGludG8gYSBzaW5nbGVcbiAgICAgKiBjaGFuZ2VcbiAgICAgKiBAcGFyYW0gbGVmdCBUaGUgbGVmdCBjaGFuZ2VcbiAgICAgKiBAcGFyYW0gcmlnaHQgVGhlIHJpZ2h0IGNoYW5nZVxuICAgICAqIEBwYXJhbSBtZXJnZWRDaGFuZ2UgVGhlIG1lcmdlZCBjaGFuZ2UgaWYgdGhlIHR3byBvdmVybGFwLCBudWxsIG90aGVyd2lzZVxuICAgICAqIEByZXR1cm5zIFRydWUgaWYgdGhlIHR3byBjaGFuZ2VzIG92ZXJsYXBcbiAgICAgKi9cbiAgICBDaGFuZ2VzT3ZlcmxhcChsZWZ0LCByaWdodCwgbWVyZ2VkQ2hhbmdlQXJyKSB7XG4gICAgICAgIERlYnVnLkFzc2VydChsZWZ0Lm9yaWdpbmFsU3RhcnQgPD0gcmlnaHQub3JpZ2luYWxTdGFydCwgJ0xlZnQgY2hhbmdlIGlzIG5vdCBsZXNzIHRoYW4gb3IgZXF1YWwgdG8gcmlnaHQgY2hhbmdlJyk7XG4gICAgICAgIERlYnVnLkFzc2VydChsZWZ0Lm1vZGlmaWVkU3RhcnQgPD0gcmlnaHQubW9kaWZpZWRTdGFydCwgJ0xlZnQgY2hhbmdlIGlzIG5vdCBsZXNzIHRoYW4gb3IgZXF1YWwgdG8gcmlnaHQgY2hhbmdlJyk7XG4gICAgICAgIGlmIChsZWZ0Lm9yaWdpbmFsU3RhcnQgKyBsZWZ0Lm9yaWdpbmFsTGVuZ3RoID49IHJpZ2h0Lm9yaWdpbmFsU3RhcnQgfHwgbGVmdC5tb2RpZmllZFN0YXJ0ICsgbGVmdC5tb2RpZmllZExlbmd0aCA+PSByaWdodC5tb2RpZmllZFN0YXJ0KSB7XG4gICAgICAgICAgICBjb25zdCBvcmlnaW5hbFN0YXJ0ID0gbGVmdC5vcmlnaW5hbFN0YXJ0O1xuICAgICAgICAgICAgbGV0IG9yaWdpbmFsTGVuZ3RoID0gbGVmdC5vcmlnaW5hbExlbmd0aDtcbiAgICAgICAgICAgIGNvbnN0IG1vZGlmaWVkU3RhcnQgPSBsZWZ0Lm1vZGlmaWVkU3RhcnQ7XG4gICAgICAgICAgICBsZXQgbW9kaWZpZWRMZW5ndGggPSBsZWZ0Lm1vZGlmaWVkTGVuZ3RoO1xuICAgICAgICAgICAgaWYgKGxlZnQub3JpZ2luYWxTdGFydCArIGxlZnQub3JpZ2luYWxMZW5ndGggPj0gcmlnaHQub3JpZ2luYWxTdGFydCkge1xuICAgICAgICAgICAgICAgIG9yaWdpbmFsTGVuZ3RoID0gcmlnaHQub3JpZ2luYWxTdGFydCArIHJpZ2h0Lm9yaWdpbmFsTGVuZ3RoIC0gbGVmdC5vcmlnaW5hbFN0YXJ0O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGxlZnQubW9kaWZpZWRTdGFydCArIGxlZnQubW9kaWZpZWRMZW5ndGggPj0gcmlnaHQubW9kaWZpZWRTdGFydCkge1xuICAgICAgICAgICAgICAgIG1vZGlmaWVkTGVuZ3RoID0gcmlnaHQubW9kaWZpZWRTdGFydCArIHJpZ2h0Lm1vZGlmaWVkTGVuZ3RoIC0gbGVmdC5tb2RpZmllZFN0YXJ0O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgbWVyZ2VkQ2hhbmdlQXJyWzBdID0gbmV3IERpZmZDaGFuZ2Uob3JpZ2luYWxTdGFydCwgb3JpZ2luYWxMZW5ndGgsIG1vZGlmaWVkU3RhcnQsIG1vZGlmaWVkTGVuZ3RoKTtcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgbWVyZ2VkQ2hhbmdlQXJyWzBdID0gbnVsbDtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgIH1cbiAgICAvKipcbiAgICAgKiBIZWxwZXIgbWV0aG9kIHVzZWQgdG8gY2xpcCBhIGRpYWdvbmFsIGluZGV4IHRvIHRoZSByYW5nZSBvZiB2YWxpZFxuICAgICAqIGRpYWdvbmFscy4gVGhpcyBhbHNvIGRlY2lkZXMgd2hldGhlciBvciBub3QgdGhlIGRpYWdvbmFsIGluZGV4LFxuICAgICAqIGlmIGl0IGV4Y2VlZHMgdGhlIGJvdW5kYXJ5LCBzaG91bGQgYmUgY2xpcHBlZCB0byB0aGUgYm91bmRhcnkgb3IgY2xpcHBlZFxuICAgICAqIG9uZSBpbnNpZGUgdGhlIGJvdW5kYXJ5IGRlcGVuZGluZyBvbiB0aGUgRXZlbi9PZGQgc3RhdHVzIG9mIHRoZSBib3VuZGFyeVxuICAgICAqIGFuZCBudW1EaWZmZXJlbmNlcy5cbiAgICAgKiBAcGFyYW0gZGlhZ29uYWwgVGhlIGluZGV4IG9mIHRoZSBkaWFnb25hbCB0byBjbGlwLlxuICAgICAqIEBwYXJhbSBudW1EaWZmZXJlbmNlcyBUaGUgY3VycmVudCBudW1iZXIgb2YgZGlmZmVyZW5jZXMgYmVpbmcgaXRlcmF0ZWQgdXBvbi5cbiAgICAgKiBAcGFyYW0gZGlhZ29uYWxCYXNlSW5kZXggVGhlIGJhc2UgcmVmZXJlbmNlIGRpYWdvbmFsLlxuICAgICAqIEBwYXJhbSBudW1EaWFnb25hbHMgVGhlIHRvdGFsIG51bWJlciBvZiBkaWFnb25hbHMuXG4gICAgICogQHJldHVybnMgVGhlIGNsaXBwZWQgZGlhZ29uYWwgaW5kZXguXG4gICAgICovXG4gICAgQ2xpcERpYWdvbmFsQm91bmQoZGlhZ29uYWwsIG51bURpZmZlcmVuY2VzLCBkaWFnb25hbEJhc2VJbmRleCwgbnVtRGlhZ29uYWxzKSB7XG4gICAgICAgIGlmIChkaWFnb25hbCA+PSAwICYmIGRpYWdvbmFsIDwgbnVtRGlhZ29uYWxzKSB7XG4gICAgICAgICAgICAvLyBOb3RoaW5nIHRvIGNsaXAsIGl0cyBpbiByYW5nZVxuICAgICAgICAgICAgcmV0dXJuIGRpYWdvbmFsO1xuICAgICAgICB9XG4gICAgICAgIC8vIGRpYWdvbmFsc0JlbG93OiBUaGUgbnVtYmVyIG9mIGRpYWdvbmFscyBiZWxvdyB0aGUgcmVmZXJlbmNlIGRpYWdvbmFsXG4gICAgICAgIC8vIGRpYWdvbmFsc0Fib3ZlOiBUaGUgbnVtYmVyIG9mIGRpYWdvbmFscyBhYm92ZSB0aGUgcmVmZXJlbmNlIGRpYWdvbmFsXG4gICAgICAgIGNvbnN0IGRpYWdvbmFsc0JlbG93ID0gZGlhZ29uYWxCYXNlSW5kZXg7XG4gICAgICAgIGNvbnN0IGRpYWdvbmFsc0Fib3ZlID0gbnVtRGlhZ29uYWxzIC0gZGlhZ29uYWxCYXNlSW5kZXggLSAxO1xuICAgICAgICBjb25zdCBkaWZmRXZlbiA9IChudW1EaWZmZXJlbmNlcyAlIDIgPT09IDApO1xuICAgICAgICBpZiAoZGlhZ29uYWwgPCAwKSB7XG4gICAgICAgICAgICBjb25zdCBsb3dlckJvdW5kRXZlbiA9IChkaWFnb25hbHNCZWxvdyAlIDIgPT09IDApO1xuICAgICAgICAgICAgcmV0dXJuIChkaWZmRXZlbiA9PT0gbG93ZXJCb3VuZEV2ZW4pID8gMCA6IDE7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBjb25zdCB1cHBlckJvdW5kRXZlbiA9IChkaWFnb25hbHNBYm92ZSAlIDIgPT09IDApO1xuICAgICAgICAgICAgcmV0dXJuIChkaWZmRXZlbiA9PT0gdXBwZXJCb3VuZEV2ZW4pID8gbnVtRGlhZ29uYWxzIC0gMSA6IG51bURpYWdvbmFscyAtIDI7XG4gICAgICAgIH1cbiAgICB9XG59XG4iLCAiLyotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAqICBDb3B5cmlnaHQgKGMpIE1pY3Jvc29mdCBDb3Jwb3JhdGlvbi4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqICBMaWNlbnNlZCB1bmRlciB0aGUgTUlUIExpY2Vuc2UuIFNlZSBMaWNlbnNlLnR4dCBpbiB0aGUgcHJvamVjdCByb290IGZvciBsaWNlbnNlIGluZm9ybWF0aW9uLlxuICotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSovXG5pbXBvcnQgeyBpc01hY2ludG9zaCwgaXNXaW5kb3dzIH0gZnJvbSAnLi9wbGF0Zm9ybS5qcyc7XG5sZXQgc2FmZVByb2Nlc3M7XG4vLyBOYXRpdmUgc2FuZGJveCBlbnZpcm9ubWVudFxuY29uc3QgdnNjb2RlR2xvYmFsID0gZ2xvYmFsVGhpcy52c2NvZGU7XG5pZiAodHlwZW9mIHZzY29kZUdsb2JhbCAhPT0gJ3VuZGVmaW5lZCcgJiYgdHlwZW9mIHZzY29kZUdsb2JhbC5wcm9jZXNzICE9PSAndW5kZWZpbmVkJykge1xuICAgIGNvbnN0IHNhbmRib3hQcm9jZXNzID0gdnNjb2RlR2xvYmFsLnByb2Nlc3M7XG4gICAgc2FmZVByb2Nlc3MgPSB7XG4gICAgICAgIGdldCBwbGF0Zm9ybSgpIHsgcmV0dXJuIHNhbmRib3hQcm9jZXNzLnBsYXRmb3JtOyB9LFxuICAgICAgICBnZXQgYXJjaCgpIHsgcmV0dXJuIHNhbmRib3hQcm9jZXNzLmFyY2g7IH0sXG4gICAgICAgIGdldCBlbnYoKSB7IHJldHVybiBzYW5kYm94UHJvY2Vzcy5lbnY7IH0sXG4gICAgICAgIGN3ZCgpIHsgcmV0dXJuIHNhbmRib3hQcm9jZXNzLmN3ZCgpOyB9XG4gICAgfTtcbn1cbi8vIE5hdGl2ZSBub2RlLmpzIGVudmlyb25tZW50XG5lbHNlIGlmICh0eXBlb2YgcHJvY2VzcyAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICBzYWZlUHJvY2VzcyA9IHtcbiAgICAgICAgZ2V0IHBsYXRmb3JtKCkgeyByZXR1cm4gcHJvY2Vzcy5wbGF0Zm9ybTsgfSxcbiAgICAgICAgZ2V0IGFyY2goKSB7IHJldHVybiBwcm9jZXNzLmFyY2g7IH0sXG4gICAgICAgIGdldCBlbnYoKSB7IHJldHVybiBwcm9jZXNzLmVudjsgfSxcbiAgICAgICAgY3dkKCkgeyByZXR1cm4gcHJvY2Vzcy5lbnZbJ1ZTQ09ERV9DV0QnXSB8fCBwcm9jZXNzLmN3ZCgpOyB9XG4gICAgfTtcbn1cbi8vIFdlYiBlbnZpcm9ubWVudFxuZWxzZSB7XG4gICAgc2FmZVByb2Nlc3MgPSB7XG4gICAgICAgIC8vIFN1cHBvcnRlZFxuICAgICAgICBnZXQgcGxhdGZvcm0oKSB7IHJldHVybiBpc1dpbmRvd3MgPyAnd2luMzInIDogaXNNYWNpbnRvc2ggPyAnZGFyd2luJyA6ICdsaW51eCc7IH0sXG4gICAgICAgIGdldCBhcmNoKCkgeyByZXR1cm4gdW5kZWZpbmVkOyAvKiBhcmNoIGlzIHVuZGVmaW5lZCBpbiB3ZWIgKi8gfSxcbiAgICAgICAgLy8gVW5zdXBwb3J0ZWRcbiAgICAgICAgZ2V0IGVudigpIHsgcmV0dXJuIHt9OyB9LFxuICAgICAgICBjd2QoKSB7IHJldHVybiAnLyc7IH1cbiAgICB9O1xufVxuLyoqXG4gKiBQcm92aWRlcyBzYWZlIGFjY2VzcyB0byB0aGUgYGN3ZGAgcHJvcGVydHkgaW4gbm9kZS5qcywgc2FuZGJveGVkIG9yIHdlYlxuICogZW52aXJvbm1lbnRzLlxuICpcbiAqIE5vdGU6IGluIHdlYiwgdGhpcyBwcm9wZXJ0eSBpcyBoYXJkY29kZWQgdG8gYmUgYC9gLlxuICpcbiAqIEBza2lwTWFuZ2xlXG4gKi9cbmV4cG9ydCBjb25zdCBjd2QgPSBzYWZlUHJvY2Vzcy5jd2Q7XG4vKipcbiAqIFByb3ZpZGVzIHNhZmUgYWNjZXNzIHRvIHRoZSBgZW52YCBwcm9wZXJ0eSBpbiBub2RlLmpzLCBzYW5kYm94ZWQgb3Igd2ViXG4gKiBlbnZpcm9ubWVudHMuXG4gKlxuICogTm90ZTogaW4gd2ViLCB0aGlzIHByb3BlcnR5IGlzIGhhcmRjb2RlZCB0byBiZSBge31gLlxuICovXG5leHBvcnQgY29uc3QgZW52ID0gc2FmZVByb2Nlc3MuZW52O1xuLyoqXG4gKiBQcm92aWRlcyBzYWZlIGFjY2VzcyB0byB0aGUgYHBsYXRmb3JtYCBwcm9wZXJ0eSBpbiBub2RlLmpzLCBzYW5kYm94ZWQgb3Igd2ViXG4gKiBlbnZpcm9ubWVudHMuXG4gKi9cbmV4cG9ydCBjb25zdCBwbGF0Zm9ybSA9IHNhZmVQcm9jZXNzLnBsYXRmb3JtO1xuIiwgIi8qLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gKiAgQ29weXJpZ2h0IChjKSBNaWNyb3NvZnQgQ29ycG9yYXRpb24uIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKiAgTGljZW5zZWQgdW5kZXIgdGhlIE1JVCBMaWNlbnNlLiBTZWUgTGljZW5zZS50eHQgaW4gdGhlIHByb2plY3Qgcm9vdCBmb3IgbGljZW5zZSBpbmZvcm1hdGlvbi5cbiAqLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qL1xuLy8gTk9URTogVlNDb2RlJ3MgY29weSBvZiBub2RlanMgcGF0aCBsaWJyYXJ5IHRvIGJlIHVzYWJsZSBpbiBjb21tb24gKG5vbi1ub2RlKSBuYW1lc3BhY2Vcbi8vIENvcGllZCBmcm9tOiBodHRwczovL2dpdGh1Yi5jb20vbm9kZWpzL25vZGUvYmxvYi92MTYuMTQuMi9saWIvcGF0aC5qc1xuLyoqXG4gKiBDb3B5cmlnaHQgSm95ZW50LCBJbmMuIGFuZCBvdGhlciBOb2RlIGNvbnRyaWJ1dG9ycy5cbiAqXG4gKiBQZXJtaXNzaW9uIGlzIGhlcmVieSBncmFudGVkLCBmcmVlIG9mIGNoYXJnZSwgdG8gYW55IHBlcnNvbiBvYnRhaW5pbmcgYVxuICogY29weSBvZiB0aGlzIHNvZnR3YXJlIGFuZCBhc3NvY2lhdGVkIGRvY3VtZW50YXRpb24gZmlsZXMgKHRoZVxuICogXCJTb2Z0d2FyZVwiKSwgdG8gZGVhbCBpbiB0aGUgU29mdHdhcmUgd2l0aG91dCByZXN0cmljdGlvbiwgaW5jbHVkaW5nXG4gKiB3aXRob3V0IGxpbWl0YXRpb24gdGhlIHJpZ2h0cyB0byB1c2UsIGNvcHksIG1vZGlmeSwgbWVyZ2UsIHB1Ymxpc2gsXG4gKiBkaXN0cmlidXRlLCBzdWJsaWNlbnNlLCBhbmQvb3Igc2VsbCBjb3BpZXMgb2YgdGhlIFNvZnR3YXJlLCBhbmQgdG8gcGVybWl0XG4gKiBwZXJzb25zIHRvIHdob20gdGhlIFNvZnR3YXJlIGlzIGZ1cm5pc2hlZCB0byBkbyBzbywgc3ViamVjdCB0byB0aGVcbiAqIGZvbGxvd2luZyBjb25kaXRpb25zOlxuICpcbiAqIFRoZSBhYm92ZSBjb3B5cmlnaHQgbm90aWNlIGFuZCB0aGlzIHBlcm1pc3Npb24gbm90aWNlIHNoYWxsIGJlIGluY2x1ZGVkXG4gKiBpbiBhbGwgY29waWVzIG9yIHN1YnN0YW50aWFsIHBvcnRpb25zIG9mIHRoZSBTb2Z0d2FyZS5cbiAqXG4gKiBUSEUgU09GVFdBUkUgSVMgUFJPVklERUQgXCJBUyBJU1wiLCBXSVRIT1VUIFdBUlJBTlRZIE9GIEFOWSBLSU5ELCBFWFBSRVNTXG4gKiBPUiBJTVBMSUVELCBJTkNMVURJTkcgQlVUIE5PVCBMSU1JVEVEIFRPIFRIRSBXQVJSQU5USUVTIE9GXG4gKiBNRVJDSEFOVEFCSUxJVFksIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFIEFORCBOT05JTkZSSU5HRU1FTlQuIElOXG4gKiBOTyBFVkVOVCBTSEFMTCBUSEUgQVVUSE9SUyBPUiBDT1BZUklHSFQgSE9MREVSUyBCRSBMSUFCTEUgRk9SIEFOWSBDTEFJTSxcbiAqIERBTUFHRVMgT1IgT1RIRVIgTElBQklMSVRZLCBXSEVUSEVSIElOIEFOIEFDVElPTiBPRiBDT05UUkFDVCwgVE9SVCBPUlxuICogT1RIRVJXSVNFLCBBUklTSU5HIEZST00sIE9VVCBPRiBPUiBJTiBDT05ORUNUSU9OIFdJVEggVEhFIFNPRlRXQVJFIE9SIFRIRVxuICogVVNFIE9SIE9USEVSIERFQUxJTkdTIElOIFRIRSBTT0ZUV0FSRS5cbiAqL1xuaW1wb3J0ICogYXMgcHJvY2VzcyBmcm9tICcuL3Byb2Nlc3MuanMnO1xuY29uc3QgQ0hBUl9VUFBFUkNBU0VfQSA9IDY1OyAvKiBBICovXG5jb25zdCBDSEFSX0xPV0VSQ0FTRV9BID0gOTc7IC8qIGEgKi9cbmNvbnN0IENIQVJfVVBQRVJDQVNFX1ogPSA5MDsgLyogWiAqL1xuY29uc3QgQ0hBUl9MT1dFUkNBU0VfWiA9IDEyMjsgLyogeiAqL1xuY29uc3QgQ0hBUl9ET1QgPSA0NjsgLyogLiAqL1xuY29uc3QgQ0hBUl9GT1JXQVJEX1NMQVNIID0gNDc7IC8qIC8gKi9cbmNvbnN0IENIQVJfQkFDS1dBUkRfU0xBU0ggPSA5MjsgLyogXFwgKi9cbmNvbnN0IENIQVJfQ09MT04gPSA1ODsgLyogOiAqL1xuY29uc3QgQ0hBUl9RVUVTVElPTl9NQVJLID0gNjM7IC8qID8gKi9cbmNsYXNzIEVycm9ySW52YWxpZEFyZ1R5cGUgZXh0ZW5kcyBFcnJvciB7XG4gICAgY29uc3RydWN0b3IobmFtZSwgZXhwZWN0ZWQsIGFjdHVhbCkge1xuICAgICAgICAvLyBkZXRlcm1pbmVyOiAnbXVzdCBiZScgb3IgJ211c3Qgbm90IGJlJ1xuICAgICAgICBsZXQgZGV0ZXJtaW5lcjtcbiAgICAgICAgaWYgKHR5cGVvZiBleHBlY3RlZCA9PT0gJ3N0cmluZycgJiYgZXhwZWN0ZWQuaW5kZXhPZignbm90ICcpID09PSAwKSB7XG4gICAgICAgICAgICBkZXRlcm1pbmVyID0gJ211c3Qgbm90IGJlJztcbiAgICAgICAgICAgIGV4cGVjdGVkID0gZXhwZWN0ZWQucmVwbGFjZSgvXm5vdCAvLCAnJyk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBkZXRlcm1pbmVyID0gJ211c3QgYmUnO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IHR5cGUgPSBuYW1lLmluZGV4T2YoJy4nKSAhPT0gLTEgPyAncHJvcGVydHknIDogJ2FyZ3VtZW50JztcbiAgICAgICAgbGV0IG1zZyA9IGBUaGUgXCIke25hbWV9XCIgJHt0eXBlfSAke2RldGVybWluZXJ9IG9mIHR5cGUgJHtleHBlY3RlZH1gO1xuICAgICAgICBtc2cgKz0gYC4gUmVjZWl2ZWQgdHlwZSAke3R5cGVvZiBhY3R1YWx9YDtcbiAgICAgICAgc3VwZXIobXNnKTtcbiAgICAgICAgdGhpcy5jb2RlID0gJ0VSUl9JTlZBTElEX0FSR19UWVBFJztcbiAgICB9XG59XG5mdW5jdGlvbiB2YWxpZGF0ZU9iamVjdChwYXRoT2JqZWN0LCBuYW1lKSB7XG4gICAgaWYgKHBhdGhPYmplY3QgPT09IG51bGwgfHwgdHlwZW9mIHBhdGhPYmplY3QgIT09ICdvYmplY3QnKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvckludmFsaWRBcmdUeXBlKG5hbWUsICdPYmplY3QnLCBwYXRoT2JqZWN0KTtcbiAgICB9XG59XG5mdW5jdGlvbiB2YWxpZGF0ZVN0cmluZyh2YWx1ZSwgbmFtZSkge1xuICAgIGlmICh0eXBlb2YgdmFsdWUgIT09ICdzdHJpbmcnKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvckludmFsaWRBcmdUeXBlKG5hbWUsICdzdHJpbmcnLCB2YWx1ZSk7XG4gICAgfVxufVxuY29uc3QgcGxhdGZvcm1Jc1dpbjMyID0gKHByb2Nlc3MucGxhdGZvcm0gPT09ICd3aW4zMicpO1xuZnVuY3Rpb24gaXNQYXRoU2VwYXJhdG9yKGNvZGUpIHtcbiAgICByZXR1cm4gY29kZSA9PT0gQ0hBUl9GT1JXQVJEX1NMQVNIIHx8IGNvZGUgPT09IENIQVJfQkFDS1dBUkRfU0xBU0g7XG59XG5mdW5jdGlvbiBpc1Bvc2l4UGF0aFNlcGFyYXRvcihjb2RlKSB7XG4gICAgcmV0dXJuIGNvZGUgPT09IENIQVJfRk9SV0FSRF9TTEFTSDtcbn1cbmZ1bmN0aW9uIGlzV2luZG93c0RldmljZVJvb3QoY29kZSkge1xuICAgIHJldHVybiAoY29kZSA+PSBDSEFSX1VQUEVSQ0FTRV9BICYmIGNvZGUgPD0gQ0hBUl9VUFBFUkNBU0VfWikgfHxcbiAgICAgICAgKGNvZGUgPj0gQ0hBUl9MT1dFUkNBU0VfQSAmJiBjb2RlIDw9IENIQVJfTE9XRVJDQVNFX1opO1xufVxuLy8gUmVzb2x2ZXMgLiBhbmQgLi4gZWxlbWVudHMgaW4gYSBwYXRoIHdpdGggZGlyZWN0b3J5IG5hbWVzXG5mdW5jdGlvbiBub3JtYWxpemVTdHJpbmcocGF0aCwgYWxsb3dBYm92ZVJvb3QsIHNlcGFyYXRvciwgaXNQYXRoU2VwYXJhdG9yKSB7XG4gICAgbGV0IHJlcyA9ICcnO1xuICAgIGxldCBsYXN0U2VnbWVudExlbmd0aCA9IDA7XG4gICAgbGV0IGxhc3RTbGFzaCA9IC0xO1xuICAgIGxldCBkb3RzID0gMDtcbiAgICBsZXQgY29kZSA9IDA7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPD0gcGF0aC5sZW5ndGg7ICsraSkge1xuICAgICAgICBpZiAoaSA8IHBhdGgubGVuZ3RoKSB7XG4gICAgICAgICAgICBjb2RlID0gcGF0aC5jaGFyQ29kZUF0KGkpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKGlzUGF0aFNlcGFyYXRvcihjb2RlKSkge1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBjb2RlID0gQ0hBUl9GT1JXQVJEX1NMQVNIO1xuICAgICAgICB9XG4gICAgICAgIGlmIChpc1BhdGhTZXBhcmF0b3IoY29kZSkpIHtcbiAgICAgICAgICAgIGlmIChsYXN0U2xhc2ggPT09IGkgLSAxIHx8IGRvdHMgPT09IDEpIHtcbiAgICAgICAgICAgICAgICAvLyBOT09QXG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmIChkb3RzID09PSAyKSB7XG4gICAgICAgICAgICAgICAgaWYgKHJlcy5sZW5ndGggPCAyIHx8IGxhc3RTZWdtZW50TGVuZ3RoICE9PSAyIHx8XG4gICAgICAgICAgICAgICAgICAgIHJlcy5jaGFyQ29kZUF0KHJlcy5sZW5ndGggLSAxKSAhPT0gQ0hBUl9ET1QgfHxcbiAgICAgICAgICAgICAgICAgICAgcmVzLmNoYXJDb2RlQXQocmVzLmxlbmd0aCAtIDIpICE9PSBDSEFSX0RPVCkge1xuICAgICAgICAgICAgICAgICAgICBpZiAocmVzLmxlbmd0aCA+IDIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGxhc3RTbGFzaEluZGV4ID0gcmVzLmxhc3RJbmRleE9mKHNlcGFyYXRvcik7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAobGFzdFNsYXNoSW5kZXggPT09IC0xKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVzID0gJyc7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbGFzdFNlZ21lbnRMZW5ndGggPSAwO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVzID0gcmVzLnNsaWNlKDAsIGxhc3RTbGFzaEluZGV4KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBsYXN0U2VnbWVudExlbmd0aCA9IHJlcy5sZW5ndGggLSAxIC0gcmVzLmxhc3RJbmRleE9mKHNlcGFyYXRvcik7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBsYXN0U2xhc2ggPSBpO1xuICAgICAgICAgICAgICAgICAgICAgICAgZG90cyA9IDA7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBlbHNlIGlmIChyZXMubGVuZ3RoICE9PSAwKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXMgPSAnJztcbiAgICAgICAgICAgICAgICAgICAgICAgIGxhc3RTZWdtZW50TGVuZ3RoID0gMDtcbiAgICAgICAgICAgICAgICAgICAgICAgIGxhc3RTbGFzaCA9IGk7XG4gICAgICAgICAgICAgICAgICAgICAgICBkb3RzID0gMDtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmIChhbGxvd0Fib3ZlUm9vdCkge1xuICAgICAgICAgICAgICAgICAgICByZXMgKz0gcmVzLmxlbmd0aCA+IDAgPyBgJHtzZXBhcmF0b3J9Li5gIDogJy4uJztcbiAgICAgICAgICAgICAgICAgICAgbGFzdFNlZ21lbnRMZW5ndGggPSAyO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIGlmIChyZXMubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgICAgICAgICByZXMgKz0gYCR7c2VwYXJhdG9yfSR7cGF0aC5zbGljZShsYXN0U2xhc2ggKyAxLCBpKX1gO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgcmVzID0gcGF0aC5zbGljZShsYXN0U2xhc2ggKyAxLCBpKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgbGFzdFNlZ21lbnRMZW5ndGggPSBpIC0gbGFzdFNsYXNoIC0gMTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGxhc3RTbGFzaCA9IGk7XG4gICAgICAgICAgICBkb3RzID0gMDtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChjb2RlID09PSBDSEFSX0RPVCAmJiBkb3RzICE9PSAtMSkge1xuICAgICAgICAgICAgKytkb3RzO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgZG90cyA9IC0xO1xuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiByZXM7XG59XG5mdW5jdGlvbiBfZm9ybWF0KHNlcCwgcGF0aE9iamVjdCkge1xuICAgIHZhbGlkYXRlT2JqZWN0KHBhdGhPYmplY3QsICdwYXRoT2JqZWN0Jyk7XG4gICAgY29uc3QgZGlyID0gcGF0aE9iamVjdC5kaXIgfHwgcGF0aE9iamVjdC5yb290O1xuICAgIGNvbnN0IGJhc2UgPSBwYXRoT2JqZWN0LmJhc2UgfHxcbiAgICAgICAgYCR7cGF0aE9iamVjdC5uYW1lIHx8ICcnfSR7cGF0aE9iamVjdC5leHQgfHwgJyd9YDtcbiAgICBpZiAoIWRpcikge1xuICAgICAgICByZXR1cm4gYmFzZTtcbiAgICB9XG4gICAgcmV0dXJuIGRpciA9PT0gcGF0aE9iamVjdC5yb290ID8gYCR7ZGlyfSR7YmFzZX1gIDogYCR7ZGlyfSR7c2VwfSR7YmFzZX1gO1xufVxuZXhwb3J0IGNvbnN0IHdpbjMyID0ge1xuICAgIC8vIHBhdGgucmVzb2x2ZShbZnJvbSAuLi5dLCB0bylcbiAgICByZXNvbHZlKC4uLnBhdGhTZWdtZW50cykge1xuICAgICAgICBsZXQgcmVzb2x2ZWREZXZpY2UgPSAnJztcbiAgICAgICAgbGV0IHJlc29sdmVkVGFpbCA9ICcnO1xuICAgICAgICBsZXQgcmVzb2x2ZWRBYnNvbHV0ZSA9IGZhbHNlO1xuICAgICAgICBmb3IgKGxldCBpID0gcGF0aFNlZ21lbnRzLmxlbmd0aCAtIDE7IGkgPj0gLTE7IGktLSkge1xuICAgICAgICAgICAgbGV0IHBhdGg7XG4gICAgICAgICAgICBpZiAoaSA+PSAwKSB7XG4gICAgICAgICAgICAgICAgcGF0aCA9IHBhdGhTZWdtZW50c1tpXTtcbiAgICAgICAgICAgICAgICB2YWxpZGF0ZVN0cmluZyhwYXRoLCAncGF0aCcpO1xuICAgICAgICAgICAgICAgIC8vIFNraXAgZW1wdHkgZW50cmllc1xuICAgICAgICAgICAgICAgIGlmIChwYXRoLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmIChyZXNvbHZlZERldmljZS5sZW5ndGggPT09IDApIHtcbiAgICAgICAgICAgICAgICBwYXRoID0gcHJvY2Vzcy5jd2QoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIC8vIFdpbmRvd3MgaGFzIHRoZSBjb25jZXB0IG9mIGRyaXZlLXNwZWNpZmljIGN1cnJlbnQgd29ya2luZ1xuICAgICAgICAgICAgICAgIC8vIGRpcmVjdG9yaWVzLiBJZiB3ZSd2ZSByZXNvbHZlZCBhIGRyaXZlIGxldHRlciBidXQgbm90IHlldCBhblxuICAgICAgICAgICAgICAgIC8vIGFic29sdXRlIHBhdGgsIGdldCBjd2QgZm9yIHRoYXQgZHJpdmUsIG9yIHRoZSBwcm9jZXNzIGN3ZCBpZlxuICAgICAgICAgICAgICAgIC8vIHRoZSBkcml2ZSBjd2QgaXMgbm90IGF2YWlsYWJsZS4gV2UncmUgc3VyZSB0aGUgZGV2aWNlIGlzIG5vdFxuICAgICAgICAgICAgICAgIC8vIGEgVU5DIHBhdGggYXQgdGhpcyBwb2ludHMsIGJlY2F1c2UgVU5DIHBhdGhzIGFyZSBhbHdheXMgYWJzb2x1dGUuXG4gICAgICAgICAgICAgICAgcGF0aCA9IHByb2Nlc3MuZW52W2A9JHtyZXNvbHZlZERldmljZX1gXSB8fCBwcm9jZXNzLmN3ZCgpO1xuICAgICAgICAgICAgICAgIC8vIFZlcmlmeSB0aGF0IGEgY3dkIHdhcyBmb3VuZCBhbmQgdGhhdCBpdCBhY3R1YWxseSBwb2ludHNcbiAgICAgICAgICAgICAgICAvLyB0byBvdXIgZHJpdmUuIElmIG5vdCwgZGVmYXVsdCB0byB0aGUgZHJpdmUncyByb290LlxuICAgICAgICAgICAgICAgIGlmIChwYXRoID09PSB1bmRlZmluZWQgfHxcbiAgICAgICAgICAgICAgICAgICAgKHBhdGguc2xpY2UoMCwgMikudG9Mb3dlckNhc2UoKSAhPT0gcmVzb2x2ZWREZXZpY2UudG9Mb3dlckNhc2UoKSAmJlxuICAgICAgICAgICAgICAgICAgICAgICAgcGF0aC5jaGFyQ29kZUF0KDIpID09PSBDSEFSX0JBQ0tXQVJEX1NMQVNIKSkge1xuICAgICAgICAgICAgICAgICAgICBwYXRoID0gYCR7cmVzb2x2ZWREZXZpY2V9XFxcXGA7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY29uc3QgbGVuID0gcGF0aC5sZW5ndGg7XG4gICAgICAgICAgICBsZXQgcm9vdEVuZCA9IDA7XG4gICAgICAgICAgICBsZXQgZGV2aWNlID0gJyc7XG4gICAgICAgICAgICBsZXQgaXNBYnNvbHV0ZSA9IGZhbHNlO1xuICAgICAgICAgICAgY29uc3QgY29kZSA9IHBhdGguY2hhckNvZGVBdCgwKTtcbiAgICAgICAgICAgIC8vIFRyeSB0byBtYXRjaCBhIHJvb3RcbiAgICAgICAgICAgIGlmIChsZW4gPT09IDEpIHtcbiAgICAgICAgICAgICAgICBpZiAoaXNQYXRoU2VwYXJhdG9yKGNvZGUpKSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIGBwYXRoYCBjb250YWlucyBqdXN0IGEgcGF0aCBzZXBhcmF0b3JcbiAgICAgICAgICAgICAgICAgICAgcm9vdEVuZCA9IDE7XG4gICAgICAgICAgICAgICAgICAgIGlzQWJzb2x1dGUgPSB0cnVlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKGlzUGF0aFNlcGFyYXRvcihjb2RlKSkge1xuICAgICAgICAgICAgICAgIC8vIFBvc3NpYmxlIFVOQyByb290XG4gICAgICAgICAgICAgICAgLy8gSWYgd2Ugc3RhcnRlZCB3aXRoIGEgc2VwYXJhdG9yLCB3ZSBrbm93IHdlIGF0IGxlYXN0IGhhdmUgYW5cbiAgICAgICAgICAgICAgICAvLyBhYnNvbHV0ZSBwYXRoIG9mIHNvbWUga2luZCAoVU5DIG9yIG90aGVyd2lzZSlcbiAgICAgICAgICAgICAgICBpc0Fic29sdXRlID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICBpZiAoaXNQYXRoU2VwYXJhdG9yKHBhdGguY2hhckNvZGVBdCgxKSkpIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gTWF0Y2hlZCBkb3VibGUgcGF0aCBzZXBhcmF0b3IgYXQgYmVnaW5uaW5nXG4gICAgICAgICAgICAgICAgICAgIGxldCBqID0gMjtcbiAgICAgICAgICAgICAgICAgICAgbGV0IGxhc3QgPSBqO1xuICAgICAgICAgICAgICAgICAgICAvLyBNYXRjaCAxIG9yIG1vcmUgbm9uLXBhdGggc2VwYXJhdG9yc1xuICAgICAgICAgICAgICAgICAgICB3aGlsZSAoaiA8IGxlbiAmJiAhaXNQYXRoU2VwYXJhdG9yKHBhdGguY2hhckNvZGVBdChqKSkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGorKztcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBpZiAoaiA8IGxlbiAmJiBqICE9PSBsYXN0KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBmaXJzdFBhcnQgPSBwYXRoLnNsaWNlKGxhc3QsIGopO1xuICAgICAgICAgICAgICAgICAgICAgICAgLy8gTWF0Y2hlZCFcbiAgICAgICAgICAgICAgICAgICAgICAgIGxhc3QgPSBqO1xuICAgICAgICAgICAgICAgICAgICAgICAgLy8gTWF0Y2ggMSBvciBtb3JlIHBhdGggc2VwYXJhdG9yc1xuICAgICAgICAgICAgICAgICAgICAgICAgd2hpbGUgKGogPCBsZW4gJiYgaXNQYXRoU2VwYXJhdG9yKHBhdGguY2hhckNvZGVBdChqKSkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBqKys7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoaiA8IGxlbiAmJiBqICE9PSBsYXN0KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gTWF0Y2hlZCFcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBsYXN0ID0gajtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBNYXRjaCAxIG9yIG1vcmUgbm9uLXBhdGggc2VwYXJhdG9yc1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHdoaWxlIChqIDwgbGVuICYmICFpc1BhdGhTZXBhcmF0b3IocGF0aC5jaGFyQ29kZUF0KGopKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBqKys7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChqID09PSBsZW4gfHwgaiAhPT0gbGFzdCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBXZSBtYXRjaGVkIGEgVU5DIHJvb3RcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGV2aWNlID0gYFxcXFxcXFxcJHtmaXJzdFBhcnR9XFxcXCR7cGF0aC5zbGljZShsYXN0LCBqKX1gO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByb290RW5kID0gajtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHJvb3RFbmQgPSAxO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKGlzV2luZG93c0RldmljZVJvb3QoY29kZSkgJiZcbiAgICAgICAgICAgICAgICBwYXRoLmNoYXJDb2RlQXQoMSkgPT09IENIQVJfQ09MT04pIHtcbiAgICAgICAgICAgICAgICAvLyBQb3NzaWJsZSBkZXZpY2Ugcm9vdFxuICAgICAgICAgICAgICAgIGRldmljZSA9IHBhdGguc2xpY2UoMCwgMik7XG4gICAgICAgICAgICAgICAgcm9vdEVuZCA9IDI7XG4gICAgICAgICAgICAgICAgaWYgKGxlbiA+IDIgJiYgaXNQYXRoU2VwYXJhdG9yKHBhdGguY2hhckNvZGVBdCgyKSkpIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gVHJlYXQgc2VwYXJhdG9yIGZvbGxvd2luZyBkcml2ZSBuYW1lIGFzIGFuIGFic29sdXRlIHBhdGhcbiAgICAgICAgICAgICAgICAgICAgLy8gaW5kaWNhdG9yXG4gICAgICAgICAgICAgICAgICAgIGlzQWJzb2x1dGUgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICByb290RW5kID0gMztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoZGV2aWNlLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgICAgICBpZiAocmVzb2x2ZWREZXZpY2UubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgICAgICAgICBpZiAoZGV2aWNlLnRvTG93ZXJDYXNlKCkgIT09IHJlc29sdmVkRGV2aWNlLnRvTG93ZXJDYXNlKCkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIFRoaXMgcGF0aCBwb2ludHMgdG8gYW5vdGhlciBkZXZpY2Ugc28gaXQgaXMgbm90IGFwcGxpY2FibGVcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICByZXNvbHZlZERldmljZSA9IGRldmljZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAocmVzb2x2ZWRBYnNvbHV0ZSkge1xuICAgICAgICAgICAgICAgIGlmIChyZXNvbHZlZERldmljZS5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIHJlc29sdmVkVGFpbCA9IGAke3BhdGguc2xpY2Uocm9vdEVuZCl9XFxcXCR7cmVzb2x2ZWRUYWlsfWA7XG4gICAgICAgICAgICAgICAgcmVzb2x2ZWRBYnNvbHV0ZSA9IGlzQWJzb2x1dGU7XG4gICAgICAgICAgICAgICAgaWYgKGlzQWJzb2x1dGUgJiYgcmVzb2x2ZWREZXZpY2UubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgLy8gQXQgdGhpcyBwb2ludCB0aGUgcGF0aCBzaG91bGQgYmUgcmVzb2x2ZWQgdG8gYSBmdWxsIGFic29sdXRlIHBhdGgsXG4gICAgICAgIC8vIGJ1dCBoYW5kbGUgcmVsYXRpdmUgcGF0aHMgdG8gYmUgc2FmZSAobWlnaHQgaGFwcGVuIHdoZW4gcHJvY2Vzcy5jd2QoKVxuICAgICAgICAvLyBmYWlscylcbiAgICAgICAgLy8gTm9ybWFsaXplIHRoZSB0YWlsIHBhdGhcbiAgICAgICAgcmVzb2x2ZWRUYWlsID0gbm9ybWFsaXplU3RyaW5nKHJlc29sdmVkVGFpbCwgIXJlc29sdmVkQWJzb2x1dGUsICdcXFxcJywgaXNQYXRoU2VwYXJhdG9yKTtcbiAgICAgICAgcmV0dXJuIHJlc29sdmVkQWJzb2x1dGUgP1xuICAgICAgICAgICAgYCR7cmVzb2x2ZWREZXZpY2V9XFxcXCR7cmVzb2x2ZWRUYWlsfWAgOlxuICAgICAgICAgICAgYCR7cmVzb2x2ZWREZXZpY2V9JHtyZXNvbHZlZFRhaWx9YCB8fCAnLic7XG4gICAgfSxcbiAgICBub3JtYWxpemUocGF0aCkge1xuICAgICAgICB2YWxpZGF0ZVN0cmluZyhwYXRoLCAncGF0aCcpO1xuICAgICAgICBjb25zdCBsZW4gPSBwYXRoLmxlbmd0aDtcbiAgICAgICAgaWYgKGxlbiA9PT0gMCkge1xuICAgICAgICAgICAgcmV0dXJuICcuJztcbiAgICAgICAgfVxuICAgICAgICBsZXQgcm9vdEVuZCA9IDA7XG4gICAgICAgIGxldCBkZXZpY2U7XG4gICAgICAgIGxldCBpc0Fic29sdXRlID0gZmFsc2U7XG4gICAgICAgIGNvbnN0IGNvZGUgPSBwYXRoLmNoYXJDb2RlQXQoMCk7XG4gICAgICAgIC8vIFRyeSB0byBtYXRjaCBhIHJvb3RcbiAgICAgICAgaWYgKGxlbiA9PT0gMSkge1xuICAgICAgICAgICAgLy8gYHBhdGhgIGNvbnRhaW5zIGp1c3QgYSBzaW5nbGUgY2hhciwgZXhpdCBlYXJseSB0byBhdm9pZFxuICAgICAgICAgICAgLy8gdW5uZWNlc3Nhcnkgd29ya1xuICAgICAgICAgICAgcmV0dXJuIGlzUG9zaXhQYXRoU2VwYXJhdG9yKGNvZGUpID8gJ1xcXFwnIDogcGF0aDtcbiAgICAgICAgfVxuICAgICAgICBpZiAoaXNQYXRoU2VwYXJhdG9yKGNvZGUpKSB7XG4gICAgICAgICAgICAvLyBQb3NzaWJsZSBVTkMgcm9vdFxuICAgICAgICAgICAgLy8gSWYgd2Ugc3RhcnRlZCB3aXRoIGEgc2VwYXJhdG9yLCB3ZSBrbm93IHdlIGF0IGxlYXN0IGhhdmUgYW4gYWJzb2x1dGVcbiAgICAgICAgICAgIC8vIHBhdGggb2Ygc29tZSBraW5kIChVTkMgb3Igb3RoZXJ3aXNlKVxuICAgICAgICAgICAgaXNBYnNvbHV0ZSA9IHRydWU7XG4gICAgICAgICAgICBpZiAoaXNQYXRoU2VwYXJhdG9yKHBhdGguY2hhckNvZGVBdCgxKSkpIHtcbiAgICAgICAgICAgICAgICAvLyBNYXRjaGVkIGRvdWJsZSBwYXRoIHNlcGFyYXRvciBhdCBiZWdpbm5pbmdcbiAgICAgICAgICAgICAgICBsZXQgaiA9IDI7XG4gICAgICAgICAgICAgICAgbGV0IGxhc3QgPSBqO1xuICAgICAgICAgICAgICAgIC8vIE1hdGNoIDEgb3IgbW9yZSBub24tcGF0aCBzZXBhcmF0b3JzXG4gICAgICAgICAgICAgICAgd2hpbGUgKGogPCBsZW4gJiYgIWlzUGF0aFNlcGFyYXRvcihwYXRoLmNoYXJDb2RlQXQoaikpKSB7XG4gICAgICAgICAgICAgICAgICAgIGorKztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKGogPCBsZW4gJiYgaiAhPT0gbGFzdCkge1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBmaXJzdFBhcnQgPSBwYXRoLnNsaWNlKGxhc3QsIGopO1xuICAgICAgICAgICAgICAgICAgICAvLyBNYXRjaGVkIVxuICAgICAgICAgICAgICAgICAgICBsYXN0ID0gajtcbiAgICAgICAgICAgICAgICAgICAgLy8gTWF0Y2ggMSBvciBtb3JlIHBhdGggc2VwYXJhdG9yc1xuICAgICAgICAgICAgICAgICAgICB3aGlsZSAoaiA8IGxlbiAmJiBpc1BhdGhTZXBhcmF0b3IocGF0aC5jaGFyQ29kZUF0KGopKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgaisrO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGlmIChqIDwgbGVuICYmIGogIT09IGxhc3QpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIE1hdGNoZWQhXG4gICAgICAgICAgICAgICAgICAgICAgICBsYXN0ID0gajtcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIE1hdGNoIDEgb3IgbW9yZSBub24tcGF0aCBzZXBhcmF0b3JzXG4gICAgICAgICAgICAgICAgICAgICAgICB3aGlsZSAoaiA8IGxlbiAmJiAhaXNQYXRoU2VwYXJhdG9yKHBhdGguY2hhckNvZGVBdChqKSkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBqKys7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoaiA9PT0gbGVuKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gV2UgbWF0Y2hlZCBhIFVOQyByb290IG9ubHlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBSZXR1cm4gdGhlIG5vcm1hbGl6ZWQgdmVyc2lvbiBvZiB0aGUgVU5DIHJvb3Qgc2luY2UgdGhlcmVcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBpcyBub3RoaW5nIGxlZnQgdG8gcHJvY2Vzc1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBgXFxcXFxcXFwke2ZpcnN0UGFydH1cXFxcJHtwYXRoLnNsaWNlKGxhc3QpfVxcXFxgO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGogIT09IGxhc3QpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBXZSBtYXRjaGVkIGEgVU5DIHJvb3Qgd2l0aCBsZWZ0b3ZlcnNcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkZXZpY2UgPSBgXFxcXFxcXFwke2ZpcnN0UGFydH1cXFxcJHtwYXRoLnNsaWNlKGxhc3QsIGopfWA7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcm9vdEVuZCA9IGo7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICByb290RW5kID0gMTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChpc1dpbmRvd3NEZXZpY2VSb290KGNvZGUpICYmIHBhdGguY2hhckNvZGVBdCgxKSA9PT0gQ0hBUl9DT0xPTikge1xuICAgICAgICAgICAgLy8gUG9zc2libGUgZGV2aWNlIHJvb3RcbiAgICAgICAgICAgIGRldmljZSA9IHBhdGguc2xpY2UoMCwgMik7XG4gICAgICAgICAgICByb290RW5kID0gMjtcbiAgICAgICAgICAgIGlmIChsZW4gPiAyICYmIGlzUGF0aFNlcGFyYXRvcihwYXRoLmNoYXJDb2RlQXQoMikpKSB7XG4gICAgICAgICAgICAgICAgLy8gVHJlYXQgc2VwYXJhdG9yIGZvbGxvd2luZyBkcml2ZSBuYW1lIGFzIGFuIGFic29sdXRlIHBhdGhcbiAgICAgICAgICAgICAgICAvLyBpbmRpY2F0b3JcbiAgICAgICAgICAgICAgICBpc0Fic29sdXRlID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICByb290RW5kID0gMztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBsZXQgdGFpbCA9IHJvb3RFbmQgPCBsZW4gP1xuICAgICAgICAgICAgbm9ybWFsaXplU3RyaW5nKHBhdGguc2xpY2Uocm9vdEVuZCksICFpc0Fic29sdXRlLCAnXFxcXCcsIGlzUGF0aFNlcGFyYXRvcikgOlxuICAgICAgICAgICAgJyc7XG4gICAgICAgIGlmICh0YWlsLmxlbmd0aCA9PT0gMCAmJiAhaXNBYnNvbHV0ZSkge1xuICAgICAgICAgICAgdGFpbCA9ICcuJztcbiAgICAgICAgfVxuICAgICAgICBpZiAodGFpbC5sZW5ndGggPiAwICYmIGlzUGF0aFNlcGFyYXRvcihwYXRoLmNoYXJDb2RlQXQobGVuIC0gMSkpKSB7XG4gICAgICAgICAgICB0YWlsICs9ICdcXFxcJztcbiAgICAgICAgfVxuICAgICAgICBpZiAoZGV2aWNlID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHJldHVybiBpc0Fic29sdXRlID8gYFxcXFwke3RhaWx9YCA6IHRhaWw7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGlzQWJzb2x1dGUgPyBgJHtkZXZpY2V9XFxcXCR7dGFpbH1gIDogYCR7ZGV2aWNlfSR7dGFpbH1gO1xuICAgIH0sXG4gICAgaXNBYnNvbHV0ZShwYXRoKSB7XG4gICAgICAgIHZhbGlkYXRlU3RyaW5nKHBhdGgsICdwYXRoJyk7XG4gICAgICAgIGNvbnN0IGxlbiA9IHBhdGgubGVuZ3RoO1xuICAgICAgICBpZiAobGVuID09PSAwKSB7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgY29kZSA9IHBhdGguY2hhckNvZGVBdCgwKTtcbiAgICAgICAgcmV0dXJuIGlzUGF0aFNlcGFyYXRvcihjb2RlKSB8fFxuICAgICAgICAgICAgLy8gUG9zc2libGUgZGV2aWNlIHJvb3RcbiAgICAgICAgICAgIChsZW4gPiAyICYmXG4gICAgICAgICAgICAgICAgaXNXaW5kb3dzRGV2aWNlUm9vdChjb2RlKSAmJlxuICAgICAgICAgICAgICAgIHBhdGguY2hhckNvZGVBdCgxKSA9PT0gQ0hBUl9DT0xPTiAmJlxuICAgICAgICAgICAgICAgIGlzUGF0aFNlcGFyYXRvcihwYXRoLmNoYXJDb2RlQXQoMikpKTtcbiAgICB9LFxuICAgIGpvaW4oLi4ucGF0aHMpIHtcbiAgICAgICAgaWYgKHBhdGhzLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICAgICAgcmV0dXJuICcuJztcbiAgICAgICAgfVxuICAgICAgICBsZXQgam9pbmVkO1xuICAgICAgICBsZXQgZmlyc3RQYXJ0O1xuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHBhdGhzLmxlbmd0aDsgKytpKSB7XG4gICAgICAgICAgICBjb25zdCBhcmcgPSBwYXRoc1tpXTtcbiAgICAgICAgICAgIHZhbGlkYXRlU3RyaW5nKGFyZywgJ3BhdGgnKTtcbiAgICAgICAgICAgIGlmIChhcmcubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgICAgIGlmIChqb2luZWQgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgICAgICBqb2luZWQgPSBmaXJzdFBhcnQgPSBhcmc7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBqb2luZWQgKz0gYFxcXFwke2FyZ31gO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBpZiAoam9pbmVkID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHJldHVybiAnLic7XG4gICAgICAgIH1cbiAgICAgICAgLy8gTWFrZSBzdXJlIHRoYXQgdGhlIGpvaW5lZCBwYXRoIGRvZXNuJ3Qgc3RhcnQgd2l0aCB0d28gc2xhc2hlcywgYmVjYXVzZVxuICAgICAgICAvLyBub3JtYWxpemUoKSB3aWxsIG1pc3Rha2UgaXQgZm9yIGEgVU5DIHBhdGggdGhlbi5cbiAgICAgICAgLy9cbiAgICAgICAgLy8gVGhpcyBzdGVwIGlzIHNraXBwZWQgd2hlbiBpdCBpcyB2ZXJ5IGNsZWFyIHRoYXQgdGhlIHVzZXIgYWN0dWFsbHlcbiAgICAgICAgLy8gaW50ZW5kZWQgdG8gcG9pbnQgYXQgYSBVTkMgcGF0aC4gVGhpcyBpcyBhc3N1bWVkIHdoZW4gdGhlIGZpcnN0XG4gICAgICAgIC8vIG5vbi1lbXB0eSBzdHJpbmcgYXJndW1lbnRzIHN0YXJ0cyB3aXRoIGV4YWN0bHkgdHdvIHNsYXNoZXMgZm9sbG93ZWQgYnlcbiAgICAgICAgLy8gYXQgbGVhc3Qgb25lIG1vcmUgbm9uLXNsYXNoIGNoYXJhY3Rlci5cbiAgICAgICAgLy9cbiAgICAgICAgLy8gTm90ZSB0aGF0IGZvciBub3JtYWxpemUoKSB0byB0cmVhdCBhIHBhdGggYXMgYSBVTkMgcGF0aCBpdCBuZWVkcyB0b1xuICAgICAgICAvLyBoYXZlIGF0IGxlYXN0IDIgY29tcG9uZW50cywgc28gd2UgZG9uJ3QgZmlsdGVyIGZvciB0aGF0IGhlcmUuXG4gICAgICAgIC8vIFRoaXMgbWVhbnMgdGhhdCB0aGUgdXNlciBjYW4gdXNlIGpvaW4gdG8gY29uc3RydWN0IFVOQyBwYXRocyBmcm9tXG4gICAgICAgIC8vIGEgc2VydmVyIG5hbWUgYW5kIGEgc2hhcmUgbmFtZTsgZm9yIGV4YW1wbGU6XG4gICAgICAgIC8vICAgcGF0aC5qb2luKCcvL3NlcnZlcicsICdzaGFyZScpIC0+ICdcXFxcXFxcXHNlcnZlclxcXFxzaGFyZVxcXFwnKVxuICAgICAgICBsZXQgbmVlZHNSZXBsYWNlID0gdHJ1ZTtcbiAgICAgICAgbGV0IHNsYXNoQ291bnQgPSAwO1xuICAgICAgICBpZiAodHlwZW9mIGZpcnN0UGFydCA9PT0gJ3N0cmluZycgJiYgaXNQYXRoU2VwYXJhdG9yKGZpcnN0UGFydC5jaGFyQ29kZUF0KDApKSkge1xuICAgICAgICAgICAgKytzbGFzaENvdW50O1xuICAgICAgICAgICAgY29uc3QgZmlyc3RMZW4gPSBmaXJzdFBhcnQubGVuZ3RoO1xuICAgICAgICAgICAgaWYgKGZpcnN0TGVuID4gMSAmJiBpc1BhdGhTZXBhcmF0b3IoZmlyc3RQYXJ0LmNoYXJDb2RlQXQoMSkpKSB7XG4gICAgICAgICAgICAgICAgKytzbGFzaENvdW50O1xuICAgICAgICAgICAgICAgIGlmIChmaXJzdExlbiA+IDIpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGlzUGF0aFNlcGFyYXRvcihmaXJzdFBhcnQuY2hhckNvZGVBdCgyKSkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICsrc2xhc2hDb3VudDtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIFdlIG1hdGNoZWQgYSBVTkMgcGF0aCBpbiB0aGUgZmlyc3QgcGFydFxuICAgICAgICAgICAgICAgICAgICAgICAgbmVlZHNSZXBsYWNlID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgaWYgKG5lZWRzUmVwbGFjZSkge1xuICAgICAgICAgICAgLy8gRmluZCBhbnkgbW9yZSBjb25zZWN1dGl2ZSBzbGFzaGVzIHdlIG5lZWQgdG8gcmVwbGFjZVxuICAgICAgICAgICAgd2hpbGUgKHNsYXNoQ291bnQgPCBqb2luZWQubGVuZ3RoICYmXG4gICAgICAgICAgICAgICAgaXNQYXRoU2VwYXJhdG9yKGpvaW5lZC5jaGFyQ29kZUF0KHNsYXNoQ291bnQpKSkge1xuICAgICAgICAgICAgICAgIHNsYXNoQ291bnQrKztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8vIFJlcGxhY2UgdGhlIHNsYXNoZXMgaWYgbmVlZGVkXG4gICAgICAgICAgICBpZiAoc2xhc2hDb3VudCA+PSAyKSB7XG4gICAgICAgICAgICAgICAgam9pbmVkID0gYFxcXFwke2pvaW5lZC5zbGljZShzbGFzaENvdW50KX1gO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiB3aW4zMi5ub3JtYWxpemUoam9pbmVkKTtcbiAgICB9LFxuICAgIC8vIEl0IHdpbGwgc29sdmUgdGhlIHJlbGF0aXZlIHBhdGggZnJvbSBgZnJvbWAgdG8gYHRvYCwgZm9yIGluc3RhbmNlOlxuICAgIC8vICBmcm9tID0gJ0M6XFxcXG9yYW5kZWFcXFxcdGVzdFxcXFxhYWEnXG4gICAgLy8gIHRvID0gJ0M6XFxcXG9yYW5kZWFcXFxcaW1wbFxcXFxiYmInXG4gICAgLy8gVGhlIG91dHB1dCBvZiB0aGUgZnVuY3Rpb24gc2hvdWxkIGJlOiAnLi5cXFxcLi5cXFxcaW1wbFxcXFxiYmInXG4gICAgcmVsYXRpdmUoZnJvbSwgdG8pIHtcbiAgICAgICAgdmFsaWRhdGVTdHJpbmcoZnJvbSwgJ2Zyb20nKTtcbiAgICAgICAgdmFsaWRhdGVTdHJpbmcodG8sICd0bycpO1xuICAgICAgICBpZiAoZnJvbSA9PT0gdG8pIHtcbiAgICAgICAgICAgIHJldHVybiAnJztcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBmcm9tT3JpZyA9IHdpbjMyLnJlc29sdmUoZnJvbSk7XG4gICAgICAgIGNvbnN0IHRvT3JpZyA9IHdpbjMyLnJlc29sdmUodG8pO1xuICAgICAgICBpZiAoZnJvbU9yaWcgPT09IHRvT3JpZykge1xuICAgICAgICAgICAgcmV0dXJuICcnO1xuICAgICAgICB9XG4gICAgICAgIGZyb20gPSBmcm9tT3JpZy50b0xvd2VyQ2FzZSgpO1xuICAgICAgICB0byA9IHRvT3JpZy50b0xvd2VyQ2FzZSgpO1xuICAgICAgICBpZiAoZnJvbSA9PT0gdG8pIHtcbiAgICAgICAgICAgIHJldHVybiAnJztcbiAgICAgICAgfVxuICAgICAgICAvLyBUcmltIGFueSBsZWFkaW5nIGJhY2tzbGFzaGVzXG4gICAgICAgIGxldCBmcm9tU3RhcnQgPSAwO1xuICAgICAgICB3aGlsZSAoZnJvbVN0YXJ0IDwgZnJvbS5sZW5ndGggJiZcbiAgICAgICAgICAgIGZyb20uY2hhckNvZGVBdChmcm9tU3RhcnQpID09PSBDSEFSX0JBQ0tXQVJEX1NMQVNIKSB7XG4gICAgICAgICAgICBmcm9tU3RhcnQrKztcbiAgICAgICAgfVxuICAgICAgICAvLyBUcmltIHRyYWlsaW5nIGJhY2tzbGFzaGVzIChhcHBsaWNhYmxlIHRvIFVOQyBwYXRocyBvbmx5KVxuICAgICAgICBsZXQgZnJvbUVuZCA9IGZyb20ubGVuZ3RoO1xuICAgICAgICB3aGlsZSAoZnJvbUVuZCAtIDEgPiBmcm9tU3RhcnQgJiZcbiAgICAgICAgICAgIGZyb20uY2hhckNvZGVBdChmcm9tRW5kIC0gMSkgPT09IENIQVJfQkFDS1dBUkRfU0xBU0gpIHtcbiAgICAgICAgICAgIGZyb21FbmQtLTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBmcm9tTGVuID0gZnJvbUVuZCAtIGZyb21TdGFydDtcbiAgICAgICAgLy8gVHJpbSBhbnkgbGVhZGluZyBiYWNrc2xhc2hlc1xuICAgICAgICBsZXQgdG9TdGFydCA9IDA7XG4gICAgICAgIHdoaWxlICh0b1N0YXJ0IDwgdG8ubGVuZ3RoICYmXG4gICAgICAgICAgICB0by5jaGFyQ29kZUF0KHRvU3RhcnQpID09PSBDSEFSX0JBQ0tXQVJEX1NMQVNIKSB7XG4gICAgICAgICAgICB0b1N0YXJ0Kys7XG4gICAgICAgIH1cbiAgICAgICAgLy8gVHJpbSB0cmFpbGluZyBiYWNrc2xhc2hlcyAoYXBwbGljYWJsZSB0byBVTkMgcGF0aHMgb25seSlcbiAgICAgICAgbGV0IHRvRW5kID0gdG8ubGVuZ3RoO1xuICAgICAgICB3aGlsZSAodG9FbmQgLSAxID4gdG9TdGFydCAmJlxuICAgICAgICAgICAgdG8uY2hhckNvZGVBdCh0b0VuZCAtIDEpID09PSBDSEFSX0JBQ0tXQVJEX1NMQVNIKSB7XG4gICAgICAgICAgICB0b0VuZC0tO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IHRvTGVuID0gdG9FbmQgLSB0b1N0YXJ0O1xuICAgICAgICAvLyBDb21wYXJlIHBhdGhzIHRvIGZpbmQgdGhlIGxvbmdlc3QgY29tbW9uIHBhdGggZnJvbSByb290XG4gICAgICAgIGNvbnN0IGxlbmd0aCA9IGZyb21MZW4gPCB0b0xlbiA/IGZyb21MZW4gOiB0b0xlbjtcbiAgICAgICAgbGV0IGxhc3RDb21tb25TZXAgPSAtMTtcbiAgICAgICAgbGV0IGkgPSAwO1xuICAgICAgICBmb3IgKDsgaSA8IGxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICBjb25zdCBmcm9tQ29kZSA9IGZyb20uY2hhckNvZGVBdChmcm9tU3RhcnQgKyBpKTtcbiAgICAgICAgICAgIGlmIChmcm9tQ29kZSAhPT0gdG8uY2hhckNvZGVBdCh0b1N0YXJ0ICsgaSkpIHtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKGZyb21Db2RlID09PSBDSEFSX0JBQ0tXQVJEX1NMQVNIKSB7XG4gICAgICAgICAgICAgICAgbGFzdENvbW1vblNlcCA9IGk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgLy8gV2UgZm91bmQgYSBtaXNtYXRjaCBiZWZvcmUgdGhlIGZpcnN0IGNvbW1vbiBwYXRoIHNlcGFyYXRvciB3YXMgc2Vlbiwgc29cbiAgICAgICAgLy8gcmV0dXJuIHRoZSBvcmlnaW5hbCBgdG9gLlxuICAgICAgICBpZiAoaSAhPT0gbGVuZ3RoKSB7XG4gICAgICAgICAgICBpZiAobGFzdENvbW1vblNlcCA9PT0gLTEpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdG9PcmlnO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgaWYgKHRvTGVuID4gbGVuZ3RoKSB7XG4gICAgICAgICAgICAgICAgaWYgKHRvLmNoYXJDb2RlQXQodG9TdGFydCArIGkpID09PSBDSEFSX0JBQ0tXQVJEX1NMQVNIKSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIFdlIGdldCBoZXJlIGlmIGBmcm9tYCBpcyB0aGUgZXhhY3QgYmFzZSBwYXRoIGZvciBgdG9gLlxuICAgICAgICAgICAgICAgICAgICAvLyBGb3IgZXhhbXBsZTogZnJvbT0nQzpcXFxcZm9vXFxcXGJhcic7IHRvPSdDOlxcXFxmb29cXFxcYmFyXFxcXGJheidcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRvT3JpZy5zbGljZSh0b1N0YXJ0ICsgaSArIDEpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAoaSA9PT0gMikge1xuICAgICAgICAgICAgICAgICAgICAvLyBXZSBnZXQgaGVyZSBpZiBgZnJvbWAgaXMgdGhlIGRldmljZSByb290LlxuICAgICAgICAgICAgICAgICAgICAvLyBGb3IgZXhhbXBsZTogZnJvbT0nQzpcXFxcJzsgdG89J0M6XFxcXGZvbydcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRvT3JpZy5zbGljZSh0b1N0YXJ0ICsgaSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGZyb21MZW4gPiBsZW5ndGgpIHtcbiAgICAgICAgICAgICAgICBpZiAoZnJvbS5jaGFyQ29kZUF0KGZyb21TdGFydCArIGkpID09PSBDSEFSX0JBQ0tXQVJEX1NMQVNIKSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIFdlIGdldCBoZXJlIGlmIGB0b2AgaXMgdGhlIGV4YWN0IGJhc2UgcGF0aCBmb3IgYGZyb21gLlxuICAgICAgICAgICAgICAgICAgICAvLyBGb3IgZXhhbXBsZTogZnJvbT0nQzpcXFxcZm9vXFxcXGJhcic7IHRvPSdDOlxcXFxmb28nXG4gICAgICAgICAgICAgICAgICAgIGxhc3RDb21tb25TZXAgPSBpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIGlmIChpID09PSAyKSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIFdlIGdldCBoZXJlIGlmIGB0b2AgaXMgdGhlIGRldmljZSByb290LlxuICAgICAgICAgICAgICAgICAgICAvLyBGb3IgZXhhbXBsZTogZnJvbT0nQzpcXFxcZm9vXFxcXGJhcic7IHRvPSdDOlxcXFwnXG4gICAgICAgICAgICAgICAgICAgIGxhc3RDb21tb25TZXAgPSAzO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChsYXN0Q29tbW9uU2VwID09PSAtMSkge1xuICAgICAgICAgICAgICAgIGxhc3RDb21tb25TZXAgPSAwO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGxldCBvdXQgPSAnJztcbiAgICAgICAgLy8gR2VuZXJhdGUgdGhlIHJlbGF0aXZlIHBhdGggYmFzZWQgb24gdGhlIHBhdGggZGlmZmVyZW5jZSBiZXR3ZWVuIGB0b2AgYW5kXG4gICAgICAgIC8vIGBmcm9tYFxuICAgICAgICBmb3IgKGkgPSBmcm9tU3RhcnQgKyBsYXN0Q29tbW9uU2VwICsgMTsgaSA8PSBmcm9tRW5kOyArK2kpIHtcbiAgICAgICAgICAgIGlmIChpID09PSBmcm9tRW5kIHx8IGZyb20uY2hhckNvZGVBdChpKSA9PT0gQ0hBUl9CQUNLV0FSRF9TTEFTSCkge1xuICAgICAgICAgICAgICAgIG91dCArPSBvdXQubGVuZ3RoID09PSAwID8gJy4uJyA6ICdcXFxcLi4nO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHRvU3RhcnQgKz0gbGFzdENvbW1vblNlcDtcbiAgICAgICAgLy8gTGFzdGx5LCBhcHBlbmQgdGhlIHJlc3Qgb2YgdGhlIGRlc3RpbmF0aW9uIChgdG9gKSBwYXRoIHRoYXQgY29tZXMgYWZ0ZXJcbiAgICAgICAgLy8gdGhlIGNvbW1vbiBwYXRoIHBhcnRzXG4gICAgICAgIGlmIChvdXQubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgcmV0dXJuIGAke291dH0ke3RvT3JpZy5zbGljZSh0b1N0YXJ0LCB0b0VuZCl9YDtcbiAgICAgICAgfVxuICAgICAgICBpZiAodG9PcmlnLmNoYXJDb2RlQXQodG9TdGFydCkgPT09IENIQVJfQkFDS1dBUkRfU0xBU0gpIHtcbiAgICAgICAgICAgICsrdG9TdGFydDtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdG9PcmlnLnNsaWNlKHRvU3RhcnQsIHRvRW5kKTtcbiAgICB9LFxuICAgIHRvTmFtZXNwYWNlZFBhdGgocGF0aCkge1xuICAgICAgICAvLyBOb3RlOiB0aGlzIHdpbGwgKnByb2JhYmx5KiB0aHJvdyBzb21ld2hlcmUuXG4gICAgICAgIGlmICh0eXBlb2YgcGF0aCAhPT0gJ3N0cmluZycgfHwgcGF0aC5sZW5ndGggPT09IDApIHtcbiAgICAgICAgICAgIHJldHVybiBwYXRoO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IHJlc29sdmVkUGF0aCA9IHdpbjMyLnJlc29sdmUocGF0aCk7XG4gICAgICAgIGlmIChyZXNvbHZlZFBhdGgubGVuZ3RoIDw9IDIpIHtcbiAgICAgICAgICAgIHJldHVybiBwYXRoO1xuICAgICAgICB9XG4gICAgICAgIGlmIChyZXNvbHZlZFBhdGguY2hhckNvZGVBdCgwKSA9PT0gQ0hBUl9CQUNLV0FSRF9TTEFTSCkge1xuICAgICAgICAgICAgLy8gUG9zc2libGUgVU5DIHJvb3RcbiAgICAgICAgICAgIGlmIChyZXNvbHZlZFBhdGguY2hhckNvZGVBdCgxKSA9PT0gQ0hBUl9CQUNLV0FSRF9TTEFTSCkge1xuICAgICAgICAgICAgICAgIGNvbnN0IGNvZGUgPSByZXNvbHZlZFBhdGguY2hhckNvZGVBdCgyKTtcbiAgICAgICAgICAgICAgICBpZiAoY29kZSAhPT0gQ0hBUl9RVUVTVElPTl9NQVJLICYmIGNvZGUgIT09IENIQVJfRE9UKSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIE1hdGNoZWQgbm9uLWxvbmcgVU5DIHJvb3QsIGNvbnZlcnQgdGhlIHBhdGggdG8gYSBsb25nIFVOQyBwYXRoXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBgXFxcXFxcXFw/XFxcXFVOQ1xcXFwke3Jlc29sdmVkUGF0aC5zbGljZSgyKX1gO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChpc1dpbmRvd3NEZXZpY2VSb290KHJlc29sdmVkUGF0aC5jaGFyQ29kZUF0KDApKSAmJlxuICAgICAgICAgICAgcmVzb2x2ZWRQYXRoLmNoYXJDb2RlQXQoMSkgPT09IENIQVJfQ09MT04gJiZcbiAgICAgICAgICAgIHJlc29sdmVkUGF0aC5jaGFyQ29kZUF0KDIpID09PSBDSEFSX0JBQ0tXQVJEX1NMQVNIKSB7XG4gICAgICAgICAgICAvLyBNYXRjaGVkIGRldmljZSByb290LCBjb252ZXJ0IHRoZSBwYXRoIHRvIGEgbG9uZyBVTkMgcGF0aFxuICAgICAgICAgICAgcmV0dXJuIGBcXFxcXFxcXD9cXFxcJHtyZXNvbHZlZFBhdGh9YDtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gcGF0aDtcbiAgICB9LFxuICAgIGRpcm5hbWUocGF0aCkge1xuICAgICAgICB2YWxpZGF0ZVN0cmluZyhwYXRoLCAncGF0aCcpO1xuICAgICAgICBjb25zdCBsZW4gPSBwYXRoLmxlbmd0aDtcbiAgICAgICAgaWYgKGxlbiA9PT0gMCkge1xuICAgICAgICAgICAgcmV0dXJuICcuJztcbiAgICAgICAgfVxuICAgICAgICBsZXQgcm9vdEVuZCA9IC0xO1xuICAgICAgICBsZXQgb2Zmc2V0ID0gMDtcbiAgICAgICAgY29uc3QgY29kZSA9IHBhdGguY2hhckNvZGVBdCgwKTtcbiAgICAgICAgaWYgKGxlbiA9PT0gMSkge1xuICAgICAgICAgICAgLy8gYHBhdGhgIGNvbnRhaW5zIGp1c3QgYSBwYXRoIHNlcGFyYXRvciwgZXhpdCBlYXJseSB0byBhdm9pZFxuICAgICAgICAgICAgLy8gdW5uZWNlc3Nhcnkgd29yayBvciBhIGRvdC5cbiAgICAgICAgICAgIHJldHVybiBpc1BhdGhTZXBhcmF0b3IoY29kZSkgPyBwYXRoIDogJy4nO1xuICAgICAgICB9XG4gICAgICAgIC8vIFRyeSB0byBtYXRjaCBhIHJvb3RcbiAgICAgICAgaWYgKGlzUGF0aFNlcGFyYXRvcihjb2RlKSkge1xuICAgICAgICAgICAgLy8gUG9zc2libGUgVU5DIHJvb3RcbiAgICAgICAgICAgIHJvb3RFbmQgPSBvZmZzZXQgPSAxO1xuICAgICAgICAgICAgaWYgKGlzUGF0aFNlcGFyYXRvcihwYXRoLmNoYXJDb2RlQXQoMSkpKSB7XG4gICAgICAgICAgICAgICAgLy8gTWF0Y2hlZCBkb3VibGUgcGF0aCBzZXBhcmF0b3IgYXQgYmVnaW5uaW5nXG4gICAgICAgICAgICAgICAgbGV0IGogPSAyO1xuICAgICAgICAgICAgICAgIGxldCBsYXN0ID0gajtcbiAgICAgICAgICAgICAgICAvLyBNYXRjaCAxIG9yIG1vcmUgbm9uLXBhdGggc2VwYXJhdG9yc1xuICAgICAgICAgICAgICAgIHdoaWxlIChqIDwgbGVuICYmICFpc1BhdGhTZXBhcmF0b3IocGF0aC5jaGFyQ29kZUF0KGopKSkge1xuICAgICAgICAgICAgICAgICAgICBqKys7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmIChqIDwgbGVuICYmIGogIT09IGxhc3QpIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gTWF0Y2hlZCFcbiAgICAgICAgICAgICAgICAgICAgbGFzdCA9IGo7XG4gICAgICAgICAgICAgICAgICAgIC8vIE1hdGNoIDEgb3IgbW9yZSBwYXRoIHNlcGFyYXRvcnNcbiAgICAgICAgICAgICAgICAgICAgd2hpbGUgKGogPCBsZW4gJiYgaXNQYXRoU2VwYXJhdG9yKHBhdGguY2hhckNvZGVBdChqKSkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGorKztcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBpZiAoaiA8IGxlbiAmJiBqICE9PSBsYXN0KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBNYXRjaGVkIVxuICAgICAgICAgICAgICAgICAgICAgICAgbGFzdCA9IGo7XG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBNYXRjaCAxIG9yIG1vcmUgbm9uLXBhdGggc2VwYXJhdG9yc1xuICAgICAgICAgICAgICAgICAgICAgICAgd2hpbGUgKGogPCBsZW4gJiYgIWlzUGF0aFNlcGFyYXRvcihwYXRoLmNoYXJDb2RlQXQoaikpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaisrO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGogPT09IGxlbikge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIFdlIG1hdGNoZWQgYSBVTkMgcm9vdCBvbmx5XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHBhdGg7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoaiAhPT0gbGFzdCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIFdlIG1hdGNoZWQgYSBVTkMgcm9vdCB3aXRoIGxlZnRvdmVyc1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIE9mZnNldCBieSAxIHRvIGluY2x1ZGUgdGhlIHNlcGFyYXRvciBhZnRlciB0aGUgVU5DIHJvb3QgdG9cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyB0cmVhdCBpdCBhcyBhIFwibm9ybWFsIHJvb3RcIiBvbiB0b3Agb2YgYSAoVU5DKSByb290XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcm9vdEVuZCA9IG9mZnNldCA9IGogKyAxO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLy8gUG9zc2libGUgZGV2aWNlIHJvb3RcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChpc1dpbmRvd3NEZXZpY2VSb290KGNvZGUpICYmIHBhdGguY2hhckNvZGVBdCgxKSA9PT0gQ0hBUl9DT0xPTikge1xuICAgICAgICAgICAgcm9vdEVuZCA9IGxlbiA+IDIgJiYgaXNQYXRoU2VwYXJhdG9yKHBhdGguY2hhckNvZGVBdCgyKSkgPyAzIDogMjtcbiAgICAgICAgICAgIG9mZnNldCA9IHJvb3RFbmQ7XG4gICAgICAgIH1cbiAgICAgICAgbGV0IGVuZCA9IC0xO1xuICAgICAgICBsZXQgbWF0Y2hlZFNsYXNoID0gdHJ1ZTtcbiAgICAgICAgZm9yIChsZXQgaSA9IGxlbiAtIDE7IGkgPj0gb2Zmc2V0OyAtLWkpIHtcbiAgICAgICAgICAgIGlmIChpc1BhdGhTZXBhcmF0b3IocGF0aC5jaGFyQ29kZUF0KGkpKSkge1xuICAgICAgICAgICAgICAgIGlmICghbWF0Y2hlZFNsYXNoKSB7XG4gICAgICAgICAgICAgICAgICAgIGVuZCA9IGk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIC8vIFdlIHNhdyB0aGUgZmlyc3Qgbm9uLXBhdGggc2VwYXJhdG9yXG4gICAgICAgICAgICAgICAgbWF0Y2hlZFNsYXNoID0gZmFsc2U7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGVuZCA9PT0gLTEpIHtcbiAgICAgICAgICAgIGlmIChyb290RW5kID09PSAtMSkge1xuICAgICAgICAgICAgICAgIHJldHVybiAnLic7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbmQgPSByb290RW5kO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBwYXRoLnNsaWNlKDAsIGVuZCk7XG4gICAgfSxcbiAgICBiYXNlbmFtZShwYXRoLCBleHQpIHtcbiAgICAgICAgaWYgKGV4dCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICB2YWxpZGF0ZVN0cmluZyhleHQsICdleHQnKTtcbiAgICAgICAgfVxuICAgICAgICB2YWxpZGF0ZVN0cmluZyhwYXRoLCAncGF0aCcpO1xuICAgICAgICBsZXQgc3RhcnQgPSAwO1xuICAgICAgICBsZXQgZW5kID0gLTE7XG4gICAgICAgIGxldCBtYXRjaGVkU2xhc2ggPSB0cnVlO1xuICAgICAgICBsZXQgaTtcbiAgICAgICAgLy8gQ2hlY2sgZm9yIGEgZHJpdmUgbGV0dGVyIHByZWZpeCBzbyBhcyBub3QgdG8gbWlzdGFrZSB0aGUgZm9sbG93aW5nXG4gICAgICAgIC8vIHBhdGggc2VwYXJhdG9yIGFzIGFuIGV4dHJhIHNlcGFyYXRvciBhdCB0aGUgZW5kIG9mIHRoZSBwYXRoIHRoYXQgY2FuIGJlXG4gICAgICAgIC8vIGRpc3JlZ2FyZGVkXG4gICAgICAgIGlmIChwYXRoLmxlbmd0aCA+PSAyICYmXG4gICAgICAgICAgICBpc1dpbmRvd3NEZXZpY2VSb290KHBhdGguY2hhckNvZGVBdCgwKSkgJiZcbiAgICAgICAgICAgIHBhdGguY2hhckNvZGVBdCgxKSA9PT0gQ0hBUl9DT0xPTikge1xuICAgICAgICAgICAgc3RhcnQgPSAyO1xuICAgICAgICB9XG4gICAgICAgIGlmIChleHQgIT09IHVuZGVmaW5lZCAmJiBleHQubGVuZ3RoID4gMCAmJiBleHQubGVuZ3RoIDw9IHBhdGgubGVuZ3RoKSB7XG4gICAgICAgICAgICBpZiAoZXh0ID09PSBwYXRoKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuICcnO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgbGV0IGV4dElkeCA9IGV4dC5sZW5ndGggLSAxO1xuICAgICAgICAgICAgbGV0IGZpcnN0Tm9uU2xhc2hFbmQgPSAtMTtcbiAgICAgICAgICAgIGZvciAoaSA9IHBhdGgubGVuZ3RoIC0gMTsgaSA+PSBzdGFydDsgLS1pKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgY29kZSA9IHBhdGguY2hhckNvZGVBdChpKTtcbiAgICAgICAgICAgICAgICBpZiAoaXNQYXRoU2VwYXJhdG9yKGNvZGUpKSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIElmIHdlIHJlYWNoZWQgYSBwYXRoIHNlcGFyYXRvciB0aGF0IHdhcyBub3QgcGFydCBvZiBhIHNldCBvZiBwYXRoXG4gICAgICAgICAgICAgICAgICAgIC8vIHNlcGFyYXRvcnMgYXQgdGhlIGVuZCBvZiB0aGUgc3RyaW5nLCBzdG9wIG5vd1xuICAgICAgICAgICAgICAgICAgICBpZiAoIW1hdGNoZWRTbGFzaCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgc3RhcnQgPSBpICsgMTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBpZiAoZmlyc3ROb25TbGFzaEVuZCA9PT0gLTEpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIFdlIHNhdyB0aGUgZmlyc3Qgbm9uLXBhdGggc2VwYXJhdG9yLCByZW1lbWJlciB0aGlzIGluZGV4IGluIGNhc2VcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIHdlIG5lZWQgaXQgaWYgdGhlIGV4dGVuc2lvbiBlbmRzIHVwIG5vdCBtYXRjaGluZ1xuICAgICAgICAgICAgICAgICAgICAgICAgbWF0Y2hlZFNsYXNoID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgICAgICAgICBmaXJzdE5vblNsYXNoRW5kID0gaSArIDE7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgaWYgKGV4dElkeCA+PSAwKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBUcnkgdG8gbWF0Y2ggdGhlIGV4cGxpY2l0IGV4dGVuc2lvblxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGNvZGUgPT09IGV4dC5jaGFyQ29kZUF0KGV4dElkeCkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoLS1leHRJZHggPT09IC0xKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIFdlIG1hdGNoZWQgdGhlIGV4dGVuc2lvbiwgc28gbWFyayB0aGlzIGFzIHRoZSBlbmQgb2Ygb3VyIHBhdGhcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gY29tcG9uZW50XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVuZCA9IGk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gRXh0ZW5zaW9uIGRvZXMgbm90IG1hdGNoLCBzbyBvdXIgcmVzdWx0IGlzIHRoZSBlbnRpcmUgcGF0aFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIGNvbXBvbmVudFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGV4dElkeCA9IC0xO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVuZCA9IGZpcnN0Tm9uU2xhc2hFbmQ7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoc3RhcnQgPT09IGVuZCkge1xuICAgICAgICAgICAgICAgIGVuZCA9IGZpcnN0Tm9uU2xhc2hFbmQ7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmIChlbmQgPT09IC0xKSB7XG4gICAgICAgICAgICAgICAgZW5kID0gcGF0aC5sZW5ndGg7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gcGF0aC5zbGljZShzdGFydCwgZW5kKTtcbiAgICAgICAgfVxuICAgICAgICBmb3IgKGkgPSBwYXRoLmxlbmd0aCAtIDE7IGkgPj0gc3RhcnQ7IC0taSkge1xuICAgICAgICAgICAgaWYgKGlzUGF0aFNlcGFyYXRvcihwYXRoLmNoYXJDb2RlQXQoaSkpKSB7XG4gICAgICAgICAgICAgICAgLy8gSWYgd2UgcmVhY2hlZCBhIHBhdGggc2VwYXJhdG9yIHRoYXQgd2FzIG5vdCBwYXJ0IG9mIGEgc2V0IG9mIHBhdGhcbiAgICAgICAgICAgICAgICAvLyBzZXBhcmF0b3JzIGF0IHRoZSBlbmQgb2YgdGhlIHN0cmluZywgc3RvcCBub3dcbiAgICAgICAgICAgICAgICBpZiAoIW1hdGNoZWRTbGFzaCkge1xuICAgICAgICAgICAgICAgICAgICBzdGFydCA9IGkgKyAxO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmIChlbmQgPT09IC0xKSB7XG4gICAgICAgICAgICAgICAgLy8gV2Ugc2F3IHRoZSBmaXJzdCBub24tcGF0aCBzZXBhcmF0b3IsIG1hcmsgdGhpcyBhcyB0aGUgZW5kIG9mIG91clxuICAgICAgICAgICAgICAgIC8vIHBhdGggY29tcG9uZW50XG4gICAgICAgICAgICAgICAgbWF0Y2hlZFNsYXNoID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgZW5kID0gaSArIDE7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGVuZCA9PT0gLTEpIHtcbiAgICAgICAgICAgIHJldHVybiAnJztcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gcGF0aC5zbGljZShzdGFydCwgZW5kKTtcbiAgICB9LFxuICAgIGV4dG5hbWUocGF0aCkge1xuICAgICAgICB2YWxpZGF0ZVN0cmluZyhwYXRoLCAncGF0aCcpO1xuICAgICAgICBsZXQgc3RhcnQgPSAwO1xuICAgICAgICBsZXQgc3RhcnREb3QgPSAtMTtcbiAgICAgICAgbGV0IHN0YXJ0UGFydCA9IDA7XG4gICAgICAgIGxldCBlbmQgPSAtMTtcbiAgICAgICAgbGV0IG1hdGNoZWRTbGFzaCA9IHRydWU7XG4gICAgICAgIC8vIFRyYWNrIHRoZSBzdGF0ZSBvZiBjaGFyYWN0ZXJzIChpZiBhbnkpIHdlIHNlZSBiZWZvcmUgb3VyIGZpcnN0IGRvdCBhbmRcbiAgICAgICAgLy8gYWZ0ZXIgYW55IHBhdGggc2VwYXJhdG9yIHdlIGZpbmRcbiAgICAgICAgbGV0IHByZURvdFN0YXRlID0gMDtcbiAgICAgICAgLy8gQ2hlY2sgZm9yIGEgZHJpdmUgbGV0dGVyIHByZWZpeCBzbyBhcyBub3QgdG8gbWlzdGFrZSB0aGUgZm9sbG93aW5nXG4gICAgICAgIC8vIHBhdGggc2VwYXJhdG9yIGFzIGFuIGV4dHJhIHNlcGFyYXRvciBhdCB0aGUgZW5kIG9mIHRoZSBwYXRoIHRoYXQgY2FuIGJlXG4gICAgICAgIC8vIGRpc3JlZ2FyZGVkXG4gICAgICAgIGlmIChwYXRoLmxlbmd0aCA+PSAyICYmXG4gICAgICAgICAgICBwYXRoLmNoYXJDb2RlQXQoMSkgPT09IENIQVJfQ09MT04gJiZcbiAgICAgICAgICAgIGlzV2luZG93c0RldmljZVJvb3QocGF0aC5jaGFyQ29kZUF0KDApKSkge1xuICAgICAgICAgICAgc3RhcnQgPSBzdGFydFBhcnQgPSAyO1xuICAgICAgICB9XG4gICAgICAgIGZvciAobGV0IGkgPSBwYXRoLmxlbmd0aCAtIDE7IGkgPj0gc3RhcnQ7IC0taSkge1xuICAgICAgICAgICAgY29uc3QgY29kZSA9IHBhdGguY2hhckNvZGVBdChpKTtcbiAgICAgICAgICAgIGlmIChpc1BhdGhTZXBhcmF0b3IoY29kZSkpIHtcbiAgICAgICAgICAgICAgICAvLyBJZiB3ZSByZWFjaGVkIGEgcGF0aCBzZXBhcmF0b3IgdGhhdCB3YXMgbm90IHBhcnQgb2YgYSBzZXQgb2YgcGF0aFxuICAgICAgICAgICAgICAgIC8vIHNlcGFyYXRvcnMgYXQgdGhlIGVuZCBvZiB0aGUgc3RyaW5nLCBzdG9wIG5vd1xuICAgICAgICAgICAgICAgIGlmICghbWF0Y2hlZFNsYXNoKSB7XG4gICAgICAgICAgICAgICAgICAgIHN0YXJ0UGFydCA9IGkgKyAxO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoZW5kID09PSAtMSkge1xuICAgICAgICAgICAgICAgIC8vIFdlIHNhdyB0aGUgZmlyc3Qgbm9uLXBhdGggc2VwYXJhdG9yLCBtYXJrIHRoaXMgYXMgdGhlIGVuZCBvZiBvdXJcbiAgICAgICAgICAgICAgICAvLyBleHRlbnNpb25cbiAgICAgICAgICAgICAgICBtYXRjaGVkU2xhc2ggPSBmYWxzZTtcbiAgICAgICAgICAgICAgICBlbmQgPSBpICsgMTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChjb2RlID09PSBDSEFSX0RPVCkge1xuICAgICAgICAgICAgICAgIC8vIElmIHRoaXMgaXMgb3VyIGZpcnN0IGRvdCwgbWFyayBpdCBhcyB0aGUgc3RhcnQgb2Ygb3VyIGV4dGVuc2lvblxuICAgICAgICAgICAgICAgIGlmIChzdGFydERvdCA9PT0gLTEpIHtcbiAgICAgICAgICAgICAgICAgICAgc3RhcnREb3QgPSBpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIGlmIChwcmVEb3RTdGF0ZSAhPT0gMSkge1xuICAgICAgICAgICAgICAgICAgICBwcmVEb3RTdGF0ZSA9IDE7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAoc3RhcnREb3QgIT09IC0xKSB7XG4gICAgICAgICAgICAgICAgLy8gV2Ugc2F3IGEgbm9uLWRvdCBhbmQgbm9uLXBhdGggc2VwYXJhdG9yIGJlZm9yZSBvdXIgZG90LCBzbyB3ZSBzaG91bGRcbiAgICAgICAgICAgICAgICAvLyBoYXZlIGEgZ29vZCBjaGFuY2UgYXQgaGF2aW5nIGEgbm9uLWVtcHR5IGV4dGVuc2lvblxuICAgICAgICAgICAgICAgIHByZURvdFN0YXRlID0gLTE7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHN0YXJ0RG90ID09PSAtMSB8fFxuICAgICAgICAgICAgZW5kID09PSAtMSB8fFxuICAgICAgICAgICAgLy8gV2Ugc2F3IGEgbm9uLWRvdCBjaGFyYWN0ZXIgaW1tZWRpYXRlbHkgYmVmb3JlIHRoZSBkb3RcbiAgICAgICAgICAgIHByZURvdFN0YXRlID09PSAwIHx8XG4gICAgICAgICAgICAvLyBUaGUgKHJpZ2h0LW1vc3QpIHRyaW1tZWQgcGF0aCBjb21wb25lbnQgaXMgZXhhY3RseSAnLi4nXG4gICAgICAgICAgICAocHJlRG90U3RhdGUgPT09IDEgJiZcbiAgICAgICAgICAgICAgICBzdGFydERvdCA9PT0gZW5kIC0gMSAmJlxuICAgICAgICAgICAgICAgIHN0YXJ0RG90ID09PSBzdGFydFBhcnQgKyAxKSkge1xuICAgICAgICAgICAgcmV0dXJuICcnO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBwYXRoLnNsaWNlKHN0YXJ0RG90LCBlbmQpO1xuICAgIH0sXG4gICAgZm9ybWF0OiBfZm9ybWF0LmJpbmQobnVsbCwgJ1xcXFwnKSxcbiAgICBwYXJzZShwYXRoKSB7XG4gICAgICAgIHZhbGlkYXRlU3RyaW5nKHBhdGgsICdwYXRoJyk7XG4gICAgICAgIGNvbnN0IHJldCA9IHsgcm9vdDogJycsIGRpcjogJycsIGJhc2U6ICcnLCBleHQ6ICcnLCBuYW1lOiAnJyB9O1xuICAgICAgICBpZiAocGF0aC5sZW5ndGggPT09IDApIHtcbiAgICAgICAgICAgIHJldHVybiByZXQ7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgbGVuID0gcGF0aC5sZW5ndGg7XG4gICAgICAgIGxldCByb290RW5kID0gMDtcbiAgICAgICAgbGV0IGNvZGUgPSBwYXRoLmNoYXJDb2RlQXQoMCk7XG4gICAgICAgIGlmIChsZW4gPT09IDEpIHtcbiAgICAgICAgICAgIGlmIChpc1BhdGhTZXBhcmF0b3IoY29kZSkpIHtcbiAgICAgICAgICAgICAgICAvLyBgcGF0aGAgY29udGFpbnMganVzdCBhIHBhdGggc2VwYXJhdG9yLCBleGl0IGVhcmx5IHRvIGF2b2lkXG4gICAgICAgICAgICAgICAgLy8gdW5uZWNlc3Nhcnkgd29ya1xuICAgICAgICAgICAgICAgIHJldC5yb290ID0gcmV0LmRpciA9IHBhdGg7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHJldDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldC5iYXNlID0gcmV0Lm5hbWUgPSBwYXRoO1xuICAgICAgICAgICAgcmV0dXJuIHJldDtcbiAgICAgICAgfVxuICAgICAgICAvLyBUcnkgdG8gbWF0Y2ggYSByb290XG4gICAgICAgIGlmIChpc1BhdGhTZXBhcmF0b3IoY29kZSkpIHtcbiAgICAgICAgICAgIC8vIFBvc3NpYmxlIFVOQyByb290XG4gICAgICAgICAgICByb290RW5kID0gMTtcbiAgICAgICAgICAgIGlmIChpc1BhdGhTZXBhcmF0b3IocGF0aC5jaGFyQ29kZUF0KDEpKSkge1xuICAgICAgICAgICAgICAgIC8vIE1hdGNoZWQgZG91YmxlIHBhdGggc2VwYXJhdG9yIGF0IGJlZ2lubmluZ1xuICAgICAgICAgICAgICAgIGxldCBqID0gMjtcbiAgICAgICAgICAgICAgICBsZXQgbGFzdCA9IGo7XG4gICAgICAgICAgICAgICAgLy8gTWF0Y2ggMSBvciBtb3JlIG5vbi1wYXRoIHNlcGFyYXRvcnNcbiAgICAgICAgICAgICAgICB3aGlsZSAoaiA8IGxlbiAmJiAhaXNQYXRoU2VwYXJhdG9yKHBhdGguY2hhckNvZGVBdChqKSkpIHtcbiAgICAgICAgICAgICAgICAgICAgaisrO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAoaiA8IGxlbiAmJiBqICE9PSBsYXN0KSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIE1hdGNoZWQhXG4gICAgICAgICAgICAgICAgICAgIGxhc3QgPSBqO1xuICAgICAgICAgICAgICAgICAgICAvLyBNYXRjaCAxIG9yIG1vcmUgcGF0aCBzZXBhcmF0b3JzXG4gICAgICAgICAgICAgICAgICAgIHdoaWxlIChqIDwgbGVuICYmIGlzUGF0aFNlcGFyYXRvcihwYXRoLmNoYXJDb2RlQXQoaikpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBqKys7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgaWYgKGogPCBsZW4gJiYgaiAhPT0gbGFzdCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgLy8gTWF0Y2hlZCFcbiAgICAgICAgICAgICAgICAgICAgICAgIGxhc3QgPSBqO1xuICAgICAgICAgICAgICAgICAgICAgICAgLy8gTWF0Y2ggMSBvciBtb3JlIG5vbi1wYXRoIHNlcGFyYXRvcnNcbiAgICAgICAgICAgICAgICAgICAgICAgIHdoaWxlIChqIDwgbGVuICYmICFpc1BhdGhTZXBhcmF0b3IocGF0aC5jaGFyQ29kZUF0KGopKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGorKztcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChqID09PSBsZW4pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBXZSBtYXRjaGVkIGEgVU5DIHJvb3Qgb25seVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJvb3RFbmQgPSBqO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgZWxzZSBpZiAoaiAhPT0gbGFzdCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIFdlIG1hdGNoZWQgYSBVTkMgcm9vdCB3aXRoIGxlZnRvdmVyc1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJvb3RFbmQgPSBqICsgMTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChpc1dpbmRvd3NEZXZpY2VSb290KGNvZGUpICYmIHBhdGguY2hhckNvZGVBdCgxKSA9PT0gQ0hBUl9DT0xPTikge1xuICAgICAgICAgICAgLy8gUG9zc2libGUgZGV2aWNlIHJvb3RcbiAgICAgICAgICAgIGlmIChsZW4gPD0gMikge1xuICAgICAgICAgICAgICAgIC8vIGBwYXRoYCBjb250YWlucyBqdXN0IGEgZHJpdmUgcm9vdCwgZXhpdCBlYXJseSB0byBhdm9pZFxuICAgICAgICAgICAgICAgIC8vIHVubmVjZXNzYXJ5IHdvcmtcbiAgICAgICAgICAgICAgICByZXQucm9vdCA9IHJldC5kaXIgPSBwYXRoO1xuICAgICAgICAgICAgICAgIHJldHVybiByZXQ7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByb290RW5kID0gMjtcbiAgICAgICAgICAgIGlmIChpc1BhdGhTZXBhcmF0b3IocGF0aC5jaGFyQ29kZUF0KDIpKSkge1xuICAgICAgICAgICAgICAgIGlmIChsZW4gPT09IDMpIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gYHBhdGhgIGNvbnRhaW5zIGp1c3QgYSBkcml2ZSByb290LCBleGl0IGVhcmx5IHRvIGF2b2lkXG4gICAgICAgICAgICAgICAgICAgIC8vIHVubmVjZXNzYXJ5IHdvcmtcbiAgICAgICAgICAgICAgICAgICAgcmV0LnJvb3QgPSByZXQuZGlyID0gcGF0aDtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHJldDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcm9vdEVuZCA9IDM7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHJvb3RFbmQgPiAwKSB7XG4gICAgICAgICAgICByZXQucm9vdCA9IHBhdGguc2xpY2UoMCwgcm9vdEVuZCk7XG4gICAgICAgIH1cbiAgICAgICAgbGV0IHN0YXJ0RG90ID0gLTE7XG4gICAgICAgIGxldCBzdGFydFBhcnQgPSByb290RW5kO1xuICAgICAgICBsZXQgZW5kID0gLTE7XG4gICAgICAgIGxldCBtYXRjaGVkU2xhc2ggPSB0cnVlO1xuICAgICAgICBsZXQgaSA9IHBhdGgubGVuZ3RoIC0gMTtcbiAgICAgICAgLy8gVHJhY2sgdGhlIHN0YXRlIG9mIGNoYXJhY3RlcnMgKGlmIGFueSkgd2Ugc2VlIGJlZm9yZSBvdXIgZmlyc3QgZG90IGFuZFxuICAgICAgICAvLyBhZnRlciBhbnkgcGF0aCBzZXBhcmF0b3Igd2UgZmluZFxuICAgICAgICBsZXQgcHJlRG90U3RhdGUgPSAwO1xuICAgICAgICAvLyBHZXQgbm9uLWRpciBpbmZvXG4gICAgICAgIGZvciAoOyBpID49IHJvb3RFbmQ7IC0taSkge1xuICAgICAgICAgICAgY29kZSA9IHBhdGguY2hhckNvZGVBdChpKTtcbiAgICAgICAgICAgIGlmIChpc1BhdGhTZXBhcmF0b3IoY29kZSkpIHtcbiAgICAgICAgICAgICAgICAvLyBJZiB3ZSByZWFjaGVkIGEgcGF0aCBzZXBhcmF0b3IgdGhhdCB3YXMgbm90IHBhcnQgb2YgYSBzZXQgb2YgcGF0aFxuICAgICAgICAgICAgICAgIC8vIHNlcGFyYXRvcnMgYXQgdGhlIGVuZCBvZiB0aGUgc3RyaW5nLCBzdG9wIG5vd1xuICAgICAgICAgICAgICAgIGlmICghbWF0Y2hlZFNsYXNoKSB7XG4gICAgICAgICAgICAgICAgICAgIHN0YXJ0UGFydCA9IGkgKyAxO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoZW5kID09PSAtMSkge1xuICAgICAgICAgICAgICAgIC8vIFdlIHNhdyB0aGUgZmlyc3Qgbm9uLXBhdGggc2VwYXJhdG9yLCBtYXJrIHRoaXMgYXMgdGhlIGVuZCBvZiBvdXJcbiAgICAgICAgICAgICAgICAvLyBleHRlbnNpb25cbiAgICAgICAgICAgICAgICBtYXRjaGVkU2xhc2ggPSBmYWxzZTtcbiAgICAgICAgICAgICAgICBlbmQgPSBpICsgMTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChjb2RlID09PSBDSEFSX0RPVCkge1xuICAgICAgICAgICAgICAgIC8vIElmIHRoaXMgaXMgb3VyIGZpcnN0IGRvdCwgbWFyayBpdCBhcyB0aGUgc3RhcnQgb2Ygb3VyIGV4dGVuc2lvblxuICAgICAgICAgICAgICAgIGlmIChzdGFydERvdCA9PT0gLTEpIHtcbiAgICAgICAgICAgICAgICAgICAgc3RhcnREb3QgPSBpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIGlmIChwcmVEb3RTdGF0ZSAhPT0gMSkge1xuICAgICAgICAgICAgICAgICAgICBwcmVEb3RTdGF0ZSA9IDE7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAoc3RhcnREb3QgIT09IC0xKSB7XG4gICAgICAgICAgICAgICAgLy8gV2Ugc2F3IGEgbm9uLWRvdCBhbmQgbm9uLXBhdGggc2VwYXJhdG9yIGJlZm9yZSBvdXIgZG90LCBzbyB3ZSBzaG91bGRcbiAgICAgICAgICAgICAgICAvLyBoYXZlIGEgZ29vZCBjaGFuY2UgYXQgaGF2aW5nIGEgbm9uLWVtcHR5IGV4dGVuc2lvblxuICAgICAgICAgICAgICAgIHByZURvdFN0YXRlID0gLTE7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGVuZCAhPT0gLTEpIHtcbiAgICAgICAgICAgIGlmIChzdGFydERvdCA9PT0gLTEgfHxcbiAgICAgICAgICAgICAgICAvLyBXZSBzYXcgYSBub24tZG90IGNoYXJhY3RlciBpbW1lZGlhdGVseSBiZWZvcmUgdGhlIGRvdFxuICAgICAgICAgICAgICAgIHByZURvdFN0YXRlID09PSAwIHx8XG4gICAgICAgICAgICAgICAgLy8gVGhlIChyaWdodC1tb3N0KSB0cmltbWVkIHBhdGggY29tcG9uZW50IGlzIGV4YWN0bHkgJy4uJ1xuICAgICAgICAgICAgICAgIChwcmVEb3RTdGF0ZSA9PT0gMSAmJlxuICAgICAgICAgICAgICAgICAgICBzdGFydERvdCA9PT0gZW5kIC0gMSAmJlxuICAgICAgICAgICAgICAgICAgICBzdGFydERvdCA9PT0gc3RhcnRQYXJ0ICsgMSkpIHtcbiAgICAgICAgICAgICAgICByZXQuYmFzZSA9IHJldC5uYW1lID0gcGF0aC5zbGljZShzdGFydFBhcnQsIGVuZCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICByZXQubmFtZSA9IHBhdGguc2xpY2Uoc3RhcnRQYXJ0LCBzdGFydERvdCk7XG4gICAgICAgICAgICAgICAgcmV0LmJhc2UgPSBwYXRoLnNsaWNlKHN0YXJ0UGFydCwgZW5kKTtcbiAgICAgICAgICAgICAgICByZXQuZXh0ID0gcGF0aC5zbGljZShzdGFydERvdCwgZW5kKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICAvLyBJZiB0aGUgZGlyZWN0b3J5IGlzIHRoZSByb290LCB1c2UgdGhlIGVudGlyZSByb290IGFzIHRoZSBgZGlyYCBpbmNsdWRpbmdcbiAgICAgICAgLy8gdGhlIHRyYWlsaW5nIHNsYXNoIGlmIGFueSAoYEM6XFxhYmNgIC0+IGBDOlxcYCkuIE90aGVyd2lzZSwgc3RyaXAgb3V0IHRoZVxuICAgICAgICAvLyB0cmFpbGluZyBzbGFzaCAoYEM6XFxhYmNcXGRlZmAgLT4gYEM6XFxhYmNgKS5cbiAgICAgICAgaWYgKHN0YXJ0UGFydCA+IDAgJiYgc3RhcnRQYXJ0ICE9PSByb290RW5kKSB7XG4gICAgICAgICAgICByZXQuZGlyID0gcGF0aC5zbGljZSgwLCBzdGFydFBhcnQgLSAxKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHJldC5kaXIgPSByZXQucm9vdDtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gcmV0O1xuICAgIH0sXG4gICAgc2VwOiAnXFxcXCcsXG4gICAgZGVsaW1pdGVyOiAnOycsXG4gICAgd2luMzI6IG51bGwsXG4gICAgcG9zaXg6IG51bGxcbn07XG5jb25zdCBwb3NpeEN3ZCA9ICgoKSA9PiB7XG4gICAgaWYgKHBsYXRmb3JtSXNXaW4zMikge1xuICAgICAgICAvLyBDb252ZXJ0cyBXaW5kb3dzJyBiYWNrc2xhc2ggcGF0aCBzZXBhcmF0b3JzIHRvIFBPU0lYIGZvcndhcmQgc2xhc2hlc1xuICAgICAgICAvLyBhbmQgdHJ1bmNhdGVzIGFueSBkcml2ZSBpbmRpY2F0b3JcbiAgICAgICAgY29uc3QgcmVnZXhwID0gL1xcXFwvZztcbiAgICAgICAgcmV0dXJuICgpID0+IHtcbiAgICAgICAgICAgIGNvbnN0IGN3ZCA9IHByb2Nlc3MuY3dkKCkucmVwbGFjZShyZWdleHAsICcvJyk7XG4gICAgICAgICAgICByZXR1cm4gY3dkLnNsaWNlKGN3ZC5pbmRleE9mKCcvJykpO1xuICAgICAgICB9O1xuICAgIH1cbiAgICAvLyBXZSdyZSBhbHJlYWR5IG9uIFBPU0lYLCBubyBuZWVkIGZvciBhbnkgdHJhbnNmb3JtYXRpb25zXG4gICAgcmV0dXJuICgpID0+IHByb2Nlc3MuY3dkKCk7XG59KSgpO1xuZXhwb3J0IGNvbnN0IHBvc2l4ID0ge1xuICAgIC8vIHBhdGgucmVzb2x2ZShbZnJvbSAuLi5dLCB0bylcbiAgICByZXNvbHZlKC4uLnBhdGhTZWdtZW50cykge1xuICAgICAgICBsZXQgcmVzb2x2ZWRQYXRoID0gJyc7XG4gICAgICAgIGxldCByZXNvbHZlZEFic29sdXRlID0gZmFsc2U7XG4gICAgICAgIGZvciAobGV0IGkgPSBwYXRoU2VnbWVudHMubGVuZ3RoIC0gMTsgaSA+PSAtMSAmJiAhcmVzb2x2ZWRBYnNvbHV0ZTsgaS0tKSB7XG4gICAgICAgICAgICBjb25zdCBwYXRoID0gaSA+PSAwID8gcGF0aFNlZ21lbnRzW2ldIDogcG9zaXhDd2QoKTtcbiAgICAgICAgICAgIHZhbGlkYXRlU3RyaW5nKHBhdGgsICdwYXRoJyk7XG4gICAgICAgICAgICAvLyBTa2lwIGVtcHR5IGVudHJpZXNcbiAgICAgICAgICAgIGlmIChwYXRoLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmVzb2x2ZWRQYXRoID0gYCR7cGF0aH0vJHtyZXNvbHZlZFBhdGh9YDtcbiAgICAgICAgICAgIHJlc29sdmVkQWJzb2x1dGUgPSBwYXRoLmNoYXJDb2RlQXQoMCkgPT09IENIQVJfRk9SV0FSRF9TTEFTSDtcbiAgICAgICAgfVxuICAgICAgICAvLyBBdCB0aGlzIHBvaW50IHRoZSBwYXRoIHNob3VsZCBiZSByZXNvbHZlZCB0byBhIGZ1bGwgYWJzb2x1dGUgcGF0aCwgYnV0XG4gICAgICAgIC8vIGhhbmRsZSByZWxhdGl2ZSBwYXRocyB0byBiZSBzYWZlIChtaWdodCBoYXBwZW4gd2hlbiBwcm9jZXNzLmN3ZCgpIGZhaWxzKVxuICAgICAgICAvLyBOb3JtYWxpemUgdGhlIHBhdGhcbiAgICAgICAgcmVzb2x2ZWRQYXRoID0gbm9ybWFsaXplU3RyaW5nKHJlc29sdmVkUGF0aCwgIXJlc29sdmVkQWJzb2x1dGUsICcvJywgaXNQb3NpeFBhdGhTZXBhcmF0b3IpO1xuICAgICAgICBpZiAocmVzb2x2ZWRBYnNvbHV0ZSkge1xuICAgICAgICAgICAgcmV0dXJuIGAvJHtyZXNvbHZlZFBhdGh9YDtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gcmVzb2x2ZWRQYXRoLmxlbmd0aCA+IDAgPyByZXNvbHZlZFBhdGggOiAnLic7XG4gICAgfSxcbiAgICBub3JtYWxpemUocGF0aCkge1xuICAgICAgICB2YWxpZGF0ZVN0cmluZyhwYXRoLCAncGF0aCcpO1xuICAgICAgICBpZiAocGF0aC5sZW5ndGggPT09IDApIHtcbiAgICAgICAgICAgIHJldHVybiAnLic7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgaXNBYnNvbHV0ZSA9IHBhdGguY2hhckNvZGVBdCgwKSA9PT0gQ0hBUl9GT1JXQVJEX1NMQVNIO1xuICAgICAgICBjb25zdCB0cmFpbGluZ1NlcGFyYXRvciA9IHBhdGguY2hhckNvZGVBdChwYXRoLmxlbmd0aCAtIDEpID09PSBDSEFSX0ZPUldBUkRfU0xBU0g7XG4gICAgICAgIC8vIE5vcm1hbGl6ZSB0aGUgcGF0aFxuICAgICAgICBwYXRoID0gbm9ybWFsaXplU3RyaW5nKHBhdGgsICFpc0Fic29sdXRlLCAnLycsIGlzUG9zaXhQYXRoU2VwYXJhdG9yKTtcbiAgICAgICAgaWYgKHBhdGgubGVuZ3RoID09PSAwKSB7XG4gICAgICAgICAgICBpZiAoaXNBYnNvbHV0ZSkge1xuICAgICAgICAgICAgICAgIHJldHVybiAnLyc7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gdHJhaWxpbmdTZXBhcmF0b3IgPyAnLi8nIDogJy4nO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0cmFpbGluZ1NlcGFyYXRvcikge1xuICAgICAgICAgICAgcGF0aCArPSAnLyc7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGlzQWJzb2x1dGUgPyBgLyR7cGF0aH1gIDogcGF0aDtcbiAgICB9LFxuICAgIGlzQWJzb2x1dGUocGF0aCkge1xuICAgICAgICB2YWxpZGF0ZVN0cmluZyhwYXRoLCAncGF0aCcpO1xuICAgICAgICByZXR1cm4gcGF0aC5sZW5ndGggPiAwICYmIHBhdGguY2hhckNvZGVBdCgwKSA9PT0gQ0hBUl9GT1JXQVJEX1NMQVNIO1xuICAgIH0sXG4gICAgam9pbiguLi5wYXRocykge1xuICAgICAgICBpZiAocGF0aHMubGVuZ3RoID09PSAwKSB7XG4gICAgICAgICAgICByZXR1cm4gJy4nO1xuICAgICAgICB9XG4gICAgICAgIGxldCBqb2luZWQ7XG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgcGF0aHMubGVuZ3RoOyArK2kpIHtcbiAgICAgICAgICAgIGNvbnN0IGFyZyA9IHBhdGhzW2ldO1xuICAgICAgICAgICAgdmFsaWRhdGVTdHJpbmcoYXJnLCAncGF0aCcpO1xuICAgICAgICAgICAgaWYgKGFyZy5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICAgICAgaWYgKGpvaW5lZCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgICAgIGpvaW5lZCA9IGFyZztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIGpvaW5lZCArPSBgLyR7YXJnfWA7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGlmIChqb2luZWQgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgcmV0dXJuICcuJztcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gcG9zaXgubm9ybWFsaXplKGpvaW5lZCk7XG4gICAgfSxcbiAgICByZWxhdGl2ZShmcm9tLCB0bykge1xuICAgICAgICB2YWxpZGF0ZVN0cmluZyhmcm9tLCAnZnJvbScpO1xuICAgICAgICB2YWxpZGF0ZVN0cmluZyh0bywgJ3RvJyk7XG4gICAgICAgIGlmIChmcm9tID09PSB0bykge1xuICAgICAgICAgICAgcmV0dXJuICcnO1xuICAgICAgICB9XG4gICAgICAgIC8vIFRyaW0gbGVhZGluZyBmb3J3YXJkIHNsYXNoZXMuXG4gICAgICAgIGZyb20gPSBwb3NpeC5yZXNvbHZlKGZyb20pO1xuICAgICAgICB0byA9IHBvc2l4LnJlc29sdmUodG8pO1xuICAgICAgICBpZiAoZnJvbSA9PT0gdG8pIHtcbiAgICAgICAgICAgIHJldHVybiAnJztcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBmcm9tU3RhcnQgPSAxO1xuICAgICAgICBjb25zdCBmcm9tRW5kID0gZnJvbS5sZW5ndGg7XG4gICAgICAgIGNvbnN0IGZyb21MZW4gPSBmcm9tRW5kIC0gZnJvbVN0YXJ0O1xuICAgICAgICBjb25zdCB0b1N0YXJ0ID0gMTtcbiAgICAgICAgY29uc3QgdG9MZW4gPSB0by5sZW5ndGggLSB0b1N0YXJ0O1xuICAgICAgICAvLyBDb21wYXJlIHBhdGhzIHRvIGZpbmQgdGhlIGxvbmdlc3QgY29tbW9uIHBhdGggZnJvbSByb290XG4gICAgICAgIGNvbnN0IGxlbmd0aCA9IChmcm9tTGVuIDwgdG9MZW4gPyBmcm9tTGVuIDogdG9MZW4pO1xuICAgICAgICBsZXQgbGFzdENvbW1vblNlcCA9IC0xO1xuICAgICAgICBsZXQgaSA9IDA7XG4gICAgICAgIGZvciAoOyBpIDwgbGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIGNvbnN0IGZyb21Db2RlID0gZnJvbS5jaGFyQ29kZUF0KGZyb21TdGFydCArIGkpO1xuICAgICAgICAgICAgaWYgKGZyb21Db2RlICE9PSB0by5jaGFyQ29kZUF0KHRvU3RhcnQgKyBpKSkge1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAoZnJvbUNvZGUgPT09IENIQVJfRk9SV0FSRF9TTEFTSCkge1xuICAgICAgICAgICAgICAgIGxhc3RDb21tb25TZXAgPSBpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGlmIChpID09PSBsZW5ndGgpIHtcbiAgICAgICAgICAgIGlmICh0b0xlbiA+IGxlbmd0aCkge1xuICAgICAgICAgICAgICAgIGlmICh0by5jaGFyQ29kZUF0KHRvU3RhcnQgKyBpKSA9PT0gQ0hBUl9GT1JXQVJEX1NMQVNIKSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIFdlIGdldCBoZXJlIGlmIGBmcm9tYCBpcyB0aGUgZXhhY3QgYmFzZSBwYXRoIGZvciBgdG9gLlxuICAgICAgICAgICAgICAgICAgICAvLyBGb3IgZXhhbXBsZTogZnJvbT0nL2Zvby9iYXInOyB0bz0nL2Zvby9iYXIvYmF6J1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdG8uc2xpY2UodG9TdGFydCArIGkgKyAxKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKGkgPT09IDApIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gV2UgZ2V0IGhlcmUgaWYgYGZyb21gIGlzIHRoZSByb290XG4gICAgICAgICAgICAgICAgICAgIC8vIEZvciBleGFtcGxlOiBmcm9tPScvJzsgdG89Jy9mb28nXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB0by5zbGljZSh0b1N0YXJ0ICsgaSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAoZnJvbUxlbiA+IGxlbmd0aCkge1xuICAgICAgICAgICAgICAgIGlmIChmcm9tLmNoYXJDb2RlQXQoZnJvbVN0YXJ0ICsgaSkgPT09IENIQVJfRk9SV0FSRF9TTEFTSCkge1xuICAgICAgICAgICAgICAgICAgICAvLyBXZSBnZXQgaGVyZSBpZiBgdG9gIGlzIHRoZSBleGFjdCBiYXNlIHBhdGggZm9yIGBmcm9tYC5cbiAgICAgICAgICAgICAgICAgICAgLy8gRm9yIGV4YW1wbGU6IGZyb209Jy9mb28vYmFyL2Jheic7IHRvPScvZm9vL2JhcidcbiAgICAgICAgICAgICAgICAgICAgbGFzdENvbW1vblNlcCA9IGk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2UgaWYgKGkgPT09IDApIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gV2UgZ2V0IGhlcmUgaWYgYHRvYCBpcyB0aGUgcm9vdC5cbiAgICAgICAgICAgICAgICAgICAgLy8gRm9yIGV4YW1wbGU6IGZyb209Jy9mb28vYmFyJzsgdG89Jy8nXG4gICAgICAgICAgICAgICAgICAgIGxhc3RDb21tb25TZXAgPSAwO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBsZXQgb3V0ID0gJyc7XG4gICAgICAgIC8vIEdlbmVyYXRlIHRoZSByZWxhdGl2ZSBwYXRoIGJhc2VkIG9uIHRoZSBwYXRoIGRpZmZlcmVuY2UgYmV0d2VlbiBgdG9gXG4gICAgICAgIC8vIGFuZCBgZnJvbWAuXG4gICAgICAgIGZvciAoaSA9IGZyb21TdGFydCArIGxhc3RDb21tb25TZXAgKyAxOyBpIDw9IGZyb21FbmQ7ICsraSkge1xuICAgICAgICAgICAgaWYgKGkgPT09IGZyb21FbmQgfHwgZnJvbS5jaGFyQ29kZUF0KGkpID09PSBDSEFSX0ZPUldBUkRfU0xBU0gpIHtcbiAgICAgICAgICAgICAgICBvdXQgKz0gb3V0Lmxlbmd0aCA9PT0gMCA/ICcuLicgOiAnLy4uJztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICAvLyBMYXN0bHksIGFwcGVuZCB0aGUgcmVzdCBvZiB0aGUgZGVzdGluYXRpb24gKGB0b2ApIHBhdGggdGhhdCBjb21lcyBhZnRlclxuICAgICAgICAvLyB0aGUgY29tbW9uIHBhdGggcGFydHMuXG4gICAgICAgIHJldHVybiBgJHtvdXR9JHt0by5zbGljZSh0b1N0YXJ0ICsgbGFzdENvbW1vblNlcCl9YDtcbiAgICB9LFxuICAgIHRvTmFtZXNwYWNlZFBhdGgocGF0aCkge1xuICAgICAgICAvLyBOb24tb3Agb24gcG9zaXggc3lzdGVtc1xuICAgICAgICByZXR1cm4gcGF0aDtcbiAgICB9LFxuICAgIGRpcm5hbWUocGF0aCkge1xuICAgICAgICB2YWxpZGF0ZVN0cmluZyhwYXRoLCAncGF0aCcpO1xuICAgICAgICBpZiAocGF0aC5sZW5ndGggPT09IDApIHtcbiAgICAgICAgICAgIHJldHVybiAnLic7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgaGFzUm9vdCA9IHBhdGguY2hhckNvZGVBdCgwKSA9PT0gQ0hBUl9GT1JXQVJEX1NMQVNIO1xuICAgICAgICBsZXQgZW5kID0gLTE7XG4gICAgICAgIGxldCBtYXRjaGVkU2xhc2ggPSB0cnVlO1xuICAgICAgICBmb3IgKGxldCBpID0gcGF0aC5sZW5ndGggLSAxOyBpID49IDE7IC0taSkge1xuICAgICAgICAgICAgaWYgKHBhdGguY2hhckNvZGVBdChpKSA9PT0gQ0hBUl9GT1JXQVJEX1NMQVNIKSB7XG4gICAgICAgICAgICAgICAgaWYgKCFtYXRjaGVkU2xhc2gpIHtcbiAgICAgICAgICAgICAgICAgICAgZW5kID0gaTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgLy8gV2Ugc2F3IHRoZSBmaXJzdCBub24tcGF0aCBzZXBhcmF0b3JcbiAgICAgICAgICAgICAgICBtYXRjaGVkU2xhc2ggPSBmYWxzZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBpZiAoZW5kID09PSAtMSkge1xuICAgICAgICAgICAgcmV0dXJuIGhhc1Jvb3QgPyAnLycgOiAnLic7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGhhc1Jvb3QgJiYgZW5kID09PSAxKSB7XG4gICAgICAgICAgICByZXR1cm4gJy8vJztcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gcGF0aC5zbGljZSgwLCBlbmQpO1xuICAgIH0sXG4gICAgYmFzZW5hbWUocGF0aCwgZXh0KSB7XG4gICAgICAgIGlmIChleHQgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgdmFsaWRhdGVTdHJpbmcoZXh0LCAnZXh0Jyk7XG4gICAgICAgIH1cbiAgICAgICAgdmFsaWRhdGVTdHJpbmcocGF0aCwgJ3BhdGgnKTtcbiAgICAgICAgbGV0IHN0YXJ0ID0gMDtcbiAgICAgICAgbGV0IGVuZCA9IC0xO1xuICAgICAgICBsZXQgbWF0Y2hlZFNsYXNoID0gdHJ1ZTtcbiAgICAgICAgbGV0IGk7XG4gICAgICAgIGlmIChleHQgIT09IHVuZGVmaW5lZCAmJiBleHQubGVuZ3RoID4gMCAmJiBleHQubGVuZ3RoIDw9IHBhdGgubGVuZ3RoKSB7XG4gICAgICAgICAgICBpZiAoZXh0ID09PSBwYXRoKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuICcnO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgbGV0IGV4dElkeCA9IGV4dC5sZW5ndGggLSAxO1xuICAgICAgICAgICAgbGV0IGZpcnN0Tm9uU2xhc2hFbmQgPSAtMTtcbiAgICAgICAgICAgIGZvciAoaSA9IHBhdGgubGVuZ3RoIC0gMTsgaSA+PSAwOyAtLWkpIHtcbiAgICAgICAgICAgICAgICBjb25zdCBjb2RlID0gcGF0aC5jaGFyQ29kZUF0KGkpO1xuICAgICAgICAgICAgICAgIGlmIChjb2RlID09PSBDSEFSX0ZPUldBUkRfU0xBU0gpIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gSWYgd2UgcmVhY2hlZCBhIHBhdGggc2VwYXJhdG9yIHRoYXQgd2FzIG5vdCBwYXJ0IG9mIGEgc2V0IG9mIHBhdGhcbiAgICAgICAgICAgICAgICAgICAgLy8gc2VwYXJhdG9ycyBhdCB0aGUgZW5kIG9mIHRoZSBzdHJpbmcsIHN0b3Agbm93XG4gICAgICAgICAgICAgICAgICAgIGlmICghbWF0Y2hlZFNsYXNoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBzdGFydCA9IGkgKyAxO1xuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChmaXJzdE5vblNsYXNoRW5kID09PSAtMSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgLy8gV2Ugc2F3IHRoZSBmaXJzdCBub24tcGF0aCBzZXBhcmF0b3IsIHJlbWVtYmVyIHRoaXMgaW5kZXggaW4gY2FzZVxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gd2UgbmVlZCBpdCBpZiB0aGUgZXh0ZW5zaW9uIGVuZHMgdXAgbm90IG1hdGNoaW5nXG4gICAgICAgICAgICAgICAgICAgICAgICBtYXRjaGVkU2xhc2ggPSBmYWxzZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGZpcnN0Tm9uU2xhc2hFbmQgPSBpICsgMTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBpZiAoZXh0SWR4ID49IDApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIFRyeSB0byBtYXRjaCB0aGUgZXhwbGljaXQgZXh0ZW5zaW9uXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoY29kZSA9PT0gZXh0LmNoYXJDb2RlQXQoZXh0SWR4KSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICgtLWV4dElkeCA9PT0gLTEpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gV2UgbWF0Y2hlZCB0aGUgZXh0ZW5zaW9uLCBzbyBtYXJrIHRoaXMgYXMgdGhlIGVuZCBvZiBvdXIgcGF0aFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBjb21wb25lbnRcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZW5kID0gaTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBFeHRlbnNpb24gZG9lcyBub3QgbWF0Y2gsIHNvIG91ciByZXN1bHQgaXMgdGhlIGVudGlyZSBwYXRoXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gY29tcG9uZW50XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZXh0SWR4ID0gLTE7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZW5kID0gZmlyc3ROb25TbGFzaEVuZDtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChzdGFydCA9PT0gZW5kKSB7XG4gICAgICAgICAgICAgICAgZW5kID0gZmlyc3ROb25TbGFzaEVuZDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKGVuZCA9PT0gLTEpIHtcbiAgICAgICAgICAgICAgICBlbmQgPSBwYXRoLmxlbmd0aDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBwYXRoLnNsaWNlKHN0YXJ0LCBlbmQpO1xuICAgICAgICB9XG4gICAgICAgIGZvciAoaSA9IHBhdGgubGVuZ3RoIC0gMTsgaSA+PSAwOyAtLWkpIHtcbiAgICAgICAgICAgIGlmIChwYXRoLmNoYXJDb2RlQXQoaSkgPT09IENIQVJfRk9SV0FSRF9TTEFTSCkge1xuICAgICAgICAgICAgICAgIC8vIElmIHdlIHJlYWNoZWQgYSBwYXRoIHNlcGFyYXRvciB0aGF0IHdhcyBub3QgcGFydCBvZiBhIHNldCBvZiBwYXRoXG4gICAgICAgICAgICAgICAgLy8gc2VwYXJhdG9ycyBhdCB0aGUgZW5kIG9mIHRoZSBzdHJpbmcsIHN0b3Agbm93XG4gICAgICAgICAgICAgICAgaWYgKCFtYXRjaGVkU2xhc2gpIHtcbiAgICAgICAgICAgICAgICAgICAgc3RhcnQgPSBpICsgMTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAoZW5kID09PSAtMSkge1xuICAgICAgICAgICAgICAgIC8vIFdlIHNhdyB0aGUgZmlyc3Qgbm9uLXBhdGggc2VwYXJhdG9yLCBtYXJrIHRoaXMgYXMgdGhlIGVuZCBvZiBvdXJcbiAgICAgICAgICAgICAgICAvLyBwYXRoIGNvbXBvbmVudFxuICAgICAgICAgICAgICAgIG1hdGNoZWRTbGFzaCA9IGZhbHNlO1xuICAgICAgICAgICAgICAgIGVuZCA9IGkgKyAxO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGlmIChlbmQgPT09IC0xKSB7XG4gICAgICAgICAgICByZXR1cm4gJyc7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHBhdGguc2xpY2Uoc3RhcnQsIGVuZCk7XG4gICAgfSxcbiAgICBleHRuYW1lKHBhdGgpIHtcbiAgICAgICAgdmFsaWRhdGVTdHJpbmcocGF0aCwgJ3BhdGgnKTtcbiAgICAgICAgbGV0IHN0YXJ0RG90ID0gLTE7XG4gICAgICAgIGxldCBzdGFydFBhcnQgPSAwO1xuICAgICAgICBsZXQgZW5kID0gLTE7XG4gICAgICAgIGxldCBtYXRjaGVkU2xhc2ggPSB0cnVlO1xuICAgICAgICAvLyBUcmFjayB0aGUgc3RhdGUgb2YgY2hhcmFjdGVycyAoaWYgYW55KSB3ZSBzZWUgYmVmb3JlIG91ciBmaXJzdCBkb3QgYW5kXG4gICAgICAgIC8vIGFmdGVyIGFueSBwYXRoIHNlcGFyYXRvciB3ZSBmaW5kXG4gICAgICAgIGxldCBwcmVEb3RTdGF0ZSA9IDA7XG4gICAgICAgIGZvciAobGV0IGkgPSBwYXRoLmxlbmd0aCAtIDE7IGkgPj0gMDsgLS1pKSB7XG4gICAgICAgICAgICBjb25zdCBjb2RlID0gcGF0aC5jaGFyQ29kZUF0KGkpO1xuICAgICAgICAgICAgaWYgKGNvZGUgPT09IENIQVJfRk9SV0FSRF9TTEFTSCkge1xuICAgICAgICAgICAgICAgIC8vIElmIHdlIHJlYWNoZWQgYSBwYXRoIHNlcGFyYXRvciB0aGF0IHdhcyBub3QgcGFydCBvZiBhIHNldCBvZiBwYXRoXG4gICAgICAgICAgICAgICAgLy8gc2VwYXJhdG9ycyBhdCB0aGUgZW5kIG9mIHRoZSBzdHJpbmcsIHN0b3Agbm93XG4gICAgICAgICAgICAgICAgaWYgKCFtYXRjaGVkU2xhc2gpIHtcbiAgICAgICAgICAgICAgICAgICAgc3RhcnRQYXJ0ID0gaSArIDE7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChlbmQgPT09IC0xKSB7XG4gICAgICAgICAgICAgICAgLy8gV2Ugc2F3IHRoZSBmaXJzdCBub24tcGF0aCBzZXBhcmF0b3IsIG1hcmsgdGhpcyBhcyB0aGUgZW5kIG9mIG91clxuICAgICAgICAgICAgICAgIC8vIGV4dGVuc2lvblxuICAgICAgICAgICAgICAgIG1hdGNoZWRTbGFzaCA9IGZhbHNlO1xuICAgICAgICAgICAgICAgIGVuZCA9IGkgKyAxO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGNvZGUgPT09IENIQVJfRE9UKSB7XG4gICAgICAgICAgICAgICAgLy8gSWYgdGhpcyBpcyBvdXIgZmlyc3QgZG90LCBtYXJrIGl0IGFzIHRoZSBzdGFydCBvZiBvdXIgZXh0ZW5zaW9uXG4gICAgICAgICAgICAgICAgaWYgKHN0YXJ0RG90ID09PSAtMSkge1xuICAgICAgICAgICAgICAgICAgICBzdGFydERvdCA9IGk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2UgaWYgKHByZURvdFN0YXRlICE9PSAxKSB7XG4gICAgICAgICAgICAgICAgICAgIHByZURvdFN0YXRlID0gMTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmIChzdGFydERvdCAhPT0gLTEpIHtcbiAgICAgICAgICAgICAgICAvLyBXZSBzYXcgYSBub24tZG90IGFuZCBub24tcGF0aCBzZXBhcmF0b3IgYmVmb3JlIG91ciBkb3QsIHNvIHdlIHNob3VsZFxuICAgICAgICAgICAgICAgIC8vIGhhdmUgYSBnb29kIGNoYW5jZSBhdCBoYXZpbmcgYSBub24tZW1wdHkgZXh0ZW5zaW9uXG4gICAgICAgICAgICAgICAgcHJlRG90U3RhdGUgPSAtMTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBpZiAoc3RhcnREb3QgPT09IC0xIHx8XG4gICAgICAgICAgICBlbmQgPT09IC0xIHx8XG4gICAgICAgICAgICAvLyBXZSBzYXcgYSBub24tZG90IGNoYXJhY3RlciBpbW1lZGlhdGVseSBiZWZvcmUgdGhlIGRvdFxuICAgICAgICAgICAgcHJlRG90U3RhdGUgPT09IDAgfHxcbiAgICAgICAgICAgIC8vIFRoZSAocmlnaHQtbW9zdCkgdHJpbW1lZCBwYXRoIGNvbXBvbmVudCBpcyBleGFjdGx5ICcuLidcbiAgICAgICAgICAgIChwcmVEb3RTdGF0ZSA9PT0gMSAmJlxuICAgICAgICAgICAgICAgIHN0YXJ0RG90ID09PSBlbmQgLSAxICYmXG4gICAgICAgICAgICAgICAgc3RhcnREb3QgPT09IHN0YXJ0UGFydCArIDEpKSB7XG4gICAgICAgICAgICByZXR1cm4gJyc7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHBhdGguc2xpY2Uoc3RhcnREb3QsIGVuZCk7XG4gICAgfSxcbiAgICBmb3JtYXQ6IF9mb3JtYXQuYmluZChudWxsLCAnLycpLFxuICAgIHBhcnNlKHBhdGgpIHtcbiAgICAgICAgdmFsaWRhdGVTdHJpbmcocGF0aCwgJ3BhdGgnKTtcbiAgICAgICAgY29uc3QgcmV0ID0geyByb290OiAnJywgZGlyOiAnJywgYmFzZTogJycsIGV4dDogJycsIG5hbWU6ICcnIH07XG4gICAgICAgIGlmIChwYXRoLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICAgICAgcmV0dXJuIHJldDtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBpc0Fic29sdXRlID0gcGF0aC5jaGFyQ29kZUF0KDApID09PSBDSEFSX0ZPUldBUkRfU0xBU0g7XG4gICAgICAgIGxldCBzdGFydDtcbiAgICAgICAgaWYgKGlzQWJzb2x1dGUpIHtcbiAgICAgICAgICAgIHJldC5yb290ID0gJy8nO1xuICAgICAgICAgICAgc3RhcnQgPSAxO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgc3RhcnQgPSAwO1xuICAgICAgICB9XG4gICAgICAgIGxldCBzdGFydERvdCA9IC0xO1xuICAgICAgICBsZXQgc3RhcnRQYXJ0ID0gMDtcbiAgICAgICAgbGV0IGVuZCA9IC0xO1xuICAgICAgICBsZXQgbWF0Y2hlZFNsYXNoID0gdHJ1ZTtcbiAgICAgICAgbGV0IGkgPSBwYXRoLmxlbmd0aCAtIDE7XG4gICAgICAgIC8vIFRyYWNrIHRoZSBzdGF0ZSBvZiBjaGFyYWN0ZXJzIChpZiBhbnkpIHdlIHNlZSBiZWZvcmUgb3VyIGZpcnN0IGRvdCBhbmRcbiAgICAgICAgLy8gYWZ0ZXIgYW55IHBhdGggc2VwYXJhdG9yIHdlIGZpbmRcbiAgICAgICAgbGV0IHByZURvdFN0YXRlID0gMDtcbiAgICAgICAgLy8gR2V0IG5vbi1kaXIgaW5mb1xuICAgICAgICBmb3IgKDsgaSA+PSBzdGFydDsgLS1pKSB7XG4gICAgICAgICAgICBjb25zdCBjb2RlID0gcGF0aC5jaGFyQ29kZUF0KGkpO1xuICAgICAgICAgICAgaWYgKGNvZGUgPT09IENIQVJfRk9SV0FSRF9TTEFTSCkge1xuICAgICAgICAgICAgICAgIC8vIElmIHdlIHJlYWNoZWQgYSBwYXRoIHNlcGFyYXRvciB0aGF0IHdhcyBub3QgcGFydCBvZiBhIHNldCBvZiBwYXRoXG4gICAgICAgICAgICAgICAgLy8gc2VwYXJhdG9ycyBhdCB0aGUgZW5kIG9mIHRoZSBzdHJpbmcsIHN0b3Agbm93XG4gICAgICAgICAgICAgICAgaWYgKCFtYXRjaGVkU2xhc2gpIHtcbiAgICAgICAgICAgICAgICAgICAgc3RhcnRQYXJ0ID0gaSArIDE7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChlbmQgPT09IC0xKSB7XG4gICAgICAgICAgICAgICAgLy8gV2Ugc2F3IHRoZSBmaXJzdCBub24tcGF0aCBzZXBhcmF0b3IsIG1hcmsgdGhpcyBhcyB0aGUgZW5kIG9mIG91clxuICAgICAgICAgICAgICAgIC8vIGV4dGVuc2lvblxuICAgICAgICAgICAgICAgIG1hdGNoZWRTbGFzaCA9IGZhbHNlO1xuICAgICAgICAgICAgICAgIGVuZCA9IGkgKyAxO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGNvZGUgPT09IENIQVJfRE9UKSB7XG4gICAgICAgICAgICAgICAgLy8gSWYgdGhpcyBpcyBvdXIgZmlyc3QgZG90LCBtYXJrIGl0IGFzIHRoZSBzdGFydCBvZiBvdXIgZXh0ZW5zaW9uXG4gICAgICAgICAgICAgICAgaWYgKHN0YXJ0RG90ID09PSAtMSkge1xuICAgICAgICAgICAgICAgICAgICBzdGFydERvdCA9IGk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2UgaWYgKHByZURvdFN0YXRlICE9PSAxKSB7XG4gICAgICAgICAgICAgICAgICAgIHByZURvdFN0YXRlID0gMTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmIChzdGFydERvdCAhPT0gLTEpIHtcbiAgICAgICAgICAgICAgICAvLyBXZSBzYXcgYSBub24tZG90IGFuZCBub24tcGF0aCBzZXBhcmF0b3IgYmVmb3JlIG91ciBkb3QsIHNvIHdlIHNob3VsZFxuICAgICAgICAgICAgICAgIC8vIGhhdmUgYSBnb29kIGNoYW5jZSBhdCBoYXZpbmcgYSBub24tZW1wdHkgZXh0ZW5zaW9uXG4gICAgICAgICAgICAgICAgcHJlRG90U3RhdGUgPSAtMTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBpZiAoZW5kICE9PSAtMSkge1xuICAgICAgICAgICAgY29uc3Qgc3RhcnQgPSBzdGFydFBhcnQgPT09IDAgJiYgaXNBYnNvbHV0ZSA/IDEgOiBzdGFydFBhcnQ7XG4gICAgICAgICAgICBpZiAoc3RhcnREb3QgPT09IC0xIHx8XG4gICAgICAgICAgICAgICAgLy8gV2Ugc2F3IGEgbm9uLWRvdCBjaGFyYWN0ZXIgaW1tZWRpYXRlbHkgYmVmb3JlIHRoZSBkb3RcbiAgICAgICAgICAgICAgICBwcmVEb3RTdGF0ZSA9PT0gMCB8fFxuICAgICAgICAgICAgICAgIC8vIFRoZSAocmlnaHQtbW9zdCkgdHJpbW1lZCBwYXRoIGNvbXBvbmVudCBpcyBleGFjdGx5ICcuLidcbiAgICAgICAgICAgICAgICAocHJlRG90U3RhdGUgPT09IDEgJiZcbiAgICAgICAgICAgICAgICAgICAgc3RhcnREb3QgPT09IGVuZCAtIDEgJiZcbiAgICAgICAgICAgICAgICAgICAgc3RhcnREb3QgPT09IHN0YXJ0UGFydCArIDEpKSB7XG4gICAgICAgICAgICAgICAgcmV0LmJhc2UgPSByZXQubmFtZSA9IHBhdGguc2xpY2Uoc3RhcnQsIGVuZCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICByZXQubmFtZSA9IHBhdGguc2xpY2Uoc3RhcnQsIHN0YXJ0RG90KTtcbiAgICAgICAgICAgICAgICByZXQuYmFzZSA9IHBhdGguc2xpY2Uoc3RhcnQsIGVuZCk7XG4gICAgICAgICAgICAgICAgcmV0LmV4dCA9IHBhdGguc2xpY2Uoc3RhcnREb3QsIGVuZCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHN0YXJ0UGFydCA+IDApIHtcbiAgICAgICAgICAgIHJldC5kaXIgPSBwYXRoLnNsaWNlKDAsIHN0YXJ0UGFydCAtIDEpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKGlzQWJzb2x1dGUpIHtcbiAgICAgICAgICAgIHJldC5kaXIgPSAnLyc7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHJldDtcbiAgICB9LFxuICAgIHNlcDogJy8nLFxuICAgIGRlbGltaXRlcjogJzonLFxuICAgIHdpbjMyOiBudWxsLFxuICAgIHBvc2l4OiBudWxsXG59O1xucG9zaXgud2luMzIgPSB3aW4zMi53aW4zMiA9IHdpbjMyO1xucG9zaXgucG9zaXggPSB3aW4zMi5wb3NpeCA9IHBvc2l4O1xuZXhwb3J0IGNvbnN0IG5vcm1hbGl6ZSA9IChwbGF0Zm9ybUlzV2luMzIgPyB3aW4zMi5ub3JtYWxpemUgOiBwb3NpeC5ub3JtYWxpemUpO1xuZXhwb3J0IGNvbnN0IHJlc29sdmUgPSAocGxhdGZvcm1Jc1dpbjMyID8gd2luMzIucmVzb2x2ZSA6IHBvc2l4LnJlc29sdmUpO1xuZXhwb3J0IGNvbnN0IHJlbGF0aXZlID0gKHBsYXRmb3JtSXNXaW4zMiA/IHdpbjMyLnJlbGF0aXZlIDogcG9zaXgucmVsYXRpdmUpO1xuZXhwb3J0IGNvbnN0IGRpcm5hbWUgPSAocGxhdGZvcm1Jc1dpbjMyID8gd2luMzIuZGlybmFtZSA6IHBvc2l4LmRpcm5hbWUpO1xuZXhwb3J0IGNvbnN0IGJhc2VuYW1lID0gKHBsYXRmb3JtSXNXaW4zMiA/IHdpbjMyLmJhc2VuYW1lIDogcG9zaXguYmFzZW5hbWUpO1xuZXhwb3J0IGNvbnN0IGV4dG5hbWUgPSAocGxhdGZvcm1Jc1dpbjMyID8gd2luMzIuZXh0bmFtZSA6IHBvc2l4LmV4dG5hbWUpO1xuZXhwb3J0IGNvbnN0IHNlcCA9IChwbGF0Zm9ybUlzV2luMzIgPyB3aW4zMi5zZXAgOiBwb3NpeC5zZXApO1xuIiwgIi8qLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gKiAgQ29weXJpZ2h0IChjKSBNaWNyb3NvZnQgQ29ycG9yYXRpb24uIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKiAgTGljZW5zZWQgdW5kZXIgdGhlIE1JVCBMaWNlbnNlLiBTZWUgTGljZW5zZS50eHQgaW4gdGhlIHByb2plY3Qgcm9vdCBmb3IgbGljZW5zZSBpbmZvcm1hdGlvbi5cbiAqLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qL1xuaW1wb3J0ICogYXMgcGF0aHMgZnJvbSAnLi9wYXRoLmpzJztcbmltcG9ydCB7IGlzV2luZG93cyB9IGZyb20gJy4vcGxhdGZvcm0uanMnO1xuY29uc3QgX3NjaGVtZVBhdHRlcm4gPSAvXlxcd1tcXHdcXGQrLi1dKiQvO1xuY29uc3QgX3NpbmdsZVNsYXNoU3RhcnQgPSAvXlxcLy87XG5jb25zdCBfZG91YmxlU2xhc2hTdGFydCA9IC9eXFwvXFwvLztcbmZ1bmN0aW9uIF92YWxpZGF0ZVVyaShyZXQsIF9zdHJpY3QpIHtcbiAgICAvLyBzY2hlbWUsIG11c3QgYmUgc2V0XG4gICAgaWYgKCFyZXQuc2NoZW1lICYmIF9zdHJpY3QpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBbVXJpRXJyb3JdOiBTY2hlbWUgaXMgbWlzc2luZzoge3NjaGVtZTogXCJcIiwgYXV0aG9yaXR5OiBcIiR7cmV0LmF1dGhvcml0eX1cIiwgcGF0aDogXCIke3JldC5wYXRofVwiLCBxdWVyeTogXCIke3JldC5xdWVyeX1cIiwgZnJhZ21lbnQ6IFwiJHtyZXQuZnJhZ21lbnR9XCJ9YCk7XG4gICAgfVxuICAgIC8vIHNjaGVtZSwgaHR0cHM6Ly90b29scy5pZXRmLm9yZy9odG1sL3JmYzM5ODYjc2VjdGlvbi0zLjFcbiAgICAvLyBBTFBIQSAqKCBBTFBIQSAvIERJR0lUIC8gXCIrXCIgLyBcIi1cIiAvIFwiLlwiIClcbiAgICBpZiAocmV0LnNjaGVtZSAmJiAhX3NjaGVtZVBhdHRlcm4udGVzdChyZXQuc2NoZW1lKSkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ1tVcmlFcnJvcl06IFNjaGVtZSBjb250YWlucyBpbGxlZ2FsIGNoYXJhY3RlcnMuJyk7XG4gICAgfVxuICAgIC8vIHBhdGgsIGh0dHA6Ly90b29scy5pZXRmLm9yZy9odG1sL3JmYzM5ODYjc2VjdGlvbi0zLjNcbiAgICAvLyBJZiBhIFVSSSBjb250YWlucyBhbiBhdXRob3JpdHkgY29tcG9uZW50LCB0aGVuIHRoZSBwYXRoIGNvbXBvbmVudFxuICAgIC8vIG11c3QgZWl0aGVyIGJlIGVtcHR5IG9yIGJlZ2luIHdpdGggYSBzbGFzaCAoXCIvXCIpIGNoYXJhY3Rlci4gIElmIGEgVVJJXG4gICAgLy8gZG9lcyBub3QgY29udGFpbiBhbiBhdXRob3JpdHkgY29tcG9uZW50LCB0aGVuIHRoZSBwYXRoIGNhbm5vdCBiZWdpblxuICAgIC8vIHdpdGggdHdvIHNsYXNoIGNoYXJhY3RlcnMgKFwiLy9cIikuXG4gICAgaWYgKHJldC5wYXRoKSB7XG4gICAgICAgIGlmIChyZXQuYXV0aG9yaXR5KSB7XG4gICAgICAgICAgICBpZiAoIV9zaW5nbGVTbGFzaFN0YXJ0LnRlc3QocmV0LnBhdGgpKSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdbVXJpRXJyb3JdOiBJZiBhIFVSSSBjb250YWlucyBhbiBhdXRob3JpdHkgY29tcG9uZW50LCB0aGVuIHRoZSBwYXRoIGNvbXBvbmVudCBtdXN0IGVpdGhlciBiZSBlbXB0eSBvciBiZWdpbiB3aXRoIGEgc2xhc2ggKFwiL1wiKSBjaGFyYWN0ZXInKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIGlmIChfZG91YmxlU2xhc2hTdGFydC50ZXN0KHJldC5wYXRoKSkge1xuICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignW1VyaUVycm9yXTogSWYgYSBVUkkgZG9lcyBub3QgY29udGFpbiBhbiBhdXRob3JpdHkgY29tcG9uZW50LCB0aGVuIHRoZSBwYXRoIGNhbm5vdCBiZWdpbiB3aXRoIHR3byBzbGFzaCBjaGFyYWN0ZXJzIChcIi8vXCIpJyk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG59XG4vLyBmb3IgYSB3aGlsZSB3ZSBhbGxvd2VkIHVyaXMgKndpdGhvdXQqIHNjaGVtZXMgYW5kIHRoaXMgaXMgdGhlIG1pZ3JhdGlvblxuLy8gZm9yIHRoZW0sIGUuZy4gYW4gdXJpIHdpdGhvdXQgc2NoZW1lIGFuZCB3aXRob3V0IHN0cmljdC1tb2RlIHdhcm5zIGFuZCBmYWxsc1xuLy8gYmFjayB0byB0aGUgZmlsZS1zY2hlbWUuIHRoYXQgc2hvdWxkIGNhdXNlIHRoZSBsZWFzdCBjYXJuYWdlIGFuZCBzdGlsbCBiZSBhXG4vLyBjbGVhciB3YXJuaW5nXG5mdW5jdGlvbiBfc2NoZW1lRml4KHNjaGVtZSwgX3N0cmljdCkge1xuICAgIGlmICghc2NoZW1lICYmICFfc3RyaWN0KSB7XG4gICAgICAgIHJldHVybiAnZmlsZSc7XG4gICAgfVxuICAgIHJldHVybiBzY2hlbWU7XG59XG4vLyBpbXBsZW1lbnRzIGEgYml0IG9mIGh0dHBzOi8vdG9vbHMuaWV0Zi5vcmcvaHRtbC9yZmMzOTg2I3NlY3Rpb24tNVxuZnVuY3Rpb24gX3JlZmVyZW5jZVJlc29sdXRpb24oc2NoZW1lLCBwYXRoKSB7XG4gICAgLy8gdGhlIHNsYXNoLWNoYXJhY3RlciBpcyBvdXIgJ2RlZmF1bHQgYmFzZScgYXMgd2UgZG9uJ3RcbiAgICAvLyBzdXBwb3J0IGNvbnN0cnVjdGluZyBVUklzIHJlbGF0aXZlIHRvIG90aGVyIFVSSXMuIFRoaXNcbiAgICAvLyBhbHNvIG1lYW5zIHRoYXQgd2UgYWx0ZXIgYW5kIHBvdGVudGlhbGx5IGJyZWFrIHBhdGhzLlxuICAgIC8vIHNlZSBodHRwczovL3Rvb2xzLmlldGYub3JnL2h0bWwvcmZjMzk4NiNzZWN0aW9uLTUuMS40XG4gICAgc3dpdGNoIChzY2hlbWUpIHtcbiAgICAgICAgY2FzZSAnaHR0cHMnOlxuICAgICAgICBjYXNlICdodHRwJzpcbiAgICAgICAgY2FzZSAnZmlsZSc6XG4gICAgICAgICAgICBpZiAoIXBhdGgpIHtcbiAgICAgICAgICAgICAgICBwYXRoID0gX3NsYXNoO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAocGF0aFswXSAhPT0gX3NsYXNoKSB7XG4gICAgICAgICAgICAgICAgcGF0aCA9IF9zbGFzaCArIHBhdGg7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBicmVhaztcbiAgICB9XG4gICAgcmV0dXJuIHBhdGg7XG59XG5jb25zdCBfZW1wdHkgPSAnJztcbmNvbnN0IF9zbGFzaCA9ICcvJztcbmNvbnN0IF9yZWdleHAgPSAvXigoW146Lz8jXSs/KTopPyhcXC9cXC8oW14vPyNdKikpPyhbXj8jXSopKFxcPyhbXiNdKikpPygjKC4qKSk/Lztcbi8qKlxuICogVW5pZm9ybSBSZXNvdXJjZSBJZGVudGlmaWVyIChVUkkpIGh0dHA6Ly90b29scy5pZXRmLm9yZy9odG1sL3JmYzM5ODYuXG4gKiBUaGlzIGNsYXNzIGlzIGEgc2ltcGxlIHBhcnNlciB3aGljaCBjcmVhdGVzIHRoZSBiYXNpYyBjb21wb25lbnQgcGFydHNcbiAqIChodHRwOi8vdG9vbHMuaWV0Zi5vcmcvaHRtbC9yZmMzOTg2I3NlY3Rpb24tMykgd2l0aCBtaW5pbWFsIHZhbGlkYXRpb25cbiAqIGFuZCBlbmNvZGluZy5cbiAqXG4gKiBgYGB0eHRcbiAqICAgICAgIGZvbzovL2V4YW1wbGUuY29tOjgwNDIvb3Zlci90aGVyZT9uYW1lPWZlcnJldCNub3NlXG4gKiAgICAgICBcXF8vICAgXFxfX19fX19fX19fX19fXy9cXF9fX19fX19fXy8gXFxfX19fX19fX18vIFxcX18vXG4gKiAgICAgICAgfCAgICAgICAgICAgfCAgICAgICAgICAgIHwgICAgICAgICAgICB8ICAgICAgICB8XG4gKiAgICAgc2NoZW1lICAgICBhdXRob3JpdHkgICAgICAgcGF0aCAgICAgICAgcXVlcnkgICBmcmFnbWVudFxuICogICAgICAgIHwgICBfX19fX19fX19fX19fX19fX19fX198X19cbiAqICAgICAgIC8gXFwgLyAgICAgICAgICAgICAgICAgICAgICAgIFxcXG4gKiAgICAgICB1cm46ZXhhbXBsZTphbmltYWw6ZmVycmV0Om5vc2VcbiAqIGBgYFxuICovXG5leHBvcnQgY2xhc3MgVVJJIHtcbiAgICBzdGF0aWMgaXNVcmkodGhpbmcpIHtcbiAgICAgICAgaWYgKHRoaW5nIGluc3RhbmNlb2YgVVJJKSB7XG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoIXRoaW5nKSB7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHR5cGVvZiB0aGluZy5hdXRob3JpdHkgPT09ICdzdHJpbmcnXG4gICAgICAgICAgICAmJiB0eXBlb2YgdGhpbmcuZnJhZ21lbnQgPT09ICdzdHJpbmcnXG4gICAgICAgICAgICAmJiB0eXBlb2YgdGhpbmcucGF0aCA9PT0gJ3N0cmluZydcbiAgICAgICAgICAgICYmIHR5cGVvZiB0aGluZy5xdWVyeSA9PT0gJ3N0cmluZydcbiAgICAgICAgICAgICYmIHR5cGVvZiB0aGluZy5zY2hlbWUgPT09ICdzdHJpbmcnXG4gICAgICAgICAgICAmJiB0eXBlb2YgdGhpbmcuZnNQYXRoID09PSAnc3RyaW5nJ1xuICAgICAgICAgICAgJiYgdHlwZW9mIHRoaW5nLndpdGggPT09ICdmdW5jdGlvbidcbiAgICAgICAgICAgICYmIHR5cGVvZiB0aGluZy50b1N0cmluZyA9PT0gJ2Z1bmN0aW9uJztcbiAgICB9XG4gICAgLyoqXG4gICAgICogQGludGVybmFsXG4gICAgICovXG4gICAgY29uc3RydWN0b3Ioc2NoZW1lT3JEYXRhLCBhdXRob3JpdHksIHBhdGgsIHF1ZXJ5LCBmcmFnbWVudCwgX3N0cmljdCA9IGZhbHNlKSB7XG4gICAgICAgIGlmICh0eXBlb2Ygc2NoZW1lT3JEYXRhID09PSAnb2JqZWN0Jykge1xuICAgICAgICAgICAgdGhpcy5zY2hlbWUgPSBzY2hlbWVPckRhdGEuc2NoZW1lIHx8IF9lbXB0eTtcbiAgICAgICAgICAgIHRoaXMuYXV0aG9yaXR5ID0gc2NoZW1lT3JEYXRhLmF1dGhvcml0eSB8fCBfZW1wdHk7XG4gICAgICAgICAgICB0aGlzLnBhdGggPSBzY2hlbWVPckRhdGEucGF0aCB8fCBfZW1wdHk7XG4gICAgICAgICAgICB0aGlzLnF1ZXJ5ID0gc2NoZW1lT3JEYXRhLnF1ZXJ5IHx8IF9lbXB0eTtcbiAgICAgICAgICAgIHRoaXMuZnJhZ21lbnQgPSBzY2hlbWVPckRhdGEuZnJhZ21lbnQgfHwgX2VtcHR5O1xuICAgICAgICAgICAgLy8gbm8gdmFsaWRhdGlvbiBiZWNhdXNlIGl0J3MgdGhpcyBVUklcbiAgICAgICAgICAgIC8vIHRoYXQgY3JlYXRlcyB1cmkgY29tcG9uZW50cy5cbiAgICAgICAgICAgIC8vIF92YWxpZGF0ZVVyaSh0aGlzKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMuc2NoZW1lID0gX3NjaGVtZUZpeChzY2hlbWVPckRhdGEsIF9zdHJpY3QpO1xuICAgICAgICAgICAgdGhpcy5hdXRob3JpdHkgPSBhdXRob3JpdHkgfHwgX2VtcHR5O1xuICAgICAgICAgICAgdGhpcy5wYXRoID0gX3JlZmVyZW5jZVJlc29sdXRpb24odGhpcy5zY2hlbWUsIHBhdGggfHwgX2VtcHR5KTtcbiAgICAgICAgICAgIHRoaXMucXVlcnkgPSBxdWVyeSB8fCBfZW1wdHk7XG4gICAgICAgICAgICB0aGlzLmZyYWdtZW50ID0gZnJhZ21lbnQgfHwgX2VtcHR5O1xuICAgICAgICAgICAgX3ZhbGlkYXRlVXJpKHRoaXMsIF9zdHJpY3QpO1xuICAgICAgICB9XG4gICAgfVxuICAgIC8vIC0tLS0gZmlsZXN5c3RlbSBwYXRoIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gICAgLyoqXG4gICAgICogUmV0dXJucyBhIHN0cmluZyByZXByZXNlbnRpbmcgdGhlIGNvcnJlc3BvbmRpbmcgZmlsZSBzeXN0ZW0gcGF0aCBvZiB0aGlzIFVSSS5cbiAgICAgKiBXaWxsIGhhbmRsZSBVTkMgcGF0aHMsIG5vcm1hbGl6ZXMgd2luZG93cyBkcml2ZSBsZXR0ZXJzIHRvIGxvd2VyLWNhc2UsIGFuZCB1c2VzIHRoZVxuICAgICAqIHBsYXRmb3JtIHNwZWNpZmljIHBhdGggc2VwYXJhdG9yLlxuICAgICAqXG4gICAgICogKiBXaWxsICpub3QqIHZhbGlkYXRlIHRoZSBwYXRoIGZvciBpbnZhbGlkIGNoYXJhY3RlcnMgYW5kIHNlbWFudGljcy5cbiAgICAgKiAqIFdpbGwgKm5vdCogbG9vayBhdCB0aGUgc2NoZW1lIG9mIHRoaXMgVVJJLlxuICAgICAqICogVGhlIHJlc3VsdCBzaGFsbCAqbm90KiBiZSB1c2VkIGZvciBkaXNwbGF5IHB1cnBvc2VzIGJ1dCBmb3IgYWNjZXNzaW5nIGEgZmlsZSBvbiBkaXNrLlxuICAgICAqXG4gICAgICpcbiAgICAgKiBUaGUgKmRpZmZlcmVuY2UqIHRvIGBVUkkjcGF0aGAgaXMgdGhlIHVzZSBvZiB0aGUgcGxhdGZvcm0gc3BlY2lmaWMgc2VwYXJhdG9yIGFuZCB0aGUgaGFuZGxpbmdcbiAgICAgKiBvZiBVTkMgcGF0aHMuIFNlZSB0aGUgYmVsb3cgc2FtcGxlIG9mIGEgZmlsZS11cmkgd2l0aCBhbiBhdXRob3JpdHkgKFVOQyBwYXRoKS5cbiAgICAgKlxuICAgICAqIGBgYHRzXG4gICAgICAgIGNvbnN0IHUgPSBVUkkucGFyc2UoJ2ZpbGU6Ly9zZXJ2ZXIvYyQvZm9sZGVyL2ZpbGUudHh0JylcbiAgICAgICAgdS5hdXRob3JpdHkgPT09ICdzZXJ2ZXInXG4gICAgICAgIHUucGF0aCA9PT0gJy9zaGFyZXMvYyQvZmlsZS50eHQnXG4gICAgICAgIHUuZnNQYXRoID09PSAnXFxcXHNlcnZlclxcYyRcXGZvbGRlclxcZmlsZS50eHQnXG4gICAgYGBgXG4gICAgICpcbiAgICAgKiBVc2luZyBgVVJJI3BhdGhgIHRvIHJlYWQgYSBmaWxlICh1c2luZyBmcy1hcGlzKSB3b3VsZCBub3QgYmUgZW5vdWdoIGJlY2F1c2UgcGFydHMgb2YgdGhlIHBhdGgsXG4gICAgICogbmFtZWx5IHRoZSBzZXJ2ZXIgbmFtZSwgd291bGQgYmUgbWlzc2luZy4gVGhlcmVmb3JlIGBVUkkjZnNQYXRoYCBleGlzdHMgLSBpdCdzIHN1Z2FyIHRvIGVhc2Ugd29ya2luZ1xuICAgICAqIHdpdGggVVJJcyB0aGF0IHJlcHJlc2VudCBmaWxlcyBvbiBkaXNrIChgZmlsZWAgc2NoZW1lKS5cbiAgICAgKi9cbiAgICBnZXQgZnNQYXRoKCkge1xuICAgICAgICAvLyBpZiAodGhpcy5zY2hlbWUgIT09ICdmaWxlJykge1xuICAgICAgICAvLyBcdGNvbnNvbGUud2FybihgW1VyaUVycm9yXSBjYWxsaW5nIGZzUGF0aCB3aXRoIHNjaGVtZSAke3RoaXMuc2NoZW1lfWApO1xuICAgICAgICAvLyB9XG4gICAgICAgIHJldHVybiB1cmlUb0ZzUGF0aCh0aGlzLCBmYWxzZSk7XG4gICAgfVxuICAgIC8vIC0tLS0gbW9kaWZ5IHRvIG5ldyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gICAgd2l0aChjaGFuZ2UpIHtcbiAgICAgICAgaWYgKCFjaGFuZ2UpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgICB9XG4gICAgICAgIGxldCB7IHNjaGVtZSwgYXV0aG9yaXR5LCBwYXRoLCBxdWVyeSwgZnJhZ21lbnQgfSA9IGNoYW5nZTtcbiAgICAgICAgaWYgKHNjaGVtZSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICBzY2hlbWUgPSB0aGlzLnNjaGVtZTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChzY2hlbWUgPT09IG51bGwpIHtcbiAgICAgICAgICAgIHNjaGVtZSA9IF9lbXB0eTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoYXV0aG9yaXR5ID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIGF1dGhvcml0eSA9IHRoaXMuYXV0aG9yaXR5O1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKGF1dGhvcml0eSA9PT0gbnVsbCkge1xuICAgICAgICAgICAgYXV0aG9yaXR5ID0gX2VtcHR5O1xuICAgICAgICB9XG4gICAgICAgIGlmIChwYXRoID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHBhdGggPSB0aGlzLnBhdGg7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAocGF0aCA9PT0gbnVsbCkge1xuICAgICAgICAgICAgcGF0aCA9IF9lbXB0eTtcbiAgICAgICAgfVxuICAgICAgICBpZiAocXVlcnkgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgcXVlcnkgPSB0aGlzLnF1ZXJ5O1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKHF1ZXJ5ID09PSBudWxsKSB7XG4gICAgICAgICAgICBxdWVyeSA9IF9lbXB0eTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoZnJhZ21lbnQgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgZnJhZ21lbnQgPSB0aGlzLmZyYWdtZW50O1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKGZyYWdtZW50ID09PSBudWxsKSB7XG4gICAgICAgICAgICBmcmFnbWVudCA9IF9lbXB0eTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoc2NoZW1lID09PSB0aGlzLnNjaGVtZVxuICAgICAgICAgICAgJiYgYXV0aG9yaXR5ID09PSB0aGlzLmF1dGhvcml0eVxuICAgICAgICAgICAgJiYgcGF0aCA9PT0gdGhpcy5wYXRoXG4gICAgICAgICAgICAmJiBxdWVyeSA9PT0gdGhpcy5xdWVyeVxuICAgICAgICAgICAgJiYgZnJhZ21lbnQgPT09IHRoaXMuZnJhZ21lbnQpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBuZXcgVXJpKHNjaGVtZSwgYXV0aG9yaXR5LCBwYXRoLCBxdWVyeSwgZnJhZ21lbnQpO1xuICAgIH1cbiAgICAvLyAtLS0tIHBhcnNlICYgdmFsaWRhdGUgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIG5ldyBVUkkgZnJvbSBhIHN0cmluZywgZS5nLiBgaHR0cDovL3d3dy5leGFtcGxlLmNvbS9zb21lL3BhdGhgLFxuICAgICAqIGBmaWxlOi8vL3Vzci9ob21lYCwgb3IgYHNjaGVtZTp3aXRoL3BhdGhgLlxuICAgICAqXG4gICAgICogQHBhcmFtIHZhbHVlIEEgc3RyaW5nIHdoaWNoIHJlcHJlc2VudHMgYW4gVVJJIChzZWUgYFVSSSN0b1N0cmluZ2ApLlxuICAgICAqL1xuICAgIHN0YXRpYyBwYXJzZSh2YWx1ZSwgX3N0cmljdCA9IGZhbHNlKSB7XG4gICAgICAgIGNvbnN0IG1hdGNoID0gX3JlZ2V4cC5leGVjKHZhbHVlKTtcbiAgICAgICAgaWYgKCFtYXRjaCkge1xuICAgICAgICAgICAgcmV0dXJuIG5ldyBVcmkoX2VtcHR5LCBfZW1wdHksIF9lbXB0eSwgX2VtcHR5LCBfZW1wdHkpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBuZXcgVXJpKG1hdGNoWzJdIHx8IF9lbXB0eSwgcGVyY2VudERlY29kZShtYXRjaFs0XSB8fCBfZW1wdHkpLCBwZXJjZW50RGVjb2RlKG1hdGNoWzVdIHx8IF9lbXB0eSksIHBlcmNlbnREZWNvZGUobWF0Y2hbN10gfHwgX2VtcHR5KSwgcGVyY2VudERlY29kZShtYXRjaFs5XSB8fCBfZW1wdHkpLCBfc3RyaWN0KTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIG5ldyBVUkkgZnJvbSBhIGZpbGUgc3lzdGVtIHBhdGgsIGUuZy4gYGM6XFxteVxcZmlsZXNgLFxuICAgICAqIGAvdXNyL2hvbWVgLCBvciBgXFxcXHNlcnZlclxcc2hhcmVcXHNvbWVcXHBhdGhgLlxuICAgICAqXG4gICAgICogVGhlICpkaWZmZXJlbmNlKiBiZXR3ZWVuIGBVUkkjcGFyc2VgIGFuZCBgVVJJI2ZpbGVgIGlzIHRoYXQgdGhlIGxhdHRlciB0cmVhdHMgdGhlIGFyZ3VtZW50XG4gICAgICogYXMgcGF0aCwgbm90IGFzIHN0cmluZ2lmaWVkLXVyaS4gRS5nLiBgVVJJLmZpbGUocGF0aClgIGlzICoqbm90IHRoZSBzYW1lIGFzKipcbiAgICAgKiBgVVJJLnBhcnNlKCdmaWxlOi8vJyArIHBhdGgpYCBiZWNhdXNlIHRoZSBwYXRoIG1pZ2h0IGNvbnRhaW4gY2hhcmFjdGVycyB0aGF0IGFyZVxuICAgICAqIGludGVycHJldGVkICgjIGFuZCA/KS4gU2VlIHRoZSBmb2xsb3dpbmcgc2FtcGxlOlxuICAgICAqIGBgYHRzXG4gICAgY29uc3QgZ29vZCA9IFVSSS5maWxlKCcvY29kaW5nL2MjL3Byb2plY3QxJyk7XG4gICAgZ29vZC5zY2hlbWUgPT09ICdmaWxlJztcbiAgICBnb29kLnBhdGggPT09ICcvY29kaW5nL2MjL3Byb2plY3QxJztcbiAgICBnb29kLmZyYWdtZW50ID09PSAnJztcbiAgICBjb25zdCBiYWQgPSBVUkkucGFyc2UoJ2ZpbGU6Ly8nICsgJy9jb2RpbmcvYyMvcHJvamVjdDEnKTtcbiAgICBiYWQuc2NoZW1lID09PSAnZmlsZSc7XG4gICAgYmFkLnBhdGggPT09ICcvY29kaW5nL2MnOyAvLyBwYXRoIGlzIG5vdyBicm9rZW5cbiAgICBiYWQuZnJhZ21lbnQgPT09ICcvcHJvamVjdDEnO1xuICAgIGBgYFxuICAgICAqXG4gICAgICogQHBhcmFtIHBhdGggQSBmaWxlIHN5c3RlbSBwYXRoIChzZWUgYFVSSSNmc1BhdGhgKVxuICAgICAqL1xuICAgIHN0YXRpYyBmaWxlKHBhdGgpIHtcbiAgICAgICAgbGV0IGF1dGhvcml0eSA9IF9lbXB0eTtcbiAgICAgICAgLy8gbm9ybWFsaXplIHRvIGZ3ZC1zbGFzaGVzIG9uIHdpbmRvd3MsXG4gICAgICAgIC8vIG9uIG90aGVyIHN5c3RlbXMgYndkLXNsYXNoZXMgYXJlIHZhbGlkXG4gICAgICAgIC8vIGZpbGVuYW1lIGNoYXJhY3RlciwgZWcgL2ZcXG9vL2JhXFxyLnR4dFxuICAgICAgICBpZiAoaXNXaW5kb3dzKSB7XG4gICAgICAgICAgICBwYXRoID0gcGF0aC5yZXBsYWNlKC9cXFxcL2csIF9zbGFzaCk7XG4gICAgICAgIH1cbiAgICAgICAgLy8gY2hlY2sgZm9yIGF1dGhvcml0eSBhcyB1c2VkIGluIFVOQyBzaGFyZXNcbiAgICAgICAgLy8gb3IgdXNlIHRoZSBwYXRoIGFzIGdpdmVuXG4gICAgICAgIGlmIChwYXRoWzBdID09PSBfc2xhc2ggJiYgcGF0aFsxXSA9PT0gX3NsYXNoKSB7XG4gICAgICAgICAgICBjb25zdCBpZHggPSBwYXRoLmluZGV4T2YoX3NsYXNoLCAyKTtcbiAgICAgICAgICAgIGlmIChpZHggPT09IC0xKSB7XG4gICAgICAgICAgICAgICAgYXV0aG9yaXR5ID0gcGF0aC5zdWJzdHJpbmcoMik7XG4gICAgICAgICAgICAgICAgcGF0aCA9IF9zbGFzaDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIGF1dGhvcml0eSA9IHBhdGguc3Vic3RyaW5nKDIsIGlkeCk7XG4gICAgICAgICAgICAgICAgcGF0aCA9IHBhdGguc3Vic3RyaW5nKGlkeCkgfHwgX3NsYXNoO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBuZXcgVXJpKCdmaWxlJywgYXV0aG9yaXR5LCBwYXRoLCBfZW1wdHksIF9lbXB0eSk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgbmV3IFVSSSBmcm9tIHVyaSBjb21wb25lbnRzLlxuICAgICAqXG4gICAgICogVW5sZXNzIGBzdHJpY3RgIGlzIGB0cnVlYCB0aGUgc2NoZW1lIGlzIGRlZmF1bHRzIHRvIGJlIGBmaWxlYC4gVGhpcyBmdW5jdGlvbiBwZXJmb3Jtc1xuICAgICAqIHZhbGlkYXRpb24gYW5kIHNob3VsZCBiZSB1c2VkIGZvciB1bnRydXN0ZWQgdXJpIGNvbXBvbmVudHMgcmV0cmlldmVkIGZyb20gc3RvcmFnZSxcbiAgICAgKiB1c2VyIGlucHV0LCBjb21tYW5kIGFyZ3VtZW50cyBldGNcbiAgICAgKi9cbiAgICBzdGF0aWMgZnJvbShjb21wb25lbnRzLCBzdHJpY3QpIHtcbiAgICAgICAgY29uc3QgcmVzdWx0ID0gbmV3IFVyaShjb21wb25lbnRzLnNjaGVtZSwgY29tcG9uZW50cy5hdXRob3JpdHksIGNvbXBvbmVudHMucGF0aCwgY29tcG9uZW50cy5xdWVyeSwgY29tcG9uZW50cy5mcmFnbWVudCwgc3RyaWN0KTtcbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG4gICAgLyoqXG4gICAgICogSm9pbiBhIFVSSSBwYXRoIHdpdGggcGF0aCBmcmFnbWVudHMgYW5kIG5vcm1hbGl6ZXMgdGhlIHJlc3VsdGluZyBwYXRoLlxuICAgICAqXG4gICAgICogQHBhcmFtIHVyaSBUaGUgaW5wdXQgVVJJLlxuICAgICAqIEBwYXJhbSBwYXRoRnJhZ21lbnQgVGhlIHBhdGggZnJhZ21lbnQgdG8gYWRkIHRvIHRoZSBVUkkgcGF0aC5cbiAgICAgKiBAcmV0dXJucyBUaGUgcmVzdWx0aW5nIFVSSS5cbiAgICAgKi9cbiAgICBzdGF0aWMgam9pblBhdGgodXJpLCAuLi5wYXRoRnJhZ21lbnQpIHtcbiAgICAgICAgaWYgKCF1cmkucGF0aCkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBbVXJpRXJyb3JdOiBjYW5ub3QgY2FsbCBqb2luUGF0aCBvbiBVUkkgd2l0aG91dCBwYXRoYCk7XG4gICAgICAgIH1cbiAgICAgICAgbGV0IG5ld1BhdGg7XG4gICAgICAgIGlmIChpc1dpbmRvd3MgJiYgdXJpLnNjaGVtZSA9PT0gJ2ZpbGUnKSB7XG4gICAgICAgICAgICBuZXdQYXRoID0gVVJJLmZpbGUocGF0aHMud2luMzIuam9pbih1cmlUb0ZzUGF0aCh1cmksIHRydWUpLCAuLi5wYXRoRnJhZ21lbnQpKS5wYXRoO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgbmV3UGF0aCA9IHBhdGhzLnBvc2l4LmpvaW4odXJpLnBhdGgsIC4uLnBhdGhGcmFnbWVudCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHVyaS53aXRoKHsgcGF0aDogbmV3UGF0aCB9KTtcbiAgICB9XG4gICAgLy8gLS0tLSBwcmludGluZy9leHRlcm5hbGl6ZSAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgc3RyaW5nIHJlcHJlc2VudGF0aW9uIGZvciB0aGlzIFVSSS4gSXQncyBndWFyYW50ZWVkIHRoYXQgY2FsbGluZ1xuICAgICAqIGBVUkkucGFyc2VgIHdpdGggdGhlIHJlc3VsdCBvZiB0aGlzIGZ1bmN0aW9uIGNyZWF0ZXMgYW4gVVJJIHdoaWNoIGlzIGVxdWFsXG4gICAgICogdG8gdGhpcyBVUkkuXG4gICAgICpcbiAgICAgKiAqIFRoZSByZXN1bHQgc2hhbGwgKm5vdCogYmUgdXNlZCBmb3IgZGlzcGxheSBwdXJwb3NlcyBidXQgZm9yIGV4dGVybmFsaXphdGlvbiBvciB0cmFuc3BvcnQuXG4gICAgICogKiBUaGUgcmVzdWx0IHdpbGwgYmUgZW5jb2RlZCB1c2luZyB0aGUgcGVyY2VudGFnZSBlbmNvZGluZyBhbmQgZW5jb2RpbmcgaGFwcGVucyBtb3N0bHlcbiAgICAgKiBpZ25vcmUgdGhlIHNjaGVtZS1zcGVjaWZpYyBlbmNvZGluZyBydWxlcy5cbiAgICAgKlxuICAgICAqIEBwYXJhbSBza2lwRW5jb2RpbmcgRG8gbm90IGVuY29kZSB0aGUgcmVzdWx0LCBkZWZhdWx0IGlzIGBmYWxzZWBcbiAgICAgKi9cbiAgICB0b1N0cmluZyhza2lwRW5jb2RpbmcgPSBmYWxzZSkge1xuICAgICAgICByZXR1cm4gX2FzRm9ybWF0dGVkKHRoaXMsIHNraXBFbmNvZGluZyk7XG4gICAgfVxuICAgIHRvSlNPTigpIHtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuICAgIHN0YXRpYyByZXZpdmUoZGF0YSkge1xuICAgICAgICB2YXIgX2EsIF9iO1xuICAgICAgICBpZiAoIWRhdGEpIHtcbiAgICAgICAgICAgIHJldHVybiBkYXRhO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKGRhdGEgaW5zdGFuY2VvZiBVUkkpIHtcbiAgICAgICAgICAgIHJldHVybiBkYXRhO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgY29uc3QgcmVzdWx0ID0gbmV3IFVyaShkYXRhKTtcbiAgICAgICAgICAgIHJlc3VsdC5fZm9ybWF0dGVkID0gKF9hID0gZGF0YS5leHRlcm5hbCkgIT09IG51bGwgJiYgX2EgIT09IHZvaWQgMCA/IF9hIDogbnVsbDtcbiAgICAgICAgICAgIHJlc3VsdC5fZnNQYXRoID0gZGF0YS5fc2VwID09PSBfcGF0aFNlcE1hcmtlciA/IChfYiA9IGRhdGEuZnNQYXRoKSAhPT0gbnVsbCAmJiBfYiAhPT0gdm9pZCAwID8gX2IgOiBudWxsIDogbnVsbDtcbiAgICAgICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgICAgIH1cbiAgICB9XG59XG5jb25zdCBfcGF0aFNlcE1hcmtlciA9IGlzV2luZG93cyA/IDEgOiB1bmRlZmluZWQ7XG4vLyBUaGlzIGNsYXNzIGV4aXN0cyBzbyB0aGF0IFVSSSBpcyBjb21wYXRpYmxlIHdpdGggdnNjb2RlLlVyaSAoQVBJKS5cbmNsYXNzIFVyaSBleHRlbmRzIFVSSSB7XG4gICAgY29uc3RydWN0b3IoKSB7XG4gICAgICAgIHN1cGVyKC4uLmFyZ3VtZW50cyk7XG4gICAgICAgIHRoaXMuX2Zvcm1hdHRlZCA9IG51bGw7XG4gICAgICAgIHRoaXMuX2ZzUGF0aCA9IG51bGw7XG4gICAgfVxuICAgIGdldCBmc1BhdGgoKSB7XG4gICAgICAgIGlmICghdGhpcy5fZnNQYXRoKSB7XG4gICAgICAgICAgICB0aGlzLl9mc1BhdGggPSB1cmlUb0ZzUGF0aCh0aGlzLCBmYWxzZSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRoaXMuX2ZzUGF0aDtcbiAgICB9XG4gICAgdG9TdHJpbmcoc2tpcEVuY29kaW5nID0gZmFsc2UpIHtcbiAgICAgICAgaWYgKCFza2lwRW5jb2RpbmcpIHtcbiAgICAgICAgICAgIGlmICghdGhpcy5fZm9ybWF0dGVkKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5fZm9ybWF0dGVkID0gX2FzRm9ybWF0dGVkKHRoaXMsIGZhbHNlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiB0aGlzLl9mb3JtYXR0ZWQ7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAvLyB3ZSBkb24ndCBjYWNoZSB0aGF0XG4gICAgICAgICAgICByZXR1cm4gX2FzRm9ybWF0dGVkKHRoaXMsIHRydWUpO1xuICAgICAgICB9XG4gICAgfVxuICAgIHRvSlNPTigpIHtcbiAgICAgICAgY29uc3QgcmVzID0ge1xuICAgICAgICAgICAgJG1pZDogMSAvKiBNYXJzaGFsbGVkSWQuVXJpICovXG4gICAgICAgIH07XG4gICAgICAgIC8vIGNhY2hlZCBzdGF0ZVxuICAgICAgICBpZiAodGhpcy5fZnNQYXRoKSB7XG4gICAgICAgICAgICByZXMuZnNQYXRoID0gdGhpcy5fZnNQYXRoO1xuICAgICAgICAgICAgcmVzLl9zZXAgPSBfcGF0aFNlcE1hcmtlcjtcbiAgICAgICAgfVxuICAgICAgICBpZiAodGhpcy5fZm9ybWF0dGVkKSB7XG4gICAgICAgICAgICByZXMuZXh0ZXJuYWwgPSB0aGlzLl9mb3JtYXR0ZWQ7XG4gICAgICAgIH1cbiAgICAgICAgLy8tLS0gdXJpIGNvbXBvbmVudHNcbiAgICAgICAgaWYgKHRoaXMucGF0aCkge1xuICAgICAgICAgICAgcmVzLnBhdGggPSB0aGlzLnBhdGg7XG4gICAgICAgIH1cbiAgICAgICAgLy8gVE9ET1xuICAgICAgICAvLyB0aGlzIGlzbid0IGNvcnJlY3QgYW5kIGNhbiB2aW9sYXRlIHRoZSBVcmlDb21wb25lbnRzIGNvbnRyYWN0IGJ1dFxuICAgICAgICAvLyB0aGlzIGlzIHBhcnQgb2YgdGhlIHZzY29kZS5VcmkgQVBJIGFuZCB3ZSBzaG91bGRuJ3QgY2hhbmdlIGhvdyB0aGF0XG4gICAgICAgIC8vIHdvcmtzIGFueW1vcmVcbiAgICAgICAgaWYgKHRoaXMuc2NoZW1lKSB7XG4gICAgICAgICAgICByZXMuc2NoZW1lID0gdGhpcy5zY2hlbWU7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHRoaXMuYXV0aG9yaXR5KSB7XG4gICAgICAgICAgICByZXMuYXV0aG9yaXR5ID0gdGhpcy5hdXRob3JpdHk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHRoaXMucXVlcnkpIHtcbiAgICAgICAgICAgIHJlcy5xdWVyeSA9IHRoaXMucXVlcnk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHRoaXMuZnJhZ21lbnQpIHtcbiAgICAgICAgICAgIHJlcy5mcmFnbWVudCA9IHRoaXMuZnJhZ21lbnQ7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHJlcztcbiAgICB9XG59XG4vLyByZXNlcnZlZCBjaGFyYWN0ZXJzOiBodHRwczovL3Rvb2xzLmlldGYub3JnL2h0bWwvcmZjMzk4NiNzZWN0aW9uLTIuMlxuY29uc3QgZW5jb2RlVGFibGUgPSB7XG4gICAgWzU4IC8qIENoYXJDb2RlLkNvbG9uICovXTogJyUzQScsIC8vIGdlbi1kZWxpbXNcbiAgICBbNDcgLyogQ2hhckNvZGUuU2xhc2ggKi9dOiAnJTJGJyxcbiAgICBbNjMgLyogQ2hhckNvZGUuUXVlc3Rpb25NYXJrICovXTogJyUzRicsXG4gICAgWzM1IC8qIENoYXJDb2RlLkhhc2ggKi9dOiAnJTIzJyxcbiAgICBbOTEgLyogQ2hhckNvZGUuT3BlblNxdWFyZUJyYWNrZXQgKi9dOiAnJTVCJyxcbiAgICBbOTMgLyogQ2hhckNvZGUuQ2xvc2VTcXVhcmVCcmFja2V0ICovXTogJyU1RCcsXG4gICAgWzY0IC8qIENoYXJDb2RlLkF0U2lnbiAqL106ICclNDAnLFxuICAgIFszMyAvKiBDaGFyQ29kZS5FeGNsYW1hdGlvbk1hcmsgKi9dOiAnJTIxJywgLy8gc3ViLWRlbGltc1xuICAgIFszNiAvKiBDaGFyQ29kZS5Eb2xsYXJTaWduICovXTogJyUyNCcsXG4gICAgWzM4IC8qIENoYXJDb2RlLkFtcGVyc2FuZCAqL106ICclMjYnLFxuICAgIFszOSAvKiBDaGFyQ29kZS5TaW5nbGVRdW90ZSAqL106ICclMjcnLFxuICAgIFs0MCAvKiBDaGFyQ29kZS5PcGVuUGFyZW4gKi9dOiAnJTI4JyxcbiAgICBbNDEgLyogQ2hhckNvZGUuQ2xvc2VQYXJlbiAqL106ICclMjknLFxuICAgIFs0MiAvKiBDaGFyQ29kZS5Bc3RlcmlzayAqL106ICclMkEnLFxuICAgIFs0MyAvKiBDaGFyQ29kZS5QbHVzICovXTogJyUyQicsXG4gICAgWzQ0IC8qIENoYXJDb2RlLkNvbW1hICovXTogJyUyQycsXG4gICAgWzU5IC8qIENoYXJDb2RlLlNlbWljb2xvbiAqL106ICclM0InLFxuICAgIFs2MSAvKiBDaGFyQ29kZS5FcXVhbHMgKi9dOiAnJTNEJyxcbiAgICBbMzIgLyogQ2hhckNvZGUuU3BhY2UgKi9dOiAnJTIwJyxcbn07XG5mdW5jdGlvbiBlbmNvZGVVUklDb21wb25lbnRGYXN0KHVyaUNvbXBvbmVudCwgaXNQYXRoLCBpc0F1dGhvcml0eSkge1xuICAgIGxldCByZXMgPSB1bmRlZmluZWQ7XG4gICAgbGV0IG5hdGl2ZUVuY29kZVBvcyA9IC0xO1xuICAgIGZvciAobGV0IHBvcyA9IDA7IHBvcyA8IHVyaUNvbXBvbmVudC5sZW5ndGg7IHBvcysrKSB7XG4gICAgICAgIGNvbnN0IGNvZGUgPSB1cmlDb21wb25lbnQuY2hhckNvZGVBdChwb3MpO1xuICAgICAgICAvLyB1bnJlc2VydmVkIGNoYXJhY3RlcnM6IGh0dHBzOi8vdG9vbHMuaWV0Zi5vcmcvaHRtbC9yZmMzOTg2I3NlY3Rpb24tMi4zXG4gICAgICAgIGlmICgoY29kZSA+PSA5NyAvKiBDaGFyQ29kZS5hICovICYmIGNvZGUgPD0gMTIyIC8qIENoYXJDb2RlLnogKi8pXG4gICAgICAgICAgICB8fCAoY29kZSA+PSA2NSAvKiBDaGFyQ29kZS5BICovICYmIGNvZGUgPD0gOTAgLyogQ2hhckNvZGUuWiAqLylcbiAgICAgICAgICAgIHx8IChjb2RlID49IDQ4IC8qIENoYXJDb2RlLkRpZ2l0MCAqLyAmJiBjb2RlIDw9IDU3IC8qIENoYXJDb2RlLkRpZ2l0OSAqLylcbiAgICAgICAgICAgIHx8IGNvZGUgPT09IDQ1IC8qIENoYXJDb2RlLkRhc2ggKi9cbiAgICAgICAgICAgIHx8IGNvZGUgPT09IDQ2IC8qIENoYXJDb2RlLlBlcmlvZCAqL1xuICAgICAgICAgICAgfHwgY29kZSA9PT0gOTUgLyogQ2hhckNvZGUuVW5kZXJsaW5lICovXG4gICAgICAgICAgICB8fCBjb2RlID09PSAxMjYgLyogQ2hhckNvZGUuVGlsZGUgKi9cbiAgICAgICAgICAgIHx8IChpc1BhdGggJiYgY29kZSA9PT0gNDcgLyogQ2hhckNvZGUuU2xhc2ggKi8pXG4gICAgICAgICAgICB8fCAoaXNBdXRob3JpdHkgJiYgY29kZSA9PT0gOTEgLyogQ2hhckNvZGUuT3BlblNxdWFyZUJyYWNrZXQgKi8pXG4gICAgICAgICAgICB8fCAoaXNBdXRob3JpdHkgJiYgY29kZSA9PT0gOTMgLyogQ2hhckNvZGUuQ2xvc2VTcXVhcmVCcmFja2V0ICovKVxuICAgICAgICAgICAgfHwgKGlzQXV0aG9yaXR5ICYmIGNvZGUgPT09IDU4IC8qIENoYXJDb2RlLkNvbG9uICovKSkge1xuICAgICAgICAgICAgLy8gY2hlY2sgaWYgd2UgYXJlIGRlbGF5aW5nIG5hdGl2ZSBlbmNvZGVcbiAgICAgICAgICAgIGlmIChuYXRpdmVFbmNvZGVQb3MgIT09IC0xKSB7XG4gICAgICAgICAgICAgICAgcmVzICs9IGVuY29kZVVSSUNvbXBvbmVudCh1cmlDb21wb25lbnQuc3Vic3RyaW5nKG5hdGl2ZUVuY29kZVBvcywgcG9zKSk7XG4gICAgICAgICAgICAgICAgbmF0aXZlRW5jb2RlUG9zID0gLTE7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAvLyBjaGVjayBpZiB3ZSB3cml0ZSBpbnRvIGEgbmV3IHN0cmluZyAoYnkgZGVmYXVsdCB3ZSB0cnkgdG8gcmV0dXJuIHRoZSBwYXJhbSlcbiAgICAgICAgICAgIGlmIChyZXMgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgIHJlcyArPSB1cmlDb21wb25lbnQuY2hhckF0KHBvcyk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAvLyBlbmNvZGluZyBuZWVkZWQsIHdlIG5lZWQgdG8gYWxsb2NhdGUgYSBuZXcgc3RyaW5nXG4gICAgICAgICAgICBpZiAocmVzID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICByZXMgPSB1cmlDb21wb25lbnQuc3Vic3RyKDAsIHBvcyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAvLyBjaGVjayB3aXRoIGRlZmF1bHQgdGFibGUgZmlyc3RcbiAgICAgICAgICAgIGNvbnN0IGVzY2FwZWQgPSBlbmNvZGVUYWJsZVtjb2RlXTtcbiAgICAgICAgICAgIGlmIChlc2NhcGVkICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICAvLyBjaGVjayBpZiB3ZSBhcmUgZGVsYXlpbmcgbmF0aXZlIGVuY29kZVxuICAgICAgICAgICAgICAgIGlmIChuYXRpdmVFbmNvZGVQb3MgIT09IC0xKSB7XG4gICAgICAgICAgICAgICAgICAgIHJlcyArPSBlbmNvZGVVUklDb21wb25lbnQodXJpQ29tcG9uZW50LnN1YnN0cmluZyhuYXRpdmVFbmNvZGVQb3MsIHBvcykpO1xuICAgICAgICAgICAgICAgICAgICBuYXRpdmVFbmNvZGVQb3MgPSAtMTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgLy8gYXBwZW5kIGVzY2FwZWQgdmFyaWFudCB0byByZXN1bHRcbiAgICAgICAgICAgICAgICByZXMgKz0gZXNjYXBlZDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKG5hdGl2ZUVuY29kZVBvcyA9PT0gLTEpIHtcbiAgICAgICAgICAgICAgICAvLyB1c2UgbmF0aXZlIGVuY29kZSBvbmx5IHdoZW4gbmVlZGVkXG4gICAgICAgICAgICAgICAgbmF0aXZlRW5jb2RlUG9zID0gcG9zO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuICAgIGlmIChuYXRpdmVFbmNvZGVQb3MgIT09IC0xKSB7XG4gICAgICAgIHJlcyArPSBlbmNvZGVVUklDb21wb25lbnQodXJpQ29tcG9uZW50LnN1YnN0cmluZyhuYXRpdmVFbmNvZGVQb3MpKTtcbiAgICB9XG4gICAgcmV0dXJuIHJlcyAhPT0gdW5kZWZpbmVkID8gcmVzIDogdXJpQ29tcG9uZW50O1xufVxuZnVuY3Rpb24gZW5jb2RlVVJJQ29tcG9uZW50TWluaW1hbChwYXRoKSB7XG4gICAgbGV0IHJlcyA9IHVuZGVmaW5lZDtcbiAgICBmb3IgKGxldCBwb3MgPSAwOyBwb3MgPCBwYXRoLmxlbmd0aDsgcG9zKyspIHtcbiAgICAgICAgY29uc3QgY29kZSA9IHBhdGguY2hhckNvZGVBdChwb3MpO1xuICAgICAgICBpZiAoY29kZSA9PT0gMzUgLyogQ2hhckNvZGUuSGFzaCAqLyB8fCBjb2RlID09PSA2MyAvKiBDaGFyQ29kZS5RdWVzdGlvbk1hcmsgKi8pIHtcbiAgICAgICAgICAgIGlmIChyZXMgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgIHJlcyA9IHBhdGguc3Vic3RyKDAsIHBvcyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXMgKz0gZW5jb2RlVGFibGVbY29kZV07XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBpZiAocmVzICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICByZXMgKz0gcGF0aFtwb3NdO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiByZXMgIT09IHVuZGVmaW5lZCA/IHJlcyA6IHBhdGg7XG59XG4vKipcbiAqIENvbXB1dGUgYGZzUGF0aGAgZm9yIHRoZSBnaXZlbiB1cmlcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHVyaVRvRnNQYXRoKHVyaSwga2VlcERyaXZlTGV0dGVyQ2FzaW5nKSB7XG4gICAgbGV0IHZhbHVlO1xuICAgIGlmICh1cmkuYXV0aG9yaXR5ICYmIHVyaS5wYXRoLmxlbmd0aCA+IDEgJiYgdXJpLnNjaGVtZSA9PT0gJ2ZpbGUnKSB7XG4gICAgICAgIC8vIHVuYyBwYXRoOiBmaWxlOi8vc2hhcmVzL2MkL2Zhci9ib29cbiAgICAgICAgdmFsdWUgPSBgLy8ke3VyaS5hdXRob3JpdHl9JHt1cmkucGF0aH1gO1xuICAgIH1cbiAgICBlbHNlIGlmICh1cmkucGF0aC5jaGFyQ29kZUF0KDApID09PSA0NyAvKiBDaGFyQ29kZS5TbGFzaCAqL1xuICAgICAgICAmJiAodXJpLnBhdGguY2hhckNvZGVBdCgxKSA+PSA2NSAvKiBDaGFyQ29kZS5BICovICYmIHVyaS5wYXRoLmNoYXJDb2RlQXQoMSkgPD0gOTAgLyogQ2hhckNvZGUuWiAqLyB8fCB1cmkucGF0aC5jaGFyQ29kZUF0KDEpID49IDk3IC8qIENoYXJDb2RlLmEgKi8gJiYgdXJpLnBhdGguY2hhckNvZGVBdCgxKSA8PSAxMjIgLyogQ2hhckNvZGUueiAqLylcbiAgICAgICAgJiYgdXJpLnBhdGguY2hhckNvZGVBdCgyKSA9PT0gNTggLyogQ2hhckNvZGUuQ29sb24gKi8pIHtcbiAgICAgICAgaWYgKCFrZWVwRHJpdmVMZXR0ZXJDYXNpbmcpIHtcbiAgICAgICAgICAgIC8vIHdpbmRvd3MgZHJpdmUgbGV0dGVyOiBmaWxlOi8vL2M6L2Zhci9ib29cbiAgICAgICAgICAgIHZhbHVlID0gdXJpLnBhdGhbMV0udG9Mb3dlckNhc2UoKSArIHVyaS5wYXRoLnN1YnN0cigyKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHZhbHVlID0gdXJpLnBhdGguc3Vic3RyKDEpO1xuICAgICAgICB9XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICAvLyBvdGhlciBwYXRoXG4gICAgICAgIHZhbHVlID0gdXJpLnBhdGg7XG4gICAgfVxuICAgIGlmIChpc1dpbmRvd3MpIHtcbiAgICAgICAgdmFsdWUgPSB2YWx1ZS5yZXBsYWNlKC9cXC8vZywgJ1xcXFwnKTtcbiAgICB9XG4gICAgcmV0dXJuIHZhbHVlO1xufVxuLyoqXG4gKiBDcmVhdGUgdGhlIGV4dGVybmFsIHZlcnNpb24gb2YgYSB1cmlcbiAqL1xuZnVuY3Rpb24gX2FzRm9ybWF0dGVkKHVyaSwgc2tpcEVuY29kaW5nKSB7XG4gICAgY29uc3QgZW5jb2RlciA9ICFza2lwRW5jb2RpbmdcbiAgICAgICAgPyBlbmNvZGVVUklDb21wb25lbnRGYXN0XG4gICAgICAgIDogZW5jb2RlVVJJQ29tcG9uZW50TWluaW1hbDtcbiAgICBsZXQgcmVzID0gJyc7XG4gICAgbGV0IHsgc2NoZW1lLCBhdXRob3JpdHksIHBhdGgsIHF1ZXJ5LCBmcmFnbWVudCB9ID0gdXJpO1xuICAgIGlmIChzY2hlbWUpIHtcbiAgICAgICAgcmVzICs9IHNjaGVtZTtcbiAgICAgICAgcmVzICs9ICc6JztcbiAgICB9XG4gICAgaWYgKGF1dGhvcml0eSB8fCBzY2hlbWUgPT09ICdmaWxlJykge1xuICAgICAgICByZXMgKz0gX3NsYXNoO1xuICAgICAgICByZXMgKz0gX3NsYXNoO1xuICAgIH1cbiAgICBpZiAoYXV0aG9yaXR5KSB7XG4gICAgICAgIGxldCBpZHggPSBhdXRob3JpdHkuaW5kZXhPZignQCcpO1xuICAgICAgICBpZiAoaWR4ICE9PSAtMSkge1xuICAgICAgICAgICAgLy8gPHVzZXI+QDxhdXRoPlxuICAgICAgICAgICAgY29uc3QgdXNlcmluZm8gPSBhdXRob3JpdHkuc3Vic3RyKDAsIGlkeCk7XG4gICAgICAgICAgICBhdXRob3JpdHkgPSBhdXRob3JpdHkuc3Vic3RyKGlkeCArIDEpO1xuICAgICAgICAgICAgaWR4ID0gdXNlcmluZm8ubGFzdEluZGV4T2YoJzonKTtcbiAgICAgICAgICAgIGlmIChpZHggPT09IC0xKSB7XG4gICAgICAgICAgICAgICAgcmVzICs9IGVuY29kZXIodXNlcmluZm8sIGZhbHNlLCBmYWxzZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAvLyA8dXNlcj46PHBhc3M+QDxhdXRoPlxuICAgICAgICAgICAgICAgIHJlcyArPSBlbmNvZGVyKHVzZXJpbmZvLnN1YnN0cigwLCBpZHgpLCBmYWxzZSwgZmFsc2UpO1xuICAgICAgICAgICAgICAgIHJlcyArPSAnOic7XG4gICAgICAgICAgICAgICAgcmVzICs9IGVuY29kZXIodXNlcmluZm8uc3Vic3RyKGlkeCArIDEpLCBmYWxzZSwgdHJ1ZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXMgKz0gJ0AnO1xuICAgICAgICB9XG4gICAgICAgIGF1dGhvcml0eSA9IGF1dGhvcml0eS50b0xvd2VyQ2FzZSgpO1xuICAgICAgICBpZHggPSBhdXRob3JpdHkubGFzdEluZGV4T2YoJzonKTtcbiAgICAgICAgaWYgKGlkeCA9PT0gLTEpIHtcbiAgICAgICAgICAgIHJlcyArPSBlbmNvZGVyKGF1dGhvcml0eSwgZmFsc2UsIHRydWUpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgLy8gPGF1dGg+Ojxwb3J0PlxuICAgICAgICAgICAgcmVzICs9IGVuY29kZXIoYXV0aG9yaXR5LnN1YnN0cigwLCBpZHgpLCBmYWxzZSwgdHJ1ZSk7XG4gICAgICAgICAgICByZXMgKz0gYXV0aG9yaXR5LnN1YnN0cihpZHgpO1xuICAgICAgICB9XG4gICAgfVxuICAgIGlmIChwYXRoKSB7XG4gICAgICAgIC8vIGxvd2VyLWNhc2Ugd2luZG93cyBkcml2ZSBsZXR0ZXJzIGluIC9DOi9mZmYgb3IgQzovZmZmXG4gICAgICAgIGlmIChwYXRoLmxlbmd0aCA+PSAzICYmIHBhdGguY2hhckNvZGVBdCgwKSA9PT0gNDcgLyogQ2hhckNvZGUuU2xhc2ggKi8gJiYgcGF0aC5jaGFyQ29kZUF0KDIpID09PSA1OCAvKiBDaGFyQ29kZS5Db2xvbiAqLykge1xuICAgICAgICAgICAgY29uc3QgY29kZSA9IHBhdGguY2hhckNvZGVBdCgxKTtcbiAgICAgICAgICAgIGlmIChjb2RlID49IDY1IC8qIENoYXJDb2RlLkEgKi8gJiYgY29kZSA8PSA5MCAvKiBDaGFyQ29kZS5aICovKSB7XG4gICAgICAgICAgICAgICAgcGF0aCA9IGAvJHtTdHJpbmcuZnJvbUNoYXJDb2RlKGNvZGUgKyAzMil9OiR7cGF0aC5zdWJzdHIoMyl9YDsgLy8gXCIvYzpcIi5sZW5ndGggPT09IDNcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChwYXRoLmxlbmd0aCA+PSAyICYmIHBhdGguY2hhckNvZGVBdCgxKSA9PT0gNTggLyogQ2hhckNvZGUuQ29sb24gKi8pIHtcbiAgICAgICAgICAgIGNvbnN0IGNvZGUgPSBwYXRoLmNoYXJDb2RlQXQoMCk7XG4gICAgICAgICAgICBpZiAoY29kZSA+PSA2NSAvKiBDaGFyQ29kZS5BICovICYmIGNvZGUgPD0gOTAgLyogQ2hhckNvZGUuWiAqLykge1xuICAgICAgICAgICAgICAgIHBhdGggPSBgJHtTdHJpbmcuZnJvbUNoYXJDb2RlKGNvZGUgKyAzMil9OiR7cGF0aC5zdWJzdHIoMil9YDsgLy8gXCIvYzpcIi5sZW5ndGggPT09IDNcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICAvLyBlbmNvZGUgdGhlIHJlc3Qgb2YgdGhlIHBhdGhcbiAgICAgICAgcmVzICs9IGVuY29kZXIocGF0aCwgdHJ1ZSwgZmFsc2UpO1xuICAgIH1cbiAgICBpZiAocXVlcnkpIHtcbiAgICAgICAgcmVzICs9ICc/JztcbiAgICAgICAgcmVzICs9IGVuY29kZXIocXVlcnksIGZhbHNlLCBmYWxzZSk7XG4gICAgfVxuICAgIGlmIChmcmFnbWVudCkge1xuICAgICAgICByZXMgKz0gJyMnO1xuICAgICAgICByZXMgKz0gIXNraXBFbmNvZGluZyA/IGVuY29kZVVSSUNvbXBvbmVudEZhc3QoZnJhZ21lbnQsIGZhbHNlLCBmYWxzZSkgOiBmcmFnbWVudDtcbiAgICB9XG4gICAgcmV0dXJuIHJlcztcbn1cbi8vIC0tLSBkZWNvZGVcbmZ1bmN0aW9uIGRlY29kZVVSSUNvbXBvbmVudEdyYWNlZnVsKHN0cikge1xuICAgIHRyeSB7XG4gICAgICAgIHJldHVybiBkZWNvZGVVUklDb21wb25lbnQoc3RyKTtcbiAgICB9XG4gICAgY2F0Y2ggKF9hKSB7XG4gICAgICAgIGlmIChzdHIubGVuZ3RoID4gMykge1xuICAgICAgICAgICAgcmV0dXJuIHN0ci5zdWJzdHIoMCwgMykgKyBkZWNvZGVVUklDb21wb25lbnRHcmFjZWZ1bChzdHIuc3Vic3RyKDMpKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiBzdHI7XG4gICAgICAgIH1cbiAgICB9XG59XG5jb25zdCBfckVuY29kZWRBc0hleCA9IC8oJVswLTlBLVphLXpdWzAtOUEtWmEtel0pKy9nO1xuZnVuY3Rpb24gcGVyY2VudERlY29kZShzdHIpIHtcbiAgICBpZiAoIXN0ci5tYXRjaChfckVuY29kZWRBc0hleCkpIHtcbiAgICAgICAgcmV0dXJuIHN0cjtcbiAgICB9XG4gICAgcmV0dXJuIHN0ci5yZXBsYWNlKF9yRW5jb2RlZEFzSGV4LCAobWF0Y2gpID0+IGRlY29kZVVSSUNvbXBvbmVudEdyYWNlZnVsKG1hdGNoKSk7XG59XG4iLCAiLyotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAqICBDb3B5cmlnaHQgKGMpIE1pY3Jvc29mdCBDb3Jwb3JhdGlvbi4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqICBMaWNlbnNlZCB1bmRlciB0aGUgTUlUIExpY2Vuc2UuIFNlZSBMaWNlbnNlLnR4dCBpbiB0aGUgcHJvamVjdCByb290IGZvciBsaWNlbnNlIGluZm9ybWF0aW9uLlxuICotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSovXG4vKipcbiAqIEEgcG9zaXRpb24gaW4gdGhlIGVkaXRvci5cbiAqL1xuZXhwb3J0IGNsYXNzIFBvc2l0aW9uIHtcbiAgICBjb25zdHJ1Y3RvcihsaW5lTnVtYmVyLCBjb2x1bW4pIHtcbiAgICAgICAgdGhpcy5saW5lTnVtYmVyID0gbGluZU51bWJlcjtcbiAgICAgICAgdGhpcy5jb2x1bW4gPSBjb2x1bW47XG4gICAgfVxuICAgIC8qKlxuICAgICAqIENyZWF0ZSBhIG5ldyBwb3NpdGlvbiBmcm9tIHRoaXMgcG9zaXRpb24uXG4gICAgICpcbiAgICAgKiBAcGFyYW0gbmV3TGluZU51bWJlciBuZXcgbGluZSBudW1iZXJcbiAgICAgKiBAcGFyYW0gbmV3Q29sdW1uIG5ldyBjb2x1bW5cbiAgICAgKi9cbiAgICB3aXRoKG5ld0xpbmVOdW1iZXIgPSB0aGlzLmxpbmVOdW1iZXIsIG5ld0NvbHVtbiA9IHRoaXMuY29sdW1uKSB7XG4gICAgICAgIGlmIChuZXdMaW5lTnVtYmVyID09PSB0aGlzLmxpbmVOdW1iZXIgJiYgbmV3Q29sdW1uID09PSB0aGlzLmNvbHVtbikge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gbmV3IFBvc2l0aW9uKG5ld0xpbmVOdW1iZXIsIG5ld0NvbHVtbik7XG4gICAgICAgIH1cbiAgICB9XG4gICAgLyoqXG4gICAgICogRGVyaXZlIGEgbmV3IHBvc2l0aW9uIGZyb20gdGhpcyBwb3NpdGlvbi5cbiAgICAgKlxuICAgICAqIEBwYXJhbSBkZWx0YUxpbmVOdW1iZXIgbGluZSBudW1iZXIgZGVsdGFcbiAgICAgKiBAcGFyYW0gZGVsdGFDb2x1bW4gY29sdW1uIGRlbHRhXG4gICAgICovXG4gICAgZGVsdGEoZGVsdGFMaW5lTnVtYmVyID0gMCwgZGVsdGFDb2x1bW4gPSAwKSB7XG4gICAgICAgIHJldHVybiB0aGlzLndpdGgodGhpcy5saW5lTnVtYmVyICsgZGVsdGFMaW5lTnVtYmVyLCB0aGlzLmNvbHVtbiArIGRlbHRhQ29sdW1uKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogVGVzdCBpZiB0aGlzIHBvc2l0aW9uIGVxdWFscyBvdGhlciBwb3NpdGlvblxuICAgICAqL1xuICAgIGVxdWFscyhvdGhlcikge1xuICAgICAgICByZXR1cm4gUG9zaXRpb24uZXF1YWxzKHRoaXMsIG90aGVyKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogVGVzdCBpZiBwb3NpdGlvbiBgYWAgZXF1YWxzIHBvc2l0aW9uIGBiYFxuICAgICAqL1xuICAgIHN0YXRpYyBlcXVhbHMoYSwgYikge1xuICAgICAgICBpZiAoIWEgJiYgIWIpIHtcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiAoISFhICYmXG4gICAgICAgICAgICAhIWIgJiZcbiAgICAgICAgICAgIGEubGluZU51bWJlciA9PT0gYi5saW5lTnVtYmVyICYmXG4gICAgICAgICAgICBhLmNvbHVtbiA9PT0gYi5jb2x1bW4pO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBUZXN0IGlmIHRoaXMgcG9zaXRpb24gaXMgYmVmb3JlIG90aGVyIHBvc2l0aW9uLlxuICAgICAqIElmIHRoZSB0d28gcG9zaXRpb25zIGFyZSBlcXVhbCwgdGhlIHJlc3VsdCB3aWxsIGJlIGZhbHNlLlxuICAgICAqL1xuICAgIGlzQmVmb3JlKG90aGVyKSB7XG4gICAgICAgIHJldHVybiBQb3NpdGlvbi5pc0JlZm9yZSh0aGlzLCBvdGhlcik7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFRlc3QgaWYgcG9zaXRpb24gYGFgIGlzIGJlZm9yZSBwb3NpdGlvbiBgYmAuXG4gICAgICogSWYgdGhlIHR3byBwb3NpdGlvbnMgYXJlIGVxdWFsLCB0aGUgcmVzdWx0IHdpbGwgYmUgZmFsc2UuXG4gICAgICovXG4gICAgc3RhdGljIGlzQmVmb3JlKGEsIGIpIHtcbiAgICAgICAgaWYgKGEubGluZU51bWJlciA8IGIubGluZU51bWJlcikge1xuICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGIubGluZU51bWJlciA8IGEubGluZU51bWJlcikge1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBhLmNvbHVtbiA8IGIuY29sdW1uO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBUZXN0IGlmIHRoaXMgcG9zaXRpb24gaXMgYmVmb3JlIG90aGVyIHBvc2l0aW9uLlxuICAgICAqIElmIHRoZSB0d28gcG9zaXRpb25zIGFyZSBlcXVhbCwgdGhlIHJlc3VsdCB3aWxsIGJlIHRydWUuXG4gICAgICovXG4gICAgaXNCZWZvcmVPckVxdWFsKG90aGVyKSB7XG4gICAgICAgIHJldHVybiBQb3NpdGlvbi5pc0JlZm9yZU9yRXF1YWwodGhpcywgb3RoZXIpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBUZXN0IGlmIHBvc2l0aW9uIGBhYCBpcyBiZWZvcmUgcG9zaXRpb24gYGJgLlxuICAgICAqIElmIHRoZSB0d28gcG9zaXRpb25zIGFyZSBlcXVhbCwgdGhlIHJlc3VsdCB3aWxsIGJlIHRydWUuXG4gICAgICovXG4gICAgc3RhdGljIGlzQmVmb3JlT3JFcXVhbChhLCBiKSB7XG4gICAgICAgIGlmIChhLmxpbmVOdW1iZXIgPCBiLmxpbmVOdW1iZXIpIHtcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9XG4gICAgICAgIGlmIChiLmxpbmVOdW1iZXIgPCBhLmxpbmVOdW1iZXIpIHtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gYS5jb2x1bW4gPD0gYi5jb2x1bW47XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEEgZnVuY3Rpb24gdGhhdCBjb21wYXJlcyBwb3NpdGlvbnMsIHVzZWZ1bCBmb3Igc29ydGluZ1xuICAgICAqL1xuICAgIHN0YXRpYyBjb21wYXJlKGEsIGIpIHtcbiAgICAgICAgY29uc3QgYUxpbmVOdW1iZXIgPSBhLmxpbmVOdW1iZXIgfCAwO1xuICAgICAgICBjb25zdCBiTGluZU51bWJlciA9IGIubGluZU51bWJlciB8IDA7XG4gICAgICAgIGlmIChhTGluZU51bWJlciA9PT0gYkxpbmVOdW1iZXIpIHtcbiAgICAgICAgICAgIGNvbnN0IGFDb2x1bW4gPSBhLmNvbHVtbiB8IDA7XG4gICAgICAgICAgICBjb25zdCBiQ29sdW1uID0gYi5jb2x1bW4gfCAwO1xuICAgICAgICAgICAgcmV0dXJuIGFDb2x1bW4gLSBiQ29sdW1uO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBhTGluZU51bWJlciAtIGJMaW5lTnVtYmVyO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBDbG9uZSB0aGlzIHBvc2l0aW9uLlxuICAgICAqL1xuICAgIGNsb25lKCkge1xuICAgICAgICByZXR1cm4gbmV3IFBvc2l0aW9uKHRoaXMubGluZU51bWJlciwgdGhpcy5jb2x1bW4pO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBDb252ZXJ0IHRvIGEgaHVtYW4tcmVhZGFibGUgcmVwcmVzZW50YXRpb24uXG4gICAgICovXG4gICAgdG9TdHJpbmcoKSB7XG4gICAgICAgIHJldHVybiAnKCcgKyB0aGlzLmxpbmVOdW1iZXIgKyAnLCcgKyB0aGlzLmNvbHVtbiArICcpJztcbiAgICB9XG4gICAgLy8gLS0tXG4gICAgLyoqXG4gICAgICogQ3JlYXRlIGEgYFBvc2l0aW9uYCBmcm9tIGFuIGBJUG9zaXRpb25gLlxuICAgICAqL1xuICAgIHN0YXRpYyBsaWZ0KHBvcykge1xuICAgICAgICByZXR1cm4gbmV3IFBvc2l0aW9uKHBvcy5saW5lTnVtYmVyLCBwb3MuY29sdW1uKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogVGVzdCBpZiBgb2JqYCBpcyBhbiBgSVBvc2l0aW9uYC5cbiAgICAgKi9cbiAgICBzdGF0aWMgaXNJUG9zaXRpb24ob2JqKSB7XG4gICAgICAgIHJldHVybiAob2JqXG4gICAgICAgICAgICAmJiAodHlwZW9mIG9iai5saW5lTnVtYmVyID09PSAnbnVtYmVyJylcbiAgICAgICAgICAgICYmICh0eXBlb2Ygb2JqLmNvbHVtbiA9PT0gJ251bWJlcicpKTtcbiAgICB9XG4gICAgdG9KU09OKCkge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgbGluZU51bWJlcjogdGhpcy5saW5lTnVtYmVyLFxuICAgICAgICAgICAgY29sdW1uOiB0aGlzLmNvbHVtblxuICAgICAgICB9O1xuICAgIH1cbn1cbiIsICIvKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICogIENvcHlyaWdodCAoYykgTWljcm9zb2Z0IENvcnBvcmF0aW9uLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICogIExpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgTGljZW5zZS4gU2VlIExpY2Vuc2UudHh0IGluIHRoZSBwcm9qZWN0IHJvb3QgZm9yIGxpY2Vuc2UgaW5mb3JtYXRpb24uXG4gKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKi9cbmltcG9ydCB7IFBvc2l0aW9uIH0gZnJvbSAnLi9wb3NpdGlvbi5qcyc7XG4vKipcbiAqIEEgcmFuZ2UgaW4gdGhlIGVkaXRvci4gKHN0YXJ0TGluZU51bWJlcixzdGFydENvbHVtbikgaXMgPD0gKGVuZExpbmVOdW1iZXIsZW5kQ29sdW1uKVxuICovXG5leHBvcnQgY2xhc3MgUmFuZ2Uge1xuICAgIGNvbnN0cnVjdG9yKHN0YXJ0TGluZU51bWJlciwgc3RhcnRDb2x1bW4sIGVuZExpbmVOdW1iZXIsIGVuZENvbHVtbikge1xuICAgICAgICBpZiAoKHN0YXJ0TGluZU51bWJlciA+IGVuZExpbmVOdW1iZXIpIHx8IChzdGFydExpbmVOdW1iZXIgPT09IGVuZExpbmVOdW1iZXIgJiYgc3RhcnRDb2x1bW4gPiBlbmRDb2x1bW4pKSB7XG4gICAgICAgICAgICB0aGlzLnN0YXJ0TGluZU51bWJlciA9IGVuZExpbmVOdW1iZXI7XG4gICAgICAgICAgICB0aGlzLnN0YXJ0Q29sdW1uID0gZW5kQ29sdW1uO1xuICAgICAgICAgICAgdGhpcy5lbmRMaW5lTnVtYmVyID0gc3RhcnRMaW5lTnVtYmVyO1xuICAgICAgICAgICAgdGhpcy5lbmRDb2x1bW4gPSBzdGFydENvbHVtbjtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMuc3RhcnRMaW5lTnVtYmVyID0gc3RhcnRMaW5lTnVtYmVyO1xuICAgICAgICAgICAgdGhpcy5zdGFydENvbHVtbiA9IHN0YXJ0Q29sdW1uO1xuICAgICAgICAgICAgdGhpcy5lbmRMaW5lTnVtYmVyID0gZW5kTGluZU51bWJlcjtcbiAgICAgICAgICAgIHRoaXMuZW5kQ29sdW1uID0gZW5kQ29sdW1uO1xuICAgICAgICB9XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFRlc3QgaWYgdGhpcyByYW5nZSBpcyBlbXB0eS5cbiAgICAgKi9cbiAgICBpc0VtcHR5KCkge1xuICAgICAgICByZXR1cm4gUmFuZ2UuaXNFbXB0eSh0aGlzKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogVGVzdCBpZiBgcmFuZ2VgIGlzIGVtcHR5LlxuICAgICAqL1xuICAgIHN0YXRpYyBpc0VtcHR5KHJhbmdlKSB7XG4gICAgICAgIHJldHVybiAocmFuZ2Uuc3RhcnRMaW5lTnVtYmVyID09PSByYW5nZS5lbmRMaW5lTnVtYmVyICYmIHJhbmdlLnN0YXJ0Q29sdW1uID09PSByYW5nZS5lbmRDb2x1bW4pO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBUZXN0IGlmIHBvc2l0aW9uIGlzIGluIHRoaXMgcmFuZ2UuIElmIHRoZSBwb3NpdGlvbiBpcyBhdCB0aGUgZWRnZXMsIHdpbGwgcmV0dXJuIHRydWUuXG4gICAgICovXG4gICAgY29udGFpbnNQb3NpdGlvbihwb3NpdGlvbikge1xuICAgICAgICByZXR1cm4gUmFuZ2UuY29udGFpbnNQb3NpdGlvbih0aGlzLCBwb3NpdGlvbik7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFRlc3QgaWYgYHBvc2l0aW9uYCBpcyBpbiBgcmFuZ2VgLiBJZiB0aGUgcG9zaXRpb24gaXMgYXQgdGhlIGVkZ2VzLCB3aWxsIHJldHVybiB0cnVlLlxuICAgICAqL1xuICAgIHN0YXRpYyBjb250YWluc1Bvc2l0aW9uKHJhbmdlLCBwb3NpdGlvbikge1xuICAgICAgICBpZiAocG9zaXRpb24ubGluZU51bWJlciA8IHJhbmdlLnN0YXJ0TGluZU51bWJlciB8fCBwb3NpdGlvbi5saW5lTnVtYmVyID4gcmFuZ2UuZW5kTGluZU51bWJlcikge1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgICAgIGlmIChwb3NpdGlvbi5saW5lTnVtYmVyID09PSByYW5nZS5zdGFydExpbmVOdW1iZXIgJiYgcG9zaXRpb24uY29sdW1uIDwgcmFuZ2Uuc3RhcnRDb2x1bW4pIHtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgICBpZiAocG9zaXRpb24ubGluZU51bWJlciA9PT0gcmFuZ2UuZW5kTGluZU51bWJlciAmJiBwb3NpdGlvbi5jb2x1bW4gPiByYW5nZS5lbmRDb2x1bW4pIHtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogVGVzdCBpZiBgcG9zaXRpb25gIGlzIGluIGByYW5nZWAuIElmIHRoZSBwb3NpdGlvbiBpcyBhdCB0aGUgZWRnZXMsIHdpbGwgcmV0dXJuIGZhbHNlLlxuICAgICAqIEBpbnRlcm5hbFxuICAgICAqL1xuICAgIHN0YXRpYyBzdHJpY3RDb250YWluc1Bvc2l0aW9uKHJhbmdlLCBwb3NpdGlvbikge1xuICAgICAgICBpZiAocG9zaXRpb24ubGluZU51bWJlciA8IHJhbmdlLnN0YXJ0TGluZU51bWJlciB8fCBwb3NpdGlvbi5saW5lTnVtYmVyID4gcmFuZ2UuZW5kTGluZU51bWJlcikge1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgICAgIGlmIChwb3NpdGlvbi5saW5lTnVtYmVyID09PSByYW5nZS5zdGFydExpbmVOdW1iZXIgJiYgcG9zaXRpb24uY29sdW1uIDw9IHJhbmdlLnN0YXJ0Q29sdW1uKSB7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHBvc2l0aW9uLmxpbmVOdW1iZXIgPT09IHJhbmdlLmVuZExpbmVOdW1iZXIgJiYgcG9zaXRpb24uY29sdW1uID49IHJhbmdlLmVuZENvbHVtbikge1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBUZXN0IGlmIHJhbmdlIGlzIGluIHRoaXMgcmFuZ2UuIElmIHRoZSByYW5nZSBpcyBlcXVhbCB0byB0aGlzIHJhbmdlLCB3aWxsIHJldHVybiB0cnVlLlxuICAgICAqL1xuICAgIGNvbnRhaW5zUmFuZ2UocmFuZ2UpIHtcbiAgICAgICAgcmV0dXJuIFJhbmdlLmNvbnRhaW5zUmFuZ2UodGhpcywgcmFuZ2UpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBUZXN0IGlmIGBvdGhlclJhbmdlYCBpcyBpbiBgcmFuZ2VgLiBJZiB0aGUgcmFuZ2VzIGFyZSBlcXVhbCwgd2lsbCByZXR1cm4gdHJ1ZS5cbiAgICAgKi9cbiAgICBzdGF0aWMgY29udGFpbnNSYW5nZShyYW5nZSwgb3RoZXJSYW5nZSkge1xuICAgICAgICBpZiAob3RoZXJSYW5nZS5zdGFydExpbmVOdW1iZXIgPCByYW5nZS5zdGFydExpbmVOdW1iZXIgfHwgb3RoZXJSYW5nZS5lbmRMaW5lTnVtYmVyIDwgcmFuZ2Uuc3RhcnRMaW5lTnVtYmVyKSB7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKG90aGVyUmFuZ2Uuc3RhcnRMaW5lTnVtYmVyID4gcmFuZ2UuZW5kTGluZU51bWJlciB8fCBvdGhlclJhbmdlLmVuZExpbmVOdW1iZXIgPiByYW5nZS5lbmRMaW5lTnVtYmVyKSB7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKG90aGVyUmFuZ2Uuc3RhcnRMaW5lTnVtYmVyID09PSByYW5nZS5zdGFydExpbmVOdW1iZXIgJiYgb3RoZXJSYW5nZS5zdGFydENvbHVtbiA8IHJhbmdlLnN0YXJ0Q29sdW1uKSB7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKG90aGVyUmFuZ2UuZW5kTGluZU51bWJlciA9PT0gcmFuZ2UuZW5kTGluZU51bWJlciAmJiBvdGhlclJhbmdlLmVuZENvbHVtbiA+IHJhbmdlLmVuZENvbHVtbikge1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBUZXN0IGlmIGByYW5nZWAgaXMgc3RyaWN0bHkgaW4gdGhpcyByYW5nZS4gYHJhbmdlYCBtdXN0IHN0YXJ0IGFmdGVyIGFuZCBlbmQgYmVmb3JlIHRoaXMgcmFuZ2UgZm9yIHRoZSByZXN1bHQgdG8gYmUgdHJ1ZS5cbiAgICAgKi9cbiAgICBzdHJpY3RDb250YWluc1JhbmdlKHJhbmdlKSB7XG4gICAgICAgIHJldHVybiBSYW5nZS5zdHJpY3RDb250YWluc1JhbmdlKHRoaXMsIHJhbmdlKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogVGVzdCBpZiBgb3RoZXJSYW5nZWAgaXMgc3RyaWN0bHkgaW4gYHJhbmdlYCAobXVzdCBzdGFydCBhZnRlciwgYW5kIGVuZCBiZWZvcmUpLiBJZiB0aGUgcmFuZ2VzIGFyZSBlcXVhbCwgd2lsbCByZXR1cm4gZmFsc2UuXG4gICAgICovXG4gICAgc3RhdGljIHN0cmljdENvbnRhaW5zUmFuZ2UocmFuZ2UsIG90aGVyUmFuZ2UpIHtcbiAgICAgICAgaWYgKG90aGVyUmFuZ2Uuc3RhcnRMaW5lTnVtYmVyIDwgcmFuZ2Uuc3RhcnRMaW5lTnVtYmVyIHx8IG90aGVyUmFuZ2UuZW5kTGluZU51bWJlciA8IHJhbmdlLnN0YXJ0TGluZU51bWJlcikge1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgICAgIGlmIChvdGhlclJhbmdlLnN0YXJ0TGluZU51bWJlciA+IHJhbmdlLmVuZExpbmVOdW1iZXIgfHwgb3RoZXJSYW5nZS5lbmRMaW5lTnVtYmVyID4gcmFuZ2UuZW5kTGluZU51bWJlcikge1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgICAgIGlmIChvdGhlclJhbmdlLnN0YXJ0TGluZU51bWJlciA9PT0gcmFuZ2Uuc3RhcnRMaW5lTnVtYmVyICYmIG90aGVyUmFuZ2Uuc3RhcnRDb2x1bW4gPD0gcmFuZ2Uuc3RhcnRDb2x1bW4pIHtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgICBpZiAob3RoZXJSYW5nZS5lbmRMaW5lTnVtYmVyID09PSByYW5nZS5lbmRMaW5lTnVtYmVyICYmIG90aGVyUmFuZ2UuZW5kQ29sdW1uID49IHJhbmdlLmVuZENvbHVtbikge1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBBIHJldW5pb24gb2YgdGhlIHR3byByYW5nZXMuXG4gICAgICogVGhlIHNtYWxsZXN0IHBvc2l0aW9uIHdpbGwgYmUgdXNlZCBhcyB0aGUgc3RhcnQgcG9pbnQsIGFuZCB0aGUgbGFyZ2VzdCBvbmUgYXMgdGhlIGVuZCBwb2ludC5cbiAgICAgKi9cbiAgICBwbHVzUmFuZ2UocmFuZ2UpIHtcbiAgICAgICAgcmV0dXJuIFJhbmdlLnBsdXNSYW5nZSh0aGlzLCByYW5nZSk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEEgcmV1bmlvbiBvZiB0aGUgdHdvIHJhbmdlcy5cbiAgICAgKiBUaGUgc21hbGxlc3QgcG9zaXRpb24gd2lsbCBiZSB1c2VkIGFzIHRoZSBzdGFydCBwb2ludCwgYW5kIHRoZSBsYXJnZXN0IG9uZSBhcyB0aGUgZW5kIHBvaW50LlxuICAgICAqL1xuICAgIHN0YXRpYyBwbHVzUmFuZ2UoYSwgYikge1xuICAgICAgICBsZXQgc3RhcnRMaW5lTnVtYmVyO1xuICAgICAgICBsZXQgc3RhcnRDb2x1bW47XG4gICAgICAgIGxldCBlbmRMaW5lTnVtYmVyO1xuICAgICAgICBsZXQgZW5kQ29sdW1uO1xuICAgICAgICBpZiAoYi5zdGFydExpbmVOdW1iZXIgPCBhLnN0YXJ0TGluZU51bWJlcikge1xuICAgICAgICAgICAgc3RhcnRMaW5lTnVtYmVyID0gYi5zdGFydExpbmVOdW1iZXI7XG4gICAgICAgICAgICBzdGFydENvbHVtbiA9IGIuc3RhcnRDb2x1bW47XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAoYi5zdGFydExpbmVOdW1iZXIgPT09IGEuc3RhcnRMaW5lTnVtYmVyKSB7XG4gICAgICAgICAgICBzdGFydExpbmVOdW1iZXIgPSBiLnN0YXJ0TGluZU51bWJlcjtcbiAgICAgICAgICAgIHN0YXJ0Q29sdW1uID0gTWF0aC5taW4oYi5zdGFydENvbHVtbiwgYS5zdGFydENvbHVtbik7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBzdGFydExpbmVOdW1iZXIgPSBhLnN0YXJ0TGluZU51bWJlcjtcbiAgICAgICAgICAgIHN0YXJ0Q29sdW1uID0gYS5zdGFydENvbHVtbjtcbiAgICAgICAgfVxuICAgICAgICBpZiAoYi5lbmRMaW5lTnVtYmVyID4gYS5lbmRMaW5lTnVtYmVyKSB7XG4gICAgICAgICAgICBlbmRMaW5lTnVtYmVyID0gYi5lbmRMaW5lTnVtYmVyO1xuICAgICAgICAgICAgZW5kQ29sdW1uID0gYi5lbmRDb2x1bW47XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAoYi5lbmRMaW5lTnVtYmVyID09PSBhLmVuZExpbmVOdW1iZXIpIHtcbiAgICAgICAgICAgIGVuZExpbmVOdW1iZXIgPSBiLmVuZExpbmVOdW1iZXI7XG4gICAgICAgICAgICBlbmRDb2x1bW4gPSBNYXRoLm1heChiLmVuZENvbHVtbiwgYS5lbmRDb2x1bW4pO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgZW5kTGluZU51bWJlciA9IGEuZW5kTGluZU51bWJlcjtcbiAgICAgICAgICAgIGVuZENvbHVtbiA9IGEuZW5kQ29sdW1uO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBuZXcgUmFuZ2Uoc3RhcnRMaW5lTnVtYmVyLCBzdGFydENvbHVtbiwgZW5kTGluZU51bWJlciwgZW5kQ29sdW1uKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQSBpbnRlcnNlY3Rpb24gb2YgdGhlIHR3byByYW5nZXMuXG4gICAgICovXG4gICAgaW50ZXJzZWN0UmFuZ2VzKHJhbmdlKSB7XG4gICAgICAgIHJldHVybiBSYW5nZS5pbnRlcnNlY3RSYW5nZXModGhpcywgcmFuZ2UpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBBIGludGVyc2VjdGlvbiBvZiB0aGUgdHdvIHJhbmdlcy5cbiAgICAgKi9cbiAgICBzdGF0aWMgaW50ZXJzZWN0UmFuZ2VzKGEsIGIpIHtcbiAgICAgICAgbGV0IHJlc3VsdFN0YXJ0TGluZU51bWJlciA9IGEuc3RhcnRMaW5lTnVtYmVyO1xuICAgICAgICBsZXQgcmVzdWx0U3RhcnRDb2x1bW4gPSBhLnN0YXJ0Q29sdW1uO1xuICAgICAgICBsZXQgcmVzdWx0RW5kTGluZU51bWJlciA9IGEuZW5kTGluZU51bWJlcjtcbiAgICAgICAgbGV0IHJlc3VsdEVuZENvbHVtbiA9IGEuZW5kQ29sdW1uO1xuICAgICAgICBjb25zdCBvdGhlclN0YXJ0TGluZU51bWJlciA9IGIuc3RhcnRMaW5lTnVtYmVyO1xuICAgICAgICBjb25zdCBvdGhlclN0YXJ0Q29sdW1uID0gYi5zdGFydENvbHVtbjtcbiAgICAgICAgY29uc3Qgb3RoZXJFbmRMaW5lTnVtYmVyID0gYi5lbmRMaW5lTnVtYmVyO1xuICAgICAgICBjb25zdCBvdGhlckVuZENvbHVtbiA9IGIuZW5kQ29sdW1uO1xuICAgICAgICBpZiAocmVzdWx0U3RhcnRMaW5lTnVtYmVyIDwgb3RoZXJTdGFydExpbmVOdW1iZXIpIHtcbiAgICAgICAgICAgIHJlc3VsdFN0YXJ0TGluZU51bWJlciA9IG90aGVyU3RhcnRMaW5lTnVtYmVyO1xuICAgICAgICAgICAgcmVzdWx0U3RhcnRDb2x1bW4gPSBvdGhlclN0YXJ0Q29sdW1uO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKHJlc3VsdFN0YXJ0TGluZU51bWJlciA9PT0gb3RoZXJTdGFydExpbmVOdW1iZXIpIHtcbiAgICAgICAgICAgIHJlc3VsdFN0YXJ0Q29sdW1uID0gTWF0aC5tYXgocmVzdWx0U3RhcnRDb2x1bW4sIG90aGVyU3RhcnRDb2x1bW4pO1xuICAgICAgICB9XG4gICAgICAgIGlmIChyZXN1bHRFbmRMaW5lTnVtYmVyID4gb3RoZXJFbmRMaW5lTnVtYmVyKSB7XG4gICAgICAgICAgICByZXN1bHRFbmRMaW5lTnVtYmVyID0gb3RoZXJFbmRMaW5lTnVtYmVyO1xuICAgICAgICAgICAgcmVzdWx0RW5kQ29sdW1uID0gb3RoZXJFbmRDb2x1bW47XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAocmVzdWx0RW5kTGluZU51bWJlciA9PT0gb3RoZXJFbmRMaW5lTnVtYmVyKSB7XG4gICAgICAgICAgICByZXN1bHRFbmRDb2x1bW4gPSBNYXRoLm1pbihyZXN1bHRFbmRDb2x1bW4sIG90aGVyRW5kQ29sdW1uKTtcbiAgICAgICAgfVxuICAgICAgICAvLyBDaGVjayBpZiBzZWxlY3Rpb24gaXMgbm93IGVtcHR5XG4gICAgICAgIGlmIChyZXN1bHRTdGFydExpbmVOdW1iZXIgPiByZXN1bHRFbmRMaW5lTnVtYmVyKSB7XG4gICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgfVxuICAgICAgICBpZiAocmVzdWx0U3RhcnRMaW5lTnVtYmVyID09PSByZXN1bHRFbmRMaW5lTnVtYmVyICYmIHJlc3VsdFN0YXJ0Q29sdW1uID4gcmVzdWx0RW5kQ29sdW1uKSB7XG4gICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbmV3IFJhbmdlKHJlc3VsdFN0YXJ0TGluZU51bWJlciwgcmVzdWx0U3RhcnRDb2x1bW4sIHJlc3VsdEVuZExpbmVOdW1iZXIsIHJlc3VsdEVuZENvbHVtbik7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFRlc3QgaWYgdGhpcyByYW5nZSBlcXVhbHMgb3RoZXIuXG4gICAgICovXG4gICAgZXF1YWxzUmFuZ2Uob3RoZXIpIHtcbiAgICAgICAgcmV0dXJuIFJhbmdlLmVxdWFsc1JhbmdlKHRoaXMsIG90aGVyKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogVGVzdCBpZiByYW5nZSBgYWAgZXF1YWxzIGBiYC5cbiAgICAgKi9cbiAgICBzdGF0aWMgZXF1YWxzUmFuZ2UoYSwgYikge1xuICAgICAgICBpZiAoIWEgJiYgIWIpIHtcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiAoISFhICYmXG4gICAgICAgICAgICAhIWIgJiZcbiAgICAgICAgICAgIGEuc3RhcnRMaW5lTnVtYmVyID09PSBiLnN0YXJ0TGluZU51bWJlciAmJlxuICAgICAgICAgICAgYS5zdGFydENvbHVtbiA9PT0gYi5zdGFydENvbHVtbiAmJlxuICAgICAgICAgICAgYS5lbmRMaW5lTnVtYmVyID09PSBiLmVuZExpbmVOdW1iZXIgJiZcbiAgICAgICAgICAgIGEuZW5kQ29sdW1uID09PSBiLmVuZENvbHVtbik7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFJldHVybiB0aGUgZW5kIHBvc2l0aW9uICh3aGljaCB3aWxsIGJlIGFmdGVyIG9yIGVxdWFsIHRvIHRoZSBzdGFydCBwb3NpdGlvbilcbiAgICAgKi9cbiAgICBnZXRFbmRQb3NpdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIFJhbmdlLmdldEVuZFBvc2l0aW9uKHRoaXMpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBSZXR1cm4gdGhlIGVuZCBwb3NpdGlvbiAod2hpY2ggd2lsbCBiZSBhZnRlciBvciBlcXVhbCB0byB0aGUgc3RhcnQgcG9zaXRpb24pXG4gICAgICovXG4gICAgc3RhdGljIGdldEVuZFBvc2l0aW9uKHJhbmdlKSB7XG4gICAgICAgIHJldHVybiBuZXcgUG9zaXRpb24ocmFuZ2UuZW5kTGluZU51bWJlciwgcmFuZ2UuZW5kQ29sdW1uKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogUmV0dXJuIHRoZSBzdGFydCBwb3NpdGlvbiAod2hpY2ggd2lsbCBiZSBiZWZvcmUgb3IgZXF1YWwgdG8gdGhlIGVuZCBwb3NpdGlvbilcbiAgICAgKi9cbiAgICBnZXRTdGFydFBvc2l0aW9uKCkge1xuICAgICAgICByZXR1cm4gUmFuZ2UuZ2V0U3RhcnRQb3NpdGlvbih0aGlzKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogUmV0dXJuIHRoZSBzdGFydCBwb3NpdGlvbiAod2hpY2ggd2lsbCBiZSBiZWZvcmUgb3IgZXF1YWwgdG8gdGhlIGVuZCBwb3NpdGlvbilcbiAgICAgKi9cbiAgICBzdGF0aWMgZ2V0U3RhcnRQb3NpdGlvbihyYW5nZSkge1xuICAgICAgICByZXR1cm4gbmV3IFBvc2l0aW9uKHJhbmdlLnN0YXJ0TGluZU51bWJlciwgcmFuZ2Uuc3RhcnRDb2x1bW4pO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBUcmFuc2Zvcm0gdG8gYSB1c2VyIHByZXNlbnRhYmxlIHN0cmluZyByZXByZXNlbnRhdGlvbi5cbiAgICAgKi9cbiAgICB0b1N0cmluZygpIHtcbiAgICAgICAgcmV0dXJuICdbJyArIHRoaXMuc3RhcnRMaW5lTnVtYmVyICsgJywnICsgdGhpcy5zdGFydENvbHVtbiArICcgLT4gJyArIHRoaXMuZW5kTGluZU51bWJlciArICcsJyArIHRoaXMuZW5kQ29sdW1uICsgJ10nO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBDcmVhdGUgYSBuZXcgcmFuZ2UgdXNpbmcgdGhpcyByYW5nZSdzIHN0YXJ0IHBvc2l0aW9uLCBhbmQgdXNpbmcgZW5kTGluZU51bWJlciBhbmQgZW5kQ29sdW1uIGFzIHRoZSBlbmQgcG9zaXRpb24uXG4gICAgICovXG4gICAgc2V0RW5kUG9zaXRpb24oZW5kTGluZU51bWJlciwgZW5kQ29sdW1uKSB7XG4gICAgICAgIHJldHVybiBuZXcgUmFuZ2UodGhpcy5zdGFydExpbmVOdW1iZXIsIHRoaXMuc3RhcnRDb2x1bW4sIGVuZExpbmVOdW1iZXIsIGVuZENvbHVtbik7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIENyZWF0ZSBhIG5ldyByYW5nZSB1c2luZyB0aGlzIHJhbmdlJ3MgZW5kIHBvc2l0aW9uLCBhbmQgdXNpbmcgc3RhcnRMaW5lTnVtYmVyIGFuZCBzdGFydENvbHVtbiBhcyB0aGUgc3RhcnQgcG9zaXRpb24uXG4gICAgICovXG4gICAgc2V0U3RhcnRQb3NpdGlvbihzdGFydExpbmVOdW1iZXIsIHN0YXJ0Q29sdW1uKSB7XG4gICAgICAgIHJldHVybiBuZXcgUmFuZ2Uoc3RhcnRMaW5lTnVtYmVyLCBzdGFydENvbHVtbiwgdGhpcy5lbmRMaW5lTnVtYmVyLCB0aGlzLmVuZENvbHVtbik7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIENyZWF0ZSBhIG5ldyBlbXB0eSByYW5nZSB1c2luZyB0aGlzIHJhbmdlJ3Mgc3RhcnQgcG9zaXRpb24uXG4gICAgICovXG4gICAgY29sbGFwc2VUb1N0YXJ0KCkge1xuICAgICAgICByZXR1cm4gUmFuZ2UuY29sbGFwc2VUb1N0YXJ0KHRoaXMpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBDcmVhdGUgYSBuZXcgZW1wdHkgcmFuZ2UgdXNpbmcgdGhpcyByYW5nZSdzIHN0YXJ0IHBvc2l0aW9uLlxuICAgICAqL1xuICAgIHN0YXRpYyBjb2xsYXBzZVRvU3RhcnQocmFuZ2UpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBSYW5nZShyYW5nZS5zdGFydExpbmVOdW1iZXIsIHJhbmdlLnN0YXJ0Q29sdW1uLCByYW5nZS5zdGFydExpbmVOdW1iZXIsIHJhbmdlLnN0YXJ0Q29sdW1uKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQ3JlYXRlIGEgbmV3IGVtcHR5IHJhbmdlIHVzaW5nIHRoaXMgcmFuZ2UncyBlbmQgcG9zaXRpb24uXG4gICAgICovXG4gICAgY29sbGFwc2VUb0VuZCgpIHtcbiAgICAgICAgcmV0dXJuIFJhbmdlLmNvbGxhcHNlVG9FbmQodGhpcyk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIENyZWF0ZSBhIG5ldyBlbXB0eSByYW5nZSB1c2luZyB0aGlzIHJhbmdlJ3MgZW5kIHBvc2l0aW9uLlxuICAgICAqL1xuICAgIHN0YXRpYyBjb2xsYXBzZVRvRW5kKHJhbmdlKSB7XG4gICAgICAgIHJldHVybiBuZXcgUmFuZ2UocmFuZ2UuZW5kTGluZU51bWJlciwgcmFuZ2UuZW5kQ29sdW1uLCByYW5nZS5lbmRMaW5lTnVtYmVyLCByYW5nZS5lbmRDb2x1bW4pO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBNb3ZlcyB0aGUgcmFuZ2UgYnkgdGhlIGdpdmVuIGFtb3VudCBvZiBsaW5lcy5cbiAgICAgKi9cbiAgICBkZWx0YShsaW5lQ291bnQpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBSYW5nZSh0aGlzLnN0YXJ0TGluZU51bWJlciArIGxpbmVDb3VudCwgdGhpcy5zdGFydENvbHVtbiwgdGhpcy5lbmRMaW5lTnVtYmVyICsgbGluZUNvdW50LCB0aGlzLmVuZENvbHVtbik7XG4gICAgfVxuICAgIC8vIC0tLVxuICAgIHN0YXRpYyBmcm9tUG9zaXRpb25zKHN0YXJ0LCBlbmQgPSBzdGFydCkge1xuICAgICAgICByZXR1cm4gbmV3IFJhbmdlKHN0YXJ0LmxpbmVOdW1iZXIsIHN0YXJ0LmNvbHVtbiwgZW5kLmxpbmVOdW1iZXIsIGVuZC5jb2x1bW4pO1xuICAgIH1cbiAgICBzdGF0aWMgbGlmdChyYW5nZSkge1xuICAgICAgICBpZiAoIXJhbmdlKSB7XG4gICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbmV3IFJhbmdlKHJhbmdlLnN0YXJ0TGluZU51bWJlciwgcmFuZ2Uuc3RhcnRDb2x1bW4sIHJhbmdlLmVuZExpbmVOdW1iZXIsIHJhbmdlLmVuZENvbHVtbik7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFRlc3QgaWYgYG9iamAgaXMgYW4gYElSYW5nZWAuXG4gICAgICovXG4gICAgc3RhdGljIGlzSVJhbmdlKG9iaikge1xuICAgICAgICByZXR1cm4gKG9ialxuICAgICAgICAgICAgJiYgKHR5cGVvZiBvYmouc3RhcnRMaW5lTnVtYmVyID09PSAnbnVtYmVyJylcbiAgICAgICAgICAgICYmICh0eXBlb2Ygb2JqLnN0YXJ0Q29sdW1uID09PSAnbnVtYmVyJylcbiAgICAgICAgICAgICYmICh0eXBlb2Ygb2JqLmVuZExpbmVOdW1iZXIgPT09ICdudW1iZXInKVxuICAgICAgICAgICAgJiYgKHR5cGVvZiBvYmouZW5kQ29sdW1uID09PSAnbnVtYmVyJykpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBUZXN0IGlmIHRoZSB0d28gcmFuZ2VzIGFyZSB0b3VjaGluZyBpbiBhbnkgd2F5LlxuICAgICAqL1xuICAgIHN0YXRpYyBhcmVJbnRlcnNlY3RpbmdPclRvdWNoaW5nKGEsIGIpIHtcbiAgICAgICAgLy8gQ2hlY2sgaWYgYGFgIGlzIGJlZm9yZSBgYmBcbiAgICAgICAgaWYgKGEuZW5kTGluZU51bWJlciA8IGIuc3RhcnRMaW5lTnVtYmVyIHx8IChhLmVuZExpbmVOdW1iZXIgPT09IGIuc3RhcnRMaW5lTnVtYmVyICYmIGEuZW5kQ29sdW1uIDwgYi5zdGFydENvbHVtbikpIHtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgICAvLyBDaGVjayBpZiBgYmAgaXMgYmVmb3JlIGBhYFxuICAgICAgICBpZiAoYi5lbmRMaW5lTnVtYmVyIDwgYS5zdGFydExpbmVOdW1iZXIgfHwgKGIuZW5kTGluZU51bWJlciA9PT0gYS5zdGFydExpbmVOdW1iZXIgJiYgYi5lbmRDb2x1bW4gPCBhLnN0YXJ0Q29sdW1uKSkge1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgICAgIC8vIFRoZXNlIHJhbmdlcyBtdXN0IGludGVyc2VjdFxuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogVGVzdCBpZiB0aGUgdHdvIHJhbmdlcyBhcmUgaW50ZXJzZWN0aW5nLiBJZiB0aGUgcmFuZ2VzIGFyZSB0b3VjaGluZyBpdCByZXR1cm5zIHRydWUuXG4gICAgICovXG4gICAgc3RhdGljIGFyZUludGVyc2VjdGluZyhhLCBiKSB7XG4gICAgICAgIC8vIENoZWNrIGlmIGBhYCBpcyBiZWZvcmUgYGJgXG4gICAgICAgIGlmIChhLmVuZExpbmVOdW1iZXIgPCBiLnN0YXJ0TGluZU51bWJlciB8fCAoYS5lbmRMaW5lTnVtYmVyID09PSBiLnN0YXJ0TGluZU51bWJlciAmJiBhLmVuZENvbHVtbiA8PSBiLnN0YXJ0Q29sdW1uKSkge1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgICAgIC8vIENoZWNrIGlmIGBiYCBpcyBiZWZvcmUgYGFgXG4gICAgICAgIGlmIChiLmVuZExpbmVOdW1iZXIgPCBhLnN0YXJ0TGluZU51bWJlciB8fCAoYi5lbmRMaW5lTnVtYmVyID09PSBhLnN0YXJ0TGluZU51bWJlciAmJiBiLmVuZENvbHVtbiA8PSBhLnN0YXJ0Q29sdW1uKSkge1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgICAgIC8vIFRoZXNlIHJhbmdlcyBtdXN0IGludGVyc2VjdFxuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQSBmdW5jdGlvbiB0aGF0IGNvbXBhcmVzIHJhbmdlcywgdXNlZnVsIGZvciBzb3J0aW5nIHJhbmdlc1xuICAgICAqIEl0IHdpbGwgZmlyc3QgY29tcGFyZSByYW5nZXMgb24gdGhlIHN0YXJ0UG9zaXRpb24gYW5kIHRoZW4gb24gdGhlIGVuZFBvc2l0aW9uXG4gICAgICovXG4gICAgc3RhdGljIGNvbXBhcmVSYW5nZXNVc2luZ1N0YXJ0cyhhLCBiKSB7XG4gICAgICAgIGlmIChhICYmIGIpIHtcbiAgICAgICAgICAgIGNvbnN0IGFTdGFydExpbmVOdW1iZXIgPSBhLnN0YXJ0TGluZU51bWJlciB8IDA7XG4gICAgICAgICAgICBjb25zdCBiU3RhcnRMaW5lTnVtYmVyID0gYi5zdGFydExpbmVOdW1iZXIgfCAwO1xuICAgICAgICAgICAgaWYgKGFTdGFydExpbmVOdW1iZXIgPT09IGJTdGFydExpbmVOdW1iZXIpIHtcbiAgICAgICAgICAgICAgICBjb25zdCBhU3RhcnRDb2x1bW4gPSBhLnN0YXJ0Q29sdW1uIHwgMDtcbiAgICAgICAgICAgICAgICBjb25zdCBiU3RhcnRDb2x1bW4gPSBiLnN0YXJ0Q29sdW1uIHwgMDtcbiAgICAgICAgICAgICAgICBpZiAoYVN0YXJ0Q29sdW1uID09PSBiU3RhcnRDb2x1bW4pIHtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgYUVuZExpbmVOdW1iZXIgPSBhLmVuZExpbmVOdW1iZXIgfCAwO1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBiRW5kTGluZU51bWJlciA9IGIuZW5kTGluZU51bWJlciB8IDA7XG4gICAgICAgICAgICAgICAgICAgIGlmIChhRW5kTGluZU51bWJlciA9PT0gYkVuZExpbmVOdW1iZXIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGFFbmRDb2x1bW4gPSBhLmVuZENvbHVtbiB8IDA7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBiRW5kQ29sdW1uID0gYi5lbmRDb2x1bW4gfCAwO1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGFFbmRDb2x1bW4gLSBiRW5kQ29sdW1uO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBhRW5kTGluZU51bWJlciAtIGJFbmRMaW5lTnVtYmVyO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByZXR1cm4gYVN0YXJ0Q29sdW1uIC0gYlN0YXJ0Q29sdW1uO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIGFTdGFydExpbmVOdW1iZXIgLSBiU3RhcnRMaW5lTnVtYmVyO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IGFFeGlzdHMgPSAoYSA/IDEgOiAwKTtcbiAgICAgICAgY29uc3QgYkV4aXN0cyA9IChiID8gMSA6IDApO1xuICAgICAgICByZXR1cm4gYUV4aXN0cyAtIGJFeGlzdHM7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEEgZnVuY3Rpb24gdGhhdCBjb21wYXJlcyByYW5nZXMsIHVzZWZ1bCBmb3Igc29ydGluZyByYW5nZXNcbiAgICAgKiBJdCB3aWxsIGZpcnN0IGNvbXBhcmUgcmFuZ2VzIG9uIHRoZSBlbmRQb3NpdGlvbiBhbmQgdGhlbiBvbiB0aGUgc3RhcnRQb3NpdGlvblxuICAgICAqL1xuICAgIHN0YXRpYyBjb21wYXJlUmFuZ2VzVXNpbmdFbmRzKGEsIGIpIHtcbiAgICAgICAgaWYgKGEuZW5kTGluZU51bWJlciA9PT0gYi5lbmRMaW5lTnVtYmVyKSB7XG4gICAgICAgICAgICBpZiAoYS5lbmRDb2x1bW4gPT09IGIuZW5kQ29sdW1uKSB7XG4gICAgICAgICAgICAgICAgaWYgKGEuc3RhcnRMaW5lTnVtYmVyID09PSBiLnN0YXJ0TGluZU51bWJlcikge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gYS5zdGFydENvbHVtbiAtIGIuc3RhcnRDb2x1bW47XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJldHVybiBhLnN0YXJ0TGluZU51bWJlciAtIGIuc3RhcnRMaW5lTnVtYmVyO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIGEuZW5kQ29sdW1uIC0gYi5lbmRDb2x1bW47XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGEuZW5kTGluZU51bWJlciAtIGIuZW5kTGluZU51bWJlcjtcbiAgICB9XG4gICAgLyoqXG4gICAgICogVGVzdCBpZiB0aGUgcmFuZ2Ugc3BhbnMgbXVsdGlwbGUgbGluZXMuXG4gICAgICovXG4gICAgc3RhdGljIHNwYW5zTXVsdGlwbGVMaW5lcyhyYW5nZSkge1xuICAgICAgICByZXR1cm4gcmFuZ2UuZW5kTGluZU51bWJlciA+IHJhbmdlLnN0YXJ0TGluZU51bWJlcjtcbiAgICB9XG4gICAgdG9KU09OKCkge1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG59XG4iLCAiLyoqXG4gKiBSZXR1cm5zIHRoZSBsYXN0IGVsZW1lbnQgb2YgYW4gYXJyYXkuXG4gKiBAcGFyYW0gYXJyYXkgVGhlIGFycmF5LlxuICogQHBhcmFtIG4gV2hpY2ggZWxlbWVudCBmcm9tIHRoZSBlbmQgKGRlZmF1bHQgaXMgemVybykuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiB0YWlsKGFycmF5LCBuID0gMCkge1xuICAgIHJldHVybiBhcnJheVthcnJheS5sZW5ndGggLSAoMSArIG4pXTtcbn1cbmV4cG9ydCBmdW5jdGlvbiB0YWlsMihhcnIpIHtcbiAgICBpZiAoYXJyLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ0ludmFsaWQgdGFpbCBjYWxsJyk7XG4gICAgfVxuICAgIHJldHVybiBbYXJyLnNsaWNlKDAsIGFyci5sZW5ndGggLSAxKSwgYXJyW2Fyci5sZW5ndGggLSAxXV07XG59XG5leHBvcnQgZnVuY3Rpb24gZXF1YWxzKG9uZSwgb3RoZXIsIGl0ZW1FcXVhbHMgPSAoYSwgYikgPT4gYSA9PT0gYikge1xuICAgIGlmIChvbmUgPT09IG90aGVyKSB7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgICBpZiAoIW9uZSB8fCAhb3RoZXIpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICBpZiAob25lLmxlbmd0aCAhPT0gb3RoZXIubGVuZ3RoKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgZm9yIChsZXQgaSA9IDAsIGxlbiA9IG9uZS5sZW5ndGg7IGkgPCBsZW47IGkrKykge1xuICAgICAgICBpZiAoIWl0ZW1FcXVhbHMob25lW2ldLCBvdGhlcltpXSkpIHtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gdHJ1ZTtcbn1cbi8qKlxuICogUmVtb3ZlIHRoZSBlbGVtZW50IGF0IGBpbmRleGAgYnkgcmVwbGFjaW5nIGl0IHdpdGggdGhlIGxhc3QgZWxlbWVudC4gVGhpcyBpcyBmYXN0ZXIgdGhhbiBgc3BsaWNlYFxuICogYnV0IGNoYW5nZXMgdGhlIG9yZGVyIG9mIHRoZSBhcnJheVxuICovXG5leHBvcnQgZnVuY3Rpb24gcmVtb3ZlRmFzdFdpdGhvdXRLZWVwaW5nT3JkZXIoYXJyYXksIGluZGV4KSB7XG4gICAgY29uc3QgbGFzdCA9IGFycmF5Lmxlbmd0aCAtIDE7XG4gICAgaWYgKGluZGV4IDwgbGFzdCkge1xuICAgICAgICBhcnJheVtpbmRleF0gPSBhcnJheVtsYXN0XTtcbiAgICB9XG4gICAgYXJyYXkucG9wKCk7XG59XG4vKipcbiAqIFBlcmZvcm1zIGEgYmluYXJ5IHNlYXJjaCBhbGdvcml0aG0gb3ZlciBhIHNvcnRlZCBhcnJheS5cbiAqXG4gKiBAcGFyYW0gYXJyYXkgVGhlIGFycmF5IGJlaW5nIHNlYXJjaGVkLlxuICogQHBhcmFtIGtleSBUaGUgdmFsdWUgd2Ugc2VhcmNoIGZvci5cbiAqIEBwYXJhbSBjb21wYXJhdG9yIEEgZnVuY3Rpb24gdGhhdCB0YWtlcyB0d28gYXJyYXkgZWxlbWVudHMgYW5kIHJldHVybnMgemVyb1xuICogICBpZiB0aGV5IGFyZSBlcXVhbCwgYSBuZWdhdGl2ZSBudW1iZXIgaWYgdGhlIGZpcnN0IGVsZW1lbnQgcHJlY2VkZXMgdGhlXG4gKiAgIHNlY29uZCBvbmUgaW4gdGhlIHNvcnRpbmcgb3JkZXIsIG9yIGEgcG9zaXRpdmUgbnVtYmVyIGlmIHRoZSBzZWNvbmQgZWxlbWVudFxuICogICBwcmVjZWRlcyB0aGUgZmlyc3Qgb25lLlxuICogQHJldHVybiBTZWUge0BsaW5rIGJpbmFyeVNlYXJjaDJ9XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBiaW5hcnlTZWFyY2goYXJyYXksIGtleSwgY29tcGFyYXRvcikge1xuICAgIHJldHVybiBiaW5hcnlTZWFyY2gyKGFycmF5Lmxlbmd0aCwgaSA9PiBjb21wYXJhdG9yKGFycmF5W2ldLCBrZXkpKTtcbn1cbi8qKlxuICogUGVyZm9ybXMgYSBiaW5hcnkgc2VhcmNoIGFsZ29yaXRobSBvdmVyIGEgc29ydGVkIGNvbGxlY3Rpb24uIFVzZWZ1bCBmb3IgY2FzZXNcbiAqIHdoZW4gd2UgbmVlZCB0byBwZXJmb3JtIGEgYmluYXJ5IHNlYXJjaCBvdmVyIHNvbWV0aGluZyB0aGF0IGlzbid0IGFjdHVhbGx5IGFuXG4gKiBhcnJheSwgYW5kIGNvbnZlcnRpbmcgZGF0YSB0byBhbiBhcnJheSB3b3VsZCBkZWZlYXQgdGhlIHVzZSBvZiBiaW5hcnkgc2VhcmNoXG4gKiBpbiB0aGUgZmlyc3QgcGxhY2UuXG4gKlxuICogQHBhcmFtIGxlbmd0aCBUaGUgY29sbGVjdGlvbiBsZW5ndGguXG4gKiBAcGFyYW0gY29tcGFyZVRvS2V5IEEgZnVuY3Rpb24gdGhhdCB0YWtlcyBhbiBpbmRleCBvZiBhbiBlbGVtZW50IGluIHRoZVxuICogICBjb2xsZWN0aW9uIGFuZCByZXR1cm5zIHplcm8gaWYgdGhlIHZhbHVlIGF0IHRoaXMgaW5kZXggaXMgZXF1YWwgdG8gdGhlXG4gKiAgIHNlYXJjaCBrZXksIGEgbmVnYXRpdmUgbnVtYmVyIGlmIHRoZSB2YWx1ZSBwcmVjZWRlcyB0aGUgc2VhcmNoIGtleSBpbiB0aGVcbiAqICAgc29ydGluZyBvcmRlciwgb3IgYSBwb3NpdGl2ZSBudW1iZXIgaWYgdGhlIHNlYXJjaCBrZXkgcHJlY2VkZXMgdGhlIHZhbHVlLlxuICogQHJldHVybiBBIG5vbi1uZWdhdGl2ZSBpbmRleCBvZiBhbiBlbGVtZW50LCBpZiBmb3VuZC4gSWYgbm90IGZvdW5kLCB0aGVcbiAqICAgcmVzdWx0IGlzIC0obisxKSAob3Igfm4sIHVzaW5nIGJpdHdpc2Ugbm90YXRpb24pLCB3aGVyZSBuIGlzIHRoZSBpbmRleFxuICogICB3aGVyZSB0aGUga2V5IHNob3VsZCBiZSBpbnNlcnRlZCB0byBtYWludGFpbiB0aGUgc29ydGluZyBvcmRlci5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGJpbmFyeVNlYXJjaDIobGVuZ3RoLCBjb21wYXJlVG9LZXkpIHtcbiAgICBsZXQgbG93ID0gMCwgaGlnaCA9IGxlbmd0aCAtIDE7XG4gICAgd2hpbGUgKGxvdyA8PSBoaWdoKSB7XG4gICAgICAgIGNvbnN0IG1pZCA9ICgobG93ICsgaGlnaCkgLyAyKSB8IDA7XG4gICAgICAgIGNvbnN0IGNvbXAgPSBjb21wYXJlVG9LZXkobWlkKTtcbiAgICAgICAgaWYgKGNvbXAgPCAwKSB7XG4gICAgICAgICAgICBsb3cgPSBtaWQgKyAxO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKGNvbXAgPiAwKSB7XG4gICAgICAgICAgICBoaWdoID0gbWlkIC0gMTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiBtaWQ7XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIC0obG93ICsgMSk7XG59XG5leHBvcnQgZnVuY3Rpb24gcXVpY2tTZWxlY3QobnRoLCBkYXRhLCBjb21wYXJlKSB7XG4gICAgbnRoID0gbnRoIHwgMDtcbiAgICBpZiAobnRoID49IGRhdGEubGVuZ3RoKSB7XG4gICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ2ludmFsaWQgaW5kZXgnKTtcbiAgICB9XG4gICAgY29uc3QgcGl2b3RWYWx1ZSA9IGRhdGFbTWF0aC5mbG9vcihkYXRhLmxlbmd0aCAqIE1hdGgucmFuZG9tKCkpXTtcbiAgICBjb25zdCBsb3dlciA9IFtdO1xuICAgIGNvbnN0IGhpZ2hlciA9IFtdO1xuICAgIGNvbnN0IHBpdm90cyA9IFtdO1xuICAgIGZvciAoY29uc3QgdmFsdWUgb2YgZGF0YSkge1xuICAgICAgICBjb25zdCB2YWwgPSBjb21wYXJlKHZhbHVlLCBwaXZvdFZhbHVlKTtcbiAgICAgICAgaWYgKHZhbCA8IDApIHtcbiAgICAgICAgICAgIGxvd2VyLnB1c2godmFsdWUpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKHZhbCA+IDApIHtcbiAgICAgICAgICAgIGhpZ2hlci5wdXNoKHZhbHVlKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHBpdm90cy5wdXNoKHZhbHVlKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBpZiAobnRoIDwgbG93ZXIubGVuZ3RoKSB7XG4gICAgICAgIHJldHVybiBxdWlja1NlbGVjdChudGgsIGxvd2VyLCBjb21wYXJlKTtcbiAgICB9XG4gICAgZWxzZSBpZiAobnRoIDwgbG93ZXIubGVuZ3RoICsgcGl2b3RzLmxlbmd0aCkge1xuICAgICAgICByZXR1cm4gcGl2b3RzWzBdO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgcmV0dXJuIHF1aWNrU2VsZWN0KG50aCAtIChsb3dlci5sZW5ndGggKyBwaXZvdHMubGVuZ3RoKSwgaGlnaGVyLCBjb21wYXJlKTtcbiAgICB9XG59XG5leHBvcnQgZnVuY3Rpb24gZ3JvdXBCeShkYXRhLCBjb21wYXJlKSB7XG4gICAgY29uc3QgcmVzdWx0ID0gW107XG4gICAgbGV0IGN1cnJlbnRHcm91cCA9IHVuZGVmaW5lZDtcbiAgICBmb3IgKGNvbnN0IGVsZW1lbnQgb2YgZGF0YS5zbGljZSgwKS5zb3J0KGNvbXBhcmUpKSB7XG4gICAgICAgIGlmICghY3VycmVudEdyb3VwIHx8IGNvbXBhcmUoY3VycmVudEdyb3VwWzBdLCBlbGVtZW50KSAhPT0gMCkge1xuICAgICAgICAgICAgY3VycmVudEdyb3VwID0gW2VsZW1lbnRdO1xuICAgICAgICAgICAgcmVzdWx0LnB1c2goY3VycmVudEdyb3VwKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIGN1cnJlbnRHcm91cC5wdXNoKGVsZW1lbnQpO1xuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiByZXN1bHQ7XG59XG4vKipcbiAqIFNwbGl0cyB0aGUgZ2l2ZW4gaXRlbXMgaW50byBhIGxpc3Qgb2YgKG5vbi1lbXB0eSkgZ3JvdXBzLlxuICogYHNob3VsZEJlR3JvdXBlZGAgaXMgdXNlZCB0byBkZWNpZGUgaWYgdHdvIGNvbnNlY3V0aXZlIGl0ZW1zIHNob3VsZCBiZSBpbiB0aGUgc2FtZSBncm91cC5cbiAqIFRoZSBvcmRlciBvZiB0aGUgaXRlbXMgaXMgcHJlc2VydmVkLlxuICovXG5leHBvcnQgZnVuY3Rpb24qIGdyb3VwQWRqYWNlbnRCeShpdGVtcywgc2hvdWxkQmVHcm91cGVkKSB7XG4gICAgbGV0IGN1cnJlbnRHcm91cDtcbiAgICBsZXQgbGFzdDtcbiAgICBmb3IgKGNvbnN0IGl0ZW0gb2YgaXRlbXMpIHtcbiAgICAgICAgaWYgKGxhc3QgIT09IHVuZGVmaW5lZCAmJiBzaG91bGRCZUdyb3VwZWQobGFzdCwgaXRlbSkpIHtcbiAgICAgICAgICAgIGN1cnJlbnRHcm91cC5wdXNoKGl0ZW0pO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgaWYgKGN1cnJlbnRHcm91cCkge1xuICAgICAgICAgICAgICAgIHlpZWxkIGN1cnJlbnRHcm91cDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGN1cnJlbnRHcm91cCA9IFtpdGVtXTtcbiAgICAgICAgfVxuICAgICAgICBsYXN0ID0gaXRlbTtcbiAgICB9XG4gICAgaWYgKGN1cnJlbnRHcm91cCkge1xuICAgICAgICB5aWVsZCBjdXJyZW50R3JvdXA7XG4gICAgfVxufVxuZXhwb3J0IGZ1bmN0aW9uIGZvckVhY2hBZGphY2VudChhcnIsIGYpIHtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8PSBhcnIubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgZihpID09PSAwID8gdW5kZWZpbmVkIDogYXJyW2kgLSAxXSwgaSA9PT0gYXJyLmxlbmd0aCA/IHVuZGVmaW5lZCA6IGFycltpXSk7XG4gICAgfVxufVxuZXhwb3J0IGZ1bmN0aW9uIGZvckVhY2hXaXRoTmVpZ2hib3JzKGFyciwgZikge1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgYXJyLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGYoaSA9PT0gMCA/IHVuZGVmaW5lZCA6IGFycltpIC0gMV0sIGFycltpXSwgaSArIDEgPT09IGFyci5sZW5ndGggPyB1bmRlZmluZWQgOiBhcnJbaSArIDFdKTtcbiAgICB9XG59XG4vKipcbiAqIEByZXR1cm5zIE5ldyBhcnJheSB3aXRoIGFsbCBmYWxzeSB2YWx1ZXMgcmVtb3ZlZC4gVGhlIG9yaWdpbmFsIGFycmF5IElTIE5PVCBtb2RpZmllZC5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGNvYWxlc2NlKGFycmF5KSB7XG4gICAgcmV0dXJuIGFycmF5LmZpbHRlcigoZSkgPT4gISFlKTtcbn1cbi8qKlxuICogUmVtb3ZlIGFsbCBmYWxzeSB2YWx1ZXMgZnJvbSBgYXJyYXlgLiBUaGUgb3JpZ2luYWwgYXJyYXkgSVMgbW9kaWZpZWQuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBjb2FsZXNjZUluUGxhY2UoYXJyYXkpIHtcbiAgICBsZXQgdG8gPSAwO1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgYXJyYXkubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgaWYgKCEhYXJyYXlbaV0pIHtcbiAgICAgICAgICAgIGFycmF5W3RvXSA9IGFycmF5W2ldO1xuICAgICAgICAgICAgdG8gKz0gMTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBhcnJheS5sZW5ndGggPSB0bztcbn1cbi8qKlxuICogQHJldHVybnMgZmFsc2UgaWYgdGhlIHByb3ZpZGVkIG9iamVjdCBpcyBhbiBhcnJheSBhbmQgbm90IGVtcHR5LlxuICovXG5leHBvcnQgZnVuY3Rpb24gaXNGYWxzeU9yRW1wdHkob2JqKSB7XG4gICAgcmV0dXJuICFBcnJheS5pc0FycmF5KG9iaikgfHwgb2JqLmxlbmd0aCA9PT0gMDtcbn1cbmV4cG9ydCBmdW5jdGlvbiBpc05vbkVtcHR5QXJyYXkob2JqKSB7XG4gICAgcmV0dXJuIEFycmF5LmlzQXJyYXkob2JqKSAmJiBvYmoubGVuZ3RoID4gMDtcbn1cbi8qKlxuICogUmVtb3ZlcyBkdXBsaWNhdGVzIGZyb20gdGhlIGdpdmVuIGFycmF5LiBUaGUgb3B0aW9uYWwga2V5Rm4gYWxsb3dzIHRvIHNwZWNpZnlcbiAqIGhvdyBlbGVtZW50cyBhcmUgY2hlY2tlZCBmb3IgZXF1YWxpdHkgYnkgcmV0dXJuaW5nIGFuIGFsdGVybmF0ZSB2YWx1ZSBmb3IgZWFjaC5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGRpc3RpbmN0KGFycmF5LCBrZXlGbiA9IHZhbHVlID0+IHZhbHVlKSB7XG4gICAgY29uc3Qgc2VlbiA9IG5ldyBTZXQoKTtcbiAgICByZXR1cm4gYXJyYXkuZmlsdGVyKGVsZW1lbnQgPT4ge1xuICAgICAgICBjb25zdCBrZXkgPSBrZXlGbihlbGVtZW50KTtcbiAgICAgICAgaWYgKHNlZW4uaGFzKGtleSkpIHtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgICBzZWVuLmFkZChrZXkpO1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9KTtcbn1cbmV4cG9ydCBmdW5jdGlvbiBmaXJzdE9yRGVmYXVsdChhcnJheSwgbm90Rm91bmRWYWx1ZSkge1xuICAgIHJldHVybiBhcnJheS5sZW5ndGggPiAwID8gYXJyYXlbMF0gOiBub3RGb3VuZFZhbHVlO1xufVxuZXhwb3J0IGZ1bmN0aW9uIHJhbmdlKGFyZywgdG8pIHtcbiAgICBsZXQgZnJvbSA9IHR5cGVvZiB0byA9PT0gJ251bWJlcicgPyBhcmcgOiAwO1xuICAgIGlmICh0eXBlb2YgdG8gPT09ICdudW1iZXInKSB7XG4gICAgICAgIGZyb20gPSBhcmc7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICBmcm9tID0gMDtcbiAgICAgICAgdG8gPSBhcmc7XG4gICAgfVxuICAgIGNvbnN0IHJlc3VsdCA9IFtdO1xuICAgIGlmIChmcm9tIDw9IHRvKSB7XG4gICAgICAgIGZvciAobGV0IGkgPSBmcm9tOyBpIDwgdG87IGkrKykge1xuICAgICAgICAgICAgcmVzdWx0LnB1c2goaSk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIGZvciAobGV0IGkgPSBmcm9tOyBpID4gdG87IGktLSkge1xuICAgICAgICAgICAgcmVzdWx0LnB1c2goaSk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHJlc3VsdDtcbn1cbi8qKlxuICogSW5zZXJ0IGBpbnNlcnRBcnJgIGluc2lkZSBgdGFyZ2V0YCBhdCBgaW5zZXJ0SW5kZXhgLlxuICogUGxlYXNlIGRvbid0IHRvdWNoIHVubGVzcyB5b3UgdW5kZXJzdGFuZCBodHRwczovL2pzcGVyZi5jb20vaW5zZXJ0aW5nLWFuLWFycmF5LXdpdGhpbi1hbi1hcnJheVxuICovXG5leHBvcnQgZnVuY3Rpb24gYXJyYXlJbnNlcnQodGFyZ2V0LCBpbnNlcnRJbmRleCwgaW5zZXJ0QXJyKSB7XG4gICAgY29uc3QgYmVmb3JlID0gdGFyZ2V0LnNsaWNlKDAsIGluc2VydEluZGV4KTtcbiAgICBjb25zdCBhZnRlciA9IHRhcmdldC5zbGljZShpbnNlcnRJbmRleCk7XG4gICAgcmV0dXJuIGJlZm9yZS5jb25jYXQoaW5zZXJ0QXJyLCBhZnRlcik7XG59XG4vKipcbiAqIFB1c2hlcyBhbiBlbGVtZW50IHRvIHRoZSBzdGFydCBvZiB0aGUgYXJyYXksIGlmIGZvdW5kLlxuICovXG5leHBvcnQgZnVuY3Rpb24gcHVzaFRvU3RhcnQoYXJyLCB2YWx1ZSkge1xuICAgIGNvbnN0IGluZGV4ID0gYXJyLmluZGV4T2YodmFsdWUpO1xuICAgIGlmIChpbmRleCA+IC0xKSB7XG4gICAgICAgIGFyci5zcGxpY2UoaW5kZXgsIDEpO1xuICAgICAgICBhcnIudW5zaGlmdCh2YWx1ZSk7XG4gICAgfVxufVxuLyoqXG4gKiBQdXNoZXMgYW4gZWxlbWVudCB0byB0aGUgZW5kIG9mIHRoZSBhcnJheSwgaWYgZm91bmQuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBwdXNoVG9FbmQoYXJyLCB2YWx1ZSkge1xuICAgIGNvbnN0IGluZGV4ID0gYXJyLmluZGV4T2YodmFsdWUpO1xuICAgIGlmIChpbmRleCA+IC0xKSB7XG4gICAgICAgIGFyci5zcGxpY2UoaW5kZXgsIDEpO1xuICAgICAgICBhcnIucHVzaCh2YWx1ZSk7XG4gICAgfVxufVxuZXhwb3J0IGZ1bmN0aW9uIHB1c2hNYW55KGFyciwgaXRlbXMpIHtcbiAgICBmb3IgKGNvbnN0IGl0ZW0gb2YgaXRlbXMpIHtcbiAgICAgICAgYXJyLnB1c2goaXRlbSk7XG4gICAgfVxufVxuZXhwb3J0IGZ1bmN0aW9uIGFzQXJyYXkoeCkge1xuICAgIHJldHVybiBBcnJheS5pc0FycmF5KHgpID8geCA6IFt4XTtcbn1cbi8qKlxuICogSW5zZXJ0IHRoZSBuZXcgaXRlbXMgaW4gdGhlIGFycmF5LlxuICogQHBhcmFtIGFycmF5IFRoZSBvcmlnaW5hbCBhcnJheS5cbiAqIEBwYXJhbSBzdGFydCBUaGUgemVyby1iYXNlZCBsb2NhdGlvbiBpbiB0aGUgYXJyYXkgZnJvbSB3aGljaCB0byBzdGFydCBpbnNlcnRpbmcgZWxlbWVudHMuXG4gKiBAcGFyYW0gbmV3SXRlbXMgVGhlIGl0ZW1zIHRvIGJlIGluc2VydGVkXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBpbnNlcnRJbnRvKGFycmF5LCBzdGFydCwgbmV3SXRlbXMpIHtcbiAgICBjb25zdCBzdGFydElkeCA9IGdldEFjdHVhbFN0YXJ0SW5kZXgoYXJyYXksIHN0YXJ0KTtcbiAgICBjb25zdCBvcmlnaW5hbExlbmd0aCA9IGFycmF5Lmxlbmd0aDtcbiAgICBjb25zdCBuZXdJdGVtc0xlbmd0aCA9IG5ld0l0ZW1zLmxlbmd0aDtcbiAgICBhcnJheS5sZW5ndGggPSBvcmlnaW5hbExlbmd0aCArIG5ld0l0ZW1zTGVuZ3RoO1xuICAgIC8vIE1vdmUgdGhlIGl0ZW1zIGFmdGVyIHRoZSBzdGFydCBpbmRleCwgc3RhcnQgZnJvbSB0aGUgZW5kIHNvIHRoYXQgd2UgZG9uJ3Qgb3ZlcndyaXRlIGFueSB2YWx1ZS5cbiAgICBmb3IgKGxldCBpID0gb3JpZ2luYWxMZW5ndGggLSAxOyBpID49IHN0YXJ0SWR4OyBpLS0pIHtcbiAgICAgICAgYXJyYXlbaSArIG5ld0l0ZW1zTGVuZ3RoXSA9IGFycmF5W2ldO1xuICAgIH1cbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IG5ld0l0ZW1zTGVuZ3RoOyBpKyspIHtcbiAgICAgICAgYXJyYXlbaSArIHN0YXJ0SWR4XSA9IG5ld0l0ZW1zW2ldO1xuICAgIH1cbn1cbi8qKlxuICogUmVtb3ZlcyBlbGVtZW50cyBmcm9tIGFuIGFycmF5IGFuZCBpbnNlcnRzIG5ldyBlbGVtZW50cyBpbiB0aGVpciBwbGFjZSwgcmV0dXJuaW5nIHRoZSBkZWxldGVkIGVsZW1lbnRzLiBBbHRlcm5hdGl2ZSB0byB0aGUgbmF0aXZlIEFycmF5LnNwbGljZSBtZXRob2QsIGl0XG4gKiBjYW4gb25seSBzdXBwb3J0IGxpbWl0ZWQgbnVtYmVyIG9mIGl0ZW1zIGR1ZSB0byB0aGUgbWF4aW11bSBjYWxsIHN0YWNrIHNpemUgbGltaXQuXG4gKiBAcGFyYW0gYXJyYXkgVGhlIG9yaWdpbmFsIGFycmF5LlxuICogQHBhcmFtIHN0YXJ0IFRoZSB6ZXJvLWJhc2VkIGxvY2F0aW9uIGluIHRoZSBhcnJheSBmcm9tIHdoaWNoIHRvIHN0YXJ0IHJlbW92aW5nIGVsZW1lbnRzLlxuICogQHBhcmFtIGRlbGV0ZUNvdW50IFRoZSBudW1iZXIgb2YgZWxlbWVudHMgdG8gcmVtb3ZlLlxuICogQHJldHVybnMgQW4gYXJyYXkgY29udGFpbmluZyB0aGUgZWxlbWVudHMgdGhhdCB3ZXJlIGRlbGV0ZWQuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBzcGxpY2UoYXJyYXksIHN0YXJ0LCBkZWxldGVDb3VudCwgbmV3SXRlbXMpIHtcbiAgICBjb25zdCBpbmRleCA9IGdldEFjdHVhbFN0YXJ0SW5kZXgoYXJyYXksIHN0YXJ0KTtcbiAgICBsZXQgcmVzdWx0ID0gYXJyYXkuc3BsaWNlKGluZGV4LCBkZWxldGVDb3VudCk7XG4gICAgaWYgKHJlc3VsdCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIC8vIHNlZSBodHRwczovL2J1Z3Mud2Via2l0Lm9yZy9zaG93X2J1Zy5jZ2k/aWQ9MjYxMTQwXG4gICAgICAgIHJlc3VsdCA9IFtdO1xuICAgIH1cbiAgICBpbnNlcnRJbnRvKGFycmF5LCBpbmRleCwgbmV3SXRlbXMpO1xuICAgIHJldHVybiByZXN1bHQ7XG59XG4vKipcbiAqIERldGVybWluZSB0aGUgYWN0dWFsIHN0YXJ0IGluZGV4IChzYW1lIGxvZ2ljIGFzIHRoZSBuYXRpdmUgc3BsaWNlKCkgb3Igc2xpY2UoKSlcbiAqIElmIGdyZWF0ZXIgdGhhbiB0aGUgbGVuZ3RoIG9mIHRoZSBhcnJheSwgc3RhcnQgd2lsbCBiZSBzZXQgdG8gdGhlIGxlbmd0aCBvZiB0aGUgYXJyYXkuIEluIHRoaXMgY2FzZSwgbm8gZWxlbWVudCB3aWxsIGJlIGRlbGV0ZWQgYnV0IHRoZSBtZXRob2Qgd2lsbCBiZWhhdmUgYXMgYW4gYWRkaW5nIGZ1bmN0aW9uLCBhZGRpbmcgYXMgbWFueSBlbGVtZW50IGFzIGl0ZW1bbipdIHByb3ZpZGVkLlxuICogSWYgbmVnYXRpdmUsIGl0IHdpbGwgYmVnaW4gdGhhdCBtYW55IGVsZW1lbnRzIGZyb20gdGhlIGVuZCBvZiB0aGUgYXJyYXkuIChJbiB0aGlzIGNhc2UsIHRoZSBvcmlnaW4gLTEsIG1lYW5pbmcgLW4gaXMgdGhlIGluZGV4IG9mIHRoZSBudGggbGFzdCBlbGVtZW50LCBhbmQgaXMgdGhlcmVmb3JlIGVxdWl2YWxlbnQgdG8gdGhlIGluZGV4IG9mIGFycmF5Lmxlbmd0aCAtIG4uKSBJZiBhcnJheS5sZW5ndGggKyBzdGFydCBpcyBsZXNzIHRoYW4gMCwgaXQgd2lsbCBiZWdpbiBmcm9tIGluZGV4IDAuXG4gKiBAcGFyYW0gYXJyYXkgVGhlIHRhcmdldCBhcnJheS5cbiAqIEBwYXJhbSBzdGFydCBUaGUgb3BlcmF0aW9uIGluZGV4LlxuICovXG5mdW5jdGlvbiBnZXRBY3R1YWxTdGFydEluZGV4KGFycmF5LCBzdGFydCkge1xuICAgIHJldHVybiBzdGFydCA8IDAgPyBNYXRoLm1heChzdGFydCArIGFycmF5Lmxlbmd0aCwgMCkgOiBNYXRoLm1pbihzdGFydCwgYXJyYXkubGVuZ3RoKTtcbn1cbmV4cG9ydCB2YXIgQ29tcGFyZVJlc3VsdDtcbihmdW5jdGlvbiAoQ29tcGFyZVJlc3VsdCkge1xuICAgIGZ1bmN0aW9uIGlzTGVzc1RoYW4ocmVzdWx0KSB7XG4gICAgICAgIHJldHVybiByZXN1bHQgPCAwO1xuICAgIH1cbiAgICBDb21wYXJlUmVzdWx0LmlzTGVzc1RoYW4gPSBpc0xlc3NUaGFuO1xuICAgIGZ1bmN0aW9uIGlzTGVzc1RoYW5PckVxdWFsKHJlc3VsdCkge1xuICAgICAgICByZXR1cm4gcmVzdWx0IDw9IDA7XG4gICAgfVxuICAgIENvbXBhcmVSZXN1bHQuaXNMZXNzVGhhbk9yRXF1YWwgPSBpc0xlc3NUaGFuT3JFcXVhbDtcbiAgICBmdW5jdGlvbiBpc0dyZWF0ZXJUaGFuKHJlc3VsdCkge1xuICAgICAgICByZXR1cm4gcmVzdWx0ID4gMDtcbiAgICB9XG4gICAgQ29tcGFyZVJlc3VsdC5pc0dyZWF0ZXJUaGFuID0gaXNHcmVhdGVyVGhhbjtcbiAgICBmdW5jdGlvbiBpc05laXRoZXJMZXNzT3JHcmVhdGVyVGhhbihyZXN1bHQpIHtcbiAgICAgICAgcmV0dXJuIHJlc3VsdCA9PT0gMDtcbiAgICB9XG4gICAgQ29tcGFyZVJlc3VsdC5pc05laXRoZXJMZXNzT3JHcmVhdGVyVGhhbiA9IGlzTmVpdGhlckxlc3NPckdyZWF0ZXJUaGFuO1xuICAgIENvbXBhcmVSZXN1bHQuZ3JlYXRlclRoYW4gPSAxO1xuICAgIENvbXBhcmVSZXN1bHQubGVzc1RoYW4gPSAtMTtcbiAgICBDb21wYXJlUmVzdWx0Lm5laXRoZXJMZXNzT3JHcmVhdGVyVGhhbiA9IDA7XG59KShDb21wYXJlUmVzdWx0IHx8IChDb21wYXJlUmVzdWx0ID0ge30pKTtcbmV4cG9ydCBmdW5jdGlvbiBjb21wYXJlQnkoc2VsZWN0b3IsIGNvbXBhcmF0b3IpIHtcbiAgICByZXR1cm4gKGEsIGIpID0+IGNvbXBhcmF0b3Ioc2VsZWN0b3IoYSksIHNlbGVjdG9yKGIpKTtcbn1cbmV4cG9ydCBmdW5jdGlvbiB0aWVCcmVha0NvbXBhcmF0b3JzKC4uLmNvbXBhcmF0b3JzKSB7XG4gICAgcmV0dXJuIChpdGVtMSwgaXRlbTIpID0+IHtcbiAgICAgICAgZm9yIChjb25zdCBjb21wYXJhdG9yIG9mIGNvbXBhcmF0b3JzKSB7XG4gICAgICAgICAgICBjb25zdCByZXN1bHQgPSBjb21wYXJhdG9yKGl0ZW0xLCBpdGVtMik7XG4gICAgICAgICAgICBpZiAoIUNvbXBhcmVSZXN1bHQuaXNOZWl0aGVyTGVzc09yR3JlYXRlclRoYW4ocmVzdWx0KSkge1xuICAgICAgICAgICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIENvbXBhcmVSZXN1bHQubmVpdGhlckxlc3NPckdyZWF0ZXJUaGFuO1xuICAgIH07XG59XG4vKipcbiAqIFRoZSBuYXR1cmFsIG9yZGVyIG9uIG51bWJlcnMuXG4qL1xuZXhwb3J0IGNvbnN0IG51bWJlckNvbXBhcmF0b3IgPSAoYSwgYikgPT4gYSAtIGI7XG5leHBvcnQgY29uc3QgYm9vbGVhbkNvbXBhcmF0b3IgPSAoYSwgYikgPT4gbnVtYmVyQ29tcGFyYXRvcihhID8gMSA6IDAsIGIgPyAxIDogMCk7XG5leHBvcnQgZnVuY3Rpb24gcmV2ZXJzZU9yZGVyKGNvbXBhcmF0b3IpIHtcbiAgICByZXR1cm4gKGEsIGIpID0+IC1jb21wYXJhdG9yKGEsIGIpO1xufVxuZXhwb3J0IGNsYXNzIEFycmF5UXVldWUge1xuICAgIC8qKlxuICAgICAqIENvbnN0cnVjdHMgYSBxdWV1ZSB0aGF0IGlzIGJhY2tlZCBieSB0aGUgZ2l2ZW4gYXJyYXkuIFJ1bnRpbWUgaXMgTygxKS5cbiAgICAqL1xuICAgIGNvbnN0cnVjdG9yKGl0ZW1zKSB7XG4gICAgICAgIHRoaXMuaXRlbXMgPSBpdGVtcztcbiAgICAgICAgdGhpcy5maXJzdElkeCA9IDA7XG4gICAgICAgIHRoaXMubGFzdElkeCA9IHRoaXMuaXRlbXMubGVuZ3RoIC0gMTtcbiAgICB9XG4gICAgZ2V0IGxlbmd0aCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMubGFzdElkeCAtIHRoaXMuZmlyc3RJZHggKyAxO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBDb25zdW1lcyBlbGVtZW50cyBmcm9tIHRoZSBiZWdpbm5pbmcgb2YgdGhlIHF1ZXVlIGFzIGxvbmcgYXMgdGhlIHByZWRpY2F0ZSByZXR1cm5zIHRydWUuXG4gICAgICogSWYgbm8gZWxlbWVudHMgd2VyZSBjb25zdW1lZCwgYG51bGxgIGlzIHJldHVybmVkLiBIYXMgYSBydW50aW1lIG9mIE8ocmVzdWx0Lmxlbmd0aCkuXG4gICAgKi9cbiAgICB0YWtlV2hpbGUocHJlZGljYXRlKSB7XG4gICAgICAgIC8vIFAoaykgOj0gayA8PSB0aGlzLmxhc3RJZHggJiYgcHJlZGljYXRlKHRoaXMuaXRlbXNba10pXG4gICAgICAgIC8vIEZpbmQgcyA6PSBtaW4geyBrIHwgayA+PSB0aGlzLmZpcnN0SWR4ICYmICFQKGspIH0gYW5kIHJldHVybiB0aGlzLmRhdGFbdGhpcy5maXJzdElkeC4uLnMpXG4gICAgICAgIGxldCBzdGFydElkeCA9IHRoaXMuZmlyc3RJZHg7XG4gICAgICAgIHdoaWxlIChzdGFydElkeCA8IHRoaXMuaXRlbXMubGVuZ3RoICYmIHByZWRpY2F0ZSh0aGlzLml0ZW1zW3N0YXJ0SWR4XSkpIHtcbiAgICAgICAgICAgIHN0YXJ0SWR4Kys7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgcmVzdWx0ID0gc3RhcnRJZHggPT09IHRoaXMuZmlyc3RJZHggPyBudWxsIDogdGhpcy5pdGVtcy5zbGljZSh0aGlzLmZpcnN0SWR4LCBzdGFydElkeCk7XG4gICAgICAgIHRoaXMuZmlyc3RJZHggPSBzdGFydElkeDtcbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQ29uc3VtZXMgZWxlbWVudHMgZnJvbSB0aGUgZW5kIG9mIHRoZSBxdWV1ZSBhcyBsb25nIGFzIHRoZSBwcmVkaWNhdGUgcmV0dXJucyB0cnVlLlxuICAgICAqIElmIG5vIGVsZW1lbnRzIHdlcmUgY29uc3VtZWQsIGBudWxsYCBpcyByZXR1cm5lZC5cbiAgICAgKiBUaGUgcmVzdWx0IGhhcyB0aGUgc2FtZSBvcmRlciBhcyB0aGUgdW5kZXJseWluZyBhcnJheSFcbiAgICAqL1xuICAgIHRha2VGcm9tRW5kV2hpbGUocHJlZGljYXRlKSB7XG4gICAgICAgIC8vIFAoaykgOj0gdGhpcy5maXJzdElkeCA+PSBrICYmIHByZWRpY2F0ZSh0aGlzLml0ZW1zW2tdKVxuICAgICAgICAvLyBGaW5kIHMgOj0gbWF4IHsgayB8IGsgPD0gdGhpcy5sYXN0SWR4ICYmICFQKGspIH0gYW5kIHJldHVybiB0aGlzLmRhdGEocy4uLnRoaXMubGFzdElkeF1cbiAgICAgICAgbGV0IGVuZElkeCA9IHRoaXMubGFzdElkeDtcbiAgICAgICAgd2hpbGUgKGVuZElkeCA+PSAwICYmIHByZWRpY2F0ZSh0aGlzLml0ZW1zW2VuZElkeF0pKSB7XG4gICAgICAgICAgICBlbmRJZHgtLTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCByZXN1bHQgPSBlbmRJZHggPT09IHRoaXMubGFzdElkeCA/IG51bGwgOiB0aGlzLml0ZW1zLnNsaWNlKGVuZElkeCArIDEsIHRoaXMubGFzdElkeCArIDEpO1xuICAgICAgICB0aGlzLmxhc3RJZHggPSBlbmRJZHg7XG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuICAgIHBlZWsoKSB7XG4gICAgICAgIGlmICh0aGlzLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdGhpcy5pdGVtc1t0aGlzLmZpcnN0SWR4XTtcbiAgICB9XG4gICAgZGVxdWV1ZSgpIHtcbiAgICAgICAgY29uc3QgcmVzdWx0ID0gdGhpcy5pdGVtc1t0aGlzLmZpcnN0SWR4XTtcbiAgICAgICAgdGhpcy5maXJzdElkeCsrO1xuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cbiAgICB0YWtlQ291bnQoY291bnQpIHtcbiAgICAgICAgY29uc3QgcmVzdWx0ID0gdGhpcy5pdGVtcy5zbGljZSh0aGlzLmZpcnN0SWR4LCB0aGlzLmZpcnN0SWR4ICsgY291bnQpO1xuICAgICAgICB0aGlzLmZpcnN0SWR4ICs9IGNvdW50O1xuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cbn1cbi8qKlxuICogVGhpcyBjbGFzcyBpcyBmYXN0ZXIgdGhhbiBhbiBpdGVyYXRvciBhbmQgYXJyYXkgZm9yIGxhenkgY29tcHV0ZWQgZGF0YS5cbiovXG5leHBvcnQgY2xhc3MgQ2FsbGJhY2tJdGVyYWJsZSB7XG4gICAgY29uc3RydWN0b3IoXG4gICAgLyoqXG4gICAgICogQ2FsbHMgdGhlIGNhbGxiYWNrIGZvciBldmVyeSBpdGVtLlxuICAgICAqIFN0b3BzIHdoZW4gdGhlIGNhbGxiYWNrIHJldHVybnMgZmFsc2UuXG4gICAgKi9cbiAgICBpdGVyYXRlKSB7XG4gICAgICAgIHRoaXMuaXRlcmF0ZSA9IGl0ZXJhdGU7XG4gICAgfVxuICAgIHRvQXJyYXkoKSB7XG4gICAgICAgIGNvbnN0IHJlc3VsdCA9IFtdO1xuICAgICAgICB0aGlzLml0ZXJhdGUoaXRlbSA9PiB7IHJlc3VsdC5wdXNoKGl0ZW0pOyByZXR1cm4gdHJ1ZTsgfSk7XG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuICAgIGZpbHRlcihwcmVkaWNhdGUpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBDYWxsYmFja0l0ZXJhYmxlKGNiID0+IHRoaXMuaXRlcmF0ZShpdGVtID0+IHByZWRpY2F0ZShpdGVtKSA/IGNiKGl0ZW0pIDogdHJ1ZSkpO1xuICAgIH1cbiAgICBtYXAobWFwRm4pIHtcbiAgICAgICAgcmV0dXJuIG5ldyBDYWxsYmFja0l0ZXJhYmxlKGNiID0+IHRoaXMuaXRlcmF0ZShpdGVtID0+IGNiKG1hcEZuKGl0ZW0pKSkpO1xuICAgIH1cbiAgICBmaW5kTGFzdChwcmVkaWNhdGUpIHtcbiAgICAgICAgbGV0IHJlc3VsdDtcbiAgICAgICAgdGhpcy5pdGVyYXRlKGl0ZW0gPT4ge1xuICAgICAgICAgICAgaWYgKHByZWRpY2F0ZShpdGVtKSkge1xuICAgICAgICAgICAgICAgIHJlc3VsdCA9IGl0ZW07XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfSk7XG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuICAgIGZpbmRMYXN0TWF4QnkoY29tcGFyYXRvcikge1xuICAgICAgICBsZXQgcmVzdWx0O1xuICAgICAgICBsZXQgZmlyc3QgPSB0cnVlO1xuICAgICAgICB0aGlzLml0ZXJhdGUoaXRlbSA9PiB7XG4gICAgICAgICAgICBpZiAoZmlyc3QgfHwgQ29tcGFyZVJlc3VsdC5pc0dyZWF0ZXJUaGFuKGNvbXBhcmF0b3IoaXRlbSwgcmVzdWx0KSkpIHtcbiAgICAgICAgICAgICAgICBmaXJzdCA9IGZhbHNlO1xuICAgICAgICAgICAgICAgIHJlc3VsdCA9IGl0ZW07XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfSk7XG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxufVxuQ2FsbGJhY2tJdGVyYWJsZS5lbXB0eSA9IG5ldyBDYWxsYmFja0l0ZXJhYmxlKF9jYWxsYmFjayA9PiB7IH0pO1xuLyoqXG4gKiBSZXByZXNlbnRzIGEgcmUtYXJyYW5nZW1lbnQgb2YgaXRlbXMgaW4gYW4gYXJyYXkuXG4gKi9cbmV4cG9ydCBjbGFzcyBQZXJtdXRhdGlvbiB7XG4gICAgY29uc3RydWN0b3IoX2luZGV4TWFwKSB7XG4gICAgICAgIHRoaXMuX2luZGV4TWFwID0gX2luZGV4TWFwO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIGEgcGVybXV0YXRpb24gdGhhdCBzb3J0cyB0aGUgZ2l2ZW4gYXJyYXkgYWNjb3JkaW5nIHRvIHRoZSBnaXZlbiBjb21wYXJlIGZ1bmN0aW9uLlxuICAgICAqL1xuICAgIHN0YXRpYyBjcmVhdGVTb3J0UGVybXV0YXRpb24oYXJyLCBjb21wYXJlRm4pIHtcbiAgICAgICAgY29uc3Qgc29ydEluZGljZXMgPSBBcnJheS5mcm9tKGFyci5rZXlzKCkpLnNvcnQoKGluZGV4MSwgaW5kZXgyKSA9PiBjb21wYXJlRm4oYXJyW2luZGV4MV0sIGFycltpbmRleDJdKSk7XG4gICAgICAgIHJldHVybiBuZXcgUGVybXV0YXRpb24oc29ydEluZGljZXMpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIGEgbmV3IGFycmF5IHdpdGggdGhlIGVsZW1lbnRzIG9mIHRoZSBnaXZlbiBhcnJheSByZS1hcnJhbmdlZCBhY2NvcmRpbmcgdG8gdGhpcyBwZXJtdXRhdGlvbi5cbiAgICAgKi9cbiAgICBhcHBseShhcnIpIHtcbiAgICAgICAgcmV0dXJuIGFyci5tYXAoKF8sIGluZGV4KSA9PiBhcnJbdGhpcy5faW5kZXhNYXBbaW5kZXhdXSk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFJldHVybnMgYSBuZXcgcGVybXV0YXRpb24gdGhhdCB1bmRvZXMgdGhlIHJlLWFycmFuZ2VtZW50IG9mIHRoaXMgcGVybXV0YXRpb24uXG4gICAgKi9cbiAgICBpbnZlcnNlKCkge1xuICAgICAgICBjb25zdCBpbnZlcnNlSW5kZXhNYXAgPSB0aGlzLl9pbmRleE1hcC5zbGljZSgpO1xuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRoaXMuX2luZGV4TWFwLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICBpbnZlcnNlSW5kZXhNYXBbdGhpcy5faW5kZXhNYXBbaV1dID0gaTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbmV3IFBlcm11dGF0aW9uKGludmVyc2VJbmRleE1hcCk7XG4gICAgfVxufVxuIiwgIi8qLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gKiAgQ29weXJpZ2h0IChjKSBNaWNyb3NvZnQgQ29ycG9yYXRpb24uIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKiAgTGljZW5zZWQgdW5kZXIgdGhlIE1JVCBMaWNlbnNlLiBTZWUgTGljZW5zZS50eHQgaW4gdGhlIHByb2plY3Qgcm9vdCBmb3IgbGljZW5zZSBpbmZvcm1hdGlvbi5cbiAqLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qL1xuZXhwb3J0IGZ1bmN0aW9uIHRvVWludDgodikge1xuICAgIGlmICh2IDwgMCkge1xuICAgICAgICByZXR1cm4gMDtcbiAgICB9XG4gICAgaWYgKHYgPiAyNTUgLyogQ29uc3RhbnRzLk1BWF9VSU5UXzggKi8pIHtcbiAgICAgICAgcmV0dXJuIDI1NSAvKiBDb25zdGFudHMuTUFYX1VJTlRfOCAqLztcbiAgICB9XG4gICAgcmV0dXJuIHYgfCAwO1xufVxuZXhwb3J0IGZ1bmN0aW9uIHRvVWludDMyKHYpIHtcbiAgICBpZiAodiA8IDApIHtcbiAgICAgICAgcmV0dXJuIDA7XG4gICAgfVxuICAgIGlmICh2ID4gNDI5NDk2NzI5NSAvKiBDb25zdGFudHMuTUFYX1VJTlRfMzIgKi8pIHtcbiAgICAgICAgcmV0dXJuIDQyOTQ5NjcyOTUgLyogQ29uc3RhbnRzLk1BWF9VSU5UXzMyICovO1xuICAgIH1cbiAgICByZXR1cm4gdiB8IDA7XG59XG4iLCAiLyotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAqICBDb3B5cmlnaHQgKGMpIE1pY3Jvc29mdCBDb3Jwb3JhdGlvbi4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqICBMaWNlbnNlZCB1bmRlciB0aGUgTUlUIExpY2Vuc2UuIFNlZSBMaWNlbnNlLnR4dCBpbiB0aGUgcHJvamVjdCByb290IGZvciBsaWNlbnNlIGluZm9ybWF0aW9uLlxuICotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSovXG5pbXBvcnQgeyBhcnJheUluc2VydCB9IGZyb20gJy4uLy4uLy4uL2Jhc2UvY29tbW9uL2FycmF5cy5qcyc7XG5pbXBvcnQgeyB0b1VpbnQzMiB9IGZyb20gJy4uLy4uLy4uL2Jhc2UvY29tbW9uL3VpbnQuanMnO1xuZXhwb3J0IGNsYXNzIFByZWZpeFN1bUNvbXB1dGVyIHtcbiAgICBjb25zdHJ1Y3Rvcih2YWx1ZXMpIHtcbiAgICAgICAgdGhpcy52YWx1ZXMgPSB2YWx1ZXM7XG4gICAgICAgIHRoaXMucHJlZml4U3VtID0gbmV3IFVpbnQzMkFycmF5KHZhbHVlcy5sZW5ndGgpO1xuICAgICAgICB0aGlzLnByZWZpeFN1bVZhbGlkSW5kZXggPSBuZXcgSW50MzJBcnJheSgxKTtcbiAgICAgICAgdGhpcy5wcmVmaXhTdW1WYWxpZEluZGV4WzBdID0gLTE7XG4gICAgfVxuICAgIGluc2VydFZhbHVlcyhpbnNlcnRJbmRleCwgaW5zZXJ0VmFsdWVzKSB7XG4gICAgICAgIGluc2VydEluZGV4ID0gdG9VaW50MzIoaW5zZXJ0SW5kZXgpO1xuICAgICAgICBjb25zdCBvbGRWYWx1ZXMgPSB0aGlzLnZhbHVlcztcbiAgICAgICAgY29uc3Qgb2xkUHJlZml4U3VtID0gdGhpcy5wcmVmaXhTdW07XG4gICAgICAgIGNvbnN0IGluc2VydFZhbHVlc0xlbiA9IGluc2VydFZhbHVlcy5sZW5ndGg7XG4gICAgICAgIGlmIChpbnNlcnRWYWx1ZXNMZW4gPT09IDApIHtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLnZhbHVlcyA9IG5ldyBVaW50MzJBcnJheShvbGRWYWx1ZXMubGVuZ3RoICsgaW5zZXJ0VmFsdWVzTGVuKTtcbiAgICAgICAgdGhpcy52YWx1ZXMuc2V0KG9sZFZhbHVlcy5zdWJhcnJheSgwLCBpbnNlcnRJbmRleCksIDApO1xuICAgICAgICB0aGlzLnZhbHVlcy5zZXQob2xkVmFsdWVzLnN1YmFycmF5KGluc2VydEluZGV4KSwgaW5zZXJ0SW5kZXggKyBpbnNlcnRWYWx1ZXNMZW4pO1xuICAgICAgICB0aGlzLnZhbHVlcy5zZXQoaW5zZXJ0VmFsdWVzLCBpbnNlcnRJbmRleCk7XG4gICAgICAgIGlmIChpbnNlcnRJbmRleCAtIDEgPCB0aGlzLnByZWZpeFN1bVZhbGlkSW5kZXhbMF0pIHtcbiAgICAgICAgICAgIHRoaXMucHJlZml4U3VtVmFsaWRJbmRleFswXSA9IGluc2VydEluZGV4IC0gMTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLnByZWZpeFN1bSA9IG5ldyBVaW50MzJBcnJheSh0aGlzLnZhbHVlcy5sZW5ndGgpO1xuICAgICAgICBpZiAodGhpcy5wcmVmaXhTdW1WYWxpZEluZGV4WzBdID49IDApIHtcbiAgICAgICAgICAgIHRoaXMucHJlZml4U3VtLnNldChvbGRQcmVmaXhTdW0uc3ViYXJyYXkoMCwgdGhpcy5wcmVmaXhTdW1WYWxpZEluZGV4WzBdICsgMSkpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgICBzZXRWYWx1ZShpbmRleCwgdmFsdWUpIHtcbiAgICAgICAgaW5kZXggPSB0b1VpbnQzMihpbmRleCk7XG4gICAgICAgIHZhbHVlID0gdG9VaW50MzIodmFsdWUpO1xuICAgICAgICBpZiAodGhpcy52YWx1ZXNbaW5kZXhdID09PSB2YWx1ZSkge1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMudmFsdWVzW2luZGV4XSA9IHZhbHVlO1xuICAgICAgICBpZiAoaW5kZXggLSAxIDwgdGhpcy5wcmVmaXhTdW1WYWxpZEluZGV4WzBdKSB7XG4gICAgICAgICAgICB0aGlzLnByZWZpeFN1bVZhbGlkSW5kZXhbMF0gPSBpbmRleCAtIDE7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICAgIHJlbW92ZVZhbHVlcyhzdGFydEluZGV4LCBjb3VudCkge1xuICAgICAgICBzdGFydEluZGV4ID0gdG9VaW50MzIoc3RhcnRJbmRleCk7XG4gICAgICAgIGNvdW50ID0gdG9VaW50MzIoY291bnQpO1xuICAgICAgICBjb25zdCBvbGRWYWx1ZXMgPSB0aGlzLnZhbHVlcztcbiAgICAgICAgY29uc3Qgb2xkUHJlZml4U3VtID0gdGhpcy5wcmVmaXhTdW07XG4gICAgICAgIGlmIChzdGFydEluZGV4ID49IG9sZFZhbHVlcy5sZW5ndGgpIHtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBtYXhDb3VudCA9IG9sZFZhbHVlcy5sZW5ndGggLSBzdGFydEluZGV4O1xuICAgICAgICBpZiAoY291bnQgPj0gbWF4Q291bnQpIHtcbiAgICAgICAgICAgIGNvdW50ID0gbWF4Q291bnQ7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGNvdW50ID09PSAwKSB7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy52YWx1ZXMgPSBuZXcgVWludDMyQXJyYXkob2xkVmFsdWVzLmxlbmd0aCAtIGNvdW50KTtcbiAgICAgICAgdGhpcy52YWx1ZXMuc2V0KG9sZFZhbHVlcy5zdWJhcnJheSgwLCBzdGFydEluZGV4KSwgMCk7XG4gICAgICAgIHRoaXMudmFsdWVzLnNldChvbGRWYWx1ZXMuc3ViYXJyYXkoc3RhcnRJbmRleCArIGNvdW50KSwgc3RhcnRJbmRleCk7XG4gICAgICAgIHRoaXMucHJlZml4U3VtID0gbmV3IFVpbnQzMkFycmF5KHRoaXMudmFsdWVzLmxlbmd0aCk7XG4gICAgICAgIGlmIChzdGFydEluZGV4IC0gMSA8IHRoaXMucHJlZml4U3VtVmFsaWRJbmRleFswXSkge1xuICAgICAgICAgICAgdGhpcy5wcmVmaXhTdW1WYWxpZEluZGV4WzBdID0gc3RhcnRJbmRleCAtIDE7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHRoaXMucHJlZml4U3VtVmFsaWRJbmRleFswXSA+PSAwKSB7XG4gICAgICAgICAgICB0aGlzLnByZWZpeFN1bS5zZXQob2xkUHJlZml4U3VtLnN1YmFycmF5KDAsIHRoaXMucHJlZml4U3VtVmFsaWRJbmRleFswXSArIDEpKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gICAgZ2V0VG90YWxTdW0oKSB7XG4gICAgICAgIGlmICh0aGlzLnZhbHVlcy5sZW5ndGggPT09IDApIHtcbiAgICAgICAgICAgIHJldHVybiAwO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0aGlzLl9nZXRQcmVmaXhTdW0odGhpcy52YWx1ZXMubGVuZ3RoIC0gMSk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFJldHVybnMgdGhlIHN1bSBvZiB0aGUgZmlyc3QgYGluZGV4ICsgMWAgbWFueSBpdGVtcy5cbiAgICAgKiBAcmV0dXJucyBgU1VNKDAgPD0gaiA8PSBpbmRleCwgdmFsdWVzW2pdKWAuXG4gICAgICovXG4gICAgZ2V0UHJlZml4U3VtKGluZGV4KSB7XG4gICAgICAgIGlmIChpbmRleCA8IDApIHtcbiAgICAgICAgICAgIHJldHVybiAwO1xuICAgICAgICB9XG4gICAgICAgIGluZGV4ID0gdG9VaW50MzIoaW5kZXgpO1xuICAgICAgICByZXR1cm4gdGhpcy5fZ2V0UHJlZml4U3VtKGluZGV4KTtcbiAgICB9XG4gICAgX2dldFByZWZpeFN1bShpbmRleCkge1xuICAgICAgICBpZiAoaW5kZXggPD0gdGhpcy5wcmVmaXhTdW1WYWxpZEluZGV4WzBdKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5wcmVmaXhTdW1baW5kZXhdO1xuICAgICAgICB9XG4gICAgICAgIGxldCBzdGFydEluZGV4ID0gdGhpcy5wcmVmaXhTdW1WYWxpZEluZGV4WzBdICsgMTtcbiAgICAgICAgaWYgKHN0YXJ0SW5kZXggPT09IDApIHtcbiAgICAgICAgICAgIHRoaXMucHJlZml4U3VtWzBdID0gdGhpcy52YWx1ZXNbMF07XG4gICAgICAgICAgICBzdGFydEluZGV4Kys7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGluZGV4ID49IHRoaXMudmFsdWVzLmxlbmd0aCkge1xuICAgICAgICAgICAgaW5kZXggPSB0aGlzLnZhbHVlcy5sZW5ndGggLSAxO1xuICAgICAgICB9XG4gICAgICAgIGZvciAobGV0IGkgPSBzdGFydEluZGV4OyBpIDw9IGluZGV4OyBpKyspIHtcbiAgICAgICAgICAgIHRoaXMucHJlZml4U3VtW2ldID0gdGhpcy5wcmVmaXhTdW1baSAtIDFdICsgdGhpcy52YWx1ZXNbaV07XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5wcmVmaXhTdW1WYWxpZEluZGV4WzBdID0gTWF0aC5tYXgodGhpcy5wcmVmaXhTdW1WYWxpZEluZGV4WzBdLCBpbmRleCk7XG4gICAgICAgIHJldHVybiB0aGlzLnByZWZpeFN1bVtpbmRleF07XG4gICAgfVxuICAgIGdldEluZGV4T2Yoc3VtKSB7XG4gICAgICAgIHN1bSA9IE1hdGguZmxvb3Ioc3VtKTtcbiAgICAgICAgLy8gQ29tcHV0ZSBhbGwgc3VtcyAodG8gZ2V0IGEgZnVsbHkgdmFsaWQgcHJlZml4U3VtKVxuICAgICAgICB0aGlzLmdldFRvdGFsU3VtKCk7XG4gICAgICAgIGxldCBsb3cgPSAwO1xuICAgICAgICBsZXQgaGlnaCA9IHRoaXMudmFsdWVzLmxlbmd0aCAtIDE7XG4gICAgICAgIGxldCBtaWQgPSAwO1xuICAgICAgICBsZXQgbWlkU3RvcCA9IDA7XG4gICAgICAgIGxldCBtaWRTdGFydCA9IDA7XG4gICAgICAgIHdoaWxlIChsb3cgPD0gaGlnaCkge1xuICAgICAgICAgICAgbWlkID0gbG93ICsgKChoaWdoIC0gbG93KSAvIDIpIHwgMDtcbiAgICAgICAgICAgIG1pZFN0b3AgPSB0aGlzLnByZWZpeFN1bVttaWRdO1xuICAgICAgICAgICAgbWlkU3RhcnQgPSBtaWRTdG9wIC0gdGhpcy52YWx1ZXNbbWlkXTtcbiAgICAgICAgICAgIGlmIChzdW0gPCBtaWRTdGFydCkge1xuICAgICAgICAgICAgICAgIGhpZ2ggPSBtaWQgLSAxO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAoc3VtID49IG1pZFN0b3ApIHtcbiAgICAgICAgICAgICAgICBsb3cgPSBtaWQgKyAxO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG5ldyBQcmVmaXhTdW1JbmRleE9mUmVzdWx0KG1pZCwgc3VtIC0gbWlkU3RhcnQpO1xuICAgIH1cbn1cbi8qKlxuICoge0BsaW5rIGdldEluZGV4T2Z9IGhhcyBhbiBhbW9ydGl6ZWQgcnVudGltZSBjb21wbGV4aXR5IG9mIE8oMSkuXG4gKlxuICogKHtAbGluayBQcmVmaXhTdW1Db21wdXRlci5nZXRJbmRleE9mfSBpcyBqdXN0ICBPKGxvZyBuKSlcbiovXG5leHBvcnQgY2xhc3MgQ29uc3RhbnRUaW1lUHJlZml4U3VtQ29tcHV0ZXIge1xuICAgIGNvbnN0cnVjdG9yKHZhbHVlcykge1xuICAgICAgICB0aGlzLl92YWx1ZXMgPSB2YWx1ZXM7XG4gICAgICAgIHRoaXMuX2lzVmFsaWQgPSBmYWxzZTtcbiAgICAgICAgdGhpcy5fdmFsaWRFbmRJbmRleCA9IC0xO1xuICAgICAgICB0aGlzLl9wcmVmaXhTdW0gPSBbXTtcbiAgICAgICAgdGhpcy5faW5kZXhCeVN1bSA9IFtdO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBAcmV0dXJucyBTVU0oMCA8PSBqIDwgdmFsdWVzLmxlbmd0aCwgdmFsdWVzW2pdKVxuICAgICAqL1xuICAgIGdldFRvdGFsU3VtKCkge1xuICAgICAgICB0aGlzLl9lbnN1cmVWYWxpZCgpO1xuICAgICAgICByZXR1cm4gdGhpcy5faW5kZXhCeVN1bS5sZW5ndGg7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFJldHVybnMgdGhlIHN1bSBvZiB0aGUgZmlyc3QgYGNvdW50YCBtYW55IGl0ZW1zLlxuICAgICAqIEByZXR1cm5zIGBTVU0oMCA8PSBqIDwgY291bnQsIHZhbHVlc1tqXSlgLlxuICAgICAqL1xuICAgIGdldFByZWZpeFN1bShjb3VudCkge1xuICAgICAgICB0aGlzLl9lbnN1cmVWYWxpZCgpO1xuICAgICAgICBpZiAoY291bnQgPT09IDApIHtcbiAgICAgICAgICAgIHJldHVybiAwO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0aGlzLl9wcmVmaXhTdW1bY291bnQgLSAxXTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQHJldHVybnMgYHJlc3VsdGAsIHN1Y2ggdGhhdCBgZ2V0UHJlZml4U3VtKHJlc3VsdC5pbmRleCkgKyByZXN1bHQucmVtYWluZGVyID0gc3VtYFxuICAgICAqL1xuICAgIGdldEluZGV4T2Yoc3VtKSB7XG4gICAgICAgIHRoaXMuX2Vuc3VyZVZhbGlkKCk7XG4gICAgICAgIGNvbnN0IGlkeCA9IHRoaXMuX2luZGV4QnlTdW1bc3VtXTtcbiAgICAgICAgY29uc3Qgdmlld0xpbmVzQWJvdmUgPSBpZHggPiAwID8gdGhpcy5fcHJlZml4U3VtW2lkeCAtIDFdIDogMDtcbiAgICAgICAgcmV0dXJuIG5ldyBQcmVmaXhTdW1JbmRleE9mUmVzdWx0KGlkeCwgc3VtIC0gdmlld0xpbmVzQWJvdmUpO1xuICAgIH1cbiAgICByZW1vdmVWYWx1ZXMoc3RhcnQsIGRlbGV0ZUNvdW50KSB7XG4gICAgICAgIHRoaXMuX3ZhbHVlcy5zcGxpY2Uoc3RhcnQsIGRlbGV0ZUNvdW50KTtcbiAgICAgICAgdGhpcy5faW52YWxpZGF0ZShzdGFydCk7XG4gICAgfVxuICAgIGluc2VydFZhbHVlcyhpbnNlcnRJbmRleCwgaW5zZXJ0QXJyKSB7XG4gICAgICAgIHRoaXMuX3ZhbHVlcyA9IGFycmF5SW5zZXJ0KHRoaXMuX3ZhbHVlcywgaW5zZXJ0SW5kZXgsIGluc2VydEFycik7XG4gICAgICAgIHRoaXMuX2ludmFsaWRhdGUoaW5zZXJ0SW5kZXgpO1xuICAgIH1cbiAgICBfaW52YWxpZGF0ZShpbmRleCkge1xuICAgICAgICB0aGlzLl9pc1ZhbGlkID0gZmFsc2U7XG4gICAgICAgIHRoaXMuX3ZhbGlkRW5kSW5kZXggPSBNYXRoLm1pbih0aGlzLl92YWxpZEVuZEluZGV4LCBpbmRleCAtIDEpO1xuICAgIH1cbiAgICBfZW5zdXJlVmFsaWQoKSB7XG4gICAgICAgIGlmICh0aGlzLl9pc1ZhbGlkKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgZm9yIChsZXQgaSA9IHRoaXMuX3ZhbGlkRW5kSW5kZXggKyAxLCBsZW4gPSB0aGlzLl92YWx1ZXMubGVuZ3RoOyBpIDwgbGVuOyBpKyspIHtcbiAgICAgICAgICAgIGNvbnN0IHZhbHVlID0gdGhpcy5fdmFsdWVzW2ldO1xuICAgICAgICAgICAgY29uc3Qgc3VtQWJvdmUgPSBpID4gMCA/IHRoaXMuX3ByZWZpeFN1bVtpIC0gMV0gOiAwO1xuICAgICAgICAgICAgdGhpcy5fcHJlZml4U3VtW2ldID0gc3VtQWJvdmUgKyB2YWx1ZTtcbiAgICAgICAgICAgIGZvciAobGV0IGogPSAwOyBqIDwgdmFsdWU7IGorKykge1xuICAgICAgICAgICAgICAgIHRoaXMuX2luZGV4QnlTdW1bc3VtQWJvdmUgKyBqXSA9IGk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgLy8gdHJpbSB0aGluZ3NcbiAgICAgICAgdGhpcy5fcHJlZml4U3VtLmxlbmd0aCA9IHRoaXMuX3ZhbHVlcy5sZW5ndGg7XG4gICAgICAgIHRoaXMuX2luZGV4QnlTdW0ubGVuZ3RoID0gdGhpcy5fcHJlZml4U3VtW3RoaXMuX3ByZWZpeFN1bS5sZW5ndGggLSAxXTtcbiAgICAgICAgLy8gbWFyayBhcyB2YWxpZFxuICAgICAgICB0aGlzLl9pc1ZhbGlkID0gdHJ1ZTtcbiAgICAgICAgdGhpcy5fdmFsaWRFbmRJbmRleCA9IHRoaXMuX3ZhbHVlcy5sZW5ndGggLSAxO1xuICAgIH1cbiAgICBzZXRWYWx1ZShpbmRleCwgdmFsdWUpIHtcbiAgICAgICAgaWYgKHRoaXMuX3ZhbHVlc1tpbmRleF0gPT09IHZhbHVlKSB7XG4gICAgICAgICAgICAvLyBubyBjaGFuZ2VcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLl92YWx1ZXNbaW5kZXhdID0gdmFsdWU7XG4gICAgICAgIHRoaXMuX2ludmFsaWRhdGUoaW5kZXgpO1xuICAgIH1cbn1cbmV4cG9ydCBjbGFzcyBQcmVmaXhTdW1JbmRleE9mUmVzdWx0IHtcbiAgICBjb25zdHJ1Y3RvcihpbmRleCwgcmVtYWluZGVyKSB7XG4gICAgICAgIHRoaXMuaW5kZXggPSBpbmRleDtcbiAgICAgICAgdGhpcy5yZW1haW5kZXIgPSByZW1haW5kZXI7XG4gICAgICAgIHRoaXMuX3ByZWZpeFN1bUluZGV4T2ZSZXN1bHRCcmFuZCA9IHVuZGVmaW5lZDtcbiAgICAgICAgdGhpcy5pbmRleCA9IGluZGV4O1xuICAgICAgICB0aGlzLnJlbWFpbmRlciA9IHJlbWFpbmRlcjtcbiAgICB9XG59XG4iLCAiLyotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAqICBDb3B5cmlnaHQgKGMpIE1pY3Jvc29mdCBDb3Jwb3JhdGlvbi4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqICBMaWNlbnNlZCB1bmRlciB0aGUgTUlUIExpY2Vuc2UuIFNlZSBMaWNlbnNlLnR4dCBpbiB0aGUgcHJvamVjdCByb290IGZvciBsaWNlbnNlIGluZm9ybWF0aW9uLlxuICotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSovXG5pbXBvcnQgeyBzcGxpdExpbmVzIH0gZnJvbSAnLi4vLi4vLi4vYmFzZS9jb21tb24vc3RyaW5ncy5qcyc7XG5pbXBvcnQgeyBQb3NpdGlvbiB9IGZyb20gJy4uL2NvcmUvcG9zaXRpb24uanMnO1xuaW1wb3J0IHsgUHJlZml4U3VtQ29tcHV0ZXIgfSBmcm9tICcuL3ByZWZpeFN1bUNvbXB1dGVyLmpzJztcbmV4cG9ydCBjbGFzcyBNaXJyb3JUZXh0TW9kZWwge1xuICAgIGNvbnN0cnVjdG9yKHVyaSwgbGluZXMsIGVvbCwgdmVyc2lvbklkKSB7XG4gICAgICAgIHRoaXMuX3VyaSA9IHVyaTtcbiAgICAgICAgdGhpcy5fbGluZXMgPSBsaW5lcztcbiAgICAgICAgdGhpcy5fZW9sID0gZW9sO1xuICAgICAgICB0aGlzLl92ZXJzaW9uSWQgPSB2ZXJzaW9uSWQ7XG4gICAgICAgIHRoaXMuX2xpbmVTdGFydHMgPSBudWxsO1xuICAgICAgICB0aGlzLl9jYWNoZWRUZXh0VmFsdWUgPSBudWxsO1xuICAgIH1cbiAgICBkaXNwb3NlKCkge1xuICAgICAgICB0aGlzLl9saW5lcy5sZW5ndGggPSAwO1xuICAgIH1cbiAgICBnZXQgdmVyc2lvbigpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX3ZlcnNpb25JZDtcbiAgICB9XG4gICAgZ2V0VGV4dCgpIHtcbiAgICAgICAgaWYgKHRoaXMuX2NhY2hlZFRleHRWYWx1ZSA9PT0gbnVsbCkge1xuICAgICAgICAgICAgdGhpcy5fY2FjaGVkVGV4dFZhbHVlID0gdGhpcy5fbGluZXMuam9pbih0aGlzLl9lb2wpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0aGlzLl9jYWNoZWRUZXh0VmFsdWU7XG4gICAgfVxuICAgIG9uRXZlbnRzKGUpIHtcbiAgICAgICAgaWYgKGUuZW9sICYmIGUuZW9sICE9PSB0aGlzLl9lb2wpIHtcbiAgICAgICAgICAgIHRoaXMuX2VvbCA9IGUuZW9sO1xuICAgICAgICAgICAgdGhpcy5fbGluZVN0YXJ0cyA9IG51bGw7XG4gICAgICAgIH1cbiAgICAgICAgLy8gVXBkYXRlIG15IGxpbmVzXG4gICAgICAgIGNvbnN0IGNoYW5nZXMgPSBlLmNoYW5nZXM7XG4gICAgICAgIGZvciAoY29uc3QgY2hhbmdlIG9mIGNoYW5nZXMpIHtcbiAgICAgICAgICAgIHRoaXMuX2FjY2VwdERlbGV0ZVJhbmdlKGNoYW5nZS5yYW5nZSk7XG4gICAgICAgICAgICB0aGlzLl9hY2NlcHRJbnNlcnRUZXh0KG5ldyBQb3NpdGlvbihjaGFuZ2UucmFuZ2Uuc3RhcnRMaW5lTnVtYmVyLCBjaGFuZ2UucmFuZ2Uuc3RhcnRDb2x1bW4pLCBjaGFuZ2UudGV4dCk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5fdmVyc2lvbklkID0gZS52ZXJzaW9uSWQ7XG4gICAgICAgIHRoaXMuX2NhY2hlZFRleHRWYWx1ZSA9IG51bGw7XG4gICAgfVxuICAgIF9lbnN1cmVMaW5lU3RhcnRzKCkge1xuICAgICAgICBpZiAoIXRoaXMuX2xpbmVTdGFydHMpIHtcbiAgICAgICAgICAgIGNvbnN0IGVvbExlbmd0aCA9IHRoaXMuX2VvbC5sZW5ndGg7XG4gICAgICAgICAgICBjb25zdCBsaW5lc0xlbmd0aCA9IHRoaXMuX2xpbmVzLmxlbmd0aDtcbiAgICAgICAgICAgIGNvbnN0IGxpbmVTdGFydFZhbHVlcyA9IG5ldyBVaW50MzJBcnJheShsaW5lc0xlbmd0aCk7XG4gICAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGxpbmVzTGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgICAgICBsaW5lU3RhcnRWYWx1ZXNbaV0gPSB0aGlzLl9saW5lc1tpXS5sZW5ndGggKyBlb2xMZW5ndGg7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0aGlzLl9saW5lU3RhcnRzID0gbmV3IFByZWZpeFN1bUNvbXB1dGVyKGxpbmVTdGFydFZhbHVlcyk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgLyoqXG4gICAgICogQWxsIGNoYW5nZXMgdG8gYSBsaW5lJ3MgdGV4dCBnbyB0aHJvdWdoIHRoaXMgbWV0aG9kXG4gICAgICovXG4gICAgX3NldExpbmVUZXh0KGxpbmVJbmRleCwgbmV3VmFsdWUpIHtcbiAgICAgICAgdGhpcy5fbGluZXNbbGluZUluZGV4XSA9IG5ld1ZhbHVlO1xuICAgICAgICBpZiAodGhpcy5fbGluZVN0YXJ0cykge1xuICAgICAgICAgICAgLy8gdXBkYXRlIHByZWZpeCBzdW1cbiAgICAgICAgICAgIHRoaXMuX2xpbmVTdGFydHMuc2V0VmFsdWUobGluZUluZGV4LCB0aGlzLl9saW5lc1tsaW5lSW5kZXhdLmxlbmd0aCArIHRoaXMuX2VvbC5sZW5ndGgpO1xuICAgICAgICB9XG4gICAgfVxuICAgIF9hY2NlcHREZWxldGVSYW5nZShyYW5nZSkge1xuICAgICAgICBpZiAocmFuZ2Uuc3RhcnRMaW5lTnVtYmVyID09PSByYW5nZS5lbmRMaW5lTnVtYmVyKSB7XG4gICAgICAgICAgICBpZiAocmFuZ2Uuc3RhcnRDb2x1bW4gPT09IHJhbmdlLmVuZENvbHVtbikge1xuICAgICAgICAgICAgICAgIC8vIE5vdGhpbmcgdG8gZGVsZXRlXG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLy8gRGVsZXRlIHRleHQgb24gdGhlIGFmZmVjdGVkIGxpbmVcbiAgICAgICAgICAgIHRoaXMuX3NldExpbmVUZXh0KHJhbmdlLnN0YXJ0TGluZU51bWJlciAtIDEsIHRoaXMuX2xpbmVzW3JhbmdlLnN0YXJ0TGluZU51bWJlciAtIDFdLnN1YnN0cmluZygwLCByYW5nZS5zdGFydENvbHVtbiAtIDEpXG4gICAgICAgICAgICAgICAgKyB0aGlzLl9saW5lc1tyYW5nZS5zdGFydExpbmVOdW1iZXIgLSAxXS5zdWJzdHJpbmcocmFuZ2UuZW5kQ29sdW1uIC0gMSkpO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIC8vIFRha2UgcmVtYWluaW5nIHRleHQgb24gbGFzdCBsaW5lIGFuZCBhcHBlbmQgaXQgdG8gcmVtYWluaW5nIHRleHQgb24gZmlyc3QgbGluZVxuICAgICAgICB0aGlzLl9zZXRMaW5lVGV4dChyYW5nZS5zdGFydExpbmVOdW1iZXIgLSAxLCB0aGlzLl9saW5lc1tyYW5nZS5zdGFydExpbmVOdW1iZXIgLSAxXS5zdWJzdHJpbmcoMCwgcmFuZ2Uuc3RhcnRDb2x1bW4gLSAxKVxuICAgICAgICAgICAgKyB0aGlzLl9saW5lc1tyYW5nZS5lbmRMaW5lTnVtYmVyIC0gMV0uc3Vic3RyaW5nKHJhbmdlLmVuZENvbHVtbiAtIDEpKTtcbiAgICAgICAgLy8gRGVsZXRlIG1pZGRsZSBsaW5lc1xuICAgICAgICB0aGlzLl9saW5lcy5zcGxpY2UocmFuZ2Uuc3RhcnRMaW5lTnVtYmVyLCByYW5nZS5lbmRMaW5lTnVtYmVyIC0gcmFuZ2Uuc3RhcnRMaW5lTnVtYmVyKTtcbiAgICAgICAgaWYgKHRoaXMuX2xpbmVTdGFydHMpIHtcbiAgICAgICAgICAgIC8vIHVwZGF0ZSBwcmVmaXggc3VtXG4gICAgICAgICAgICB0aGlzLl9saW5lU3RhcnRzLnJlbW92ZVZhbHVlcyhyYW5nZS5zdGFydExpbmVOdW1iZXIsIHJhbmdlLmVuZExpbmVOdW1iZXIgLSByYW5nZS5zdGFydExpbmVOdW1iZXIpO1xuICAgICAgICB9XG4gICAgfVxuICAgIF9hY2NlcHRJbnNlcnRUZXh0KHBvc2l0aW9uLCBpbnNlcnRUZXh0KSB7XG4gICAgICAgIGlmIChpbnNlcnRUZXh0Lmxlbmd0aCA9PT0gMCkge1xuICAgICAgICAgICAgLy8gTm90aGluZyB0byBpbnNlcnRcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBpbnNlcnRMaW5lcyA9IHNwbGl0TGluZXMoaW5zZXJ0VGV4dCk7XG4gICAgICAgIGlmIChpbnNlcnRMaW5lcy5sZW5ndGggPT09IDEpIHtcbiAgICAgICAgICAgIC8vIEluc2VydGluZyB0ZXh0IG9uIG9uZSBsaW5lXG4gICAgICAgICAgICB0aGlzLl9zZXRMaW5lVGV4dChwb3NpdGlvbi5saW5lTnVtYmVyIC0gMSwgdGhpcy5fbGluZXNbcG9zaXRpb24ubGluZU51bWJlciAtIDFdLnN1YnN0cmluZygwLCBwb3NpdGlvbi5jb2x1bW4gLSAxKVxuICAgICAgICAgICAgICAgICsgaW5zZXJ0TGluZXNbMF1cbiAgICAgICAgICAgICAgICArIHRoaXMuX2xpbmVzW3Bvc2l0aW9uLmxpbmVOdW1iZXIgLSAxXS5zdWJzdHJpbmcocG9zaXRpb24uY29sdW1uIC0gMSkpO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIC8vIEFwcGVuZCBvdmVyZmxvd2luZyB0ZXh0IGZyb20gZmlyc3QgbGluZSB0byB0aGUgZW5kIG9mIHRleHQgdG8gaW5zZXJ0XG4gICAgICAgIGluc2VydExpbmVzW2luc2VydExpbmVzLmxlbmd0aCAtIDFdICs9IHRoaXMuX2xpbmVzW3Bvc2l0aW9uLmxpbmVOdW1iZXIgLSAxXS5zdWJzdHJpbmcocG9zaXRpb24uY29sdW1uIC0gMSk7XG4gICAgICAgIC8vIERlbGV0ZSBvdmVyZmxvd2luZyB0ZXh0IGZyb20gZmlyc3QgbGluZSBhbmQgaW5zZXJ0IHRleHQgb24gZmlyc3QgbGluZVxuICAgICAgICB0aGlzLl9zZXRMaW5lVGV4dChwb3NpdGlvbi5saW5lTnVtYmVyIC0gMSwgdGhpcy5fbGluZXNbcG9zaXRpb24ubGluZU51bWJlciAtIDFdLnN1YnN0cmluZygwLCBwb3NpdGlvbi5jb2x1bW4gLSAxKVxuICAgICAgICAgICAgKyBpbnNlcnRMaW5lc1swXSk7XG4gICAgICAgIC8vIEluc2VydCBuZXcgbGluZXMgJiBzdG9yZSBsZW5ndGhzXG4gICAgICAgIGNvbnN0IG5ld0xlbmd0aHMgPSBuZXcgVWludDMyQXJyYXkoaW5zZXJ0TGluZXMubGVuZ3RoIC0gMSk7XG4gICAgICAgIGZvciAobGV0IGkgPSAxOyBpIDwgaW5zZXJ0TGluZXMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIHRoaXMuX2xpbmVzLnNwbGljZShwb3NpdGlvbi5saW5lTnVtYmVyICsgaSAtIDEsIDAsIGluc2VydExpbmVzW2ldKTtcbiAgICAgICAgICAgIG5ld0xlbmd0aHNbaSAtIDFdID0gaW5zZXJ0TGluZXNbaV0ubGVuZ3RoICsgdGhpcy5fZW9sLmxlbmd0aDtcbiAgICAgICAgfVxuICAgICAgICBpZiAodGhpcy5fbGluZVN0YXJ0cykge1xuICAgICAgICAgICAgLy8gdXBkYXRlIHByZWZpeCBzdW1cbiAgICAgICAgICAgIHRoaXMuX2xpbmVTdGFydHMuaW5zZXJ0VmFsdWVzKHBvc2l0aW9uLmxpbmVOdW1iZXIsIG5ld0xlbmd0aHMpO1xuICAgICAgICB9XG4gICAgfVxufVxuIiwgIi8qLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gKiAgQ29weXJpZ2h0IChjKSBNaWNyb3NvZnQgQ29ycG9yYXRpb24uIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKiAgTGljZW5zZWQgdW5kZXIgdGhlIE1JVCBMaWNlbnNlLiBTZWUgTGljZW5zZS50eHQgaW4gdGhlIHByb2plY3Qgcm9vdCBmb3IgbGljZW5zZSBpbmZvcm1hdGlvbi5cbiAqLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qL1xuaW1wb3J0IHsgSXRlcmFibGUgfSBmcm9tICcuLi8uLi8uLi9iYXNlL2NvbW1vbi9pdGVyYXRvci5qcyc7XG5pbXBvcnQgeyBMaW5rZWRMaXN0IH0gZnJvbSAnLi4vLi4vLi4vYmFzZS9jb21tb24vbGlua2VkTGlzdC5qcyc7XG5leHBvcnQgY29uc3QgVVNVQUxfV09SRF9TRVBBUkFUT1JTID0gJ2B+IUAjJCVeJiooKS09K1t7XX1cXFxcfDs6XFwnXCIsLjw+Lz8nO1xuLyoqXG4gKiBDcmVhdGUgYSB3b3JkIGRlZmluaXRpb24gcmVndWxhciBleHByZXNzaW9uIGJhc2VkIG9uIGRlZmF1bHQgd29yZCBzZXBhcmF0b3JzLlxuICogT3B0aW9uYWxseSBwcm92aWRlIGFsbG93ZWQgc2VwYXJhdG9ycyB0aGF0IHNob3VsZCBiZSBpbmNsdWRlZCBpbiB3b3Jkcy5cbiAqXG4gKiBUaGUgZGVmYXVsdCB3b3VsZCBsb29rIGxpa2UgdGhpczpcbiAqIC8oLT9cXGQqXFwuXFxkXFx3Kil8KFteXFxgXFx+XFwhXFxAXFwjXFwkXFwlXFxeXFwmXFwqXFwoXFwpXFwtXFw9XFwrXFxbXFx7XFxdXFx9XFxcXFxcfFxcO1xcOlxcJ1xcXCJcXCxcXC5cXDxcXD5cXC9cXD9cXHNdKykvZ1xuICovXG5mdW5jdGlvbiBjcmVhdGVXb3JkUmVnRXhwKGFsbG93SW5Xb3JkcyA9ICcnKSB7XG4gICAgbGV0IHNvdXJjZSA9ICcoLT9cXFxcZCpcXFxcLlxcXFxkXFxcXHcqKXwoW14nO1xuICAgIGZvciAoY29uc3Qgc2VwIG9mIFVTVUFMX1dPUkRfU0VQQVJBVE9SUykge1xuICAgICAgICBpZiAoYWxsb3dJbldvcmRzLmluZGV4T2Yoc2VwKSA+PSAwKSB7XG4gICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgfVxuICAgICAgICBzb3VyY2UgKz0gJ1xcXFwnICsgc2VwO1xuICAgIH1cbiAgICBzb3VyY2UgKz0gJ1xcXFxzXSspJztcbiAgICByZXR1cm4gbmV3IFJlZ0V4cChzb3VyY2UsICdnJyk7XG59XG4vLyBjYXRjaGVzIG51bWJlcnMgKGluY2x1ZGluZyBmbG9hdGluZyBudW1iZXJzKSBpbiB0aGUgZmlyc3QgZ3JvdXAsIGFuZCBhbHBoYW51bSBpbiB0aGUgc2Vjb25kXG5leHBvcnQgY29uc3QgREVGQVVMVF9XT1JEX1JFR0VYUCA9IGNyZWF0ZVdvcmRSZWdFeHAoKTtcbmV4cG9ydCBmdW5jdGlvbiBlbnN1cmVWYWxpZFdvcmREZWZpbml0aW9uKHdvcmREZWZpbml0aW9uKSB7XG4gICAgbGV0IHJlc3VsdCA9IERFRkFVTFRfV09SRF9SRUdFWFA7XG4gICAgaWYgKHdvcmREZWZpbml0aW9uICYmICh3b3JkRGVmaW5pdGlvbiBpbnN0YW5jZW9mIFJlZ0V4cCkpIHtcbiAgICAgICAgaWYgKCF3b3JkRGVmaW5pdGlvbi5nbG9iYWwpIHtcbiAgICAgICAgICAgIGxldCBmbGFncyA9ICdnJztcbiAgICAgICAgICAgIGlmICh3b3JkRGVmaW5pdGlvbi5pZ25vcmVDYXNlKSB7XG4gICAgICAgICAgICAgICAgZmxhZ3MgKz0gJ2knO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKHdvcmREZWZpbml0aW9uLm11bHRpbGluZSkge1xuICAgICAgICAgICAgICAgIGZsYWdzICs9ICdtJztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICh3b3JkRGVmaW5pdGlvbi51bmljb2RlKSB7XG4gICAgICAgICAgICAgICAgZmxhZ3MgKz0gJ3UnO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmVzdWx0ID0gbmV3IFJlZ0V4cCh3b3JkRGVmaW5pdGlvbi5zb3VyY2UsIGZsYWdzKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHJlc3VsdCA9IHdvcmREZWZpbml0aW9uO1xuICAgICAgICB9XG4gICAgfVxuICAgIHJlc3VsdC5sYXN0SW5kZXggPSAwO1xuICAgIHJldHVybiByZXN1bHQ7XG59XG5jb25zdCBfZGVmYXVsdENvbmZpZyA9IG5ldyBMaW5rZWRMaXN0KCk7XG5fZGVmYXVsdENvbmZpZy51bnNoaWZ0KHtcbiAgICBtYXhMZW46IDEwMDAsXG4gICAgd2luZG93U2l6ZTogMTUsXG4gICAgdGltZUJ1ZGdldDogMTUwXG59KTtcbmV4cG9ydCBmdW5jdGlvbiBnZXRXb3JkQXRUZXh0KGNvbHVtbiwgd29yZERlZmluaXRpb24sIHRleHQsIHRleHRPZmZzZXQsIGNvbmZpZykge1xuICAgIC8vIEVuc3VyZSB0aGUgcmVnZXggaGFzIHRoZSAnZycgZmxhZywgb3RoZXJ3aXNlIHRoaXMgd2lsbCBsb29wIGZvcmV2ZXJcbiAgICB3b3JkRGVmaW5pdGlvbiA9IGVuc3VyZVZhbGlkV29yZERlZmluaXRpb24od29yZERlZmluaXRpb24pO1xuICAgIGlmICghY29uZmlnKSB7XG4gICAgICAgIGNvbmZpZyA9IEl0ZXJhYmxlLmZpcnN0KF9kZWZhdWx0Q29uZmlnKTtcbiAgICB9XG4gICAgaWYgKHRleHQubGVuZ3RoID4gY29uZmlnLm1heExlbikge1xuICAgICAgICAvLyBkb24ndCB0aHJvdyBzdHJpbmdzIHRoYXQgbG9uZyBhdCB0aGUgcmVnZXhwXG4gICAgICAgIC8vIGJ1dCB1c2UgYSBzdWItc3RyaW5nIGluIHdoaWNoIGEgd29yZCBtdXN0IG9jY3VyXG4gICAgICAgIGxldCBzdGFydCA9IGNvbHVtbiAtIGNvbmZpZy5tYXhMZW4gLyAyO1xuICAgICAgICBpZiAoc3RhcnQgPCAwKSB7XG4gICAgICAgICAgICBzdGFydCA9IDA7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICB0ZXh0T2Zmc2V0ICs9IHN0YXJ0O1xuICAgICAgICB9XG4gICAgICAgIHRleHQgPSB0ZXh0LnN1YnN0cmluZyhzdGFydCwgY29sdW1uICsgY29uZmlnLm1heExlbiAvIDIpO1xuICAgICAgICByZXR1cm4gZ2V0V29yZEF0VGV4dChjb2x1bW4sIHdvcmREZWZpbml0aW9uLCB0ZXh0LCB0ZXh0T2Zmc2V0LCBjb25maWcpO1xuICAgIH1cbiAgICBjb25zdCB0MSA9IERhdGUubm93KCk7XG4gICAgY29uc3QgcG9zID0gY29sdW1uIC0gMSAtIHRleHRPZmZzZXQ7XG4gICAgbGV0IHByZXZSZWdleEluZGV4ID0gLTE7XG4gICAgbGV0IG1hdGNoID0gbnVsbDtcbiAgICBmb3IgKGxldCBpID0gMTs7IGkrKykge1xuICAgICAgICAvLyBjaGVjayB0aW1lIGJ1ZGdldFxuICAgICAgICBpZiAoRGF0ZS5ub3coKSAtIHQxID49IGNvbmZpZy50aW1lQnVkZ2V0KSB7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgICAvLyByZXNldCB0aGUgaW5kZXggYXQgd2hpY2ggdGhlIHJlZ2V4cCBzaG91bGQgc3RhcnQgbWF0Y2hpbmcsIGFsc28ga25vdyB3aGVyZSBpdFxuICAgICAgICAvLyBzaG91bGQgc3RvcCBzbyB0aGF0IHN1YnNlcXVlbnQgc2VhcmNoIGRvbid0IHJlcGVhdCBwcmV2aW91cyBzZWFyY2hlc1xuICAgICAgICBjb25zdCByZWdleEluZGV4ID0gcG9zIC0gY29uZmlnLndpbmRvd1NpemUgKiBpO1xuICAgICAgICB3b3JkRGVmaW5pdGlvbi5sYXN0SW5kZXggPSBNYXRoLm1heCgwLCByZWdleEluZGV4KTtcbiAgICAgICAgY29uc3QgdGhpc01hdGNoID0gX2ZpbmRSZWdleE1hdGNoRW5jbG9zaW5nUG9zaXRpb24od29yZERlZmluaXRpb24sIHRleHQsIHBvcywgcHJldlJlZ2V4SW5kZXgpO1xuICAgICAgICBpZiAoIXRoaXNNYXRjaCAmJiBtYXRjaCkge1xuICAgICAgICAgICAgLy8gc3RvcDogd2UgaGF2ZSBzb21ldGhpbmdcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICAgIG1hdGNoID0gdGhpc01hdGNoO1xuICAgICAgICAvLyBzdG9wOiBzZWFyY2hlZCBhdCBzdGFydFxuICAgICAgICBpZiAocmVnZXhJbmRleCA8PSAwKSB7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgICBwcmV2UmVnZXhJbmRleCA9IHJlZ2V4SW5kZXg7XG4gICAgfVxuICAgIGlmIChtYXRjaCkge1xuICAgICAgICBjb25zdCByZXN1bHQgPSB7XG4gICAgICAgICAgICB3b3JkOiBtYXRjaFswXSxcbiAgICAgICAgICAgIHN0YXJ0Q29sdW1uOiB0ZXh0T2Zmc2V0ICsgMSArIG1hdGNoLmluZGV4LFxuICAgICAgICAgICAgZW5kQ29sdW1uOiB0ZXh0T2Zmc2V0ICsgMSArIG1hdGNoLmluZGV4ICsgbWF0Y2hbMF0ubGVuZ3RoXG4gICAgICAgIH07XG4gICAgICAgIHdvcmREZWZpbml0aW9uLmxhc3RJbmRleCA9IDA7XG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuICAgIHJldHVybiBudWxsO1xufVxuZnVuY3Rpb24gX2ZpbmRSZWdleE1hdGNoRW5jbG9zaW5nUG9zaXRpb24od29yZERlZmluaXRpb24sIHRleHQsIHBvcywgc3RvcFBvcykge1xuICAgIGxldCBtYXRjaDtcbiAgICB3aGlsZSAobWF0Y2ggPSB3b3JkRGVmaW5pdGlvbi5leGVjKHRleHQpKSB7XG4gICAgICAgIGNvbnN0IG1hdGNoSW5kZXggPSBtYXRjaC5pbmRleCB8fCAwO1xuICAgICAgICBpZiAobWF0Y2hJbmRleCA8PSBwb3MgJiYgd29yZERlZmluaXRpb24ubGFzdEluZGV4ID49IHBvcykge1xuICAgICAgICAgICAgcmV0dXJuIG1hdGNoO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKHN0b3BQb3MgPiAwICYmIG1hdGNoSW5kZXggPiBzdG9wUG9zKSB7XG4gICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gbnVsbDtcbn1cbiIsICIvKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICogIENvcHlyaWdodCAoYykgTWljcm9zb2Z0IENvcnBvcmF0aW9uLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICogIExpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgTGljZW5zZS4gU2VlIExpY2Vuc2UudHh0IGluIHRoZSBwcm9qZWN0IHJvb3QgZm9yIGxpY2Vuc2UgaW5mb3JtYXRpb24uXG4gKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKi9cbmltcG9ydCB7IHRvVWludDggfSBmcm9tICcuLi8uLi8uLi9iYXNlL2NvbW1vbi91aW50LmpzJztcbi8qKlxuICogQSBmYXN0IGNoYXJhY3RlciBjbGFzc2lmaWVyIHRoYXQgdXNlcyBhIGNvbXBhY3QgYXJyYXkgZm9yIEFTQ0lJIHZhbHVlcy5cbiAqL1xuZXhwb3J0IGNsYXNzIENoYXJhY3RlckNsYXNzaWZpZXIge1xuICAgIGNvbnN0cnVjdG9yKF9kZWZhdWx0VmFsdWUpIHtcbiAgICAgICAgY29uc3QgZGVmYXVsdFZhbHVlID0gdG9VaW50OChfZGVmYXVsdFZhbHVlKTtcbiAgICAgICAgdGhpcy5fZGVmYXVsdFZhbHVlID0gZGVmYXVsdFZhbHVlO1xuICAgICAgICB0aGlzLl9hc2NpaU1hcCA9IENoYXJhY3RlckNsYXNzaWZpZXIuX2NyZWF0ZUFzY2lpTWFwKGRlZmF1bHRWYWx1ZSk7XG4gICAgICAgIHRoaXMuX21hcCA9IG5ldyBNYXAoKTtcbiAgICB9XG4gICAgc3RhdGljIF9jcmVhdGVBc2NpaU1hcChkZWZhdWx0VmFsdWUpIHtcbiAgICAgICAgY29uc3QgYXNjaWlNYXAgPSBuZXcgVWludDhBcnJheSgyNTYpO1xuICAgICAgICBhc2NpaU1hcC5maWxsKGRlZmF1bHRWYWx1ZSk7XG4gICAgICAgIHJldHVybiBhc2NpaU1hcDtcbiAgICB9XG4gICAgc2V0KGNoYXJDb2RlLCBfdmFsdWUpIHtcbiAgICAgICAgY29uc3QgdmFsdWUgPSB0b1VpbnQ4KF92YWx1ZSk7XG4gICAgICAgIGlmIChjaGFyQ29kZSA+PSAwICYmIGNoYXJDb2RlIDwgMjU2KSB7XG4gICAgICAgICAgICB0aGlzLl9hc2NpaU1hcFtjaGFyQ29kZV0gPSB2YWx1ZTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMuX21hcC5zZXQoY2hhckNvZGUsIHZhbHVlKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBnZXQoY2hhckNvZGUpIHtcbiAgICAgICAgaWYgKGNoYXJDb2RlID49IDAgJiYgY2hhckNvZGUgPCAyNTYpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLl9hc2NpaU1hcFtjaGFyQ29kZV07XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gKHRoaXMuX21hcC5nZXQoY2hhckNvZGUpIHx8IHRoaXMuX2RlZmF1bHRWYWx1ZSk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgY2xlYXIoKSB7XG4gICAgICAgIHRoaXMuX2FzY2lpTWFwLmZpbGwodGhpcy5fZGVmYXVsdFZhbHVlKTtcbiAgICAgICAgdGhpcy5fbWFwLmNsZWFyKCk7XG4gICAgfVxufVxuZXhwb3J0IGNsYXNzIENoYXJhY3RlclNldCB7XG4gICAgY29uc3RydWN0b3IoKSB7XG4gICAgICAgIHRoaXMuX2FjdHVhbCA9IG5ldyBDaGFyYWN0ZXJDbGFzc2lmaWVyKDAgLyogQm9vbGVhbi5GYWxzZSAqLyk7XG4gICAgfVxuICAgIGFkZChjaGFyQ29kZSkge1xuICAgICAgICB0aGlzLl9hY3R1YWwuc2V0KGNoYXJDb2RlLCAxIC8qIEJvb2xlYW4uVHJ1ZSAqLyk7XG4gICAgfVxuICAgIGhhcyhjaGFyQ29kZSkge1xuICAgICAgICByZXR1cm4gKHRoaXMuX2FjdHVhbC5nZXQoY2hhckNvZGUpID09PSAxIC8qIEJvb2xlYW4uVHJ1ZSAqLyk7XG4gICAgfVxuICAgIGNsZWFyKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fYWN0dWFsLmNsZWFyKCk7XG4gICAgfVxufVxuIiwgIi8qLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gKiAgQ29weXJpZ2h0IChjKSBNaWNyb3NvZnQgQ29ycG9yYXRpb24uIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKiAgTGljZW5zZWQgdW5kZXIgdGhlIE1JVCBMaWNlbnNlLiBTZWUgTGljZW5zZS50eHQgaW4gdGhlIHByb2plY3Qgcm9vdCBmb3IgbGljZW5zZSBpbmZvcm1hdGlvbi5cbiAqLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qL1xuaW1wb3J0IHsgQ2hhcmFjdGVyQ2xhc3NpZmllciB9IGZyb20gJy4uL2NvcmUvY2hhcmFjdGVyQ2xhc3NpZmllci5qcyc7XG5jbGFzcyBVaW50OE1hdHJpeCB7XG4gICAgY29uc3RydWN0b3Iocm93cywgY29scywgZGVmYXVsdFZhbHVlKSB7XG4gICAgICAgIGNvbnN0IGRhdGEgPSBuZXcgVWludDhBcnJheShyb3dzICogY29scyk7XG4gICAgICAgIGZvciAobGV0IGkgPSAwLCBsZW4gPSByb3dzICogY29sczsgaSA8IGxlbjsgaSsrKSB7XG4gICAgICAgICAgICBkYXRhW2ldID0gZGVmYXVsdFZhbHVlO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuX2RhdGEgPSBkYXRhO1xuICAgICAgICB0aGlzLnJvd3MgPSByb3dzO1xuICAgICAgICB0aGlzLmNvbHMgPSBjb2xzO1xuICAgIH1cbiAgICBnZXQocm93LCBjb2wpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2RhdGFbcm93ICogdGhpcy5jb2xzICsgY29sXTtcbiAgICB9XG4gICAgc2V0KHJvdywgY29sLCB2YWx1ZSkge1xuICAgICAgICB0aGlzLl9kYXRhW3JvdyAqIHRoaXMuY29scyArIGNvbF0gPSB2YWx1ZTtcbiAgICB9XG59XG5leHBvcnQgY2xhc3MgU3RhdGVNYWNoaW5lIHtcbiAgICBjb25zdHJ1Y3RvcihlZGdlcykge1xuICAgICAgICBsZXQgbWF4Q2hhckNvZGUgPSAwO1xuICAgICAgICBsZXQgbWF4U3RhdGUgPSAwIC8qIFN0YXRlLkludmFsaWQgKi87XG4gICAgICAgIGZvciAobGV0IGkgPSAwLCBsZW4gPSBlZGdlcy5sZW5ndGg7IGkgPCBsZW47IGkrKykge1xuICAgICAgICAgICAgY29uc3QgW2Zyb20sIGNoQ29kZSwgdG9dID0gZWRnZXNbaV07XG4gICAgICAgICAgICBpZiAoY2hDb2RlID4gbWF4Q2hhckNvZGUpIHtcbiAgICAgICAgICAgICAgICBtYXhDaGFyQ29kZSA9IGNoQ29kZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChmcm9tID4gbWF4U3RhdGUpIHtcbiAgICAgICAgICAgICAgICBtYXhTdGF0ZSA9IGZyb207XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAodG8gPiBtYXhTdGF0ZSkge1xuICAgICAgICAgICAgICAgIG1heFN0YXRlID0gdG87XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgbWF4Q2hhckNvZGUrKztcbiAgICAgICAgbWF4U3RhdGUrKztcbiAgICAgICAgY29uc3Qgc3RhdGVzID0gbmV3IFVpbnQ4TWF0cml4KG1heFN0YXRlLCBtYXhDaGFyQ29kZSwgMCAvKiBTdGF0ZS5JbnZhbGlkICovKTtcbiAgICAgICAgZm9yIChsZXQgaSA9IDAsIGxlbiA9IGVkZ2VzLmxlbmd0aDsgaSA8IGxlbjsgaSsrKSB7XG4gICAgICAgICAgICBjb25zdCBbZnJvbSwgY2hDb2RlLCB0b10gPSBlZGdlc1tpXTtcbiAgICAgICAgICAgIHN0YXRlcy5zZXQoZnJvbSwgY2hDb2RlLCB0byk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5fc3RhdGVzID0gc3RhdGVzO1xuICAgICAgICB0aGlzLl9tYXhDaGFyQ29kZSA9IG1heENoYXJDb2RlO1xuICAgIH1cbiAgICBuZXh0U3RhdGUoY3VycmVudFN0YXRlLCBjaENvZGUpIHtcbiAgICAgICAgaWYgKGNoQ29kZSA8IDAgfHwgY2hDb2RlID49IHRoaXMuX21heENoYXJDb2RlKSB7XG4gICAgICAgICAgICByZXR1cm4gMCAvKiBTdGF0ZS5JbnZhbGlkICovO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0aGlzLl9zdGF0ZXMuZ2V0KGN1cnJlbnRTdGF0ZSwgY2hDb2RlKTtcbiAgICB9XG59XG4vLyBTdGF0ZSBtYWNoaW5lIGZvciBodHRwOi8vIG9yIGh0dHBzOi8vIG9yIGZpbGU6Ly9cbmxldCBfc3RhdGVNYWNoaW5lID0gbnVsbDtcbmZ1bmN0aW9uIGdldFN0YXRlTWFjaGluZSgpIHtcbiAgICBpZiAoX3N0YXRlTWFjaGluZSA9PT0gbnVsbCkge1xuICAgICAgICBfc3RhdGVNYWNoaW5lID0gbmV3IFN0YXRlTWFjaGluZShbXG4gICAgICAgICAgICBbMSAvKiBTdGF0ZS5TdGFydCAqLywgMTA0IC8qIENoYXJDb2RlLmggKi8sIDIgLyogU3RhdGUuSCAqL10sXG4gICAgICAgICAgICBbMSAvKiBTdGF0ZS5TdGFydCAqLywgNzIgLyogQ2hhckNvZGUuSCAqLywgMiAvKiBTdGF0ZS5IICovXSxcbiAgICAgICAgICAgIFsxIC8qIFN0YXRlLlN0YXJ0ICovLCAxMDIgLyogQ2hhckNvZGUuZiAqLywgNiAvKiBTdGF0ZS5GICovXSxcbiAgICAgICAgICAgIFsxIC8qIFN0YXRlLlN0YXJ0ICovLCA3MCAvKiBDaGFyQ29kZS5GICovLCA2IC8qIFN0YXRlLkYgKi9dLFxuICAgICAgICAgICAgWzIgLyogU3RhdGUuSCAqLywgMTE2IC8qIENoYXJDb2RlLnQgKi8sIDMgLyogU3RhdGUuSFQgKi9dLFxuICAgICAgICAgICAgWzIgLyogU3RhdGUuSCAqLywgODQgLyogQ2hhckNvZGUuVCAqLywgMyAvKiBTdGF0ZS5IVCAqL10sXG4gICAgICAgICAgICBbMyAvKiBTdGF0ZS5IVCAqLywgMTE2IC8qIENoYXJDb2RlLnQgKi8sIDQgLyogU3RhdGUuSFRUICovXSxcbiAgICAgICAgICAgIFszIC8qIFN0YXRlLkhUICovLCA4NCAvKiBDaGFyQ29kZS5UICovLCA0IC8qIFN0YXRlLkhUVCAqL10sXG4gICAgICAgICAgICBbNCAvKiBTdGF0ZS5IVFQgKi8sIDExMiAvKiBDaGFyQ29kZS5wICovLCA1IC8qIFN0YXRlLkhUVFAgKi9dLFxuICAgICAgICAgICAgWzQgLyogU3RhdGUuSFRUICovLCA4MCAvKiBDaGFyQ29kZS5QICovLCA1IC8qIFN0YXRlLkhUVFAgKi9dLFxuICAgICAgICAgICAgWzUgLyogU3RhdGUuSFRUUCAqLywgMTE1IC8qIENoYXJDb2RlLnMgKi8sIDkgLyogU3RhdGUuQmVmb3JlQ29sb24gKi9dLFxuICAgICAgICAgICAgWzUgLyogU3RhdGUuSFRUUCAqLywgODMgLyogQ2hhckNvZGUuUyAqLywgOSAvKiBTdGF0ZS5CZWZvcmVDb2xvbiAqL10sXG4gICAgICAgICAgICBbNSAvKiBTdGF0ZS5IVFRQICovLCA1OCAvKiBDaGFyQ29kZS5Db2xvbiAqLywgMTAgLyogU3RhdGUuQWZ0ZXJDb2xvbiAqL10sXG4gICAgICAgICAgICBbNiAvKiBTdGF0ZS5GICovLCAxMDUgLyogQ2hhckNvZGUuaSAqLywgNyAvKiBTdGF0ZS5GSSAqL10sXG4gICAgICAgICAgICBbNiAvKiBTdGF0ZS5GICovLCA3MyAvKiBDaGFyQ29kZS5JICovLCA3IC8qIFN0YXRlLkZJICovXSxcbiAgICAgICAgICAgIFs3IC8qIFN0YXRlLkZJICovLCAxMDggLyogQ2hhckNvZGUubCAqLywgOCAvKiBTdGF0ZS5GSUwgKi9dLFxuICAgICAgICAgICAgWzcgLyogU3RhdGUuRkkgKi8sIDc2IC8qIENoYXJDb2RlLkwgKi8sIDggLyogU3RhdGUuRklMICovXSxcbiAgICAgICAgICAgIFs4IC8qIFN0YXRlLkZJTCAqLywgMTAxIC8qIENoYXJDb2RlLmUgKi8sIDkgLyogU3RhdGUuQmVmb3JlQ29sb24gKi9dLFxuICAgICAgICAgICAgWzggLyogU3RhdGUuRklMICovLCA2OSAvKiBDaGFyQ29kZS5FICovLCA5IC8qIFN0YXRlLkJlZm9yZUNvbG9uICovXSxcbiAgICAgICAgICAgIFs5IC8qIFN0YXRlLkJlZm9yZUNvbG9uICovLCA1OCAvKiBDaGFyQ29kZS5Db2xvbiAqLywgMTAgLyogU3RhdGUuQWZ0ZXJDb2xvbiAqL10sXG4gICAgICAgICAgICBbMTAgLyogU3RhdGUuQWZ0ZXJDb2xvbiAqLywgNDcgLyogQ2hhckNvZGUuU2xhc2ggKi8sIDExIC8qIFN0YXRlLkFsbW9zdFRoZXJlICovXSxcbiAgICAgICAgICAgIFsxMSAvKiBTdGF0ZS5BbG1vc3RUaGVyZSAqLywgNDcgLyogQ2hhckNvZGUuU2xhc2ggKi8sIDEyIC8qIFN0YXRlLkVuZCAqL10sXG4gICAgICAgIF0pO1xuICAgIH1cbiAgICByZXR1cm4gX3N0YXRlTWFjaGluZTtcbn1cbmxldCBfY2xhc3NpZmllciA9IG51bGw7XG5mdW5jdGlvbiBnZXRDbGFzc2lmaWVyKCkge1xuICAgIGlmIChfY2xhc3NpZmllciA9PT0gbnVsbCkge1xuICAgICAgICBfY2xhc3NpZmllciA9IG5ldyBDaGFyYWN0ZXJDbGFzc2lmaWVyKDAgLyogQ2hhcmFjdGVyQ2xhc3MuTm9uZSAqLyk7XG4gICAgICAgIC8vIGFsbG93LWFueS11bmljb2RlLW5leHQtbGluZVxuICAgICAgICBjb25zdCBGT1JDRV9URVJNSU5BVElPTl9DSEFSQUNURVJTID0gJyBcXHQ8PlxcJ1xcXCJcdTMwMDFcdTMwMDJcdUZGNjFcdUZGNjRcdUZGMENcdUZGMEVcdUZGMUFcdUZGMUJcdTIwMThcdTMwMDhcdTMwMENcdTMwMEVcdTMwMTRcdUZGMDhcdUZGM0JcdUZGNUJcdUZGNjJcdUZGNjNcdUZGNURcdUZGM0RcdUZGMDlcdTMwMTVcdTMwMEZcdTMwMERcdTMwMDlcdTIwMTlcdUZGNDBcdUZGNUVcdTIwMjYnO1xuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IEZPUkNFX1RFUk1JTkFUSU9OX0NIQVJBQ1RFUlMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIF9jbGFzc2lmaWVyLnNldChGT1JDRV9URVJNSU5BVElPTl9DSEFSQUNURVJTLmNoYXJDb2RlQXQoaSksIDEgLyogQ2hhcmFjdGVyQ2xhc3MuRm9yY2VUZXJtaW5hdGlvbiAqLyk7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgQ0FOTk9UX0VORF9XSVRIX0NIQVJBQ1RFUlMgPSAnLiw7Oic7XG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgQ0FOTk9UX0VORF9XSVRIX0NIQVJBQ1RFUlMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIF9jbGFzc2lmaWVyLnNldChDQU5OT1RfRU5EX1dJVEhfQ0hBUkFDVEVSUy5jaGFyQ29kZUF0KGkpLCAyIC8qIENoYXJhY3RlckNsYXNzLkNhbm5vdEVuZEluICovKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gX2NsYXNzaWZpZXI7XG59XG5leHBvcnQgY2xhc3MgTGlua0NvbXB1dGVyIHtcbiAgICBzdGF0aWMgX2NyZWF0ZUxpbmsoY2xhc3NpZmllciwgbGluZSwgbGluZU51bWJlciwgbGlua0JlZ2luSW5kZXgsIGxpbmtFbmRJbmRleCkge1xuICAgICAgICAvLyBEbyBub3QgYWxsb3cgdG8gZW5kIGxpbmsgaW4gY2VydGFpbiBjaGFyYWN0ZXJzLi4uXG4gICAgICAgIGxldCBsYXN0SW5jbHVkZWRDaGFySW5kZXggPSBsaW5rRW5kSW5kZXggLSAxO1xuICAgICAgICBkbyB7XG4gICAgICAgICAgICBjb25zdCBjaENvZGUgPSBsaW5lLmNoYXJDb2RlQXQobGFzdEluY2x1ZGVkQ2hhckluZGV4KTtcbiAgICAgICAgICAgIGNvbnN0IGNoQ2xhc3MgPSBjbGFzc2lmaWVyLmdldChjaENvZGUpO1xuICAgICAgICAgICAgaWYgKGNoQ2xhc3MgIT09IDIgLyogQ2hhcmFjdGVyQ2xhc3MuQ2Fubm90RW5kSW4gKi8pIHtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGxhc3RJbmNsdWRlZENoYXJJbmRleC0tO1xuICAgICAgICB9IHdoaWxlIChsYXN0SW5jbHVkZWRDaGFySW5kZXggPiBsaW5rQmVnaW5JbmRleCk7XG4gICAgICAgIC8vIEhhbmRsZSBsaW5rcyBlbmNsb3NlZCBpbiBwYXJlbnMsIHNxdWFyZSBicmFja2V0cyBhbmQgY3VybHlzLlxuICAgICAgICBpZiAobGlua0JlZ2luSW5kZXggPiAwKSB7XG4gICAgICAgICAgICBjb25zdCBjaGFyQ29kZUJlZm9yZUxpbmsgPSBsaW5lLmNoYXJDb2RlQXQobGlua0JlZ2luSW5kZXggLSAxKTtcbiAgICAgICAgICAgIGNvbnN0IGxhc3RDaGFyQ29kZUluTGluayA9IGxpbmUuY2hhckNvZGVBdChsYXN0SW5jbHVkZWRDaGFySW5kZXgpO1xuICAgICAgICAgICAgaWYgKChjaGFyQ29kZUJlZm9yZUxpbmsgPT09IDQwIC8qIENoYXJDb2RlLk9wZW5QYXJlbiAqLyAmJiBsYXN0Q2hhckNvZGVJbkxpbmsgPT09IDQxIC8qIENoYXJDb2RlLkNsb3NlUGFyZW4gKi8pXG4gICAgICAgICAgICAgICAgfHwgKGNoYXJDb2RlQmVmb3JlTGluayA9PT0gOTEgLyogQ2hhckNvZGUuT3BlblNxdWFyZUJyYWNrZXQgKi8gJiYgbGFzdENoYXJDb2RlSW5MaW5rID09PSA5MyAvKiBDaGFyQ29kZS5DbG9zZVNxdWFyZUJyYWNrZXQgKi8pXG4gICAgICAgICAgICAgICAgfHwgKGNoYXJDb2RlQmVmb3JlTGluayA9PT0gMTIzIC8qIENoYXJDb2RlLk9wZW5DdXJseUJyYWNlICovICYmIGxhc3RDaGFyQ29kZUluTGluayA9PT0gMTI1IC8qIENoYXJDb2RlLkNsb3NlQ3VybHlCcmFjZSAqLykpIHtcbiAgICAgICAgICAgICAgICAvLyBEbyBub3QgZW5kIGluICkgaWYgKCBpcyBiZWZvcmUgdGhlIGxpbmsgc3RhcnRcbiAgICAgICAgICAgICAgICAvLyBEbyBub3QgZW5kIGluIF0gaWYgWyBpcyBiZWZvcmUgdGhlIGxpbmsgc3RhcnRcbiAgICAgICAgICAgICAgICAvLyBEbyBub3QgZW5kIGluIH0gaWYgeyBpcyBiZWZvcmUgdGhlIGxpbmsgc3RhcnRcbiAgICAgICAgICAgICAgICBsYXN0SW5jbHVkZWRDaGFySW5kZXgtLTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgcmFuZ2U6IHtcbiAgICAgICAgICAgICAgICBzdGFydExpbmVOdW1iZXI6IGxpbmVOdW1iZXIsXG4gICAgICAgICAgICAgICAgc3RhcnRDb2x1bW46IGxpbmtCZWdpbkluZGV4ICsgMSxcbiAgICAgICAgICAgICAgICBlbmRMaW5lTnVtYmVyOiBsaW5lTnVtYmVyLFxuICAgICAgICAgICAgICAgIGVuZENvbHVtbjogbGFzdEluY2x1ZGVkQ2hhckluZGV4ICsgMlxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHVybDogbGluZS5zdWJzdHJpbmcobGlua0JlZ2luSW5kZXgsIGxhc3RJbmNsdWRlZENoYXJJbmRleCArIDEpXG4gICAgICAgIH07XG4gICAgfVxuICAgIHN0YXRpYyBjb21wdXRlTGlua3MobW9kZWwsIHN0YXRlTWFjaGluZSA9IGdldFN0YXRlTWFjaGluZSgpKSB7XG4gICAgICAgIGNvbnN0IGNsYXNzaWZpZXIgPSBnZXRDbGFzc2lmaWVyKCk7XG4gICAgICAgIGNvbnN0IHJlc3VsdCA9IFtdO1xuICAgICAgICBmb3IgKGxldCBpID0gMSwgbGluZUNvdW50ID0gbW9kZWwuZ2V0TGluZUNvdW50KCk7IGkgPD0gbGluZUNvdW50OyBpKyspIHtcbiAgICAgICAgICAgIGNvbnN0IGxpbmUgPSBtb2RlbC5nZXRMaW5lQ29udGVudChpKTtcbiAgICAgICAgICAgIGNvbnN0IGxlbiA9IGxpbmUubGVuZ3RoO1xuICAgICAgICAgICAgbGV0IGogPSAwO1xuICAgICAgICAgICAgbGV0IGxpbmtCZWdpbkluZGV4ID0gMDtcbiAgICAgICAgICAgIGxldCBsaW5rQmVnaW5DaENvZGUgPSAwO1xuICAgICAgICAgICAgbGV0IHN0YXRlID0gMSAvKiBTdGF0ZS5TdGFydCAqLztcbiAgICAgICAgICAgIGxldCBoYXNPcGVuUGFyZW5zID0gZmFsc2U7XG4gICAgICAgICAgICBsZXQgaGFzT3BlblNxdWFyZUJyYWNrZXQgPSBmYWxzZTtcbiAgICAgICAgICAgIGxldCBpblNxdWFyZUJyYWNrZXRzID0gZmFsc2U7XG4gICAgICAgICAgICBsZXQgaGFzT3BlbkN1cmx5QnJhY2tldCA9IGZhbHNlO1xuICAgICAgICAgICAgd2hpbGUgKGogPCBsZW4pIHtcbiAgICAgICAgICAgICAgICBsZXQgcmVzZXRTdGF0ZU1hY2hpbmUgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICBjb25zdCBjaENvZGUgPSBsaW5lLmNoYXJDb2RlQXQoaik7XG4gICAgICAgICAgICAgICAgaWYgKHN0YXRlID09PSAxMyAvKiBTdGF0ZS5BY2NlcHQgKi8pIHtcbiAgICAgICAgICAgICAgICAgICAgbGV0IGNoQ2xhc3M7XG4gICAgICAgICAgICAgICAgICAgIHN3aXRjaCAoY2hDb2RlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjYXNlIDQwIC8qIENoYXJDb2RlLk9wZW5QYXJlbiAqLzpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBoYXNPcGVuUGFyZW5zID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjaENsYXNzID0gMCAvKiBDaGFyYWN0ZXJDbGFzcy5Ob25lICovO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSA0MSAvKiBDaGFyQ29kZS5DbG9zZVBhcmVuICovOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNoQ2xhc3MgPSAoaGFzT3BlblBhcmVucyA/IDAgLyogQ2hhcmFjdGVyQ2xhc3MuTm9uZSAqLyA6IDEgLyogQ2hhcmFjdGVyQ2xhc3MuRm9yY2VUZXJtaW5hdGlvbiAqLyk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgICAgICBjYXNlIDkxIC8qIENoYXJDb2RlLk9wZW5TcXVhcmVCcmFja2V0ICovOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGluU3F1YXJlQnJhY2tldHMgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGhhc09wZW5TcXVhcmVCcmFja2V0ID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjaENsYXNzID0gMCAvKiBDaGFyYWN0ZXJDbGFzcy5Ob25lICovO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSA5MyAvKiBDaGFyQ29kZS5DbG9zZVNxdWFyZUJyYWNrZXQgKi86XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaW5TcXVhcmVCcmFja2V0cyA9IGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNoQ2xhc3MgPSAoaGFzT3BlblNxdWFyZUJyYWNrZXQgPyAwIC8qIENoYXJhY3RlckNsYXNzLk5vbmUgKi8gOiAxIC8qIENoYXJhY3RlckNsYXNzLkZvcmNlVGVybWluYXRpb24gKi8pO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAxMjMgLyogQ2hhckNvZGUuT3BlbkN1cmx5QnJhY2UgKi86XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaGFzT3BlbkN1cmx5QnJhY2tldCA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2hDbGFzcyA9IDAgLyogQ2hhcmFjdGVyQ2xhc3MuTm9uZSAqLztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgMTI1IC8qIENoYXJDb2RlLkNsb3NlQ3VybHlCcmFjZSAqLzpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjaENsYXNzID0gKGhhc09wZW5DdXJseUJyYWNrZXQgPyAwIC8qIENoYXJhY3RlckNsYXNzLk5vbmUgKi8gOiAxIC8qIENoYXJhY3RlckNsYXNzLkZvcmNlVGVybWluYXRpb24gKi8pO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICAgICAgLy8gVGhlIGZvbGxvd2luZyB0aHJlZSBydWxlcyBtYWtlIGl0IHRoYXQgJyBvciBcIiBvciBgIGFyZSBhbGxvd2VkIGluc2lkZSBsaW5rc1xuICAgICAgICAgICAgICAgICAgICAgICAgLy8gb25seSBpZiB0aGUgbGluayBpcyB3cmFwcGVkIGJ5IHNvbWUgb3RoZXIgcXVvdGUgY2hhcmFjdGVyXG4gICAgICAgICAgICAgICAgICAgICAgICBjYXNlIDM5IC8qIENoYXJDb2RlLlNpbmdsZVF1b3RlICovOlxuICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAzNCAvKiBDaGFyQ29kZS5Eb3VibGVRdW90ZSAqLzpcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgOTYgLyogQ2hhckNvZGUuQmFja1RpY2sgKi86XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGxpbmtCZWdpbkNoQ29kZSA9PT0gY2hDb2RlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNoQ2xhc3MgPSAxIC8qIENoYXJhY3RlckNsYXNzLkZvcmNlVGVybWluYXRpb24gKi87XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVsc2UgaWYgKGxpbmtCZWdpbkNoQ29kZSA9PT0gMzkgLyogQ2hhckNvZGUuU2luZ2xlUXVvdGUgKi8gfHwgbGlua0JlZ2luQ2hDb2RlID09PSAzNCAvKiBDaGFyQ29kZS5Eb3VibGVRdW90ZSAqLyB8fCBsaW5rQmVnaW5DaENvZGUgPT09IDk2IC8qIENoYXJDb2RlLkJhY2tUaWNrICovKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNoQ2xhc3MgPSAwIC8qIENoYXJhY3RlckNsYXNzLk5vbmUgKi87XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjaENsYXNzID0gMSAvKiBDaGFyYWN0ZXJDbGFzcy5Gb3JjZVRlcm1pbmF0aW9uICovO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgNDIgLyogQ2hhckNvZGUuQXN0ZXJpc2sgKi86XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gYCpgIHRlcm1pbmF0ZXMgYSBsaW5rIGlmIHRoZSBsaW5rIGJlZ2FuIHdpdGggYCpgXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2hDbGFzcyA9IChsaW5rQmVnaW5DaENvZGUgPT09IDQyIC8qIENoYXJDb2RlLkFzdGVyaXNrICovKSA/IDEgLyogQ2hhcmFjdGVyQ2xhc3MuRm9yY2VUZXJtaW5hdGlvbiAqLyA6IDAgLyogQ2hhcmFjdGVyQ2xhc3MuTm9uZSAqLztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgMTI0IC8qIENoYXJDb2RlLlBpcGUgKi86XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gYHxgIHRlcm1pbmF0ZXMgYSBsaW5rIGlmIHRoZSBsaW5rIGJlZ2FuIHdpdGggYHxgXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2hDbGFzcyA9IChsaW5rQmVnaW5DaENvZGUgPT09IDEyNCAvKiBDaGFyQ29kZS5QaXBlICovKSA/IDEgLyogQ2hhcmFjdGVyQ2xhc3MuRm9yY2VUZXJtaW5hdGlvbiAqLyA6IDAgLyogQ2hhcmFjdGVyQ2xhc3MuTm9uZSAqLztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgMzIgLyogQ2hhckNvZGUuU3BhY2UgKi86XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gYCBgIGFsbG93IHNwYWNlIGluIGJldHdlZW4gWyBhbmQgXVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNoQ2xhc3MgPSAoaW5TcXVhcmVCcmFja2V0cyA/IDAgLyogQ2hhcmFjdGVyQ2xhc3MuTm9uZSAqLyA6IDEgLyogQ2hhcmFjdGVyQ2xhc3MuRm9yY2VUZXJtaW5hdGlvbiAqLyk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNoQ2xhc3MgPSBjbGFzc2lmaWVyLmdldChjaENvZGUpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIC8vIENoZWNrIGlmIGNoYXJhY3RlciB0ZXJtaW5hdGVzIGxpbmtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGNoQ2xhc3MgPT09IDEgLyogQ2hhcmFjdGVyQ2xhc3MuRm9yY2VUZXJtaW5hdGlvbiAqLykge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmVzdWx0LnB1c2goTGlua0NvbXB1dGVyLl9jcmVhdGVMaW5rKGNsYXNzaWZpZXIsIGxpbmUsIGksIGxpbmtCZWdpbkluZGV4LCBqKSk7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXNldFN0YXRlTWFjaGluZSA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSBpZiAoc3RhdGUgPT09IDEyIC8qIFN0YXRlLkVuZCAqLykge1xuICAgICAgICAgICAgICAgICAgICBsZXQgY2hDbGFzcztcbiAgICAgICAgICAgICAgICAgICAgaWYgKGNoQ29kZSA9PT0gOTEgLyogQ2hhckNvZGUuT3BlblNxdWFyZUJyYWNrZXQgKi8pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIEFsbG93IGZvciB0aGUgYXV0aG9yaXR5IHBhcnQgdG8gY29udGFpbiBpcHY2IGFkZHJlc3NlcyB3aGljaCBjb250YWluIFsgYW5kIF1cbiAgICAgICAgICAgICAgICAgICAgICAgIGhhc09wZW5TcXVhcmVCcmFja2V0ID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNoQ2xhc3MgPSAwIC8qIENoYXJhY3RlckNsYXNzLk5vbmUgKi87XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjaENsYXNzID0gY2xhc3NpZmllci5nZXQoY2hDb2RlKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAvLyBDaGVjayBpZiBjaGFyYWN0ZXIgdGVybWluYXRlcyBsaW5rXG4gICAgICAgICAgICAgICAgICAgIGlmIChjaENsYXNzID09PSAxIC8qIENoYXJhY3RlckNsYXNzLkZvcmNlVGVybWluYXRpb24gKi8pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlc2V0U3RhdGVNYWNoaW5lID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHN0YXRlID0gMTMgLyogU3RhdGUuQWNjZXB0ICovO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBzdGF0ZSA9IHN0YXRlTWFjaGluZS5uZXh0U3RhdGUoc3RhdGUsIGNoQ29kZSk7XG4gICAgICAgICAgICAgICAgICAgIGlmIChzdGF0ZSA9PT0gMCAvKiBTdGF0ZS5JbnZhbGlkICovKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXNldFN0YXRlTWFjaGluZSA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKHJlc2V0U3RhdGVNYWNoaW5lKSB7XG4gICAgICAgICAgICAgICAgICAgIHN0YXRlID0gMSAvKiBTdGF0ZS5TdGFydCAqLztcbiAgICAgICAgICAgICAgICAgICAgaGFzT3BlblBhcmVucyA9IGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICBoYXNPcGVuU3F1YXJlQnJhY2tldCA9IGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICBoYXNPcGVuQ3VybHlCcmFja2V0ID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgICAgIC8vIFJlY29yZCB3aGVyZSB0aGUgbGluayBzdGFydGVkXG4gICAgICAgICAgICAgICAgICAgIGxpbmtCZWdpbkluZGV4ID0gaiArIDE7XG4gICAgICAgICAgICAgICAgICAgIGxpbmtCZWdpbkNoQ29kZSA9IGNoQ29kZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaisrO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKHN0YXRlID09PSAxMyAvKiBTdGF0ZS5BY2NlcHQgKi8pIHtcbiAgICAgICAgICAgICAgICByZXN1bHQucHVzaChMaW5rQ29tcHV0ZXIuX2NyZWF0ZUxpbmsoY2xhc3NpZmllciwgbGluZSwgaSwgbGlua0JlZ2luSW5kZXgsIGxlbikpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxufVxuLyoqXG4gKiBSZXR1cm5zIGFuIGFycmF5IG9mIGFsbCBsaW5rcyBjb250YWlucyBpbiB0aGUgcHJvdmlkZWRcbiAqIGRvY3VtZW50LiAqTm90ZSogdGhhdCB0aGlzIG9wZXJhdGlvbiBpcyBjb21wdXRhdGlvbmFsXG4gKiBleHBlbnNpdmUgYW5kIHNob3VsZCBub3QgcnVuIGluIHRoZSBVSSB0aHJlYWQuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBjb21wdXRlTGlua3MobW9kZWwpIHtcbiAgICBpZiAoIW1vZGVsIHx8IHR5cGVvZiBtb2RlbC5nZXRMaW5lQ291bnQgIT09ICdmdW5jdGlvbicgfHwgdHlwZW9mIG1vZGVsLmdldExpbmVDb250ZW50ICE9PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIC8vIFVua25vd24gY2FsbGVyIVxuICAgICAgICByZXR1cm4gW107XG4gICAgfVxuICAgIHJldHVybiBMaW5rQ29tcHV0ZXIuY29tcHV0ZUxpbmtzKG1vZGVsKTtcbn1cbiIsICIvKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICogIENvcHlyaWdodCAoYykgTWljcm9zb2Z0IENvcnBvcmF0aW9uLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICogIExpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgTGljZW5zZS4gU2VlIExpY2Vuc2UudHh0IGluIHRoZSBwcm9qZWN0IHJvb3QgZm9yIGxpY2Vuc2UgaW5mb3JtYXRpb24uXG4gKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKi9cbmV4cG9ydCBjbGFzcyBCYXNpY0lucGxhY2VSZXBsYWNlIHtcbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgdGhpcy5fZGVmYXVsdFZhbHVlU2V0ID0gW1xuICAgICAgICAgICAgWyd0cnVlJywgJ2ZhbHNlJ10sXG4gICAgICAgICAgICBbJ1RydWUnLCAnRmFsc2UnXSxcbiAgICAgICAgICAgIFsnUHJpdmF0ZScsICdQdWJsaWMnLCAnRnJpZW5kJywgJ1JlYWRPbmx5JywgJ1BhcnRpYWwnLCAnUHJvdGVjdGVkJywgJ1dyaXRlT25seSddLFxuICAgICAgICAgICAgWydwdWJsaWMnLCAncHJvdGVjdGVkJywgJ3ByaXZhdGUnXSxcbiAgICAgICAgXTtcbiAgICB9XG4gICAgbmF2aWdhdGVWYWx1ZVNldChyYW5nZTEsIHRleHQxLCByYW5nZTIsIHRleHQyLCB1cCkge1xuICAgICAgICBpZiAocmFuZ2UxICYmIHRleHQxKSB7XG4gICAgICAgICAgICBjb25zdCByZXN1bHQgPSB0aGlzLmRvTmF2aWdhdGVWYWx1ZVNldCh0ZXh0MSwgdXApO1xuICAgICAgICAgICAgaWYgKHJlc3VsdCkge1xuICAgICAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgICAgIHJhbmdlOiByYW5nZTEsXG4gICAgICAgICAgICAgICAgICAgIHZhbHVlOiByZXN1bHRcbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGlmIChyYW5nZTIgJiYgdGV4dDIpIHtcbiAgICAgICAgICAgIGNvbnN0IHJlc3VsdCA9IHRoaXMuZG9OYXZpZ2F0ZVZhbHVlU2V0KHRleHQyLCB1cCk7XG4gICAgICAgICAgICBpZiAocmVzdWx0KSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICAgICAgcmFuZ2U6IHJhbmdlMixcbiAgICAgICAgICAgICAgICAgICAgdmFsdWU6IHJlc3VsdFxuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuICAgIGRvTmF2aWdhdGVWYWx1ZVNldCh0ZXh0LCB1cCkge1xuICAgICAgICBjb25zdCBudW1iZXJSZXN1bHQgPSB0aGlzLm51bWJlclJlcGxhY2UodGV4dCwgdXApO1xuICAgICAgICBpZiAobnVtYmVyUmVzdWx0ICE9PSBudWxsKSB7XG4gICAgICAgICAgICByZXR1cm4gbnVtYmVyUmVzdWx0O1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0aGlzLnRleHRSZXBsYWNlKHRleHQsIHVwKTtcbiAgICB9XG4gICAgbnVtYmVyUmVwbGFjZSh2YWx1ZSwgdXApIHtcbiAgICAgICAgY29uc3QgcHJlY2lzaW9uID0gTWF0aC5wb3coMTAsIHZhbHVlLmxlbmd0aCAtICh2YWx1ZS5sYXN0SW5kZXhPZignLicpICsgMSkpO1xuICAgICAgICBsZXQgbjEgPSBOdW1iZXIodmFsdWUpO1xuICAgICAgICBjb25zdCBuMiA9IHBhcnNlRmxvYXQodmFsdWUpO1xuICAgICAgICBpZiAoIWlzTmFOKG4xKSAmJiAhaXNOYU4objIpICYmIG4xID09PSBuMikge1xuICAgICAgICAgICAgaWYgKG4xID09PSAwICYmICF1cCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBudWxsOyAvLyBkb24ndCBkbyBuZWdhdGl2ZVxuICAgICAgICAgICAgICAgIC8vXHRcdFx0fSBlbHNlIGlmKG4xID09PSA5ICYmIHVwKSB7XG4gICAgICAgICAgICAgICAgLy9cdFx0XHRcdHJldHVybiBudWxsOyAvLyBkb24ndCBpbnNlcnQgMTAgaW50byBhIG51bWJlclxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgbjEgPSBNYXRoLmZsb29yKG4xICogcHJlY2lzaW9uKTtcbiAgICAgICAgICAgICAgICBuMSArPSB1cCA/IHByZWNpc2lvbiA6IC1wcmVjaXNpb247XG4gICAgICAgICAgICAgICAgcmV0dXJuIFN0cmluZyhuMSAvIHByZWNpc2lvbik7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuICAgIHRleHRSZXBsYWNlKHZhbHVlLCB1cCkge1xuICAgICAgICByZXR1cm4gdGhpcy52YWx1ZVNldHNSZXBsYWNlKHRoaXMuX2RlZmF1bHRWYWx1ZVNldCwgdmFsdWUsIHVwKTtcbiAgICB9XG4gICAgdmFsdWVTZXRzUmVwbGFjZSh2YWx1ZVNldHMsIHZhbHVlLCB1cCkge1xuICAgICAgICBsZXQgcmVzdWx0ID0gbnVsbDtcbiAgICAgICAgZm9yIChsZXQgaSA9IDAsIGxlbiA9IHZhbHVlU2V0cy5sZW5ndGg7IHJlc3VsdCA9PT0gbnVsbCAmJiBpIDwgbGVuOyBpKyspIHtcbiAgICAgICAgICAgIHJlc3VsdCA9IHRoaXMudmFsdWVTZXRSZXBsYWNlKHZhbHVlU2V0c1tpXSwgdmFsdWUsIHVwKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cbiAgICB2YWx1ZVNldFJlcGxhY2UodmFsdWVTZXQsIHZhbHVlLCB1cCkge1xuICAgICAgICBsZXQgaWR4ID0gdmFsdWVTZXQuaW5kZXhPZih2YWx1ZSk7XG4gICAgICAgIGlmIChpZHggPj0gMCkge1xuICAgICAgICAgICAgaWR4ICs9IHVwID8gKzEgOiAtMTtcbiAgICAgICAgICAgIGlmIChpZHggPCAwKSB7XG4gICAgICAgICAgICAgICAgaWR4ID0gdmFsdWVTZXQubGVuZ3RoIC0gMTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIGlkeCAlPSB2YWx1ZVNldC5sZW5ndGg7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gdmFsdWVTZXRbaWR4XTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG59XG5CYXNpY0lucGxhY2VSZXBsYWNlLklOU1RBTkNFID0gbmV3IEJhc2ljSW5wbGFjZVJlcGxhY2UoKTtcbiIsICIvKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICogIENvcHlyaWdodCAoYykgTWljcm9zb2Z0IENvcnBvcmF0aW9uLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICogIExpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgTGljZW5zZS4gU2VlIExpY2Vuc2UudHh0IGluIHRoZSBwcm9qZWN0IHJvb3QgZm9yIGxpY2Vuc2UgaW5mb3JtYXRpb24uXG4gKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKi9cbmltcG9ydCB7IEVtaXR0ZXIsIEV2ZW50IH0gZnJvbSAnLi9ldmVudC5qcyc7XG5jb25zdCBzaG9ydGN1dEV2ZW50ID0gT2JqZWN0LmZyZWV6ZShmdW5jdGlvbiAoY2FsbGJhY2ssIGNvbnRleHQpIHtcbiAgICBjb25zdCBoYW5kbGUgPSBzZXRUaW1lb3V0KGNhbGxiYWNrLmJpbmQoY29udGV4dCksIDApO1xuICAgIHJldHVybiB7IGRpc3Bvc2UoKSB7IGNsZWFyVGltZW91dChoYW5kbGUpOyB9IH07XG59KTtcbmV4cG9ydCB2YXIgQ2FuY2VsbGF0aW9uVG9rZW47XG4oZnVuY3Rpb24gKENhbmNlbGxhdGlvblRva2VuKSB7XG4gICAgZnVuY3Rpb24gaXNDYW5jZWxsYXRpb25Ub2tlbih0aGluZykge1xuICAgICAgICBpZiAodGhpbmcgPT09IENhbmNlbGxhdGlvblRva2VuLk5vbmUgfHwgdGhpbmcgPT09IENhbmNlbGxhdGlvblRva2VuLkNhbmNlbGxlZCkge1xuICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHRoaW5nIGluc3RhbmNlb2YgTXV0YWJsZVRva2VuKSB7XG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoIXRoaW5nIHx8IHR5cGVvZiB0aGluZyAhPT0gJ29iamVjdCcpIHtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdHlwZW9mIHRoaW5nLmlzQ2FuY2VsbGF0aW9uUmVxdWVzdGVkID09PSAnYm9vbGVhbidcbiAgICAgICAgICAgICYmIHR5cGVvZiB0aGluZy5vbkNhbmNlbGxhdGlvblJlcXVlc3RlZCA9PT0gJ2Z1bmN0aW9uJztcbiAgICB9XG4gICAgQ2FuY2VsbGF0aW9uVG9rZW4uaXNDYW5jZWxsYXRpb25Ub2tlbiA9IGlzQ2FuY2VsbGF0aW9uVG9rZW47XG4gICAgQ2FuY2VsbGF0aW9uVG9rZW4uTm9uZSA9IE9iamVjdC5mcmVlemUoe1xuICAgICAgICBpc0NhbmNlbGxhdGlvblJlcXVlc3RlZDogZmFsc2UsXG4gICAgICAgIG9uQ2FuY2VsbGF0aW9uUmVxdWVzdGVkOiBFdmVudC5Ob25lXG4gICAgfSk7XG4gICAgQ2FuY2VsbGF0aW9uVG9rZW4uQ2FuY2VsbGVkID0gT2JqZWN0LmZyZWV6ZSh7XG4gICAgICAgIGlzQ2FuY2VsbGF0aW9uUmVxdWVzdGVkOiB0cnVlLFxuICAgICAgICBvbkNhbmNlbGxhdGlvblJlcXVlc3RlZDogc2hvcnRjdXRFdmVudFxuICAgIH0pO1xufSkoQ2FuY2VsbGF0aW9uVG9rZW4gfHwgKENhbmNlbGxhdGlvblRva2VuID0ge30pKTtcbmNsYXNzIE11dGFibGVUb2tlbiB7XG4gICAgY29uc3RydWN0b3IoKSB7XG4gICAgICAgIHRoaXMuX2lzQ2FuY2VsbGVkID0gZmFsc2U7XG4gICAgICAgIHRoaXMuX2VtaXR0ZXIgPSBudWxsO1xuICAgIH1cbiAgICBjYW5jZWwoKSB7XG4gICAgICAgIGlmICghdGhpcy5faXNDYW5jZWxsZWQpIHtcbiAgICAgICAgICAgIHRoaXMuX2lzQ2FuY2VsbGVkID0gdHJ1ZTtcbiAgICAgICAgICAgIGlmICh0aGlzLl9lbWl0dGVyKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5fZW1pdHRlci5maXJlKHVuZGVmaW5lZCk7XG4gICAgICAgICAgICAgICAgdGhpcy5kaXNwb3NlKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG4gICAgZ2V0IGlzQ2FuY2VsbGF0aW9uUmVxdWVzdGVkKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5faXNDYW5jZWxsZWQ7XG4gICAgfVxuICAgIGdldCBvbkNhbmNlbGxhdGlvblJlcXVlc3RlZCgpIHtcbiAgICAgICAgaWYgKHRoaXMuX2lzQ2FuY2VsbGVkKSB7XG4gICAgICAgICAgICByZXR1cm4gc2hvcnRjdXRFdmVudDtcbiAgICAgICAgfVxuICAgICAgICBpZiAoIXRoaXMuX2VtaXR0ZXIpIHtcbiAgICAgICAgICAgIHRoaXMuX2VtaXR0ZXIgPSBuZXcgRW1pdHRlcigpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0aGlzLl9lbWl0dGVyLmV2ZW50O1xuICAgIH1cbiAgICBkaXNwb3NlKCkge1xuICAgICAgICBpZiAodGhpcy5fZW1pdHRlcikge1xuICAgICAgICAgICAgdGhpcy5fZW1pdHRlci5kaXNwb3NlKCk7XG4gICAgICAgICAgICB0aGlzLl9lbWl0dGVyID0gbnVsbDtcbiAgICAgICAgfVxuICAgIH1cbn1cbmV4cG9ydCBjbGFzcyBDYW5jZWxsYXRpb25Ub2tlblNvdXJjZSB7XG4gICAgY29uc3RydWN0b3IocGFyZW50KSB7XG4gICAgICAgIHRoaXMuX3Rva2VuID0gdW5kZWZpbmVkO1xuICAgICAgICB0aGlzLl9wYXJlbnRMaXN0ZW5lciA9IHVuZGVmaW5lZDtcbiAgICAgICAgdGhpcy5fcGFyZW50TGlzdGVuZXIgPSBwYXJlbnQgJiYgcGFyZW50Lm9uQ2FuY2VsbGF0aW9uUmVxdWVzdGVkKHRoaXMuY2FuY2VsLCB0aGlzKTtcbiAgICB9XG4gICAgZ2V0IHRva2VuKCkge1xuICAgICAgICBpZiAoIXRoaXMuX3Rva2VuKSB7XG4gICAgICAgICAgICAvLyBiZSBsYXp5IGFuZCBjcmVhdGUgdGhlIHRva2VuIG9ubHkgd2hlblxuICAgICAgICAgICAgLy8gYWN0dWFsbHkgbmVlZGVkXG4gICAgICAgICAgICB0aGlzLl90b2tlbiA9IG5ldyBNdXRhYmxlVG9rZW4oKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdGhpcy5fdG9rZW47XG4gICAgfVxuICAgIGNhbmNlbCgpIHtcbiAgICAgICAgaWYgKCF0aGlzLl90b2tlbikge1xuICAgICAgICAgICAgLy8gc2F2ZSBhbiBvYmplY3QgYnkgcmV0dXJuaW5nIHRoZSBkZWZhdWx0XG4gICAgICAgICAgICAvLyBjYW5jZWxsZWQgdG9rZW4gd2hlbiBjYW5jZWxsYXRpb24gaGFwcGVuc1xuICAgICAgICAgICAgLy8gYmVmb3JlIHNvbWVvbmUgYXNrcyBmb3IgdGhlIHRva2VuXG4gICAgICAgICAgICB0aGlzLl90b2tlbiA9IENhbmNlbGxhdGlvblRva2VuLkNhbmNlbGxlZDtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmICh0aGlzLl90b2tlbiBpbnN0YW5jZW9mIE11dGFibGVUb2tlbikge1xuICAgICAgICAgICAgLy8gYWN0dWFsbHkgY2FuY2VsXG4gICAgICAgICAgICB0aGlzLl90b2tlbi5jYW5jZWwoKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBkaXNwb3NlKGNhbmNlbCA9IGZhbHNlKSB7XG4gICAgICAgIHZhciBfYTtcbiAgICAgICAgaWYgKGNhbmNlbCkge1xuICAgICAgICAgICAgdGhpcy5jYW5jZWwoKTtcbiAgICAgICAgfVxuICAgICAgICAoX2EgPSB0aGlzLl9wYXJlbnRMaXN0ZW5lcikgPT09IG51bGwgfHwgX2EgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9hLmRpc3Bvc2UoKTtcbiAgICAgICAgaWYgKCF0aGlzLl90b2tlbikge1xuICAgICAgICAgICAgLy8gZW5zdXJlIHRvIGluaXRpYWxpemUgd2l0aCBhbiBlbXB0eSB0b2tlbiBpZiB3ZSBoYWQgbm9uZVxuICAgICAgICAgICAgdGhpcy5fdG9rZW4gPSBDYW5jZWxsYXRpb25Ub2tlbi5Ob25lO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKHRoaXMuX3Rva2VuIGluc3RhbmNlb2YgTXV0YWJsZVRva2VuKSB7XG4gICAgICAgICAgICAvLyBhY3R1YWxseSBkaXNwb3NlXG4gICAgICAgICAgICB0aGlzLl90b2tlbi5kaXNwb3NlKCk7XG4gICAgICAgIH1cbiAgICB9XG59XG5leHBvcnQgZnVuY3Rpb24gY2FuY2VsT25EaXNwb3NlKHN0b3JlKSB7XG4gICAgY29uc3Qgc291cmNlID0gbmV3IENhbmNlbGxhdGlvblRva2VuU291cmNlKCk7XG4gICAgc3RvcmUuYWRkKHsgZGlzcG9zZSgpIHsgc291cmNlLmNhbmNlbCgpOyB9IH0pO1xuICAgIHJldHVybiBzb3VyY2UudG9rZW47XG59XG4iLCAiLyotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAqICBDb3B5cmlnaHQgKGMpIE1pY3Jvc29mdCBDb3Jwb3JhdGlvbi4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqICBMaWNlbnNlZCB1bmRlciB0aGUgTUlUIExpY2Vuc2UuIFNlZSBMaWNlbnNlLnR4dCBpbiB0aGUgcHJvamVjdCByb290IGZvciBsaWNlbnNlIGluZm9ybWF0aW9uLlxuICotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSovXG5jbGFzcyBLZXlDb2RlU3RyTWFwIHtcbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgdGhpcy5fa2V5Q29kZVRvU3RyID0gW107XG4gICAgICAgIHRoaXMuX3N0clRvS2V5Q29kZSA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gICAgfVxuICAgIGRlZmluZShrZXlDb2RlLCBzdHIpIHtcbiAgICAgICAgdGhpcy5fa2V5Q29kZVRvU3RyW2tleUNvZGVdID0gc3RyO1xuICAgICAgICB0aGlzLl9zdHJUb0tleUNvZGVbc3RyLnRvTG93ZXJDYXNlKCldID0ga2V5Q29kZTtcbiAgICB9XG4gICAga2V5Q29kZVRvU3RyKGtleUNvZGUpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2tleUNvZGVUb1N0cltrZXlDb2RlXTtcbiAgICB9XG4gICAgc3RyVG9LZXlDb2RlKHN0cikge1xuICAgICAgICByZXR1cm4gdGhpcy5fc3RyVG9LZXlDb2RlW3N0ci50b0xvd2VyQ2FzZSgpXSB8fCAwIC8qIEtleUNvZGUuVW5rbm93biAqLztcbiAgICB9XG59XG5jb25zdCB1aU1hcCA9IG5ldyBLZXlDb2RlU3RyTWFwKCk7XG5jb25zdCB1c2VyU2V0dGluZ3NVU01hcCA9IG5ldyBLZXlDb2RlU3RyTWFwKCk7XG5jb25zdCB1c2VyU2V0dGluZ3NHZW5lcmFsTWFwID0gbmV3IEtleUNvZGVTdHJNYXAoKTtcbmV4cG9ydCBjb25zdCBFVkVOVF9LRVlfQ09ERV9NQVAgPSBuZXcgQXJyYXkoMjMwKTtcbmV4cG9ydCBjb25zdCBOQVRJVkVfV0lORE9XU19LRVlfQ09ERV9UT19LRVlfQ09ERSA9IHt9O1xuY29uc3Qgc2NhbkNvZGVJbnRUb1N0ciA9IFtdO1xuY29uc3Qgc2NhbkNvZGVTdHJUb0ludCA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG5jb25zdCBzY2FuQ29kZUxvd2VyQ2FzZVN0clRvSW50ID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbi8qKlxuICogLTEgaWYgYSBTY2FuQ29kZSA9PiBLZXlDb2RlIG1hcHBpbmcgZGVwZW5kcyBvbiBrYiBsYXlvdXQuXG4gKi9cbmV4cG9ydCBjb25zdCBJTU1VVEFCTEVfQ09ERV9UT19LRVlfQ09ERSA9IFtdO1xuLyoqXG4gKiAtMSBpZiBhIEtleUNvZGUgPT4gU2NhbkNvZGUgbWFwcGluZyBkZXBlbmRzIG9uIGtiIGxheW91dC5cbiAqL1xuZXhwb3J0IGNvbnN0IElNTVVUQUJMRV9LRVlfQ09ERV9UT19DT0RFID0gW107XG5mb3IgKGxldCBpID0gMDsgaSA8PSAxOTMgLyogU2NhbkNvZGUuTUFYX1ZBTFVFICovOyBpKyspIHtcbiAgICBJTU1VVEFCTEVfQ09ERV9UT19LRVlfQ09ERVtpXSA9IC0xIC8qIEtleUNvZGUuRGVwZW5kc09uS2JMYXlvdXQgKi87XG59XG5mb3IgKGxldCBpID0gMDsgaSA8PSAxMzIgLyogS2V5Q29kZS5NQVhfVkFMVUUgKi87IGkrKykge1xuICAgIElNTVVUQUJMRV9LRVlfQ09ERV9UT19DT0RFW2ldID0gLTEgLyogU2NhbkNvZGUuRGVwZW5kc09uS2JMYXlvdXQgKi87XG59XG4oZnVuY3Rpb24gKCkge1xuICAgIC8vIFNlZSBodHRwczovL21zZG4ubWljcm9zb2Z0LmNvbS9lbi11cy9saWJyYXJ5L3dpbmRvd3MvZGVza3RvcC9kZDM3NTczMSh2PXZzLjg1KS5hc3B4XG4gICAgLy8gU2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9taWNyb3NvZnQvbm9kZS1uYXRpdmUta2V5bWFwL2Jsb2IvODhjMGIwZTUvZGVwcy9jaHJvbWl1bS9rZXlib2FyZF9jb2Rlc193aW4uaFxuICAgIGNvbnN0IGVtcHR5ID0gJyc7XG4gICAgY29uc3QgbWFwcGluZ3MgPSBbXG4gICAgICAgIC8vIGltbXV0YWJsZSwgc2NhbkNvZGUsIHNjYW5Db2RlU3RyLCBrZXlDb2RlLCBrZXlDb2RlU3RyLCBldmVudEtleUNvZGUsIHZrZXksIHVzVXNlclNldHRpbmdzTGFiZWwsIGdlbmVyYWxVc2VyU2V0dGluZ3NMYWJlbFxuICAgICAgICBbMSwgMCAvKiBTY2FuQ29kZS5Ob25lICovLCAnTm9uZScsIDAgLyogS2V5Q29kZS5Vbmtub3duICovLCAndW5rbm93bicsIDAsICdWS19VTktOT1dOJywgZW1wdHksIGVtcHR5XSxcbiAgICAgICAgWzEsIDEgLyogU2NhbkNvZGUuSHlwZXIgKi8sICdIeXBlcicsIDAgLyogS2V5Q29kZS5Vbmtub3duICovLCBlbXB0eSwgMCwgZW1wdHksIGVtcHR5LCBlbXB0eV0sXG4gICAgICAgIFsxLCAyIC8qIFNjYW5Db2RlLlN1cGVyICovLCAnU3VwZXInLCAwIC8qIEtleUNvZGUuVW5rbm93biAqLywgZW1wdHksIDAsIGVtcHR5LCBlbXB0eSwgZW1wdHldLFxuICAgICAgICBbMSwgMyAvKiBTY2FuQ29kZS5GbiAqLywgJ0ZuJywgMCAvKiBLZXlDb2RlLlVua25vd24gKi8sIGVtcHR5LCAwLCBlbXB0eSwgZW1wdHksIGVtcHR5XSxcbiAgICAgICAgWzEsIDQgLyogU2NhbkNvZGUuRm5Mb2NrICovLCAnRm5Mb2NrJywgMCAvKiBLZXlDb2RlLlVua25vd24gKi8sIGVtcHR5LCAwLCBlbXB0eSwgZW1wdHksIGVtcHR5XSxcbiAgICAgICAgWzEsIDUgLyogU2NhbkNvZGUuU3VzcGVuZCAqLywgJ1N1c3BlbmQnLCAwIC8qIEtleUNvZGUuVW5rbm93biAqLywgZW1wdHksIDAsIGVtcHR5LCBlbXB0eSwgZW1wdHldLFxuICAgICAgICBbMSwgNiAvKiBTY2FuQ29kZS5SZXN1bWUgKi8sICdSZXN1bWUnLCAwIC8qIEtleUNvZGUuVW5rbm93biAqLywgZW1wdHksIDAsIGVtcHR5LCBlbXB0eSwgZW1wdHldLFxuICAgICAgICBbMSwgNyAvKiBTY2FuQ29kZS5UdXJibyAqLywgJ1R1cmJvJywgMCAvKiBLZXlDb2RlLlVua25vd24gKi8sIGVtcHR5LCAwLCBlbXB0eSwgZW1wdHksIGVtcHR5XSxcbiAgICAgICAgWzEsIDggLyogU2NhbkNvZGUuU2xlZXAgKi8sICdTbGVlcCcsIDAgLyogS2V5Q29kZS5Vbmtub3duICovLCBlbXB0eSwgMCwgJ1ZLX1NMRUVQJywgZW1wdHksIGVtcHR5XSxcbiAgICAgICAgWzEsIDkgLyogU2NhbkNvZGUuV2FrZVVwICovLCAnV2FrZVVwJywgMCAvKiBLZXlDb2RlLlVua25vd24gKi8sIGVtcHR5LCAwLCBlbXB0eSwgZW1wdHksIGVtcHR5XSxcbiAgICAgICAgWzAsIDEwIC8qIFNjYW5Db2RlLktleUEgKi8sICdLZXlBJywgMzEgLyogS2V5Q29kZS5LZXlBICovLCAnQScsIDY1LCAnVktfQScsIGVtcHR5LCBlbXB0eV0sXG4gICAgICAgIFswLCAxMSAvKiBTY2FuQ29kZS5LZXlCICovLCAnS2V5QicsIDMyIC8qIEtleUNvZGUuS2V5QiAqLywgJ0InLCA2NiwgJ1ZLX0InLCBlbXB0eSwgZW1wdHldLFxuICAgICAgICBbMCwgMTIgLyogU2NhbkNvZGUuS2V5QyAqLywgJ0tleUMnLCAzMyAvKiBLZXlDb2RlLktleUMgKi8sICdDJywgNjcsICdWS19DJywgZW1wdHksIGVtcHR5XSxcbiAgICAgICAgWzAsIDEzIC8qIFNjYW5Db2RlLktleUQgKi8sICdLZXlEJywgMzQgLyogS2V5Q29kZS5LZXlEICovLCAnRCcsIDY4LCAnVktfRCcsIGVtcHR5LCBlbXB0eV0sXG4gICAgICAgIFswLCAxNCAvKiBTY2FuQ29kZS5LZXlFICovLCAnS2V5RScsIDM1IC8qIEtleUNvZGUuS2V5RSAqLywgJ0UnLCA2OSwgJ1ZLX0UnLCBlbXB0eSwgZW1wdHldLFxuICAgICAgICBbMCwgMTUgLyogU2NhbkNvZGUuS2V5RiAqLywgJ0tleUYnLCAzNiAvKiBLZXlDb2RlLktleUYgKi8sICdGJywgNzAsICdWS19GJywgZW1wdHksIGVtcHR5XSxcbiAgICAgICAgWzAsIDE2IC8qIFNjYW5Db2RlLktleUcgKi8sICdLZXlHJywgMzcgLyogS2V5Q29kZS5LZXlHICovLCAnRycsIDcxLCAnVktfRycsIGVtcHR5LCBlbXB0eV0sXG4gICAgICAgIFswLCAxNyAvKiBTY2FuQ29kZS5LZXlIICovLCAnS2V5SCcsIDM4IC8qIEtleUNvZGUuS2V5SCAqLywgJ0gnLCA3MiwgJ1ZLX0gnLCBlbXB0eSwgZW1wdHldLFxuICAgICAgICBbMCwgMTggLyogU2NhbkNvZGUuS2V5SSAqLywgJ0tleUknLCAzOSAvKiBLZXlDb2RlLktleUkgKi8sICdJJywgNzMsICdWS19JJywgZW1wdHksIGVtcHR5XSxcbiAgICAgICAgWzAsIDE5IC8qIFNjYW5Db2RlLktleUogKi8sICdLZXlKJywgNDAgLyogS2V5Q29kZS5LZXlKICovLCAnSicsIDc0LCAnVktfSicsIGVtcHR5LCBlbXB0eV0sXG4gICAgICAgIFswLCAyMCAvKiBTY2FuQ29kZS5LZXlLICovLCAnS2V5SycsIDQxIC8qIEtleUNvZGUuS2V5SyAqLywgJ0snLCA3NSwgJ1ZLX0snLCBlbXB0eSwgZW1wdHldLFxuICAgICAgICBbMCwgMjEgLyogU2NhbkNvZGUuS2V5TCAqLywgJ0tleUwnLCA0MiAvKiBLZXlDb2RlLktleUwgKi8sICdMJywgNzYsICdWS19MJywgZW1wdHksIGVtcHR5XSxcbiAgICAgICAgWzAsIDIyIC8qIFNjYW5Db2RlLktleU0gKi8sICdLZXlNJywgNDMgLyogS2V5Q29kZS5LZXlNICovLCAnTScsIDc3LCAnVktfTScsIGVtcHR5LCBlbXB0eV0sXG4gICAgICAgIFswLCAyMyAvKiBTY2FuQ29kZS5LZXlOICovLCAnS2V5TicsIDQ0IC8qIEtleUNvZGUuS2V5TiAqLywgJ04nLCA3OCwgJ1ZLX04nLCBlbXB0eSwgZW1wdHldLFxuICAgICAgICBbMCwgMjQgLyogU2NhbkNvZGUuS2V5TyAqLywgJ0tleU8nLCA0NSAvKiBLZXlDb2RlLktleU8gKi8sICdPJywgNzksICdWS19PJywgZW1wdHksIGVtcHR5XSxcbiAgICAgICAgWzAsIDI1IC8qIFNjYW5Db2RlLktleVAgKi8sICdLZXlQJywgNDYgLyogS2V5Q29kZS5LZXlQICovLCAnUCcsIDgwLCAnVktfUCcsIGVtcHR5LCBlbXB0eV0sXG4gICAgICAgIFswLCAyNiAvKiBTY2FuQ29kZS5LZXlRICovLCAnS2V5UScsIDQ3IC8qIEtleUNvZGUuS2V5USAqLywgJ1EnLCA4MSwgJ1ZLX1EnLCBlbXB0eSwgZW1wdHldLFxuICAgICAgICBbMCwgMjcgLyogU2NhbkNvZGUuS2V5UiAqLywgJ0tleVInLCA0OCAvKiBLZXlDb2RlLktleVIgKi8sICdSJywgODIsICdWS19SJywgZW1wdHksIGVtcHR5XSxcbiAgICAgICAgWzAsIDI4IC8qIFNjYW5Db2RlLktleVMgKi8sICdLZXlTJywgNDkgLyogS2V5Q29kZS5LZXlTICovLCAnUycsIDgzLCAnVktfUycsIGVtcHR5LCBlbXB0eV0sXG4gICAgICAgIFswLCAyOSAvKiBTY2FuQ29kZS5LZXlUICovLCAnS2V5VCcsIDUwIC8qIEtleUNvZGUuS2V5VCAqLywgJ1QnLCA4NCwgJ1ZLX1QnLCBlbXB0eSwgZW1wdHldLFxuICAgICAgICBbMCwgMzAgLyogU2NhbkNvZGUuS2V5VSAqLywgJ0tleVUnLCA1MSAvKiBLZXlDb2RlLktleVUgKi8sICdVJywgODUsICdWS19VJywgZW1wdHksIGVtcHR5XSxcbiAgICAgICAgWzAsIDMxIC8qIFNjYW5Db2RlLktleVYgKi8sICdLZXlWJywgNTIgLyogS2V5Q29kZS5LZXlWICovLCAnVicsIDg2LCAnVktfVicsIGVtcHR5LCBlbXB0eV0sXG4gICAgICAgIFswLCAzMiAvKiBTY2FuQ29kZS5LZXlXICovLCAnS2V5VycsIDUzIC8qIEtleUNvZGUuS2V5VyAqLywgJ1cnLCA4NywgJ1ZLX1cnLCBlbXB0eSwgZW1wdHldLFxuICAgICAgICBbMCwgMzMgLyogU2NhbkNvZGUuS2V5WCAqLywgJ0tleVgnLCA1NCAvKiBLZXlDb2RlLktleVggKi8sICdYJywgODgsICdWS19YJywgZW1wdHksIGVtcHR5XSxcbiAgICAgICAgWzAsIDM0IC8qIFNjYW5Db2RlLktleVkgKi8sICdLZXlZJywgNTUgLyogS2V5Q29kZS5LZXlZICovLCAnWScsIDg5LCAnVktfWScsIGVtcHR5LCBlbXB0eV0sXG4gICAgICAgIFswLCAzNSAvKiBTY2FuQ29kZS5LZXlaICovLCAnS2V5WicsIDU2IC8qIEtleUNvZGUuS2V5WiAqLywgJ1onLCA5MCwgJ1ZLX1onLCBlbXB0eSwgZW1wdHldLFxuICAgICAgICBbMCwgMzYgLyogU2NhbkNvZGUuRGlnaXQxICovLCAnRGlnaXQxJywgMjIgLyogS2V5Q29kZS5EaWdpdDEgKi8sICcxJywgNDksICdWS18xJywgZW1wdHksIGVtcHR5XSxcbiAgICAgICAgWzAsIDM3IC8qIFNjYW5Db2RlLkRpZ2l0MiAqLywgJ0RpZ2l0MicsIDIzIC8qIEtleUNvZGUuRGlnaXQyICovLCAnMicsIDUwLCAnVktfMicsIGVtcHR5LCBlbXB0eV0sXG4gICAgICAgIFswLCAzOCAvKiBTY2FuQ29kZS5EaWdpdDMgKi8sICdEaWdpdDMnLCAyNCAvKiBLZXlDb2RlLkRpZ2l0MyAqLywgJzMnLCA1MSwgJ1ZLXzMnLCBlbXB0eSwgZW1wdHldLFxuICAgICAgICBbMCwgMzkgLyogU2NhbkNvZGUuRGlnaXQ0ICovLCAnRGlnaXQ0JywgMjUgLyogS2V5Q29kZS5EaWdpdDQgKi8sICc0JywgNTIsICdWS180JywgZW1wdHksIGVtcHR5XSxcbiAgICAgICAgWzAsIDQwIC8qIFNjYW5Db2RlLkRpZ2l0NSAqLywgJ0RpZ2l0NScsIDI2IC8qIEtleUNvZGUuRGlnaXQ1ICovLCAnNScsIDUzLCAnVktfNScsIGVtcHR5LCBlbXB0eV0sXG4gICAgICAgIFswLCA0MSAvKiBTY2FuQ29kZS5EaWdpdDYgKi8sICdEaWdpdDYnLCAyNyAvKiBLZXlDb2RlLkRpZ2l0NiAqLywgJzYnLCA1NCwgJ1ZLXzYnLCBlbXB0eSwgZW1wdHldLFxuICAgICAgICBbMCwgNDIgLyogU2NhbkNvZGUuRGlnaXQ3ICovLCAnRGlnaXQ3JywgMjggLyogS2V5Q29kZS5EaWdpdDcgKi8sICc3JywgNTUsICdWS183JywgZW1wdHksIGVtcHR5XSxcbiAgICAgICAgWzAsIDQzIC8qIFNjYW5Db2RlLkRpZ2l0OCAqLywgJ0RpZ2l0OCcsIDI5IC8qIEtleUNvZGUuRGlnaXQ4ICovLCAnOCcsIDU2LCAnVktfOCcsIGVtcHR5LCBlbXB0eV0sXG4gICAgICAgIFswLCA0NCAvKiBTY2FuQ29kZS5EaWdpdDkgKi8sICdEaWdpdDknLCAzMCAvKiBLZXlDb2RlLkRpZ2l0OSAqLywgJzknLCA1NywgJ1ZLXzknLCBlbXB0eSwgZW1wdHldLFxuICAgICAgICBbMCwgNDUgLyogU2NhbkNvZGUuRGlnaXQwICovLCAnRGlnaXQwJywgMjEgLyogS2V5Q29kZS5EaWdpdDAgKi8sICcwJywgNDgsICdWS18wJywgZW1wdHksIGVtcHR5XSxcbiAgICAgICAgWzEsIDQ2IC8qIFNjYW5Db2RlLkVudGVyICovLCAnRW50ZXInLCAzIC8qIEtleUNvZGUuRW50ZXIgKi8sICdFbnRlcicsIDEzLCAnVktfUkVUVVJOJywgZW1wdHksIGVtcHR5XSxcbiAgICAgICAgWzEsIDQ3IC8qIFNjYW5Db2RlLkVzY2FwZSAqLywgJ0VzY2FwZScsIDkgLyogS2V5Q29kZS5Fc2NhcGUgKi8sICdFc2NhcGUnLCAyNywgJ1ZLX0VTQ0FQRScsIGVtcHR5LCBlbXB0eV0sXG4gICAgICAgIFsxLCA0OCAvKiBTY2FuQ29kZS5CYWNrc3BhY2UgKi8sICdCYWNrc3BhY2UnLCAxIC8qIEtleUNvZGUuQmFja3NwYWNlICovLCAnQmFja3NwYWNlJywgOCwgJ1ZLX0JBQ0snLCBlbXB0eSwgZW1wdHldLFxuICAgICAgICBbMSwgNDkgLyogU2NhbkNvZGUuVGFiICovLCAnVGFiJywgMiAvKiBLZXlDb2RlLlRhYiAqLywgJ1RhYicsIDksICdWS19UQUInLCBlbXB0eSwgZW1wdHldLFxuICAgICAgICBbMSwgNTAgLyogU2NhbkNvZGUuU3BhY2UgKi8sICdTcGFjZScsIDEwIC8qIEtleUNvZGUuU3BhY2UgKi8sICdTcGFjZScsIDMyLCAnVktfU1BBQ0UnLCBlbXB0eSwgZW1wdHldLFxuICAgICAgICBbMCwgNTEgLyogU2NhbkNvZGUuTWludXMgKi8sICdNaW51cycsIDg4IC8qIEtleUNvZGUuTWludXMgKi8sICctJywgMTg5LCAnVktfT0VNX01JTlVTJywgJy0nLCAnT0VNX01JTlVTJ10sXG4gICAgICAgIFswLCA1MiAvKiBTY2FuQ29kZS5FcXVhbCAqLywgJ0VxdWFsJywgODYgLyogS2V5Q29kZS5FcXVhbCAqLywgJz0nLCAxODcsICdWS19PRU1fUExVUycsICc9JywgJ09FTV9QTFVTJ10sXG4gICAgICAgIFswLCA1MyAvKiBTY2FuQ29kZS5CcmFja2V0TGVmdCAqLywgJ0JyYWNrZXRMZWZ0JywgOTIgLyogS2V5Q29kZS5CcmFja2V0TGVmdCAqLywgJ1snLCAyMTksICdWS19PRU1fNCcsICdbJywgJ09FTV80J10sXG4gICAgICAgIFswLCA1NCAvKiBTY2FuQ29kZS5CcmFja2V0UmlnaHQgKi8sICdCcmFja2V0UmlnaHQnLCA5NCAvKiBLZXlDb2RlLkJyYWNrZXRSaWdodCAqLywgJ10nLCAyMjEsICdWS19PRU1fNicsICddJywgJ09FTV82J10sXG4gICAgICAgIFswLCA1NSAvKiBTY2FuQ29kZS5CYWNrc2xhc2ggKi8sICdCYWNrc2xhc2gnLCA5MyAvKiBLZXlDb2RlLkJhY2tzbGFzaCAqLywgJ1xcXFwnLCAyMjAsICdWS19PRU1fNScsICdcXFxcJywgJ09FTV81J10sXG4gICAgICAgIFswLCA1NiAvKiBTY2FuQ29kZS5JbnRsSGFzaCAqLywgJ0ludGxIYXNoJywgMCAvKiBLZXlDb2RlLlVua25vd24gKi8sIGVtcHR5LCAwLCBlbXB0eSwgZW1wdHksIGVtcHR5XSwgLy8gaGFzIGJlZW4gZHJvcHBlZCBmcm9tIHRoZSB3M2Mgc3BlY1xuICAgICAgICBbMCwgNTcgLyogU2NhbkNvZGUuU2VtaWNvbG9uICovLCAnU2VtaWNvbG9uJywgODUgLyogS2V5Q29kZS5TZW1pY29sb24gKi8sICc7JywgMTg2LCAnVktfT0VNXzEnLCAnOycsICdPRU1fMSddLFxuICAgICAgICBbMCwgNTggLyogU2NhbkNvZGUuUXVvdGUgKi8sICdRdW90ZScsIDk1IC8qIEtleUNvZGUuUXVvdGUgKi8sICdcXCcnLCAyMjIsICdWS19PRU1fNycsICdcXCcnLCAnT0VNXzcnXSxcbiAgICAgICAgWzAsIDU5IC8qIFNjYW5Db2RlLkJhY2txdW90ZSAqLywgJ0JhY2txdW90ZScsIDkxIC8qIEtleUNvZGUuQmFja3F1b3RlICovLCAnYCcsIDE5MiwgJ1ZLX09FTV8zJywgJ2AnLCAnT0VNXzMnXSxcbiAgICAgICAgWzAsIDYwIC8qIFNjYW5Db2RlLkNvbW1hICovLCAnQ29tbWEnLCA4NyAvKiBLZXlDb2RlLkNvbW1hICovLCAnLCcsIDE4OCwgJ1ZLX09FTV9DT01NQScsICcsJywgJ09FTV9DT01NQSddLFxuICAgICAgICBbMCwgNjEgLyogU2NhbkNvZGUuUGVyaW9kICovLCAnUGVyaW9kJywgODkgLyogS2V5Q29kZS5QZXJpb2QgKi8sICcuJywgMTkwLCAnVktfT0VNX1BFUklPRCcsICcuJywgJ09FTV9QRVJJT0QnXSxcbiAgICAgICAgWzAsIDYyIC8qIFNjYW5Db2RlLlNsYXNoICovLCAnU2xhc2gnLCA5MCAvKiBLZXlDb2RlLlNsYXNoICovLCAnLycsIDE5MSwgJ1ZLX09FTV8yJywgJy8nLCAnT0VNXzInXSxcbiAgICAgICAgWzEsIDYzIC8qIFNjYW5Db2RlLkNhcHNMb2NrICovLCAnQ2Fwc0xvY2snLCA4IC8qIEtleUNvZGUuQ2Fwc0xvY2sgKi8sICdDYXBzTG9jaycsIDIwLCAnVktfQ0FQSVRBTCcsIGVtcHR5LCBlbXB0eV0sXG4gICAgICAgIFsxLCA2NCAvKiBTY2FuQ29kZS5GMSAqLywgJ0YxJywgNTkgLyogS2V5Q29kZS5GMSAqLywgJ0YxJywgMTEyLCAnVktfRjEnLCBlbXB0eSwgZW1wdHldLFxuICAgICAgICBbMSwgNjUgLyogU2NhbkNvZGUuRjIgKi8sICdGMicsIDYwIC8qIEtleUNvZGUuRjIgKi8sICdGMicsIDExMywgJ1ZLX0YyJywgZW1wdHksIGVtcHR5XSxcbiAgICAgICAgWzEsIDY2IC8qIFNjYW5Db2RlLkYzICovLCAnRjMnLCA2MSAvKiBLZXlDb2RlLkYzICovLCAnRjMnLCAxMTQsICdWS19GMycsIGVtcHR5LCBlbXB0eV0sXG4gICAgICAgIFsxLCA2NyAvKiBTY2FuQ29kZS5GNCAqLywgJ0Y0JywgNjIgLyogS2V5Q29kZS5GNCAqLywgJ0Y0JywgMTE1LCAnVktfRjQnLCBlbXB0eSwgZW1wdHldLFxuICAgICAgICBbMSwgNjggLyogU2NhbkNvZGUuRjUgKi8sICdGNScsIDYzIC8qIEtleUNvZGUuRjUgKi8sICdGNScsIDExNiwgJ1ZLX0Y1JywgZW1wdHksIGVtcHR5XSxcbiAgICAgICAgWzEsIDY5IC8qIFNjYW5Db2RlLkY2ICovLCAnRjYnLCA2NCAvKiBLZXlDb2RlLkY2ICovLCAnRjYnLCAxMTcsICdWS19GNicsIGVtcHR5LCBlbXB0eV0sXG4gICAgICAgIFsxLCA3MCAvKiBTY2FuQ29kZS5GNyAqLywgJ0Y3JywgNjUgLyogS2V5Q29kZS5GNyAqLywgJ0Y3JywgMTE4LCAnVktfRjcnLCBlbXB0eSwgZW1wdHldLFxuICAgICAgICBbMSwgNzEgLyogU2NhbkNvZGUuRjggKi8sICdGOCcsIDY2IC8qIEtleUNvZGUuRjggKi8sICdGOCcsIDExOSwgJ1ZLX0Y4JywgZW1wdHksIGVtcHR5XSxcbiAgICAgICAgWzEsIDcyIC8qIFNjYW5Db2RlLkY5ICovLCAnRjknLCA2NyAvKiBLZXlDb2RlLkY5ICovLCAnRjknLCAxMjAsICdWS19GOScsIGVtcHR5LCBlbXB0eV0sXG4gICAgICAgIFsxLCA3MyAvKiBTY2FuQ29kZS5GMTAgKi8sICdGMTAnLCA2OCAvKiBLZXlDb2RlLkYxMCAqLywgJ0YxMCcsIDEyMSwgJ1ZLX0YxMCcsIGVtcHR5LCBlbXB0eV0sXG4gICAgICAgIFsxLCA3NCAvKiBTY2FuQ29kZS5GMTEgKi8sICdGMTEnLCA2OSAvKiBLZXlDb2RlLkYxMSAqLywgJ0YxMScsIDEyMiwgJ1ZLX0YxMScsIGVtcHR5LCBlbXB0eV0sXG4gICAgICAgIFsxLCA3NSAvKiBTY2FuQ29kZS5GMTIgKi8sICdGMTInLCA3MCAvKiBLZXlDb2RlLkYxMiAqLywgJ0YxMicsIDEyMywgJ1ZLX0YxMicsIGVtcHR5LCBlbXB0eV0sXG4gICAgICAgIFsxLCA3NiAvKiBTY2FuQ29kZS5QcmludFNjcmVlbiAqLywgJ1ByaW50U2NyZWVuJywgMCAvKiBLZXlDb2RlLlVua25vd24gKi8sIGVtcHR5LCAwLCBlbXB0eSwgZW1wdHksIGVtcHR5XSxcbiAgICAgICAgWzEsIDc3IC8qIFNjYW5Db2RlLlNjcm9sbExvY2sgKi8sICdTY3JvbGxMb2NrJywgODQgLyogS2V5Q29kZS5TY3JvbGxMb2NrICovLCAnU2Nyb2xsTG9jaycsIDE0NSwgJ1ZLX1NDUk9MTCcsIGVtcHR5LCBlbXB0eV0sXG4gICAgICAgIFsxLCA3OCAvKiBTY2FuQ29kZS5QYXVzZSAqLywgJ1BhdXNlJywgNyAvKiBLZXlDb2RlLlBhdXNlQnJlYWsgKi8sICdQYXVzZUJyZWFrJywgMTksICdWS19QQVVTRScsIGVtcHR5LCBlbXB0eV0sXG4gICAgICAgIFsxLCA3OSAvKiBTY2FuQ29kZS5JbnNlcnQgKi8sICdJbnNlcnQnLCAxOSAvKiBLZXlDb2RlLkluc2VydCAqLywgJ0luc2VydCcsIDQ1LCAnVktfSU5TRVJUJywgZW1wdHksIGVtcHR5XSxcbiAgICAgICAgWzEsIDgwIC8qIFNjYW5Db2RlLkhvbWUgKi8sICdIb21lJywgMTQgLyogS2V5Q29kZS5Ib21lICovLCAnSG9tZScsIDM2LCAnVktfSE9NRScsIGVtcHR5LCBlbXB0eV0sXG4gICAgICAgIFsxLCA4MSAvKiBTY2FuQ29kZS5QYWdlVXAgKi8sICdQYWdlVXAnLCAxMSAvKiBLZXlDb2RlLlBhZ2VVcCAqLywgJ1BhZ2VVcCcsIDMzLCAnVktfUFJJT1InLCBlbXB0eSwgZW1wdHldLFxuICAgICAgICBbMSwgODIgLyogU2NhbkNvZGUuRGVsZXRlICovLCAnRGVsZXRlJywgMjAgLyogS2V5Q29kZS5EZWxldGUgKi8sICdEZWxldGUnLCA0NiwgJ1ZLX0RFTEVURScsIGVtcHR5LCBlbXB0eV0sXG4gICAgICAgIFsxLCA4MyAvKiBTY2FuQ29kZS5FbmQgKi8sICdFbmQnLCAxMyAvKiBLZXlDb2RlLkVuZCAqLywgJ0VuZCcsIDM1LCAnVktfRU5EJywgZW1wdHksIGVtcHR5XSxcbiAgICAgICAgWzEsIDg0IC8qIFNjYW5Db2RlLlBhZ2VEb3duICovLCAnUGFnZURvd24nLCAxMiAvKiBLZXlDb2RlLlBhZ2VEb3duICovLCAnUGFnZURvd24nLCAzNCwgJ1ZLX05FWFQnLCBlbXB0eSwgZW1wdHldLFxuICAgICAgICBbMSwgODUgLyogU2NhbkNvZGUuQXJyb3dSaWdodCAqLywgJ0Fycm93UmlnaHQnLCAxNyAvKiBLZXlDb2RlLlJpZ2h0QXJyb3cgKi8sICdSaWdodEFycm93JywgMzksICdWS19SSUdIVCcsICdSaWdodCcsIGVtcHR5XSxcbiAgICAgICAgWzEsIDg2IC8qIFNjYW5Db2RlLkFycm93TGVmdCAqLywgJ0Fycm93TGVmdCcsIDE1IC8qIEtleUNvZGUuTGVmdEFycm93ICovLCAnTGVmdEFycm93JywgMzcsICdWS19MRUZUJywgJ0xlZnQnLCBlbXB0eV0sXG4gICAgICAgIFsxLCA4NyAvKiBTY2FuQ29kZS5BcnJvd0Rvd24gKi8sICdBcnJvd0Rvd24nLCAxOCAvKiBLZXlDb2RlLkRvd25BcnJvdyAqLywgJ0Rvd25BcnJvdycsIDQwLCAnVktfRE9XTicsICdEb3duJywgZW1wdHldLFxuICAgICAgICBbMSwgODggLyogU2NhbkNvZGUuQXJyb3dVcCAqLywgJ0Fycm93VXAnLCAxNiAvKiBLZXlDb2RlLlVwQXJyb3cgKi8sICdVcEFycm93JywgMzgsICdWS19VUCcsICdVcCcsIGVtcHR5XSxcbiAgICAgICAgWzEsIDg5IC8qIFNjYW5Db2RlLk51bUxvY2sgKi8sICdOdW1Mb2NrJywgODMgLyogS2V5Q29kZS5OdW1Mb2NrICovLCAnTnVtTG9jaycsIDE0NCwgJ1ZLX05VTUxPQ0snLCBlbXB0eSwgZW1wdHldLFxuICAgICAgICBbMSwgOTAgLyogU2NhbkNvZGUuTnVtcGFkRGl2aWRlICovLCAnTnVtcGFkRGl2aWRlJywgMTEzIC8qIEtleUNvZGUuTnVtcGFkRGl2aWRlICovLCAnTnVtUGFkX0RpdmlkZScsIDExMSwgJ1ZLX0RJVklERScsIGVtcHR5LCBlbXB0eV0sXG4gICAgICAgIFsxLCA5MSAvKiBTY2FuQ29kZS5OdW1wYWRNdWx0aXBseSAqLywgJ051bXBhZE11bHRpcGx5JywgMTA4IC8qIEtleUNvZGUuTnVtcGFkTXVsdGlwbHkgKi8sICdOdW1QYWRfTXVsdGlwbHknLCAxMDYsICdWS19NVUxUSVBMWScsIGVtcHR5LCBlbXB0eV0sXG4gICAgICAgIFsxLCA5MiAvKiBTY2FuQ29kZS5OdW1wYWRTdWJ0cmFjdCAqLywgJ051bXBhZFN1YnRyYWN0JywgMTExIC8qIEtleUNvZGUuTnVtcGFkU3VidHJhY3QgKi8sICdOdW1QYWRfU3VidHJhY3QnLCAxMDksICdWS19TVUJUUkFDVCcsIGVtcHR5LCBlbXB0eV0sXG4gICAgICAgIFsxLCA5MyAvKiBTY2FuQ29kZS5OdW1wYWRBZGQgKi8sICdOdW1wYWRBZGQnLCAxMDkgLyogS2V5Q29kZS5OdW1wYWRBZGQgKi8sICdOdW1QYWRfQWRkJywgMTA3LCAnVktfQUREJywgZW1wdHksIGVtcHR5XSxcbiAgICAgICAgWzEsIDk0IC8qIFNjYW5Db2RlLk51bXBhZEVudGVyICovLCAnTnVtcGFkRW50ZXInLCAzIC8qIEtleUNvZGUuRW50ZXIgKi8sIGVtcHR5LCAwLCBlbXB0eSwgZW1wdHksIGVtcHR5XSxcbiAgICAgICAgWzEsIDk1IC8qIFNjYW5Db2RlLk51bXBhZDEgKi8sICdOdW1wYWQxJywgOTkgLyogS2V5Q29kZS5OdW1wYWQxICovLCAnTnVtUGFkMScsIDk3LCAnVktfTlVNUEFEMScsIGVtcHR5LCBlbXB0eV0sXG4gICAgICAgIFsxLCA5NiAvKiBTY2FuQ29kZS5OdW1wYWQyICovLCAnTnVtcGFkMicsIDEwMCAvKiBLZXlDb2RlLk51bXBhZDIgKi8sICdOdW1QYWQyJywgOTgsICdWS19OVU1QQUQyJywgZW1wdHksIGVtcHR5XSxcbiAgICAgICAgWzEsIDk3IC8qIFNjYW5Db2RlLk51bXBhZDMgKi8sICdOdW1wYWQzJywgMTAxIC8qIEtleUNvZGUuTnVtcGFkMyAqLywgJ051bVBhZDMnLCA5OSwgJ1ZLX05VTVBBRDMnLCBlbXB0eSwgZW1wdHldLFxuICAgICAgICBbMSwgOTggLyogU2NhbkNvZGUuTnVtcGFkNCAqLywgJ051bXBhZDQnLCAxMDIgLyogS2V5Q29kZS5OdW1wYWQ0ICovLCAnTnVtUGFkNCcsIDEwMCwgJ1ZLX05VTVBBRDQnLCBlbXB0eSwgZW1wdHldLFxuICAgICAgICBbMSwgOTkgLyogU2NhbkNvZGUuTnVtcGFkNSAqLywgJ051bXBhZDUnLCAxMDMgLyogS2V5Q29kZS5OdW1wYWQ1ICovLCAnTnVtUGFkNScsIDEwMSwgJ1ZLX05VTVBBRDUnLCBlbXB0eSwgZW1wdHldLFxuICAgICAgICBbMSwgMTAwIC8qIFNjYW5Db2RlLk51bXBhZDYgKi8sICdOdW1wYWQ2JywgMTA0IC8qIEtleUNvZGUuTnVtcGFkNiAqLywgJ051bVBhZDYnLCAxMDIsICdWS19OVU1QQUQ2JywgZW1wdHksIGVtcHR5XSxcbiAgICAgICAgWzEsIDEwMSAvKiBTY2FuQ29kZS5OdW1wYWQ3ICovLCAnTnVtcGFkNycsIDEwNSAvKiBLZXlDb2RlLk51bXBhZDcgKi8sICdOdW1QYWQ3JywgMTAzLCAnVktfTlVNUEFENycsIGVtcHR5LCBlbXB0eV0sXG4gICAgICAgIFsxLCAxMDIgLyogU2NhbkNvZGUuTnVtcGFkOCAqLywgJ051bXBhZDgnLCAxMDYgLyogS2V5Q29kZS5OdW1wYWQ4ICovLCAnTnVtUGFkOCcsIDEwNCwgJ1ZLX05VTVBBRDgnLCBlbXB0eSwgZW1wdHldLFxuICAgICAgICBbMSwgMTAzIC8qIFNjYW5Db2RlLk51bXBhZDkgKi8sICdOdW1wYWQ5JywgMTA3IC8qIEtleUNvZGUuTnVtcGFkOSAqLywgJ051bVBhZDknLCAxMDUsICdWS19OVU1QQUQ5JywgZW1wdHksIGVtcHR5XSxcbiAgICAgICAgWzEsIDEwNCAvKiBTY2FuQ29kZS5OdW1wYWQwICovLCAnTnVtcGFkMCcsIDk4IC8qIEtleUNvZGUuTnVtcGFkMCAqLywgJ051bVBhZDAnLCA5NiwgJ1ZLX05VTVBBRDAnLCBlbXB0eSwgZW1wdHldLFxuICAgICAgICBbMSwgMTA1IC8qIFNjYW5Db2RlLk51bXBhZERlY2ltYWwgKi8sICdOdW1wYWREZWNpbWFsJywgMTEyIC8qIEtleUNvZGUuTnVtcGFkRGVjaW1hbCAqLywgJ051bVBhZF9EZWNpbWFsJywgMTEwLCAnVktfREVDSU1BTCcsIGVtcHR5LCBlbXB0eV0sXG4gICAgICAgIFswLCAxMDYgLyogU2NhbkNvZGUuSW50bEJhY2tzbGFzaCAqLywgJ0ludGxCYWNrc2xhc2gnLCA5NyAvKiBLZXlDb2RlLkludGxCYWNrc2xhc2ggKi8sICdPRU1fMTAyJywgMjI2LCAnVktfT0VNXzEwMicsIGVtcHR5LCBlbXB0eV0sXG4gICAgICAgIFsxLCAxMDcgLyogU2NhbkNvZGUuQ29udGV4dE1lbnUgKi8sICdDb250ZXh0TWVudScsIDU4IC8qIEtleUNvZGUuQ29udGV4dE1lbnUgKi8sICdDb250ZXh0TWVudScsIDkzLCBlbXB0eSwgZW1wdHksIGVtcHR5XSxcbiAgICAgICAgWzEsIDEwOCAvKiBTY2FuQ29kZS5Qb3dlciAqLywgJ1Bvd2VyJywgMCAvKiBLZXlDb2RlLlVua25vd24gKi8sIGVtcHR5LCAwLCBlbXB0eSwgZW1wdHksIGVtcHR5XSxcbiAgICAgICAgWzEsIDEwOSAvKiBTY2FuQ29kZS5OdW1wYWRFcXVhbCAqLywgJ051bXBhZEVxdWFsJywgMCAvKiBLZXlDb2RlLlVua25vd24gKi8sIGVtcHR5LCAwLCBlbXB0eSwgZW1wdHksIGVtcHR5XSxcbiAgICAgICAgWzEsIDExMCAvKiBTY2FuQ29kZS5GMTMgKi8sICdGMTMnLCA3MSAvKiBLZXlDb2RlLkYxMyAqLywgJ0YxMycsIDEyNCwgJ1ZLX0YxMycsIGVtcHR5LCBlbXB0eV0sXG4gICAgICAgIFsxLCAxMTEgLyogU2NhbkNvZGUuRjE0ICovLCAnRjE0JywgNzIgLyogS2V5Q29kZS5GMTQgKi8sICdGMTQnLCAxMjUsICdWS19GMTQnLCBlbXB0eSwgZW1wdHldLFxuICAgICAgICBbMSwgMTEyIC8qIFNjYW5Db2RlLkYxNSAqLywgJ0YxNScsIDczIC8qIEtleUNvZGUuRjE1ICovLCAnRjE1JywgMTI2LCAnVktfRjE1JywgZW1wdHksIGVtcHR5XSxcbiAgICAgICAgWzEsIDExMyAvKiBTY2FuQ29kZS5GMTYgKi8sICdGMTYnLCA3NCAvKiBLZXlDb2RlLkYxNiAqLywgJ0YxNicsIDEyNywgJ1ZLX0YxNicsIGVtcHR5LCBlbXB0eV0sXG4gICAgICAgIFsxLCAxMTQgLyogU2NhbkNvZGUuRjE3ICovLCAnRjE3JywgNzUgLyogS2V5Q29kZS5GMTcgKi8sICdGMTcnLCAxMjgsICdWS19GMTcnLCBlbXB0eSwgZW1wdHldLFxuICAgICAgICBbMSwgMTE1IC8qIFNjYW5Db2RlLkYxOCAqLywgJ0YxOCcsIDc2IC8qIEtleUNvZGUuRjE4ICovLCAnRjE4JywgMTI5LCAnVktfRjE4JywgZW1wdHksIGVtcHR5XSxcbiAgICAgICAgWzEsIDExNiAvKiBTY2FuQ29kZS5GMTkgKi8sICdGMTknLCA3NyAvKiBLZXlDb2RlLkYxOSAqLywgJ0YxOScsIDEzMCwgJ1ZLX0YxOScsIGVtcHR5LCBlbXB0eV0sXG4gICAgICAgIFsxLCAxMTcgLyogU2NhbkNvZGUuRjIwICovLCAnRjIwJywgNzggLyogS2V5Q29kZS5GMjAgKi8sICdGMjAnLCAxMzEsICdWS19GMjAnLCBlbXB0eSwgZW1wdHldLFxuICAgICAgICBbMSwgMTE4IC8qIFNjYW5Db2RlLkYyMSAqLywgJ0YyMScsIDc5IC8qIEtleUNvZGUuRjIxICovLCAnRjIxJywgMTMyLCAnVktfRjIxJywgZW1wdHksIGVtcHR5XSxcbiAgICAgICAgWzEsIDExOSAvKiBTY2FuQ29kZS5GMjIgKi8sICdGMjInLCA4MCAvKiBLZXlDb2RlLkYyMiAqLywgJ0YyMicsIDEzMywgJ1ZLX0YyMicsIGVtcHR5LCBlbXB0eV0sXG4gICAgICAgIFsxLCAxMjAgLyogU2NhbkNvZGUuRjIzICovLCAnRjIzJywgODEgLyogS2V5Q29kZS5GMjMgKi8sICdGMjMnLCAxMzQsICdWS19GMjMnLCBlbXB0eSwgZW1wdHldLFxuICAgICAgICBbMSwgMTIxIC8qIFNjYW5Db2RlLkYyNCAqLywgJ0YyNCcsIDgyIC8qIEtleUNvZGUuRjI0ICovLCAnRjI0JywgMTM1LCAnVktfRjI0JywgZW1wdHksIGVtcHR5XSxcbiAgICAgICAgWzEsIDEyMiAvKiBTY2FuQ29kZS5PcGVuICovLCAnT3BlbicsIDAgLyogS2V5Q29kZS5Vbmtub3duICovLCBlbXB0eSwgMCwgZW1wdHksIGVtcHR5LCBlbXB0eV0sXG4gICAgICAgIFsxLCAxMjMgLyogU2NhbkNvZGUuSGVscCAqLywgJ0hlbHAnLCAwIC8qIEtleUNvZGUuVW5rbm93biAqLywgZW1wdHksIDAsIGVtcHR5LCBlbXB0eSwgZW1wdHldLFxuICAgICAgICBbMSwgMTI0IC8qIFNjYW5Db2RlLlNlbGVjdCAqLywgJ1NlbGVjdCcsIDAgLyogS2V5Q29kZS5Vbmtub3duICovLCBlbXB0eSwgMCwgZW1wdHksIGVtcHR5LCBlbXB0eV0sXG4gICAgICAgIFsxLCAxMjUgLyogU2NhbkNvZGUuQWdhaW4gKi8sICdBZ2FpbicsIDAgLyogS2V5Q29kZS5Vbmtub3duICovLCBlbXB0eSwgMCwgZW1wdHksIGVtcHR5LCBlbXB0eV0sXG4gICAgICAgIFsxLCAxMjYgLyogU2NhbkNvZGUuVW5kbyAqLywgJ1VuZG8nLCAwIC8qIEtleUNvZGUuVW5rbm93biAqLywgZW1wdHksIDAsIGVtcHR5LCBlbXB0eSwgZW1wdHldLFxuICAgICAgICBbMSwgMTI3IC8qIFNjYW5Db2RlLkN1dCAqLywgJ0N1dCcsIDAgLyogS2V5Q29kZS5Vbmtub3duICovLCBlbXB0eSwgMCwgZW1wdHksIGVtcHR5LCBlbXB0eV0sXG4gICAgICAgIFsxLCAxMjggLyogU2NhbkNvZGUuQ29weSAqLywgJ0NvcHknLCAwIC8qIEtleUNvZGUuVW5rbm93biAqLywgZW1wdHksIDAsIGVtcHR5LCBlbXB0eSwgZW1wdHldLFxuICAgICAgICBbMSwgMTI5IC8qIFNjYW5Db2RlLlBhc3RlICovLCAnUGFzdGUnLCAwIC8qIEtleUNvZGUuVW5rbm93biAqLywgZW1wdHksIDAsIGVtcHR5LCBlbXB0eSwgZW1wdHldLFxuICAgICAgICBbMSwgMTMwIC8qIFNjYW5Db2RlLkZpbmQgKi8sICdGaW5kJywgMCAvKiBLZXlDb2RlLlVua25vd24gKi8sIGVtcHR5LCAwLCBlbXB0eSwgZW1wdHksIGVtcHR5XSxcbiAgICAgICAgWzEsIDEzMSAvKiBTY2FuQ29kZS5BdWRpb1ZvbHVtZU11dGUgKi8sICdBdWRpb1ZvbHVtZU11dGUnLCAxMTcgLyogS2V5Q29kZS5BdWRpb1ZvbHVtZU11dGUgKi8sICdBdWRpb1ZvbHVtZU11dGUnLCAxNzMsICdWS19WT0xVTUVfTVVURScsIGVtcHR5LCBlbXB0eV0sXG4gICAgICAgIFsxLCAxMzIgLyogU2NhbkNvZGUuQXVkaW9Wb2x1bWVVcCAqLywgJ0F1ZGlvVm9sdW1lVXAnLCAxMTggLyogS2V5Q29kZS5BdWRpb1ZvbHVtZVVwICovLCAnQXVkaW9Wb2x1bWVVcCcsIDE3NSwgJ1ZLX1ZPTFVNRV9VUCcsIGVtcHR5LCBlbXB0eV0sXG4gICAgICAgIFsxLCAxMzMgLyogU2NhbkNvZGUuQXVkaW9Wb2x1bWVEb3duICovLCAnQXVkaW9Wb2x1bWVEb3duJywgMTE5IC8qIEtleUNvZGUuQXVkaW9Wb2x1bWVEb3duICovLCAnQXVkaW9Wb2x1bWVEb3duJywgMTc0LCAnVktfVk9MVU1FX0RPV04nLCBlbXB0eSwgZW1wdHldLFxuICAgICAgICBbMSwgMTM0IC8qIFNjYW5Db2RlLk51bXBhZENvbW1hICovLCAnTnVtcGFkQ29tbWEnLCAxMTAgLyogS2V5Q29kZS5OVU1QQURfU0VQQVJBVE9SICovLCAnTnVtUGFkX1NlcGFyYXRvcicsIDEwOCwgJ1ZLX1NFUEFSQVRPUicsIGVtcHR5LCBlbXB0eV0sXG4gICAgICAgIFswLCAxMzUgLyogU2NhbkNvZGUuSW50bFJvICovLCAnSW50bFJvJywgMTE1IC8qIEtleUNvZGUuQUJOVF9DMSAqLywgJ0FCTlRfQzEnLCAxOTMsICdWS19BQk5UX0MxJywgZW1wdHksIGVtcHR5XSxcbiAgICAgICAgWzEsIDEzNiAvKiBTY2FuQ29kZS5LYW5hTW9kZSAqLywgJ0thbmFNb2RlJywgMCAvKiBLZXlDb2RlLlVua25vd24gKi8sIGVtcHR5LCAwLCBlbXB0eSwgZW1wdHksIGVtcHR5XSxcbiAgICAgICAgWzAsIDEzNyAvKiBTY2FuQ29kZS5JbnRsWWVuICovLCAnSW50bFllbicsIDAgLyogS2V5Q29kZS5Vbmtub3duICovLCBlbXB0eSwgMCwgZW1wdHksIGVtcHR5LCBlbXB0eV0sXG4gICAgICAgIFsxLCAxMzggLyogU2NhbkNvZGUuQ29udmVydCAqLywgJ0NvbnZlcnQnLCAwIC8qIEtleUNvZGUuVW5rbm93biAqLywgZW1wdHksIDAsIGVtcHR5LCBlbXB0eSwgZW1wdHldLFxuICAgICAgICBbMSwgMTM5IC8qIFNjYW5Db2RlLk5vbkNvbnZlcnQgKi8sICdOb25Db252ZXJ0JywgMCAvKiBLZXlDb2RlLlVua25vd24gKi8sIGVtcHR5LCAwLCBlbXB0eSwgZW1wdHksIGVtcHR5XSxcbiAgICAgICAgWzEsIDE0MCAvKiBTY2FuQ29kZS5MYW5nMSAqLywgJ0xhbmcxJywgMCAvKiBLZXlDb2RlLlVua25vd24gKi8sIGVtcHR5LCAwLCBlbXB0eSwgZW1wdHksIGVtcHR5XSxcbiAgICAgICAgWzEsIDE0MSAvKiBTY2FuQ29kZS5MYW5nMiAqLywgJ0xhbmcyJywgMCAvKiBLZXlDb2RlLlVua25vd24gKi8sIGVtcHR5LCAwLCBlbXB0eSwgZW1wdHksIGVtcHR5XSxcbiAgICAgICAgWzEsIDE0MiAvKiBTY2FuQ29kZS5MYW5nMyAqLywgJ0xhbmczJywgMCAvKiBLZXlDb2RlLlVua25vd24gKi8sIGVtcHR5LCAwLCBlbXB0eSwgZW1wdHksIGVtcHR5XSxcbiAgICAgICAgWzEsIDE0MyAvKiBTY2FuQ29kZS5MYW5nNCAqLywgJ0xhbmc0JywgMCAvKiBLZXlDb2RlLlVua25vd24gKi8sIGVtcHR5LCAwLCBlbXB0eSwgZW1wdHksIGVtcHR5XSxcbiAgICAgICAgWzEsIDE0NCAvKiBTY2FuQ29kZS5MYW5nNSAqLywgJ0xhbmc1JywgMCAvKiBLZXlDb2RlLlVua25vd24gKi8sIGVtcHR5LCAwLCBlbXB0eSwgZW1wdHksIGVtcHR5XSxcbiAgICAgICAgWzEsIDE0NSAvKiBTY2FuQ29kZS5BYm9ydCAqLywgJ0Fib3J0JywgMCAvKiBLZXlDb2RlLlVua25vd24gKi8sIGVtcHR5LCAwLCBlbXB0eSwgZW1wdHksIGVtcHR5XSxcbiAgICAgICAgWzEsIDE0NiAvKiBTY2FuQ29kZS5Qcm9wcyAqLywgJ1Byb3BzJywgMCAvKiBLZXlDb2RlLlVua25vd24gKi8sIGVtcHR5LCAwLCBlbXB0eSwgZW1wdHksIGVtcHR5XSxcbiAgICAgICAgWzEsIDE0NyAvKiBTY2FuQ29kZS5OdW1wYWRQYXJlbkxlZnQgKi8sICdOdW1wYWRQYXJlbkxlZnQnLCAwIC8qIEtleUNvZGUuVW5rbm93biAqLywgZW1wdHksIDAsIGVtcHR5LCBlbXB0eSwgZW1wdHldLFxuICAgICAgICBbMSwgMTQ4IC8qIFNjYW5Db2RlLk51bXBhZFBhcmVuUmlnaHQgKi8sICdOdW1wYWRQYXJlblJpZ2h0JywgMCAvKiBLZXlDb2RlLlVua25vd24gKi8sIGVtcHR5LCAwLCBlbXB0eSwgZW1wdHksIGVtcHR5XSxcbiAgICAgICAgWzEsIDE0OSAvKiBTY2FuQ29kZS5OdW1wYWRCYWNrc3BhY2UgKi8sICdOdW1wYWRCYWNrc3BhY2UnLCAwIC8qIEtleUNvZGUuVW5rbm93biAqLywgZW1wdHksIDAsIGVtcHR5LCBlbXB0eSwgZW1wdHldLFxuICAgICAgICBbMSwgMTUwIC8qIFNjYW5Db2RlLk51bXBhZE1lbW9yeVN0b3JlICovLCAnTnVtcGFkTWVtb3J5U3RvcmUnLCAwIC8qIEtleUNvZGUuVW5rbm93biAqLywgZW1wdHksIDAsIGVtcHR5LCBlbXB0eSwgZW1wdHldLFxuICAgICAgICBbMSwgMTUxIC8qIFNjYW5Db2RlLk51bXBhZE1lbW9yeVJlY2FsbCAqLywgJ051bXBhZE1lbW9yeVJlY2FsbCcsIDAgLyogS2V5Q29kZS5Vbmtub3duICovLCBlbXB0eSwgMCwgZW1wdHksIGVtcHR5LCBlbXB0eV0sXG4gICAgICAgIFsxLCAxNTIgLyogU2NhbkNvZGUuTnVtcGFkTWVtb3J5Q2xlYXIgKi8sICdOdW1wYWRNZW1vcnlDbGVhcicsIDAgLyogS2V5Q29kZS5Vbmtub3duICovLCBlbXB0eSwgMCwgZW1wdHksIGVtcHR5LCBlbXB0eV0sXG4gICAgICAgIFsxLCAxNTMgLyogU2NhbkNvZGUuTnVtcGFkTWVtb3J5QWRkICovLCAnTnVtcGFkTWVtb3J5QWRkJywgMCAvKiBLZXlDb2RlLlVua25vd24gKi8sIGVtcHR5LCAwLCBlbXB0eSwgZW1wdHksIGVtcHR5XSxcbiAgICAgICAgWzEsIDE1NCAvKiBTY2FuQ29kZS5OdW1wYWRNZW1vcnlTdWJ0cmFjdCAqLywgJ051bXBhZE1lbW9yeVN1YnRyYWN0JywgMCAvKiBLZXlDb2RlLlVua25vd24gKi8sIGVtcHR5LCAwLCBlbXB0eSwgZW1wdHksIGVtcHR5XSxcbiAgICAgICAgWzEsIDE1NSAvKiBTY2FuQ29kZS5OdW1wYWRDbGVhciAqLywgJ051bXBhZENsZWFyJywgMTMxIC8qIEtleUNvZGUuQ2xlYXIgKi8sICdDbGVhcicsIDEyLCAnVktfQ0xFQVInLCBlbXB0eSwgZW1wdHldLFxuICAgICAgICBbMSwgMTU2IC8qIFNjYW5Db2RlLk51bXBhZENsZWFyRW50cnkgKi8sICdOdW1wYWRDbGVhckVudHJ5JywgMCAvKiBLZXlDb2RlLlVua25vd24gKi8sIGVtcHR5LCAwLCBlbXB0eSwgZW1wdHksIGVtcHR5XSxcbiAgICAgICAgWzEsIDAgLyogU2NhbkNvZGUuTm9uZSAqLywgZW1wdHksIDUgLyogS2V5Q29kZS5DdHJsICovLCAnQ3RybCcsIDE3LCAnVktfQ09OVFJPTCcsIGVtcHR5LCBlbXB0eV0sXG4gICAgICAgIFsxLCAwIC8qIFNjYW5Db2RlLk5vbmUgKi8sIGVtcHR5LCA0IC8qIEtleUNvZGUuU2hpZnQgKi8sICdTaGlmdCcsIDE2LCAnVktfU0hJRlQnLCBlbXB0eSwgZW1wdHldLFxuICAgICAgICBbMSwgMCAvKiBTY2FuQ29kZS5Ob25lICovLCBlbXB0eSwgNiAvKiBLZXlDb2RlLkFsdCAqLywgJ0FsdCcsIDE4LCAnVktfTUVOVScsIGVtcHR5LCBlbXB0eV0sXG4gICAgICAgIFsxLCAwIC8qIFNjYW5Db2RlLk5vbmUgKi8sIGVtcHR5LCA1NyAvKiBLZXlDb2RlLk1ldGEgKi8sICdNZXRhJywgOTEsICdWS19DT01NQU5EJywgZW1wdHksIGVtcHR5XSxcbiAgICAgICAgWzEsIDE1NyAvKiBTY2FuQ29kZS5Db250cm9sTGVmdCAqLywgJ0NvbnRyb2xMZWZ0JywgNSAvKiBLZXlDb2RlLkN0cmwgKi8sIGVtcHR5LCAwLCAnVktfTENPTlRST0wnLCBlbXB0eSwgZW1wdHldLFxuICAgICAgICBbMSwgMTU4IC8qIFNjYW5Db2RlLlNoaWZ0TGVmdCAqLywgJ1NoaWZ0TGVmdCcsIDQgLyogS2V5Q29kZS5TaGlmdCAqLywgZW1wdHksIDAsICdWS19MU0hJRlQnLCBlbXB0eSwgZW1wdHldLFxuICAgICAgICBbMSwgMTU5IC8qIFNjYW5Db2RlLkFsdExlZnQgKi8sICdBbHRMZWZ0JywgNiAvKiBLZXlDb2RlLkFsdCAqLywgZW1wdHksIDAsICdWS19MTUVOVScsIGVtcHR5LCBlbXB0eV0sXG4gICAgICAgIFsxLCAxNjAgLyogU2NhbkNvZGUuTWV0YUxlZnQgKi8sICdNZXRhTGVmdCcsIDU3IC8qIEtleUNvZGUuTWV0YSAqLywgZW1wdHksIDAsICdWS19MV0lOJywgZW1wdHksIGVtcHR5XSxcbiAgICAgICAgWzEsIDE2MSAvKiBTY2FuQ29kZS5Db250cm9sUmlnaHQgKi8sICdDb250cm9sUmlnaHQnLCA1IC8qIEtleUNvZGUuQ3RybCAqLywgZW1wdHksIDAsICdWS19SQ09OVFJPTCcsIGVtcHR5LCBlbXB0eV0sXG4gICAgICAgIFsxLCAxNjIgLyogU2NhbkNvZGUuU2hpZnRSaWdodCAqLywgJ1NoaWZ0UmlnaHQnLCA0IC8qIEtleUNvZGUuU2hpZnQgKi8sIGVtcHR5LCAwLCAnVktfUlNISUZUJywgZW1wdHksIGVtcHR5XSxcbiAgICAgICAgWzEsIDE2MyAvKiBTY2FuQ29kZS5BbHRSaWdodCAqLywgJ0FsdFJpZ2h0JywgNiAvKiBLZXlDb2RlLkFsdCAqLywgZW1wdHksIDAsICdWS19STUVOVScsIGVtcHR5LCBlbXB0eV0sXG4gICAgICAgIFsxLCAxNjQgLyogU2NhbkNvZGUuTWV0YVJpZ2h0ICovLCAnTWV0YVJpZ2h0JywgNTcgLyogS2V5Q29kZS5NZXRhICovLCBlbXB0eSwgMCwgJ1ZLX1JXSU4nLCBlbXB0eSwgZW1wdHldLFxuICAgICAgICBbMSwgMTY1IC8qIFNjYW5Db2RlLkJyaWdodG5lc3NVcCAqLywgJ0JyaWdodG5lc3NVcCcsIDAgLyogS2V5Q29kZS5Vbmtub3duICovLCBlbXB0eSwgMCwgZW1wdHksIGVtcHR5LCBlbXB0eV0sXG4gICAgICAgIFsxLCAxNjYgLyogU2NhbkNvZGUuQnJpZ2h0bmVzc0Rvd24gKi8sICdCcmlnaHRuZXNzRG93bicsIDAgLyogS2V5Q29kZS5Vbmtub3duICovLCBlbXB0eSwgMCwgZW1wdHksIGVtcHR5LCBlbXB0eV0sXG4gICAgICAgIFsxLCAxNjcgLyogU2NhbkNvZGUuTWVkaWFQbGF5ICovLCAnTWVkaWFQbGF5JywgMCAvKiBLZXlDb2RlLlVua25vd24gKi8sIGVtcHR5LCAwLCBlbXB0eSwgZW1wdHksIGVtcHR5XSxcbiAgICAgICAgWzEsIDE2OCAvKiBTY2FuQ29kZS5NZWRpYVJlY29yZCAqLywgJ01lZGlhUmVjb3JkJywgMCAvKiBLZXlDb2RlLlVua25vd24gKi8sIGVtcHR5LCAwLCBlbXB0eSwgZW1wdHksIGVtcHR5XSxcbiAgICAgICAgWzEsIDE2OSAvKiBTY2FuQ29kZS5NZWRpYUZhc3RGb3J3YXJkICovLCAnTWVkaWFGYXN0Rm9yd2FyZCcsIDAgLyogS2V5Q29kZS5Vbmtub3duICovLCBlbXB0eSwgMCwgZW1wdHksIGVtcHR5LCBlbXB0eV0sXG4gICAgICAgIFsxLCAxNzAgLyogU2NhbkNvZGUuTWVkaWFSZXdpbmQgKi8sICdNZWRpYVJld2luZCcsIDAgLyogS2V5Q29kZS5Vbmtub3duICovLCBlbXB0eSwgMCwgZW1wdHksIGVtcHR5LCBlbXB0eV0sXG4gICAgICAgIFsxLCAxNzEgLyogU2NhbkNvZGUuTWVkaWFUcmFja05leHQgKi8sICdNZWRpYVRyYWNrTmV4dCcsIDEyNCAvKiBLZXlDb2RlLk1lZGlhVHJhY2tOZXh0ICovLCAnTWVkaWFUcmFja05leHQnLCAxNzYsICdWS19NRURJQV9ORVhUX1RSQUNLJywgZW1wdHksIGVtcHR5XSxcbiAgICAgICAgWzEsIDE3MiAvKiBTY2FuQ29kZS5NZWRpYVRyYWNrUHJldmlvdXMgKi8sICdNZWRpYVRyYWNrUHJldmlvdXMnLCAxMjUgLyogS2V5Q29kZS5NZWRpYVRyYWNrUHJldmlvdXMgKi8sICdNZWRpYVRyYWNrUHJldmlvdXMnLCAxNzcsICdWS19NRURJQV9QUkVWX1RSQUNLJywgZW1wdHksIGVtcHR5XSxcbiAgICAgICAgWzEsIDE3MyAvKiBTY2FuQ29kZS5NZWRpYVN0b3AgKi8sICdNZWRpYVN0b3AnLCAxMjYgLyogS2V5Q29kZS5NZWRpYVN0b3AgKi8sICdNZWRpYVN0b3AnLCAxNzgsICdWS19NRURJQV9TVE9QJywgZW1wdHksIGVtcHR5XSxcbiAgICAgICAgWzEsIDE3NCAvKiBTY2FuQ29kZS5FamVjdCAqLywgJ0VqZWN0JywgMCAvKiBLZXlDb2RlLlVua25vd24gKi8sIGVtcHR5LCAwLCBlbXB0eSwgZW1wdHksIGVtcHR5XSxcbiAgICAgICAgWzEsIDE3NSAvKiBTY2FuQ29kZS5NZWRpYVBsYXlQYXVzZSAqLywgJ01lZGlhUGxheVBhdXNlJywgMTI3IC8qIEtleUNvZGUuTWVkaWFQbGF5UGF1c2UgKi8sICdNZWRpYVBsYXlQYXVzZScsIDE3OSwgJ1ZLX01FRElBX1BMQVlfUEFVU0UnLCBlbXB0eSwgZW1wdHldLFxuICAgICAgICBbMSwgMTc2IC8qIFNjYW5Db2RlLk1lZGlhU2VsZWN0ICovLCAnTWVkaWFTZWxlY3QnLCAxMjggLyogS2V5Q29kZS5MYXVuY2hNZWRpYVBsYXllciAqLywgJ0xhdW5jaE1lZGlhUGxheWVyJywgMTgxLCAnVktfTUVESUFfTEFVTkNIX01FRElBX1NFTEVDVCcsIGVtcHR5LCBlbXB0eV0sXG4gICAgICAgIFsxLCAxNzcgLyogU2NhbkNvZGUuTGF1bmNoTWFpbCAqLywgJ0xhdW5jaE1haWwnLCAxMjkgLyogS2V5Q29kZS5MYXVuY2hNYWlsICovLCAnTGF1bmNoTWFpbCcsIDE4MCwgJ1ZLX01FRElBX0xBVU5DSF9NQUlMJywgZW1wdHksIGVtcHR5XSxcbiAgICAgICAgWzEsIDE3OCAvKiBTY2FuQ29kZS5MYXVuY2hBcHAyICovLCAnTGF1bmNoQXBwMicsIDEzMCAvKiBLZXlDb2RlLkxhdW5jaEFwcDIgKi8sICdMYXVuY2hBcHAyJywgMTgzLCAnVktfTUVESUFfTEFVTkNIX0FQUDInLCBlbXB0eSwgZW1wdHldLFxuICAgICAgICBbMSwgMTc5IC8qIFNjYW5Db2RlLkxhdW5jaEFwcDEgKi8sICdMYXVuY2hBcHAxJywgMCAvKiBLZXlDb2RlLlVua25vd24gKi8sIGVtcHR5LCAwLCAnVktfTUVESUFfTEFVTkNIX0FQUDEnLCBlbXB0eSwgZW1wdHldLFxuICAgICAgICBbMSwgMTgwIC8qIFNjYW5Db2RlLlNlbGVjdFRhc2sgKi8sICdTZWxlY3RUYXNrJywgMCAvKiBLZXlDb2RlLlVua25vd24gKi8sIGVtcHR5LCAwLCBlbXB0eSwgZW1wdHksIGVtcHR5XSxcbiAgICAgICAgWzEsIDE4MSAvKiBTY2FuQ29kZS5MYXVuY2hTY3JlZW5TYXZlciAqLywgJ0xhdW5jaFNjcmVlblNhdmVyJywgMCAvKiBLZXlDb2RlLlVua25vd24gKi8sIGVtcHR5LCAwLCBlbXB0eSwgZW1wdHksIGVtcHR5XSxcbiAgICAgICAgWzEsIDE4MiAvKiBTY2FuQ29kZS5Ccm93c2VyU2VhcmNoICovLCAnQnJvd3NlclNlYXJjaCcsIDEyMCAvKiBLZXlDb2RlLkJyb3dzZXJTZWFyY2ggKi8sICdCcm93c2VyU2VhcmNoJywgMTcwLCAnVktfQlJPV1NFUl9TRUFSQ0gnLCBlbXB0eSwgZW1wdHldLFxuICAgICAgICBbMSwgMTgzIC8qIFNjYW5Db2RlLkJyb3dzZXJIb21lICovLCAnQnJvd3NlckhvbWUnLCAxMjEgLyogS2V5Q29kZS5Ccm93c2VySG9tZSAqLywgJ0Jyb3dzZXJIb21lJywgMTcyLCAnVktfQlJPV1NFUl9IT01FJywgZW1wdHksIGVtcHR5XSxcbiAgICAgICAgWzEsIDE4NCAvKiBTY2FuQ29kZS5Ccm93c2VyQmFjayAqLywgJ0Jyb3dzZXJCYWNrJywgMTIyIC8qIEtleUNvZGUuQnJvd3NlckJhY2sgKi8sICdCcm93c2VyQmFjaycsIDE2NiwgJ1ZLX0JST1dTRVJfQkFDSycsIGVtcHR5LCBlbXB0eV0sXG4gICAgICAgIFsxLCAxODUgLyogU2NhbkNvZGUuQnJvd3NlckZvcndhcmQgKi8sICdCcm93c2VyRm9yd2FyZCcsIDEyMyAvKiBLZXlDb2RlLkJyb3dzZXJGb3J3YXJkICovLCAnQnJvd3NlckZvcndhcmQnLCAxNjcsICdWS19CUk9XU0VSX0ZPUldBUkQnLCBlbXB0eSwgZW1wdHldLFxuICAgICAgICBbMSwgMTg2IC8qIFNjYW5Db2RlLkJyb3dzZXJTdG9wICovLCAnQnJvd3NlclN0b3AnLCAwIC8qIEtleUNvZGUuVW5rbm93biAqLywgZW1wdHksIDAsICdWS19CUk9XU0VSX1NUT1AnLCBlbXB0eSwgZW1wdHldLFxuICAgICAgICBbMSwgMTg3IC8qIFNjYW5Db2RlLkJyb3dzZXJSZWZyZXNoICovLCAnQnJvd3NlclJlZnJlc2gnLCAwIC8qIEtleUNvZGUuVW5rbm93biAqLywgZW1wdHksIDAsICdWS19CUk9XU0VSX1JFRlJFU0gnLCBlbXB0eSwgZW1wdHldLFxuICAgICAgICBbMSwgMTg4IC8qIFNjYW5Db2RlLkJyb3dzZXJGYXZvcml0ZXMgKi8sICdCcm93c2VyRmF2b3JpdGVzJywgMCAvKiBLZXlDb2RlLlVua25vd24gKi8sIGVtcHR5LCAwLCAnVktfQlJPV1NFUl9GQVZPUklURVMnLCBlbXB0eSwgZW1wdHldLFxuICAgICAgICBbMSwgMTg5IC8qIFNjYW5Db2RlLlpvb21Ub2dnbGUgKi8sICdab29tVG9nZ2xlJywgMCAvKiBLZXlDb2RlLlVua25vd24gKi8sIGVtcHR5LCAwLCBlbXB0eSwgZW1wdHksIGVtcHR5XSxcbiAgICAgICAgWzEsIDE5MCAvKiBTY2FuQ29kZS5NYWlsUmVwbHkgKi8sICdNYWlsUmVwbHknLCAwIC8qIEtleUNvZGUuVW5rbm93biAqLywgZW1wdHksIDAsIGVtcHR5LCBlbXB0eSwgZW1wdHldLFxuICAgICAgICBbMSwgMTkxIC8qIFNjYW5Db2RlLk1haWxGb3J3YXJkICovLCAnTWFpbEZvcndhcmQnLCAwIC8qIEtleUNvZGUuVW5rbm93biAqLywgZW1wdHksIDAsIGVtcHR5LCBlbXB0eSwgZW1wdHldLFxuICAgICAgICBbMSwgMTkyIC8qIFNjYW5Db2RlLk1haWxTZW5kICovLCAnTWFpbFNlbmQnLCAwIC8qIEtleUNvZGUuVW5rbm93biAqLywgZW1wdHksIDAsIGVtcHR5LCBlbXB0eSwgZW1wdHldLFxuICAgICAgICAvLyBTZWUgaHR0cHM6Ly9saXN0cy53My5vcmcvQXJjaGl2ZXMvUHVibGljL3d3dy1kb20vMjAxMEp1bFNlcC9hdHQtMDE4Mi9rZXlDb2RlLXNwZWMuaHRtbFxuICAgICAgICAvLyBJZiBhbiBJbnB1dCBNZXRob2QgRWRpdG9yIGlzIHByb2Nlc3Npbmcga2V5IGlucHV0IGFuZCB0aGUgZXZlbnQgaXMga2V5ZG93biwgcmV0dXJuIDIyOS5cbiAgICAgICAgWzEsIDAgLyogU2NhbkNvZGUuTm9uZSAqLywgZW1wdHksIDExNCAvKiBLZXlDb2RlLktFWV9JTl9DT01QT1NJVElPTiAqLywgJ0tleUluQ29tcG9zaXRpb24nLCAyMjksIGVtcHR5LCBlbXB0eSwgZW1wdHldLFxuICAgICAgICBbMSwgMCAvKiBTY2FuQ29kZS5Ob25lICovLCBlbXB0eSwgMTE2IC8qIEtleUNvZGUuQUJOVF9DMiAqLywgJ0FCTlRfQzInLCAxOTQsICdWS19BQk5UX0MyJywgZW1wdHksIGVtcHR5XSxcbiAgICAgICAgWzEsIDAgLyogU2NhbkNvZGUuTm9uZSAqLywgZW1wdHksIDk2IC8qIEtleUNvZGUuT0VNXzggKi8sICdPRU1fOCcsIDIyMywgJ1ZLX09FTV84JywgZW1wdHksIGVtcHR5XSxcbiAgICAgICAgWzEsIDAgLyogU2NhbkNvZGUuTm9uZSAqLywgZW1wdHksIDAgLyogS2V5Q29kZS5Vbmtub3duICovLCBlbXB0eSwgMCwgJ1ZLX0tBTkEnLCBlbXB0eSwgZW1wdHldLFxuICAgICAgICBbMSwgMCAvKiBTY2FuQ29kZS5Ob25lICovLCBlbXB0eSwgMCAvKiBLZXlDb2RlLlVua25vd24gKi8sIGVtcHR5LCAwLCAnVktfSEFOR1VMJywgZW1wdHksIGVtcHR5XSxcbiAgICAgICAgWzEsIDAgLyogU2NhbkNvZGUuTm9uZSAqLywgZW1wdHksIDAgLyogS2V5Q29kZS5Vbmtub3duICovLCBlbXB0eSwgMCwgJ1ZLX0pVTkpBJywgZW1wdHksIGVtcHR5XSxcbiAgICAgICAgWzEsIDAgLyogU2NhbkNvZGUuTm9uZSAqLywgZW1wdHksIDAgLyogS2V5Q29kZS5Vbmtub3duICovLCBlbXB0eSwgMCwgJ1ZLX0ZJTkFMJywgZW1wdHksIGVtcHR5XSxcbiAgICAgICAgWzEsIDAgLyogU2NhbkNvZGUuTm9uZSAqLywgZW1wdHksIDAgLyogS2V5Q29kZS5Vbmtub3duICovLCBlbXB0eSwgMCwgJ1ZLX0hBTkpBJywgZW1wdHksIGVtcHR5XSxcbiAgICAgICAgWzEsIDAgLyogU2NhbkNvZGUuTm9uZSAqLywgZW1wdHksIDAgLyogS2V5Q29kZS5Vbmtub3duICovLCBlbXB0eSwgMCwgJ1ZLX0tBTkpJJywgZW1wdHksIGVtcHR5XSxcbiAgICAgICAgWzEsIDAgLyogU2NhbkNvZGUuTm9uZSAqLywgZW1wdHksIDAgLyogS2V5Q29kZS5Vbmtub3duICovLCBlbXB0eSwgMCwgJ1ZLX0NPTlZFUlQnLCBlbXB0eSwgZW1wdHldLFxuICAgICAgICBbMSwgMCAvKiBTY2FuQ29kZS5Ob25lICovLCBlbXB0eSwgMCAvKiBLZXlDb2RlLlVua25vd24gKi8sIGVtcHR5LCAwLCAnVktfTk9OQ09OVkVSVCcsIGVtcHR5LCBlbXB0eV0sXG4gICAgICAgIFsxLCAwIC8qIFNjYW5Db2RlLk5vbmUgKi8sIGVtcHR5LCAwIC8qIEtleUNvZGUuVW5rbm93biAqLywgZW1wdHksIDAsICdWS19BQ0NFUFQnLCBlbXB0eSwgZW1wdHldLFxuICAgICAgICBbMSwgMCAvKiBTY2FuQ29kZS5Ob25lICovLCBlbXB0eSwgMCAvKiBLZXlDb2RlLlVua25vd24gKi8sIGVtcHR5LCAwLCAnVktfTU9ERUNIQU5HRScsIGVtcHR5LCBlbXB0eV0sXG4gICAgICAgIFsxLCAwIC8qIFNjYW5Db2RlLk5vbmUgKi8sIGVtcHR5LCAwIC8qIEtleUNvZGUuVW5rbm93biAqLywgZW1wdHksIDAsICdWS19TRUxFQ1QnLCBlbXB0eSwgZW1wdHldLFxuICAgICAgICBbMSwgMCAvKiBTY2FuQ29kZS5Ob25lICovLCBlbXB0eSwgMCAvKiBLZXlDb2RlLlVua25vd24gKi8sIGVtcHR5LCAwLCAnVktfUFJJTlQnLCBlbXB0eSwgZW1wdHldLFxuICAgICAgICBbMSwgMCAvKiBTY2FuQ29kZS5Ob25lICovLCBlbXB0eSwgMCAvKiBLZXlDb2RlLlVua25vd24gKi8sIGVtcHR5LCAwLCAnVktfRVhFQ1VURScsIGVtcHR5LCBlbXB0eV0sXG4gICAgICAgIFsxLCAwIC8qIFNjYW5Db2RlLk5vbmUgKi8sIGVtcHR5LCAwIC8qIEtleUNvZGUuVW5rbm93biAqLywgZW1wdHksIDAsICdWS19TTkFQU0hPVCcsIGVtcHR5LCBlbXB0eV0sXG4gICAgICAgIFsxLCAwIC8qIFNjYW5Db2RlLk5vbmUgKi8sIGVtcHR5LCAwIC8qIEtleUNvZGUuVW5rbm93biAqLywgZW1wdHksIDAsICdWS19IRUxQJywgZW1wdHksIGVtcHR5XSxcbiAgICAgICAgWzEsIDAgLyogU2NhbkNvZGUuTm9uZSAqLywgZW1wdHksIDAgLyogS2V5Q29kZS5Vbmtub3duICovLCBlbXB0eSwgMCwgJ1ZLX0FQUFMnLCBlbXB0eSwgZW1wdHldLFxuICAgICAgICBbMSwgMCAvKiBTY2FuQ29kZS5Ob25lICovLCBlbXB0eSwgMCAvKiBLZXlDb2RlLlVua25vd24gKi8sIGVtcHR5LCAwLCAnVktfUFJPQ0VTU0tFWScsIGVtcHR5LCBlbXB0eV0sXG4gICAgICAgIFsxLCAwIC8qIFNjYW5Db2RlLk5vbmUgKi8sIGVtcHR5LCAwIC8qIEtleUNvZGUuVW5rbm93biAqLywgZW1wdHksIDAsICdWS19QQUNLRVQnLCBlbXB0eSwgZW1wdHldLFxuICAgICAgICBbMSwgMCAvKiBTY2FuQ29kZS5Ob25lICovLCBlbXB0eSwgMCAvKiBLZXlDb2RlLlVua25vd24gKi8sIGVtcHR5LCAwLCAnVktfREJFX1NCQ1NDSEFSJywgZW1wdHksIGVtcHR5XSxcbiAgICAgICAgWzEsIDAgLyogU2NhbkNvZGUuTm9uZSAqLywgZW1wdHksIDAgLyogS2V5Q29kZS5Vbmtub3duICovLCBlbXB0eSwgMCwgJ1ZLX0RCRV9EQkNTQ0hBUicsIGVtcHR5LCBlbXB0eV0sXG4gICAgICAgIFsxLCAwIC8qIFNjYW5Db2RlLk5vbmUgKi8sIGVtcHR5LCAwIC8qIEtleUNvZGUuVW5rbm93biAqLywgZW1wdHksIDAsICdWS19BVFROJywgZW1wdHksIGVtcHR5XSxcbiAgICAgICAgWzEsIDAgLyogU2NhbkNvZGUuTm9uZSAqLywgZW1wdHksIDAgLyogS2V5Q29kZS5Vbmtub3duICovLCBlbXB0eSwgMCwgJ1ZLX0NSU0VMJywgZW1wdHksIGVtcHR5XSxcbiAgICAgICAgWzEsIDAgLyogU2NhbkNvZGUuTm9uZSAqLywgZW1wdHksIDAgLyogS2V5Q29kZS5Vbmtub3duICovLCBlbXB0eSwgMCwgJ1ZLX0VYU0VMJywgZW1wdHksIGVtcHR5XSxcbiAgICAgICAgWzEsIDAgLyogU2NhbkNvZGUuTm9uZSAqLywgZW1wdHksIDAgLyogS2V5Q29kZS5Vbmtub3duICovLCBlbXB0eSwgMCwgJ1ZLX0VSRU9GJywgZW1wdHksIGVtcHR5XSxcbiAgICAgICAgWzEsIDAgLyogU2NhbkNvZGUuTm9uZSAqLywgZW1wdHksIDAgLyogS2V5Q29kZS5Vbmtub3duICovLCBlbXB0eSwgMCwgJ1ZLX1BMQVknLCBlbXB0eSwgZW1wdHldLFxuICAgICAgICBbMSwgMCAvKiBTY2FuQ29kZS5Ob25lICovLCBlbXB0eSwgMCAvKiBLZXlDb2RlLlVua25vd24gKi8sIGVtcHR5LCAwLCAnVktfWk9PTScsIGVtcHR5LCBlbXB0eV0sXG4gICAgICAgIFsxLCAwIC8qIFNjYW5Db2RlLk5vbmUgKi8sIGVtcHR5LCAwIC8qIEtleUNvZGUuVW5rbm93biAqLywgZW1wdHksIDAsICdWS19OT05BTUUnLCBlbXB0eSwgZW1wdHldLFxuICAgICAgICBbMSwgMCAvKiBTY2FuQ29kZS5Ob25lICovLCBlbXB0eSwgMCAvKiBLZXlDb2RlLlVua25vd24gKi8sIGVtcHR5LCAwLCAnVktfUEExJywgZW1wdHksIGVtcHR5XSxcbiAgICAgICAgWzEsIDAgLyogU2NhbkNvZGUuTm9uZSAqLywgZW1wdHksIDAgLyogS2V5Q29kZS5Vbmtub3duICovLCBlbXB0eSwgMCwgJ1ZLX09FTV9DTEVBUicsIGVtcHR5LCBlbXB0eV0sXG4gICAgXTtcbiAgICBjb25zdCBzZWVuS2V5Q29kZSA9IFtdO1xuICAgIGNvbnN0IHNlZW5TY2FuQ29kZSA9IFtdO1xuICAgIGZvciAoY29uc3QgbWFwcGluZyBvZiBtYXBwaW5ncykge1xuICAgICAgICBjb25zdCBbaW1tdXRhYmxlLCBzY2FuQ29kZSwgc2NhbkNvZGVTdHIsIGtleUNvZGUsIGtleUNvZGVTdHIsIGV2ZW50S2V5Q29kZSwgdmtleSwgdXNVc2VyU2V0dGluZ3NMYWJlbCwgZ2VuZXJhbFVzZXJTZXR0aW5nc0xhYmVsXSA9IG1hcHBpbmc7XG4gICAgICAgIGlmICghc2VlblNjYW5Db2RlW3NjYW5Db2RlXSkge1xuICAgICAgICAgICAgc2VlblNjYW5Db2RlW3NjYW5Db2RlXSA9IHRydWU7XG4gICAgICAgICAgICBzY2FuQ29kZUludFRvU3RyW3NjYW5Db2RlXSA9IHNjYW5Db2RlU3RyO1xuICAgICAgICAgICAgc2NhbkNvZGVTdHJUb0ludFtzY2FuQ29kZVN0cl0gPSBzY2FuQ29kZTtcbiAgICAgICAgICAgIHNjYW5Db2RlTG93ZXJDYXNlU3RyVG9JbnRbc2NhbkNvZGVTdHIudG9Mb3dlckNhc2UoKV0gPSBzY2FuQ29kZTtcbiAgICAgICAgICAgIGlmIChpbW11dGFibGUpIHtcbiAgICAgICAgICAgICAgICBJTU1VVEFCTEVfQ09ERV9UT19LRVlfQ09ERVtzY2FuQ29kZV0gPSBrZXlDb2RlO1xuICAgICAgICAgICAgICAgIGlmICgoa2V5Q29kZSAhPT0gMCAvKiBLZXlDb2RlLlVua25vd24gKi8pXG4gICAgICAgICAgICAgICAgICAgICYmIChrZXlDb2RlICE9PSAzIC8qIEtleUNvZGUuRW50ZXIgKi8pXG4gICAgICAgICAgICAgICAgICAgICYmIChrZXlDb2RlICE9PSA1IC8qIEtleUNvZGUuQ3RybCAqLylcbiAgICAgICAgICAgICAgICAgICAgJiYgKGtleUNvZGUgIT09IDQgLyogS2V5Q29kZS5TaGlmdCAqLylcbiAgICAgICAgICAgICAgICAgICAgJiYgKGtleUNvZGUgIT09IDYgLyogS2V5Q29kZS5BbHQgKi8pXG4gICAgICAgICAgICAgICAgICAgICYmIChrZXlDb2RlICE9PSA1NyAvKiBLZXlDb2RlLk1ldGEgKi8pKSB7XG4gICAgICAgICAgICAgICAgICAgIElNTVVUQUJMRV9LRVlfQ09ERV9UT19DT0RFW2tleUNvZGVdID0gc2NhbkNvZGU7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGlmICghc2VlbktleUNvZGVba2V5Q29kZV0pIHtcbiAgICAgICAgICAgIHNlZW5LZXlDb2RlW2tleUNvZGVdID0gdHJ1ZTtcbiAgICAgICAgICAgIGlmICgha2V5Q29kZVN0cikge1xuICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihgU3RyaW5nIHJlcHJlc2VudGF0aW9uIG1pc3NpbmcgZm9yIGtleSBjb2RlICR7a2V5Q29kZX0gYXJvdW5kIHNjYW4gY29kZSAke3NjYW5Db2RlU3RyfWApO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdWlNYXAuZGVmaW5lKGtleUNvZGUsIGtleUNvZGVTdHIpO1xuICAgICAgICAgICAgdXNlclNldHRpbmdzVVNNYXAuZGVmaW5lKGtleUNvZGUsIHVzVXNlclNldHRpbmdzTGFiZWwgfHwga2V5Q29kZVN0cik7XG4gICAgICAgICAgICB1c2VyU2V0dGluZ3NHZW5lcmFsTWFwLmRlZmluZShrZXlDb2RlLCBnZW5lcmFsVXNlclNldHRpbmdzTGFiZWwgfHwgdXNVc2VyU2V0dGluZ3NMYWJlbCB8fCBrZXlDb2RlU3RyKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoZXZlbnRLZXlDb2RlKSB7XG4gICAgICAgICAgICBFVkVOVF9LRVlfQ09ERV9NQVBbZXZlbnRLZXlDb2RlXSA9IGtleUNvZGU7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHZrZXkpIHtcbiAgICAgICAgICAgIE5BVElWRV9XSU5ET1dTX0tFWV9DT0RFX1RPX0tFWV9DT0RFW3ZrZXldID0ga2V5Q29kZTtcbiAgICAgICAgfVxuICAgIH1cbiAgICAvLyBNYW51YWxseSBhZGRlZCBkdWUgdG8gdGhlIGV4Y2x1c2lvbiBhYm92ZSAoZHVlIHRvIGR1cGxpY2F0aW9uIHdpdGggTnVtcGFkRW50ZXIpXG4gICAgSU1NVVRBQkxFX0tFWV9DT0RFX1RPX0NPREVbMyAvKiBLZXlDb2RlLkVudGVyICovXSA9IDQ2IC8qIFNjYW5Db2RlLkVudGVyICovO1xufSkoKTtcbmV4cG9ydCB2YXIgS2V5Q29kZVV0aWxzO1xuKGZ1bmN0aW9uIChLZXlDb2RlVXRpbHMpIHtcbiAgICBmdW5jdGlvbiB0b1N0cmluZyhrZXlDb2RlKSB7XG4gICAgICAgIHJldHVybiB1aU1hcC5rZXlDb2RlVG9TdHIoa2V5Q29kZSk7XG4gICAgfVxuICAgIEtleUNvZGVVdGlscy50b1N0cmluZyA9IHRvU3RyaW5nO1xuICAgIGZ1bmN0aW9uIGZyb21TdHJpbmcoa2V5KSB7XG4gICAgICAgIHJldHVybiB1aU1hcC5zdHJUb0tleUNvZGUoa2V5KTtcbiAgICB9XG4gICAgS2V5Q29kZVV0aWxzLmZyb21TdHJpbmcgPSBmcm9tU3RyaW5nO1xuICAgIGZ1bmN0aW9uIHRvVXNlclNldHRpbmdzVVMoa2V5Q29kZSkge1xuICAgICAgICByZXR1cm4gdXNlclNldHRpbmdzVVNNYXAua2V5Q29kZVRvU3RyKGtleUNvZGUpO1xuICAgIH1cbiAgICBLZXlDb2RlVXRpbHMudG9Vc2VyU2V0dGluZ3NVUyA9IHRvVXNlclNldHRpbmdzVVM7XG4gICAgZnVuY3Rpb24gdG9Vc2VyU2V0dGluZ3NHZW5lcmFsKGtleUNvZGUpIHtcbiAgICAgICAgcmV0dXJuIHVzZXJTZXR0aW5nc0dlbmVyYWxNYXAua2V5Q29kZVRvU3RyKGtleUNvZGUpO1xuICAgIH1cbiAgICBLZXlDb2RlVXRpbHMudG9Vc2VyU2V0dGluZ3NHZW5lcmFsID0gdG9Vc2VyU2V0dGluZ3NHZW5lcmFsO1xuICAgIGZ1bmN0aW9uIGZyb21Vc2VyU2V0dGluZ3Moa2V5KSB7XG4gICAgICAgIHJldHVybiB1c2VyU2V0dGluZ3NVU01hcC5zdHJUb0tleUNvZGUoa2V5KSB8fCB1c2VyU2V0dGluZ3NHZW5lcmFsTWFwLnN0clRvS2V5Q29kZShrZXkpO1xuICAgIH1cbiAgICBLZXlDb2RlVXRpbHMuZnJvbVVzZXJTZXR0aW5ncyA9IGZyb21Vc2VyU2V0dGluZ3M7XG4gICAgZnVuY3Rpb24gdG9FbGVjdHJvbkFjY2VsZXJhdG9yKGtleUNvZGUpIHtcbiAgICAgICAgaWYgKGtleUNvZGUgPj0gOTggLyogS2V5Q29kZS5OdW1wYWQwICovICYmIGtleUNvZGUgPD0gMTEzIC8qIEtleUNvZGUuTnVtcGFkRGl2aWRlICovKSB7XG4gICAgICAgICAgICAvLyBbRWxlY3Ryb24gQWNjZWxlcmF0b3JzXSBFbGVjdHJvbiBpcyBhYmxlIHRvIHBhcnNlIG51bXBhZCBrZXlzLCBidXQgdW5mb3J0dW5hdGVseSBpdFxuICAgICAgICAgICAgLy8gcmVuZGVycyB0aGVtIGp1c3QgYXMgcmVndWxhciBrZXlzIGluIG1lbnVzLiBGb3IgZXhhbXBsZSwgbnVtMCBpcyByZW5kZXJlZCBhcyBcIjBcIixcbiAgICAgICAgICAgIC8vIG51bWRpdiBpcyByZW5kZXJlZCBhcyBcIi9cIiwgbnVtc3ViIGlzIHJlbmRlcmVkIGFzIFwiLVwiLlxuICAgICAgICAgICAgLy9cbiAgICAgICAgICAgIC8vIFRoaXMgY2FuIGxlYWQgdG8gaW5jcmVkaWJsZSBjb25mdXNpb24sIGFzIGl0IG1ha2VzIG51bXBhZCBiYXNlZCBrZXliaW5kaW5ncyBpbmRpc3Rpbmd1aXNoYWJsZVxuICAgICAgICAgICAgLy8gZnJvbSBrZXliaW5kaW5ncyBiYXNlZCBvbiByZWd1bGFyIGtleXMuXG4gICAgICAgICAgICAvL1xuICAgICAgICAgICAgLy8gV2UgdGhlcmVmb3JlIG5lZWQgdG8gZmFsbCBiYWNrIHRvIGN1c3RvbSByZW5kZXJpbmcgZm9yIG51bXBhZCBrZXlzLlxuICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgIH1cbiAgICAgICAgc3dpdGNoIChrZXlDb2RlKSB7XG4gICAgICAgICAgICBjYXNlIDE2IC8qIEtleUNvZGUuVXBBcnJvdyAqLzpcbiAgICAgICAgICAgICAgICByZXR1cm4gJ1VwJztcbiAgICAgICAgICAgIGNhc2UgMTggLyogS2V5Q29kZS5Eb3duQXJyb3cgKi86XG4gICAgICAgICAgICAgICAgcmV0dXJuICdEb3duJztcbiAgICAgICAgICAgIGNhc2UgMTUgLyogS2V5Q29kZS5MZWZ0QXJyb3cgKi86XG4gICAgICAgICAgICAgICAgcmV0dXJuICdMZWZ0JztcbiAgICAgICAgICAgIGNhc2UgMTcgLyogS2V5Q29kZS5SaWdodEFycm93ICovOlxuICAgICAgICAgICAgICAgIHJldHVybiAnUmlnaHQnO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB1aU1hcC5rZXlDb2RlVG9TdHIoa2V5Q29kZSk7XG4gICAgfVxuICAgIEtleUNvZGVVdGlscy50b0VsZWN0cm9uQWNjZWxlcmF0b3IgPSB0b0VsZWN0cm9uQWNjZWxlcmF0b3I7XG59KShLZXlDb2RlVXRpbHMgfHwgKEtleUNvZGVVdGlscyA9IHt9KSk7XG5leHBvcnQgZnVuY3Rpb24gS2V5Q2hvcmQoZmlyc3RQYXJ0LCBzZWNvbmRQYXJ0KSB7XG4gICAgY29uc3QgY2hvcmRQYXJ0ID0gKChzZWNvbmRQYXJ0ICYgMHgwMDAwRkZGRikgPDwgMTYpID4+PiAwO1xuICAgIHJldHVybiAoZmlyc3RQYXJ0IHwgY2hvcmRQYXJ0KSA+Pj4gMDtcbn1cbiIsICIvKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICogIENvcHlyaWdodCAoYykgTWljcm9zb2Z0IENvcnBvcmF0aW9uLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICogIExpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgTGljZW5zZS4gU2VlIExpY2Vuc2UudHh0IGluIHRoZSBwcm9qZWN0IHJvb3QgZm9yIGxpY2Vuc2UgaW5mb3JtYXRpb24uXG4gKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKi9cbmltcG9ydCB7IFBvc2l0aW9uIH0gZnJvbSAnLi9wb3NpdGlvbi5qcyc7XG5pbXBvcnQgeyBSYW5nZSB9IGZyb20gJy4vcmFuZ2UuanMnO1xuLyoqXG4gKiBBIHNlbGVjdGlvbiBpbiB0aGUgZWRpdG9yLlxuICogVGhlIHNlbGVjdGlvbiBpcyBhIHJhbmdlIHRoYXQgaGFzIGFuIG9yaWVudGF0aW9uLlxuICovXG5leHBvcnQgY2xhc3MgU2VsZWN0aW9uIGV4dGVuZHMgUmFuZ2Uge1xuICAgIGNvbnN0cnVjdG9yKHNlbGVjdGlvblN0YXJ0TGluZU51bWJlciwgc2VsZWN0aW9uU3RhcnRDb2x1bW4sIHBvc2l0aW9uTGluZU51bWJlciwgcG9zaXRpb25Db2x1bW4pIHtcbiAgICAgICAgc3VwZXIoc2VsZWN0aW9uU3RhcnRMaW5lTnVtYmVyLCBzZWxlY3Rpb25TdGFydENvbHVtbiwgcG9zaXRpb25MaW5lTnVtYmVyLCBwb3NpdGlvbkNvbHVtbik7XG4gICAgICAgIHRoaXMuc2VsZWN0aW9uU3RhcnRMaW5lTnVtYmVyID0gc2VsZWN0aW9uU3RhcnRMaW5lTnVtYmVyO1xuICAgICAgICB0aGlzLnNlbGVjdGlvblN0YXJ0Q29sdW1uID0gc2VsZWN0aW9uU3RhcnRDb2x1bW47XG4gICAgICAgIHRoaXMucG9zaXRpb25MaW5lTnVtYmVyID0gcG9zaXRpb25MaW5lTnVtYmVyO1xuICAgICAgICB0aGlzLnBvc2l0aW9uQ29sdW1uID0gcG9zaXRpb25Db2x1bW47XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFRyYW5zZm9ybSB0byBhIGh1bWFuLXJlYWRhYmxlIHJlcHJlc2VudGF0aW9uLlxuICAgICAqL1xuICAgIHRvU3RyaW5nKCkge1xuICAgICAgICByZXR1cm4gJ1snICsgdGhpcy5zZWxlY3Rpb25TdGFydExpbmVOdW1iZXIgKyAnLCcgKyB0aGlzLnNlbGVjdGlvblN0YXJ0Q29sdW1uICsgJyAtPiAnICsgdGhpcy5wb3NpdGlvbkxpbmVOdW1iZXIgKyAnLCcgKyB0aGlzLnBvc2l0aW9uQ29sdW1uICsgJ10nO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBUZXN0IGlmIGVxdWFscyBvdGhlciBzZWxlY3Rpb24uXG4gICAgICovXG4gICAgZXF1YWxzU2VsZWN0aW9uKG90aGVyKSB7XG4gICAgICAgIHJldHVybiAoU2VsZWN0aW9uLnNlbGVjdGlvbnNFcXVhbCh0aGlzLCBvdGhlcikpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBUZXN0IGlmIHRoZSB0d28gc2VsZWN0aW9ucyBhcmUgZXF1YWwuXG4gICAgICovXG4gICAgc3RhdGljIHNlbGVjdGlvbnNFcXVhbChhLCBiKSB7XG4gICAgICAgIHJldHVybiAoYS5zZWxlY3Rpb25TdGFydExpbmVOdW1iZXIgPT09IGIuc2VsZWN0aW9uU3RhcnRMaW5lTnVtYmVyICYmXG4gICAgICAgICAgICBhLnNlbGVjdGlvblN0YXJ0Q29sdW1uID09PSBiLnNlbGVjdGlvblN0YXJ0Q29sdW1uICYmXG4gICAgICAgICAgICBhLnBvc2l0aW9uTGluZU51bWJlciA9PT0gYi5wb3NpdGlvbkxpbmVOdW1iZXIgJiZcbiAgICAgICAgICAgIGEucG9zaXRpb25Db2x1bW4gPT09IGIucG9zaXRpb25Db2x1bW4pO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBHZXQgZGlyZWN0aW9ucyAoTFRSIG9yIFJUTCkuXG4gICAgICovXG4gICAgZ2V0RGlyZWN0aW9uKCkge1xuICAgICAgICBpZiAodGhpcy5zZWxlY3Rpb25TdGFydExpbmVOdW1iZXIgPT09IHRoaXMuc3RhcnRMaW5lTnVtYmVyICYmIHRoaXMuc2VsZWN0aW9uU3RhcnRDb2x1bW4gPT09IHRoaXMuc3RhcnRDb2x1bW4pIHtcbiAgICAgICAgICAgIHJldHVybiAwIC8qIFNlbGVjdGlvbkRpcmVjdGlvbi5MVFIgKi87XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIDEgLyogU2VsZWN0aW9uRGlyZWN0aW9uLlJUTCAqLztcbiAgICB9XG4gICAgLyoqXG4gICAgICogQ3JlYXRlIGEgbmV3IHNlbGVjdGlvbiB3aXRoIGEgZGlmZmVyZW50IGBwb3NpdGlvbkxpbmVOdW1iZXJgIGFuZCBgcG9zaXRpb25Db2x1bW5gLlxuICAgICAqL1xuICAgIHNldEVuZFBvc2l0aW9uKGVuZExpbmVOdW1iZXIsIGVuZENvbHVtbikge1xuICAgICAgICBpZiAodGhpcy5nZXREaXJlY3Rpb24oKSA9PT0gMCAvKiBTZWxlY3Rpb25EaXJlY3Rpb24uTFRSICovKSB7XG4gICAgICAgICAgICByZXR1cm4gbmV3IFNlbGVjdGlvbih0aGlzLnN0YXJ0TGluZU51bWJlciwgdGhpcy5zdGFydENvbHVtbiwgZW5kTGluZU51bWJlciwgZW5kQ29sdW1uKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbmV3IFNlbGVjdGlvbihlbmRMaW5lTnVtYmVyLCBlbmRDb2x1bW4sIHRoaXMuc3RhcnRMaW5lTnVtYmVyLCB0aGlzLnN0YXJ0Q29sdW1uKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogR2V0IHRoZSBwb3NpdGlvbiBhdCBgcG9zaXRpb25MaW5lTnVtYmVyYCBhbmQgYHBvc2l0aW9uQ29sdW1uYC5cbiAgICAgKi9cbiAgICBnZXRQb3NpdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBQb3NpdGlvbih0aGlzLnBvc2l0aW9uTGluZU51bWJlciwgdGhpcy5wb3NpdGlvbkNvbHVtbik7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEdldCB0aGUgcG9zaXRpb24gYXQgdGhlIHN0YXJ0IG9mIHRoZSBzZWxlY3Rpb24uXG4gICAgKi9cbiAgICBnZXRTZWxlY3Rpb25TdGFydCgpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBQb3NpdGlvbih0aGlzLnNlbGVjdGlvblN0YXJ0TGluZU51bWJlciwgdGhpcy5zZWxlY3Rpb25TdGFydENvbHVtbik7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIENyZWF0ZSBhIG5ldyBzZWxlY3Rpb24gd2l0aCBhIGRpZmZlcmVudCBgc2VsZWN0aW9uU3RhcnRMaW5lTnVtYmVyYCBhbmQgYHNlbGVjdGlvblN0YXJ0Q29sdW1uYC5cbiAgICAgKi9cbiAgICBzZXRTdGFydFBvc2l0aW9uKHN0YXJ0TGluZU51bWJlciwgc3RhcnRDb2x1bW4pIHtcbiAgICAgICAgaWYgKHRoaXMuZ2V0RGlyZWN0aW9uKCkgPT09IDAgLyogU2VsZWN0aW9uRGlyZWN0aW9uLkxUUiAqLykge1xuICAgICAgICAgICAgcmV0dXJuIG5ldyBTZWxlY3Rpb24oc3RhcnRMaW5lTnVtYmVyLCBzdGFydENvbHVtbiwgdGhpcy5lbmRMaW5lTnVtYmVyLCB0aGlzLmVuZENvbHVtbik7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG5ldyBTZWxlY3Rpb24odGhpcy5lbmRMaW5lTnVtYmVyLCB0aGlzLmVuZENvbHVtbiwgc3RhcnRMaW5lTnVtYmVyLCBzdGFydENvbHVtbik7XG4gICAgfVxuICAgIC8vIC0tLS1cbiAgICAvKipcbiAgICAgKiBDcmVhdGUgYSBgU2VsZWN0aW9uYCBmcm9tIG9uZSBvciB0d28gcG9zaXRpb25zXG4gICAgICovXG4gICAgc3RhdGljIGZyb21Qb3NpdGlvbnMoc3RhcnQsIGVuZCA9IHN0YXJ0KSB7XG4gICAgICAgIHJldHVybiBuZXcgU2VsZWN0aW9uKHN0YXJ0LmxpbmVOdW1iZXIsIHN0YXJ0LmNvbHVtbiwgZW5kLmxpbmVOdW1iZXIsIGVuZC5jb2x1bW4pO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgYFNlbGVjdGlvbmAgZnJvbSBhIHJhbmdlLCBnaXZlbiBhIGRpcmVjdGlvbi5cbiAgICAgKi9cbiAgICBzdGF0aWMgZnJvbVJhbmdlKHJhbmdlLCBkaXJlY3Rpb24pIHtcbiAgICAgICAgaWYgKGRpcmVjdGlvbiA9PT0gMCAvKiBTZWxlY3Rpb25EaXJlY3Rpb24uTFRSICovKSB7XG4gICAgICAgICAgICByZXR1cm4gbmV3IFNlbGVjdGlvbihyYW5nZS5zdGFydExpbmVOdW1iZXIsIHJhbmdlLnN0YXJ0Q29sdW1uLCByYW5nZS5lbmRMaW5lTnVtYmVyLCByYW5nZS5lbmRDb2x1bW4pO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIG5ldyBTZWxlY3Rpb24ocmFuZ2UuZW5kTGluZU51bWJlciwgcmFuZ2UuZW5kQ29sdW1uLCByYW5nZS5zdGFydExpbmVOdW1iZXIsIHJhbmdlLnN0YXJ0Q29sdW1uKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICAvKipcbiAgICAgKiBDcmVhdGUgYSBgU2VsZWN0aW9uYCBmcm9tIGFuIGBJU2VsZWN0aW9uYC5cbiAgICAgKi9cbiAgICBzdGF0aWMgbGlmdFNlbGVjdGlvbihzZWwpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBTZWxlY3Rpb24oc2VsLnNlbGVjdGlvblN0YXJ0TGluZU51bWJlciwgc2VsLnNlbGVjdGlvblN0YXJ0Q29sdW1uLCBzZWwucG9zaXRpb25MaW5lTnVtYmVyLCBzZWwucG9zaXRpb25Db2x1bW4pO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBgYWAgZXF1YWxzIGBiYC5cbiAgICAgKi9cbiAgICBzdGF0aWMgc2VsZWN0aW9uc0FyckVxdWFsKGEsIGIpIHtcbiAgICAgICAgaWYgKGEgJiYgIWIgfHwgIWEgJiYgYikge1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgICAgIGlmICghYSAmJiAhYikge1xuICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGEubGVuZ3RoICE9PSBiLmxlbmd0aCkge1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgICAgIGZvciAobGV0IGkgPSAwLCBsZW4gPSBhLmxlbmd0aDsgaSA8IGxlbjsgaSsrKSB7XG4gICAgICAgICAgICBpZiAoIXRoaXMuc2VsZWN0aW9uc0VxdWFsKGFbaV0sIGJbaV0pKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBUZXN0IGlmIGBvYmpgIGlzIGFuIGBJU2VsZWN0aW9uYC5cbiAgICAgKi9cbiAgICBzdGF0aWMgaXNJU2VsZWN0aW9uKG9iaikge1xuICAgICAgICByZXR1cm4gKG9ialxuICAgICAgICAgICAgJiYgKHR5cGVvZiBvYmouc2VsZWN0aW9uU3RhcnRMaW5lTnVtYmVyID09PSAnbnVtYmVyJylcbiAgICAgICAgICAgICYmICh0eXBlb2Ygb2JqLnNlbGVjdGlvblN0YXJ0Q29sdW1uID09PSAnbnVtYmVyJylcbiAgICAgICAgICAgICYmICh0eXBlb2Ygb2JqLnBvc2l0aW9uTGluZU51bWJlciA9PT0gJ251bWJlcicpXG4gICAgICAgICAgICAmJiAodHlwZW9mIG9iai5wb3NpdGlvbkNvbHVtbiA9PT0gJ251bWJlcicpKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQ3JlYXRlIHdpdGggYSBkaXJlY3Rpb24uXG4gICAgICovXG4gICAgc3RhdGljIGNyZWF0ZVdpdGhEaXJlY3Rpb24oc3RhcnRMaW5lTnVtYmVyLCBzdGFydENvbHVtbiwgZW5kTGluZU51bWJlciwgZW5kQ29sdW1uLCBkaXJlY3Rpb24pIHtcbiAgICAgICAgaWYgKGRpcmVjdGlvbiA9PT0gMCAvKiBTZWxlY3Rpb25EaXJlY3Rpb24uTFRSICovKSB7XG4gICAgICAgICAgICByZXR1cm4gbmV3IFNlbGVjdGlvbihzdGFydExpbmVOdW1iZXIsIHN0YXJ0Q29sdW1uLCBlbmRMaW5lTnVtYmVyLCBlbmRDb2x1bW4pO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBuZXcgU2VsZWN0aW9uKGVuZExpbmVOdW1iZXIsIGVuZENvbHVtbiwgc3RhcnRMaW5lTnVtYmVyLCBzdGFydENvbHVtbik7XG4gICAgfVxufVxuIiwgImltcG9ydCB7IGlzU3RyaW5nIH0gZnJvbSAnLi90eXBlcy5qcyc7XG5jb25zdCBfY29kaWNvbkZvbnRDaGFyYWN0ZXJzID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbmV4cG9ydCBmdW5jdGlvbiByZWdpc3RlcihpZCwgZm9udENoYXJhY3Rlcikge1xuICAgIGlmIChpc1N0cmluZyhmb250Q2hhcmFjdGVyKSkge1xuICAgICAgICBjb25zdCB2YWwgPSBfY29kaWNvbkZvbnRDaGFyYWN0ZXJzW2ZvbnRDaGFyYWN0ZXJdO1xuICAgICAgICBpZiAodmFsID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihgJHtpZH0gcmVmZXJlbmNlcyBhbiB1bmtub3duIGNvZGljb246ICR7Zm9udENoYXJhY3Rlcn1gKTtcbiAgICAgICAgfVxuICAgICAgICBmb250Q2hhcmFjdGVyID0gdmFsO1xuICAgIH1cbiAgICBfY29kaWNvbkZvbnRDaGFyYWN0ZXJzW2lkXSA9IGZvbnRDaGFyYWN0ZXI7XG4gICAgcmV0dXJuIHsgaWQgfTtcbn1cbi8qKlxuICogT25seSB0byBiZSB1c2VkIGJ5IHRoZSBpY29uUmVnaXN0cnkuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBnZXRDb2RpY29uRm9udENoYXJhY3RlcnMoKSB7XG4gICAgcmV0dXJuIF9jb2RpY29uRm9udENoYXJhY3RlcnM7XG59XG4iLCAiLyotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAqICBDb3B5cmlnaHQgKGMpIE1pY3Jvc29mdCBDb3Jwb3JhdGlvbi4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqICBMaWNlbnNlZCB1bmRlciB0aGUgTUlUIExpY2Vuc2UuIFNlZSBMaWNlbnNlLnR4dCBpbiB0aGUgcHJvamVjdCByb290IGZvciBsaWNlbnNlIGluZm9ybWF0aW9uLlxuICotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSovXG5pbXBvcnQgeyByZWdpc3RlciB9IGZyb20gJy4vY29kaWNvbnNVdGlsLmpzJztcbi8vIFRoaXMgZmlsZSBpcyBhdXRvbWF0aWNhbGx5IGdlbmVyYXRlZCBieSAobWljcm9zb2Z0L3ZzY29kZS1jb2RpY29ucykvc2NyaXB0cy9leHBvcnQtdG8tdHMuanNcbi8vIFBsZWFzZSBkb24ndCBlZGl0IGl0LCBhcyB5b3VyIGNoYW5nZXMgd2lsbCBiZSBvdmVyd3JpdHRlbi5cbi8vIEluc3RlYWQsIGFkZCBtYXBwaW5ncyB0byBjb2RpY29uc0Rlcml2ZWQgaW4gY29kaWNvbnMudHMuXG5leHBvcnQgY29uc3QgY29kaWNvbnNMaWJyYXJ5ID0ge1xuICAgIGFkZDogcmVnaXN0ZXIoJ2FkZCcsIDB4ZWE2MCksXG4gICAgcGx1czogcmVnaXN0ZXIoJ3BsdXMnLCAweGVhNjApLFxuICAgIGdpc3ROZXc6IHJlZ2lzdGVyKCdnaXN0LW5ldycsIDB4ZWE2MCksXG4gICAgcmVwb0NyZWF0ZTogcmVnaXN0ZXIoJ3JlcG8tY3JlYXRlJywgMHhlYTYwKSxcbiAgICBsaWdodGJ1bGI6IHJlZ2lzdGVyKCdsaWdodGJ1bGInLCAweGVhNjEpLFxuICAgIGxpZ2h0QnVsYjogcmVnaXN0ZXIoJ2xpZ2h0LWJ1bGInLCAweGVhNjEpLFxuICAgIHJlcG86IHJlZ2lzdGVyKCdyZXBvJywgMHhlYTYyKSxcbiAgICByZXBvRGVsZXRlOiByZWdpc3RlcigncmVwby1kZWxldGUnLCAweGVhNjIpLFxuICAgIGdpc3RGb3JrOiByZWdpc3RlcignZ2lzdC1mb3JrJywgMHhlYTYzKSxcbiAgICByZXBvRm9ya2VkOiByZWdpc3RlcigncmVwby1mb3JrZWQnLCAweGVhNjMpLFxuICAgIGdpdFB1bGxSZXF1ZXN0OiByZWdpc3RlcignZ2l0LXB1bGwtcmVxdWVzdCcsIDB4ZWE2NCksXG4gICAgZ2l0UHVsbFJlcXVlc3RBYmFuZG9uZWQ6IHJlZ2lzdGVyKCdnaXQtcHVsbC1yZXF1ZXN0LWFiYW5kb25lZCcsIDB4ZWE2NCksXG4gICAgcmVjb3JkS2V5czogcmVnaXN0ZXIoJ3JlY29yZC1rZXlzJywgMHhlYTY1KSxcbiAgICBrZXlib2FyZDogcmVnaXN0ZXIoJ2tleWJvYXJkJywgMHhlYTY1KSxcbiAgICB0YWc6IHJlZ2lzdGVyKCd0YWcnLCAweGVhNjYpLFxuICAgIGdpdFB1bGxSZXF1ZXN0TGFiZWw6IHJlZ2lzdGVyKCdnaXQtcHVsbC1yZXF1ZXN0LWxhYmVsJywgMHhlYTY2KSxcbiAgICB0YWdBZGQ6IHJlZ2lzdGVyKCd0YWctYWRkJywgMHhlYTY2KSxcbiAgICB0YWdSZW1vdmU6IHJlZ2lzdGVyKCd0YWctcmVtb3ZlJywgMHhlYTY2KSxcbiAgICBwZXJzb246IHJlZ2lzdGVyKCdwZXJzb24nLCAweGVhNjcpLFxuICAgIHBlcnNvbkZvbGxvdzogcmVnaXN0ZXIoJ3BlcnNvbi1mb2xsb3cnLCAweGVhNjcpLFxuICAgIHBlcnNvbk91dGxpbmU6IHJlZ2lzdGVyKCdwZXJzb24tb3V0bGluZScsIDB4ZWE2NyksXG4gICAgcGVyc29uRmlsbGVkOiByZWdpc3RlcigncGVyc29uLWZpbGxlZCcsIDB4ZWE2NyksXG4gICAgZ2l0QnJhbmNoOiByZWdpc3RlcignZ2l0LWJyYW5jaCcsIDB4ZWE2OCksXG4gICAgZ2l0QnJhbmNoQ3JlYXRlOiByZWdpc3RlcignZ2l0LWJyYW5jaC1jcmVhdGUnLCAweGVhNjgpLFxuICAgIGdpdEJyYW5jaERlbGV0ZTogcmVnaXN0ZXIoJ2dpdC1icmFuY2gtZGVsZXRlJywgMHhlYTY4KSxcbiAgICBzb3VyY2VDb250cm9sOiByZWdpc3Rlcignc291cmNlLWNvbnRyb2wnLCAweGVhNjgpLFxuICAgIG1pcnJvcjogcmVnaXN0ZXIoJ21pcnJvcicsIDB4ZWE2OSksXG4gICAgbWlycm9yUHVibGljOiByZWdpc3RlcignbWlycm9yLXB1YmxpYycsIDB4ZWE2OSksXG4gICAgc3RhcjogcmVnaXN0ZXIoJ3N0YXInLCAweGVhNmEpLFxuICAgIHN0YXJBZGQ6IHJlZ2lzdGVyKCdzdGFyLWFkZCcsIDB4ZWE2YSksXG4gICAgc3RhckRlbGV0ZTogcmVnaXN0ZXIoJ3N0YXItZGVsZXRlJywgMHhlYTZhKSxcbiAgICBzdGFyRW1wdHk6IHJlZ2lzdGVyKCdzdGFyLWVtcHR5JywgMHhlYTZhKSxcbiAgICBjb21tZW50OiByZWdpc3RlcignY29tbWVudCcsIDB4ZWE2YiksXG4gICAgY29tbWVudEFkZDogcmVnaXN0ZXIoJ2NvbW1lbnQtYWRkJywgMHhlYTZiKSxcbiAgICBhbGVydDogcmVnaXN0ZXIoJ2FsZXJ0JywgMHhlYTZjKSxcbiAgICB3YXJuaW5nOiByZWdpc3Rlcignd2FybmluZycsIDB4ZWE2YyksXG4gICAgc2VhcmNoOiByZWdpc3Rlcignc2VhcmNoJywgMHhlYTZkKSxcbiAgICBzZWFyY2hTYXZlOiByZWdpc3Rlcignc2VhcmNoLXNhdmUnLCAweGVhNmQpLFxuICAgIGxvZ091dDogcmVnaXN0ZXIoJ2xvZy1vdXQnLCAweGVhNmUpLFxuICAgIHNpZ25PdXQ6IHJlZ2lzdGVyKCdzaWduLW91dCcsIDB4ZWE2ZSksXG4gICAgbG9nSW46IHJlZ2lzdGVyKCdsb2ctaW4nLCAweGVhNmYpLFxuICAgIHNpZ25JbjogcmVnaXN0ZXIoJ3NpZ24taW4nLCAweGVhNmYpLFxuICAgIGV5ZTogcmVnaXN0ZXIoJ2V5ZScsIDB4ZWE3MCksXG4gICAgZXllVW53YXRjaDogcmVnaXN0ZXIoJ2V5ZS11bndhdGNoJywgMHhlYTcwKSxcbiAgICBleWVXYXRjaDogcmVnaXN0ZXIoJ2V5ZS13YXRjaCcsIDB4ZWE3MCksXG4gICAgY2lyY2xlRmlsbGVkOiByZWdpc3RlcignY2lyY2xlLWZpbGxlZCcsIDB4ZWE3MSksXG4gICAgcHJpbWl0aXZlRG90OiByZWdpc3RlcigncHJpbWl0aXZlLWRvdCcsIDB4ZWE3MSksXG4gICAgY2xvc2VEaXJ0eTogcmVnaXN0ZXIoJ2Nsb3NlLWRpcnR5JywgMHhlYTcxKSxcbiAgICBkZWJ1Z0JyZWFrcG9pbnQ6IHJlZ2lzdGVyKCdkZWJ1Zy1icmVha3BvaW50JywgMHhlYTcxKSxcbiAgICBkZWJ1Z0JyZWFrcG9pbnREaXNhYmxlZDogcmVnaXN0ZXIoJ2RlYnVnLWJyZWFrcG9pbnQtZGlzYWJsZWQnLCAweGVhNzEpLFxuICAgIGRlYnVnSGludDogcmVnaXN0ZXIoJ2RlYnVnLWhpbnQnLCAweGVhNzEpLFxuICAgIHRlcm1pbmFsRGVjb3JhdGlvblN1Y2Nlc3M6IHJlZ2lzdGVyKCd0ZXJtaW5hbC1kZWNvcmF0aW9uLXN1Y2Nlc3MnLCAweGVhNzEpLFxuICAgIHByaW1pdGl2ZVNxdWFyZTogcmVnaXN0ZXIoJ3ByaW1pdGl2ZS1zcXVhcmUnLCAweGVhNzIpLFxuICAgIGVkaXQ6IHJlZ2lzdGVyKCdlZGl0JywgMHhlYTczKSxcbiAgICBwZW5jaWw6IHJlZ2lzdGVyKCdwZW5jaWwnLCAweGVhNzMpLFxuICAgIGluZm86IHJlZ2lzdGVyKCdpbmZvJywgMHhlYTc0KSxcbiAgICBpc3N1ZU9wZW5lZDogcmVnaXN0ZXIoJ2lzc3VlLW9wZW5lZCcsIDB4ZWE3NCksXG4gICAgZ2lzdFByaXZhdGU6IHJlZ2lzdGVyKCdnaXN0LXByaXZhdGUnLCAweGVhNzUpLFxuICAgIGdpdEZvcmtQcml2YXRlOiByZWdpc3RlcignZ2l0LWZvcmstcHJpdmF0ZScsIDB4ZWE3NSksXG4gICAgbG9jazogcmVnaXN0ZXIoJ2xvY2snLCAweGVhNzUpLFxuICAgIG1pcnJvclByaXZhdGU6IHJlZ2lzdGVyKCdtaXJyb3ItcHJpdmF0ZScsIDB4ZWE3NSksXG4gICAgY2xvc2U6IHJlZ2lzdGVyKCdjbG9zZScsIDB4ZWE3NiksXG4gICAgcmVtb3ZlQ2xvc2U6IHJlZ2lzdGVyKCdyZW1vdmUtY2xvc2UnLCAweGVhNzYpLFxuICAgIHg6IHJlZ2lzdGVyKCd4JywgMHhlYTc2KSxcbiAgICByZXBvU3luYzogcmVnaXN0ZXIoJ3JlcG8tc3luYycsIDB4ZWE3NyksXG4gICAgc3luYzogcmVnaXN0ZXIoJ3N5bmMnLCAweGVhNzcpLFxuICAgIGNsb25lOiByZWdpc3RlcignY2xvbmUnLCAweGVhNzgpLFxuICAgIGRlc2t0b3BEb3dubG9hZDogcmVnaXN0ZXIoJ2Rlc2t0b3AtZG93bmxvYWQnLCAweGVhNzgpLFxuICAgIGJlYWtlcjogcmVnaXN0ZXIoJ2JlYWtlcicsIDB4ZWE3OSksXG4gICAgbWljcm9zY29wZTogcmVnaXN0ZXIoJ21pY3Jvc2NvcGUnLCAweGVhNzkpLFxuICAgIHZtOiByZWdpc3Rlcigndm0nLCAweGVhN2EpLFxuICAgIGRldmljZURlc2t0b3A6IHJlZ2lzdGVyKCdkZXZpY2UtZGVza3RvcCcsIDB4ZWE3YSksXG4gICAgZmlsZTogcmVnaXN0ZXIoJ2ZpbGUnLCAweGVhN2IpLFxuICAgIGZpbGVUZXh0OiByZWdpc3RlcignZmlsZS10ZXh0JywgMHhlYTdiKSxcbiAgICBtb3JlOiByZWdpc3RlcignbW9yZScsIDB4ZWE3YyksXG4gICAgZWxsaXBzaXM6IHJlZ2lzdGVyKCdlbGxpcHNpcycsIDB4ZWE3YyksXG4gICAga2ViYWJIb3Jpem9udGFsOiByZWdpc3Rlcigna2ViYWItaG9yaXpvbnRhbCcsIDB4ZWE3YyksXG4gICAgbWFpbFJlcGx5OiByZWdpc3RlcignbWFpbC1yZXBseScsIDB4ZWE3ZCksXG4gICAgcmVwbHk6IHJlZ2lzdGVyKCdyZXBseScsIDB4ZWE3ZCksXG4gICAgb3JnYW5pemF0aW9uOiByZWdpc3Rlcignb3JnYW5pemF0aW9uJywgMHhlYTdlKSxcbiAgICBvcmdhbml6YXRpb25GaWxsZWQ6IHJlZ2lzdGVyKCdvcmdhbml6YXRpb24tZmlsbGVkJywgMHhlYTdlKSxcbiAgICBvcmdhbml6YXRpb25PdXRsaW5lOiByZWdpc3Rlcignb3JnYW5pemF0aW9uLW91dGxpbmUnLCAweGVhN2UpLFxuICAgIG5ld0ZpbGU6IHJlZ2lzdGVyKCduZXctZmlsZScsIDB4ZWE3ZiksXG4gICAgZmlsZUFkZDogcmVnaXN0ZXIoJ2ZpbGUtYWRkJywgMHhlYTdmKSxcbiAgICBuZXdGb2xkZXI6IHJlZ2lzdGVyKCduZXctZm9sZGVyJywgMHhlYTgwKSxcbiAgICBmaWxlRGlyZWN0b3J5Q3JlYXRlOiByZWdpc3RlcignZmlsZS1kaXJlY3RvcnktY3JlYXRlJywgMHhlYTgwKSxcbiAgICB0cmFzaDogcmVnaXN0ZXIoJ3RyYXNoJywgMHhlYTgxKSxcbiAgICB0cmFzaGNhbjogcmVnaXN0ZXIoJ3RyYXNoY2FuJywgMHhlYTgxKSxcbiAgICBoaXN0b3J5OiByZWdpc3RlcignaGlzdG9yeScsIDB4ZWE4MiksXG4gICAgY2xvY2s6IHJlZ2lzdGVyKCdjbG9jaycsIDB4ZWE4MiksXG4gICAgZm9sZGVyOiByZWdpc3RlcignZm9sZGVyJywgMHhlYTgzKSxcbiAgICBmaWxlRGlyZWN0b3J5OiByZWdpc3RlcignZmlsZS1kaXJlY3RvcnknLCAweGVhODMpLFxuICAgIHN5bWJvbEZvbGRlcjogcmVnaXN0ZXIoJ3N5bWJvbC1mb2xkZXInLCAweGVhODMpLFxuICAgIGxvZ29HaXRodWI6IHJlZ2lzdGVyKCdsb2dvLWdpdGh1YicsIDB4ZWE4NCksXG4gICAgbWFya0dpdGh1YjogcmVnaXN0ZXIoJ21hcmstZ2l0aHViJywgMHhlYTg0KSxcbiAgICBnaXRodWI6IHJlZ2lzdGVyKCdnaXRodWInLCAweGVhODQpLFxuICAgIHRlcm1pbmFsOiByZWdpc3RlcigndGVybWluYWwnLCAweGVhODUpLFxuICAgIGNvbnNvbGU6IHJlZ2lzdGVyKCdjb25zb2xlJywgMHhlYTg1KSxcbiAgICByZXBsOiByZWdpc3RlcigncmVwbCcsIDB4ZWE4NSksXG4gICAgemFwOiByZWdpc3RlcignemFwJywgMHhlYTg2KSxcbiAgICBzeW1ib2xFdmVudDogcmVnaXN0ZXIoJ3N5bWJvbC1ldmVudCcsIDB4ZWE4NiksXG4gICAgZXJyb3I6IHJlZ2lzdGVyKCdlcnJvcicsIDB4ZWE4NyksXG4gICAgc3RvcDogcmVnaXN0ZXIoJ3N0b3AnLCAweGVhODcpLFxuICAgIHZhcmlhYmxlOiByZWdpc3RlcigndmFyaWFibGUnLCAweGVhODgpLFxuICAgIHN5bWJvbFZhcmlhYmxlOiByZWdpc3Rlcignc3ltYm9sLXZhcmlhYmxlJywgMHhlYTg4KSxcbiAgICBhcnJheTogcmVnaXN0ZXIoJ2FycmF5JywgMHhlYThhKSxcbiAgICBzeW1ib2xBcnJheTogcmVnaXN0ZXIoJ3N5bWJvbC1hcnJheScsIDB4ZWE4YSksXG4gICAgc3ltYm9sTW9kdWxlOiByZWdpc3Rlcignc3ltYm9sLW1vZHVsZScsIDB4ZWE4YiksXG4gICAgc3ltYm9sUGFja2FnZTogcmVnaXN0ZXIoJ3N5bWJvbC1wYWNrYWdlJywgMHhlYThiKSxcbiAgICBzeW1ib2xOYW1lc3BhY2U6IHJlZ2lzdGVyKCdzeW1ib2wtbmFtZXNwYWNlJywgMHhlYThiKSxcbiAgICBzeW1ib2xPYmplY3Q6IHJlZ2lzdGVyKCdzeW1ib2wtb2JqZWN0JywgMHhlYThiKSxcbiAgICBzeW1ib2xNZXRob2Q6IHJlZ2lzdGVyKCdzeW1ib2wtbWV0aG9kJywgMHhlYThjKSxcbiAgICBzeW1ib2xGdW5jdGlvbjogcmVnaXN0ZXIoJ3N5bWJvbC1mdW5jdGlvbicsIDB4ZWE4YyksXG4gICAgc3ltYm9sQ29uc3RydWN0b3I6IHJlZ2lzdGVyKCdzeW1ib2wtY29uc3RydWN0b3InLCAweGVhOGMpLFxuICAgIHN5bWJvbEJvb2xlYW46IHJlZ2lzdGVyKCdzeW1ib2wtYm9vbGVhbicsIDB4ZWE4ZiksXG4gICAgc3ltYm9sTnVsbDogcmVnaXN0ZXIoJ3N5bWJvbC1udWxsJywgMHhlYThmKSxcbiAgICBzeW1ib2xOdW1lcmljOiByZWdpc3Rlcignc3ltYm9sLW51bWVyaWMnLCAweGVhOTApLFxuICAgIHN5bWJvbE51bWJlcjogcmVnaXN0ZXIoJ3N5bWJvbC1udW1iZXInLCAweGVhOTApLFxuICAgIHN5bWJvbFN0cnVjdHVyZTogcmVnaXN0ZXIoJ3N5bWJvbC1zdHJ1Y3R1cmUnLCAweGVhOTEpLFxuICAgIHN5bWJvbFN0cnVjdDogcmVnaXN0ZXIoJ3N5bWJvbC1zdHJ1Y3QnLCAweGVhOTEpLFxuICAgIHN5bWJvbFBhcmFtZXRlcjogcmVnaXN0ZXIoJ3N5bWJvbC1wYXJhbWV0ZXInLCAweGVhOTIpLFxuICAgIHN5bWJvbFR5cGVQYXJhbWV0ZXI6IHJlZ2lzdGVyKCdzeW1ib2wtdHlwZS1wYXJhbWV0ZXInLCAweGVhOTIpLFxuICAgIHN5bWJvbEtleTogcmVnaXN0ZXIoJ3N5bWJvbC1rZXknLCAweGVhOTMpLFxuICAgIHN5bWJvbFRleHQ6IHJlZ2lzdGVyKCdzeW1ib2wtdGV4dCcsIDB4ZWE5MyksXG4gICAgc3ltYm9sUmVmZXJlbmNlOiByZWdpc3Rlcignc3ltYm9sLXJlZmVyZW5jZScsIDB4ZWE5NCksXG4gICAgZ29Ub0ZpbGU6IHJlZ2lzdGVyKCdnby10by1maWxlJywgMHhlYTk0KSxcbiAgICBzeW1ib2xFbnVtOiByZWdpc3Rlcignc3ltYm9sLWVudW0nLCAweGVhOTUpLFxuICAgIHN5bWJvbFZhbHVlOiByZWdpc3Rlcignc3ltYm9sLXZhbHVlJywgMHhlYTk1KSxcbiAgICBzeW1ib2xSdWxlcjogcmVnaXN0ZXIoJ3N5bWJvbC1ydWxlcicsIDB4ZWE5NiksXG4gICAgc3ltYm9sVW5pdDogcmVnaXN0ZXIoJ3N5bWJvbC11bml0JywgMHhlYTk2KSxcbiAgICBhY3RpdmF0ZUJyZWFrcG9pbnRzOiByZWdpc3RlcignYWN0aXZhdGUtYnJlYWtwb2ludHMnLCAweGVhOTcpLFxuICAgIGFyY2hpdmU6IHJlZ2lzdGVyKCdhcmNoaXZlJywgMHhlYTk4KSxcbiAgICBhcnJvd0JvdGg6IHJlZ2lzdGVyKCdhcnJvdy1ib3RoJywgMHhlYTk5KSxcbiAgICBhcnJvd0Rvd246IHJlZ2lzdGVyKCdhcnJvdy1kb3duJywgMHhlYTlhKSxcbiAgICBhcnJvd0xlZnQ6IHJlZ2lzdGVyKCdhcnJvdy1sZWZ0JywgMHhlYTliKSxcbiAgICBhcnJvd1JpZ2h0OiByZWdpc3RlcignYXJyb3ctcmlnaHQnLCAweGVhOWMpLFxuICAgIGFycm93U21hbGxEb3duOiByZWdpc3RlcignYXJyb3ctc21hbGwtZG93bicsIDB4ZWE5ZCksXG4gICAgYXJyb3dTbWFsbExlZnQ6IHJlZ2lzdGVyKCdhcnJvdy1zbWFsbC1sZWZ0JywgMHhlYTllKSxcbiAgICBhcnJvd1NtYWxsUmlnaHQ6IHJlZ2lzdGVyKCdhcnJvdy1zbWFsbC1yaWdodCcsIDB4ZWE5ZiksXG4gICAgYXJyb3dTbWFsbFVwOiByZWdpc3RlcignYXJyb3ctc21hbGwtdXAnLCAweGVhYTApLFxuICAgIGFycm93VXA6IHJlZ2lzdGVyKCdhcnJvdy11cCcsIDB4ZWFhMSksXG4gICAgYmVsbDogcmVnaXN0ZXIoJ2JlbGwnLCAweGVhYTIpLFxuICAgIGJvbGQ6IHJlZ2lzdGVyKCdib2xkJywgMHhlYWEzKSxcbiAgICBib29rOiByZWdpc3RlcignYm9vaycsIDB4ZWFhNCksXG4gICAgYm9va21hcms6IHJlZ2lzdGVyKCdib29rbWFyaycsIDB4ZWFhNSksXG4gICAgZGVidWdCcmVha3BvaW50Q29uZGl0aW9uYWxVbnZlcmlmaWVkOiByZWdpc3RlcignZGVidWctYnJlYWtwb2ludC1jb25kaXRpb25hbC11bnZlcmlmaWVkJywgMHhlYWE2KSxcbiAgICBkZWJ1Z0JyZWFrcG9pbnRDb25kaXRpb25hbDogcmVnaXN0ZXIoJ2RlYnVnLWJyZWFrcG9pbnQtY29uZGl0aW9uYWwnLCAweGVhYTcpLFxuICAgIGRlYnVnQnJlYWtwb2ludENvbmRpdGlvbmFsRGlzYWJsZWQ6IHJlZ2lzdGVyKCdkZWJ1Zy1icmVha3BvaW50LWNvbmRpdGlvbmFsLWRpc2FibGVkJywgMHhlYWE3KSxcbiAgICBkZWJ1Z0JyZWFrcG9pbnREYXRhVW52ZXJpZmllZDogcmVnaXN0ZXIoJ2RlYnVnLWJyZWFrcG9pbnQtZGF0YS11bnZlcmlmaWVkJywgMHhlYWE4KSxcbiAgICBkZWJ1Z0JyZWFrcG9pbnREYXRhOiByZWdpc3RlcignZGVidWctYnJlYWtwb2ludC1kYXRhJywgMHhlYWE5KSxcbiAgICBkZWJ1Z0JyZWFrcG9pbnREYXRhRGlzYWJsZWQ6IHJlZ2lzdGVyKCdkZWJ1Zy1icmVha3BvaW50LWRhdGEtZGlzYWJsZWQnLCAweGVhYTkpLFxuICAgIGRlYnVnQnJlYWtwb2ludExvZ1VudmVyaWZpZWQ6IHJlZ2lzdGVyKCdkZWJ1Zy1icmVha3BvaW50LWxvZy11bnZlcmlmaWVkJywgMHhlYWFhKSxcbiAgICBkZWJ1Z0JyZWFrcG9pbnRMb2c6IHJlZ2lzdGVyKCdkZWJ1Zy1icmVha3BvaW50LWxvZycsIDB4ZWFhYiksXG4gICAgZGVidWdCcmVha3BvaW50TG9nRGlzYWJsZWQ6IHJlZ2lzdGVyKCdkZWJ1Zy1icmVha3BvaW50LWxvZy1kaXNhYmxlZCcsIDB4ZWFhYiksXG4gICAgYnJpZWZjYXNlOiByZWdpc3RlcignYnJpZWZjYXNlJywgMHhlYWFjKSxcbiAgICBicm9hZGNhc3Q6IHJlZ2lzdGVyKCdicm9hZGNhc3QnLCAweGVhYWQpLFxuICAgIGJyb3dzZXI6IHJlZ2lzdGVyKCdicm93c2VyJywgMHhlYWFlKSxcbiAgICBidWc6IHJlZ2lzdGVyKCdidWcnLCAweGVhYWYpLFxuICAgIGNhbGVuZGFyOiByZWdpc3RlcignY2FsZW5kYXInLCAweGVhYjApLFxuICAgIGNhc2VTZW5zaXRpdmU6IHJlZ2lzdGVyKCdjYXNlLXNlbnNpdGl2ZScsIDB4ZWFiMSksXG4gICAgY2hlY2s6IHJlZ2lzdGVyKCdjaGVjaycsIDB4ZWFiMiksXG4gICAgY2hlY2tsaXN0OiByZWdpc3RlcignY2hlY2tsaXN0JywgMHhlYWIzKSxcbiAgICBjaGV2cm9uRG93bjogcmVnaXN0ZXIoJ2NoZXZyb24tZG93bicsIDB4ZWFiNCksXG4gICAgY2hldnJvbkxlZnQ6IHJlZ2lzdGVyKCdjaGV2cm9uLWxlZnQnLCAweGVhYjUpLFxuICAgIGNoZXZyb25SaWdodDogcmVnaXN0ZXIoJ2NoZXZyb24tcmlnaHQnLCAweGVhYjYpLFxuICAgIGNoZXZyb25VcDogcmVnaXN0ZXIoJ2NoZXZyb24tdXAnLCAweGVhYjcpLFxuICAgIGNocm9tZUNsb3NlOiByZWdpc3RlcignY2hyb21lLWNsb3NlJywgMHhlYWI4KSxcbiAgICBjaHJvbWVNYXhpbWl6ZTogcmVnaXN0ZXIoJ2Nocm9tZS1tYXhpbWl6ZScsIDB4ZWFiOSksXG4gICAgY2hyb21lTWluaW1pemU6IHJlZ2lzdGVyKCdjaHJvbWUtbWluaW1pemUnLCAweGVhYmEpLFxuICAgIGNocm9tZVJlc3RvcmU6IHJlZ2lzdGVyKCdjaHJvbWUtcmVzdG9yZScsIDB4ZWFiYiksXG4gICAgY2lyY2xlT3V0bGluZTogcmVnaXN0ZXIoJ2NpcmNsZS1vdXRsaW5lJywgMHhlYWJjKSxcbiAgICBjaXJjbGU6IHJlZ2lzdGVyKCdjaXJjbGUnLCAweGVhYmMpLFxuICAgIGRlYnVnQnJlYWtwb2ludFVudmVyaWZpZWQ6IHJlZ2lzdGVyKCdkZWJ1Zy1icmVha3BvaW50LXVudmVyaWZpZWQnLCAweGVhYmMpLFxuICAgIHRlcm1pbmFsRGVjb3JhdGlvbkluY29tcGxldGU6IHJlZ2lzdGVyKCd0ZXJtaW5hbC1kZWNvcmF0aW9uLWluY29tcGxldGUnLCAweGVhYmMpLFxuICAgIGNpcmNsZVNsYXNoOiByZWdpc3RlcignY2lyY2xlLXNsYXNoJywgMHhlYWJkKSxcbiAgICBjaXJjdWl0Qm9hcmQ6IHJlZ2lzdGVyKCdjaXJjdWl0LWJvYXJkJywgMHhlYWJlKSxcbiAgICBjbGVhckFsbDogcmVnaXN0ZXIoJ2NsZWFyLWFsbCcsIDB4ZWFiZiksXG4gICAgY2xpcHB5OiByZWdpc3RlcignY2xpcHB5JywgMHhlYWMwKSxcbiAgICBjbG9zZUFsbDogcmVnaXN0ZXIoJ2Nsb3NlLWFsbCcsIDB4ZWFjMSksXG4gICAgY2xvdWREb3dubG9hZDogcmVnaXN0ZXIoJ2Nsb3VkLWRvd25sb2FkJywgMHhlYWMyKSxcbiAgICBjbG91ZFVwbG9hZDogcmVnaXN0ZXIoJ2Nsb3VkLXVwbG9hZCcsIDB4ZWFjMyksXG4gICAgY29kZTogcmVnaXN0ZXIoJ2NvZGUnLCAweGVhYzQpLFxuICAgIGNvbGxhcHNlQWxsOiByZWdpc3RlcignY29sbGFwc2UtYWxsJywgMHhlYWM1KSxcbiAgICBjb2xvck1vZGU6IHJlZ2lzdGVyKCdjb2xvci1tb2RlJywgMHhlYWM2KSxcbiAgICBjb21tZW50RGlzY3Vzc2lvbjogcmVnaXN0ZXIoJ2NvbW1lbnQtZGlzY3Vzc2lvbicsIDB4ZWFjNyksXG4gICAgY3JlZGl0Q2FyZDogcmVnaXN0ZXIoJ2NyZWRpdC1jYXJkJywgMHhlYWM5KSxcbiAgICBkYXNoOiByZWdpc3RlcignZGFzaCcsIDB4ZWFjYyksXG4gICAgZGFzaGJvYXJkOiByZWdpc3RlcignZGFzaGJvYXJkJywgMHhlYWNkKSxcbiAgICBkYXRhYmFzZTogcmVnaXN0ZXIoJ2RhdGFiYXNlJywgMHhlYWNlKSxcbiAgICBkZWJ1Z0NvbnRpbnVlOiByZWdpc3RlcignZGVidWctY29udGludWUnLCAweGVhY2YpLFxuICAgIGRlYnVnRGlzY29ubmVjdDogcmVnaXN0ZXIoJ2RlYnVnLWRpc2Nvbm5lY3QnLCAweGVhZDApLFxuICAgIGRlYnVnUGF1c2U6IHJlZ2lzdGVyKCdkZWJ1Zy1wYXVzZScsIDB4ZWFkMSksXG4gICAgZGVidWdSZXN0YXJ0OiByZWdpc3RlcignZGVidWctcmVzdGFydCcsIDB4ZWFkMiksXG4gICAgZGVidWdTdGFydDogcmVnaXN0ZXIoJ2RlYnVnLXN0YXJ0JywgMHhlYWQzKSxcbiAgICBkZWJ1Z1N0ZXBJbnRvOiByZWdpc3RlcignZGVidWctc3RlcC1pbnRvJywgMHhlYWQ0KSxcbiAgICBkZWJ1Z1N0ZXBPdXQ6IHJlZ2lzdGVyKCdkZWJ1Zy1zdGVwLW91dCcsIDB4ZWFkNSksXG4gICAgZGVidWdTdGVwT3ZlcjogcmVnaXN0ZXIoJ2RlYnVnLXN0ZXAtb3ZlcicsIDB4ZWFkNiksXG4gICAgZGVidWdTdG9wOiByZWdpc3RlcignZGVidWctc3RvcCcsIDB4ZWFkNyksXG4gICAgZGVidWc6IHJlZ2lzdGVyKCdkZWJ1ZycsIDB4ZWFkOCksXG4gICAgZGV2aWNlQ2FtZXJhVmlkZW86IHJlZ2lzdGVyKCdkZXZpY2UtY2FtZXJhLXZpZGVvJywgMHhlYWQ5KSxcbiAgICBkZXZpY2VDYW1lcmE6IHJlZ2lzdGVyKCdkZXZpY2UtY2FtZXJhJywgMHhlYWRhKSxcbiAgICBkZXZpY2VNb2JpbGU6IHJlZ2lzdGVyKCdkZXZpY2UtbW9iaWxlJywgMHhlYWRiKSxcbiAgICBkaWZmQWRkZWQ6IHJlZ2lzdGVyKCdkaWZmLWFkZGVkJywgMHhlYWRjKSxcbiAgICBkaWZmSWdub3JlZDogcmVnaXN0ZXIoJ2RpZmYtaWdub3JlZCcsIDB4ZWFkZCksXG4gICAgZGlmZk1vZGlmaWVkOiByZWdpc3RlcignZGlmZi1tb2RpZmllZCcsIDB4ZWFkZSksXG4gICAgZGlmZlJlbW92ZWQ6IHJlZ2lzdGVyKCdkaWZmLXJlbW92ZWQnLCAweGVhZGYpLFxuICAgIGRpZmZSZW5hbWVkOiByZWdpc3RlcignZGlmZi1yZW5hbWVkJywgMHhlYWUwKSxcbiAgICBkaWZmOiByZWdpc3RlcignZGlmZicsIDB4ZWFlMSksXG4gICAgZGlmZlNpZGVieXNpZGU6IHJlZ2lzdGVyKCdkaWZmLXNpZGVieXNpZGUnLCAweGVhZTEpLFxuICAgIGRpc2NhcmQ6IHJlZ2lzdGVyKCdkaXNjYXJkJywgMHhlYWUyKSxcbiAgICBlZGl0b3JMYXlvdXQ6IHJlZ2lzdGVyKCdlZGl0b3ItbGF5b3V0JywgMHhlYWUzKSxcbiAgICBlbXB0eVdpbmRvdzogcmVnaXN0ZXIoJ2VtcHR5LXdpbmRvdycsIDB4ZWFlNCksXG4gICAgZXhjbHVkZTogcmVnaXN0ZXIoJ2V4Y2x1ZGUnLCAweGVhZTUpLFxuICAgIGV4dGVuc2lvbnM6IHJlZ2lzdGVyKCdleHRlbnNpb25zJywgMHhlYWU2KSxcbiAgICBleWVDbG9zZWQ6IHJlZ2lzdGVyKCdleWUtY2xvc2VkJywgMHhlYWU3KSxcbiAgICBmaWxlQmluYXJ5OiByZWdpc3RlcignZmlsZS1iaW5hcnknLCAweGVhZTgpLFxuICAgIGZpbGVDb2RlOiByZWdpc3RlcignZmlsZS1jb2RlJywgMHhlYWU5KSxcbiAgICBmaWxlTWVkaWE6IHJlZ2lzdGVyKCdmaWxlLW1lZGlhJywgMHhlYWVhKSxcbiAgICBmaWxlUGRmOiByZWdpc3RlcignZmlsZS1wZGYnLCAweGVhZWIpLFxuICAgIGZpbGVTdWJtb2R1bGU6IHJlZ2lzdGVyKCdmaWxlLXN1Ym1vZHVsZScsIDB4ZWFlYyksXG4gICAgZmlsZVN5bWxpbmtEaXJlY3Rvcnk6IHJlZ2lzdGVyKCdmaWxlLXN5bWxpbmstZGlyZWN0b3J5JywgMHhlYWVkKSxcbiAgICBmaWxlU3ltbGlua0ZpbGU6IHJlZ2lzdGVyKCdmaWxlLXN5bWxpbmstZmlsZScsIDB4ZWFlZSksXG4gICAgZmlsZVppcDogcmVnaXN0ZXIoJ2ZpbGUtemlwJywgMHhlYWVmKSxcbiAgICBmaWxlczogcmVnaXN0ZXIoJ2ZpbGVzJywgMHhlYWYwKSxcbiAgICBmaWx0ZXI6IHJlZ2lzdGVyKCdmaWx0ZXInLCAweGVhZjEpLFxuICAgIGZsYW1lOiByZWdpc3RlcignZmxhbWUnLCAweGVhZjIpLFxuICAgIGZvbGREb3duOiByZWdpc3RlcignZm9sZC1kb3duJywgMHhlYWYzKSxcbiAgICBmb2xkVXA6IHJlZ2lzdGVyKCdmb2xkLXVwJywgMHhlYWY0KSxcbiAgICBmb2xkOiByZWdpc3RlcignZm9sZCcsIDB4ZWFmNSksXG4gICAgZm9sZGVyQWN0aXZlOiByZWdpc3RlcignZm9sZGVyLWFjdGl2ZScsIDB4ZWFmNiksXG4gICAgZm9sZGVyT3BlbmVkOiByZWdpc3RlcignZm9sZGVyLW9wZW5lZCcsIDB4ZWFmNyksXG4gICAgZ2VhcjogcmVnaXN0ZXIoJ2dlYXInLCAweGVhZjgpLFxuICAgIGdpZnQ6IHJlZ2lzdGVyKCdnaWZ0JywgMHhlYWY5KSxcbiAgICBnaXN0U2VjcmV0OiByZWdpc3RlcignZ2lzdC1zZWNyZXQnLCAweGVhZmEpLFxuICAgIGdpc3Q6IHJlZ2lzdGVyKCdnaXN0JywgMHhlYWZiKSxcbiAgICBnaXRDb21taXQ6IHJlZ2lzdGVyKCdnaXQtY29tbWl0JywgMHhlYWZjKSxcbiAgICBnaXRDb21wYXJlOiByZWdpc3RlcignZ2l0LWNvbXBhcmUnLCAweGVhZmQpLFxuICAgIGNvbXBhcmVDaGFuZ2VzOiByZWdpc3RlcignY29tcGFyZS1jaGFuZ2VzJywgMHhlYWZkKSxcbiAgICBnaXRNZXJnZTogcmVnaXN0ZXIoJ2dpdC1tZXJnZScsIDB4ZWFmZSksXG4gICAgZ2l0aHViQWN0aW9uOiByZWdpc3RlcignZ2l0aHViLWFjdGlvbicsIDB4ZWFmZiksXG4gICAgZ2l0aHViQWx0OiByZWdpc3RlcignZ2l0aHViLWFsdCcsIDB4ZWIwMCksXG4gICAgZ2xvYmU6IHJlZ2lzdGVyKCdnbG9iZScsIDB4ZWIwMSksXG4gICAgZ3JhYmJlcjogcmVnaXN0ZXIoJ2dyYWJiZXInLCAweGViMDIpLFxuICAgIGdyYXBoOiByZWdpc3RlcignZ3JhcGgnLCAweGViMDMpLFxuICAgIGdyaXBwZXI6IHJlZ2lzdGVyKCdncmlwcGVyJywgMHhlYjA0KSxcbiAgICBoZWFydDogcmVnaXN0ZXIoJ2hlYXJ0JywgMHhlYjA1KSxcbiAgICBob21lOiByZWdpc3RlcignaG9tZScsIDB4ZWIwNiksXG4gICAgaG9yaXpvbnRhbFJ1bGU6IHJlZ2lzdGVyKCdob3Jpem9udGFsLXJ1bGUnLCAweGViMDcpLFxuICAgIGh1Ym90OiByZWdpc3RlcignaHVib3QnLCAweGViMDgpLFxuICAgIGluYm94OiByZWdpc3RlcignaW5ib3gnLCAweGViMDkpLFxuICAgIGlzc3VlUmVvcGVuZWQ6IHJlZ2lzdGVyKCdpc3N1ZS1yZW9wZW5lZCcsIDB4ZWIwYiksXG4gICAgaXNzdWVzOiByZWdpc3RlcignaXNzdWVzJywgMHhlYjBjKSxcbiAgICBpdGFsaWM6IHJlZ2lzdGVyKCdpdGFsaWMnLCAweGViMGQpLFxuICAgIGplcnNleTogcmVnaXN0ZXIoJ2plcnNleScsIDB4ZWIwZSksXG4gICAganNvbjogcmVnaXN0ZXIoJ2pzb24nLCAweGViMGYpLFxuICAgIGtlYmFiVmVydGljYWw6IHJlZ2lzdGVyKCdrZWJhYi12ZXJ0aWNhbCcsIDB4ZWIxMCksXG4gICAga2V5OiByZWdpc3Rlcigna2V5JywgMHhlYjExKSxcbiAgICBsYXc6IHJlZ2lzdGVyKCdsYXcnLCAweGViMTIpLFxuICAgIGxpZ2h0YnVsYkF1dG9maXg6IHJlZ2lzdGVyKCdsaWdodGJ1bGItYXV0b2ZpeCcsIDB4ZWIxMyksXG4gICAgbGlua0V4dGVybmFsOiByZWdpc3RlcignbGluay1leHRlcm5hbCcsIDB4ZWIxNCksXG4gICAgbGluazogcmVnaXN0ZXIoJ2xpbmsnLCAweGViMTUpLFxuICAgIGxpc3RPcmRlcmVkOiByZWdpc3RlcignbGlzdC1vcmRlcmVkJywgMHhlYjE2KSxcbiAgICBsaXN0VW5vcmRlcmVkOiByZWdpc3RlcignbGlzdC11bm9yZGVyZWQnLCAweGViMTcpLFxuICAgIGxpdmVTaGFyZTogcmVnaXN0ZXIoJ2xpdmUtc2hhcmUnLCAweGViMTgpLFxuICAgIGxvYWRpbmc6IHJlZ2lzdGVyKCdsb2FkaW5nJywgMHhlYjE5KSxcbiAgICBsb2NhdGlvbjogcmVnaXN0ZXIoJ2xvY2F0aW9uJywgMHhlYjFhKSxcbiAgICBtYWlsUmVhZDogcmVnaXN0ZXIoJ21haWwtcmVhZCcsIDB4ZWIxYiksXG4gICAgbWFpbDogcmVnaXN0ZXIoJ21haWwnLCAweGViMWMpLFxuICAgIG1hcmtkb3duOiByZWdpc3RlcignbWFya2Rvd24nLCAweGViMWQpLFxuICAgIG1lZ2FwaG9uZTogcmVnaXN0ZXIoJ21lZ2FwaG9uZScsIDB4ZWIxZSksXG4gICAgbWVudGlvbjogcmVnaXN0ZXIoJ21lbnRpb24nLCAweGViMWYpLFxuICAgIG1pbGVzdG9uZTogcmVnaXN0ZXIoJ21pbGVzdG9uZScsIDB4ZWIyMCksXG4gICAgZ2l0UHVsbFJlcXVlc3RNaWxlc3RvbmU6IHJlZ2lzdGVyKCdnaXQtcHVsbC1yZXF1ZXN0LW1pbGVzdG9uZScsIDB4ZWIyMCksXG4gICAgbW9ydGFyQm9hcmQ6IHJlZ2lzdGVyKCdtb3J0YXItYm9hcmQnLCAweGViMjEpLFxuICAgIG1vdmU6IHJlZ2lzdGVyKCdtb3ZlJywgMHhlYjIyKSxcbiAgICBtdWx0aXBsZVdpbmRvd3M6IHJlZ2lzdGVyKCdtdWx0aXBsZS13aW5kb3dzJywgMHhlYjIzKSxcbiAgICBtdXRlOiByZWdpc3RlcignbXV0ZScsIDB4ZWIyNCksXG4gICAgbm9OZXdsaW5lOiByZWdpc3Rlcignbm8tbmV3bGluZScsIDB4ZWIyNSksXG4gICAgbm90ZTogcmVnaXN0ZXIoJ25vdGUnLCAweGViMjYpLFxuICAgIG9jdG9mYWNlOiByZWdpc3Rlcignb2N0b2ZhY2UnLCAweGViMjcpLFxuICAgIG9wZW5QcmV2aWV3OiByZWdpc3Rlcignb3Blbi1wcmV2aWV3JywgMHhlYjI4KSxcbiAgICBwYWNrYWdlOiByZWdpc3RlcigncGFja2FnZScsIDB4ZWIyOSksXG4gICAgcGFpbnRjYW46IHJlZ2lzdGVyKCdwYWludGNhbicsIDB4ZWIyYSksXG4gICAgcGluOiByZWdpc3RlcigncGluJywgMHhlYjJiKSxcbiAgICBwbGF5OiByZWdpc3RlcigncGxheScsIDB4ZWIyYyksXG4gICAgcnVuOiByZWdpc3RlcigncnVuJywgMHhlYjJjKSxcbiAgICBwbHVnOiByZWdpc3RlcigncGx1ZycsIDB4ZWIyZCksXG4gICAgcHJlc2VydmVDYXNlOiByZWdpc3RlcigncHJlc2VydmUtY2FzZScsIDB4ZWIyZSksXG4gICAgcHJldmlldzogcmVnaXN0ZXIoJ3ByZXZpZXcnLCAweGViMmYpLFxuICAgIHByb2plY3Q6IHJlZ2lzdGVyKCdwcm9qZWN0JywgMHhlYjMwKSxcbiAgICBwdWxzZTogcmVnaXN0ZXIoJ3B1bHNlJywgMHhlYjMxKSxcbiAgICBxdWVzdGlvbjogcmVnaXN0ZXIoJ3F1ZXN0aW9uJywgMHhlYjMyKSxcbiAgICBxdW90ZTogcmVnaXN0ZXIoJ3F1b3RlJywgMHhlYjMzKSxcbiAgICByYWRpb1Rvd2VyOiByZWdpc3RlcigncmFkaW8tdG93ZXInLCAweGViMzQpLFxuICAgIHJlYWN0aW9uczogcmVnaXN0ZXIoJ3JlYWN0aW9ucycsIDB4ZWIzNSksXG4gICAgcmVmZXJlbmNlczogcmVnaXN0ZXIoJ3JlZmVyZW5jZXMnLCAweGViMzYpLFxuICAgIHJlZnJlc2g6IHJlZ2lzdGVyKCdyZWZyZXNoJywgMHhlYjM3KSxcbiAgICByZWdleDogcmVnaXN0ZXIoJ3JlZ2V4JywgMHhlYjM4KSxcbiAgICByZW1vdGVFeHBsb3JlcjogcmVnaXN0ZXIoJ3JlbW90ZS1leHBsb3JlcicsIDB4ZWIzOSksXG4gICAgcmVtb3RlOiByZWdpc3RlcigncmVtb3RlJywgMHhlYjNhKSxcbiAgICByZW1vdmU6IHJlZ2lzdGVyKCdyZW1vdmUnLCAweGViM2IpLFxuICAgIHJlcGxhY2VBbGw6IHJlZ2lzdGVyKCdyZXBsYWNlLWFsbCcsIDB4ZWIzYyksXG4gICAgcmVwbGFjZTogcmVnaXN0ZXIoJ3JlcGxhY2UnLCAweGViM2QpLFxuICAgIHJlcG9DbG9uZTogcmVnaXN0ZXIoJ3JlcG8tY2xvbmUnLCAweGViM2UpLFxuICAgIHJlcG9Gb3JjZVB1c2g6IHJlZ2lzdGVyKCdyZXBvLWZvcmNlLXB1c2gnLCAweGViM2YpLFxuICAgIHJlcG9QdWxsOiByZWdpc3RlcigncmVwby1wdWxsJywgMHhlYjQwKSxcbiAgICByZXBvUHVzaDogcmVnaXN0ZXIoJ3JlcG8tcHVzaCcsIDB4ZWI0MSksXG4gICAgcmVwb3J0OiByZWdpc3RlcigncmVwb3J0JywgMHhlYjQyKSxcbiAgICByZXF1ZXN0Q2hhbmdlczogcmVnaXN0ZXIoJ3JlcXVlc3QtY2hhbmdlcycsIDB4ZWI0MyksXG4gICAgcm9ja2V0OiByZWdpc3Rlcigncm9ja2V0JywgMHhlYjQ0KSxcbiAgICByb290Rm9sZGVyT3BlbmVkOiByZWdpc3Rlcigncm9vdC1mb2xkZXItb3BlbmVkJywgMHhlYjQ1KSxcbiAgICByb290Rm9sZGVyOiByZWdpc3Rlcigncm9vdC1mb2xkZXInLCAweGViNDYpLFxuICAgIHJzczogcmVnaXN0ZXIoJ3JzcycsIDB4ZWI0NyksXG4gICAgcnVieTogcmVnaXN0ZXIoJ3J1YnknLCAweGViNDgpLFxuICAgIHNhdmVBbGw6IHJlZ2lzdGVyKCdzYXZlLWFsbCcsIDB4ZWI0OSksXG4gICAgc2F2ZUFzOiByZWdpc3Rlcignc2F2ZS1hcycsIDB4ZWI0YSksXG4gICAgc2F2ZTogcmVnaXN0ZXIoJ3NhdmUnLCAweGViNGIpLFxuICAgIHNjcmVlbkZ1bGw6IHJlZ2lzdGVyKCdzY3JlZW4tZnVsbCcsIDB4ZWI0YyksXG4gICAgc2NyZWVuTm9ybWFsOiByZWdpc3Rlcignc2NyZWVuLW5vcm1hbCcsIDB4ZWI0ZCksXG4gICAgc2VhcmNoU3RvcDogcmVnaXN0ZXIoJ3NlYXJjaC1zdG9wJywgMHhlYjRlKSxcbiAgICBzZXJ2ZXI6IHJlZ2lzdGVyKCdzZXJ2ZXInLCAweGViNTApLFxuICAgIHNldHRpbmdzR2VhcjogcmVnaXN0ZXIoJ3NldHRpbmdzLWdlYXInLCAweGViNTEpLFxuICAgIHNldHRpbmdzOiByZWdpc3Rlcignc2V0dGluZ3MnLCAweGViNTIpLFxuICAgIHNoaWVsZDogcmVnaXN0ZXIoJ3NoaWVsZCcsIDB4ZWI1MyksXG4gICAgc21pbGV5OiByZWdpc3Rlcignc21pbGV5JywgMHhlYjU0KSxcbiAgICBzb3J0UHJlY2VkZW5jZTogcmVnaXN0ZXIoJ3NvcnQtcHJlY2VkZW5jZScsIDB4ZWI1NSksXG4gICAgc3BsaXRIb3Jpem9udGFsOiByZWdpc3Rlcignc3BsaXQtaG9yaXpvbnRhbCcsIDB4ZWI1NiksXG4gICAgc3BsaXRWZXJ0aWNhbDogcmVnaXN0ZXIoJ3NwbGl0LXZlcnRpY2FsJywgMHhlYjU3KSxcbiAgICBzcXVpcnJlbDogcmVnaXN0ZXIoJ3NxdWlycmVsJywgMHhlYjU4KSxcbiAgICBzdGFyRnVsbDogcmVnaXN0ZXIoJ3N0YXItZnVsbCcsIDB4ZWI1OSksXG4gICAgc3RhckhhbGY6IHJlZ2lzdGVyKCdzdGFyLWhhbGYnLCAweGViNWEpLFxuICAgIHN5bWJvbENsYXNzOiByZWdpc3Rlcignc3ltYm9sLWNsYXNzJywgMHhlYjViKSxcbiAgICBzeW1ib2xDb2xvcjogcmVnaXN0ZXIoJ3N5bWJvbC1jb2xvcicsIDB4ZWI1YyksXG4gICAgc3ltYm9sQ29uc3RhbnQ6IHJlZ2lzdGVyKCdzeW1ib2wtY29uc3RhbnQnLCAweGViNWQpLFxuICAgIHN5bWJvbEVudW1NZW1iZXI6IHJlZ2lzdGVyKCdzeW1ib2wtZW51bS1tZW1iZXInLCAweGViNWUpLFxuICAgIHN5bWJvbEZpZWxkOiByZWdpc3Rlcignc3ltYm9sLWZpZWxkJywgMHhlYjVmKSxcbiAgICBzeW1ib2xGaWxlOiByZWdpc3Rlcignc3ltYm9sLWZpbGUnLCAweGViNjApLFxuICAgIHN5bWJvbEludGVyZmFjZTogcmVnaXN0ZXIoJ3N5bWJvbC1pbnRlcmZhY2UnLCAweGViNjEpLFxuICAgIHN5bWJvbEtleXdvcmQ6IHJlZ2lzdGVyKCdzeW1ib2wta2V5d29yZCcsIDB4ZWI2MiksXG4gICAgc3ltYm9sTWlzYzogcmVnaXN0ZXIoJ3N5bWJvbC1taXNjJywgMHhlYjYzKSxcbiAgICBzeW1ib2xPcGVyYXRvcjogcmVnaXN0ZXIoJ3N5bWJvbC1vcGVyYXRvcicsIDB4ZWI2NCksXG4gICAgc3ltYm9sUHJvcGVydHk6IHJlZ2lzdGVyKCdzeW1ib2wtcHJvcGVydHknLCAweGViNjUpLFxuICAgIHdyZW5jaDogcmVnaXN0ZXIoJ3dyZW5jaCcsIDB4ZWI2NSksXG4gICAgd3JlbmNoU3ViYWN0aW9uOiByZWdpc3Rlcignd3JlbmNoLXN1YmFjdGlvbicsIDB4ZWI2NSksXG4gICAgc3ltYm9sU25pcHBldDogcmVnaXN0ZXIoJ3N5bWJvbC1zbmlwcGV0JywgMHhlYjY2KSxcbiAgICB0YXNrbGlzdDogcmVnaXN0ZXIoJ3Rhc2tsaXN0JywgMHhlYjY3KSxcbiAgICB0ZWxlc2NvcGU6IHJlZ2lzdGVyKCd0ZWxlc2NvcGUnLCAweGViNjgpLFxuICAgIHRleHRTaXplOiByZWdpc3RlcigndGV4dC1zaXplJywgMHhlYjY5KSxcbiAgICB0aHJlZUJhcnM6IHJlZ2lzdGVyKCd0aHJlZS1iYXJzJywgMHhlYjZhKSxcbiAgICB0aHVtYnNkb3duOiByZWdpc3RlcigndGh1bWJzZG93bicsIDB4ZWI2YiksXG4gICAgdGh1bWJzdXA6IHJlZ2lzdGVyKCd0aHVtYnN1cCcsIDB4ZWI2YyksXG4gICAgdG9vbHM6IHJlZ2lzdGVyKCd0b29scycsIDB4ZWI2ZCksXG4gICAgdHJpYW5nbGVEb3duOiByZWdpc3RlcigndHJpYW5nbGUtZG93bicsIDB4ZWI2ZSksXG4gICAgdHJpYW5nbGVMZWZ0OiByZWdpc3RlcigndHJpYW5nbGUtbGVmdCcsIDB4ZWI2ZiksXG4gICAgdHJpYW5nbGVSaWdodDogcmVnaXN0ZXIoJ3RyaWFuZ2xlLXJpZ2h0JywgMHhlYjcwKSxcbiAgICB0cmlhbmdsZVVwOiByZWdpc3RlcigndHJpYW5nbGUtdXAnLCAweGViNzEpLFxuICAgIHR3aXR0ZXI6IHJlZ2lzdGVyKCd0d2l0dGVyJywgMHhlYjcyKSxcbiAgICB1bmZvbGQ6IHJlZ2lzdGVyKCd1bmZvbGQnLCAweGViNzMpLFxuICAgIHVubG9jazogcmVnaXN0ZXIoJ3VubG9jaycsIDB4ZWI3NCksXG4gICAgdW5tdXRlOiByZWdpc3RlcigndW5tdXRlJywgMHhlYjc1KSxcbiAgICB1bnZlcmlmaWVkOiByZWdpc3RlcigndW52ZXJpZmllZCcsIDB4ZWI3NiksXG4gICAgdmVyaWZpZWQ6IHJlZ2lzdGVyKCd2ZXJpZmllZCcsIDB4ZWI3NyksXG4gICAgdmVyc2lvbnM6IHJlZ2lzdGVyKCd2ZXJzaW9ucycsIDB4ZWI3OCksXG4gICAgdm1BY3RpdmU6IHJlZ2lzdGVyKCd2bS1hY3RpdmUnLCAweGViNzkpLFxuICAgIHZtT3V0bGluZTogcmVnaXN0ZXIoJ3ZtLW91dGxpbmUnLCAweGViN2EpLFxuICAgIHZtUnVubmluZzogcmVnaXN0ZXIoJ3ZtLXJ1bm5pbmcnLCAweGViN2IpLFxuICAgIHdhdGNoOiByZWdpc3Rlcignd2F0Y2gnLCAweGViN2MpLFxuICAgIHdoaXRlc3BhY2U6IHJlZ2lzdGVyKCd3aGl0ZXNwYWNlJywgMHhlYjdkKSxcbiAgICB3aG9sZVdvcmQ6IHJlZ2lzdGVyKCd3aG9sZS13b3JkJywgMHhlYjdlKSxcbiAgICB3aW5kb3c6IHJlZ2lzdGVyKCd3aW5kb3cnLCAweGViN2YpLFxuICAgIHdvcmRXcmFwOiByZWdpc3Rlcignd29yZC13cmFwJywgMHhlYjgwKSxcbiAgICB6b29tSW46IHJlZ2lzdGVyKCd6b29tLWluJywgMHhlYjgxKSxcbiAgICB6b29tT3V0OiByZWdpc3Rlcignem9vbS1vdXQnLCAweGViODIpLFxuICAgIGxpc3RGaWx0ZXI6IHJlZ2lzdGVyKCdsaXN0LWZpbHRlcicsIDB4ZWI4MyksXG4gICAgbGlzdEZsYXQ6IHJlZ2lzdGVyKCdsaXN0LWZsYXQnLCAweGViODQpLFxuICAgIGxpc3RTZWxlY3Rpb246IHJlZ2lzdGVyKCdsaXN0LXNlbGVjdGlvbicsIDB4ZWI4NSksXG4gICAgc2VsZWN0aW9uOiByZWdpc3Rlcignc2VsZWN0aW9uJywgMHhlYjg1KSxcbiAgICBsaXN0VHJlZTogcmVnaXN0ZXIoJ2xpc3QtdHJlZScsIDB4ZWI4NiksXG4gICAgZGVidWdCcmVha3BvaW50RnVuY3Rpb25VbnZlcmlmaWVkOiByZWdpc3RlcignZGVidWctYnJlYWtwb2ludC1mdW5jdGlvbi11bnZlcmlmaWVkJywgMHhlYjg3KSxcbiAgICBkZWJ1Z0JyZWFrcG9pbnRGdW5jdGlvbjogcmVnaXN0ZXIoJ2RlYnVnLWJyZWFrcG9pbnQtZnVuY3Rpb24nLCAweGViODgpLFxuICAgIGRlYnVnQnJlYWtwb2ludEZ1bmN0aW9uRGlzYWJsZWQ6IHJlZ2lzdGVyKCdkZWJ1Zy1icmVha3BvaW50LWZ1bmN0aW9uLWRpc2FibGVkJywgMHhlYjg4KSxcbiAgICBkZWJ1Z1N0YWNrZnJhbWVBY3RpdmU6IHJlZ2lzdGVyKCdkZWJ1Zy1zdGFja2ZyYW1lLWFjdGl2ZScsIDB4ZWI4OSksXG4gICAgY2lyY2xlU21hbGxGaWxsZWQ6IHJlZ2lzdGVyKCdjaXJjbGUtc21hbGwtZmlsbGVkJywgMHhlYjhhKSxcbiAgICBkZWJ1Z1N0YWNrZnJhbWVEb3Q6IHJlZ2lzdGVyKCdkZWJ1Zy1zdGFja2ZyYW1lLWRvdCcsIDB4ZWI4YSksXG4gICAgdGVybWluYWxEZWNvcmF0aW9uTWFyazogcmVnaXN0ZXIoJ3Rlcm1pbmFsLWRlY29yYXRpb24tbWFyaycsIDB4ZWI4YSksXG4gICAgZGVidWdTdGFja2ZyYW1lOiByZWdpc3RlcignZGVidWctc3RhY2tmcmFtZScsIDB4ZWI4YiksXG4gICAgZGVidWdTdGFja2ZyYW1lRm9jdXNlZDogcmVnaXN0ZXIoJ2RlYnVnLXN0YWNrZnJhbWUtZm9jdXNlZCcsIDB4ZWI4YiksXG4gICAgZGVidWdCcmVha3BvaW50VW5zdXBwb3J0ZWQ6IHJlZ2lzdGVyKCdkZWJ1Zy1icmVha3BvaW50LXVuc3VwcG9ydGVkJywgMHhlYjhjKSxcbiAgICBzeW1ib2xTdHJpbmc6IHJlZ2lzdGVyKCdzeW1ib2wtc3RyaW5nJywgMHhlYjhkKSxcbiAgICBkZWJ1Z1JldmVyc2VDb250aW51ZTogcmVnaXN0ZXIoJ2RlYnVnLXJldmVyc2UtY29udGludWUnLCAweGViOGUpLFxuICAgIGRlYnVnU3RlcEJhY2s6IHJlZ2lzdGVyKCdkZWJ1Zy1zdGVwLWJhY2snLCAweGViOGYpLFxuICAgIGRlYnVnUmVzdGFydEZyYW1lOiByZWdpc3RlcignZGVidWctcmVzdGFydC1mcmFtZScsIDB4ZWI5MCksXG4gICAgZGVidWdBbHQ6IHJlZ2lzdGVyKCdkZWJ1Zy1hbHQnLCAweGViOTEpLFxuICAgIGNhbGxJbmNvbWluZzogcmVnaXN0ZXIoJ2NhbGwtaW5jb21pbmcnLCAweGViOTIpLFxuICAgIGNhbGxPdXRnb2luZzogcmVnaXN0ZXIoJ2NhbGwtb3V0Z29pbmcnLCAweGViOTMpLFxuICAgIG1lbnU6IHJlZ2lzdGVyKCdtZW51JywgMHhlYjk0KSxcbiAgICBleHBhbmRBbGw6IHJlZ2lzdGVyKCdleHBhbmQtYWxsJywgMHhlYjk1KSxcbiAgICBmZWVkYmFjazogcmVnaXN0ZXIoJ2ZlZWRiYWNrJywgMHhlYjk2KSxcbiAgICBnaXRQdWxsUmVxdWVzdFJldmlld2VyOiByZWdpc3RlcignZ2l0LXB1bGwtcmVxdWVzdC1yZXZpZXdlcicsIDB4ZWI5NiksXG4gICAgZ3JvdXBCeVJlZlR5cGU6IHJlZ2lzdGVyKCdncm91cC1ieS1yZWYtdHlwZScsIDB4ZWI5NyksXG4gICAgdW5ncm91cEJ5UmVmVHlwZTogcmVnaXN0ZXIoJ3VuZ3JvdXAtYnktcmVmLXR5cGUnLCAweGViOTgpLFxuICAgIGFjY291bnQ6IHJlZ2lzdGVyKCdhY2NvdW50JywgMHhlYjk5KSxcbiAgICBnaXRQdWxsUmVxdWVzdEFzc2lnbmVlOiByZWdpc3RlcignZ2l0LXB1bGwtcmVxdWVzdC1hc3NpZ25lZScsIDB4ZWI5OSksXG4gICAgYmVsbERvdDogcmVnaXN0ZXIoJ2JlbGwtZG90JywgMHhlYjlhKSxcbiAgICBkZWJ1Z0NvbnNvbGU6IHJlZ2lzdGVyKCdkZWJ1Zy1jb25zb2xlJywgMHhlYjliKSxcbiAgICBsaWJyYXJ5OiByZWdpc3RlcignbGlicmFyeScsIDB4ZWI5YyksXG4gICAgb3V0cHV0OiByZWdpc3Rlcignb3V0cHV0JywgMHhlYjlkKSxcbiAgICBydW5BbGw6IHJlZ2lzdGVyKCdydW4tYWxsJywgMHhlYjllKSxcbiAgICBzeW5jSWdub3JlZDogcmVnaXN0ZXIoJ3N5bmMtaWdub3JlZCcsIDB4ZWI5ZiksXG4gICAgcGlubmVkOiByZWdpc3RlcigncGlubmVkJywgMHhlYmEwKSxcbiAgICBnaXRodWJJbnZlcnRlZDogcmVnaXN0ZXIoJ2dpdGh1Yi1pbnZlcnRlZCcsIDB4ZWJhMSksXG4gICAgc2VydmVyUHJvY2VzczogcmVnaXN0ZXIoJ3NlcnZlci1wcm9jZXNzJywgMHhlYmEyKSxcbiAgICBzZXJ2ZXJFbnZpcm9ubWVudDogcmVnaXN0ZXIoJ3NlcnZlci1lbnZpcm9ubWVudCcsIDB4ZWJhMyksXG4gICAgcGFzczogcmVnaXN0ZXIoJ3Bhc3MnLCAweGViYTQpLFxuICAgIGlzc3VlQ2xvc2VkOiByZWdpc3RlcignaXNzdWUtY2xvc2VkJywgMHhlYmE0KSxcbiAgICBzdG9wQ2lyY2xlOiByZWdpc3Rlcignc3RvcC1jaXJjbGUnLCAweGViYTUpLFxuICAgIHBsYXlDaXJjbGU6IHJlZ2lzdGVyKCdwbGF5LWNpcmNsZScsIDB4ZWJhNiksXG4gICAgcmVjb3JkOiByZWdpc3RlcigncmVjb3JkJywgMHhlYmE3KSxcbiAgICBkZWJ1Z0FsdFNtYWxsOiByZWdpc3RlcignZGVidWctYWx0LXNtYWxsJywgMHhlYmE4KSxcbiAgICB2bUNvbm5lY3Q6IHJlZ2lzdGVyKCd2bS1jb25uZWN0JywgMHhlYmE5KSxcbiAgICBjbG91ZDogcmVnaXN0ZXIoJ2Nsb3VkJywgMHhlYmFhKSxcbiAgICBtZXJnZTogcmVnaXN0ZXIoJ21lcmdlJywgMHhlYmFiKSxcbiAgICBleHBvcnQ6IHJlZ2lzdGVyKCdleHBvcnQnLCAweGViYWMpLFxuICAgIGdyYXBoTGVmdDogcmVnaXN0ZXIoJ2dyYXBoLWxlZnQnLCAweGViYWQpLFxuICAgIG1hZ25ldDogcmVnaXN0ZXIoJ21hZ25ldCcsIDB4ZWJhZSksXG4gICAgbm90ZWJvb2s6IHJlZ2lzdGVyKCdub3RlYm9vaycsIDB4ZWJhZiksXG4gICAgcmVkbzogcmVnaXN0ZXIoJ3JlZG8nLCAweGViYjApLFxuICAgIGNoZWNrQWxsOiByZWdpc3RlcignY2hlY2stYWxsJywgMHhlYmIxKSxcbiAgICBwaW5uZWREaXJ0eTogcmVnaXN0ZXIoJ3Bpbm5lZC1kaXJ0eScsIDB4ZWJiMiksXG4gICAgcGFzc0ZpbGxlZDogcmVnaXN0ZXIoJ3Bhc3MtZmlsbGVkJywgMHhlYmIzKSxcbiAgICBjaXJjbGVMYXJnZUZpbGxlZDogcmVnaXN0ZXIoJ2NpcmNsZS1sYXJnZS1maWxsZWQnLCAweGViYjQpLFxuICAgIGNpcmNsZUxhcmdlOiByZWdpc3RlcignY2lyY2xlLWxhcmdlJywgMHhlYmI1KSxcbiAgICBjaXJjbGVMYXJnZU91dGxpbmU6IHJlZ2lzdGVyKCdjaXJjbGUtbGFyZ2Utb3V0bGluZScsIDB4ZWJiNSksXG4gICAgY29tYmluZTogcmVnaXN0ZXIoJ2NvbWJpbmUnLCAweGViYjYpLFxuICAgIGdhdGhlcjogcmVnaXN0ZXIoJ2dhdGhlcicsIDB4ZWJiNiksXG4gICAgdGFibGU6IHJlZ2lzdGVyKCd0YWJsZScsIDB4ZWJiNyksXG4gICAgdmFyaWFibGVHcm91cDogcmVnaXN0ZXIoJ3ZhcmlhYmxlLWdyb3VwJywgMHhlYmI4KSxcbiAgICB0eXBlSGllcmFyY2h5OiByZWdpc3RlcigndHlwZS1oaWVyYXJjaHknLCAweGViYjkpLFxuICAgIHR5cGVIaWVyYXJjaHlTdWI6IHJlZ2lzdGVyKCd0eXBlLWhpZXJhcmNoeS1zdWInLCAweGViYmEpLFxuICAgIHR5cGVIaWVyYXJjaHlTdXBlcjogcmVnaXN0ZXIoJ3R5cGUtaGllcmFyY2h5LXN1cGVyJywgMHhlYmJiKSxcbiAgICBnaXRQdWxsUmVxdWVzdENyZWF0ZTogcmVnaXN0ZXIoJ2dpdC1wdWxsLXJlcXVlc3QtY3JlYXRlJywgMHhlYmJjKSxcbiAgICBydW5BYm92ZTogcmVnaXN0ZXIoJ3J1bi1hYm92ZScsIDB4ZWJiZCksXG4gICAgcnVuQmVsb3c6IHJlZ2lzdGVyKCdydW4tYmVsb3cnLCAweGViYmUpLFxuICAgIG5vdGVib29rVGVtcGxhdGU6IHJlZ2lzdGVyKCdub3RlYm9vay10ZW1wbGF0ZScsIDB4ZWJiZiksXG4gICAgZGVidWdSZXJ1bjogcmVnaXN0ZXIoJ2RlYnVnLXJlcnVuJywgMHhlYmMwKSxcbiAgICB3b3Jrc3BhY2VUcnVzdGVkOiByZWdpc3Rlcignd29ya3NwYWNlLXRydXN0ZWQnLCAweGViYzEpLFxuICAgIHdvcmtzcGFjZVVudHJ1c3RlZDogcmVnaXN0ZXIoJ3dvcmtzcGFjZS11bnRydXN0ZWQnLCAweGViYzIpLFxuICAgIHdvcmtzcGFjZVVua25vd246IHJlZ2lzdGVyKCd3b3Jrc3BhY2UtdW5rbm93bicsIDB4ZWJjMyksXG4gICAgdGVybWluYWxDbWQ6IHJlZ2lzdGVyKCd0ZXJtaW5hbC1jbWQnLCAweGViYzQpLFxuICAgIHRlcm1pbmFsRGViaWFuOiByZWdpc3RlcigndGVybWluYWwtZGViaWFuJywgMHhlYmM1KSxcbiAgICB0ZXJtaW5hbExpbnV4OiByZWdpc3RlcigndGVybWluYWwtbGludXgnLCAweGViYzYpLFxuICAgIHRlcm1pbmFsUG93ZXJzaGVsbDogcmVnaXN0ZXIoJ3Rlcm1pbmFsLXBvd2Vyc2hlbGwnLCAweGViYzcpLFxuICAgIHRlcm1pbmFsVG11eDogcmVnaXN0ZXIoJ3Rlcm1pbmFsLXRtdXgnLCAweGViYzgpLFxuICAgIHRlcm1pbmFsVWJ1bnR1OiByZWdpc3RlcigndGVybWluYWwtdWJ1bnR1JywgMHhlYmM5KSxcbiAgICB0ZXJtaW5hbEJhc2g6IHJlZ2lzdGVyKCd0ZXJtaW5hbC1iYXNoJywgMHhlYmNhKSxcbiAgICBhcnJvd1N3YXA6IHJlZ2lzdGVyKCdhcnJvdy1zd2FwJywgMHhlYmNiKSxcbiAgICBjb3B5OiByZWdpc3RlcignY29weScsIDB4ZWJjYyksXG4gICAgcGVyc29uQWRkOiByZWdpc3RlcigncGVyc29uLWFkZCcsIDB4ZWJjZCksXG4gICAgZmlsdGVyRmlsbGVkOiByZWdpc3RlcignZmlsdGVyLWZpbGxlZCcsIDB4ZWJjZSksXG4gICAgd2FuZDogcmVnaXN0ZXIoJ3dhbmQnLCAweGViY2YpLFxuICAgIGRlYnVnTGluZUJ5TGluZTogcmVnaXN0ZXIoJ2RlYnVnLWxpbmUtYnktbGluZScsIDB4ZWJkMCksXG4gICAgaW5zcGVjdDogcmVnaXN0ZXIoJ2luc3BlY3QnLCAweGViZDEpLFxuICAgIGxheWVyczogcmVnaXN0ZXIoJ2xheWVycycsIDB4ZWJkMiksXG4gICAgbGF5ZXJzRG90OiByZWdpc3RlcignbGF5ZXJzLWRvdCcsIDB4ZWJkMyksXG4gICAgbGF5ZXJzQWN0aXZlOiByZWdpc3RlcignbGF5ZXJzLWFjdGl2ZScsIDB4ZWJkNCksXG4gICAgY29tcGFzczogcmVnaXN0ZXIoJ2NvbXBhc3MnLCAweGViZDUpLFxuICAgIGNvbXBhc3NEb3Q6IHJlZ2lzdGVyKCdjb21wYXNzLWRvdCcsIDB4ZWJkNiksXG4gICAgY29tcGFzc0FjdGl2ZTogcmVnaXN0ZXIoJ2NvbXBhc3MtYWN0aXZlJywgMHhlYmQ3KSxcbiAgICBhenVyZTogcmVnaXN0ZXIoJ2F6dXJlJywgMHhlYmQ4KSxcbiAgICBpc3N1ZURyYWZ0OiByZWdpc3RlcignaXNzdWUtZHJhZnQnLCAweGViZDkpLFxuICAgIGdpdFB1bGxSZXF1ZXN0Q2xvc2VkOiByZWdpc3RlcignZ2l0LXB1bGwtcmVxdWVzdC1jbG9zZWQnLCAweGViZGEpLFxuICAgIGdpdFB1bGxSZXF1ZXN0RHJhZnQ6IHJlZ2lzdGVyKCdnaXQtcHVsbC1yZXF1ZXN0LWRyYWZ0JywgMHhlYmRiKSxcbiAgICBkZWJ1Z0FsbDogcmVnaXN0ZXIoJ2RlYnVnLWFsbCcsIDB4ZWJkYyksXG4gICAgZGVidWdDb3ZlcmFnZTogcmVnaXN0ZXIoJ2RlYnVnLWNvdmVyYWdlJywgMHhlYmRkKSxcbiAgICBydW5FcnJvcnM6IHJlZ2lzdGVyKCdydW4tZXJyb3JzJywgMHhlYmRlKSxcbiAgICBmb2xkZXJMaWJyYXJ5OiByZWdpc3RlcignZm9sZGVyLWxpYnJhcnknLCAweGViZGYpLFxuICAgIGRlYnVnQ29udGludWVTbWFsbDogcmVnaXN0ZXIoJ2RlYnVnLWNvbnRpbnVlLXNtYWxsJywgMHhlYmUwKSxcbiAgICBiZWFrZXJTdG9wOiByZWdpc3RlcignYmVha2VyLXN0b3AnLCAweGViZTEpLFxuICAgIGdyYXBoTGluZTogcmVnaXN0ZXIoJ2dyYXBoLWxpbmUnLCAweGViZTIpLFxuICAgIGdyYXBoU2NhdHRlcjogcmVnaXN0ZXIoJ2dyYXBoLXNjYXR0ZXInLCAweGViZTMpLFxuICAgIHBpZUNoYXJ0OiByZWdpc3RlcigncGllLWNoYXJ0JywgMHhlYmU0KSxcbiAgICBicmFja2V0OiByZWdpc3RlcignYnJhY2tldCcsIDB4ZWIwZiksXG4gICAgYnJhY2tldERvdDogcmVnaXN0ZXIoJ2JyYWNrZXQtZG90JywgMHhlYmU1KSxcbiAgICBicmFja2V0RXJyb3I6IHJlZ2lzdGVyKCdicmFja2V0LWVycm9yJywgMHhlYmU2KSxcbiAgICBsb2NrU21hbGw6IHJlZ2lzdGVyKCdsb2NrLXNtYWxsJywgMHhlYmU3KSxcbiAgICBhenVyZURldm9wczogcmVnaXN0ZXIoJ2F6dXJlLWRldm9wcycsIDB4ZWJlOCksXG4gICAgdmVyaWZpZWRGaWxsZWQ6IHJlZ2lzdGVyKCd2ZXJpZmllZC1maWxsZWQnLCAweGViZTkpLFxuICAgIG5ld2xpbmU6IHJlZ2lzdGVyKCduZXdsaW5lJywgMHhlYmVhKSxcbiAgICBsYXlvdXQ6IHJlZ2lzdGVyKCdsYXlvdXQnLCAweGViZWIpLFxuICAgIGxheW91dEFjdGl2aXR5YmFyTGVmdDogcmVnaXN0ZXIoJ2xheW91dC1hY3Rpdml0eWJhci1sZWZ0JywgMHhlYmVjKSxcbiAgICBsYXlvdXRBY3Rpdml0eWJhclJpZ2h0OiByZWdpc3RlcignbGF5b3V0LWFjdGl2aXR5YmFyLXJpZ2h0JywgMHhlYmVkKSxcbiAgICBsYXlvdXRQYW5lbExlZnQ6IHJlZ2lzdGVyKCdsYXlvdXQtcGFuZWwtbGVmdCcsIDB4ZWJlZSksXG4gICAgbGF5b3V0UGFuZWxDZW50ZXI6IHJlZ2lzdGVyKCdsYXlvdXQtcGFuZWwtY2VudGVyJywgMHhlYmVmKSxcbiAgICBsYXlvdXRQYW5lbEp1c3RpZnk6IHJlZ2lzdGVyKCdsYXlvdXQtcGFuZWwtanVzdGlmeScsIDB4ZWJmMCksXG4gICAgbGF5b3V0UGFuZWxSaWdodDogcmVnaXN0ZXIoJ2xheW91dC1wYW5lbC1yaWdodCcsIDB4ZWJmMSksXG4gICAgbGF5b3V0UGFuZWw6IHJlZ2lzdGVyKCdsYXlvdXQtcGFuZWwnLCAweGViZjIpLFxuICAgIGxheW91dFNpZGViYXJMZWZ0OiByZWdpc3RlcignbGF5b3V0LXNpZGViYXItbGVmdCcsIDB4ZWJmMyksXG4gICAgbGF5b3V0U2lkZWJhclJpZ2h0OiByZWdpc3RlcignbGF5b3V0LXNpZGViYXItcmlnaHQnLCAweGViZjQpLFxuICAgIGxheW91dFN0YXR1c2JhcjogcmVnaXN0ZXIoJ2xheW91dC1zdGF0dXNiYXInLCAweGViZjUpLFxuICAgIGxheW91dE1lbnViYXI6IHJlZ2lzdGVyKCdsYXlvdXQtbWVudWJhcicsIDB4ZWJmNiksXG4gICAgbGF5b3V0Q2VudGVyZWQ6IHJlZ2lzdGVyKCdsYXlvdXQtY2VudGVyZWQnLCAweGViZjcpLFxuICAgIHRhcmdldDogcmVnaXN0ZXIoJ3RhcmdldCcsIDB4ZWJmOCksXG4gICAgaW5kZW50OiByZWdpc3RlcignaW5kZW50JywgMHhlYmY5KSxcbiAgICByZWNvcmRTbWFsbDogcmVnaXN0ZXIoJ3JlY29yZC1zbWFsbCcsIDB4ZWJmYSksXG4gICAgZXJyb3JTbWFsbDogcmVnaXN0ZXIoJ2Vycm9yLXNtYWxsJywgMHhlYmZiKSxcbiAgICB0ZXJtaW5hbERlY29yYXRpb25FcnJvcjogcmVnaXN0ZXIoJ3Rlcm1pbmFsLWRlY29yYXRpb24tZXJyb3InLCAweGViZmIpLFxuICAgIGFycm93Q2lyY2xlRG93bjogcmVnaXN0ZXIoJ2Fycm93LWNpcmNsZS1kb3duJywgMHhlYmZjKSxcbiAgICBhcnJvd0NpcmNsZUxlZnQ6IHJlZ2lzdGVyKCdhcnJvdy1jaXJjbGUtbGVmdCcsIDB4ZWJmZCksXG4gICAgYXJyb3dDaXJjbGVSaWdodDogcmVnaXN0ZXIoJ2Fycm93LWNpcmNsZS1yaWdodCcsIDB4ZWJmZSksXG4gICAgYXJyb3dDaXJjbGVVcDogcmVnaXN0ZXIoJ2Fycm93LWNpcmNsZS11cCcsIDB4ZWJmZiksXG4gICAgbGF5b3V0U2lkZWJhclJpZ2h0T2ZmOiByZWdpc3RlcignbGF5b3V0LXNpZGViYXItcmlnaHQtb2ZmJywgMHhlYzAwKSxcbiAgICBsYXlvdXRQYW5lbE9mZjogcmVnaXN0ZXIoJ2xheW91dC1wYW5lbC1vZmYnLCAweGVjMDEpLFxuICAgIGxheW91dFNpZGViYXJMZWZ0T2ZmOiByZWdpc3RlcignbGF5b3V0LXNpZGViYXItbGVmdC1vZmYnLCAweGVjMDIpLFxuICAgIGJsYW5rOiByZWdpc3RlcignYmxhbmsnLCAweGVjMDMpLFxuICAgIGhlYXJ0RmlsbGVkOiByZWdpc3RlcignaGVhcnQtZmlsbGVkJywgMHhlYzA0KSxcbiAgICBtYXA6IHJlZ2lzdGVyKCdtYXAnLCAweGVjMDUpLFxuICAgIG1hcEhvcml6b250YWw6IHJlZ2lzdGVyKCdtYXAtaG9yaXpvbnRhbCcsIDB4ZWMwNSksXG4gICAgZm9sZEhvcml6b250YWw6IHJlZ2lzdGVyKCdmb2xkLWhvcml6b250YWwnLCAweGVjMDUpLFxuICAgIG1hcEZpbGxlZDogcmVnaXN0ZXIoJ21hcC1maWxsZWQnLCAweGVjMDYpLFxuICAgIG1hcEhvcml6b250YWxGaWxsZWQ6IHJlZ2lzdGVyKCdtYXAtaG9yaXpvbnRhbC1maWxsZWQnLCAweGVjMDYpLFxuICAgIGZvbGRIb3Jpem9udGFsRmlsbGVkOiByZWdpc3RlcignZm9sZC1ob3Jpem9udGFsLWZpbGxlZCcsIDB4ZWMwNiksXG4gICAgY2lyY2xlU21hbGw6IHJlZ2lzdGVyKCdjaXJjbGUtc21hbGwnLCAweGVjMDcpLFxuICAgIGJlbGxTbGFzaDogcmVnaXN0ZXIoJ2JlbGwtc2xhc2gnLCAweGVjMDgpLFxuICAgIGJlbGxTbGFzaERvdDogcmVnaXN0ZXIoJ2JlbGwtc2xhc2gtZG90JywgMHhlYzA5KSxcbiAgICBjb21tZW50VW5yZXNvbHZlZDogcmVnaXN0ZXIoJ2NvbW1lbnQtdW5yZXNvbHZlZCcsIDB4ZWMwYSksXG4gICAgZ2l0UHVsbFJlcXVlc3RHb1RvQ2hhbmdlczogcmVnaXN0ZXIoJ2dpdC1wdWxsLXJlcXVlc3QtZ28tdG8tY2hhbmdlcycsIDB4ZWMwYiksXG4gICAgZ2l0UHVsbFJlcXVlc3ROZXdDaGFuZ2VzOiByZWdpc3RlcignZ2l0LXB1bGwtcmVxdWVzdC1uZXctY2hhbmdlcycsIDB4ZWMwYyksXG4gICAgc2VhcmNoRnV6enk6IHJlZ2lzdGVyKCdzZWFyY2gtZnV6enknLCAweGVjMGQpLFxuICAgIGNvbW1lbnREcmFmdDogcmVnaXN0ZXIoJ2NvbW1lbnQtZHJhZnQnLCAweGVjMGUpLFxuICAgIHNlbmQ6IHJlZ2lzdGVyKCdzZW5kJywgMHhlYzBmKSxcbiAgICBzcGFya2xlOiByZWdpc3Rlcignc3BhcmtsZScsIDB4ZWMxMCksXG4gICAgaW5zZXJ0OiByZWdpc3RlcignaW5zZXJ0JywgMHhlYzExKSxcbiAgICBtaWM6IHJlZ2lzdGVyKCdtaWMnLCAweGVjMTIpLFxuICAgIHRodW1ic2Rvd25GaWxsZWQ6IHJlZ2lzdGVyKCd0aHVtYnNkb3duLWZpbGxlZCcsIDB4ZWMxMyksXG4gICAgdGh1bWJzdXBGaWxsZWQ6IHJlZ2lzdGVyKCd0aHVtYnN1cC1maWxsZWQnLCAweGVjMTQpLFxuICAgIGNvZmZlZTogcmVnaXN0ZXIoJ2NvZmZlZScsIDB4ZWMxNSksXG4gICAgc25ha2U6IHJlZ2lzdGVyKCdzbmFrZScsIDB4ZWMxNiksXG4gICAgZ2FtZTogcmVnaXN0ZXIoJ2dhbWUnLCAweGVjMTcpLFxuICAgIHZyOiByZWdpc3RlcigndnInLCAweGVjMTgpLFxuICAgIGNoaXA6IHJlZ2lzdGVyKCdjaGlwJywgMHhlYzE5KSxcbiAgICBwaWFubzogcmVnaXN0ZXIoJ3BpYW5vJywgMHhlYzFhKSxcbiAgICBtdXNpYzogcmVnaXN0ZXIoJ211c2ljJywgMHhlYzFiKSxcbiAgICBtaWNGaWxsZWQ6IHJlZ2lzdGVyKCdtaWMtZmlsbGVkJywgMHhlYzFjKSxcbiAgICByZXBvRmV0Y2g6IHJlZ2lzdGVyKCdyZXBvLWZldGNoJywgMHhlYzFkKSxcbiAgICBjb3BpbG90OiByZWdpc3RlcignY29waWxvdCcsIDB4ZWMxZSksXG4gICAgbGlnaHRidWxiU3BhcmtsZTogcmVnaXN0ZXIoJ2xpZ2h0YnVsYi1zcGFya2xlJywgMHhlYzFmKSxcbiAgICByb2JvdDogcmVnaXN0ZXIoJ3JvYm90JywgMHhlYzIwKSxcbiAgICBzcGFya2xlRmlsbGVkOiByZWdpc3Rlcignc3BhcmtsZS1maWxsZWQnLCAweGVjMjEpLFxuICAgIGRpZmZTaW5nbGU6IHJlZ2lzdGVyKCdkaWZmLXNpbmdsZScsIDB4ZWMyMiksXG4gICAgZGlmZk11bHRpcGxlOiByZWdpc3RlcignZGlmZi1tdWx0aXBsZScsIDB4ZWMyMyksXG4gICAgc3Vycm91bmRXaXRoOiByZWdpc3Rlcignc3Vycm91bmQtd2l0aCcsIDB4ZWMyNCksXG4gICAgc2hhcmU6IHJlZ2lzdGVyKCdzaGFyZScsIDB4ZWMyNSksXG4gICAgZ2l0U3Rhc2g6IHJlZ2lzdGVyKCdnaXQtc3Rhc2gnLCAweGVjMjYpLFxuICAgIGdpdFN0YXNoQXBwbHk6IHJlZ2lzdGVyKCdnaXQtc3Rhc2gtYXBwbHknLCAweGVjMjcpLFxuICAgIGdpdFN0YXNoUG9wOiByZWdpc3RlcignZ2l0LXN0YXNoLXBvcCcsIDB4ZWMyOCksXG4gICAgdnNjb2RlOiByZWdpc3RlcigndnNjb2RlJywgMHhlYzI5KSxcbiAgICB2c2NvZGVJbnNpZGVyczogcmVnaXN0ZXIoJ3ZzY29kZS1pbnNpZGVycycsIDB4ZWMyYSksXG4gICAgY29kZU9zczogcmVnaXN0ZXIoJ2NvZGUtb3NzJywgMHhlYzJiKSxcbiAgICBydW5Db3ZlcmFnZTogcmVnaXN0ZXIoJ3J1bi1jb3ZlcmFnZScsIDB4ZWMyYyksXG4gICAgcnVuQWxsQ292ZXJhZ2U6IHJlZ2lzdGVyKCdydW4tYWxsLWNvdmVyYWdlJywgMHhlYzJkKSxcbiAgICBjb3ZlcmFnZTogcmVnaXN0ZXIoJ2NvdmVyYWdlJywgMHhlYzJlKSxcbiAgICBnaXRodWJQcm9qZWN0OiByZWdpc3RlcignZ2l0aHViLXByb2plY3QnLCAweGVjMmYpLFxuICAgIG1hcFZlcnRpY2FsOiByZWdpc3RlcignbWFwLXZlcnRpY2FsJywgMHhlYzMwKSxcbiAgICBmb2xkVmVydGljYWw6IHJlZ2lzdGVyKCdmb2xkLXZlcnRpY2FsJywgMHhlYzMwKSxcbiAgICBtYXBWZXJ0aWNhbEZpbGxlZDogcmVnaXN0ZXIoJ21hcC12ZXJ0aWNhbC1maWxsZWQnLCAweGVjMzEpLFxuICAgIGZvbGRWZXJ0aWNhbEZpbGxlZDogcmVnaXN0ZXIoJ2ZvbGQtdmVydGljYWwtZmlsbGVkJywgMHhlYzMxKSxcbiAgICBnb1RvU2VhcmNoOiByZWdpc3RlcignZ28tdG8tc2VhcmNoJywgMHhlYzMyKSxcbiAgICBwZXJjZW50YWdlOiByZWdpc3RlcigncGVyY2VudGFnZScsIDB4ZWMzMyksXG4gICAgc29ydFBlcmNlbnRhZ2U6IHJlZ2lzdGVyKCdzb3J0LXBlcmNlbnRhZ2UnLCAweGVjMzMpLFxuICAgIGF0dGFjaDogcmVnaXN0ZXIoJ2F0dGFjaCcsIDB4ZWMzNCksXG59O1xuIiwgImltcG9ydCB7IHJlZ2lzdGVyIH0gZnJvbSAnLi9jb2RpY29uc1V0aWwuanMnO1xuaW1wb3J0IHsgY29kaWNvbnNMaWJyYXJ5IH0gZnJvbSAnLi9jb2RpY29uc0xpYnJhcnkuanMnO1xuLyoqXG4gKiBEZXJpdmVkIGljb25zLCB0aGF0IGNvdWxkIGJlY29tZSBzZXBhcmF0ZSBpY29ucy5cbiAqIFRoZXNlIG1hcHBpbmdzIHNob3VsZCBiZSBtb3ZlZCBpbnRvIHRoZSBtYXBwaW5nIGZpbGUgaW4gdGhlIHZzY29kZS1jb2RpY29ucyByZXBvIGF0IHNvbWUgcG9pbnQuXG4gKi9cbmV4cG9ydCBjb25zdCBjb2RpY29uc0Rlcml2ZWQgPSB7XG4gICAgZGlhbG9nRXJyb3I6IHJlZ2lzdGVyKCdkaWFsb2ctZXJyb3InLCAnZXJyb3InKSxcbiAgICBkaWFsb2dXYXJuaW5nOiByZWdpc3RlcignZGlhbG9nLXdhcm5pbmcnLCAnd2FybmluZycpLFxuICAgIGRpYWxvZ0luZm86IHJlZ2lzdGVyKCdkaWFsb2ctaW5mbycsICdpbmZvJyksXG4gICAgZGlhbG9nQ2xvc2U6IHJlZ2lzdGVyKCdkaWFsb2ctY2xvc2UnLCAnY2xvc2UnKSxcbiAgICB0cmVlSXRlbUV4cGFuZGVkOiByZWdpc3RlcigndHJlZS1pdGVtLWV4cGFuZGVkJywgJ2NoZXZyb24tZG93bicpLCAvLyBjb2xsYXBzZWQgaXMgZG9uZSB3aXRoIHJvdGF0aW9uXG4gICAgdHJlZUZpbHRlck9uVHlwZU9uOiByZWdpc3RlcigndHJlZS1maWx0ZXItb24tdHlwZS1vbicsICdsaXN0LWZpbHRlcicpLFxuICAgIHRyZWVGaWx0ZXJPblR5cGVPZmY6IHJlZ2lzdGVyKCd0cmVlLWZpbHRlci1vbi10eXBlLW9mZicsICdsaXN0LXNlbGVjdGlvbicpLFxuICAgIHRyZWVGaWx0ZXJDbGVhcjogcmVnaXN0ZXIoJ3RyZWUtZmlsdGVyLWNsZWFyJywgJ2Nsb3NlJyksXG4gICAgdHJlZUl0ZW1Mb2FkaW5nOiByZWdpc3RlcigndHJlZS1pdGVtLWxvYWRpbmcnLCAnbG9hZGluZycpLFxuICAgIG1lbnVTZWxlY3Rpb246IHJlZ2lzdGVyKCdtZW51LXNlbGVjdGlvbicsICdjaGVjaycpLFxuICAgIG1lbnVTdWJtZW51OiByZWdpc3RlcignbWVudS1zdWJtZW51JywgJ2NoZXZyb24tcmlnaHQnKSxcbiAgICBtZW51QmFyTW9yZTogcmVnaXN0ZXIoJ21lbnViYXItbW9yZScsICdtb3JlJyksXG4gICAgc2Nyb2xsYmFyQnV0dG9uTGVmdDogcmVnaXN0ZXIoJ3Njcm9sbGJhci1idXR0b24tbGVmdCcsICd0cmlhbmdsZS1sZWZ0JyksXG4gICAgc2Nyb2xsYmFyQnV0dG9uUmlnaHQ6IHJlZ2lzdGVyKCdzY3JvbGxiYXItYnV0dG9uLXJpZ2h0JywgJ3RyaWFuZ2xlLXJpZ2h0JyksXG4gICAgc2Nyb2xsYmFyQnV0dG9uVXA6IHJlZ2lzdGVyKCdzY3JvbGxiYXItYnV0dG9uLXVwJywgJ3RyaWFuZ2xlLXVwJyksXG4gICAgc2Nyb2xsYmFyQnV0dG9uRG93bjogcmVnaXN0ZXIoJ3Njcm9sbGJhci1idXR0b24tZG93bicsICd0cmlhbmdsZS1kb3duJyksXG4gICAgdG9vbEJhck1vcmU6IHJlZ2lzdGVyKCd0b29sYmFyLW1vcmUnLCAnbW9yZScpLFxuICAgIHF1aWNrSW5wdXRCYWNrOiByZWdpc3RlcigncXVpY2staW5wdXQtYmFjaycsICdhcnJvdy1sZWZ0JyksXG4gICAgZHJvcERvd25CdXR0b246IHJlZ2lzdGVyKCdkcm9wLWRvd24tYnV0dG9uJywgMHhlYWI0KSxcbiAgICBzeW1ib2xDdXN0b21Db2xvcjogcmVnaXN0ZXIoJ3N5bWJvbC1jdXN0b21jb2xvcicsIDB4ZWI1YyksXG4gICAgZXhwb3J0SWNvbjogcmVnaXN0ZXIoJ2V4cG9ydCcsIDB4ZWJhYyksXG4gICAgd29ya3NwYWNlVW5zcGVjaWZpZWQ6IHJlZ2lzdGVyKCd3b3Jrc3BhY2UtdW5zcGVjaWZpZWQnLCAweGViYzMpLFxuICAgIG5ld0xpbmU6IHJlZ2lzdGVyKCduZXdsaW5lJywgMHhlYmVhKSxcbiAgICB0aHVtYnNEb3duRmlsbGVkOiByZWdpc3RlcigndGh1bWJzZG93bi1maWxsZWQnLCAweGVjMTMpLFxuICAgIHRodW1ic1VwRmlsbGVkOiByZWdpc3RlcigndGh1bWJzdXAtZmlsbGVkJywgMHhlYzE0KSxcbiAgICBnaXRGZXRjaDogcmVnaXN0ZXIoJ2dpdC1mZXRjaCcsIDB4ZWMxZCksXG4gICAgbGlnaHRidWxiU3BhcmtsZUF1dG9maXg6IHJlZ2lzdGVyKCdsaWdodGJ1bGItc3BhcmtsZS1hdXRvZml4JywgMHhlYzFmKSxcbiAgICBkZWJ1Z0JyZWFrcG9pbnRQZW5kaW5nOiByZWdpc3RlcignZGVidWctYnJlYWtwb2ludC1wZW5kaW5nJywgMHhlYmQ5KSxcbn07XG4vKipcbiAqIFRoZSBDb2RpY29uIGxpYnJhcnkgaXMgYSBzZXQgb2YgZGVmYXVsdCBpY29ucyB0aGF0IGFyZSBidWlsdC1pbiBpbiBWUyBDb2RlLlxuICpcbiAqIEluIHRoZSBwcm9kdWN0IChvdXRzaWRlIG9mIGJhc2UpIENvZGljb25zIHNob3VsZCBvbmx5IGJlIHVzZWQgYXMgZGVmYXVsdHMuIEluIG9yZGVyIHRvIGhhdmUgYWxsIGljb25zIGluIFZTIENvZGVcbiAqIHRoZW1lYWJsZSwgY29tcG9uZW50IHNob3VsZCBkZWZpbmUgbmV3LCBVSSBjb21wb25lbnQgc3BlY2lmaWMgaWNvbnMgdXNpbmcgYGljb25SZWdpc3RyeS5yZWdpc3Rlckljb25gLlxuICogSW4gdGhhdCBjYWxsIGEgQ29kaWNvbiBjYW4gYmUgbmFtZWQgYXMgZGVmYXVsdC5cbiAqL1xuZXhwb3J0IGNvbnN0IENvZGljb24gPSB7XG4gICAgLi4uY29kaWNvbnNMaWJyYXJ5LFxuICAgIC4uLmNvZGljb25zRGVyaXZlZFxufTtcbiIsICIvKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICogIENvcHlyaWdodCAoYykgTWljcm9zb2Z0IENvcnBvcmF0aW9uLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICogIExpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgTGljZW5zZS4gU2VlIExpY2Vuc2UudHh0IGluIHRoZSBwcm9qZWN0IHJvb3QgZm9yIGxpY2Vuc2UgaW5mb3JtYXRpb24uXG4gKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKi9cbmltcG9ydCB7IEVtaXR0ZXIgfSBmcm9tICcuLi8uLi9iYXNlL2NvbW1vbi9ldmVudC5qcyc7XG5pbXBvcnQgeyBEaXNwb3NhYmxlLCB0b0Rpc3Bvc2FibGUgfSBmcm9tICcuLi8uLi9iYXNlL2NvbW1vbi9saWZlY3ljbGUuanMnO1xuZXhwb3J0IGNsYXNzIFRva2VuaXphdGlvblJlZ2lzdHJ5IHtcbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgdGhpcy5fdG9rZW5pemF0aW9uU3VwcG9ydHMgPSBuZXcgTWFwKCk7XG4gICAgICAgIHRoaXMuX2ZhY3RvcmllcyA9IG5ldyBNYXAoKTtcbiAgICAgICAgdGhpcy5fb25EaWRDaGFuZ2UgPSBuZXcgRW1pdHRlcigpO1xuICAgICAgICB0aGlzLm9uRGlkQ2hhbmdlID0gdGhpcy5fb25EaWRDaGFuZ2UuZXZlbnQ7XG4gICAgICAgIHRoaXMuX2NvbG9yTWFwID0gbnVsbDtcbiAgICB9XG4gICAgaGFuZGxlQ2hhbmdlKGxhbmd1YWdlSWRzKSB7XG4gICAgICAgIHRoaXMuX29uRGlkQ2hhbmdlLmZpcmUoe1xuICAgICAgICAgICAgY2hhbmdlZExhbmd1YWdlczogbGFuZ3VhZ2VJZHMsXG4gICAgICAgICAgICBjaGFuZ2VkQ29sb3JNYXA6IGZhbHNlXG4gICAgICAgIH0pO1xuICAgIH1cbiAgICByZWdpc3RlcihsYW5ndWFnZUlkLCBzdXBwb3J0KSB7XG4gICAgICAgIHRoaXMuX3Rva2VuaXphdGlvblN1cHBvcnRzLnNldChsYW5ndWFnZUlkLCBzdXBwb3J0KTtcbiAgICAgICAgdGhpcy5oYW5kbGVDaGFuZ2UoW2xhbmd1YWdlSWRdKTtcbiAgICAgICAgcmV0dXJuIHRvRGlzcG9zYWJsZSgoKSA9PiB7XG4gICAgICAgICAgICBpZiAodGhpcy5fdG9rZW5pemF0aW9uU3VwcG9ydHMuZ2V0KGxhbmd1YWdlSWQpICE9PSBzdXBwb3J0KSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGhpcy5fdG9rZW5pemF0aW9uU3VwcG9ydHMuZGVsZXRlKGxhbmd1YWdlSWQpO1xuICAgICAgICAgICAgdGhpcy5oYW5kbGVDaGFuZ2UoW2xhbmd1YWdlSWRdKTtcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIGdldChsYW5ndWFnZUlkKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl90b2tlbml6YXRpb25TdXBwb3J0cy5nZXQobGFuZ3VhZ2VJZCkgfHwgbnVsbDtcbiAgICB9XG4gICAgcmVnaXN0ZXJGYWN0b3J5KGxhbmd1YWdlSWQsIGZhY3RvcnkpIHtcbiAgICAgICAgdmFyIF9hO1xuICAgICAgICAoX2EgPSB0aGlzLl9mYWN0b3JpZXMuZ2V0KGxhbmd1YWdlSWQpKSA9PT0gbnVsbCB8fCBfYSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2EuZGlzcG9zZSgpO1xuICAgICAgICBjb25zdCBteURhdGEgPSBuZXcgVG9rZW5pemF0aW9uU3VwcG9ydEZhY3RvcnlEYXRhKHRoaXMsIGxhbmd1YWdlSWQsIGZhY3RvcnkpO1xuICAgICAgICB0aGlzLl9mYWN0b3JpZXMuc2V0KGxhbmd1YWdlSWQsIG15RGF0YSk7XG4gICAgICAgIHJldHVybiB0b0Rpc3Bvc2FibGUoKCkgPT4ge1xuICAgICAgICAgICAgY29uc3QgdiA9IHRoaXMuX2ZhY3Rvcmllcy5nZXQobGFuZ3VhZ2VJZCk7XG4gICAgICAgICAgICBpZiAoIXYgfHwgdiAhPT0gbXlEYXRhKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGhpcy5fZmFjdG9yaWVzLmRlbGV0ZShsYW5ndWFnZUlkKTtcbiAgICAgICAgICAgIHYuZGlzcG9zZSgpO1xuICAgICAgICB9KTtcbiAgICB9XG4gICAgYXN5bmMgZ2V0T3JDcmVhdGUobGFuZ3VhZ2VJZCkge1xuICAgICAgICAvLyBjaGVjayBmaXJzdCBpZiB0aGUgc3VwcG9ydCBpcyBhbHJlYWR5IHNldFxuICAgICAgICBjb25zdCB0b2tlbml6YXRpb25TdXBwb3J0ID0gdGhpcy5nZXQobGFuZ3VhZ2VJZCk7XG4gICAgICAgIGlmICh0b2tlbml6YXRpb25TdXBwb3J0KSB7XG4gICAgICAgICAgICByZXR1cm4gdG9rZW5pemF0aW9uU3VwcG9ydDtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBmYWN0b3J5ID0gdGhpcy5fZmFjdG9yaWVzLmdldChsYW5ndWFnZUlkKTtcbiAgICAgICAgaWYgKCFmYWN0b3J5IHx8IGZhY3RvcnkuaXNSZXNvbHZlZCkge1xuICAgICAgICAgICAgLy8gbm8gZmFjdG9yeSBvciBmYWN0b3J5LnJlc29sdmUgYWxyZWFkeSBmaW5pc2hlZFxuICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgIH1cbiAgICAgICAgYXdhaXQgZmFjdG9yeS5yZXNvbHZlKCk7XG4gICAgICAgIHJldHVybiB0aGlzLmdldChsYW5ndWFnZUlkKTtcbiAgICB9XG4gICAgaXNSZXNvbHZlZChsYW5ndWFnZUlkKSB7XG4gICAgICAgIGNvbnN0IHRva2VuaXphdGlvblN1cHBvcnQgPSB0aGlzLmdldChsYW5ndWFnZUlkKTtcbiAgICAgICAgaWYgKHRva2VuaXphdGlvblN1cHBvcnQpIHtcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IGZhY3RvcnkgPSB0aGlzLl9mYWN0b3JpZXMuZ2V0KGxhbmd1YWdlSWQpO1xuICAgICAgICBpZiAoIWZhY3RvcnkgfHwgZmFjdG9yeS5pc1Jlc29sdmVkKSB7XG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIHNldENvbG9yTWFwKGNvbG9yTWFwKSB7XG4gICAgICAgIHRoaXMuX2NvbG9yTWFwID0gY29sb3JNYXA7XG4gICAgICAgIHRoaXMuX29uRGlkQ2hhbmdlLmZpcmUoe1xuICAgICAgICAgICAgY2hhbmdlZExhbmd1YWdlczogQXJyYXkuZnJvbSh0aGlzLl90b2tlbml6YXRpb25TdXBwb3J0cy5rZXlzKCkpLFxuICAgICAgICAgICAgY2hhbmdlZENvbG9yTWFwOiB0cnVlXG4gICAgICAgIH0pO1xuICAgIH1cbiAgICBnZXRDb2xvck1hcCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2NvbG9yTWFwO1xuICAgIH1cbiAgICBnZXREZWZhdWx0QmFja2dyb3VuZCgpIHtcbiAgICAgICAgaWYgKHRoaXMuX2NvbG9yTWFwICYmIHRoaXMuX2NvbG9yTWFwLmxlbmd0aCA+IDIgLyogQ29sb3JJZC5EZWZhdWx0QmFja2dyb3VuZCAqLykge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuX2NvbG9yTWFwWzIgLyogQ29sb3JJZC5EZWZhdWx0QmFja2dyb3VuZCAqL107XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxufVxuY2xhc3MgVG9rZW5pemF0aW9uU3VwcG9ydEZhY3RvcnlEYXRhIGV4dGVuZHMgRGlzcG9zYWJsZSB7XG4gICAgZ2V0IGlzUmVzb2x2ZWQoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9pc1Jlc29sdmVkO1xuICAgIH1cbiAgICBjb25zdHJ1Y3RvcihfcmVnaXN0cnksIF9sYW5ndWFnZUlkLCBfZmFjdG9yeSkge1xuICAgICAgICBzdXBlcigpO1xuICAgICAgICB0aGlzLl9yZWdpc3RyeSA9IF9yZWdpc3RyeTtcbiAgICAgICAgdGhpcy5fbGFuZ3VhZ2VJZCA9IF9sYW5ndWFnZUlkO1xuICAgICAgICB0aGlzLl9mYWN0b3J5ID0gX2ZhY3Rvcnk7XG4gICAgICAgIHRoaXMuX2lzRGlzcG9zZWQgPSBmYWxzZTtcbiAgICAgICAgdGhpcy5fcmVzb2x2ZVByb21pc2UgPSBudWxsO1xuICAgICAgICB0aGlzLl9pc1Jlc29sdmVkID0gZmFsc2U7XG4gICAgfVxuICAgIGRpc3Bvc2UoKSB7XG4gICAgICAgIHRoaXMuX2lzRGlzcG9zZWQgPSB0cnVlO1xuICAgICAgICBzdXBlci5kaXNwb3NlKCk7XG4gICAgfVxuICAgIGFzeW5jIHJlc29sdmUoKSB7XG4gICAgICAgIGlmICghdGhpcy5fcmVzb2x2ZVByb21pc2UpIHtcbiAgICAgICAgICAgIHRoaXMuX3Jlc29sdmVQcm9taXNlID0gdGhpcy5fY3JlYXRlKCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRoaXMuX3Jlc29sdmVQcm9taXNlO1xuICAgIH1cbiAgICBhc3luYyBfY3JlYXRlKCkge1xuICAgICAgICBjb25zdCB2YWx1ZSA9IGF3YWl0IHRoaXMuX2ZhY3RvcnkudG9rZW5pemF0aW9uU3VwcG9ydDtcbiAgICAgICAgdGhpcy5faXNSZXNvbHZlZCA9IHRydWU7XG4gICAgICAgIGlmICh2YWx1ZSAmJiAhdGhpcy5faXNEaXNwb3NlZCkge1xuICAgICAgICAgICAgdGhpcy5fcmVnaXN0ZXIodGhpcy5fcmVnaXN0cnkucmVnaXN0ZXIodGhpcy5fbGFuZ3VhZ2VJZCwgdmFsdWUpKTtcbiAgICAgICAgfVxuICAgIH1cbn1cbiIsICJpbXBvcnQgeyBDb2RpY29uIH0gZnJvbSAnLi4vLi4vYmFzZS9jb21tb24vY29kaWNvbnMuanMnO1xuaW1wb3J0IHsgVVJJIH0gZnJvbSAnLi4vLi4vYmFzZS9jb21tb24vdXJpLmpzJztcbmltcG9ydCB7IFJhbmdlIH0gZnJvbSAnLi9jb3JlL3JhbmdlLmpzJztcbmltcG9ydCB7IFRva2VuaXphdGlvblJlZ2lzdHJ5IGFzIFRva2VuaXphdGlvblJlZ2lzdHJ5SW1wbCB9IGZyb20gJy4vdG9rZW5pemF0aW9uUmVnaXN0cnkuanMnO1xuaW1wb3J0IHsgbG9jYWxpemUgfSBmcm9tICcuLi8uLi9ubHMuanMnO1xuZXhwb3J0IGNsYXNzIFRva2VuIHtcbiAgICBjb25zdHJ1Y3RvcihvZmZzZXQsIHR5cGUsIGxhbmd1YWdlKSB7XG4gICAgICAgIHRoaXMub2Zmc2V0ID0gb2Zmc2V0O1xuICAgICAgICB0aGlzLnR5cGUgPSB0eXBlO1xuICAgICAgICB0aGlzLmxhbmd1YWdlID0gbGFuZ3VhZ2U7XG4gICAgICAgIHRoaXMuX3Rva2VuQnJhbmQgPSB1bmRlZmluZWQ7XG4gICAgfVxuICAgIHRvU3RyaW5nKCkge1xuICAgICAgICByZXR1cm4gJygnICsgdGhpcy5vZmZzZXQgKyAnLCAnICsgdGhpcy50eXBlICsgJyknO1xuICAgIH1cbn1cbi8qKlxuICogQGludGVybmFsXG4gKi9cbmV4cG9ydCBjbGFzcyBUb2tlbml6YXRpb25SZXN1bHQge1xuICAgIGNvbnN0cnVjdG9yKHRva2VucywgZW5kU3RhdGUpIHtcbiAgICAgICAgdGhpcy50b2tlbnMgPSB0b2tlbnM7XG4gICAgICAgIHRoaXMuZW5kU3RhdGUgPSBlbmRTdGF0ZTtcbiAgICAgICAgdGhpcy5fdG9rZW5pemF0aW9uUmVzdWx0QnJhbmQgPSB1bmRlZmluZWQ7XG4gICAgfVxufVxuLyoqXG4gKiBAaW50ZXJuYWxcbiAqL1xuZXhwb3J0IGNsYXNzIEVuY29kZWRUb2tlbml6YXRpb25SZXN1bHQge1xuICAgIGNvbnN0cnVjdG9yKFxuICAgIC8qKlxuICAgICAqIFRoZSB0b2tlbnMgaW4gYmluYXJ5IGZvcm1hdC4gRWFjaCB0b2tlbiBvY2N1cGllcyB0d28gYXJyYXkgaW5kaWNlcy4gRm9yIHRva2VuIGk6XG4gICAgICogIC0gYXQgb2Zmc2V0IDIqaSA9PiBzdGFydEluZGV4XG4gICAgICogIC0gYXQgb2Zmc2V0IDIqaSArIDEgPT4gbWV0YWRhdGFcbiAgICAgKlxuICAgICAqL1xuICAgIHRva2VucywgZW5kU3RhdGUpIHtcbiAgICAgICAgdGhpcy50b2tlbnMgPSB0b2tlbnM7XG4gICAgICAgIHRoaXMuZW5kU3RhdGUgPSBlbmRTdGF0ZTtcbiAgICAgICAgdGhpcy5fZW5jb2RlZFRva2VuaXphdGlvblJlc3VsdEJyYW5kID0gdW5kZWZpbmVkO1xuICAgIH1cbn1cbmV4cG9ydCB2YXIgSG92ZXJWZXJib3NpdHlBY3Rpb247XG4oZnVuY3Rpb24gKEhvdmVyVmVyYm9zaXR5QWN0aW9uKSB7XG4gICAgLyoqXG4gICAgICogSW5jcmVhc2UgdGhlIHZlcmJvc2l0eSBvZiB0aGUgaG92ZXJcbiAgICAgKi9cbiAgICBIb3ZlclZlcmJvc2l0eUFjdGlvbltIb3ZlclZlcmJvc2l0eUFjdGlvbltcIkluY3JlYXNlXCJdID0gMF0gPSBcIkluY3JlYXNlXCI7XG4gICAgLyoqXG4gICAgICogRGVjcmVhc2UgdGhlIHZlcmJvc2l0eSBvZiB0aGUgaG92ZXJcbiAgICAgKi9cbiAgICBIb3ZlclZlcmJvc2l0eUFjdGlvbltIb3ZlclZlcmJvc2l0eUFjdGlvbltcIkRlY3JlYXNlXCJdID0gMV0gPSBcIkRlY3JlYXNlXCI7XG59KShIb3ZlclZlcmJvc2l0eUFjdGlvbiB8fCAoSG92ZXJWZXJib3NpdHlBY3Rpb24gPSB7fSkpO1xuLyoqXG4gKiBAaW50ZXJuYWxcbiAqL1xuZXhwb3J0IHZhciBDb21wbGV0aW9uSXRlbUtpbmRzO1xuKGZ1bmN0aW9uIChDb21wbGV0aW9uSXRlbUtpbmRzKSB7XG4gICAgY29uc3QgYnlLaW5kID0gbmV3IE1hcCgpO1xuICAgIGJ5S2luZC5zZXQoMCAvKiBDb21wbGV0aW9uSXRlbUtpbmQuTWV0aG9kICovLCBDb2RpY29uLnN5bWJvbE1ldGhvZCk7XG4gICAgYnlLaW5kLnNldCgxIC8qIENvbXBsZXRpb25JdGVtS2luZC5GdW5jdGlvbiAqLywgQ29kaWNvbi5zeW1ib2xGdW5jdGlvbik7XG4gICAgYnlLaW5kLnNldCgyIC8qIENvbXBsZXRpb25JdGVtS2luZC5Db25zdHJ1Y3RvciAqLywgQ29kaWNvbi5zeW1ib2xDb25zdHJ1Y3Rvcik7XG4gICAgYnlLaW5kLnNldCgzIC8qIENvbXBsZXRpb25JdGVtS2luZC5GaWVsZCAqLywgQ29kaWNvbi5zeW1ib2xGaWVsZCk7XG4gICAgYnlLaW5kLnNldCg0IC8qIENvbXBsZXRpb25JdGVtS2luZC5WYXJpYWJsZSAqLywgQ29kaWNvbi5zeW1ib2xWYXJpYWJsZSk7XG4gICAgYnlLaW5kLnNldCg1IC8qIENvbXBsZXRpb25JdGVtS2luZC5DbGFzcyAqLywgQ29kaWNvbi5zeW1ib2xDbGFzcyk7XG4gICAgYnlLaW5kLnNldCg2IC8qIENvbXBsZXRpb25JdGVtS2luZC5TdHJ1Y3QgKi8sIENvZGljb24uc3ltYm9sU3RydWN0KTtcbiAgICBieUtpbmQuc2V0KDcgLyogQ29tcGxldGlvbkl0ZW1LaW5kLkludGVyZmFjZSAqLywgQ29kaWNvbi5zeW1ib2xJbnRlcmZhY2UpO1xuICAgIGJ5S2luZC5zZXQoOCAvKiBDb21wbGV0aW9uSXRlbUtpbmQuTW9kdWxlICovLCBDb2RpY29uLnN5bWJvbE1vZHVsZSk7XG4gICAgYnlLaW5kLnNldCg5IC8qIENvbXBsZXRpb25JdGVtS2luZC5Qcm9wZXJ0eSAqLywgQ29kaWNvbi5zeW1ib2xQcm9wZXJ0eSk7XG4gICAgYnlLaW5kLnNldCgxMCAvKiBDb21wbGV0aW9uSXRlbUtpbmQuRXZlbnQgKi8sIENvZGljb24uc3ltYm9sRXZlbnQpO1xuICAgIGJ5S2luZC5zZXQoMTEgLyogQ29tcGxldGlvbkl0ZW1LaW5kLk9wZXJhdG9yICovLCBDb2RpY29uLnN5bWJvbE9wZXJhdG9yKTtcbiAgICBieUtpbmQuc2V0KDEyIC8qIENvbXBsZXRpb25JdGVtS2luZC5Vbml0ICovLCBDb2RpY29uLnN5bWJvbFVuaXQpO1xuICAgIGJ5S2luZC5zZXQoMTMgLyogQ29tcGxldGlvbkl0ZW1LaW5kLlZhbHVlICovLCBDb2RpY29uLnN5bWJvbFZhbHVlKTtcbiAgICBieUtpbmQuc2V0KDE1IC8qIENvbXBsZXRpb25JdGVtS2luZC5FbnVtICovLCBDb2RpY29uLnN5bWJvbEVudW0pO1xuICAgIGJ5S2luZC5zZXQoMTQgLyogQ29tcGxldGlvbkl0ZW1LaW5kLkNvbnN0YW50ICovLCBDb2RpY29uLnN5bWJvbENvbnN0YW50KTtcbiAgICBieUtpbmQuc2V0KDE1IC8qIENvbXBsZXRpb25JdGVtS2luZC5FbnVtICovLCBDb2RpY29uLnN5bWJvbEVudW0pO1xuICAgIGJ5S2luZC5zZXQoMTYgLyogQ29tcGxldGlvbkl0ZW1LaW5kLkVudW1NZW1iZXIgKi8sIENvZGljb24uc3ltYm9sRW51bU1lbWJlcik7XG4gICAgYnlLaW5kLnNldCgxNyAvKiBDb21wbGV0aW9uSXRlbUtpbmQuS2V5d29yZCAqLywgQ29kaWNvbi5zeW1ib2xLZXl3b3JkKTtcbiAgICBieUtpbmQuc2V0KDI3IC8qIENvbXBsZXRpb25JdGVtS2luZC5TbmlwcGV0ICovLCBDb2RpY29uLnN5bWJvbFNuaXBwZXQpO1xuICAgIGJ5S2luZC5zZXQoMTggLyogQ29tcGxldGlvbkl0ZW1LaW5kLlRleHQgKi8sIENvZGljb24uc3ltYm9sVGV4dCk7XG4gICAgYnlLaW5kLnNldCgxOSAvKiBDb21wbGV0aW9uSXRlbUtpbmQuQ29sb3IgKi8sIENvZGljb24uc3ltYm9sQ29sb3IpO1xuICAgIGJ5S2luZC5zZXQoMjAgLyogQ29tcGxldGlvbkl0ZW1LaW5kLkZpbGUgKi8sIENvZGljb24uc3ltYm9sRmlsZSk7XG4gICAgYnlLaW5kLnNldCgyMSAvKiBDb21wbGV0aW9uSXRlbUtpbmQuUmVmZXJlbmNlICovLCBDb2RpY29uLnN5bWJvbFJlZmVyZW5jZSk7XG4gICAgYnlLaW5kLnNldCgyMiAvKiBDb21wbGV0aW9uSXRlbUtpbmQuQ3VzdG9tY29sb3IgKi8sIENvZGljb24uc3ltYm9sQ3VzdG9tQ29sb3IpO1xuICAgIGJ5S2luZC5zZXQoMjMgLyogQ29tcGxldGlvbkl0ZW1LaW5kLkZvbGRlciAqLywgQ29kaWNvbi5zeW1ib2xGb2xkZXIpO1xuICAgIGJ5S2luZC5zZXQoMjQgLyogQ29tcGxldGlvbkl0ZW1LaW5kLlR5cGVQYXJhbWV0ZXIgKi8sIENvZGljb24uc3ltYm9sVHlwZVBhcmFtZXRlcik7XG4gICAgYnlLaW5kLnNldCgyNSAvKiBDb21wbGV0aW9uSXRlbUtpbmQuVXNlciAqLywgQ29kaWNvbi5hY2NvdW50KTtcbiAgICBieUtpbmQuc2V0KDI2IC8qIENvbXBsZXRpb25JdGVtS2luZC5Jc3N1ZSAqLywgQ29kaWNvbi5pc3N1ZXMpO1xuICAgIC8qKlxuICAgICAqIEBpbnRlcm5hbFxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHRvSWNvbihraW5kKSB7XG4gICAgICAgIGxldCBjb2RpY29uID0gYnlLaW5kLmdldChraW5kKTtcbiAgICAgICAgaWYgKCFjb2RpY29uKSB7XG4gICAgICAgICAgICBjb25zb2xlLmluZm8oJ05vIGNvZGljb24gZm91bmQgZm9yIENvbXBsZXRpb25JdGVtS2luZCAnICsga2luZCk7XG4gICAgICAgICAgICBjb2RpY29uID0gQ29kaWNvbi5zeW1ib2xQcm9wZXJ0eTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gY29kaWNvbjtcbiAgICB9XG4gICAgQ29tcGxldGlvbkl0ZW1LaW5kcy50b0ljb24gPSB0b0ljb247XG4gICAgY29uc3QgZGF0YSA9IG5ldyBNYXAoKTtcbiAgICBkYXRhLnNldCgnbWV0aG9kJywgMCAvKiBDb21wbGV0aW9uSXRlbUtpbmQuTWV0aG9kICovKTtcbiAgICBkYXRhLnNldCgnZnVuY3Rpb24nLCAxIC8qIENvbXBsZXRpb25JdGVtS2luZC5GdW5jdGlvbiAqLyk7XG4gICAgZGF0YS5zZXQoJ2NvbnN0cnVjdG9yJywgMiAvKiBDb21wbGV0aW9uSXRlbUtpbmQuQ29uc3RydWN0b3IgKi8pO1xuICAgIGRhdGEuc2V0KCdmaWVsZCcsIDMgLyogQ29tcGxldGlvbkl0ZW1LaW5kLkZpZWxkICovKTtcbiAgICBkYXRhLnNldCgndmFyaWFibGUnLCA0IC8qIENvbXBsZXRpb25JdGVtS2luZC5WYXJpYWJsZSAqLyk7XG4gICAgZGF0YS5zZXQoJ2NsYXNzJywgNSAvKiBDb21wbGV0aW9uSXRlbUtpbmQuQ2xhc3MgKi8pO1xuICAgIGRhdGEuc2V0KCdzdHJ1Y3QnLCA2IC8qIENvbXBsZXRpb25JdGVtS2luZC5TdHJ1Y3QgKi8pO1xuICAgIGRhdGEuc2V0KCdpbnRlcmZhY2UnLCA3IC8qIENvbXBsZXRpb25JdGVtS2luZC5JbnRlcmZhY2UgKi8pO1xuICAgIGRhdGEuc2V0KCdtb2R1bGUnLCA4IC8qIENvbXBsZXRpb25JdGVtS2luZC5Nb2R1bGUgKi8pO1xuICAgIGRhdGEuc2V0KCdwcm9wZXJ0eScsIDkgLyogQ29tcGxldGlvbkl0ZW1LaW5kLlByb3BlcnR5ICovKTtcbiAgICBkYXRhLnNldCgnZXZlbnQnLCAxMCAvKiBDb21wbGV0aW9uSXRlbUtpbmQuRXZlbnQgKi8pO1xuICAgIGRhdGEuc2V0KCdvcGVyYXRvcicsIDExIC8qIENvbXBsZXRpb25JdGVtS2luZC5PcGVyYXRvciAqLyk7XG4gICAgZGF0YS5zZXQoJ3VuaXQnLCAxMiAvKiBDb21wbGV0aW9uSXRlbUtpbmQuVW5pdCAqLyk7XG4gICAgZGF0YS5zZXQoJ3ZhbHVlJywgMTMgLyogQ29tcGxldGlvbkl0ZW1LaW5kLlZhbHVlICovKTtcbiAgICBkYXRhLnNldCgnY29uc3RhbnQnLCAxNCAvKiBDb21wbGV0aW9uSXRlbUtpbmQuQ29uc3RhbnQgKi8pO1xuICAgIGRhdGEuc2V0KCdlbnVtJywgMTUgLyogQ29tcGxldGlvbkl0ZW1LaW5kLkVudW0gKi8pO1xuICAgIGRhdGEuc2V0KCdlbnVtLW1lbWJlcicsIDE2IC8qIENvbXBsZXRpb25JdGVtS2luZC5FbnVtTWVtYmVyICovKTtcbiAgICBkYXRhLnNldCgnZW51bU1lbWJlcicsIDE2IC8qIENvbXBsZXRpb25JdGVtS2luZC5FbnVtTWVtYmVyICovKTtcbiAgICBkYXRhLnNldCgna2V5d29yZCcsIDE3IC8qIENvbXBsZXRpb25JdGVtS2luZC5LZXl3b3JkICovKTtcbiAgICBkYXRhLnNldCgnc25pcHBldCcsIDI3IC8qIENvbXBsZXRpb25JdGVtS2luZC5TbmlwcGV0ICovKTtcbiAgICBkYXRhLnNldCgndGV4dCcsIDE4IC8qIENvbXBsZXRpb25JdGVtS2luZC5UZXh0ICovKTtcbiAgICBkYXRhLnNldCgnY29sb3InLCAxOSAvKiBDb21wbGV0aW9uSXRlbUtpbmQuQ29sb3IgKi8pO1xuICAgIGRhdGEuc2V0KCdmaWxlJywgMjAgLyogQ29tcGxldGlvbkl0ZW1LaW5kLkZpbGUgKi8pO1xuICAgIGRhdGEuc2V0KCdyZWZlcmVuY2UnLCAyMSAvKiBDb21wbGV0aW9uSXRlbUtpbmQuUmVmZXJlbmNlICovKTtcbiAgICBkYXRhLnNldCgnY3VzdG9tY29sb3InLCAyMiAvKiBDb21wbGV0aW9uSXRlbUtpbmQuQ3VzdG9tY29sb3IgKi8pO1xuICAgIGRhdGEuc2V0KCdmb2xkZXInLCAyMyAvKiBDb21wbGV0aW9uSXRlbUtpbmQuRm9sZGVyICovKTtcbiAgICBkYXRhLnNldCgndHlwZS1wYXJhbWV0ZXInLCAyNCAvKiBDb21wbGV0aW9uSXRlbUtpbmQuVHlwZVBhcmFtZXRlciAqLyk7XG4gICAgZGF0YS5zZXQoJ3R5cGVQYXJhbWV0ZXInLCAyNCAvKiBDb21wbGV0aW9uSXRlbUtpbmQuVHlwZVBhcmFtZXRlciAqLyk7XG4gICAgZGF0YS5zZXQoJ2FjY291bnQnLCAyNSAvKiBDb21wbGV0aW9uSXRlbUtpbmQuVXNlciAqLyk7XG4gICAgZGF0YS5zZXQoJ2lzc3VlJywgMjYgLyogQ29tcGxldGlvbkl0ZW1LaW5kLklzc3VlICovKTtcbiAgICAvKipcbiAgICAgKiBAaW50ZXJuYWxcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBmcm9tU3RyaW5nKHZhbHVlLCBzdHJpY3QpIHtcbiAgICAgICAgbGV0IHJlcyA9IGRhdGEuZ2V0KHZhbHVlKTtcbiAgICAgICAgaWYgKHR5cGVvZiByZXMgPT09ICd1bmRlZmluZWQnICYmICFzdHJpY3QpIHtcbiAgICAgICAgICAgIHJlcyA9IDkgLyogQ29tcGxldGlvbkl0ZW1LaW5kLlByb3BlcnR5ICovO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiByZXM7XG4gICAgfVxuICAgIENvbXBsZXRpb25JdGVtS2luZHMuZnJvbVN0cmluZyA9IGZyb21TdHJpbmc7XG59KShDb21wbGV0aW9uSXRlbUtpbmRzIHx8IChDb21wbGV0aW9uSXRlbUtpbmRzID0ge30pKTtcbi8qKlxuICogSG93IGFuIHtAbGluayBJbmxpbmVDb21wbGV0aW9uc1Byb3ZpZGVyIGlubGluZSBjb21wbGV0aW9uIHByb3ZpZGVyfSB3YXMgdHJpZ2dlcmVkLlxuICovXG5leHBvcnQgdmFyIElubGluZUNvbXBsZXRpb25UcmlnZ2VyS2luZDtcbihmdW5jdGlvbiAoSW5saW5lQ29tcGxldGlvblRyaWdnZXJLaW5kKSB7XG4gICAgLyoqXG4gICAgICogQ29tcGxldGlvbiB3YXMgdHJpZ2dlcmVkIGF1dG9tYXRpY2FsbHkgd2hpbGUgZWRpdGluZy5cbiAgICAgKiBJdCBpcyBzdWZmaWNpZW50IHRvIHJldHVybiBhIHNpbmdsZSBjb21wbGV0aW9uIGl0ZW0gaW4gdGhpcyBjYXNlLlxuICAgICAqL1xuICAgIElubGluZUNvbXBsZXRpb25UcmlnZ2VyS2luZFtJbmxpbmVDb21wbGV0aW9uVHJpZ2dlcktpbmRbXCJBdXRvbWF0aWNcIl0gPSAwXSA9IFwiQXV0b21hdGljXCI7XG4gICAgLyoqXG4gICAgICogQ29tcGxldGlvbiB3YXMgdHJpZ2dlcmVkIGV4cGxpY2l0bHkgYnkgYSB1c2VyIGdlc3R1cmUuXG4gICAgICogUmV0dXJuIG11bHRpcGxlIGNvbXBsZXRpb24gaXRlbXMgdG8gZW5hYmxlIGN5Y2xpbmcgdGhyb3VnaCB0aGVtLlxuICAgICAqL1xuICAgIElubGluZUNvbXBsZXRpb25UcmlnZ2VyS2luZFtJbmxpbmVDb21wbGV0aW9uVHJpZ2dlcktpbmRbXCJFeHBsaWNpdFwiXSA9IDFdID0gXCJFeHBsaWNpdFwiO1xufSkoSW5saW5lQ29tcGxldGlvblRyaWdnZXJLaW5kIHx8IChJbmxpbmVDb21wbGV0aW9uVHJpZ2dlcktpbmQgPSB7fSkpO1xuZXhwb3J0IGNsYXNzIFNlbGVjdGVkU3VnZ2VzdGlvbkluZm8ge1xuICAgIGNvbnN0cnVjdG9yKHJhbmdlLCB0ZXh0LCBjb21wbGV0aW9uS2luZCwgaXNTbmlwcGV0VGV4dCkge1xuICAgICAgICB0aGlzLnJhbmdlID0gcmFuZ2U7XG4gICAgICAgIHRoaXMudGV4dCA9IHRleHQ7XG4gICAgICAgIHRoaXMuY29tcGxldGlvbktpbmQgPSBjb21wbGV0aW9uS2luZDtcbiAgICAgICAgdGhpcy5pc1NuaXBwZXRUZXh0ID0gaXNTbmlwcGV0VGV4dDtcbiAgICB9XG4gICAgZXF1YWxzKG90aGVyKSB7XG4gICAgICAgIHJldHVybiBSYW5nZS5saWZ0KHRoaXMucmFuZ2UpLmVxdWFsc1JhbmdlKG90aGVyLnJhbmdlKVxuICAgICAgICAgICAgJiYgdGhpcy50ZXh0ID09PSBvdGhlci50ZXh0XG4gICAgICAgICAgICAmJiB0aGlzLmNvbXBsZXRpb25LaW5kID09PSBvdGhlci5jb21wbGV0aW9uS2luZFxuICAgICAgICAgICAgJiYgdGhpcy5pc1NuaXBwZXRUZXh0ID09PSBvdGhlci5pc1NuaXBwZXRUZXh0O1xuICAgIH1cbn1cbi8qKlxuICogQGludGVybmFsXG4gKi9cbmV4cG9ydCB2YXIgRG9jdW1lbnRQYXN0ZVRyaWdnZXJLaW5kO1xuKGZ1bmN0aW9uIChEb2N1bWVudFBhc3RlVHJpZ2dlcktpbmQpIHtcbiAgICBEb2N1bWVudFBhc3RlVHJpZ2dlcktpbmRbRG9jdW1lbnRQYXN0ZVRyaWdnZXJLaW5kW1wiQXV0b21hdGljXCJdID0gMF0gPSBcIkF1dG9tYXRpY1wiO1xuICAgIERvY3VtZW50UGFzdGVUcmlnZ2VyS2luZFtEb2N1bWVudFBhc3RlVHJpZ2dlcktpbmRbXCJQYXN0ZUFzXCJdID0gMV0gPSBcIlBhc3RlQXNcIjtcbn0pKERvY3VtZW50UGFzdGVUcmlnZ2VyS2luZCB8fCAoRG9jdW1lbnRQYXN0ZVRyaWdnZXJLaW5kID0ge30pKTtcbmV4cG9ydCB2YXIgU2lnbmF0dXJlSGVscFRyaWdnZXJLaW5kO1xuKGZ1bmN0aW9uIChTaWduYXR1cmVIZWxwVHJpZ2dlcktpbmQpIHtcbiAgICBTaWduYXR1cmVIZWxwVHJpZ2dlcktpbmRbU2lnbmF0dXJlSGVscFRyaWdnZXJLaW5kW1wiSW52b2tlXCJdID0gMV0gPSBcIkludm9rZVwiO1xuICAgIFNpZ25hdHVyZUhlbHBUcmlnZ2VyS2luZFtTaWduYXR1cmVIZWxwVHJpZ2dlcktpbmRbXCJUcmlnZ2VyQ2hhcmFjdGVyXCJdID0gMl0gPSBcIlRyaWdnZXJDaGFyYWN0ZXJcIjtcbiAgICBTaWduYXR1cmVIZWxwVHJpZ2dlcktpbmRbU2lnbmF0dXJlSGVscFRyaWdnZXJLaW5kW1wiQ29udGVudENoYW5nZVwiXSA9IDNdID0gXCJDb250ZW50Q2hhbmdlXCI7XG59KShTaWduYXR1cmVIZWxwVHJpZ2dlcktpbmQgfHwgKFNpZ25hdHVyZUhlbHBUcmlnZ2VyS2luZCA9IHt9KSk7XG4vKipcbiAqIEEgZG9jdW1lbnQgaGlnaGxpZ2h0IGtpbmQuXG4gKi9cbmV4cG9ydCB2YXIgRG9jdW1lbnRIaWdobGlnaHRLaW5kO1xuKGZ1bmN0aW9uIChEb2N1bWVudEhpZ2hsaWdodEtpbmQpIHtcbiAgICAvKipcbiAgICAgKiBBIHRleHR1YWwgb2NjdXJyZW5jZS5cbiAgICAgKi9cbiAgICBEb2N1bWVudEhpZ2hsaWdodEtpbmRbRG9jdW1lbnRIaWdobGlnaHRLaW5kW1wiVGV4dFwiXSA9IDBdID0gXCJUZXh0XCI7XG4gICAgLyoqXG4gICAgICogUmVhZC1hY2Nlc3Mgb2YgYSBzeW1ib2wsIGxpa2UgcmVhZGluZyBhIHZhcmlhYmxlLlxuICAgICAqL1xuICAgIERvY3VtZW50SGlnaGxpZ2h0S2luZFtEb2N1bWVudEhpZ2hsaWdodEtpbmRbXCJSZWFkXCJdID0gMV0gPSBcIlJlYWRcIjtcbiAgICAvKipcbiAgICAgKiBXcml0ZS1hY2Nlc3Mgb2YgYSBzeW1ib2wsIGxpa2Ugd3JpdGluZyB0byBhIHZhcmlhYmxlLlxuICAgICAqL1xuICAgIERvY3VtZW50SGlnaGxpZ2h0S2luZFtEb2N1bWVudEhpZ2hsaWdodEtpbmRbXCJXcml0ZVwiXSA9IDJdID0gXCJXcml0ZVwiO1xufSkoRG9jdW1lbnRIaWdobGlnaHRLaW5kIHx8IChEb2N1bWVudEhpZ2hsaWdodEtpbmQgPSB7fSkpO1xuLyoqXG4gKiBAaW50ZXJuYWxcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGlzTG9jYXRpb25MaW5rKHRoaW5nKSB7XG4gICAgcmV0dXJuIHRoaW5nXG4gICAgICAgICYmIFVSSS5pc1VyaSh0aGluZy51cmkpXG4gICAgICAgICYmIFJhbmdlLmlzSVJhbmdlKHRoaW5nLnJhbmdlKVxuICAgICAgICAmJiAoUmFuZ2UuaXNJUmFuZ2UodGhpbmcub3JpZ2luU2VsZWN0aW9uUmFuZ2UpIHx8IFJhbmdlLmlzSVJhbmdlKHRoaW5nLnRhcmdldFNlbGVjdGlvblJhbmdlKSk7XG59XG4vKipcbiAqIEBpbnRlcm5hbFxuICovXG5leHBvcnQgY29uc3Qgc3ltYm9sS2luZE5hbWVzID0ge1xuICAgIFsxNyAvKiBTeW1ib2xLaW5kLkFycmF5ICovXTogbG9jYWxpemUoJ0FycmF5JywgXCJhcnJheVwiKSxcbiAgICBbMTYgLyogU3ltYm9sS2luZC5Cb29sZWFuICovXTogbG9jYWxpemUoJ0Jvb2xlYW4nLCBcImJvb2xlYW5cIiksXG4gICAgWzQgLyogU3ltYm9sS2luZC5DbGFzcyAqL106IGxvY2FsaXplKCdDbGFzcycsIFwiY2xhc3NcIiksXG4gICAgWzEzIC8qIFN5bWJvbEtpbmQuQ29uc3RhbnQgKi9dOiBsb2NhbGl6ZSgnQ29uc3RhbnQnLCBcImNvbnN0YW50XCIpLFxuICAgIFs4IC8qIFN5bWJvbEtpbmQuQ29uc3RydWN0b3IgKi9dOiBsb2NhbGl6ZSgnQ29uc3RydWN0b3InLCBcImNvbnN0cnVjdG9yXCIpLFxuICAgIFs5IC8qIFN5bWJvbEtpbmQuRW51bSAqL106IGxvY2FsaXplKCdFbnVtJywgXCJlbnVtZXJhdGlvblwiKSxcbiAgICBbMjEgLyogU3ltYm9sS2luZC5FbnVtTWVtYmVyICovXTogbG9jYWxpemUoJ0VudW1NZW1iZXInLCBcImVudW1lcmF0aW9uIG1lbWJlclwiKSxcbiAgICBbMjMgLyogU3ltYm9sS2luZC5FdmVudCAqL106IGxvY2FsaXplKCdFdmVudCcsIFwiZXZlbnRcIiksXG4gICAgWzcgLyogU3ltYm9sS2luZC5GaWVsZCAqL106IGxvY2FsaXplKCdGaWVsZCcsIFwiZmllbGRcIiksXG4gICAgWzAgLyogU3ltYm9sS2luZC5GaWxlICovXTogbG9jYWxpemUoJ0ZpbGUnLCBcImZpbGVcIiksXG4gICAgWzExIC8qIFN5bWJvbEtpbmQuRnVuY3Rpb24gKi9dOiBsb2NhbGl6ZSgnRnVuY3Rpb24nLCBcImZ1bmN0aW9uXCIpLFxuICAgIFsxMCAvKiBTeW1ib2xLaW5kLkludGVyZmFjZSAqL106IGxvY2FsaXplKCdJbnRlcmZhY2UnLCBcImludGVyZmFjZVwiKSxcbiAgICBbMTkgLyogU3ltYm9sS2luZC5LZXkgKi9dOiBsb2NhbGl6ZSgnS2V5JywgXCJrZXlcIiksXG4gICAgWzUgLyogU3ltYm9sS2luZC5NZXRob2QgKi9dOiBsb2NhbGl6ZSgnTWV0aG9kJywgXCJtZXRob2RcIiksXG4gICAgWzEgLyogU3ltYm9sS2luZC5Nb2R1bGUgKi9dOiBsb2NhbGl6ZSgnTW9kdWxlJywgXCJtb2R1bGVcIiksXG4gICAgWzIgLyogU3ltYm9sS2luZC5OYW1lc3BhY2UgKi9dOiBsb2NhbGl6ZSgnTmFtZXNwYWNlJywgXCJuYW1lc3BhY2VcIiksXG4gICAgWzIwIC8qIFN5bWJvbEtpbmQuTnVsbCAqL106IGxvY2FsaXplKCdOdWxsJywgXCJudWxsXCIpLFxuICAgIFsxNSAvKiBTeW1ib2xLaW5kLk51bWJlciAqL106IGxvY2FsaXplKCdOdW1iZXInLCBcIm51bWJlclwiKSxcbiAgICBbMTggLyogU3ltYm9sS2luZC5PYmplY3QgKi9dOiBsb2NhbGl6ZSgnT2JqZWN0JywgXCJvYmplY3RcIiksXG4gICAgWzI0IC8qIFN5bWJvbEtpbmQuT3BlcmF0b3IgKi9dOiBsb2NhbGl6ZSgnT3BlcmF0b3InLCBcIm9wZXJhdG9yXCIpLFxuICAgIFszIC8qIFN5bWJvbEtpbmQuUGFja2FnZSAqL106IGxvY2FsaXplKCdQYWNrYWdlJywgXCJwYWNrYWdlXCIpLFxuICAgIFs2IC8qIFN5bWJvbEtpbmQuUHJvcGVydHkgKi9dOiBsb2NhbGl6ZSgnUHJvcGVydHknLCBcInByb3BlcnR5XCIpLFxuICAgIFsxNCAvKiBTeW1ib2xLaW5kLlN0cmluZyAqL106IGxvY2FsaXplKCdTdHJpbmcnLCBcInN0cmluZ1wiKSxcbiAgICBbMjIgLyogU3ltYm9sS2luZC5TdHJ1Y3QgKi9dOiBsb2NhbGl6ZSgnU3RydWN0JywgXCJzdHJ1Y3RcIiksXG4gICAgWzI1IC8qIFN5bWJvbEtpbmQuVHlwZVBhcmFtZXRlciAqL106IGxvY2FsaXplKCdUeXBlUGFyYW1ldGVyJywgXCJ0eXBlIHBhcmFtZXRlclwiKSxcbiAgICBbMTIgLyogU3ltYm9sS2luZC5WYXJpYWJsZSAqL106IGxvY2FsaXplKCdWYXJpYWJsZScsIFwidmFyaWFibGVcIiksXG59O1xuLyoqXG4gKiBAaW50ZXJuYWxcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGdldEFyaWFMYWJlbEZvclN5bWJvbChzeW1ib2xOYW1lLCBraW5kKSB7XG4gICAgcmV0dXJuIGxvY2FsaXplKCdzeW1ib2xBcmlhTGFiZWwnLCAnezB9ICh7MX0pJywgc3ltYm9sTmFtZSwgc3ltYm9sS2luZE5hbWVzW2tpbmRdKTtcbn1cbi8qKlxuICogQGludGVybmFsXG4gKi9cbmV4cG9ydCB2YXIgU3ltYm9sS2luZHM7XG4oZnVuY3Rpb24gKFN5bWJvbEtpbmRzKSB7XG4gICAgY29uc3QgYnlLaW5kID0gbmV3IE1hcCgpO1xuICAgIGJ5S2luZC5zZXQoMCAvKiBTeW1ib2xLaW5kLkZpbGUgKi8sIENvZGljb24uc3ltYm9sRmlsZSk7XG4gICAgYnlLaW5kLnNldCgxIC8qIFN5bWJvbEtpbmQuTW9kdWxlICovLCBDb2RpY29uLnN5bWJvbE1vZHVsZSk7XG4gICAgYnlLaW5kLnNldCgyIC8qIFN5bWJvbEtpbmQuTmFtZXNwYWNlICovLCBDb2RpY29uLnN5bWJvbE5hbWVzcGFjZSk7XG4gICAgYnlLaW5kLnNldCgzIC8qIFN5bWJvbEtpbmQuUGFja2FnZSAqLywgQ29kaWNvbi5zeW1ib2xQYWNrYWdlKTtcbiAgICBieUtpbmQuc2V0KDQgLyogU3ltYm9sS2luZC5DbGFzcyAqLywgQ29kaWNvbi5zeW1ib2xDbGFzcyk7XG4gICAgYnlLaW5kLnNldCg1IC8qIFN5bWJvbEtpbmQuTWV0aG9kICovLCBDb2RpY29uLnN5bWJvbE1ldGhvZCk7XG4gICAgYnlLaW5kLnNldCg2IC8qIFN5bWJvbEtpbmQuUHJvcGVydHkgKi8sIENvZGljb24uc3ltYm9sUHJvcGVydHkpO1xuICAgIGJ5S2luZC5zZXQoNyAvKiBTeW1ib2xLaW5kLkZpZWxkICovLCBDb2RpY29uLnN5bWJvbEZpZWxkKTtcbiAgICBieUtpbmQuc2V0KDggLyogU3ltYm9sS2luZC5Db25zdHJ1Y3RvciAqLywgQ29kaWNvbi5zeW1ib2xDb25zdHJ1Y3Rvcik7XG4gICAgYnlLaW5kLnNldCg5IC8qIFN5bWJvbEtpbmQuRW51bSAqLywgQ29kaWNvbi5zeW1ib2xFbnVtKTtcbiAgICBieUtpbmQuc2V0KDEwIC8qIFN5bWJvbEtpbmQuSW50ZXJmYWNlICovLCBDb2RpY29uLnN5bWJvbEludGVyZmFjZSk7XG4gICAgYnlLaW5kLnNldCgxMSAvKiBTeW1ib2xLaW5kLkZ1bmN0aW9uICovLCBDb2RpY29uLnN5bWJvbEZ1bmN0aW9uKTtcbiAgICBieUtpbmQuc2V0KDEyIC8qIFN5bWJvbEtpbmQuVmFyaWFibGUgKi8sIENvZGljb24uc3ltYm9sVmFyaWFibGUpO1xuICAgIGJ5S2luZC5zZXQoMTMgLyogU3ltYm9sS2luZC5Db25zdGFudCAqLywgQ29kaWNvbi5zeW1ib2xDb25zdGFudCk7XG4gICAgYnlLaW5kLnNldCgxNCAvKiBTeW1ib2xLaW5kLlN0cmluZyAqLywgQ29kaWNvbi5zeW1ib2xTdHJpbmcpO1xuICAgIGJ5S2luZC5zZXQoMTUgLyogU3ltYm9sS2luZC5OdW1iZXIgKi8sIENvZGljb24uc3ltYm9sTnVtYmVyKTtcbiAgICBieUtpbmQuc2V0KDE2IC8qIFN5bWJvbEtpbmQuQm9vbGVhbiAqLywgQ29kaWNvbi5zeW1ib2xCb29sZWFuKTtcbiAgICBieUtpbmQuc2V0KDE3IC8qIFN5bWJvbEtpbmQuQXJyYXkgKi8sIENvZGljb24uc3ltYm9sQXJyYXkpO1xuICAgIGJ5S2luZC5zZXQoMTggLyogU3ltYm9sS2luZC5PYmplY3QgKi8sIENvZGljb24uc3ltYm9sT2JqZWN0KTtcbiAgICBieUtpbmQuc2V0KDE5IC8qIFN5bWJvbEtpbmQuS2V5ICovLCBDb2RpY29uLnN5bWJvbEtleSk7XG4gICAgYnlLaW5kLnNldCgyMCAvKiBTeW1ib2xLaW5kLk51bGwgKi8sIENvZGljb24uc3ltYm9sTnVsbCk7XG4gICAgYnlLaW5kLnNldCgyMSAvKiBTeW1ib2xLaW5kLkVudW1NZW1iZXIgKi8sIENvZGljb24uc3ltYm9sRW51bU1lbWJlcik7XG4gICAgYnlLaW5kLnNldCgyMiAvKiBTeW1ib2xLaW5kLlN0cnVjdCAqLywgQ29kaWNvbi5zeW1ib2xTdHJ1Y3QpO1xuICAgIGJ5S2luZC5zZXQoMjMgLyogU3ltYm9sS2luZC5FdmVudCAqLywgQ29kaWNvbi5zeW1ib2xFdmVudCk7XG4gICAgYnlLaW5kLnNldCgyNCAvKiBTeW1ib2xLaW5kLk9wZXJhdG9yICovLCBDb2RpY29uLnN5bWJvbE9wZXJhdG9yKTtcbiAgICBieUtpbmQuc2V0KDI1IC8qIFN5bWJvbEtpbmQuVHlwZVBhcmFtZXRlciAqLywgQ29kaWNvbi5zeW1ib2xUeXBlUGFyYW1ldGVyKTtcbiAgICAvKipcbiAgICAgKiBAaW50ZXJuYWxcbiAgICAgKi9cbiAgICBmdW5jdGlvbiB0b0ljb24oa2luZCkge1xuICAgICAgICBsZXQgaWNvbiA9IGJ5S2luZC5nZXQoa2luZCk7XG4gICAgICAgIGlmICghaWNvbikge1xuICAgICAgICAgICAgY29uc29sZS5pbmZvKCdObyBjb2RpY29uIGZvdW5kIGZvciBTeW1ib2xLaW5kICcgKyBraW5kKTtcbiAgICAgICAgICAgIGljb24gPSBDb2RpY29uLnN5bWJvbFByb3BlcnR5O1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBpY29uO1xuICAgIH1cbiAgICBTeW1ib2xLaW5kcy50b0ljb24gPSB0b0ljb247XG59KShTeW1ib2xLaW5kcyB8fCAoU3ltYm9sS2luZHMgPSB7fSkpO1xuLyoqIEBpbnRlcm5hbCAqL1xuZXhwb3J0IGNsYXNzIFRleHRFZGl0IHtcbn1cbmV4cG9ydCBjbGFzcyBGb2xkaW5nUmFuZ2VLaW5kIHtcbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIGEge0BsaW5rIEZvbGRpbmdSYW5nZUtpbmR9IGZvciB0aGUgZ2l2ZW4gdmFsdWUuXG4gICAgICpcbiAgICAgKiBAcGFyYW0gdmFsdWUgb2YgdGhlIGtpbmQuXG4gICAgICovXG4gICAgc3RhdGljIGZyb21WYWx1ZSh2YWx1ZSkge1xuICAgICAgICBzd2l0Y2ggKHZhbHVlKSB7XG4gICAgICAgICAgICBjYXNlICdjb21tZW50JzogcmV0dXJuIEZvbGRpbmdSYW5nZUtpbmQuQ29tbWVudDtcbiAgICAgICAgICAgIGNhc2UgJ2ltcG9ydHMnOiByZXR1cm4gRm9sZGluZ1JhbmdlS2luZC5JbXBvcnRzO1xuICAgICAgICAgICAgY2FzZSAncmVnaW9uJzogcmV0dXJuIEZvbGRpbmdSYW5nZUtpbmQuUmVnaW9uO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBuZXcgRm9sZGluZ1JhbmdlS2luZCh2YWx1ZSk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBuZXcge0BsaW5rIEZvbGRpbmdSYW5nZUtpbmR9LlxuICAgICAqXG4gICAgICogQHBhcmFtIHZhbHVlIG9mIHRoZSBraW5kLlxuICAgICAqL1xuICAgIGNvbnN0cnVjdG9yKHZhbHVlKSB7XG4gICAgICAgIHRoaXMudmFsdWUgPSB2YWx1ZTtcbiAgICB9XG59XG4vKipcbiAqIEtpbmQgZm9yIGZvbGRpbmcgcmFuZ2UgcmVwcmVzZW50aW5nIGEgY29tbWVudC4gVGhlIHZhbHVlIG9mIHRoZSBraW5kIGlzICdjb21tZW50Jy5cbiAqL1xuRm9sZGluZ1JhbmdlS2luZC5Db21tZW50ID0gbmV3IEZvbGRpbmdSYW5nZUtpbmQoJ2NvbW1lbnQnKTtcbi8qKlxuICogS2luZCBmb3IgZm9sZGluZyByYW5nZSByZXByZXNlbnRpbmcgYSBpbXBvcnQuIFRoZSB2YWx1ZSBvZiB0aGUga2luZCBpcyAnaW1wb3J0cycuXG4gKi9cbkZvbGRpbmdSYW5nZUtpbmQuSW1wb3J0cyA9IG5ldyBGb2xkaW5nUmFuZ2VLaW5kKCdpbXBvcnRzJyk7XG4vKipcbiAqIEtpbmQgZm9yIGZvbGRpbmcgcmFuZ2UgcmVwcmVzZW50aW5nIHJlZ2lvbnMgKGZvciBleGFtcGxlIG1hcmtlZCBieSBgI3JlZ2lvbmAsIGAjZW5kcmVnaW9uYCkuXG4gKiBUaGUgdmFsdWUgb2YgdGhlIGtpbmQgaXMgJ3JlZ2lvbicuXG4gKi9cbkZvbGRpbmdSYW5nZUtpbmQuUmVnaW9uID0gbmV3IEZvbGRpbmdSYW5nZUtpbmQoJ3JlZ2lvbicpO1xuZXhwb3J0IHZhciBOZXdTeW1ib2xOYW1lVGFnO1xuKGZ1bmN0aW9uIChOZXdTeW1ib2xOYW1lVGFnKSB7XG4gICAgTmV3U3ltYm9sTmFtZVRhZ1tOZXdTeW1ib2xOYW1lVGFnW1wiQUlHZW5lcmF0ZWRcIl0gPSAxXSA9IFwiQUlHZW5lcmF0ZWRcIjtcbn0pKE5ld1N5bWJvbE5hbWVUYWcgfHwgKE5ld1N5bWJvbE5hbWVUYWcgPSB7fSkpO1xuZXhwb3J0IHZhciBOZXdTeW1ib2xOYW1lVHJpZ2dlcktpbmQ7XG4oZnVuY3Rpb24gKE5ld1N5bWJvbE5hbWVUcmlnZ2VyS2luZCkge1xuICAgIE5ld1N5bWJvbE5hbWVUcmlnZ2VyS2luZFtOZXdTeW1ib2xOYW1lVHJpZ2dlcktpbmRbXCJJbnZva2VcIl0gPSAwXSA9IFwiSW52b2tlXCI7XG4gICAgTmV3U3ltYm9sTmFtZVRyaWdnZXJLaW5kW05ld1N5bWJvbE5hbWVUcmlnZ2VyS2luZFtcIkF1dG9tYXRpY1wiXSA9IDFdID0gXCJBdXRvbWF0aWNcIjtcbn0pKE5ld1N5bWJvbE5hbWVUcmlnZ2VyS2luZCB8fCAoTmV3U3ltYm9sTmFtZVRyaWdnZXJLaW5kID0ge30pKTtcbi8qKlxuICogQGludGVybmFsXG4gKi9cbmV4cG9ydCB2YXIgQ29tbWFuZDtcbihmdW5jdGlvbiAoQ29tbWFuZCkge1xuICAgIC8qKlxuICAgICAqIEBpbnRlcm5hbFxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGlzKG9iaikge1xuICAgICAgICBpZiAoIW9iaiB8fCB0eXBlb2Ygb2JqICE9PSAnb2JqZWN0Jykge1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0eXBlb2Ygb2JqLmlkID09PSAnc3RyaW5nJyAmJlxuICAgICAgICAgICAgdHlwZW9mIG9iai50aXRsZSA9PT0gJ3N0cmluZyc7XG4gICAgfVxuICAgIENvbW1hbmQuaXMgPSBpcztcbn0pKENvbW1hbmQgfHwgKENvbW1hbmQgPSB7fSkpO1xuZXhwb3J0IHZhciBJbmxheUhpbnRLaW5kO1xuKGZ1bmN0aW9uIChJbmxheUhpbnRLaW5kKSB7XG4gICAgSW5sYXlIaW50S2luZFtJbmxheUhpbnRLaW5kW1wiVHlwZVwiXSA9IDFdID0gXCJUeXBlXCI7XG4gICAgSW5sYXlIaW50S2luZFtJbmxheUhpbnRLaW5kW1wiUGFyYW1ldGVyXCJdID0gMl0gPSBcIlBhcmFtZXRlclwiO1xufSkoSW5sYXlIaW50S2luZCB8fCAoSW5sYXlIaW50S2luZCA9IHt9KSk7XG4vKipcbiAqIEBpbnRlcm5hbFxuICovXG5leHBvcnQgY2xhc3MgTGF6eVRva2VuaXphdGlvblN1cHBvcnQge1xuICAgIGNvbnN0cnVjdG9yKGNyZWF0ZVN1cHBvcnQpIHtcbiAgICAgICAgdGhpcy5jcmVhdGVTdXBwb3J0ID0gY3JlYXRlU3VwcG9ydDtcbiAgICAgICAgdGhpcy5fdG9rZW5pemF0aW9uU3VwcG9ydCA9IG51bGw7XG4gICAgfVxuICAgIGRpc3Bvc2UoKSB7XG4gICAgICAgIGlmICh0aGlzLl90b2tlbml6YXRpb25TdXBwb3J0KSB7XG4gICAgICAgICAgICB0aGlzLl90b2tlbml6YXRpb25TdXBwb3J0LnRoZW4oKHN1cHBvcnQpID0+IHtcbiAgICAgICAgICAgICAgICBpZiAoc3VwcG9ydCkge1xuICAgICAgICAgICAgICAgICAgICBzdXBwb3J0LmRpc3Bvc2UoKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBnZXQgdG9rZW5pemF0aW9uU3VwcG9ydCgpIHtcbiAgICAgICAgaWYgKCF0aGlzLl90b2tlbml6YXRpb25TdXBwb3J0KSB7XG4gICAgICAgICAgICB0aGlzLl90b2tlbml6YXRpb25TdXBwb3J0ID0gdGhpcy5jcmVhdGVTdXBwb3J0KCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRoaXMuX3Rva2VuaXphdGlvblN1cHBvcnQ7XG4gICAgfVxufVxuLyoqXG4gKiBAaW50ZXJuYWxcbiAqL1xuZXhwb3J0IGNvbnN0IFRva2VuaXphdGlvblJlZ2lzdHJ5ID0gbmV3IFRva2VuaXphdGlvblJlZ2lzdHJ5SW1wbCgpO1xuZXhwb3J0IHZhciBJbmxpbmVFZGl0VHJpZ2dlcktpbmQ7XG4oZnVuY3Rpb24gKElubGluZUVkaXRUcmlnZ2VyS2luZCkge1xuICAgIElubGluZUVkaXRUcmlnZ2VyS2luZFtJbmxpbmVFZGl0VHJpZ2dlcktpbmRbXCJJbnZva2VcIl0gPSAwXSA9IFwiSW52b2tlXCI7XG4gICAgSW5saW5lRWRpdFRyaWdnZXJLaW5kW0lubGluZUVkaXRUcmlnZ2VyS2luZFtcIkF1dG9tYXRpY1wiXSA9IDFdID0gXCJBdXRvbWF0aWNcIjtcbn0pKElubGluZUVkaXRUcmlnZ2VyS2luZCB8fCAoSW5saW5lRWRpdFRyaWdnZXJLaW5kID0ge30pKTtcbiIsICIvKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICogIENvcHlyaWdodCAoYykgTWljcm9zb2Z0IENvcnBvcmF0aW9uLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICogIExpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgTGljZW5zZS4gU2VlIExpY2Vuc2UudHh0IGluIHRoZSBwcm9qZWN0IHJvb3QgZm9yIGxpY2Vuc2UgaW5mb3JtYXRpb24uXG4gKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKi9cbi8vIFRISVMgSVMgQSBHRU5FUkFURUQgRklMRS4gRE8gTk9UIEVESVQgRElSRUNUTFkuXG5leHBvcnQgdmFyIEFjY2Vzc2liaWxpdHlTdXBwb3J0O1xuKGZ1bmN0aW9uIChBY2Nlc3NpYmlsaXR5U3VwcG9ydCkge1xuICAgIC8qKlxuICAgICAqIFRoaXMgc2hvdWxkIGJlIHRoZSBicm93c2VyIGNhc2Ugd2hlcmUgaXQgaXMgbm90IGtub3duIGlmIGEgc2NyZWVuIHJlYWRlciBpcyBhdHRhY2hlZCBvciBuby5cbiAgICAgKi9cbiAgICBBY2Nlc3NpYmlsaXR5U3VwcG9ydFtBY2Nlc3NpYmlsaXR5U3VwcG9ydFtcIlVua25vd25cIl0gPSAwXSA9IFwiVW5rbm93blwiO1xuICAgIEFjY2Vzc2liaWxpdHlTdXBwb3J0W0FjY2Vzc2liaWxpdHlTdXBwb3J0W1wiRGlzYWJsZWRcIl0gPSAxXSA9IFwiRGlzYWJsZWRcIjtcbiAgICBBY2Nlc3NpYmlsaXR5U3VwcG9ydFtBY2Nlc3NpYmlsaXR5U3VwcG9ydFtcIkVuYWJsZWRcIl0gPSAyXSA9IFwiRW5hYmxlZFwiO1xufSkoQWNjZXNzaWJpbGl0eVN1cHBvcnQgfHwgKEFjY2Vzc2liaWxpdHlTdXBwb3J0ID0ge30pKTtcbmV4cG9ydCB2YXIgQ29kZUFjdGlvblRyaWdnZXJUeXBlO1xuKGZ1bmN0aW9uIChDb2RlQWN0aW9uVHJpZ2dlclR5cGUpIHtcbiAgICBDb2RlQWN0aW9uVHJpZ2dlclR5cGVbQ29kZUFjdGlvblRyaWdnZXJUeXBlW1wiSW52b2tlXCJdID0gMV0gPSBcIkludm9rZVwiO1xuICAgIENvZGVBY3Rpb25UcmlnZ2VyVHlwZVtDb2RlQWN0aW9uVHJpZ2dlclR5cGVbXCJBdXRvXCJdID0gMl0gPSBcIkF1dG9cIjtcbn0pKENvZGVBY3Rpb25UcmlnZ2VyVHlwZSB8fCAoQ29kZUFjdGlvblRyaWdnZXJUeXBlID0ge30pKTtcbmV4cG9ydCB2YXIgQ29tcGxldGlvbkl0ZW1JbnNlcnRUZXh0UnVsZTtcbihmdW5jdGlvbiAoQ29tcGxldGlvbkl0ZW1JbnNlcnRUZXh0UnVsZSkge1xuICAgIENvbXBsZXRpb25JdGVtSW5zZXJ0VGV4dFJ1bGVbQ29tcGxldGlvbkl0ZW1JbnNlcnRUZXh0UnVsZVtcIk5vbmVcIl0gPSAwXSA9IFwiTm9uZVwiO1xuICAgIC8qKlxuICAgICAqIEFkanVzdCB3aGl0ZXNwYWNlL2luZGVudGF0aW9uIG9mIG11bHRpbGluZSBpbnNlcnQgdGV4dHMgdG9cbiAgICAgKiBtYXRjaCB0aGUgY3VycmVudCBsaW5lIGluZGVudGF0aW9uLlxuICAgICAqL1xuICAgIENvbXBsZXRpb25JdGVtSW5zZXJ0VGV4dFJ1bGVbQ29tcGxldGlvbkl0ZW1JbnNlcnRUZXh0UnVsZVtcIktlZXBXaGl0ZXNwYWNlXCJdID0gMV0gPSBcIktlZXBXaGl0ZXNwYWNlXCI7XG4gICAgLyoqXG4gICAgICogYGluc2VydFRleHRgIGlzIGEgc25pcHBldC5cbiAgICAgKi9cbiAgICBDb21wbGV0aW9uSXRlbUluc2VydFRleHRSdWxlW0NvbXBsZXRpb25JdGVtSW5zZXJ0VGV4dFJ1bGVbXCJJbnNlcnRBc1NuaXBwZXRcIl0gPSA0XSA9IFwiSW5zZXJ0QXNTbmlwcGV0XCI7XG59KShDb21wbGV0aW9uSXRlbUluc2VydFRleHRSdWxlIHx8IChDb21wbGV0aW9uSXRlbUluc2VydFRleHRSdWxlID0ge30pKTtcbmV4cG9ydCB2YXIgQ29tcGxldGlvbkl0ZW1LaW5kO1xuKGZ1bmN0aW9uIChDb21wbGV0aW9uSXRlbUtpbmQpIHtcbiAgICBDb21wbGV0aW9uSXRlbUtpbmRbQ29tcGxldGlvbkl0ZW1LaW5kW1wiTWV0aG9kXCJdID0gMF0gPSBcIk1ldGhvZFwiO1xuICAgIENvbXBsZXRpb25JdGVtS2luZFtDb21wbGV0aW9uSXRlbUtpbmRbXCJGdW5jdGlvblwiXSA9IDFdID0gXCJGdW5jdGlvblwiO1xuICAgIENvbXBsZXRpb25JdGVtS2luZFtDb21wbGV0aW9uSXRlbUtpbmRbXCJDb25zdHJ1Y3RvclwiXSA9IDJdID0gXCJDb25zdHJ1Y3RvclwiO1xuICAgIENvbXBsZXRpb25JdGVtS2luZFtDb21wbGV0aW9uSXRlbUtpbmRbXCJGaWVsZFwiXSA9IDNdID0gXCJGaWVsZFwiO1xuICAgIENvbXBsZXRpb25JdGVtS2luZFtDb21wbGV0aW9uSXRlbUtpbmRbXCJWYXJpYWJsZVwiXSA9IDRdID0gXCJWYXJpYWJsZVwiO1xuICAgIENvbXBsZXRpb25JdGVtS2luZFtDb21wbGV0aW9uSXRlbUtpbmRbXCJDbGFzc1wiXSA9IDVdID0gXCJDbGFzc1wiO1xuICAgIENvbXBsZXRpb25JdGVtS2luZFtDb21wbGV0aW9uSXRlbUtpbmRbXCJTdHJ1Y3RcIl0gPSA2XSA9IFwiU3RydWN0XCI7XG4gICAgQ29tcGxldGlvbkl0ZW1LaW5kW0NvbXBsZXRpb25JdGVtS2luZFtcIkludGVyZmFjZVwiXSA9IDddID0gXCJJbnRlcmZhY2VcIjtcbiAgICBDb21wbGV0aW9uSXRlbUtpbmRbQ29tcGxldGlvbkl0ZW1LaW5kW1wiTW9kdWxlXCJdID0gOF0gPSBcIk1vZHVsZVwiO1xuICAgIENvbXBsZXRpb25JdGVtS2luZFtDb21wbGV0aW9uSXRlbUtpbmRbXCJQcm9wZXJ0eVwiXSA9IDldID0gXCJQcm9wZXJ0eVwiO1xuICAgIENvbXBsZXRpb25JdGVtS2luZFtDb21wbGV0aW9uSXRlbUtpbmRbXCJFdmVudFwiXSA9IDEwXSA9IFwiRXZlbnRcIjtcbiAgICBDb21wbGV0aW9uSXRlbUtpbmRbQ29tcGxldGlvbkl0ZW1LaW5kW1wiT3BlcmF0b3JcIl0gPSAxMV0gPSBcIk9wZXJhdG9yXCI7XG4gICAgQ29tcGxldGlvbkl0ZW1LaW5kW0NvbXBsZXRpb25JdGVtS2luZFtcIlVuaXRcIl0gPSAxMl0gPSBcIlVuaXRcIjtcbiAgICBDb21wbGV0aW9uSXRlbUtpbmRbQ29tcGxldGlvbkl0ZW1LaW5kW1wiVmFsdWVcIl0gPSAxM10gPSBcIlZhbHVlXCI7XG4gICAgQ29tcGxldGlvbkl0ZW1LaW5kW0NvbXBsZXRpb25JdGVtS2luZFtcIkNvbnN0YW50XCJdID0gMTRdID0gXCJDb25zdGFudFwiO1xuICAgIENvbXBsZXRpb25JdGVtS2luZFtDb21wbGV0aW9uSXRlbUtpbmRbXCJFbnVtXCJdID0gMTVdID0gXCJFbnVtXCI7XG4gICAgQ29tcGxldGlvbkl0ZW1LaW5kW0NvbXBsZXRpb25JdGVtS2luZFtcIkVudW1NZW1iZXJcIl0gPSAxNl0gPSBcIkVudW1NZW1iZXJcIjtcbiAgICBDb21wbGV0aW9uSXRlbUtpbmRbQ29tcGxldGlvbkl0ZW1LaW5kW1wiS2V5d29yZFwiXSA9IDE3XSA9IFwiS2V5d29yZFwiO1xuICAgIENvbXBsZXRpb25JdGVtS2luZFtDb21wbGV0aW9uSXRlbUtpbmRbXCJUZXh0XCJdID0gMThdID0gXCJUZXh0XCI7XG4gICAgQ29tcGxldGlvbkl0ZW1LaW5kW0NvbXBsZXRpb25JdGVtS2luZFtcIkNvbG9yXCJdID0gMTldID0gXCJDb2xvclwiO1xuICAgIENvbXBsZXRpb25JdGVtS2luZFtDb21wbGV0aW9uSXRlbUtpbmRbXCJGaWxlXCJdID0gMjBdID0gXCJGaWxlXCI7XG4gICAgQ29tcGxldGlvbkl0ZW1LaW5kW0NvbXBsZXRpb25JdGVtS2luZFtcIlJlZmVyZW5jZVwiXSA9IDIxXSA9IFwiUmVmZXJlbmNlXCI7XG4gICAgQ29tcGxldGlvbkl0ZW1LaW5kW0NvbXBsZXRpb25JdGVtS2luZFtcIkN1c3RvbWNvbG9yXCJdID0gMjJdID0gXCJDdXN0b21jb2xvclwiO1xuICAgIENvbXBsZXRpb25JdGVtS2luZFtDb21wbGV0aW9uSXRlbUtpbmRbXCJGb2xkZXJcIl0gPSAyM10gPSBcIkZvbGRlclwiO1xuICAgIENvbXBsZXRpb25JdGVtS2luZFtDb21wbGV0aW9uSXRlbUtpbmRbXCJUeXBlUGFyYW1ldGVyXCJdID0gMjRdID0gXCJUeXBlUGFyYW1ldGVyXCI7XG4gICAgQ29tcGxldGlvbkl0ZW1LaW5kW0NvbXBsZXRpb25JdGVtS2luZFtcIlVzZXJcIl0gPSAyNV0gPSBcIlVzZXJcIjtcbiAgICBDb21wbGV0aW9uSXRlbUtpbmRbQ29tcGxldGlvbkl0ZW1LaW5kW1wiSXNzdWVcIl0gPSAyNl0gPSBcIklzc3VlXCI7XG4gICAgQ29tcGxldGlvbkl0ZW1LaW5kW0NvbXBsZXRpb25JdGVtS2luZFtcIlNuaXBwZXRcIl0gPSAyN10gPSBcIlNuaXBwZXRcIjtcbn0pKENvbXBsZXRpb25JdGVtS2luZCB8fCAoQ29tcGxldGlvbkl0ZW1LaW5kID0ge30pKTtcbmV4cG9ydCB2YXIgQ29tcGxldGlvbkl0ZW1UYWc7XG4oZnVuY3Rpb24gKENvbXBsZXRpb25JdGVtVGFnKSB7XG4gICAgQ29tcGxldGlvbkl0ZW1UYWdbQ29tcGxldGlvbkl0ZW1UYWdbXCJEZXByZWNhdGVkXCJdID0gMV0gPSBcIkRlcHJlY2F0ZWRcIjtcbn0pKENvbXBsZXRpb25JdGVtVGFnIHx8IChDb21wbGV0aW9uSXRlbVRhZyA9IHt9KSk7XG4vKipcbiAqIEhvdyBhIHN1Z2dlc3QgcHJvdmlkZXIgd2FzIHRyaWdnZXJlZC5cbiAqL1xuZXhwb3J0IHZhciBDb21wbGV0aW9uVHJpZ2dlcktpbmQ7XG4oZnVuY3Rpb24gKENvbXBsZXRpb25UcmlnZ2VyS2luZCkge1xuICAgIENvbXBsZXRpb25UcmlnZ2VyS2luZFtDb21wbGV0aW9uVHJpZ2dlcktpbmRbXCJJbnZva2VcIl0gPSAwXSA9IFwiSW52b2tlXCI7XG4gICAgQ29tcGxldGlvblRyaWdnZXJLaW5kW0NvbXBsZXRpb25UcmlnZ2VyS2luZFtcIlRyaWdnZXJDaGFyYWN0ZXJcIl0gPSAxXSA9IFwiVHJpZ2dlckNoYXJhY3RlclwiO1xuICAgIENvbXBsZXRpb25UcmlnZ2VyS2luZFtDb21wbGV0aW9uVHJpZ2dlcktpbmRbXCJUcmlnZ2VyRm9ySW5jb21wbGV0ZUNvbXBsZXRpb25zXCJdID0gMl0gPSBcIlRyaWdnZXJGb3JJbmNvbXBsZXRlQ29tcGxldGlvbnNcIjtcbn0pKENvbXBsZXRpb25UcmlnZ2VyS2luZCB8fCAoQ29tcGxldGlvblRyaWdnZXJLaW5kID0ge30pKTtcbi8qKlxuICogQSBwb3NpdGlvbmluZyBwcmVmZXJlbmNlIGZvciByZW5kZXJpbmcgY29udGVudCB3aWRnZXRzLlxuICovXG5leHBvcnQgdmFyIENvbnRlbnRXaWRnZXRQb3NpdGlvblByZWZlcmVuY2U7XG4oZnVuY3Rpb24gKENvbnRlbnRXaWRnZXRQb3NpdGlvblByZWZlcmVuY2UpIHtcbiAgICAvKipcbiAgICAgKiBQbGFjZSB0aGUgY29udGVudCB3aWRnZXQgZXhhY3RseSBhdCBhIHBvc2l0aW9uXG4gICAgICovXG4gICAgQ29udGVudFdpZGdldFBvc2l0aW9uUHJlZmVyZW5jZVtDb250ZW50V2lkZ2V0UG9zaXRpb25QcmVmZXJlbmNlW1wiRVhBQ1RcIl0gPSAwXSA9IFwiRVhBQ1RcIjtcbiAgICAvKipcbiAgICAgKiBQbGFjZSB0aGUgY29udGVudCB3aWRnZXQgYWJvdmUgYSBwb3NpdGlvblxuICAgICAqL1xuICAgIENvbnRlbnRXaWRnZXRQb3NpdGlvblByZWZlcmVuY2VbQ29udGVudFdpZGdldFBvc2l0aW9uUHJlZmVyZW5jZVtcIkFCT1ZFXCJdID0gMV0gPSBcIkFCT1ZFXCI7XG4gICAgLyoqXG4gICAgICogUGxhY2UgdGhlIGNvbnRlbnQgd2lkZ2V0IGJlbG93IGEgcG9zaXRpb25cbiAgICAgKi9cbiAgICBDb250ZW50V2lkZ2V0UG9zaXRpb25QcmVmZXJlbmNlW0NvbnRlbnRXaWRnZXRQb3NpdGlvblByZWZlcmVuY2VbXCJCRUxPV1wiXSA9IDJdID0gXCJCRUxPV1wiO1xufSkoQ29udGVudFdpZGdldFBvc2l0aW9uUHJlZmVyZW5jZSB8fCAoQ29udGVudFdpZGdldFBvc2l0aW9uUHJlZmVyZW5jZSA9IHt9KSk7XG4vKipcbiAqIERlc2NyaWJlcyB0aGUgcmVhc29uIHRoZSBjdXJzb3IgaGFzIGNoYW5nZWQgaXRzIHBvc2l0aW9uLlxuICovXG5leHBvcnQgdmFyIEN1cnNvckNoYW5nZVJlYXNvbjtcbihmdW5jdGlvbiAoQ3Vyc29yQ2hhbmdlUmVhc29uKSB7XG4gICAgLyoqXG4gICAgICogVW5rbm93biBvciBub3Qgc2V0LlxuICAgICAqL1xuICAgIEN1cnNvckNoYW5nZVJlYXNvbltDdXJzb3JDaGFuZ2VSZWFzb25bXCJOb3RTZXRcIl0gPSAwXSA9IFwiTm90U2V0XCI7XG4gICAgLyoqXG4gICAgICogQSBgbW9kZWwuc2V0VmFsdWUoKWAgd2FzIGNhbGxlZC5cbiAgICAgKi9cbiAgICBDdXJzb3JDaGFuZ2VSZWFzb25bQ3Vyc29yQ2hhbmdlUmVhc29uW1wiQ29udGVudEZsdXNoXCJdID0gMV0gPSBcIkNvbnRlbnRGbHVzaFwiO1xuICAgIC8qKlxuICAgICAqIFRoZSBgbW9kZWxgIGhhcyBiZWVuIGNoYW5nZWQgb3V0c2lkZSBvZiB0aGlzIGN1cnNvciBhbmQgdGhlIGN1cnNvciByZWNvdmVycyBpdHMgcG9zaXRpb24gZnJvbSBhc3NvY2lhdGVkIG1hcmtlcnMuXG4gICAgICovXG4gICAgQ3Vyc29yQ2hhbmdlUmVhc29uW0N1cnNvckNoYW5nZVJlYXNvbltcIlJlY292ZXJGcm9tTWFya2Vyc1wiXSA9IDJdID0gXCJSZWNvdmVyRnJvbU1hcmtlcnNcIjtcbiAgICAvKipcbiAgICAgKiBUaGVyZSB3YXMgYW4gZXhwbGljaXQgdXNlciBnZXN0dXJlLlxuICAgICAqL1xuICAgIEN1cnNvckNoYW5nZVJlYXNvbltDdXJzb3JDaGFuZ2VSZWFzb25bXCJFeHBsaWNpdFwiXSA9IDNdID0gXCJFeHBsaWNpdFwiO1xuICAgIC8qKlxuICAgICAqIFRoZXJlIHdhcyBhIFBhc3RlLlxuICAgICAqL1xuICAgIEN1cnNvckNoYW5nZVJlYXNvbltDdXJzb3JDaGFuZ2VSZWFzb25bXCJQYXN0ZVwiXSA9IDRdID0gXCJQYXN0ZVwiO1xuICAgIC8qKlxuICAgICAqIFRoZXJlIHdhcyBhbiBVbmRvLlxuICAgICAqL1xuICAgIEN1cnNvckNoYW5nZVJlYXNvbltDdXJzb3JDaGFuZ2VSZWFzb25bXCJVbmRvXCJdID0gNV0gPSBcIlVuZG9cIjtcbiAgICAvKipcbiAgICAgKiBUaGVyZSB3YXMgYSBSZWRvLlxuICAgICAqL1xuICAgIEN1cnNvckNoYW5nZVJlYXNvbltDdXJzb3JDaGFuZ2VSZWFzb25bXCJSZWRvXCJdID0gNl0gPSBcIlJlZG9cIjtcbn0pKEN1cnNvckNoYW5nZVJlYXNvbiB8fCAoQ3Vyc29yQ2hhbmdlUmVhc29uID0ge30pKTtcbi8qKlxuICogVGhlIGRlZmF1bHQgZW5kIG9mIGxpbmUgdG8gdXNlIHdoZW4gaW5zdGFudGlhdGluZyBtb2RlbHMuXG4gKi9cbmV4cG9ydCB2YXIgRGVmYXVsdEVuZE9mTGluZTtcbihmdW5jdGlvbiAoRGVmYXVsdEVuZE9mTGluZSkge1xuICAgIC8qKlxuICAgICAqIFVzZSBsaW5lIGZlZWQgKFxcbikgYXMgdGhlIGVuZCBvZiBsaW5lIGNoYXJhY3Rlci5cbiAgICAgKi9cbiAgICBEZWZhdWx0RW5kT2ZMaW5lW0RlZmF1bHRFbmRPZkxpbmVbXCJMRlwiXSA9IDFdID0gXCJMRlwiO1xuICAgIC8qKlxuICAgICAqIFVzZSBjYXJyaWFnZSByZXR1cm4gYW5kIGxpbmUgZmVlZCAoXFxyXFxuKSBhcyB0aGUgZW5kIG9mIGxpbmUgY2hhcmFjdGVyLlxuICAgICAqL1xuICAgIERlZmF1bHRFbmRPZkxpbmVbRGVmYXVsdEVuZE9mTGluZVtcIkNSTEZcIl0gPSAyXSA9IFwiQ1JMRlwiO1xufSkoRGVmYXVsdEVuZE9mTGluZSB8fCAoRGVmYXVsdEVuZE9mTGluZSA9IHt9KSk7XG4vKipcbiAqIEEgZG9jdW1lbnQgaGlnaGxpZ2h0IGtpbmQuXG4gKi9cbmV4cG9ydCB2YXIgRG9jdW1lbnRIaWdobGlnaHRLaW5kO1xuKGZ1bmN0aW9uIChEb2N1bWVudEhpZ2hsaWdodEtpbmQpIHtcbiAgICAvKipcbiAgICAgKiBBIHRleHR1YWwgb2NjdXJyZW5jZS5cbiAgICAgKi9cbiAgICBEb2N1bWVudEhpZ2hsaWdodEtpbmRbRG9jdW1lbnRIaWdobGlnaHRLaW5kW1wiVGV4dFwiXSA9IDBdID0gXCJUZXh0XCI7XG4gICAgLyoqXG4gICAgICogUmVhZC1hY2Nlc3Mgb2YgYSBzeW1ib2wsIGxpa2UgcmVhZGluZyBhIHZhcmlhYmxlLlxuICAgICAqL1xuICAgIERvY3VtZW50SGlnaGxpZ2h0S2luZFtEb2N1bWVudEhpZ2hsaWdodEtpbmRbXCJSZWFkXCJdID0gMV0gPSBcIlJlYWRcIjtcbiAgICAvKipcbiAgICAgKiBXcml0ZS1hY2Nlc3Mgb2YgYSBzeW1ib2wsIGxpa2Ugd3JpdGluZyB0byBhIHZhcmlhYmxlLlxuICAgICAqL1xuICAgIERvY3VtZW50SGlnaGxpZ2h0S2luZFtEb2N1bWVudEhpZ2hsaWdodEtpbmRbXCJXcml0ZVwiXSA9IDJdID0gXCJXcml0ZVwiO1xufSkoRG9jdW1lbnRIaWdobGlnaHRLaW5kIHx8IChEb2N1bWVudEhpZ2hsaWdodEtpbmQgPSB7fSkpO1xuLyoqXG4gKiBDb25maWd1cmF0aW9uIG9wdGlvbnMgZm9yIGF1dG8gaW5kZW50YXRpb24gaW4gdGhlIGVkaXRvclxuICovXG5leHBvcnQgdmFyIEVkaXRvckF1dG9JbmRlbnRTdHJhdGVneTtcbihmdW5jdGlvbiAoRWRpdG9yQXV0b0luZGVudFN0cmF0ZWd5KSB7XG4gICAgRWRpdG9yQXV0b0luZGVudFN0cmF0ZWd5W0VkaXRvckF1dG9JbmRlbnRTdHJhdGVneVtcIk5vbmVcIl0gPSAwXSA9IFwiTm9uZVwiO1xuICAgIEVkaXRvckF1dG9JbmRlbnRTdHJhdGVneVtFZGl0b3JBdXRvSW5kZW50U3RyYXRlZ3lbXCJLZWVwXCJdID0gMV0gPSBcIktlZXBcIjtcbiAgICBFZGl0b3JBdXRvSW5kZW50U3RyYXRlZ3lbRWRpdG9yQXV0b0luZGVudFN0cmF0ZWd5W1wiQnJhY2tldHNcIl0gPSAyXSA9IFwiQnJhY2tldHNcIjtcbiAgICBFZGl0b3JBdXRvSW5kZW50U3RyYXRlZ3lbRWRpdG9yQXV0b0luZGVudFN0cmF0ZWd5W1wiQWR2YW5jZWRcIl0gPSAzXSA9IFwiQWR2YW5jZWRcIjtcbiAgICBFZGl0b3JBdXRvSW5kZW50U3RyYXRlZ3lbRWRpdG9yQXV0b0luZGVudFN0cmF0ZWd5W1wiRnVsbFwiXSA9IDRdID0gXCJGdWxsXCI7XG59KShFZGl0b3JBdXRvSW5kZW50U3RyYXRlZ3kgfHwgKEVkaXRvckF1dG9JbmRlbnRTdHJhdGVneSA9IHt9KSk7XG5leHBvcnQgdmFyIEVkaXRvck9wdGlvbjtcbihmdW5jdGlvbiAoRWRpdG9yT3B0aW9uKSB7XG4gICAgRWRpdG9yT3B0aW9uW0VkaXRvck9wdGlvbltcImFjY2VwdFN1Z2dlc3Rpb25PbkNvbW1pdENoYXJhY3RlclwiXSA9IDBdID0gXCJhY2NlcHRTdWdnZXN0aW9uT25Db21taXRDaGFyYWN0ZXJcIjtcbiAgICBFZGl0b3JPcHRpb25bRWRpdG9yT3B0aW9uW1wiYWNjZXB0U3VnZ2VzdGlvbk9uRW50ZXJcIl0gPSAxXSA9IFwiYWNjZXB0U3VnZ2VzdGlvbk9uRW50ZXJcIjtcbiAgICBFZGl0b3JPcHRpb25bRWRpdG9yT3B0aW9uW1wiYWNjZXNzaWJpbGl0eVN1cHBvcnRcIl0gPSAyXSA9IFwiYWNjZXNzaWJpbGl0eVN1cHBvcnRcIjtcbiAgICBFZGl0b3JPcHRpb25bRWRpdG9yT3B0aW9uW1wiYWNjZXNzaWJpbGl0eVBhZ2VTaXplXCJdID0gM10gPSBcImFjY2Vzc2liaWxpdHlQYWdlU2l6ZVwiO1xuICAgIEVkaXRvck9wdGlvbltFZGl0b3JPcHRpb25bXCJhcmlhTGFiZWxcIl0gPSA0XSA9IFwiYXJpYUxhYmVsXCI7XG4gICAgRWRpdG9yT3B0aW9uW0VkaXRvck9wdGlvbltcImFyaWFSZXF1aXJlZFwiXSA9IDVdID0gXCJhcmlhUmVxdWlyZWRcIjtcbiAgICBFZGl0b3JPcHRpb25bRWRpdG9yT3B0aW9uW1wiYXV0b0Nsb3NpbmdCcmFja2V0c1wiXSA9IDZdID0gXCJhdXRvQ2xvc2luZ0JyYWNrZXRzXCI7XG4gICAgRWRpdG9yT3B0aW9uW0VkaXRvck9wdGlvbltcImF1dG9DbG9zaW5nQ29tbWVudHNcIl0gPSA3XSA9IFwiYXV0b0Nsb3NpbmdDb21tZW50c1wiO1xuICAgIEVkaXRvck9wdGlvbltFZGl0b3JPcHRpb25bXCJzY3JlZW5SZWFkZXJBbm5vdW5jZUlubGluZVN1Z2dlc3Rpb25cIl0gPSA4XSA9IFwic2NyZWVuUmVhZGVyQW5ub3VuY2VJbmxpbmVTdWdnZXN0aW9uXCI7XG4gICAgRWRpdG9yT3B0aW9uW0VkaXRvck9wdGlvbltcImF1dG9DbG9zaW5nRGVsZXRlXCJdID0gOV0gPSBcImF1dG9DbG9zaW5nRGVsZXRlXCI7XG4gICAgRWRpdG9yT3B0aW9uW0VkaXRvck9wdGlvbltcImF1dG9DbG9zaW5nT3ZlcnR5cGVcIl0gPSAxMF0gPSBcImF1dG9DbG9zaW5nT3ZlcnR5cGVcIjtcbiAgICBFZGl0b3JPcHRpb25bRWRpdG9yT3B0aW9uW1wiYXV0b0Nsb3NpbmdRdW90ZXNcIl0gPSAxMV0gPSBcImF1dG9DbG9zaW5nUXVvdGVzXCI7XG4gICAgRWRpdG9yT3B0aW9uW0VkaXRvck9wdGlvbltcImF1dG9JbmRlbnRcIl0gPSAxMl0gPSBcImF1dG9JbmRlbnRcIjtcbiAgICBFZGl0b3JPcHRpb25bRWRpdG9yT3B0aW9uW1wiYXV0b21hdGljTGF5b3V0XCJdID0gMTNdID0gXCJhdXRvbWF0aWNMYXlvdXRcIjtcbiAgICBFZGl0b3JPcHRpb25bRWRpdG9yT3B0aW9uW1wiYXV0b1N1cnJvdW5kXCJdID0gMTRdID0gXCJhdXRvU3Vycm91bmRcIjtcbiAgICBFZGl0b3JPcHRpb25bRWRpdG9yT3B0aW9uW1wiYnJhY2tldFBhaXJDb2xvcml6YXRpb25cIl0gPSAxNV0gPSBcImJyYWNrZXRQYWlyQ29sb3JpemF0aW9uXCI7XG4gICAgRWRpdG9yT3B0aW9uW0VkaXRvck9wdGlvbltcImd1aWRlc1wiXSA9IDE2XSA9IFwiZ3VpZGVzXCI7XG4gICAgRWRpdG9yT3B0aW9uW0VkaXRvck9wdGlvbltcImNvZGVMZW5zXCJdID0gMTddID0gXCJjb2RlTGVuc1wiO1xuICAgIEVkaXRvck9wdGlvbltFZGl0b3JPcHRpb25bXCJjb2RlTGVuc0ZvbnRGYW1pbHlcIl0gPSAxOF0gPSBcImNvZGVMZW5zRm9udEZhbWlseVwiO1xuICAgIEVkaXRvck9wdGlvbltFZGl0b3JPcHRpb25bXCJjb2RlTGVuc0ZvbnRTaXplXCJdID0gMTldID0gXCJjb2RlTGVuc0ZvbnRTaXplXCI7XG4gICAgRWRpdG9yT3B0aW9uW0VkaXRvck9wdGlvbltcImNvbG9yRGVjb3JhdG9yc1wiXSA9IDIwXSA9IFwiY29sb3JEZWNvcmF0b3JzXCI7XG4gICAgRWRpdG9yT3B0aW9uW0VkaXRvck9wdGlvbltcImNvbG9yRGVjb3JhdG9yc0xpbWl0XCJdID0gMjFdID0gXCJjb2xvckRlY29yYXRvcnNMaW1pdFwiO1xuICAgIEVkaXRvck9wdGlvbltFZGl0b3JPcHRpb25bXCJjb2x1bW5TZWxlY3Rpb25cIl0gPSAyMl0gPSBcImNvbHVtblNlbGVjdGlvblwiO1xuICAgIEVkaXRvck9wdGlvbltFZGl0b3JPcHRpb25bXCJjb21tZW50c1wiXSA9IDIzXSA9IFwiY29tbWVudHNcIjtcbiAgICBFZGl0b3JPcHRpb25bRWRpdG9yT3B0aW9uW1wiY29udGV4dG1lbnVcIl0gPSAyNF0gPSBcImNvbnRleHRtZW51XCI7XG4gICAgRWRpdG9yT3B0aW9uW0VkaXRvck9wdGlvbltcImNvcHlXaXRoU3ludGF4SGlnaGxpZ2h0aW5nXCJdID0gMjVdID0gXCJjb3B5V2l0aFN5bnRheEhpZ2hsaWdodGluZ1wiO1xuICAgIEVkaXRvck9wdGlvbltFZGl0b3JPcHRpb25bXCJjdXJzb3JCbGlua2luZ1wiXSA9IDI2XSA9IFwiY3Vyc29yQmxpbmtpbmdcIjtcbiAgICBFZGl0b3JPcHRpb25bRWRpdG9yT3B0aW9uW1wiY3Vyc29yU21vb3RoQ2FyZXRBbmltYXRpb25cIl0gPSAyN10gPSBcImN1cnNvclNtb290aENhcmV0QW5pbWF0aW9uXCI7XG4gICAgRWRpdG9yT3B0aW9uW0VkaXRvck9wdGlvbltcImN1cnNvclN0eWxlXCJdID0gMjhdID0gXCJjdXJzb3JTdHlsZVwiO1xuICAgIEVkaXRvck9wdGlvbltFZGl0b3JPcHRpb25bXCJjdXJzb3JTdXJyb3VuZGluZ0xpbmVzXCJdID0gMjldID0gXCJjdXJzb3JTdXJyb3VuZGluZ0xpbmVzXCI7XG4gICAgRWRpdG9yT3B0aW9uW0VkaXRvck9wdGlvbltcImN1cnNvclN1cnJvdW5kaW5nTGluZXNTdHlsZVwiXSA9IDMwXSA9IFwiY3Vyc29yU3Vycm91bmRpbmdMaW5lc1N0eWxlXCI7XG4gICAgRWRpdG9yT3B0aW9uW0VkaXRvck9wdGlvbltcImN1cnNvcldpZHRoXCJdID0gMzFdID0gXCJjdXJzb3JXaWR0aFwiO1xuICAgIEVkaXRvck9wdGlvbltFZGl0b3JPcHRpb25bXCJkaXNhYmxlTGF5ZXJIaW50aW5nXCJdID0gMzJdID0gXCJkaXNhYmxlTGF5ZXJIaW50aW5nXCI7XG4gICAgRWRpdG9yT3B0aW9uW0VkaXRvck9wdGlvbltcImRpc2FibGVNb25vc3BhY2VPcHRpbWl6YXRpb25zXCJdID0gMzNdID0gXCJkaXNhYmxlTW9ub3NwYWNlT3B0aW1pemF0aW9uc1wiO1xuICAgIEVkaXRvck9wdGlvbltFZGl0b3JPcHRpb25bXCJkb21SZWFkT25seVwiXSA9IDM0XSA9IFwiZG9tUmVhZE9ubHlcIjtcbiAgICBFZGl0b3JPcHRpb25bRWRpdG9yT3B0aW9uW1wiZHJhZ0FuZERyb3BcIl0gPSAzNV0gPSBcImRyYWdBbmREcm9wXCI7XG4gICAgRWRpdG9yT3B0aW9uW0VkaXRvck9wdGlvbltcImRyb3BJbnRvRWRpdG9yXCJdID0gMzZdID0gXCJkcm9wSW50b0VkaXRvclwiO1xuICAgIEVkaXRvck9wdGlvbltFZGl0b3JPcHRpb25bXCJlbXB0eVNlbGVjdGlvbkNsaXBib2FyZFwiXSA9IDM3XSA9IFwiZW1wdHlTZWxlY3Rpb25DbGlwYm9hcmRcIjtcbiAgICBFZGl0b3JPcHRpb25bRWRpdG9yT3B0aW9uW1wiZXhwZXJpbWVudGFsV2hpdGVzcGFjZVJlbmRlcmluZ1wiXSA9IDM4XSA9IFwiZXhwZXJpbWVudGFsV2hpdGVzcGFjZVJlbmRlcmluZ1wiO1xuICAgIEVkaXRvck9wdGlvbltFZGl0b3JPcHRpb25bXCJleHRyYUVkaXRvckNsYXNzTmFtZVwiXSA9IDM5XSA9IFwiZXh0cmFFZGl0b3JDbGFzc05hbWVcIjtcbiAgICBFZGl0b3JPcHRpb25bRWRpdG9yT3B0aW9uW1wiZmFzdFNjcm9sbFNlbnNpdGl2aXR5XCJdID0gNDBdID0gXCJmYXN0U2Nyb2xsU2Vuc2l0aXZpdHlcIjtcbiAgICBFZGl0b3JPcHRpb25bRWRpdG9yT3B0aW9uW1wiZmluZFwiXSA9IDQxXSA9IFwiZmluZFwiO1xuICAgIEVkaXRvck9wdGlvbltFZGl0b3JPcHRpb25bXCJmaXhlZE92ZXJmbG93V2lkZ2V0c1wiXSA9IDQyXSA9IFwiZml4ZWRPdmVyZmxvd1dpZGdldHNcIjtcbiAgICBFZGl0b3JPcHRpb25bRWRpdG9yT3B0aW9uW1wiZm9sZGluZ1wiXSA9IDQzXSA9IFwiZm9sZGluZ1wiO1xuICAgIEVkaXRvck9wdGlvbltFZGl0b3JPcHRpb25bXCJmb2xkaW5nU3RyYXRlZ3lcIl0gPSA0NF0gPSBcImZvbGRpbmdTdHJhdGVneVwiO1xuICAgIEVkaXRvck9wdGlvbltFZGl0b3JPcHRpb25bXCJmb2xkaW5nSGlnaGxpZ2h0XCJdID0gNDVdID0gXCJmb2xkaW5nSGlnaGxpZ2h0XCI7XG4gICAgRWRpdG9yT3B0aW9uW0VkaXRvck9wdGlvbltcImZvbGRpbmdJbXBvcnRzQnlEZWZhdWx0XCJdID0gNDZdID0gXCJmb2xkaW5nSW1wb3J0c0J5RGVmYXVsdFwiO1xuICAgIEVkaXRvck9wdGlvbltFZGl0b3JPcHRpb25bXCJmb2xkaW5nTWF4aW11bVJlZ2lvbnNcIl0gPSA0N10gPSBcImZvbGRpbmdNYXhpbXVtUmVnaW9uc1wiO1xuICAgIEVkaXRvck9wdGlvbltFZGl0b3JPcHRpb25bXCJ1bmZvbGRPbkNsaWNrQWZ0ZXJFbmRPZkxpbmVcIl0gPSA0OF0gPSBcInVuZm9sZE9uQ2xpY2tBZnRlckVuZE9mTGluZVwiO1xuICAgIEVkaXRvck9wdGlvbltFZGl0b3JPcHRpb25bXCJmb250RmFtaWx5XCJdID0gNDldID0gXCJmb250RmFtaWx5XCI7XG4gICAgRWRpdG9yT3B0aW9uW0VkaXRvck9wdGlvbltcImZvbnRJbmZvXCJdID0gNTBdID0gXCJmb250SW5mb1wiO1xuICAgIEVkaXRvck9wdGlvbltFZGl0b3JPcHRpb25bXCJmb250TGlnYXR1cmVzXCJdID0gNTFdID0gXCJmb250TGlnYXR1cmVzXCI7XG4gICAgRWRpdG9yT3B0aW9uW0VkaXRvck9wdGlvbltcImZvbnRTaXplXCJdID0gNTJdID0gXCJmb250U2l6ZVwiO1xuICAgIEVkaXRvck9wdGlvbltFZGl0b3JPcHRpb25bXCJmb250V2VpZ2h0XCJdID0gNTNdID0gXCJmb250V2VpZ2h0XCI7XG4gICAgRWRpdG9yT3B0aW9uW0VkaXRvck9wdGlvbltcImZvbnRWYXJpYXRpb25zXCJdID0gNTRdID0gXCJmb250VmFyaWF0aW9uc1wiO1xuICAgIEVkaXRvck9wdGlvbltFZGl0b3JPcHRpb25bXCJmb3JtYXRPblBhc3RlXCJdID0gNTVdID0gXCJmb3JtYXRPblBhc3RlXCI7XG4gICAgRWRpdG9yT3B0aW9uW0VkaXRvck9wdGlvbltcImZvcm1hdE9uVHlwZVwiXSA9IDU2XSA9IFwiZm9ybWF0T25UeXBlXCI7XG4gICAgRWRpdG9yT3B0aW9uW0VkaXRvck9wdGlvbltcImdseXBoTWFyZ2luXCJdID0gNTddID0gXCJnbHlwaE1hcmdpblwiO1xuICAgIEVkaXRvck9wdGlvbltFZGl0b3JPcHRpb25bXCJnb3RvTG9jYXRpb25cIl0gPSA1OF0gPSBcImdvdG9Mb2NhdGlvblwiO1xuICAgIEVkaXRvck9wdGlvbltFZGl0b3JPcHRpb25bXCJoaWRlQ3Vyc29ySW5PdmVydmlld1J1bGVyXCJdID0gNTldID0gXCJoaWRlQ3Vyc29ySW5PdmVydmlld1J1bGVyXCI7XG4gICAgRWRpdG9yT3B0aW9uW0VkaXRvck9wdGlvbltcImhvdmVyXCJdID0gNjBdID0gXCJob3ZlclwiO1xuICAgIEVkaXRvck9wdGlvbltFZGl0b3JPcHRpb25bXCJpbkRpZmZFZGl0b3JcIl0gPSA2MV0gPSBcImluRGlmZkVkaXRvclwiO1xuICAgIEVkaXRvck9wdGlvbltFZGl0b3JPcHRpb25bXCJpbmxpbmVTdWdnZXN0XCJdID0gNjJdID0gXCJpbmxpbmVTdWdnZXN0XCI7XG4gICAgRWRpdG9yT3B0aW9uW0VkaXRvck9wdGlvbltcImlubGluZUVkaXRcIl0gPSA2M10gPSBcImlubGluZUVkaXRcIjtcbiAgICBFZGl0b3JPcHRpb25bRWRpdG9yT3B0aW9uW1wibGV0dGVyU3BhY2luZ1wiXSA9IDY0XSA9IFwibGV0dGVyU3BhY2luZ1wiO1xuICAgIEVkaXRvck9wdGlvbltFZGl0b3JPcHRpb25bXCJsaWdodGJ1bGJcIl0gPSA2NV0gPSBcImxpZ2h0YnVsYlwiO1xuICAgIEVkaXRvck9wdGlvbltFZGl0b3JPcHRpb25bXCJsaW5lRGVjb3JhdGlvbnNXaWR0aFwiXSA9IDY2XSA9IFwibGluZURlY29yYXRpb25zV2lkdGhcIjtcbiAgICBFZGl0b3JPcHRpb25bRWRpdG9yT3B0aW9uW1wibGluZUhlaWdodFwiXSA9IDY3XSA9IFwibGluZUhlaWdodFwiO1xuICAgIEVkaXRvck9wdGlvbltFZGl0b3JPcHRpb25bXCJsaW5lTnVtYmVyc1wiXSA9IDY4XSA9IFwibGluZU51bWJlcnNcIjtcbiAgICBFZGl0b3JPcHRpb25bRWRpdG9yT3B0aW9uW1wibGluZU51bWJlcnNNaW5DaGFyc1wiXSA9IDY5XSA9IFwibGluZU51bWJlcnNNaW5DaGFyc1wiO1xuICAgIEVkaXRvck9wdGlvbltFZGl0b3JPcHRpb25bXCJsaW5rZWRFZGl0aW5nXCJdID0gNzBdID0gXCJsaW5rZWRFZGl0aW5nXCI7XG4gICAgRWRpdG9yT3B0aW9uW0VkaXRvck9wdGlvbltcImxpbmtzXCJdID0gNzFdID0gXCJsaW5rc1wiO1xuICAgIEVkaXRvck9wdGlvbltFZGl0b3JPcHRpb25bXCJtYXRjaEJyYWNrZXRzXCJdID0gNzJdID0gXCJtYXRjaEJyYWNrZXRzXCI7XG4gICAgRWRpdG9yT3B0aW9uW0VkaXRvck9wdGlvbltcIm1pbmltYXBcIl0gPSA3M10gPSBcIm1pbmltYXBcIjtcbiAgICBFZGl0b3JPcHRpb25bRWRpdG9yT3B0aW9uW1wibW91c2VTdHlsZVwiXSA9IDc0XSA9IFwibW91c2VTdHlsZVwiO1xuICAgIEVkaXRvck9wdGlvbltFZGl0b3JPcHRpb25bXCJtb3VzZVdoZWVsU2Nyb2xsU2Vuc2l0aXZpdHlcIl0gPSA3NV0gPSBcIm1vdXNlV2hlZWxTY3JvbGxTZW5zaXRpdml0eVwiO1xuICAgIEVkaXRvck9wdGlvbltFZGl0b3JPcHRpb25bXCJtb3VzZVdoZWVsWm9vbVwiXSA9IDc2XSA9IFwibW91c2VXaGVlbFpvb21cIjtcbiAgICBFZGl0b3JPcHRpb25bRWRpdG9yT3B0aW9uW1wibXVsdGlDdXJzb3JNZXJnZU92ZXJsYXBwaW5nXCJdID0gNzddID0gXCJtdWx0aUN1cnNvck1lcmdlT3ZlcmxhcHBpbmdcIjtcbiAgICBFZGl0b3JPcHRpb25bRWRpdG9yT3B0aW9uW1wibXVsdGlDdXJzb3JNb2RpZmllclwiXSA9IDc4XSA9IFwibXVsdGlDdXJzb3JNb2RpZmllclwiO1xuICAgIEVkaXRvck9wdGlvbltFZGl0b3JPcHRpb25bXCJtdWx0aUN1cnNvclBhc3RlXCJdID0gNzldID0gXCJtdWx0aUN1cnNvclBhc3RlXCI7XG4gICAgRWRpdG9yT3B0aW9uW0VkaXRvck9wdGlvbltcIm11bHRpQ3Vyc29yTGltaXRcIl0gPSA4MF0gPSBcIm11bHRpQ3Vyc29yTGltaXRcIjtcbiAgICBFZGl0b3JPcHRpb25bRWRpdG9yT3B0aW9uW1wib2NjdXJyZW5jZXNIaWdobGlnaHRcIl0gPSA4MV0gPSBcIm9jY3VycmVuY2VzSGlnaGxpZ2h0XCI7XG4gICAgRWRpdG9yT3B0aW9uW0VkaXRvck9wdGlvbltcIm92ZXJ2aWV3UnVsZXJCb3JkZXJcIl0gPSA4Ml0gPSBcIm92ZXJ2aWV3UnVsZXJCb3JkZXJcIjtcbiAgICBFZGl0b3JPcHRpb25bRWRpdG9yT3B0aW9uW1wib3ZlcnZpZXdSdWxlckxhbmVzXCJdID0gODNdID0gXCJvdmVydmlld1J1bGVyTGFuZXNcIjtcbiAgICBFZGl0b3JPcHRpb25bRWRpdG9yT3B0aW9uW1wicGFkZGluZ1wiXSA9IDg0XSA9IFwicGFkZGluZ1wiO1xuICAgIEVkaXRvck9wdGlvbltFZGl0b3JPcHRpb25bXCJwYXN0ZUFzXCJdID0gODVdID0gXCJwYXN0ZUFzXCI7XG4gICAgRWRpdG9yT3B0aW9uW0VkaXRvck9wdGlvbltcInBhcmFtZXRlckhpbnRzXCJdID0gODZdID0gXCJwYXJhbWV0ZXJIaW50c1wiO1xuICAgIEVkaXRvck9wdGlvbltFZGl0b3JPcHRpb25bXCJwZWVrV2lkZ2V0RGVmYXVsdEZvY3VzXCJdID0gODddID0gXCJwZWVrV2lkZ2V0RGVmYXVsdEZvY3VzXCI7XG4gICAgRWRpdG9yT3B0aW9uW0VkaXRvck9wdGlvbltcImRlZmluaXRpb25MaW5rT3BlbnNJblBlZWtcIl0gPSA4OF0gPSBcImRlZmluaXRpb25MaW5rT3BlbnNJblBlZWtcIjtcbiAgICBFZGl0b3JPcHRpb25bRWRpdG9yT3B0aW9uW1wicXVpY2tTdWdnZXN0aW9uc1wiXSA9IDg5XSA9IFwicXVpY2tTdWdnZXN0aW9uc1wiO1xuICAgIEVkaXRvck9wdGlvbltFZGl0b3JPcHRpb25bXCJxdWlja1N1Z2dlc3Rpb25zRGVsYXlcIl0gPSA5MF0gPSBcInF1aWNrU3VnZ2VzdGlvbnNEZWxheVwiO1xuICAgIEVkaXRvck9wdGlvbltFZGl0b3JPcHRpb25bXCJyZWFkT25seVwiXSA9IDkxXSA9IFwicmVhZE9ubHlcIjtcbiAgICBFZGl0b3JPcHRpb25bRWRpdG9yT3B0aW9uW1wicmVhZE9ubHlNZXNzYWdlXCJdID0gOTJdID0gXCJyZWFkT25seU1lc3NhZ2VcIjtcbiAgICBFZGl0b3JPcHRpb25bRWRpdG9yT3B0aW9uW1wicmVuYW1lT25UeXBlXCJdID0gOTNdID0gXCJyZW5hbWVPblR5cGVcIjtcbiAgICBFZGl0b3JPcHRpb25bRWRpdG9yT3B0aW9uW1wicmVuZGVyQ29udHJvbENoYXJhY3RlcnNcIl0gPSA5NF0gPSBcInJlbmRlckNvbnRyb2xDaGFyYWN0ZXJzXCI7XG4gICAgRWRpdG9yT3B0aW9uW0VkaXRvck9wdGlvbltcInJlbmRlckZpbmFsTmV3bGluZVwiXSA9IDk1XSA9IFwicmVuZGVyRmluYWxOZXdsaW5lXCI7XG4gICAgRWRpdG9yT3B0aW9uW0VkaXRvck9wdGlvbltcInJlbmRlckxpbmVIaWdobGlnaHRcIl0gPSA5Nl0gPSBcInJlbmRlckxpbmVIaWdobGlnaHRcIjtcbiAgICBFZGl0b3JPcHRpb25bRWRpdG9yT3B0aW9uW1wicmVuZGVyTGluZUhpZ2hsaWdodE9ubHlXaGVuRm9jdXNcIl0gPSA5N10gPSBcInJlbmRlckxpbmVIaWdobGlnaHRPbmx5V2hlbkZvY3VzXCI7XG4gICAgRWRpdG9yT3B0aW9uW0VkaXRvck9wdGlvbltcInJlbmRlclZhbGlkYXRpb25EZWNvcmF0aW9uc1wiXSA9IDk4XSA9IFwicmVuZGVyVmFsaWRhdGlvbkRlY29yYXRpb25zXCI7XG4gICAgRWRpdG9yT3B0aW9uW0VkaXRvck9wdGlvbltcInJlbmRlcldoaXRlc3BhY2VcIl0gPSA5OV0gPSBcInJlbmRlcldoaXRlc3BhY2VcIjtcbiAgICBFZGl0b3JPcHRpb25bRWRpdG9yT3B0aW9uW1wicmV2ZWFsSG9yaXpvbnRhbFJpZ2h0UGFkZGluZ1wiXSA9IDEwMF0gPSBcInJldmVhbEhvcml6b250YWxSaWdodFBhZGRpbmdcIjtcbiAgICBFZGl0b3JPcHRpb25bRWRpdG9yT3B0aW9uW1wicm91bmRlZFNlbGVjdGlvblwiXSA9IDEwMV0gPSBcInJvdW5kZWRTZWxlY3Rpb25cIjtcbiAgICBFZGl0b3JPcHRpb25bRWRpdG9yT3B0aW9uW1wicnVsZXJzXCJdID0gMTAyXSA9IFwicnVsZXJzXCI7XG4gICAgRWRpdG9yT3B0aW9uW0VkaXRvck9wdGlvbltcInNjcm9sbGJhclwiXSA9IDEwM10gPSBcInNjcm9sbGJhclwiO1xuICAgIEVkaXRvck9wdGlvbltFZGl0b3JPcHRpb25bXCJzY3JvbGxCZXlvbmRMYXN0Q29sdW1uXCJdID0gMTA0XSA9IFwic2Nyb2xsQmV5b25kTGFzdENvbHVtblwiO1xuICAgIEVkaXRvck9wdGlvbltFZGl0b3JPcHRpb25bXCJzY3JvbGxCZXlvbmRMYXN0TGluZVwiXSA9IDEwNV0gPSBcInNjcm9sbEJleW9uZExhc3RMaW5lXCI7XG4gICAgRWRpdG9yT3B0aW9uW0VkaXRvck9wdGlvbltcInNjcm9sbFByZWRvbWluYW50QXhpc1wiXSA9IDEwNl0gPSBcInNjcm9sbFByZWRvbWluYW50QXhpc1wiO1xuICAgIEVkaXRvck9wdGlvbltFZGl0b3JPcHRpb25bXCJzZWxlY3Rpb25DbGlwYm9hcmRcIl0gPSAxMDddID0gXCJzZWxlY3Rpb25DbGlwYm9hcmRcIjtcbiAgICBFZGl0b3JPcHRpb25bRWRpdG9yT3B0aW9uW1wic2VsZWN0aW9uSGlnaGxpZ2h0XCJdID0gMTA4XSA9IFwic2VsZWN0aW9uSGlnaGxpZ2h0XCI7XG4gICAgRWRpdG9yT3B0aW9uW0VkaXRvck9wdGlvbltcInNlbGVjdE9uTGluZU51bWJlcnNcIl0gPSAxMDldID0gXCJzZWxlY3RPbkxpbmVOdW1iZXJzXCI7XG4gICAgRWRpdG9yT3B0aW9uW0VkaXRvck9wdGlvbltcInNob3dGb2xkaW5nQ29udHJvbHNcIl0gPSAxMTBdID0gXCJzaG93Rm9sZGluZ0NvbnRyb2xzXCI7XG4gICAgRWRpdG9yT3B0aW9uW0VkaXRvck9wdGlvbltcInNob3dVbnVzZWRcIl0gPSAxMTFdID0gXCJzaG93VW51c2VkXCI7XG4gICAgRWRpdG9yT3B0aW9uW0VkaXRvck9wdGlvbltcInNuaXBwZXRTdWdnZXN0aW9uc1wiXSA9IDExMl0gPSBcInNuaXBwZXRTdWdnZXN0aW9uc1wiO1xuICAgIEVkaXRvck9wdGlvbltFZGl0b3JPcHRpb25bXCJzbWFydFNlbGVjdFwiXSA9IDExM10gPSBcInNtYXJ0U2VsZWN0XCI7XG4gICAgRWRpdG9yT3B0aW9uW0VkaXRvck9wdGlvbltcInNtb290aFNjcm9sbGluZ1wiXSA9IDExNF0gPSBcInNtb290aFNjcm9sbGluZ1wiO1xuICAgIEVkaXRvck9wdGlvbltFZGl0b3JPcHRpb25bXCJzdGlja3lTY3JvbGxcIl0gPSAxMTVdID0gXCJzdGlja3lTY3JvbGxcIjtcbiAgICBFZGl0b3JPcHRpb25bRWRpdG9yT3B0aW9uW1wic3RpY2t5VGFiU3RvcHNcIl0gPSAxMTZdID0gXCJzdGlja3lUYWJTdG9wc1wiO1xuICAgIEVkaXRvck9wdGlvbltFZGl0b3JPcHRpb25bXCJzdG9wUmVuZGVyaW5nTGluZUFmdGVyXCJdID0gMTE3XSA9IFwic3RvcFJlbmRlcmluZ0xpbmVBZnRlclwiO1xuICAgIEVkaXRvck9wdGlvbltFZGl0b3JPcHRpb25bXCJzdWdnZXN0XCJdID0gMTE4XSA9IFwic3VnZ2VzdFwiO1xuICAgIEVkaXRvck9wdGlvbltFZGl0b3JPcHRpb25bXCJzdWdnZXN0Rm9udFNpemVcIl0gPSAxMTldID0gXCJzdWdnZXN0Rm9udFNpemVcIjtcbiAgICBFZGl0b3JPcHRpb25bRWRpdG9yT3B0aW9uW1wic3VnZ2VzdExpbmVIZWlnaHRcIl0gPSAxMjBdID0gXCJzdWdnZXN0TGluZUhlaWdodFwiO1xuICAgIEVkaXRvck9wdGlvbltFZGl0b3JPcHRpb25bXCJzdWdnZXN0T25UcmlnZ2VyQ2hhcmFjdGVyc1wiXSA9IDEyMV0gPSBcInN1Z2dlc3RPblRyaWdnZXJDaGFyYWN0ZXJzXCI7XG4gICAgRWRpdG9yT3B0aW9uW0VkaXRvck9wdGlvbltcInN1Z2dlc3RTZWxlY3Rpb25cIl0gPSAxMjJdID0gXCJzdWdnZXN0U2VsZWN0aW9uXCI7XG4gICAgRWRpdG9yT3B0aW9uW0VkaXRvck9wdGlvbltcInRhYkNvbXBsZXRpb25cIl0gPSAxMjNdID0gXCJ0YWJDb21wbGV0aW9uXCI7XG4gICAgRWRpdG9yT3B0aW9uW0VkaXRvck9wdGlvbltcInRhYkluZGV4XCJdID0gMTI0XSA9IFwidGFiSW5kZXhcIjtcbiAgICBFZGl0b3JPcHRpb25bRWRpdG9yT3B0aW9uW1widW5pY29kZUhpZ2hsaWdodGluZ1wiXSA9IDEyNV0gPSBcInVuaWNvZGVIaWdobGlnaHRpbmdcIjtcbiAgICBFZGl0b3JPcHRpb25bRWRpdG9yT3B0aW9uW1widW51c3VhbExpbmVUZXJtaW5hdG9yc1wiXSA9IDEyNl0gPSBcInVudXN1YWxMaW5lVGVybWluYXRvcnNcIjtcbiAgICBFZGl0b3JPcHRpb25bRWRpdG9yT3B0aW9uW1widXNlU2hhZG93RE9NXCJdID0gMTI3XSA9IFwidXNlU2hhZG93RE9NXCI7XG4gICAgRWRpdG9yT3B0aW9uW0VkaXRvck9wdGlvbltcInVzZVRhYlN0b3BzXCJdID0gMTI4XSA9IFwidXNlVGFiU3RvcHNcIjtcbiAgICBFZGl0b3JPcHRpb25bRWRpdG9yT3B0aW9uW1wid29yZEJyZWFrXCJdID0gMTI5XSA9IFwid29yZEJyZWFrXCI7XG4gICAgRWRpdG9yT3B0aW9uW0VkaXRvck9wdGlvbltcIndvcmRTZWdtZW50ZXJMb2NhbGVzXCJdID0gMTMwXSA9IFwid29yZFNlZ21lbnRlckxvY2FsZXNcIjtcbiAgICBFZGl0b3JPcHRpb25bRWRpdG9yT3B0aW9uW1wid29yZFNlcGFyYXRvcnNcIl0gPSAxMzFdID0gXCJ3b3JkU2VwYXJhdG9yc1wiO1xuICAgIEVkaXRvck9wdGlvbltFZGl0b3JPcHRpb25bXCJ3b3JkV3JhcFwiXSA9IDEzMl0gPSBcIndvcmRXcmFwXCI7XG4gICAgRWRpdG9yT3B0aW9uW0VkaXRvck9wdGlvbltcIndvcmRXcmFwQnJlYWtBZnRlckNoYXJhY3RlcnNcIl0gPSAxMzNdID0gXCJ3b3JkV3JhcEJyZWFrQWZ0ZXJDaGFyYWN0ZXJzXCI7XG4gICAgRWRpdG9yT3B0aW9uW0VkaXRvck9wdGlvbltcIndvcmRXcmFwQnJlYWtCZWZvcmVDaGFyYWN0ZXJzXCJdID0gMTM0XSA9IFwid29yZFdyYXBCcmVha0JlZm9yZUNoYXJhY3RlcnNcIjtcbiAgICBFZGl0b3JPcHRpb25bRWRpdG9yT3B0aW9uW1wid29yZFdyYXBDb2x1bW5cIl0gPSAxMzVdID0gXCJ3b3JkV3JhcENvbHVtblwiO1xuICAgIEVkaXRvck9wdGlvbltFZGl0b3JPcHRpb25bXCJ3b3JkV3JhcE92ZXJyaWRlMVwiXSA9IDEzNl0gPSBcIndvcmRXcmFwT3ZlcnJpZGUxXCI7XG4gICAgRWRpdG9yT3B0aW9uW0VkaXRvck9wdGlvbltcIndvcmRXcmFwT3ZlcnJpZGUyXCJdID0gMTM3XSA9IFwid29yZFdyYXBPdmVycmlkZTJcIjtcbiAgICBFZGl0b3JPcHRpb25bRWRpdG9yT3B0aW9uW1wid3JhcHBpbmdJbmRlbnRcIl0gPSAxMzhdID0gXCJ3cmFwcGluZ0luZGVudFwiO1xuICAgIEVkaXRvck9wdGlvbltFZGl0b3JPcHRpb25bXCJ3cmFwcGluZ1N0cmF0ZWd5XCJdID0gMTM5XSA9IFwid3JhcHBpbmdTdHJhdGVneVwiO1xuICAgIEVkaXRvck9wdGlvbltFZGl0b3JPcHRpb25bXCJzaG93RGVwcmVjYXRlZFwiXSA9IDE0MF0gPSBcInNob3dEZXByZWNhdGVkXCI7XG4gICAgRWRpdG9yT3B0aW9uW0VkaXRvck9wdGlvbltcImlubGF5SGludHNcIl0gPSAxNDFdID0gXCJpbmxheUhpbnRzXCI7XG4gICAgRWRpdG9yT3B0aW9uW0VkaXRvck9wdGlvbltcImVkaXRvckNsYXNzTmFtZVwiXSA9IDE0Ml0gPSBcImVkaXRvckNsYXNzTmFtZVwiO1xuICAgIEVkaXRvck9wdGlvbltFZGl0b3JPcHRpb25bXCJwaXhlbFJhdGlvXCJdID0gMTQzXSA9IFwicGl4ZWxSYXRpb1wiO1xuICAgIEVkaXRvck9wdGlvbltFZGl0b3JPcHRpb25bXCJ0YWJGb2N1c01vZGVcIl0gPSAxNDRdID0gXCJ0YWJGb2N1c01vZGVcIjtcbiAgICBFZGl0b3JPcHRpb25bRWRpdG9yT3B0aW9uW1wibGF5b3V0SW5mb1wiXSA9IDE0NV0gPSBcImxheW91dEluZm9cIjtcbiAgICBFZGl0b3JPcHRpb25bRWRpdG9yT3B0aW9uW1wid3JhcHBpbmdJbmZvXCJdID0gMTQ2XSA9IFwid3JhcHBpbmdJbmZvXCI7XG4gICAgRWRpdG9yT3B0aW9uW0VkaXRvck9wdGlvbltcImRlZmF1bHRDb2xvckRlY29yYXRvcnNcIl0gPSAxNDddID0gXCJkZWZhdWx0Q29sb3JEZWNvcmF0b3JzXCI7XG4gICAgRWRpdG9yT3B0aW9uW0VkaXRvck9wdGlvbltcImNvbG9yRGVjb3JhdG9yc0FjdGl2YXRlZE9uXCJdID0gMTQ4XSA9IFwiY29sb3JEZWNvcmF0b3JzQWN0aXZhdGVkT25cIjtcbiAgICBFZGl0b3JPcHRpb25bRWRpdG9yT3B0aW9uW1wiaW5saW5lQ29tcGxldGlvbnNBY2Nlc3NpYmlsaXR5VmVyYm9zZVwiXSA9IDE0OV0gPSBcImlubGluZUNvbXBsZXRpb25zQWNjZXNzaWJpbGl0eVZlcmJvc2VcIjtcbn0pKEVkaXRvck9wdGlvbiB8fCAoRWRpdG9yT3B0aW9uID0ge30pKTtcbi8qKlxuICogRW5kIG9mIGxpbmUgY2hhcmFjdGVyIHByZWZlcmVuY2UuXG4gKi9cbmV4cG9ydCB2YXIgRW5kT2ZMaW5lUHJlZmVyZW5jZTtcbihmdW5jdGlvbiAoRW5kT2ZMaW5lUHJlZmVyZW5jZSkge1xuICAgIC8qKlxuICAgICAqIFVzZSB0aGUgZW5kIG9mIGxpbmUgY2hhcmFjdGVyIGlkZW50aWZpZWQgaW4gdGhlIHRleHQgYnVmZmVyLlxuICAgICAqL1xuICAgIEVuZE9mTGluZVByZWZlcmVuY2VbRW5kT2ZMaW5lUHJlZmVyZW5jZVtcIlRleHREZWZpbmVkXCJdID0gMF0gPSBcIlRleHREZWZpbmVkXCI7XG4gICAgLyoqXG4gICAgICogVXNlIGxpbmUgZmVlZCAoXFxuKSBhcyB0aGUgZW5kIG9mIGxpbmUgY2hhcmFjdGVyLlxuICAgICAqL1xuICAgIEVuZE9mTGluZVByZWZlcmVuY2VbRW5kT2ZMaW5lUHJlZmVyZW5jZVtcIkxGXCJdID0gMV0gPSBcIkxGXCI7XG4gICAgLyoqXG4gICAgICogVXNlIGNhcnJpYWdlIHJldHVybiBhbmQgbGluZSBmZWVkIChcXHJcXG4pIGFzIHRoZSBlbmQgb2YgbGluZSBjaGFyYWN0ZXIuXG4gICAgICovXG4gICAgRW5kT2ZMaW5lUHJlZmVyZW5jZVtFbmRPZkxpbmVQcmVmZXJlbmNlW1wiQ1JMRlwiXSA9IDJdID0gXCJDUkxGXCI7XG59KShFbmRPZkxpbmVQcmVmZXJlbmNlIHx8IChFbmRPZkxpbmVQcmVmZXJlbmNlID0ge30pKTtcbi8qKlxuICogRW5kIG9mIGxpbmUgY2hhcmFjdGVyIHByZWZlcmVuY2UuXG4gKi9cbmV4cG9ydCB2YXIgRW5kT2ZMaW5lU2VxdWVuY2U7XG4oZnVuY3Rpb24gKEVuZE9mTGluZVNlcXVlbmNlKSB7XG4gICAgLyoqXG4gICAgICogVXNlIGxpbmUgZmVlZCAoXFxuKSBhcyB0aGUgZW5kIG9mIGxpbmUgY2hhcmFjdGVyLlxuICAgICAqL1xuICAgIEVuZE9mTGluZVNlcXVlbmNlW0VuZE9mTGluZVNlcXVlbmNlW1wiTEZcIl0gPSAwXSA9IFwiTEZcIjtcbiAgICAvKipcbiAgICAgKiBVc2UgY2FycmlhZ2UgcmV0dXJuIGFuZCBsaW5lIGZlZWQgKFxcclxcbikgYXMgdGhlIGVuZCBvZiBsaW5lIGNoYXJhY3Rlci5cbiAgICAgKi9cbiAgICBFbmRPZkxpbmVTZXF1ZW5jZVtFbmRPZkxpbmVTZXF1ZW5jZVtcIkNSTEZcIl0gPSAxXSA9IFwiQ1JMRlwiO1xufSkoRW5kT2ZMaW5lU2VxdWVuY2UgfHwgKEVuZE9mTGluZVNlcXVlbmNlID0ge30pKTtcbi8qKlxuICogVmVydGljYWwgTGFuZSBpbiB0aGUgZ2x5cGggbWFyZ2luIG9mIHRoZSBlZGl0b3IuXG4gKi9cbmV4cG9ydCB2YXIgR2x5cGhNYXJnaW5MYW5lO1xuKGZ1bmN0aW9uIChHbHlwaE1hcmdpbkxhbmUpIHtcbiAgICBHbHlwaE1hcmdpbkxhbmVbR2x5cGhNYXJnaW5MYW5lW1wiTGVmdFwiXSA9IDFdID0gXCJMZWZ0XCI7XG4gICAgR2x5cGhNYXJnaW5MYW5lW0dseXBoTWFyZ2luTGFuZVtcIkNlbnRlclwiXSA9IDJdID0gXCJDZW50ZXJcIjtcbiAgICBHbHlwaE1hcmdpbkxhbmVbR2x5cGhNYXJnaW5MYW5lW1wiUmlnaHRcIl0gPSAzXSA9IFwiUmlnaHRcIjtcbn0pKEdseXBoTWFyZ2luTGFuZSB8fCAoR2x5cGhNYXJnaW5MYW5lID0ge30pKTtcbmV4cG9ydCB2YXIgSG92ZXJWZXJib3NpdHlBY3Rpb247XG4oZnVuY3Rpb24gKEhvdmVyVmVyYm9zaXR5QWN0aW9uKSB7XG4gICAgLyoqXG4gICAgICogSW5jcmVhc2UgdGhlIHZlcmJvc2l0eSBvZiB0aGUgaG92ZXJcbiAgICAgKi9cbiAgICBIb3ZlclZlcmJvc2l0eUFjdGlvbltIb3ZlclZlcmJvc2l0eUFjdGlvbltcIkluY3JlYXNlXCJdID0gMF0gPSBcIkluY3JlYXNlXCI7XG4gICAgLyoqXG4gICAgICogRGVjcmVhc2UgdGhlIHZlcmJvc2l0eSBvZiB0aGUgaG92ZXJcbiAgICAgKi9cbiAgICBIb3ZlclZlcmJvc2l0eUFjdGlvbltIb3ZlclZlcmJvc2l0eUFjdGlvbltcIkRlY3JlYXNlXCJdID0gMV0gPSBcIkRlY3JlYXNlXCI7XG59KShIb3ZlclZlcmJvc2l0eUFjdGlvbiB8fCAoSG92ZXJWZXJib3NpdHlBY3Rpb24gPSB7fSkpO1xuLyoqXG4gKiBEZXNjcmliZXMgd2hhdCB0byBkbyB3aXRoIHRoZSBpbmRlbnRhdGlvbiB3aGVuIHByZXNzaW5nIEVudGVyLlxuICovXG5leHBvcnQgdmFyIEluZGVudEFjdGlvbjtcbihmdW5jdGlvbiAoSW5kZW50QWN0aW9uKSB7XG4gICAgLyoqXG4gICAgICogSW5zZXJ0IG5ldyBsaW5lIGFuZCBjb3B5IHRoZSBwcmV2aW91cyBsaW5lJ3MgaW5kZW50YXRpb24uXG4gICAgICovXG4gICAgSW5kZW50QWN0aW9uW0luZGVudEFjdGlvbltcIk5vbmVcIl0gPSAwXSA9IFwiTm9uZVwiO1xuICAgIC8qKlxuICAgICAqIEluc2VydCBuZXcgbGluZSBhbmQgaW5kZW50IG9uY2UgKHJlbGF0aXZlIHRvIHRoZSBwcmV2aW91cyBsaW5lJ3MgaW5kZW50YXRpb24pLlxuICAgICAqL1xuICAgIEluZGVudEFjdGlvbltJbmRlbnRBY3Rpb25bXCJJbmRlbnRcIl0gPSAxXSA9IFwiSW5kZW50XCI7XG4gICAgLyoqXG4gICAgICogSW5zZXJ0IHR3byBuZXcgbGluZXM6XG4gICAgICogIC0gdGhlIGZpcnN0IG9uZSBpbmRlbnRlZCB3aGljaCB3aWxsIGhvbGQgdGhlIGN1cnNvclxuICAgICAqICAtIHRoZSBzZWNvbmQgb25lIGF0IHRoZSBzYW1lIGluZGVudGF0aW9uIGxldmVsXG4gICAgICovXG4gICAgSW5kZW50QWN0aW9uW0luZGVudEFjdGlvbltcIkluZGVudE91dGRlbnRcIl0gPSAyXSA9IFwiSW5kZW50T3V0ZGVudFwiO1xuICAgIC8qKlxuICAgICAqIEluc2VydCBuZXcgbGluZSBhbmQgb3V0ZGVudCBvbmNlIChyZWxhdGl2ZSB0byB0aGUgcHJldmlvdXMgbGluZSdzIGluZGVudGF0aW9uKS5cbiAgICAgKi9cbiAgICBJbmRlbnRBY3Rpb25bSW5kZW50QWN0aW9uW1wiT3V0ZGVudFwiXSA9IDNdID0gXCJPdXRkZW50XCI7XG59KShJbmRlbnRBY3Rpb24gfHwgKEluZGVudEFjdGlvbiA9IHt9KSk7XG5leHBvcnQgdmFyIEluamVjdGVkVGV4dEN1cnNvclN0b3BzO1xuKGZ1bmN0aW9uIChJbmplY3RlZFRleHRDdXJzb3JTdG9wcykge1xuICAgIEluamVjdGVkVGV4dEN1cnNvclN0b3BzW0luamVjdGVkVGV4dEN1cnNvclN0b3BzW1wiQm90aFwiXSA9IDBdID0gXCJCb3RoXCI7XG4gICAgSW5qZWN0ZWRUZXh0Q3Vyc29yU3RvcHNbSW5qZWN0ZWRUZXh0Q3Vyc29yU3RvcHNbXCJSaWdodFwiXSA9IDFdID0gXCJSaWdodFwiO1xuICAgIEluamVjdGVkVGV4dEN1cnNvclN0b3BzW0luamVjdGVkVGV4dEN1cnNvclN0b3BzW1wiTGVmdFwiXSA9IDJdID0gXCJMZWZ0XCI7XG4gICAgSW5qZWN0ZWRUZXh0Q3Vyc29yU3RvcHNbSW5qZWN0ZWRUZXh0Q3Vyc29yU3RvcHNbXCJOb25lXCJdID0gM10gPSBcIk5vbmVcIjtcbn0pKEluamVjdGVkVGV4dEN1cnNvclN0b3BzIHx8IChJbmplY3RlZFRleHRDdXJzb3JTdG9wcyA9IHt9KSk7XG5leHBvcnQgdmFyIElubGF5SGludEtpbmQ7XG4oZnVuY3Rpb24gKElubGF5SGludEtpbmQpIHtcbiAgICBJbmxheUhpbnRLaW5kW0lubGF5SGludEtpbmRbXCJUeXBlXCJdID0gMV0gPSBcIlR5cGVcIjtcbiAgICBJbmxheUhpbnRLaW5kW0lubGF5SGludEtpbmRbXCJQYXJhbWV0ZXJcIl0gPSAyXSA9IFwiUGFyYW1ldGVyXCI7XG59KShJbmxheUhpbnRLaW5kIHx8IChJbmxheUhpbnRLaW5kID0ge30pKTtcbi8qKlxuICogSG93IGFuIHtAbGluayBJbmxpbmVDb21wbGV0aW9uc1Byb3ZpZGVyIGlubGluZSBjb21wbGV0aW9uIHByb3ZpZGVyfSB3YXMgdHJpZ2dlcmVkLlxuICovXG5leHBvcnQgdmFyIElubGluZUNvbXBsZXRpb25UcmlnZ2VyS2luZDtcbihmdW5jdGlvbiAoSW5saW5lQ29tcGxldGlvblRyaWdnZXJLaW5kKSB7XG4gICAgLyoqXG4gICAgICogQ29tcGxldGlvbiB3YXMgdHJpZ2dlcmVkIGF1dG9tYXRpY2FsbHkgd2hpbGUgZWRpdGluZy5cbiAgICAgKiBJdCBpcyBzdWZmaWNpZW50IHRvIHJldHVybiBhIHNpbmdsZSBjb21wbGV0aW9uIGl0ZW0gaW4gdGhpcyBjYXNlLlxuICAgICAqL1xuICAgIElubGluZUNvbXBsZXRpb25UcmlnZ2VyS2luZFtJbmxpbmVDb21wbGV0aW9uVHJpZ2dlcktpbmRbXCJBdXRvbWF0aWNcIl0gPSAwXSA9IFwiQXV0b21hdGljXCI7XG4gICAgLyoqXG4gICAgICogQ29tcGxldGlvbiB3YXMgdHJpZ2dlcmVkIGV4cGxpY2l0bHkgYnkgYSB1c2VyIGdlc3R1cmUuXG4gICAgICogUmV0dXJuIG11bHRpcGxlIGNvbXBsZXRpb24gaXRlbXMgdG8gZW5hYmxlIGN5Y2xpbmcgdGhyb3VnaCB0aGVtLlxuICAgICAqL1xuICAgIElubGluZUNvbXBsZXRpb25UcmlnZ2VyS2luZFtJbmxpbmVDb21wbGV0aW9uVHJpZ2dlcktpbmRbXCJFeHBsaWNpdFwiXSA9IDFdID0gXCJFeHBsaWNpdFwiO1xufSkoSW5saW5lQ29tcGxldGlvblRyaWdnZXJLaW5kIHx8IChJbmxpbmVDb21wbGV0aW9uVHJpZ2dlcktpbmQgPSB7fSkpO1xuZXhwb3J0IHZhciBJbmxpbmVFZGl0VHJpZ2dlcktpbmQ7XG4oZnVuY3Rpb24gKElubGluZUVkaXRUcmlnZ2VyS2luZCkge1xuICAgIElubGluZUVkaXRUcmlnZ2VyS2luZFtJbmxpbmVFZGl0VHJpZ2dlcktpbmRbXCJJbnZva2VcIl0gPSAwXSA9IFwiSW52b2tlXCI7XG4gICAgSW5saW5lRWRpdFRyaWdnZXJLaW5kW0lubGluZUVkaXRUcmlnZ2VyS2luZFtcIkF1dG9tYXRpY1wiXSA9IDFdID0gXCJBdXRvbWF0aWNcIjtcbn0pKElubGluZUVkaXRUcmlnZ2VyS2luZCB8fCAoSW5saW5lRWRpdFRyaWdnZXJLaW5kID0ge30pKTtcbi8qKlxuICogVmlydHVhbCBLZXkgQ29kZXMsIHRoZSB2YWx1ZSBkb2VzIG5vdCBob2xkIGFueSBpbmhlcmVudCBtZWFuaW5nLlxuICogSW5zcGlyZWQgc29tZXdoYXQgZnJvbSBodHRwczovL21zZG4ubWljcm9zb2Z0LmNvbS9lbi11cy9saWJyYXJ5L3dpbmRvd3MvZGVza3RvcC9kZDM3NTczMSh2PXZzLjg1KS5hc3B4XG4gKiBCdXQgdGhlc2UgYXJlIFwibW9yZSBnZW5lcmFsXCIsIGFzIHRoZXkgc2hvdWxkIHdvcmsgYWNyb3NzIGJyb3dzZXJzICYgT1Ngcy5cbiAqL1xuZXhwb3J0IHZhciBLZXlDb2RlO1xuKGZ1bmN0aW9uIChLZXlDb2RlKSB7XG4gICAgS2V5Q29kZVtLZXlDb2RlW1wiRGVwZW5kc09uS2JMYXlvdXRcIl0gPSAtMV0gPSBcIkRlcGVuZHNPbktiTGF5b3V0XCI7XG4gICAgLyoqXG4gICAgICogUGxhY2VkIGZpcnN0IHRvIGNvdmVyIHRoZSAwIHZhbHVlIG9mIHRoZSBlbnVtLlxuICAgICAqL1xuICAgIEtleUNvZGVbS2V5Q29kZVtcIlVua25vd25cIl0gPSAwXSA9IFwiVW5rbm93blwiO1xuICAgIEtleUNvZGVbS2V5Q29kZVtcIkJhY2tzcGFjZVwiXSA9IDFdID0gXCJCYWNrc3BhY2VcIjtcbiAgICBLZXlDb2RlW0tleUNvZGVbXCJUYWJcIl0gPSAyXSA9IFwiVGFiXCI7XG4gICAgS2V5Q29kZVtLZXlDb2RlW1wiRW50ZXJcIl0gPSAzXSA9IFwiRW50ZXJcIjtcbiAgICBLZXlDb2RlW0tleUNvZGVbXCJTaGlmdFwiXSA9IDRdID0gXCJTaGlmdFwiO1xuICAgIEtleUNvZGVbS2V5Q29kZVtcIkN0cmxcIl0gPSA1XSA9IFwiQ3RybFwiO1xuICAgIEtleUNvZGVbS2V5Q29kZVtcIkFsdFwiXSA9IDZdID0gXCJBbHRcIjtcbiAgICBLZXlDb2RlW0tleUNvZGVbXCJQYXVzZUJyZWFrXCJdID0gN10gPSBcIlBhdXNlQnJlYWtcIjtcbiAgICBLZXlDb2RlW0tleUNvZGVbXCJDYXBzTG9ja1wiXSA9IDhdID0gXCJDYXBzTG9ja1wiO1xuICAgIEtleUNvZGVbS2V5Q29kZVtcIkVzY2FwZVwiXSA9IDldID0gXCJFc2NhcGVcIjtcbiAgICBLZXlDb2RlW0tleUNvZGVbXCJTcGFjZVwiXSA9IDEwXSA9IFwiU3BhY2VcIjtcbiAgICBLZXlDb2RlW0tleUNvZGVbXCJQYWdlVXBcIl0gPSAxMV0gPSBcIlBhZ2VVcFwiO1xuICAgIEtleUNvZGVbS2V5Q29kZVtcIlBhZ2VEb3duXCJdID0gMTJdID0gXCJQYWdlRG93blwiO1xuICAgIEtleUNvZGVbS2V5Q29kZVtcIkVuZFwiXSA9IDEzXSA9IFwiRW5kXCI7XG4gICAgS2V5Q29kZVtLZXlDb2RlW1wiSG9tZVwiXSA9IDE0XSA9IFwiSG9tZVwiO1xuICAgIEtleUNvZGVbS2V5Q29kZVtcIkxlZnRBcnJvd1wiXSA9IDE1XSA9IFwiTGVmdEFycm93XCI7XG4gICAgS2V5Q29kZVtLZXlDb2RlW1wiVXBBcnJvd1wiXSA9IDE2XSA9IFwiVXBBcnJvd1wiO1xuICAgIEtleUNvZGVbS2V5Q29kZVtcIlJpZ2h0QXJyb3dcIl0gPSAxN10gPSBcIlJpZ2h0QXJyb3dcIjtcbiAgICBLZXlDb2RlW0tleUNvZGVbXCJEb3duQXJyb3dcIl0gPSAxOF0gPSBcIkRvd25BcnJvd1wiO1xuICAgIEtleUNvZGVbS2V5Q29kZVtcIkluc2VydFwiXSA9IDE5XSA9IFwiSW5zZXJ0XCI7XG4gICAgS2V5Q29kZVtLZXlDb2RlW1wiRGVsZXRlXCJdID0gMjBdID0gXCJEZWxldGVcIjtcbiAgICBLZXlDb2RlW0tleUNvZGVbXCJEaWdpdDBcIl0gPSAyMV0gPSBcIkRpZ2l0MFwiO1xuICAgIEtleUNvZGVbS2V5Q29kZVtcIkRpZ2l0MVwiXSA9IDIyXSA9IFwiRGlnaXQxXCI7XG4gICAgS2V5Q29kZVtLZXlDb2RlW1wiRGlnaXQyXCJdID0gMjNdID0gXCJEaWdpdDJcIjtcbiAgICBLZXlDb2RlW0tleUNvZGVbXCJEaWdpdDNcIl0gPSAyNF0gPSBcIkRpZ2l0M1wiO1xuICAgIEtleUNvZGVbS2V5Q29kZVtcIkRpZ2l0NFwiXSA9IDI1XSA9IFwiRGlnaXQ0XCI7XG4gICAgS2V5Q29kZVtLZXlDb2RlW1wiRGlnaXQ1XCJdID0gMjZdID0gXCJEaWdpdDVcIjtcbiAgICBLZXlDb2RlW0tleUNvZGVbXCJEaWdpdDZcIl0gPSAyN10gPSBcIkRpZ2l0NlwiO1xuICAgIEtleUNvZGVbS2V5Q29kZVtcIkRpZ2l0N1wiXSA9IDI4XSA9IFwiRGlnaXQ3XCI7XG4gICAgS2V5Q29kZVtLZXlDb2RlW1wiRGlnaXQ4XCJdID0gMjldID0gXCJEaWdpdDhcIjtcbiAgICBLZXlDb2RlW0tleUNvZGVbXCJEaWdpdDlcIl0gPSAzMF0gPSBcIkRpZ2l0OVwiO1xuICAgIEtleUNvZGVbS2V5Q29kZVtcIktleUFcIl0gPSAzMV0gPSBcIktleUFcIjtcbiAgICBLZXlDb2RlW0tleUNvZGVbXCJLZXlCXCJdID0gMzJdID0gXCJLZXlCXCI7XG4gICAgS2V5Q29kZVtLZXlDb2RlW1wiS2V5Q1wiXSA9IDMzXSA9IFwiS2V5Q1wiO1xuICAgIEtleUNvZGVbS2V5Q29kZVtcIktleURcIl0gPSAzNF0gPSBcIktleURcIjtcbiAgICBLZXlDb2RlW0tleUNvZGVbXCJLZXlFXCJdID0gMzVdID0gXCJLZXlFXCI7XG4gICAgS2V5Q29kZVtLZXlDb2RlW1wiS2V5RlwiXSA9IDM2XSA9IFwiS2V5RlwiO1xuICAgIEtleUNvZGVbS2V5Q29kZVtcIktleUdcIl0gPSAzN10gPSBcIktleUdcIjtcbiAgICBLZXlDb2RlW0tleUNvZGVbXCJLZXlIXCJdID0gMzhdID0gXCJLZXlIXCI7XG4gICAgS2V5Q29kZVtLZXlDb2RlW1wiS2V5SVwiXSA9IDM5XSA9IFwiS2V5SVwiO1xuICAgIEtleUNvZGVbS2V5Q29kZVtcIktleUpcIl0gPSA0MF0gPSBcIktleUpcIjtcbiAgICBLZXlDb2RlW0tleUNvZGVbXCJLZXlLXCJdID0gNDFdID0gXCJLZXlLXCI7XG4gICAgS2V5Q29kZVtLZXlDb2RlW1wiS2V5TFwiXSA9IDQyXSA9IFwiS2V5TFwiO1xuICAgIEtleUNvZGVbS2V5Q29kZVtcIktleU1cIl0gPSA0M10gPSBcIktleU1cIjtcbiAgICBLZXlDb2RlW0tleUNvZGVbXCJLZXlOXCJdID0gNDRdID0gXCJLZXlOXCI7XG4gICAgS2V5Q29kZVtLZXlDb2RlW1wiS2V5T1wiXSA9IDQ1XSA9IFwiS2V5T1wiO1xuICAgIEtleUNvZGVbS2V5Q29kZVtcIktleVBcIl0gPSA0Nl0gPSBcIktleVBcIjtcbiAgICBLZXlDb2RlW0tleUNvZGVbXCJLZXlRXCJdID0gNDddID0gXCJLZXlRXCI7XG4gICAgS2V5Q29kZVtLZXlDb2RlW1wiS2V5UlwiXSA9IDQ4XSA9IFwiS2V5UlwiO1xuICAgIEtleUNvZGVbS2V5Q29kZVtcIktleVNcIl0gPSA0OV0gPSBcIktleVNcIjtcbiAgICBLZXlDb2RlW0tleUNvZGVbXCJLZXlUXCJdID0gNTBdID0gXCJLZXlUXCI7XG4gICAgS2V5Q29kZVtLZXlDb2RlW1wiS2V5VVwiXSA9IDUxXSA9IFwiS2V5VVwiO1xuICAgIEtleUNvZGVbS2V5Q29kZVtcIktleVZcIl0gPSA1Ml0gPSBcIktleVZcIjtcbiAgICBLZXlDb2RlW0tleUNvZGVbXCJLZXlXXCJdID0gNTNdID0gXCJLZXlXXCI7XG4gICAgS2V5Q29kZVtLZXlDb2RlW1wiS2V5WFwiXSA9IDU0XSA9IFwiS2V5WFwiO1xuICAgIEtleUNvZGVbS2V5Q29kZVtcIktleVlcIl0gPSA1NV0gPSBcIktleVlcIjtcbiAgICBLZXlDb2RlW0tleUNvZGVbXCJLZXlaXCJdID0gNTZdID0gXCJLZXlaXCI7XG4gICAgS2V5Q29kZVtLZXlDb2RlW1wiTWV0YVwiXSA9IDU3XSA9IFwiTWV0YVwiO1xuICAgIEtleUNvZGVbS2V5Q29kZVtcIkNvbnRleHRNZW51XCJdID0gNThdID0gXCJDb250ZXh0TWVudVwiO1xuICAgIEtleUNvZGVbS2V5Q29kZVtcIkYxXCJdID0gNTldID0gXCJGMVwiO1xuICAgIEtleUNvZGVbS2V5Q29kZVtcIkYyXCJdID0gNjBdID0gXCJGMlwiO1xuICAgIEtleUNvZGVbS2V5Q29kZVtcIkYzXCJdID0gNjFdID0gXCJGM1wiO1xuICAgIEtleUNvZGVbS2V5Q29kZVtcIkY0XCJdID0gNjJdID0gXCJGNFwiO1xuICAgIEtleUNvZGVbS2V5Q29kZVtcIkY1XCJdID0gNjNdID0gXCJGNVwiO1xuICAgIEtleUNvZGVbS2V5Q29kZVtcIkY2XCJdID0gNjRdID0gXCJGNlwiO1xuICAgIEtleUNvZGVbS2V5Q29kZVtcIkY3XCJdID0gNjVdID0gXCJGN1wiO1xuICAgIEtleUNvZGVbS2V5Q29kZVtcIkY4XCJdID0gNjZdID0gXCJGOFwiO1xuICAgIEtleUNvZGVbS2V5Q29kZVtcIkY5XCJdID0gNjddID0gXCJGOVwiO1xuICAgIEtleUNvZGVbS2V5Q29kZVtcIkYxMFwiXSA9IDY4XSA9IFwiRjEwXCI7XG4gICAgS2V5Q29kZVtLZXlDb2RlW1wiRjExXCJdID0gNjldID0gXCJGMTFcIjtcbiAgICBLZXlDb2RlW0tleUNvZGVbXCJGMTJcIl0gPSA3MF0gPSBcIkYxMlwiO1xuICAgIEtleUNvZGVbS2V5Q29kZVtcIkYxM1wiXSA9IDcxXSA9IFwiRjEzXCI7XG4gICAgS2V5Q29kZVtLZXlDb2RlW1wiRjE0XCJdID0gNzJdID0gXCJGMTRcIjtcbiAgICBLZXlDb2RlW0tleUNvZGVbXCJGMTVcIl0gPSA3M10gPSBcIkYxNVwiO1xuICAgIEtleUNvZGVbS2V5Q29kZVtcIkYxNlwiXSA9IDc0XSA9IFwiRjE2XCI7XG4gICAgS2V5Q29kZVtLZXlDb2RlW1wiRjE3XCJdID0gNzVdID0gXCJGMTdcIjtcbiAgICBLZXlDb2RlW0tleUNvZGVbXCJGMThcIl0gPSA3Nl0gPSBcIkYxOFwiO1xuICAgIEtleUNvZGVbS2V5Q29kZVtcIkYxOVwiXSA9IDc3XSA9IFwiRjE5XCI7XG4gICAgS2V5Q29kZVtLZXlDb2RlW1wiRjIwXCJdID0gNzhdID0gXCJGMjBcIjtcbiAgICBLZXlDb2RlW0tleUNvZGVbXCJGMjFcIl0gPSA3OV0gPSBcIkYyMVwiO1xuICAgIEtleUNvZGVbS2V5Q29kZVtcIkYyMlwiXSA9IDgwXSA9IFwiRjIyXCI7XG4gICAgS2V5Q29kZVtLZXlDb2RlW1wiRjIzXCJdID0gODFdID0gXCJGMjNcIjtcbiAgICBLZXlDb2RlW0tleUNvZGVbXCJGMjRcIl0gPSA4Ml0gPSBcIkYyNFwiO1xuICAgIEtleUNvZGVbS2V5Q29kZVtcIk51bUxvY2tcIl0gPSA4M10gPSBcIk51bUxvY2tcIjtcbiAgICBLZXlDb2RlW0tleUNvZGVbXCJTY3JvbGxMb2NrXCJdID0gODRdID0gXCJTY3JvbGxMb2NrXCI7XG4gICAgLyoqXG4gICAgICogVXNlZCBmb3IgbWlzY2VsbGFuZW91cyBjaGFyYWN0ZXJzOyBpdCBjYW4gdmFyeSBieSBrZXlib2FyZC5cbiAgICAgKiBGb3IgdGhlIFVTIHN0YW5kYXJkIGtleWJvYXJkLCB0aGUgJzs6JyBrZXlcbiAgICAgKi9cbiAgICBLZXlDb2RlW0tleUNvZGVbXCJTZW1pY29sb25cIl0gPSA4NV0gPSBcIlNlbWljb2xvblwiO1xuICAgIC8qKlxuICAgICAqIEZvciBhbnkgY291bnRyeS9yZWdpb24sIHRoZSAnKycga2V5XG4gICAgICogRm9yIHRoZSBVUyBzdGFuZGFyZCBrZXlib2FyZCwgdGhlICc9Kycga2V5XG4gICAgICovXG4gICAgS2V5Q29kZVtLZXlDb2RlW1wiRXF1YWxcIl0gPSA4Nl0gPSBcIkVxdWFsXCI7XG4gICAgLyoqXG4gICAgICogRm9yIGFueSBjb3VudHJ5L3JlZ2lvbiwgdGhlICcsJyBrZXlcbiAgICAgKiBGb3IgdGhlIFVTIHN0YW5kYXJkIGtleWJvYXJkLCB0aGUgJyw8JyBrZXlcbiAgICAgKi9cbiAgICBLZXlDb2RlW0tleUNvZGVbXCJDb21tYVwiXSA9IDg3XSA9IFwiQ29tbWFcIjtcbiAgICAvKipcbiAgICAgKiBGb3IgYW55IGNvdW50cnkvcmVnaW9uLCB0aGUgJy0nIGtleVxuICAgICAqIEZvciB0aGUgVVMgc3RhbmRhcmQga2V5Ym9hcmQsIHRoZSAnLV8nIGtleVxuICAgICAqL1xuICAgIEtleUNvZGVbS2V5Q29kZVtcIk1pbnVzXCJdID0gODhdID0gXCJNaW51c1wiO1xuICAgIC8qKlxuICAgICAqIEZvciBhbnkgY291bnRyeS9yZWdpb24sIHRoZSAnLicga2V5XG4gICAgICogRm9yIHRoZSBVUyBzdGFuZGFyZCBrZXlib2FyZCwgdGhlICcuPicga2V5XG4gICAgICovXG4gICAgS2V5Q29kZVtLZXlDb2RlW1wiUGVyaW9kXCJdID0gODldID0gXCJQZXJpb2RcIjtcbiAgICAvKipcbiAgICAgKiBVc2VkIGZvciBtaXNjZWxsYW5lb3VzIGNoYXJhY3RlcnM7IGl0IGNhbiB2YXJ5IGJ5IGtleWJvYXJkLlxuICAgICAqIEZvciB0aGUgVVMgc3RhbmRhcmQga2V5Ym9hcmQsIHRoZSAnLz8nIGtleVxuICAgICAqL1xuICAgIEtleUNvZGVbS2V5Q29kZVtcIlNsYXNoXCJdID0gOTBdID0gXCJTbGFzaFwiO1xuICAgIC8qKlxuICAgICAqIFVzZWQgZm9yIG1pc2NlbGxhbmVvdXMgY2hhcmFjdGVyczsgaXQgY2FuIHZhcnkgYnkga2V5Ym9hcmQuXG4gICAgICogRm9yIHRoZSBVUyBzdGFuZGFyZCBrZXlib2FyZCwgdGhlICdgficga2V5XG4gICAgICovXG4gICAgS2V5Q29kZVtLZXlDb2RlW1wiQmFja3F1b3RlXCJdID0gOTFdID0gXCJCYWNrcXVvdGVcIjtcbiAgICAvKipcbiAgICAgKiBVc2VkIGZvciBtaXNjZWxsYW5lb3VzIGNoYXJhY3RlcnM7IGl0IGNhbiB2YXJ5IGJ5IGtleWJvYXJkLlxuICAgICAqIEZvciB0aGUgVVMgc3RhbmRhcmQga2V5Ym9hcmQsIHRoZSAnW3snIGtleVxuICAgICAqL1xuICAgIEtleUNvZGVbS2V5Q29kZVtcIkJyYWNrZXRMZWZ0XCJdID0gOTJdID0gXCJCcmFja2V0TGVmdFwiO1xuICAgIC8qKlxuICAgICAqIFVzZWQgZm9yIG1pc2NlbGxhbmVvdXMgY2hhcmFjdGVyczsgaXQgY2FuIHZhcnkgYnkga2V5Ym9hcmQuXG4gICAgICogRm9yIHRoZSBVUyBzdGFuZGFyZCBrZXlib2FyZCwgdGhlICdcXHwnIGtleVxuICAgICAqL1xuICAgIEtleUNvZGVbS2V5Q29kZVtcIkJhY2tzbGFzaFwiXSA9IDkzXSA9IFwiQmFja3NsYXNoXCI7XG4gICAgLyoqXG4gICAgICogVXNlZCBmb3IgbWlzY2VsbGFuZW91cyBjaGFyYWN0ZXJzOyBpdCBjYW4gdmFyeSBieSBrZXlib2FyZC5cbiAgICAgKiBGb3IgdGhlIFVTIHN0YW5kYXJkIGtleWJvYXJkLCB0aGUgJ119JyBrZXlcbiAgICAgKi9cbiAgICBLZXlDb2RlW0tleUNvZGVbXCJCcmFja2V0UmlnaHRcIl0gPSA5NF0gPSBcIkJyYWNrZXRSaWdodFwiO1xuICAgIC8qKlxuICAgICAqIFVzZWQgZm9yIG1pc2NlbGxhbmVvdXMgY2hhcmFjdGVyczsgaXQgY2FuIHZhcnkgYnkga2V5Ym9hcmQuXG4gICAgICogRm9yIHRoZSBVUyBzdGFuZGFyZCBrZXlib2FyZCwgdGhlICcnXCInIGtleVxuICAgICAqL1xuICAgIEtleUNvZGVbS2V5Q29kZVtcIlF1b3RlXCJdID0gOTVdID0gXCJRdW90ZVwiO1xuICAgIC8qKlxuICAgICAqIFVzZWQgZm9yIG1pc2NlbGxhbmVvdXMgY2hhcmFjdGVyczsgaXQgY2FuIHZhcnkgYnkga2V5Ym9hcmQuXG4gICAgICovXG4gICAgS2V5Q29kZVtLZXlDb2RlW1wiT0VNXzhcIl0gPSA5Nl0gPSBcIk9FTV84XCI7XG4gICAgLyoqXG4gICAgICogRWl0aGVyIHRoZSBhbmdsZSBicmFja2V0IGtleSBvciB0aGUgYmFja3NsYXNoIGtleSBvbiB0aGUgUlQgMTAyLWtleSBrZXlib2FyZC5cbiAgICAgKi9cbiAgICBLZXlDb2RlW0tleUNvZGVbXCJJbnRsQmFja3NsYXNoXCJdID0gOTddID0gXCJJbnRsQmFja3NsYXNoXCI7XG4gICAgS2V5Q29kZVtLZXlDb2RlW1wiTnVtcGFkMFwiXSA9IDk4XSA9IFwiTnVtcGFkMFwiO1xuICAgIEtleUNvZGVbS2V5Q29kZVtcIk51bXBhZDFcIl0gPSA5OV0gPSBcIk51bXBhZDFcIjtcbiAgICBLZXlDb2RlW0tleUNvZGVbXCJOdW1wYWQyXCJdID0gMTAwXSA9IFwiTnVtcGFkMlwiO1xuICAgIEtleUNvZGVbS2V5Q29kZVtcIk51bXBhZDNcIl0gPSAxMDFdID0gXCJOdW1wYWQzXCI7XG4gICAgS2V5Q29kZVtLZXlDb2RlW1wiTnVtcGFkNFwiXSA9IDEwMl0gPSBcIk51bXBhZDRcIjtcbiAgICBLZXlDb2RlW0tleUNvZGVbXCJOdW1wYWQ1XCJdID0gMTAzXSA9IFwiTnVtcGFkNVwiO1xuICAgIEtleUNvZGVbS2V5Q29kZVtcIk51bXBhZDZcIl0gPSAxMDRdID0gXCJOdW1wYWQ2XCI7XG4gICAgS2V5Q29kZVtLZXlDb2RlW1wiTnVtcGFkN1wiXSA9IDEwNV0gPSBcIk51bXBhZDdcIjtcbiAgICBLZXlDb2RlW0tleUNvZGVbXCJOdW1wYWQ4XCJdID0gMTA2XSA9IFwiTnVtcGFkOFwiO1xuICAgIEtleUNvZGVbS2V5Q29kZVtcIk51bXBhZDlcIl0gPSAxMDddID0gXCJOdW1wYWQ5XCI7XG4gICAgS2V5Q29kZVtLZXlDb2RlW1wiTnVtcGFkTXVsdGlwbHlcIl0gPSAxMDhdID0gXCJOdW1wYWRNdWx0aXBseVwiO1xuICAgIEtleUNvZGVbS2V5Q29kZVtcIk51bXBhZEFkZFwiXSA9IDEwOV0gPSBcIk51bXBhZEFkZFwiO1xuICAgIEtleUNvZGVbS2V5Q29kZVtcIk5VTVBBRF9TRVBBUkFUT1JcIl0gPSAxMTBdID0gXCJOVU1QQURfU0VQQVJBVE9SXCI7XG4gICAgS2V5Q29kZVtLZXlDb2RlW1wiTnVtcGFkU3VidHJhY3RcIl0gPSAxMTFdID0gXCJOdW1wYWRTdWJ0cmFjdFwiO1xuICAgIEtleUNvZGVbS2V5Q29kZVtcIk51bXBhZERlY2ltYWxcIl0gPSAxMTJdID0gXCJOdW1wYWREZWNpbWFsXCI7XG4gICAgS2V5Q29kZVtLZXlDb2RlW1wiTnVtcGFkRGl2aWRlXCJdID0gMTEzXSA9IFwiTnVtcGFkRGl2aWRlXCI7XG4gICAgLyoqXG4gICAgICogQ292ZXIgYWxsIGtleSBjb2RlcyB3aGVuIElNRSBpcyBwcm9jZXNzaW5nIGlucHV0LlxuICAgICAqL1xuICAgIEtleUNvZGVbS2V5Q29kZVtcIktFWV9JTl9DT01QT1NJVElPTlwiXSA9IDExNF0gPSBcIktFWV9JTl9DT01QT1NJVElPTlwiO1xuICAgIEtleUNvZGVbS2V5Q29kZVtcIkFCTlRfQzFcIl0gPSAxMTVdID0gXCJBQk5UX0MxXCI7XG4gICAgS2V5Q29kZVtLZXlDb2RlW1wiQUJOVF9DMlwiXSA9IDExNl0gPSBcIkFCTlRfQzJcIjtcbiAgICBLZXlDb2RlW0tleUNvZGVbXCJBdWRpb1ZvbHVtZU11dGVcIl0gPSAxMTddID0gXCJBdWRpb1ZvbHVtZU11dGVcIjtcbiAgICBLZXlDb2RlW0tleUNvZGVbXCJBdWRpb1ZvbHVtZVVwXCJdID0gMTE4XSA9IFwiQXVkaW9Wb2x1bWVVcFwiO1xuICAgIEtleUNvZGVbS2V5Q29kZVtcIkF1ZGlvVm9sdW1lRG93blwiXSA9IDExOV0gPSBcIkF1ZGlvVm9sdW1lRG93blwiO1xuICAgIEtleUNvZGVbS2V5Q29kZVtcIkJyb3dzZXJTZWFyY2hcIl0gPSAxMjBdID0gXCJCcm93c2VyU2VhcmNoXCI7XG4gICAgS2V5Q29kZVtLZXlDb2RlW1wiQnJvd3NlckhvbWVcIl0gPSAxMjFdID0gXCJCcm93c2VySG9tZVwiO1xuICAgIEtleUNvZGVbS2V5Q29kZVtcIkJyb3dzZXJCYWNrXCJdID0gMTIyXSA9IFwiQnJvd3NlckJhY2tcIjtcbiAgICBLZXlDb2RlW0tleUNvZGVbXCJCcm93c2VyRm9yd2FyZFwiXSA9IDEyM10gPSBcIkJyb3dzZXJGb3J3YXJkXCI7XG4gICAgS2V5Q29kZVtLZXlDb2RlW1wiTWVkaWFUcmFja05leHRcIl0gPSAxMjRdID0gXCJNZWRpYVRyYWNrTmV4dFwiO1xuICAgIEtleUNvZGVbS2V5Q29kZVtcIk1lZGlhVHJhY2tQcmV2aW91c1wiXSA9IDEyNV0gPSBcIk1lZGlhVHJhY2tQcmV2aW91c1wiO1xuICAgIEtleUNvZGVbS2V5Q29kZVtcIk1lZGlhU3RvcFwiXSA9IDEyNl0gPSBcIk1lZGlhU3RvcFwiO1xuICAgIEtleUNvZGVbS2V5Q29kZVtcIk1lZGlhUGxheVBhdXNlXCJdID0gMTI3XSA9IFwiTWVkaWFQbGF5UGF1c2VcIjtcbiAgICBLZXlDb2RlW0tleUNvZGVbXCJMYXVuY2hNZWRpYVBsYXllclwiXSA9IDEyOF0gPSBcIkxhdW5jaE1lZGlhUGxheWVyXCI7XG4gICAgS2V5Q29kZVtLZXlDb2RlW1wiTGF1bmNoTWFpbFwiXSA9IDEyOV0gPSBcIkxhdW5jaE1haWxcIjtcbiAgICBLZXlDb2RlW0tleUNvZGVbXCJMYXVuY2hBcHAyXCJdID0gMTMwXSA9IFwiTGF1bmNoQXBwMlwiO1xuICAgIC8qKlxuICAgICAqIFZLX0NMRUFSLCAweDBDLCBDTEVBUiBrZXlcbiAgICAgKi9cbiAgICBLZXlDb2RlW0tleUNvZGVbXCJDbGVhclwiXSA9IDEzMV0gPSBcIkNsZWFyXCI7XG4gICAgLyoqXG4gICAgICogUGxhY2VkIGxhc3QgdG8gY292ZXIgdGhlIGxlbmd0aCBvZiB0aGUgZW51bS5cbiAgICAgKiBQbGVhc2UgZG8gbm90IGRlcGVuZCBvbiB0aGlzIHZhbHVlIVxuICAgICAqL1xuICAgIEtleUNvZGVbS2V5Q29kZVtcIk1BWF9WQUxVRVwiXSA9IDEzMl0gPSBcIk1BWF9WQUxVRVwiO1xufSkoS2V5Q29kZSB8fCAoS2V5Q29kZSA9IHt9KSk7XG5leHBvcnQgdmFyIE1hcmtlclNldmVyaXR5O1xuKGZ1bmN0aW9uIChNYXJrZXJTZXZlcml0eSkge1xuICAgIE1hcmtlclNldmVyaXR5W01hcmtlclNldmVyaXR5W1wiSGludFwiXSA9IDFdID0gXCJIaW50XCI7XG4gICAgTWFya2VyU2V2ZXJpdHlbTWFya2VyU2V2ZXJpdHlbXCJJbmZvXCJdID0gMl0gPSBcIkluZm9cIjtcbiAgICBNYXJrZXJTZXZlcml0eVtNYXJrZXJTZXZlcml0eVtcIldhcm5pbmdcIl0gPSA0XSA9IFwiV2FybmluZ1wiO1xuICAgIE1hcmtlclNldmVyaXR5W01hcmtlclNldmVyaXR5W1wiRXJyb3JcIl0gPSA4XSA9IFwiRXJyb3JcIjtcbn0pKE1hcmtlclNldmVyaXR5IHx8IChNYXJrZXJTZXZlcml0eSA9IHt9KSk7XG5leHBvcnQgdmFyIE1hcmtlclRhZztcbihmdW5jdGlvbiAoTWFya2VyVGFnKSB7XG4gICAgTWFya2VyVGFnW01hcmtlclRhZ1tcIlVubmVjZXNzYXJ5XCJdID0gMV0gPSBcIlVubmVjZXNzYXJ5XCI7XG4gICAgTWFya2VyVGFnW01hcmtlclRhZ1tcIkRlcHJlY2F0ZWRcIl0gPSAyXSA9IFwiRGVwcmVjYXRlZFwiO1xufSkoTWFya2VyVGFnIHx8IChNYXJrZXJUYWcgPSB7fSkpO1xuLyoqXG4gKiBQb3NpdGlvbiBpbiB0aGUgbWluaW1hcCB0byByZW5kZXIgdGhlIGRlY29yYXRpb24uXG4gKi9cbmV4cG9ydCB2YXIgTWluaW1hcFBvc2l0aW9uO1xuKGZ1bmN0aW9uIChNaW5pbWFwUG9zaXRpb24pIHtcbiAgICBNaW5pbWFwUG9zaXRpb25bTWluaW1hcFBvc2l0aW9uW1wiSW5saW5lXCJdID0gMV0gPSBcIklubGluZVwiO1xuICAgIE1pbmltYXBQb3NpdGlvbltNaW5pbWFwUG9zaXRpb25bXCJHdXR0ZXJcIl0gPSAyXSA9IFwiR3V0dGVyXCI7XG59KShNaW5pbWFwUG9zaXRpb24gfHwgKE1pbmltYXBQb3NpdGlvbiA9IHt9KSk7XG4vKipcbiAqIFNlY3Rpb24gaGVhZGVyIHN0eWxlLlxuICovXG5leHBvcnQgdmFyIE1pbmltYXBTZWN0aW9uSGVhZGVyU3R5bGU7XG4oZnVuY3Rpb24gKE1pbmltYXBTZWN0aW9uSGVhZGVyU3R5bGUpIHtcbiAgICBNaW5pbWFwU2VjdGlvbkhlYWRlclN0eWxlW01pbmltYXBTZWN0aW9uSGVhZGVyU3R5bGVbXCJOb3JtYWxcIl0gPSAxXSA9IFwiTm9ybWFsXCI7XG4gICAgTWluaW1hcFNlY3Rpb25IZWFkZXJTdHlsZVtNaW5pbWFwU2VjdGlvbkhlYWRlclN0eWxlW1wiVW5kZXJsaW5lZFwiXSA9IDJdID0gXCJVbmRlcmxpbmVkXCI7XG59KShNaW5pbWFwU2VjdGlvbkhlYWRlclN0eWxlIHx8IChNaW5pbWFwU2VjdGlvbkhlYWRlclN0eWxlID0ge30pKTtcbi8qKlxuICogVHlwZSBvZiBoaXQgZWxlbWVudCB3aXRoIHRoZSBtb3VzZSBpbiB0aGUgZWRpdG9yLlxuICovXG5leHBvcnQgdmFyIE1vdXNlVGFyZ2V0VHlwZTtcbihmdW5jdGlvbiAoTW91c2VUYXJnZXRUeXBlKSB7XG4gICAgLyoqXG4gICAgICogTW91c2UgaXMgb24gdG9wIG9mIGFuIHVua25vd24gZWxlbWVudC5cbiAgICAgKi9cbiAgICBNb3VzZVRhcmdldFR5cGVbTW91c2VUYXJnZXRUeXBlW1wiVU5LTk9XTlwiXSA9IDBdID0gXCJVTktOT1dOXCI7XG4gICAgLyoqXG4gICAgICogTW91c2UgaXMgb24gdG9wIG9mIHRoZSB0ZXh0YXJlYSB1c2VkIGZvciBpbnB1dC5cbiAgICAgKi9cbiAgICBNb3VzZVRhcmdldFR5cGVbTW91c2VUYXJnZXRUeXBlW1wiVEVYVEFSRUFcIl0gPSAxXSA9IFwiVEVYVEFSRUFcIjtcbiAgICAvKipcbiAgICAgKiBNb3VzZSBpcyBvbiB0b3Agb2YgdGhlIGdseXBoIG1hcmdpblxuICAgICAqL1xuICAgIE1vdXNlVGFyZ2V0VHlwZVtNb3VzZVRhcmdldFR5cGVbXCJHVVRURVJfR0xZUEhfTUFSR0lOXCJdID0gMl0gPSBcIkdVVFRFUl9HTFlQSF9NQVJHSU5cIjtcbiAgICAvKipcbiAgICAgKiBNb3VzZSBpcyBvbiB0b3Agb2YgdGhlIGxpbmUgbnVtYmVyc1xuICAgICAqL1xuICAgIE1vdXNlVGFyZ2V0VHlwZVtNb3VzZVRhcmdldFR5cGVbXCJHVVRURVJfTElORV9OVU1CRVJTXCJdID0gM10gPSBcIkdVVFRFUl9MSU5FX05VTUJFUlNcIjtcbiAgICAvKipcbiAgICAgKiBNb3VzZSBpcyBvbiB0b3Agb2YgdGhlIGxpbmUgZGVjb3JhdGlvbnNcbiAgICAgKi9cbiAgICBNb3VzZVRhcmdldFR5cGVbTW91c2VUYXJnZXRUeXBlW1wiR1VUVEVSX0xJTkVfREVDT1JBVElPTlNcIl0gPSA0XSA9IFwiR1VUVEVSX0xJTkVfREVDT1JBVElPTlNcIjtcbiAgICAvKipcbiAgICAgKiBNb3VzZSBpcyBvbiB0b3Agb2YgdGhlIHdoaXRlc3BhY2UgbGVmdCBpbiB0aGUgZ3V0dGVyIGJ5IGEgdmlldyB6b25lLlxuICAgICAqL1xuICAgIE1vdXNlVGFyZ2V0VHlwZVtNb3VzZVRhcmdldFR5cGVbXCJHVVRURVJfVklFV19aT05FXCJdID0gNV0gPSBcIkdVVFRFUl9WSUVXX1pPTkVcIjtcbiAgICAvKipcbiAgICAgKiBNb3VzZSBpcyBvbiB0b3Agb2YgdGV4dCBpbiB0aGUgY29udGVudC5cbiAgICAgKi9cbiAgICBNb3VzZVRhcmdldFR5cGVbTW91c2VUYXJnZXRUeXBlW1wiQ09OVEVOVF9URVhUXCJdID0gNl0gPSBcIkNPTlRFTlRfVEVYVFwiO1xuICAgIC8qKlxuICAgICAqIE1vdXNlIGlzIG9uIHRvcCBvZiBlbXB0eSBzcGFjZSBpbiB0aGUgY29udGVudCAoZS5nLiBhZnRlciBsaW5lIHRleHQgb3IgYmVsb3cgbGFzdCBsaW5lKVxuICAgICAqL1xuICAgIE1vdXNlVGFyZ2V0VHlwZVtNb3VzZVRhcmdldFR5cGVbXCJDT05URU5UX0VNUFRZXCJdID0gN10gPSBcIkNPTlRFTlRfRU1QVFlcIjtcbiAgICAvKipcbiAgICAgKiBNb3VzZSBpcyBvbiB0b3Agb2YgYSB2aWV3IHpvbmUgaW4gdGhlIGNvbnRlbnQuXG4gICAgICovXG4gICAgTW91c2VUYXJnZXRUeXBlW01vdXNlVGFyZ2V0VHlwZVtcIkNPTlRFTlRfVklFV19aT05FXCJdID0gOF0gPSBcIkNPTlRFTlRfVklFV19aT05FXCI7XG4gICAgLyoqXG4gICAgICogTW91c2UgaXMgb24gdG9wIG9mIGEgY29udGVudCB3aWRnZXQuXG4gICAgICovXG4gICAgTW91c2VUYXJnZXRUeXBlW01vdXNlVGFyZ2V0VHlwZVtcIkNPTlRFTlRfV0lER0VUXCJdID0gOV0gPSBcIkNPTlRFTlRfV0lER0VUXCI7XG4gICAgLyoqXG4gICAgICogTW91c2UgaXMgb24gdG9wIG9mIHRoZSBkZWNvcmF0aW9ucyBvdmVydmlldyBydWxlci5cbiAgICAgKi9cbiAgICBNb3VzZVRhcmdldFR5cGVbTW91c2VUYXJnZXRUeXBlW1wiT1ZFUlZJRVdfUlVMRVJcIl0gPSAxMF0gPSBcIk9WRVJWSUVXX1JVTEVSXCI7XG4gICAgLyoqXG4gICAgICogTW91c2UgaXMgb24gdG9wIG9mIGEgc2Nyb2xsYmFyLlxuICAgICAqL1xuICAgIE1vdXNlVGFyZ2V0VHlwZVtNb3VzZVRhcmdldFR5cGVbXCJTQ1JPTExCQVJcIl0gPSAxMV0gPSBcIlNDUk9MTEJBUlwiO1xuICAgIC8qKlxuICAgICAqIE1vdXNlIGlzIG9uIHRvcCBvZiBhbiBvdmVybGF5IHdpZGdldC5cbiAgICAgKi9cbiAgICBNb3VzZVRhcmdldFR5cGVbTW91c2VUYXJnZXRUeXBlW1wiT1ZFUkxBWV9XSURHRVRcIl0gPSAxMl0gPSBcIk9WRVJMQVlfV0lER0VUXCI7XG4gICAgLyoqXG4gICAgICogTW91c2UgaXMgb3V0c2lkZSBvZiB0aGUgZWRpdG9yLlxuICAgICAqL1xuICAgIE1vdXNlVGFyZ2V0VHlwZVtNb3VzZVRhcmdldFR5cGVbXCJPVVRTSURFX0VESVRPUlwiXSA9IDEzXSA9IFwiT1VUU0lERV9FRElUT1JcIjtcbn0pKE1vdXNlVGFyZ2V0VHlwZSB8fCAoTW91c2VUYXJnZXRUeXBlID0ge30pKTtcbmV4cG9ydCB2YXIgTmV3U3ltYm9sTmFtZVRhZztcbihmdW5jdGlvbiAoTmV3U3ltYm9sTmFtZVRhZykge1xuICAgIE5ld1N5bWJvbE5hbWVUYWdbTmV3U3ltYm9sTmFtZVRhZ1tcIkFJR2VuZXJhdGVkXCJdID0gMV0gPSBcIkFJR2VuZXJhdGVkXCI7XG59KShOZXdTeW1ib2xOYW1lVGFnIHx8IChOZXdTeW1ib2xOYW1lVGFnID0ge30pKTtcbmV4cG9ydCB2YXIgTmV3U3ltYm9sTmFtZVRyaWdnZXJLaW5kO1xuKGZ1bmN0aW9uIChOZXdTeW1ib2xOYW1lVHJpZ2dlcktpbmQpIHtcbiAgICBOZXdTeW1ib2xOYW1lVHJpZ2dlcktpbmRbTmV3U3ltYm9sTmFtZVRyaWdnZXJLaW5kW1wiSW52b2tlXCJdID0gMF0gPSBcIkludm9rZVwiO1xuICAgIE5ld1N5bWJvbE5hbWVUcmlnZ2VyS2luZFtOZXdTeW1ib2xOYW1lVHJpZ2dlcktpbmRbXCJBdXRvbWF0aWNcIl0gPSAxXSA9IFwiQXV0b21hdGljXCI7XG59KShOZXdTeW1ib2xOYW1lVHJpZ2dlcktpbmQgfHwgKE5ld1N5bWJvbE5hbWVUcmlnZ2VyS2luZCA9IHt9KSk7XG4vKipcbiAqIEEgcG9zaXRpb25pbmcgcHJlZmVyZW5jZSBmb3IgcmVuZGVyaW5nIG92ZXJsYXkgd2lkZ2V0cy5cbiAqL1xuZXhwb3J0IHZhciBPdmVybGF5V2lkZ2V0UG9zaXRpb25QcmVmZXJlbmNlO1xuKGZ1bmN0aW9uIChPdmVybGF5V2lkZ2V0UG9zaXRpb25QcmVmZXJlbmNlKSB7XG4gICAgLyoqXG4gICAgICogUG9zaXRpb24gdGhlIG92ZXJsYXkgd2lkZ2V0IGluIHRoZSB0b3AgcmlnaHQgY29ybmVyXG4gICAgICovXG4gICAgT3ZlcmxheVdpZGdldFBvc2l0aW9uUHJlZmVyZW5jZVtPdmVybGF5V2lkZ2V0UG9zaXRpb25QcmVmZXJlbmNlW1wiVE9QX1JJR0hUX0NPUk5FUlwiXSA9IDBdID0gXCJUT1BfUklHSFRfQ09STkVSXCI7XG4gICAgLyoqXG4gICAgICogUG9zaXRpb24gdGhlIG92ZXJsYXkgd2lkZ2V0IGluIHRoZSBib3R0b20gcmlnaHQgY29ybmVyXG4gICAgICovXG4gICAgT3ZlcmxheVdpZGdldFBvc2l0aW9uUHJlZmVyZW5jZVtPdmVybGF5V2lkZ2V0UG9zaXRpb25QcmVmZXJlbmNlW1wiQk9UVE9NX1JJR0hUX0NPUk5FUlwiXSA9IDFdID0gXCJCT1RUT01fUklHSFRfQ09STkVSXCI7XG4gICAgLyoqXG4gICAgICogUG9zaXRpb24gdGhlIG92ZXJsYXkgd2lkZ2V0IGluIHRoZSB0b3AgY2VudGVyXG4gICAgICovXG4gICAgT3ZlcmxheVdpZGdldFBvc2l0aW9uUHJlZmVyZW5jZVtPdmVybGF5V2lkZ2V0UG9zaXRpb25QcmVmZXJlbmNlW1wiVE9QX0NFTlRFUlwiXSA9IDJdID0gXCJUT1BfQ0VOVEVSXCI7XG59KShPdmVybGF5V2lkZ2V0UG9zaXRpb25QcmVmZXJlbmNlIHx8IChPdmVybGF5V2lkZ2V0UG9zaXRpb25QcmVmZXJlbmNlID0ge30pKTtcbi8qKlxuICogVmVydGljYWwgTGFuZSBpbiB0aGUgb3ZlcnZpZXcgcnVsZXIgb2YgdGhlIGVkaXRvci5cbiAqL1xuZXhwb3J0IHZhciBPdmVydmlld1J1bGVyTGFuZTtcbihmdW5jdGlvbiAoT3ZlcnZpZXdSdWxlckxhbmUpIHtcbiAgICBPdmVydmlld1J1bGVyTGFuZVtPdmVydmlld1J1bGVyTGFuZVtcIkxlZnRcIl0gPSAxXSA9IFwiTGVmdFwiO1xuICAgIE92ZXJ2aWV3UnVsZXJMYW5lW092ZXJ2aWV3UnVsZXJMYW5lW1wiQ2VudGVyXCJdID0gMl0gPSBcIkNlbnRlclwiO1xuICAgIE92ZXJ2aWV3UnVsZXJMYW5lW092ZXJ2aWV3UnVsZXJMYW5lW1wiUmlnaHRcIl0gPSA0XSA9IFwiUmlnaHRcIjtcbiAgICBPdmVydmlld1J1bGVyTGFuZVtPdmVydmlld1J1bGVyTGFuZVtcIkZ1bGxcIl0gPSA3XSA9IFwiRnVsbFwiO1xufSkoT3ZlcnZpZXdSdWxlckxhbmUgfHwgKE92ZXJ2aWV3UnVsZXJMYW5lID0ge30pKTtcbi8qKlxuICogSG93IGEgcGFydGlhbCBhY2NlcHRhbmNlIHdhcyB0cmlnZ2VyZWQuXG4gKi9cbmV4cG9ydCB2YXIgUGFydGlhbEFjY2VwdFRyaWdnZXJLaW5kO1xuKGZ1bmN0aW9uIChQYXJ0aWFsQWNjZXB0VHJpZ2dlcktpbmQpIHtcbiAgICBQYXJ0aWFsQWNjZXB0VHJpZ2dlcktpbmRbUGFydGlhbEFjY2VwdFRyaWdnZXJLaW5kW1wiV29yZFwiXSA9IDBdID0gXCJXb3JkXCI7XG4gICAgUGFydGlhbEFjY2VwdFRyaWdnZXJLaW5kW1BhcnRpYWxBY2NlcHRUcmlnZ2VyS2luZFtcIkxpbmVcIl0gPSAxXSA9IFwiTGluZVwiO1xuICAgIFBhcnRpYWxBY2NlcHRUcmlnZ2VyS2luZFtQYXJ0aWFsQWNjZXB0VHJpZ2dlcktpbmRbXCJTdWdnZXN0XCJdID0gMl0gPSBcIlN1Z2dlc3RcIjtcbn0pKFBhcnRpYWxBY2NlcHRUcmlnZ2VyS2luZCB8fCAoUGFydGlhbEFjY2VwdFRyaWdnZXJLaW5kID0ge30pKTtcbmV4cG9ydCB2YXIgUG9zaXRpb25BZmZpbml0eTtcbihmdW5jdGlvbiAoUG9zaXRpb25BZmZpbml0eSkge1xuICAgIC8qKlxuICAgICAqIFByZWZlcnMgdGhlIGxlZnQgbW9zdCBwb3NpdGlvbi5cbiAgICAqL1xuICAgIFBvc2l0aW9uQWZmaW5pdHlbUG9zaXRpb25BZmZpbml0eVtcIkxlZnRcIl0gPSAwXSA9IFwiTGVmdFwiO1xuICAgIC8qKlxuICAgICAqIFByZWZlcnMgdGhlIHJpZ2h0IG1vc3QgcG9zaXRpb24uXG4gICAgKi9cbiAgICBQb3NpdGlvbkFmZmluaXR5W1Bvc2l0aW9uQWZmaW5pdHlbXCJSaWdodFwiXSA9IDFdID0gXCJSaWdodFwiO1xuICAgIC8qKlxuICAgICAqIE5vIHByZWZlcmVuY2UuXG4gICAgKi9cbiAgICBQb3NpdGlvbkFmZmluaXR5W1Bvc2l0aW9uQWZmaW5pdHlbXCJOb25lXCJdID0gMl0gPSBcIk5vbmVcIjtcbiAgICAvKipcbiAgICAgKiBJZiB0aGUgZ2l2ZW4gcG9zaXRpb24gaXMgb24gaW5qZWN0ZWQgdGV4dCwgcHJlZmVycyB0aGUgcG9zaXRpb24gbGVmdCBvZiBpdC5cbiAgICAqL1xuICAgIFBvc2l0aW9uQWZmaW5pdHlbUG9zaXRpb25BZmZpbml0eVtcIkxlZnRPZkluamVjdGVkVGV4dFwiXSA9IDNdID0gXCJMZWZ0T2ZJbmplY3RlZFRleHRcIjtcbiAgICAvKipcbiAgICAgKiBJZiB0aGUgZ2l2ZW4gcG9zaXRpb24gaXMgb24gaW5qZWN0ZWQgdGV4dCwgcHJlZmVycyB0aGUgcG9zaXRpb24gcmlnaHQgb2YgaXQuXG4gICAgKi9cbiAgICBQb3NpdGlvbkFmZmluaXR5W1Bvc2l0aW9uQWZmaW5pdHlbXCJSaWdodE9mSW5qZWN0ZWRUZXh0XCJdID0gNF0gPSBcIlJpZ2h0T2ZJbmplY3RlZFRleHRcIjtcbn0pKFBvc2l0aW9uQWZmaW5pdHkgfHwgKFBvc2l0aW9uQWZmaW5pdHkgPSB7fSkpO1xuZXhwb3J0IHZhciBSZW5kZXJMaW5lTnVtYmVyc1R5cGU7XG4oZnVuY3Rpb24gKFJlbmRlckxpbmVOdW1iZXJzVHlwZSkge1xuICAgIFJlbmRlckxpbmVOdW1iZXJzVHlwZVtSZW5kZXJMaW5lTnVtYmVyc1R5cGVbXCJPZmZcIl0gPSAwXSA9IFwiT2ZmXCI7XG4gICAgUmVuZGVyTGluZU51bWJlcnNUeXBlW1JlbmRlckxpbmVOdW1iZXJzVHlwZVtcIk9uXCJdID0gMV0gPSBcIk9uXCI7XG4gICAgUmVuZGVyTGluZU51bWJlcnNUeXBlW1JlbmRlckxpbmVOdW1iZXJzVHlwZVtcIlJlbGF0aXZlXCJdID0gMl0gPSBcIlJlbGF0aXZlXCI7XG4gICAgUmVuZGVyTGluZU51bWJlcnNUeXBlW1JlbmRlckxpbmVOdW1iZXJzVHlwZVtcIkludGVydmFsXCJdID0gM10gPSBcIkludGVydmFsXCI7XG4gICAgUmVuZGVyTGluZU51bWJlcnNUeXBlW1JlbmRlckxpbmVOdW1iZXJzVHlwZVtcIkN1c3RvbVwiXSA9IDRdID0gXCJDdXN0b21cIjtcbn0pKFJlbmRlckxpbmVOdW1iZXJzVHlwZSB8fCAoUmVuZGVyTGluZU51bWJlcnNUeXBlID0ge30pKTtcbmV4cG9ydCB2YXIgUmVuZGVyTWluaW1hcDtcbihmdW5jdGlvbiAoUmVuZGVyTWluaW1hcCkge1xuICAgIFJlbmRlck1pbmltYXBbUmVuZGVyTWluaW1hcFtcIk5vbmVcIl0gPSAwXSA9IFwiTm9uZVwiO1xuICAgIFJlbmRlck1pbmltYXBbUmVuZGVyTWluaW1hcFtcIlRleHRcIl0gPSAxXSA9IFwiVGV4dFwiO1xuICAgIFJlbmRlck1pbmltYXBbUmVuZGVyTWluaW1hcFtcIkJsb2Nrc1wiXSA9IDJdID0gXCJCbG9ja3NcIjtcbn0pKFJlbmRlck1pbmltYXAgfHwgKFJlbmRlck1pbmltYXAgPSB7fSkpO1xuZXhwb3J0IHZhciBTY3JvbGxUeXBlO1xuKGZ1bmN0aW9uIChTY3JvbGxUeXBlKSB7XG4gICAgU2Nyb2xsVHlwZVtTY3JvbGxUeXBlW1wiU21vb3RoXCJdID0gMF0gPSBcIlNtb290aFwiO1xuICAgIFNjcm9sbFR5cGVbU2Nyb2xsVHlwZVtcIkltbWVkaWF0ZVwiXSA9IDFdID0gXCJJbW1lZGlhdGVcIjtcbn0pKFNjcm9sbFR5cGUgfHwgKFNjcm9sbFR5cGUgPSB7fSkpO1xuZXhwb3J0IHZhciBTY3JvbGxiYXJWaXNpYmlsaXR5O1xuKGZ1bmN0aW9uIChTY3JvbGxiYXJWaXNpYmlsaXR5KSB7XG4gICAgU2Nyb2xsYmFyVmlzaWJpbGl0eVtTY3JvbGxiYXJWaXNpYmlsaXR5W1wiQXV0b1wiXSA9IDFdID0gXCJBdXRvXCI7XG4gICAgU2Nyb2xsYmFyVmlzaWJpbGl0eVtTY3JvbGxiYXJWaXNpYmlsaXR5W1wiSGlkZGVuXCJdID0gMl0gPSBcIkhpZGRlblwiO1xuICAgIFNjcm9sbGJhclZpc2liaWxpdHlbU2Nyb2xsYmFyVmlzaWJpbGl0eVtcIlZpc2libGVcIl0gPSAzXSA9IFwiVmlzaWJsZVwiO1xufSkoU2Nyb2xsYmFyVmlzaWJpbGl0eSB8fCAoU2Nyb2xsYmFyVmlzaWJpbGl0eSA9IHt9KSk7XG4vKipcbiAqIFRoZSBkaXJlY3Rpb24gb2YgYSBzZWxlY3Rpb24uXG4gKi9cbmV4cG9ydCB2YXIgU2VsZWN0aW9uRGlyZWN0aW9uO1xuKGZ1bmN0aW9uIChTZWxlY3Rpb25EaXJlY3Rpb24pIHtcbiAgICAvKipcbiAgICAgKiBUaGUgc2VsZWN0aW9uIHN0YXJ0cyBhYm92ZSB3aGVyZSBpdCBlbmRzLlxuICAgICAqL1xuICAgIFNlbGVjdGlvbkRpcmVjdGlvbltTZWxlY3Rpb25EaXJlY3Rpb25bXCJMVFJcIl0gPSAwXSA9IFwiTFRSXCI7XG4gICAgLyoqXG4gICAgICogVGhlIHNlbGVjdGlvbiBzdGFydHMgYmVsb3cgd2hlcmUgaXQgZW5kcy5cbiAgICAgKi9cbiAgICBTZWxlY3Rpb25EaXJlY3Rpb25bU2VsZWN0aW9uRGlyZWN0aW9uW1wiUlRMXCJdID0gMV0gPSBcIlJUTFwiO1xufSkoU2VsZWN0aW9uRGlyZWN0aW9uIHx8IChTZWxlY3Rpb25EaXJlY3Rpb24gPSB7fSkpO1xuZXhwb3J0IHZhciBTaG93TGlnaHRidWxiSWNvbk1vZGU7XG4oZnVuY3Rpb24gKFNob3dMaWdodGJ1bGJJY29uTW9kZSkge1xuICAgIFNob3dMaWdodGJ1bGJJY29uTW9kZVtcIk9mZlwiXSA9IFwib2ZmXCI7XG4gICAgU2hvd0xpZ2h0YnVsYkljb25Nb2RlW1wiT25Db2RlXCJdID0gXCJvbkNvZGVcIjtcbiAgICBTaG93TGlnaHRidWxiSWNvbk1vZGVbXCJPblwiXSA9IFwib25cIjtcbn0pKFNob3dMaWdodGJ1bGJJY29uTW9kZSB8fCAoU2hvd0xpZ2h0YnVsYkljb25Nb2RlID0ge30pKTtcbmV4cG9ydCB2YXIgU2lnbmF0dXJlSGVscFRyaWdnZXJLaW5kO1xuKGZ1bmN0aW9uIChTaWduYXR1cmVIZWxwVHJpZ2dlcktpbmQpIHtcbiAgICBTaWduYXR1cmVIZWxwVHJpZ2dlcktpbmRbU2lnbmF0dXJlSGVscFRyaWdnZXJLaW5kW1wiSW52b2tlXCJdID0gMV0gPSBcIkludm9rZVwiO1xuICAgIFNpZ25hdHVyZUhlbHBUcmlnZ2VyS2luZFtTaWduYXR1cmVIZWxwVHJpZ2dlcktpbmRbXCJUcmlnZ2VyQ2hhcmFjdGVyXCJdID0gMl0gPSBcIlRyaWdnZXJDaGFyYWN0ZXJcIjtcbiAgICBTaWduYXR1cmVIZWxwVHJpZ2dlcktpbmRbU2lnbmF0dXJlSGVscFRyaWdnZXJLaW5kW1wiQ29udGVudENoYW5nZVwiXSA9IDNdID0gXCJDb250ZW50Q2hhbmdlXCI7XG59KShTaWduYXR1cmVIZWxwVHJpZ2dlcktpbmQgfHwgKFNpZ25hdHVyZUhlbHBUcmlnZ2VyS2luZCA9IHt9KSk7XG4vKipcbiAqIEEgc3ltYm9sIGtpbmQuXG4gKi9cbmV4cG9ydCB2YXIgU3ltYm9sS2luZDtcbihmdW5jdGlvbiAoU3ltYm9sS2luZCkge1xuICAgIFN5bWJvbEtpbmRbU3ltYm9sS2luZFtcIkZpbGVcIl0gPSAwXSA9IFwiRmlsZVwiO1xuICAgIFN5bWJvbEtpbmRbU3ltYm9sS2luZFtcIk1vZHVsZVwiXSA9IDFdID0gXCJNb2R1bGVcIjtcbiAgICBTeW1ib2xLaW5kW1N5bWJvbEtpbmRbXCJOYW1lc3BhY2VcIl0gPSAyXSA9IFwiTmFtZXNwYWNlXCI7XG4gICAgU3ltYm9sS2luZFtTeW1ib2xLaW5kW1wiUGFja2FnZVwiXSA9IDNdID0gXCJQYWNrYWdlXCI7XG4gICAgU3ltYm9sS2luZFtTeW1ib2xLaW5kW1wiQ2xhc3NcIl0gPSA0XSA9IFwiQ2xhc3NcIjtcbiAgICBTeW1ib2xLaW5kW1N5bWJvbEtpbmRbXCJNZXRob2RcIl0gPSA1XSA9IFwiTWV0aG9kXCI7XG4gICAgU3ltYm9sS2luZFtTeW1ib2xLaW5kW1wiUHJvcGVydHlcIl0gPSA2XSA9IFwiUHJvcGVydHlcIjtcbiAgICBTeW1ib2xLaW5kW1N5bWJvbEtpbmRbXCJGaWVsZFwiXSA9IDddID0gXCJGaWVsZFwiO1xuICAgIFN5bWJvbEtpbmRbU3ltYm9sS2luZFtcIkNvbnN0cnVjdG9yXCJdID0gOF0gPSBcIkNvbnN0cnVjdG9yXCI7XG4gICAgU3ltYm9sS2luZFtTeW1ib2xLaW5kW1wiRW51bVwiXSA9IDldID0gXCJFbnVtXCI7XG4gICAgU3ltYm9sS2luZFtTeW1ib2xLaW5kW1wiSW50ZXJmYWNlXCJdID0gMTBdID0gXCJJbnRlcmZhY2VcIjtcbiAgICBTeW1ib2xLaW5kW1N5bWJvbEtpbmRbXCJGdW5jdGlvblwiXSA9IDExXSA9IFwiRnVuY3Rpb25cIjtcbiAgICBTeW1ib2xLaW5kW1N5bWJvbEtpbmRbXCJWYXJpYWJsZVwiXSA9IDEyXSA9IFwiVmFyaWFibGVcIjtcbiAgICBTeW1ib2xLaW5kW1N5bWJvbEtpbmRbXCJDb25zdGFudFwiXSA9IDEzXSA9IFwiQ29uc3RhbnRcIjtcbiAgICBTeW1ib2xLaW5kW1N5bWJvbEtpbmRbXCJTdHJpbmdcIl0gPSAxNF0gPSBcIlN0cmluZ1wiO1xuICAgIFN5bWJvbEtpbmRbU3ltYm9sS2luZFtcIk51bWJlclwiXSA9IDE1XSA9IFwiTnVtYmVyXCI7XG4gICAgU3ltYm9sS2luZFtTeW1ib2xLaW5kW1wiQm9vbGVhblwiXSA9IDE2XSA9IFwiQm9vbGVhblwiO1xuICAgIFN5bWJvbEtpbmRbU3ltYm9sS2luZFtcIkFycmF5XCJdID0gMTddID0gXCJBcnJheVwiO1xuICAgIFN5bWJvbEtpbmRbU3ltYm9sS2luZFtcIk9iamVjdFwiXSA9IDE4XSA9IFwiT2JqZWN0XCI7XG4gICAgU3ltYm9sS2luZFtTeW1ib2xLaW5kW1wiS2V5XCJdID0gMTldID0gXCJLZXlcIjtcbiAgICBTeW1ib2xLaW5kW1N5bWJvbEtpbmRbXCJOdWxsXCJdID0gMjBdID0gXCJOdWxsXCI7XG4gICAgU3ltYm9sS2luZFtTeW1ib2xLaW5kW1wiRW51bU1lbWJlclwiXSA9IDIxXSA9IFwiRW51bU1lbWJlclwiO1xuICAgIFN5bWJvbEtpbmRbU3ltYm9sS2luZFtcIlN0cnVjdFwiXSA9IDIyXSA9IFwiU3RydWN0XCI7XG4gICAgU3ltYm9sS2luZFtTeW1ib2xLaW5kW1wiRXZlbnRcIl0gPSAyM10gPSBcIkV2ZW50XCI7XG4gICAgU3ltYm9sS2luZFtTeW1ib2xLaW5kW1wiT3BlcmF0b3JcIl0gPSAyNF0gPSBcIk9wZXJhdG9yXCI7XG4gICAgU3ltYm9sS2luZFtTeW1ib2xLaW5kW1wiVHlwZVBhcmFtZXRlclwiXSA9IDI1XSA9IFwiVHlwZVBhcmFtZXRlclwiO1xufSkoU3ltYm9sS2luZCB8fCAoU3ltYm9sS2luZCA9IHt9KSk7XG5leHBvcnQgdmFyIFN5bWJvbFRhZztcbihmdW5jdGlvbiAoU3ltYm9sVGFnKSB7XG4gICAgU3ltYm9sVGFnW1N5bWJvbFRhZ1tcIkRlcHJlY2F0ZWRcIl0gPSAxXSA9IFwiRGVwcmVjYXRlZFwiO1xufSkoU3ltYm9sVGFnIHx8IChTeW1ib2xUYWcgPSB7fSkpO1xuLyoqXG4gKiBUaGUga2luZCBvZiBhbmltYXRpb24gaW4gd2hpY2ggdGhlIGVkaXRvcidzIGN1cnNvciBzaG91bGQgYmUgcmVuZGVyZWQuXG4gKi9cbmV4cG9ydCB2YXIgVGV4dEVkaXRvckN1cnNvckJsaW5raW5nU3R5bGU7XG4oZnVuY3Rpb24gKFRleHRFZGl0b3JDdXJzb3JCbGlua2luZ1N0eWxlKSB7XG4gICAgLyoqXG4gICAgICogSGlkZGVuXG4gICAgICovXG4gICAgVGV4dEVkaXRvckN1cnNvckJsaW5raW5nU3R5bGVbVGV4dEVkaXRvckN1cnNvckJsaW5raW5nU3R5bGVbXCJIaWRkZW5cIl0gPSAwXSA9IFwiSGlkZGVuXCI7XG4gICAgLyoqXG4gICAgICogQmxpbmtpbmdcbiAgICAgKi9cbiAgICBUZXh0RWRpdG9yQ3Vyc29yQmxpbmtpbmdTdHlsZVtUZXh0RWRpdG9yQ3Vyc29yQmxpbmtpbmdTdHlsZVtcIkJsaW5rXCJdID0gMV0gPSBcIkJsaW5rXCI7XG4gICAgLyoqXG4gICAgICogQmxpbmtpbmcgd2l0aCBzbW9vdGggZmFkaW5nXG4gICAgICovXG4gICAgVGV4dEVkaXRvckN1cnNvckJsaW5raW5nU3R5bGVbVGV4dEVkaXRvckN1cnNvckJsaW5raW5nU3R5bGVbXCJTbW9vdGhcIl0gPSAyXSA9IFwiU21vb3RoXCI7XG4gICAgLyoqXG4gICAgICogQmxpbmtpbmcgd2l0aCBwcm9sb25nZWQgZmlsbGVkIHN0YXRlIGFuZCBzbW9vdGggZmFkaW5nXG4gICAgICovXG4gICAgVGV4dEVkaXRvckN1cnNvckJsaW5raW5nU3R5bGVbVGV4dEVkaXRvckN1cnNvckJsaW5raW5nU3R5bGVbXCJQaGFzZVwiXSA9IDNdID0gXCJQaGFzZVwiO1xuICAgIC8qKlxuICAgICAqIEV4cGFuZCBjb2xsYXBzZSBhbmltYXRpb24gb24gdGhlIHkgYXhpc1xuICAgICAqL1xuICAgIFRleHRFZGl0b3JDdXJzb3JCbGlua2luZ1N0eWxlW1RleHRFZGl0b3JDdXJzb3JCbGlua2luZ1N0eWxlW1wiRXhwYW5kXCJdID0gNF0gPSBcIkV4cGFuZFwiO1xuICAgIC8qKlxuICAgICAqIE5vLUJsaW5raW5nXG4gICAgICovXG4gICAgVGV4dEVkaXRvckN1cnNvckJsaW5raW5nU3R5bGVbVGV4dEVkaXRvckN1cnNvckJsaW5raW5nU3R5bGVbXCJTb2xpZFwiXSA9IDVdID0gXCJTb2xpZFwiO1xufSkoVGV4dEVkaXRvckN1cnNvckJsaW5raW5nU3R5bGUgfHwgKFRleHRFZGl0b3JDdXJzb3JCbGlua2luZ1N0eWxlID0ge30pKTtcbi8qKlxuICogVGhlIHN0eWxlIGluIHdoaWNoIHRoZSBlZGl0b3IncyBjdXJzb3Igc2hvdWxkIGJlIHJlbmRlcmVkLlxuICovXG5leHBvcnQgdmFyIFRleHRFZGl0b3JDdXJzb3JTdHlsZTtcbihmdW5jdGlvbiAoVGV4dEVkaXRvckN1cnNvclN0eWxlKSB7XG4gICAgLyoqXG4gICAgICogQXMgYSB2ZXJ0aWNhbCBsaW5lIChzaXR0aW5nIGJldHdlZW4gdHdvIGNoYXJhY3RlcnMpLlxuICAgICAqL1xuICAgIFRleHRFZGl0b3JDdXJzb3JTdHlsZVtUZXh0RWRpdG9yQ3Vyc29yU3R5bGVbXCJMaW5lXCJdID0gMV0gPSBcIkxpbmVcIjtcbiAgICAvKipcbiAgICAgKiBBcyBhIGJsb2NrIChzaXR0aW5nIG9uIHRvcCBvZiBhIGNoYXJhY3RlcikuXG4gICAgICovXG4gICAgVGV4dEVkaXRvckN1cnNvclN0eWxlW1RleHRFZGl0b3JDdXJzb3JTdHlsZVtcIkJsb2NrXCJdID0gMl0gPSBcIkJsb2NrXCI7XG4gICAgLyoqXG4gICAgICogQXMgYSBob3Jpem9udGFsIGxpbmUgKHNpdHRpbmcgdW5kZXIgYSBjaGFyYWN0ZXIpLlxuICAgICAqL1xuICAgIFRleHRFZGl0b3JDdXJzb3JTdHlsZVtUZXh0RWRpdG9yQ3Vyc29yU3R5bGVbXCJVbmRlcmxpbmVcIl0gPSAzXSA9IFwiVW5kZXJsaW5lXCI7XG4gICAgLyoqXG4gICAgICogQXMgYSB0aGluIHZlcnRpY2FsIGxpbmUgKHNpdHRpbmcgYmV0d2VlbiB0d28gY2hhcmFjdGVycykuXG4gICAgICovXG4gICAgVGV4dEVkaXRvckN1cnNvclN0eWxlW1RleHRFZGl0b3JDdXJzb3JTdHlsZVtcIkxpbmVUaGluXCJdID0gNF0gPSBcIkxpbmVUaGluXCI7XG4gICAgLyoqXG4gICAgICogQXMgYW4gb3V0bGluZWQgYmxvY2sgKHNpdHRpbmcgb24gdG9wIG9mIGEgY2hhcmFjdGVyKS5cbiAgICAgKi9cbiAgICBUZXh0RWRpdG9yQ3Vyc29yU3R5bGVbVGV4dEVkaXRvckN1cnNvclN0eWxlW1wiQmxvY2tPdXRsaW5lXCJdID0gNV0gPSBcIkJsb2NrT3V0bGluZVwiO1xuICAgIC8qKlxuICAgICAqIEFzIGEgdGhpbiBob3Jpem9udGFsIGxpbmUgKHNpdHRpbmcgdW5kZXIgYSBjaGFyYWN0ZXIpLlxuICAgICAqL1xuICAgIFRleHRFZGl0b3JDdXJzb3JTdHlsZVtUZXh0RWRpdG9yQ3Vyc29yU3R5bGVbXCJVbmRlcmxpbmVUaGluXCJdID0gNl0gPSBcIlVuZGVybGluZVRoaW5cIjtcbn0pKFRleHRFZGl0b3JDdXJzb3JTdHlsZSB8fCAoVGV4dEVkaXRvckN1cnNvclN0eWxlID0ge30pKTtcbi8qKlxuICogRGVzY3JpYmVzIHRoZSBiZWhhdmlvciBvZiBkZWNvcmF0aW9ucyB3aGVuIHR5cGluZy9lZGl0aW5nIG5lYXIgdGhlaXIgZWRnZXMuXG4gKiBOb3RlOiBQbGVhc2UgZG8gbm90IGVkaXQgdGhlIHZhbHVlcywgYXMgdGhleSB2ZXJ5IGNhcmVmdWxseSBtYXRjaCBgRGVjb3JhdGlvblJhbmdlQmVoYXZpb3JgXG4gKi9cbmV4cG9ydCB2YXIgVHJhY2tlZFJhbmdlU3RpY2tpbmVzcztcbihmdW5jdGlvbiAoVHJhY2tlZFJhbmdlU3RpY2tpbmVzcykge1xuICAgIFRyYWNrZWRSYW5nZVN0aWNraW5lc3NbVHJhY2tlZFJhbmdlU3RpY2tpbmVzc1tcIkFsd2F5c0dyb3dzV2hlblR5cGluZ0F0RWRnZXNcIl0gPSAwXSA9IFwiQWx3YXlzR3Jvd3NXaGVuVHlwaW5nQXRFZGdlc1wiO1xuICAgIFRyYWNrZWRSYW5nZVN0aWNraW5lc3NbVHJhY2tlZFJhbmdlU3RpY2tpbmVzc1tcIk5ldmVyR3Jvd3NXaGVuVHlwaW5nQXRFZGdlc1wiXSA9IDFdID0gXCJOZXZlckdyb3dzV2hlblR5cGluZ0F0RWRnZXNcIjtcbiAgICBUcmFja2VkUmFuZ2VTdGlja2luZXNzW1RyYWNrZWRSYW5nZVN0aWNraW5lc3NbXCJHcm93c09ubHlXaGVuVHlwaW5nQmVmb3JlXCJdID0gMl0gPSBcIkdyb3dzT25seVdoZW5UeXBpbmdCZWZvcmVcIjtcbiAgICBUcmFja2VkUmFuZ2VTdGlja2luZXNzW1RyYWNrZWRSYW5nZVN0aWNraW5lc3NbXCJHcm93c09ubHlXaGVuVHlwaW5nQWZ0ZXJcIl0gPSAzXSA9IFwiR3Jvd3NPbmx5V2hlblR5cGluZ0FmdGVyXCI7XG59KShUcmFja2VkUmFuZ2VTdGlja2luZXNzIHx8IChUcmFja2VkUmFuZ2VTdGlja2luZXNzID0ge30pKTtcbi8qKlxuICogRGVzY3JpYmVzIGhvdyB0byBpbmRlbnQgd3JhcHBlZCBsaW5lcy5cbiAqL1xuZXhwb3J0IHZhciBXcmFwcGluZ0luZGVudDtcbihmdW5jdGlvbiAoV3JhcHBpbmdJbmRlbnQpIHtcbiAgICAvKipcbiAgICAgKiBObyBpbmRlbnRhdGlvbiA9PiB3cmFwcGVkIGxpbmVzIGJlZ2luIGF0IGNvbHVtbiAxLlxuICAgICAqL1xuICAgIFdyYXBwaW5nSW5kZW50W1dyYXBwaW5nSW5kZW50W1wiTm9uZVwiXSA9IDBdID0gXCJOb25lXCI7XG4gICAgLyoqXG4gICAgICogU2FtZSA9PiB3cmFwcGVkIGxpbmVzIGdldCB0aGUgc2FtZSBpbmRlbnRhdGlvbiBhcyB0aGUgcGFyZW50LlxuICAgICAqL1xuICAgIFdyYXBwaW5nSW5kZW50W1dyYXBwaW5nSW5kZW50W1wiU2FtZVwiXSA9IDFdID0gXCJTYW1lXCI7XG4gICAgLyoqXG4gICAgICogSW5kZW50ID0+IHdyYXBwZWQgbGluZXMgZ2V0ICsxIGluZGVudGF0aW9uIHRvd2FyZCB0aGUgcGFyZW50LlxuICAgICAqL1xuICAgIFdyYXBwaW5nSW5kZW50W1dyYXBwaW5nSW5kZW50W1wiSW5kZW50XCJdID0gMl0gPSBcIkluZGVudFwiO1xuICAgIC8qKlxuICAgICAqIERlZXBJbmRlbnQgPT4gd3JhcHBlZCBsaW5lcyBnZXQgKzIgaW5kZW50YXRpb24gdG93YXJkIHRoZSBwYXJlbnQuXG4gICAgICovXG4gICAgV3JhcHBpbmdJbmRlbnRbV3JhcHBpbmdJbmRlbnRbXCJEZWVwSW5kZW50XCJdID0gM10gPSBcIkRlZXBJbmRlbnRcIjtcbn0pKFdyYXBwaW5nSW5kZW50IHx8IChXcmFwcGluZ0luZGVudCA9IHt9KSk7XG4iLCAiLyotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAqICBDb3B5cmlnaHQgKGMpIE1pY3Jvc29mdCBDb3Jwb3JhdGlvbi4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqICBMaWNlbnNlZCB1bmRlciB0aGUgTUlUIExpY2Vuc2UuIFNlZSBMaWNlbnNlLnR4dCBpbiB0aGUgcHJvamVjdCByb290IGZvciBsaWNlbnNlIGluZm9ybWF0aW9uLlxuICotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSovXG5pbXBvcnQgeyBDYW5jZWxsYXRpb25Ub2tlblNvdXJjZSB9IGZyb20gJy4uLy4uLy4uL2Jhc2UvY29tbW9uL2NhbmNlbGxhdGlvbi5qcyc7XG5pbXBvcnQgeyBFbWl0dGVyIH0gZnJvbSAnLi4vLi4vLi4vYmFzZS9jb21tb24vZXZlbnQuanMnO1xuaW1wb3J0IHsgS2V5Q2hvcmQgfSBmcm9tICcuLi8uLi8uLi9iYXNlL2NvbW1vbi9rZXlDb2Rlcy5qcyc7XG5pbXBvcnQgeyBVUkkgfSBmcm9tICcuLi8uLi8uLi9iYXNlL2NvbW1vbi91cmkuanMnO1xuaW1wb3J0IHsgUG9zaXRpb24gfSBmcm9tICcuLi9jb3JlL3Bvc2l0aW9uLmpzJztcbmltcG9ydCB7IFJhbmdlIH0gZnJvbSAnLi4vY29yZS9yYW5nZS5qcyc7XG5pbXBvcnQgeyBTZWxlY3Rpb24gfSBmcm9tICcuLi9jb3JlL3NlbGVjdGlvbi5qcyc7XG5pbXBvcnQgeyBUb2tlbiB9IGZyb20gJy4uL2xhbmd1YWdlcy5qcyc7XG5pbXBvcnQgKiBhcyBzdGFuZGFsb25lRW51bXMgZnJvbSAnLi4vc3RhbmRhbG9uZS9zdGFuZGFsb25lRW51bXMuanMnO1xuZXhwb3J0IGNsYXNzIEtleU1vZCB7XG4gICAgc3RhdGljIGNob3JkKGZpcnN0UGFydCwgc2Vjb25kUGFydCkge1xuICAgICAgICByZXR1cm4gS2V5Q2hvcmQoZmlyc3RQYXJ0LCBzZWNvbmRQYXJ0KTtcbiAgICB9XG59XG5LZXlNb2QuQ3RybENtZCA9IDIwNDggLyogQ29uc3RLZXlNb2QuQ3RybENtZCAqLztcbktleU1vZC5TaGlmdCA9IDEwMjQgLyogQ29uc3RLZXlNb2QuU2hpZnQgKi87XG5LZXlNb2QuQWx0ID0gNTEyIC8qIENvbnN0S2V5TW9kLkFsdCAqLztcbktleU1vZC5XaW5DdHJsID0gMjU2IC8qIENvbnN0S2V5TW9kLldpbkN0cmwgKi87XG5leHBvcnQgZnVuY3Rpb24gY3JlYXRlTW9uYWNvQmFzZUFQSSgpIHtcbiAgICByZXR1cm4ge1xuICAgICAgICBlZGl0b3I6IHVuZGVmaW5lZCwgLy8gdW5kZWZpbmVkIG92ZXJyaWRlIGV4cGVjdGVkIGhlcmVcbiAgICAgICAgbGFuZ3VhZ2VzOiB1bmRlZmluZWQsIC8vIHVuZGVmaW5lZCBvdmVycmlkZSBleHBlY3RlZCBoZXJlXG4gICAgICAgIENhbmNlbGxhdGlvblRva2VuU291cmNlOiBDYW5jZWxsYXRpb25Ub2tlblNvdXJjZSxcbiAgICAgICAgRW1pdHRlcjogRW1pdHRlcixcbiAgICAgICAgS2V5Q29kZTogc3RhbmRhbG9uZUVudW1zLktleUNvZGUsXG4gICAgICAgIEtleU1vZDogS2V5TW9kLFxuICAgICAgICBQb3NpdGlvbjogUG9zaXRpb24sXG4gICAgICAgIFJhbmdlOiBSYW5nZSxcbiAgICAgICAgU2VsZWN0aW9uOiBTZWxlY3Rpb24sXG4gICAgICAgIFNlbGVjdGlvbkRpcmVjdGlvbjogc3RhbmRhbG9uZUVudW1zLlNlbGVjdGlvbkRpcmVjdGlvbixcbiAgICAgICAgTWFya2VyU2V2ZXJpdHk6IHN0YW5kYWxvbmVFbnVtcy5NYXJrZXJTZXZlcml0eSxcbiAgICAgICAgTWFya2VyVGFnOiBzdGFuZGFsb25lRW51bXMuTWFya2VyVGFnLFxuICAgICAgICBVcmk6IFVSSSxcbiAgICAgICAgVG9rZW46IFRva2VuXG4gICAgfTtcbn1cbiIsICIvKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICogIENvcHlyaWdodCAoYykgTWljcm9zb2Z0IENvcnBvcmF0aW9uLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICogIExpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgTGljZW5zZS4gU2VlIExpY2Vuc2UudHh0IGluIHRoZSBwcm9qZWN0IHJvb3QgZm9yIGxpY2Vuc2UgaW5mb3JtYXRpb24uXG4gKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKi9cbnZhciBfYSwgX2I7XG5jbGFzcyBSZXNvdXJjZU1hcEVudHJ5IHtcbiAgICBjb25zdHJ1Y3Rvcih1cmksIHZhbHVlKSB7XG4gICAgICAgIHRoaXMudXJpID0gdXJpO1xuICAgICAgICB0aGlzLnZhbHVlID0gdmFsdWU7XG4gICAgfVxufVxuZnVuY3Rpb24gaXNFbnRyaWVzKGFyZykge1xuICAgIHJldHVybiBBcnJheS5pc0FycmF5KGFyZyk7XG59XG5leHBvcnQgY2xhc3MgUmVzb3VyY2VNYXAge1xuICAgIGNvbnN0cnVjdG9yKGFyZywgdG9LZXkpIHtcbiAgICAgICAgdGhpc1tfYV0gPSAnUmVzb3VyY2VNYXAnO1xuICAgICAgICBpZiAoYXJnIGluc3RhbmNlb2YgUmVzb3VyY2VNYXApIHtcbiAgICAgICAgICAgIHRoaXMubWFwID0gbmV3IE1hcChhcmcubWFwKTtcbiAgICAgICAgICAgIHRoaXMudG9LZXkgPSB0b0tleSAhPT0gbnVsbCAmJiB0b0tleSAhPT0gdm9pZCAwID8gdG9LZXkgOiBSZXNvdXJjZU1hcC5kZWZhdWx0VG9LZXk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAoaXNFbnRyaWVzKGFyZykpIHtcbiAgICAgICAgICAgIHRoaXMubWFwID0gbmV3IE1hcCgpO1xuICAgICAgICAgICAgdGhpcy50b0tleSA9IHRvS2V5ICE9PSBudWxsICYmIHRvS2V5ICE9PSB2b2lkIDAgPyB0b0tleSA6IFJlc291cmNlTWFwLmRlZmF1bHRUb0tleTtcbiAgICAgICAgICAgIGZvciAoY29uc3QgW3Jlc291cmNlLCB2YWx1ZV0gb2YgYXJnKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5zZXQocmVzb3VyY2UsIHZhbHVlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMubWFwID0gbmV3IE1hcCgpO1xuICAgICAgICAgICAgdGhpcy50b0tleSA9IGFyZyAhPT0gbnVsbCAmJiBhcmcgIT09IHZvaWQgMCA/IGFyZyA6IFJlc291cmNlTWFwLmRlZmF1bHRUb0tleTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBzZXQocmVzb3VyY2UsIHZhbHVlKSB7XG4gICAgICAgIHRoaXMubWFwLnNldCh0aGlzLnRvS2V5KHJlc291cmNlKSwgbmV3IFJlc291cmNlTWFwRW50cnkocmVzb3VyY2UsIHZhbHVlKSk7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cbiAgICBnZXQocmVzb3VyY2UpIHtcbiAgICAgICAgdmFyIF9jO1xuICAgICAgICByZXR1cm4gKF9jID0gdGhpcy5tYXAuZ2V0KHRoaXMudG9LZXkocmVzb3VyY2UpKSkgPT09IG51bGwgfHwgX2MgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9jLnZhbHVlO1xuICAgIH1cbiAgICBoYXMocmVzb3VyY2UpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMubWFwLmhhcyh0aGlzLnRvS2V5KHJlc291cmNlKSk7XG4gICAgfVxuICAgIGdldCBzaXplKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5tYXAuc2l6ZTtcbiAgICB9XG4gICAgY2xlYXIoKSB7XG4gICAgICAgIHRoaXMubWFwLmNsZWFyKCk7XG4gICAgfVxuICAgIGRlbGV0ZShyZXNvdXJjZSkge1xuICAgICAgICByZXR1cm4gdGhpcy5tYXAuZGVsZXRlKHRoaXMudG9LZXkocmVzb3VyY2UpKTtcbiAgICB9XG4gICAgZm9yRWFjaChjbGIsIHRoaXNBcmcpIHtcbiAgICAgICAgaWYgKHR5cGVvZiB0aGlzQXJnICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgICAgICAgY2xiID0gY2xiLmJpbmQodGhpc0FyZyk7XG4gICAgICAgIH1cbiAgICAgICAgZm9yIChjb25zdCBbXywgZW50cnldIG9mIHRoaXMubWFwKSB7XG4gICAgICAgICAgICBjbGIoZW50cnkudmFsdWUsIGVudHJ5LnVyaSwgdGhpcyk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgKnZhbHVlcygpIHtcbiAgICAgICAgZm9yIChjb25zdCBlbnRyeSBvZiB0aGlzLm1hcC52YWx1ZXMoKSkge1xuICAgICAgICAgICAgeWllbGQgZW50cnkudmFsdWU7XG4gICAgICAgIH1cbiAgICB9XG4gICAgKmtleXMoKSB7XG4gICAgICAgIGZvciAoY29uc3QgZW50cnkgb2YgdGhpcy5tYXAudmFsdWVzKCkpIHtcbiAgICAgICAgICAgIHlpZWxkIGVudHJ5LnVyaTtcbiAgICAgICAgfVxuICAgIH1cbiAgICAqZW50cmllcygpIHtcbiAgICAgICAgZm9yIChjb25zdCBlbnRyeSBvZiB0aGlzLm1hcC52YWx1ZXMoKSkge1xuICAgICAgICAgICAgeWllbGQgW2VudHJ5LnVyaSwgZW50cnkudmFsdWVdO1xuICAgICAgICB9XG4gICAgfVxuICAgICpbKF9hID0gU3ltYm9sLnRvU3RyaW5nVGFnLCBTeW1ib2wuaXRlcmF0b3IpXSgpIHtcbiAgICAgICAgZm9yIChjb25zdCBbLCBlbnRyeV0gb2YgdGhpcy5tYXApIHtcbiAgICAgICAgICAgIHlpZWxkIFtlbnRyeS51cmksIGVudHJ5LnZhbHVlXTtcbiAgICAgICAgfVxuICAgIH1cbn1cblJlc291cmNlTWFwLmRlZmF1bHRUb0tleSA9IChyZXNvdXJjZSkgPT4gcmVzb3VyY2UudG9TdHJpbmcoKTtcbmV4cG9ydCBjbGFzcyBMaW5rZWRNYXAge1xuICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICB0aGlzW19iXSA9ICdMaW5rZWRNYXAnO1xuICAgICAgICB0aGlzLl9tYXAgPSBuZXcgTWFwKCk7XG4gICAgICAgIHRoaXMuX2hlYWQgPSB1bmRlZmluZWQ7XG4gICAgICAgIHRoaXMuX3RhaWwgPSB1bmRlZmluZWQ7XG4gICAgICAgIHRoaXMuX3NpemUgPSAwO1xuICAgICAgICB0aGlzLl9zdGF0ZSA9IDA7XG4gICAgfVxuICAgIGNsZWFyKCkge1xuICAgICAgICB0aGlzLl9tYXAuY2xlYXIoKTtcbiAgICAgICAgdGhpcy5faGVhZCA9IHVuZGVmaW5lZDtcbiAgICAgICAgdGhpcy5fdGFpbCA9IHVuZGVmaW5lZDtcbiAgICAgICAgdGhpcy5fc2l6ZSA9IDA7XG4gICAgICAgIHRoaXMuX3N0YXRlKys7XG4gICAgfVxuICAgIGlzRW1wdHkoKSB7XG4gICAgICAgIHJldHVybiAhdGhpcy5faGVhZCAmJiAhdGhpcy5fdGFpbDtcbiAgICB9XG4gICAgZ2V0IHNpemUoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9zaXplO1xuICAgIH1cbiAgICBnZXQgZmlyc3QoKSB7XG4gICAgICAgIHZhciBfYztcbiAgICAgICAgcmV0dXJuIChfYyA9IHRoaXMuX2hlYWQpID09PSBudWxsIHx8IF9jID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYy52YWx1ZTtcbiAgICB9XG4gICAgZ2V0IGxhc3QoKSB7XG4gICAgICAgIHZhciBfYztcbiAgICAgICAgcmV0dXJuIChfYyA9IHRoaXMuX3RhaWwpID09PSBudWxsIHx8IF9jID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYy52YWx1ZTtcbiAgICB9XG4gICAgaGFzKGtleSkge1xuICAgICAgICByZXR1cm4gdGhpcy5fbWFwLmhhcyhrZXkpO1xuICAgIH1cbiAgICBnZXQoa2V5LCB0b3VjaCA9IDAgLyogVG91Y2guTm9uZSAqLykge1xuICAgICAgICBjb25zdCBpdGVtID0gdGhpcy5fbWFwLmdldChrZXkpO1xuICAgICAgICBpZiAoIWl0ZW0pIHtcbiAgICAgICAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHRvdWNoICE9PSAwIC8qIFRvdWNoLk5vbmUgKi8pIHtcbiAgICAgICAgICAgIHRoaXMudG91Y2goaXRlbSwgdG91Y2gpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBpdGVtLnZhbHVlO1xuICAgIH1cbiAgICBzZXQoa2V5LCB2YWx1ZSwgdG91Y2ggPSAwIC8qIFRvdWNoLk5vbmUgKi8pIHtcbiAgICAgICAgbGV0IGl0ZW0gPSB0aGlzLl9tYXAuZ2V0KGtleSk7XG4gICAgICAgIGlmIChpdGVtKSB7XG4gICAgICAgICAgICBpdGVtLnZhbHVlID0gdmFsdWU7XG4gICAgICAgICAgICBpZiAodG91Y2ggIT09IDAgLyogVG91Y2guTm9uZSAqLykge1xuICAgICAgICAgICAgICAgIHRoaXMudG91Y2goaXRlbSwgdG91Y2gpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgaXRlbSA9IHsga2V5LCB2YWx1ZSwgbmV4dDogdW5kZWZpbmVkLCBwcmV2aW91czogdW5kZWZpbmVkIH07XG4gICAgICAgICAgICBzd2l0Y2ggKHRvdWNoKSB7XG4gICAgICAgICAgICAgICAgY2FzZSAwIC8qIFRvdWNoLk5vbmUgKi86XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuYWRkSXRlbUxhc3QoaXRlbSk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgMSAvKiBUb3VjaC5Bc09sZCAqLzpcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5hZGRJdGVtRmlyc3QoaXRlbSk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgMiAvKiBUb3VjaC5Bc05ldyAqLzpcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5hZGRJdGVtTGFzdChpdGVtKTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5hZGRJdGVtTGFzdChpdGVtKTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0aGlzLl9tYXAuc2V0KGtleSwgaXRlbSk7XG4gICAgICAgICAgICB0aGlzLl9zaXplKys7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuICAgIGRlbGV0ZShrZXkpIHtcbiAgICAgICAgcmV0dXJuICEhdGhpcy5yZW1vdmUoa2V5KTtcbiAgICB9XG4gICAgcmVtb3ZlKGtleSkge1xuICAgICAgICBjb25zdCBpdGVtID0gdGhpcy5fbWFwLmdldChrZXkpO1xuICAgICAgICBpZiAoIWl0ZW0pIHtcbiAgICAgICAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5fbWFwLmRlbGV0ZShrZXkpO1xuICAgICAgICB0aGlzLnJlbW92ZUl0ZW0oaXRlbSk7XG4gICAgICAgIHRoaXMuX3NpemUtLTtcbiAgICAgICAgcmV0dXJuIGl0ZW0udmFsdWU7XG4gICAgfVxuICAgIHNoaWZ0KCkge1xuICAgICAgICBpZiAoIXRoaXMuX2hlYWQgJiYgIXRoaXMuX3RhaWwpIHtcbiAgICAgICAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCF0aGlzLl9oZWFkIHx8ICF0aGlzLl90YWlsKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ0ludmFsaWQgbGlzdCcpO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IGl0ZW0gPSB0aGlzLl9oZWFkO1xuICAgICAgICB0aGlzLl9tYXAuZGVsZXRlKGl0ZW0ua2V5KTtcbiAgICAgICAgdGhpcy5yZW1vdmVJdGVtKGl0ZW0pO1xuICAgICAgICB0aGlzLl9zaXplLS07XG4gICAgICAgIHJldHVybiBpdGVtLnZhbHVlO1xuICAgIH1cbiAgICBmb3JFYWNoKGNhbGxiYWNrZm4sIHRoaXNBcmcpIHtcbiAgICAgICAgY29uc3Qgc3RhdGUgPSB0aGlzLl9zdGF0ZTtcbiAgICAgICAgbGV0IGN1cnJlbnQgPSB0aGlzLl9oZWFkO1xuICAgICAgICB3aGlsZSAoY3VycmVudCkge1xuICAgICAgICAgICAgaWYgKHRoaXNBcmcpIHtcbiAgICAgICAgICAgICAgICBjYWxsYmFja2ZuLmJpbmQodGhpc0FyZykoY3VycmVudC52YWx1ZSwgY3VycmVudC5rZXksIHRoaXMpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgY2FsbGJhY2tmbihjdXJyZW50LnZhbHVlLCBjdXJyZW50LmtleSwgdGhpcyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAodGhpcy5fc3RhdGUgIT09IHN0YXRlKSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBMaW5rZWRNYXAgZ290IG1vZGlmaWVkIGR1cmluZyBpdGVyYXRpb24uYCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjdXJyZW50ID0gY3VycmVudC5uZXh0O1xuICAgICAgICB9XG4gICAgfVxuICAgIGtleXMoKSB7XG4gICAgICAgIGNvbnN0IG1hcCA9IHRoaXM7XG4gICAgICAgIGNvbnN0IHN0YXRlID0gdGhpcy5fc3RhdGU7XG4gICAgICAgIGxldCBjdXJyZW50ID0gdGhpcy5faGVhZDtcbiAgICAgICAgY29uc3QgaXRlcmF0b3IgPSB7XG4gICAgICAgICAgICBbU3ltYm9sLml0ZXJhdG9yXSgpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gaXRlcmF0b3I7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgbmV4dCgpIHtcbiAgICAgICAgICAgICAgICBpZiAobWFwLl9zdGF0ZSAhPT0gc3RhdGUpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBMaW5rZWRNYXAgZ290IG1vZGlmaWVkIGR1cmluZyBpdGVyYXRpb24uYCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmIChjdXJyZW50KSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHJlc3VsdCA9IHsgdmFsdWU6IGN1cnJlbnQua2V5LCBkb25lOiBmYWxzZSB9O1xuICAgICAgICAgICAgICAgICAgICBjdXJyZW50ID0gY3VycmVudC5uZXh0O1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHsgdmFsdWU6IHVuZGVmaW5lZCwgZG9uZTogdHJ1ZSB9O1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICAgICAgcmV0dXJuIGl0ZXJhdG9yO1xuICAgIH1cbiAgICB2YWx1ZXMoKSB7XG4gICAgICAgIGNvbnN0IG1hcCA9IHRoaXM7XG4gICAgICAgIGNvbnN0IHN0YXRlID0gdGhpcy5fc3RhdGU7XG4gICAgICAgIGxldCBjdXJyZW50ID0gdGhpcy5faGVhZDtcbiAgICAgICAgY29uc3QgaXRlcmF0b3IgPSB7XG4gICAgICAgICAgICBbU3ltYm9sLml0ZXJhdG9yXSgpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gaXRlcmF0b3I7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgbmV4dCgpIHtcbiAgICAgICAgICAgICAgICBpZiAobWFwLl9zdGF0ZSAhPT0gc3RhdGUpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBMaW5rZWRNYXAgZ290IG1vZGlmaWVkIGR1cmluZyBpdGVyYXRpb24uYCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmIChjdXJyZW50KSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHJlc3VsdCA9IHsgdmFsdWU6IGN1cnJlbnQudmFsdWUsIGRvbmU6IGZhbHNlIH07XG4gICAgICAgICAgICAgICAgICAgIGN1cnJlbnQgPSBjdXJyZW50Lm5leHQ7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4geyB2YWx1ZTogdW5kZWZpbmVkLCBkb25lOiB0cnVlIH07XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuICAgICAgICByZXR1cm4gaXRlcmF0b3I7XG4gICAgfVxuICAgIGVudHJpZXMoKSB7XG4gICAgICAgIGNvbnN0IG1hcCA9IHRoaXM7XG4gICAgICAgIGNvbnN0IHN0YXRlID0gdGhpcy5fc3RhdGU7XG4gICAgICAgIGxldCBjdXJyZW50ID0gdGhpcy5faGVhZDtcbiAgICAgICAgY29uc3QgaXRlcmF0b3IgPSB7XG4gICAgICAgICAgICBbU3ltYm9sLml0ZXJhdG9yXSgpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gaXRlcmF0b3I7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgbmV4dCgpIHtcbiAgICAgICAgICAgICAgICBpZiAobWFwLl9zdGF0ZSAhPT0gc3RhdGUpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBMaW5rZWRNYXAgZ290IG1vZGlmaWVkIGR1cmluZyBpdGVyYXRpb24uYCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmIChjdXJyZW50KSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHJlc3VsdCA9IHsgdmFsdWU6IFtjdXJyZW50LmtleSwgY3VycmVudC52YWx1ZV0sIGRvbmU6IGZhbHNlIH07XG4gICAgICAgICAgICAgICAgICAgIGN1cnJlbnQgPSBjdXJyZW50Lm5leHQ7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4geyB2YWx1ZTogdW5kZWZpbmVkLCBkb25lOiB0cnVlIH07XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuICAgICAgICByZXR1cm4gaXRlcmF0b3I7XG4gICAgfVxuICAgIFsoX2IgPSBTeW1ib2wudG9TdHJpbmdUYWcsIFN5bWJvbC5pdGVyYXRvcildKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5lbnRyaWVzKCk7XG4gICAgfVxuICAgIHRyaW1PbGQobmV3U2l6ZSkge1xuICAgICAgICBpZiAobmV3U2l6ZSA+PSB0aGlzLnNpemUpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBpZiAobmV3U2l6ZSA9PT0gMCkge1xuICAgICAgICAgICAgdGhpcy5jbGVhcigpO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGxldCBjdXJyZW50ID0gdGhpcy5faGVhZDtcbiAgICAgICAgbGV0IGN1cnJlbnRTaXplID0gdGhpcy5zaXplO1xuICAgICAgICB3aGlsZSAoY3VycmVudCAmJiBjdXJyZW50U2l6ZSA+IG5ld1NpemUpIHtcbiAgICAgICAgICAgIHRoaXMuX21hcC5kZWxldGUoY3VycmVudC5rZXkpO1xuICAgICAgICAgICAgY3VycmVudCA9IGN1cnJlbnQubmV4dDtcbiAgICAgICAgICAgIGN1cnJlbnRTaXplLS07XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5faGVhZCA9IGN1cnJlbnQ7XG4gICAgICAgIHRoaXMuX3NpemUgPSBjdXJyZW50U2l6ZTtcbiAgICAgICAgaWYgKGN1cnJlbnQpIHtcbiAgICAgICAgICAgIGN1cnJlbnQucHJldmlvdXMgPSB1bmRlZmluZWQ7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5fc3RhdGUrKztcbiAgICB9XG4gICAgdHJpbU5ldyhuZXdTaXplKSB7XG4gICAgICAgIGlmIChuZXdTaXplID49IHRoaXMuc2l6ZSkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGlmIChuZXdTaXplID09PSAwKSB7XG4gICAgICAgICAgICB0aGlzLmNsZWFyKCk7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgbGV0IGN1cnJlbnQgPSB0aGlzLl90YWlsO1xuICAgICAgICBsZXQgY3VycmVudFNpemUgPSB0aGlzLnNpemU7XG4gICAgICAgIHdoaWxlIChjdXJyZW50ICYmIGN1cnJlbnRTaXplID4gbmV3U2l6ZSkge1xuICAgICAgICAgICAgdGhpcy5fbWFwLmRlbGV0ZShjdXJyZW50LmtleSk7XG4gICAgICAgICAgICBjdXJyZW50ID0gY3VycmVudC5wcmV2aW91cztcbiAgICAgICAgICAgIGN1cnJlbnRTaXplLS07XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5fdGFpbCA9IGN1cnJlbnQ7XG4gICAgICAgIHRoaXMuX3NpemUgPSBjdXJyZW50U2l6ZTtcbiAgICAgICAgaWYgKGN1cnJlbnQpIHtcbiAgICAgICAgICAgIGN1cnJlbnQubmV4dCA9IHVuZGVmaW5lZDtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLl9zdGF0ZSsrO1xuICAgIH1cbiAgICBhZGRJdGVtRmlyc3QoaXRlbSkge1xuICAgICAgICAvLyBGaXJzdCB0aW1lIEluc2VydFxuICAgICAgICBpZiAoIXRoaXMuX2hlYWQgJiYgIXRoaXMuX3RhaWwpIHtcbiAgICAgICAgICAgIHRoaXMuX3RhaWwgPSBpdGVtO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKCF0aGlzLl9oZWFkKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ0ludmFsaWQgbGlzdCcpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgaXRlbS5uZXh0ID0gdGhpcy5faGVhZDtcbiAgICAgICAgICAgIHRoaXMuX2hlYWQucHJldmlvdXMgPSBpdGVtO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuX2hlYWQgPSBpdGVtO1xuICAgICAgICB0aGlzLl9zdGF0ZSsrO1xuICAgIH1cbiAgICBhZGRJdGVtTGFzdChpdGVtKSB7XG4gICAgICAgIC8vIEZpcnN0IHRpbWUgSW5zZXJ0XG4gICAgICAgIGlmICghdGhpcy5faGVhZCAmJiAhdGhpcy5fdGFpbCkge1xuICAgICAgICAgICAgdGhpcy5faGVhZCA9IGl0ZW07XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAoIXRoaXMuX3RhaWwpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignSW52YWxpZCBsaXN0Jyk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBpdGVtLnByZXZpb3VzID0gdGhpcy5fdGFpbDtcbiAgICAgICAgICAgIHRoaXMuX3RhaWwubmV4dCA9IGl0ZW07XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5fdGFpbCA9IGl0ZW07XG4gICAgICAgIHRoaXMuX3N0YXRlKys7XG4gICAgfVxuICAgIHJlbW92ZUl0ZW0oaXRlbSkge1xuICAgICAgICBpZiAoaXRlbSA9PT0gdGhpcy5faGVhZCAmJiBpdGVtID09PSB0aGlzLl90YWlsKSB7XG4gICAgICAgICAgICB0aGlzLl9oZWFkID0gdW5kZWZpbmVkO1xuICAgICAgICAgICAgdGhpcy5fdGFpbCA9IHVuZGVmaW5lZDtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChpdGVtID09PSB0aGlzLl9oZWFkKSB7XG4gICAgICAgICAgICAvLyBUaGlzIGNhbiBvbmx5IGhhcHBlbiBpZiBzaXplID09PSAxIHdoaWNoIGlzIGhhbmRsZWRcbiAgICAgICAgICAgIC8vIGJ5IHRoZSBjYXNlIGFib3ZlLlxuICAgICAgICAgICAgaWYgKCFpdGVtLm5leHQpIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ0ludmFsaWQgbGlzdCcpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaXRlbS5uZXh0LnByZXZpb3VzID0gdW5kZWZpbmVkO1xuICAgICAgICAgICAgdGhpcy5faGVhZCA9IGl0ZW0ubmV4dDtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChpdGVtID09PSB0aGlzLl90YWlsKSB7XG4gICAgICAgICAgICAvLyBUaGlzIGNhbiBvbmx5IGhhcHBlbiBpZiBzaXplID09PSAxIHdoaWNoIGlzIGhhbmRsZWRcbiAgICAgICAgICAgIC8vIGJ5IHRoZSBjYXNlIGFib3ZlLlxuICAgICAgICAgICAgaWYgKCFpdGVtLnByZXZpb3VzKSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdJbnZhbGlkIGxpc3QnKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGl0ZW0ucHJldmlvdXMubmV4dCA9IHVuZGVmaW5lZDtcbiAgICAgICAgICAgIHRoaXMuX3RhaWwgPSBpdGVtLnByZXZpb3VzO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgY29uc3QgbmV4dCA9IGl0ZW0ubmV4dDtcbiAgICAgICAgICAgIGNvbnN0IHByZXZpb3VzID0gaXRlbS5wcmV2aW91cztcbiAgICAgICAgICAgIGlmICghbmV4dCB8fCAhcHJldmlvdXMpIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ0ludmFsaWQgbGlzdCcpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgbmV4dC5wcmV2aW91cyA9IHByZXZpb3VzO1xuICAgICAgICAgICAgcHJldmlvdXMubmV4dCA9IG5leHQ7XG4gICAgICAgIH1cbiAgICAgICAgaXRlbS5uZXh0ID0gdW5kZWZpbmVkO1xuICAgICAgICBpdGVtLnByZXZpb3VzID0gdW5kZWZpbmVkO1xuICAgICAgICB0aGlzLl9zdGF0ZSsrO1xuICAgIH1cbiAgICB0b3VjaChpdGVtLCB0b3VjaCkge1xuICAgICAgICBpZiAoIXRoaXMuX2hlYWQgfHwgIXRoaXMuX3RhaWwpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignSW52YWxpZCBsaXN0Jyk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCh0b3VjaCAhPT0gMSAvKiBUb3VjaC5Bc09sZCAqLyAmJiB0b3VjaCAhPT0gMiAvKiBUb3VjaC5Bc05ldyAqLykpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBpZiAodG91Y2ggPT09IDEgLyogVG91Y2guQXNPbGQgKi8pIHtcbiAgICAgICAgICAgIGlmIChpdGVtID09PSB0aGlzLl9oZWFkKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY29uc3QgbmV4dCA9IGl0ZW0ubmV4dDtcbiAgICAgICAgICAgIGNvbnN0IHByZXZpb3VzID0gaXRlbS5wcmV2aW91cztcbiAgICAgICAgICAgIC8vIFVubGluayB0aGUgaXRlbVxuICAgICAgICAgICAgaWYgKGl0ZW0gPT09IHRoaXMuX3RhaWwpIHtcbiAgICAgICAgICAgICAgICAvLyBwcmV2aW91cyBtdXN0IGJlIGRlZmluZWQgc2luY2UgaXRlbSB3YXMgbm90IGhlYWQgYnV0IGlzIHRhaWxcbiAgICAgICAgICAgICAgICAvLyBTbyB0aGVyZSBhcmUgbW9yZSB0aGFuIG9uIGl0ZW0gaW4gdGhlIG1hcFxuICAgICAgICAgICAgICAgIHByZXZpb3VzLm5leHQgPSB1bmRlZmluZWQ7XG4gICAgICAgICAgICAgICAgdGhpcy5fdGFpbCA9IHByZXZpb3VzO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgLy8gQm90aCBuZXh0IGFuZCBwcmV2aW91cyBhcmUgbm90IHVuZGVmaW5lZCBzaW5jZSBpdGVtIHdhcyBuZWl0aGVyIGhlYWQgbm9yIHRhaWwuXG4gICAgICAgICAgICAgICAgbmV4dC5wcmV2aW91cyA9IHByZXZpb3VzO1xuICAgICAgICAgICAgICAgIHByZXZpb3VzLm5leHQgPSBuZXh0O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLy8gSW5zZXJ0IHRoZSBub2RlIGF0IGhlYWRcbiAgICAgICAgICAgIGl0ZW0ucHJldmlvdXMgPSB1bmRlZmluZWQ7XG4gICAgICAgICAgICBpdGVtLm5leHQgPSB0aGlzLl9oZWFkO1xuICAgICAgICAgICAgdGhpcy5faGVhZC5wcmV2aW91cyA9IGl0ZW07XG4gICAgICAgICAgICB0aGlzLl9oZWFkID0gaXRlbTtcbiAgICAgICAgICAgIHRoaXMuX3N0YXRlKys7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAodG91Y2ggPT09IDIgLyogVG91Y2guQXNOZXcgKi8pIHtcbiAgICAgICAgICAgIGlmIChpdGVtID09PSB0aGlzLl90YWlsKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY29uc3QgbmV4dCA9IGl0ZW0ubmV4dDtcbiAgICAgICAgICAgIGNvbnN0IHByZXZpb3VzID0gaXRlbS5wcmV2aW91cztcbiAgICAgICAgICAgIC8vIFVubGluayB0aGUgaXRlbS5cbiAgICAgICAgICAgIGlmIChpdGVtID09PSB0aGlzLl9oZWFkKSB7XG4gICAgICAgICAgICAgICAgLy8gbmV4dCBtdXN0IGJlIGRlZmluZWQgc2luY2UgaXRlbSB3YXMgbm90IHRhaWwgYnV0IGlzIGhlYWRcbiAgICAgICAgICAgICAgICAvLyBTbyB0aGVyZSBhcmUgbW9yZSB0aGFuIG9uIGl0ZW0gaW4gdGhlIG1hcFxuICAgICAgICAgICAgICAgIG5leHQucHJldmlvdXMgPSB1bmRlZmluZWQ7XG4gICAgICAgICAgICAgICAgdGhpcy5faGVhZCA9IG5leHQ7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAvLyBCb3RoIG5leHQgYW5kIHByZXZpb3VzIGFyZSBub3QgdW5kZWZpbmVkIHNpbmNlIGl0ZW0gd2FzIG5laXRoZXIgaGVhZCBub3IgdGFpbC5cbiAgICAgICAgICAgICAgICBuZXh0LnByZXZpb3VzID0gcHJldmlvdXM7XG4gICAgICAgICAgICAgICAgcHJldmlvdXMubmV4dCA9IG5leHQ7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpdGVtLm5leHQgPSB1bmRlZmluZWQ7XG4gICAgICAgICAgICBpdGVtLnByZXZpb3VzID0gdGhpcy5fdGFpbDtcbiAgICAgICAgICAgIHRoaXMuX3RhaWwubmV4dCA9IGl0ZW07XG4gICAgICAgICAgICB0aGlzLl90YWlsID0gaXRlbTtcbiAgICAgICAgICAgIHRoaXMuX3N0YXRlKys7XG4gICAgICAgIH1cbiAgICB9XG4gICAgdG9KU09OKCkge1xuICAgICAgICBjb25zdCBkYXRhID0gW107XG4gICAgICAgIHRoaXMuZm9yRWFjaCgodmFsdWUsIGtleSkgPT4ge1xuICAgICAgICAgICAgZGF0YS5wdXNoKFtrZXksIHZhbHVlXSk7XG4gICAgICAgIH0pO1xuICAgICAgICByZXR1cm4gZGF0YTtcbiAgICB9XG4gICAgZnJvbUpTT04oZGF0YSkge1xuICAgICAgICB0aGlzLmNsZWFyKCk7XG4gICAgICAgIGZvciAoY29uc3QgW2tleSwgdmFsdWVdIG9mIGRhdGEpIHtcbiAgICAgICAgICAgIHRoaXMuc2V0KGtleSwgdmFsdWUpO1xuICAgICAgICB9XG4gICAgfVxufVxuY2xhc3MgQ2FjaGUgZXh0ZW5kcyBMaW5rZWRNYXAge1xuICAgIGNvbnN0cnVjdG9yKGxpbWl0LCByYXRpbyA9IDEpIHtcbiAgICAgICAgc3VwZXIoKTtcbiAgICAgICAgdGhpcy5fbGltaXQgPSBsaW1pdDtcbiAgICAgICAgdGhpcy5fcmF0aW8gPSBNYXRoLm1pbihNYXRoLm1heCgwLCByYXRpbyksIDEpO1xuICAgIH1cbiAgICBnZXQgbGltaXQoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9saW1pdDtcbiAgICB9XG4gICAgc2V0IGxpbWl0KGxpbWl0KSB7XG4gICAgICAgIHRoaXMuX2xpbWl0ID0gbGltaXQ7XG4gICAgICAgIHRoaXMuY2hlY2tUcmltKCk7XG4gICAgfVxuICAgIGdldChrZXksIHRvdWNoID0gMiAvKiBUb3VjaC5Bc05ldyAqLykge1xuICAgICAgICByZXR1cm4gc3VwZXIuZ2V0KGtleSwgdG91Y2gpO1xuICAgIH1cbiAgICBwZWVrKGtleSkge1xuICAgICAgICByZXR1cm4gc3VwZXIuZ2V0KGtleSwgMCAvKiBUb3VjaC5Ob25lICovKTtcbiAgICB9XG4gICAgc2V0KGtleSwgdmFsdWUpIHtcbiAgICAgICAgc3VwZXIuc2V0KGtleSwgdmFsdWUsIDIgLyogVG91Y2guQXNOZXcgKi8pO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG4gICAgY2hlY2tUcmltKCkge1xuICAgICAgICBpZiAodGhpcy5zaXplID4gdGhpcy5fbGltaXQpIHtcbiAgICAgICAgICAgIHRoaXMudHJpbShNYXRoLnJvdW5kKHRoaXMuX2xpbWl0ICogdGhpcy5fcmF0aW8pKTtcbiAgICAgICAgfVxuICAgIH1cbn1cbmV4cG9ydCBjbGFzcyBMUlVDYWNoZSBleHRlbmRzIENhY2hlIHtcbiAgICBjb25zdHJ1Y3RvcihsaW1pdCwgcmF0aW8gPSAxKSB7XG4gICAgICAgIHN1cGVyKGxpbWl0LCByYXRpbyk7XG4gICAgfVxuICAgIHRyaW0obmV3U2l6ZSkge1xuICAgICAgICB0aGlzLnRyaW1PbGQobmV3U2l6ZSk7XG4gICAgfVxuICAgIHNldChrZXksIHZhbHVlKSB7XG4gICAgICAgIHN1cGVyLnNldChrZXksIHZhbHVlKTtcbiAgICAgICAgdGhpcy5jaGVja1RyaW0oKTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxufVxuLyoqXG4gKiBBIG1hcCB0aGF0IGFsbG93cyBhY2Nlc3MgYm90aCBieSBrZXlzIGFuZCB2YWx1ZXMuXG4gKiAqKk5PVEUqKjogdmFsdWVzIG5lZWQgdG8gYmUgdW5pcXVlLlxuICovXG5leHBvcnQgY2xhc3MgQmlkaXJlY3Rpb25hbE1hcCB7XG4gICAgY29uc3RydWN0b3IoZW50cmllcykge1xuICAgICAgICB0aGlzLl9tMSA9IG5ldyBNYXAoKTtcbiAgICAgICAgdGhpcy5fbTIgPSBuZXcgTWFwKCk7XG4gICAgICAgIGlmIChlbnRyaWVzKSB7XG4gICAgICAgICAgICBmb3IgKGNvbnN0IFtrZXksIHZhbHVlXSBvZiBlbnRyaWVzKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5zZXQoa2V5LCB2YWx1ZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG4gICAgY2xlYXIoKSB7XG4gICAgICAgIHRoaXMuX20xLmNsZWFyKCk7XG4gICAgICAgIHRoaXMuX20yLmNsZWFyKCk7XG4gICAgfVxuICAgIHNldChrZXksIHZhbHVlKSB7XG4gICAgICAgIHRoaXMuX20xLnNldChrZXksIHZhbHVlKTtcbiAgICAgICAgdGhpcy5fbTIuc2V0KHZhbHVlLCBrZXkpO1xuICAgIH1cbiAgICBnZXQoa2V5KSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9tMS5nZXQoa2V5KTtcbiAgICB9XG4gICAgZ2V0S2V5KHZhbHVlKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9tMi5nZXQodmFsdWUpO1xuICAgIH1cbiAgICBkZWxldGUoa2V5KSB7XG4gICAgICAgIGNvbnN0IHZhbHVlID0gdGhpcy5fbTEuZ2V0KGtleSk7XG4gICAgICAgIGlmICh2YWx1ZSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5fbTEuZGVsZXRlKGtleSk7XG4gICAgICAgIHRoaXMuX20yLmRlbGV0ZSh2YWx1ZSk7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgICBrZXlzKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fbTEua2V5cygpO1xuICAgIH1cbiAgICB2YWx1ZXMoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9tMS52YWx1ZXMoKTtcbiAgICB9XG59XG5leHBvcnQgY2xhc3MgU2V0TWFwIHtcbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgdGhpcy5tYXAgPSBuZXcgTWFwKCk7XG4gICAgfVxuICAgIGFkZChrZXksIHZhbHVlKSB7XG4gICAgICAgIGxldCB2YWx1ZXMgPSB0aGlzLm1hcC5nZXQoa2V5KTtcbiAgICAgICAgaWYgKCF2YWx1ZXMpIHtcbiAgICAgICAgICAgIHZhbHVlcyA9IG5ldyBTZXQoKTtcbiAgICAgICAgICAgIHRoaXMubWFwLnNldChrZXksIHZhbHVlcyk7XG4gICAgICAgIH1cbiAgICAgICAgdmFsdWVzLmFkZCh2YWx1ZSk7XG4gICAgfVxuICAgIGRlbGV0ZShrZXksIHZhbHVlKSB7XG4gICAgICAgIGNvbnN0IHZhbHVlcyA9IHRoaXMubWFwLmdldChrZXkpO1xuICAgICAgICBpZiAoIXZhbHVlcykge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIHZhbHVlcy5kZWxldGUodmFsdWUpO1xuICAgICAgICBpZiAodmFsdWVzLnNpemUgPT09IDApIHtcbiAgICAgICAgICAgIHRoaXMubWFwLmRlbGV0ZShrZXkpO1xuICAgICAgICB9XG4gICAgfVxuICAgIGZvckVhY2goa2V5LCBmbikge1xuICAgICAgICBjb25zdCB2YWx1ZXMgPSB0aGlzLm1hcC5nZXQoa2V5KTtcbiAgICAgICAgaWYgKCF2YWx1ZXMpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICB2YWx1ZXMuZm9yRWFjaChmbik7XG4gICAgfVxuICAgIGdldChrZXkpIHtcbiAgICAgICAgY29uc3QgdmFsdWVzID0gdGhpcy5tYXAuZ2V0KGtleSk7XG4gICAgICAgIGlmICghdmFsdWVzKSB7XG4gICAgICAgICAgICByZXR1cm4gbmV3IFNldCgpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB2YWx1ZXM7XG4gICAgfVxufVxuIiwgIi8qLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gKiAgQ29weXJpZ2h0IChjKSBNaWNyb3NvZnQgQ29ycG9yYXRpb24uIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKiAgTGljZW5zZWQgdW5kZXIgdGhlIE1JVCBMaWNlbnNlLiBTZWUgTGljZW5zZS50eHQgaW4gdGhlIHByb2plY3Qgcm9vdCBmb3IgbGljZW5zZSBpbmZvcm1hdGlvbi5cbiAqLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qL1xuaW1wb3J0IHsgTFJVQ2FjaGUgfSBmcm9tICcuLi8uLi8uLi9iYXNlL2NvbW1vbi9tYXAuanMnO1xuaW1wb3J0IHsgQ2hhcmFjdGVyQ2xhc3NpZmllciB9IGZyb20gJy4vY2hhcmFjdGVyQ2xhc3NpZmllci5qcyc7XG5leHBvcnQgY2xhc3MgV29yZENoYXJhY3RlckNsYXNzaWZpZXIgZXh0ZW5kcyBDaGFyYWN0ZXJDbGFzc2lmaWVyIHtcbiAgICBjb25zdHJ1Y3Rvcih3b3JkU2VwYXJhdG9ycywgaW50bFNlZ21lbnRlckxvY2FsZXMpIHtcbiAgICAgICAgc3VwZXIoMCAvKiBXb3JkQ2hhcmFjdGVyQ2xhc3MuUmVndWxhciAqLyk7XG4gICAgICAgIHRoaXMuX3NlZ21lbnRlciA9IG51bGw7XG4gICAgICAgIHRoaXMuX2NhY2hlZExpbmUgPSBudWxsO1xuICAgICAgICB0aGlzLl9jYWNoZWRTZWdtZW50cyA9IFtdO1xuICAgICAgICB0aGlzLmludGxTZWdtZW50ZXJMb2NhbGVzID0gaW50bFNlZ21lbnRlckxvY2FsZXM7XG4gICAgICAgIGlmICh0aGlzLmludGxTZWdtZW50ZXJMb2NhbGVzLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgIHRoaXMuX3NlZ21lbnRlciA9IG5ldyBJbnRsLlNlZ21lbnRlcih0aGlzLmludGxTZWdtZW50ZXJMb2NhbGVzLCB7IGdyYW51bGFyaXR5OiAnd29yZCcgfSk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICB0aGlzLl9zZWdtZW50ZXIgPSBudWxsO1xuICAgICAgICB9XG4gICAgICAgIGZvciAobGV0IGkgPSAwLCBsZW4gPSB3b3JkU2VwYXJhdG9ycy5sZW5ndGg7IGkgPCBsZW47IGkrKykge1xuICAgICAgICAgICAgdGhpcy5zZXQod29yZFNlcGFyYXRvcnMuY2hhckNvZGVBdChpKSwgMiAvKiBXb3JkQ2hhcmFjdGVyQ2xhc3MuV29yZFNlcGFyYXRvciAqLyk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5zZXQoMzIgLyogQ2hhckNvZGUuU3BhY2UgKi8sIDEgLyogV29yZENoYXJhY3RlckNsYXNzLldoaXRlc3BhY2UgKi8pO1xuICAgICAgICB0aGlzLnNldCg5IC8qIENoYXJDb2RlLlRhYiAqLywgMSAvKiBXb3JkQ2hhcmFjdGVyQ2xhc3MuV2hpdGVzcGFjZSAqLyk7XG4gICAgfVxuICAgIGZpbmRQcmV2SW50bFdvcmRCZWZvcmVPckF0T2Zmc2V0KGxpbmUsIG9mZnNldCkge1xuICAgICAgICBsZXQgY2FuZGlkYXRlID0gbnVsbDtcbiAgICAgICAgZm9yIChjb25zdCBzZWdtZW50IG9mIHRoaXMuX2dldEludGxTZWdtZW50ZXJXb3Jkc09uTGluZShsaW5lKSkge1xuICAgICAgICAgICAgaWYgKHNlZ21lbnQuaW5kZXggPiBvZmZzZXQpIHtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNhbmRpZGF0ZSA9IHNlZ21lbnQ7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGNhbmRpZGF0ZTtcbiAgICB9XG4gICAgZmluZE5leHRJbnRsV29yZEF0T3JBZnRlck9mZnNldChsaW5lQ29udGVudCwgb2Zmc2V0KSB7XG4gICAgICAgIGZvciAoY29uc3Qgc2VnbWVudCBvZiB0aGlzLl9nZXRJbnRsU2VnbWVudGVyV29yZHNPbkxpbmUobGluZUNvbnRlbnQpKSB7XG4gICAgICAgICAgICBpZiAoc2VnbWVudC5pbmRleCA8IG9mZnNldCkge1xuICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIHNlZ21lbnQ7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuICAgIF9nZXRJbnRsU2VnbWVudGVyV29yZHNPbkxpbmUobGluZSkge1xuICAgICAgICBpZiAoIXRoaXMuX3NlZ21lbnRlcikge1xuICAgICAgICAgICAgcmV0dXJuIFtdO1xuICAgICAgICB9XG4gICAgICAgIC8vIENoZWNrIGlmIHRoZSBsaW5lIGhhcyBjaGFuZ2VkIGZyb20gdGhlIHByZXZpb3VzIGNhbGxcbiAgICAgICAgaWYgKHRoaXMuX2NhY2hlZExpbmUgPT09IGxpbmUpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLl9jYWNoZWRTZWdtZW50cztcbiAgICAgICAgfVxuICAgICAgICAvLyBVcGRhdGUgdGhlIGNhY2hlIHdpdGggdGhlIG5ldyBsaW5lXG4gICAgICAgIHRoaXMuX2NhY2hlZExpbmUgPSBsaW5lO1xuICAgICAgICB0aGlzLl9jYWNoZWRTZWdtZW50cyA9IHRoaXMuX2ZpbHRlcldvcmRTZWdtZW50cyh0aGlzLl9zZWdtZW50ZXIuc2VnbWVudChsaW5lKSk7XG4gICAgICAgIHJldHVybiB0aGlzLl9jYWNoZWRTZWdtZW50cztcbiAgICB9XG4gICAgX2ZpbHRlcldvcmRTZWdtZW50cyhzZWdtZW50cykge1xuICAgICAgICBjb25zdCByZXN1bHQgPSBbXTtcbiAgICAgICAgZm9yIChjb25zdCBzZWdtZW50IG9mIHNlZ21lbnRzKSB7XG4gICAgICAgICAgICBpZiAodGhpcy5faXNXb3JkTGlrZShzZWdtZW50KSkge1xuICAgICAgICAgICAgICAgIHJlc3VsdC5wdXNoKHNlZ21lbnQpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuICAgIF9pc1dvcmRMaWtlKHNlZ21lbnQpIHtcbiAgICAgICAgaWYgKHNlZ21lbnQuaXNXb3JkTGlrZSkge1xuICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbn1cbmNvbnN0IHdvcmRDbGFzc2lmaWVyQ2FjaGUgPSBuZXcgTFJVQ2FjaGUoMTApO1xuZXhwb3J0IGZ1bmN0aW9uIGdldE1hcEZvcldvcmRTZXBhcmF0b3JzKHdvcmRTZXBhcmF0b3JzLCBpbnRsU2VnbWVudGVyTG9jYWxlcykge1xuICAgIGNvbnN0IGtleSA9IGAke3dvcmRTZXBhcmF0b3JzfS8ke2ludGxTZWdtZW50ZXJMb2NhbGVzLmpvaW4oJywnKX1gO1xuICAgIGxldCByZXN1bHQgPSB3b3JkQ2xhc3NpZmllckNhY2hlLmdldChrZXkpO1xuICAgIGlmICghcmVzdWx0KSB7XG4gICAgICAgIHJlc3VsdCA9IG5ldyBXb3JkQ2hhcmFjdGVyQ2xhc3NpZmllcih3b3JkU2VwYXJhdG9ycywgaW50bFNlZ21lbnRlckxvY2FsZXMpO1xuICAgICAgICB3b3JkQ2xhc3NpZmllckNhY2hlLnNldChrZXksIHJlc3VsdCk7XG4gICAgfVxuICAgIHJldHVybiByZXN1bHQ7XG59XG4iLCAiLyotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAqICBDb3B5cmlnaHQgKGMpIE1pY3Jvc29mdCBDb3Jwb3JhdGlvbi4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqICBMaWNlbnNlZCB1bmRlciB0aGUgTUlUIExpY2Vuc2UuIFNlZSBMaWNlbnNlLnR4dCBpbiB0aGUgcHJvamVjdCByb290IGZvciBsaWNlbnNlIGluZm9ybWF0aW9uLlxuICotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSovXG5pbXBvcnQgeyBlcXVhbHMgfSBmcm9tICcuLi8uLi9iYXNlL2NvbW1vbi9vYmplY3RzLmpzJztcbi8qKlxuICogVmVydGljYWwgTGFuZSBpbiB0aGUgb3ZlcnZpZXcgcnVsZXIgb2YgdGhlIGVkaXRvci5cbiAqL1xuZXhwb3J0IHZhciBPdmVydmlld1J1bGVyTGFuZTtcbihmdW5jdGlvbiAoT3ZlcnZpZXdSdWxlckxhbmUpIHtcbiAgICBPdmVydmlld1J1bGVyTGFuZVtPdmVydmlld1J1bGVyTGFuZVtcIkxlZnRcIl0gPSAxXSA9IFwiTGVmdFwiO1xuICAgIE92ZXJ2aWV3UnVsZXJMYW5lW092ZXJ2aWV3UnVsZXJMYW5lW1wiQ2VudGVyXCJdID0gMl0gPSBcIkNlbnRlclwiO1xuICAgIE92ZXJ2aWV3UnVsZXJMYW5lW092ZXJ2aWV3UnVsZXJMYW5lW1wiUmlnaHRcIl0gPSA0XSA9IFwiUmlnaHRcIjtcbiAgICBPdmVydmlld1J1bGVyTGFuZVtPdmVydmlld1J1bGVyTGFuZVtcIkZ1bGxcIl0gPSA3XSA9IFwiRnVsbFwiO1xufSkoT3ZlcnZpZXdSdWxlckxhbmUgfHwgKE92ZXJ2aWV3UnVsZXJMYW5lID0ge30pKTtcbi8qKlxuICogVmVydGljYWwgTGFuZSBpbiB0aGUgZ2x5cGggbWFyZ2luIG9mIHRoZSBlZGl0b3IuXG4gKi9cbmV4cG9ydCB2YXIgR2x5cGhNYXJnaW5MYW5lO1xuKGZ1bmN0aW9uIChHbHlwaE1hcmdpbkxhbmUpIHtcbiAgICBHbHlwaE1hcmdpbkxhbmVbR2x5cGhNYXJnaW5MYW5lW1wiTGVmdFwiXSA9IDFdID0gXCJMZWZ0XCI7XG4gICAgR2x5cGhNYXJnaW5MYW5lW0dseXBoTWFyZ2luTGFuZVtcIkNlbnRlclwiXSA9IDJdID0gXCJDZW50ZXJcIjtcbiAgICBHbHlwaE1hcmdpbkxhbmVbR2x5cGhNYXJnaW5MYW5lW1wiUmlnaHRcIl0gPSAzXSA9IFwiUmlnaHRcIjtcbn0pKEdseXBoTWFyZ2luTGFuZSB8fCAoR2x5cGhNYXJnaW5MYW5lID0ge30pKTtcbmV4cG9ydCB2YXIgSW5qZWN0ZWRUZXh0Q3Vyc29yU3RvcHM7XG4oZnVuY3Rpb24gKEluamVjdGVkVGV4dEN1cnNvclN0b3BzKSB7XG4gICAgSW5qZWN0ZWRUZXh0Q3Vyc29yU3RvcHNbSW5qZWN0ZWRUZXh0Q3Vyc29yU3RvcHNbXCJCb3RoXCJdID0gMF0gPSBcIkJvdGhcIjtcbiAgICBJbmplY3RlZFRleHRDdXJzb3JTdG9wc1tJbmplY3RlZFRleHRDdXJzb3JTdG9wc1tcIlJpZ2h0XCJdID0gMV0gPSBcIlJpZ2h0XCI7XG4gICAgSW5qZWN0ZWRUZXh0Q3Vyc29yU3RvcHNbSW5qZWN0ZWRUZXh0Q3Vyc29yU3RvcHNbXCJMZWZ0XCJdID0gMl0gPSBcIkxlZnRcIjtcbiAgICBJbmplY3RlZFRleHRDdXJzb3JTdG9wc1tJbmplY3RlZFRleHRDdXJzb3JTdG9wc1tcIk5vbmVcIl0gPSAzXSA9IFwiTm9uZVwiO1xufSkoSW5qZWN0ZWRUZXh0Q3Vyc29yU3RvcHMgfHwgKEluamVjdGVkVGV4dEN1cnNvclN0b3BzID0ge30pKTtcbmV4cG9ydCBjbGFzcyBUZXh0TW9kZWxSZXNvbHZlZE9wdGlvbnMge1xuICAgIGdldCBvcmlnaW5hbEluZGVudFNpemUoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9pbmRlbnRTaXplSXNUYWJTaXplID8gJ3RhYlNpemUnIDogdGhpcy5pbmRlbnRTaXplO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBAaW50ZXJuYWxcbiAgICAgKi9cbiAgICBjb25zdHJ1Y3RvcihzcmMpIHtcbiAgICAgICAgdGhpcy5fdGV4dE1vZGVsUmVzb2x2ZWRPcHRpb25zQnJhbmQgPSB1bmRlZmluZWQ7XG4gICAgICAgIHRoaXMudGFiU2l6ZSA9IE1hdGgubWF4KDEsIHNyYy50YWJTaXplIHwgMCk7XG4gICAgICAgIGlmIChzcmMuaW5kZW50U2l6ZSA9PT0gJ3RhYlNpemUnKSB7XG4gICAgICAgICAgICB0aGlzLmluZGVudFNpemUgPSB0aGlzLnRhYlNpemU7XG4gICAgICAgICAgICB0aGlzLl9pbmRlbnRTaXplSXNUYWJTaXplID0gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMuaW5kZW50U2l6ZSA9IE1hdGgubWF4KDEsIHNyYy5pbmRlbnRTaXplIHwgMCk7XG4gICAgICAgICAgICB0aGlzLl9pbmRlbnRTaXplSXNUYWJTaXplID0gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5pbnNlcnRTcGFjZXMgPSBCb29sZWFuKHNyYy5pbnNlcnRTcGFjZXMpO1xuICAgICAgICB0aGlzLmRlZmF1bHRFT0wgPSBzcmMuZGVmYXVsdEVPTCB8IDA7XG4gICAgICAgIHRoaXMudHJpbUF1dG9XaGl0ZXNwYWNlID0gQm9vbGVhbihzcmMudHJpbUF1dG9XaGl0ZXNwYWNlKTtcbiAgICAgICAgdGhpcy5icmFja2V0UGFpckNvbG9yaXphdGlvbk9wdGlvbnMgPSBzcmMuYnJhY2tldFBhaXJDb2xvcml6YXRpb25PcHRpb25zO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBAaW50ZXJuYWxcbiAgICAgKi9cbiAgICBlcXVhbHMob3RoZXIpIHtcbiAgICAgICAgcmV0dXJuICh0aGlzLnRhYlNpemUgPT09IG90aGVyLnRhYlNpemVcbiAgICAgICAgICAgICYmIHRoaXMuX2luZGVudFNpemVJc1RhYlNpemUgPT09IG90aGVyLl9pbmRlbnRTaXplSXNUYWJTaXplXG4gICAgICAgICAgICAmJiB0aGlzLmluZGVudFNpemUgPT09IG90aGVyLmluZGVudFNpemVcbiAgICAgICAgICAgICYmIHRoaXMuaW5zZXJ0U3BhY2VzID09PSBvdGhlci5pbnNlcnRTcGFjZXNcbiAgICAgICAgICAgICYmIHRoaXMuZGVmYXVsdEVPTCA9PT0gb3RoZXIuZGVmYXVsdEVPTFxuICAgICAgICAgICAgJiYgdGhpcy50cmltQXV0b1doaXRlc3BhY2UgPT09IG90aGVyLnRyaW1BdXRvV2hpdGVzcGFjZVxuICAgICAgICAgICAgJiYgZXF1YWxzKHRoaXMuYnJhY2tldFBhaXJDb2xvcml6YXRpb25PcHRpb25zLCBvdGhlci5icmFja2V0UGFpckNvbG9yaXphdGlvbk9wdGlvbnMpKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQGludGVybmFsXG4gICAgICovXG4gICAgY3JlYXRlQ2hhbmdlRXZlbnQobmV3T3B0cykge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgdGFiU2l6ZTogdGhpcy50YWJTaXplICE9PSBuZXdPcHRzLnRhYlNpemUsXG4gICAgICAgICAgICBpbmRlbnRTaXplOiB0aGlzLmluZGVudFNpemUgIT09IG5ld09wdHMuaW5kZW50U2l6ZSxcbiAgICAgICAgICAgIGluc2VydFNwYWNlczogdGhpcy5pbnNlcnRTcGFjZXMgIT09IG5ld09wdHMuaW5zZXJ0U3BhY2VzLFxuICAgICAgICAgICAgdHJpbUF1dG9XaGl0ZXNwYWNlOiB0aGlzLnRyaW1BdXRvV2hpdGVzcGFjZSAhPT0gbmV3T3B0cy50cmltQXV0b1doaXRlc3BhY2UsXG4gICAgICAgIH07XG4gICAgfVxufVxuZXhwb3J0IGNsYXNzIEZpbmRNYXRjaCB7XG4gICAgLyoqXG4gICAgICogQGludGVybmFsXG4gICAgICovXG4gICAgY29uc3RydWN0b3IocmFuZ2UsIG1hdGNoZXMpIHtcbiAgICAgICAgdGhpcy5fZmluZE1hdGNoQnJhbmQgPSB1bmRlZmluZWQ7XG4gICAgICAgIHRoaXMucmFuZ2UgPSByYW5nZTtcbiAgICAgICAgdGhpcy5tYXRjaGVzID0gbWF0Y2hlcztcbiAgICB9XG59XG4vKipcbiAqIEBpbnRlcm5hbFxuICovXG5leHBvcnQgZnVuY3Rpb24gaXNJVGV4dFNuYXBzaG90KG9iaikge1xuICAgIHJldHVybiAob2JqICYmIHR5cGVvZiBvYmoucmVhZCA9PT0gJ2Z1bmN0aW9uJyk7XG59XG4vKipcbiAqIEBpbnRlcm5hbFxuICovXG5leHBvcnQgY2xhc3MgVmFsaWRBbm5vdGF0ZWRFZGl0T3BlcmF0aW9uIHtcbiAgICBjb25zdHJ1Y3RvcihpZGVudGlmaWVyLCByYW5nZSwgdGV4dCwgZm9yY2VNb3ZlTWFya2VycywgaXNBdXRvV2hpdGVzcGFjZUVkaXQsIF9pc1RyYWNrZWQpIHtcbiAgICAgICAgdGhpcy5pZGVudGlmaWVyID0gaWRlbnRpZmllcjtcbiAgICAgICAgdGhpcy5yYW5nZSA9IHJhbmdlO1xuICAgICAgICB0aGlzLnRleHQgPSB0ZXh0O1xuICAgICAgICB0aGlzLmZvcmNlTW92ZU1hcmtlcnMgPSBmb3JjZU1vdmVNYXJrZXJzO1xuICAgICAgICB0aGlzLmlzQXV0b1doaXRlc3BhY2VFZGl0ID0gaXNBdXRvV2hpdGVzcGFjZUVkaXQ7XG4gICAgICAgIHRoaXMuX2lzVHJhY2tlZCA9IF9pc1RyYWNrZWQ7XG4gICAgfVxufVxuLyoqXG4gKiBAaW50ZXJuYWxcbiAqL1xuZXhwb3J0IGNsYXNzIFNlYXJjaERhdGEge1xuICAgIGNvbnN0cnVjdG9yKHJlZ2V4LCB3b3JkU2VwYXJhdG9ycywgc2ltcGxlU2VhcmNoKSB7XG4gICAgICAgIHRoaXMucmVnZXggPSByZWdleDtcbiAgICAgICAgdGhpcy53b3JkU2VwYXJhdG9ycyA9IHdvcmRTZXBhcmF0b3JzO1xuICAgICAgICB0aGlzLnNpbXBsZVNlYXJjaCA9IHNpbXBsZVNlYXJjaDtcbiAgICB9XG59XG4vKipcbiAqIEBpbnRlcm5hbFxuICovXG5leHBvcnQgY2xhc3MgQXBwbHlFZGl0c1Jlc3VsdCB7XG4gICAgY29uc3RydWN0b3IocmV2ZXJzZUVkaXRzLCBjaGFuZ2VzLCB0cmltQXV0b1doaXRlc3BhY2VMaW5lTnVtYmVycykge1xuICAgICAgICB0aGlzLnJldmVyc2VFZGl0cyA9IHJldmVyc2VFZGl0cztcbiAgICAgICAgdGhpcy5jaGFuZ2VzID0gY2hhbmdlcztcbiAgICAgICAgdGhpcy50cmltQXV0b1doaXRlc3BhY2VMaW5lTnVtYmVycyA9IHRyaW1BdXRvV2hpdGVzcGFjZUxpbmVOdW1iZXJzO1xuICAgIH1cbn1cbi8qKlxuICogQGludGVybmFsXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBzaG91bGRTeW5jaHJvbml6ZU1vZGVsKG1vZGVsKSB7XG4gICAgcmV0dXJuICghbW9kZWwuaXNUb29MYXJnZUZvclN5bmNpbmcoKSAmJiAhbW9kZWwuaXNGb3JTaW1wbGVXaWRnZXQpO1xufVxuIiwgIi8qLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gKiAgQ29weXJpZ2h0IChjKSBNaWNyb3NvZnQgQ29ycG9yYXRpb24uIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKiAgTGljZW5zZWQgdW5kZXIgdGhlIE1JVCBMaWNlbnNlLiBTZWUgTGljZW5zZS50eHQgaW4gdGhlIHByb2plY3Qgcm9vdCBmb3IgbGljZW5zZSBpbmZvcm1hdGlvbi5cbiAqLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qL1xuaW1wb3J0ICogYXMgc3RyaW5ncyBmcm9tICcuLi8uLi8uLi9iYXNlL2NvbW1vbi9zdHJpbmdzLmpzJztcbmltcG9ydCB7IGdldE1hcEZvcldvcmRTZXBhcmF0b3JzIH0gZnJvbSAnLi4vY29yZS93b3JkQ2hhcmFjdGVyQ2xhc3NpZmllci5qcyc7XG5pbXBvcnQgeyBQb3NpdGlvbiB9IGZyb20gJy4uL2NvcmUvcG9zaXRpb24uanMnO1xuaW1wb3J0IHsgUmFuZ2UgfSBmcm9tICcuLi9jb3JlL3JhbmdlLmpzJztcbmltcG9ydCB7IEZpbmRNYXRjaCwgU2VhcmNoRGF0YSB9IGZyb20gJy4uL21vZGVsLmpzJztcbmNvbnN0IExJTUlUX0ZJTkRfQ09VTlQgPSA5OTk7XG5leHBvcnQgY2xhc3MgU2VhcmNoUGFyYW1zIHtcbiAgICBjb25zdHJ1Y3RvcihzZWFyY2hTdHJpbmcsIGlzUmVnZXgsIG1hdGNoQ2FzZSwgd29yZFNlcGFyYXRvcnMpIHtcbiAgICAgICAgdGhpcy5zZWFyY2hTdHJpbmcgPSBzZWFyY2hTdHJpbmc7XG4gICAgICAgIHRoaXMuaXNSZWdleCA9IGlzUmVnZXg7XG4gICAgICAgIHRoaXMubWF0Y2hDYXNlID0gbWF0Y2hDYXNlO1xuICAgICAgICB0aGlzLndvcmRTZXBhcmF0b3JzID0gd29yZFNlcGFyYXRvcnM7XG4gICAgfVxuICAgIHBhcnNlU2VhcmNoUmVxdWVzdCgpIHtcbiAgICAgICAgaWYgKHRoaXMuc2VhcmNoU3RyaW5nID09PSAnJykge1xuICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgIH1cbiAgICAgICAgLy8gVHJ5IHRvIGNyZWF0ZSBhIFJlZ0V4cCBvdXQgb2YgdGhlIHBhcmFtc1xuICAgICAgICBsZXQgbXVsdGlsaW5lO1xuICAgICAgICBpZiAodGhpcy5pc1JlZ2V4KSB7XG4gICAgICAgICAgICBtdWx0aWxpbmUgPSBpc011bHRpbGluZVJlZ2V4U291cmNlKHRoaXMuc2VhcmNoU3RyaW5nKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIG11bHRpbGluZSA9ICh0aGlzLnNlYXJjaFN0cmluZy5pbmRleE9mKCdcXG4nKSA+PSAwKTtcbiAgICAgICAgfVxuICAgICAgICBsZXQgcmVnZXggPSBudWxsO1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgcmVnZXggPSBzdHJpbmdzLmNyZWF0ZVJlZ0V4cCh0aGlzLnNlYXJjaFN0cmluZywgdGhpcy5pc1JlZ2V4LCB7XG4gICAgICAgICAgICAgICAgbWF0Y2hDYXNlOiB0aGlzLm1hdGNoQ2FzZSxcbiAgICAgICAgICAgICAgICB3aG9sZVdvcmQ6IGZhbHNlLFxuICAgICAgICAgICAgICAgIG11bHRpbGluZTogbXVsdGlsaW5lLFxuICAgICAgICAgICAgICAgIGdsb2JhbDogdHJ1ZSxcbiAgICAgICAgICAgICAgICB1bmljb2RlOiB0cnVlXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgICBjYXRjaCAoZXJyKSB7XG4gICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgfVxuICAgICAgICBpZiAoIXJlZ2V4KSB7XG4gICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgfVxuICAgICAgICBsZXQgY2FuVXNlU2ltcGxlU2VhcmNoID0gKCF0aGlzLmlzUmVnZXggJiYgIW11bHRpbGluZSk7XG4gICAgICAgIGlmIChjYW5Vc2VTaW1wbGVTZWFyY2ggJiYgdGhpcy5zZWFyY2hTdHJpbmcudG9Mb3dlckNhc2UoKSAhPT0gdGhpcy5zZWFyY2hTdHJpbmcudG9VcHBlckNhc2UoKSkge1xuICAgICAgICAgICAgLy8gY2FzaW5nIG1pZ2h0IG1ha2UgYSBkaWZmZXJlbmNlXG4gICAgICAgICAgICBjYW5Vc2VTaW1wbGVTZWFyY2ggPSB0aGlzLm1hdGNoQ2FzZTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbmV3IFNlYXJjaERhdGEocmVnZXgsIHRoaXMud29yZFNlcGFyYXRvcnMgPyBnZXRNYXBGb3JXb3JkU2VwYXJhdG9ycyh0aGlzLndvcmRTZXBhcmF0b3JzLCBbXSkgOiBudWxsLCBjYW5Vc2VTaW1wbGVTZWFyY2ggPyB0aGlzLnNlYXJjaFN0cmluZyA6IG51bGwpO1xuICAgIH1cbn1cbmV4cG9ydCBmdW5jdGlvbiBpc011bHRpbGluZVJlZ2V4U291cmNlKHNlYXJjaFN0cmluZykge1xuICAgIGlmICghc2VhcmNoU3RyaW5nIHx8IHNlYXJjaFN0cmluZy5sZW5ndGggPT09IDApIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICBmb3IgKGxldCBpID0gMCwgbGVuID0gc2VhcmNoU3RyaW5nLmxlbmd0aDsgaSA8IGxlbjsgaSsrKSB7XG4gICAgICAgIGNvbnN0IGNoQ29kZSA9IHNlYXJjaFN0cmluZy5jaGFyQ29kZUF0KGkpO1xuICAgICAgICBpZiAoY2hDb2RlID09PSAxMCAvKiBDaGFyQ29kZS5MaW5lRmVlZCAqLykge1xuICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGNoQ29kZSA9PT0gOTIgLyogQ2hhckNvZGUuQmFja3NsYXNoICovKSB7XG4gICAgICAgICAgICAvLyBtb3ZlIHRvIG5leHQgY2hhclxuICAgICAgICAgICAgaSsrO1xuICAgICAgICAgICAgaWYgKGkgPj0gbGVuKSB7XG4gICAgICAgICAgICAgICAgLy8gc3RyaW5nIGVuZHMgd2l0aCBhIFxcXG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjb25zdCBuZXh0Q2hDb2RlID0gc2VhcmNoU3RyaW5nLmNoYXJDb2RlQXQoaSk7XG4gICAgICAgICAgICBpZiAobmV4dENoQ29kZSA9PT0gMTEwIC8qIENoYXJDb2RlLm4gKi8gfHwgbmV4dENoQ29kZSA9PT0gMTE0IC8qIENoYXJDb2RlLnIgKi8gfHwgbmV4dENoQ29kZSA9PT0gODcgLyogQ2hhckNvZGUuVyAqLykge1xuICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiBmYWxzZTtcbn1cbmV4cG9ydCBmdW5jdGlvbiBjcmVhdGVGaW5kTWF0Y2gocmFuZ2UsIHJhd01hdGNoZXMsIGNhcHR1cmVNYXRjaGVzKSB7XG4gICAgaWYgKCFjYXB0dXJlTWF0Y2hlcykge1xuICAgICAgICByZXR1cm4gbmV3IEZpbmRNYXRjaChyYW5nZSwgbnVsbCk7XG4gICAgfVxuICAgIGNvbnN0IG1hdGNoZXMgPSBbXTtcbiAgICBmb3IgKGxldCBpID0gMCwgbGVuID0gcmF3TWF0Y2hlcy5sZW5ndGg7IGkgPCBsZW47IGkrKykge1xuICAgICAgICBtYXRjaGVzW2ldID0gcmF3TWF0Y2hlc1tpXTtcbiAgICB9XG4gICAgcmV0dXJuIG5ldyBGaW5kTWF0Y2gocmFuZ2UsIG1hdGNoZXMpO1xufVxuY2xhc3MgTGluZUZlZWRDb3VudGVyIHtcbiAgICBjb25zdHJ1Y3Rvcih0ZXh0KSB7XG4gICAgICAgIGNvbnN0IGxpbmVGZWVkc09mZnNldHMgPSBbXTtcbiAgICAgICAgbGV0IGxpbmVGZWVkc09mZnNldHNMZW4gPSAwO1xuICAgICAgICBmb3IgKGxldCBpID0gMCwgdGV4dExlbiA9IHRleHQubGVuZ3RoOyBpIDwgdGV4dExlbjsgaSsrKSB7XG4gICAgICAgICAgICBpZiAodGV4dC5jaGFyQ29kZUF0KGkpID09PSAxMCAvKiBDaGFyQ29kZS5MaW5lRmVlZCAqLykge1xuICAgICAgICAgICAgICAgIGxpbmVGZWVkc09mZnNldHNbbGluZUZlZWRzT2Zmc2V0c0xlbisrXSA9IGk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5fbGluZUZlZWRzT2Zmc2V0cyA9IGxpbmVGZWVkc09mZnNldHM7XG4gICAgfVxuICAgIGZpbmRMaW5lRmVlZENvdW50QmVmb3JlT2Zmc2V0KG9mZnNldCkge1xuICAgICAgICBjb25zdCBsaW5lRmVlZHNPZmZzZXRzID0gdGhpcy5fbGluZUZlZWRzT2Zmc2V0cztcbiAgICAgICAgbGV0IG1pbiA9IDA7XG4gICAgICAgIGxldCBtYXggPSBsaW5lRmVlZHNPZmZzZXRzLmxlbmd0aCAtIDE7XG4gICAgICAgIGlmIChtYXggPT09IC0xKSB7XG4gICAgICAgICAgICAvLyBubyBsaW5lIGZlZWRzXG4gICAgICAgICAgICByZXR1cm4gMDtcbiAgICAgICAgfVxuICAgICAgICBpZiAob2Zmc2V0IDw9IGxpbmVGZWVkc09mZnNldHNbMF0pIHtcbiAgICAgICAgICAgIC8vIGJlZm9yZSBmaXJzdCBsaW5lIGZlZWRcbiAgICAgICAgICAgIHJldHVybiAwO1xuICAgICAgICB9XG4gICAgICAgIHdoaWxlIChtaW4gPCBtYXgpIHtcbiAgICAgICAgICAgIGNvbnN0IG1pZCA9IG1pbiArICgobWF4IC0gbWluKSAvIDIgPj4gMCk7XG4gICAgICAgICAgICBpZiAobGluZUZlZWRzT2Zmc2V0c1ttaWRdID49IG9mZnNldCkge1xuICAgICAgICAgICAgICAgIG1heCA9IG1pZCAtIDE7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICBpZiAobGluZUZlZWRzT2Zmc2V0c1ttaWQgKyAxXSA+PSBvZmZzZXQpIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gYmluZ28hXG4gICAgICAgICAgICAgICAgICAgIG1pbiA9IG1pZDtcbiAgICAgICAgICAgICAgICAgICAgbWF4ID0gbWlkO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgbWluID0gbWlkICsgMTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG1pbiArIDE7XG4gICAgfVxufVxuZXhwb3J0IGNsYXNzIFRleHRNb2RlbFNlYXJjaCB7XG4gICAgc3RhdGljIGZpbmRNYXRjaGVzKG1vZGVsLCBzZWFyY2hQYXJhbXMsIHNlYXJjaFJhbmdlLCBjYXB0dXJlTWF0Y2hlcywgbGltaXRSZXN1bHRDb3VudCkge1xuICAgICAgICBjb25zdCBzZWFyY2hEYXRhID0gc2VhcmNoUGFyYW1zLnBhcnNlU2VhcmNoUmVxdWVzdCgpO1xuICAgICAgICBpZiAoIXNlYXJjaERhdGEpIHtcbiAgICAgICAgICAgIHJldHVybiBbXTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoc2VhcmNoRGF0YS5yZWdleC5tdWx0aWxpbmUpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLl9kb0ZpbmRNYXRjaGVzTXVsdGlsaW5lKG1vZGVsLCBzZWFyY2hSYW5nZSwgbmV3IFNlYXJjaGVyKHNlYXJjaERhdGEud29yZFNlcGFyYXRvcnMsIHNlYXJjaERhdGEucmVnZXgpLCBjYXB0dXJlTWF0Y2hlcywgbGltaXRSZXN1bHRDb3VudCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRoaXMuX2RvRmluZE1hdGNoZXNMaW5lQnlMaW5lKG1vZGVsLCBzZWFyY2hSYW5nZSwgc2VhcmNoRGF0YSwgY2FwdHVyZU1hdGNoZXMsIGxpbWl0UmVzdWx0Q291bnQpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBNdWx0aWxpbmUgc2VhcmNoIGFsd2F5cyBleGVjdXRlcyBvbiB0aGUgbGluZXMgY29uY2F0ZW5hdGVkIHdpdGggXFxuLlxuICAgICAqIFdlIG11c3QgdGhlcmVmb3JlIGNvbXBlbnNhdGUgZm9yIHRoZSBjb3VudCBvZiBcXG4gaW4gY2FzZSB0aGUgbW9kZWwgaXMgQ1JMRlxuICAgICAqL1xuICAgIHN0YXRpYyBfZ2V0TXVsdGlsaW5lTWF0Y2hSYW5nZShtb2RlbCwgZGVsdGFPZmZzZXQsIHRleHQsIGxmQ291bnRlciwgbWF0Y2hJbmRleCwgbWF0Y2gwKSB7XG4gICAgICAgIGxldCBzdGFydE9mZnNldDtcbiAgICAgICAgbGV0IGxpbmVGZWVkQ291bnRCZWZvcmVNYXRjaCA9IDA7XG4gICAgICAgIGlmIChsZkNvdW50ZXIpIHtcbiAgICAgICAgICAgIGxpbmVGZWVkQ291bnRCZWZvcmVNYXRjaCA9IGxmQ291bnRlci5maW5kTGluZUZlZWRDb3VudEJlZm9yZU9mZnNldChtYXRjaEluZGV4KTtcbiAgICAgICAgICAgIHN0YXJ0T2Zmc2V0ID0gZGVsdGFPZmZzZXQgKyBtYXRjaEluZGV4ICsgbGluZUZlZWRDb3VudEJlZm9yZU1hdGNoIC8qIGFkZCBhcyBtYW55IFxcciBhcyB0aGVyZSB3ZXJlIFxcbiAqLztcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHN0YXJ0T2Zmc2V0ID0gZGVsdGFPZmZzZXQgKyBtYXRjaEluZGV4O1xuICAgICAgICB9XG4gICAgICAgIGxldCBlbmRPZmZzZXQ7XG4gICAgICAgIGlmIChsZkNvdW50ZXIpIHtcbiAgICAgICAgICAgIGNvbnN0IGxpbmVGZWVkQ291bnRCZWZvcmVFbmRPZk1hdGNoID0gbGZDb3VudGVyLmZpbmRMaW5lRmVlZENvdW50QmVmb3JlT2Zmc2V0KG1hdGNoSW5kZXggKyBtYXRjaDAubGVuZ3RoKTtcbiAgICAgICAgICAgIGNvbnN0IGxpbmVGZWVkQ291bnRJbk1hdGNoID0gbGluZUZlZWRDb3VudEJlZm9yZUVuZE9mTWF0Y2ggLSBsaW5lRmVlZENvdW50QmVmb3JlTWF0Y2g7XG4gICAgICAgICAgICBlbmRPZmZzZXQgPSBzdGFydE9mZnNldCArIG1hdGNoMC5sZW5ndGggKyBsaW5lRmVlZENvdW50SW5NYXRjaCAvKiBhZGQgYXMgbWFueSBcXHIgYXMgdGhlcmUgd2VyZSBcXG4gKi87XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBlbmRPZmZzZXQgPSBzdGFydE9mZnNldCArIG1hdGNoMC5sZW5ndGg7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3Qgc3RhcnRQb3NpdGlvbiA9IG1vZGVsLmdldFBvc2l0aW9uQXQoc3RhcnRPZmZzZXQpO1xuICAgICAgICBjb25zdCBlbmRQb3NpdGlvbiA9IG1vZGVsLmdldFBvc2l0aW9uQXQoZW5kT2Zmc2V0KTtcbiAgICAgICAgcmV0dXJuIG5ldyBSYW5nZShzdGFydFBvc2l0aW9uLmxpbmVOdW1iZXIsIHN0YXJ0UG9zaXRpb24uY29sdW1uLCBlbmRQb3NpdGlvbi5saW5lTnVtYmVyLCBlbmRQb3NpdGlvbi5jb2x1bW4pO1xuICAgIH1cbiAgICBzdGF0aWMgX2RvRmluZE1hdGNoZXNNdWx0aWxpbmUobW9kZWwsIHNlYXJjaFJhbmdlLCBzZWFyY2hlciwgY2FwdHVyZU1hdGNoZXMsIGxpbWl0UmVzdWx0Q291bnQpIHtcbiAgICAgICAgY29uc3QgZGVsdGFPZmZzZXQgPSBtb2RlbC5nZXRPZmZzZXRBdChzZWFyY2hSYW5nZS5nZXRTdGFydFBvc2l0aW9uKCkpO1xuICAgICAgICAvLyBXZSBhbHdheXMgZXhlY3V0ZSBtdWx0aWxpbmUgc2VhcmNoIG92ZXIgdGhlIGxpbmVzIGpvaW5lZCB3aXRoIFxcblxuICAgICAgICAvLyBUaGlzIG1ha2VzIGl0IHRoYXQgXFxuIHdpbGwgbWF0Y2ggdGhlIEVPTCBmb3IgYm90aCBDUkxGIGFuZCBMRiBtb2RlbHNcbiAgICAgICAgLy8gV2UgY29tcGVuc2F0ZSBmb3Igb2Zmc2V0IGVycm9ycyBpbiBgX2dldE11bHRpbGluZU1hdGNoUmFuZ2VgXG4gICAgICAgIGNvbnN0IHRleHQgPSBtb2RlbC5nZXRWYWx1ZUluUmFuZ2Uoc2VhcmNoUmFuZ2UsIDEgLyogRW5kT2ZMaW5lUHJlZmVyZW5jZS5MRiAqLyk7XG4gICAgICAgIGNvbnN0IGxmQ291bnRlciA9IChtb2RlbC5nZXRFT0woKSA9PT0gJ1xcclxcbicgPyBuZXcgTGluZUZlZWRDb3VudGVyKHRleHQpIDogbnVsbCk7XG4gICAgICAgIGNvbnN0IHJlc3VsdCA9IFtdO1xuICAgICAgICBsZXQgY291bnRlciA9IDA7XG4gICAgICAgIGxldCBtO1xuICAgICAgICBzZWFyY2hlci5yZXNldCgwKTtcbiAgICAgICAgd2hpbGUgKChtID0gc2VhcmNoZXIubmV4dCh0ZXh0KSkpIHtcbiAgICAgICAgICAgIHJlc3VsdFtjb3VudGVyKytdID0gY3JlYXRlRmluZE1hdGNoKHRoaXMuX2dldE11bHRpbGluZU1hdGNoUmFuZ2UobW9kZWwsIGRlbHRhT2Zmc2V0LCB0ZXh0LCBsZkNvdW50ZXIsIG0uaW5kZXgsIG1bMF0pLCBtLCBjYXB0dXJlTWF0Y2hlcyk7XG4gICAgICAgICAgICBpZiAoY291bnRlciA+PSBsaW1pdFJlc3VsdENvdW50KSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cbiAgICBzdGF0aWMgX2RvRmluZE1hdGNoZXNMaW5lQnlMaW5lKG1vZGVsLCBzZWFyY2hSYW5nZSwgc2VhcmNoRGF0YSwgY2FwdHVyZU1hdGNoZXMsIGxpbWl0UmVzdWx0Q291bnQpIHtcbiAgICAgICAgY29uc3QgcmVzdWx0ID0gW107XG4gICAgICAgIGxldCByZXN1bHRMZW4gPSAwO1xuICAgICAgICAvLyBFYXJseSBjYXNlIGZvciBhIHNlYXJjaCByYW5nZSB0aGF0IHN0YXJ0cyAmIHN0b3BzIG9uIHRoZSBzYW1lIGxpbmUgbnVtYmVyXG4gICAgICAgIGlmIChzZWFyY2hSYW5nZS5zdGFydExpbmVOdW1iZXIgPT09IHNlYXJjaFJhbmdlLmVuZExpbmVOdW1iZXIpIHtcbiAgICAgICAgICAgIGNvbnN0IHRleHQgPSBtb2RlbC5nZXRMaW5lQ29udGVudChzZWFyY2hSYW5nZS5zdGFydExpbmVOdW1iZXIpLnN1YnN0cmluZyhzZWFyY2hSYW5nZS5zdGFydENvbHVtbiAtIDEsIHNlYXJjaFJhbmdlLmVuZENvbHVtbiAtIDEpO1xuICAgICAgICAgICAgcmVzdWx0TGVuID0gdGhpcy5fZmluZE1hdGNoZXNJbkxpbmUoc2VhcmNoRGF0YSwgdGV4dCwgc2VhcmNoUmFuZ2Uuc3RhcnRMaW5lTnVtYmVyLCBzZWFyY2hSYW5nZS5zdGFydENvbHVtbiAtIDEsIHJlc3VsdExlbiwgcmVzdWx0LCBjYXB0dXJlTWF0Y2hlcywgbGltaXRSZXN1bHRDb3VudCk7XG4gICAgICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgICAgICB9XG4gICAgICAgIC8vIENvbGxlY3QgcmVzdWx0cyBmcm9tIGZpcnN0IGxpbmVcbiAgICAgICAgY29uc3QgdGV4dCA9IG1vZGVsLmdldExpbmVDb250ZW50KHNlYXJjaFJhbmdlLnN0YXJ0TGluZU51bWJlcikuc3Vic3RyaW5nKHNlYXJjaFJhbmdlLnN0YXJ0Q29sdW1uIC0gMSk7XG4gICAgICAgIHJlc3VsdExlbiA9IHRoaXMuX2ZpbmRNYXRjaGVzSW5MaW5lKHNlYXJjaERhdGEsIHRleHQsIHNlYXJjaFJhbmdlLnN0YXJ0TGluZU51bWJlciwgc2VhcmNoUmFuZ2Uuc3RhcnRDb2x1bW4gLSAxLCByZXN1bHRMZW4sIHJlc3VsdCwgY2FwdHVyZU1hdGNoZXMsIGxpbWl0UmVzdWx0Q291bnQpO1xuICAgICAgICAvLyBDb2xsZWN0IHJlc3VsdHMgZnJvbSBtaWRkbGUgbGluZXNcbiAgICAgICAgZm9yIChsZXQgbGluZU51bWJlciA9IHNlYXJjaFJhbmdlLnN0YXJ0TGluZU51bWJlciArIDE7IGxpbmVOdW1iZXIgPCBzZWFyY2hSYW5nZS5lbmRMaW5lTnVtYmVyICYmIHJlc3VsdExlbiA8IGxpbWl0UmVzdWx0Q291bnQ7IGxpbmVOdW1iZXIrKykge1xuICAgICAgICAgICAgcmVzdWx0TGVuID0gdGhpcy5fZmluZE1hdGNoZXNJbkxpbmUoc2VhcmNoRGF0YSwgbW9kZWwuZ2V0TGluZUNvbnRlbnQobGluZU51bWJlciksIGxpbmVOdW1iZXIsIDAsIHJlc3VsdExlbiwgcmVzdWx0LCBjYXB0dXJlTWF0Y2hlcywgbGltaXRSZXN1bHRDb3VudCk7XG4gICAgICAgIH1cbiAgICAgICAgLy8gQ29sbGVjdCByZXN1bHRzIGZyb20gbGFzdCBsaW5lXG4gICAgICAgIGlmIChyZXN1bHRMZW4gPCBsaW1pdFJlc3VsdENvdW50KSB7XG4gICAgICAgICAgICBjb25zdCB0ZXh0ID0gbW9kZWwuZ2V0TGluZUNvbnRlbnQoc2VhcmNoUmFuZ2UuZW5kTGluZU51bWJlcikuc3Vic3RyaW5nKDAsIHNlYXJjaFJhbmdlLmVuZENvbHVtbiAtIDEpO1xuICAgICAgICAgICAgcmVzdWx0TGVuID0gdGhpcy5fZmluZE1hdGNoZXNJbkxpbmUoc2VhcmNoRGF0YSwgdGV4dCwgc2VhcmNoUmFuZ2UuZW5kTGluZU51bWJlciwgMCwgcmVzdWx0TGVuLCByZXN1bHQsIGNhcHR1cmVNYXRjaGVzLCBsaW1pdFJlc3VsdENvdW50KTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cbiAgICBzdGF0aWMgX2ZpbmRNYXRjaGVzSW5MaW5lKHNlYXJjaERhdGEsIHRleHQsIGxpbmVOdW1iZXIsIGRlbHRhT2Zmc2V0LCByZXN1bHRMZW4sIHJlc3VsdCwgY2FwdHVyZU1hdGNoZXMsIGxpbWl0UmVzdWx0Q291bnQpIHtcbiAgICAgICAgY29uc3Qgd29yZFNlcGFyYXRvcnMgPSBzZWFyY2hEYXRhLndvcmRTZXBhcmF0b3JzO1xuICAgICAgICBpZiAoIWNhcHR1cmVNYXRjaGVzICYmIHNlYXJjaERhdGEuc2ltcGxlU2VhcmNoKSB7XG4gICAgICAgICAgICBjb25zdCBzZWFyY2hTdHJpbmcgPSBzZWFyY2hEYXRhLnNpbXBsZVNlYXJjaDtcbiAgICAgICAgICAgIGNvbnN0IHNlYXJjaFN0cmluZ0xlbiA9IHNlYXJjaFN0cmluZy5sZW5ndGg7XG4gICAgICAgICAgICBjb25zdCB0ZXh0TGVuZ3RoID0gdGV4dC5sZW5ndGg7XG4gICAgICAgICAgICBsZXQgbGFzdE1hdGNoSW5kZXggPSAtc2VhcmNoU3RyaW5nTGVuO1xuICAgICAgICAgICAgd2hpbGUgKChsYXN0TWF0Y2hJbmRleCA9IHRleHQuaW5kZXhPZihzZWFyY2hTdHJpbmcsIGxhc3RNYXRjaEluZGV4ICsgc2VhcmNoU3RyaW5nTGVuKSkgIT09IC0xKSB7XG4gICAgICAgICAgICAgICAgaWYgKCF3b3JkU2VwYXJhdG9ycyB8fCBpc1ZhbGlkTWF0Y2god29yZFNlcGFyYXRvcnMsIHRleHQsIHRleHRMZW5ndGgsIGxhc3RNYXRjaEluZGV4LCBzZWFyY2hTdHJpbmdMZW4pKSB7XG4gICAgICAgICAgICAgICAgICAgIHJlc3VsdFtyZXN1bHRMZW4rK10gPSBuZXcgRmluZE1hdGNoKG5ldyBSYW5nZShsaW5lTnVtYmVyLCBsYXN0TWF0Y2hJbmRleCArIDEgKyBkZWx0YU9mZnNldCwgbGluZU51bWJlciwgbGFzdE1hdGNoSW5kZXggKyAxICsgc2VhcmNoU3RyaW5nTGVuICsgZGVsdGFPZmZzZXQpLCBudWxsKTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHJlc3VsdExlbiA+PSBsaW1pdFJlc3VsdENvdW50KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gcmVzdWx0TGVuO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIHJlc3VsdExlbjtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBzZWFyY2hlciA9IG5ldyBTZWFyY2hlcihzZWFyY2hEYXRhLndvcmRTZXBhcmF0b3JzLCBzZWFyY2hEYXRhLnJlZ2V4KTtcbiAgICAgICAgbGV0IG07XG4gICAgICAgIC8vIFJlc2V0IHJlZ2V4IHRvIHNlYXJjaCBmcm9tIHRoZSBiZWdpbm5pbmdcbiAgICAgICAgc2VhcmNoZXIucmVzZXQoMCk7XG4gICAgICAgIGRvIHtcbiAgICAgICAgICAgIG0gPSBzZWFyY2hlci5uZXh0KHRleHQpO1xuICAgICAgICAgICAgaWYgKG0pIHtcbiAgICAgICAgICAgICAgICByZXN1bHRbcmVzdWx0TGVuKytdID0gY3JlYXRlRmluZE1hdGNoKG5ldyBSYW5nZShsaW5lTnVtYmVyLCBtLmluZGV4ICsgMSArIGRlbHRhT2Zmc2V0LCBsaW5lTnVtYmVyLCBtLmluZGV4ICsgMSArIG1bMF0ubGVuZ3RoICsgZGVsdGFPZmZzZXQpLCBtLCBjYXB0dXJlTWF0Y2hlcyk7XG4gICAgICAgICAgICAgICAgaWYgKHJlc3VsdExlbiA+PSBsaW1pdFJlc3VsdENvdW50KSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiByZXN1bHRMZW47XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9IHdoaWxlIChtKTtcbiAgICAgICAgcmV0dXJuIHJlc3VsdExlbjtcbiAgICB9XG4gICAgc3RhdGljIGZpbmROZXh0TWF0Y2gobW9kZWwsIHNlYXJjaFBhcmFtcywgc2VhcmNoU3RhcnQsIGNhcHR1cmVNYXRjaGVzKSB7XG4gICAgICAgIGNvbnN0IHNlYXJjaERhdGEgPSBzZWFyY2hQYXJhbXMucGFyc2VTZWFyY2hSZXF1ZXN0KCk7XG4gICAgICAgIGlmICghc2VhcmNoRGF0YSkge1xuICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3Qgc2VhcmNoZXIgPSBuZXcgU2VhcmNoZXIoc2VhcmNoRGF0YS53b3JkU2VwYXJhdG9ycywgc2VhcmNoRGF0YS5yZWdleCk7XG4gICAgICAgIGlmIChzZWFyY2hEYXRhLnJlZ2V4Lm11bHRpbGluZSkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuX2RvRmluZE5leHRNYXRjaE11bHRpbGluZShtb2RlbCwgc2VhcmNoU3RhcnQsIHNlYXJjaGVyLCBjYXB0dXJlTWF0Y2hlcyk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRoaXMuX2RvRmluZE5leHRNYXRjaExpbmVCeUxpbmUobW9kZWwsIHNlYXJjaFN0YXJ0LCBzZWFyY2hlciwgY2FwdHVyZU1hdGNoZXMpO1xuICAgIH1cbiAgICBzdGF0aWMgX2RvRmluZE5leHRNYXRjaE11bHRpbGluZShtb2RlbCwgc2VhcmNoU3RhcnQsIHNlYXJjaGVyLCBjYXB0dXJlTWF0Y2hlcykge1xuICAgICAgICBjb25zdCBzZWFyY2hUZXh0U3RhcnQgPSBuZXcgUG9zaXRpb24oc2VhcmNoU3RhcnQubGluZU51bWJlciwgMSk7XG4gICAgICAgIGNvbnN0IGRlbHRhT2Zmc2V0ID0gbW9kZWwuZ2V0T2Zmc2V0QXQoc2VhcmNoVGV4dFN0YXJ0KTtcbiAgICAgICAgY29uc3QgbGluZUNvdW50ID0gbW9kZWwuZ2V0TGluZUNvdW50KCk7XG4gICAgICAgIC8vIFdlIGFsd2F5cyBleGVjdXRlIG11bHRpbGluZSBzZWFyY2ggb3ZlciB0aGUgbGluZXMgam9pbmVkIHdpdGggXFxuXG4gICAgICAgIC8vIFRoaXMgbWFrZXMgaXQgdGhhdCBcXG4gd2lsbCBtYXRjaCB0aGUgRU9MIGZvciBib3RoIENSTEYgYW5kIExGIG1vZGVsc1xuICAgICAgICAvLyBXZSBjb21wZW5zYXRlIGZvciBvZmZzZXQgZXJyb3JzIGluIGBfZ2V0TXVsdGlsaW5lTWF0Y2hSYW5nZWBcbiAgICAgICAgY29uc3QgdGV4dCA9IG1vZGVsLmdldFZhbHVlSW5SYW5nZShuZXcgUmFuZ2Uoc2VhcmNoVGV4dFN0YXJ0LmxpbmVOdW1iZXIsIHNlYXJjaFRleHRTdGFydC5jb2x1bW4sIGxpbmVDb3VudCwgbW9kZWwuZ2V0TGluZU1heENvbHVtbihsaW5lQ291bnQpKSwgMSAvKiBFbmRPZkxpbmVQcmVmZXJlbmNlLkxGICovKTtcbiAgICAgICAgY29uc3QgbGZDb3VudGVyID0gKG1vZGVsLmdldEVPTCgpID09PSAnXFxyXFxuJyA/IG5ldyBMaW5lRmVlZENvdW50ZXIodGV4dCkgOiBudWxsKTtcbiAgICAgICAgc2VhcmNoZXIucmVzZXQoc2VhcmNoU3RhcnQuY29sdW1uIC0gMSk7XG4gICAgICAgIGNvbnN0IG0gPSBzZWFyY2hlci5uZXh0KHRleHQpO1xuICAgICAgICBpZiAobSkge1xuICAgICAgICAgICAgcmV0dXJuIGNyZWF0ZUZpbmRNYXRjaCh0aGlzLl9nZXRNdWx0aWxpbmVNYXRjaFJhbmdlKG1vZGVsLCBkZWx0YU9mZnNldCwgdGV4dCwgbGZDb3VudGVyLCBtLmluZGV4LCBtWzBdKSwgbSwgY2FwdHVyZU1hdGNoZXMpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChzZWFyY2hTdGFydC5saW5lTnVtYmVyICE9PSAxIHx8IHNlYXJjaFN0YXJ0LmNvbHVtbiAhPT0gMSkge1xuICAgICAgICAgICAgLy8gVHJ5IGFnYWluIGZyb20gdGhlIHRvcFxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuX2RvRmluZE5leHRNYXRjaE11bHRpbGluZShtb2RlbCwgbmV3IFBvc2l0aW9uKDEsIDEpLCBzZWFyY2hlciwgY2FwdHVyZU1hdGNoZXMpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgIH1cbiAgICBzdGF0aWMgX2RvRmluZE5leHRNYXRjaExpbmVCeUxpbmUobW9kZWwsIHNlYXJjaFN0YXJ0LCBzZWFyY2hlciwgY2FwdHVyZU1hdGNoZXMpIHtcbiAgICAgICAgY29uc3QgbGluZUNvdW50ID0gbW9kZWwuZ2V0TGluZUNvdW50KCk7XG4gICAgICAgIGNvbnN0IHN0YXJ0TGluZU51bWJlciA9IHNlYXJjaFN0YXJ0LmxpbmVOdW1iZXI7XG4gICAgICAgIC8vIExvb2sgaW4gZmlyc3QgbGluZVxuICAgICAgICBjb25zdCB0ZXh0ID0gbW9kZWwuZ2V0TGluZUNvbnRlbnQoc3RhcnRMaW5lTnVtYmVyKTtcbiAgICAgICAgY29uc3QgciA9IHRoaXMuX2ZpbmRGaXJzdE1hdGNoSW5MaW5lKHNlYXJjaGVyLCB0ZXh0LCBzdGFydExpbmVOdW1iZXIsIHNlYXJjaFN0YXJ0LmNvbHVtbiwgY2FwdHVyZU1hdGNoZXMpO1xuICAgICAgICBpZiAocikge1xuICAgICAgICAgICAgcmV0dXJuIHI7XG4gICAgICAgIH1cbiAgICAgICAgZm9yIChsZXQgaSA9IDE7IGkgPD0gbGluZUNvdW50OyBpKyspIHtcbiAgICAgICAgICAgIGNvbnN0IGxpbmVJbmRleCA9IChzdGFydExpbmVOdW1iZXIgKyBpIC0gMSkgJSBsaW5lQ291bnQ7XG4gICAgICAgICAgICBjb25zdCB0ZXh0ID0gbW9kZWwuZ2V0TGluZUNvbnRlbnQobGluZUluZGV4ICsgMSk7XG4gICAgICAgICAgICBjb25zdCByID0gdGhpcy5fZmluZEZpcnN0TWF0Y2hJbkxpbmUoc2VhcmNoZXIsIHRleHQsIGxpbmVJbmRleCArIDEsIDEsIGNhcHR1cmVNYXRjaGVzKTtcbiAgICAgICAgICAgIGlmIChyKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHI7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuICAgIHN0YXRpYyBfZmluZEZpcnN0TWF0Y2hJbkxpbmUoc2VhcmNoZXIsIHRleHQsIGxpbmVOdW1iZXIsIGZyb21Db2x1bW4sIGNhcHR1cmVNYXRjaGVzKSB7XG4gICAgICAgIC8vIFNldCByZWdleCB0byBzZWFyY2ggZnJvbSBjb2x1bW5cbiAgICAgICAgc2VhcmNoZXIucmVzZXQoZnJvbUNvbHVtbiAtIDEpO1xuICAgICAgICBjb25zdCBtID0gc2VhcmNoZXIubmV4dCh0ZXh0KTtcbiAgICAgICAgaWYgKG0pIHtcbiAgICAgICAgICAgIHJldHVybiBjcmVhdGVGaW5kTWF0Y2gobmV3IFJhbmdlKGxpbmVOdW1iZXIsIG0uaW5kZXggKyAxLCBsaW5lTnVtYmVyLCBtLmluZGV4ICsgMSArIG1bMF0ubGVuZ3RoKSwgbSwgY2FwdHVyZU1hdGNoZXMpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgIH1cbiAgICBzdGF0aWMgZmluZFByZXZpb3VzTWF0Y2gobW9kZWwsIHNlYXJjaFBhcmFtcywgc2VhcmNoU3RhcnQsIGNhcHR1cmVNYXRjaGVzKSB7XG4gICAgICAgIGNvbnN0IHNlYXJjaERhdGEgPSBzZWFyY2hQYXJhbXMucGFyc2VTZWFyY2hSZXF1ZXN0KCk7XG4gICAgICAgIGlmICghc2VhcmNoRGF0YSkge1xuICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3Qgc2VhcmNoZXIgPSBuZXcgU2VhcmNoZXIoc2VhcmNoRGF0YS53b3JkU2VwYXJhdG9ycywgc2VhcmNoRGF0YS5yZWdleCk7XG4gICAgICAgIGlmIChzZWFyY2hEYXRhLnJlZ2V4Lm11bHRpbGluZSkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuX2RvRmluZFByZXZpb3VzTWF0Y2hNdWx0aWxpbmUobW9kZWwsIHNlYXJjaFN0YXJ0LCBzZWFyY2hlciwgY2FwdHVyZU1hdGNoZXMpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0aGlzLl9kb0ZpbmRQcmV2aW91c01hdGNoTGluZUJ5TGluZShtb2RlbCwgc2VhcmNoU3RhcnQsIHNlYXJjaGVyLCBjYXB0dXJlTWF0Y2hlcyk7XG4gICAgfVxuICAgIHN0YXRpYyBfZG9GaW5kUHJldmlvdXNNYXRjaE11bHRpbGluZShtb2RlbCwgc2VhcmNoU3RhcnQsIHNlYXJjaGVyLCBjYXB0dXJlTWF0Y2hlcykge1xuICAgICAgICBjb25zdCBtYXRjaGVzID0gdGhpcy5fZG9GaW5kTWF0Y2hlc011bHRpbGluZShtb2RlbCwgbmV3IFJhbmdlKDEsIDEsIHNlYXJjaFN0YXJ0LmxpbmVOdW1iZXIsIHNlYXJjaFN0YXJ0LmNvbHVtbiksIHNlYXJjaGVyLCBjYXB0dXJlTWF0Y2hlcywgMTAgKiBMSU1JVF9GSU5EX0NPVU5UKTtcbiAgICAgICAgaWYgKG1hdGNoZXMubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgcmV0dXJuIG1hdGNoZXNbbWF0Y2hlcy5sZW5ndGggLSAxXTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBsaW5lQ291bnQgPSBtb2RlbC5nZXRMaW5lQ291bnQoKTtcbiAgICAgICAgaWYgKHNlYXJjaFN0YXJ0LmxpbmVOdW1iZXIgIT09IGxpbmVDb3VudCB8fCBzZWFyY2hTdGFydC5jb2x1bW4gIT09IG1vZGVsLmdldExpbmVNYXhDb2x1bW4obGluZUNvdW50KSkge1xuICAgICAgICAgICAgLy8gVHJ5IGFnYWluIHdpdGggYWxsIGNvbnRlbnRcbiAgICAgICAgICAgIHJldHVybiB0aGlzLl9kb0ZpbmRQcmV2aW91c01hdGNoTXVsdGlsaW5lKG1vZGVsLCBuZXcgUG9zaXRpb24obGluZUNvdW50LCBtb2RlbC5nZXRMaW5lTWF4Q29sdW1uKGxpbmVDb3VudCkpLCBzZWFyY2hlciwgY2FwdHVyZU1hdGNoZXMpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgIH1cbiAgICBzdGF0aWMgX2RvRmluZFByZXZpb3VzTWF0Y2hMaW5lQnlMaW5lKG1vZGVsLCBzZWFyY2hTdGFydCwgc2VhcmNoZXIsIGNhcHR1cmVNYXRjaGVzKSB7XG4gICAgICAgIGNvbnN0IGxpbmVDb3VudCA9IG1vZGVsLmdldExpbmVDb3VudCgpO1xuICAgICAgICBjb25zdCBzdGFydExpbmVOdW1iZXIgPSBzZWFyY2hTdGFydC5saW5lTnVtYmVyO1xuICAgICAgICAvLyBMb29rIGluIGZpcnN0IGxpbmVcbiAgICAgICAgY29uc3QgdGV4dCA9IG1vZGVsLmdldExpbmVDb250ZW50KHN0YXJ0TGluZU51bWJlcikuc3Vic3RyaW5nKDAsIHNlYXJjaFN0YXJ0LmNvbHVtbiAtIDEpO1xuICAgICAgICBjb25zdCByID0gdGhpcy5fZmluZExhc3RNYXRjaEluTGluZShzZWFyY2hlciwgdGV4dCwgc3RhcnRMaW5lTnVtYmVyLCBjYXB0dXJlTWF0Y2hlcyk7XG4gICAgICAgIGlmIChyKSB7XG4gICAgICAgICAgICByZXR1cm4gcjtcbiAgICAgICAgfVxuICAgICAgICBmb3IgKGxldCBpID0gMTsgaSA8PSBsaW5lQ291bnQ7IGkrKykge1xuICAgICAgICAgICAgY29uc3QgbGluZUluZGV4ID0gKGxpbmVDb3VudCArIHN0YXJ0TGluZU51bWJlciAtIGkgLSAxKSAlIGxpbmVDb3VudDtcbiAgICAgICAgICAgIGNvbnN0IHRleHQgPSBtb2RlbC5nZXRMaW5lQ29udGVudChsaW5lSW5kZXggKyAxKTtcbiAgICAgICAgICAgIGNvbnN0IHIgPSB0aGlzLl9maW5kTGFzdE1hdGNoSW5MaW5lKHNlYXJjaGVyLCB0ZXh0LCBsaW5lSW5kZXggKyAxLCBjYXB0dXJlTWF0Y2hlcyk7XG4gICAgICAgICAgICBpZiAocikge1xuICAgICAgICAgICAgICAgIHJldHVybiByO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgIH1cbiAgICBzdGF0aWMgX2ZpbmRMYXN0TWF0Y2hJbkxpbmUoc2VhcmNoZXIsIHRleHQsIGxpbmVOdW1iZXIsIGNhcHR1cmVNYXRjaGVzKSB7XG4gICAgICAgIGxldCBiZXN0UmVzdWx0ID0gbnVsbDtcbiAgICAgICAgbGV0IG07XG4gICAgICAgIHNlYXJjaGVyLnJlc2V0KDApO1xuICAgICAgICB3aGlsZSAoKG0gPSBzZWFyY2hlci5uZXh0KHRleHQpKSkge1xuICAgICAgICAgICAgYmVzdFJlc3VsdCA9IGNyZWF0ZUZpbmRNYXRjaChuZXcgUmFuZ2UobGluZU51bWJlciwgbS5pbmRleCArIDEsIGxpbmVOdW1iZXIsIG0uaW5kZXggKyAxICsgbVswXS5sZW5ndGgpLCBtLCBjYXB0dXJlTWF0Y2hlcyk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGJlc3RSZXN1bHQ7XG4gICAgfVxufVxuZnVuY3Rpb24gbGVmdElzV29yZEJvdW5kYXkod29yZFNlcGFyYXRvcnMsIHRleHQsIHRleHRMZW5ndGgsIG1hdGNoU3RhcnRJbmRleCwgbWF0Y2hMZW5ndGgpIHtcbiAgICBpZiAobWF0Y2hTdGFydEluZGV4ID09PSAwKSB7XG4gICAgICAgIC8vIE1hdGNoIHN0YXJ0cyBhdCBzdGFydCBvZiBzdHJpbmdcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICAgIGNvbnN0IGNoYXJCZWZvcmUgPSB0ZXh0LmNoYXJDb2RlQXQobWF0Y2hTdGFydEluZGV4IC0gMSk7XG4gICAgaWYgKHdvcmRTZXBhcmF0b3JzLmdldChjaGFyQmVmb3JlKSAhPT0gMCAvKiBXb3JkQ2hhcmFjdGVyQ2xhc3MuUmVndWxhciAqLykge1xuICAgICAgICAvLyBUaGUgY2hhcmFjdGVyIGJlZm9yZSB0aGUgbWF0Y2ggaXMgYSB3b3JkIHNlcGFyYXRvclxuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gICAgaWYgKGNoYXJCZWZvcmUgPT09IDEzIC8qIENoYXJDb2RlLkNhcnJpYWdlUmV0dXJuICovIHx8IGNoYXJCZWZvcmUgPT09IDEwIC8qIENoYXJDb2RlLkxpbmVGZWVkICovKSB7XG4gICAgICAgIC8vIFRoZSBjaGFyYWN0ZXIgYmVmb3JlIHRoZSBtYXRjaCBpcyBsaW5lIGJyZWFrIG9yIGNhcnJpYWdlIHJldHVybi5cbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICAgIGlmIChtYXRjaExlbmd0aCA+IDApIHtcbiAgICAgICAgY29uc3QgZmlyc3RDaGFySW5NYXRjaCA9IHRleHQuY2hhckNvZGVBdChtYXRjaFN0YXJ0SW5kZXgpO1xuICAgICAgICBpZiAod29yZFNlcGFyYXRvcnMuZ2V0KGZpcnN0Q2hhckluTWF0Y2gpICE9PSAwIC8qIFdvcmRDaGFyYWN0ZXJDbGFzcy5SZWd1bGFyICovKSB7XG4gICAgICAgICAgICAvLyBUaGUgZmlyc3QgY2hhcmFjdGVyIGluc2lkZSB0aGUgbWF0Y2ggaXMgYSB3b3JkIHNlcGFyYXRvclxuICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIGZhbHNlO1xufVxuZnVuY3Rpb24gcmlnaHRJc1dvcmRCb3VuZGF5KHdvcmRTZXBhcmF0b3JzLCB0ZXh0LCB0ZXh0TGVuZ3RoLCBtYXRjaFN0YXJ0SW5kZXgsIG1hdGNoTGVuZ3RoKSB7XG4gICAgaWYgKG1hdGNoU3RhcnRJbmRleCArIG1hdGNoTGVuZ3RoID09PSB0ZXh0TGVuZ3RoKSB7XG4gICAgICAgIC8vIE1hdGNoIGVuZHMgYXQgZW5kIG9mIHN0cmluZ1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gICAgY29uc3QgY2hhckFmdGVyID0gdGV4dC5jaGFyQ29kZUF0KG1hdGNoU3RhcnRJbmRleCArIG1hdGNoTGVuZ3RoKTtcbiAgICBpZiAod29yZFNlcGFyYXRvcnMuZ2V0KGNoYXJBZnRlcikgIT09IDAgLyogV29yZENoYXJhY3RlckNsYXNzLlJlZ3VsYXIgKi8pIHtcbiAgICAgICAgLy8gVGhlIGNoYXJhY3RlciBhZnRlciB0aGUgbWF0Y2ggaXMgYSB3b3JkIHNlcGFyYXRvclxuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gICAgaWYgKGNoYXJBZnRlciA9PT0gMTMgLyogQ2hhckNvZGUuQ2FycmlhZ2VSZXR1cm4gKi8gfHwgY2hhckFmdGVyID09PSAxMCAvKiBDaGFyQ29kZS5MaW5lRmVlZCAqLykge1xuICAgICAgICAvLyBUaGUgY2hhcmFjdGVyIGFmdGVyIHRoZSBtYXRjaCBpcyBsaW5lIGJyZWFrIG9yIGNhcnJpYWdlIHJldHVybi5cbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICAgIGlmIChtYXRjaExlbmd0aCA+IDApIHtcbiAgICAgICAgY29uc3QgbGFzdENoYXJJbk1hdGNoID0gdGV4dC5jaGFyQ29kZUF0KG1hdGNoU3RhcnRJbmRleCArIG1hdGNoTGVuZ3RoIC0gMSk7XG4gICAgICAgIGlmICh3b3JkU2VwYXJhdG9ycy5nZXQobGFzdENoYXJJbk1hdGNoKSAhPT0gMCAvKiBXb3JkQ2hhcmFjdGVyQ2xhc3MuUmVndWxhciAqLykge1xuICAgICAgICAgICAgLy8gVGhlIGxhc3QgY2hhcmFjdGVyIGluIHRoZSBtYXRjaCBpcyBhIHdvcmQgc2VwYXJhdG9yXG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gZmFsc2U7XG59XG5leHBvcnQgZnVuY3Rpb24gaXNWYWxpZE1hdGNoKHdvcmRTZXBhcmF0b3JzLCB0ZXh0LCB0ZXh0TGVuZ3RoLCBtYXRjaFN0YXJ0SW5kZXgsIG1hdGNoTGVuZ3RoKSB7XG4gICAgcmV0dXJuIChsZWZ0SXNXb3JkQm91bmRheSh3b3JkU2VwYXJhdG9ycywgdGV4dCwgdGV4dExlbmd0aCwgbWF0Y2hTdGFydEluZGV4LCBtYXRjaExlbmd0aClcbiAgICAgICAgJiYgcmlnaHRJc1dvcmRCb3VuZGF5KHdvcmRTZXBhcmF0b3JzLCB0ZXh0LCB0ZXh0TGVuZ3RoLCBtYXRjaFN0YXJ0SW5kZXgsIG1hdGNoTGVuZ3RoKSk7XG59XG5leHBvcnQgY2xhc3MgU2VhcmNoZXIge1xuICAgIGNvbnN0cnVjdG9yKHdvcmRTZXBhcmF0b3JzLCBzZWFyY2hSZWdleCkge1xuICAgICAgICB0aGlzLl93b3JkU2VwYXJhdG9ycyA9IHdvcmRTZXBhcmF0b3JzO1xuICAgICAgICB0aGlzLl9zZWFyY2hSZWdleCA9IHNlYXJjaFJlZ2V4O1xuICAgICAgICB0aGlzLl9wcmV2TWF0Y2hTdGFydEluZGV4ID0gLTE7XG4gICAgICAgIHRoaXMuX3ByZXZNYXRjaExlbmd0aCA9IDA7XG4gICAgfVxuICAgIHJlc2V0KGxhc3RJbmRleCkge1xuICAgICAgICB0aGlzLl9zZWFyY2hSZWdleC5sYXN0SW5kZXggPSBsYXN0SW5kZXg7XG4gICAgICAgIHRoaXMuX3ByZXZNYXRjaFN0YXJ0SW5kZXggPSAtMTtcbiAgICAgICAgdGhpcy5fcHJldk1hdGNoTGVuZ3RoID0gMDtcbiAgICB9XG4gICAgbmV4dCh0ZXh0KSB7XG4gICAgICAgIGNvbnN0IHRleHRMZW5ndGggPSB0ZXh0Lmxlbmd0aDtcbiAgICAgICAgbGV0IG07XG4gICAgICAgIGRvIHtcbiAgICAgICAgICAgIGlmICh0aGlzLl9wcmV2TWF0Y2hTdGFydEluZGV4ICsgdGhpcy5fcHJldk1hdGNoTGVuZ3RoID09PSB0ZXh0TGVuZ3RoKSB7XG4gICAgICAgICAgICAgICAgLy8gUmVhY2hlZCB0aGUgZW5kIG9mIHRoZSBsaW5lXG4gICAgICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBtID0gdGhpcy5fc2VhcmNoUmVnZXguZXhlYyh0ZXh0KTtcbiAgICAgICAgICAgIGlmICghbSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY29uc3QgbWF0Y2hTdGFydEluZGV4ID0gbS5pbmRleDtcbiAgICAgICAgICAgIGNvbnN0IG1hdGNoTGVuZ3RoID0gbVswXS5sZW5ndGg7XG4gICAgICAgICAgICBpZiAobWF0Y2hTdGFydEluZGV4ID09PSB0aGlzLl9wcmV2TWF0Y2hTdGFydEluZGV4ICYmIG1hdGNoTGVuZ3RoID09PSB0aGlzLl9wcmV2TWF0Y2hMZW5ndGgpIHtcbiAgICAgICAgICAgICAgICBpZiAobWF0Y2hMZW5ndGggPT09IDApIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gdGhlIHNlYXJjaCByZXN1bHQgaXMgYW4gZW1wdHkgc3RyaW5nIGFuZCB3b24ndCBhZHZhbmNlIGByZWdleC5sYXN0SW5kZXhgLCBzbyBgcmVnZXguZXhlY2Agd2lsbCBzdHVjayBoZXJlXG4gICAgICAgICAgICAgICAgICAgIC8vIHdlIGF0dGVtcHQgdG8gcmVjb3ZlciBmcm9tIHRoYXQgYnkgYWR2YW5jaW5nIGJ5IHR3byBpZiBzdXJyb2dhdGUgcGFpciBmb3VuZCBhbmQgYnkgb25lIG90aGVyd2lzZVxuICAgICAgICAgICAgICAgICAgICBpZiAoc3RyaW5ncy5nZXROZXh0Q29kZVBvaW50KHRleHQsIHRleHRMZW5ndGgsIHRoaXMuX3NlYXJjaFJlZ2V4Lmxhc3RJbmRleCkgPiAweEZGRkYpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX3NlYXJjaFJlZ2V4Lmxhc3RJbmRleCArPSAyO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fc2VhcmNoUmVnZXgubGFzdEluZGV4ICs9IDE7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIC8vIEV4aXQgZWFybHkgaWYgdGhlIHJlZ2V4IG1hdGNoZXMgdGhlIHNhbWUgcmFuZ2UgdHdpY2VcbiAgICAgICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRoaXMuX3ByZXZNYXRjaFN0YXJ0SW5kZXggPSBtYXRjaFN0YXJ0SW5kZXg7XG4gICAgICAgICAgICB0aGlzLl9wcmV2TWF0Y2hMZW5ndGggPSBtYXRjaExlbmd0aDtcbiAgICAgICAgICAgIGlmICghdGhpcy5fd29yZFNlcGFyYXRvcnMgfHwgaXNWYWxpZE1hdGNoKHRoaXMuX3dvcmRTZXBhcmF0b3JzLCB0ZXh0LCB0ZXh0TGVuZ3RoLCBtYXRjaFN0YXJ0SW5kZXgsIG1hdGNoTGVuZ3RoKSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBtO1xuICAgICAgICAgICAgfVxuICAgICAgICB9IHdoaWxlIChtKTtcbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxufVxuIiwgIi8qLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gKiAgQ29weXJpZ2h0IChjKSBNaWNyb3NvZnQgQ29ycG9yYXRpb24uIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKiAgTGljZW5zZWQgdW5kZXIgdGhlIE1JVCBMaWNlbnNlLiBTZWUgTGljZW5zZS50eHQgaW4gdGhlIHByb2plY3Qgcm9vdCBmb3IgbGljZW5zZSBpbmZvcm1hdGlvbi5cbiAqLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qL1xuaW1wb3J0IHsgQnVnSW5kaWNhdGluZ0Vycm9yLCBvblVuZXhwZWN0ZWRFcnJvciB9IGZyb20gJy4vZXJyb3JzLmpzJztcbi8qKlxuICogVGhyb3dzIGFuIGVycm9yIHdpdGggdGhlIHByb3ZpZGVkIG1lc3NhZ2UgaWYgdGhlIHByb3ZpZGVkIHZhbHVlIGRvZXMgbm90IGV2YWx1YXRlIHRvIGEgdHJ1ZSBKYXZhc2NyaXB0IHZhbHVlLlxuICpcbiAqIEBkZXByZWNhdGVkIFVzZSBgYXNzZXJ0KC4uLilgIGluc3RlYWQuXG4gKiBUaGlzIG1ldGhvZCBpcyB1c3VhbGx5IHVzZWQgbGlrZSB0aGlzOlxuICogYGBgdHNcbiAqIGltcG9ydCAqIGFzIGFzc2VydCBmcm9tICd2cy9iYXNlL2NvbW1vbi9hc3NlcnQnO1xuICogYXNzZXJ0Lm9rKC4uLik7XG4gKiBgYGBcbiAqXG4gKiBIb3dldmVyLCBgYXNzZXJ0YCBpbiB0aGF0IGV4YW1wbGUgaXMgYSB1c2VyIGNob3NlbiBuYW1lLlxuICogVGhlcmUgaXMgbm8gdG9vbGluZyBmb3IgZ2VuZXJhdGluZyBzdWNoIGFuIGltcG9ydCBzdGF0ZW1lbnQuXG4gKiBUaHVzLCB0aGUgYGFzc2VydCguLi4pYCBmdW5jdGlvbiBzaG91bGQgYmUgdXNlZCBpbnN0ZWFkLlxuICovXG5leHBvcnQgZnVuY3Rpb24gb2sodmFsdWUsIG1lc3NhZ2UpIHtcbiAgICBpZiAoIXZhbHVlKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihtZXNzYWdlID8gYEFzc2VydGlvbiBmYWlsZWQgKCR7bWVzc2FnZX0pYCA6ICdBc3NlcnRpb24gRmFpbGVkJyk7XG4gICAgfVxufVxuZXhwb3J0IGZ1bmN0aW9uIGFzc2VydE5ldmVyKHZhbHVlLCBtZXNzYWdlID0gJ1VucmVhY2hhYmxlJykge1xuICAgIHRocm93IG5ldyBFcnJvcihtZXNzYWdlKTtcbn1cbi8qKlxuICogTGlrZSBhc3NlcnQsIGJ1dCBkb2Vzbid0IHRocm93LlxuICovXG5leHBvcnQgZnVuY3Rpb24gc29mdEFzc2VydChjb25kaXRpb24pIHtcbiAgICBpZiAoIWNvbmRpdGlvbikge1xuICAgICAgICBvblVuZXhwZWN0ZWRFcnJvcihuZXcgQnVnSW5kaWNhdGluZ0Vycm9yKCdTb2Z0IEFzc2VydGlvbiBGYWlsZWQnKSk7XG4gICAgfVxufVxuLyoqXG4gKiBjb25kaXRpb24gbXVzdCBiZSBzaWRlLWVmZmVjdCBmcmVlIVxuICovXG5leHBvcnQgZnVuY3Rpb24gYXNzZXJ0Rm4oY29uZGl0aW9uKSB7XG4gICAgaWYgKCFjb25kaXRpb24oKSkge1xuICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tZGVidWdnZXJcbiAgICAgICAgZGVidWdnZXI7XG4gICAgICAgIC8vIFJlZXZhbHVhdGUgYGNvbmRpdGlvbmAgYWdhaW4gdG8gbWFrZSBkZWJ1Z2dpbmcgZWFzaWVyXG4gICAgICAgIGNvbmRpdGlvbigpO1xuICAgICAgICBvblVuZXhwZWN0ZWRFcnJvcihuZXcgQnVnSW5kaWNhdGluZ0Vycm9yKCdBc3NlcnRpb24gRmFpbGVkJykpO1xuICAgIH1cbn1cbmV4cG9ydCBmdW5jdGlvbiBjaGVja0FkamFjZW50SXRlbXMoaXRlbXMsIHByZWRpY2F0ZSkge1xuICAgIGxldCBpID0gMDtcbiAgICB3aGlsZSAoaSA8IGl0ZW1zLmxlbmd0aCAtIDEpIHtcbiAgICAgICAgY29uc3QgYSA9IGl0ZW1zW2ldO1xuICAgICAgICBjb25zdCBiID0gaXRlbXNbaSArIDFdO1xuICAgICAgICBpZiAoIXByZWRpY2F0ZShhLCBiKSkge1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgICAgIGkrKztcbiAgICB9XG4gICAgcmV0dXJuIHRydWU7XG59XG4iLCAiLyotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAqICBDb3B5cmlnaHQgKGMpIE1pY3Jvc29mdCBDb3Jwb3JhdGlvbi4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqICBMaWNlbnNlZCB1bmRlciB0aGUgTUlUIExpY2Vuc2UuIFNlZSBMaWNlbnNlLnR4dCBpbiB0aGUgcHJvamVjdCByb290IGZvciBsaWNlbnNlIGluZm9ybWF0aW9uLlxuICotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSovXG5pbXBvcnQgeyBSYW5nZSB9IGZyb20gJy4uL2NvcmUvcmFuZ2UuanMnO1xuaW1wb3J0IHsgU2VhcmNoZXIgfSBmcm9tICcuLi9tb2RlbC90ZXh0TW9kZWxTZWFyY2guanMnO1xuaW1wb3J0ICogYXMgc3RyaW5ncyBmcm9tICcuLi8uLi8uLi9iYXNlL2NvbW1vbi9zdHJpbmdzLmpzJztcbmltcG9ydCB7IGFzc2VydE5ldmVyIH0gZnJvbSAnLi4vLi4vLi4vYmFzZS9jb21tb24vYXNzZXJ0LmpzJztcbmltcG9ydCB7IERFRkFVTFRfV09SRF9SRUdFWFAsIGdldFdvcmRBdFRleHQgfSBmcm9tICcuLi9jb3JlL3dvcmRIZWxwZXIuanMnO1xuZXhwb3J0IGNsYXNzIFVuaWNvZGVUZXh0TW9kZWxIaWdobGlnaHRlciB7XG4gICAgc3RhdGljIGNvbXB1dGVVbmljb2RlSGlnaGxpZ2h0cyhtb2RlbCwgb3B0aW9ucywgcmFuZ2UpIHtcbiAgICAgICAgY29uc3Qgc3RhcnRMaW5lID0gcmFuZ2UgPyByYW5nZS5zdGFydExpbmVOdW1iZXIgOiAxO1xuICAgICAgICBjb25zdCBlbmRMaW5lID0gcmFuZ2UgPyByYW5nZS5lbmRMaW5lTnVtYmVyIDogbW9kZWwuZ2V0TGluZUNvdW50KCk7XG4gICAgICAgIGNvbnN0IGNvZGVQb2ludEhpZ2hsaWdodGVyID0gbmV3IENvZGVQb2ludEhpZ2hsaWdodGVyKG9wdGlvbnMpO1xuICAgICAgICBjb25zdCBjYW5kaWRhdGVzID0gY29kZVBvaW50SGlnaGxpZ2h0ZXIuZ2V0Q2FuZGlkYXRlQ29kZVBvaW50cygpO1xuICAgICAgICBsZXQgcmVnZXg7XG4gICAgICAgIGlmIChjYW5kaWRhdGVzID09PSAnYWxsTm9uQmFzaWNBc2NpaScpIHtcbiAgICAgICAgICAgIHJlZ2V4ID0gbmV3IFJlZ0V4cCgnW15cXFxcdFxcXFxuXFxcXHJcXFxceDIwLVxcXFx4N0VdJywgJ2cnKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHJlZ2V4ID0gbmV3IFJlZ0V4cChgJHtidWlsZFJlZ0V4cENoYXJDbGFzc0V4cHIoQXJyYXkuZnJvbShjYW5kaWRhdGVzKSl9YCwgJ2cnKTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBzZWFyY2hlciA9IG5ldyBTZWFyY2hlcihudWxsLCByZWdleCk7XG4gICAgICAgIGNvbnN0IHJhbmdlcyA9IFtdO1xuICAgICAgICBsZXQgaGFzTW9yZSA9IGZhbHNlO1xuICAgICAgICBsZXQgbTtcbiAgICAgICAgbGV0IGFtYmlndW91c0NoYXJhY3RlckNvdW50ID0gMDtcbiAgICAgICAgbGV0IGludmlzaWJsZUNoYXJhY3RlckNvdW50ID0gMDtcbiAgICAgICAgbGV0IG5vbkJhc2ljQXNjaWlDaGFyYWN0ZXJDb3VudCA9IDA7XG4gICAgICAgIGZvckxvb3A6IGZvciAobGV0IGxpbmVOdW1iZXIgPSBzdGFydExpbmUsIGxpbmVDb3VudCA9IGVuZExpbmU7IGxpbmVOdW1iZXIgPD0gbGluZUNvdW50OyBsaW5lTnVtYmVyKyspIHtcbiAgICAgICAgICAgIGNvbnN0IGxpbmVDb250ZW50ID0gbW9kZWwuZ2V0TGluZUNvbnRlbnQobGluZU51bWJlcik7XG4gICAgICAgICAgICBjb25zdCBsaW5lTGVuZ3RoID0gbGluZUNvbnRlbnQubGVuZ3RoO1xuICAgICAgICAgICAgLy8gUmVzZXQgcmVnZXggdG8gc2VhcmNoIGZyb20gdGhlIGJlZ2lubmluZ1xuICAgICAgICAgICAgc2VhcmNoZXIucmVzZXQoMCk7XG4gICAgICAgICAgICBkbyB7XG4gICAgICAgICAgICAgICAgbSA9IHNlYXJjaGVyLm5leHQobGluZUNvbnRlbnQpO1xuICAgICAgICAgICAgICAgIGlmIChtKSB7XG4gICAgICAgICAgICAgICAgICAgIGxldCBzdGFydEluZGV4ID0gbS5pbmRleDtcbiAgICAgICAgICAgICAgICAgICAgbGV0IGVuZEluZGV4ID0gbS5pbmRleCArIG1bMF0ubGVuZ3RoO1xuICAgICAgICAgICAgICAgICAgICAvLyBFeHRlbmQgcmFuZ2UgdG8gZW50aXJlIGNvZGUgcG9pbnRcbiAgICAgICAgICAgICAgICAgICAgaWYgKHN0YXJ0SW5kZXggPiAwKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBjaGFyQ29kZUJlZm9yZSA9IGxpbmVDb250ZW50LmNoYXJDb2RlQXQoc3RhcnRJbmRleCAtIDEpO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHN0cmluZ3MuaXNIaWdoU3Vycm9nYXRlKGNoYXJDb2RlQmVmb3JlKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0YXJ0SW5kZXgtLTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBpZiAoZW5kSW5kZXggKyAxIDwgbGluZUxlbmd0aCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgY2hhckNvZGVCZWZvcmUgPSBsaW5lQ29udGVudC5jaGFyQ29kZUF0KGVuZEluZGV4IC0gMSk7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoc3RyaW5ncy5pc0hpZ2hTdXJyb2dhdGUoY2hhckNvZGVCZWZvcmUpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZW5kSW5kZXgrKztcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBjb25zdCBzdHIgPSBsaW5lQ29udGVudC5zdWJzdHJpbmcoc3RhcnRJbmRleCwgZW5kSW5kZXgpO1xuICAgICAgICAgICAgICAgICAgICBsZXQgd29yZCA9IGdldFdvcmRBdFRleHQoc3RhcnRJbmRleCArIDEsIERFRkFVTFRfV09SRF9SRUdFWFAsIGxpbmVDb250ZW50LCAwKTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHdvcmQgJiYgd29yZC5lbmRDb2x1bW4gPD0gc3RhcnRJbmRleCArIDEpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIFRoZSB3b3JkIGRvZXMgbm90IGluY2x1ZGUgdGhlIHByb2JsZW1hdGljIGNoYXJhY3RlciwgaWdub3JlIHRoZSB3b3JkXG4gICAgICAgICAgICAgICAgICAgICAgICB3b3JkID0gbnVsbDtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBjb25zdCBoaWdobGlnaHRSZWFzb24gPSBjb2RlUG9pbnRIaWdobGlnaHRlci5zaG91bGRIaWdobGlnaHROb25CYXNpY0FTQ0lJKHN0ciwgd29yZCA/IHdvcmQud29yZCA6IG51bGwpO1xuICAgICAgICAgICAgICAgICAgICBpZiAoaGlnaGxpZ2h0UmVhc29uICE9PSAwIC8qIFNpbXBsZUhpZ2hsaWdodFJlYXNvbi5Ob25lICovKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoaGlnaGxpZ2h0UmVhc29uID09PSAzIC8qIFNpbXBsZUhpZ2hsaWdodFJlYXNvbi5BbWJpZ3VvdXMgKi8pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhbWJpZ3VvdXNDaGFyYWN0ZXJDb3VudCsrO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgZWxzZSBpZiAoaGlnaGxpZ2h0UmVhc29uID09PSAyIC8qIFNpbXBsZUhpZ2hsaWdodFJlYXNvbi5JbnZpc2libGUgKi8pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpbnZpc2libGVDaGFyYWN0ZXJDb3VudCsrO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgZWxzZSBpZiAoaGlnaGxpZ2h0UmVhc29uID09PSAxIC8qIFNpbXBsZUhpZ2hsaWdodFJlYXNvbi5Ob25CYXNpY0FTQ0lJICovKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbm9uQmFzaWNBc2NpaUNoYXJhY3RlckNvdW50Kys7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhc3NlcnROZXZlcihoaWdobGlnaHRSZWFzb24pO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgTUFYX1JFU1VMVF9MRU5HVEggPSAxMDAwO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHJhbmdlcy5sZW5ndGggPj0gTUFYX1JFU1VMVF9MRU5HVEgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBoYXNNb3JlID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhayBmb3JMb29wO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgcmFuZ2VzLnB1c2gobmV3IFJhbmdlKGxpbmVOdW1iZXIsIHN0YXJ0SW5kZXggKyAxLCBsaW5lTnVtYmVyLCBlbmRJbmRleCArIDEpKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0gd2hpbGUgKG0pO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICByYW5nZXMsXG4gICAgICAgICAgICBoYXNNb3JlLFxuICAgICAgICAgICAgYW1iaWd1b3VzQ2hhcmFjdGVyQ291bnQsXG4gICAgICAgICAgICBpbnZpc2libGVDaGFyYWN0ZXJDb3VudCxcbiAgICAgICAgICAgIG5vbkJhc2ljQXNjaWlDaGFyYWN0ZXJDb3VudFxuICAgICAgICB9O1xuICAgIH1cbiAgICBzdGF0aWMgY29tcHV0ZVVuaWNvZGVIaWdobGlnaHRSZWFzb24oY2hhciwgb3B0aW9ucykge1xuICAgICAgICBjb25zdCBjb2RlUG9pbnRIaWdobGlnaHRlciA9IG5ldyBDb2RlUG9pbnRIaWdobGlnaHRlcihvcHRpb25zKTtcbiAgICAgICAgY29uc3QgcmVhc29uID0gY29kZVBvaW50SGlnaGxpZ2h0ZXIuc2hvdWxkSGlnaGxpZ2h0Tm9uQmFzaWNBU0NJSShjaGFyLCBudWxsKTtcbiAgICAgICAgc3dpdGNoIChyZWFzb24pIHtcbiAgICAgICAgICAgIGNhc2UgMCAvKiBTaW1wbGVIaWdobGlnaHRSZWFzb24uTm9uZSAqLzpcbiAgICAgICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgICAgIGNhc2UgMiAvKiBTaW1wbGVIaWdobGlnaHRSZWFzb24uSW52aXNpYmxlICovOlxuICAgICAgICAgICAgICAgIHJldHVybiB7IGtpbmQ6IDEgLyogVW5pY29kZUhpZ2hsaWdodGVyUmVhc29uS2luZC5JbnZpc2libGUgKi8gfTtcbiAgICAgICAgICAgIGNhc2UgMyAvKiBTaW1wbGVIaWdobGlnaHRSZWFzb24uQW1iaWd1b3VzICovOiB7XG4gICAgICAgICAgICAgICAgY29uc3QgY29kZVBvaW50ID0gY2hhci5jb2RlUG9pbnRBdCgwKTtcbiAgICAgICAgICAgICAgICBjb25zdCBwcmltYXJ5Q29uZnVzYWJsZSA9IGNvZGVQb2ludEhpZ2hsaWdodGVyLmFtYmlndW91c0NoYXJhY3RlcnMuZ2V0UHJpbWFyeUNvbmZ1c2FibGUoY29kZVBvaW50KTtcbiAgICAgICAgICAgICAgICBjb25zdCBub3RBbWJpZ3VvdXNJbkxvY2FsZXMgPSBzdHJpbmdzLkFtYmlndW91c0NoYXJhY3RlcnMuZ2V0TG9jYWxlcygpLmZpbHRlcigobCkgPT4gIXN0cmluZ3MuQW1iaWd1b3VzQ2hhcmFjdGVycy5nZXRJbnN0YW5jZShuZXcgU2V0KFsuLi5vcHRpb25zLmFsbG93ZWRMb2NhbGVzLCBsXSkpLmlzQW1iaWd1b3VzKGNvZGVQb2ludCkpO1xuICAgICAgICAgICAgICAgIHJldHVybiB7IGtpbmQ6IDAgLyogVW5pY29kZUhpZ2hsaWdodGVyUmVhc29uS2luZC5BbWJpZ3VvdXMgKi8sIGNvbmZ1c2FibGVXaXRoOiBTdHJpbmcuZnJvbUNvZGVQb2ludChwcmltYXJ5Q29uZnVzYWJsZSksIG5vdEFtYmlndW91c0luTG9jYWxlcyB9O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY2FzZSAxIC8qIFNpbXBsZUhpZ2hsaWdodFJlYXNvbi5Ob25CYXNpY0FTQ0lJICovOlxuICAgICAgICAgICAgICAgIHJldHVybiB7IGtpbmQ6IDIgLyogVW5pY29kZUhpZ2hsaWdodGVyUmVhc29uS2luZC5Ob25CYXNpY0FzY2lpICovIH07XG4gICAgICAgIH1cbiAgICB9XG59XG5mdW5jdGlvbiBidWlsZFJlZ0V4cENoYXJDbGFzc0V4cHIoY29kZVBvaW50cywgZmxhZ3MpIHtcbiAgICBjb25zdCBzcmMgPSBgWyR7c3RyaW5ncy5lc2NhcGVSZWdFeHBDaGFyYWN0ZXJzKGNvZGVQb2ludHMubWFwKChpKSA9PiBTdHJpbmcuZnJvbUNvZGVQb2ludChpKSkuam9pbignJykpfV1gO1xuICAgIHJldHVybiBzcmM7XG59XG5jbGFzcyBDb2RlUG9pbnRIaWdobGlnaHRlciB7XG4gICAgY29uc3RydWN0b3Iob3B0aW9ucykge1xuICAgICAgICB0aGlzLm9wdGlvbnMgPSBvcHRpb25zO1xuICAgICAgICB0aGlzLmFsbG93ZWRDb2RlUG9pbnRzID0gbmV3IFNldChvcHRpb25zLmFsbG93ZWRDb2RlUG9pbnRzKTtcbiAgICAgICAgdGhpcy5hbWJpZ3VvdXNDaGFyYWN0ZXJzID0gc3RyaW5ncy5BbWJpZ3VvdXNDaGFyYWN0ZXJzLmdldEluc3RhbmNlKG5ldyBTZXQob3B0aW9ucy5hbGxvd2VkTG9jYWxlcykpO1xuICAgIH1cbiAgICBnZXRDYW5kaWRhdGVDb2RlUG9pbnRzKCkge1xuICAgICAgICBpZiAodGhpcy5vcHRpb25zLm5vbkJhc2ljQVNDSUkpIHtcbiAgICAgICAgICAgIHJldHVybiAnYWxsTm9uQmFzaWNBc2NpaSc7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3Qgc2V0ID0gbmV3IFNldCgpO1xuICAgICAgICBpZiAodGhpcy5vcHRpb25zLmludmlzaWJsZUNoYXJhY3RlcnMpIHtcbiAgICAgICAgICAgIGZvciAoY29uc3QgY3Agb2Ygc3RyaW5ncy5JbnZpc2libGVDaGFyYWN0ZXJzLmNvZGVQb2ludHMpIHtcbiAgICAgICAgICAgICAgICBpZiAoIWlzQWxsb3dlZEludmlzaWJsZUNoYXJhY3RlcihTdHJpbmcuZnJvbUNvZGVQb2ludChjcCkpKSB7XG4gICAgICAgICAgICAgICAgICAgIHNldC5hZGQoY3ApO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBpZiAodGhpcy5vcHRpb25zLmFtYmlndW91c0NoYXJhY3RlcnMpIHtcbiAgICAgICAgICAgIGZvciAoY29uc3QgY3Agb2YgdGhpcy5hbWJpZ3VvdXNDaGFyYWN0ZXJzLmdldENvbmZ1c2FibGVDb2RlUG9pbnRzKCkpIHtcbiAgICAgICAgICAgICAgICBzZXQuYWRkKGNwKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBmb3IgKGNvbnN0IGNwIG9mIHRoaXMuYWxsb3dlZENvZGVQb2ludHMpIHtcbiAgICAgICAgICAgIHNldC5kZWxldGUoY3ApO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBzZXQ7XG4gICAgfVxuICAgIHNob3VsZEhpZ2hsaWdodE5vbkJhc2ljQVNDSUkoY2hhcmFjdGVyLCB3b3JkQ29udGV4dCkge1xuICAgICAgICBjb25zdCBjb2RlUG9pbnQgPSBjaGFyYWN0ZXIuY29kZVBvaW50QXQoMCk7XG4gICAgICAgIGlmICh0aGlzLmFsbG93ZWRDb2RlUG9pbnRzLmhhcyhjb2RlUG9pbnQpKSB7XG4gICAgICAgICAgICByZXR1cm4gMCAvKiBTaW1wbGVIaWdobGlnaHRSZWFzb24uTm9uZSAqLztcbiAgICAgICAgfVxuICAgICAgICBpZiAodGhpcy5vcHRpb25zLm5vbkJhc2ljQVNDSUkpIHtcbiAgICAgICAgICAgIHJldHVybiAxIC8qIFNpbXBsZUhpZ2hsaWdodFJlYXNvbi5Ob25CYXNpY0FTQ0lJICovO1xuICAgICAgICB9XG4gICAgICAgIGxldCBoYXNCYXNpY0FTQ0lJQ2hhcmFjdGVycyA9IGZhbHNlO1xuICAgICAgICBsZXQgaGFzTm9uQ29uZnVzYWJsZU5vbkJhc2ljQXNjaWlDaGFyYWN0ZXIgPSBmYWxzZTtcbiAgICAgICAgaWYgKHdvcmRDb250ZXh0KSB7XG4gICAgICAgICAgICBmb3IgKGNvbnN0IGNoYXIgb2Ygd29yZENvbnRleHQpIHtcbiAgICAgICAgICAgICAgICBjb25zdCBjb2RlUG9pbnQgPSBjaGFyLmNvZGVQb2ludEF0KDApO1xuICAgICAgICAgICAgICAgIGNvbnN0IGlzQmFzaWNBU0NJSSA9IHN0cmluZ3MuaXNCYXNpY0FTQ0lJKGNoYXIpO1xuICAgICAgICAgICAgICAgIGhhc0Jhc2ljQVNDSUlDaGFyYWN0ZXJzID0gaGFzQmFzaWNBU0NJSUNoYXJhY3RlcnMgfHwgaXNCYXNpY0FTQ0lJO1xuICAgICAgICAgICAgICAgIGlmICghaXNCYXNpY0FTQ0lJICYmXG4gICAgICAgICAgICAgICAgICAgICF0aGlzLmFtYmlndW91c0NoYXJhY3RlcnMuaXNBbWJpZ3VvdXMoY29kZVBvaW50KSAmJlxuICAgICAgICAgICAgICAgICAgICAhc3RyaW5ncy5JbnZpc2libGVDaGFyYWN0ZXJzLmlzSW52aXNpYmxlQ2hhcmFjdGVyKGNvZGVQb2ludCkpIHtcbiAgICAgICAgICAgICAgICAgICAgaGFzTm9uQ29uZnVzYWJsZU5vbkJhc2ljQXNjaWlDaGFyYWN0ZXIgPSB0cnVlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBpZiAoXG4gICAgICAgIC8qIERvbid0IGFsbG93IG1peGluZyB3ZWlyZCBsb29raW5nIGNoYXJhY3RlcnMgd2l0aCBBU0NJSSAqLyAhaGFzQmFzaWNBU0NJSUNoYXJhY3RlcnMgJiZcbiAgICAgICAgICAgIC8qIElzIHRoZXJlIGFuIG9idmlvdXNseSB3ZWlyZCBsb29raW5nIGNoYXJhY3Rlcj8gKi8gaGFzTm9uQ29uZnVzYWJsZU5vbkJhc2ljQXNjaWlDaGFyYWN0ZXIpIHtcbiAgICAgICAgICAgIHJldHVybiAwIC8qIFNpbXBsZUhpZ2hsaWdodFJlYXNvbi5Ob25lICovO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0aGlzLm9wdGlvbnMuaW52aXNpYmxlQ2hhcmFjdGVycykge1xuICAgICAgICAgICAgLy8gVE9ETyBjaGVjayBmb3IgZW1vamlzXG4gICAgICAgICAgICBpZiAoIWlzQWxsb3dlZEludmlzaWJsZUNoYXJhY3RlcihjaGFyYWN0ZXIpICYmIHN0cmluZ3MuSW52aXNpYmxlQ2hhcmFjdGVycy5pc0ludmlzaWJsZUNoYXJhY3Rlcihjb2RlUG9pbnQpKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIDIgLyogU2ltcGxlSGlnaGxpZ2h0UmVhc29uLkludmlzaWJsZSAqLztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBpZiAodGhpcy5vcHRpb25zLmFtYmlndW91c0NoYXJhY3RlcnMpIHtcbiAgICAgICAgICAgIGlmICh0aGlzLmFtYmlndW91c0NoYXJhY3RlcnMuaXNBbWJpZ3VvdXMoY29kZVBvaW50KSkge1xuICAgICAgICAgICAgICAgIHJldHVybiAzIC8qIFNpbXBsZUhpZ2hsaWdodFJlYXNvbi5BbWJpZ3VvdXMgKi87XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIDAgLyogU2ltcGxlSGlnaGxpZ2h0UmVhc29uLk5vbmUgKi87XG4gICAgfVxufVxuZnVuY3Rpb24gaXNBbGxvd2VkSW52aXNpYmxlQ2hhcmFjdGVyKGNoYXJhY3Rlcikge1xuICAgIHJldHVybiBjaGFyYWN0ZXIgPT09ICcgJyB8fCBjaGFyYWN0ZXIgPT09ICdcXG4nIHx8IGNoYXJhY3RlciA9PT0gJ1xcdCc7XG59XG4iLCAiLyotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAqICBDb3B5cmlnaHQgKGMpIE1pY3Jvc29mdCBDb3Jwb3JhdGlvbi4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqICBMaWNlbnNlZCB1bmRlciB0aGUgTUlUIExpY2Vuc2UuIFNlZSBMaWNlbnNlLnR4dCBpbiB0aGUgcHJvamVjdCByb290IGZvciBsaWNlbnNlIGluZm9ybWF0aW9uLlxuICotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSovXG5leHBvcnQgY2xhc3MgTGluZXNEaWZmIHtcbiAgICBjb25zdHJ1Y3RvcihjaGFuZ2VzLCBcbiAgICAvKipcbiAgICAgKiBTb3J0ZWQgYnkgb3JpZ2luYWwgbGluZSByYW5nZXMuXG4gICAgICogVGhlIG9yaWdpbmFsIGxpbmUgcmFuZ2VzIGFuZCB0aGUgbW9kaWZpZWQgbGluZSByYW5nZXMgbXVzdCBiZSBkaXNqb2ludCAoYnV0IGNhbiBiZSB0b3VjaGluZykuXG4gICAgICovXG4gICAgbW92ZXMsIFxuICAgIC8qKlxuICAgICAqIEluZGljYXRlcyBpZiB0aGUgdGltZSBvdXQgd2FzIHJlYWNoZWQuXG4gICAgICogSW4gdGhhdCBjYXNlLCB0aGUgZGlmZnMgbWlnaHQgYmUgYW4gYXBwcm94aW1hdGlvbiBhbmQgdGhlIHVzZXIgc2hvdWxkIGJlIGFza2VkIHRvIHJlcnVuIHRoZSBkaWZmIHdpdGggbW9yZSB0aW1lLlxuICAgICAqL1xuICAgIGhpdFRpbWVvdXQpIHtcbiAgICAgICAgdGhpcy5jaGFuZ2VzID0gY2hhbmdlcztcbiAgICAgICAgdGhpcy5tb3ZlcyA9IG1vdmVzO1xuICAgICAgICB0aGlzLmhpdFRpbWVvdXQgPSBoaXRUaW1lb3V0O1xuICAgIH1cbn1cbmV4cG9ydCBjbGFzcyBNb3ZlZFRleHQge1xuICAgIGNvbnN0cnVjdG9yKGxpbmVSYW5nZU1hcHBpbmcsIGNoYW5nZXMpIHtcbiAgICAgICAgdGhpcy5saW5lUmFuZ2VNYXBwaW5nID0gbGluZVJhbmdlTWFwcGluZztcbiAgICAgICAgdGhpcy5jaGFuZ2VzID0gY2hhbmdlcztcbiAgICB9XG59XG4iLCAiLyotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAqICBDb3B5cmlnaHQgKGMpIE1pY3Jvc29mdCBDb3Jwb3JhdGlvbi4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqICBMaWNlbnNlZCB1bmRlciB0aGUgTUlUIExpY2Vuc2UuIFNlZSBMaWNlbnNlLnR4dCBpbiB0aGUgcHJvamVjdCByb290IGZvciBsaWNlbnNlIGluZm9ybWF0aW9uLlxuICotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSovXG5pbXBvcnQgeyBCdWdJbmRpY2F0aW5nRXJyb3IgfSBmcm9tICcuLi8uLi8uLi9iYXNlL2NvbW1vbi9lcnJvcnMuanMnO1xuLyoqXG4gKiBBIHJhbmdlIG9mIG9mZnNldHMgKDAtYmFzZWQpLlxuKi9cbmV4cG9ydCBjbGFzcyBPZmZzZXRSYW5nZSB7XG4gICAgc3RhdGljIGFkZFJhbmdlKHJhbmdlLCBzb3J0ZWRSYW5nZXMpIHtcbiAgICAgICAgbGV0IGkgPSAwO1xuICAgICAgICB3aGlsZSAoaSA8IHNvcnRlZFJhbmdlcy5sZW5ndGggJiYgc29ydGVkUmFuZ2VzW2ldLmVuZEV4Y2x1c2l2ZSA8IHJhbmdlLnN0YXJ0KSB7XG4gICAgICAgICAgICBpKys7XG4gICAgICAgIH1cbiAgICAgICAgbGV0IGogPSBpO1xuICAgICAgICB3aGlsZSAoaiA8IHNvcnRlZFJhbmdlcy5sZW5ndGggJiYgc29ydGVkUmFuZ2VzW2pdLnN0YXJ0IDw9IHJhbmdlLmVuZEV4Y2x1c2l2ZSkge1xuICAgICAgICAgICAgaisrO1xuICAgICAgICB9XG4gICAgICAgIGlmIChpID09PSBqKSB7XG4gICAgICAgICAgICBzb3J0ZWRSYW5nZXMuc3BsaWNlKGksIDAsIHJhbmdlKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIGNvbnN0IHN0YXJ0ID0gTWF0aC5taW4ocmFuZ2Uuc3RhcnQsIHNvcnRlZFJhbmdlc1tpXS5zdGFydCk7XG4gICAgICAgICAgICBjb25zdCBlbmQgPSBNYXRoLm1heChyYW5nZS5lbmRFeGNsdXNpdmUsIHNvcnRlZFJhbmdlc1tqIC0gMV0uZW5kRXhjbHVzaXZlKTtcbiAgICAgICAgICAgIHNvcnRlZFJhbmdlcy5zcGxpY2UoaSwgaiAtIGksIG5ldyBPZmZzZXRSYW5nZShzdGFydCwgZW5kKSk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgc3RhdGljIHRyeUNyZWF0ZShzdGFydCwgZW5kRXhjbHVzaXZlKSB7XG4gICAgICAgIGlmIChzdGFydCA+IGVuZEV4Y2x1c2l2ZSkge1xuICAgICAgICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbmV3IE9mZnNldFJhbmdlKHN0YXJ0LCBlbmRFeGNsdXNpdmUpO1xuICAgIH1cbiAgICBzdGF0aWMgb2ZMZW5ndGgobGVuZ3RoKSB7XG4gICAgICAgIHJldHVybiBuZXcgT2Zmc2V0UmFuZ2UoMCwgbGVuZ3RoKTtcbiAgICB9XG4gICAgc3RhdGljIG9mU3RhcnRBbmRMZW5ndGgoc3RhcnQsIGxlbmd0aCkge1xuICAgICAgICByZXR1cm4gbmV3IE9mZnNldFJhbmdlKHN0YXJ0LCBzdGFydCArIGxlbmd0aCk7XG4gICAgfVxuICAgIGNvbnN0cnVjdG9yKHN0YXJ0LCBlbmRFeGNsdXNpdmUpIHtcbiAgICAgICAgdGhpcy5zdGFydCA9IHN0YXJ0O1xuICAgICAgICB0aGlzLmVuZEV4Y2x1c2l2ZSA9IGVuZEV4Y2x1c2l2ZTtcbiAgICAgICAgaWYgKHN0YXJ0ID4gZW5kRXhjbHVzaXZlKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgQnVnSW5kaWNhdGluZ0Vycm9yKGBJbnZhbGlkIHJhbmdlOiAke3RoaXMudG9TdHJpbmcoKX1gKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBnZXQgaXNFbXB0eSgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuc3RhcnQgPT09IHRoaXMuZW5kRXhjbHVzaXZlO1xuICAgIH1cbiAgICBkZWx0YShvZmZzZXQpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBPZmZzZXRSYW5nZSh0aGlzLnN0YXJ0ICsgb2Zmc2V0LCB0aGlzLmVuZEV4Y2x1c2l2ZSArIG9mZnNldCk7XG4gICAgfVxuICAgIGRlbHRhU3RhcnQob2Zmc2V0KSB7XG4gICAgICAgIHJldHVybiBuZXcgT2Zmc2V0UmFuZ2UodGhpcy5zdGFydCArIG9mZnNldCwgdGhpcy5lbmRFeGNsdXNpdmUpO1xuICAgIH1cbiAgICBkZWx0YUVuZChvZmZzZXQpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBPZmZzZXRSYW5nZSh0aGlzLnN0YXJ0LCB0aGlzLmVuZEV4Y2x1c2l2ZSArIG9mZnNldCk7XG4gICAgfVxuICAgIGdldCBsZW5ndGgoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmVuZEV4Y2x1c2l2ZSAtIHRoaXMuc3RhcnQ7XG4gICAgfVxuICAgIHRvU3RyaW5nKCkge1xuICAgICAgICByZXR1cm4gYFske3RoaXMuc3RhcnR9LCAke3RoaXMuZW5kRXhjbHVzaXZlfSlgO1xuICAgIH1cbiAgICBjb250YWlucyhvZmZzZXQpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuc3RhcnQgPD0gb2Zmc2V0ICYmIG9mZnNldCA8IHRoaXMuZW5kRXhjbHVzaXZlO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBmb3IgYWxsIG51bWJlcnMgbjogcmFuZ2UxLmNvbnRhaW5zKG4pIG9yIHJhbmdlMi5jb250YWlucyhuKSA9PiByYW5nZTEuam9pbihyYW5nZTIpLmNvbnRhaW5zKG4pXG4gICAgICogVGhlIGpvaW5lZCByYW5nZSBpcyB0aGUgc21hbGxlc3QgcmFuZ2UgdGhhdCBjb250YWlucyBib3RoIHJhbmdlcy5cbiAgICAgKi9cbiAgICBqb2luKG90aGVyKSB7XG4gICAgICAgIHJldHVybiBuZXcgT2Zmc2V0UmFuZ2UoTWF0aC5taW4odGhpcy5zdGFydCwgb3RoZXIuc3RhcnQpLCBNYXRoLm1heCh0aGlzLmVuZEV4Y2x1c2l2ZSwgb3RoZXIuZW5kRXhjbHVzaXZlKSk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIGZvciBhbGwgbnVtYmVycyBuOiByYW5nZTEuY29udGFpbnMobikgYW5kIHJhbmdlMi5jb250YWlucyhuKSA8PT4gcmFuZ2UxLmludGVyc2VjdChyYW5nZTIpLmNvbnRhaW5zKG4pXG4gICAgICpcbiAgICAgKiBUaGUgcmVzdWx0aW5nIHJhbmdlIGlzIGVtcHR5IGlmIHRoZSByYW5nZXMgZG8gbm90IGludGVyc2VjdCwgYnV0IHRvdWNoLlxuICAgICAqIElmIHRoZSByYW5nZXMgZG9uJ3QgZXZlbiB0b3VjaCwgdGhlIHJlc3VsdCBpcyB1bmRlZmluZWQuXG4gICAgICovXG4gICAgaW50ZXJzZWN0KG90aGVyKSB7XG4gICAgICAgIGNvbnN0IHN0YXJ0ID0gTWF0aC5tYXgodGhpcy5zdGFydCwgb3RoZXIuc3RhcnQpO1xuICAgICAgICBjb25zdCBlbmQgPSBNYXRoLm1pbih0aGlzLmVuZEV4Y2x1c2l2ZSwgb3RoZXIuZW5kRXhjbHVzaXZlKTtcbiAgICAgICAgaWYgKHN0YXJ0IDw9IGVuZCkge1xuICAgICAgICAgICAgcmV0dXJuIG5ldyBPZmZzZXRSYW5nZShzdGFydCwgZW5kKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICAgIH1cbiAgICBpbnRlcnNlY3RzKG90aGVyKSB7XG4gICAgICAgIGNvbnN0IHN0YXJ0ID0gTWF0aC5tYXgodGhpcy5zdGFydCwgb3RoZXIuc3RhcnQpO1xuICAgICAgICBjb25zdCBlbmQgPSBNYXRoLm1pbih0aGlzLmVuZEV4Y2x1c2l2ZSwgb3RoZXIuZW5kRXhjbHVzaXZlKTtcbiAgICAgICAgcmV0dXJuIHN0YXJ0IDwgZW5kO1xuICAgIH1cbiAgICBpc0JlZm9yZShvdGhlcikge1xuICAgICAgICByZXR1cm4gdGhpcy5lbmRFeGNsdXNpdmUgPD0gb3RoZXIuc3RhcnQ7XG4gICAgfVxuICAgIGlzQWZ0ZXIob3RoZXIpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuc3RhcnQgPj0gb3RoZXIuZW5kRXhjbHVzaXZlO1xuICAgIH1cbiAgICBzbGljZShhcnIpIHtcbiAgICAgICAgcmV0dXJuIGFyci5zbGljZSh0aGlzLnN0YXJ0LCB0aGlzLmVuZEV4Y2x1c2l2ZSk7XG4gICAgfVxuICAgIHN1YnN0cmluZyhzdHIpIHtcbiAgICAgICAgcmV0dXJuIHN0ci5zdWJzdHJpbmcodGhpcy5zdGFydCwgdGhpcy5lbmRFeGNsdXNpdmUpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIHRoZSBnaXZlbiB2YWx1ZSBpZiBpdCBpcyBjb250YWluZWQgaW4gdGhpcyBpbnN0YW5jZSwgb3RoZXJ3aXNlIHRoZSBjbG9zZXN0IHZhbHVlIHRoYXQgaXMgY29udGFpbmVkLlxuICAgICAqIFRoZSByYW5nZSBtdXN0IG5vdCBiZSBlbXB0eS5cbiAgICAgKi9cbiAgICBjbGlwKHZhbHVlKSB7XG4gICAgICAgIGlmICh0aGlzLmlzRW1wdHkpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBCdWdJbmRpY2F0aW5nRXJyb3IoYEludmFsaWQgY2xpcHBpbmcgcmFuZ2U6ICR7dGhpcy50b1N0cmluZygpfWApO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBNYXRoLm1heCh0aGlzLnN0YXJ0LCBNYXRoLm1pbih0aGlzLmVuZEV4Y2x1c2l2ZSAtIDEsIHZhbHVlKSk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFJldHVybnMgYHIgOj0gdmFsdWUgKyBrICogbGVuZ3RoYCBzdWNoIHRoYXQgYHJgIGlzIGNvbnRhaW5lZCBpbiB0aGlzIHJhbmdlLlxuICAgICAqIFRoZSByYW5nZSBtdXN0IG5vdCBiZSBlbXB0eS5cbiAgICAgKlxuICAgICAqIEUuZy4gYFs1LCAxMCkuY2xpcEN5Y2xpYygxMCkgPT09IDVgLCBgWzUsIDEwKS5jbGlwQ3ljbGljKDExKSA9PT0gNmAgYW5kIGBbNSwgMTApLmNsaXBDeWNsaWMoNCkgPT09IDlgLlxuICAgICAqL1xuICAgIGNsaXBDeWNsaWModmFsdWUpIHtcbiAgICAgICAgaWYgKHRoaXMuaXNFbXB0eSkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEJ1Z0luZGljYXRpbmdFcnJvcihgSW52YWxpZCBjbGlwcGluZyByYW5nZTogJHt0aGlzLnRvU3RyaW5nKCl9YCk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHZhbHVlIDwgdGhpcy5zdGFydCkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuZW5kRXhjbHVzaXZlIC0gKCh0aGlzLnN0YXJ0IC0gdmFsdWUpICUgdGhpcy5sZW5ndGgpO1xuICAgICAgICB9XG4gICAgICAgIGlmICh2YWx1ZSA+PSB0aGlzLmVuZEV4Y2x1c2l2ZSkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuc3RhcnQgKyAoKHZhbHVlIC0gdGhpcy5zdGFydCkgJSB0aGlzLmxlbmd0aCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHZhbHVlO1xuICAgIH1cbiAgICBmb3JFYWNoKGYpIHtcbiAgICAgICAgZm9yIChsZXQgaSA9IHRoaXMuc3RhcnQ7IGkgPCB0aGlzLmVuZEV4Y2x1c2l2ZTsgaSsrKSB7XG4gICAgICAgICAgICBmKGkpO1xuICAgICAgICB9XG4gICAgfVxufVxuZXhwb3J0IGNsYXNzIE9mZnNldFJhbmdlU2V0IHtcbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgdGhpcy5fc29ydGVkUmFuZ2VzID0gW107XG4gICAgfVxuICAgIGFkZFJhbmdlKHJhbmdlKSB7XG4gICAgICAgIGxldCBpID0gMDtcbiAgICAgICAgd2hpbGUgKGkgPCB0aGlzLl9zb3J0ZWRSYW5nZXMubGVuZ3RoICYmIHRoaXMuX3NvcnRlZFJhbmdlc1tpXS5lbmRFeGNsdXNpdmUgPCByYW5nZS5zdGFydCkge1xuICAgICAgICAgICAgaSsrO1xuICAgICAgICB9XG4gICAgICAgIGxldCBqID0gaTtcbiAgICAgICAgd2hpbGUgKGogPCB0aGlzLl9zb3J0ZWRSYW5nZXMubGVuZ3RoICYmIHRoaXMuX3NvcnRlZFJhbmdlc1tqXS5zdGFydCA8PSByYW5nZS5lbmRFeGNsdXNpdmUpIHtcbiAgICAgICAgICAgIGorKztcbiAgICAgICAgfVxuICAgICAgICBpZiAoaSA9PT0gaikge1xuICAgICAgICAgICAgdGhpcy5fc29ydGVkUmFuZ2VzLnNwbGljZShpLCAwLCByYW5nZSk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBjb25zdCBzdGFydCA9IE1hdGgubWluKHJhbmdlLnN0YXJ0LCB0aGlzLl9zb3J0ZWRSYW5nZXNbaV0uc3RhcnQpO1xuICAgICAgICAgICAgY29uc3QgZW5kID0gTWF0aC5tYXgocmFuZ2UuZW5kRXhjbHVzaXZlLCB0aGlzLl9zb3J0ZWRSYW5nZXNbaiAtIDFdLmVuZEV4Y2x1c2l2ZSk7XG4gICAgICAgICAgICB0aGlzLl9zb3J0ZWRSYW5nZXMuc3BsaWNlKGksIGogLSBpLCBuZXcgT2Zmc2V0UmFuZ2Uoc3RhcnQsIGVuZCkpO1xuICAgICAgICB9XG4gICAgfVxuICAgIHRvU3RyaW5nKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fc29ydGVkUmFuZ2VzLm1hcChyID0+IHIudG9TdHJpbmcoKSkuam9pbignLCAnKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogUmV0dXJucyBvZiB0aGVyZSBpcyBhIHZhbHVlIHRoYXQgaXMgY29udGFpbmVkIGluIHRoaXMgaW5zdGFuY2UgYW5kIHRoZSBnaXZlbiByYW5nZS5cbiAgICAgKi9cbiAgICBpbnRlcnNlY3RzU3RyaWN0KG90aGVyKSB7XG4gICAgICAgIC8vIFRPRE8gdXNlIGJpbmFyeSBzZWFyY2hcbiAgICAgICAgbGV0IGkgPSAwO1xuICAgICAgICB3aGlsZSAoaSA8IHRoaXMuX3NvcnRlZFJhbmdlcy5sZW5ndGggJiYgdGhpcy5fc29ydGVkUmFuZ2VzW2ldLmVuZEV4Y2x1c2l2ZSA8PSBvdGhlci5zdGFydCkge1xuICAgICAgICAgICAgaSsrO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBpIDwgdGhpcy5fc29ydGVkUmFuZ2VzLmxlbmd0aCAmJiB0aGlzLl9zb3J0ZWRSYW5nZXNbaV0uc3RhcnQgPCBvdGhlci5lbmRFeGNsdXNpdmU7XG4gICAgfVxuICAgIGludGVyc2VjdFdpdGhSYW5nZShvdGhlcikge1xuICAgICAgICAvLyBUT0RPIHVzZSBiaW5hcnkgc2VhcmNoICsgc2xpY2VcbiAgICAgICAgY29uc3QgcmVzdWx0ID0gbmV3IE9mZnNldFJhbmdlU2V0KCk7XG4gICAgICAgIGZvciAoY29uc3QgcmFuZ2Ugb2YgdGhpcy5fc29ydGVkUmFuZ2VzKSB7XG4gICAgICAgICAgICBjb25zdCBpbnRlcnNlY3Rpb24gPSByYW5nZS5pbnRlcnNlY3Qob3RoZXIpO1xuICAgICAgICAgICAgaWYgKGludGVyc2VjdGlvbikge1xuICAgICAgICAgICAgICAgIHJlc3VsdC5hZGRSYW5nZShpbnRlcnNlY3Rpb24pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuICAgIGludGVyc2VjdFdpdGhSYW5nZUxlbmd0aChvdGhlcikge1xuICAgICAgICByZXR1cm4gdGhpcy5pbnRlcnNlY3RXaXRoUmFuZ2Uob3RoZXIpLmxlbmd0aDtcbiAgICB9XG4gICAgZ2V0IGxlbmd0aCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX3NvcnRlZFJhbmdlcy5yZWR1Y2UoKHByZXYsIGN1cikgPT4gcHJldiArIGN1ci5sZW5ndGgsIDApO1xuICAgIH1cbn1cbiIsICIvKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICogIENvcHlyaWdodCAoYykgTWljcm9zb2Z0IENvcnBvcmF0aW9uLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICogIExpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgTGljZW5zZS4gU2VlIExpY2Vuc2UudHh0IGluIHRoZSBwcm9qZWN0IHJvb3QgZm9yIGxpY2Vuc2UgaW5mb3JtYXRpb24uXG4gKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKi9cbmV4cG9ydCBmdW5jdGlvbiBmaW5kTGFzdChhcnJheSwgcHJlZGljYXRlKSB7XG4gICAgY29uc3QgaWR4ID0gZmluZExhc3RJZHgoYXJyYXksIHByZWRpY2F0ZSk7XG4gICAgaWYgKGlkeCA9PT0gLTEpIHtcbiAgICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICB9XG4gICAgcmV0dXJuIGFycmF5W2lkeF07XG59XG5leHBvcnQgZnVuY3Rpb24gZmluZExhc3RJZHgoYXJyYXksIHByZWRpY2F0ZSwgZnJvbUluZGV4ID0gYXJyYXkubGVuZ3RoIC0gMSkge1xuICAgIGZvciAobGV0IGkgPSBmcm9tSW5kZXg7IGkgPj0gMDsgaS0tKSB7XG4gICAgICAgIGNvbnN0IGVsZW1lbnQgPSBhcnJheVtpXTtcbiAgICAgICAgaWYgKHByZWRpY2F0ZShlbGVtZW50KSkge1xuICAgICAgICAgICAgcmV0dXJuIGk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIC0xO1xufVxuLyoqXG4gKiBGaW5kcyB0aGUgbGFzdCBpdGVtIHdoZXJlIHByZWRpY2F0ZSBpcyB0cnVlIHVzaW5nIGJpbmFyeSBzZWFyY2guXG4gKiBgcHJlZGljYXRlYCBtdXN0IGJlIG1vbm90b25vdXMsIGkuZS4gYGFyci5tYXAocHJlZGljYXRlKWAgbXVzdCBiZSBsaWtlIGBbdHJ1ZSwgLi4uLCB0cnVlLCBmYWxzZSwgLi4uLCBmYWxzZV1gIVxuICpcbiAqIEByZXR1cm5zIGB1bmRlZmluZWRgIGlmIG5vIGl0ZW0gbWF0Y2hlcywgb3RoZXJ3aXNlIHRoZSBsYXN0IGl0ZW0gdGhhdCBtYXRjaGVzIHRoZSBwcmVkaWNhdGUuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBmaW5kTGFzdE1vbm90b25vdXMoYXJyYXksIHByZWRpY2F0ZSkge1xuICAgIGNvbnN0IGlkeCA9IGZpbmRMYXN0SWR4TW9ub3Rvbm91cyhhcnJheSwgcHJlZGljYXRlKTtcbiAgICByZXR1cm4gaWR4ID09PSAtMSA/IHVuZGVmaW5lZCA6IGFycmF5W2lkeF07XG59XG4vKipcbiAqIEZpbmRzIHRoZSBsYXN0IGl0ZW0gd2hlcmUgcHJlZGljYXRlIGlzIHRydWUgdXNpbmcgYmluYXJ5IHNlYXJjaC5cbiAqIGBwcmVkaWNhdGVgIG11c3QgYmUgbW9ub3Rvbm91cywgaS5lLiBgYXJyLm1hcChwcmVkaWNhdGUpYCBtdXN0IGJlIGxpa2UgYFt0cnVlLCAuLi4sIHRydWUsIGZhbHNlLCAuLi4sIGZhbHNlXWAhXG4gKlxuICogQHJldHVybnMgYHN0YXJ0SWR4IC0gMWAgaWYgcHJlZGljYXRlIGlzIGZhbHNlIGZvciBhbGwgaXRlbXMsIG90aGVyd2lzZSB0aGUgaW5kZXggb2YgdGhlIGxhc3QgaXRlbSB0aGF0IG1hdGNoZXMgdGhlIHByZWRpY2F0ZS5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGZpbmRMYXN0SWR4TW9ub3Rvbm91cyhhcnJheSwgcHJlZGljYXRlLCBzdGFydElkeCA9IDAsIGVuZElkeEV4ID0gYXJyYXkubGVuZ3RoKSB7XG4gICAgbGV0IGkgPSBzdGFydElkeDtcbiAgICBsZXQgaiA9IGVuZElkeEV4O1xuICAgIHdoaWxlIChpIDwgaikge1xuICAgICAgICBjb25zdCBrID0gTWF0aC5mbG9vcigoaSArIGopIC8gMik7XG4gICAgICAgIGlmIChwcmVkaWNhdGUoYXJyYXlba10pKSB7XG4gICAgICAgICAgICBpID0gayArIDE7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBqID0gaztcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gaSAtIDE7XG59XG4vKipcbiAqIEZpbmRzIHRoZSBmaXJzdCBpdGVtIHdoZXJlIHByZWRpY2F0ZSBpcyB0cnVlIHVzaW5nIGJpbmFyeSBzZWFyY2guXG4gKiBgcHJlZGljYXRlYCBtdXN0IGJlIG1vbm90b25vdXMsIGkuZS4gYGFyci5tYXAocHJlZGljYXRlKWAgbXVzdCBiZSBsaWtlIGBbZmFsc2UsIC4uLiwgZmFsc2UsIHRydWUsIC4uLiwgdHJ1ZV1gIVxuICpcbiAqIEByZXR1cm5zIGB1bmRlZmluZWRgIGlmIG5vIGl0ZW0gbWF0Y2hlcywgb3RoZXJ3aXNlIHRoZSBmaXJzdCBpdGVtIHRoYXQgbWF0Y2hlcyB0aGUgcHJlZGljYXRlLlxuICovXG5leHBvcnQgZnVuY3Rpb24gZmluZEZpcnN0TW9ub3Rvbm91cyhhcnJheSwgcHJlZGljYXRlKSB7XG4gICAgY29uc3QgaWR4ID0gZmluZEZpcnN0SWR4TW9ub3Rvbm91c09yQXJyTGVuKGFycmF5LCBwcmVkaWNhdGUpO1xuICAgIHJldHVybiBpZHggPT09IGFycmF5Lmxlbmd0aCA/IHVuZGVmaW5lZCA6IGFycmF5W2lkeF07XG59XG4vKipcbiAqIEZpbmRzIHRoZSBmaXJzdCBpdGVtIHdoZXJlIHByZWRpY2F0ZSBpcyB0cnVlIHVzaW5nIGJpbmFyeSBzZWFyY2guXG4gKiBgcHJlZGljYXRlYCBtdXN0IGJlIG1vbm90b25vdXMsIGkuZS4gYGFyci5tYXAocHJlZGljYXRlKWAgbXVzdCBiZSBsaWtlIGBbZmFsc2UsIC4uLiwgZmFsc2UsIHRydWUsIC4uLiwgdHJ1ZV1gIVxuICpcbiAqIEByZXR1cm5zIGBlbmRJZHhFeGAgaWYgcHJlZGljYXRlIGlzIGZhbHNlIGZvciBhbGwgaXRlbXMsIG90aGVyd2lzZSB0aGUgaW5kZXggb2YgdGhlIGZpcnN0IGl0ZW0gdGhhdCBtYXRjaGVzIHRoZSBwcmVkaWNhdGUuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBmaW5kRmlyc3RJZHhNb25vdG9ub3VzT3JBcnJMZW4oYXJyYXksIHByZWRpY2F0ZSwgc3RhcnRJZHggPSAwLCBlbmRJZHhFeCA9IGFycmF5Lmxlbmd0aCkge1xuICAgIGxldCBpID0gc3RhcnRJZHg7XG4gICAgbGV0IGogPSBlbmRJZHhFeDtcbiAgICB3aGlsZSAoaSA8IGopIHtcbiAgICAgICAgY29uc3QgayA9IE1hdGguZmxvb3IoKGkgKyBqKSAvIDIpO1xuICAgICAgICBpZiAocHJlZGljYXRlKGFycmF5W2tdKSkge1xuICAgICAgICAgICAgaiA9IGs7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBpID0gayArIDE7XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIGk7XG59XG4vKipcbiAqIFVzZSB0aGlzIHdoZW5cbiAqICogWW91IGhhdmUgYSBzb3J0ZWQgYXJyYXlcbiAqICogWW91IHF1ZXJ5IHRoaXMgYXJyYXkgd2l0aCBhIG1vbm90b25vdXMgcHJlZGljYXRlIHRvIGZpbmQgdGhlIGxhc3QgaXRlbSB0aGF0IGhhcyBhIGNlcnRhaW4gcHJvcGVydHkuXG4gKiAqIFlvdSBxdWVyeSB0aGlzIGFycmF5IG11bHRpcGxlIHRpbWVzIHdpdGggbW9ub3Rvbm91cyBwcmVkaWNhdGVzIHRoYXQgZ2V0IHdlYWtlciBhbmQgd2Vha2VyLlxuICovXG5leHBvcnQgY2xhc3MgTW9ub3Rvbm91c0FycmF5IHtcbiAgICBjb25zdHJ1Y3RvcihfYXJyYXkpIHtcbiAgICAgICAgdGhpcy5fYXJyYXkgPSBfYXJyYXk7XG4gICAgICAgIHRoaXMuX2ZpbmRMYXN0TW9ub3Rvbm91c0xhc3RJZHggPSAwO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBUaGUgcHJlZGljYXRlIG11c3QgYmUgbW9ub3Rvbm91cywgaS5lLiBgYXJyLm1hcChwcmVkaWNhdGUpYCBtdXN0IGJlIGxpa2UgYFt0cnVlLCAuLi4sIHRydWUsIGZhbHNlLCAuLi4sIGZhbHNlXWAhXG4gICAgICogRm9yIHN1YnNlcXVlbnQgY2FsbHMsIGN1cnJlbnQgcHJlZGljYXRlIG11c3QgYmUgd2Vha2VyIHRoYW4gKG9yIGVxdWFsIHRvKSB0aGUgcHJldmlvdXMgcHJlZGljYXRlLCBpLmUuIG1vcmUgZW50cmllcyBtdXN0IGJlIGB0cnVlYC5cbiAgICAgKi9cbiAgICBmaW5kTGFzdE1vbm90b25vdXMocHJlZGljYXRlKSB7XG4gICAgICAgIGlmIChNb25vdG9ub3VzQXJyYXkuYXNzZXJ0SW52YXJpYW50cykge1xuICAgICAgICAgICAgaWYgKHRoaXMuX3ByZXZGaW5kTGFzdFByZWRpY2F0ZSkge1xuICAgICAgICAgICAgICAgIGZvciAoY29uc3QgaXRlbSBvZiB0aGlzLl9hcnJheSkge1xuICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5fcHJldkZpbmRMYXN0UHJlZGljYXRlKGl0ZW0pICYmICFwcmVkaWNhdGUoaXRlbSkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignTW9ub3Rvbm91c0FycmF5OiBjdXJyZW50IHByZWRpY2F0ZSBtdXN0IGJlIHdlYWtlciB0aGFuIChvciBlcXVhbCB0bykgdGhlIHByZXZpb3VzIHByZWRpY2F0ZS4nKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRoaXMuX3ByZXZGaW5kTGFzdFByZWRpY2F0ZSA9IHByZWRpY2F0ZTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBpZHggPSBmaW5kTGFzdElkeE1vbm90b25vdXModGhpcy5fYXJyYXksIHByZWRpY2F0ZSwgdGhpcy5fZmluZExhc3RNb25vdG9ub3VzTGFzdElkeCk7XG4gICAgICAgIHRoaXMuX2ZpbmRMYXN0TW9ub3Rvbm91c0xhc3RJZHggPSBpZHggKyAxO1xuICAgICAgICByZXR1cm4gaWR4ID09PSAtMSA/IHVuZGVmaW5lZCA6IHRoaXMuX2FycmF5W2lkeF07XG4gICAgfVxufVxuTW9ub3Rvbm91c0FycmF5LmFzc2VydEludmFyaWFudHMgPSBmYWxzZTtcbi8qKlxuICogUmV0dXJucyB0aGUgZmlyc3QgaXRlbSB0aGF0IGlzIGVxdWFsIHRvIG9yIGdyZWF0ZXIgdGhhbiBldmVyeSBvdGhlciBpdGVtLlxuKi9cbmV4cG9ydCBmdW5jdGlvbiBmaW5kRmlyc3RNYXgoYXJyYXksIGNvbXBhcmF0b3IpIHtcbiAgICBpZiAoYXJyYXkubGVuZ3RoID09PSAwKSB7XG4gICAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgfVxuICAgIGxldCBtYXggPSBhcnJheVswXTtcbiAgICBmb3IgKGxldCBpID0gMTsgaSA8IGFycmF5Lmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGNvbnN0IGl0ZW0gPSBhcnJheVtpXTtcbiAgICAgICAgaWYgKGNvbXBhcmF0b3IoaXRlbSwgbWF4KSA+IDApIHtcbiAgICAgICAgICAgIG1heCA9IGl0ZW07XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIG1heDtcbn1cbi8qKlxuICogUmV0dXJucyB0aGUgbGFzdCBpdGVtIHRoYXQgaXMgZXF1YWwgdG8gb3IgZ3JlYXRlciB0aGFuIGV2ZXJ5IG90aGVyIGl0ZW0uXG4qL1xuZXhwb3J0IGZ1bmN0aW9uIGZpbmRMYXN0TWF4KGFycmF5LCBjb21wYXJhdG9yKSB7XG4gICAgaWYgKGFycmF5Lmxlbmd0aCA9PT0gMCkge1xuICAgICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICAgIH1cbiAgICBsZXQgbWF4ID0gYXJyYXlbMF07XG4gICAgZm9yIChsZXQgaSA9IDE7IGkgPCBhcnJheS5sZW5ndGg7IGkrKykge1xuICAgICAgICBjb25zdCBpdGVtID0gYXJyYXlbaV07XG4gICAgICAgIGlmIChjb21wYXJhdG9yKGl0ZW0sIG1heCkgPj0gMCkge1xuICAgICAgICAgICAgbWF4ID0gaXRlbTtcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gbWF4O1xufVxuLyoqXG4gKiBSZXR1cm5zIHRoZSBmaXJzdCBpdGVtIHRoYXQgaXMgZXF1YWwgdG8gb3IgbGVzcyB0aGFuIGV2ZXJ5IG90aGVyIGl0ZW0uXG4qL1xuZXhwb3J0IGZ1bmN0aW9uIGZpbmRGaXJzdE1pbihhcnJheSwgY29tcGFyYXRvcikge1xuICAgIHJldHVybiBmaW5kRmlyc3RNYXgoYXJyYXksIChhLCBiKSA9PiAtY29tcGFyYXRvcihhLCBiKSk7XG59XG5leHBvcnQgZnVuY3Rpb24gZmluZE1heElkeChhcnJheSwgY29tcGFyYXRvcikge1xuICAgIGlmIChhcnJheS5sZW5ndGggPT09IDApIHtcbiAgICAgICAgcmV0dXJuIC0xO1xuICAgIH1cbiAgICBsZXQgbWF4SWR4ID0gMDtcbiAgICBmb3IgKGxldCBpID0gMTsgaSA8IGFycmF5Lmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGNvbnN0IGl0ZW0gPSBhcnJheVtpXTtcbiAgICAgICAgaWYgKGNvbXBhcmF0b3IoaXRlbSwgYXJyYXlbbWF4SWR4XSkgPiAwKSB7XG4gICAgICAgICAgICBtYXhJZHggPSBpO1xuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiBtYXhJZHg7XG59XG4vKipcbiAqIFJldHVybnMgdGhlIGZpcnN0IG1hcHBlZCB2YWx1ZSBvZiB0aGUgYXJyYXkgd2hpY2ggaXMgbm90IHVuZGVmaW5lZC5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIG1hcEZpbmRGaXJzdChpdGVtcywgbWFwRm4pIHtcbiAgICBmb3IgKGNvbnN0IHZhbHVlIG9mIGl0ZW1zKSB7XG4gICAgICAgIGNvbnN0IG1hcHBlZCA9IG1hcEZuKHZhbHVlKTtcbiAgICAgICAgaWYgKG1hcHBlZCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICByZXR1cm4gbWFwcGVkO1xuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiB1bmRlZmluZWQ7XG59XG4iLCAiLyotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAqICBDb3B5cmlnaHQgKGMpIE1pY3Jvc29mdCBDb3Jwb3JhdGlvbi4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqICBMaWNlbnNlZCB1bmRlciB0aGUgTUlUIExpY2Vuc2UuIFNlZSBMaWNlbnNlLnR4dCBpbiB0aGUgcHJvamVjdCByb290IGZvciBsaWNlbnNlIGluZm9ybWF0aW9uLlxuICotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSovXG5pbXBvcnQgeyBCdWdJbmRpY2F0aW5nRXJyb3IgfSBmcm9tICcuLi8uLi8uLi9iYXNlL2NvbW1vbi9lcnJvcnMuanMnO1xuaW1wb3J0IHsgT2Zmc2V0UmFuZ2UgfSBmcm9tICcuL29mZnNldFJhbmdlLmpzJztcbmltcG9ydCB7IFJhbmdlIH0gZnJvbSAnLi9yYW5nZS5qcyc7XG5pbXBvcnQgeyBmaW5kRmlyc3RJZHhNb25vdG9ub3VzT3JBcnJMZW4sIGZpbmRMYXN0SWR4TW9ub3Rvbm91cywgZmluZExhc3RNb25vdG9ub3VzIH0gZnJvbSAnLi4vLi4vLi4vYmFzZS9jb21tb24vYXJyYXlzRmluZC5qcyc7XG4vKipcbiAqIEEgcmFuZ2Ugb2YgbGluZXMgKDEtYmFzZWQpLlxuICovXG5leHBvcnQgY2xhc3MgTGluZVJhbmdlIHtcbiAgICBzdGF0aWMgZnJvbVJhbmdlSW5jbHVzaXZlKHJhbmdlKSB7XG4gICAgICAgIHJldHVybiBuZXcgTGluZVJhbmdlKHJhbmdlLnN0YXJ0TGluZU51bWJlciwgcmFuZ2UuZW5kTGluZU51bWJlciArIDEpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBAcGFyYW0gbGluZVJhbmdlcyBBbiBhcnJheSBvZiBzb3J0ZWQgbGluZSByYW5nZXMuXG4gICAgICovXG4gICAgc3RhdGljIGpvaW5NYW55KGxpbmVSYW5nZXMpIHtcbiAgICAgICAgaWYgKGxpbmVSYW5nZXMubGVuZ3RoID09PSAwKSB7XG4gICAgICAgICAgICByZXR1cm4gW107XG4gICAgICAgIH1cbiAgICAgICAgbGV0IHJlc3VsdCA9IG5ldyBMaW5lUmFuZ2VTZXQobGluZVJhbmdlc1swXS5zbGljZSgpKTtcbiAgICAgICAgZm9yIChsZXQgaSA9IDE7IGkgPCBsaW5lUmFuZ2VzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICByZXN1bHQgPSByZXN1bHQuZ2V0VW5pb24obmV3IExpbmVSYW5nZVNldChsaW5lUmFuZ2VzW2ldLnNsaWNlKCkpKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gcmVzdWx0LnJhbmdlcztcbiAgICB9XG4gICAgc3RhdGljIGpvaW4obGluZVJhbmdlcykge1xuICAgICAgICBpZiAobGluZVJhbmdlcy5sZW5ndGggPT09IDApIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBCdWdJbmRpY2F0aW5nRXJyb3IoJ2xpbmVSYW5nZXMgY2Fubm90IGJlIGVtcHR5Jyk7XG4gICAgICAgIH1cbiAgICAgICAgbGV0IHN0YXJ0TGluZU51bWJlciA9IGxpbmVSYW5nZXNbMF0uc3RhcnRMaW5lTnVtYmVyO1xuICAgICAgICBsZXQgZW5kTGluZU51bWJlckV4Y2x1c2l2ZSA9IGxpbmVSYW5nZXNbMF0uZW5kTGluZU51bWJlckV4Y2x1c2l2ZTtcbiAgICAgICAgZm9yIChsZXQgaSA9IDE7IGkgPCBsaW5lUmFuZ2VzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICBzdGFydExpbmVOdW1iZXIgPSBNYXRoLm1pbihzdGFydExpbmVOdW1iZXIsIGxpbmVSYW5nZXNbaV0uc3RhcnRMaW5lTnVtYmVyKTtcbiAgICAgICAgICAgIGVuZExpbmVOdW1iZXJFeGNsdXNpdmUgPSBNYXRoLm1heChlbmRMaW5lTnVtYmVyRXhjbHVzaXZlLCBsaW5lUmFuZ2VzW2ldLmVuZExpbmVOdW1iZXJFeGNsdXNpdmUpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBuZXcgTGluZVJhbmdlKHN0YXJ0TGluZU51bWJlciwgZW5kTGluZU51bWJlckV4Y2x1c2l2ZSk7XG4gICAgfVxuICAgIHN0YXRpYyBvZkxlbmd0aChzdGFydExpbmVOdW1iZXIsIGxlbmd0aCkge1xuICAgICAgICByZXR1cm4gbmV3IExpbmVSYW5nZShzdGFydExpbmVOdW1iZXIsIHN0YXJ0TGluZU51bWJlciArIGxlbmd0aCk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEBpbnRlcm5hbFxuICAgICAqL1xuICAgIHN0YXRpYyBkZXNlcmlhbGl6ZShsaW5lUmFuZ2UpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBMaW5lUmFuZ2UobGluZVJhbmdlWzBdLCBsaW5lUmFuZ2VbMV0pO1xuICAgIH1cbiAgICBjb25zdHJ1Y3RvcihzdGFydExpbmVOdW1iZXIsIGVuZExpbmVOdW1iZXJFeGNsdXNpdmUpIHtcbiAgICAgICAgaWYgKHN0YXJ0TGluZU51bWJlciA+IGVuZExpbmVOdW1iZXJFeGNsdXNpdmUpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBCdWdJbmRpY2F0aW5nRXJyb3IoYHN0YXJ0TGluZU51bWJlciAke3N0YXJ0TGluZU51bWJlcn0gY2Fubm90IGJlIGFmdGVyIGVuZExpbmVOdW1iZXJFeGNsdXNpdmUgJHtlbmRMaW5lTnVtYmVyRXhjbHVzaXZlfWApO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuc3RhcnRMaW5lTnVtYmVyID0gc3RhcnRMaW5lTnVtYmVyO1xuICAgICAgICB0aGlzLmVuZExpbmVOdW1iZXJFeGNsdXNpdmUgPSBlbmRMaW5lTnVtYmVyRXhjbHVzaXZlO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBJbmRpY2F0ZXMgaWYgdGhpcyBsaW5lIHJhbmdlIGNvbnRhaW5zIHRoZSBnaXZlbiBsaW5lIG51bWJlci5cbiAgICAgKi9cbiAgICBjb250YWlucyhsaW5lTnVtYmVyKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnN0YXJ0TGluZU51bWJlciA8PSBsaW5lTnVtYmVyICYmIGxpbmVOdW1iZXIgPCB0aGlzLmVuZExpbmVOdW1iZXJFeGNsdXNpdmU7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEluZGljYXRlcyBpZiB0aGlzIGxpbmUgcmFuZ2UgaXMgZW1wdHkuXG4gICAgICovXG4gICAgZ2V0IGlzRW1wdHkoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnN0YXJ0TGluZU51bWJlciA9PT0gdGhpcy5lbmRMaW5lTnVtYmVyRXhjbHVzaXZlO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBNb3ZlcyB0aGlzIGxpbmUgcmFuZ2UgYnkgdGhlIGdpdmVuIG9mZnNldCBvZiBsaW5lIG51bWJlcnMuXG4gICAgICovXG4gICAgZGVsdGEob2Zmc2V0KSB7XG4gICAgICAgIHJldHVybiBuZXcgTGluZVJhbmdlKHRoaXMuc3RhcnRMaW5lTnVtYmVyICsgb2Zmc2V0LCB0aGlzLmVuZExpbmVOdW1iZXJFeGNsdXNpdmUgKyBvZmZzZXQpO1xuICAgIH1cbiAgICBkZWx0YUxlbmd0aChvZmZzZXQpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBMaW5lUmFuZ2UodGhpcy5zdGFydExpbmVOdW1iZXIsIHRoaXMuZW5kTGluZU51bWJlckV4Y2x1c2l2ZSArIG9mZnNldCk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFRoZSBudW1iZXIgb2YgbGluZXMgdGhpcyBsaW5lIHJhbmdlIHNwYW5zLlxuICAgICAqL1xuICAgIGdldCBsZW5ndGgoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmVuZExpbmVOdW1iZXJFeGNsdXNpdmUgLSB0aGlzLnN0YXJ0TGluZU51bWJlcjtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIGxpbmUgcmFuZ2UgdGhhdCBjb21iaW5lcyB0aGlzIGFuZCB0aGUgZ2l2ZW4gbGluZSByYW5nZS5cbiAgICAgKi9cbiAgICBqb2luKG90aGVyKSB7XG4gICAgICAgIHJldHVybiBuZXcgTGluZVJhbmdlKE1hdGgubWluKHRoaXMuc3RhcnRMaW5lTnVtYmVyLCBvdGhlci5zdGFydExpbmVOdW1iZXIpLCBNYXRoLm1heCh0aGlzLmVuZExpbmVOdW1iZXJFeGNsdXNpdmUsIG90aGVyLmVuZExpbmVOdW1iZXJFeGNsdXNpdmUpKTtcbiAgICB9XG4gICAgdG9TdHJpbmcoKSB7XG4gICAgICAgIHJldHVybiBgWyR7dGhpcy5zdGFydExpbmVOdW1iZXJ9LCR7dGhpcy5lbmRMaW5lTnVtYmVyRXhjbHVzaXZlfSlgO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBUaGUgcmVzdWx0aW5nIHJhbmdlIGlzIGVtcHR5IGlmIHRoZSByYW5nZXMgZG8gbm90IGludGVyc2VjdCwgYnV0IHRvdWNoLlxuICAgICAqIElmIHRoZSByYW5nZXMgZG9uJ3QgZXZlbiB0b3VjaCwgdGhlIHJlc3VsdCBpcyB1bmRlZmluZWQuXG4gICAgICovXG4gICAgaW50ZXJzZWN0KG90aGVyKSB7XG4gICAgICAgIGNvbnN0IHN0YXJ0TGluZU51bWJlciA9IE1hdGgubWF4KHRoaXMuc3RhcnRMaW5lTnVtYmVyLCBvdGhlci5zdGFydExpbmVOdW1iZXIpO1xuICAgICAgICBjb25zdCBlbmRMaW5lTnVtYmVyRXhjbHVzaXZlID0gTWF0aC5taW4odGhpcy5lbmRMaW5lTnVtYmVyRXhjbHVzaXZlLCBvdGhlci5lbmRMaW5lTnVtYmVyRXhjbHVzaXZlKTtcbiAgICAgICAgaWYgKHN0YXJ0TGluZU51bWJlciA8PSBlbmRMaW5lTnVtYmVyRXhjbHVzaXZlKSB7XG4gICAgICAgICAgICByZXR1cm4gbmV3IExpbmVSYW5nZShzdGFydExpbmVOdW1iZXIsIGVuZExpbmVOdW1iZXJFeGNsdXNpdmUpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgfVxuICAgIGludGVyc2VjdHNTdHJpY3Qob3RoZXIpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuc3RhcnRMaW5lTnVtYmVyIDwgb3RoZXIuZW5kTGluZU51bWJlckV4Y2x1c2l2ZSAmJiBvdGhlci5zdGFydExpbmVOdW1iZXIgPCB0aGlzLmVuZExpbmVOdW1iZXJFeGNsdXNpdmU7XG4gICAgfVxuICAgIG92ZXJsYXBPclRvdWNoKG90aGVyKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnN0YXJ0TGluZU51bWJlciA8PSBvdGhlci5lbmRMaW5lTnVtYmVyRXhjbHVzaXZlICYmIG90aGVyLnN0YXJ0TGluZU51bWJlciA8PSB0aGlzLmVuZExpbmVOdW1iZXJFeGNsdXNpdmU7XG4gICAgfVxuICAgIGVxdWFscyhiKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnN0YXJ0TGluZU51bWJlciA9PT0gYi5zdGFydExpbmVOdW1iZXIgJiYgdGhpcy5lbmRMaW5lTnVtYmVyRXhjbHVzaXZlID09PSBiLmVuZExpbmVOdW1iZXJFeGNsdXNpdmU7XG4gICAgfVxuICAgIHRvSW5jbHVzaXZlUmFuZ2UoKSB7XG4gICAgICAgIGlmICh0aGlzLmlzRW1wdHkpIHtcbiAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBuZXcgUmFuZ2UodGhpcy5zdGFydExpbmVOdW1iZXIsIDEsIHRoaXMuZW5kTGluZU51bWJlckV4Y2x1c2l2ZSAtIDEsIE51bWJlci5NQVhfU0FGRV9JTlRFR0VSKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQGRlcHJlY2F0ZWQgVXNpbmcgdGhpcyBmdW5jdGlvbiBpcyBkaXNjb3VyYWdlZCBiZWNhdXNlIGl0IG1pZ2h0IGxlYWQgdG8gYnVnczogVGhlIGVuZCBwb3NpdGlvbiBpcyBub3QgZ3VhcmFudGVlZCB0byBiZSBhIHZhbGlkIHBvc2l0aW9uIVxuICAgICovXG4gICAgdG9FeGNsdXNpdmVSYW5nZSgpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBSYW5nZSh0aGlzLnN0YXJ0TGluZU51bWJlciwgMSwgdGhpcy5lbmRMaW5lTnVtYmVyRXhjbHVzaXZlLCAxKTtcbiAgICB9XG4gICAgbWFwVG9MaW5lQXJyYXkoZikge1xuICAgICAgICBjb25zdCByZXN1bHQgPSBbXTtcbiAgICAgICAgZm9yIChsZXQgbGluZU51bWJlciA9IHRoaXMuc3RhcnRMaW5lTnVtYmVyOyBsaW5lTnVtYmVyIDwgdGhpcy5lbmRMaW5lTnVtYmVyRXhjbHVzaXZlOyBsaW5lTnVtYmVyKyspIHtcbiAgICAgICAgICAgIHJlc3VsdC5wdXNoKGYobGluZU51bWJlcikpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuICAgIGZvckVhY2goZikge1xuICAgICAgICBmb3IgKGxldCBsaW5lTnVtYmVyID0gdGhpcy5zdGFydExpbmVOdW1iZXI7IGxpbmVOdW1iZXIgPCB0aGlzLmVuZExpbmVOdW1iZXJFeGNsdXNpdmU7IGxpbmVOdW1iZXIrKykge1xuICAgICAgICAgICAgZihsaW5lTnVtYmVyKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICAvKipcbiAgICAgKiBAaW50ZXJuYWxcbiAgICAgKi9cbiAgICBzZXJpYWxpemUoKSB7XG4gICAgICAgIHJldHVybiBbdGhpcy5zdGFydExpbmVOdW1iZXIsIHRoaXMuZW5kTGluZU51bWJlckV4Y2x1c2l2ZV07XG4gICAgfVxuICAgIGluY2x1ZGVzKGxpbmVOdW1iZXIpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuc3RhcnRMaW5lTnVtYmVyIDw9IGxpbmVOdW1iZXIgJiYgbGluZU51bWJlciA8IHRoaXMuZW5kTGluZU51bWJlckV4Y2x1c2l2ZTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQ29udmVydHMgdGhpcyAxLWJhc2VkIGxpbmUgcmFuZ2UgdG8gYSAwLWJhc2VkIG9mZnNldCByYW5nZSAoc3VidHJhY3RzIDEhKS5cbiAgICAgKiBAaW50ZXJuYWxcbiAgICAgKi9cbiAgICB0b09mZnNldFJhbmdlKCkge1xuICAgICAgICByZXR1cm4gbmV3IE9mZnNldFJhbmdlKHRoaXMuc3RhcnRMaW5lTnVtYmVyIC0gMSwgdGhpcy5lbmRMaW5lTnVtYmVyRXhjbHVzaXZlIC0gMSk7XG4gICAgfVxufVxuZXhwb3J0IGNsYXNzIExpbmVSYW5nZVNldCB7XG4gICAgY29uc3RydWN0b3IoXG4gICAgLyoqXG4gICAgICogU29ydGVkIGJ5IHN0YXJ0IGxpbmUgbnVtYmVyLlxuICAgICAqIE5vIHR3byBsaW5lIHJhbmdlcyBhcmUgdG91Y2hpbmcgb3IgaW50ZXJzZWN0aW5nLlxuICAgICAqL1xuICAgIF9ub3JtYWxpemVkUmFuZ2VzID0gW10pIHtcbiAgICAgICAgdGhpcy5fbm9ybWFsaXplZFJhbmdlcyA9IF9ub3JtYWxpemVkUmFuZ2VzO1xuICAgIH1cbiAgICBnZXQgcmFuZ2VzKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fbm9ybWFsaXplZFJhbmdlcztcbiAgICB9XG4gICAgYWRkUmFuZ2UocmFuZ2UpIHtcbiAgICAgICAgaWYgKHJhbmdlLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIC8vIElkZWE6IEZpbmQgam9pblJhbmdlIHN1Y2ggdGhhdDpcbiAgICAgICAgLy8gcmVwbGFjZVJhbmdlID0gX25vcm1hbGl6ZWRSYW5nZXMucmVwbGFjZVJhbmdlKGpvaW5SYW5nZSwgcmFuZ2Uuam9pbkFsbChqb2luUmFuZ2UubWFwKGlkeCA9PiB0aGlzLl9ub3JtYWxpemVkUmFuZ2VzW2lkeF0pKSlcbiAgICAgICAgLy8gaWR4IG9mIGZpcnN0IGVsZW1lbnQgdGhhdCB0b3VjaGVzIHJhbmdlIG9yIHRoYXQgaXMgYWZ0ZXIgcmFuZ2VcbiAgICAgICAgY29uc3Qgam9pblJhbmdlU3RhcnRJZHggPSBmaW5kRmlyc3RJZHhNb25vdG9ub3VzT3JBcnJMZW4odGhpcy5fbm9ybWFsaXplZFJhbmdlcywgciA9PiByLmVuZExpbmVOdW1iZXJFeGNsdXNpdmUgPj0gcmFuZ2Uuc3RhcnRMaW5lTnVtYmVyKTtcbiAgICAgICAgLy8gaWR4IG9mIGVsZW1lbnQgYWZ0ZXIgeyBsYXN0IGVsZW1lbnQgdGhhdCB0b3VjaGVzIHJhbmdlIG9yIHRoYXQgaXMgYmVmb3JlIHJhbmdlIH1cbiAgICAgICAgY29uc3Qgam9pblJhbmdlRW5kSWR4RXhjbHVzaXZlID0gZmluZExhc3RJZHhNb25vdG9ub3VzKHRoaXMuX25vcm1hbGl6ZWRSYW5nZXMsIHIgPT4gci5zdGFydExpbmVOdW1iZXIgPD0gcmFuZ2UuZW5kTGluZU51bWJlckV4Y2x1c2l2ZSkgKyAxO1xuICAgICAgICBpZiAoam9pblJhbmdlU3RhcnRJZHggPT09IGpvaW5SYW5nZUVuZElkeEV4Y2x1c2l2ZSkge1xuICAgICAgICAgICAgLy8gSWYgdGhlcmUgaXMgbm8gZWxlbWVudCB0aGF0IHRvdWNoZXMgcmFuZ2UsIHRoZW4gam9pblJhbmdlU3RhcnRJZHggPT09IGpvaW5SYW5nZUVuZElkeEV4Y2x1c2l2ZSBhbmQgdGhhdCB2YWx1ZSBpcyB0aGUgaW5kZXggb2YgdGhlIGVsZW1lbnQgYWZ0ZXIgcmFuZ2VcbiAgICAgICAgICAgIHRoaXMuX25vcm1hbGl6ZWRSYW5nZXMuc3BsaWNlKGpvaW5SYW5nZVN0YXJ0SWR4LCAwLCByYW5nZSk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAoam9pblJhbmdlU3RhcnRJZHggPT09IGpvaW5SYW5nZUVuZElkeEV4Y2x1c2l2ZSAtIDEpIHtcbiAgICAgICAgICAgIC8vIEVsc2UsIHRoZXJlIGlzIGFuIGVsZW1lbnQgdGhhdCB0b3VjaGVzIHJhbmdlIGFuZCBpbiB0aGlzIGNhc2UgaXQgaXMgYm90aCB0aGUgZmlyc3QgYW5kIGxhc3QgZWxlbWVudC4gVGh1cyB3ZSBjYW4gcmVwbGFjZSBpdFxuICAgICAgICAgICAgY29uc3Qgam9pblJhbmdlID0gdGhpcy5fbm9ybWFsaXplZFJhbmdlc1tqb2luUmFuZ2VTdGFydElkeF07XG4gICAgICAgICAgICB0aGlzLl9ub3JtYWxpemVkUmFuZ2VzW2pvaW5SYW5nZVN0YXJ0SWR4XSA9IGpvaW5SYW5nZS5qb2luKHJhbmdlKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIC8vIEZpcnN0IGFuZCBsYXN0IGVsZW1lbnQgYXJlIGRpZmZlcmVudCAtIHdlIG5lZWQgdG8gcmVwbGFjZSB0aGUgZW50aXJlIHJhbmdlXG4gICAgICAgICAgICBjb25zdCBqb2luUmFuZ2UgPSB0aGlzLl9ub3JtYWxpemVkUmFuZ2VzW2pvaW5SYW5nZVN0YXJ0SWR4XS5qb2luKHRoaXMuX25vcm1hbGl6ZWRSYW5nZXNbam9pblJhbmdlRW5kSWR4RXhjbHVzaXZlIC0gMV0pLmpvaW4ocmFuZ2UpO1xuICAgICAgICAgICAgdGhpcy5fbm9ybWFsaXplZFJhbmdlcy5zcGxpY2Uoam9pblJhbmdlU3RhcnRJZHgsIGpvaW5SYW5nZUVuZElkeEV4Y2x1c2l2ZSAtIGpvaW5SYW5nZVN0YXJ0SWR4LCBqb2luUmFuZ2UpO1xuICAgICAgICB9XG4gICAgfVxuICAgIGNvbnRhaW5zKGxpbmVOdW1iZXIpIHtcbiAgICAgICAgY29uc3QgcmFuZ2VUaGF0U3RhcnRzQmVmb3JlRW5kID0gZmluZExhc3RNb25vdG9ub3VzKHRoaXMuX25vcm1hbGl6ZWRSYW5nZXMsIHIgPT4gci5zdGFydExpbmVOdW1iZXIgPD0gbGluZU51bWJlcik7XG4gICAgICAgIHJldHVybiAhIXJhbmdlVGhhdFN0YXJ0c0JlZm9yZUVuZCAmJiByYW5nZVRoYXRTdGFydHNCZWZvcmVFbmQuZW5kTGluZU51bWJlckV4Y2x1c2l2ZSA+IGxpbmVOdW1iZXI7XG4gICAgfVxuICAgIGludGVyc2VjdHMocmFuZ2UpIHtcbiAgICAgICAgY29uc3QgcmFuZ2VUaGF0U3RhcnRzQmVmb3JlRW5kID0gZmluZExhc3RNb25vdG9ub3VzKHRoaXMuX25vcm1hbGl6ZWRSYW5nZXMsIHIgPT4gci5zdGFydExpbmVOdW1iZXIgPCByYW5nZS5lbmRMaW5lTnVtYmVyRXhjbHVzaXZlKTtcbiAgICAgICAgcmV0dXJuICEhcmFuZ2VUaGF0U3RhcnRzQmVmb3JlRW5kICYmIHJhbmdlVGhhdFN0YXJ0c0JlZm9yZUVuZC5lbmRMaW5lTnVtYmVyRXhjbHVzaXZlID4gcmFuZ2Uuc3RhcnRMaW5lTnVtYmVyO1xuICAgIH1cbiAgICBnZXRVbmlvbihvdGhlcikge1xuICAgICAgICBpZiAodGhpcy5fbm9ybWFsaXplZFJhbmdlcy5sZW5ndGggPT09IDApIHtcbiAgICAgICAgICAgIHJldHVybiBvdGhlcjtcbiAgICAgICAgfVxuICAgICAgICBpZiAob3RoZXIuX25vcm1hbGl6ZWRSYW5nZXMubGVuZ3RoID09PSAwKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgICAgfVxuICAgICAgICBjb25zdCByZXN1bHQgPSBbXTtcbiAgICAgICAgbGV0IGkxID0gMDtcbiAgICAgICAgbGV0IGkyID0gMDtcbiAgICAgICAgbGV0IGN1cnJlbnQgPSBudWxsO1xuICAgICAgICB3aGlsZSAoaTEgPCB0aGlzLl9ub3JtYWxpemVkUmFuZ2VzLmxlbmd0aCB8fCBpMiA8IG90aGVyLl9ub3JtYWxpemVkUmFuZ2VzLmxlbmd0aCkge1xuICAgICAgICAgICAgbGV0IG5leHQgPSBudWxsO1xuICAgICAgICAgICAgaWYgKGkxIDwgdGhpcy5fbm9ybWFsaXplZFJhbmdlcy5sZW5ndGggJiYgaTIgPCBvdGhlci5fbm9ybWFsaXplZFJhbmdlcy5sZW5ndGgpIHtcbiAgICAgICAgICAgICAgICBjb25zdCBsaW5lUmFuZ2UxID0gdGhpcy5fbm9ybWFsaXplZFJhbmdlc1tpMV07XG4gICAgICAgICAgICAgICAgY29uc3QgbGluZVJhbmdlMiA9IG90aGVyLl9ub3JtYWxpemVkUmFuZ2VzW2kyXTtcbiAgICAgICAgICAgICAgICBpZiAobGluZVJhbmdlMS5zdGFydExpbmVOdW1iZXIgPCBsaW5lUmFuZ2UyLnN0YXJ0TGluZU51bWJlcikge1xuICAgICAgICAgICAgICAgICAgICBuZXh0ID0gbGluZVJhbmdlMTtcbiAgICAgICAgICAgICAgICAgICAgaTErKztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIG5leHQgPSBsaW5lUmFuZ2UyO1xuICAgICAgICAgICAgICAgICAgICBpMisrO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKGkxIDwgdGhpcy5fbm9ybWFsaXplZFJhbmdlcy5sZW5ndGgpIHtcbiAgICAgICAgICAgICAgICBuZXh0ID0gdGhpcy5fbm9ybWFsaXplZFJhbmdlc1tpMV07XG4gICAgICAgICAgICAgICAgaTErKztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIG5leHQgPSBvdGhlci5fbm9ybWFsaXplZFJhbmdlc1tpMl07XG4gICAgICAgICAgICAgICAgaTIrKztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChjdXJyZW50ID09PSBudWxsKSB7XG4gICAgICAgICAgICAgICAgY3VycmVudCA9IG5leHQ7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICBpZiAoY3VycmVudC5lbmRMaW5lTnVtYmVyRXhjbHVzaXZlID49IG5leHQuc3RhcnRMaW5lTnVtYmVyKSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIG1lcmdlXG4gICAgICAgICAgICAgICAgICAgIGN1cnJlbnQgPSBuZXcgTGluZVJhbmdlKGN1cnJlbnQuc3RhcnRMaW5lTnVtYmVyLCBNYXRoLm1heChjdXJyZW50LmVuZExpbmVOdW1iZXJFeGNsdXNpdmUsIG5leHQuZW5kTGluZU51bWJlckV4Y2x1c2l2ZSkpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gcHVzaFxuICAgICAgICAgICAgICAgICAgICByZXN1bHQucHVzaChjdXJyZW50KTtcbiAgICAgICAgICAgICAgICAgICAgY3VycmVudCA9IG5leHQ7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGlmIChjdXJyZW50ICE9PSBudWxsKSB7XG4gICAgICAgICAgICByZXN1bHQucHVzaChjdXJyZW50KTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbmV3IExpbmVSYW5nZVNldChyZXN1bHQpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBTdWJ0cmFjdHMgYWxsIHJhbmdlcyBpbiB0aGlzIHNldCBmcm9tIGByYW5nZWAgYW5kIHJldHVybnMgdGhlIHJlc3VsdC5cbiAgICAgKi9cbiAgICBzdWJ0cmFjdEZyb20ocmFuZ2UpIHtcbiAgICAgICAgLy8gaWR4IG9mIGZpcnN0IGVsZW1lbnQgdGhhdCB0b3VjaGVzIHJhbmdlIG9yIHRoYXQgaXMgYWZ0ZXIgcmFuZ2VcbiAgICAgICAgY29uc3Qgam9pblJhbmdlU3RhcnRJZHggPSBmaW5kRmlyc3RJZHhNb25vdG9ub3VzT3JBcnJMZW4odGhpcy5fbm9ybWFsaXplZFJhbmdlcywgciA9PiByLmVuZExpbmVOdW1iZXJFeGNsdXNpdmUgPj0gcmFuZ2Uuc3RhcnRMaW5lTnVtYmVyKTtcbiAgICAgICAgLy8gaWR4IG9mIGVsZW1lbnQgYWZ0ZXIgeyBsYXN0IGVsZW1lbnQgdGhhdCB0b3VjaGVzIHJhbmdlIG9yIHRoYXQgaXMgYmVmb3JlIHJhbmdlIH1cbiAgICAgICAgY29uc3Qgam9pblJhbmdlRW5kSWR4RXhjbHVzaXZlID0gZmluZExhc3RJZHhNb25vdG9ub3VzKHRoaXMuX25vcm1hbGl6ZWRSYW5nZXMsIHIgPT4gci5zdGFydExpbmVOdW1iZXIgPD0gcmFuZ2UuZW5kTGluZU51bWJlckV4Y2x1c2l2ZSkgKyAxO1xuICAgICAgICBpZiAoam9pblJhbmdlU3RhcnRJZHggPT09IGpvaW5SYW5nZUVuZElkeEV4Y2x1c2l2ZSkge1xuICAgICAgICAgICAgcmV0dXJuIG5ldyBMaW5lUmFuZ2VTZXQoW3JhbmdlXSk7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgcmVzdWx0ID0gW107XG4gICAgICAgIGxldCBzdGFydExpbmVOdW1iZXIgPSByYW5nZS5zdGFydExpbmVOdW1iZXI7XG4gICAgICAgIGZvciAobGV0IGkgPSBqb2luUmFuZ2VTdGFydElkeDsgaSA8IGpvaW5SYW5nZUVuZElkeEV4Y2x1c2l2ZTsgaSsrKSB7XG4gICAgICAgICAgICBjb25zdCByID0gdGhpcy5fbm9ybWFsaXplZFJhbmdlc1tpXTtcbiAgICAgICAgICAgIGlmIChyLnN0YXJ0TGluZU51bWJlciA+IHN0YXJ0TGluZU51bWJlcikge1xuICAgICAgICAgICAgICAgIHJlc3VsdC5wdXNoKG5ldyBMaW5lUmFuZ2Uoc3RhcnRMaW5lTnVtYmVyLCByLnN0YXJ0TGluZU51bWJlcikpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgc3RhcnRMaW5lTnVtYmVyID0gci5lbmRMaW5lTnVtYmVyRXhjbHVzaXZlO1xuICAgICAgICB9XG4gICAgICAgIGlmIChzdGFydExpbmVOdW1iZXIgPCByYW5nZS5lbmRMaW5lTnVtYmVyRXhjbHVzaXZlKSB7XG4gICAgICAgICAgICByZXN1bHQucHVzaChuZXcgTGluZVJhbmdlKHN0YXJ0TGluZU51bWJlciwgcmFuZ2UuZW5kTGluZU51bWJlckV4Y2x1c2l2ZSkpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBuZXcgTGluZVJhbmdlU2V0KHJlc3VsdCk7XG4gICAgfVxuICAgIHRvU3RyaW5nKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fbm9ybWFsaXplZFJhbmdlcy5tYXAociA9PiByLnRvU3RyaW5nKCkpLmpvaW4oJywgJyk7XG4gICAgfVxuICAgIGdldEludGVyc2VjdGlvbihvdGhlcikge1xuICAgICAgICBjb25zdCByZXN1bHQgPSBbXTtcbiAgICAgICAgbGV0IGkxID0gMDtcbiAgICAgICAgbGV0IGkyID0gMDtcbiAgICAgICAgd2hpbGUgKGkxIDwgdGhpcy5fbm9ybWFsaXplZFJhbmdlcy5sZW5ndGggJiYgaTIgPCBvdGhlci5fbm9ybWFsaXplZFJhbmdlcy5sZW5ndGgpIHtcbiAgICAgICAgICAgIGNvbnN0IHIxID0gdGhpcy5fbm9ybWFsaXplZFJhbmdlc1tpMV07XG4gICAgICAgICAgICBjb25zdCByMiA9IG90aGVyLl9ub3JtYWxpemVkUmFuZ2VzW2kyXTtcbiAgICAgICAgICAgIGNvbnN0IGkgPSByMS5pbnRlcnNlY3QocjIpO1xuICAgICAgICAgICAgaWYgKGkgJiYgIWkuaXNFbXB0eSkge1xuICAgICAgICAgICAgICAgIHJlc3VsdC5wdXNoKGkpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKHIxLmVuZExpbmVOdW1iZXJFeGNsdXNpdmUgPCByMi5lbmRMaW5lTnVtYmVyRXhjbHVzaXZlKSB7XG4gICAgICAgICAgICAgICAgaTErKztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIGkyKys7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG5ldyBMaW5lUmFuZ2VTZXQocmVzdWx0KTtcbiAgICB9XG4gICAgZ2V0V2l0aERlbHRhKHZhbHVlKSB7XG4gICAgICAgIHJldHVybiBuZXcgTGluZVJhbmdlU2V0KHRoaXMuX25vcm1hbGl6ZWRSYW5nZXMubWFwKHIgPT4gci5kZWx0YSh2YWx1ZSkpKTtcbiAgICB9XG59XG4iLCAiLyotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAqICBDb3B5cmlnaHQgKGMpIE1pY3Jvc29mdCBDb3Jwb3JhdGlvbi4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqICBMaWNlbnNlZCB1bmRlciB0aGUgTUlUIExpY2Vuc2UuIFNlZSBMaWNlbnNlLnR4dCBpbiB0aGUgcHJvamVjdCByb290IGZvciBsaWNlbnNlIGluZm9ybWF0aW9uLlxuICotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSovXG5pbXBvcnQgeyBQb3NpdGlvbiB9IGZyb20gJy4vcG9zaXRpb24uanMnO1xuaW1wb3J0IHsgUmFuZ2UgfSBmcm9tICcuL3JhbmdlLmpzJztcbi8qKlxuICogUmVwcmVzZW50cyBhIG5vbi1uZWdhdGl2ZSBsZW5ndGggb2YgdGV4dCBpbiB0ZXJtcyBvZiBsaW5lIGFuZCBjb2x1bW4gY291bnQuXG4qL1xuZXhwb3J0IGNsYXNzIFRleHRMZW5ndGgge1xuICAgIHN0YXRpYyBiZXR3ZWVuUG9zaXRpb25zKHBvc2l0aW9uMSwgcG9zaXRpb24yKSB7XG4gICAgICAgIGlmIChwb3NpdGlvbjEubGluZU51bWJlciA9PT0gcG9zaXRpb24yLmxpbmVOdW1iZXIpIHtcbiAgICAgICAgICAgIHJldHVybiBuZXcgVGV4dExlbmd0aCgwLCBwb3NpdGlvbjIuY29sdW1uIC0gcG9zaXRpb24xLmNvbHVtbik7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gbmV3IFRleHRMZW5ndGgocG9zaXRpb24yLmxpbmVOdW1iZXIgLSBwb3NpdGlvbjEubGluZU51bWJlciwgcG9zaXRpb24yLmNvbHVtbiAtIDEpO1xuICAgICAgICB9XG4gICAgfVxuICAgIHN0YXRpYyBvZlJhbmdlKHJhbmdlKSB7XG4gICAgICAgIHJldHVybiBUZXh0TGVuZ3RoLmJldHdlZW5Qb3NpdGlvbnMocmFuZ2UuZ2V0U3RhcnRQb3NpdGlvbigpLCByYW5nZS5nZXRFbmRQb3NpdGlvbigpKTtcbiAgICB9XG4gICAgc3RhdGljIG9mVGV4dCh0ZXh0KSB7XG4gICAgICAgIGxldCBsaW5lID0gMDtcbiAgICAgICAgbGV0IGNvbHVtbiA9IDA7XG4gICAgICAgIGZvciAoY29uc3QgYyBvZiB0ZXh0KSB7XG4gICAgICAgICAgICBpZiAoYyA9PT0gJ1xcbicpIHtcbiAgICAgICAgICAgICAgICBsaW5lKys7XG4gICAgICAgICAgICAgICAgY29sdW1uID0gMDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIGNvbHVtbisrO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBuZXcgVGV4dExlbmd0aChsaW5lLCBjb2x1bW4pO1xuICAgIH1cbiAgICBjb25zdHJ1Y3RvcihsaW5lQ291bnQsIGNvbHVtbkNvdW50KSB7XG4gICAgICAgIHRoaXMubGluZUNvdW50ID0gbGluZUNvdW50O1xuICAgICAgICB0aGlzLmNvbHVtbkNvdW50ID0gY29sdW1uQ291bnQ7XG4gICAgfVxuICAgIGlzR3JlYXRlclRoYW5PckVxdWFsVG8ob3RoZXIpIHtcbiAgICAgICAgaWYgKHRoaXMubGluZUNvdW50ICE9PSBvdGhlci5saW5lQ291bnQpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmxpbmVDb3VudCA+IG90aGVyLmxpbmVDb3VudDtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdGhpcy5jb2x1bW5Db3VudCA+PSBvdGhlci5jb2x1bW5Db3VudDtcbiAgICB9XG4gICAgY3JlYXRlUmFuZ2Uoc3RhcnRQb3NpdGlvbikge1xuICAgICAgICBpZiAodGhpcy5saW5lQ291bnQgPT09IDApIHtcbiAgICAgICAgICAgIHJldHVybiBuZXcgUmFuZ2Uoc3RhcnRQb3NpdGlvbi5saW5lTnVtYmVyLCBzdGFydFBvc2l0aW9uLmNvbHVtbiwgc3RhcnRQb3NpdGlvbi5saW5lTnVtYmVyLCBzdGFydFBvc2l0aW9uLmNvbHVtbiArIHRoaXMuY29sdW1uQ291bnQpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIG5ldyBSYW5nZShzdGFydFBvc2l0aW9uLmxpbmVOdW1iZXIsIHN0YXJ0UG9zaXRpb24uY29sdW1uLCBzdGFydFBvc2l0aW9uLmxpbmVOdW1iZXIgKyB0aGlzLmxpbmVDb3VudCwgdGhpcy5jb2x1bW5Db3VudCArIDEpO1xuICAgICAgICB9XG4gICAgfVxuICAgIGFkZFRvUG9zaXRpb24ocG9zaXRpb24pIHtcbiAgICAgICAgaWYgKHRoaXMubGluZUNvdW50ID09PSAwKSB7XG4gICAgICAgICAgICByZXR1cm4gbmV3IFBvc2l0aW9uKHBvc2l0aW9uLmxpbmVOdW1iZXIsIHBvc2l0aW9uLmNvbHVtbiArIHRoaXMuY29sdW1uQ291bnQpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIG5ldyBQb3NpdGlvbihwb3NpdGlvbi5saW5lTnVtYmVyICsgdGhpcy5saW5lQ291bnQsIHRoaXMuY29sdW1uQ291bnQgKyAxKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICB0b1N0cmluZygpIHtcbiAgICAgICAgcmV0dXJuIGAke3RoaXMubGluZUNvdW50fSwke3RoaXMuY29sdW1uQ291bnR9YDtcbiAgICB9XG59XG5UZXh0TGVuZ3RoLnplcm8gPSBuZXcgVGV4dExlbmd0aCgwLCAwKTtcbiIsICIvKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICogIENvcHlyaWdodCAoYykgTWljcm9zb2Z0IENvcnBvcmF0aW9uLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICogIExpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgTGljZW5zZS4gU2VlIExpY2Vuc2UudHh0IGluIHRoZSBwcm9qZWN0IHJvb3QgZm9yIGxpY2Vuc2UgaW5mb3JtYXRpb24uXG4gKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKi9cbmltcG9ydCB7IGFzc2VydEZuLCBjaGVja0FkamFjZW50SXRlbXMgfSBmcm9tICcuLi8uLi8uLi9iYXNlL2NvbW1vbi9hc3NlcnQuanMnO1xuaW1wb3J0IHsgQnVnSW5kaWNhdGluZ0Vycm9yIH0gZnJvbSAnLi4vLi4vLi4vYmFzZS9jb21tb24vZXJyb3JzLmpzJztcbmltcG9ydCB7IFBvc2l0aW9uIH0gZnJvbSAnLi9wb3NpdGlvbi5qcyc7XG5pbXBvcnQgeyBQb3NpdGlvbk9mZnNldFRyYW5zZm9ybWVyIH0gZnJvbSAnLi9wb3NpdGlvblRvT2Zmc2V0LmpzJztcbmltcG9ydCB7IFJhbmdlIH0gZnJvbSAnLi9yYW5nZS5qcyc7XG5pbXBvcnQgeyBUZXh0TGVuZ3RoIH0gZnJvbSAnLi90ZXh0TGVuZ3RoLmpzJztcbmV4cG9ydCBjbGFzcyBUZXh0RWRpdCB7XG4gICAgY29uc3RydWN0b3IoZWRpdHMpIHtcbiAgICAgICAgdGhpcy5lZGl0cyA9IGVkaXRzO1xuICAgICAgICBhc3NlcnRGbigoKSA9PiBjaGVja0FkamFjZW50SXRlbXMoZWRpdHMsIChhLCBiKSA9PiBhLnJhbmdlLmdldEVuZFBvc2l0aW9uKCkuaXNCZWZvcmVPckVxdWFsKGIucmFuZ2UuZ2V0U3RhcnRQb3NpdGlvbigpKSkpO1xuICAgIH1cbiAgICBhcHBseSh0ZXh0KSB7XG4gICAgICAgIGxldCByZXN1bHQgPSAnJztcbiAgICAgICAgbGV0IGxhc3RFZGl0RW5kID0gbmV3IFBvc2l0aW9uKDEsIDEpO1xuICAgICAgICBmb3IgKGNvbnN0IGVkaXQgb2YgdGhpcy5lZGl0cykge1xuICAgICAgICAgICAgY29uc3QgZWRpdFJhbmdlID0gZWRpdC5yYW5nZTtcbiAgICAgICAgICAgIGNvbnN0IGVkaXRTdGFydCA9IGVkaXRSYW5nZS5nZXRTdGFydFBvc2l0aW9uKCk7XG4gICAgICAgICAgICBjb25zdCBlZGl0RW5kID0gZWRpdFJhbmdlLmdldEVuZFBvc2l0aW9uKCk7XG4gICAgICAgICAgICBjb25zdCByID0gcmFuZ2VGcm9tUG9zaXRpb25zKGxhc3RFZGl0RW5kLCBlZGl0U3RhcnQpO1xuICAgICAgICAgICAgaWYgKCFyLmlzRW1wdHkoKSkge1xuICAgICAgICAgICAgICAgIHJlc3VsdCArPSB0ZXh0LmdldFZhbHVlT2ZSYW5nZShyKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJlc3VsdCArPSBlZGl0LnRleHQ7XG4gICAgICAgICAgICBsYXN0RWRpdEVuZCA9IGVkaXRFbmQ7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgciA9IHJhbmdlRnJvbVBvc2l0aW9ucyhsYXN0RWRpdEVuZCwgdGV4dC5lbmRQb3NpdGlvbkV4Y2x1c2l2ZSk7XG4gICAgICAgIGlmICghci5pc0VtcHR5KCkpIHtcbiAgICAgICAgICAgIHJlc3VsdCArPSB0ZXh0LmdldFZhbHVlT2ZSYW5nZShyKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cbiAgICBhcHBseVRvU3RyaW5nKHN0cikge1xuICAgICAgICBjb25zdCBzdHJUZXh0ID0gbmV3IFN0cmluZ1RleHQoc3RyKTtcbiAgICAgICAgcmV0dXJuIHRoaXMuYXBwbHkoc3RyVGV4dCk7XG4gICAgfVxuICAgIGdldE5ld1JhbmdlcygpIHtcbiAgICAgICAgY29uc3QgbmV3UmFuZ2VzID0gW107XG4gICAgICAgIGxldCBwcmV2aW91c0VkaXRFbmRMaW5lTnVtYmVyID0gMDtcbiAgICAgICAgbGV0IGxpbmVPZmZzZXQgPSAwO1xuICAgICAgICBsZXQgY29sdW1uT2Zmc2V0ID0gMDtcbiAgICAgICAgZm9yIChjb25zdCBlZGl0IG9mIHRoaXMuZWRpdHMpIHtcbiAgICAgICAgICAgIGNvbnN0IHRleHRMZW5ndGggPSBUZXh0TGVuZ3RoLm9mVGV4dChlZGl0LnRleHQpO1xuICAgICAgICAgICAgY29uc3QgbmV3UmFuZ2VTdGFydCA9IFBvc2l0aW9uLmxpZnQoe1xuICAgICAgICAgICAgICAgIGxpbmVOdW1iZXI6IGVkaXQucmFuZ2Uuc3RhcnRMaW5lTnVtYmVyICsgbGluZU9mZnNldCxcbiAgICAgICAgICAgICAgICBjb2x1bW46IGVkaXQucmFuZ2Uuc3RhcnRDb2x1bW4gKyAoZWRpdC5yYW5nZS5zdGFydExpbmVOdW1iZXIgPT09IHByZXZpb3VzRWRpdEVuZExpbmVOdW1iZXIgPyBjb2x1bW5PZmZzZXQgOiAwKVxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICBjb25zdCBuZXdSYW5nZSA9IHRleHRMZW5ndGguY3JlYXRlUmFuZ2UobmV3UmFuZ2VTdGFydCk7XG4gICAgICAgICAgICBuZXdSYW5nZXMucHVzaChuZXdSYW5nZSk7XG4gICAgICAgICAgICBsaW5lT2Zmc2V0ID0gbmV3UmFuZ2UuZW5kTGluZU51bWJlciAtIGVkaXQucmFuZ2UuZW5kTGluZU51bWJlcjtcbiAgICAgICAgICAgIGNvbHVtbk9mZnNldCA9IG5ld1JhbmdlLmVuZENvbHVtbiAtIGVkaXQucmFuZ2UuZW5kQ29sdW1uO1xuICAgICAgICAgICAgcHJldmlvdXNFZGl0RW5kTGluZU51bWJlciA9IGVkaXQucmFuZ2UuZW5kTGluZU51bWJlcjtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbmV3UmFuZ2VzO1xuICAgIH1cbn1cbmV4cG9ydCBjbGFzcyBTaW5nbGVUZXh0RWRpdCB7XG4gICAgY29uc3RydWN0b3IocmFuZ2UsIHRleHQpIHtcbiAgICAgICAgdGhpcy5yYW5nZSA9IHJhbmdlO1xuICAgICAgICB0aGlzLnRleHQgPSB0ZXh0O1xuICAgIH1cbn1cbmZ1bmN0aW9uIHJhbmdlRnJvbVBvc2l0aW9ucyhzdGFydCwgZW5kKSB7XG4gICAgaWYgKHN0YXJ0LmxpbmVOdW1iZXIgPT09IGVuZC5saW5lTnVtYmVyICYmIHN0YXJ0LmNvbHVtbiA9PT0gTnVtYmVyLk1BWF9TQUZFX0lOVEVHRVIpIHtcbiAgICAgICAgcmV0dXJuIFJhbmdlLmZyb21Qb3NpdGlvbnMoZW5kLCBlbmQpO1xuICAgIH1cbiAgICBlbHNlIGlmICghc3RhcnQuaXNCZWZvcmVPckVxdWFsKGVuZCkpIHtcbiAgICAgICAgdGhyb3cgbmV3IEJ1Z0luZGljYXRpbmdFcnJvcignc3RhcnQgbXVzdCBiZSBiZWZvcmUgZW5kJyk7XG4gICAgfVxuICAgIHJldHVybiBuZXcgUmFuZ2Uoc3RhcnQubGluZU51bWJlciwgc3RhcnQuY29sdW1uLCBlbmQubGluZU51bWJlciwgZW5kLmNvbHVtbik7XG59XG5leHBvcnQgY2xhc3MgQWJzdHJhY3RUZXh0IHtcbiAgICBnZXQgZW5kUG9zaXRpb25FeGNsdXNpdmUoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmxlbmd0aC5hZGRUb1Bvc2l0aW9uKG5ldyBQb3NpdGlvbigxLCAxKSk7XG4gICAgfVxufVxuZXhwb3J0IGNsYXNzIFN0cmluZ1RleHQgZXh0ZW5kcyBBYnN0cmFjdFRleHQge1xuICAgIGNvbnN0cnVjdG9yKHZhbHVlKSB7XG4gICAgICAgIHN1cGVyKCk7XG4gICAgICAgIHRoaXMudmFsdWUgPSB2YWx1ZTtcbiAgICAgICAgdGhpcy5fdCA9IG5ldyBQb3NpdGlvbk9mZnNldFRyYW5zZm9ybWVyKHRoaXMudmFsdWUpO1xuICAgIH1cbiAgICBnZXRWYWx1ZU9mUmFuZ2UocmFuZ2UpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX3QuZ2V0T2Zmc2V0UmFuZ2UocmFuZ2UpLnN1YnN0cmluZyh0aGlzLnZhbHVlKTtcbiAgICB9XG4gICAgZ2V0IGxlbmd0aCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX3QudGV4dExlbmd0aDtcbiAgICB9XG59XG4iLCAiLyotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAqICBDb3B5cmlnaHQgKGMpIE1pY3Jvc29mdCBDb3Jwb3JhdGlvbi4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqICBMaWNlbnNlZCB1bmRlciB0aGUgTUlUIExpY2Vuc2UuIFNlZSBMaWNlbnNlLnR4dCBpbiB0aGUgcHJvamVjdCByb290IGZvciBsaWNlbnNlIGluZm9ybWF0aW9uLlxuICotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSovXG5pbXBvcnQgeyBCdWdJbmRpY2F0aW5nRXJyb3IgfSBmcm9tICcuLi8uLi8uLi9iYXNlL2NvbW1vbi9lcnJvcnMuanMnO1xuaW1wb3J0IHsgTGluZVJhbmdlIH0gZnJvbSAnLi4vY29yZS9saW5lUmFuZ2UuanMnO1xuaW1wb3J0IHsgUmFuZ2UgfSBmcm9tICcuLi9jb3JlL3JhbmdlLmpzJztcbmltcG9ydCB7IFNpbmdsZVRleHRFZGl0IH0gZnJvbSAnLi4vY29yZS90ZXh0RWRpdC5qcyc7XG4vKipcbiAqIE1hcHMgYSBsaW5lIHJhbmdlIGluIHRoZSBvcmlnaW5hbCB0ZXh0IG1vZGVsIHRvIGEgbGluZSByYW5nZSBpbiB0aGUgbW9kaWZpZWQgdGV4dCBtb2RlbC5cbiAqL1xuZXhwb3J0IGNsYXNzIExpbmVSYW5nZU1hcHBpbmcge1xuICAgIHN0YXRpYyBpbnZlcnNlKG1hcHBpbmcsIG9yaWdpbmFsTGluZUNvdW50LCBtb2RpZmllZExpbmVDb3VudCkge1xuICAgICAgICBjb25zdCByZXN1bHQgPSBbXTtcbiAgICAgICAgbGV0IGxhc3RPcmlnaW5hbEVuZExpbmVOdW1iZXIgPSAxO1xuICAgICAgICBsZXQgbGFzdE1vZGlmaWVkRW5kTGluZU51bWJlciA9IDE7XG4gICAgICAgIGZvciAoY29uc3QgbSBvZiBtYXBwaW5nKSB7XG4gICAgICAgICAgICBjb25zdCByID0gbmV3IExpbmVSYW5nZU1hcHBpbmcobmV3IExpbmVSYW5nZShsYXN0T3JpZ2luYWxFbmRMaW5lTnVtYmVyLCBtLm9yaWdpbmFsLnN0YXJ0TGluZU51bWJlciksIG5ldyBMaW5lUmFuZ2UobGFzdE1vZGlmaWVkRW5kTGluZU51bWJlciwgbS5tb2RpZmllZC5zdGFydExpbmVOdW1iZXIpKTtcbiAgICAgICAgICAgIGlmICghci5tb2RpZmllZC5pc0VtcHR5KSB7XG4gICAgICAgICAgICAgICAgcmVzdWx0LnB1c2gocik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBsYXN0T3JpZ2luYWxFbmRMaW5lTnVtYmVyID0gbS5vcmlnaW5hbC5lbmRMaW5lTnVtYmVyRXhjbHVzaXZlO1xuICAgICAgICAgICAgbGFzdE1vZGlmaWVkRW5kTGluZU51bWJlciA9IG0ubW9kaWZpZWQuZW5kTGluZU51bWJlckV4Y2x1c2l2ZTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCByID0gbmV3IExpbmVSYW5nZU1hcHBpbmcobmV3IExpbmVSYW5nZShsYXN0T3JpZ2luYWxFbmRMaW5lTnVtYmVyLCBvcmlnaW5hbExpbmVDb3VudCArIDEpLCBuZXcgTGluZVJhbmdlKGxhc3RNb2RpZmllZEVuZExpbmVOdW1iZXIsIG1vZGlmaWVkTGluZUNvdW50ICsgMSkpO1xuICAgICAgICBpZiAoIXIubW9kaWZpZWQuaXNFbXB0eSkge1xuICAgICAgICAgICAgcmVzdWx0LnB1c2gocik7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG4gICAgc3RhdGljIGNsaXAobWFwcGluZywgb3JpZ2luYWxSYW5nZSwgbW9kaWZpZWRSYW5nZSkge1xuICAgICAgICBjb25zdCByZXN1bHQgPSBbXTtcbiAgICAgICAgZm9yIChjb25zdCBtIG9mIG1hcHBpbmcpIHtcbiAgICAgICAgICAgIGNvbnN0IG9yaWdpbmFsID0gbS5vcmlnaW5hbC5pbnRlcnNlY3Qob3JpZ2luYWxSYW5nZSk7XG4gICAgICAgICAgICBjb25zdCBtb2RpZmllZCA9IG0ubW9kaWZpZWQuaW50ZXJzZWN0KG1vZGlmaWVkUmFuZ2UpO1xuICAgICAgICAgICAgaWYgKG9yaWdpbmFsICYmICFvcmlnaW5hbC5pc0VtcHR5ICYmIG1vZGlmaWVkICYmICFtb2RpZmllZC5pc0VtcHR5KSB7XG4gICAgICAgICAgICAgICAgcmVzdWx0LnB1c2gobmV3IExpbmVSYW5nZU1hcHBpbmcob3JpZ2luYWwsIG1vZGlmaWVkKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG4gICAgY29uc3RydWN0b3Iob3JpZ2luYWxSYW5nZSwgbW9kaWZpZWRSYW5nZSkge1xuICAgICAgICB0aGlzLm9yaWdpbmFsID0gb3JpZ2luYWxSYW5nZTtcbiAgICAgICAgdGhpcy5tb2RpZmllZCA9IG1vZGlmaWVkUmFuZ2U7XG4gICAgfVxuICAgIHRvU3RyaW5nKCkge1xuICAgICAgICByZXR1cm4gYHske3RoaXMub3JpZ2luYWwudG9TdHJpbmcoKX0tPiR7dGhpcy5tb2RpZmllZC50b1N0cmluZygpfX1gO1xuICAgIH1cbiAgICBmbGlwKCkge1xuICAgICAgICByZXR1cm4gbmV3IExpbmVSYW5nZU1hcHBpbmcodGhpcy5tb2RpZmllZCwgdGhpcy5vcmlnaW5hbCk7XG4gICAgfVxuICAgIGpvaW4ob3RoZXIpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBMaW5lUmFuZ2VNYXBwaW5nKHRoaXMub3JpZ2luYWwuam9pbihvdGhlci5vcmlnaW5hbCksIHRoaXMubW9kaWZpZWQuam9pbihvdGhlci5tb2RpZmllZCkpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBUaGlzIG1ldGhvZCBhc3N1bWVzIHRoYXQgdGhlIExpbmVSYW5nZU1hcHBpbmcgZGVzY3JpYmVzIGEgdmFsaWQgZGlmZiFcbiAgICAgKiBJLmUuIGlmIG9uZSByYW5nZSBpcyBlbXB0eSwgdGhlIG90aGVyIHJhbmdlIGNhbm5vdCBiZSB0aGUgZW50aXJlIGRvY3VtZW50LlxuICAgICAqIEl0IGF2b2lkcyB2YXJpb3VzIHByb2JsZW1zIHdoZW4gdGhlIGxpbmUgcmFuZ2UgcG9pbnRzIHRvIG5vbi1leGlzdGluZyBsaW5lLW51bWJlcnMuXG4gICAgKi9cbiAgICB0b1JhbmdlTWFwcGluZygpIHtcbiAgICAgICAgY29uc3Qgb3JpZ0luY2x1c2l2ZVJhbmdlID0gdGhpcy5vcmlnaW5hbC50b0luY2x1c2l2ZVJhbmdlKCk7XG4gICAgICAgIGNvbnN0IG1vZEluY2x1c2l2ZVJhbmdlID0gdGhpcy5tb2RpZmllZC50b0luY2x1c2l2ZVJhbmdlKCk7XG4gICAgICAgIGlmIChvcmlnSW5jbHVzaXZlUmFuZ2UgJiYgbW9kSW5jbHVzaXZlUmFuZ2UpIHtcbiAgICAgICAgICAgIHJldHVybiBuZXcgUmFuZ2VNYXBwaW5nKG9yaWdJbmNsdXNpdmVSYW5nZSwgbW9kSW5jbHVzaXZlUmFuZ2UpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKHRoaXMub3JpZ2luYWwuc3RhcnRMaW5lTnVtYmVyID09PSAxIHx8IHRoaXMubW9kaWZpZWQuc3RhcnRMaW5lTnVtYmVyID09PSAxKSB7XG4gICAgICAgICAgICBpZiAoISh0aGlzLm1vZGlmaWVkLnN0YXJ0TGluZU51bWJlciA9PT0gMSAmJiB0aGlzLm9yaWdpbmFsLnN0YXJ0TGluZU51bWJlciA9PT0gMSkpIHtcbiAgICAgICAgICAgICAgICAvLyBJZiBvbmUgbGluZSByYW5nZSBzdGFydHMgYXQgMSwgdGhlIG90aGVyIG9uZSBtdXN0IHN0YXJ0IGF0IDEgYXMgd2VsbC5cbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgQnVnSW5kaWNhdGluZ0Vycm9yKCdub3QgYSB2YWxpZCBkaWZmJyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAvLyBCZWNhdXNlIG9uZSByYW5nZSBpcyBlbXB0eSBhbmQgYm90aCByYW5nZXMgc3RhcnQgYXQgbGluZSAxLCBub25lIG9mIHRoZSByYW5nZXMgY2FuIGNvdmVyIGFsbCBsaW5lcy5cbiAgICAgICAgICAgIC8vIFRodXMsIGBlbmRMaW5lTnVtYmVyRXhjbHVzaXZlYCBpcyBhIHZhbGlkIGxpbmUgbnVtYmVyLlxuICAgICAgICAgICAgcmV0dXJuIG5ldyBSYW5nZU1hcHBpbmcobmV3IFJhbmdlKHRoaXMub3JpZ2luYWwuc3RhcnRMaW5lTnVtYmVyLCAxLCB0aGlzLm9yaWdpbmFsLmVuZExpbmVOdW1iZXJFeGNsdXNpdmUsIDEpLCBuZXcgUmFuZ2UodGhpcy5tb2RpZmllZC5zdGFydExpbmVOdW1iZXIsIDEsIHRoaXMubW9kaWZpZWQuZW5kTGluZU51bWJlckV4Y2x1c2l2ZSwgMSkpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgLy8gV2UgY2FuIGFzc3VtZSBoZXJlIHRoYXQgYm90aCBzdGFydExpbmVOdW1iZXJzIGFyZSBncmVhdGVyIHRoYW4gMS5cbiAgICAgICAgICAgIHJldHVybiBuZXcgUmFuZ2VNYXBwaW5nKG5ldyBSYW5nZSh0aGlzLm9yaWdpbmFsLnN0YXJ0TGluZU51bWJlciAtIDEsIE51bWJlci5NQVhfU0FGRV9JTlRFR0VSLCB0aGlzLm9yaWdpbmFsLmVuZExpbmVOdW1iZXJFeGNsdXNpdmUgLSAxLCBOdW1iZXIuTUFYX1NBRkVfSU5URUdFUiksIG5ldyBSYW5nZSh0aGlzLm1vZGlmaWVkLnN0YXJ0TGluZU51bWJlciAtIDEsIE51bWJlci5NQVhfU0FGRV9JTlRFR0VSLCB0aGlzLm1vZGlmaWVkLmVuZExpbmVOdW1iZXJFeGNsdXNpdmUgLSAxLCBOdW1iZXIuTUFYX1NBRkVfSU5URUdFUikpO1xuICAgICAgICB9XG4gICAgfVxufVxuLyoqXG4gKiBNYXBzIGEgbGluZSByYW5nZSBpbiB0aGUgb3JpZ2luYWwgdGV4dCBtb2RlbCB0byBhIGxpbmUgcmFuZ2UgaW4gdGhlIG1vZGlmaWVkIHRleHQgbW9kZWwuXG4gKiBBbHNvIGNvbnRhaW5zIGlubmVyIHJhbmdlIG1hcHBpbmdzLlxuICovXG5leHBvcnQgY2xhc3MgRGV0YWlsZWRMaW5lUmFuZ2VNYXBwaW5nIGV4dGVuZHMgTGluZVJhbmdlTWFwcGluZyB7XG4gICAgc3RhdGljIGZyb21SYW5nZU1hcHBpbmdzKHJhbmdlTWFwcGluZ3MpIHtcbiAgICAgICAgY29uc3Qgb3JpZ2luYWxSYW5nZSA9IExpbmVSYW5nZS5qb2luKHJhbmdlTWFwcGluZ3MubWFwKHIgPT4gTGluZVJhbmdlLmZyb21SYW5nZUluY2x1c2l2ZShyLm9yaWdpbmFsUmFuZ2UpKSk7XG4gICAgICAgIGNvbnN0IG1vZGlmaWVkUmFuZ2UgPSBMaW5lUmFuZ2Uuam9pbihyYW5nZU1hcHBpbmdzLm1hcChyID0+IExpbmVSYW5nZS5mcm9tUmFuZ2VJbmNsdXNpdmUoci5tb2RpZmllZFJhbmdlKSkpO1xuICAgICAgICByZXR1cm4gbmV3IERldGFpbGVkTGluZVJhbmdlTWFwcGluZyhvcmlnaW5hbFJhbmdlLCBtb2RpZmllZFJhbmdlLCByYW5nZU1hcHBpbmdzKTtcbiAgICB9XG4gICAgY29uc3RydWN0b3Iob3JpZ2luYWxSYW5nZSwgbW9kaWZpZWRSYW5nZSwgaW5uZXJDaGFuZ2VzKSB7XG4gICAgICAgIHN1cGVyKG9yaWdpbmFsUmFuZ2UsIG1vZGlmaWVkUmFuZ2UpO1xuICAgICAgICB0aGlzLmlubmVyQ2hhbmdlcyA9IGlubmVyQ2hhbmdlcztcbiAgICB9XG4gICAgZmxpcCgpIHtcbiAgICAgICAgdmFyIF9hO1xuICAgICAgICByZXR1cm4gbmV3IERldGFpbGVkTGluZVJhbmdlTWFwcGluZyh0aGlzLm1vZGlmaWVkLCB0aGlzLm9yaWdpbmFsLCAoX2EgPSB0aGlzLmlubmVyQ2hhbmdlcykgPT09IG51bGwgfHwgX2EgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9hLm1hcChjID0+IGMuZmxpcCgpKSk7XG4gICAgfVxuICAgIHdpdGhJbm5lckNoYW5nZXNGcm9tTGluZVJhbmdlcygpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBEZXRhaWxlZExpbmVSYW5nZU1hcHBpbmcodGhpcy5vcmlnaW5hbCwgdGhpcy5tb2RpZmllZCwgW3RoaXMudG9SYW5nZU1hcHBpbmcoKV0pO1xuICAgIH1cbn1cbi8qKlxuICogTWFwcyBhIHJhbmdlIGluIHRoZSBvcmlnaW5hbCB0ZXh0IG1vZGVsIHRvIGEgcmFuZ2UgaW4gdGhlIG1vZGlmaWVkIHRleHQgbW9kZWwuXG4gKi9cbmV4cG9ydCBjbGFzcyBSYW5nZU1hcHBpbmcge1xuICAgIGNvbnN0cnVjdG9yKG9yaWdpbmFsUmFuZ2UsIG1vZGlmaWVkUmFuZ2UpIHtcbiAgICAgICAgdGhpcy5vcmlnaW5hbFJhbmdlID0gb3JpZ2luYWxSYW5nZTtcbiAgICAgICAgdGhpcy5tb2RpZmllZFJhbmdlID0gbW9kaWZpZWRSYW5nZTtcbiAgICB9XG4gICAgdG9TdHJpbmcoKSB7XG4gICAgICAgIHJldHVybiBgeyR7dGhpcy5vcmlnaW5hbFJhbmdlLnRvU3RyaW5nKCl9LT4ke3RoaXMubW9kaWZpZWRSYW5nZS50b1N0cmluZygpfX1gO1xuICAgIH1cbiAgICBmbGlwKCkge1xuICAgICAgICByZXR1cm4gbmV3IFJhbmdlTWFwcGluZyh0aGlzLm1vZGlmaWVkUmFuZ2UsIHRoaXMub3JpZ2luYWxSYW5nZSk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBzaW5nbGUgdGV4dCBlZGl0IHRoYXQgZGVzY3JpYmVzIHRoZSBjaGFuZ2UgZnJvbSB0aGUgb3JpZ2luYWwgdG8gdGhlIG1vZGlmaWVkIHRleHQuXG4gICAgKi9cbiAgICB0b1RleHRFZGl0KG1vZGlmaWVkKSB7XG4gICAgICAgIGNvbnN0IG5ld1RleHQgPSBtb2RpZmllZC5nZXRWYWx1ZU9mUmFuZ2UodGhpcy5tb2RpZmllZFJhbmdlKTtcbiAgICAgICAgcmV0dXJuIG5ldyBTaW5nbGVUZXh0RWRpdCh0aGlzLm9yaWdpbmFsUmFuZ2UsIG5ld1RleHQpO1xuICAgIH1cbn1cbiIsICIvKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICogIENvcHlyaWdodCAoYykgTWljcm9zb2Z0IENvcnBvcmF0aW9uLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICogIExpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgTGljZW5zZS4gU2VlIExpY2Vuc2UudHh0IGluIHRoZSBwcm9qZWN0IHJvb3QgZm9yIGxpY2Vuc2UgaW5mb3JtYXRpb24uXG4gKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKi9cbmltcG9ydCB7IExjc0RpZmYgfSBmcm9tICcuLi8uLi8uLi9iYXNlL2NvbW1vbi9kaWZmL2RpZmYuanMnO1xuaW1wb3J0IHsgTGluZXNEaWZmIH0gZnJvbSAnLi9saW5lc0RpZmZDb21wdXRlci5qcyc7XG5pbXBvcnQgeyBSYW5nZU1hcHBpbmcsIERldGFpbGVkTGluZVJhbmdlTWFwcGluZyB9IGZyb20gJy4vcmFuZ2VNYXBwaW5nLmpzJztcbmltcG9ydCAqIGFzIHN0cmluZ3MgZnJvbSAnLi4vLi4vLi4vYmFzZS9jb21tb24vc3RyaW5ncy5qcyc7XG5pbXBvcnQgeyBSYW5nZSB9IGZyb20gJy4uL2NvcmUvcmFuZ2UuanMnO1xuaW1wb3J0IHsgYXNzZXJ0Rm4sIGNoZWNrQWRqYWNlbnRJdGVtcyB9IGZyb20gJy4uLy4uLy4uL2Jhc2UvY29tbW9uL2Fzc2VydC5qcyc7XG5pbXBvcnQgeyBMaW5lUmFuZ2UgfSBmcm9tICcuLi9jb3JlL2xpbmVSYW5nZS5qcyc7XG5jb25zdCBNSU5JTVVNX01BVENISU5HX0NIQVJBQ1RFUl9MRU5HVEggPSAzO1xuZXhwb3J0IGNsYXNzIExlZ2FjeUxpbmVzRGlmZkNvbXB1dGVyIHtcbiAgICBjb21wdXRlRGlmZihvcmlnaW5hbExpbmVzLCBtb2RpZmllZExpbmVzLCBvcHRpb25zKSB7XG4gICAgICAgIHZhciBfYTtcbiAgICAgICAgY29uc3QgZGlmZkNvbXB1dGVyID0gbmV3IERpZmZDb21wdXRlcihvcmlnaW5hbExpbmVzLCBtb2RpZmllZExpbmVzLCB7XG4gICAgICAgICAgICBtYXhDb21wdXRhdGlvblRpbWU6IG9wdGlvbnMubWF4Q29tcHV0YXRpb25UaW1lTXMsXG4gICAgICAgICAgICBzaG91bGRJZ25vcmVUcmltV2hpdGVzcGFjZTogb3B0aW9ucy5pZ25vcmVUcmltV2hpdGVzcGFjZSxcbiAgICAgICAgICAgIHNob3VsZENvbXB1dGVDaGFyQ2hhbmdlczogdHJ1ZSxcbiAgICAgICAgICAgIHNob3VsZE1ha2VQcmV0dHlEaWZmOiB0cnVlLFxuICAgICAgICAgICAgc2hvdWxkUG9zdFByb2Nlc3NDaGFyQ2hhbmdlczogdHJ1ZSxcbiAgICAgICAgfSk7XG4gICAgICAgIGNvbnN0IHJlc3VsdCA9IGRpZmZDb21wdXRlci5jb21wdXRlRGlmZigpO1xuICAgICAgICBjb25zdCBjaGFuZ2VzID0gW107XG4gICAgICAgIGxldCBsYXN0Q2hhbmdlID0gbnVsbDtcbiAgICAgICAgZm9yIChjb25zdCBjIG9mIHJlc3VsdC5jaGFuZ2VzKSB7XG4gICAgICAgICAgICBsZXQgb3JpZ2luYWxSYW5nZTtcbiAgICAgICAgICAgIGlmIChjLm9yaWdpbmFsRW5kTGluZU51bWJlciA9PT0gMCkge1xuICAgICAgICAgICAgICAgIC8vIEluc2VydGlvblxuICAgICAgICAgICAgICAgIG9yaWdpbmFsUmFuZ2UgPSBuZXcgTGluZVJhbmdlKGMub3JpZ2luYWxTdGFydExpbmVOdW1iZXIgKyAxLCBjLm9yaWdpbmFsU3RhcnRMaW5lTnVtYmVyICsgMSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICBvcmlnaW5hbFJhbmdlID0gbmV3IExpbmVSYW5nZShjLm9yaWdpbmFsU3RhcnRMaW5lTnVtYmVyLCBjLm9yaWdpbmFsRW5kTGluZU51bWJlciArIDEpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgbGV0IG1vZGlmaWVkUmFuZ2U7XG4gICAgICAgICAgICBpZiAoYy5tb2RpZmllZEVuZExpbmVOdW1iZXIgPT09IDApIHtcbiAgICAgICAgICAgICAgICAvLyBEZWxldGlvblxuICAgICAgICAgICAgICAgIG1vZGlmaWVkUmFuZ2UgPSBuZXcgTGluZVJhbmdlKGMubW9kaWZpZWRTdGFydExpbmVOdW1iZXIgKyAxLCBjLm1vZGlmaWVkU3RhcnRMaW5lTnVtYmVyICsgMSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICBtb2RpZmllZFJhbmdlID0gbmV3IExpbmVSYW5nZShjLm1vZGlmaWVkU3RhcnRMaW5lTnVtYmVyLCBjLm1vZGlmaWVkRW5kTGluZU51bWJlciArIDEpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgbGV0IGNoYW5nZSA9IG5ldyBEZXRhaWxlZExpbmVSYW5nZU1hcHBpbmcob3JpZ2luYWxSYW5nZSwgbW9kaWZpZWRSYW5nZSwgKF9hID0gYy5jaGFyQ2hhbmdlcykgPT09IG51bGwgfHwgX2EgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9hLm1hcChjID0+IG5ldyBSYW5nZU1hcHBpbmcobmV3IFJhbmdlKGMub3JpZ2luYWxTdGFydExpbmVOdW1iZXIsIGMub3JpZ2luYWxTdGFydENvbHVtbiwgYy5vcmlnaW5hbEVuZExpbmVOdW1iZXIsIGMub3JpZ2luYWxFbmRDb2x1bW4pLCBuZXcgUmFuZ2UoYy5tb2RpZmllZFN0YXJ0TGluZU51bWJlciwgYy5tb2RpZmllZFN0YXJ0Q29sdW1uLCBjLm1vZGlmaWVkRW5kTGluZU51bWJlciwgYy5tb2RpZmllZEVuZENvbHVtbikpKSk7XG4gICAgICAgICAgICBpZiAobGFzdENoYW5nZSkge1xuICAgICAgICAgICAgICAgIGlmIChsYXN0Q2hhbmdlLm1vZGlmaWVkLmVuZExpbmVOdW1iZXJFeGNsdXNpdmUgPT09IGNoYW5nZS5tb2RpZmllZC5zdGFydExpbmVOdW1iZXJcbiAgICAgICAgICAgICAgICAgICAgfHwgbGFzdENoYW5nZS5vcmlnaW5hbC5lbmRMaW5lTnVtYmVyRXhjbHVzaXZlID09PSBjaGFuZ2Uub3JpZ2luYWwuc3RhcnRMaW5lTnVtYmVyKSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIGpvaW4gdG91Y2hpbmcgZGlmZnMuIFByb2JhYmx5IG1vdmluZyBkaWZmcyB1cC9kb3duIGluIHRoZSBhbGdvcml0aG0gY2F1c2VzIHRvdWNoaW5nIGRpZmZzLlxuICAgICAgICAgICAgICAgICAgICBjaGFuZ2UgPSBuZXcgRGV0YWlsZWRMaW5lUmFuZ2VNYXBwaW5nKGxhc3RDaGFuZ2Uub3JpZ2luYWwuam9pbihjaGFuZ2Uub3JpZ2luYWwpLCBsYXN0Q2hhbmdlLm1vZGlmaWVkLmpvaW4oY2hhbmdlLm1vZGlmaWVkKSwgbGFzdENoYW5nZS5pbm5lckNoYW5nZXMgJiYgY2hhbmdlLmlubmVyQ2hhbmdlcyA/XG4gICAgICAgICAgICAgICAgICAgICAgICBsYXN0Q2hhbmdlLmlubmVyQ2hhbmdlcy5jb25jYXQoY2hhbmdlLmlubmVyQ2hhbmdlcykgOiB1bmRlZmluZWQpO1xuICAgICAgICAgICAgICAgICAgICBjaGFuZ2VzLnBvcCgpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNoYW5nZXMucHVzaChjaGFuZ2UpO1xuICAgICAgICAgICAgbGFzdENoYW5nZSA9IGNoYW5nZTtcbiAgICAgICAgfVxuICAgICAgICBhc3NlcnRGbigoKSA9PiB7XG4gICAgICAgICAgICByZXR1cm4gY2hlY2tBZGphY2VudEl0ZW1zKGNoYW5nZXMsIChtMSwgbTIpID0+IG0yLm9yaWdpbmFsLnN0YXJ0TGluZU51bWJlciAtIG0xLm9yaWdpbmFsLmVuZExpbmVOdW1iZXJFeGNsdXNpdmUgPT09IG0yLm1vZGlmaWVkLnN0YXJ0TGluZU51bWJlciAtIG0xLm1vZGlmaWVkLmVuZExpbmVOdW1iZXJFeGNsdXNpdmUgJiZcbiAgICAgICAgICAgICAgICAvLyBUaGVyZSBoYXMgdG8gYmUgYW4gdW5jaGFuZ2VkIGxpbmUgaW4gYmV0d2VlbiAob3RoZXJ3aXNlIGJvdGggZGlmZnMgc2hvdWxkIGhhdmUgYmVlbiBqb2luZWQpXG4gICAgICAgICAgICAgICAgbTEub3JpZ2luYWwuZW5kTGluZU51bWJlckV4Y2x1c2l2ZSA8IG0yLm9yaWdpbmFsLnN0YXJ0TGluZU51bWJlciAmJlxuICAgICAgICAgICAgICAgIG0xLm1vZGlmaWVkLmVuZExpbmVOdW1iZXJFeGNsdXNpdmUgPCBtMi5tb2RpZmllZC5zdGFydExpbmVOdW1iZXIpO1xuICAgICAgICB9KTtcbiAgICAgICAgcmV0dXJuIG5ldyBMaW5lc0RpZmYoY2hhbmdlcywgW10sIHJlc3VsdC5xdWl0RWFybHkpO1xuICAgIH1cbn1cbmZ1bmN0aW9uIGNvbXB1dGVEaWZmKG9yaWdpbmFsU2VxdWVuY2UsIG1vZGlmaWVkU2VxdWVuY2UsIGNvbnRpbnVlUHJvY2Vzc2luZ1ByZWRpY2F0ZSwgcHJldHR5KSB7XG4gICAgY29uc3QgZGlmZkFsZ28gPSBuZXcgTGNzRGlmZihvcmlnaW5hbFNlcXVlbmNlLCBtb2RpZmllZFNlcXVlbmNlLCBjb250aW51ZVByb2Nlc3NpbmdQcmVkaWNhdGUpO1xuICAgIHJldHVybiBkaWZmQWxnby5Db21wdXRlRGlmZihwcmV0dHkpO1xufVxuY2xhc3MgTGluZVNlcXVlbmNlIHtcbiAgICBjb25zdHJ1Y3RvcihsaW5lcykge1xuICAgICAgICBjb25zdCBzdGFydENvbHVtbnMgPSBbXTtcbiAgICAgICAgY29uc3QgZW5kQ29sdW1ucyA9IFtdO1xuICAgICAgICBmb3IgKGxldCBpID0gMCwgbGVuZ3RoID0gbGluZXMubGVuZ3RoOyBpIDwgbGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIHN0YXJ0Q29sdW1uc1tpXSA9IGdldEZpcnN0Tm9uQmxhbmtDb2x1bW4obGluZXNbaV0sIDEpO1xuICAgICAgICAgICAgZW5kQ29sdW1uc1tpXSA9IGdldExhc3ROb25CbGFua0NvbHVtbihsaW5lc1tpXSwgMSk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5saW5lcyA9IGxpbmVzO1xuICAgICAgICB0aGlzLl9zdGFydENvbHVtbnMgPSBzdGFydENvbHVtbnM7XG4gICAgICAgIHRoaXMuX2VuZENvbHVtbnMgPSBlbmRDb2x1bW5zO1xuICAgIH1cbiAgICBnZXRFbGVtZW50cygpIHtcbiAgICAgICAgY29uc3QgZWxlbWVudHMgPSBbXTtcbiAgICAgICAgZm9yIChsZXQgaSA9IDAsIGxlbiA9IHRoaXMubGluZXMubGVuZ3RoOyBpIDwgbGVuOyBpKyspIHtcbiAgICAgICAgICAgIGVsZW1lbnRzW2ldID0gdGhpcy5saW5lc1tpXS5zdWJzdHJpbmcodGhpcy5fc3RhcnRDb2x1bW5zW2ldIC0gMSwgdGhpcy5fZW5kQ29sdW1uc1tpXSAtIDEpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBlbGVtZW50cztcbiAgICB9XG4gICAgZ2V0U3RyaWN0RWxlbWVudChpbmRleCkge1xuICAgICAgICByZXR1cm4gdGhpcy5saW5lc1tpbmRleF07XG4gICAgfVxuICAgIGdldFN0YXJ0TGluZU51bWJlcihpKSB7XG4gICAgICAgIHJldHVybiBpICsgMTtcbiAgICB9XG4gICAgZ2V0RW5kTGluZU51bWJlcihpKSB7XG4gICAgICAgIHJldHVybiBpICsgMTtcbiAgICB9XG4gICAgY3JlYXRlQ2hhclNlcXVlbmNlKHNob3VsZElnbm9yZVRyaW1XaGl0ZXNwYWNlLCBzdGFydEluZGV4LCBlbmRJbmRleCkge1xuICAgICAgICBjb25zdCBjaGFyQ29kZXMgPSBbXTtcbiAgICAgICAgY29uc3QgbGluZU51bWJlcnMgPSBbXTtcbiAgICAgICAgY29uc3QgY29sdW1ucyA9IFtdO1xuICAgICAgICBsZXQgbGVuID0gMDtcbiAgICAgICAgZm9yIChsZXQgaW5kZXggPSBzdGFydEluZGV4OyBpbmRleCA8PSBlbmRJbmRleDsgaW5kZXgrKykge1xuICAgICAgICAgICAgY29uc3QgbGluZUNvbnRlbnQgPSB0aGlzLmxpbmVzW2luZGV4XTtcbiAgICAgICAgICAgIGNvbnN0IHN0YXJ0Q29sdW1uID0gKHNob3VsZElnbm9yZVRyaW1XaGl0ZXNwYWNlID8gdGhpcy5fc3RhcnRDb2x1bW5zW2luZGV4XSA6IDEpO1xuICAgICAgICAgICAgY29uc3QgZW5kQ29sdW1uID0gKHNob3VsZElnbm9yZVRyaW1XaGl0ZXNwYWNlID8gdGhpcy5fZW5kQ29sdW1uc1tpbmRleF0gOiBsaW5lQ29udGVudC5sZW5ndGggKyAxKTtcbiAgICAgICAgICAgIGZvciAobGV0IGNvbCA9IHN0YXJ0Q29sdW1uOyBjb2wgPCBlbmRDb2x1bW47IGNvbCsrKSB7XG4gICAgICAgICAgICAgICAgY2hhckNvZGVzW2xlbl0gPSBsaW5lQ29udGVudC5jaGFyQ29kZUF0KGNvbCAtIDEpO1xuICAgICAgICAgICAgICAgIGxpbmVOdW1iZXJzW2xlbl0gPSBpbmRleCArIDE7XG4gICAgICAgICAgICAgICAgY29sdW1uc1tsZW5dID0gY29sO1xuICAgICAgICAgICAgICAgIGxlbisrO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKCFzaG91bGRJZ25vcmVUcmltV2hpdGVzcGFjZSAmJiBpbmRleCA8IGVuZEluZGV4KSB7XG4gICAgICAgICAgICAgICAgLy8gQWRkIFxcbiBpZiB0cmltIHdoaXRlc3BhY2UgaXMgbm90IGlnbm9yZWRcbiAgICAgICAgICAgICAgICBjaGFyQ29kZXNbbGVuXSA9IDEwIC8qIENoYXJDb2RlLkxpbmVGZWVkICovO1xuICAgICAgICAgICAgICAgIGxpbmVOdW1iZXJzW2xlbl0gPSBpbmRleCArIDE7XG4gICAgICAgICAgICAgICAgY29sdW1uc1tsZW5dID0gbGluZUNvbnRlbnQubGVuZ3RoICsgMTtcbiAgICAgICAgICAgICAgICBsZW4rKztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbmV3IENoYXJTZXF1ZW5jZShjaGFyQ29kZXMsIGxpbmVOdW1iZXJzLCBjb2x1bW5zKTtcbiAgICB9XG59XG5jbGFzcyBDaGFyU2VxdWVuY2Uge1xuICAgIGNvbnN0cnVjdG9yKGNoYXJDb2RlcywgbGluZU51bWJlcnMsIGNvbHVtbnMpIHtcbiAgICAgICAgdGhpcy5fY2hhckNvZGVzID0gY2hhckNvZGVzO1xuICAgICAgICB0aGlzLl9saW5lTnVtYmVycyA9IGxpbmVOdW1iZXJzO1xuICAgICAgICB0aGlzLl9jb2x1bW5zID0gY29sdW1ucztcbiAgICB9XG4gICAgdG9TdHJpbmcoKSB7XG4gICAgICAgIHJldHVybiAoJ1snICsgdGhpcy5fY2hhckNvZGVzLm1hcCgocywgaWR4KSA9PiAocyA9PT0gMTAgLyogQ2hhckNvZGUuTGluZUZlZWQgKi8gPyAnXFxcXG4nIDogU3RyaW5nLmZyb21DaGFyQ29kZShzKSkgKyBgLSgke3RoaXMuX2xpbmVOdW1iZXJzW2lkeF19LCR7dGhpcy5fY29sdW1uc1tpZHhdfSlgKS5qb2luKCcsICcpICsgJ10nKTtcbiAgICB9XG4gICAgX2Fzc2VydEluZGV4KGluZGV4LCBhcnIpIHtcbiAgICAgICAgaWYgKGluZGV4IDwgMCB8fCBpbmRleCA+PSBhcnIubGVuZ3RoKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYElsbGVnYWwgaW5kZXhgKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBnZXRFbGVtZW50cygpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2NoYXJDb2RlcztcbiAgICB9XG4gICAgZ2V0U3RhcnRMaW5lTnVtYmVyKGkpIHtcbiAgICAgICAgaWYgKGkgPiAwICYmIGkgPT09IHRoaXMuX2xpbmVOdW1iZXJzLmxlbmd0aCkge1xuICAgICAgICAgICAgLy8gdGhlIHN0YXJ0IGxpbmUgbnVtYmVyIG9mIHRoZSBlbGVtZW50IGFmdGVyIHRoZSBsYXN0IGVsZW1lbnRcbiAgICAgICAgICAgIC8vIGlzIHRoZSBlbmQgbGluZSBudW1iZXIgb2YgdGhlIGxhc3QgZWxlbWVudFxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuZ2V0RW5kTGluZU51bWJlcihpIC0gMSk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5fYXNzZXJ0SW5kZXgoaSwgdGhpcy5fbGluZU51bWJlcnMpO1xuICAgICAgICByZXR1cm4gdGhpcy5fbGluZU51bWJlcnNbaV07XG4gICAgfVxuICAgIGdldEVuZExpbmVOdW1iZXIoaSkge1xuICAgICAgICBpZiAoaSA9PT0gLTEpIHtcbiAgICAgICAgICAgIC8vIHRoZSBlbmQgbGluZSBudW1iZXIgb2YgdGhlIGVsZW1lbnQgYmVmb3JlIHRoZSBmaXJzdCBlbGVtZW50XG4gICAgICAgICAgICAvLyBpcyB0aGUgc3RhcnQgbGluZSBudW1iZXIgb2YgdGhlIGZpcnN0IGVsZW1lbnRcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmdldFN0YXJ0TGluZU51bWJlcihpICsgMSk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5fYXNzZXJ0SW5kZXgoaSwgdGhpcy5fbGluZU51bWJlcnMpO1xuICAgICAgICBpZiAodGhpcy5fY2hhckNvZGVzW2ldID09PSAxMCAvKiBDaGFyQ29kZS5MaW5lRmVlZCAqLykge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuX2xpbmVOdW1iZXJzW2ldICsgMTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdGhpcy5fbGluZU51bWJlcnNbaV07XG4gICAgfVxuICAgIGdldFN0YXJ0Q29sdW1uKGkpIHtcbiAgICAgICAgaWYgKGkgPiAwICYmIGkgPT09IHRoaXMuX2NvbHVtbnMubGVuZ3RoKSB7XG4gICAgICAgICAgICAvLyB0aGUgc3RhcnQgY29sdW1uIG9mIHRoZSBlbGVtZW50IGFmdGVyIHRoZSBsYXN0IGVsZW1lbnRcbiAgICAgICAgICAgIC8vIGlzIHRoZSBlbmQgY29sdW1uIG9mIHRoZSBsYXN0IGVsZW1lbnRcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmdldEVuZENvbHVtbihpIC0gMSk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5fYXNzZXJ0SW5kZXgoaSwgdGhpcy5fY29sdW1ucyk7XG4gICAgICAgIHJldHVybiB0aGlzLl9jb2x1bW5zW2ldO1xuICAgIH1cbiAgICBnZXRFbmRDb2x1bW4oaSkge1xuICAgICAgICBpZiAoaSA9PT0gLTEpIHtcbiAgICAgICAgICAgIC8vIHRoZSBlbmQgY29sdW1uIG9mIHRoZSBlbGVtZW50IGJlZm9yZSB0aGUgZmlyc3QgZWxlbWVudFxuICAgICAgICAgICAgLy8gaXMgdGhlIHN0YXJ0IGNvbHVtbiBvZiB0aGUgZmlyc3QgZWxlbWVudFxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuZ2V0U3RhcnRDb2x1bW4oaSArIDEpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuX2Fzc2VydEluZGV4KGksIHRoaXMuX2NvbHVtbnMpO1xuICAgICAgICBpZiAodGhpcy5fY2hhckNvZGVzW2ldID09PSAxMCAvKiBDaGFyQ29kZS5MaW5lRmVlZCAqLykge1xuICAgICAgICAgICAgcmV0dXJuIDE7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRoaXMuX2NvbHVtbnNbaV0gKyAxO1xuICAgIH1cbn1cbmNsYXNzIENoYXJDaGFuZ2Uge1xuICAgIGNvbnN0cnVjdG9yKG9yaWdpbmFsU3RhcnRMaW5lTnVtYmVyLCBvcmlnaW5hbFN0YXJ0Q29sdW1uLCBvcmlnaW5hbEVuZExpbmVOdW1iZXIsIG9yaWdpbmFsRW5kQ29sdW1uLCBtb2RpZmllZFN0YXJ0TGluZU51bWJlciwgbW9kaWZpZWRTdGFydENvbHVtbiwgbW9kaWZpZWRFbmRMaW5lTnVtYmVyLCBtb2RpZmllZEVuZENvbHVtbikge1xuICAgICAgICB0aGlzLm9yaWdpbmFsU3RhcnRMaW5lTnVtYmVyID0gb3JpZ2luYWxTdGFydExpbmVOdW1iZXI7XG4gICAgICAgIHRoaXMub3JpZ2luYWxTdGFydENvbHVtbiA9IG9yaWdpbmFsU3RhcnRDb2x1bW47XG4gICAgICAgIHRoaXMub3JpZ2luYWxFbmRMaW5lTnVtYmVyID0gb3JpZ2luYWxFbmRMaW5lTnVtYmVyO1xuICAgICAgICB0aGlzLm9yaWdpbmFsRW5kQ29sdW1uID0gb3JpZ2luYWxFbmRDb2x1bW47XG4gICAgICAgIHRoaXMubW9kaWZpZWRTdGFydExpbmVOdW1iZXIgPSBtb2RpZmllZFN0YXJ0TGluZU51bWJlcjtcbiAgICAgICAgdGhpcy5tb2RpZmllZFN0YXJ0Q29sdW1uID0gbW9kaWZpZWRTdGFydENvbHVtbjtcbiAgICAgICAgdGhpcy5tb2RpZmllZEVuZExpbmVOdW1iZXIgPSBtb2RpZmllZEVuZExpbmVOdW1iZXI7XG4gICAgICAgIHRoaXMubW9kaWZpZWRFbmRDb2x1bW4gPSBtb2RpZmllZEVuZENvbHVtbjtcbiAgICB9XG4gICAgc3RhdGljIGNyZWF0ZUZyb21EaWZmQ2hhbmdlKGRpZmZDaGFuZ2UsIG9yaWdpbmFsQ2hhclNlcXVlbmNlLCBtb2RpZmllZENoYXJTZXF1ZW5jZSkge1xuICAgICAgICBjb25zdCBvcmlnaW5hbFN0YXJ0TGluZU51bWJlciA9IG9yaWdpbmFsQ2hhclNlcXVlbmNlLmdldFN0YXJ0TGluZU51bWJlcihkaWZmQ2hhbmdlLm9yaWdpbmFsU3RhcnQpO1xuICAgICAgICBjb25zdCBvcmlnaW5hbFN0YXJ0Q29sdW1uID0gb3JpZ2luYWxDaGFyU2VxdWVuY2UuZ2V0U3RhcnRDb2x1bW4oZGlmZkNoYW5nZS5vcmlnaW5hbFN0YXJ0KTtcbiAgICAgICAgY29uc3Qgb3JpZ2luYWxFbmRMaW5lTnVtYmVyID0gb3JpZ2luYWxDaGFyU2VxdWVuY2UuZ2V0RW5kTGluZU51bWJlcihkaWZmQ2hhbmdlLm9yaWdpbmFsU3RhcnQgKyBkaWZmQ2hhbmdlLm9yaWdpbmFsTGVuZ3RoIC0gMSk7XG4gICAgICAgIGNvbnN0IG9yaWdpbmFsRW5kQ29sdW1uID0gb3JpZ2luYWxDaGFyU2VxdWVuY2UuZ2V0RW5kQ29sdW1uKGRpZmZDaGFuZ2Uub3JpZ2luYWxTdGFydCArIGRpZmZDaGFuZ2Uub3JpZ2luYWxMZW5ndGggLSAxKTtcbiAgICAgICAgY29uc3QgbW9kaWZpZWRTdGFydExpbmVOdW1iZXIgPSBtb2RpZmllZENoYXJTZXF1ZW5jZS5nZXRTdGFydExpbmVOdW1iZXIoZGlmZkNoYW5nZS5tb2RpZmllZFN0YXJ0KTtcbiAgICAgICAgY29uc3QgbW9kaWZpZWRTdGFydENvbHVtbiA9IG1vZGlmaWVkQ2hhclNlcXVlbmNlLmdldFN0YXJ0Q29sdW1uKGRpZmZDaGFuZ2UubW9kaWZpZWRTdGFydCk7XG4gICAgICAgIGNvbnN0IG1vZGlmaWVkRW5kTGluZU51bWJlciA9IG1vZGlmaWVkQ2hhclNlcXVlbmNlLmdldEVuZExpbmVOdW1iZXIoZGlmZkNoYW5nZS5tb2RpZmllZFN0YXJ0ICsgZGlmZkNoYW5nZS5tb2RpZmllZExlbmd0aCAtIDEpO1xuICAgICAgICBjb25zdCBtb2RpZmllZEVuZENvbHVtbiA9IG1vZGlmaWVkQ2hhclNlcXVlbmNlLmdldEVuZENvbHVtbihkaWZmQ2hhbmdlLm1vZGlmaWVkU3RhcnQgKyBkaWZmQ2hhbmdlLm1vZGlmaWVkTGVuZ3RoIC0gMSk7XG4gICAgICAgIHJldHVybiBuZXcgQ2hhckNoYW5nZShvcmlnaW5hbFN0YXJ0TGluZU51bWJlciwgb3JpZ2luYWxTdGFydENvbHVtbiwgb3JpZ2luYWxFbmRMaW5lTnVtYmVyLCBvcmlnaW5hbEVuZENvbHVtbiwgbW9kaWZpZWRTdGFydExpbmVOdW1iZXIsIG1vZGlmaWVkU3RhcnRDb2x1bW4sIG1vZGlmaWVkRW5kTGluZU51bWJlciwgbW9kaWZpZWRFbmRDb2x1bW4pO1xuICAgIH1cbn1cbmZ1bmN0aW9uIHBvc3RQcm9jZXNzQ2hhckNoYW5nZXMocmF3Q2hhbmdlcykge1xuICAgIGlmIChyYXdDaGFuZ2VzLmxlbmd0aCA8PSAxKSB7XG4gICAgICAgIHJldHVybiByYXdDaGFuZ2VzO1xuICAgIH1cbiAgICBjb25zdCByZXN1bHQgPSBbcmF3Q2hhbmdlc1swXV07XG4gICAgbGV0IHByZXZDaGFuZ2UgPSByZXN1bHRbMF07XG4gICAgZm9yIChsZXQgaSA9IDEsIGxlbiA9IHJhd0NoYW5nZXMubGVuZ3RoOyBpIDwgbGVuOyBpKyspIHtcbiAgICAgICAgY29uc3QgY3VyckNoYW5nZSA9IHJhd0NoYW5nZXNbaV07XG4gICAgICAgIGNvbnN0IG9yaWdpbmFsTWF0Y2hpbmdMZW5ndGggPSBjdXJyQ2hhbmdlLm9yaWdpbmFsU3RhcnQgLSAocHJldkNoYW5nZS5vcmlnaW5hbFN0YXJ0ICsgcHJldkNoYW5nZS5vcmlnaW5hbExlbmd0aCk7XG4gICAgICAgIGNvbnN0IG1vZGlmaWVkTWF0Y2hpbmdMZW5ndGggPSBjdXJyQ2hhbmdlLm1vZGlmaWVkU3RhcnQgLSAocHJldkNoYW5nZS5tb2RpZmllZFN0YXJ0ICsgcHJldkNoYW5nZS5tb2RpZmllZExlbmd0aCk7XG4gICAgICAgIC8vIEJvdGggb2YgdGhlIGFib3ZlIHNob3VsZCBiZSBlcXVhbCwgYnV0IHRoZSBjb250aW51ZVByb2Nlc3NpbmdQcmVkaWNhdGUgbWF5IHByZXZlbnQgdGhpcyBmcm9tIGJlaW5nIHRydWVcbiAgICAgICAgY29uc3QgbWF0Y2hpbmdMZW5ndGggPSBNYXRoLm1pbihvcmlnaW5hbE1hdGNoaW5nTGVuZ3RoLCBtb2RpZmllZE1hdGNoaW5nTGVuZ3RoKTtcbiAgICAgICAgaWYgKG1hdGNoaW5nTGVuZ3RoIDwgTUlOSU1VTV9NQVRDSElOR19DSEFSQUNURVJfTEVOR1RIKSB7XG4gICAgICAgICAgICAvLyBNZXJnZSB0aGUgY3VycmVudCBjaGFuZ2UgaW50byB0aGUgcHJldmlvdXMgb25lXG4gICAgICAgICAgICBwcmV2Q2hhbmdlLm9yaWdpbmFsTGVuZ3RoID0gKGN1cnJDaGFuZ2Uub3JpZ2luYWxTdGFydCArIGN1cnJDaGFuZ2Uub3JpZ2luYWxMZW5ndGgpIC0gcHJldkNoYW5nZS5vcmlnaW5hbFN0YXJ0O1xuICAgICAgICAgICAgcHJldkNoYW5nZS5tb2RpZmllZExlbmd0aCA9IChjdXJyQ2hhbmdlLm1vZGlmaWVkU3RhcnQgKyBjdXJyQ2hhbmdlLm1vZGlmaWVkTGVuZ3RoKSAtIHByZXZDaGFuZ2UubW9kaWZpZWRTdGFydDtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIC8vIEFkZCB0aGUgY3VycmVudCBjaGFuZ2VcbiAgICAgICAgICAgIHJlc3VsdC5wdXNoKGN1cnJDaGFuZ2UpO1xuICAgICAgICAgICAgcHJldkNoYW5nZSA9IGN1cnJDaGFuZ2U7XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHJlc3VsdDtcbn1cbmNsYXNzIExpbmVDaGFuZ2Uge1xuICAgIGNvbnN0cnVjdG9yKG9yaWdpbmFsU3RhcnRMaW5lTnVtYmVyLCBvcmlnaW5hbEVuZExpbmVOdW1iZXIsIG1vZGlmaWVkU3RhcnRMaW5lTnVtYmVyLCBtb2RpZmllZEVuZExpbmVOdW1iZXIsIGNoYXJDaGFuZ2VzKSB7XG4gICAgICAgIHRoaXMub3JpZ2luYWxTdGFydExpbmVOdW1iZXIgPSBvcmlnaW5hbFN0YXJ0TGluZU51bWJlcjtcbiAgICAgICAgdGhpcy5vcmlnaW5hbEVuZExpbmVOdW1iZXIgPSBvcmlnaW5hbEVuZExpbmVOdW1iZXI7XG4gICAgICAgIHRoaXMubW9kaWZpZWRTdGFydExpbmVOdW1iZXIgPSBtb2RpZmllZFN0YXJ0TGluZU51bWJlcjtcbiAgICAgICAgdGhpcy5tb2RpZmllZEVuZExpbmVOdW1iZXIgPSBtb2RpZmllZEVuZExpbmVOdW1iZXI7XG4gICAgICAgIHRoaXMuY2hhckNoYW5nZXMgPSBjaGFyQ2hhbmdlcztcbiAgICB9XG4gICAgc3RhdGljIGNyZWF0ZUZyb21EaWZmUmVzdWx0KHNob3VsZElnbm9yZVRyaW1XaGl0ZXNwYWNlLCBkaWZmQ2hhbmdlLCBvcmlnaW5hbExpbmVTZXF1ZW5jZSwgbW9kaWZpZWRMaW5lU2VxdWVuY2UsIGNvbnRpbnVlQ2hhckRpZmYsIHNob3VsZENvbXB1dGVDaGFyQ2hhbmdlcywgc2hvdWxkUG9zdFByb2Nlc3NDaGFyQ2hhbmdlcykge1xuICAgICAgICBsZXQgb3JpZ2luYWxTdGFydExpbmVOdW1iZXI7XG4gICAgICAgIGxldCBvcmlnaW5hbEVuZExpbmVOdW1iZXI7XG4gICAgICAgIGxldCBtb2RpZmllZFN0YXJ0TGluZU51bWJlcjtcbiAgICAgICAgbGV0IG1vZGlmaWVkRW5kTGluZU51bWJlcjtcbiAgICAgICAgbGV0IGNoYXJDaGFuZ2VzID0gdW5kZWZpbmVkO1xuICAgICAgICBpZiAoZGlmZkNoYW5nZS5vcmlnaW5hbExlbmd0aCA9PT0gMCkge1xuICAgICAgICAgICAgb3JpZ2luYWxTdGFydExpbmVOdW1iZXIgPSBvcmlnaW5hbExpbmVTZXF1ZW5jZS5nZXRTdGFydExpbmVOdW1iZXIoZGlmZkNoYW5nZS5vcmlnaW5hbFN0YXJ0KSAtIDE7XG4gICAgICAgICAgICBvcmlnaW5hbEVuZExpbmVOdW1iZXIgPSAwO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgb3JpZ2luYWxTdGFydExpbmVOdW1iZXIgPSBvcmlnaW5hbExpbmVTZXF1ZW5jZS5nZXRTdGFydExpbmVOdW1iZXIoZGlmZkNoYW5nZS5vcmlnaW5hbFN0YXJ0KTtcbiAgICAgICAgICAgIG9yaWdpbmFsRW5kTGluZU51bWJlciA9IG9yaWdpbmFsTGluZVNlcXVlbmNlLmdldEVuZExpbmVOdW1iZXIoZGlmZkNoYW5nZS5vcmlnaW5hbFN0YXJ0ICsgZGlmZkNoYW5nZS5vcmlnaW5hbExlbmd0aCAtIDEpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChkaWZmQ2hhbmdlLm1vZGlmaWVkTGVuZ3RoID09PSAwKSB7XG4gICAgICAgICAgICBtb2RpZmllZFN0YXJ0TGluZU51bWJlciA9IG1vZGlmaWVkTGluZVNlcXVlbmNlLmdldFN0YXJ0TGluZU51bWJlcihkaWZmQ2hhbmdlLm1vZGlmaWVkU3RhcnQpIC0gMTtcbiAgICAgICAgICAgIG1vZGlmaWVkRW5kTGluZU51bWJlciA9IDA7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBtb2RpZmllZFN0YXJ0TGluZU51bWJlciA9IG1vZGlmaWVkTGluZVNlcXVlbmNlLmdldFN0YXJ0TGluZU51bWJlcihkaWZmQ2hhbmdlLm1vZGlmaWVkU3RhcnQpO1xuICAgICAgICAgICAgbW9kaWZpZWRFbmRMaW5lTnVtYmVyID0gbW9kaWZpZWRMaW5lU2VxdWVuY2UuZ2V0RW5kTGluZU51bWJlcihkaWZmQ2hhbmdlLm1vZGlmaWVkU3RhcnQgKyBkaWZmQ2hhbmdlLm1vZGlmaWVkTGVuZ3RoIC0gMSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHNob3VsZENvbXB1dGVDaGFyQ2hhbmdlcyAmJiBkaWZmQ2hhbmdlLm9yaWdpbmFsTGVuZ3RoID4gMCAmJiBkaWZmQ2hhbmdlLm9yaWdpbmFsTGVuZ3RoIDwgMjAgJiYgZGlmZkNoYW5nZS5tb2RpZmllZExlbmd0aCA+IDAgJiYgZGlmZkNoYW5nZS5tb2RpZmllZExlbmd0aCA8IDIwICYmIGNvbnRpbnVlQ2hhckRpZmYoKSkge1xuICAgICAgICAgICAgLy8gQ29tcHV0ZSBjaGFyYWN0ZXIgY2hhbmdlcyBmb3IgZGlmZiBjaHVua3Mgb2YgYXQgbW9zdCAyMCBsaW5lcy4uLlxuICAgICAgICAgICAgY29uc3Qgb3JpZ2luYWxDaGFyU2VxdWVuY2UgPSBvcmlnaW5hbExpbmVTZXF1ZW5jZS5jcmVhdGVDaGFyU2VxdWVuY2Uoc2hvdWxkSWdub3JlVHJpbVdoaXRlc3BhY2UsIGRpZmZDaGFuZ2Uub3JpZ2luYWxTdGFydCwgZGlmZkNoYW5nZS5vcmlnaW5hbFN0YXJ0ICsgZGlmZkNoYW5nZS5vcmlnaW5hbExlbmd0aCAtIDEpO1xuICAgICAgICAgICAgY29uc3QgbW9kaWZpZWRDaGFyU2VxdWVuY2UgPSBtb2RpZmllZExpbmVTZXF1ZW5jZS5jcmVhdGVDaGFyU2VxdWVuY2Uoc2hvdWxkSWdub3JlVHJpbVdoaXRlc3BhY2UsIGRpZmZDaGFuZ2UubW9kaWZpZWRTdGFydCwgZGlmZkNoYW5nZS5tb2RpZmllZFN0YXJ0ICsgZGlmZkNoYW5nZS5tb2RpZmllZExlbmd0aCAtIDEpO1xuICAgICAgICAgICAgaWYgKG9yaWdpbmFsQ2hhclNlcXVlbmNlLmdldEVsZW1lbnRzKCkubGVuZ3RoID4gMCAmJiBtb2RpZmllZENoYXJTZXF1ZW5jZS5nZXRFbGVtZW50cygpLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgICAgICBsZXQgcmF3Q2hhbmdlcyA9IGNvbXB1dGVEaWZmKG9yaWdpbmFsQ2hhclNlcXVlbmNlLCBtb2RpZmllZENoYXJTZXF1ZW5jZSwgY29udGludWVDaGFyRGlmZiwgdHJ1ZSkuY2hhbmdlcztcbiAgICAgICAgICAgICAgICBpZiAoc2hvdWxkUG9zdFByb2Nlc3NDaGFyQ2hhbmdlcykge1xuICAgICAgICAgICAgICAgICAgICByYXdDaGFuZ2VzID0gcG9zdFByb2Nlc3NDaGFyQ2hhbmdlcyhyYXdDaGFuZ2VzKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgY2hhckNoYW5nZXMgPSBbXTtcbiAgICAgICAgICAgICAgICBmb3IgKGxldCBpID0gMCwgbGVuZ3RoID0gcmF3Q2hhbmdlcy5sZW5ndGg7IGkgPCBsZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgICAgICAgICBjaGFyQ2hhbmdlcy5wdXNoKENoYXJDaGFuZ2UuY3JlYXRlRnJvbURpZmZDaGFuZ2UocmF3Q2hhbmdlc1tpXSwgb3JpZ2luYWxDaGFyU2VxdWVuY2UsIG1vZGlmaWVkQ2hhclNlcXVlbmNlKSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBuZXcgTGluZUNoYW5nZShvcmlnaW5hbFN0YXJ0TGluZU51bWJlciwgb3JpZ2luYWxFbmRMaW5lTnVtYmVyLCBtb2RpZmllZFN0YXJ0TGluZU51bWJlciwgbW9kaWZpZWRFbmRMaW5lTnVtYmVyLCBjaGFyQ2hhbmdlcyk7XG4gICAgfVxufVxuZXhwb3J0IGNsYXNzIERpZmZDb21wdXRlciB7XG4gICAgY29uc3RydWN0b3Iob3JpZ2luYWxMaW5lcywgbW9kaWZpZWRMaW5lcywgb3B0cykge1xuICAgICAgICB0aGlzLnNob3VsZENvbXB1dGVDaGFyQ2hhbmdlcyA9IG9wdHMuc2hvdWxkQ29tcHV0ZUNoYXJDaGFuZ2VzO1xuICAgICAgICB0aGlzLnNob3VsZFBvc3RQcm9jZXNzQ2hhckNoYW5nZXMgPSBvcHRzLnNob3VsZFBvc3RQcm9jZXNzQ2hhckNoYW5nZXM7XG4gICAgICAgIHRoaXMuc2hvdWxkSWdub3JlVHJpbVdoaXRlc3BhY2UgPSBvcHRzLnNob3VsZElnbm9yZVRyaW1XaGl0ZXNwYWNlO1xuICAgICAgICB0aGlzLnNob3VsZE1ha2VQcmV0dHlEaWZmID0gb3B0cy5zaG91bGRNYWtlUHJldHR5RGlmZjtcbiAgICAgICAgdGhpcy5vcmlnaW5hbExpbmVzID0gb3JpZ2luYWxMaW5lcztcbiAgICAgICAgdGhpcy5tb2RpZmllZExpbmVzID0gbW9kaWZpZWRMaW5lcztcbiAgICAgICAgdGhpcy5vcmlnaW5hbCA9IG5ldyBMaW5lU2VxdWVuY2Uob3JpZ2luYWxMaW5lcyk7XG4gICAgICAgIHRoaXMubW9kaWZpZWQgPSBuZXcgTGluZVNlcXVlbmNlKG1vZGlmaWVkTGluZXMpO1xuICAgICAgICB0aGlzLmNvbnRpbnVlTGluZURpZmYgPSBjcmVhdGVDb250aW51ZVByb2Nlc3NpbmdQcmVkaWNhdGUob3B0cy5tYXhDb21wdXRhdGlvblRpbWUpO1xuICAgICAgICB0aGlzLmNvbnRpbnVlQ2hhckRpZmYgPSBjcmVhdGVDb250aW51ZVByb2Nlc3NpbmdQcmVkaWNhdGUob3B0cy5tYXhDb21wdXRhdGlvblRpbWUgPT09IDAgPyAwIDogTWF0aC5taW4ob3B0cy5tYXhDb21wdXRhdGlvblRpbWUsIDUwMDApKTsgLy8gbmV2ZXIgcnVuIGFmdGVyIDVzIGZvciBjaGFyYWN0ZXIgY2hhbmdlcy4uLlxuICAgIH1cbiAgICBjb21wdXRlRGlmZigpIHtcbiAgICAgICAgaWYgKHRoaXMub3JpZ2luYWwubGluZXMubGVuZ3RoID09PSAxICYmIHRoaXMub3JpZ2luYWwubGluZXNbMF0ubGVuZ3RoID09PSAwKSB7XG4gICAgICAgICAgICAvLyBlbXB0eSBvcmlnaW5hbCA9PiBmYXN0IHBhdGhcbiAgICAgICAgICAgIGlmICh0aGlzLm1vZGlmaWVkLmxpbmVzLmxlbmd0aCA9PT0gMSAmJiB0aGlzLm1vZGlmaWVkLmxpbmVzWzBdLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgICAgIHF1aXRFYXJseTogZmFsc2UsXG4gICAgICAgICAgICAgICAgICAgIGNoYW5nZXM6IFtdXG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgcXVpdEVhcmx5OiBmYWxzZSxcbiAgICAgICAgICAgICAgICBjaGFuZ2VzOiBbe1xuICAgICAgICAgICAgICAgICAgICAgICAgb3JpZ2luYWxTdGFydExpbmVOdW1iZXI6IDEsXG4gICAgICAgICAgICAgICAgICAgICAgICBvcmlnaW5hbEVuZExpbmVOdW1iZXI6IDEsXG4gICAgICAgICAgICAgICAgICAgICAgICBtb2RpZmllZFN0YXJ0TGluZU51bWJlcjogMSxcbiAgICAgICAgICAgICAgICAgICAgICAgIG1vZGlmaWVkRW5kTGluZU51bWJlcjogdGhpcy5tb2RpZmllZC5saW5lcy5sZW5ndGgsXG4gICAgICAgICAgICAgICAgICAgICAgICBjaGFyQ2hhbmdlczogdW5kZWZpbmVkXG4gICAgICAgICAgICAgICAgICAgIH1dXG4gICAgICAgICAgICB9O1xuICAgICAgICB9XG4gICAgICAgIGlmICh0aGlzLm1vZGlmaWVkLmxpbmVzLmxlbmd0aCA9PT0gMSAmJiB0aGlzLm1vZGlmaWVkLmxpbmVzWzBdLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICAgICAgLy8gZW1wdHkgbW9kaWZpZWQgPT4gZmFzdCBwYXRoXG4gICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgIHF1aXRFYXJseTogZmFsc2UsXG4gICAgICAgICAgICAgICAgY2hhbmdlczogW3tcbiAgICAgICAgICAgICAgICAgICAgICAgIG9yaWdpbmFsU3RhcnRMaW5lTnVtYmVyOiAxLFxuICAgICAgICAgICAgICAgICAgICAgICAgb3JpZ2luYWxFbmRMaW5lTnVtYmVyOiB0aGlzLm9yaWdpbmFsLmxpbmVzLmxlbmd0aCxcbiAgICAgICAgICAgICAgICAgICAgICAgIG1vZGlmaWVkU3RhcnRMaW5lTnVtYmVyOiAxLFxuICAgICAgICAgICAgICAgICAgICAgICAgbW9kaWZpZWRFbmRMaW5lTnVtYmVyOiAxLFxuICAgICAgICAgICAgICAgICAgICAgICAgY2hhckNoYW5nZXM6IHVuZGVmaW5lZFxuICAgICAgICAgICAgICAgICAgICB9XVxuICAgICAgICAgICAgfTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBkaWZmUmVzdWx0ID0gY29tcHV0ZURpZmYodGhpcy5vcmlnaW5hbCwgdGhpcy5tb2RpZmllZCwgdGhpcy5jb250aW51ZUxpbmVEaWZmLCB0aGlzLnNob3VsZE1ha2VQcmV0dHlEaWZmKTtcbiAgICAgICAgY29uc3QgcmF3Q2hhbmdlcyA9IGRpZmZSZXN1bHQuY2hhbmdlcztcbiAgICAgICAgY29uc3QgcXVpdEVhcmx5ID0gZGlmZlJlc3VsdC5xdWl0RWFybHk7XG4gICAgICAgIC8vIFRoZSBkaWZmIGlzIGFsd2F5cyBjb21wdXRlZCB3aXRoIGlnbm9yaW5nIHRyaW0gd2hpdGVzcGFjZVxuICAgICAgICAvLyBUaGlzIGVuc3VyZXMgd2UgZ2V0IHRoZSBwcmV0dGllc3QgZGlmZlxuICAgICAgICBpZiAodGhpcy5zaG91bGRJZ25vcmVUcmltV2hpdGVzcGFjZSkge1xuICAgICAgICAgICAgY29uc3QgbGluZUNoYW5nZXMgPSBbXTtcbiAgICAgICAgICAgIGZvciAobGV0IGkgPSAwLCBsZW5ndGggPSByYXdDaGFuZ2VzLmxlbmd0aDsgaSA8IGxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgbGluZUNoYW5nZXMucHVzaChMaW5lQ2hhbmdlLmNyZWF0ZUZyb21EaWZmUmVzdWx0KHRoaXMuc2hvdWxkSWdub3JlVHJpbVdoaXRlc3BhY2UsIHJhd0NoYW5nZXNbaV0sIHRoaXMub3JpZ2luYWwsIHRoaXMubW9kaWZpZWQsIHRoaXMuY29udGludWVDaGFyRGlmZiwgdGhpcy5zaG91bGRDb21wdXRlQ2hhckNoYW5nZXMsIHRoaXMuc2hvdWxkUG9zdFByb2Nlc3NDaGFyQ2hhbmdlcykpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICBxdWl0RWFybHk6IHF1aXRFYXJseSxcbiAgICAgICAgICAgICAgICBjaGFuZ2VzOiBsaW5lQ2hhbmdlc1xuICAgICAgICAgICAgfTtcbiAgICAgICAgfVxuICAgICAgICAvLyBOZWVkIHRvIHBvc3QtcHJvY2VzcyBhbmQgaW50cm9kdWNlIGNoYW5nZXMgd2hlcmUgdGhlIHRyaW0gd2hpdGVzcGFjZSBpcyBkaWZmZXJlbnRcbiAgICAgICAgLy8gTm90ZSB0aGF0IHdlIGFyZSBsb29waW5nIHN0YXJ0aW5nIGF0IC0xIHRvIGFsc28gY292ZXIgdGhlIGxpbmVzIGJlZm9yZSB0aGUgZmlyc3QgY2hhbmdlXG4gICAgICAgIGNvbnN0IHJlc3VsdCA9IFtdO1xuICAgICAgICBsZXQgb3JpZ2luYWxMaW5lSW5kZXggPSAwO1xuICAgICAgICBsZXQgbW9kaWZpZWRMaW5lSW5kZXggPSAwO1xuICAgICAgICBmb3IgKGxldCBpID0gLTEgLyogISEhISAqLywgbGVuID0gcmF3Q2hhbmdlcy5sZW5ndGg7IGkgPCBsZW47IGkrKykge1xuICAgICAgICAgICAgY29uc3QgbmV4dENoYW5nZSA9IChpICsgMSA8IGxlbiA/IHJhd0NoYW5nZXNbaSArIDFdIDogbnVsbCk7XG4gICAgICAgICAgICBjb25zdCBvcmlnaW5hbFN0b3AgPSAobmV4dENoYW5nZSA/IG5leHRDaGFuZ2Uub3JpZ2luYWxTdGFydCA6IHRoaXMub3JpZ2luYWxMaW5lcy5sZW5ndGgpO1xuICAgICAgICAgICAgY29uc3QgbW9kaWZpZWRTdG9wID0gKG5leHRDaGFuZ2UgPyBuZXh0Q2hhbmdlLm1vZGlmaWVkU3RhcnQgOiB0aGlzLm1vZGlmaWVkTGluZXMubGVuZ3RoKTtcbiAgICAgICAgICAgIHdoaWxlIChvcmlnaW5hbExpbmVJbmRleCA8IG9yaWdpbmFsU3RvcCAmJiBtb2RpZmllZExpbmVJbmRleCA8IG1vZGlmaWVkU3RvcCkge1xuICAgICAgICAgICAgICAgIGNvbnN0IG9yaWdpbmFsTGluZSA9IHRoaXMub3JpZ2luYWxMaW5lc1tvcmlnaW5hbExpbmVJbmRleF07XG4gICAgICAgICAgICAgICAgY29uc3QgbW9kaWZpZWRMaW5lID0gdGhpcy5tb2RpZmllZExpbmVzW21vZGlmaWVkTGluZUluZGV4XTtcbiAgICAgICAgICAgICAgICBpZiAob3JpZ2luYWxMaW5lICE9PSBtb2RpZmllZExpbmUpIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gVGhlc2UgbGluZXMgZGlmZmVyIG9ubHkgaW4gdHJpbSB3aGl0ZXNwYWNlXG4gICAgICAgICAgICAgICAgICAgIC8vIENoZWNrIHRoZSBsZWFkaW5nIHdoaXRlc3BhY2VcbiAgICAgICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICAgICAgbGV0IG9yaWdpbmFsU3RhcnRDb2x1bW4gPSBnZXRGaXJzdE5vbkJsYW5rQ29sdW1uKG9yaWdpbmFsTGluZSwgMSk7XG4gICAgICAgICAgICAgICAgICAgICAgICBsZXQgbW9kaWZpZWRTdGFydENvbHVtbiA9IGdldEZpcnN0Tm9uQmxhbmtDb2x1bW4obW9kaWZpZWRMaW5lLCAxKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHdoaWxlIChvcmlnaW5hbFN0YXJ0Q29sdW1uID4gMSAmJiBtb2RpZmllZFN0YXJ0Q29sdW1uID4gMSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IG9yaWdpbmFsQ2hhciA9IG9yaWdpbmFsTGluZS5jaGFyQ29kZUF0KG9yaWdpbmFsU3RhcnRDb2x1bW4gLSAyKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBtb2RpZmllZENoYXIgPSBtb2RpZmllZExpbmUuY2hhckNvZGVBdChtb2RpZmllZFN0YXJ0Q29sdW1uIC0gMik7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKG9yaWdpbmFsQ2hhciAhPT0gbW9kaWZpZWRDaGFyKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBvcmlnaW5hbFN0YXJ0Q29sdW1uLS07XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbW9kaWZpZWRTdGFydENvbHVtbi0tO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKG9yaWdpbmFsU3RhcnRDb2x1bW4gPiAxIHx8IG1vZGlmaWVkU3RhcnRDb2x1bW4gPiAxKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fcHVzaFRyaW1XaGl0ZXNwYWNlQ2hhckNoYW5nZShyZXN1bHQsIG9yaWdpbmFsTGluZUluZGV4ICsgMSwgMSwgb3JpZ2luYWxTdGFydENvbHVtbiwgbW9kaWZpZWRMaW5lSW5kZXggKyAxLCAxLCBtb2RpZmllZFN0YXJ0Q29sdW1uKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAvLyBDaGVjayB0aGUgdHJhaWxpbmcgd2hpdGVzcGFjZVxuICAgICAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgICAgICBsZXQgb3JpZ2luYWxFbmRDb2x1bW4gPSBnZXRMYXN0Tm9uQmxhbmtDb2x1bW4ob3JpZ2luYWxMaW5lLCAxKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGxldCBtb2RpZmllZEVuZENvbHVtbiA9IGdldExhc3ROb25CbGFua0NvbHVtbihtb2RpZmllZExpbmUsIDEpO1xuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3Qgb3JpZ2luYWxNYXhDb2x1bW4gPSBvcmlnaW5hbExpbmUubGVuZ3RoICsgMTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IG1vZGlmaWVkTWF4Q29sdW1uID0gbW9kaWZpZWRMaW5lLmxlbmd0aCArIDE7XG4gICAgICAgICAgICAgICAgICAgICAgICB3aGlsZSAob3JpZ2luYWxFbmRDb2x1bW4gPCBvcmlnaW5hbE1heENvbHVtbiAmJiBtb2RpZmllZEVuZENvbHVtbiA8IG1vZGlmaWVkTWF4Q29sdW1uKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3Qgb3JpZ2luYWxDaGFyID0gb3JpZ2luYWxMaW5lLmNoYXJDb2RlQXQob3JpZ2luYWxFbmRDb2x1bW4gLSAxKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBtb2RpZmllZENoYXIgPSBvcmlnaW5hbExpbmUuY2hhckNvZGVBdChtb2RpZmllZEVuZENvbHVtbiAtIDEpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChvcmlnaW5hbENoYXIgIT09IG1vZGlmaWVkQ2hhcikge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgb3JpZ2luYWxFbmRDb2x1bW4rKztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBtb2RpZmllZEVuZENvbHVtbisrO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKG9yaWdpbmFsRW5kQ29sdW1uIDwgb3JpZ2luYWxNYXhDb2x1bW4gfHwgbW9kaWZpZWRFbmRDb2x1bW4gPCBtb2RpZmllZE1heENvbHVtbikge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX3B1c2hUcmltV2hpdGVzcGFjZUNoYXJDaGFuZ2UocmVzdWx0LCBvcmlnaW5hbExpbmVJbmRleCArIDEsIG9yaWdpbmFsRW5kQ29sdW1uLCBvcmlnaW5hbE1heENvbHVtbiwgbW9kaWZpZWRMaW5lSW5kZXggKyAxLCBtb2RpZmllZEVuZENvbHVtbiwgbW9kaWZpZWRNYXhDb2x1bW4pO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIG9yaWdpbmFsTGluZUluZGV4Kys7XG4gICAgICAgICAgICAgICAgbW9kaWZpZWRMaW5lSW5kZXgrKztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChuZXh0Q2hhbmdlKSB7XG4gICAgICAgICAgICAgICAgLy8gRW1pdCB0aGUgYWN0dWFsIGNoYW5nZVxuICAgICAgICAgICAgICAgIHJlc3VsdC5wdXNoKExpbmVDaGFuZ2UuY3JlYXRlRnJvbURpZmZSZXN1bHQodGhpcy5zaG91bGRJZ25vcmVUcmltV2hpdGVzcGFjZSwgbmV4dENoYW5nZSwgdGhpcy5vcmlnaW5hbCwgdGhpcy5tb2RpZmllZCwgdGhpcy5jb250aW51ZUNoYXJEaWZmLCB0aGlzLnNob3VsZENvbXB1dGVDaGFyQ2hhbmdlcywgdGhpcy5zaG91bGRQb3N0UHJvY2Vzc0NoYXJDaGFuZ2VzKSk7XG4gICAgICAgICAgICAgICAgb3JpZ2luYWxMaW5lSW5kZXggKz0gbmV4dENoYW5nZS5vcmlnaW5hbExlbmd0aDtcbiAgICAgICAgICAgICAgICBtb2RpZmllZExpbmVJbmRleCArPSBuZXh0Q2hhbmdlLm1vZGlmaWVkTGVuZ3RoO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBxdWl0RWFybHk6IHF1aXRFYXJseSxcbiAgICAgICAgICAgIGNoYW5nZXM6IHJlc3VsdFxuICAgICAgICB9O1xuICAgIH1cbiAgICBfcHVzaFRyaW1XaGl0ZXNwYWNlQ2hhckNoYW5nZShyZXN1bHQsIG9yaWdpbmFsTGluZU51bWJlciwgb3JpZ2luYWxTdGFydENvbHVtbiwgb3JpZ2luYWxFbmRDb2x1bW4sIG1vZGlmaWVkTGluZU51bWJlciwgbW9kaWZpZWRTdGFydENvbHVtbiwgbW9kaWZpZWRFbmRDb2x1bW4pIHtcbiAgICAgICAgaWYgKHRoaXMuX21lcmdlVHJpbVdoaXRlc3BhY2VDaGFyQ2hhbmdlKHJlc3VsdCwgb3JpZ2luYWxMaW5lTnVtYmVyLCBvcmlnaW5hbFN0YXJ0Q29sdW1uLCBvcmlnaW5hbEVuZENvbHVtbiwgbW9kaWZpZWRMaW5lTnVtYmVyLCBtb2RpZmllZFN0YXJ0Q29sdW1uLCBtb2RpZmllZEVuZENvbHVtbikpIHtcbiAgICAgICAgICAgIC8vIE1lcmdlZCBpbnRvIHByZXZpb3VzXG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgbGV0IGNoYXJDaGFuZ2VzID0gdW5kZWZpbmVkO1xuICAgICAgICBpZiAodGhpcy5zaG91bGRDb21wdXRlQ2hhckNoYW5nZXMpIHtcbiAgICAgICAgICAgIGNoYXJDaGFuZ2VzID0gW25ldyBDaGFyQ2hhbmdlKG9yaWdpbmFsTGluZU51bWJlciwgb3JpZ2luYWxTdGFydENvbHVtbiwgb3JpZ2luYWxMaW5lTnVtYmVyLCBvcmlnaW5hbEVuZENvbHVtbiwgbW9kaWZpZWRMaW5lTnVtYmVyLCBtb2RpZmllZFN0YXJ0Q29sdW1uLCBtb2RpZmllZExpbmVOdW1iZXIsIG1vZGlmaWVkRW5kQ29sdW1uKV07XG4gICAgICAgIH1cbiAgICAgICAgcmVzdWx0LnB1c2gobmV3IExpbmVDaGFuZ2Uob3JpZ2luYWxMaW5lTnVtYmVyLCBvcmlnaW5hbExpbmVOdW1iZXIsIG1vZGlmaWVkTGluZU51bWJlciwgbW9kaWZpZWRMaW5lTnVtYmVyLCBjaGFyQ2hhbmdlcykpO1xuICAgIH1cbiAgICBfbWVyZ2VUcmltV2hpdGVzcGFjZUNoYXJDaGFuZ2UocmVzdWx0LCBvcmlnaW5hbExpbmVOdW1iZXIsIG9yaWdpbmFsU3RhcnRDb2x1bW4sIG9yaWdpbmFsRW5kQ29sdW1uLCBtb2RpZmllZExpbmVOdW1iZXIsIG1vZGlmaWVkU3RhcnRDb2x1bW4sIG1vZGlmaWVkRW5kQ29sdW1uKSB7XG4gICAgICAgIGNvbnN0IGxlbiA9IHJlc3VsdC5sZW5ndGg7XG4gICAgICAgIGlmIChsZW4gPT09IDApIHtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBwcmV2Q2hhbmdlID0gcmVzdWx0W2xlbiAtIDFdO1xuICAgICAgICBpZiAocHJldkNoYW5nZS5vcmlnaW5hbEVuZExpbmVOdW1iZXIgPT09IDAgfHwgcHJldkNoYW5nZS5tb2RpZmllZEVuZExpbmVOdW1iZXIgPT09IDApIHtcbiAgICAgICAgICAgIC8vIERvbid0IG1lcmdlIHdpdGggaW5zZXJ0cy9kZWxldGVzXG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHByZXZDaGFuZ2Uub3JpZ2luYWxFbmRMaW5lTnVtYmVyID09PSBvcmlnaW5hbExpbmVOdW1iZXIgJiYgcHJldkNoYW5nZS5tb2RpZmllZEVuZExpbmVOdW1iZXIgPT09IG1vZGlmaWVkTGluZU51bWJlcikge1xuICAgICAgICAgICAgaWYgKHRoaXMuc2hvdWxkQ29tcHV0ZUNoYXJDaGFuZ2VzICYmIHByZXZDaGFuZ2UuY2hhckNoYW5nZXMpIHtcbiAgICAgICAgICAgICAgICBwcmV2Q2hhbmdlLmNoYXJDaGFuZ2VzLnB1c2gobmV3IENoYXJDaGFuZ2Uob3JpZ2luYWxMaW5lTnVtYmVyLCBvcmlnaW5hbFN0YXJ0Q29sdW1uLCBvcmlnaW5hbExpbmVOdW1iZXIsIG9yaWdpbmFsRW5kQ29sdW1uLCBtb2RpZmllZExpbmVOdW1iZXIsIG1vZGlmaWVkU3RhcnRDb2x1bW4sIG1vZGlmaWVkTGluZU51bWJlciwgbW9kaWZpZWRFbmRDb2x1bW4pKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9XG4gICAgICAgIGlmIChwcmV2Q2hhbmdlLm9yaWdpbmFsRW5kTGluZU51bWJlciArIDEgPT09IG9yaWdpbmFsTGluZU51bWJlciAmJiBwcmV2Q2hhbmdlLm1vZGlmaWVkRW5kTGluZU51bWJlciArIDEgPT09IG1vZGlmaWVkTGluZU51bWJlcikge1xuICAgICAgICAgICAgcHJldkNoYW5nZS5vcmlnaW5hbEVuZExpbmVOdW1iZXIgPSBvcmlnaW5hbExpbmVOdW1iZXI7XG4gICAgICAgICAgICBwcmV2Q2hhbmdlLm1vZGlmaWVkRW5kTGluZU51bWJlciA9IG1vZGlmaWVkTGluZU51bWJlcjtcbiAgICAgICAgICAgIGlmICh0aGlzLnNob3VsZENvbXB1dGVDaGFyQ2hhbmdlcyAmJiBwcmV2Q2hhbmdlLmNoYXJDaGFuZ2VzKSB7XG4gICAgICAgICAgICAgICAgcHJldkNoYW5nZS5jaGFyQ2hhbmdlcy5wdXNoKG5ldyBDaGFyQ2hhbmdlKG9yaWdpbmFsTGluZU51bWJlciwgb3JpZ2luYWxTdGFydENvbHVtbiwgb3JpZ2luYWxMaW5lTnVtYmVyLCBvcmlnaW5hbEVuZENvbHVtbiwgbW9kaWZpZWRMaW5lTnVtYmVyLCBtb2RpZmllZFN0YXJ0Q29sdW1uLCBtb2RpZmllZExpbmVOdW1iZXIsIG1vZGlmaWVkRW5kQ29sdW1uKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxufVxuZnVuY3Rpb24gZ2V0Rmlyc3ROb25CbGFua0NvbHVtbih0eHQsIGRlZmF1bHRWYWx1ZSkge1xuICAgIGNvbnN0IHIgPSBzdHJpbmdzLmZpcnN0Tm9uV2hpdGVzcGFjZUluZGV4KHR4dCk7XG4gICAgaWYgKHIgPT09IC0xKSB7XG4gICAgICAgIHJldHVybiBkZWZhdWx0VmFsdWU7XG4gICAgfVxuICAgIHJldHVybiByICsgMTtcbn1cbmZ1bmN0aW9uIGdldExhc3ROb25CbGFua0NvbHVtbih0eHQsIGRlZmF1bHRWYWx1ZSkge1xuICAgIGNvbnN0IHIgPSBzdHJpbmdzLmxhc3ROb25XaGl0ZXNwYWNlSW5kZXgodHh0KTtcbiAgICBpZiAociA9PT0gLTEpIHtcbiAgICAgICAgcmV0dXJuIGRlZmF1bHRWYWx1ZTtcbiAgICB9XG4gICAgcmV0dXJuIHIgKyAyO1xufVxuZnVuY3Rpb24gY3JlYXRlQ29udGludWVQcm9jZXNzaW5nUHJlZGljYXRlKG1heGltdW1SdW50aW1lKSB7XG4gICAgaWYgKG1heGltdW1SdW50aW1lID09PSAwKSB7XG4gICAgICAgIHJldHVybiAoKSA9PiB0cnVlO1xuICAgIH1cbiAgICBjb25zdCBzdGFydFRpbWUgPSBEYXRlLm5vdygpO1xuICAgIHJldHVybiAoKSA9PiB7XG4gICAgICAgIHJldHVybiBEYXRlLm5vdygpIC0gc3RhcnRUaW1lIDwgbWF4aW11bVJ1bnRpbWU7XG4gICAgfTtcbn1cbiIsICIvKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICogIENvcHlyaWdodCAoYykgTWljcm9zb2Z0IENvcnBvcmF0aW9uLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICogIExpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgTGljZW5zZS4gU2VlIExpY2Vuc2UudHh0IGluIHRoZSBwcm9qZWN0IHJvb3QgZm9yIGxpY2Vuc2UgaW5mb3JtYXRpb24uXG4gKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKi9cbmltcG9ydCB7IGZvckVhY2hBZGphY2VudCB9IGZyb20gJy4uLy4uLy4uLy4uLy4uL2Jhc2UvY29tbW9uL2FycmF5cy5qcyc7XG5pbXBvcnQgeyBCdWdJbmRpY2F0aW5nRXJyb3IgfSBmcm9tICcuLi8uLi8uLi8uLi8uLi9iYXNlL2NvbW1vbi9lcnJvcnMuanMnO1xuaW1wb3J0IHsgT2Zmc2V0UmFuZ2UgfSBmcm9tICcuLi8uLi8uLi9jb3JlL29mZnNldFJhbmdlLmpzJztcbmV4cG9ydCBjbGFzcyBEaWZmQWxnb3JpdGhtUmVzdWx0IHtcbiAgICBzdGF0aWMgdHJpdmlhbChzZXExLCBzZXEyKSB7XG4gICAgICAgIHJldHVybiBuZXcgRGlmZkFsZ29yaXRobVJlc3VsdChbbmV3IFNlcXVlbmNlRGlmZihPZmZzZXRSYW5nZS5vZkxlbmd0aChzZXExLmxlbmd0aCksIE9mZnNldFJhbmdlLm9mTGVuZ3RoKHNlcTIubGVuZ3RoKSldLCBmYWxzZSk7XG4gICAgfVxuICAgIHN0YXRpYyB0cml2aWFsVGltZWRPdXQoc2VxMSwgc2VxMikge1xuICAgICAgICByZXR1cm4gbmV3IERpZmZBbGdvcml0aG1SZXN1bHQoW25ldyBTZXF1ZW5jZURpZmYoT2Zmc2V0UmFuZ2Uub2ZMZW5ndGgoc2VxMS5sZW5ndGgpLCBPZmZzZXRSYW5nZS5vZkxlbmd0aChzZXEyLmxlbmd0aCkpXSwgdHJ1ZSk7XG4gICAgfVxuICAgIGNvbnN0cnVjdG9yKGRpZmZzLCBcbiAgICAvKipcbiAgICAgKiBJbmRpY2F0ZXMgaWYgdGhlIHRpbWUgb3V0IHdhcyByZWFjaGVkLlxuICAgICAqIEluIHRoYXQgY2FzZSwgdGhlIGRpZmZzIG1pZ2h0IGJlIGFuIGFwcHJveGltYXRpb24gYW5kIHRoZSB1c2VyIHNob3VsZCBiZSBhc2tlZCB0byByZXJ1biB0aGUgZGlmZiB3aXRoIG1vcmUgdGltZS5cbiAgICAgKi9cbiAgICBoaXRUaW1lb3V0KSB7XG4gICAgICAgIHRoaXMuZGlmZnMgPSBkaWZmcztcbiAgICAgICAgdGhpcy5oaXRUaW1lb3V0ID0gaGl0VGltZW91dDtcbiAgICB9XG59XG5leHBvcnQgY2xhc3MgU2VxdWVuY2VEaWZmIHtcbiAgICBzdGF0aWMgaW52ZXJ0KHNlcXVlbmNlRGlmZnMsIGRvYzFMZW5ndGgpIHtcbiAgICAgICAgY29uc3QgcmVzdWx0ID0gW107XG4gICAgICAgIGZvckVhY2hBZGphY2VudChzZXF1ZW5jZURpZmZzLCAoYSwgYikgPT4ge1xuICAgICAgICAgICAgcmVzdWx0LnB1c2goU2VxdWVuY2VEaWZmLmZyb21PZmZzZXRQYWlycyhhID8gYS5nZXRFbmRFeGNsdXNpdmVzKCkgOiBPZmZzZXRQYWlyLnplcm8sIGIgPyBiLmdldFN0YXJ0cygpIDogbmV3IE9mZnNldFBhaXIoZG9jMUxlbmd0aCwgKGEgPyBhLnNlcTJSYW5nZS5lbmRFeGNsdXNpdmUgLSBhLnNlcTFSYW5nZS5lbmRFeGNsdXNpdmUgOiAwKSArIGRvYzFMZW5ndGgpKSk7XG4gICAgICAgIH0pO1xuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cbiAgICBzdGF0aWMgZnJvbU9mZnNldFBhaXJzKHN0YXJ0LCBlbmRFeGNsdXNpdmUpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBTZXF1ZW5jZURpZmYobmV3IE9mZnNldFJhbmdlKHN0YXJ0Lm9mZnNldDEsIGVuZEV4Y2x1c2l2ZS5vZmZzZXQxKSwgbmV3IE9mZnNldFJhbmdlKHN0YXJ0Lm9mZnNldDIsIGVuZEV4Y2x1c2l2ZS5vZmZzZXQyKSk7XG4gICAgfVxuICAgIGNvbnN0cnVjdG9yKHNlcTFSYW5nZSwgc2VxMlJhbmdlKSB7XG4gICAgICAgIHRoaXMuc2VxMVJhbmdlID0gc2VxMVJhbmdlO1xuICAgICAgICB0aGlzLnNlcTJSYW5nZSA9IHNlcTJSYW5nZTtcbiAgICB9XG4gICAgc3dhcCgpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBTZXF1ZW5jZURpZmYodGhpcy5zZXEyUmFuZ2UsIHRoaXMuc2VxMVJhbmdlKTtcbiAgICB9XG4gICAgdG9TdHJpbmcoKSB7XG4gICAgICAgIHJldHVybiBgJHt0aGlzLnNlcTFSYW5nZX0gPC0+ICR7dGhpcy5zZXEyUmFuZ2V9YDtcbiAgICB9XG4gICAgam9pbihvdGhlcikge1xuICAgICAgICByZXR1cm4gbmV3IFNlcXVlbmNlRGlmZih0aGlzLnNlcTFSYW5nZS5qb2luKG90aGVyLnNlcTFSYW5nZSksIHRoaXMuc2VxMlJhbmdlLmpvaW4ob3RoZXIuc2VxMlJhbmdlKSk7XG4gICAgfVxuICAgIGRlbHRhKG9mZnNldCkge1xuICAgICAgICBpZiAob2Zmc2V0ID09PSAwKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbmV3IFNlcXVlbmNlRGlmZih0aGlzLnNlcTFSYW5nZS5kZWx0YShvZmZzZXQpLCB0aGlzLnNlcTJSYW5nZS5kZWx0YShvZmZzZXQpKTtcbiAgICB9XG4gICAgZGVsdGFTdGFydChvZmZzZXQpIHtcbiAgICAgICAgaWYgKG9mZnNldCA9PT0gMCkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG5ldyBTZXF1ZW5jZURpZmYodGhpcy5zZXExUmFuZ2UuZGVsdGFTdGFydChvZmZzZXQpLCB0aGlzLnNlcTJSYW5nZS5kZWx0YVN0YXJ0KG9mZnNldCkpO1xuICAgIH1cbiAgICBkZWx0YUVuZChvZmZzZXQpIHtcbiAgICAgICAgaWYgKG9mZnNldCA9PT0gMCkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG5ldyBTZXF1ZW5jZURpZmYodGhpcy5zZXExUmFuZ2UuZGVsdGFFbmQob2Zmc2V0KSwgdGhpcy5zZXEyUmFuZ2UuZGVsdGFFbmQob2Zmc2V0KSk7XG4gICAgfVxuICAgIGludGVyc2VjdChvdGhlcikge1xuICAgICAgICBjb25zdCBpMSA9IHRoaXMuc2VxMVJhbmdlLmludGVyc2VjdChvdGhlci5zZXExUmFuZ2UpO1xuICAgICAgICBjb25zdCBpMiA9IHRoaXMuc2VxMlJhbmdlLmludGVyc2VjdChvdGhlci5zZXEyUmFuZ2UpO1xuICAgICAgICBpZiAoIWkxIHx8ICFpMikge1xuICAgICAgICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbmV3IFNlcXVlbmNlRGlmZihpMSwgaTIpO1xuICAgIH1cbiAgICBnZXRTdGFydHMoKSB7XG4gICAgICAgIHJldHVybiBuZXcgT2Zmc2V0UGFpcih0aGlzLnNlcTFSYW5nZS5zdGFydCwgdGhpcy5zZXEyUmFuZ2Uuc3RhcnQpO1xuICAgIH1cbiAgICBnZXRFbmRFeGNsdXNpdmVzKCkge1xuICAgICAgICByZXR1cm4gbmV3IE9mZnNldFBhaXIodGhpcy5zZXExUmFuZ2UuZW5kRXhjbHVzaXZlLCB0aGlzLnNlcTJSYW5nZS5lbmRFeGNsdXNpdmUpO1xuICAgIH1cbn1cbmV4cG9ydCBjbGFzcyBPZmZzZXRQYWlyIHtcbiAgICBjb25zdHJ1Y3RvcihvZmZzZXQxLCBvZmZzZXQyKSB7XG4gICAgICAgIHRoaXMub2Zmc2V0MSA9IG9mZnNldDE7XG4gICAgICAgIHRoaXMub2Zmc2V0MiA9IG9mZnNldDI7XG4gICAgfVxuICAgIHRvU3RyaW5nKCkge1xuICAgICAgICByZXR1cm4gYCR7dGhpcy5vZmZzZXQxfSA8LT4gJHt0aGlzLm9mZnNldDJ9YDtcbiAgICB9XG4gICAgZGVsdGEob2Zmc2V0KSB7XG4gICAgICAgIGlmIChvZmZzZXQgPT09IDApIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBuZXcgT2Zmc2V0UGFpcih0aGlzLm9mZnNldDEgKyBvZmZzZXQsIHRoaXMub2Zmc2V0MiArIG9mZnNldCk7XG4gICAgfVxuICAgIGVxdWFscyhvdGhlcikge1xuICAgICAgICByZXR1cm4gdGhpcy5vZmZzZXQxID09PSBvdGhlci5vZmZzZXQxICYmIHRoaXMub2Zmc2V0MiA9PT0gb3RoZXIub2Zmc2V0MjtcbiAgICB9XG59XG5PZmZzZXRQYWlyLnplcm8gPSBuZXcgT2Zmc2V0UGFpcigwLCAwKTtcbk9mZnNldFBhaXIubWF4ID0gbmV3IE9mZnNldFBhaXIoTnVtYmVyLk1BWF9TQUZFX0lOVEVHRVIsIE51bWJlci5NQVhfU0FGRV9JTlRFR0VSKTtcbmV4cG9ydCBjbGFzcyBJbmZpbml0ZVRpbWVvdXQge1xuICAgIGlzVmFsaWQoKSB7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbn1cbkluZmluaXRlVGltZW91dC5pbnN0YW5jZSA9IG5ldyBJbmZpbml0ZVRpbWVvdXQoKTtcbmV4cG9ydCBjbGFzcyBEYXRlVGltZW91dCB7XG4gICAgY29uc3RydWN0b3IodGltZW91dCkge1xuICAgICAgICB0aGlzLnRpbWVvdXQgPSB0aW1lb3V0O1xuICAgICAgICB0aGlzLnN0YXJ0VGltZSA9IERhdGUubm93KCk7XG4gICAgICAgIHRoaXMudmFsaWQgPSB0cnVlO1xuICAgICAgICBpZiAodGltZW91dCA8PSAwKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgQnVnSW5kaWNhdGluZ0Vycm9yKCd0aW1lb3V0IG11c3QgYmUgcG9zaXRpdmUnKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICAvLyBSZWNvbW1lbmRhdGlvbjogU2V0IGEgbG9nLXBvaW50IGB7dGhpcy5kaXNhYmxlKCl9YCBpbiB0aGUgYm9keVxuICAgIGlzVmFsaWQoKSB7XG4gICAgICAgIGNvbnN0IHZhbGlkID0gRGF0ZS5ub3coKSAtIHRoaXMuc3RhcnRUaW1lIDwgdGhpcy50aW1lb3V0O1xuICAgICAgICBpZiAoIXZhbGlkICYmIHRoaXMudmFsaWQpIHtcbiAgICAgICAgICAgIHRoaXMudmFsaWQgPSBmYWxzZTsgLy8gdGltZW91dCByZWFjaGVkXG4gICAgICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tZGVidWdnZXJcbiAgICAgICAgICAgIGRlYnVnZ2VyOyAvLyBXQVJOSU5HOiBNb3N0IGxpa2VseSBkZWJ1Z2dpbmcgY2F1c2VkIHRoZSB0aW1lb3V0LiBDYWxsIGB0aGlzLmRpc2FibGUoKWAgdG8gY29udGludWUgd2l0aG91dCB0aW1pbmcgb3V0LlxuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0aGlzLnZhbGlkO1xuICAgIH1cbn1cbiIsICIvKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICogIENvcHlyaWdodCAoYykgTWljcm9zb2Z0IENvcnBvcmF0aW9uLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICogIExpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgTGljZW5zZS4gU2VlIExpY2Vuc2UudHh0IGluIHRoZSBwcm9qZWN0IHJvb3QgZm9yIGxpY2Vuc2UgaW5mb3JtYXRpb24uXG4gKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKi9cbmV4cG9ydCBjbGFzcyBBcnJheTJEIHtcbiAgICBjb25zdHJ1Y3Rvcih3aWR0aCwgaGVpZ2h0KSB7XG4gICAgICAgIHRoaXMud2lkdGggPSB3aWR0aDtcbiAgICAgICAgdGhpcy5oZWlnaHQgPSBoZWlnaHQ7XG4gICAgICAgIHRoaXMuYXJyYXkgPSBbXTtcbiAgICAgICAgdGhpcy5hcnJheSA9IG5ldyBBcnJheSh3aWR0aCAqIGhlaWdodCk7XG4gICAgfVxuICAgIGdldCh4LCB5KSB7XG4gICAgICAgIHJldHVybiB0aGlzLmFycmF5W3ggKyB5ICogdGhpcy53aWR0aF07XG4gICAgfVxuICAgIHNldCh4LCB5LCB2YWx1ZSkge1xuICAgICAgICB0aGlzLmFycmF5W3ggKyB5ICogdGhpcy53aWR0aF0gPSB2YWx1ZTtcbiAgICB9XG59XG5leHBvcnQgZnVuY3Rpb24gaXNTcGFjZShjaGFyQ29kZSkge1xuICAgIHJldHVybiBjaGFyQ29kZSA9PT0gMzIgLyogQ2hhckNvZGUuU3BhY2UgKi8gfHwgY2hhckNvZGUgPT09IDkgLyogQ2hhckNvZGUuVGFiICovO1xufVxuZXhwb3J0IGNsYXNzIExpbmVSYW5nZUZyYWdtZW50IHtcbiAgICBzdGF0aWMgZ2V0S2V5KGNocikge1xuICAgICAgICBsZXQga2V5ID0gdGhpcy5jaHJLZXlzLmdldChjaHIpO1xuICAgICAgICBpZiAoa2V5ID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIGtleSA9IHRoaXMuY2hyS2V5cy5zaXplO1xuICAgICAgICAgICAgdGhpcy5jaHJLZXlzLnNldChjaHIsIGtleSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGtleTtcbiAgICB9XG4gICAgY29uc3RydWN0b3IocmFuZ2UsIGxpbmVzLCBzb3VyY2UpIHtcbiAgICAgICAgdGhpcy5yYW5nZSA9IHJhbmdlO1xuICAgICAgICB0aGlzLmxpbmVzID0gbGluZXM7XG4gICAgICAgIHRoaXMuc291cmNlID0gc291cmNlO1xuICAgICAgICB0aGlzLmhpc3RvZ3JhbSA9IFtdO1xuICAgICAgICBsZXQgY291bnRlciA9IDA7XG4gICAgICAgIGZvciAobGV0IGkgPSByYW5nZS5zdGFydExpbmVOdW1iZXIgLSAxOyBpIDwgcmFuZ2UuZW5kTGluZU51bWJlckV4Y2x1c2l2ZSAtIDE7IGkrKykge1xuICAgICAgICAgICAgY29uc3QgbGluZSA9IGxpbmVzW2ldO1xuICAgICAgICAgICAgZm9yIChsZXQgaiA9IDA7IGogPCBsaW5lLmxlbmd0aDsgaisrKSB7XG4gICAgICAgICAgICAgICAgY291bnRlcisrO1xuICAgICAgICAgICAgICAgIGNvbnN0IGNociA9IGxpbmVbal07XG4gICAgICAgICAgICAgICAgY29uc3Qga2V5ID0gTGluZVJhbmdlRnJhZ21lbnQuZ2V0S2V5KGNocik7XG4gICAgICAgICAgICAgICAgdGhpcy5oaXN0b2dyYW1ba2V5XSA9ICh0aGlzLmhpc3RvZ3JhbVtrZXldIHx8IDApICsgMTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNvdW50ZXIrKztcbiAgICAgICAgICAgIGNvbnN0IGtleSA9IExpbmVSYW5nZUZyYWdtZW50LmdldEtleSgnXFxuJyk7XG4gICAgICAgICAgICB0aGlzLmhpc3RvZ3JhbVtrZXldID0gKHRoaXMuaGlzdG9ncmFtW2tleV0gfHwgMCkgKyAxO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMudG90YWxDb3VudCA9IGNvdW50ZXI7XG4gICAgfVxuICAgIGNvbXB1dGVTaW1pbGFyaXR5KG90aGVyKSB7XG4gICAgICAgIHZhciBfYSwgX2I7XG4gICAgICAgIGxldCBzdW1EaWZmZXJlbmNlcyA9IDA7XG4gICAgICAgIGNvbnN0IG1heExlbmd0aCA9IE1hdGgubWF4KHRoaXMuaGlzdG9ncmFtLmxlbmd0aCwgb3RoZXIuaGlzdG9ncmFtLmxlbmd0aCk7XG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbWF4TGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIHN1bURpZmZlcmVuY2VzICs9IE1hdGguYWJzKCgoX2EgPSB0aGlzLmhpc3RvZ3JhbVtpXSkgIT09IG51bGwgJiYgX2EgIT09IHZvaWQgMCA/IF9hIDogMCkgLSAoKF9iID0gb3RoZXIuaGlzdG9ncmFtW2ldKSAhPT0gbnVsbCAmJiBfYiAhPT0gdm9pZCAwID8gX2IgOiAwKSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIDEgLSAoc3VtRGlmZmVyZW5jZXMgLyAodGhpcy50b3RhbENvdW50ICsgb3RoZXIudG90YWxDb3VudCkpO1xuICAgIH1cbn1cbkxpbmVSYW5nZUZyYWdtZW50LmNocktleXMgPSBuZXcgTWFwKCk7XG4iLCAiLyotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAqICBDb3B5cmlnaHQgKGMpIE1pY3Jvc29mdCBDb3Jwb3JhdGlvbi4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqICBMaWNlbnNlZCB1bmRlciB0aGUgTUlUIExpY2Vuc2UuIFNlZSBMaWNlbnNlLnR4dCBpbiB0aGUgcHJvamVjdCByb290IGZvciBsaWNlbnNlIGluZm9ybWF0aW9uLlxuICotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSovXG5pbXBvcnQgeyBPZmZzZXRSYW5nZSB9IGZyb20gJy4uLy4uLy4uL2NvcmUvb2Zmc2V0UmFuZ2UuanMnO1xuaW1wb3J0IHsgU2VxdWVuY2VEaWZmLCBJbmZpbml0ZVRpbWVvdXQsIERpZmZBbGdvcml0aG1SZXN1bHQgfSBmcm9tICcuL2RpZmZBbGdvcml0aG0uanMnO1xuaW1wb3J0IHsgQXJyYXkyRCB9IGZyb20gJy4uL3V0aWxzLmpzJztcbi8qKlxuICogQSBPKE1OKSBkaWZmaW5nIGFsZ29yaXRobSB0aGF0IHN1cHBvcnRzIGEgc2NvcmUgZnVuY3Rpb24uXG4gKiBUaGUgYWxnb3JpdGhtIGNhbiBiZSBpbXByb3ZlZCBieSBwcm9jZXNzaW5nIHRoZSAyZCBhcnJheSBkaWFnb25hbGx5LlxuKi9cbmV4cG9ydCBjbGFzcyBEeW5hbWljUHJvZ3JhbW1pbmdEaWZmaW5nIHtcbiAgICBjb21wdXRlKHNlcXVlbmNlMSwgc2VxdWVuY2UyLCB0aW1lb3V0ID0gSW5maW5pdGVUaW1lb3V0Lmluc3RhbmNlLCBlcXVhbGl0eVNjb3JlKSB7XG4gICAgICAgIGlmIChzZXF1ZW5jZTEubGVuZ3RoID09PSAwIHx8IHNlcXVlbmNlMi5sZW5ndGggPT09IDApIHtcbiAgICAgICAgICAgIHJldHVybiBEaWZmQWxnb3JpdGhtUmVzdWx0LnRyaXZpYWwoc2VxdWVuY2UxLCBzZXF1ZW5jZTIpO1xuICAgICAgICB9XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBsY3NMZW5ndGhzLmdldChpLCBqKTogTGVuZ3RoIG9mIHRoZSBsb25nZXN0IGNvbW1vbiBzdWJzZXF1ZW5jZSBvZiBzZXF1ZW5jZTEuc3Vic3RyaW5nKDAsIGkgKyAxKSBhbmQgc2VxdWVuY2UyLnN1YnN0cmluZygwLCBqICsgMSkuXG4gICAgICAgICAqL1xuICAgICAgICBjb25zdCBsY3NMZW5ndGhzID0gbmV3IEFycmF5MkQoc2VxdWVuY2UxLmxlbmd0aCwgc2VxdWVuY2UyLmxlbmd0aCk7XG4gICAgICAgIGNvbnN0IGRpcmVjdGlvbnMgPSBuZXcgQXJyYXkyRChzZXF1ZW5jZTEubGVuZ3RoLCBzZXF1ZW5jZTIubGVuZ3RoKTtcbiAgICAgICAgY29uc3QgbGVuZ3RocyA9IG5ldyBBcnJheTJEKHNlcXVlbmNlMS5sZW5ndGgsIHNlcXVlbmNlMi5sZW5ndGgpO1xuICAgICAgICAvLyA9PT09IEluaXRpYWxpemluZyBsY3NMZW5ndGhzID09PT1cbiAgICAgICAgZm9yIChsZXQgczEgPSAwOyBzMSA8IHNlcXVlbmNlMS5sZW5ndGg7IHMxKyspIHtcbiAgICAgICAgICAgIGZvciAobGV0IHMyID0gMDsgczIgPCBzZXF1ZW5jZTIubGVuZ3RoOyBzMisrKSB7XG4gICAgICAgICAgICAgICAgaWYgKCF0aW1lb3V0LmlzVmFsaWQoKSkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gRGlmZkFsZ29yaXRobVJlc3VsdC50cml2aWFsVGltZWRPdXQoc2VxdWVuY2UxLCBzZXF1ZW5jZTIpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBjb25zdCBob3Jpem9udGFsTGVuID0gczEgPT09IDAgPyAwIDogbGNzTGVuZ3Rocy5nZXQoczEgLSAxLCBzMik7XG4gICAgICAgICAgICAgICAgY29uc3QgdmVydGljYWxMZW4gPSBzMiA9PT0gMCA/IDAgOiBsY3NMZW5ndGhzLmdldChzMSwgczIgLSAxKTtcbiAgICAgICAgICAgICAgICBsZXQgZXh0ZW5kZWRTZXFTY29yZTtcbiAgICAgICAgICAgICAgICBpZiAoc2VxdWVuY2UxLmdldEVsZW1lbnQoczEpID09PSBzZXF1ZW5jZTIuZ2V0RWxlbWVudChzMikpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHMxID09PSAwIHx8IHMyID09PSAwKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBleHRlbmRlZFNlcVNjb3JlID0gMDtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGV4dGVuZGVkU2VxU2NvcmUgPSBsY3NMZW5ndGhzLmdldChzMSAtIDEsIHMyIC0gMSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgaWYgKHMxID4gMCAmJiBzMiA+IDAgJiYgZGlyZWN0aW9ucy5nZXQoczEgLSAxLCBzMiAtIDEpID09PSAzKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBQcmVmZXIgY29uc2VjdXRpdmUgZGlhZ29uYWxzXG4gICAgICAgICAgICAgICAgICAgICAgICBleHRlbmRlZFNlcVNjb3JlICs9IGxlbmd0aHMuZ2V0KHMxIC0gMSwgczIgLSAxKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBleHRlbmRlZFNlcVNjb3JlICs9IChlcXVhbGl0eVNjb3JlID8gZXF1YWxpdHlTY29yZShzMSwgczIpIDogMSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBleHRlbmRlZFNlcVNjb3JlID0gLTE7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGNvbnN0IG5ld1ZhbHVlID0gTWF0aC5tYXgoaG9yaXpvbnRhbExlbiwgdmVydGljYWxMZW4sIGV4dGVuZGVkU2VxU2NvcmUpO1xuICAgICAgICAgICAgICAgIGlmIChuZXdWYWx1ZSA9PT0gZXh0ZW5kZWRTZXFTY29yZSkge1xuICAgICAgICAgICAgICAgICAgICAvLyBQcmVmZXIgZGlhZ29uYWxzXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHByZXZMZW4gPSBzMSA+IDAgJiYgczIgPiAwID8gbGVuZ3Rocy5nZXQoczEgLSAxLCBzMiAtIDEpIDogMDtcbiAgICAgICAgICAgICAgICAgICAgbGVuZ3Rocy5zZXQoczEsIHMyLCBwcmV2TGVuICsgMSk7XG4gICAgICAgICAgICAgICAgICAgIGRpcmVjdGlvbnMuc2V0KHMxLCBzMiwgMyk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2UgaWYgKG5ld1ZhbHVlID09PSBob3Jpem9udGFsTGVuKSB7XG4gICAgICAgICAgICAgICAgICAgIGxlbmd0aHMuc2V0KHMxLCBzMiwgMCk7XG4gICAgICAgICAgICAgICAgICAgIGRpcmVjdGlvbnMuc2V0KHMxLCBzMiwgMSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2UgaWYgKG5ld1ZhbHVlID09PSB2ZXJ0aWNhbExlbikge1xuICAgICAgICAgICAgICAgICAgICBsZW5ndGhzLnNldChzMSwgczIsIDApO1xuICAgICAgICAgICAgICAgICAgICBkaXJlY3Rpb25zLnNldChzMSwgczIsIDIpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBsY3NMZW5ndGhzLnNldChzMSwgczIsIG5ld1ZhbHVlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICAvLyA9PT09IEJhY2t0cmFja2luZyA9PT09XG4gICAgICAgIGNvbnN0IHJlc3VsdCA9IFtdO1xuICAgICAgICBsZXQgbGFzdEFsaWduaW5nUG9zUzEgPSBzZXF1ZW5jZTEubGVuZ3RoO1xuICAgICAgICBsZXQgbGFzdEFsaWduaW5nUG9zUzIgPSBzZXF1ZW5jZTIubGVuZ3RoO1xuICAgICAgICBmdW5jdGlvbiByZXBvcnREZWNyZWFzaW5nQWxpZ25pbmdQb3NpdGlvbnMoczEsIHMyKSB7XG4gICAgICAgICAgICBpZiAoczEgKyAxICE9PSBsYXN0QWxpZ25pbmdQb3NTMSB8fCBzMiArIDEgIT09IGxhc3RBbGlnbmluZ1Bvc1MyKSB7XG4gICAgICAgICAgICAgICAgcmVzdWx0LnB1c2gobmV3IFNlcXVlbmNlRGlmZihuZXcgT2Zmc2V0UmFuZ2UoczEgKyAxLCBsYXN0QWxpZ25pbmdQb3NTMSksIG5ldyBPZmZzZXRSYW5nZShzMiArIDEsIGxhc3RBbGlnbmluZ1Bvc1MyKSkpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgbGFzdEFsaWduaW5nUG9zUzEgPSBzMTtcbiAgICAgICAgICAgIGxhc3RBbGlnbmluZ1Bvc1MyID0gczI7XG4gICAgICAgIH1cbiAgICAgICAgbGV0IHMxID0gc2VxdWVuY2UxLmxlbmd0aCAtIDE7XG4gICAgICAgIGxldCBzMiA9IHNlcXVlbmNlMi5sZW5ndGggLSAxO1xuICAgICAgICB3aGlsZSAoczEgPj0gMCAmJiBzMiA+PSAwKSB7XG4gICAgICAgICAgICBpZiAoZGlyZWN0aW9ucy5nZXQoczEsIHMyKSA9PT0gMykge1xuICAgICAgICAgICAgICAgIHJlcG9ydERlY3JlYXNpbmdBbGlnbmluZ1Bvc2l0aW9ucyhzMSwgczIpO1xuICAgICAgICAgICAgICAgIHMxLS07XG4gICAgICAgICAgICAgICAgczItLTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIGlmIChkaXJlY3Rpb25zLmdldChzMSwgczIpID09PSAxKSB7XG4gICAgICAgICAgICAgICAgICAgIHMxLS07XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBzMi0tO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXBvcnREZWNyZWFzaW5nQWxpZ25pbmdQb3NpdGlvbnMoLTEsIC0xKTtcbiAgICAgICAgcmVzdWx0LnJldmVyc2UoKTtcbiAgICAgICAgcmV0dXJuIG5ldyBEaWZmQWxnb3JpdGhtUmVzdWx0KHJlc3VsdCwgZmFsc2UpO1xuICAgIH1cbn1cbiIsICIvKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICogIENvcHlyaWdodCAoYykgTWljcm9zb2Z0IENvcnBvcmF0aW9uLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICogIExpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgTGljZW5zZS4gU2VlIExpY2Vuc2UudHh0IGluIHRoZSBwcm9qZWN0IHJvb3QgZm9yIGxpY2Vuc2UgaW5mb3JtYXRpb24uXG4gKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKi9cbmltcG9ydCB7IE9mZnNldFJhbmdlIH0gZnJvbSAnLi4vLi4vLi4vY29yZS9vZmZzZXRSYW5nZS5qcyc7XG5pbXBvcnQgeyBEaWZmQWxnb3JpdGhtUmVzdWx0LCBJbmZpbml0ZVRpbWVvdXQsIFNlcXVlbmNlRGlmZiB9IGZyb20gJy4vZGlmZkFsZ29yaXRobS5qcyc7XG4vKipcbiAqIEFuIE8oTkQpIGRpZmYgYWxnb3JpdGhtIHRoYXQgaGFzIGEgcXVhZHJhdGljIHNwYWNlIHdvcnN0LWNhc2UgY29tcGxleGl0eS5cbiovXG5leHBvcnQgY2xhc3MgTXllcnNEaWZmQWxnb3JpdGhtIHtcbiAgICBjb21wdXRlKHNlcTEsIHNlcTIsIHRpbWVvdXQgPSBJbmZpbml0ZVRpbWVvdXQuaW5zdGFuY2UpIHtcbiAgICAgICAgLy8gVGhlc2UgYXJlIGNvbW1vbiBzcGVjaWFsIGNhc2VzLlxuICAgICAgICAvLyBUaGUgZWFybHkgcmV0dXJuIGltcHJvdmVzIHBlcmZvcm1hbmNlIGRyYW1hdGljYWxseS5cbiAgICAgICAgaWYgKHNlcTEubGVuZ3RoID09PSAwIHx8IHNlcTIubGVuZ3RoID09PSAwKSB7XG4gICAgICAgICAgICByZXR1cm4gRGlmZkFsZ29yaXRobVJlc3VsdC50cml2aWFsKHNlcTEsIHNlcTIpO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IHNlcVggPSBzZXExOyAvLyBUZXh0IG9uIHRoZSB4IGF4aXNcbiAgICAgICAgY29uc3Qgc2VxWSA9IHNlcTI7IC8vIFRleHQgb24gdGhlIHkgYXhpc1xuICAgICAgICBmdW5jdGlvbiBnZXRYQWZ0ZXJTbmFrZSh4LCB5KSB7XG4gICAgICAgICAgICB3aGlsZSAoeCA8IHNlcVgubGVuZ3RoICYmIHkgPCBzZXFZLmxlbmd0aCAmJiBzZXFYLmdldEVsZW1lbnQoeCkgPT09IHNlcVkuZ2V0RWxlbWVudCh5KSkge1xuICAgICAgICAgICAgICAgIHgrKztcbiAgICAgICAgICAgICAgICB5Kys7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4geDtcbiAgICAgICAgfVxuICAgICAgICBsZXQgZCA9IDA7XG4gICAgICAgIC8vIFZba106IFggdmFsdWUgb2YgbG9uZ2VzdCBkLWxpbmUgdGhhdCBlbmRzIGluIGRpYWdvbmFsIGsuXG4gICAgICAgIC8vIGQtbGluZTogcGF0aCBmcm9tICgwLDApIHRvICh4LHkpIHRoYXQgdXNlcyBleGFjdGx5IGQgbm9uLWRpYWdvbmFscy5cbiAgICAgICAgLy8gZGlhZ29uYWwgazogU2V0IG9mIHBvaW50cyAoeCx5KSB3aXRoIHgteSA9IGsuXG4gICAgICAgIC8vIGs9MSAtPiAoMSwwKSwoMiwxKVxuICAgICAgICBjb25zdCBWID0gbmV3IEZhc3RJbnQzMkFycmF5KCk7XG4gICAgICAgIFYuc2V0KDAsIGdldFhBZnRlclNuYWtlKDAsIDApKTtcbiAgICAgICAgY29uc3QgcGF0aHMgPSBuZXcgRmFzdEFycmF5TmVnYXRpdmVJbmRpY2VzKCk7XG4gICAgICAgIHBhdGhzLnNldCgwLCBWLmdldCgwKSA9PT0gMCA/IG51bGwgOiBuZXcgU25ha2VQYXRoKG51bGwsIDAsIDAsIFYuZ2V0KDApKSk7XG4gICAgICAgIGxldCBrID0gMDtcbiAgICAgICAgbG9vcDogd2hpbGUgKHRydWUpIHtcbiAgICAgICAgICAgIGQrKztcbiAgICAgICAgICAgIGlmICghdGltZW91dC5pc1ZhbGlkKCkpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gRGlmZkFsZ29yaXRobVJlc3VsdC50cml2aWFsVGltZWRPdXQoc2VxWCwgc2VxWSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAvLyBUaGUgcGFwZXIgaGFzIGBmb3IgKGsgPSAtZDsgayA8PSBkOyBrICs9IDIpYCwgYnV0IHdlIGNhbiBpZ25vcmUgZGlhZ29uYWxzIHRoYXQgY2Fubm90IGluZmx1ZW5jZSB0aGUgcmVzdWx0LlxuICAgICAgICAgICAgY29uc3QgbG93ZXJCb3VuZCA9IC1NYXRoLm1pbihkLCBzZXFZLmxlbmd0aCArIChkICUgMikpO1xuICAgICAgICAgICAgY29uc3QgdXBwZXJCb3VuZCA9IE1hdGgubWluKGQsIHNlcVgubGVuZ3RoICsgKGQgJSAyKSk7XG4gICAgICAgICAgICBmb3IgKGsgPSBsb3dlckJvdW5kOyBrIDw9IHVwcGVyQm91bmQ7IGsgKz0gMikge1xuICAgICAgICAgICAgICAgIGxldCBzdGVwID0gMDtcbiAgICAgICAgICAgICAgICAvLyBXZSBjYW4gdXNlIHRoZSBYIHZhbHVlcyBvZiAoZC0xKS1saW5lcyB0byBjb21wdXRlIFggdmFsdWUgb2YgdGhlIGxvbmdlc3QgZC1saW5lcy5cbiAgICAgICAgICAgICAgICBjb25zdCBtYXhYb2ZETGluZVRvcCA9IGsgPT09IHVwcGVyQm91bmQgPyAtMSA6IFYuZ2V0KGsgKyAxKTsgLy8gV2UgdGFrZSBhIHZlcnRpY2FsIG5vbi1kaWFnb25hbCAoYWRkIGEgc3ltYm9sIGluIHNlcVgpXG4gICAgICAgICAgICAgICAgY29uc3QgbWF4WG9mRExpbmVMZWZ0ID0gayA9PT0gbG93ZXJCb3VuZCA/IC0xIDogVi5nZXQoayAtIDEpICsgMTsgLy8gV2UgdGFrZSBhIGhvcml6b250YWwgbm9uLWRpYWdvbmFsICgrMSB4KSAoZGVsZXRlIGEgc3ltYm9sIGluIHNlcVgpXG4gICAgICAgICAgICAgICAgc3RlcCsrO1xuICAgICAgICAgICAgICAgIGNvbnN0IHggPSBNYXRoLm1pbihNYXRoLm1heChtYXhYb2ZETGluZVRvcCwgbWF4WG9mRExpbmVMZWZ0KSwgc2VxWC5sZW5ndGgpO1xuICAgICAgICAgICAgICAgIGNvbnN0IHkgPSB4IC0gaztcbiAgICAgICAgICAgICAgICBzdGVwKys7XG4gICAgICAgICAgICAgICAgaWYgKHggPiBzZXFYLmxlbmd0aCB8fCB5ID4gc2VxWS5sZW5ndGgpIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gVGhpcyBkaWFnb25hbCBpcyBpcnJlbGV2YW50IGZvciB0aGUgcmVzdWx0LlxuICAgICAgICAgICAgICAgICAgICAvLyBUT0RPOiBEb24ndCBwYXkgdGhlIGNvc3QgZm9yIHRoaXMgaW4gdGhlIG5leHQgaXRlcmF0aW9uLlxuICAgICAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgY29uc3QgbmV3TWF4WCA9IGdldFhBZnRlclNuYWtlKHgsIHkpO1xuICAgICAgICAgICAgICAgIFYuc2V0KGssIG5ld01heFgpO1xuICAgICAgICAgICAgICAgIGNvbnN0IGxhc3RQYXRoID0geCA9PT0gbWF4WG9mRExpbmVUb3AgPyBwYXRocy5nZXQoayArIDEpIDogcGF0aHMuZ2V0KGsgLSAxKTtcbiAgICAgICAgICAgICAgICBwYXRocy5zZXQoaywgbmV3TWF4WCAhPT0geCA/IG5ldyBTbmFrZVBhdGgobGFzdFBhdGgsIHgsIHksIG5ld01heFggLSB4KSA6IGxhc3RQYXRoKTtcbiAgICAgICAgICAgICAgICBpZiAoVi5nZXQoaykgPT09IHNlcVgubGVuZ3RoICYmIFYuZ2V0KGspIC0gayA9PT0gc2VxWS5sZW5ndGgpIHtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWsgbG9vcDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgbGV0IHBhdGggPSBwYXRocy5nZXQoayk7XG4gICAgICAgIGNvbnN0IHJlc3VsdCA9IFtdO1xuICAgICAgICBsZXQgbGFzdEFsaWduaW5nUG9zUzEgPSBzZXFYLmxlbmd0aDtcbiAgICAgICAgbGV0IGxhc3RBbGlnbmluZ1Bvc1MyID0gc2VxWS5sZW5ndGg7XG4gICAgICAgIHdoaWxlICh0cnVlKSB7XG4gICAgICAgICAgICBjb25zdCBlbmRYID0gcGF0aCA/IHBhdGgueCArIHBhdGgubGVuZ3RoIDogMDtcbiAgICAgICAgICAgIGNvbnN0IGVuZFkgPSBwYXRoID8gcGF0aC55ICsgcGF0aC5sZW5ndGggOiAwO1xuICAgICAgICAgICAgaWYgKGVuZFggIT09IGxhc3RBbGlnbmluZ1Bvc1MxIHx8IGVuZFkgIT09IGxhc3RBbGlnbmluZ1Bvc1MyKSB7XG4gICAgICAgICAgICAgICAgcmVzdWx0LnB1c2gobmV3IFNlcXVlbmNlRGlmZihuZXcgT2Zmc2V0UmFuZ2UoZW5kWCwgbGFzdEFsaWduaW5nUG9zUzEpLCBuZXcgT2Zmc2V0UmFuZ2UoZW5kWSwgbGFzdEFsaWduaW5nUG9zUzIpKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoIXBhdGgpIHtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGxhc3RBbGlnbmluZ1Bvc1MxID0gcGF0aC54O1xuICAgICAgICAgICAgbGFzdEFsaWduaW5nUG9zUzIgPSBwYXRoLnk7XG4gICAgICAgICAgICBwYXRoID0gcGF0aC5wcmV2O1xuICAgICAgICB9XG4gICAgICAgIHJlc3VsdC5yZXZlcnNlKCk7XG4gICAgICAgIHJldHVybiBuZXcgRGlmZkFsZ29yaXRobVJlc3VsdChyZXN1bHQsIGZhbHNlKTtcbiAgICB9XG59XG5jbGFzcyBTbmFrZVBhdGgge1xuICAgIGNvbnN0cnVjdG9yKHByZXYsIHgsIHksIGxlbmd0aCkge1xuICAgICAgICB0aGlzLnByZXYgPSBwcmV2O1xuICAgICAgICB0aGlzLnggPSB4O1xuICAgICAgICB0aGlzLnkgPSB5O1xuICAgICAgICB0aGlzLmxlbmd0aCA9IGxlbmd0aDtcbiAgICB9XG59XG4vKipcbiAqIEFuIGFycmF5IHRoYXQgc3VwcG9ydHMgZmFzdCBuZWdhdGl2ZSBpbmRpY2VzLlxuKi9cbmNsYXNzIEZhc3RJbnQzMkFycmF5IHtcbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgdGhpcy5wb3NpdGl2ZUFyciA9IG5ldyBJbnQzMkFycmF5KDEwKTtcbiAgICAgICAgdGhpcy5uZWdhdGl2ZUFyciA9IG5ldyBJbnQzMkFycmF5KDEwKTtcbiAgICB9XG4gICAgZ2V0KGlkeCkge1xuICAgICAgICBpZiAoaWR4IDwgMCkge1xuICAgICAgICAgICAgaWR4ID0gLWlkeCAtIDE7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5uZWdhdGl2ZUFycltpZHhdO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMucG9zaXRpdmVBcnJbaWR4XTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBzZXQoaWR4LCB2YWx1ZSkge1xuICAgICAgICBpZiAoaWR4IDwgMCkge1xuICAgICAgICAgICAgaWR4ID0gLWlkeCAtIDE7XG4gICAgICAgICAgICBpZiAoaWR4ID49IHRoaXMubmVnYXRpdmVBcnIubGVuZ3RoKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgYXJyID0gdGhpcy5uZWdhdGl2ZUFycjtcbiAgICAgICAgICAgICAgICB0aGlzLm5lZ2F0aXZlQXJyID0gbmV3IEludDMyQXJyYXkoYXJyLmxlbmd0aCAqIDIpO1xuICAgICAgICAgICAgICAgIHRoaXMubmVnYXRpdmVBcnIuc2V0KGFycik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0aGlzLm5lZ2F0aXZlQXJyW2lkeF0gPSB2YWx1ZTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIGlmIChpZHggPj0gdGhpcy5wb3NpdGl2ZUFyci5sZW5ndGgpIHtcbiAgICAgICAgICAgICAgICBjb25zdCBhcnIgPSB0aGlzLnBvc2l0aXZlQXJyO1xuICAgICAgICAgICAgICAgIHRoaXMucG9zaXRpdmVBcnIgPSBuZXcgSW50MzJBcnJheShhcnIubGVuZ3RoICogMik7XG4gICAgICAgICAgICAgICAgdGhpcy5wb3NpdGl2ZUFyci5zZXQoYXJyKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRoaXMucG9zaXRpdmVBcnJbaWR4XSA9IHZhbHVlO1xuICAgICAgICB9XG4gICAgfVxufVxuLyoqXG4gKiBBbiBhcnJheSB0aGF0IHN1cHBvcnRzIGZhc3QgbmVnYXRpdmUgaW5kaWNlcy5cbiovXG5jbGFzcyBGYXN0QXJyYXlOZWdhdGl2ZUluZGljZXMge1xuICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICB0aGlzLnBvc2l0aXZlQXJyID0gW107XG4gICAgICAgIHRoaXMubmVnYXRpdmVBcnIgPSBbXTtcbiAgICB9XG4gICAgZ2V0KGlkeCkge1xuICAgICAgICBpZiAoaWR4IDwgMCkge1xuICAgICAgICAgICAgaWR4ID0gLWlkeCAtIDE7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5uZWdhdGl2ZUFycltpZHhdO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMucG9zaXRpdmVBcnJbaWR4XTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBzZXQoaWR4LCB2YWx1ZSkge1xuICAgICAgICBpZiAoaWR4IDwgMCkge1xuICAgICAgICAgICAgaWR4ID0gLWlkeCAtIDE7XG4gICAgICAgICAgICB0aGlzLm5lZ2F0aXZlQXJyW2lkeF0gPSB2YWx1ZTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMucG9zaXRpdmVBcnJbaWR4XSA9IHZhbHVlO1xuICAgICAgICB9XG4gICAgfVxufVxuIiwgIi8qLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gKiAgQ29weXJpZ2h0IChjKSBNaWNyb3NvZnQgQ29ycG9yYXRpb24uIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKiAgTGljZW5zZWQgdW5kZXIgdGhlIE1JVCBMaWNlbnNlLiBTZWUgTGljZW5zZS50eHQgaW4gdGhlIHByb2plY3Qgcm9vdCBmb3IgbGljZW5zZSBpbmZvcm1hdGlvbi5cbiAqLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qL1xuaW1wb3J0IHsgZmluZExhc3RJZHhNb25vdG9ub3VzLCBmaW5kTGFzdE1vbm90b25vdXMsIGZpbmRGaXJzdE1vbm90b25vdXMgfSBmcm9tICcuLi8uLi8uLi8uLi9iYXNlL2NvbW1vbi9hcnJheXNGaW5kLmpzJztcbmltcG9ydCB7IE9mZnNldFJhbmdlIH0gZnJvbSAnLi4vLi4vY29yZS9vZmZzZXRSYW5nZS5qcyc7XG5pbXBvcnQgeyBQb3NpdGlvbiB9IGZyb20gJy4uLy4uL2NvcmUvcG9zaXRpb24uanMnO1xuaW1wb3J0IHsgUmFuZ2UgfSBmcm9tICcuLi8uLi9jb3JlL3JhbmdlLmpzJztcbmltcG9ydCB7IGlzU3BhY2UgfSBmcm9tICcuL3V0aWxzLmpzJztcbmV4cG9ydCBjbGFzcyBMaW5lc1NsaWNlQ2hhclNlcXVlbmNlIHtcbiAgICBjb25zdHJ1Y3RvcihsaW5lcywgbGluZVJhbmdlLCBjb25zaWRlcldoaXRlc3BhY2VDaGFuZ2VzKSB7XG4gICAgICAgIC8vIFRoaXMgc2xpY2UgaGFzIHRvIGhhdmUgbGluZVJhbmdlLmxlbmd0aCBtYW55IFxcbiEgKG90aGVyd2lzZSBkaWZmaW5nIGFnYWluc3QgYW4gZW1wdHkgc2xpY2Ugd2lsbCBiZSBwcm9ibGVtYXRpYylcbiAgICAgICAgLy8gKFVubGVzcyBpdCBjb3ZlcnMgdGhlIGVudGlyZSBkb2N1bWVudCwgaW4gdGhhdCBjYXNlIHRoZSBvdGhlciBzbGljZSBhbHNvIGhhcyB0byBjb3ZlciB0aGUgZW50aXJlIGRvY3VtZW50IGFuZHMgaXQncyBva2F5KVxuICAgICAgICB0aGlzLmxpbmVzID0gbGluZXM7XG4gICAgICAgIHRoaXMuY29uc2lkZXJXaGl0ZXNwYWNlQ2hhbmdlcyA9IGNvbnNpZGVyV2hpdGVzcGFjZUNoYW5nZXM7XG4gICAgICAgIHRoaXMuZWxlbWVudHMgPSBbXTtcbiAgICAgICAgdGhpcy5maXJzdENoYXJPZmZzZXRCeUxpbmUgPSBbXTtcbiAgICAgICAgLy8gVG8gYWNjb3VudCBmb3IgdHJpbW1pbmdcbiAgICAgICAgdGhpcy5hZGRpdGlvbmFsT2Zmc2V0QnlMaW5lID0gW107XG4gICAgICAgIC8vIElmIHRoZSBzbGljZSBjb3ZlcnMgdGhlIGVuZCwgYnV0IGRvZXMgbm90IHN0YXJ0IGF0IHRoZSBiZWdpbm5pbmcsIHdlIGluY2x1ZGUganVzdCB0aGUgXFxuIG9mIHRoZSBwcmV2aW91cyBsaW5lLlxuICAgICAgICBsZXQgdHJpbUZpcnN0TGluZUZ1bGx5ID0gZmFsc2U7XG4gICAgICAgIGlmIChsaW5lUmFuZ2Uuc3RhcnQgPiAwICYmIGxpbmVSYW5nZS5lbmRFeGNsdXNpdmUgPj0gbGluZXMubGVuZ3RoKSB7XG4gICAgICAgICAgICBsaW5lUmFuZ2UgPSBuZXcgT2Zmc2V0UmFuZ2UobGluZVJhbmdlLnN0YXJ0IC0gMSwgbGluZVJhbmdlLmVuZEV4Y2x1c2l2ZSk7XG4gICAgICAgICAgICB0cmltRmlyc3RMaW5lRnVsbHkgPSB0cnVlO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMubGluZVJhbmdlID0gbGluZVJhbmdlO1xuICAgICAgICB0aGlzLmZpcnN0Q2hhck9mZnNldEJ5TGluZVswXSA9IDA7XG4gICAgICAgIGZvciAobGV0IGkgPSB0aGlzLmxpbmVSYW5nZS5zdGFydDsgaSA8IHRoaXMubGluZVJhbmdlLmVuZEV4Y2x1c2l2ZTsgaSsrKSB7XG4gICAgICAgICAgICBsZXQgbGluZSA9IGxpbmVzW2ldO1xuICAgICAgICAgICAgbGV0IG9mZnNldCA9IDA7XG4gICAgICAgICAgICBpZiAodHJpbUZpcnN0TGluZUZ1bGx5KSB7XG4gICAgICAgICAgICAgICAgb2Zmc2V0ID0gbGluZS5sZW5ndGg7XG4gICAgICAgICAgICAgICAgbGluZSA9ICcnO1xuICAgICAgICAgICAgICAgIHRyaW1GaXJzdExpbmVGdWxseSA9IGZhbHNlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAoIWNvbnNpZGVyV2hpdGVzcGFjZUNoYW5nZXMpIHtcbiAgICAgICAgICAgICAgICBjb25zdCB0cmltbWVkU3RhcnRMaW5lID0gbGluZS50cmltU3RhcnQoKTtcbiAgICAgICAgICAgICAgICBvZmZzZXQgPSBsaW5lLmxlbmd0aCAtIHRyaW1tZWRTdGFydExpbmUubGVuZ3RoO1xuICAgICAgICAgICAgICAgIGxpbmUgPSB0cmltbWVkU3RhcnRMaW5lLnRyaW1FbmQoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRoaXMuYWRkaXRpb25hbE9mZnNldEJ5TGluZS5wdXNoKG9mZnNldCk7XG4gICAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGxpbmUubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgICAgICB0aGlzLmVsZW1lbnRzLnB1c2gobGluZS5jaGFyQ29kZUF0KGkpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8vIERvbid0IGFkZCBhbiBcXG4gdGhhdCBkb2VzIG5vdCBleGlzdCBpbiB0aGUgZG9jdW1lbnQuXG4gICAgICAgICAgICBpZiAoaSA8IGxpbmVzLmxlbmd0aCAtIDEpIHtcbiAgICAgICAgICAgICAgICB0aGlzLmVsZW1lbnRzLnB1c2goJ1xcbicuY2hhckNvZGVBdCgwKSk7XG4gICAgICAgICAgICAgICAgdGhpcy5maXJzdENoYXJPZmZzZXRCeUxpbmVbaSAtIHRoaXMubGluZVJhbmdlLnN0YXJ0ICsgMV0gPSB0aGlzLmVsZW1lbnRzLmxlbmd0aDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICAvLyBUbyBhY2NvdW50IGZvciB0aGUgbGFzdCBsaW5lXG4gICAgICAgIHRoaXMuYWRkaXRpb25hbE9mZnNldEJ5TGluZS5wdXNoKDApO1xuICAgIH1cbiAgICB0b1N0cmluZygpIHtcbiAgICAgICAgcmV0dXJuIGBTbGljZTogXCIke3RoaXMudGV4dH1cImA7XG4gICAgfVxuICAgIGdldCB0ZXh0KCkge1xuICAgICAgICByZXR1cm4gdGhpcy5nZXRUZXh0KG5ldyBPZmZzZXRSYW5nZSgwLCB0aGlzLmxlbmd0aCkpO1xuICAgIH1cbiAgICBnZXRUZXh0KHJhbmdlKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmVsZW1lbnRzLnNsaWNlKHJhbmdlLnN0YXJ0LCByYW5nZS5lbmRFeGNsdXNpdmUpLm1hcChlID0+IFN0cmluZy5mcm9tQ2hhckNvZGUoZSkpLmpvaW4oJycpO1xuICAgIH1cbiAgICBnZXRFbGVtZW50KG9mZnNldCkge1xuICAgICAgICByZXR1cm4gdGhpcy5lbGVtZW50c1tvZmZzZXRdO1xuICAgIH1cbiAgICBnZXQgbGVuZ3RoKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5lbGVtZW50cy5sZW5ndGg7XG4gICAgfVxuICAgIGdldEJvdW5kYXJ5U2NvcmUobGVuZ3RoKSB7XG4gICAgICAgIC8vICAgYSAgIGIgICBjICAgLCAgICAgICAgICAgZCAgIGUgICBmXG4gICAgICAgIC8vIDExICAwICAgMCAgIDEyICAxNSAgNiAgIDEzICAwICAgMCAgIDExXG4gICAgICAgIGNvbnN0IHByZXZDYXRlZ29yeSA9IGdldENhdGVnb3J5KGxlbmd0aCA+IDAgPyB0aGlzLmVsZW1lbnRzW2xlbmd0aCAtIDFdIDogLTEpO1xuICAgICAgICBjb25zdCBuZXh0Q2F0ZWdvcnkgPSBnZXRDYXRlZ29yeShsZW5ndGggPCB0aGlzLmVsZW1lbnRzLmxlbmd0aCA/IHRoaXMuZWxlbWVudHNbbGVuZ3RoXSA6IC0xKTtcbiAgICAgICAgaWYgKHByZXZDYXRlZ29yeSA9PT0gNyAvKiBDaGFyQm91bmRhcnlDYXRlZ29yeS5MaW5lQnJlYWtDUiAqLyAmJiBuZXh0Q2F0ZWdvcnkgPT09IDggLyogQ2hhckJvdW5kYXJ5Q2F0ZWdvcnkuTGluZUJyZWFrTEYgKi8pIHtcbiAgICAgICAgICAgIC8vIGRvbid0IGJyZWFrIGJldHdlZW4gXFxyIGFuZCBcXG5cbiAgICAgICAgICAgIHJldHVybiAwO1xuICAgICAgICB9XG4gICAgICAgIGlmIChwcmV2Q2F0ZWdvcnkgPT09IDggLyogQ2hhckJvdW5kYXJ5Q2F0ZWdvcnkuTGluZUJyZWFrTEYgKi8pIHtcbiAgICAgICAgICAgIC8vIHByZWZlciB0aGUgbGluZWJyZWFrIGJlZm9yZSB0aGUgY2hhbmdlXG4gICAgICAgICAgICByZXR1cm4gMTUwO1xuICAgICAgICB9XG4gICAgICAgIGxldCBzY29yZSA9IDA7XG4gICAgICAgIGlmIChwcmV2Q2F0ZWdvcnkgIT09IG5leHRDYXRlZ29yeSkge1xuICAgICAgICAgICAgc2NvcmUgKz0gMTA7XG4gICAgICAgICAgICBpZiAocHJldkNhdGVnb3J5ID09PSAwIC8qIENoYXJCb3VuZGFyeUNhdGVnb3J5LldvcmRMb3dlciAqLyAmJiBuZXh0Q2F0ZWdvcnkgPT09IDEgLyogQ2hhckJvdW5kYXJ5Q2F0ZWdvcnkuV29yZFVwcGVyICovKSB7XG4gICAgICAgICAgICAgICAgc2NvcmUgKz0gMTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBzY29yZSArPSBnZXRDYXRlZ29yeUJvdW5kYXJ5U2NvcmUocHJldkNhdGVnb3J5KTtcbiAgICAgICAgc2NvcmUgKz0gZ2V0Q2F0ZWdvcnlCb3VuZGFyeVNjb3JlKG5leHRDYXRlZ29yeSk7XG4gICAgICAgIHJldHVybiBzY29yZTtcbiAgICB9XG4gICAgdHJhbnNsYXRlT2Zmc2V0KG9mZnNldCkge1xuICAgICAgICAvLyBmaW5kIHNtYWxsZXN0IGksIHNvIHRoYXQgbGluZUJyZWFrT2Zmc2V0c1tpXSA8PSBvZmZzZXQgdXNpbmcgYmluYXJ5IHNlYXJjaFxuICAgICAgICBpZiAodGhpcy5saW5lUmFuZ2UuaXNFbXB0eSkge1xuICAgICAgICAgICAgcmV0dXJuIG5ldyBQb3NpdGlvbih0aGlzLmxpbmVSYW5nZS5zdGFydCArIDEsIDEpO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IGkgPSBmaW5kTGFzdElkeE1vbm90b25vdXModGhpcy5maXJzdENoYXJPZmZzZXRCeUxpbmUsICh2YWx1ZSkgPT4gdmFsdWUgPD0gb2Zmc2V0KTtcbiAgICAgICAgcmV0dXJuIG5ldyBQb3NpdGlvbih0aGlzLmxpbmVSYW5nZS5zdGFydCArIGkgKyAxLCBvZmZzZXQgLSB0aGlzLmZpcnN0Q2hhck9mZnNldEJ5TGluZVtpXSArIHRoaXMuYWRkaXRpb25hbE9mZnNldEJ5TGluZVtpXSArIDEpO1xuICAgIH1cbiAgICB0cmFuc2xhdGVSYW5nZShyYW5nZSkge1xuICAgICAgICByZXR1cm4gUmFuZ2UuZnJvbVBvc2l0aW9ucyh0aGlzLnRyYW5zbGF0ZU9mZnNldChyYW5nZS5zdGFydCksIHRoaXMudHJhbnNsYXRlT2Zmc2V0KHJhbmdlLmVuZEV4Y2x1c2l2ZSkpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBGaW5kcyB0aGUgd29yZCB0aGF0IGNvbnRhaW5zIHRoZSBjaGFyYWN0ZXIgYXQgdGhlIGdpdmVuIG9mZnNldFxuICAgICAqL1xuICAgIGZpbmRXb3JkQ29udGFpbmluZyhvZmZzZXQpIHtcbiAgICAgICAgaWYgKG9mZnNldCA8IDAgfHwgb2Zmc2V0ID49IHRoaXMuZWxlbWVudHMubGVuZ3RoKSB7XG4gICAgICAgICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICAgICAgICB9XG4gICAgICAgIGlmICghaXNXb3JkQ2hhcih0aGlzLmVsZW1lbnRzW29mZnNldF0pKSB7XG4gICAgICAgICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICAgICAgICB9XG4gICAgICAgIC8vIGZpbmQgc3RhcnRcbiAgICAgICAgbGV0IHN0YXJ0ID0gb2Zmc2V0O1xuICAgICAgICB3aGlsZSAoc3RhcnQgPiAwICYmIGlzV29yZENoYXIodGhpcy5lbGVtZW50c1tzdGFydCAtIDFdKSkge1xuICAgICAgICAgICAgc3RhcnQtLTtcbiAgICAgICAgfVxuICAgICAgICAvLyBmaW5kIGVuZFxuICAgICAgICBsZXQgZW5kID0gb2Zmc2V0O1xuICAgICAgICB3aGlsZSAoZW5kIDwgdGhpcy5lbGVtZW50cy5sZW5ndGggJiYgaXNXb3JkQ2hhcih0aGlzLmVsZW1lbnRzW2VuZF0pKSB7XG4gICAgICAgICAgICBlbmQrKztcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbmV3IE9mZnNldFJhbmdlKHN0YXJ0LCBlbmQpO1xuICAgIH1cbiAgICBjb3VudExpbmVzSW4ocmFuZ2UpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMudHJhbnNsYXRlT2Zmc2V0KHJhbmdlLmVuZEV4Y2x1c2l2ZSkubGluZU51bWJlciAtIHRoaXMudHJhbnNsYXRlT2Zmc2V0KHJhbmdlLnN0YXJ0KS5saW5lTnVtYmVyO1xuICAgIH1cbiAgICBpc1N0cm9uZ2x5RXF1YWwob2Zmc2V0MSwgb2Zmc2V0Mikge1xuICAgICAgICByZXR1cm4gdGhpcy5lbGVtZW50c1tvZmZzZXQxXSA9PT0gdGhpcy5lbGVtZW50c1tvZmZzZXQyXTtcbiAgICB9XG4gICAgZXh0ZW5kVG9GdWxsTGluZXMocmFuZ2UpIHtcbiAgICAgICAgdmFyIF9hLCBfYjtcbiAgICAgICAgY29uc3Qgc3RhcnQgPSAoX2EgPSBmaW5kTGFzdE1vbm90b25vdXModGhpcy5maXJzdENoYXJPZmZzZXRCeUxpbmUsIHggPT4geCA8PSByYW5nZS5zdGFydCkpICE9PSBudWxsICYmIF9hICE9PSB2b2lkIDAgPyBfYSA6IDA7XG4gICAgICAgIGNvbnN0IGVuZCA9IChfYiA9IGZpbmRGaXJzdE1vbm90b25vdXModGhpcy5maXJzdENoYXJPZmZzZXRCeUxpbmUsIHggPT4gcmFuZ2UuZW5kRXhjbHVzaXZlIDw9IHgpKSAhPT0gbnVsbCAmJiBfYiAhPT0gdm9pZCAwID8gX2IgOiB0aGlzLmVsZW1lbnRzLmxlbmd0aDtcbiAgICAgICAgcmV0dXJuIG5ldyBPZmZzZXRSYW5nZShzdGFydCwgZW5kKTtcbiAgICB9XG59XG5mdW5jdGlvbiBpc1dvcmRDaGFyKGNoYXJDb2RlKSB7XG4gICAgcmV0dXJuIGNoYXJDb2RlID49IDk3IC8qIENoYXJDb2RlLmEgKi8gJiYgY2hhckNvZGUgPD0gMTIyIC8qIENoYXJDb2RlLnogKi9cbiAgICAgICAgfHwgY2hhckNvZGUgPj0gNjUgLyogQ2hhckNvZGUuQSAqLyAmJiBjaGFyQ29kZSA8PSA5MCAvKiBDaGFyQ29kZS5aICovXG4gICAgICAgIHx8IGNoYXJDb2RlID49IDQ4IC8qIENoYXJDb2RlLkRpZ2l0MCAqLyAmJiBjaGFyQ29kZSA8PSA1NyAvKiBDaGFyQ29kZS5EaWdpdDkgKi87XG59XG5jb25zdCBzY29yZSA9IHtcbiAgICBbMCAvKiBDaGFyQm91bmRhcnlDYXRlZ29yeS5Xb3JkTG93ZXIgKi9dOiAwLFxuICAgIFsxIC8qIENoYXJCb3VuZGFyeUNhdGVnb3J5LldvcmRVcHBlciAqL106IDAsXG4gICAgWzIgLyogQ2hhckJvdW5kYXJ5Q2F0ZWdvcnkuV29yZE51bWJlciAqL106IDAsXG4gICAgWzMgLyogQ2hhckJvdW5kYXJ5Q2F0ZWdvcnkuRW5kICovXTogMTAsXG4gICAgWzQgLyogQ2hhckJvdW5kYXJ5Q2F0ZWdvcnkuT3RoZXIgKi9dOiAyLFxuICAgIFs1IC8qIENoYXJCb3VuZGFyeUNhdGVnb3J5LlNlcGFyYXRvciAqL106IDMwLFxuICAgIFs2IC8qIENoYXJCb3VuZGFyeUNhdGVnb3J5LlNwYWNlICovXTogMyxcbiAgICBbNyAvKiBDaGFyQm91bmRhcnlDYXRlZ29yeS5MaW5lQnJlYWtDUiAqL106IDEwLFxuICAgIFs4IC8qIENoYXJCb3VuZGFyeUNhdGVnb3J5LkxpbmVCcmVha0xGICovXTogMTAsXG59O1xuZnVuY3Rpb24gZ2V0Q2F0ZWdvcnlCb3VuZGFyeVNjb3JlKGNhdGVnb3J5KSB7XG4gICAgcmV0dXJuIHNjb3JlW2NhdGVnb3J5XTtcbn1cbmZ1bmN0aW9uIGdldENhdGVnb3J5KGNoYXJDb2RlKSB7XG4gICAgaWYgKGNoYXJDb2RlID09PSAxMCAvKiBDaGFyQ29kZS5MaW5lRmVlZCAqLykge1xuICAgICAgICByZXR1cm4gOCAvKiBDaGFyQm91bmRhcnlDYXRlZ29yeS5MaW5lQnJlYWtMRiAqLztcbiAgICB9XG4gICAgZWxzZSBpZiAoY2hhckNvZGUgPT09IDEzIC8qIENoYXJDb2RlLkNhcnJpYWdlUmV0dXJuICovKSB7XG4gICAgICAgIHJldHVybiA3IC8qIENoYXJCb3VuZGFyeUNhdGVnb3J5LkxpbmVCcmVha0NSICovO1xuICAgIH1cbiAgICBlbHNlIGlmIChpc1NwYWNlKGNoYXJDb2RlKSkge1xuICAgICAgICByZXR1cm4gNiAvKiBDaGFyQm91bmRhcnlDYXRlZ29yeS5TcGFjZSAqLztcbiAgICB9XG4gICAgZWxzZSBpZiAoY2hhckNvZGUgPj0gOTcgLyogQ2hhckNvZGUuYSAqLyAmJiBjaGFyQ29kZSA8PSAxMjIgLyogQ2hhckNvZGUueiAqLykge1xuICAgICAgICByZXR1cm4gMCAvKiBDaGFyQm91bmRhcnlDYXRlZ29yeS5Xb3JkTG93ZXIgKi87XG4gICAgfVxuICAgIGVsc2UgaWYgKGNoYXJDb2RlID49IDY1IC8qIENoYXJDb2RlLkEgKi8gJiYgY2hhckNvZGUgPD0gOTAgLyogQ2hhckNvZGUuWiAqLykge1xuICAgICAgICByZXR1cm4gMSAvKiBDaGFyQm91bmRhcnlDYXRlZ29yeS5Xb3JkVXBwZXIgKi87XG4gICAgfVxuICAgIGVsc2UgaWYgKGNoYXJDb2RlID49IDQ4IC8qIENoYXJDb2RlLkRpZ2l0MCAqLyAmJiBjaGFyQ29kZSA8PSA1NyAvKiBDaGFyQ29kZS5EaWdpdDkgKi8pIHtcbiAgICAgICAgcmV0dXJuIDIgLyogQ2hhckJvdW5kYXJ5Q2F0ZWdvcnkuV29yZE51bWJlciAqLztcbiAgICB9XG4gICAgZWxzZSBpZiAoY2hhckNvZGUgPT09IC0xKSB7XG4gICAgICAgIHJldHVybiAzIC8qIENoYXJCb3VuZGFyeUNhdGVnb3J5LkVuZCAqLztcbiAgICB9XG4gICAgZWxzZSBpZiAoY2hhckNvZGUgPT09IDQ0IC8qIENoYXJDb2RlLkNvbW1hICovIHx8IGNoYXJDb2RlID09PSA1OSAvKiBDaGFyQ29kZS5TZW1pY29sb24gKi8pIHtcbiAgICAgICAgcmV0dXJuIDUgLyogQ2hhckJvdW5kYXJ5Q2F0ZWdvcnkuU2VwYXJhdG9yICovO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgcmV0dXJuIDQgLyogQ2hhckJvdW5kYXJ5Q2F0ZWdvcnkuT3RoZXIgKi87XG4gICAgfVxufVxuIiwgIi8qLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gKiAgQ29weXJpZ2h0IChjKSBNaWNyb3NvZnQgQ29ycG9yYXRpb24uIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKiAgTGljZW5zZWQgdW5kZXIgdGhlIE1JVCBMaWNlbnNlLiBTZWUgTGljZW5zZS50eHQgaW4gdGhlIHByb2plY3Qgcm9vdCBmb3IgbGljZW5zZSBpbmZvcm1hdGlvbi5cbiAqLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qL1xuaW1wb3J0IHsgU2VxdWVuY2VEaWZmIH0gZnJvbSAnLi9hbGdvcml0aG1zL2RpZmZBbGdvcml0aG0uanMnO1xuaW1wb3J0IHsgTGluZVJhbmdlTWFwcGluZyB9IGZyb20gJy4uL3JhbmdlTWFwcGluZy5qcyc7XG5pbXBvcnQgeyBwdXNoTWFueSwgY29tcGFyZUJ5LCBudW1iZXJDb21wYXJhdG9yLCByZXZlcnNlT3JkZXIgfSBmcm9tICcuLi8uLi8uLi8uLi9iYXNlL2NvbW1vbi9hcnJheXMuanMnO1xuaW1wb3J0IHsgTW9ub3Rvbm91c0FycmF5LCBmaW5kTGFzdE1vbm90b25vdXMgfSBmcm9tICcuLi8uLi8uLi8uLi9iYXNlL2NvbW1vbi9hcnJheXNGaW5kLmpzJztcbmltcG9ydCB7IFNldE1hcCB9IGZyb20gJy4uLy4uLy4uLy4uL2Jhc2UvY29tbW9uL21hcC5qcyc7XG5pbXBvcnQgeyBMaW5lUmFuZ2UsIExpbmVSYW5nZVNldCB9IGZyb20gJy4uLy4uL2NvcmUvbGluZVJhbmdlLmpzJztcbmltcG9ydCB7IE9mZnNldFJhbmdlIH0gZnJvbSAnLi4vLi4vY29yZS9vZmZzZXRSYW5nZS5qcyc7XG5pbXBvcnQgeyBMaW5lc1NsaWNlQ2hhclNlcXVlbmNlIH0gZnJvbSAnLi9saW5lc1NsaWNlQ2hhclNlcXVlbmNlLmpzJztcbmltcG9ydCB7IExpbmVSYW5nZUZyYWdtZW50LCBpc1NwYWNlIH0gZnJvbSAnLi91dGlscy5qcyc7XG5pbXBvcnQgeyBNeWVyc0RpZmZBbGdvcml0aG0gfSBmcm9tICcuL2FsZ29yaXRobXMvbXllcnNEaWZmQWxnb3JpdGhtLmpzJztcbmV4cG9ydCBmdW5jdGlvbiBjb21wdXRlTW92ZWRMaW5lcyhjaGFuZ2VzLCBvcmlnaW5hbExpbmVzLCBtb2RpZmllZExpbmVzLCBoYXNoZWRPcmlnaW5hbExpbmVzLCBoYXNoZWRNb2RpZmllZExpbmVzLCB0aW1lb3V0KSB7XG4gICAgbGV0IHsgbW92ZXMsIGV4Y2x1ZGVkQ2hhbmdlcyB9ID0gY29tcHV0ZU1vdmVzRnJvbVNpbXBsZURlbGV0aW9uc1RvU2ltcGxlSW5zZXJ0aW9ucyhjaGFuZ2VzLCBvcmlnaW5hbExpbmVzLCBtb2RpZmllZExpbmVzLCB0aW1lb3V0KTtcbiAgICBpZiAoIXRpbWVvdXQuaXNWYWxpZCgpKSB7XG4gICAgICAgIHJldHVybiBbXTtcbiAgICB9XG4gICAgY29uc3QgZmlsdGVyZWRDaGFuZ2VzID0gY2hhbmdlcy5maWx0ZXIoYyA9PiAhZXhjbHVkZWRDaGFuZ2VzLmhhcyhjKSk7XG4gICAgY29uc3QgdW5jaGFuZ2VkTW92ZXMgPSBjb21wdXRlVW5jaGFuZ2VkTW92ZXMoZmlsdGVyZWRDaGFuZ2VzLCBoYXNoZWRPcmlnaW5hbExpbmVzLCBoYXNoZWRNb2RpZmllZExpbmVzLCBvcmlnaW5hbExpbmVzLCBtb2RpZmllZExpbmVzLCB0aW1lb3V0KTtcbiAgICBwdXNoTWFueShtb3ZlcywgdW5jaGFuZ2VkTW92ZXMpO1xuICAgIG1vdmVzID0gam9pbkNsb3NlQ29uc2VjdXRpdmVNb3Zlcyhtb3Zlcyk7XG4gICAgLy8gSWdub3JlIHRvbyBzaG9ydCBtb3Zlc1xuICAgIG1vdmVzID0gbW92ZXMuZmlsdGVyKGN1cnJlbnQgPT4ge1xuICAgICAgICBjb25zdCBsaW5lcyA9IGN1cnJlbnQub3JpZ2luYWwudG9PZmZzZXRSYW5nZSgpLnNsaWNlKG9yaWdpbmFsTGluZXMpLm1hcChsID0+IGwudHJpbSgpKTtcbiAgICAgICAgY29uc3Qgb3JpZ2luYWxUZXh0ID0gbGluZXMuam9pbignXFxuJyk7XG4gICAgICAgIHJldHVybiBvcmlnaW5hbFRleHQubGVuZ3RoID49IDE1ICYmIGNvdW50V2hlcmUobGluZXMsIGwgPT4gbC5sZW5ndGggPj0gMikgPj0gMjtcbiAgICB9KTtcbiAgICBtb3ZlcyA9IHJlbW92ZU1vdmVzSW5TYW1lRGlmZihjaGFuZ2VzLCBtb3Zlcyk7XG4gICAgcmV0dXJuIG1vdmVzO1xufVxuZnVuY3Rpb24gY291bnRXaGVyZShhcnIsIHByZWRpY2F0ZSkge1xuICAgIGxldCBjb3VudCA9IDA7XG4gICAgZm9yIChjb25zdCB0IG9mIGFycikge1xuICAgICAgICBpZiAocHJlZGljYXRlKHQpKSB7XG4gICAgICAgICAgICBjb3VudCsrO1xuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiBjb3VudDtcbn1cbmZ1bmN0aW9uIGNvbXB1dGVNb3Zlc0Zyb21TaW1wbGVEZWxldGlvbnNUb1NpbXBsZUluc2VydGlvbnMoY2hhbmdlcywgb3JpZ2luYWxMaW5lcywgbW9kaWZpZWRMaW5lcywgdGltZW91dCkge1xuICAgIGNvbnN0IG1vdmVzID0gW107XG4gICAgY29uc3QgZGVsZXRpb25zID0gY2hhbmdlc1xuICAgICAgICAuZmlsdGVyKGMgPT4gYy5tb2RpZmllZC5pc0VtcHR5ICYmIGMub3JpZ2luYWwubGVuZ3RoID49IDMpXG4gICAgICAgIC5tYXAoZCA9PiBuZXcgTGluZVJhbmdlRnJhZ21lbnQoZC5vcmlnaW5hbCwgb3JpZ2luYWxMaW5lcywgZCkpO1xuICAgIGNvbnN0IGluc2VydGlvbnMgPSBuZXcgU2V0KGNoYW5nZXNcbiAgICAgICAgLmZpbHRlcihjID0+IGMub3JpZ2luYWwuaXNFbXB0eSAmJiBjLm1vZGlmaWVkLmxlbmd0aCA+PSAzKVxuICAgICAgICAubWFwKGQgPT4gbmV3IExpbmVSYW5nZUZyYWdtZW50KGQubW9kaWZpZWQsIG1vZGlmaWVkTGluZXMsIGQpKSk7XG4gICAgY29uc3QgZXhjbHVkZWRDaGFuZ2VzID0gbmV3IFNldCgpO1xuICAgIGZvciAoY29uc3QgZGVsZXRpb24gb2YgZGVsZXRpb25zKSB7XG4gICAgICAgIGxldCBoaWdoZXN0U2ltaWxhcml0eSA9IC0xO1xuICAgICAgICBsZXQgYmVzdDtcbiAgICAgICAgZm9yIChjb25zdCBpbnNlcnRpb24gb2YgaW5zZXJ0aW9ucykge1xuICAgICAgICAgICAgY29uc3Qgc2ltaWxhcml0eSA9IGRlbGV0aW9uLmNvbXB1dGVTaW1pbGFyaXR5KGluc2VydGlvbik7XG4gICAgICAgICAgICBpZiAoc2ltaWxhcml0eSA+IGhpZ2hlc3RTaW1pbGFyaXR5KSB7XG4gICAgICAgICAgICAgICAgaGlnaGVzdFNpbWlsYXJpdHkgPSBzaW1pbGFyaXR5O1xuICAgICAgICAgICAgICAgIGJlc3QgPSBpbnNlcnRpb247XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGhpZ2hlc3RTaW1pbGFyaXR5ID4gMC45MCAmJiBiZXN0KSB7XG4gICAgICAgICAgICBpbnNlcnRpb25zLmRlbGV0ZShiZXN0KTtcbiAgICAgICAgICAgIG1vdmVzLnB1c2gobmV3IExpbmVSYW5nZU1hcHBpbmcoZGVsZXRpb24ucmFuZ2UsIGJlc3QucmFuZ2UpKTtcbiAgICAgICAgICAgIGV4Y2x1ZGVkQ2hhbmdlcy5hZGQoZGVsZXRpb24uc291cmNlKTtcbiAgICAgICAgICAgIGV4Y2x1ZGVkQ2hhbmdlcy5hZGQoYmVzdC5zb3VyY2UpO1xuICAgICAgICB9XG4gICAgICAgIGlmICghdGltZW91dC5pc1ZhbGlkKCkpIHtcbiAgICAgICAgICAgIHJldHVybiB7IG1vdmVzLCBleGNsdWRlZENoYW5nZXMgfTtcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4geyBtb3ZlcywgZXhjbHVkZWRDaGFuZ2VzIH07XG59XG5mdW5jdGlvbiBjb21wdXRlVW5jaGFuZ2VkTW92ZXMoY2hhbmdlcywgaGFzaGVkT3JpZ2luYWxMaW5lcywgaGFzaGVkTW9kaWZpZWRMaW5lcywgb3JpZ2luYWxMaW5lcywgbW9kaWZpZWRMaW5lcywgdGltZW91dCkge1xuICAgIGNvbnN0IG1vdmVzID0gW107XG4gICAgY29uc3Qgb3JpZ2luYWwzTGluZUhhc2hlcyA9IG5ldyBTZXRNYXAoKTtcbiAgICBmb3IgKGNvbnN0IGNoYW5nZSBvZiBjaGFuZ2VzKSB7XG4gICAgICAgIGZvciAobGV0IGkgPSBjaGFuZ2Uub3JpZ2luYWwuc3RhcnRMaW5lTnVtYmVyOyBpIDwgY2hhbmdlLm9yaWdpbmFsLmVuZExpbmVOdW1iZXJFeGNsdXNpdmUgLSAyOyBpKyspIHtcbiAgICAgICAgICAgIGNvbnN0IGtleSA9IGAke2hhc2hlZE9yaWdpbmFsTGluZXNbaSAtIDFdfToke2hhc2hlZE9yaWdpbmFsTGluZXNbaSArIDEgLSAxXX06JHtoYXNoZWRPcmlnaW5hbExpbmVzW2kgKyAyIC0gMV19YDtcbiAgICAgICAgICAgIG9yaWdpbmFsM0xpbmVIYXNoZXMuYWRkKGtleSwgeyByYW5nZTogbmV3IExpbmVSYW5nZShpLCBpICsgMykgfSk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgY29uc3QgcG9zc2libGVNYXBwaW5ncyA9IFtdO1xuICAgIGNoYW5nZXMuc29ydChjb21wYXJlQnkoYyA9PiBjLm1vZGlmaWVkLnN0YXJ0TGluZU51bWJlciwgbnVtYmVyQ29tcGFyYXRvcikpO1xuICAgIGZvciAoY29uc3QgY2hhbmdlIG9mIGNoYW5nZXMpIHtcbiAgICAgICAgbGV0IGxhc3RNYXBwaW5ncyA9IFtdO1xuICAgICAgICBmb3IgKGxldCBpID0gY2hhbmdlLm1vZGlmaWVkLnN0YXJ0TGluZU51bWJlcjsgaSA8IGNoYW5nZS5tb2RpZmllZC5lbmRMaW5lTnVtYmVyRXhjbHVzaXZlIC0gMjsgaSsrKSB7XG4gICAgICAgICAgICBjb25zdCBrZXkgPSBgJHtoYXNoZWRNb2RpZmllZExpbmVzW2kgLSAxXX06JHtoYXNoZWRNb2RpZmllZExpbmVzW2kgKyAxIC0gMV19OiR7aGFzaGVkTW9kaWZpZWRMaW5lc1tpICsgMiAtIDFdfWA7XG4gICAgICAgICAgICBjb25zdCBjdXJyZW50TW9kaWZpZWRSYW5nZSA9IG5ldyBMaW5lUmFuZ2UoaSwgaSArIDMpO1xuICAgICAgICAgICAgY29uc3QgbmV4dE1hcHBpbmdzID0gW107XG4gICAgICAgICAgICBvcmlnaW5hbDNMaW5lSGFzaGVzLmZvckVhY2goa2V5LCAoeyByYW5nZSB9KSA9PiB7XG4gICAgICAgICAgICAgICAgZm9yIChjb25zdCBsYXN0TWFwcGluZyBvZiBsYXN0TWFwcGluZ3MpIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gZG9lcyB0aGlzIG1hdGNoIGV4dGVuZCBzb21lIGxhc3QgbWF0Y2g/XG4gICAgICAgICAgICAgICAgICAgIGlmIChsYXN0TWFwcGluZy5vcmlnaW5hbExpbmVSYW5nZS5lbmRMaW5lTnVtYmVyRXhjbHVzaXZlICsgMSA9PT0gcmFuZ2UuZW5kTGluZU51bWJlckV4Y2x1c2l2ZSAmJlxuICAgICAgICAgICAgICAgICAgICAgICAgbGFzdE1hcHBpbmcubW9kaWZpZWRMaW5lUmFuZ2UuZW5kTGluZU51bWJlckV4Y2x1c2l2ZSArIDEgPT09IGN1cnJlbnRNb2RpZmllZFJhbmdlLmVuZExpbmVOdW1iZXJFeGNsdXNpdmUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGxhc3RNYXBwaW5nLm9yaWdpbmFsTGluZVJhbmdlID0gbmV3IExpbmVSYW5nZShsYXN0TWFwcGluZy5vcmlnaW5hbExpbmVSYW5nZS5zdGFydExpbmVOdW1iZXIsIHJhbmdlLmVuZExpbmVOdW1iZXJFeGNsdXNpdmUpO1xuICAgICAgICAgICAgICAgICAgICAgICAgbGFzdE1hcHBpbmcubW9kaWZpZWRMaW5lUmFuZ2UgPSBuZXcgTGluZVJhbmdlKGxhc3RNYXBwaW5nLm1vZGlmaWVkTGluZVJhbmdlLnN0YXJ0TGluZU51bWJlciwgY3VycmVudE1vZGlmaWVkUmFuZ2UuZW5kTGluZU51bWJlckV4Y2x1c2l2ZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICBuZXh0TWFwcGluZ3MucHVzaChsYXN0TWFwcGluZyk7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgY29uc3QgbWFwcGluZyA9IHtcbiAgICAgICAgICAgICAgICAgICAgbW9kaWZpZWRMaW5lUmFuZ2U6IGN1cnJlbnRNb2RpZmllZFJhbmdlLFxuICAgICAgICAgICAgICAgICAgICBvcmlnaW5hbExpbmVSYW5nZTogcmFuZ2UsXG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICBwb3NzaWJsZU1hcHBpbmdzLnB1c2gobWFwcGluZyk7XG4gICAgICAgICAgICAgICAgbmV4dE1hcHBpbmdzLnB1c2gobWFwcGluZyk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIGxhc3RNYXBwaW5ncyA9IG5leHRNYXBwaW5ncztcbiAgICAgICAgfVxuICAgICAgICBpZiAoIXRpbWVvdXQuaXNWYWxpZCgpKSB7XG4gICAgICAgICAgICByZXR1cm4gW107XG4gICAgICAgIH1cbiAgICB9XG4gICAgcG9zc2libGVNYXBwaW5ncy5zb3J0KHJldmVyc2VPcmRlcihjb21wYXJlQnkobSA9PiBtLm1vZGlmaWVkTGluZVJhbmdlLmxlbmd0aCwgbnVtYmVyQ29tcGFyYXRvcikpKTtcbiAgICBjb25zdCBtb2RpZmllZFNldCA9IG5ldyBMaW5lUmFuZ2VTZXQoKTtcbiAgICBjb25zdCBvcmlnaW5hbFNldCA9IG5ldyBMaW5lUmFuZ2VTZXQoKTtcbiAgICBmb3IgKGNvbnN0IG1hcHBpbmcgb2YgcG9zc2libGVNYXBwaW5ncykge1xuICAgICAgICBjb25zdCBkaWZmT3JpZ1RvTW9kID0gbWFwcGluZy5tb2RpZmllZExpbmVSYW5nZS5zdGFydExpbmVOdW1iZXIgLSBtYXBwaW5nLm9yaWdpbmFsTGluZVJhbmdlLnN0YXJ0TGluZU51bWJlcjtcbiAgICAgICAgY29uc3QgbW9kaWZpZWRTZWN0aW9ucyA9IG1vZGlmaWVkU2V0LnN1YnRyYWN0RnJvbShtYXBwaW5nLm1vZGlmaWVkTGluZVJhbmdlKTtcbiAgICAgICAgY29uc3Qgb3JpZ2luYWxUcmFuc2xhdGVkU2VjdGlvbnMgPSBvcmlnaW5hbFNldC5zdWJ0cmFjdEZyb20obWFwcGluZy5vcmlnaW5hbExpbmVSYW5nZSkuZ2V0V2l0aERlbHRhKGRpZmZPcmlnVG9Nb2QpO1xuICAgICAgICBjb25zdCBtb2RpZmllZEludGVyc2VjdGVkU2VjdGlvbnMgPSBtb2RpZmllZFNlY3Rpb25zLmdldEludGVyc2VjdGlvbihvcmlnaW5hbFRyYW5zbGF0ZWRTZWN0aW9ucyk7XG4gICAgICAgIGZvciAoY29uc3QgcyBvZiBtb2RpZmllZEludGVyc2VjdGVkU2VjdGlvbnMucmFuZ2VzKSB7XG4gICAgICAgICAgICBpZiAocy5sZW5ndGggPCAzKSB7XG4gICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjb25zdCBtb2RpZmllZExpbmVSYW5nZSA9IHM7XG4gICAgICAgICAgICBjb25zdCBvcmlnaW5hbExpbmVSYW5nZSA9IHMuZGVsdGEoLWRpZmZPcmlnVG9Nb2QpO1xuICAgICAgICAgICAgbW92ZXMucHVzaChuZXcgTGluZVJhbmdlTWFwcGluZyhvcmlnaW5hbExpbmVSYW5nZSwgbW9kaWZpZWRMaW5lUmFuZ2UpKTtcbiAgICAgICAgICAgIG1vZGlmaWVkU2V0LmFkZFJhbmdlKG1vZGlmaWVkTGluZVJhbmdlKTtcbiAgICAgICAgICAgIG9yaWdpbmFsU2V0LmFkZFJhbmdlKG9yaWdpbmFsTGluZVJhbmdlKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBtb3Zlcy5zb3J0KGNvbXBhcmVCeShtID0+IG0ub3JpZ2luYWwuc3RhcnRMaW5lTnVtYmVyLCBudW1iZXJDb21wYXJhdG9yKSk7XG4gICAgY29uc3QgbW9ub3Rvbm91c0NoYW5nZXMgPSBuZXcgTW9ub3Rvbm91c0FycmF5KGNoYW5nZXMpO1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbW92ZXMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgY29uc3QgbW92ZSA9IG1vdmVzW2ldO1xuICAgICAgICBjb25zdCBmaXJzdFRvdWNoaW5nQ2hhbmdlT3JpZyA9IG1vbm90b25vdXNDaGFuZ2VzLmZpbmRMYXN0TW9ub3Rvbm91cyhjID0+IGMub3JpZ2luYWwuc3RhcnRMaW5lTnVtYmVyIDw9IG1vdmUub3JpZ2luYWwuc3RhcnRMaW5lTnVtYmVyKTtcbiAgICAgICAgY29uc3QgZmlyc3RUb3VjaGluZ0NoYW5nZU1vZCA9IGZpbmRMYXN0TW9ub3Rvbm91cyhjaGFuZ2VzLCBjID0+IGMubW9kaWZpZWQuc3RhcnRMaW5lTnVtYmVyIDw9IG1vdmUubW9kaWZpZWQuc3RhcnRMaW5lTnVtYmVyKTtcbiAgICAgICAgY29uc3QgbGluZXNBYm92ZSA9IE1hdGgubWF4KG1vdmUub3JpZ2luYWwuc3RhcnRMaW5lTnVtYmVyIC0gZmlyc3RUb3VjaGluZ0NoYW5nZU9yaWcub3JpZ2luYWwuc3RhcnRMaW5lTnVtYmVyLCBtb3ZlLm1vZGlmaWVkLnN0YXJ0TGluZU51bWJlciAtIGZpcnN0VG91Y2hpbmdDaGFuZ2VNb2QubW9kaWZpZWQuc3RhcnRMaW5lTnVtYmVyKTtcbiAgICAgICAgY29uc3QgbGFzdFRvdWNoaW5nQ2hhbmdlT3JpZyA9IG1vbm90b25vdXNDaGFuZ2VzLmZpbmRMYXN0TW9ub3Rvbm91cyhjID0+IGMub3JpZ2luYWwuc3RhcnRMaW5lTnVtYmVyIDwgbW92ZS5vcmlnaW5hbC5lbmRMaW5lTnVtYmVyRXhjbHVzaXZlKTtcbiAgICAgICAgY29uc3QgbGFzdFRvdWNoaW5nQ2hhbmdlTW9kID0gZmluZExhc3RNb25vdG9ub3VzKGNoYW5nZXMsIGMgPT4gYy5tb2RpZmllZC5zdGFydExpbmVOdW1iZXIgPCBtb3ZlLm1vZGlmaWVkLmVuZExpbmVOdW1iZXJFeGNsdXNpdmUpO1xuICAgICAgICBjb25zdCBsaW5lc0JlbG93ID0gTWF0aC5tYXgobGFzdFRvdWNoaW5nQ2hhbmdlT3JpZy5vcmlnaW5hbC5lbmRMaW5lTnVtYmVyRXhjbHVzaXZlIC0gbW92ZS5vcmlnaW5hbC5lbmRMaW5lTnVtYmVyRXhjbHVzaXZlLCBsYXN0VG91Y2hpbmdDaGFuZ2VNb2QubW9kaWZpZWQuZW5kTGluZU51bWJlckV4Y2x1c2l2ZSAtIG1vdmUubW9kaWZpZWQuZW5kTGluZU51bWJlckV4Y2x1c2l2ZSk7XG4gICAgICAgIGxldCBleHRlbmRUb1RvcDtcbiAgICAgICAgZm9yIChleHRlbmRUb1RvcCA9IDA7IGV4dGVuZFRvVG9wIDwgbGluZXNBYm92ZTsgZXh0ZW5kVG9Ub3ArKykge1xuICAgICAgICAgICAgY29uc3Qgb3JpZ0xpbmUgPSBtb3ZlLm9yaWdpbmFsLnN0YXJ0TGluZU51bWJlciAtIGV4dGVuZFRvVG9wIC0gMTtcbiAgICAgICAgICAgIGNvbnN0IG1vZExpbmUgPSBtb3ZlLm1vZGlmaWVkLnN0YXJ0TGluZU51bWJlciAtIGV4dGVuZFRvVG9wIC0gMTtcbiAgICAgICAgICAgIGlmIChvcmlnTGluZSA+IG9yaWdpbmFsTGluZXMubGVuZ3RoIHx8IG1vZExpbmUgPiBtb2RpZmllZExpbmVzLmxlbmd0aCkge1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKG1vZGlmaWVkU2V0LmNvbnRhaW5zKG1vZExpbmUpIHx8IG9yaWdpbmFsU2V0LmNvbnRhaW5zKG9yaWdMaW5lKSkge1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKCFhcmVMaW5lc1NpbWlsYXIob3JpZ2luYWxMaW5lc1tvcmlnTGluZSAtIDFdLCBtb2RpZmllZExpbmVzW21vZExpbmUgLSAxXSwgdGltZW91dCkpIHtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBpZiAoZXh0ZW5kVG9Ub3AgPiAwKSB7XG4gICAgICAgICAgICBvcmlnaW5hbFNldC5hZGRSYW5nZShuZXcgTGluZVJhbmdlKG1vdmUub3JpZ2luYWwuc3RhcnRMaW5lTnVtYmVyIC0gZXh0ZW5kVG9Ub3AsIG1vdmUub3JpZ2luYWwuc3RhcnRMaW5lTnVtYmVyKSk7XG4gICAgICAgICAgICBtb2RpZmllZFNldC5hZGRSYW5nZShuZXcgTGluZVJhbmdlKG1vdmUubW9kaWZpZWQuc3RhcnRMaW5lTnVtYmVyIC0gZXh0ZW5kVG9Ub3AsIG1vdmUubW9kaWZpZWQuc3RhcnRMaW5lTnVtYmVyKSk7XG4gICAgICAgIH1cbiAgICAgICAgbGV0IGV4dGVuZFRvQm90dG9tO1xuICAgICAgICBmb3IgKGV4dGVuZFRvQm90dG9tID0gMDsgZXh0ZW5kVG9Cb3R0b20gPCBsaW5lc0JlbG93OyBleHRlbmRUb0JvdHRvbSsrKSB7XG4gICAgICAgICAgICBjb25zdCBvcmlnTGluZSA9IG1vdmUub3JpZ2luYWwuZW5kTGluZU51bWJlckV4Y2x1c2l2ZSArIGV4dGVuZFRvQm90dG9tO1xuICAgICAgICAgICAgY29uc3QgbW9kTGluZSA9IG1vdmUubW9kaWZpZWQuZW5kTGluZU51bWJlckV4Y2x1c2l2ZSArIGV4dGVuZFRvQm90dG9tO1xuICAgICAgICAgICAgaWYgKG9yaWdMaW5lID4gb3JpZ2luYWxMaW5lcy5sZW5ndGggfHwgbW9kTGluZSA+IG1vZGlmaWVkTGluZXMubGVuZ3RoKSB7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAobW9kaWZpZWRTZXQuY29udGFpbnMobW9kTGluZSkgfHwgb3JpZ2luYWxTZXQuY29udGFpbnMob3JpZ0xpbmUpKSB7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoIWFyZUxpbmVzU2ltaWxhcihvcmlnaW5hbExpbmVzW29yaWdMaW5lIC0gMV0sIG1vZGlmaWVkTGluZXNbbW9kTGluZSAtIDFdLCB0aW1lb3V0KSkge1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGlmIChleHRlbmRUb0JvdHRvbSA+IDApIHtcbiAgICAgICAgICAgIG9yaWdpbmFsU2V0LmFkZFJhbmdlKG5ldyBMaW5lUmFuZ2UobW92ZS5vcmlnaW5hbC5lbmRMaW5lTnVtYmVyRXhjbHVzaXZlLCBtb3ZlLm9yaWdpbmFsLmVuZExpbmVOdW1iZXJFeGNsdXNpdmUgKyBleHRlbmRUb0JvdHRvbSkpO1xuICAgICAgICAgICAgbW9kaWZpZWRTZXQuYWRkUmFuZ2UobmV3IExpbmVSYW5nZShtb3ZlLm1vZGlmaWVkLmVuZExpbmVOdW1iZXJFeGNsdXNpdmUsIG1vdmUubW9kaWZpZWQuZW5kTGluZU51bWJlckV4Y2x1c2l2ZSArIGV4dGVuZFRvQm90dG9tKSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGV4dGVuZFRvVG9wID4gMCB8fCBleHRlbmRUb0JvdHRvbSA+IDApIHtcbiAgICAgICAgICAgIG1vdmVzW2ldID0gbmV3IExpbmVSYW5nZU1hcHBpbmcobmV3IExpbmVSYW5nZShtb3ZlLm9yaWdpbmFsLnN0YXJ0TGluZU51bWJlciAtIGV4dGVuZFRvVG9wLCBtb3ZlLm9yaWdpbmFsLmVuZExpbmVOdW1iZXJFeGNsdXNpdmUgKyBleHRlbmRUb0JvdHRvbSksIG5ldyBMaW5lUmFuZ2UobW92ZS5tb2RpZmllZC5zdGFydExpbmVOdW1iZXIgLSBleHRlbmRUb1RvcCwgbW92ZS5tb2RpZmllZC5lbmRMaW5lTnVtYmVyRXhjbHVzaXZlICsgZXh0ZW5kVG9Cb3R0b20pKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gbW92ZXM7XG59XG5mdW5jdGlvbiBhcmVMaW5lc1NpbWlsYXIobGluZTEsIGxpbmUyLCB0aW1lb3V0KSB7XG4gICAgaWYgKGxpbmUxLnRyaW0oKSA9PT0gbGluZTIudHJpbSgpKSB7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgICBpZiAobGluZTEubGVuZ3RoID4gMzAwICYmIGxpbmUyLmxlbmd0aCA+IDMwMCkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIGNvbnN0IG15ZXJzRGlmZmluZ0FsZ29yaXRobSA9IG5ldyBNeWVyc0RpZmZBbGdvcml0aG0oKTtcbiAgICBjb25zdCByZXN1bHQgPSBteWVyc0RpZmZpbmdBbGdvcml0aG0uY29tcHV0ZShuZXcgTGluZXNTbGljZUNoYXJTZXF1ZW5jZShbbGluZTFdLCBuZXcgT2Zmc2V0UmFuZ2UoMCwgMSksIGZhbHNlKSwgbmV3IExpbmVzU2xpY2VDaGFyU2VxdWVuY2UoW2xpbmUyXSwgbmV3IE9mZnNldFJhbmdlKDAsIDEpLCBmYWxzZSksIHRpbWVvdXQpO1xuICAgIGxldCBjb21tb25Ob25TcGFjZUNoYXJDb3VudCA9IDA7XG4gICAgY29uc3QgaW52ZXJ0ZWQgPSBTZXF1ZW5jZURpZmYuaW52ZXJ0KHJlc3VsdC5kaWZmcywgbGluZTEubGVuZ3RoKTtcbiAgICBmb3IgKGNvbnN0IHNlcSBvZiBpbnZlcnRlZCkge1xuICAgICAgICBzZXEuc2VxMVJhbmdlLmZvckVhY2goaWR4ID0+IHtcbiAgICAgICAgICAgIGlmICghaXNTcGFjZShsaW5lMS5jaGFyQ29kZUF0KGlkeCkpKSB7XG4gICAgICAgICAgICAgICAgY29tbW9uTm9uU3BhY2VDaGFyQ291bnQrKztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgfVxuICAgIGZ1bmN0aW9uIGNvdW50Tm9uV3NDaGFycyhzdHIpIHtcbiAgICAgICAgbGV0IGNvdW50ID0gMDtcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBsaW5lMS5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgaWYgKCFpc1NwYWNlKHN0ci5jaGFyQ29kZUF0KGkpKSkge1xuICAgICAgICAgICAgICAgIGNvdW50Kys7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGNvdW50O1xuICAgIH1cbiAgICBjb25zdCBsb25nZXJMaW5lTGVuZ3RoID0gY291bnROb25Xc0NoYXJzKGxpbmUxLmxlbmd0aCA+IGxpbmUyLmxlbmd0aCA/IGxpbmUxIDogbGluZTIpO1xuICAgIGNvbnN0IHIgPSBjb21tb25Ob25TcGFjZUNoYXJDb3VudCAvIGxvbmdlckxpbmVMZW5ndGggPiAwLjYgJiYgbG9uZ2VyTGluZUxlbmd0aCA+IDEwO1xuICAgIHJldHVybiByO1xufVxuZnVuY3Rpb24gam9pbkNsb3NlQ29uc2VjdXRpdmVNb3Zlcyhtb3Zlcykge1xuICAgIGlmIChtb3Zlcy5sZW5ndGggPT09IDApIHtcbiAgICAgICAgcmV0dXJuIG1vdmVzO1xuICAgIH1cbiAgICBtb3Zlcy5zb3J0KGNvbXBhcmVCeShtID0+IG0ub3JpZ2luYWwuc3RhcnRMaW5lTnVtYmVyLCBudW1iZXJDb21wYXJhdG9yKSk7XG4gICAgY29uc3QgcmVzdWx0ID0gW21vdmVzWzBdXTtcbiAgICBmb3IgKGxldCBpID0gMTsgaSA8IG1vdmVzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGNvbnN0IGxhc3QgPSByZXN1bHRbcmVzdWx0Lmxlbmd0aCAtIDFdO1xuICAgICAgICBjb25zdCBjdXJyZW50ID0gbW92ZXNbaV07XG4gICAgICAgIGNvbnN0IG9yaWdpbmFsRGlzdCA9IGN1cnJlbnQub3JpZ2luYWwuc3RhcnRMaW5lTnVtYmVyIC0gbGFzdC5vcmlnaW5hbC5lbmRMaW5lTnVtYmVyRXhjbHVzaXZlO1xuICAgICAgICBjb25zdCBtb2RpZmllZERpc3QgPSBjdXJyZW50Lm1vZGlmaWVkLnN0YXJ0TGluZU51bWJlciAtIGxhc3QubW9kaWZpZWQuZW5kTGluZU51bWJlckV4Y2x1c2l2ZTtcbiAgICAgICAgY29uc3QgY3VycmVudE1vdmVBZnRlckxhc3QgPSBvcmlnaW5hbERpc3QgPj0gMCAmJiBtb2RpZmllZERpc3QgPj0gMDtcbiAgICAgICAgaWYgKGN1cnJlbnRNb3ZlQWZ0ZXJMYXN0ICYmIG9yaWdpbmFsRGlzdCArIG1vZGlmaWVkRGlzdCA8PSAyKSB7XG4gICAgICAgICAgICByZXN1bHRbcmVzdWx0Lmxlbmd0aCAtIDFdID0gbGFzdC5qb2luKGN1cnJlbnQpO1xuICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgIH1cbiAgICAgICAgcmVzdWx0LnB1c2goY3VycmVudCk7XG4gICAgfVxuICAgIHJldHVybiByZXN1bHQ7XG59XG5mdW5jdGlvbiByZW1vdmVNb3Zlc0luU2FtZURpZmYoY2hhbmdlcywgbW92ZXMpIHtcbiAgICBjb25zdCBjaGFuZ2VzTW9ub3Rvbm91cyA9IG5ldyBNb25vdG9ub3VzQXJyYXkoY2hhbmdlcyk7XG4gICAgbW92ZXMgPSBtb3Zlcy5maWx0ZXIobSA9PiB7XG4gICAgICAgIGNvbnN0IGRpZmZCZWZvcmVFbmRPZk1vdmVPcmlnaW5hbCA9IGNoYW5nZXNNb25vdG9ub3VzLmZpbmRMYXN0TW9ub3Rvbm91cyhjID0+IGMub3JpZ2luYWwuc3RhcnRMaW5lTnVtYmVyIDwgbS5vcmlnaW5hbC5lbmRMaW5lTnVtYmVyRXhjbHVzaXZlKVxuICAgICAgICAgICAgfHwgbmV3IExpbmVSYW5nZU1hcHBpbmcobmV3IExpbmVSYW5nZSgxLCAxKSwgbmV3IExpbmVSYW5nZSgxLCAxKSk7XG4gICAgICAgIGNvbnN0IGRpZmZCZWZvcmVFbmRPZk1vdmVNb2RpZmllZCA9IGZpbmRMYXN0TW9ub3Rvbm91cyhjaGFuZ2VzLCBjID0+IGMubW9kaWZpZWQuc3RhcnRMaW5lTnVtYmVyIDwgbS5tb2RpZmllZC5lbmRMaW5lTnVtYmVyRXhjbHVzaXZlKTtcbiAgICAgICAgY29uc3QgZGlmZmVyZW50RGlmZnMgPSBkaWZmQmVmb3JlRW5kT2ZNb3ZlT3JpZ2luYWwgIT09IGRpZmZCZWZvcmVFbmRPZk1vdmVNb2RpZmllZDtcbiAgICAgICAgcmV0dXJuIGRpZmZlcmVudERpZmZzO1xuICAgIH0pO1xuICAgIHJldHVybiBtb3Zlcztcbn1cbiIsICIvKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICogIENvcHlyaWdodCAoYykgTWljcm9zb2Z0IENvcnBvcmF0aW9uLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICogIExpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgTGljZW5zZS4gU2VlIExpY2Vuc2UudHh0IGluIHRoZSBwcm9qZWN0IHJvb3QgZm9yIGxpY2Vuc2UgaW5mb3JtYXRpb24uXG4gKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKi9cbmltcG9ydCB7IGZvckVhY2hXaXRoTmVpZ2hib3JzIH0gZnJvbSAnLi4vLi4vLi4vLi4vYmFzZS9jb21tb24vYXJyYXlzLmpzJztcbmltcG9ydCB7IE9mZnNldFJhbmdlIH0gZnJvbSAnLi4vLi4vY29yZS9vZmZzZXRSYW5nZS5qcyc7XG5pbXBvcnQgeyBPZmZzZXRQYWlyLCBTZXF1ZW5jZURpZmYgfSBmcm9tICcuL2FsZ29yaXRobXMvZGlmZkFsZ29yaXRobS5qcyc7XG5leHBvcnQgZnVuY3Rpb24gb3B0aW1pemVTZXF1ZW5jZURpZmZzKHNlcXVlbmNlMSwgc2VxdWVuY2UyLCBzZXF1ZW5jZURpZmZzKSB7XG4gICAgbGV0IHJlc3VsdCA9IHNlcXVlbmNlRGlmZnM7XG4gICAgcmVzdWx0ID0gam9pblNlcXVlbmNlRGlmZnNCeVNoaWZ0aW5nKHNlcXVlbmNlMSwgc2VxdWVuY2UyLCByZXN1bHQpO1xuICAgIC8vIFNvbWV0aW1lcywgY2FsbGluZyB0aGlzIGZ1bmN0aW9uIHR3aWNlIGltcHJvdmVzIHRoZSByZXN1bHQuXG4gICAgLy8gVW5jb21tZW50IHRoZSBzZWNvbmQgaW52b2NhdGlvbiBhbmQgcnVuIHRoZSB0ZXN0cyB0byBzZWUgdGhlIGRpZmZlcmVuY2UuXG4gICAgcmVzdWx0ID0gam9pblNlcXVlbmNlRGlmZnNCeVNoaWZ0aW5nKHNlcXVlbmNlMSwgc2VxdWVuY2UyLCByZXN1bHQpO1xuICAgIHJlc3VsdCA9IHNoaWZ0U2VxdWVuY2VEaWZmcyhzZXF1ZW5jZTEsIHNlcXVlbmNlMiwgcmVzdWx0KTtcbiAgICByZXR1cm4gcmVzdWx0O1xufVxuLyoqXG4gKiBUaGlzIGZ1bmN0aW9uIGZpeGVzIGlzc3VlcyBsaWtlIHRoaXM6XG4gKiBgYGBcbiAqIGltcG9ydCB7IEJheiwgQmFyIH0gZnJvbSBcImZvb1wiO1xuICogYGBgXG4gKiA8LT5cbiAqIGBgYFxuICogaW1wb3J0IHsgQmF6LCBCYXIsIEZvbyB9IGZyb20gXCJmb29cIjtcbiAqIGBgYFxuICogQ29tcHV0ZWQgZGlmZjogWyB7QWRkIFwiLFwiIGFmdGVyIEJhcn0sIHtBZGQgXCJGb28gXCIgYWZ0ZXIgc3BhY2V9IH1cbiAqIEltcHJvdmVkIGRpZmY6IFt7QWRkIFwiLCBGb29cIiBhZnRlciBCYXJ9XVxuICovXG5mdW5jdGlvbiBqb2luU2VxdWVuY2VEaWZmc0J5U2hpZnRpbmcoc2VxdWVuY2UxLCBzZXF1ZW5jZTIsIHNlcXVlbmNlRGlmZnMpIHtcbiAgICBpZiAoc2VxdWVuY2VEaWZmcy5sZW5ndGggPT09IDApIHtcbiAgICAgICAgcmV0dXJuIHNlcXVlbmNlRGlmZnM7XG4gICAgfVxuICAgIGNvbnN0IHJlc3VsdCA9IFtdO1xuICAgIHJlc3VsdC5wdXNoKHNlcXVlbmNlRGlmZnNbMF0pO1xuICAgIC8vIEZpcnN0IG1vdmUgdGhlbSBhbGwgdG8gdGhlIGxlZnQgYXMgbXVjaCBhcyBwb3NzaWJsZSBhbmQgam9pbiB0aGVtIGlmIHBvc3NpYmxlXG4gICAgZm9yIChsZXQgaSA9IDE7IGkgPCBzZXF1ZW5jZURpZmZzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGNvbnN0IHByZXZSZXN1bHQgPSByZXN1bHRbcmVzdWx0Lmxlbmd0aCAtIDFdO1xuICAgICAgICBsZXQgY3VyID0gc2VxdWVuY2VEaWZmc1tpXTtcbiAgICAgICAgaWYgKGN1ci5zZXExUmFuZ2UuaXNFbXB0eSB8fCBjdXIuc2VxMlJhbmdlLmlzRW1wdHkpIHtcbiAgICAgICAgICAgIGNvbnN0IGxlbmd0aCA9IGN1ci5zZXExUmFuZ2Uuc3RhcnQgLSBwcmV2UmVzdWx0LnNlcTFSYW5nZS5lbmRFeGNsdXNpdmU7XG4gICAgICAgICAgICBsZXQgZDtcbiAgICAgICAgICAgIGZvciAoZCA9IDE7IGQgPD0gbGVuZ3RoOyBkKyspIHtcbiAgICAgICAgICAgICAgICBpZiAoc2VxdWVuY2UxLmdldEVsZW1lbnQoY3VyLnNlcTFSYW5nZS5zdGFydCAtIGQpICE9PSBzZXF1ZW5jZTEuZ2V0RWxlbWVudChjdXIuc2VxMVJhbmdlLmVuZEV4Y2x1c2l2ZSAtIGQpIHx8XG4gICAgICAgICAgICAgICAgICAgIHNlcXVlbmNlMi5nZXRFbGVtZW50KGN1ci5zZXEyUmFuZ2Uuc3RhcnQgLSBkKSAhPT0gc2VxdWVuY2UyLmdldEVsZW1lbnQoY3VyLnNlcTJSYW5nZS5lbmRFeGNsdXNpdmUgLSBkKSkge1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBkLS07XG4gICAgICAgICAgICBpZiAoZCA9PT0gbGVuZ3RoKSB7XG4gICAgICAgICAgICAgICAgLy8gTWVyZ2UgcHJldmlvdXMgYW5kIGN1cnJlbnQgZGlmZlxuICAgICAgICAgICAgICAgIHJlc3VsdFtyZXN1bHQubGVuZ3RoIC0gMV0gPSBuZXcgU2VxdWVuY2VEaWZmKG5ldyBPZmZzZXRSYW5nZShwcmV2UmVzdWx0LnNlcTFSYW5nZS5zdGFydCwgY3VyLnNlcTFSYW5nZS5lbmRFeGNsdXNpdmUgLSBsZW5ndGgpLCBuZXcgT2Zmc2V0UmFuZ2UocHJldlJlc3VsdC5zZXEyUmFuZ2Uuc3RhcnQsIGN1ci5zZXEyUmFuZ2UuZW5kRXhjbHVzaXZlIC0gbGVuZ3RoKSk7XG4gICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjdXIgPSBjdXIuZGVsdGEoLWQpO1xuICAgICAgICB9XG4gICAgICAgIHJlc3VsdC5wdXNoKGN1cik7XG4gICAgfVxuICAgIGNvbnN0IHJlc3VsdDIgPSBbXTtcbiAgICAvLyBUaGVuIG1vdmUgdGhlbSBhbGwgdG8gdGhlIHJpZ2h0IGFuZCBqb2luIHRoZW0gYWdhaW4gaWYgcG9zc2libGVcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IHJlc3VsdC5sZW5ndGggLSAxOyBpKyspIHtcbiAgICAgICAgY29uc3QgbmV4dFJlc3VsdCA9IHJlc3VsdFtpICsgMV07XG4gICAgICAgIGxldCBjdXIgPSByZXN1bHRbaV07XG4gICAgICAgIGlmIChjdXIuc2VxMVJhbmdlLmlzRW1wdHkgfHwgY3VyLnNlcTJSYW5nZS5pc0VtcHR5KSB7XG4gICAgICAgICAgICBjb25zdCBsZW5ndGggPSBuZXh0UmVzdWx0LnNlcTFSYW5nZS5zdGFydCAtIGN1ci5zZXExUmFuZ2UuZW5kRXhjbHVzaXZlO1xuICAgICAgICAgICAgbGV0IGQ7XG4gICAgICAgICAgICBmb3IgKGQgPSAwOyBkIDwgbGVuZ3RoOyBkKyspIHtcbiAgICAgICAgICAgICAgICBpZiAoIXNlcXVlbmNlMS5pc1N0cm9uZ2x5RXF1YWwoY3VyLnNlcTFSYW5nZS5zdGFydCArIGQsIGN1ci5zZXExUmFuZ2UuZW5kRXhjbHVzaXZlICsgZCkgfHxcbiAgICAgICAgICAgICAgICAgICAgIXNlcXVlbmNlMi5pc1N0cm9uZ2x5RXF1YWwoY3VyLnNlcTJSYW5nZS5zdGFydCArIGQsIGN1ci5zZXEyUmFuZ2UuZW5kRXhjbHVzaXZlICsgZCkpIHtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGQgPT09IGxlbmd0aCkge1xuICAgICAgICAgICAgICAgIC8vIE1lcmdlIHByZXZpb3VzIGFuZCBjdXJyZW50IGRpZmYsIHdyaXRlIHRvIHJlc3VsdCFcbiAgICAgICAgICAgICAgICByZXN1bHRbaSArIDFdID0gbmV3IFNlcXVlbmNlRGlmZihuZXcgT2Zmc2V0UmFuZ2UoY3VyLnNlcTFSYW5nZS5zdGFydCArIGxlbmd0aCwgbmV4dFJlc3VsdC5zZXExUmFuZ2UuZW5kRXhjbHVzaXZlKSwgbmV3IE9mZnNldFJhbmdlKGN1ci5zZXEyUmFuZ2Uuc3RhcnQgKyBsZW5ndGgsIG5leHRSZXN1bHQuc2VxMlJhbmdlLmVuZEV4Y2x1c2l2ZSkpO1xuICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGQgPiAwKSB7XG4gICAgICAgICAgICAgICAgY3VyID0gY3VyLmRlbHRhKGQpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJlc3VsdDIucHVzaChjdXIpO1xuICAgIH1cbiAgICBpZiAocmVzdWx0Lmxlbmd0aCA+IDApIHtcbiAgICAgICAgcmVzdWx0Mi5wdXNoKHJlc3VsdFtyZXN1bHQubGVuZ3RoIC0gMV0pO1xuICAgIH1cbiAgICByZXR1cm4gcmVzdWx0Mjtcbn1cbi8vIGFsaWduIGNoYXJhY3RlciBsZXZlbCBkaWZmcyBhdCB3aGl0ZXNwYWNlIGNoYXJhY3RlcnNcbi8vIGltcG9ydCB7IElCYXIgfSBmcm9tIFwiZm9vXCI7XG4vLyBpbXBvcnQgeyBJW0FyciwgSV1CYXIgfSBmcm9tIFwiZm9vXCI7XG4vLyAtPlxuLy8gaW1wb3J0IHsgW0lBcnIsIF1JQmFyIH0gZnJvbSBcImZvb1wiO1xuLy8gaW1wb3J0IHsgSVRyYW5zYWN0aW9uLCBvYnNlcnZhYmxlVmFsdWUsIHRyYW5zYWN0aW9uIH0gZnJvbSAndnMvYmFzZS9jb21tb24vb2JzZXJ2YWJsZSc7XG4vLyBpbXBvcnQgeyBJVHJhbnNhY3Rpb24sIG9ic2VydmFibGVbRnJvbUV2ZW50LCBvYnNlcnZhYmxlXVZhbHVlLCB0cmFuc2FjdGlvbiB9IGZyb20gJ3ZzL2Jhc2UvY29tbW9uL29ic2VydmFibGUnO1xuLy8gLT5cbi8vIGltcG9ydCB7IElUcmFuc2FjdGlvbiwgW29ic2VydmFibGVGcm9tRXZlbnQsIF1vYnNlcnZhYmxlVmFsdWUsIHRyYW5zYWN0aW9uIH0gZnJvbSAndnMvYmFzZS9jb21tb24vb2JzZXJ2YWJsZSc7XG4vLyBjb2xsZWN0QnJhY2tldHMobGV2ZWwgKyAxLCBsZXZlbFBlckJyYWNrZXRUeXBlKTtcbi8vIGNvbGxlY3RCcmFja2V0cyhsZXZlbCArIDEsIGxldmVsUGVyQnJhY2tldFsgKyAxLCBsZXZlbFBlckJyYWNrZXRdVHlwZSk7XG4vLyAtPlxuLy8gY29sbGVjdEJyYWNrZXRzKGxldmVsICsgMSwgW2xldmVsUGVyQnJhY2tldCArIDEsIF1sZXZlbFBlckJyYWNrZXRUeXBlKTtcbmZ1bmN0aW9uIHNoaWZ0U2VxdWVuY2VEaWZmcyhzZXF1ZW5jZTEsIHNlcXVlbmNlMiwgc2VxdWVuY2VEaWZmcykge1xuICAgIGlmICghc2VxdWVuY2UxLmdldEJvdW5kYXJ5U2NvcmUgfHwgIXNlcXVlbmNlMi5nZXRCb3VuZGFyeVNjb3JlKSB7XG4gICAgICAgIHJldHVybiBzZXF1ZW5jZURpZmZzO1xuICAgIH1cbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IHNlcXVlbmNlRGlmZnMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgY29uc3QgcHJldkRpZmYgPSAoaSA+IDAgPyBzZXF1ZW5jZURpZmZzW2kgLSAxXSA6IHVuZGVmaW5lZCk7XG4gICAgICAgIGNvbnN0IGRpZmYgPSBzZXF1ZW5jZURpZmZzW2ldO1xuICAgICAgICBjb25zdCBuZXh0RGlmZiA9IChpICsgMSA8IHNlcXVlbmNlRGlmZnMubGVuZ3RoID8gc2VxdWVuY2VEaWZmc1tpICsgMV0gOiB1bmRlZmluZWQpO1xuICAgICAgICBjb25zdCBzZXExVmFsaWRSYW5nZSA9IG5ldyBPZmZzZXRSYW5nZShwcmV2RGlmZiA/IHByZXZEaWZmLnNlcTFSYW5nZS5lbmRFeGNsdXNpdmUgKyAxIDogMCwgbmV4dERpZmYgPyBuZXh0RGlmZi5zZXExUmFuZ2Uuc3RhcnQgLSAxIDogc2VxdWVuY2UxLmxlbmd0aCk7XG4gICAgICAgIGNvbnN0IHNlcTJWYWxpZFJhbmdlID0gbmV3IE9mZnNldFJhbmdlKHByZXZEaWZmID8gcHJldkRpZmYuc2VxMlJhbmdlLmVuZEV4Y2x1c2l2ZSArIDEgOiAwLCBuZXh0RGlmZiA/IG5leHREaWZmLnNlcTJSYW5nZS5zdGFydCAtIDEgOiBzZXF1ZW5jZTIubGVuZ3RoKTtcbiAgICAgICAgaWYgKGRpZmYuc2VxMVJhbmdlLmlzRW1wdHkpIHtcbiAgICAgICAgICAgIHNlcXVlbmNlRGlmZnNbaV0gPSBzaGlmdERpZmZUb0JldHRlclBvc2l0aW9uKGRpZmYsIHNlcXVlbmNlMSwgc2VxdWVuY2UyLCBzZXExVmFsaWRSYW5nZSwgc2VxMlZhbGlkUmFuZ2UpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKGRpZmYuc2VxMlJhbmdlLmlzRW1wdHkpIHtcbiAgICAgICAgICAgIHNlcXVlbmNlRGlmZnNbaV0gPSBzaGlmdERpZmZUb0JldHRlclBvc2l0aW9uKGRpZmYuc3dhcCgpLCBzZXF1ZW5jZTIsIHNlcXVlbmNlMSwgc2VxMlZhbGlkUmFuZ2UsIHNlcTFWYWxpZFJhbmdlKS5zd2FwKCk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHNlcXVlbmNlRGlmZnM7XG59XG5mdW5jdGlvbiBzaGlmdERpZmZUb0JldHRlclBvc2l0aW9uKGRpZmYsIHNlcXVlbmNlMSwgc2VxdWVuY2UyLCBzZXExVmFsaWRSYW5nZSwgc2VxMlZhbGlkUmFuZ2UpIHtcbiAgICBjb25zdCBtYXhTaGlmdExpbWl0ID0gMTAwOyAvLyBUbyBwcmV2ZW50IHBlcmZvcm1hbmNlIGlzc3Vlc1xuICAgIC8vIGRvbid0IHRvdWNoIHByZXZpb3VzIG9yIG5leHQhXG4gICAgbGV0IGRlbHRhQmVmb3JlID0gMTtcbiAgICB3aGlsZSAoZGlmZi5zZXExUmFuZ2Uuc3RhcnQgLSBkZWx0YUJlZm9yZSA+PSBzZXExVmFsaWRSYW5nZS5zdGFydCAmJlxuICAgICAgICBkaWZmLnNlcTJSYW5nZS5zdGFydCAtIGRlbHRhQmVmb3JlID49IHNlcTJWYWxpZFJhbmdlLnN0YXJ0ICYmXG4gICAgICAgIHNlcXVlbmNlMi5pc1N0cm9uZ2x5RXF1YWwoZGlmZi5zZXEyUmFuZ2Uuc3RhcnQgLSBkZWx0YUJlZm9yZSwgZGlmZi5zZXEyUmFuZ2UuZW5kRXhjbHVzaXZlIC0gZGVsdGFCZWZvcmUpICYmIGRlbHRhQmVmb3JlIDwgbWF4U2hpZnRMaW1pdCkge1xuICAgICAgICBkZWx0YUJlZm9yZSsrO1xuICAgIH1cbiAgICBkZWx0YUJlZm9yZS0tO1xuICAgIGxldCBkZWx0YUFmdGVyID0gMDtcbiAgICB3aGlsZSAoZGlmZi5zZXExUmFuZ2Uuc3RhcnQgKyBkZWx0YUFmdGVyIDwgc2VxMVZhbGlkUmFuZ2UuZW5kRXhjbHVzaXZlICYmXG4gICAgICAgIGRpZmYuc2VxMlJhbmdlLmVuZEV4Y2x1c2l2ZSArIGRlbHRhQWZ0ZXIgPCBzZXEyVmFsaWRSYW5nZS5lbmRFeGNsdXNpdmUgJiZcbiAgICAgICAgc2VxdWVuY2UyLmlzU3Ryb25nbHlFcXVhbChkaWZmLnNlcTJSYW5nZS5zdGFydCArIGRlbHRhQWZ0ZXIsIGRpZmYuc2VxMlJhbmdlLmVuZEV4Y2x1c2l2ZSArIGRlbHRhQWZ0ZXIpICYmIGRlbHRhQWZ0ZXIgPCBtYXhTaGlmdExpbWl0KSB7XG4gICAgICAgIGRlbHRhQWZ0ZXIrKztcbiAgICB9XG4gICAgaWYgKGRlbHRhQmVmb3JlID09PSAwICYmIGRlbHRhQWZ0ZXIgPT09IDApIHtcbiAgICAgICAgcmV0dXJuIGRpZmY7XG4gICAgfVxuICAgIC8vIFZpc3VhbGl6ZSBgW3NlcXVlbmNlMS50ZXh0LCBkaWZmLnNlcTFSYW5nZS5zdGFydCArIGRlbHRhQWZ0ZXJdYFxuICAgIC8vIGFuZCBgW3NlcXVlbmNlMi50ZXh0LCBkaWZmLnNlcTJSYW5nZS5zdGFydCArIGRlbHRhQWZ0ZXIsIGRpZmYuc2VxMlJhbmdlLmVuZEV4Y2x1c2l2ZSArIGRlbHRhQWZ0ZXJdYFxuICAgIGxldCBiZXN0RGVsdGEgPSAwO1xuICAgIGxldCBiZXN0U2NvcmUgPSAtMTtcbiAgICAvLyBmaW5kIGJlc3Qgc2NvcmVkIGRlbHRhXG4gICAgZm9yIChsZXQgZGVsdGEgPSAtZGVsdGFCZWZvcmU7IGRlbHRhIDw9IGRlbHRhQWZ0ZXI7IGRlbHRhKyspIHtcbiAgICAgICAgY29uc3Qgc2VxMk9mZnNldFN0YXJ0ID0gZGlmZi5zZXEyUmFuZ2Uuc3RhcnQgKyBkZWx0YTtcbiAgICAgICAgY29uc3Qgc2VxMk9mZnNldEVuZEV4Y2x1c2l2ZSA9IGRpZmYuc2VxMlJhbmdlLmVuZEV4Y2x1c2l2ZSArIGRlbHRhO1xuICAgICAgICBjb25zdCBzZXExT2Zmc2V0ID0gZGlmZi5zZXExUmFuZ2Uuc3RhcnQgKyBkZWx0YTtcbiAgICAgICAgY29uc3Qgc2NvcmUgPSBzZXF1ZW5jZTEuZ2V0Qm91bmRhcnlTY29yZShzZXExT2Zmc2V0KSArIHNlcXVlbmNlMi5nZXRCb3VuZGFyeVNjb3JlKHNlcTJPZmZzZXRTdGFydCkgKyBzZXF1ZW5jZTIuZ2V0Qm91bmRhcnlTY29yZShzZXEyT2Zmc2V0RW5kRXhjbHVzaXZlKTtcbiAgICAgICAgaWYgKHNjb3JlID4gYmVzdFNjb3JlKSB7XG4gICAgICAgICAgICBiZXN0U2NvcmUgPSBzY29yZTtcbiAgICAgICAgICAgIGJlc3REZWx0YSA9IGRlbHRhO1xuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiBkaWZmLmRlbHRhKGJlc3REZWx0YSk7XG59XG5leHBvcnQgZnVuY3Rpb24gcmVtb3ZlU2hvcnRNYXRjaGVzKHNlcXVlbmNlMSwgc2VxdWVuY2UyLCBzZXF1ZW5jZURpZmZzKSB7XG4gICAgY29uc3QgcmVzdWx0ID0gW107XG4gICAgZm9yIChjb25zdCBzIG9mIHNlcXVlbmNlRGlmZnMpIHtcbiAgICAgICAgY29uc3QgbGFzdCA9IHJlc3VsdFtyZXN1bHQubGVuZ3RoIC0gMV07XG4gICAgICAgIGlmICghbGFzdCkge1xuICAgICAgICAgICAgcmVzdWx0LnB1c2gocyk7XG4gICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgfVxuICAgICAgICBpZiAocy5zZXExUmFuZ2Uuc3RhcnQgLSBsYXN0LnNlcTFSYW5nZS5lbmRFeGNsdXNpdmUgPD0gMiB8fCBzLnNlcTJSYW5nZS5zdGFydCAtIGxhc3Quc2VxMlJhbmdlLmVuZEV4Y2x1c2l2ZSA8PSAyKSB7XG4gICAgICAgICAgICByZXN1bHRbcmVzdWx0Lmxlbmd0aCAtIDFdID0gbmV3IFNlcXVlbmNlRGlmZihsYXN0LnNlcTFSYW5nZS5qb2luKHMuc2VxMVJhbmdlKSwgbGFzdC5zZXEyUmFuZ2Uuam9pbihzLnNlcTJSYW5nZSkpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgcmVzdWx0LnB1c2gocyk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHJlc3VsdDtcbn1cbmV4cG9ydCBmdW5jdGlvbiBleHRlbmREaWZmc1RvRW50aXJlV29yZElmQXBwcm9wcmlhdGUoc2VxdWVuY2UxLCBzZXF1ZW5jZTIsIHNlcXVlbmNlRGlmZnMpIHtcbiAgICBjb25zdCBlcXVhbE1hcHBpbmdzID0gU2VxdWVuY2VEaWZmLmludmVydChzZXF1ZW5jZURpZmZzLCBzZXF1ZW5jZTEubGVuZ3RoKTtcbiAgICBjb25zdCBhZGRpdGlvbmFsID0gW107XG4gICAgbGV0IGxhc3RQb2ludCA9IG5ldyBPZmZzZXRQYWlyKDAsIDApO1xuICAgIGZ1bmN0aW9uIHNjYW5Xb3JkKHBhaXIsIGVxdWFsTWFwcGluZykge1xuICAgICAgICBpZiAocGFpci5vZmZzZXQxIDwgbGFzdFBvaW50Lm9mZnNldDEgfHwgcGFpci5vZmZzZXQyIDwgbGFzdFBvaW50Lm9mZnNldDIpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCB3MSA9IHNlcXVlbmNlMS5maW5kV29yZENvbnRhaW5pbmcocGFpci5vZmZzZXQxKTtcbiAgICAgICAgY29uc3QgdzIgPSBzZXF1ZW5jZTIuZmluZFdvcmRDb250YWluaW5nKHBhaXIub2Zmc2V0Mik7XG4gICAgICAgIGlmICghdzEgfHwgIXcyKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgbGV0IHcgPSBuZXcgU2VxdWVuY2VEaWZmKHcxLCB3Mik7XG4gICAgICAgIGNvbnN0IGVxdWFsUGFydCA9IHcuaW50ZXJzZWN0KGVxdWFsTWFwcGluZyk7XG4gICAgICAgIGxldCBlcXVhbENoYXJzMSA9IGVxdWFsUGFydC5zZXExUmFuZ2UubGVuZ3RoO1xuICAgICAgICBsZXQgZXF1YWxDaGFyczIgPSBlcXVhbFBhcnQuc2VxMlJhbmdlLmxlbmd0aDtcbiAgICAgICAgLy8gVGhlIHdvcmRzIGRvIG5vdCB0b3VjaCBwcmV2aW91cyBlcXVhbHMgbWFwcGluZ3MsIGFzIHdlIHdvdWxkIGhhdmUgcHJvY2Vzc2VkIHRoZW0gYWxyZWFkeS5cbiAgICAgICAgLy8gQnV0IHRoZXkgbWlnaHQgdG91Y2ggdGhlIG5leHQgb25lcy5cbiAgICAgICAgd2hpbGUgKGVxdWFsTWFwcGluZ3MubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgY29uc3QgbmV4dCA9IGVxdWFsTWFwcGluZ3NbMF07XG4gICAgICAgICAgICBjb25zdCBpbnRlcnNlY3RzID0gbmV4dC5zZXExUmFuZ2UuaW50ZXJzZWN0cyh3LnNlcTFSYW5nZSkgfHwgbmV4dC5zZXEyUmFuZ2UuaW50ZXJzZWN0cyh3LnNlcTJSYW5nZSk7XG4gICAgICAgICAgICBpZiAoIWludGVyc2VjdHMpIHtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNvbnN0IHYxID0gc2VxdWVuY2UxLmZpbmRXb3JkQ29udGFpbmluZyhuZXh0LnNlcTFSYW5nZS5zdGFydCk7XG4gICAgICAgICAgICBjb25zdCB2MiA9IHNlcXVlbmNlMi5maW5kV29yZENvbnRhaW5pbmcobmV4dC5zZXEyUmFuZ2Uuc3RhcnQpO1xuICAgICAgICAgICAgLy8gQmVjYXVzZSB0aGVyZSBpcyBhbiBpbnRlcnNlY3Rpb24sIHdlIGtub3cgdGhhdCB0aGUgd29yZHMgYXJlIG5vdCBlbXB0eS5cbiAgICAgICAgICAgIGNvbnN0IHYgPSBuZXcgU2VxdWVuY2VEaWZmKHYxLCB2Mik7XG4gICAgICAgICAgICBjb25zdCBlcXVhbFBhcnQgPSB2LmludGVyc2VjdChuZXh0KTtcbiAgICAgICAgICAgIGVxdWFsQ2hhcnMxICs9IGVxdWFsUGFydC5zZXExUmFuZ2UubGVuZ3RoO1xuICAgICAgICAgICAgZXF1YWxDaGFyczIgKz0gZXF1YWxQYXJ0LnNlcTJSYW5nZS5sZW5ndGg7XG4gICAgICAgICAgICB3ID0gdy5qb2luKHYpO1xuICAgICAgICAgICAgaWYgKHcuc2VxMVJhbmdlLmVuZEV4Y2x1c2l2ZSA+PSBuZXh0LnNlcTFSYW5nZS5lbmRFeGNsdXNpdmUpIHtcbiAgICAgICAgICAgICAgICAvLyBUaGUgd29yZCBleHRlbmRzIGJleW9uZCB0aGUgbmV4dCBlcXVhbCBtYXBwaW5nLlxuICAgICAgICAgICAgICAgIGVxdWFsTWFwcGluZ3Muc2hpZnQoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGlmIChlcXVhbENoYXJzMSArIGVxdWFsQ2hhcnMyIDwgKHcuc2VxMVJhbmdlLmxlbmd0aCArIHcuc2VxMlJhbmdlLmxlbmd0aCkgKiAyIC8gMykge1xuICAgICAgICAgICAgYWRkaXRpb25hbC5wdXNoKHcpO1xuICAgICAgICB9XG4gICAgICAgIGxhc3RQb2ludCA9IHcuZ2V0RW5kRXhjbHVzaXZlcygpO1xuICAgIH1cbiAgICB3aGlsZSAoZXF1YWxNYXBwaW5ncy5sZW5ndGggPiAwKSB7XG4gICAgICAgIGNvbnN0IG5leHQgPSBlcXVhbE1hcHBpbmdzLnNoaWZ0KCk7XG4gICAgICAgIGlmIChuZXh0LnNlcTFSYW5nZS5pc0VtcHR5KSB7XG4gICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgfVxuICAgICAgICBzY2FuV29yZChuZXh0LmdldFN0YXJ0cygpLCBuZXh0KTtcbiAgICAgICAgLy8gVGhlIGVxdWFsIHBhcnRzIGFyZSBub3QgZW1wdHksIHNvIC0xIGdpdmVzIHVzIGEgY2hhcmFjdGVyIHRoYXQgaXMgZXF1YWwgaW4gYm90aCBwYXJ0cy5cbiAgICAgICAgc2NhbldvcmQobmV4dC5nZXRFbmRFeGNsdXNpdmVzKCkuZGVsdGEoLTEpLCBuZXh0KTtcbiAgICB9XG4gICAgY29uc3QgbWVyZ2VkID0gbWVyZ2VTZXF1ZW5jZURpZmZzKHNlcXVlbmNlRGlmZnMsIGFkZGl0aW9uYWwpO1xuICAgIHJldHVybiBtZXJnZWQ7XG59XG5mdW5jdGlvbiBtZXJnZVNlcXVlbmNlRGlmZnMoc2VxdWVuY2VEaWZmczEsIHNlcXVlbmNlRGlmZnMyKSB7XG4gICAgY29uc3QgcmVzdWx0ID0gW107XG4gICAgd2hpbGUgKHNlcXVlbmNlRGlmZnMxLmxlbmd0aCA+IDAgfHwgc2VxdWVuY2VEaWZmczIubGVuZ3RoID4gMCkge1xuICAgICAgICBjb25zdCBzZDEgPSBzZXF1ZW5jZURpZmZzMVswXTtcbiAgICAgICAgY29uc3Qgc2QyID0gc2VxdWVuY2VEaWZmczJbMF07XG4gICAgICAgIGxldCBuZXh0O1xuICAgICAgICBpZiAoc2QxICYmICghc2QyIHx8IHNkMS5zZXExUmFuZ2Uuc3RhcnQgPCBzZDIuc2VxMVJhbmdlLnN0YXJ0KSkge1xuICAgICAgICAgICAgbmV4dCA9IHNlcXVlbmNlRGlmZnMxLnNoaWZ0KCk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBuZXh0ID0gc2VxdWVuY2VEaWZmczIuc2hpZnQoKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAocmVzdWx0Lmxlbmd0aCA+IDAgJiYgcmVzdWx0W3Jlc3VsdC5sZW5ndGggLSAxXS5zZXExUmFuZ2UuZW5kRXhjbHVzaXZlID49IG5leHQuc2VxMVJhbmdlLnN0YXJ0KSB7XG4gICAgICAgICAgICByZXN1bHRbcmVzdWx0Lmxlbmd0aCAtIDFdID0gcmVzdWx0W3Jlc3VsdC5sZW5ndGggLSAxXS5qb2luKG5leHQpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgcmVzdWx0LnB1c2gobmV4dCk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHJlc3VsdDtcbn1cbmV4cG9ydCBmdW5jdGlvbiByZW1vdmVWZXJ5U2hvcnRNYXRjaGluZ0xpbmVzQmV0d2VlbkRpZmZzKHNlcXVlbmNlMSwgX3NlcXVlbmNlMiwgc2VxdWVuY2VEaWZmcykge1xuICAgIGxldCBkaWZmcyA9IHNlcXVlbmNlRGlmZnM7XG4gICAgaWYgKGRpZmZzLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICByZXR1cm4gZGlmZnM7XG4gICAgfVxuICAgIGxldCBjb3VudGVyID0gMDtcbiAgICBsZXQgc2hvdWxkUmVwZWF0O1xuICAgIGRvIHtcbiAgICAgICAgc2hvdWxkUmVwZWF0ID0gZmFsc2U7XG4gICAgICAgIGNvbnN0IHJlc3VsdCA9IFtcbiAgICAgICAgICAgIGRpZmZzWzBdXG4gICAgICAgIF07XG4gICAgICAgIGZvciAobGV0IGkgPSAxOyBpIDwgZGlmZnMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIGNvbnN0IGN1ciA9IGRpZmZzW2ldO1xuICAgICAgICAgICAgY29uc3QgbGFzdFJlc3VsdCA9IHJlc3VsdFtyZXN1bHQubGVuZ3RoIC0gMV07XG4gICAgICAgICAgICBmdW5jdGlvbiBzaG91bGRKb2luRGlmZnMoYmVmb3JlLCBhZnRlcikge1xuICAgICAgICAgICAgICAgIGNvbnN0IHVuY2hhbmdlZFJhbmdlID0gbmV3IE9mZnNldFJhbmdlKGxhc3RSZXN1bHQuc2VxMVJhbmdlLmVuZEV4Y2x1c2l2ZSwgY3VyLnNlcTFSYW5nZS5zdGFydCk7XG4gICAgICAgICAgICAgICAgY29uc3QgdW5jaGFuZ2VkVGV4dCA9IHNlcXVlbmNlMS5nZXRUZXh0KHVuY2hhbmdlZFJhbmdlKTtcbiAgICAgICAgICAgICAgICBjb25zdCB1bmNoYW5nZWRUZXh0V2l0aG91dFdzID0gdW5jaGFuZ2VkVGV4dC5yZXBsYWNlKC9cXHMvZywgJycpO1xuICAgICAgICAgICAgICAgIGlmICh1bmNoYW5nZWRUZXh0V2l0aG91dFdzLmxlbmd0aCA8PSA0XG4gICAgICAgICAgICAgICAgICAgICYmIChiZWZvcmUuc2VxMVJhbmdlLmxlbmd0aCArIGJlZm9yZS5zZXEyUmFuZ2UubGVuZ3RoID4gNSB8fCBhZnRlci5zZXExUmFuZ2UubGVuZ3RoICsgYWZ0ZXIuc2VxMlJhbmdlLmxlbmd0aCA+IDUpKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjb25zdCBzaG91bGRKb2luID0gc2hvdWxkSm9pbkRpZmZzKGxhc3RSZXN1bHQsIGN1cik7XG4gICAgICAgICAgICBpZiAoc2hvdWxkSm9pbikge1xuICAgICAgICAgICAgICAgIHNob3VsZFJlcGVhdCA9IHRydWU7XG4gICAgICAgICAgICAgICAgcmVzdWx0W3Jlc3VsdC5sZW5ndGggLSAxXSA9IHJlc3VsdFtyZXN1bHQubGVuZ3RoIC0gMV0uam9pbihjdXIpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgcmVzdWx0LnB1c2goY3VyKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBkaWZmcyA9IHJlc3VsdDtcbiAgICB9IHdoaWxlIChjb3VudGVyKysgPCAxMCAmJiBzaG91bGRSZXBlYXQpO1xuICAgIHJldHVybiBkaWZmcztcbn1cbmV4cG9ydCBmdW5jdGlvbiByZW1vdmVWZXJ5U2hvcnRNYXRjaGluZ1RleHRCZXR3ZWVuTG9uZ0RpZmZzKHNlcXVlbmNlMSwgc2VxdWVuY2UyLCBzZXF1ZW5jZURpZmZzKSB7XG4gICAgbGV0IGRpZmZzID0gc2VxdWVuY2VEaWZmcztcbiAgICBpZiAoZGlmZnMubGVuZ3RoID09PSAwKSB7XG4gICAgICAgIHJldHVybiBkaWZmcztcbiAgICB9XG4gICAgbGV0IGNvdW50ZXIgPSAwO1xuICAgIGxldCBzaG91bGRSZXBlYXQ7XG4gICAgZG8ge1xuICAgICAgICBzaG91bGRSZXBlYXQgPSBmYWxzZTtcbiAgICAgICAgY29uc3QgcmVzdWx0ID0gW1xuICAgICAgICAgICAgZGlmZnNbMF1cbiAgICAgICAgXTtcbiAgICAgICAgZm9yIChsZXQgaSA9IDE7IGkgPCBkaWZmcy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgY29uc3QgY3VyID0gZGlmZnNbaV07XG4gICAgICAgICAgICBjb25zdCBsYXN0UmVzdWx0ID0gcmVzdWx0W3Jlc3VsdC5sZW5ndGggLSAxXTtcbiAgICAgICAgICAgIGZ1bmN0aW9uIHNob3VsZEpvaW5EaWZmcyhiZWZvcmUsIGFmdGVyKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgdW5jaGFuZ2VkUmFuZ2UgPSBuZXcgT2Zmc2V0UmFuZ2UobGFzdFJlc3VsdC5zZXExUmFuZ2UuZW5kRXhjbHVzaXZlLCBjdXIuc2VxMVJhbmdlLnN0YXJ0KTtcbiAgICAgICAgICAgICAgICBjb25zdCB1bmNoYW5nZWRMaW5lQ291bnQgPSBzZXF1ZW5jZTEuY291bnRMaW5lc0luKHVuY2hhbmdlZFJhbmdlKTtcbiAgICAgICAgICAgICAgICBpZiAodW5jaGFuZ2VkTGluZUNvdW50ID4gNSB8fCB1bmNoYW5nZWRSYW5nZS5sZW5ndGggPiA1MDApIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBjb25zdCB1bmNoYW5nZWRUZXh0ID0gc2VxdWVuY2UxLmdldFRleHQodW5jaGFuZ2VkUmFuZ2UpLnRyaW0oKTtcbiAgICAgICAgICAgICAgICBpZiAodW5jaGFuZ2VkVGV4dC5sZW5ndGggPiAyMCB8fCB1bmNoYW5nZWRUZXh0LnNwbGl0KC9cXHJcXG58XFxyfFxcbi8pLmxlbmd0aCA+IDEpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBjb25zdCBiZWZvcmVMaW5lQ291bnQxID0gc2VxdWVuY2UxLmNvdW50TGluZXNJbihiZWZvcmUuc2VxMVJhbmdlKTtcbiAgICAgICAgICAgICAgICBjb25zdCBiZWZvcmVTZXExTGVuZ3RoID0gYmVmb3JlLnNlcTFSYW5nZS5sZW5ndGg7XG4gICAgICAgICAgICAgICAgY29uc3QgYmVmb3JlTGluZUNvdW50MiA9IHNlcXVlbmNlMi5jb3VudExpbmVzSW4oYmVmb3JlLnNlcTJSYW5nZSk7XG4gICAgICAgICAgICAgICAgY29uc3QgYmVmb3JlU2VxMkxlbmd0aCA9IGJlZm9yZS5zZXEyUmFuZ2UubGVuZ3RoO1xuICAgICAgICAgICAgICAgIGNvbnN0IGFmdGVyTGluZUNvdW50MSA9IHNlcXVlbmNlMS5jb3VudExpbmVzSW4oYWZ0ZXIuc2VxMVJhbmdlKTtcbiAgICAgICAgICAgICAgICBjb25zdCBhZnRlclNlcTFMZW5ndGggPSBhZnRlci5zZXExUmFuZ2UubGVuZ3RoO1xuICAgICAgICAgICAgICAgIGNvbnN0IGFmdGVyTGluZUNvdW50MiA9IHNlcXVlbmNlMi5jb3VudExpbmVzSW4oYWZ0ZXIuc2VxMlJhbmdlKTtcbiAgICAgICAgICAgICAgICBjb25zdCBhZnRlclNlcTJMZW5ndGggPSBhZnRlci5zZXEyUmFuZ2UubGVuZ3RoO1xuICAgICAgICAgICAgICAgIC8vIFRPRE86IE1heWJlIGEgbmV1cmFsIG5ldCBjYW4gYmUgdXNlZCB0byBkZXJpdmUgdGhlIHJlc3VsdCBmcm9tIHRoZXNlIG51bWJlcnNcbiAgICAgICAgICAgICAgICBjb25zdCBtYXggPSAyICogNDAgKyA1MDtcbiAgICAgICAgICAgICAgICBmdW5jdGlvbiBjYXAodikge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gTWF0aC5taW4odiwgbWF4KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKE1hdGgucG93KE1hdGgucG93KGNhcChiZWZvcmVMaW5lQ291bnQxICogNDAgKyBiZWZvcmVTZXExTGVuZ3RoKSwgMS41KSArIE1hdGgucG93KGNhcChiZWZvcmVMaW5lQ291bnQyICogNDAgKyBiZWZvcmVTZXEyTGVuZ3RoKSwgMS41KSwgMS41KVxuICAgICAgICAgICAgICAgICAgICArIE1hdGgucG93KE1hdGgucG93KGNhcChhZnRlckxpbmVDb3VudDEgKiA0MCArIGFmdGVyU2VxMUxlbmd0aCksIDEuNSkgKyBNYXRoLnBvdyhjYXAoYWZ0ZXJMaW5lQ291bnQyICogNDAgKyBhZnRlclNlcTJMZW5ndGgpLCAxLjUpLCAxLjUpID4gKChtYXggKiogMS41KSAqKiAxLjUpICogMS4zKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjb25zdCBzaG91bGRKb2luID0gc2hvdWxkSm9pbkRpZmZzKGxhc3RSZXN1bHQsIGN1cik7XG4gICAgICAgICAgICBpZiAoc2hvdWxkSm9pbikge1xuICAgICAgICAgICAgICAgIHNob3VsZFJlcGVhdCA9IHRydWU7XG4gICAgICAgICAgICAgICAgcmVzdWx0W3Jlc3VsdC5sZW5ndGggLSAxXSA9IHJlc3VsdFtyZXN1bHQubGVuZ3RoIC0gMV0uam9pbihjdXIpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgcmVzdWx0LnB1c2goY3VyKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBkaWZmcyA9IHJlc3VsdDtcbiAgICB9IHdoaWxlIChjb3VudGVyKysgPCAxMCAmJiBzaG91bGRSZXBlYXQpO1xuICAgIGNvbnN0IG5ld0RpZmZzID0gW107XG4gICAgLy8gUmVtb3ZlIHNob3J0IHN1ZmZpeGVzL3ByZWZpeGVzXG4gICAgZm9yRWFjaFdpdGhOZWlnaGJvcnMoZGlmZnMsIChwcmV2LCBjdXIsIG5leHQpID0+IHtcbiAgICAgICAgbGV0IG5ld0RpZmYgPSBjdXI7XG4gICAgICAgIGZ1bmN0aW9uIHNob3VsZE1hcmtBc0NoYW5nZWQodGV4dCkge1xuICAgICAgICAgICAgcmV0dXJuIHRleHQubGVuZ3RoID4gMCAmJiB0ZXh0LnRyaW0oKS5sZW5ndGggPD0gMyAmJiBjdXIuc2VxMVJhbmdlLmxlbmd0aCArIGN1ci5zZXEyUmFuZ2UubGVuZ3RoID4gMTAwO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IGZ1bGxSYW5nZTEgPSBzZXF1ZW5jZTEuZXh0ZW5kVG9GdWxsTGluZXMoY3VyLnNlcTFSYW5nZSk7XG4gICAgICAgIGNvbnN0IHByZWZpeCA9IHNlcXVlbmNlMS5nZXRUZXh0KG5ldyBPZmZzZXRSYW5nZShmdWxsUmFuZ2UxLnN0YXJ0LCBjdXIuc2VxMVJhbmdlLnN0YXJ0KSk7XG4gICAgICAgIGlmIChzaG91bGRNYXJrQXNDaGFuZ2VkKHByZWZpeCkpIHtcbiAgICAgICAgICAgIG5ld0RpZmYgPSBuZXdEaWZmLmRlbHRhU3RhcnQoLXByZWZpeC5sZW5ndGgpO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IHN1ZmZpeCA9IHNlcXVlbmNlMS5nZXRUZXh0KG5ldyBPZmZzZXRSYW5nZShjdXIuc2VxMVJhbmdlLmVuZEV4Y2x1c2l2ZSwgZnVsbFJhbmdlMS5lbmRFeGNsdXNpdmUpKTtcbiAgICAgICAgaWYgKHNob3VsZE1hcmtBc0NoYW5nZWQoc3VmZml4KSkge1xuICAgICAgICAgICAgbmV3RGlmZiA9IG5ld0RpZmYuZGVsdGFFbmQoc3VmZml4Lmxlbmd0aCk7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgYXZhaWxhYmxlU3BhY2UgPSBTZXF1ZW5jZURpZmYuZnJvbU9mZnNldFBhaXJzKHByZXYgPyBwcmV2LmdldEVuZEV4Y2x1c2l2ZXMoKSA6IE9mZnNldFBhaXIuemVybywgbmV4dCA/IG5leHQuZ2V0U3RhcnRzKCkgOiBPZmZzZXRQYWlyLm1heCk7XG4gICAgICAgIGNvbnN0IHJlc3VsdCA9IG5ld0RpZmYuaW50ZXJzZWN0KGF2YWlsYWJsZVNwYWNlKTtcbiAgICAgICAgaWYgKG5ld0RpZmZzLmxlbmd0aCA+IDAgJiYgcmVzdWx0LmdldFN0YXJ0cygpLmVxdWFscyhuZXdEaWZmc1tuZXdEaWZmcy5sZW5ndGggLSAxXS5nZXRFbmRFeGNsdXNpdmVzKCkpKSB7XG4gICAgICAgICAgICBuZXdEaWZmc1tuZXdEaWZmcy5sZW5ndGggLSAxXSA9IG5ld0RpZmZzW25ld0RpZmZzLmxlbmd0aCAtIDFdLmpvaW4ocmVzdWx0KTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIG5ld0RpZmZzLnB1c2gocmVzdWx0KTtcbiAgICAgICAgfVxuICAgIH0pO1xuICAgIHJldHVybiBuZXdEaWZmcztcbn1cbiIsICIvKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICogIENvcHlyaWdodCAoYykgTWljcm9zb2Z0IENvcnBvcmF0aW9uLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICogIExpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgTGljZW5zZS4gU2VlIExpY2Vuc2UudHh0IGluIHRoZSBwcm9qZWN0IHJvb3QgZm9yIGxpY2Vuc2UgaW5mb3JtYXRpb24uXG4gKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKi9cbmV4cG9ydCBjbGFzcyBMaW5lU2VxdWVuY2Uge1xuICAgIGNvbnN0cnVjdG9yKHRyaW1tZWRIYXNoLCBsaW5lcykge1xuICAgICAgICB0aGlzLnRyaW1tZWRIYXNoID0gdHJpbW1lZEhhc2g7XG4gICAgICAgIHRoaXMubGluZXMgPSBsaW5lcztcbiAgICB9XG4gICAgZ2V0RWxlbWVudChvZmZzZXQpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMudHJpbW1lZEhhc2hbb2Zmc2V0XTtcbiAgICB9XG4gICAgZ2V0IGxlbmd0aCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMudHJpbW1lZEhhc2gubGVuZ3RoO1xuICAgIH1cbiAgICBnZXRCb3VuZGFyeVNjb3JlKGxlbmd0aCkge1xuICAgICAgICBjb25zdCBpbmRlbnRhdGlvbkJlZm9yZSA9IGxlbmd0aCA9PT0gMCA/IDAgOiBnZXRJbmRlbnRhdGlvbih0aGlzLmxpbmVzW2xlbmd0aCAtIDFdKTtcbiAgICAgICAgY29uc3QgaW5kZW50YXRpb25BZnRlciA9IGxlbmd0aCA9PT0gdGhpcy5saW5lcy5sZW5ndGggPyAwIDogZ2V0SW5kZW50YXRpb24odGhpcy5saW5lc1tsZW5ndGhdKTtcbiAgICAgICAgcmV0dXJuIDEwMDAgLSAoaW5kZW50YXRpb25CZWZvcmUgKyBpbmRlbnRhdGlvbkFmdGVyKTtcbiAgICB9XG4gICAgZ2V0VGV4dChyYW5nZSkge1xuICAgICAgICByZXR1cm4gdGhpcy5saW5lcy5zbGljZShyYW5nZS5zdGFydCwgcmFuZ2UuZW5kRXhjbHVzaXZlKS5qb2luKCdcXG4nKTtcbiAgICB9XG4gICAgaXNTdHJvbmdseUVxdWFsKG9mZnNldDEsIG9mZnNldDIpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMubGluZXNbb2Zmc2V0MV0gPT09IHRoaXMubGluZXNbb2Zmc2V0Ml07XG4gICAgfVxufVxuZnVuY3Rpb24gZ2V0SW5kZW50YXRpb24oc3RyKSB7XG4gICAgbGV0IGkgPSAwO1xuICAgIHdoaWxlIChpIDwgc3RyLmxlbmd0aCAmJiAoc3RyLmNoYXJDb2RlQXQoaSkgPT09IDMyIC8qIENoYXJDb2RlLlNwYWNlICovIHx8IHN0ci5jaGFyQ29kZUF0KGkpID09PSA5IC8qIENoYXJDb2RlLlRhYiAqLykpIHtcbiAgICAgICAgaSsrO1xuICAgIH1cbiAgICByZXR1cm4gaTtcbn1cbiIsICIvKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICogIENvcHlyaWdodCAoYykgTWljcm9zb2Z0IENvcnBvcmF0aW9uLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICogIExpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgTGljZW5zZS4gU2VlIExpY2Vuc2UudHh0IGluIHRoZSBwcm9qZWN0IHJvb3QgZm9yIGxpY2Vuc2UgaW5mb3JtYXRpb24uXG4gKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKi9cbmltcG9ydCB7IGVxdWFscywgZ3JvdXBBZGphY2VudEJ5IH0gZnJvbSAnLi4vLi4vLi4vLi4vYmFzZS9jb21tb24vYXJyYXlzLmpzJztcbmltcG9ydCB7IGFzc2VydEZuLCBjaGVja0FkamFjZW50SXRlbXMgfSBmcm9tICcuLi8uLi8uLi8uLi9iYXNlL2NvbW1vbi9hc3NlcnQuanMnO1xuaW1wb3J0IHsgTGluZVJhbmdlIH0gZnJvbSAnLi4vLi4vY29yZS9saW5lUmFuZ2UuanMnO1xuaW1wb3J0IHsgT2Zmc2V0UmFuZ2UgfSBmcm9tICcuLi8uLi9jb3JlL29mZnNldFJhbmdlLmpzJztcbmltcG9ydCB7IFJhbmdlIH0gZnJvbSAnLi4vLi4vY29yZS9yYW5nZS5qcyc7XG5pbXBvcnQgeyBEYXRlVGltZW91dCwgSW5maW5pdGVUaW1lb3V0LCBTZXF1ZW5jZURpZmYgfSBmcm9tICcuL2FsZ29yaXRobXMvZGlmZkFsZ29yaXRobS5qcyc7XG5pbXBvcnQgeyBEeW5hbWljUHJvZ3JhbW1pbmdEaWZmaW5nIH0gZnJvbSAnLi9hbGdvcml0aG1zL2R5bmFtaWNQcm9ncmFtbWluZ0RpZmZpbmcuanMnO1xuaW1wb3J0IHsgTXllcnNEaWZmQWxnb3JpdGhtIH0gZnJvbSAnLi9hbGdvcml0aG1zL215ZXJzRGlmZkFsZ29yaXRobS5qcyc7XG5pbXBvcnQgeyBjb21wdXRlTW92ZWRMaW5lcyB9IGZyb20gJy4vY29tcHV0ZU1vdmVkTGluZXMuanMnO1xuaW1wb3J0IHsgZXh0ZW5kRGlmZnNUb0VudGlyZVdvcmRJZkFwcHJvcHJpYXRlLCBvcHRpbWl6ZVNlcXVlbmNlRGlmZnMsIHJlbW92ZVNob3J0TWF0Y2hlcywgcmVtb3ZlVmVyeVNob3J0TWF0Y2hpbmdMaW5lc0JldHdlZW5EaWZmcywgcmVtb3ZlVmVyeVNob3J0TWF0Y2hpbmdUZXh0QmV0d2VlbkxvbmdEaWZmcyB9IGZyb20gJy4vaGV1cmlzdGljU2VxdWVuY2VPcHRpbWl6YXRpb25zLmpzJztcbmltcG9ydCB7IExpbmVTZXF1ZW5jZSB9IGZyb20gJy4vbGluZVNlcXVlbmNlLmpzJztcbmltcG9ydCB7IExpbmVzU2xpY2VDaGFyU2VxdWVuY2UgfSBmcm9tICcuL2xpbmVzU2xpY2VDaGFyU2VxdWVuY2UuanMnO1xuaW1wb3J0IHsgTGluZXNEaWZmLCBNb3ZlZFRleHQgfSBmcm9tICcuLi9saW5lc0RpZmZDb21wdXRlci5qcyc7XG5pbXBvcnQgeyBEZXRhaWxlZExpbmVSYW5nZU1hcHBpbmcsIFJhbmdlTWFwcGluZyB9IGZyb20gJy4uL3JhbmdlTWFwcGluZy5qcyc7XG5leHBvcnQgY2xhc3MgRGVmYXVsdExpbmVzRGlmZkNvbXB1dGVyIHtcbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgdGhpcy5keW5hbWljUHJvZ3JhbW1pbmdEaWZmaW5nID0gbmV3IER5bmFtaWNQcm9ncmFtbWluZ0RpZmZpbmcoKTtcbiAgICAgICAgdGhpcy5teWVyc0RpZmZpbmdBbGdvcml0aG0gPSBuZXcgTXllcnNEaWZmQWxnb3JpdGhtKCk7XG4gICAgfVxuICAgIGNvbXB1dGVEaWZmKG9yaWdpbmFsTGluZXMsIG1vZGlmaWVkTGluZXMsIG9wdGlvbnMpIHtcbiAgICAgICAgaWYgKG9yaWdpbmFsTGluZXMubGVuZ3RoIDw9IDEgJiYgZXF1YWxzKG9yaWdpbmFsTGluZXMsIG1vZGlmaWVkTGluZXMsIChhLCBiKSA9PiBhID09PSBiKSkge1xuICAgICAgICAgICAgcmV0dXJuIG5ldyBMaW5lc0RpZmYoW10sIFtdLCBmYWxzZSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKG9yaWdpbmFsTGluZXMubGVuZ3RoID09PSAxICYmIG9yaWdpbmFsTGluZXNbMF0ubGVuZ3RoID09PSAwIHx8IG1vZGlmaWVkTGluZXMubGVuZ3RoID09PSAxICYmIG1vZGlmaWVkTGluZXNbMF0ubGVuZ3RoID09PSAwKSB7XG4gICAgICAgICAgICByZXR1cm4gbmV3IExpbmVzRGlmZihbXG4gICAgICAgICAgICAgICAgbmV3IERldGFpbGVkTGluZVJhbmdlTWFwcGluZyhuZXcgTGluZVJhbmdlKDEsIG9yaWdpbmFsTGluZXMubGVuZ3RoICsgMSksIG5ldyBMaW5lUmFuZ2UoMSwgbW9kaWZpZWRMaW5lcy5sZW5ndGggKyAxKSwgW1xuICAgICAgICAgICAgICAgICAgICBuZXcgUmFuZ2VNYXBwaW5nKG5ldyBSYW5nZSgxLCAxLCBvcmlnaW5hbExpbmVzLmxlbmd0aCwgb3JpZ2luYWxMaW5lc1tvcmlnaW5hbExpbmVzLmxlbmd0aCAtIDFdLmxlbmd0aCArIDEpLCBuZXcgUmFuZ2UoMSwgMSwgbW9kaWZpZWRMaW5lcy5sZW5ndGgsIG1vZGlmaWVkTGluZXNbbW9kaWZpZWRMaW5lcy5sZW5ndGggLSAxXS5sZW5ndGggKyAxKSlcbiAgICAgICAgICAgICAgICBdKVxuICAgICAgICAgICAgXSwgW10sIGZhbHNlKTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCB0aW1lb3V0ID0gb3B0aW9ucy5tYXhDb21wdXRhdGlvblRpbWVNcyA9PT0gMCA/IEluZmluaXRlVGltZW91dC5pbnN0YW5jZSA6IG5ldyBEYXRlVGltZW91dChvcHRpb25zLm1heENvbXB1dGF0aW9uVGltZU1zKTtcbiAgICAgICAgY29uc3QgY29uc2lkZXJXaGl0ZXNwYWNlQ2hhbmdlcyA9ICFvcHRpb25zLmlnbm9yZVRyaW1XaGl0ZXNwYWNlO1xuICAgICAgICBjb25zdCBwZXJmZWN0SGFzaGVzID0gbmV3IE1hcCgpO1xuICAgICAgICBmdW5jdGlvbiBnZXRPckNyZWF0ZUhhc2godGV4dCkge1xuICAgICAgICAgICAgbGV0IGhhc2ggPSBwZXJmZWN0SGFzaGVzLmdldCh0ZXh0KTtcbiAgICAgICAgICAgIGlmIChoYXNoID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICBoYXNoID0gcGVyZmVjdEhhc2hlcy5zaXplO1xuICAgICAgICAgICAgICAgIHBlcmZlY3RIYXNoZXMuc2V0KHRleHQsIGhhc2gpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIGhhc2g7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3Qgb3JpZ2luYWxMaW5lc0hhc2hlcyA9IG9yaWdpbmFsTGluZXMubWFwKChsKSA9PiBnZXRPckNyZWF0ZUhhc2gobC50cmltKCkpKTtcbiAgICAgICAgY29uc3QgbW9kaWZpZWRMaW5lc0hhc2hlcyA9IG1vZGlmaWVkTGluZXMubWFwKChsKSA9PiBnZXRPckNyZWF0ZUhhc2gobC50cmltKCkpKTtcbiAgICAgICAgY29uc3Qgc2VxdWVuY2UxID0gbmV3IExpbmVTZXF1ZW5jZShvcmlnaW5hbExpbmVzSGFzaGVzLCBvcmlnaW5hbExpbmVzKTtcbiAgICAgICAgY29uc3Qgc2VxdWVuY2UyID0gbmV3IExpbmVTZXF1ZW5jZShtb2RpZmllZExpbmVzSGFzaGVzLCBtb2RpZmllZExpbmVzKTtcbiAgICAgICAgY29uc3QgbGluZUFsaWdubWVudFJlc3VsdCA9ICgoKSA9PiB7XG4gICAgICAgICAgICBpZiAoc2VxdWVuY2UxLmxlbmd0aCArIHNlcXVlbmNlMi5sZW5ndGggPCAxNzAwKSB7XG4gICAgICAgICAgICAgICAgLy8gVXNlIHRoZSBpbXByb3ZlZCBhbGdvcml0aG0gZm9yIHNtYWxsIGZpbGVzXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuZHluYW1pY1Byb2dyYW1taW5nRGlmZmluZy5jb21wdXRlKHNlcXVlbmNlMSwgc2VxdWVuY2UyLCB0aW1lb3V0LCAob2Zmc2V0MSwgb2Zmc2V0MikgPT4gb3JpZ2luYWxMaW5lc1tvZmZzZXQxXSA9PT0gbW9kaWZpZWRMaW5lc1tvZmZzZXQyXVxuICAgICAgICAgICAgICAgICAgICA/IG1vZGlmaWVkTGluZXNbb2Zmc2V0Ml0ubGVuZ3RoID09PSAwXG4gICAgICAgICAgICAgICAgICAgICAgICA/IDAuMVxuICAgICAgICAgICAgICAgICAgICAgICAgOiAxICsgTWF0aC5sb2coMSArIG1vZGlmaWVkTGluZXNbb2Zmc2V0Ml0ubGVuZ3RoKVxuICAgICAgICAgICAgICAgICAgICA6IDAuOTkpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIHRoaXMubXllcnNEaWZmaW5nQWxnb3JpdGhtLmNvbXB1dGUoc2VxdWVuY2UxLCBzZXF1ZW5jZTIsIHRpbWVvdXQpO1xuICAgICAgICB9KSgpO1xuICAgICAgICBsZXQgbGluZUFsaWdubWVudHMgPSBsaW5lQWxpZ25tZW50UmVzdWx0LmRpZmZzO1xuICAgICAgICBsZXQgaGl0VGltZW91dCA9IGxpbmVBbGlnbm1lbnRSZXN1bHQuaGl0VGltZW91dDtcbiAgICAgICAgbGluZUFsaWdubWVudHMgPSBvcHRpbWl6ZVNlcXVlbmNlRGlmZnMoc2VxdWVuY2UxLCBzZXF1ZW5jZTIsIGxpbmVBbGlnbm1lbnRzKTtcbiAgICAgICAgbGluZUFsaWdubWVudHMgPSByZW1vdmVWZXJ5U2hvcnRNYXRjaGluZ0xpbmVzQmV0d2VlbkRpZmZzKHNlcXVlbmNlMSwgc2VxdWVuY2UyLCBsaW5lQWxpZ25tZW50cyk7XG4gICAgICAgIGNvbnN0IGFsaWdubWVudHMgPSBbXTtcbiAgICAgICAgY29uc3Qgc2NhbkZvcldoaXRlc3BhY2VDaGFuZ2VzID0gKGVxdWFsTGluZXNDb3VudCkgPT4ge1xuICAgICAgICAgICAgaWYgKCFjb25zaWRlcldoaXRlc3BhY2VDaGFuZ2VzKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBlcXVhbExpbmVzQ291bnQ7IGkrKykge1xuICAgICAgICAgICAgICAgIGNvbnN0IHNlcTFPZmZzZXQgPSBzZXExTGFzdFN0YXJ0ICsgaTtcbiAgICAgICAgICAgICAgICBjb25zdCBzZXEyT2Zmc2V0ID0gc2VxMkxhc3RTdGFydCArIGk7XG4gICAgICAgICAgICAgICAgaWYgKG9yaWdpbmFsTGluZXNbc2VxMU9mZnNldF0gIT09IG1vZGlmaWVkTGluZXNbc2VxMk9mZnNldF0pIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gVGhpcyBpcyBiZWNhdXNlIG9mIHdoaXRlc3BhY2UgY2hhbmdlcywgZGlmZiB0aGVzZSBsaW5lc1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBjaGFyYWN0ZXJEaWZmcyA9IHRoaXMucmVmaW5lRGlmZihvcmlnaW5hbExpbmVzLCBtb2RpZmllZExpbmVzLCBuZXcgU2VxdWVuY2VEaWZmKG5ldyBPZmZzZXRSYW5nZShzZXExT2Zmc2V0LCBzZXExT2Zmc2V0ICsgMSksIG5ldyBPZmZzZXRSYW5nZShzZXEyT2Zmc2V0LCBzZXEyT2Zmc2V0ICsgMSkpLCB0aW1lb3V0LCBjb25zaWRlcldoaXRlc3BhY2VDaGFuZ2VzKTtcbiAgICAgICAgICAgICAgICAgICAgZm9yIChjb25zdCBhIG9mIGNoYXJhY3RlckRpZmZzLm1hcHBpbmdzKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBhbGlnbm1lbnRzLnB1c2goYSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgaWYgKGNoYXJhY3RlckRpZmZzLmhpdFRpbWVvdXQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGhpdFRpbWVvdXQgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuICAgICAgICBsZXQgc2VxMUxhc3RTdGFydCA9IDA7XG4gICAgICAgIGxldCBzZXEyTGFzdFN0YXJ0ID0gMDtcbiAgICAgICAgZm9yIChjb25zdCBkaWZmIG9mIGxpbmVBbGlnbm1lbnRzKSB7XG4gICAgICAgICAgICBhc3NlcnRGbigoKSA9PiBkaWZmLnNlcTFSYW5nZS5zdGFydCAtIHNlcTFMYXN0U3RhcnQgPT09IGRpZmYuc2VxMlJhbmdlLnN0YXJ0IC0gc2VxMkxhc3RTdGFydCk7XG4gICAgICAgICAgICBjb25zdCBlcXVhbExpbmVzQ291bnQgPSBkaWZmLnNlcTFSYW5nZS5zdGFydCAtIHNlcTFMYXN0U3RhcnQ7XG4gICAgICAgICAgICBzY2FuRm9yV2hpdGVzcGFjZUNoYW5nZXMoZXF1YWxMaW5lc0NvdW50KTtcbiAgICAgICAgICAgIHNlcTFMYXN0U3RhcnQgPSBkaWZmLnNlcTFSYW5nZS5lbmRFeGNsdXNpdmU7XG4gICAgICAgICAgICBzZXEyTGFzdFN0YXJ0ID0gZGlmZi5zZXEyUmFuZ2UuZW5kRXhjbHVzaXZlO1xuICAgICAgICAgICAgY29uc3QgY2hhcmFjdGVyRGlmZnMgPSB0aGlzLnJlZmluZURpZmYob3JpZ2luYWxMaW5lcywgbW9kaWZpZWRMaW5lcywgZGlmZiwgdGltZW91dCwgY29uc2lkZXJXaGl0ZXNwYWNlQ2hhbmdlcyk7XG4gICAgICAgICAgICBpZiAoY2hhcmFjdGVyRGlmZnMuaGl0VGltZW91dCkge1xuICAgICAgICAgICAgICAgIGhpdFRpbWVvdXQgPSB0cnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZm9yIChjb25zdCBhIG9mIGNoYXJhY3RlckRpZmZzLm1hcHBpbmdzKSB7XG4gICAgICAgICAgICAgICAgYWxpZ25tZW50cy5wdXNoKGEpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHNjYW5Gb3JXaGl0ZXNwYWNlQ2hhbmdlcyhvcmlnaW5hbExpbmVzLmxlbmd0aCAtIHNlcTFMYXN0U3RhcnQpO1xuICAgICAgICBjb25zdCBjaGFuZ2VzID0gbGluZVJhbmdlTWFwcGluZ0Zyb21SYW5nZU1hcHBpbmdzKGFsaWdubWVudHMsIG9yaWdpbmFsTGluZXMsIG1vZGlmaWVkTGluZXMpO1xuICAgICAgICBsZXQgbW92ZXMgPSBbXTtcbiAgICAgICAgaWYgKG9wdGlvbnMuY29tcHV0ZU1vdmVzKSB7XG4gICAgICAgICAgICBtb3ZlcyA9IHRoaXMuY29tcHV0ZU1vdmVzKGNoYW5nZXMsIG9yaWdpbmFsTGluZXMsIG1vZGlmaWVkTGluZXMsIG9yaWdpbmFsTGluZXNIYXNoZXMsIG1vZGlmaWVkTGluZXNIYXNoZXMsIHRpbWVvdXQsIGNvbnNpZGVyV2hpdGVzcGFjZUNoYW5nZXMpO1xuICAgICAgICB9XG4gICAgICAgIC8vIE1ha2Ugc3VyZSBhbGwgcmFuZ2VzIGFyZSB2YWxpZFxuICAgICAgICBhc3NlcnRGbigoKSA9PiB7XG4gICAgICAgICAgICBmdW5jdGlvbiB2YWxpZGF0ZVBvc2l0aW9uKHBvcywgbGluZXMpIHtcbiAgICAgICAgICAgICAgICBpZiAocG9zLmxpbmVOdW1iZXIgPCAxIHx8IHBvcy5saW5lTnVtYmVyID4gbGluZXMubGVuZ3RoKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgY29uc3QgbGluZSA9IGxpbmVzW3Bvcy5saW5lTnVtYmVyIC0gMV07XG4gICAgICAgICAgICAgICAgaWYgKHBvcy5jb2x1bW4gPCAxIHx8IHBvcy5jb2x1bW4gPiBsaW5lLmxlbmd0aCArIDEpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGZ1bmN0aW9uIHZhbGlkYXRlUmFuZ2UocmFuZ2UsIGxpbmVzKSB7XG4gICAgICAgICAgICAgICAgaWYgKHJhbmdlLnN0YXJ0TGluZU51bWJlciA8IDEgfHwgcmFuZ2Uuc3RhcnRMaW5lTnVtYmVyID4gbGluZXMubGVuZ3RoICsgMSkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmIChyYW5nZS5lbmRMaW5lTnVtYmVyRXhjbHVzaXZlIDwgMSB8fCByYW5nZS5lbmRMaW5lTnVtYmVyRXhjbHVzaXZlID4gbGluZXMubGVuZ3RoICsgMSkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZm9yIChjb25zdCBjIG9mIGNoYW5nZXMpIHtcbiAgICAgICAgICAgICAgICBpZiAoIWMuaW5uZXJDaGFuZ2VzKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZm9yIChjb25zdCBpYyBvZiBjLmlubmVyQ2hhbmdlcykge1xuICAgICAgICAgICAgICAgICAgICBjb25zdCB2YWxpZCA9IHZhbGlkYXRlUG9zaXRpb24oaWMubW9kaWZpZWRSYW5nZS5nZXRTdGFydFBvc2l0aW9uKCksIG1vZGlmaWVkTGluZXMpICYmIHZhbGlkYXRlUG9zaXRpb24oaWMubW9kaWZpZWRSYW5nZS5nZXRFbmRQb3NpdGlvbigpLCBtb2RpZmllZExpbmVzKSAmJlxuICAgICAgICAgICAgICAgICAgICAgICAgdmFsaWRhdGVQb3NpdGlvbihpYy5vcmlnaW5hbFJhbmdlLmdldFN0YXJ0UG9zaXRpb24oKSwgb3JpZ2luYWxMaW5lcykgJiYgdmFsaWRhdGVQb3NpdGlvbihpYy5vcmlnaW5hbFJhbmdlLmdldEVuZFBvc2l0aW9uKCksIG9yaWdpbmFsTGluZXMpO1xuICAgICAgICAgICAgICAgICAgICBpZiAoIXZhbGlkKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKCF2YWxpZGF0ZVJhbmdlKGMubW9kaWZpZWQsIG1vZGlmaWVkTGluZXMpIHx8ICF2YWxpZGF0ZVJhbmdlKGMub3JpZ2luYWwsIG9yaWdpbmFsTGluZXMpKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfSk7XG4gICAgICAgIHJldHVybiBuZXcgTGluZXNEaWZmKGNoYW5nZXMsIG1vdmVzLCBoaXRUaW1lb3V0KTtcbiAgICB9XG4gICAgY29tcHV0ZU1vdmVzKGNoYW5nZXMsIG9yaWdpbmFsTGluZXMsIG1vZGlmaWVkTGluZXMsIGhhc2hlZE9yaWdpbmFsTGluZXMsIGhhc2hlZE1vZGlmaWVkTGluZXMsIHRpbWVvdXQsIGNvbnNpZGVyV2hpdGVzcGFjZUNoYW5nZXMpIHtcbiAgICAgICAgY29uc3QgbW92ZXMgPSBjb21wdXRlTW92ZWRMaW5lcyhjaGFuZ2VzLCBvcmlnaW5hbExpbmVzLCBtb2RpZmllZExpbmVzLCBoYXNoZWRPcmlnaW5hbExpbmVzLCBoYXNoZWRNb2RpZmllZExpbmVzLCB0aW1lb3V0KTtcbiAgICAgICAgY29uc3QgbW92ZXNXaXRoRGlmZnMgPSBtb3Zlcy5tYXAobSA9PiB7XG4gICAgICAgICAgICBjb25zdCBtb3ZlQ2hhbmdlcyA9IHRoaXMucmVmaW5lRGlmZihvcmlnaW5hbExpbmVzLCBtb2RpZmllZExpbmVzLCBuZXcgU2VxdWVuY2VEaWZmKG0ub3JpZ2luYWwudG9PZmZzZXRSYW5nZSgpLCBtLm1vZGlmaWVkLnRvT2Zmc2V0UmFuZ2UoKSksIHRpbWVvdXQsIGNvbnNpZGVyV2hpdGVzcGFjZUNoYW5nZXMpO1xuICAgICAgICAgICAgY29uc3QgbWFwcGluZ3MgPSBsaW5lUmFuZ2VNYXBwaW5nRnJvbVJhbmdlTWFwcGluZ3MobW92ZUNoYW5nZXMubWFwcGluZ3MsIG9yaWdpbmFsTGluZXMsIG1vZGlmaWVkTGluZXMsIHRydWUpO1xuICAgICAgICAgICAgcmV0dXJuIG5ldyBNb3ZlZFRleHQobSwgbWFwcGluZ3MpO1xuICAgICAgICB9KTtcbiAgICAgICAgcmV0dXJuIG1vdmVzV2l0aERpZmZzO1xuICAgIH1cbiAgICByZWZpbmVEaWZmKG9yaWdpbmFsTGluZXMsIG1vZGlmaWVkTGluZXMsIGRpZmYsIHRpbWVvdXQsIGNvbnNpZGVyV2hpdGVzcGFjZUNoYW5nZXMpIHtcbiAgICAgICAgY29uc3Qgc2xpY2UxID0gbmV3IExpbmVzU2xpY2VDaGFyU2VxdWVuY2Uob3JpZ2luYWxMaW5lcywgZGlmZi5zZXExUmFuZ2UsIGNvbnNpZGVyV2hpdGVzcGFjZUNoYW5nZXMpO1xuICAgICAgICBjb25zdCBzbGljZTIgPSBuZXcgTGluZXNTbGljZUNoYXJTZXF1ZW5jZShtb2RpZmllZExpbmVzLCBkaWZmLnNlcTJSYW5nZSwgY29uc2lkZXJXaGl0ZXNwYWNlQ2hhbmdlcyk7XG4gICAgICAgIGNvbnN0IGRpZmZSZXN1bHQgPSBzbGljZTEubGVuZ3RoICsgc2xpY2UyLmxlbmd0aCA8IDUwMFxuICAgICAgICAgICAgPyB0aGlzLmR5bmFtaWNQcm9ncmFtbWluZ0RpZmZpbmcuY29tcHV0ZShzbGljZTEsIHNsaWNlMiwgdGltZW91dClcbiAgICAgICAgICAgIDogdGhpcy5teWVyc0RpZmZpbmdBbGdvcml0aG0uY29tcHV0ZShzbGljZTEsIHNsaWNlMiwgdGltZW91dCk7XG4gICAgICAgIGxldCBkaWZmcyA9IGRpZmZSZXN1bHQuZGlmZnM7XG4gICAgICAgIGRpZmZzID0gb3B0aW1pemVTZXF1ZW5jZURpZmZzKHNsaWNlMSwgc2xpY2UyLCBkaWZmcyk7XG4gICAgICAgIGRpZmZzID0gZXh0ZW5kRGlmZnNUb0VudGlyZVdvcmRJZkFwcHJvcHJpYXRlKHNsaWNlMSwgc2xpY2UyLCBkaWZmcyk7XG4gICAgICAgIGRpZmZzID0gcmVtb3ZlU2hvcnRNYXRjaGVzKHNsaWNlMSwgc2xpY2UyLCBkaWZmcyk7XG4gICAgICAgIGRpZmZzID0gcmVtb3ZlVmVyeVNob3J0TWF0Y2hpbmdUZXh0QmV0d2VlbkxvbmdEaWZmcyhzbGljZTEsIHNsaWNlMiwgZGlmZnMpO1xuICAgICAgICBjb25zdCByZXN1bHQgPSBkaWZmcy5tYXAoKGQpID0+IG5ldyBSYW5nZU1hcHBpbmcoc2xpY2UxLnRyYW5zbGF0ZVJhbmdlKGQuc2VxMVJhbmdlKSwgc2xpY2UyLnRyYW5zbGF0ZVJhbmdlKGQuc2VxMlJhbmdlKSkpO1xuICAgICAgICAvLyBBc3NlcnQ6IHJlc3VsdCBhcHBsaWVkIG9uIG9yaWdpbmFsIHNob3VsZCBiZSB0aGUgc2FtZSBhcyBkaWZmIGFwcGxpZWQgdG8gb3JpZ2luYWxcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIG1hcHBpbmdzOiByZXN1bHQsXG4gICAgICAgICAgICBoaXRUaW1lb3V0OiBkaWZmUmVzdWx0LmhpdFRpbWVvdXQsXG4gICAgICAgIH07XG4gICAgfVxufVxuZXhwb3J0IGZ1bmN0aW9uIGxpbmVSYW5nZU1hcHBpbmdGcm9tUmFuZ2VNYXBwaW5ncyhhbGlnbm1lbnRzLCBvcmlnaW5hbExpbmVzLCBtb2RpZmllZExpbmVzLCBkb250QXNzZXJ0U3RhcnRMaW5lID0gZmFsc2UpIHtcbiAgICBjb25zdCBjaGFuZ2VzID0gW107XG4gICAgZm9yIChjb25zdCBnIG9mIGdyb3VwQWRqYWNlbnRCeShhbGlnbm1lbnRzLm1hcChhID0+IGdldExpbmVSYW5nZU1hcHBpbmcoYSwgb3JpZ2luYWxMaW5lcywgbW9kaWZpZWRMaW5lcykpLCAoYTEsIGEyKSA9PiBhMS5vcmlnaW5hbC5vdmVybGFwT3JUb3VjaChhMi5vcmlnaW5hbClcbiAgICAgICAgfHwgYTEubW9kaWZpZWQub3ZlcmxhcE9yVG91Y2goYTIubW9kaWZpZWQpKSkge1xuICAgICAgICBjb25zdCBmaXJzdCA9IGdbMF07XG4gICAgICAgIGNvbnN0IGxhc3QgPSBnW2cubGVuZ3RoIC0gMV07XG4gICAgICAgIGNoYW5nZXMucHVzaChuZXcgRGV0YWlsZWRMaW5lUmFuZ2VNYXBwaW5nKGZpcnN0Lm9yaWdpbmFsLmpvaW4obGFzdC5vcmlnaW5hbCksIGZpcnN0Lm1vZGlmaWVkLmpvaW4obGFzdC5tb2RpZmllZCksIGcubWFwKGEgPT4gYS5pbm5lckNoYW5nZXNbMF0pKSk7XG4gICAgfVxuICAgIGFzc2VydEZuKCgpID0+IHtcbiAgICAgICAgaWYgKCFkb250QXNzZXJ0U3RhcnRMaW5lICYmIGNoYW5nZXMubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgaWYgKGNoYW5nZXNbMF0ubW9kaWZpZWQuc3RhcnRMaW5lTnVtYmVyICE9PSBjaGFuZ2VzWzBdLm9yaWdpbmFsLnN0YXJ0TGluZU51bWJlcikge1xuICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChtb2RpZmllZExpbmVzLmxlbmd0aCAtIGNoYW5nZXNbY2hhbmdlcy5sZW5ndGggLSAxXS5tb2RpZmllZC5lbmRMaW5lTnVtYmVyRXhjbHVzaXZlICE9PSBvcmlnaW5hbExpbmVzLmxlbmd0aCAtIGNoYW5nZXNbY2hhbmdlcy5sZW5ndGggLSAxXS5vcmlnaW5hbC5lbmRMaW5lTnVtYmVyRXhjbHVzaXZlKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBjaGVja0FkamFjZW50SXRlbXMoY2hhbmdlcywgKG0xLCBtMikgPT4gbTIub3JpZ2luYWwuc3RhcnRMaW5lTnVtYmVyIC0gbTEub3JpZ2luYWwuZW5kTGluZU51bWJlckV4Y2x1c2l2ZSA9PT0gbTIubW9kaWZpZWQuc3RhcnRMaW5lTnVtYmVyIC0gbTEubW9kaWZpZWQuZW5kTGluZU51bWJlckV4Y2x1c2l2ZSAmJlxuICAgICAgICAgICAgLy8gVGhlcmUgaGFzIHRvIGJlIGFuIHVuY2hhbmdlZCBsaW5lIGluIGJldHdlZW4gKG90aGVyd2lzZSBib3RoIGRpZmZzIHNob3VsZCBoYXZlIGJlZW4gam9pbmVkKVxuICAgICAgICAgICAgbTEub3JpZ2luYWwuZW5kTGluZU51bWJlckV4Y2x1c2l2ZSA8IG0yLm9yaWdpbmFsLnN0YXJ0TGluZU51bWJlciAmJlxuICAgICAgICAgICAgbTEubW9kaWZpZWQuZW5kTGluZU51bWJlckV4Y2x1c2l2ZSA8IG0yLm1vZGlmaWVkLnN0YXJ0TGluZU51bWJlcik7XG4gICAgfSk7XG4gICAgcmV0dXJuIGNoYW5nZXM7XG59XG5leHBvcnQgZnVuY3Rpb24gZ2V0TGluZVJhbmdlTWFwcGluZyhyYW5nZU1hcHBpbmcsIG9yaWdpbmFsTGluZXMsIG1vZGlmaWVkTGluZXMpIHtcbiAgICBsZXQgbGluZVN0YXJ0RGVsdGEgPSAwO1xuICAgIGxldCBsaW5lRW5kRGVsdGEgPSAwO1xuICAgIC8vIHJhbmdlTWFwcGluZyBkZXNjcmliZXMgdGhlIGVkaXQgdGhhdCByZXBsYWNlcyBgcmFuZ2VNYXBwaW5nLm9yaWdpbmFsUmFuZ2VgIHdpdGggYG5ld1RleHQgOj0gZ2V0VGV4dChtb2RpZmllZExpbmVzLCByYW5nZU1hcHBpbmcubW9kaWZpZWRSYW5nZSlgLlxuICAgIC8vIG9yaWdpbmFsOiBdeHh4IFxcbiA8LSB0aGlzIGxpbmUgaXMgbm90IG1vZGlmaWVkXG4gICAgLy8gbW9kaWZpZWQ6IF14eCAgXFxuXG4gICAgaWYgKHJhbmdlTWFwcGluZy5tb2RpZmllZFJhbmdlLmVuZENvbHVtbiA9PT0gMSAmJiByYW5nZU1hcHBpbmcub3JpZ2luYWxSYW5nZS5lbmRDb2x1bW4gPT09IDFcbiAgICAgICAgJiYgcmFuZ2VNYXBwaW5nLm9yaWdpbmFsUmFuZ2Uuc3RhcnRMaW5lTnVtYmVyICsgbGluZVN0YXJ0RGVsdGEgPD0gcmFuZ2VNYXBwaW5nLm9yaWdpbmFsUmFuZ2UuZW5kTGluZU51bWJlclxuICAgICAgICAmJiByYW5nZU1hcHBpbmcubW9kaWZpZWRSYW5nZS5zdGFydExpbmVOdW1iZXIgKyBsaW5lU3RhcnREZWx0YSA8PSByYW5nZU1hcHBpbmcubW9kaWZpZWRSYW5nZS5lbmRMaW5lTnVtYmVyKSB7XG4gICAgICAgIC8vIFdlIGNhbiBvbmx5IGRvIHRoaXMgaWYgdGhlIHJhbmdlIGlzIG5vdCBlbXB0eSB5ZXRcbiAgICAgICAgbGluZUVuZERlbHRhID0gLTE7XG4gICAgfVxuICAgIC8vIG9yaWdpbmFsOiB4eHhbIFxcbiA8LSB0aGlzIGxpbmUgaXMgbm90IG1vZGlmaWVkXG4gICAgLy8gbW9kaWZpZWQ6IHh4eFsgXFxuXG4gICAgaWYgKHJhbmdlTWFwcGluZy5tb2RpZmllZFJhbmdlLnN0YXJ0Q29sdW1uIC0gMSA+PSBtb2RpZmllZExpbmVzW3JhbmdlTWFwcGluZy5tb2RpZmllZFJhbmdlLnN0YXJ0TGluZU51bWJlciAtIDFdLmxlbmd0aFxuICAgICAgICAmJiByYW5nZU1hcHBpbmcub3JpZ2luYWxSYW5nZS5zdGFydENvbHVtbiAtIDEgPj0gb3JpZ2luYWxMaW5lc1tyYW5nZU1hcHBpbmcub3JpZ2luYWxSYW5nZS5zdGFydExpbmVOdW1iZXIgLSAxXS5sZW5ndGhcbiAgICAgICAgJiYgcmFuZ2VNYXBwaW5nLm9yaWdpbmFsUmFuZ2Uuc3RhcnRMaW5lTnVtYmVyIDw9IHJhbmdlTWFwcGluZy5vcmlnaW5hbFJhbmdlLmVuZExpbmVOdW1iZXIgKyBsaW5lRW5kRGVsdGFcbiAgICAgICAgJiYgcmFuZ2VNYXBwaW5nLm1vZGlmaWVkUmFuZ2Uuc3RhcnRMaW5lTnVtYmVyIDw9IHJhbmdlTWFwcGluZy5tb2RpZmllZFJhbmdlLmVuZExpbmVOdW1iZXIgKyBsaW5lRW5kRGVsdGEpIHtcbiAgICAgICAgLy8gV2UgY2FuIG9ubHkgZG8gdGhpcyBpZiB0aGUgcmFuZ2UgaXMgbm90IGVtcHR5IHlldFxuICAgICAgICBsaW5lU3RhcnREZWx0YSA9IDE7XG4gICAgfVxuICAgIGNvbnN0IG9yaWdpbmFsTGluZVJhbmdlID0gbmV3IExpbmVSYW5nZShyYW5nZU1hcHBpbmcub3JpZ2luYWxSYW5nZS5zdGFydExpbmVOdW1iZXIgKyBsaW5lU3RhcnREZWx0YSwgcmFuZ2VNYXBwaW5nLm9yaWdpbmFsUmFuZ2UuZW5kTGluZU51bWJlciArIDEgKyBsaW5lRW5kRGVsdGEpO1xuICAgIGNvbnN0IG1vZGlmaWVkTGluZVJhbmdlID0gbmV3IExpbmVSYW5nZShyYW5nZU1hcHBpbmcubW9kaWZpZWRSYW5nZS5zdGFydExpbmVOdW1iZXIgKyBsaW5lU3RhcnREZWx0YSwgcmFuZ2VNYXBwaW5nLm1vZGlmaWVkUmFuZ2UuZW5kTGluZU51bWJlciArIDEgKyBsaW5lRW5kRGVsdGEpO1xuICAgIHJldHVybiBuZXcgRGV0YWlsZWRMaW5lUmFuZ2VNYXBwaW5nKG9yaWdpbmFsTGluZVJhbmdlLCBtb2RpZmllZExpbmVSYW5nZSwgW3JhbmdlTWFwcGluZ10pO1xufVxuIiwgIi8qLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gKiAgQ29weXJpZ2h0IChjKSBNaWNyb3NvZnQgQ29ycG9yYXRpb24uIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKiAgTGljZW5zZWQgdW5kZXIgdGhlIE1JVCBMaWNlbnNlLiBTZWUgTGljZW5zZS50eHQgaW4gdGhlIHByb2plY3Qgcm9vdCBmb3IgbGljZW5zZSBpbmZvcm1hdGlvbi5cbiAqLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qL1xuaW1wb3J0IHsgTGVnYWN5TGluZXNEaWZmQ29tcHV0ZXIgfSBmcm9tICcuL2xlZ2FjeUxpbmVzRGlmZkNvbXB1dGVyLmpzJztcbmltcG9ydCB7IERlZmF1bHRMaW5lc0RpZmZDb21wdXRlciB9IGZyb20gJy4vZGVmYXVsdExpbmVzRGlmZkNvbXB1dGVyL2RlZmF1bHRMaW5lc0RpZmZDb21wdXRlci5qcyc7XG5leHBvcnQgY29uc3QgbGluZXNEaWZmQ29tcHV0ZXJzID0ge1xuICAgIGdldExlZ2FjeTogKCkgPT4gbmV3IExlZ2FjeUxpbmVzRGlmZkNvbXB1dGVyKCksXG4gICAgZ2V0RGVmYXVsdDogKCkgPT4gbmV3IERlZmF1bHRMaW5lc0RpZmZDb21wdXRlcigpLFxufTtcbiIsICIvKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICogIENvcHlyaWdodCAoYykgTWljcm9zb2Z0IENvcnBvcmF0aW9uLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICogIExpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgTGljZW5zZS4gU2VlIExpY2Vuc2UudHh0IGluIHRoZSBwcm9qZWN0IHJvb3QgZm9yIGxpY2Vuc2UgaW5mb3JtYXRpb24uXG4gKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKi9cbmZ1bmN0aW9uIHJvdW5kRmxvYXQobnVtYmVyLCBkZWNpbWFsUG9pbnRzKSB7XG4gICAgY29uc3QgZGVjaW1hbCA9IE1hdGgucG93KDEwLCBkZWNpbWFsUG9pbnRzKTtcbiAgICByZXR1cm4gTWF0aC5yb3VuZChudW1iZXIgKiBkZWNpbWFsKSAvIGRlY2ltYWw7XG59XG5leHBvcnQgY2xhc3MgUkdCQSB7XG4gICAgY29uc3RydWN0b3IociwgZywgYiwgYSA9IDEpIHtcbiAgICAgICAgdGhpcy5fcmdiYUJyYW5kID0gdW5kZWZpbmVkO1xuICAgICAgICB0aGlzLnIgPSBNYXRoLm1pbigyNTUsIE1hdGgubWF4KDAsIHIpKSB8IDA7XG4gICAgICAgIHRoaXMuZyA9IE1hdGgubWluKDI1NSwgTWF0aC5tYXgoMCwgZykpIHwgMDtcbiAgICAgICAgdGhpcy5iID0gTWF0aC5taW4oMjU1LCBNYXRoLm1heCgwLCBiKSkgfCAwO1xuICAgICAgICB0aGlzLmEgPSByb3VuZEZsb2F0KE1hdGgubWF4KE1hdGgubWluKDEsIGEpLCAwKSwgMyk7XG4gICAgfVxuICAgIHN0YXRpYyBlcXVhbHMoYSwgYikge1xuICAgICAgICByZXR1cm4gYS5yID09PSBiLnIgJiYgYS5nID09PSBiLmcgJiYgYS5iID09PSBiLmIgJiYgYS5hID09PSBiLmE7XG4gICAgfVxufVxuZXhwb3J0IGNsYXNzIEhTTEEge1xuICAgIGNvbnN0cnVjdG9yKGgsIHMsIGwsIGEpIHtcbiAgICAgICAgdGhpcy5faHNsYUJyYW5kID0gdW5kZWZpbmVkO1xuICAgICAgICB0aGlzLmggPSBNYXRoLm1heChNYXRoLm1pbigzNjAsIGgpLCAwKSB8IDA7XG4gICAgICAgIHRoaXMucyA9IHJvdW5kRmxvYXQoTWF0aC5tYXgoTWF0aC5taW4oMSwgcyksIDApLCAzKTtcbiAgICAgICAgdGhpcy5sID0gcm91bmRGbG9hdChNYXRoLm1heChNYXRoLm1pbigxLCBsKSwgMCksIDMpO1xuICAgICAgICB0aGlzLmEgPSByb3VuZEZsb2F0KE1hdGgubWF4KE1hdGgubWluKDEsIGEpLCAwKSwgMyk7XG4gICAgfVxuICAgIHN0YXRpYyBlcXVhbHMoYSwgYikge1xuICAgICAgICByZXR1cm4gYS5oID09PSBiLmggJiYgYS5zID09PSBiLnMgJiYgYS5sID09PSBiLmwgJiYgYS5hID09PSBiLmE7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIENvbnZlcnRzIGFuIFJHQiBjb2xvciB2YWx1ZSB0byBIU0wuIENvbnZlcnNpb24gZm9ybXVsYVxuICAgICAqIGFkYXB0ZWQgZnJvbSBodHRwOi8vZW4ud2lraXBlZGlhLm9yZy93aWtpL0hTTF9jb2xvcl9zcGFjZS5cbiAgICAgKiBBc3N1bWVzIHIsIGcsIGFuZCBiIGFyZSBjb250YWluZWQgaW4gdGhlIHNldCBbMCwgMjU1XSBhbmRcbiAgICAgKiByZXR1cm5zIGggaW4gdGhlIHNldCBbMCwgMzYwXSwgcywgYW5kIGwgaW4gdGhlIHNldCBbMCwgMV0uXG4gICAgICovXG4gICAgc3RhdGljIGZyb21SR0JBKHJnYmEpIHtcbiAgICAgICAgY29uc3QgciA9IHJnYmEuciAvIDI1NTtcbiAgICAgICAgY29uc3QgZyA9IHJnYmEuZyAvIDI1NTtcbiAgICAgICAgY29uc3QgYiA9IHJnYmEuYiAvIDI1NTtcbiAgICAgICAgY29uc3QgYSA9IHJnYmEuYTtcbiAgICAgICAgY29uc3QgbWF4ID0gTWF0aC5tYXgociwgZywgYik7XG4gICAgICAgIGNvbnN0IG1pbiA9IE1hdGgubWluKHIsIGcsIGIpO1xuICAgICAgICBsZXQgaCA9IDA7XG4gICAgICAgIGxldCBzID0gMDtcbiAgICAgICAgY29uc3QgbCA9IChtaW4gKyBtYXgpIC8gMjtcbiAgICAgICAgY29uc3QgY2hyb21hID0gbWF4IC0gbWluO1xuICAgICAgICBpZiAoY2hyb21hID4gMCkge1xuICAgICAgICAgICAgcyA9IE1hdGgubWluKChsIDw9IDAuNSA/IGNocm9tYSAvICgyICogbCkgOiBjaHJvbWEgLyAoMiAtICgyICogbCkpKSwgMSk7XG4gICAgICAgICAgICBzd2l0Y2ggKG1heCkge1xuICAgICAgICAgICAgICAgIGNhc2UgcjpcbiAgICAgICAgICAgICAgICAgICAgaCA9IChnIC0gYikgLyBjaHJvbWEgKyAoZyA8IGIgPyA2IDogMCk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgZzpcbiAgICAgICAgICAgICAgICAgICAgaCA9IChiIC0gcikgLyBjaHJvbWEgKyAyO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlIGI6XG4gICAgICAgICAgICAgICAgICAgIGggPSAociAtIGcpIC8gY2hyb21hICsgNDtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBoICo9IDYwO1xuICAgICAgICAgICAgaCA9IE1hdGgucm91bmQoaCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG5ldyBIU0xBKGgsIHMsIGwsIGEpO1xuICAgIH1cbiAgICBzdGF0aWMgX2h1ZTJyZ2IocCwgcSwgdCkge1xuICAgICAgICBpZiAodCA8IDApIHtcbiAgICAgICAgICAgIHQgKz0gMTtcbiAgICAgICAgfVxuICAgICAgICBpZiAodCA+IDEpIHtcbiAgICAgICAgICAgIHQgLT0gMTtcbiAgICAgICAgfVxuICAgICAgICBpZiAodCA8IDEgLyA2KSB7XG4gICAgICAgICAgICByZXR1cm4gcCArIChxIC0gcCkgKiA2ICogdDtcbiAgICAgICAgfVxuICAgICAgICBpZiAodCA8IDEgLyAyKSB7XG4gICAgICAgICAgICByZXR1cm4gcTtcbiAgICAgICAgfVxuICAgICAgICBpZiAodCA8IDIgLyAzKSB7XG4gICAgICAgICAgICByZXR1cm4gcCArIChxIC0gcCkgKiAoMiAvIDMgLSB0KSAqIDY7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHA7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIENvbnZlcnRzIGFuIEhTTCBjb2xvciB2YWx1ZSB0byBSR0IuIENvbnZlcnNpb24gZm9ybXVsYVxuICAgICAqIGFkYXB0ZWQgZnJvbSBodHRwOi8vZW4ud2lraXBlZGlhLm9yZy93aWtpL0hTTF9jb2xvcl9zcGFjZS5cbiAgICAgKiBBc3N1bWVzIGggaW4gdGhlIHNldCBbMCwgMzYwXSBzLCBhbmQgbCBhcmUgY29udGFpbmVkIGluIHRoZSBzZXQgWzAsIDFdIGFuZFxuICAgICAqIHJldHVybnMgciwgZywgYW5kIGIgaW4gdGhlIHNldCBbMCwgMjU1XS5cbiAgICAgKi9cbiAgICBzdGF0aWMgdG9SR0JBKGhzbGEpIHtcbiAgICAgICAgY29uc3QgaCA9IGhzbGEuaCAvIDM2MDtcbiAgICAgICAgY29uc3QgeyBzLCBsLCBhIH0gPSBoc2xhO1xuICAgICAgICBsZXQgciwgZywgYjtcbiAgICAgICAgaWYgKHMgPT09IDApIHtcbiAgICAgICAgICAgIHIgPSBnID0gYiA9IGw7IC8vIGFjaHJvbWF0aWNcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIGNvbnN0IHEgPSBsIDwgMC41ID8gbCAqICgxICsgcykgOiBsICsgcyAtIGwgKiBzO1xuICAgICAgICAgICAgY29uc3QgcCA9IDIgKiBsIC0gcTtcbiAgICAgICAgICAgIHIgPSBIU0xBLl9odWUycmdiKHAsIHEsIGggKyAxIC8gMyk7XG4gICAgICAgICAgICBnID0gSFNMQS5faHVlMnJnYihwLCBxLCBoKTtcbiAgICAgICAgICAgIGIgPSBIU0xBLl9odWUycmdiKHAsIHEsIGggLSAxIC8gMyk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG5ldyBSR0JBKE1hdGgucm91bmQociAqIDI1NSksIE1hdGgucm91bmQoZyAqIDI1NSksIE1hdGgucm91bmQoYiAqIDI1NSksIGEpO1xuICAgIH1cbn1cbmV4cG9ydCBjbGFzcyBIU1ZBIHtcbiAgICBjb25zdHJ1Y3RvcihoLCBzLCB2LCBhKSB7XG4gICAgICAgIHRoaXMuX2hzdmFCcmFuZCA9IHVuZGVmaW5lZDtcbiAgICAgICAgdGhpcy5oID0gTWF0aC5tYXgoTWF0aC5taW4oMzYwLCBoKSwgMCkgfCAwO1xuICAgICAgICB0aGlzLnMgPSByb3VuZEZsb2F0KE1hdGgubWF4KE1hdGgubWluKDEsIHMpLCAwKSwgMyk7XG4gICAgICAgIHRoaXMudiA9IHJvdW5kRmxvYXQoTWF0aC5tYXgoTWF0aC5taW4oMSwgdiksIDApLCAzKTtcbiAgICAgICAgdGhpcy5hID0gcm91bmRGbG9hdChNYXRoLm1heChNYXRoLm1pbigxLCBhKSwgMCksIDMpO1xuICAgIH1cbiAgICBzdGF0aWMgZXF1YWxzKGEsIGIpIHtcbiAgICAgICAgcmV0dXJuIGEuaCA9PT0gYi5oICYmIGEucyA9PT0gYi5zICYmIGEudiA9PT0gYi52ICYmIGEuYSA9PT0gYi5hO1xuICAgIH1cbiAgICAvLyBmcm9tIGh0dHA6Ly93d3cucmFwaWR0YWJsZXMuY29tL2NvbnZlcnQvY29sb3IvcmdiLXRvLWhzdi5odG1cbiAgICBzdGF0aWMgZnJvbVJHQkEocmdiYSkge1xuICAgICAgICBjb25zdCByID0gcmdiYS5yIC8gMjU1O1xuICAgICAgICBjb25zdCBnID0gcmdiYS5nIC8gMjU1O1xuICAgICAgICBjb25zdCBiID0gcmdiYS5iIC8gMjU1O1xuICAgICAgICBjb25zdCBjbWF4ID0gTWF0aC5tYXgociwgZywgYik7XG4gICAgICAgIGNvbnN0IGNtaW4gPSBNYXRoLm1pbihyLCBnLCBiKTtcbiAgICAgICAgY29uc3QgZGVsdGEgPSBjbWF4IC0gY21pbjtcbiAgICAgICAgY29uc3QgcyA9IGNtYXggPT09IDAgPyAwIDogKGRlbHRhIC8gY21heCk7XG4gICAgICAgIGxldCBtO1xuICAgICAgICBpZiAoZGVsdGEgPT09IDApIHtcbiAgICAgICAgICAgIG0gPSAwO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKGNtYXggPT09IHIpIHtcbiAgICAgICAgICAgIG0gPSAoKCgoZyAtIGIpIC8gZGVsdGEpICUgNikgKyA2KSAlIDY7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAoY21heCA9PT0gZykge1xuICAgICAgICAgICAgbSA9ICgoYiAtIHIpIC8gZGVsdGEpICsgMjtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIG0gPSAoKHIgLSBnKSAvIGRlbHRhKSArIDQ7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG5ldyBIU1ZBKE1hdGgucm91bmQobSAqIDYwKSwgcywgY21heCwgcmdiYS5hKTtcbiAgICB9XG4gICAgLy8gZnJvbSBodHRwOi8vd3d3LnJhcGlkdGFibGVzLmNvbS9jb252ZXJ0L2NvbG9yL2hzdi10by1yZ2IuaHRtXG4gICAgc3RhdGljIHRvUkdCQShoc3ZhKSB7XG4gICAgICAgIGNvbnN0IHsgaCwgcywgdiwgYSB9ID0gaHN2YTtcbiAgICAgICAgY29uc3QgYyA9IHYgKiBzO1xuICAgICAgICBjb25zdCB4ID0gYyAqICgxIC0gTWF0aC5hYnMoKGggLyA2MCkgJSAyIC0gMSkpO1xuICAgICAgICBjb25zdCBtID0gdiAtIGM7XG4gICAgICAgIGxldCBbciwgZywgYl0gPSBbMCwgMCwgMF07XG4gICAgICAgIGlmIChoIDwgNjApIHtcbiAgICAgICAgICAgIHIgPSBjO1xuICAgICAgICAgICAgZyA9IHg7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAoaCA8IDEyMCkge1xuICAgICAgICAgICAgciA9IHg7XG4gICAgICAgICAgICBnID0gYztcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChoIDwgMTgwKSB7XG4gICAgICAgICAgICBnID0gYztcbiAgICAgICAgICAgIGIgPSB4O1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKGggPCAyNDApIHtcbiAgICAgICAgICAgIGcgPSB4O1xuICAgICAgICAgICAgYiA9IGM7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAoaCA8IDMwMCkge1xuICAgICAgICAgICAgciA9IHg7XG4gICAgICAgICAgICBiID0gYztcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChoIDw9IDM2MCkge1xuICAgICAgICAgICAgciA9IGM7XG4gICAgICAgICAgICBiID0geDtcbiAgICAgICAgfVxuICAgICAgICByID0gTWF0aC5yb3VuZCgociArIG0pICogMjU1KTtcbiAgICAgICAgZyA9IE1hdGgucm91bmQoKGcgKyBtKSAqIDI1NSk7XG4gICAgICAgIGIgPSBNYXRoLnJvdW5kKChiICsgbSkgKiAyNTUpO1xuICAgICAgICByZXR1cm4gbmV3IFJHQkEociwgZywgYiwgYSk7XG4gICAgfVxufVxuZXhwb3J0IGNsYXNzIENvbG9yIHtcbiAgICBzdGF0aWMgZnJvbUhleChoZXgpIHtcbiAgICAgICAgcmV0dXJuIENvbG9yLkZvcm1hdC5DU1MucGFyc2VIZXgoaGV4KSB8fCBDb2xvci5yZWQ7XG4gICAgfVxuICAgIHN0YXRpYyBlcXVhbHMoYSwgYikge1xuICAgICAgICBpZiAoIWEgJiYgIWIpIHtcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9XG4gICAgICAgIGlmICghYSB8fCAhYikge1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBhLmVxdWFscyhiKTtcbiAgICB9XG4gICAgZ2V0IGhzbGEoKSB7XG4gICAgICAgIGlmICh0aGlzLl9oc2xhKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5faHNsYTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiBIU0xBLmZyb21SR0JBKHRoaXMucmdiYSk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgZ2V0IGhzdmEoKSB7XG4gICAgICAgIGlmICh0aGlzLl9oc3ZhKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5faHN2YTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gSFNWQS5mcm9tUkdCQSh0aGlzLnJnYmEpO1xuICAgIH1cbiAgICBjb25zdHJ1Y3RvcihhcmcpIHtcbiAgICAgICAgaWYgKCFhcmcpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignQ29sb3IgbmVlZHMgYSB2YWx1ZScpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKGFyZyBpbnN0YW5jZW9mIFJHQkEpIHtcbiAgICAgICAgICAgIHRoaXMucmdiYSA9IGFyZztcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChhcmcgaW5zdGFuY2VvZiBIU0xBKSB7XG4gICAgICAgICAgICB0aGlzLl9oc2xhID0gYXJnO1xuICAgICAgICAgICAgdGhpcy5yZ2JhID0gSFNMQS50b1JHQkEoYXJnKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChhcmcgaW5zdGFuY2VvZiBIU1ZBKSB7XG4gICAgICAgICAgICB0aGlzLl9oc3ZhID0gYXJnO1xuICAgICAgICAgICAgdGhpcy5yZ2JhID0gSFNWQS50b1JHQkEoYXJnKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignSW52YWxpZCBjb2xvciBjdG9yIGFyZ3VtZW50Jyk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgZXF1YWxzKG90aGVyKSB7XG4gICAgICAgIHJldHVybiAhIW90aGVyICYmIFJHQkEuZXF1YWxzKHRoaXMucmdiYSwgb3RoZXIucmdiYSkgJiYgSFNMQS5lcXVhbHModGhpcy5oc2xhLCBvdGhlci5oc2xhKSAmJiBIU1ZBLmVxdWFscyh0aGlzLmhzdmEsIG90aGVyLmhzdmEpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBodHRwOi8vd3d3LnczLm9yZy9UUi9XQ0FHMjAvI3JlbGF0aXZlbHVtaW5hbmNlZGVmXG4gICAgICogUmV0dXJucyB0aGUgbnVtYmVyIGluIHRoZSBzZXQgWzAsIDFdLiBPID0+IERhcmtlc3QgQmxhY2suIDEgPT4gTGlnaHRlc3Qgd2hpdGUuXG4gICAgICovXG4gICAgZ2V0UmVsYXRpdmVMdW1pbmFuY2UoKSB7XG4gICAgICAgIGNvbnN0IFIgPSBDb2xvci5fcmVsYXRpdmVMdW1pbmFuY2VGb3JDb21wb25lbnQodGhpcy5yZ2JhLnIpO1xuICAgICAgICBjb25zdCBHID0gQ29sb3IuX3JlbGF0aXZlTHVtaW5hbmNlRm9yQ29tcG9uZW50KHRoaXMucmdiYS5nKTtcbiAgICAgICAgY29uc3QgQiA9IENvbG9yLl9yZWxhdGl2ZUx1bWluYW5jZUZvckNvbXBvbmVudCh0aGlzLnJnYmEuYik7XG4gICAgICAgIGNvbnN0IGx1bWluYW5jZSA9IDAuMjEyNiAqIFIgKyAwLjcxNTIgKiBHICsgMC4wNzIyICogQjtcbiAgICAgICAgcmV0dXJuIHJvdW5kRmxvYXQobHVtaW5hbmNlLCA0KTtcbiAgICB9XG4gICAgc3RhdGljIF9yZWxhdGl2ZUx1bWluYW5jZUZvckNvbXBvbmVudChjb2xvcikge1xuICAgICAgICBjb25zdCBjID0gY29sb3IgLyAyNTU7XG4gICAgICAgIHJldHVybiAoYyA8PSAwLjAzOTI4KSA/IGMgLyAxMi45MiA6IE1hdGgucG93KCgoYyArIDAuMDU1KSAvIDEuMDU1KSwgMi40KTtcbiAgICB9XG4gICAgLyoqXG4gICAgICpcdGh0dHA6Ly8yNHdheXMub3JnLzIwMTAvY2FsY3VsYXRpbmctY29sb3ItY29udHJhc3RcbiAgICAgKiAgUmV0dXJuICd0cnVlJyBpZiBsaWdodGVyIGNvbG9yIG90aGVyd2lzZSAnZmFsc2UnXG4gICAgICovXG4gICAgaXNMaWdodGVyKCkge1xuICAgICAgICBjb25zdCB5aXEgPSAodGhpcy5yZ2JhLnIgKiAyOTkgKyB0aGlzLnJnYmEuZyAqIDU4NyArIHRoaXMucmdiYS5iICogMTE0KSAvIDEwMDA7XG4gICAgICAgIHJldHVybiB5aXEgPj0gMTI4O1xuICAgIH1cbiAgICBpc0xpZ2h0ZXJUaGFuKGFub3RoZXIpIHtcbiAgICAgICAgY29uc3QgbHVtMSA9IHRoaXMuZ2V0UmVsYXRpdmVMdW1pbmFuY2UoKTtcbiAgICAgICAgY29uc3QgbHVtMiA9IGFub3RoZXIuZ2V0UmVsYXRpdmVMdW1pbmFuY2UoKTtcbiAgICAgICAgcmV0dXJuIGx1bTEgPiBsdW0yO1xuICAgIH1cbiAgICBpc0RhcmtlclRoYW4oYW5vdGhlcikge1xuICAgICAgICBjb25zdCBsdW0xID0gdGhpcy5nZXRSZWxhdGl2ZUx1bWluYW5jZSgpO1xuICAgICAgICBjb25zdCBsdW0yID0gYW5vdGhlci5nZXRSZWxhdGl2ZUx1bWluYW5jZSgpO1xuICAgICAgICByZXR1cm4gbHVtMSA8IGx1bTI7XG4gICAgfVxuICAgIGxpZ2h0ZW4oZmFjdG9yKSB7XG4gICAgICAgIHJldHVybiBuZXcgQ29sb3IobmV3IEhTTEEodGhpcy5oc2xhLmgsIHRoaXMuaHNsYS5zLCB0aGlzLmhzbGEubCArIHRoaXMuaHNsYS5sICogZmFjdG9yLCB0aGlzLmhzbGEuYSkpO1xuICAgIH1cbiAgICBkYXJrZW4oZmFjdG9yKSB7XG4gICAgICAgIHJldHVybiBuZXcgQ29sb3IobmV3IEhTTEEodGhpcy5oc2xhLmgsIHRoaXMuaHNsYS5zLCB0aGlzLmhzbGEubCAtIHRoaXMuaHNsYS5sICogZmFjdG9yLCB0aGlzLmhzbGEuYSkpO1xuICAgIH1cbiAgICB0cmFuc3BhcmVudChmYWN0b3IpIHtcbiAgICAgICAgY29uc3QgeyByLCBnLCBiLCBhIH0gPSB0aGlzLnJnYmE7XG4gICAgICAgIHJldHVybiBuZXcgQ29sb3IobmV3IFJHQkEociwgZywgYiwgYSAqIGZhY3RvcikpO1xuICAgIH1cbiAgICBpc1RyYW5zcGFyZW50KCkge1xuICAgICAgICByZXR1cm4gdGhpcy5yZ2JhLmEgPT09IDA7XG4gICAgfVxuICAgIGlzT3BhcXVlKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5yZ2JhLmEgPT09IDE7XG4gICAgfVxuICAgIG9wcG9zaXRlKCkge1xuICAgICAgICByZXR1cm4gbmV3IENvbG9yKG5ldyBSR0JBKDI1NSAtIHRoaXMucmdiYS5yLCAyNTUgLSB0aGlzLnJnYmEuZywgMjU1IC0gdGhpcy5yZ2JhLmIsIHRoaXMucmdiYS5hKSk7XG4gICAgfVxuICAgIG1ha2VPcGFxdWUob3BhcXVlQmFja2dyb3VuZCkge1xuICAgICAgICBpZiAodGhpcy5pc09wYXF1ZSgpIHx8IG9wYXF1ZUJhY2tncm91bmQucmdiYS5hICE9PSAxKSB7XG4gICAgICAgICAgICAvLyBvbmx5IGFsbG93IHRvIGJsZW5kIG9udG8gYSBub24tb3BhcXVlIGNvbG9yIG9udG8gYSBvcGFxdWUgY29sb3JcbiAgICAgICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IHsgciwgZywgYiwgYSB9ID0gdGhpcy5yZ2JhO1xuICAgICAgICAvLyBodHRwczovL3N0YWNrb3ZlcmZsb3cuY29tL3F1ZXN0aW9ucy8xMjIyODU0OC9maW5kaW5nLWVxdWl2YWxlbnQtY29sb3Itd2l0aC1vcGFjaXR5XG4gICAgICAgIHJldHVybiBuZXcgQ29sb3IobmV3IFJHQkEob3BhcXVlQmFja2dyb3VuZC5yZ2JhLnIgLSBhICogKG9wYXF1ZUJhY2tncm91bmQucmdiYS5yIC0gciksIG9wYXF1ZUJhY2tncm91bmQucmdiYS5nIC0gYSAqIChvcGFxdWVCYWNrZ3JvdW5kLnJnYmEuZyAtIGcpLCBvcGFxdWVCYWNrZ3JvdW5kLnJnYmEuYiAtIGEgKiAob3BhcXVlQmFja2dyb3VuZC5yZ2JhLmIgLSBiKSwgMSkpO1xuICAgIH1cbiAgICB0b1N0cmluZygpIHtcbiAgICAgICAgaWYgKCF0aGlzLl90b1N0cmluZykge1xuICAgICAgICAgICAgdGhpcy5fdG9TdHJpbmcgPSBDb2xvci5Gb3JtYXQuQ1NTLmZvcm1hdCh0aGlzKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdGhpcy5fdG9TdHJpbmc7XG4gICAgfVxuICAgIHN0YXRpYyBnZXRMaWdodGVyQ29sb3Iob2YsIHJlbGF0aXZlLCBmYWN0b3IpIHtcbiAgICAgICAgaWYgKG9mLmlzTGlnaHRlclRoYW4ocmVsYXRpdmUpKSB7XG4gICAgICAgICAgICByZXR1cm4gb2Y7XG4gICAgICAgIH1cbiAgICAgICAgZmFjdG9yID0gZmFjdG9yID8gZmFjdG9yIDogMC41O1xuICAgICAgICBjb25zdCBsdW0xID0gb2YuZ2V0UmVsYXRpdmVMdW1pbmFuY2UoKTtcbiAgICAgICAgY29uc3QgbHVtMiA9IHJlbGF0aXZlLmdldFJlbGF0aXZlTHVtaW5hbmNlKCk7XG4gICAgICAgIGZhY3RvciA9IGZhY3RvciAqIChsdW0yIC0gbHVtMSkgLyBsdW0yO1xuICAgICAgICByZXR1cm4gb2YubGlnaHRlbihmYWN0b3IpO1xuICAgIH1cbiAgICBzdGF0aWMgZ2V0RGFya2VyQ29sb3Iob2YsIHJlbGF0aXZlLCBmYWN0b3IpIHtcbiAgICAgICAgaWYgKG9mLmlzRGFya2VyVGhhbihyZWxhdGl2ZSkpIHtcbiAgICAgICAgICAgIHJldHVybiBvZjtcbiAgICAgICAgfVxuICAgICAgICBmYWN0b3IgPSBmYWN0b3IgPyBmYWN0b3IgOiAwLjU7XG4gICAgICAgIGNvbnN0IGx1bTEgPSBvZi5nZXRSZWxhdGl2ZUx1bWluYW5jZSgpO1xuICAgICAgICBjb25zdCBsdW0yID0gcmVsYXRpdmUuZ2V0UmVsYXRpdmVMdW1pbmFuY2UoKTtcbiAgICAgICAgZmFjdG9yID0gZmFjdG9yICogKGx1bTEgLSBsdW0yKSAvIGx1bTE7XG4gICAgICAgIHJldHVybiBvZi5kYXJrZW4oZmFjdG9yKTtcbiAgICB9XG59XG5Db2xvci53aGl0ZSA9IG5ldyBDb2xvcihuZXcgUkdCQSgyNTUsIDI1NSwgMjU1LCAxKSk7XG5Db2xvci5ibGFjayA9IG5ldyBDb2xvcihuZXcgUkdCQSgwLCAwLCAwLCAxKSk7XG5Db2xvci5yZWQgPSBuZXcgQ29sb3IobmV3IFJHQkEoMjU1LCAwLCAwLCAxKSk7XG5Db2xvci5ibHVlID0gbmV3IENvbG9yKG5ldyBSR0JBKDAsIDAsIDI1NSwgMSkpO1xuQ29sb3IuZ3JlZW4gPSBuZXcgQ29sb3IobmV3IFJHQkEoMCwgMjU1LCAwLCAxKSk7XG5Db2xvci5jeWFuID0gbmV3IENvbG9yKG5ldyBSR0JBKDAsIDI1NSwgMjU1LCAxKSk7XG5Db2xvci5saWdodGdyZXkgPSBuZXcgQ29sb3IobmV3IFJHQkEoMjExLCAyMTEsIDIxMSwgMSkpO1xuQ29sb3IudHJhbnNwYXJlbnQgPSBuZXcgQ29sb3IobmV3IFJHQkEoMCwgMCwgMCwgMCkpO1xuKGZ1bmN0aW9uIChDb2xvcikge1xuICAgIGxldCBGb3JtYXQ7XG4gICAgKGZ1bmN0aW9uIChGb3JtYXQpIHtcbiAgICAgICAgbGV0IENTUztcbiAgICAgICAgKGZ1bmN0aW9uIChDU1MpIHtcbiAgICAgICAgICAgIGZ1bmN0aW9uIGZvcm1hdFJHQihjb2xvcikge1xuICAgICAgICAgICAgICAgIGlmIChjb2xvci5yZ2JhLmEgPT09IDEpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGByZ2IoJHtjb2xvci5yZ2JhLnJ9LCAke2NvbG9yLnJnYmEuZ30sICR7Y29sb3IucmdiYS5ifSlgO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByZXR1cm4gQ29sb3IuRm9ybWF0LkNTUy5mb3JtYXRSR0JBKGNvbG9yKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIENTUy5mb3JtYXRSR0IgPSBmb3JtYXRSR0I7XG4gICAgICAgICAgICBmdW5jdGlvbiBmb3JtYXRSR0JBKGNvbG9yKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGByZ2JhKCR7Y29sb3IucmdiYS5yfSwgJHtjb2xvci5yZ2JhLmd9LCAke2NvbG9yLnJnYmEuYn0sICR7Kyhjb2xvci5yZ2JhLmEpLnRvRml4ZWQoMil9KWA7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBDU1MuZm9ybWF0UkdCQSA9IGZvcm1hdFJHQkE7XG4gICAgICAgICAgICBmdW5jdGlvbiBmb3JtYXRIU0woY29sb3IpIHtcbiAgICAgICAgICAgICAgICBpZiAoY29sb3IuaHNsYS5hID09PSAxKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBgaHNsKCR7Y29sb3IuaHNsYS5ofSwgJHsoY29sb3IuaHNsYS5zICogMTAwKS50b0ZpeGVkKDIpfSUsICR7KGNvbG9yLmhzbGEubCAqIDEwMCkudG9GaXhlZCgyKX0lKWA7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJldHVybiBDb2xvci5Gb3JtYXQuQ1NTLmZvcm1hdEhTTEEoY29sb3IpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgQ1NTLmZvcm1hdEhTTCA9IGZvcm1hdEhTTDtcbiAgICAgICAgICAgIGZ1bmN0aW9uIGZvcm1hdEhTTEEoY29sb3IpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gYGhzbGEoJHtjb2xvci5oc2xhLmh9LCAkeyhjb2xvci5oc2xhLnMgKiAxMDApLnRvRml4ZWQoMil9JSwgJHsoY29sb3IuaHNsYS5sICogMTAwKS50b0ZpeGVkKDIpfSUsICR7Y29sb3IuaHNsYS5hLnRvRml4ZWQoMil9KWA7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBDU1MuZm9ybWF0SFNMQSA9IGZvcm1hdEhTTEE7XG4gICAgICAgICAgICBmdW5jdGlvbiBfdG9Ud29EaWdpdEhleChuKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgciA9IG4udG9TdHJpbmcoMTYpO1xuICAgICAgICAgICAgICAgIHJldHVybiByLmxlbmd0aCAhPT0gMiA/ICcwJyArIHIgOiByO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgKiBGb3JtYXRzIHRoZSBjb2xvciBhcyAjUlJHR0JCXG4gICAgICAgICAgICAgKi9cbiAgICAgICAgICAgIGZ1bmN0aW9uIGZvcm1hdEhleChjb2xvcikge1xuICAgICAgICAgICAgICAgIHJldHVybiBgIyR7X3RvVHdvRGlnaXRIZXgoY29sb3IucmdiYS5yKX0ke190b1R3b0RpZ2l0SGV4KGNvbG9yLnJnYmEuZyl9JHtfdG9Ud29EaWdpdEhleChjb2xvci5yZ2JhLmIpfWA7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBDU1MuZm9ybWF0SGV4ID0gZm9ybWF0SGV4O1xuICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgKiBGb3JtYXRzIHRoZSBjb2xvciBhcyAjUlJHR0JCQUFcbiAgICAgICAgICAgICAqIElmICdjb21wYWN0JyBpcyBzZXQsIGNvbG9ycyB3aXRob3V0IHRyYW5zcGFyYW5jeSB3aWxsIGJlIHByaW50ZWQgYXMgI1JSR0dCQlxuICAgICAgICAgICAgICovXG4gICAgICAgICAgICBmdW5jdGlvbiBmb3JtYXRIZXhBKGNvbG9yLCBjb21wYWN0ID0gZmFsc2UpIHtcbiAgICAgICAgICAgICAgICBpZiAoY29tcGFjdCAmJiBjb2xvci5yZ2JhLmEgPT09IDEpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIENvbG9yLkZvcm1hdC5DU1MuZm9ybWF0SGV4KGNvbG9yKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcmV0dXJuIGAjJHtfdG9Ud29EaWdpdEhleChjb2xvci5yZ2JhLnIpfSR7X3RvVHdvRGlnaXRIZXgoY29sb3IucmdiYS5nKX0ke190b1R3b0RpZ2l0SGV4KGNvbG9yLnJnYmEuYil9JHtfdG9Ud29EaWdpdEhleChNYXRoLnJvdW5kKGNvbG9yLnJnYmEuYSAqIDI1NSkpfWA7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBDU1MuZm9ybWF0SGV4QSA9IGZvcm1hdEhleEE7XG4gICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAqIFRoZSBkZWZhdWx0IGZvcm1hdCB3aWxsIHVzZSBIRVggaWYgb3BhcXVlIGFuZCBSR0JBIG90aGVyd2lzZS5cbiAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgZnVuY3Rpb24gZm9ybWF0KGNvbG9yKSB7XG4gICAgICAgICAgICAgICAgaWYgKGNvbG9yLmlzT3BhcXVlKCkpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIENvbG9yLkZvcm1hdC5DU1MuZm9ybWF0SGV4KGNvbG9yKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcmV0dXJuIENvbG9yLkZvcm1hdC5DU1MuZm9ybWF0UkdCQShjb2xvcik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBDU1MuZm9ybWF0ID0gZm9ybWF0O1xuICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgKiBDb252ZXJ0cyBhbiBIZXggY29sb3IgdmFsdWUgdG8gYSBDb2xvci5cbiAgICAgICAgICAgICAqIHJldHVybnMgciwgZywgYW5kIGIgYXJlIGNvbnRhaW5lZCBpbiB0aGUgc2V0IFswLCAyNTVdXG4gICAgICAgICAgICAgKiBAcGFyYW0gaGV4IHN0cmluZyAoI1JHQiwgI1JHQkEsICNSUkdHQkIgb3IgI1JSR0dCQkFBKS5cbiAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgZnVuY3Rpb24gcGFyc2VIZXgoaGV4KSB7XG4gICAgICAgICAgICAgICAgY29uc3QgbGVuZ3RoID0gaGV4Lmxlbmd0aDtcbiAgICAgICAgICAgICAgICBpZiAobGVuZ3RoID09PSAwKSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIEludmFsaWQgY29sb3JcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmIChoZXguY2hhckNvZGVBdCgwKSAhPT0gMzUgLyogQ2hhckNvZGUuSGFzaCAqLykge1xuICAgICAgICAgICAgICAgICAgICAvLyBEb2VzIG5vdCBiZWdpbiB3aXRoIGEgI1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKGxlbmd0aCA9PT0gNykge1xuICAgICAgICAgICAgICAgICAgICAvLyAjUlJHR0JCIGZvcm1hdFxuICAgICAgICAgICAgICAgICAgICBjb25zdCByID0gMTYgKiBfcGFyc2VIZXhEaWdpdChoZXguY2hhckNvZGVBdCgxKSkgKyBfcGFyc2VIZXhEaWdpdChoZXguY2hhckNvZGVBdCgyKSk7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGcgPSAxNiAqIF9wYXJzZUhleERpZ2l0KGhleC5jaGFyQ29kZUF0KDMpKSArIF9wYXJzZUhleERpZ2l0KGhleC5jaGFyQ29kZUF0KDQpKTtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgYiA9IDE2ICogX3BhcnNlSGV4RGlnaXQoaGV4LmNoYXJDb2RlQXQoNSkpICsgX3BhcnNlSGV4RGlnaXQoaGV4LmNoYXJDb2RlQXQoNikpO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gbmV3IENvbG9yKG5ldyBSR0JBKHIsIGcsIGIsIDEpKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKGxlbmd0aCA9PT0gOSkge1xuICAgICAgICAgICAgICAgICAgICAvLyAjUlJHR0JCQUEgZm9ybWF0XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHIgPSAxNiAqIF9wYXJzZUhleERpZ2l0KGhleC5jaGFyQ29kZUF0KDEpKSArIF9wYXJzZUhleERpZ2l0KGhleC5jaGFyQ29kZUF0KDIpKTtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgZyA9IDE2ICogX3BhcnNlSGV4RGlnaXQoaGV4LmNoYXJDb2RlQXQoMykpICsgX3BhcnNlSGV4RGlnaXQoaGV4LmNoYXJDb2RlQXQoNCkpO1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBiID0gMTYgKiBfcGFyc2VIZXhEaWdpdChoZXguY2hhckNvZGVBdCg1KSkgKyBfcGFyc2VIZXhEaWdpdChoZXguY2hhckNvZGVBdCg2KSk7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGEgPSAxNiAqIF9wYXJzZUhleERpZ2l0KGhleC5jaGFyQ29kZUF0KDcpKSArIF9wYXJzZUhleERpZ2l0KGhleC5jaGFyQ29kZUF0KDgpKTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG5ldyBDb2xvcihuZXcgUkdCQShyLCBnLCBiLCBhIC8gMjU1KSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmIChsZW5ndGggPT09IDQpIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gI1JHQiBmb3JtYXRcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgciA9IF9wYXJzZUhleERpZ2l0KGhleC5jaGFyQ29kZUF0KDEpKTtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgZyA9IF9wYXJzZUhleERpZ2l0KGhleC5jaGFyQ29kZUF0KDIpKTtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgYiA9IF9wYXJzZUhleERpZ2l0KGhleC5jaGFyQ29kZUF0KDMpKTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG5ldyBDb2xvcihuZXcgUkdCQSgxNiAqIHIgKyByLCAxNiAqIGcgKyBnLCAxNiAqIGIgKyBiKSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmIChsZW5ndGggPT09IDUpIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gI1JHQkEgZm9ybWF0XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHIgPSBfcGFyc2VIZXhEaWdpdChoZXguY2hhckNvZGVBdCgxKSk7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGcgPSBfcGFyc2VIZXhEaWdpdChoZXguY2hhckNvZGVBdCgyKSk7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGIgPSBfcGFyc2VIZXhEaWdpdChoZXguY2hhckNvZGVBdCgzKSk7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGEgPSBfcGFyc2VIZXhEaWdpdChoZXguY2hhckNvZGVBdCg0KSk7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBuZXcgQ29sb3IobmV3IFJHQkEoMTYgKiByICsgciwgMTYgKiBnICsgZywgMTYgKiBiICsgYiwgKDE2ICogYSArIGEpIC8gMjU1KSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIC8vIEludmFsaWQgY29sb3JcbiAgICAgICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIENTUy5wYXJzZUhleCA9IHBhcnNlSGV4O1xuICAgICAgICAgICAgZnVuY3Rpb24gX3BhcnNlSGV4RGlnaXQoY2hhckNvZGUpIHtcbiAgICAgICAgICAgICAgICBzd2l0Y2ggKGNoYXJDb2RlKSB7XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgNDggLyogQ2hhckNvZGUuRGlnaXQwICovOiByZXR1cm4gMDtcbiAgICAgICAgICAgICAgICAgICAgY2FzZSA0OSAvKiBDaGFyQ29kZS5EaWdpdDEgKi86IHJldHVybiAxO1xuICAgICAgICAgICAgICAgICAgICBjYXNlIDUwIC8qIENoYXJDb2RlLkRpZ2l0MiAqLzogcmV0dXJuIDI7XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgNTEgLyogQ2hhckNvZGUuRGlnaXQzICovOiByZXR1cm4gMztcbiAgICAgICAgICAgICAgICAgICAgY2FzZSA1MiAvKiBDaGFyQ29kZS5EaWdpdDQgKi86IHJldHVybiA0O1xuICAgICAgICAgICAgICAgICAgICBjYXNlIDUzIC8qIENoYXJDb2RlLkRpZ2l0NSAqLzogcmV0dXJuIDU7XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgNTQgLyogQ2hhckNvZGUuRGlnaXQ2ICovOiByZXR1cm4gNjtcbiAgICAgICAgICAgICAgICAgICAgY2FzZSA1NSAvKiBDaGFyQ29kZS5EaWdpdDcgKi86IHJldHVybiA3O1xuICAgICAgICAgICAgICAgICAgICBjYXNlIDU2IC8qIENoYXJDb2RlLkRpZ2l0OCAqLzogcmV0dXJuIDg7XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgNTcgLyogQ2hhckNvZGUuRGlnaXQ5ICovOiByZXR1cm4gOTtcbiAgICAgICAgICAgICAgICAgICAgY2FzZSA5NyAvKiBDaGFyQ29kZS5hICovOiByZXR1cm4gMTA7XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgNjUgLyogQ2hhckNvZGUuQSAqLzogcmV0dXJuIDEwO1xuICAgICAgICAgICAgICAgICAgICBjYXNlIDk4IC8qIENoYXJDb2RlLmIgKi86IHJldHVybiAxMTtcbiAgICAgICAgICAgICAgICAgICAgY2FzZSA2NiAvKiBDaGFyQ29kZS5CICovOiByZXR1cm4gMTE7XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgOTkgLyogQ2hhckNvZGUuYyAqLzogcmV0dXJuIDEyO1xuICAgICAgICAgICAgICAgICAgICBjYXNlIDY3IC8qIENoYXJDb2RlLkMgKi86IHJldHVybiAxMjtcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAxMDAgLyogQ2hhckNvZGUuZCAqLzogcmV0dXJuIDEzO1xuICAgICAgICAgICAgICAgICAgICBjYXNlIDY4IC8qIENoYXJDb2RlLkQgKi86IHJldHVybiAxMztcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAxMDEgLyogQ2hhckNvZGUuZSAqLzogcmV0dXJuIDE0O1xuICAgICAgICAgICAgICAgICAgICBjYXNlIDY5IC8qIENoYXJDb2RlLkUgKi86IHJldHVybiAxNDtcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAxMDIgLyogQ2hhckNvZGUuZiAqLzogcmV0dXJuIDE1O1xuICAgICAgICAgICAgICAgICAgICBjYXNlIDcwIC8qIENoYXJDb2RlLkYgKi86IHJldHVybiAxNTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcmV0dXJuIDA7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pKENTUyA9IEZvcm1hdC5DU1MgfHwgKEZvcm1hdC5DU1MgPSB7fSkpO1xuICAgIH0pKEZvcm1hdCA9IENvbG9yLkZvcm1hdCB8fCAoQ29sb3IuRm9ybWF0ID0ge30pKTtcbn0pKENvbG9yIHx8IChDb2xvciA9IHt9KSk7XG4iLCAiLyotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAqICBDb3B5cmlnaHQgKGMpIE1pY3Jvc29mdCBDb3Jwb3JhdGlvbi4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqICBMaWNlbnNlZCB1bmRlciB0aGUgTUlUIExpY2Vuc2UuIFNlZSBMaWNlbnNlLnR4dCBpbiB0aGUgcHJvamVjdCByb290IGZvciBsaWNlbnNlIGluZm9ybWF0aW9uLlxuICotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSovXG5pbXBvcnQgeyBDb2xvciwgSFNMQSB9IGZyb20gJy4uLy4uLy4uL2Jhc2UvY29tbW9uL2NvbG9yLmpzJztcbmZ1bmN0aW9uIF9wYXJzZUNhcHR1cmVHcm91cHMoY2FwdHVyZUdyb3Vwcykge1xuICAgIGNvbnN0IHZhbHVlcyA9IFtdO1xuICAgIGZvciAoY29uc3QgY2FwdHVyZUdyb3VwIG9mIGNhcHR1cmVHcm91cHMpIHtcbiAgICAgICAgY29uc3QgcGFyc2VkTnVtYmVyID0gTnVtYmVyKGNhcHR1cmVHcm91cCk7XG4gICAgICAgIGlmIChwYXJzZWROdW1iZXIgfHwgcGFyc2VkTnVtYmVyID09PSAwICYmIGNhcHR1cmVHcm91cC5yZXBsYWNlKC9cXHMvZywgJycpICE9PSAnJykge1xuICAgICAgICAgICAgdmFsdWVzLnB1c2gocGFyc2VkTnVtYmVyKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gdmFsdWVzO1xufVxuZnVuY3Rpb24gX3RvSUNvbG9yKHIsIGcsIGIsIGEpIHtcbiAgICByZXR1cm4ge1xuICAgICAgICByZWQ6IHIgLyAyNTUsXG4gICAgICAgIGJsdWU6IGIgLyAyNTUsXG4gICAgICAgIGdyZWVuOiBnIC8gMjU1LFxuICAgICAgICBhbHBoYTogYVxuICAgIH07XG59XG5mdW5jdGlvbiBfZmluZFJhbmdlKG1vZGVsLCBtYXRjaCkge1xuICAgIGNvbnN0IGluZGV4ID0gbWF0Y2guaW5kZXg7XG4gICAgY29uc3QgbGVuZ3RoID0gbWF0Y2hbMF0ubGVuZ3RoO1xuICAgIGlmICghaW5kZXgpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBjb25zdCBzdGFydFBvc2l0aW9uID0gbW9kZWwucG9zaXRpb25BdChpbmRleCk7XG4gICAgY29uc3QgcmFuZ2UgPSB7XG4gICAgICAgIHN0YXJ0TGluZU51bWJlcjogc3RhcnRQb3NpdGlvbi5saW5lTnVtYmVyLFxuICAgICAgICBzdGFydENvbHVtbjogc3RhcnRQb3NpdGlvbi5jb2x1bW4sXG4gICAgICAgIGVuZExpbmVOdW1iZXI6IHN0YXJ0UG9zaXRpb24ubGluZU51bWJlcixcbiAgICAgICAgZW5kQ29sdW1uOiBzdGFydFBvc2l0aW9uLmNvbHVtbiArIGxlbmd0aFxuICAgIH07XG4gICAgcmV0dXJuIHJhbmdlO1xufVxuZnVuY3Rpb24gX2ZpbmRIZXhDb2xvckluZm9ybWF0aW9uKHJhbmdlLCBoZXhWYWx1ZSkge1xuICAgIGlmICghcmFuZ2UpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBjb25zdCBwYXJzZWRIZXhDb2xvciA9IENvbG9yLkZvcm1hdC5DU1MucGFyc2VIZXgoaGV4VmFsdWUpO1xuICAgIGlmICghcGFyc2VkSGV4Q29sb3IpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICByZXR1cm4ge1xuICAgICAgICByYW5nZTogcmFuZ2UsXG4gICAgICAgIGNvbG9yOiBfdG9JQ29sb3IocGFyc2VkSGV4Q29sb3IucmdiYS5yLCBwYXJzZWRIZXhDb2xvci5yZ2JhLmcsIHBhcnNlZEhleENvbG9yLnJnYmEuYiwgcGFyc2VkSGV4Q29sb3IucmdiYS5hKVxuICAgIH07XG59XG5mdW5jdGlvbiBfZmluZFJHQkNvbG9ySW5mb3JtYXRpb24ocmFuZ2UsIG1hdGNoZXMsIGlzQWxwaGEpIHtcbiAgICBpZiAoIXJhbmdlIHx8IG1hdGNoZXMubGVuZ3RoICE9PSAxKSB7XG4gICAgICAgIHJldHVybjtcbiAgICB9XG4gICAgY29uc3QgbWF0Y2ggPSBtYXRjaGVzWzBdO1xuICAgIGNvbnN0IGNhcHR1cmVHcm91cHMgPSBtYXRjaC52YWx1ZXMoKTtcbiAgICBjb25zdCBwYXJzZWRSZWdleCA9IF9wYXJzZUNhcHR1cmVHcm91cHMoY2FwdHVyZUdyb3Vwcyk7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgcmFuZ2U6IHJhbmdlLFxuICAgICAgICBjb2xvcjogX3RvSUNvbG9yKHBhcnNlZFJlZ2V4WzBdLCBwYXJzZWRSZWdleFsxXSwgcGFyc2VkUmVnZXhbMl0sIGlzQWxwaGEgPyBwYXJzZWRSZWdleFszXSA6IDEpXG4gICAgfTtcbn1cbmZ1bmN0aW9uIF9maW5kSFNMQ29sb3JJbmZvcm1hdGlvbihyYW5nZSwgbWF0Y2hlcywgaXNBbHBoYSkge1xuICAgIGlmICghcmFuZ2UgfHwgbWF0Y2hlcy5sZW5ndGggIT09IDEpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBjb25zdCBtYXRjaCA9IG1hdGNoZXNbMF07XG4gICAgY29uc3QgY2FwdHVyZUdyb3VwcyA9IG1hdGNoLnZhbHVlcygpO1xuICAgIGNvbnN0IHBhcnNlZFJlZ2V4ID0gX3BhcnNlQ2FwdHVyZUdyb3VwcyhjYXB0dXJlR3JvdXBzKTtcbiAgICBjb25zdCBjb2xvckVxdWl2YWxlbnQgPSBuZXcgQ29sb3IobmV3IEhTTEEocGFyc2VkUmVnZXhbMF0sIHBhcnNlZFJlZ2V4WzFdIC8gMTAwLCBwYXJzZWRSZWdleFsyXSAvIDEwMCwgaXNBbHBoYSA/IHBhcnNlZFJlZ2V4WzNdIDogMSkpO1xuICAgIHJldHVybiB7XG4gICAgICAgIHJhbmdlOiByYW5nZSxcbiAgICAgICAgY29sb3I6IF90b0lDb2xvcihjb2xvckVxdWl2YWxlbnQucmdiYS5yLCBjb2xvckVxdWl2YWxlbnQucmdiYS5nLCBjb2xvckVxdWl2YWxlbnQucmdiYS5iLCBjb2xvckVxdWl2YWxlbnQucmdiYS5hKVxuICAgIH07XG59XG5mdW5jdGlvbiBfZmluZE1hdGNoZXMobW9kZWwsIHJlZ2V4KSB7XG4gICAgaWYgKHR5cGVvZiBtb2RlbCA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgcmV0dXJuIFsuLi5tb2RlbC5tYXRjaEFsbChyZWdleCldO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgcmV0dXJuIG1vZGVsLmZpbmRNYXRjaGVzKHJlZ2V4KTtcbiAgICB9XG59XG5mdW5jdGlvbiBjb21wdXRlQ29sb3JzKG1vZGVsKSB7XG4gICAgY29uc3QgcmVzdWx0ID0gW107XG4gICAgLy8gRWFybHkgdmFsaWRhdGlvbiBmb3IgUkdCIGFuZCBIU0xcbiAgICBjb25zdCBpbml0aWFsVmFsaWRhdGlvblJlZ2V4ID0gL1xcYihyZ2J8cmdiYXxoc2x8aHNsYSkoXFwoWzAtOVxccywuXFwlXSpcXCkpfCgjKShbQS1GYS1mMC05XXszfSlcXGJ8KCMpKFtBLUZhLWYwLTldezR9KVxcYnwoIykoW0EtRmEtZjAtOV17Nn0pXFxifCgjKShbQS1GYS1mMC05XXs4fSlcXGIvZ207XG4gICAgY29uc3QgaW5pdGlhbFZhbGlkYXRpb25NYXRjaGVzID0gX2ZpbmRNYXRjaGVzKG1vZGVsLCBpbml0aWFsVmFsaWRhdGlvblJlZ2V4KTtcbiAgICAvLyBQb3RlbnRpYWwgY29sb3JzIGhhdmUgYmVlbiBmb3VuZCwgdmFsaWRhdGUgdGhlIHBhcmFtZXRlcnNcbiAgICBpZiAoaW5pdGlhbFZhbGlkYXRpb25NYXRjaGVzLmxlbmd0aCA+IDApIHtcbiAgICAgICAgZm9yIChjb25zdCBpbml0aWFsTWF0Y2ggb2YgaW5pdGlhbFZhbGlkYXRpb25NYXRjaGVzKSB7XG4gICAgICAgICAgICBjb25zdCBpbml0aWFsQ2FwdHVyZUdyb3VwcyA9IGluaXRpYWxNYXRjaC5maWx0ZXIoY2FwdHVyZUdyb3VwID0+IGNhcHR1cmVHcm91cCAhPT0gdW5kZWZpbmVkKTtcbiAgICAgICAgICAgIGNvbnN0IGNvbG9yU2NoZW1lID0gaW5pdGlhbENhcHR1cmVHcm91cHNbMV07XG4gICAgICAgICAgICBjb25zdCBjb2xvclBhcmFtZXRlcnMgPSBpbml0aWFsQ2FwdHVyZUdyb3Vwc1syXTtcbiAgICAgICAgICAgIGlmICghY29sb3JQYXJhbWV0ZXJzKSB7XG4gICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBsZXQgY29sb3JJbmZvcm1hdGlvbjtcbiAgICAgICAgICAgIGlmIChjb2xvclNjaGVtZSA9PT0gJ3JnYicpIHtcbiAgICAgICAgICAgICAgICBjb25zdCByZWdleFBhcmFtZXRlcnMgPSAvXlxcKFxccyooMjVbMC01XXwyWzAtNF1bMC05XXwxWzAtOV17Mn18WzEtOV1bMC05XXxbMC05XSlcXHMqLFxccyooMjVbMC01XXwyWzAtNF1bMC05XXwxWzAtOV17Mn18WzEtOV1bMC05XXxbMC05XSlcXHMqLFxccyooMjVbMC01XXwyWzAtNF1bMC05XXwxWzAtOV17Mn18WzEtOV1bMC05XXxbMC05XSlcXHMqXFwpJC9nbTtcbiAgICAgICAgICAgICAgICBjb2xvckluZm9ybWF0aW9uID0gX2ZpbmRSR0JDb2xvckluZm9ybWF0aW9uKF9maW5kUmFuZ2UobW9kZWwsIGluaXRpYWxNYXRjaCksIF9maW5kTWF0Y2hlcyhjb2xvclBhcmFtZXRlcnMsIHJlZ2V4UGFyYW1ldGVycyksIGZhbHNlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKGNvbG9yU2NoZW1lID09PSAncmdiYScpIHtcbiAgICAgICAgICAgICAgICBjb25zdCByZWdleFBhcmFtZXRlcnMgPSAvXlxcKFxccyooMjVbMC01XXwyWzAtNF1bMC05XXwxWzAtOV17Mn18WzEtOV1bMC05XXxbMC05XSlcXHMqLFxccyooMjVbMC01XXwyWzAtNF1bMC05XXwxWzAtOV17Mn18WzEtOV1bMC05XXxbMC05XSlcXHMqLFxccyooMjVbMC01XXwyWzAtNF1bMC05XXwxWzAtOV17Mn18WzEtOV1bMC05XXxbMC05XSlcXHMqLFxccyooMFsuXVswLTldK3xbLl1bMC05XSt8WzAxXVsuXXxbMDFdKVxccypcXCkkL2dtO1xuICAgICAgICAgICAgICAgIGNvbG9ySW5mb3JtYXRpb24gPSBfZmluZFJHQkNvbG9ySW5mb3JtYXRpb24oX2ZpbmRSYW5nZShtb2RlbCwgaW5pdGlhbE1hdGNoKSwgX2ZpbmRNYXRjaGVzKGNvbG9yUGFyYW1ldGVycywgcmVnZXhQYXJhbWV0ZXJzKSwgdHJ1ZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmIChjb2xvclNjaGVtZSA9PT0gJ2hzbCcpIHtcbiAgICAgICAgICAgICAgICBjb25zdCByZWdleFBhcmFtZXRlcnMgPSAvXlxcKFxccyooMzZbMF18M1swLTVdWzAtOV18WzEyXVswLTldWzAtOV18WzEtOV0/WzAtOV0pXFxzKixcXHMqKDEwMHxcXGR7MSwyfVsuXVxcZCp8XFxkezEsMn0pJVxccyosXFxzKigxMDB8XFxkezEsMn1bLl1cXGQqfFxcZHsxLDJ9KSVcXHMqXFwpJC9nbTtcbiAgICAgICAgICAgICAgICBjb2xvckluZm9ybWF0aW9uID0gX2ZpbmRIU0xDb2xvckluZm9ybWF0aW9uKF9maW5kUmFuZ2UobW9kZWwsIGluaXRpYWxNYXRjaCksIF9maW5kTWF0Y2hlcyhjb2xvclBhcmFtZXRlcnMsIHJlZ2V4UGFyYW1ldGVycyksIGZhbHNlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKGNvbG9yU2NoZW1lID09PSAnaHNsYScpIHtcbiAgICAgICAgICAgICAgICBjb25zdCByZWdleFBhcmFtZXRlcnMgPSAvXlxcKFxccyooMzZbMF18M1swLTVdWzAtOV18WzEyXVswLTldWzAtOV18WzEtOV0/WzAtOV0pXFxzKixcXHMqKDEwMHxcXGR7MSwyfVsuXVxcZCp8XFxkezEsMn0pJVxccyosXFxzKigxMDB8XFxkezEsMn1bLl1cXGQqfFxcZHsxLDJ9KSVcXHMqLFxccyooMFsuXVswLTldK3xbLl1bMC05XSt8WzAxXVsuXXxbMDFdKVxccypcXCkkL2dtO1xuICAgICAgICAgICAgICAgIGNvbG9ySW5mb3JtYXRpb24gPSBfZmluZEhTTENvbG9ySW5mb3JtYXRpb24oX2ZpbmRSYW5nZShtb2RlbCwgaW5pdGlhbE1hdGNoKSwgX2ZpbmRNYXRjaGVzKGNvbG9yUGFyYW1ldGVycywgcmVnZXhQYXJhbWV0ZXJzKSwgdHJ1ZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmIChjb2xvclNjaGVtZSA9PT0gJyMnKSB7XG4gICAgICAgICAgICAgICAgY29sb3JJbmZvcm1hdGlvbiA9IF9maW5kSGV4Q29sb3JJbmZvcm1hdGlvbihfZmluZFJhbmdlKG1vZGVsLCBpbml0aWFsTWF0Y2gpLCBjb2xvclNjaGVtZSArIGNvbG9yUGFyYW1ldGVycyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoY29sb3JJbmZvcm1hdGlvbikge1xuICAgICAgICAgICAgICAgIHJlc3VsdC5wdXNoKGNvbG9ySW5mb3JtYXRpb24pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiByZXN1bHQ7XG59XG4vKipcbiAqIFJldHVybnMgYW4gYXJyYXkgb2YgYWxsIGRlZmF1bHQgZG9jdW1lbnQgY29sb3JzIGluIHRoZSBwcm92aWRlZCBkb2N1bWVudFxuICovXG5leHBvcnQgZnVuY3Rpb24gY29tcHV0ZURlZmF1bHREb2N1bWVudENvbG9ycyhtb2RlbCkge1xuICAgIGlmICghbW9kZWwgfHwgdHlwZW9mIG1vZGVsLmdldFZhbHVlICE9PSAnZnVuY3Rpb24nIHx8IHR5cGVvZiBtb2RlbC5wb3NpdGlvbkF0ICE9PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIC8vIFVua25vd24gY2FsbGVyIVxuICAgICAgICByZXR1cm4gW107XG4gICAgfVxuICAgIHJldHVybiBjb21wdXRlQ29sb3JzKG1vZGVsKTtcbn1cbiIsICIvKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICogIENvcHlyaWdodCAoYykgTWljcm9zb2Z0IENvcnBvcmF0aW9uLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICogIExpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgTGljZW5zZS4gU2VlIExpY2Vuc2UudHh0IGluIHRoZSBwcm9qZWN0IHJvb3QgZm9yIGxpY2Vuc2UgaW5mb3JtYXRpb24uXG4gKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKi9cbmNvbnN0IG1hcmtSZWdleCA9IG5ldyBSZWdFeHAoJ1xcXFxiTUFSSzpcXFxccyooLiopJCcsICdkJyk7XG5jb25zdCB0cmltRGFzaGVzUmVnZXggPSAvXi0rfC0rJC9nO1xuLyoqXG4gKiBGaW5kIHNlY3Rpb24gaGVhZGVycyBpbiB0aGUgbW9kZWwuXG4gKlxuICogQHBhcmFtIG1vZGVsIHRoZSB0ZXh0IG1vZGVsIHRvIHNlYXJjaCBpblxuICogQHBhcmFtIG9wdGlvbnMgb3B0aW9ucyB0byBzZWFyY2ggd2l0aFxuICogQHJldHVybnMgYW4gYXJyYXkgb2Ygc2VjdGlvbiBoZWFkZXJzXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBmaW5kU2VjdGlvbkhlYWRlcnMobW9kZWwsIG9wdGlvbnMpIHtcbiAgICB2YXIgX2E7XG4gICAgbGV0IGhlYWRlcnMgPSBbXTtcbiAgICBpZiAob3B0aW9ucy5maW5kUmVnaW9uU2VjdGlvbkhlYWRlcnMgJiYgKChfYSA9IG9wdGlvbnMuZm9sZGluZ1J1bGVzKSA9PT0gbnVsbCB8fCBfYSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2EubWFya2VycykpIHtcbiAgICAgICAgY29uc3QgcmVnaW9uSGVhZGVycyA9IGNvbGxlY3RSZWdpb25IZWFkZXJzKG1vZGVsLCBvcHRpb25zKTtcbiAgICAgICAgaGVhZGVycyA9IGhlYWRlcnMuY29uY2F0KHJlZ2lvbkhlYWRlcnMpO1xuICAgIH1cbiAgICBpZiAob3B0aW9ucy5maW5kTWFya1NlY3Rpb25IZWFkZXJzKSB7XG4gICAgICAgIGNvbnN0IG1hcmtIZWFkZXJzID0gY29sbGVjdE1hcmtIZWFkZXJzKG1vZGVsKTtcbiAgICAgICAgaGVhZGVycyA9IGhlYWRlcnMuY29uY2F0KG1hcmtIZWFkZXJzKTtcbiAgICB9XG4gICAgcmV0dXJuIGhlYWRlcnM7XG59XG5mdW5jdGlvbiBjb2xsZWN0UmVnaW9uSGVhZGVycyhtb2RlbCwgb3B0aW9ucykge1xuICAgIGNvbnN0IHJlZ2lvbkhlYWRlcnMgPSBbXTtcbiAgICBjb25zdCBlbmRMaW5lTnVtYmVyID0gbW9kZWwuZ2V0TGluZUNvdW50KCk7XG4gICAgZm9yIChsZXQgbGluZU51bWJlciA9IDE7IGxpbmVOdW1iZXIgPD0gZW5kTGluZU51bWJlcjsgbGluZU51bWJlcisrKSB7XG4gICAgICAgIGNvbnN0IGxpbmVDb250ZW50ID0gbW9kZWwuZ2V0TGluZUNvbnRlbnQobGluZU51bWJlcik7XG4gICAgICAgIGNvbnN0IG1hdGNoID0gbGluZUNvbnRlbnQubWF0Y2gob3B0aW9ucy5mb2xkaW5nUnVsZXMubWFya2Vycy5zdGFydCk7XG4gICAgICAgIGlmIChtYXRjaCkge1xuICAgICAgICAgICAgY29uc3QgcmFuZ2UgPSB7IHN0YXJ0TGluZU51bWJlcjogbGluZU51bWJlciwgc3RhcnRDb2x1bW46IG1hdGNoWzBdLmxlbmd0aCArIDEsIGVuZExpbmVOdW1iZXI6IGxpbmVOdW1iZXIsIGVuZENvbHVtbjogbGluZUNvbnRlbnQubGVuZ3RoICsgMSB9O1xuICAgICAgICAgICAgaWYgKHJhbmdlLmVuZENvbHVtbiA+IHJhbmdlLnN0YXJ0Q29sdW1uKSB7XG4gICAgICAgICAgICAgICAgY29uc3Qgc2VjdGlvbkhlYWRlciA9IHtcbiAgICAgICAgICAgICAgICAgICAgcmFuZ2UsXG4gICAgICAgICAgICAgICAgICAgIC4uLmdldEhlYWRlclRleHQobGluZUNvbnRlbnQuc3Vic3RyaW5nKG1hdGNoWzBdLmxlbmd0aCkpLFxuICAgICAgICAgICAgICAgICAgICBzaG91bGRCZUluQ29tbWVudHM6IGZhbHNlXG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICBpZiAoc2VjdGlvbkhlYWRlci50ZXh0IHx8IHNlY3Rpb25IZWFkZXIuaGFzU2VwYXJhdG9yTGluZSkge1xuICAgICAgICAgICAgICAgICAgICByZWdpb25IZWFkZXJzLnB1c2goc2VjdGlvbkhlYWRlcik7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiByZWdpb25IZWFkZXJzO1xufVxuZnVuY3Rpb24gY29sbGVjdE1hcmtIZWFkZXJzKG1vZGVsKSB7XG4gICAgY29uc3QgbWFya0hlYWRlcnMgPSBbXTtcbiAgICBjb25zdCBlbmRMaW5lTnVtYmVyID0gbW9kZWwuZ2V0TGluZUNvdW50KCk7XG4gICAgZm9yIChsZXQgbGluZU51bWJlciA9IDE7IGxpbmVOdW1iZXIgPD0gZW5kTGluZU51bWJlcjsgbGluZU51bWJlcisrKSB7XG4gICAgICAgIGNvbnN0IGxpbmVDb250ZW50ID0gbW9kZWwuZ2V0TGluZUNvbnRlbnQobGluZU51bWJlcik7XG4gICAgICAgIGFkZE1hcmtIZWFkZXJJZkZvdW5kKGxpbmVDb250ZW50LCBsaW5lTnVtYmVyLCBtYXJrSGVhZGVycyk7XG4gICAgfVxuICAgIHJldHVybiBtYXJrSGVhZGVycztcbn1cbmZ1bmN0aW9uIGFkZE1hcmtIZWFkZXJJZkZvdW5kKGxpbmVDb250ZW50LCBsaW5lTnVtYmVyLCBzZWN0aW9uSGVhZGVycykge1xuICAgIG1hcmtSZWdleC5sYXN0SW5kZXggPSAwO1xuICAgIGNvbnN0IG1hdGNoID0gbWFya1JlZ2V4LmV4ZWMobGluZUNvbnRlbnQpO1xuICAgIGlmIChtYXRjaCkge1xuICAgICAgICBjb25zdCBjb2x1bW4gPSBtYXRjaC5pbmRpY2VzWzFdWzBdICsgMTtcbiAgICAgICAgY29uc3QgZW5kQ29sdW1uID0gbWF0Y2guaW5kaWNlc1sxXVsxXSArIDE7XG4gICAgICAgIGNvbnN0IHJhbmdlID0geyBzdGFydExpbmVOdW1iZXI6IGxpbmVOdW1iZXIsIHN0YXJ0Q29sdW1uOiBjb2x1bW4sIGVuZExpbmVOdW1iZXI6IGxpbmVOdW1iZXIsIGVuZENvbHVtbjogZW5kQ29sdW1uIH07XG4gICAgICAgIGlmIChyYW5nZS5lbmRDb2x1bW4gPiByYW5nZS5zdGFydENvbHVtbikge1xuICAgICAgICAgICAgY29uc3Qgc2VjdGlvbkhlYWRlciA9IHtcbiAgICAgICAgICAgICAgICByYW5nZSxcbiAgICAgICAgICAgICAgICAuLi5nZXRIZWFkZXJUZXh0KG1hdGNoWzFdKSxcbiAgICAgICAgICAgICAgICBzaG91bGRCZUluQ29tbWVudHM6IHRydWVcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICBpZiAoc2VjdGlvbkhlYWRlci50ZXh0IHx8IHNlY3Rpb25IZWFkZXIuaGFzU2VwYXJhdG9yTGluZSkge1xuICAgICAgICAgICAgICAgIHNlY3Rpb25IZWFkZXJzLnB1c2goc2VjdGlvbkhlYWRlcik7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG59XG5mdW5jdGlvbiBnZXRIZWFkZXJUZXh0KHRleHQpIHtcbiAgICB0ZXh0ID0gdGV4dC50cmltKCk7XG4gICAgY29uc3QgaGFzU2VwYXJhdG9yTGluZSA9IHRleHQuc3RhcnRzV2l0aCgnLScpO1xuICAgIHRleHQgPSB0ZXh0LnJlcGxhY2UodHJpbURhc2hlc1JlZ2V4LCAnJyk7XG4gICAgcmV0dXJuIHsgdGV4dCwgaGFzU2VwYXJhdG9yTGluZSB9O1xufVxuIiwgIi8qLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gKiAgQ29weXJpZ2h0IChjKSBNaWNyb3NvZnQgQ29ycG9yYXRpb24uIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKiAgTGljZW5zZWQgdW5kZXIgdGhlIE1JVCBMaWNlbnNlLiBTZWUgTGljZW5zZS50eHQgaW4gdGhlIHByb2plY3Qgcm9vdCBmb3IgbGljZW5zZSBpbmZvcm1hdGlvbi5cbiAqLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qL1xuaW1wb3J0IHsgc3RyaW5nRGlmZiB9IGZyb20gJy4uLy4uLy4uL2Jhc2UvY29tbW9uL2RpZmYvZGlmZi5qcyc7XG5pbXBvcnQgeyBVUkkgfSBmcm9tICcuLi8uLi8uLi9iYXNlL2NvbW1vbi91cmkuanMnO1xuaW1wb3J0IHsgUG9zaXRpb24gfSBmcm9tICcuLi9jb3JlL3Bvc2l0aW9uLmpzJztcbmltcG9ydCB7IFJhbmdlIH0gZnJvbSAnLi4vY29yZS9yYW5nZS5qcyc7XG5pbXBvcnQgeyBNaXJyb3JUZXh0TW9kZWwgYXMgQmFzZU1pcnJvck1vZGVsIH0gZnJvbSAnLi4vbW9kZWwvbWlycm9yVGV4dE1vZGVsLmpzJztcbmltcG9ydCB7IGVuc3VyZVZhbGlkV29yZERlZmluaXRpb24sIGdldFdvcmRBdFRleHQgfSBmcm9tICcuLi9jb3JlL3dvcmRIZWxwZXIuanMnO1xuaW1wb3J0IHsgY29tcHV0ZUxpbmtzIH0gZnJvbSAnLi4vbGFuZ3VhZ2VzL2xpbmtDb21wdXRlci5qcyc7XG5pbXBvcnQgeyBCYXNpY0lucGxhY2VSZXBsYWNlIH0gZnJvbSAnLi4vbGFuZ3VhZ2VzL3N1cHBvcnRzL2lucGxhY2VSZXBsYWNlU3VwcG9ydC5qcyc7XG5pbXBvcnQgeyBjcmVhdGVNb25hY29CYXNlQVBJIH0gZnJvbSAnLi9lZGl0b3JCYXNlQXBpLmpzJztcbmltcG9ydCB7IFN0b3BXYXRjaCB9IGZyb20gJy4uLy4uLy4uL2Jhc2UvY29tbW9uL3N0b3B3YXRjaC5qcyc7XG5pbXBvcnQgeyBVbmljb2RlVGV4dE1vZGVsSGlnaGxpZ2h0ZXIgfSBmcm9tICcuL3VuaWNvZGVUZXh0TW9kZWxIaWdobGlnaHRlci5qcyc7XG5pbXBvcnQgeyBsaW5lc0RpZmZDb21wdXRlcnMgfSBmcm9tICcuLi9kaWZmL2xpbmVzRGlmZkNvbXB1dGVycy5qcyc7XG5pbXBvcnQgeyBjcmVhdGVQcm94eU9iamVjdCwgZ2V0QWxsTWV0aG9kTmFtZXMgfSBmcm9tICcuLi8uLi8uLi9iYXNlL2NvbW1vbi9vYmplY3RzLmpzJztcbmltcG9ydCB7IGNvbXB1dGVEZWZhdWx0RG9jdW1lbnRDb2xvcnMgfSBmcm9tICcuLi9sYW5ndWFnZXMvZGVmYXVsdERvY3VtZW50Q29sb3JzQ29tcHV0ZXIuanMnO1xuaW1wb3J0IHsgZmluZFNlY3Rpb25IZWFkZXJzIH0gZnJvbSAnLi9maW5kU2VjdGlvbkhlYWRlcnMuanMnO1xuLyoqXG4gKiBAaW50ZXJuYWxcbiAqL1xuY2xhc3MgTWlycm9yTW9kZWwgZXh0ZW5kcyBCYXNlTWlycm9yTW9kZWwge1xuICAgIGdldCB1cmkoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl91cmk7XG4gICAgfVxuICAgIGdldCBlb2woKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9lb2w7XG4gICAgfVxuICAgIGdldFZhbHVlKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5nZXRUZXh0KCk7XG4gICAgfVxuICAgIGZpbmRNYXRjaGVzKHJlZ2V4KSB7XG4gICAgICAgIGNvbnN0IG1hdGNoZXMgPSBbXTtcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0aGlzLl9saW5lcy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgY29uc3QgbGluZSA9IHRoaXMuX2xpbmVzW2ldO1xuICAgICAgICAgICAgY29uc3Qgb2Zmc2V0VG9BZGQgPSB0aGlzLm9mZnNldEF0KG5ldyBQb3NpdGlvbihpICsgMSwgMSkpO1xuICAgICAgICAgICAgY29uc3QgaXRlcmF0b3JPdmVyTWF0Y2hlcyA9IGxpbmUubWF0Y2hBbGwocmVnZXgpO1xuICAgICAgICAgICAgZm9yIChjb25zdCBtYXRjaCBvZiBpdGVyYXRvck92ZXJNYXRjaGVzKSB7XG4gICAgICAgICAgICAgICAgaWYgKG1hdGNoLmluZGV4IHx8IG1hdGNoLmluZGV4ID09PSAwKSB7XG4gICAgICAgICAgICAgICAgICAgIG1hdGNoLmluZGV4ID0gbWF0Y2guaW5kZXggKyBvZmZzZXRUb0FkZDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgbWF0Y2hlcy5wdXNoKG1hdGNoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbWF0Y2hlcztcbiAgICB9XG4gICAgZ2V0TGluZXNDb250ZW50KCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fbGluZXMuc2xpY2UoMCk7XG4gICAgfVxuICAgIGdldExpbmVDb3VudCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2xpbmVzLmxlbmd0aDtcbiAgICB9XG4gICAgZ2V0TGluZUNvbnRlbnQobGluZU51bWJlcikge1xuICAgICAgICByZXR1cm4gdGhpcy5fbGluZXNbbGluZU51bWJlciAtIDFdO1xuICAgIH1cbiAgICBnZXRXb3JkQXRQb3NpdGlvbihwb3NpdGlvbiwgd29yZERlZmluaXRpb24pIHtcbiAgICAgICAgY29uc3Qgd29yZEF0VGV4dCA9IGdldFdvcmRBdFRleHQocG9zaXRpb24uY29sdW1uLCBlbnN1cmVWYWxpZFdvcmREZWZpbml0aW9uKHdvcmREZWZpbml0aW9uKSwgdGhpcy5fbGluZXNbcG9zaXRpb24ubGluZU51bWJlciAtIDFdLCAwKTtcbiAgICAgICAgaWYgKHdvcmRBdFRleHQpIHtcbiAgICAgICAgICAgIHJldHVybiBuZXcgUmFuZ2UocG9zaXRpb24ubGluZU51bWJlciwgd29yZEF0VGV4dC5zdGFydENvbHVtbiwgcG9zaXRpb24ubGluZU51bWJlciwgd29yZEF0VGV4dC5lbmRDb2x1bW4pO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgIH1cbiAgICB3b3Jkcyh3b3JkRGVmaW5pdGlvbikge1xuICAgICAgICBjb25zdCBsaW5lcyA9IHRoaXMuX2xpbmVzO1xuICAgICAgICBjb25zdCB3b3JkZW5pemUgPSB0aGlzLl93b3JkZW5pemUuYmluZCh0aGlzKTtcbiAgICAgICAgbGV0IGxpbmVOdW1iZXIgPSAwO1xuICAgICAgICBsZXQgbGluZVRleHQgPSAnJztcbiAgICAgICAgbGV0IHdvcmRSYW5nZXNJZHggPSAwO1xuICAgICAgICBsZXQgd29yZFJhbmdlcyA9IFtdO1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgKltTeW1ib2wuaXRlcmF0b3JdKCkge1xuICAgICAgICAgICAgICAgIHdoaWxlICh0cnVlKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmICh3b3JkUmFuZ2VzSWR4IDwgd29yZFJhbmdlcy5sZW5ndGgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHZhbHVlID0gbGluZVRleHQuc3Vic3RyaW5nKHdvcmRSYW5nZXNbd29yZFJhbmdlc0lkeF0uc3RhcnQsIHdvcmRSYW5nZXNbd29yZFJhbmdlc0lkeF0uZW5kKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHdvcmRSYW5nZXNJZHggKz0gMTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHlpZWxkIHZhbHVlO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGxpbmVOdW1iZXIgPCBsaW5lcy5sZW5ndGgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBsaW5lVGV4dCA9IGxpbmVzW2xpbmVOdW1iZXJdO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHdvcmRSYW5nZXMgPSB3b3JkZW5pemUobGluZVRleHQsIHdvcmREZWZpbml0aW9uKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB3b3JkUmFuZ2VzSWR4ID0gMDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBsaW5lTnVtYmVyICs9IDE7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICB9XG4gICAgZ2V0TGluZVdvcmRzKGxpbmVOdW1iZXIsIHdvcmREZWZpbml0aW9uKSB7XG4gICAgICAgIGNvbnN0IGNvbnRlbnQgPSB0aGlzLl9saW5lc1tsaW5lTnVtYmVyIC0gMV07XG4gICAgICAgIGNvbnN0IHJhbmdlcyA9IHRoaXMuX3dvcmRlbml6ZShjb250ZW50LCB3b3JkRGVmaW5pdGlvbik7XG4gICAgICAgIGNvbnN0IHdvcmRzID0gW107XG4gICAgICAgIGZvciAoY29uc3QgcmFuZ2Ugb2YgcmFuZ2VzKSB7XG4gICAgICAgICAgICB3b3Jkcy5wdXNoKHtcbiAgICAgICAgICAgICAgICB3b3JkOiBjb250ZW50LnN1YnN0cmluZyhyYW5nZS5zdGFydCwgcmFuZ2UuZW5kKSxcbiAgICAgICAgICAgICAgICBzdGFydENvbHVtbjogcmFuZ2Uuc3RhcnQgKyAxLFxuICAgICAgICAgICAgICAgIGVuZENvbHVtbjogcmFuZ2UuZW5kICsgMVxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHdvcmRzO1xuICAgIH1cbiAgICBfd29yZGVuaXplKGNvbnRlbnQsIHdvcmREZWZpbml0aW9uKSB7XG4gICAgICAgIGNvbnN0IHJlc3VsdCA9IFtdO1xuICAgICAgICBsZXQgbWF0Y2g7XG4gICAgICAgIHdvcmREZWZpbml0aW9uLmxhc3RJbmRleCA9IDA7IC8vIHJlc2V0IGxhc3RJbmRleCBqdXN0IHRvIGJlIHN1cmVcbiAgICAgICAgd2hpbGUgKG1hdGNoID0gd29yZERlZmluaXRpb24uZXhlYyhjb250ZW50KSkge1xuICAgICAgICAgICAgaWYgKG1hdGNoWzBdLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICAgICAgICAgIC8vIGl0IGRpZCBtYXRjaCB0aGUgZW1wdHkgc3RyaW5nXG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXN1bHQucHVzaCh7IHN0YXJ0OiBtYXRjaC5pbmRleCwgZW5kOiBtYXRjaC5pbmRleCArIG1hdGNoWzBdLmxlbmd0aCB9KTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cbiAgICBnZXRWYWx1ZUluUmFuZ2UocmFuZ2UpIHtcbiAgICAgICAgcmFuZ2UgPSB0aGlzLl92YWxpZGF0ZVJhbmdlKHJhbmdlKTtcbiAgICAgICAgaWYgKHJhbmdlLnN0YXJ0TGluZU51bWJlciA9PT0gcmFuZ2UuZW5kTGluZU51bWJlcikge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuX2xpbmVzW3JhbmdlLnN0YXJ0TGluZU51bWJlciAtIDFdLnN1YnN0cmluZyhyYW5nZS5zdGFydENvbHVtbiAtIDEsIHJhbmdlLmVuZENvbHVtbiAtIDEpO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IGxpbmVFbmRpbmcgPSB0aGlzLl9lb2w7XG4gICAgICAgIGNvbnN0IHN0YXJ0TGluZUluZGV4ID0gcmFuZ2Uuc3RhcnRMaW5lTnVtYmVyIC0gMTtcbiAgICAgICAgY29uc3QgZW5kTGluZUluZGV4ID0gcmFuZ2UuZW5kTGluZU51bWJlciAtIDE7XG4gICAgICAgIGNvbnN0IHJlc3VsdExpbmVzID0gW107XG4gICAgICAgIHJlc3VsdExpbmVzLnB1c2godGhpcy5fbGluZXNbc3RhcnRMaW5lSW5kZXhdLnN1YnN0cmluZyhyYW5nZS5zdGFydENvbHVtbiAtIDEpKTtcbiAgICAgICAgZm9yIChsZXQgaSA9IHN0YXJ0TGluZUluZGV4ICsgMTsgaSA8IGVuZExpbmVJbmRleDsgaSsrKSB7XG4gICAgICAgICAgICByZXN1bHRMaW5lcy5wdXNoKHRoaXMuX2xpbmVzW2ldKTtcbiAgICAgICAgfVxuICAgICAgICByZXN1bHRMaW5lcy5wdXNoKHRoaXMuX2xpbmVzW2VuZExpbmVJbmRleF0uc3Vic3RyaW5nKDAsIHJhbmdlLmVuZENvbHVtbiAtIDEpKTtcbiAgICAgICAgcmV0dXJuIHJlc3VsdExpbmVzLmpvaW4obGluZUVuZGluZyk7XG4gICAgfVxuICAgIG9mZnNldEF0KHBvc2l0aW9uKSB7XG4gICAgICAgIHBvc2l0aW9uID0gdGhpcy5fdmFsaWRhdGVQb3NpdGlvbihwb3NpdGlvbik7XG4gICAgICAgIHRoaXMuX2Vuc3VyZUxpbmVTdGFydHMoKTtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2xpbmVTdGFydHMuZ2V0UHJlZml4U3VtKHBvc2l0aW9uLmxpbmVOdW1iZXIgLSAyKSArIChwb3NpdGlvbi5jb2x1bW4gLSAxKTtcbiAgICB9XG4gICAgcG9zaXRpb25BdChvZmZzZXQpIHtcbiAgICAgICAgb2Zmc2V0ID0gTWF0aC5mbG9vcihvZmZzZXQpO1xuICAgICAgICBvZmZzZXQgPSBNYXRoLm1heCgwLCBvZmZzZXQpO1xuICAgICAgICB0aGlzLl9lbnN1cmVMaW5lU3RhcnRzKCk7XG4gICAgICAgIGNvbnN0IG91dCA9IHRoaXMuX2xpbmVTdGFydHMuZ2V0SW5kZXhPZihvZmZzZXQpO1xuICAgICAgICBjb25zdCBsaW5lTGVuZ3RoID0gdGhpcy5fbGluZXNbb3V0LmluZGV4XS5sZW5ndGg7XG4gICAgICAgIC8vIEVuc3VyZSB3ZSByZXR1cm4gYSB2YWxpZCBwb3NpdGlvblxuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgbGluZU51bWJlcjogMSArIG91dC5pbmRleCxcbiAgICAgICAgICAgIGNvbHVtbjogMSArIE1hdGgubWluKG91dC5yZW1haW5kZXIsIGxpbmVMZW5ndGgpXG4gICAgICAgIH07XG4gICAgfVxuICAgIF92YWxpZGF0ZVJhbmdlKHJhbmdlKSB7XG4gICAgICAgIGNvbnN0IHN0YXJ0ID0gdGhpcy5fdmFsaWRhdGVQb3NpdGlvbih7IGxpbmVOdW1iZXI6IHJhbmdlLnN0YXJ0TGluZU51bWJlciwgY29sdW1uOiByYW5nZS5zdGFydENvbHVtbiB9KTtcbiAgICAgICAgY29uc3QgZW5kID0gdGhpcy5fdmFsaWRhdGVQb3NpdGlvbih7IGxpbmVOdW1iZXI6IHJhbmdlLmVuZExpbmVOdW1iZXIsIGNvbHVtbjogcmFuZ2UuZW5kQ29sdW1uIH0pO1xuICAgICAgICBpZiAoc3RhcnQubGluZU51bWJlciAhPT0gcmFuZ2Uuc3RhcnRMaW5lTnVtYmVyXG4gICAgICAgICAgICB8fCBzdGFydC5jb2x1bW4gIT09IHJhbmdlLnN0YXJ0Q29sdW1uXG4gICAgICAgICAgICB8fCBlbmQubGluZU51bWJlciAhPT0gcmFuZ2UuZW5kTGluZU51bWJlclxuICAgICAgICAgICAgfHwgZW5kLmNvbHVtbiAhPT0gcmFuZ2UuZW5kQ29sdW1uKSB7XG4gICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgIHN0YXJ0TGluZU51bWJlcjogc3RhcnQubGluZU51bWJlcixcbiAgICAgICAgICAgICAgICBzdGFydENvbHVtbjogc3RhcnQuY29sdW1uLFxuICAgICAgICAgICAgICAgIGVuZExpbmVOdW1iZXI6IGVuZC5saW5lTnVtYmVyLFxuICAgICAgICAgICAgICAgIGVuZENvbHVtbjogZW5kLmNvbHVtblxuICAgICAgICAgICAgfTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gcmFuZ2U7XG4gICAgfVxuICAgIF92YWxpZGF0ZVBvc2l0aW9uKHBvc2l0aW9uKSB7XG4gICAgICAgIGlmICghUG9zaXRpb24uaXNJUG9zaXRpb24ocG9zaXRpb24pKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ2JhZCBwb3NpdGlvbicpO1xuICAgICAgICB9XG4gICAgICAgIGxldCB7IGxpbmVOdW1iZXIsIGNvbHVtbiB9ID0gcG9zaXRpb247XG4gICAgICAgIGxldCBoYXNDaGFuZ2VkID0gZmFsc2U7XG4gICAgICAgIGlmIChsaW5lTnVtYmVyIDwgMSkge1xuICAgICAgICAgICAgbGluZU51bWJlciA9IDE7XG4gICAgICAgICAgICBjb2x1bW4gPSAxO1xuICAgICAgICAgICAgaGFzQ2hhbmdlZCA9IHRydWU7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAobGluZU51bWJlciA+IHRoaXMuX2xpbmVzLmxlbmd0aCkge1xuICAgICAgICAgICAgbGluZU51bWJlciA9IHRoaXMuX2xpbmVzLmxlbmd0aDtcbiAgICAgICAgICAgIGNvbHVtbiA9IHRoaXMuX2xpbmVzW2xpbmVOdW1iZXIgLSAxXS5sZW5ndGggKyAxO1xuICAgICAgICAgICAgaGFzQ2hhbmdlZCA9IHRydWU7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBjb25zdCBtYXhDaGFyYWN0ZXIgPSB0aGlzLl9saW5lc1tsaW5lTnVtYmVyIC0gMV0ubGVuZ3RoICsgMTtcbiAgICAgICAgICAgIGlmIChjb2x1bW4gPCAxKSB7XG4gICAgICAgICAgICAgICAgY29sdW1uID0gMTtcbiAgICAgICAgICAgICAgICBoYXNDaGFuZ2VkID0gdHJ1ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKGNvbHVtbiA+IG1heENoYXJhY3Rlcikge1xuICAgICAgICAgICAgICAgIGNvbHVtbiA9IG1heENoYXJhY3RlcjtcbiAgICAgICAgICAgICAgICBoYXNDaGFuZ2VkID0gdHJ1ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBpZiAoIWhhc0NoYW5nZWQpIHtcbiAgICAgICAgICAgIHJldHVybiBwb3NpdGlvbjtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiB7IGxpbmVOdW1iZXIsIGNvbHVtbiB9O1xuICAgICAgICB9XG4gICAgfVxufVxuLyoqXG4gKiBAaW50ZXJuYWxcbiAqL1xuZXhwb3J0IGNsYXNzIEVkaXRvclNpbXBsZVdvcmtlciB7XG4gICAgY29uc3RydWN0b3IoaG9zdCwgZm9yZWlnbk1vZHVsZUZhY3RvcnkpIHtcbiAgICAgICAgdGhpcy5faG9zdCA9IGhvc3Q7XG4gICAgICAgIHRoaXMuX21vZGVscyA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gICAgICAgIHRoaXMuX2ZvcmVpZ25Nb2R1bGVGYWN0b3J5ID0gZm9yZWlnbk1vZHVsZUZhY3Rvcnk7XG4gICAgICAgIHRoaXMuX2ZvcmVpZ25Nb2R1bGUgPSBudWxsO1xuICAgIH1cbiAgICBkaXNwb3NlKCkge1xuICAgICAgICB0aGlzLl9tb2RlbHMgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuICAgIH1cbiAgICBfZ2V0TW9kZWwodXJpKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9tb2RlbHNbdXJpXTtcbiAgICB9XG4gICAgX2dldE1vZGVscygpIHtcbiAgICAgICAgY29uc3QgYWxsID0gW107XG4gICAgICAgIE9iamVjdC5rZXlzKHRoaXMuX21vZGVscykuZm9yRWFjaCgoa2V5KSA9PiBhbGwucHVzaCh0aGlzLl9tb2RlbHNba2V5XSkpO1xuICAgICAgICByZXR1cm4gYWxsO1xuICAgIH1cbiAgICBhY2NlcHROZXdNb2RlbChkYXRhKSB7XG4gICAgICAgIHRoaXMuX21vZGVsc1tkYXRhLnVybF0gPSBuZXcgTWlycm9yTW9kZWwoVVJJLnBhcnNlKGRhdGEudXJsKSwgZGF0YS5saW5lcywgZGF0YS5FT0wsIGRhdGEudmVyc2lvbklkKTtcbiAgICB9XG4gICAgYWNjZXB0TW9kZWxDaGFuZ2VkKHN0clVSTCwgZSkge1xuICAgICAgICBpZiAoIXRoaXMuX21vZGVsc1tzdHJVUkxdKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgbW9kZWwgPSB0aGlzLl9tb2RlbHNbc3RyVVJMXTtcbiAgICAgICAgbW9kZWwub25FdmVudHMoZSk7XG4gICAgfVxuICAgIGFjY2VwdFJlbW92ZWRNb2RlbChzdHJVUkwpIHtcbiAgICAgICAgaWYgKCF0aGlzLl9tb2RlbHNbc3RyVVJMXSkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGRlbGV0ZSB0aGlzLl9tb2RlbHNbc3RyVVJMXTtcbiAgICB9XG4gICAgYXN5bmMgY29tcHV0ZVVuaWNvZGVIaWdobGlnaHRzKHVybCwgb3B0aW9ucywgcmFuZ2UpIHtcbiAgICAgICAgY29uc3QgbW9kZWwgPSB0aGlzLl9nZXRNb2RlbCh1cmwpO1xuICAgICAgICBpZiAoIW1vZGVsKSB7XG4gICAgICAgICAgICByZXR1cm4geyByYW5nZXM6IFtdLCBoYXNNb3JlOiBmYWxzZSwgYW1iaWd1b3VzQ2hhcmFjdGVyQ291bnQ6IDAsIGludmlzaWJsZUNoYXJhY3RlckNvdW50OiAwLCBub25CYXNpY0FzY2lpQ2hhcmFjdGVyQ291bnQ6IDAgfTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gVW5pY29kZVRleHRNb2RlbEhpZ2hsaWdodGVyLmNvbXB1dGVVbmljb2RlSGlnaGxpZ2h0cyhtb2RlbCwgb3B0aW9ucywgcmFuZ2UpO1xuICAgIH1cbiAgICBhc3luYyBmaW5kU2VjdGlvbkhlYWRlcnModXJsLCBvcHRpb25zKSB7XG4gICAgICAgIGNvbnN0IG1vZGVsID0gdGhpcy5fZ2V0TW9kZWwodXJsKTtcbiAgICAgICAgaWYgKCFtb2RlbCkge1xuICAgICAgICAgICAgcmV0dXJuIFtdO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBmaW5kU2VjdGlvbkhlYWRlcnMobW9kZWwsIG9wdGlvbnMpO1xuICAgIH1cbiAgICAvLyAtLS0tIEJFR0lOIGRpZmYgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgICBhc3luYyBjb21wdXRlRGlmZihvcmlnaW5hbFVybCwgbW9kaWZpZWRVcmwsIG9wdGlvbnMsIGFsZ29yaXRobSkge1xuICAgICAgICBjb25zdCBvcmlnaW5hbCA9IHRoaXMuX2dldE1vZGVsKG9yaWdpbmFsVXJsKTtcbiAgICAgICAgY29uc3QgbW9kaWZpZWQgPSB0aGlzLl9nZXRNb2RlbChtb2RpZmllZFVybCk7XG4gICAgICAgIGlmICghb3JpZ2luYWwgfHwgIW1vZGlmaWVkKSB7XG4gICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCByZXN1bHQgPSBFZGl0b3JTaW1wbGVXb3JrZXIuY29tcHV0ZURpZmYob3JpZ2luYWwsIG1vZGlmaWVkLCBvcHRpb25zLCBhbGdvcml0aG0pO1xuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cbiAgICBzdGF0aWMgY29tcHV0ZURpZmYob3JpZ2luYWxUZXh0TW9kZWwsIG1vZGlmaWVkVGV4dE1vZGVsLCBvcHRpb25zLCBhbGdvcml0aG0pIHtcbiAgICAgICAgY29uc3QgZGlmZkFsZ29yaXRobSA9IGFsZ29yaXRobSA9PT0gJ2FkdmFuY2VkJyA/IGxpbmVzRGlmZkNvbXB1dGVycy5nZXREZWZhdWx0KCkgOiBsaW5lc0RpZmZDb21wdXRlcnMuZ2V0TGVnYWN5KCk7XG4gICAgICAgIGNvbnN0IG9yaWdpbmFsTGluZXMgPSBvcmlnaW5hbFRleHRNb2RlbC5nZXRMaW5lc0NvbnRlbnQoKTtcbiAgICAgICAgY29uc3QgbW9kaWZpZWRMaW5lcyA9IG1vZGlmaWVkVGV4dE1vZGVsLmdldExpbmVzQ29udGVudCgpO1xuICAgICAgICBjb25zdCByZXN1bHQgPSBkaWZmQWxnb3JpdGhtLmNvbXB1dGVEaWZmKG9yaWdpbmFsTGluZXMsIG1vZGlmaWVkTGluZXMsIG9wdGlvbnMpO1xuICAgICAgICBjb25zdCBpZGVudGljYWwgPSAocmVzdWx0LmNoYW5nZXMubGVuZ3RoID4gMCA/IGZhbHNlIDogdGhpcy5fbW9kZWxzQXJlSWRlbnRpY2FsKG9yaWdpbmFsVGV4dE1vZGVsLCBtb2RpZmllZFRleHRNb2RlbCkpO1xuICAgICAgICBmdW5jdGlvbiBnZXRMaW5lQ2hhbmdlcyhjaGFuZ2VzKSB7XG4gICAgICAgICAgICByZXR1cm4gY2hhbmdlcy5tYXAobSA9PiB7XG4gICAgICAgICAgICAgICAgdmFyIF9hO1xuICAgICAgICAgICAgICAgIHJldHVybiAoW20ub3JpZ2luYWwuc3RhcnRMaW5lTnVtYmVyLCBtLm9yaWdpbmFsLmVuZExpbmVOdW1iZXJFeGNsdXNpdmUsIG0ubW9kaWZpZWQuc3RhcnRMaW5lTnVtYmVyLCBtLm1vZGlmaWVkLmVuZExpbmVOdW1iZXJFeGNsdXNpdmUsIChfYSA9IG0uaW5uZXJDaGFuZ2VzKSA9PT0gbnVsbCB8fCBfYSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2EubWFwKG0gPT4gW1xuICAgICAgICAgICAgICAgICAgICAgICAgbS5vcmlnaW5hbFJhbmdlLnN0YXJ0TGluZU51bWJlcixcbiAgICAgICAgICAgICAgICAgICAgICAgIG0ub3JpZ2luYWxSYW5nZS5zdGFydENvbHVtbixcbiAgICAgICAgICAgICAgICAgICAgICAgIG0ub3JpZ2luYWxSYW5nZS5lbmRMaW5lTnVtYmVyLFxuICAgICAgICAgICAgICAgICAgICAgICAgbS5vcmlnaW5hbFJhbmdlLmVuZENvbHVtbixcbiAgICAgICAgICAgICAgICAgICAgICAgIG0ubW9kaWZpZWRSYW5nZS5zdGFydExpbmVOdW1iZXIsXG4gICAgICAgICAgICAgICAgICAgICAgICBtLm1vZGlmaWVkUmFuZ2Uuc3RhcnRDb2x1bW4sXG4gICAgICAgICAgICAgICAgICAgICAgICBtLm1vZGlmaWVkUmFuZ2UuZW5kTGluZU51bWJlcixcbiAgICAgICAgICAgICAgICAgICAgICAgIG0ubW9kaWZpZWRSYW5nZS5lbmRDb2x1bW4sXG4gICAgICAgICAgICAgICAgICAgIF0pXSk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgaWRlbnRpY2FsLFxuICAgICAgICAgICAgcXVpdEVhcmx5OiByZXN1bHQuaGl0VGltZW91dCxcbiAgICAgICAgICAgIGNoYW5nZXM6IGdldExpbmVDaGFuZ2VzKHJlc3VsdC5jaGFuZ2VzKSxcbiAgICAgICAgICAgIG1vdmVzOiByZXN1bHQubW92ZXMubWFwKG0gPT4gKFtcbiAgICAgICAgICAgICAgICBtLmxpbmVSYW5nZU1hcHBpbmcub3JpZ2luYWwuc3RhcnRMaW5lTnVtYmVyLFxuICAgICAgICAgICAgICAgIG0ubGluZVJhbmdlTWFwcGluZy5vcmlnaW5hbC5lbmRMaW5lTnVtYmVyRXhjbHVzaXZlLFxuICAgICAgICAgICAgICAgIG0ubGluZVJhbmdlTWFwcGluZy5tb2RpZmllZC5zdGFydExpbmVOdW1iZXIsXG4gICAgICAgICAgICAgICAgbS5saW5lUmFuZ2VNYXBwaW5nLm1vZGlmaWVkLmVuZExpbmVOdW1iZXJFeGNsdXNpdmUsXG4gICAgICAgICAgICAgICAgZ2V0TGluZUNoYW5nZXMobS5jaGFuZ2VzKVxuICAgICAgICAgICAgXSkpLFxuICAgICAgICB9O1xuICAgIH1cbiAgICBzdGF0aWMgX21vZGVsc0FyZUlkZW50aWNhbChvcmlnaW5hbCwgbW9kaWZpZWQpIHtcbiAgICAgICAgY29uc3Qgb3JpZ2luYWxMaW5lQ291bnQgPSBvcmlnaW5hbC5nZXRMaW5lQ291bnQoKTtcbiAgICAgICAgY29uc3QgbW9kaWZpZWRMaW5lQ291bnQgPSBtb2RpZmllZC5nZXRMaW5lQ291bnQoKTtcbiAgICAgICAgaWYgKG9yaWdpbmFsTGluZUNvdW50ICE9PSBtb2RpZmllZExpbmVDb3VudCkge1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgICAgIGZvciAobGV0IGxpbmUgPSAxOyBsaW5lIDw9IG9yaWdpbmFsTGluZUNvdW50OyBsaW5lKyspIHtcbiAgICAgICAgICAgIGNvbnN0IG9yaWdpbmFsTGluZSA9IG9yaWdpbmFsLmdldExpbmVDb250ZW50KGxpbmUpO1xuICAgICAgICAgICAgY29uc3QgbW9kaWZpZWRMaW5lID0gbW9kaWZpZWQuZ2V0TGluZUNvbnRlbnQobGluZSk7XG4gICAgICAgICAgICBpZiAob3JpZ2luYWxMaW5lICE9PSBtb2RpZmllZExpbmUpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICAgIGFzeW5jIGNvbXB1dGVNb3JlTWluaW1hbEVkaXRzKG1vZGVsVXJsLCBlZGl0cywgcHJldHR5KSB7XG4gICAgICAgIGNvbnN0IG1vZGVsID0gdGhpcy5fZ2V0TW9kZWwobW9kZWxVcmwpO1xuICAgICAgICBpZiAoIW1vZGVsKSB7XG4gICAgICAgICAgICByZXR1cm4gZWRpdHM7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgcmVzdWx0ID0gW107XG4gICAgICAgIGxldCBsYXN0RW9sID0gdW5kZWZpbmVkO1xuICAgICAgICBlZGl0cyA9IGVkaXRzLnNsaWNlKDApLnNvcnQoKGEsIGIpID0+IHtcbiAgICAgICAgICAgIGlmIChhLnJhbmdlICYmIGIucmFuZ2UpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gUmFuZ2UuY29tcGFyZVJhbmdlc1VzaW5nU3RhcnRzKGEucmFuZ2UsIGIucmFuZ2UpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLy8gZW9sIG9ubHkgY2hhbmdlcyBzaG91bGQgZ28gdG8gdGhlIGVuZFxuICAgICAgICAgICAgY29uc3QgYVJuZyA9IGEucmFuZ2UgPyAwIDogMTtcbiAgICAgICAgICAgIGNvbnN0IGJSbmcgPSBiLnJhbmdlID8gMCA6IDE7XG4gICAgICAgICAgICByZXR1cm4gYVJuZyAtIGJSbmc7XG4gICAgICAgIH0pO1xuICAgICAgICAvLyBtZXJnZSBhZGphY2VudCBlZGl0c1xuICAgICAgICBsZXQgd3JpdGVJbmRleCA9IDA7XG4gICAgICAgIGZvciAobGV0IHJlYWRJbmRleCA9IDE7IHJlYWRJbmRleCA8IGVkaXRzLmxlbmd0aDsgcmVhZEluZGV4KyspIHtcbiAgICAgICAgICAgIGlmIChSYW5nZS5nZXRFbmRQb3NpdGlvbihlZGl0c1t3cml0ZUluZGV4XS5yYW5nZSkuZXF1YWxzKFJhbmdlLmdldFN0YXJ0UG9zaXRpb24oZWRpdHNbcmVhZEluZGV4XS5yYW5nZSkpKSB7XG4gICAgICAgICAgICAgICAgZWRpdHNbd3JpdGVJbmRleF0ucmFuZ2UgPSBSYW5nZS5mcm9tUG9zaXRpb25zKFJhbmdlLmdldFN0YXJ0UG9zaXRpb24oZWRpdHNbd3JpdGVJbmRleF0ucmFuZ2UpLCBSYW5nZS5nZXRFbmRQb3NpdGlvbihlZGl0c1tyZWFkSW5kZXhdLnJhbmdlKSk7XG4gICAgICAgICAgICAgICAgZWRpdHNbd3JpdGVJbmRleF0udGV4dCArPSBlZGl0c1tyZWFkSW5kZXhdLnRleHQ7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICB3cml0ZUluZGV4Kys7XG4gICAgICAgICAgICAgICAgZWRpdHNbd3JpdGVJbmRleF0gPSBlZGl0c1tyZWFkSW5kZXhdO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGVkaXRzLmxlbmd0aCA9IHdyaXRlSW5kZXggKyAxO1xuICAgICAgICBmb3IgKGxldCB7IHJhbmdlLCB0ZXh0LCBlb2wgfSBvZiBlZGl0cykge1xuICAgICAgICAgICAgaWYgKHR5cGVvZiBlb2wgPT09ICdudW1iZXInKSB7XG4gICAgICAgICAgICAgICAgbGFzdEVvbCA9IGVvbDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChSYW5nZS5pc0VtcHR5KHJhbmdlKSAmJiAhdGV4dCkge1xuICAgICAgICAgICAgICAgIC8vIGVtcHR5IGNoYW5nZVxuICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY29uc3Qgb3JpZ2luYWwgPSBtb2RlbC5nZXRWYWx1ZUluUmFuZ2UocmFuZ2UpO1xuICAgICAgICAgICAgdGV4dCA9IHRleHQucmVwbGFjZSgvXFxyXFxufFxcbnxcXHIvZywgbW9kZWwuZW9sKTtcbiAgICAgICAgICAgIGlmIChvcmlnaW5hbCA9PT0gdGV4dCkge1xuICAgICAgICAgICAgICAgIC8vIG5vb3BcbiAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8vIG1ha2Ugc3VyZSBkaWZmIHdvbid0IHRha2UgdG9vIGxvbmdcbiAgICAgICAgICAgIGlmIChNYXRoLm1heCh0ZXh0Lmxlbmd0aCwgb3JpZ2luYWwubGVuZ3RoKSA+IEVkaXRvclNpbXBsZVdvcmtlci5fZGlmZkxpbWl0KSB7XG4gICAgICAgICAgICAgICAgcmVzdWx0LnB1c2goeyByYW5nZSwgdGV4dCB9KTtcbiAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8vIGNvbXB1dGUgZGlmZiBiZXR3ZWVuIG9yaWdpbmFsIGFuZCBlZGl0LnRleHRcbiAgICAgICAgICAgIGNvbnN0IGNoYW5nZXMgPSBzdHJpbmdEaWZmKG9yaWdpbmFsLCB0ZXh0LCBwcmV0dHkpO1xuICAgICAgICAgICAgY29uc3QgZWRpdE9mZnNldCA9IG1vZGVsLm9mZnNldEF0KFJhbmdlLmxpZnQocmFuZ2UpLmdldFN0YXJ0UG9zaXRpb24oKSk7XG4gICAgICAgICAgICBmb3IgKGNvbnN0IGNoYW5nZSBvZiBjaGFuZ2VzKSB7XG4gICAgICAgICAgICAgICAgY29uc3Qgc3RhcnQgPSBtb2RlbC5wb3NpdGlvbkF0KGVkaXRPZmZzZXQgKyBjaGFuZ2Uub3JpZ2luYWxTdGFydCk7XG4gICAgICAgICAgICAgICAgY29uc3QgZW5kID0gbW9kZWwucG9zaXRpb25BdChlZGl0T2Zmc2V0ICsgY2hhbmdlLm9yaWdpbmFsU3RhcnQgKyBjaGFuZ2Uub3JpZ2luYWxMZW5ndGgpO1xuICAgICAgICAgICAgICAgIGNvbnN0IG5ld0VkaXQgPSB7XG4gICAgICAgICAgICAgICAgICAgIHRleHQ6IHRleHQuc3Vic3RyKGNoYW5nZS5tb2RpZmllZFN0YXJ0LCBjaGFuZ2UubW9kaWZpZWRMZW5ndGgpLFxuICAgICAgICAgICAgICAgICAgICByYW5nZTogeyBzdGFydExpbmVOdW1iZXI6IHN0YXJ0LmxpbmVOdW1iZXIsIHN0YXJ0Q29sdW1uOiBzdGFydC5jb2x1bW4sIGVuZExpbmVOdW1iZXI6IGVuZC5saW5lTnVtYmVyLCBlbmRDb2x1bW46IGVuZC5jb2x1bW4gfVxuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgaWYgKG1vZGVsLmdldFZhbHVlSW5SYW5nZShuZXdFZGl0LnJhbmdlKSAhPT0gbmV3RWRpdC50ZXh0KSB7XG4gICAgICAgICAgICAgICAgICAgIHJlc3VsdC5wdXNoKG5ld0VkaXQpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBpZiAodHlwZW9mIGxhc3RFb2wgPT09ICdudW1iZXInKSB7XG4gICAgICAgICAgICByZXN1bHQucHVzaCh7IGVvbDogbGFzdEVvbCwgdGV4dDogJycsIHJhbmdlOiB7IHN0YXJ0TGluZU51bWJlcjogMCwgc3RhcnRDb2x1bW46IDAsIGVuZExpbmVOdW1iZXI6IDAsIGVuZENvbHVtbjogMCB9IH0pO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuICAgIC8vIC0tLS0gRU5EIG1pbmltYWwgZWRpdHMgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gICAgYXN5bmMgY29tcHV0ZUxpbmtzKG1vZGVsVXJsKSB7XG4gICAgICAgIGNvbnN0IG1vZGVsID0gdGhpcy5fZ2V0TW9kZWwobW9kZWxVcmwpO1xuICAgICAgICBpZiAoIW1vZGVsKSB7XG4gICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gY29tcHV0ZUxpbmtzKG1vZGVsKTtcbiAgICB9XG4gICAgLy8gLS0tIEJFR0lOIGRlZmF1bHQgZG9jdW1lbnQgY29sb3JzIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gICAgYXN5bmMgY29tcHV0ZURlZmF1bHREb2N1bWVudENvbG9ycyhtb2RlbFVybCkge1xuICAgICAgICBjb25zdCBtb2RlbCA9IHRoaXMuX2dldE1vZGVsKG1vZGVsVXJsKTtcbiAgICAgICAgaWYgKCFtb2RlbCkge1xuICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGNvbXB1dGVEZWZhdWx0RG9jdW1lbnRDb2xvcnMobW9kZWwpO1xuICAgIH1cbiAgICBhc3luYyB0ZXh0dWFsU3VnZ2VzdChtb2RlbFVybHMsIGxlYWRpbmdXb3JkLCB3b3JkRGVmLCB3b3JkRGVmRmxhZ3MpIHtcbiAgICAgICAgY29uc3Qgc3cgPSBuZXcgU3RvcFdhdGNoKCk7XG4gICAgICAgIGNvbnN0IHdvcmREZWZSZWdFeHAgPSBuZXcgUmVnRXhwKHdvcmREZWYsIHdvcmREZWZGbGFncyk7XG4gICAgICAgIGNvbnN0IHNlZW4gPSBuZXcgU2V0KCk7XG4gICAgICAgIG91dGVyOiBmb3IgKGNvbnN0IHVybCBvZiBtb2RlbFVybHMpIHtcbiAgICAgICAgICAgIGNvbnN0IG1vZGVsID0gdGhpcy5fZ2V0TW9kZWwodXJsKTtcbiAgICAgICAgICAgIGlmICghbW9kZWwpIHtcbiAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGZvciAoY29uc3Qgd29yZCBvZiBtb2RlbC53b3Jkcyh3b3JkRGVmUmVnRXhwKSkge1xuICAgICAgICAgICAgICAgIGlmICh3b3JkID09PSBsZWFkaW5nV29yZCB8fCAhaXNOYU4oTnVtYmVyKHdvcmQpKSkge1xuICAgICAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgc2Vlbi5hZGQod29yZCk7XG4gICAgICAgICAgICAgICAgaWYgKHNlZW4uc2l6ZSA+IEVkaXRvclNpbXBsZVdvcmtlci5fc3VnZ2VzdGlvbnNMaW1pdCkge1xuICAgICAgICAgICAgICAgICAgICBicmVhayBvdXRlcjtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHsgd29yZHM6IEFycmF5LmZyb20oc2VlbiksIGR1cmF0aW9uOiBzdy5lbGFwc2VkKCkgfTtcbiAgICB9XG4gICAgLy8gLS0tLSBFTkQgc3VnZ2VzdCAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAgIC8vI3JlZ2lvbiAtLSB3b3JkIHJhbmdlcyAtLVxuICAgIGFzeW5jIGNvbXB1dGVXb3JkUmFuZ2VzKG1vZGVsVXJsLCByYW5nZSwgd29yZERlZiwgd29yZERlZkZsYWdzKSB7XG4gICAgICAgIGNvbnN0IG1vZGVsID0gdGhpcy5fZ2V0TW9kZWwobW9kZWxVcmwpO1xuICAgICAgICBpZiAoIW1vZGVsKSB7XG4gICAgICAgICAgICByZXR1cm4gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCB3b3JkRGVmUmVnRXhwID0gbmV3IFJlZ0V4cCh3b3JkRGVmLCB3b3JkRGVmRmxhZ3MpO1xuICAgICAgICBjb25zdCByZXN1bHQgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuICAgICAgICBmb3IgKGxldCBsaW5lID0gcmFuZ2Uuc3RhcnRMaW5lTnVtYmVyOyBsaW5lIDwgcmFuZ2UuZW5kTGluZU51bWJlcjsgbGluZSsrKSB7XG4gICAgICAgICAgICBjb25zdCB3b3JkcyA9IG1vZGVsLmdldExpbmVXb3JkcyhsaW5lLCB3b3JkRGVmUmVnRXhwKTtcbiAgICAgICAgICAgIGZvciAoY29uc3Qgd29yZCBvZiB3b3Jkcykge1xuICAgICAgICAgICAgICAgIGlmICghaXNOYU4oTnVtYmVyKHdvcmQud29yZCkpKSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBsZXQgYXJyYXkgPSByZXN1bHRbd29yZC53b3JkXTtcbiAgICAgICAgICAgICAgICBpZiAoIWFycmF5KSB7XG4gICAgICAgICAgICAgICAgICAgIGFycmF5ID0gW107XG4gICAgICAgICAgICAgICAgICAgIHJlc3VsdFt3b3JkLndvcmRdID0gYXJyYXk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGFycmF5LnB1c2goe1xuICAgICAgICAgICAgICAgICAgICBzdGFydExpbmVOdW1iZXI6IGxpbmUsXG4gICAgICAgICAgICAgICAgICAgIHN0YXJ0Q29sdW1uOiB3b3JkLnN0YXJ0Q29sdW1uLFxuICAgICAgICAgICAgICAgICAgICBlbmRMaW5lTnVtYmVyOiBsaW5lLFxuICAgICAgICAgICAgICAgICAgICBlbmRDb2x1bW46IHdvcmQuZW5kQ29sdW1uXG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG4gICAgLy8jZW5kcmVnaW9uXG4gICAgYXN5bmMgbmF2aWdhdGVWYWx1ZVNldChtb2RlbFVybCwgcmFuZ2UsIHVwLCB3b3JkRGVmLCB3b3JkRGVmRmxhZ3MpIHtcbiAgICAgICAgY29uc3QgbW9kZWwgPSB0aGlzLl9nZXRNb2RlbChtb2RlbFVybCk7XG4gICAgICAgIGlmICghbW9kZWwpIHtcbiAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IHdvcmREZWZSZWdFeHAgPSBuZXcgUmVnRXhwKHdvcmREZWYsIHdvcmREZWZGbGFncyk7XG4gICAgICAgIGlmIChyYW5nZS5zdGFydENvbHVtbiA9PT0gcmFuZ2UuZW5kQ29sdW1uKSB7XG4gICAgICAgICAgICByYW5nZSA9IHtcbiAgICAgICAgICAgICAgICBzdGFydExpbmVOdW1iZXI6IHJhbmdlLnN0YXJ0TGluZU51bWJlcixcbiAgICAgICAgICAgICAgICBzdGFydENvbHVtbjogcmFuZ2Uuc3RhcnRDb2x1bW4sXG4gICAgICAgICAgICAgICAgZW5kTGluZU51bWJlcjogcmFuZ2UuZW5kTGluZU51bWJlcixcbiAgICAgICAgICAgICAgICBlbmRDb2x1bW46IHJhbmdlLmVuZENvbHVtbiArIDFcbiAgICAgICAgICAgIH07XG4gICAgICAgIH1cbiAgICAgICAgY29uc3Qgc2VsZWN0aW9uVGV4dCA9IG1vZGVsLmdldFZhbHVlSW5SYW5nZShyYW5nZSk7XG4gICAgICAgIGNvbnN0IHdvcmRSYW5nZSA9IG1vZGVsLmdldFdvcmRBdFBvc2l0aW9uKHsgbGluZU51bWJlcjogcmFuZ2Uuc3RhcnRMaW5lTnVtYmVyLCBjb2x1bW46IHJhbmdlLnN0YXJ0Q29sdW1uIH0sIHdvcmREZWZSZWdFeHApO1xuICAgICAgICBpZiAoIXdvcmRSYW5nZSkge1xuICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3Qgd29yZCA9IG1vZGVsLmdldFZhbHVlSW5SYW5nZSh3b3JkUmFuZ2UpO1xuICAgICAgICBjb25zdCByZXN1bHQgPSBCYXNpY0lucGxhY2VSZXBsYWNlLklOU1RBTkNFLm5hdmlnYXRlVmFsdWVTZXQocmFuZ2UsIHNlbGVjdGlvblRleHQsIHdvcmRSYW5nZSwgd29yZCwgdXApO1xuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cbiAgICAvLyAtLS0tIEJFR0lOIGZvcmVpZ24gbW9kdWxlIHN1cHBvcnQgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgICBsb2FkRm9yZWlnbk1vZHVsZShtb2R1bGVJZCwgY3JlYXRlRGF0YSwgZm9yZWlnbkhvc3RNZXRob2RzKSB7XG4gICAgICAgIGNvbnN0IHByb3h5TWV0aG9kUmVxdWVzdCA9IChtZXRob2QsIGFyZ3MpID0+IHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLl9ob3N0LmZocihtZXRob2QsIGFyZ3MpO1xuICAgICAgICB9O1xuICAgICAgICBjb25zdCBmb3JlaWduSG9zdCA9IGNyZWF0ZVByb3h5T2JqZWN0KGZvcmVpZ25Ib3N0TWV0aG9kcywgcHJveHlNZXRob2RSZXF1ZXN0KTtcbiAgICAgICAgY29uc3QgY3R4ID0ge1xuICAgICAgICAgICAgaG9zdDogZm9yZWlnbkhvc3QsXG4gICAgICAgICAgICBnZXRNaXJyb3JNb2RlbHM6ICgpID0+IHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5fZ2V0TW9kZWxzKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgICAgIGlmICh0aGlzLl9mb3JlaWduTW9kdWxlRmFjdG9yeSkge1xuICAgICAgICAgICAgdGhpcy5fZm9yZWlnbk1vZHVsZSA9IHRoaXMuX2ZvcmVpZ25Nb2R1bGVGYWN0b3J5KGN0eCwgY3JlYXRlRGF0YSk7XG4gICAgICAgICAgICAvLyBzdGF0aWMgZm9yZWluZyBtb2R1bGVcbiAgICAgICAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUoZ2V0QWxsTWV0aG9kTmFtZXModGhpcy5fZm9yZWlnbk1vZHVsZSkpO1xuICAgICAgICB9XG4gICAgICAgIC8vIEVTTS1jb21tZW50LWJlZ2luXG4gICAgICAgIC8vIFx0XHRyZXR1cm4gbmV3IFByb21pc2U8YW55PigocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgICAgIC8vIFx0XHRcdHJlcXVpcmUoW21vZHVsZUlkXSwgKGZvcmVpZ25Nb2R1bGU6IHsgY3JlYXRlOiBJRm9yZWlnbk1vZHVsZUZhY3RvcnkgfSkgPT4ge1xuICAgICAgICAvLyBcdFx0XHRcdHRoaXMuX2ZvcmVpZ25Nb2R1bGUgPSBmb3JlaWduTW9kdWxlLmNyZWF0ZShjdHgsIGNyZWF0ZURhdGEpO1xuICAgICAgICAvLyBcbiAgICAgICAgLy8gXHRcdFx0XHRyZXNvbHZlKGdldEFsbE1ldGhvZE5hbWVzKHRoaXMuX2ZvcmVpZ25Nb2R1bGUpKTtcbiAgICAgICAgLy8gXG4gICAgICAgIC8vIFx0XHRcdH0sIHJlamVjdCk7XG4gICAgICAgIC8vIFx0XHR9KTtcbiAgICAgICAgLy8gRVNNLWNvbW1lbnQtZW5kXG4gICAgICAgIC8vIEVTTS11bmNvbW1lbnQtYmVnaW5cbiAgICAgICAgcmV0dXJuIFByb21pc2UucmVqZWN0KG5ldyBFcnJvcihgVW5leHBlY3RlZCB1c2FnZWApKTtcbiAgICAgICAgLy8gRVNNLXVuY29tbWVudC1lbmRcbiAgICB9XG4gICAgLy8gZm9yZWlnbiBtZXRob2QgcmVxdWVzdFxuICAgIGZtcihtZXRob2QsIGFyZ3MpIHtcbiAgICAgICAgaWYgKCF0aGlzLl9mb3JlaWduTW9kdWxlIHx8IHR5cGVvZiB0aGlzLl9mb3JlaWduTW9kdWxlW21ldGhvZF0gIT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgIHJldHVybiBQcm9taXNlLnJlamVjdChuZXcgRXJyb3IoJ01pc3NpbmcgcmVxdWVzdEhhbmRsZXIgb3IgbWV0aG9kOiAnICsgbWV0aG9kKSk7XG4gICAgICAgIH1cbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUodGhpcy5fZm9yZWlnbk1vZHVsZVttZXRob2RdLmFwcGx5KHRoaXMuX2ZvcmVpZ25Nb2R1bGUsIGFyZ3MpKTtcbiAgICAgICAgfVxuICAgICAgICBjYXRjaCAoZSkge1xuICAgICAgICAgICAgcmV0dXJuIFByb21pc2UucmVqZWN0KGUpO1xuICAgICAgICB9XG4gICAgfVxufVxuLy8gLS0tLSBFTkQgZGlmZiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuLy8gLS0tLSBCRUdJTiBtaW5pbWFsIGVkaXRzIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuRWRpdG9yU2ltcGxlV29ya2VyLl9kaWZmTGltaXQgPSAxMDAwMDA7XG4vLyAtLS0tIEJFR0lOIHN1Z2dlc3QgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbkVkaXRvclNpbXBsZVdvcmtlci5fc3VnZ2VzdGlvbnNMaW1pdCA9IDEwMDAwO1xuLyoqXG4gKiBDYWxsZWQgb24gdGhlIHdvcmtlciBzaWRlXG4gKiBAaW50ZXJuYWxcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGNyZWF0ZShob3N0KSB7XG4gICAgcmV0dXJuIG5ldyBFZGl0b3JTaW1wbGVXb3JrZXIoaG9zdCwgbnVsbCk7XG59XG5pZiAodHlwZW9mIGltcG9ydFNjcmlwdHMgPT09ICdmdW5jdGlvbicpIHtcbiAgICAvLyBSdW5uaW5nIGluIGEgd2ViIHdvcmtlclxuICAgIGdsb2JhbFRoaXMubW9uYWNvID0gY3JlYXRlTW9uYWNvQmFzZUFQSSgpO1xufVxuIiwgIi8qLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gKiAgQ29weXJpZ2h0IChjKSBNaWNyb3NvZnQgQ29ycG9yYXRpb24uIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKiAgTGljZW5zZWQgdW5kZXIgdGhlIE1JVCBMaWNlbnNlLiBTZWUgTGljZW5zZS50eHQgaW4gdGhlIHByb2plY3Qgcm9vdCBmb3IgbGljZW5zZSBpbmZvcm1hdGlvbi5cbiAqLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qL1xuaW1wb3J0IHsgU2ltcGxlV29ya2VyU2VydmVyIH0gZnJvbSAnLi4vYmFzZS9jb21tb24vd29ya2VyL3NpbXBsZVdvcmtlci5qcyc7XG5pbXBvcnQgeyBFZGl0b3JTaW1wbGVXb3JrZXIgfSBmcm9tICcuL2NvbW1vbi9zZXJ2aWNlcy9lZGl0b3JTaW1wbGVXb3JrZXIuanMnO1xubGV0IGluaXRpYWxpemVkID0gZmFsc2U7XG5leHBvcnQgZnVuY3Rpb24gaW5pdGlhbGl6ZShmb3JlaWduTW9kdWxlKSB7XG4gICAgaWYgKGluaXRpYWxpemVkKSB7XG4gICAgICAgIHJldHVybjtcbiAgICB9XG4gICAgaW5pdGlhbGl6ZWQgPSB0cnVlO1xuICAgIGNvbnN0IHNpbXBsZVdvcmtlciA9IG5ldyBTaW1wbGVXb3JrZXJTZXJ2ZXIoKG1zZykgPT4ge1xuICAgICAgICBnbG9iYWxUaGlzLnBvc3RNZXNzYWdlKG1zZyk7XG4gICAgfSwgKGhvc3QpID0+IG5ldyBFZGl0b3JTaW1wbGVXb3JrZXIoaG9zdCwgZm9yZWlnbk1vZHVsZSkpO1xuICAgIGdsb2JhbFRoaXMub25tZXNzYWdlID0gKGUpID0+IHtcbiAgICAgICAgc2ltcGxlV29ya2VyLm9ubWVzc2FnZShlLmRhdGEpO1xuICAgIH07XG59XG5nbG9iYWxUaGlzLm9ubWVzc2FnZSA9IChlKSA9PiB7XG4gICAgLy8gSWdub3JlIGZpcnN0IG1lc3NhZ2UgaW4gdGhpcyBjYXNlIGFuZCBpbml0aWFsaXplIGlmIG5vdCB5ZXQgaW5pdGlhbGl6ZWRcbiAgICBpZiAoIWluaXRpYWxpemVkKSB7XG4gICAgICAgIGluaXRpYWxpemUobnVsbCk7XG4gICAgfVxufTtcbiIsICIvKiEtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICogQ29weXJpZ2h0IChjKSBNaWNyb3NvZnQgQ29ycG9yYXRpb24uIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKiBWZXJzaW9uOiAwLjUwLjAoYzMyMWQwZmJlY2I1MGFiOGE1MzY1ZmExOTY1NDc2YjBhZTYzZmM4NylcbiAqIFJlbGVhc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZVxuICogaHR0cHM6Ly9naXRodWIuY29tL21pY3Jvc29mdC9tb25hY28tZWRpdG9yL2Jsb2IvbWFpbi9MSUNFTlNFLnR4dFxuICotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSovXG5cblxuLy8gc3JjL2xhbmd1YWdlL2pzb24vanNvbi53b3JrZXIudHNcbmltcG9ydCAqIGFzIHdvcmtlciBmcm9tIFwiLi4vLi4vZWRpdG9yL2VkaXRvci53b3JrZXIuanNcIjtcblxuLy8gbm9kZV9tb2R1bGVzL2pzb25jLXBhcnNlci9saWIvZXNtL2ltcGwvc2Nhbm5lci5qc1xuZnVuY3Rpb24gY3JlYXRlU2Nhbm5lcih0ZXh0LCBpZ25vcmVUcml2aWEgPSBmYWxzZSkge1xuICBjb25zdCBsZW4gPSB0ZXh0Lmxlbmd0aDtcbiAgbGV0IHBvcyA9IDAsIHZhbHVlID0gXCJcIiwgdG9rZW5PZmZzZXQgPSAwLCB0b2tlbiA9IDE2LCBsaW5lTnVtYmVyID0gMCwgbGluZVN0YXJ0T2Zmc2V0ID0gMCwgdG9rZW5MaW5lU3RhcnRPZmZzZXQgPSAwLCBwcmV2VG9rZW5MaW5lU3RhcnRPZmZzZXQgPSAwLCBzY2FuRXJyb3IgPSAwO1xuICBmdW5jdGlvbiBzY2FuSGV4RGlnaXRzKGNvdW50LCBleGFjdCkge1xuICAgIGxldCBkaWdpdHMgPSAwO1xuICAgIGxldCB2YWx1ZTIgPSAwO1xuICAgIHdoaWxlIChkaWdpdHMgPCBjb3VudCB8fCAhZXhhY3QpIHtcbiAgICAgIGxldCBjaCA9IHRleHQuY2hhckNvZGVBdChwb3MpO1xuICAgICAgaWYgKGNoID49IDQ4ICYmIGNoIDw9IDU3KSB7XG4gICAgICAgIHZhbHVlMiA9IHZhbHVlMiAqIDE2ICsgY2ggLSA0ODtcbiAgICAgIH0gZWxzZSBpZiAoY2ggPj0gNjUgJiYgY2ggPD0gNzApIHtcbiAgICAgICAgdmFsdWUyID0gdmFsdWUyICogMTYgKyBjaCAtIDY1ICsgMTA7XG4gICAgICB9IGVsc2UgaWYgKGNoID49IDk3ICYmIGNoIDw9IDEwMikge1xuICAgICAgICB2YWx1ZTIgPSB2YWx1ZTIgKiAxNiArIGNoIC0gOTcgKyAxMDtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgICAgcG9zKys7XG4gICAgICBkaWdpdHMrKztcbiAgICB9XG4gICAgaWYgKGRpZ2l0cyA8IGNvdW50KSB7XG4gICAgICB2YWx1ZTIgPSAtMTtcbiAgICB9XG4gICAgcmV0dXJuIHZhbHVlMjtcbiAgfVxuICBmdW5jdGlvbiBzZXRQb3NpdGlvbihuZXdQb3NpdGlvbikge1xuICAgIHBvcyA9IG5ld1Bvc2l0aW9uO1xuICAgIHZhbHVlID0gXCJcIjtcbiAgICB0b2tlbk9mZnNldCA9IDA7XG4gICAgdG9rZW4gPSAxNjtcbiAgICBzY2FuRXJyb3IgPSAwO1xuICB9XG4gIGZ1bmN0aW9uIHNjYW5OdW1iZXIoKSB7XG4gICAgbGV0IHN0YXJ0ID0gcG9zO1xuICAgIGlmICh0ZXh0LmNoYXJDb2RlQXQocG9zKSA9PT0gNDgpIHtcbiAgICAgIHBvcysrO1xuICAgIH0gZWxzZSB7XG4gICAgICBwb3MrKztcbiAgICAgIHdoaWxlIChwb3MgPCB0ZXh0Lmxlbmd0aCAmJiBpc0RpZ2l0KHRleHQuY2hhckNvZGVBdChwb3MpKSkge1xuICAgICAgICBwb3MrKztcbiAgICAgIH1cbiAgICB9XG4gICAgaWYgKHBvcyA8IHRleHQubGVuZ3RoICYmIHRleHQuY2hhckNvZGVBdChwb3MpID09PSA0Nikge1xuICAgICAgcG9zKys7XG4gICAgICBpZiAocG9zIDwgdGV4dC5sZW5ndGggJiYgaXNEaWdpdCh0ZXh0LmNoYXJDb2RlQXQocG9zKSkpIHtcbiAgICAgICAgcG9zKys7XG4gICAgICAgIHdoaWxlIChwb3MgPCB0ZXh0Lmxlbmd0aCAmJiBpc0RpZ2l0KHRleHQuY2hhckNvZGVBdChwb3MpKSkge1xuICAgICAgICAgIHBvcysrO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBzY2FuRXJyb3IgPSAzO1xuICAgICAgICByZXR1cm4gdGV4dC5zdWJzdHJpbmcoc3RhcnQsIHBvcyk7XG4gICAgICB9XG4gICAgfVxuICAgIGxldCBlbmQgPSBwb3M7XG4gICAgaWYgKHBvcyA8IHRleHQubGVuZ3RoICYmICh0ZXh0LmNoYXJDb2RlQXQocG9zKSA9PT0gNjkgfHwgdGV4dC5jaGFyQ29kZUF0KHBvcykgPT09IDEwMSkpIHtcbiAgICAgIHBvcysrO1xuICAgICAgaWYgKHBvcyA8IHRleHQubGVuZ3RoICYmIHRleHQuY2hhckNvZGVBdChwb3MpID09PSA0MyB8fCB0ZXh0LmNoYXJDb2RlQXQocG9zKSA9PT0gNDUpIHtcbiAgICAgICAgcG9zKys7XG4gICAgICB9XG4gICAgICBpZiAocG9zIDwgdGV4dC5sZW5ndGggJiYgaXNEaWdpdCh0ZXh0LmNoYXJDb2RlQXQocG9zKSkpIHtcbiAgICAgICAgcG9zKys7XG4gICAgICAgIHdoaWxlIChwb3MgPCB0ZXh0Lmxlbmd0aCAmJiBpc0RpZ2l0KHRleHQuY2hhckNvZGVBdChwb3MpKSkge1xuICAgICAgICAgIHBvcysrO1xuICAgICAgICB9XG4gICAgICAgIGVuZCA9IHBvcztcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHNjYW5FcnJvciA9IDM7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiB0ZXh0LnN1YnN0cmluZyhzdGFydCwgZW5kKTtcbiAgfVxuICBmdW5jdGlvbiBzY2FuU3RyaW5nKCkge1xuICAgIGxldCByZXN1bHQgPSBcIlwiLCBzdGFydCA9IHBvcztcbiAgICB3aGlsZSAodHJ1ZSkge1xuICAgICAgaWYgKHBvcyA+PSBsZW4pIHtcbiAgICAgICAgcmVzdWx0ICs9IHRleHQuc3Vic3RyaW5nKHN0YXJ0LCBwb3MpO1xuICAgICAgICBzY2FuRXJyb3IgPSAyO1xuICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICAgIGNvbnN0IGNoID0gdGV4dC5jaGFyQ29kZUF0KHBvcyk7XG4gICAgICBpZiAoY2ggPT09IDM0KSB7XG4gICAgICAgIHJlc3VsdCArPSB0ZXh0LnN1YnN0cmluZyhzdGFydCwgcG9zKTtcbiAgICAgICAgcG9zKys7XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgICAgaWYgKGNoID09PSA5Mikge1xuICAgICAgICByZXN1bHQgKz0gdGV4dC5zdWJzdHJpbmcoc3RhcnQsIHBvcyk7XG4gICAgICAgIHBvcysrO1xuICAgICAgICBpZiAocG9zID49IGxlbikge1xuICAgICAgICAgIHNjYW5FcnJvciA9IDI7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgY2gyID0gdGV4dC5jaGFyQ29kZUF0KHBvcysrKTtcbiAgICAgICAgc3dpdGNoIChjaDIpIHtcbiAgICAgICAgICBjYXNlIDM0OlxuICAgICAgICAgICAgcmVzdWx0ICs9ICdcIic7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICBjYXNlIDkyOlxuICAgICAgICAgICAgcmVzdWx0ICs9IFwiXFxcXFwiO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgY2FzZSA0NzpcbiAgICAgICAgICAgIHJlc3VsdCArPSBcIi9cIjtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIGNhc2UgOTg6XG4gICAgICAgICAgICByZXN1bHQgKz0gXCJcXGJcIjtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIGNhc2UgMTAyOlxuICAgICAgICAgICAgcmVzdWx0ICs9IFwiXFxmXCI7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICBjYXNlIDExMDpcbiAgICAgICAgICAgIHJlc3VsdCArPSBcIlxcblwiO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgY2FzZSAxMTQ6XG4gICAgICAgICAgICByZXN1bHQgKz0gXCJcXHJcIjtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIGNhc2UgMTE2OlxuICAgICAgICAgICAgcmVzdWx0ICs9IFwiXHRcIjtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIGNhc2UgMTE3OlxuICAgICAgICAgICAgY29uc3QgY2gzID0gc2NhbkhleERpZ2l0cyg0LCB0cnVlKTtcbiAgICAgICAgICAgIGlmIChjaDMgPj0gMCkge1xuICAgICAgICAgICAgICByZXN1bHQgKz0gU3RyaW5nLmZyb21DaGFyQ29kZShjaDMpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgc2NhbkVycm9yID0gNDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICBzY2FuRXJyb3IgPSA1O1xuICAgICAgICB9XG4gICAgICAgIHN0YXJ0ID0gcG9zO1xuICAgICAgICBjb250aW51ZTtcbiAgICAgIH1cbiAgICAgIGlmIChjaCA+PSAwICYmIGNoIDw9IDMxKSB7XG4gICAgICAgIGlmIChpc0xpbmVCcmVhayhjaCkpIHtcbiAgICAgICAgICByZXN1bHQgKz0gdGV4dC5zdWJzdHJpbmcoc3RhcnQsIHBvcyk7XG4gICAgICAgICAgc2NhbkVycm9yID0gMjtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBzY2FuRXJyb3IgPSA2O1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBwb3MrKztcbiAgICB9XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfVxuICBmdW5jdGlvbiBzY2FuTmV4dCgpIHtcbiAgICB2YWx1ZSA9IFwiXCI7XG4gICAgc2NhbkVycm9yID0gMDtcbiAgICB0b2tlbk9mZnNldCA9IHBvcztcbiAgICBsaW5lU3RhcnRPZmZzZXQgPSBsaW5lTnVtYmVyO1xuICAgIHByZXZUb2tlbkxpbmVTdGFydE9mZnNldCA9IHRva2VuTGluZVN0YXJ0T2Zmc2V0O1xuICAgIGlmIChwb3MgPj0gbGVuKSB7XG4gICAgICB0b2tlbk9mZnNldCA9IGxlbjtcbiAgICAgIHJldHVybiB0b2tlbiA9IDE3O1xuICAgIH1cbiAgICBsZXQgY29kZSA9IHRleHQuY2hhckNvZGVBdChwb3MpO1xuICAgIGlmIChpc1doaXRlU3BhY2UoY29kZSkpIHtcbiAgICAgIGRvIHtcbiAgICAgICAgcG9zKys7XG4gICAgICAgIHZhbHVlICs9IFN0cmluZy5mcm9tQ2hhckNvZGUoY29kZSk7XG4gICAgICAgIGNvZGUgPSB0ZXh0LmNoYXJDb2RlQXQocG9zKTtcbiAgICAgIH0gd2hpbGUgKGlzV2hpdGVTcGFjZShjb2RlKSk7XG4gICAgICByZXR1cm4gdG9rZW4gPSAxNTtcbiAgICB9XG4gICAgaWYgKGlzTGluZUJyZWFrKGNvZGUpKSB7XG4gICAgICBwb3MrKztcbiAgICAgIHZhbHVlICs9IFN0cmluZy5mcm9tQ2hhckNvZGUoY29kZSk7XG4gICAgICBpZiAoY29kZSA9PT0gMTMgJiYgdGV4dC5jaGFyQ29kZUF0KHBvcykgPT09IDEwKSB7XG4gICAgICAgIHBvcysrO1xuICAgICAgICB2YWx1ZSArPSBcIlxcblwiO1xuICAgICAgfVxuICAgICAgbGluZU51bWJlcisrO1xuICAgICAgdG9rZW5MaW5lU3RhcnRPZmZzZXQgPSBwb3M7XG4gICAgICByZXR1cm4gdG9rZW4gPSAxNDtcbiAgICB9XG4gICAgc3dpdGNoIChjb2RlKSB7XG4gICAgICBjYXNlIDEyMzpcbiAgICAgICAgcG9zKys7XG4gICAgICAgIHJldHVybiB0b2tlbiA9IDE7XG4gICAgICBjYXNlIDEyNTpcbiAgICAgICAgcG9zKys7XG4gICAgICAgIHJldHVybiB0b2tlbiA9IDI7XG4gICAgICBjYXNlIDkxOlxuICAgICAgICBwb3MrKztcbiAgICAgICAgcmV0dXJuIHRva2VuID0gMztcbiAgICAgIGNhc2UgOTM6XG4gICAgICAgIHBvcysrO1xuICAgICAgICByZXR1cm4gdG9rZW4gPSA0O1xuICAgICAgY2FzZSA1ODpcbiAgICAgICAgcG9zKys7XG4gICAgICAgIHJldHVybiB0b2tlbiA9IDY7XG4gICAgICBjYXNlIDQ0OlxuICAgICAgICBwb3MrKztcbiAgICAgICAgcmV0dXJuIHRva2VuID0gNTtcbiAgICAgIGNhc2UgMzQ6XG4gICAgICAgIHBvcysrO1xuICAgICAgICB2YWx1ZSA9IHNjYW5TdHJpbmcoKTtcbiAgICAgICAgcmV0dXJuIHRva2VuID0gMTA7XG4gICAgICBjYXNlIDQ3OlxuICAgICAgICBjb25zdCBzdGFydCA9IHBvcyAtIDE7XG4gICAgICAgIGlmICh0ZXh0LmNoYXJDb2RlQXQocG9zICsgMSkgPT09IDQ3KSB7XG4gICAgICAgICAgcG9zICs9IDI7XG4gICAgICAgICAgd2hpbGUgKHBvcyA8IGxlbikge1xuICAgICAgICAgICAgaWYgKGlzTGluZUJyZWFrKHRleHQuY2hhckNvZGVBdChwb3MpKSkge1xuICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHBvcysrO1xuICAgICAgICAgIH1cbiAgICAgICAgICB2YWx1ZSA9IHRleHQuc3Vic3RyaW5nKHN0YXJ0LCBwb3MpO1xuICAgICAgICAgIHJldHVybiB0b2tlbiA9IDEyO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0ZXh0LmNoYXJDb2RlQXQocG9zICsgMSkgPT09IDQyKSB7XG4gICAgICAgICAgcG9zICs9IDI7XG4gICAgICAgICAgY29uc3Qgc2FmZUxlbmd0aCA9IGxlbiAtIDE7XG4gICAgICAgICAgbGV0IGNvbW1lbnRDbG9zZWQgPSBmYWxzZTtcbiAgICAgICAgICB3aGlsZSAocG9zIDwgc2FmZUxlbmd0aCkge1xuICAgICAgICAgICAgY29uc3QgY2ggPSB0ZXh0LmNoYXJDb2RlQXQocG9zKTtcbiAgICAgICAgICAgIGlmIChjaCA9PT0gNDIgJiYgdGV4dC5jaGFyQ29kZUF0KHBvcyArIDEpID09PSA0Nykge1xuICAgICAgICAgICAgICBwb3MgKz0gMjtcbiAgICAgICAgICAgICAgY29tbWVudENsb3NlZCA9IHRydWU7XG4gICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcG9zKys7XG4gICAgICAgICAgICBpZiAoaXNMaW5lQnJlYWsoY2gpKSB7XG4gICAgICAgICAgICAgIGlmIChjaCA9PT0gMTMgJiYgdGV4dC5jaGFyQ29kZUF0KHBvcykgPT09IDEwKSB7XG4gICAgICAgICAgICAgICAgcG9zKys7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgbGluZU51bWJlcisrO1xuICAgICAgICAgICAgICB0b2tlbkxpbmVTdGFydE9mZnNldCA9IHBvcztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKCFjb21tZW50Q2xvc2VkKSB7XG4gICAgICAgICAgICBwb3MrKztcbiAgICAgICAgICAgIHNjYW5FcnJvciA9IDE7XG4gICAgICAgICAgfVxuICAgICAgICAgIHZhbHVlID0gdGV4dC5zdWJzdHJpbmcoc3RhcnQsIHBvcyk7XG4gICAgICAgICAgcmV0dXJuIHRva2VuID0gMTM7XG4gICAgICAgIH1cbiAgICAgICAgdmFsdWUgKz0gU3RyaW5nLmZyb21DaGFyQ29kZShjb2RlKTtcbiAgICAgICAgcG9zKys7XG4gICAgICAgIHJldHVybiB0b2tlbiA9IDE2O1xuICAgICAgY2FzZSA0NTpcbiAgICAgICAgdmFsdWUgKz0gU3RyaW5nLmZyb21DaGFyQ29kZShjb2RlKTtcbiAgICAgICAgcG9zKys7XG4gICAgICAgIGlmIChwb3MgPT09IGxlbiB8fCAhaXNEaWdpdCh0ZXh0LmNoYXJDb2RlQXQocG9zKSkpIHtcbiAgICAgICAgICByZXR1cm4gdG9rZW4gPSAxNjtcbiAgICAgICAgfVxuICAgICAgY2FzZSA0ODpcbiAgICAgIGNhc2UgNDk6XG4gICAgICBjYXNlIDUwOlxuICAgICAgY2FzZSA1MTpcbiAgICAgIGNhc2UgNTI6XG4gICAgICBjYXNlIDUzOlxuICAgICAgY2FzZSA1NDpcbiAgICAgIGNhc2UgNTU6XG4gICAgICBjYXNlIDU2OlxuICAgICAgY2FzZSA1NzpcbiAgICAgICAgdmFsdWUgKz0gc2Nhbk51bWJlcigpO1xuICAgICAgICByZXR1cm4gdG9rZW4gPSAxMTtcbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIHdoaWxlIChwb3MgPCBsZW4gJiYgaXNVbmtub3duQ29udGVudENoYXJhY3Rlcihjb2RlKSkge1xuICAgICAgICAgIHBvcysrO1xuICAgICAgICAgIGNvZGUgPSB0ZXh0LmNoYXJDb2RlQXQocG9zKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAodG9rZW5PZmZzZXQgIT09IHBvcykge1xuICAgICAgICAgIHZhbHVlID0gdGV4dC5zdWJzdHJpbmcodG9rZW5PZmZzZXQsIHBvcyk7XG4gICAgICAgICAgc3dpdGNoICh2YWx1ZSkge1xuICAgICAgICAgICAgY2FzZSBcInRydWVcIjpcbiAgICAgICAgICAgICAgcmV0dXJuIHRva2VuID0gODtcbiAgICAgICAgICAgIGNhc2UgXCJmYWxzZVwiOlxuICAgICAgICAgICAgICByZXR1cm4gdG9rZW4gPSA5O1xuICAgICAgICAgICAgY2FzZSBcIm51bGxcIjpcbiAgICAgICAgICAgICAgcmV0dXJuIHRva2VuID0gNztcbiAgICAgICAgICB9XG4gICAgICAgICAgcmV0dXJuIHRva2VuID0gMTY7XG4gICAgICAgIH1cbiAgICAgICAgdmFsdWUgKz0gU3RyaW5nLmZyb21DaGFyQ29kZShjb2RlKTtcbiAgICAgICAgcG9zKys7XG4gICAgICAgIHJldHVybiB0b2tlbiA9IDE2O1xuICAgIH1cbiAgfVxuICBmdW5jdGlvbiBpc1Vua25vd25Db250ZW50Q2hhcmFjdGVyKGNvZGUpIHtcbiAgICBpZiAoaXNXaGl0ZVNwYWNlKGNvZGUpIHx8IGlzTGluZUJyZWFrKGNvZGUpKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIHN3aXRjaCAoY29kZSkge1xuICAgICAgY2FzZSAxMjU6XG4gICAgICBjYXNlIDkzOlxuICAgICAgY2FzZSAxMjM6XG4gICAgICBjYXNlIDkxOlxuICAgICAgY2FzZSAzNDpcbiAgICAgIGNhc2UgNTg6XG4gICAgICBjYXNlIDQ0OlxuICAgICAgY2FzZSA0NzpcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuICBmdW5jdGlvbiBzY2FuTmV4dE5vblRyaXZpYSgpIHtcbiAgICBsZXQgcmVzdWx0O1xuICAgIGRvIHtcbiAgICAgIHJlc3VsdCA9IHNjYW5OZXh0KCk7XG4gICAgfSB3aGlsZSAocmVzdWx0ID49IDEyICYmIHJlc3VsdCA8PSAxNSk7XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfVxuICByZXR1cm4ge1xuICAgIHNldFBvc2l0aW9uLFxuICAgIGdldFBvc2l0aW9uOiAoKSA9PiBwb3MsXG4gICAgc2NhbjogaWdub3JlVHJpdmlhID8gc2Nhbk5leHROb25Ucml2aWEgOiBzY2FuTmV4dCxcbiAgICBnZXRUb2tlbjogKCkgPT4gdG9rZW4sXG4gICAgZ2V0VG9rZW5WYWx1ZTogKCkgPT4gdmFsdWUsXG4gICAgZ2V0VG9rZW5PZmZzZXQ6ICgpID0+IHRva2VuT2Zmc2V0LFxuICAgIGdldFRva2VuTGVuZ3RoOiAoKSA9PiBwb3MgLSB0b2tlbk9mZnNldCxcbiAgICBnZXRUb2tlblN0YXJ0TGluZTogKCkgPT4gbGluZVN0YXJ0T2Zmc2V0LFxuICAgIGdldFRva2VuU3RhcnRDaGFyYWN0ZXI6ICgpID0+IHRva2VuT2Zmc2V0IC0gcHJldlRva2VuTGluZVN0YXJ0T2Zmc2V0LFxuICAgIGdldFRva2VuRXJyb3I6ICgpID0+IHNjYW5FcnJvclxuICB9O1xufVxuZnVuY3Rpb24gaXNXaGl0ZVNwYWNlKGNoKSB7XG4gIHJldHVybiBjaCA9PT0gMzIgfHwgY2ggPT09IDk7XG59XG5mdW5jdGlvbiBpc0xpbmVCcmVhayhjaCkge1xuICByZXR1cm4gY2ggPT09IDEwIHx8IGNoID09PSAxMztcbn1cbmZ1bmN0aW9uIGlzRGlnaXQoY2gpIHtcbiAgcmV0dXJuIGNoID49IDQ4ICYmIGNoIDw9IDU3O1xufVxudmFyIENoYXJhY3RlckNvZGVzO1xuKGZ1bmN0aW9uKENoYXJhY3RlckNvZGVzMikge1xuICBDaGFyYWN0ZXJDb2RlczJbQ2hhcmFjdGVyQ29kZXMyW1wibGluZUZlZWRcIl0gPSAxMF0gPSBcImxpbmVGZWVkXCI7XG4gIENoYXJhY3RlckNvZGVzMltDaGFyYWN0ZXJDb2RlczJbXCJjYXJyaWFnZVJldHVyblwiXSA9IDEzXSA9IFwiY2FycmlhZ2VSZXR1cm5cIjtcbiAgQ2hhcmFjdGVyQ29kZXMyW0NoYXJhY3RlckNvZGVzMltcInNwYWNlXCJdID0gMzJdID0gXCJzcGFjZVwiO1xuICBDaGFyYWN0ZXJDb2RlczJbQ2hhcmFjdGVyQ29kZXMyW1wiXzBcIl0gPSA0OF0gPSBcIl8wXCI7XG4gIENoYXJhY3RlckNvZGVzMltDaGFyYWN0ZXJDb2RlczJbXCJfMVwiXSA9IDQ5XSA9IFwiXzFcIjtcbiAgQ2hhcmFjdGVyQ29kZXMyW0NoYXJhY3RlckNvZGVzMltcIl8yXCJdID0gNTBdID0gXCJfMlwiO1xuICBDaGFyYWN0ZXJDb2RlczJbQ2hhcmFjdGVyQ29kZXMyW1wiXzNcIl0gPSA1MV0gPSBcIl8zXCI7XG4gIENoYXJhY3RlckNvZGVzMltDaGFyYWN0ZXJDb2RlczJbXCJfNFwiXSA9IDUyXSA9IFwiXzRcIjtcbiAgQ2hhcmFjdGVyQ29kZXMyW0NoYXJhY3RlckNvZGVzMltcIl81XCJdID0gNTNdID0gXCJfNVwiO1xuICBDaGFyYWN0ZXJDb2RlczJbQ2hhcmFjdGVyQ29kZXMyW1wiXzZcIl0gPSA1NF0gPSBcIl82XCI7XG4gIENoYXJhY3RlckNvZGVzMltDaGFyYWN0ZXJDb2RlczJbXCJfN1wiXSA9IDU1XSA9IFwiXzdcIjtcbiAgQ2hhcmFjdGVyQ29kZXMyW0NoYXJhY3RlckNvZGVzMltcIl84XCJdID0gNTZdID0gXCJfOFwiO1xuICBDaGFyYWN0ZXJDb2RlczJbQ2hhcmFjdGVyQ29kZXMyW1wiXzlcIl0gPSA1N10gPSBcIl85XCI7XG4gIENoYXJhY3RlckNvZGVzMltDaGFyYWN0ZXJDb2RlczJbXCJhXCJdID0gOTddID0gXCJhXCI7XG4gIENoYXJhY3RlckNvZGVzMltDaGFyYWN0ZXJDb2RlczJbXCJiXCJdID0gOThdID0gXCJiXCI7XG4gIENoYXJhY3RlckNvZGVzMltDaGFyYWN0ZXJDb2RlczJbXCJjXCJdID0gOTldID0gXCJjXCI7XG4gIENoYXJhY3RlckNvZGVzMltDaGFyYWN0ZXJDb2RlczJbXCJkXCJdID0gMTAwXSA9IFwiZFwiO1xuICBDaGFyYWN0ZXJDb2RlczJbQ2hhcmFjdGVyQ29kZXMyW1wiZVwiXSA9IDEwMV0gPSBcImVcIjtcbiAgQ2hhcmFjdGVyQ29kZXMyW0NoYXJhY3RlckNvZGVzMltcImZcIl0gPSAxMDJdID0gXCJmXCI7XG4gIENoYXJhY3RlckNvZGVzMltDaGFyYWN0ZXJDb2RlczJbXCJnXCJdID0gMTAzXSA9IFwiZ1wiO1xuICBDaGFyYWN0ZXJDb2RlczJbQ2hhcmFjdGVyQ29kZXMyW1wiaFwiXSA9IDEwNF0gPSBcImhcIjtcbiAgQ2hhcmFjdGVyQ29kZXMyW0NoYXJhY3RlckNvZGVzMltcImlcIl0gPSAxMDVdID0gXCJpXCI7XG4gIENoYXJhY3RlckNvZGVzMltDaGFyYWN0ZXJDb2RlczJbXCJqXCJdID0gMTA2XSA9IFwialwiO1xuICBDaGFyYWN0ZXJDb2RlczJbQ2hhcmFjdGVyQ29kZXMyW1wia1wiXSA9IDEwN10gPSBcImtcIjtcbiAgQ2hhcmFjdGVyQ29kZXMyW0NoYXJhY3RlckNvZGVzMltcImxcIl0gPSAxMDhdID0gXCJsXCI7XG4gIENoYXJhY3RlckNvZGVzMltDaGFyYWN0ZXJDb2RlczJbXCJtXCJdID0gMTA5XSA9IFwibVwiO1xuICBDaGFyYWN0ZXJDb2RlczJbQ2hhcmFjdGVyQ29kZXMyW1wiblwiXSA9IDExMF0gPSBcIm5cIjtcbiAgQ2hhcmFjdGVyQ29kZXMyW0NoYXJhY3RlckNvZGVzMltcIm9cIl0gPSAxMTFdID0gXCJvXCI7XG4gIENoYXJhY3RlckNvZGVzMltDaGFyYWN0ZXJDb2RlczJbXCJwXCJdID0gMTEyXSA9IFwicFwiO1xuICBDaGFyYWN0ZXJDb2RlczJbQ2hhcmFjdGVyQ29kZXMyW1wicVwiXSA9IDExM10gPSBcInFcIjtcbiAgQ2hhcmFjdGVyQ29kZXMyW0NoYXJhY3RlckNvZGVzMltcInJcIl0gPSAxMTRdID0gXCJyXCI7XG4gIENoYXJhY3RlckNvZGVzMltDaGFyYWN0ZXJDb2RlczJbXCJzXCJdID0gMTE1XSA9IFwic1wiO1xuICBDaGFyYWN0ZXJDb2RlczJbQ2hhcmFjdGVyQ29kZXMyW1widFwiXSA9IDExNl0gPSBcInRcIjtcbiAgQ2hhcmFjdGVyQ29kZXMyW0NoYXJhY3RlckNvZGVzMltcInVcIl0gPSAxMTddID0gXCJ1XCI7XG4gIENoYXJhY3RlckNvZGVzMltDaGFyYWN0ZXJDb2RlczJbXCJ2XCJdID0gMTE4XSA9IFwidlwiO1xuICBDaGFyYWN0ZXJDb2RlczJbQ2hhcmFjdGVyQ29kZXMyW1wid1wiXSA9IDExOV0gPSBcIndcIjtcbiAgQ2hhcmFjdGVyQ29kZXMyW0NoYXJhY3RlckNvZGVzMltcInhcIl0gPSAxMjBdID0gXCJ4XCI7XG4gIENoYXJhY3RlckNvZGVzMltDaGFyYWN0ZXJDb2RlczJbXCJ5XCJdID0gMTIxXSA9IFwieVwiO1xuICBDaGFyYWN0ZXJDb2RlczJbQ2hhcmFjdGVyQ29kZXMyW1wielwiXSA9IDEyMl0gPSBcInpcIjtcbiAgQ2hhcmFjdGVyQ29kZXMyW0NoYXJhY3RlckNvZGVzMltcIkFcIl0gPSA2NV0gPSBcIkFcIjtcbiAgQ2hhcmFjdGVyQ29kZXMyW0NoYXJhY3RlckNvZGVzMltcIkJcIl0gPSA2Nl0gPSBcIkJcIjtcbiAgQ2hhcmFjdGVyQ29kZXMyW0NoYXJhY3RlckNvZGVzMltcIkNcIl0gPSA2N10gPSBcIkNcIjtcbiAgQ2hhcmFjdGVyQ29kZXMyW0NoYXJhY3RlckNvZGVzMltcIkRcIl0gPSA2OF0gPSBcIkRcIjtcbiAgQ2hhcmFjdGVyQ29kZXMyW0NoYXJhY3RlckNvZGVzMltcIkVcIl0gPSA2OV0gPSBcIkVcIjtcbiAgQ2hhcmFjdGVyQ29kZXMyW0NoYXJhY3RlckNvZGVzMltcIkZcIl0gPSA3MF0gPSBcIkZcIjtcbiAgQ2hhcmFjdGVyQ29kZXMyW0NoYXJhY3RlckNvZGVzMltcIkdcIl0gPSA3MV0gPSBcIkdcIjtcbiAgQ2hhcmFjdGVyQ29kZXMyW0NoYXJhY3RlckNvZGVzMltcIkhcIl0gPSA3Ml0gPSBcIkhcIjtcbiAgQ2hhcmFjdGVyQ29kZXMyW0NoYXJhY3RlckNvZGVzMltcIklcIl0gPSA3M10gPSBcIklcIjtcbiAgQ2hhcmFjdGVyQ29kZXMyW0NoYXJhY3RlckNvZGVzMltcIkpcIl0gPSA3NF0gPSBcIkpcIjtcbiAgQ2hhcmFjdGVyQ29kZXMyW0NoYXJhY3RlckNvZGVzMltcIktcIl0gPSA3NV0gPSBcIktcIjtcbiAgQ2hhcmFjdGVyQ29kZXMyW0NoYXJhY3RlckNvZGVzMltcIkxcIl0gPSA3Nl0gPSBcIkxcIjtcbiAgQ2hhcmFjdGVyQ29kZXMyW0NoYXJhY3RlckNvZGVzMltcIk1cIl0gPSA3N10gPSBcIk1cIjtcbiAgQ2hhcmFjdGVyQ29kZXMyW0NoYXJhY3RlckNvZGVzMltcIk5cIl0gPSA3OF0gPSBcIk5cIjtcbiAgQ2hhcmFjdGVyQ29kZXMyW0NoYXJhY3RlckNvZGVzMltcIk9cIl0gPSA3OV0gPSBcIk9cIjtcbiAgQ2hhcmFjdGVyQ29kZXMyW0NoYXJhY3RlckNvZGVzMltcIlBcIl0gPSA4MF0gPSBcIlBcIjtcbiAgQ2hhcmFjdGVyQ29kZXMyW0NoYXJhY3RlckNvZGVzMltcIlFcIl0gPSA4MV0gPSBcIlFcIjtcbiAgQ2hhcmFjdGVyQ29kZXMyW0NoYXJhY3RlckNvZGVzMltcIlJcIl0gPSA4Ml0gPSBcIlJcIjtcbiAgQ2hhcmFjdGVyQ29kZXMyW0NoYXJhY3RlckNvZGVzMltcIlNcIl0gPSA4M10gPSBcIlNcIjtcbiAgQ2hhcmFjdGVyQ29kZXMyW0NoYXJhY3RlckNvZGVzMltcIlRcIl0gPSA4NF0gPSBcIlRcIjtcbiAgQ2hhcmFjdGVyQ29kZXMyW0NoYXJhY3RlckNvZGVzMltcIlVcIl0gPSA4NV0gPSBcIlVcIjtcbiAgQ2hhcmFjdGVyQ29kZXMyW0NoYXJhY3RlckNvZGVzMltcIlZcIl0gPSA4Nl0gPSBcIlZcIjtcbiAgQ2hhcmFjdGVyQ29kZXMyW0NoYXJhY3RlckNvZGVzMltcIldcIl0gPSA4N10gPSBcIldcIjtcbiAgQ2hhcmFjdGVyQ29kZXMyW0NoYXJhY3RlckNvZGVzMltcIlhcIl0gPSA4OF0gPSBcIlhcIjtcbiAgQ2hhcmFjdGVyQ29kZXMyW0NoYXJhY3RlckNvZGVzMltcIllcIl0gPSA4OV0gPSBcIllcIjtcbiAgQ2hhcmFjdGVyQ29kZXMyW0NoYXJhY3RlckNvZGVzMltcIlpcIl0gPSA5MF0gPSBcIlpcIjtcbiAgQ2hhcmFjdGVyQ29kZXMyW0NoYXJhY3RlckNvZGVzMltcImFzdGVyaXNrXCJdID0gNDJdID0gXCJhc3Rlcmlza1wiO1xuICBDaGFyYWN0ZXJDb2RlczJbQ2hhcmFjdGVyQ29kZXMyW1wiYmFja3NsYXNoXCJdID0gOTJdID0gXCJiYWNrc2xhc2hcIjtcbiAgQ2hhcmFjdGVyQ29kZXMyW0NoYXJhY3RlckNvZGVzMltcImNsb3NlQnJhY2VcIl0gPSAxMjVdID0gXCJjbG9zZUJyYWNlXCI7XG4gIENoYXJhY3RlckNvZGVzMltDaGFyYWN0ZXJDb2RlczJbXCJjbG9zZUJyYWNrZXRcIl0gPSA5M10gPSBcImNsb3NlQnJhY2tldFwiO1xuICBDaGFyYWN0ZXJDb2RlczJbQ2hhcmFjdGVyQ29kZXMyW1wiY29sb25cIl0gPSA1OF0gPSBcImNvbG9uXCI7XG4gIENoYXJhY3RlckNvZGVzMltDaGFyYWN0ZXJDb2RlczJbXCJjb21tYVwiXSA9IDQ0XSA9IFwiY29tbWFcIjtcbiAgQ2hhcmFjdGVyQ29kZXMyW0NoYXJhY3RlckNvZGVzMltcImRvdFwiXSA9IDQ2XSA9IFwiZG90XCI7XG4gIENoYXJhY3RlckNvZGVzMltDaGFyYWN0ZXJDb2RlczJbXCJkb3VibGVRdW90ZVwiXSA9IDM0XSA9IFwiZG91YmxlUXVvdGVcIjtcbiAgQ2hhcmFjdGVyQ29kZXMyW0NoYXJhY3RlckNvZGVzMltcIm1pbnVzXCJdID0gNDVdID0gXCJtaW51c1wiO1xuICBDaGFyYWN0ZXJDb2RlczJbQ2hhcmFjdGVyQ29kZXMyW1wib3BlbkJyYWNlXCJdID0gMTIzXSA9IFwib3BlbkJyYWNlXCI7XG4gIENoYXJhY3RlckNvZGVzMltDaGFyYWN0ZXJDb2RlczJbXCJvcGVuQnJhY2tldFwiXSA9IDkxXSA9IFwib3BlbkJyYWNrZXRcIjtcbiAgQ2hhcmFjdGVyQ29kZXMyW0NoYXJhY3RlckNvZGVzMltcInBsdXNcIl0gPSA0M10gPSBcInBsdXNcIjtcbiAgQ2hhcmFjdGVyQ29kZXMyW0NoYXJhY3RlckNvZGVzMltcInNsYXNoXCJdID0gNDddID0gXCJzbGFzaFwiO1xuICBDaGFyYWN0ZXJDb2RlczJbQ2hhcmFjdGVyQ29kZXMyW1wiZm9ybUZlZWRcIl0gPSAxMl0gPSBcImZvcm1GZWVkXCI7XG4gIENoYXJhY3RlckNvZGVzMltDaGFyYWN0ZXJDb2RlczJbXCJ0YWJcIl0gPSA5XSA9IFwidGFiXCI7XG59KShDaGFyYWN0ZXJDb2RlcyB8fCAoQ2hhcmFjdGVyQ29kZXMgPSB7fSkpO1xuXG4vLyBub2RlX21vZHVsZXMvanNvbmMtcGFyc2VyL2xpYi9lc20vaW1wbC9zdHJpbmctaW50ZXJuLmpzXG52YXIgY2FjaGVkU3BhY2VzID0gbmV3IEFycmF5KDIwKS5maWxsKDApLm1hcCgoXywgaW5kZXgpID0+IHtcbiAgcmV0dXJuIFwiIFwiLnJlcGVhdChpbmRleCk7XG59KTtcbnZhciBtYXhDYWNoZWRWYWx1ZXMgPSAyMDA7XG52YXIgY2FjaGVkQnJlYWtMaW5lc1dpdGhTcGFjZXMgPSB7XG4gIFwiIFwiOiB7XG4gICAgXCJcXG5cIjogbmV3IEFycmF5KG1heENhY2hlZFZhbHVlcykuZmlsbCgwKS5tYXAoKF8sIGluZGV4KSA9PiB7XG4gICAgICByZXR1cm4gXCJcXG5cIiArIFwiIFwiLnJlcGVhdChpbmRleCk7XG4gICAgfSksXG4gICAgXCJcXHJcIjogbmV3IEFycmF5KG1heENhY2hlZFZhbHVlcykuZmlsbCgwKS5tYXAoKF8sIGluZGV4KSA9PiB7XG4gICAgICByZXR1cm4gXCJcXHJcIiArIFwiIFwiLnJlcGVhdChpbmRleCk7XG4gICAgfSksXG4gICAgXCJcXHJcXG5cIjogbmV3IEFycmF5KG1heENhY2hlZFZhbHVlcykuZmlsbCgwKS5tYXAoKF8sIGluZGV4KSA9PiB7XG4gICAgICByZXR1cm4gXCJcXHJcXG5cIiArIFwiIFwiLnJlcGVhdChpbmRleCk7XG4gICAgfSlcbiAgfSxcbiAgXCJcdFwiOiB7XG4gICAgXCJcXG5cIjogbmV3IEFycmF5KG1heENhY2hlZFZhbHVlcykuZmlsbCgwKS5tYXAoKF8sIGluZGV4KSA9PiB7XG4gICAgICByZXR1cm4gXCJcXG5cIiArIFwiXHRcIi5yZXBlYXQoaW5kZXgpO1xuICAgIH0pLFxuICAgIFwiXFxyXCI6IG5ldyBBcnJheShtYXhDYWNoZWRWYWx1ZXMpLmZpbGwoMCkubWFwKChfLCBpbmRleCkgPT4ge1xuICAgICAgcmV0dXJuIFwiXFxyXCIgKyBcIlx0XCIucmVwZWF0KGluZGV4KTtcbiAgICB9KSxcbiAgICBcIlxcclxcblwiOiBuZXcgQXJyYXkobWF4Q2FjaGVkVmFsdWVzKS5maWxsKDApLm1hcCgoXywgaW5kZXgpID0+IHtcbiAgICAgIHJldHVybiBcIlxcclxcblwiICsgXCJcdFwiLnJlcGVhdChpbmRleCk7XG4gICAgfSlcbiAgfVxufTtcbnZhciBzdXBwb3J0ZWRFb2xzID0gW1wiXFxuXCIsIFwiXFxyXCIsIFwiXFxyXFxuXCJdO1xuXG4vLyBub2RlX21vZHVsZXMvanNvbmMtcGFyc2VyL2xpYi9lc20vaW1wbC9mb3JtYXQuanNcbmZ1bmN0aW9uIGZvcm1hdChkb2N1bWVudFRleHQsIHJhbmdlLCBvcHRpb25zKSB7XG4gIGxldCBpbml0aWFsSW5kZW50TGV2ZWw7XG4gIGxldCBmb3JtYXRUZXh0O1xuICBsZXQgZm9ybWF0VGV4dFN0YXJ0O1xuICBsZXQgcmFuZ2VTdGFydDtcbiAgbGV0IHJhbmdlRW5kO1xuICBpZiAocmFuZ2UpIHtcbiAgICByYW5nZVN0YXJ0ID0gcmFuZ2Uub2Zmc2V0O1xuICAgIHJhbmdlRW5kID0gcmFuZ2VTdGFydCArIHJhbmdlLmxlbmd0aDtcbiAgICBmb3JtYXRUZXh0U3RhcnQgPSByYW5nZVN0YXJ0O1xuICAgIHdoaWxlIChmb3JtYXRUZXh0U3RhcnQgPiAwICYmICFpc0VPTChkb2N1bWVudFRleHQsIGZvcm1hdFRleHRTdGFydCAtIDEpKSB7XG4gICAgICBmb3JtYXRUZXh0U3RhcnQtLTtcbiAgICB9XG4gICAgbGV0IGVuZE9mZnNldCA9IHJhbmdlRW5kO1xuICAgIHdoaWxlIChlbmRPZmZzZXQgPCBkb2N1bWVudFRleHQubGVuZ3RoICYmICFpc0VPTChkb2N1bWVudFRleHQsIGVuZE9mZnNldCkpIHtcbiAgICAgIGVuZE9mZnNldCsrO1xuICAgIH1cbiAgICBmb3JtYXRUZXh0ID0gZG9jdW1lbnRUZXh0LnN1YnN0cmluZyhmb3JtYXRUZXh0U3RhcnQsIGVuZE9mZnNldCk7XG4gICAgaW5pdGlhbEluZGVudExldmVsID0gY29tcHV0ZUluZGVudExldmVsKGZvcm1hdFRleHQsIG9wdGlvbnMpO1xuICB9IGVsc2Uge1xuICAgIGZvcm1hdFRleHQgPSBkb2N1bWVudFRleHQ7XG4gICAgaW5pdGlhbEluZGVudExldmVsID0gMDtcbiAgICBmb3JtYXRUZXh0U3RhcnQgPSAwO1xuICAgIHJhbmdlU3RhcnQgPSAwO1xuICAgIHJhbmdlRW5kID0gZG9jdW1lbnRUZXh0Lmxlbmd0aDtcbiAgfVxuICBjb25zdCBlb2wgPSBnZXRFT0wob3B0aW9ucywgZG9jdW1lbnRUZXh0KTtcbiAgY29uc3QgZW9sRmFzdFBhdGhTdXBwb3J0ZWQgPSBzdXBwb3J0ZWRFb2xzLmluY2x1ZGVzKGVvbCk7XG4gIGxldCBudW1iZXJMaW5lQnJlYWtzID0gMDtcbiAgbGV0IGluZGVudExldmVsID0gMDtcbiAgbGV0IGluZGVudFZhbHVlO1xuICBpZiAob3B0aW9ucy5pbnNlcnRTcGFjZXMpIHtcbiAgICBpbmRlbnRWYWx1ZSA9IGNhY2hlZFNwYWNlc1tvcHRpb25zLnRhYlNpemUgfHwgNF0gPz8gcmVwZWF0KGNhY2hlZFNwYWNlc1sxXSwgb3B0aW9ucy50YWJTaXplIHx8IDQpO1xuICB9IGVsc2Uge1xuICAgIGluZGVudFZhbHVlID0gXCJcdFwiO1xuICB9XG4gIGNvbnN0IGluZGVudFR5cGUgPSBpbmRlbnRWYWx1ZSA9PT0gXCJcdFwiID8gXCJcdFwiIDogXCIgXCI7XG4gIGxldCBzY2FubmVyID0gY3JlYXRlU2Nhbm5lcihmb3JtYXRUZXh0LCBmYWxzZSk7XG4gIGxldCBoYXNFcnJvciA9IGZhbHNlO1xuICBmdW5jdGlvbiBuZXdMaW5lc0FuZEluZGVudCgpIHtcbiAgICBpZiAobnVtYmVyTGluZUJyZWFrcyA+IDEpIHtcbiAgICAgIHJldHVybiByZXBlYXQoZW9sLCBudW1iZXJMaW5lQnJlYWtzKSArIHJlcGVhdChpbmRlbnRWYWx1ZSwgaW5pdGlhbEluZGVudExldmVsICsgaW5kZW50TGV2ZWwpO1xuICAgIH1cbiAgICBjb25zdCBhbW91bnRPZlNwYWNlcyA9IGluZGVudFZhbHVlLmxlbmd0aCAqIChpbml0aWFsSW5kZW50TGV2ZWwgKyBpbmRlbnRMZXZlbCk7XG4gICAgaWYgKCFlb2xGYXN0UGF0aFN1cHBvcnRlZCB8fCBhbW91bnRPZlNwYWNlcyA+IGNhY2hlZEJyZWFrTGluZXNXaXRoU3BhY2VzW2luZGVudFR5cGVdW2VvbF0ubGVuZ3RoKSB7XG4gICAgICByZXR1cm4gZW9sICsgcmVwZWF0KGluZGVudFZhbHVlLCBpbml0aWFsSW5kZW50TGV2ZWwgKyBpbmRlbnRMZXZlbCk7XG4gICAgfVxuICAgIGlmIChhbW91bnRPZlNwYWNlcyA8PSAwKSB7XG4gICAgICByZXR1cm4gZW9sO1xuICAgIH1cbiAgICByZXR1cm4gY2FjaGVkQnJlYWtMaW5lc1dpdGhTcGFjZXNbaW5kZW50VHlwZV1bZW9sXVthbW91bnRPZlNwYWNlc107XG4gIH1cbiAgZnVuY3Rpb24gc2Nhbk5leHQoKSB7XG4gICAgbGV0IHRva2VuID0gc2Nhbm5lci5zY2FuKCk7XG4gICAgbnVtYmVyTGluZUJyZWFrcyA9IDA7XG4gICAgd2hpbGUgKHRva2VuID09PSAxNSB8fCB0b2tlbiA9PT0gMTQpIHtcbiAgICAgIGlmICh0b2tlbiA9PT0gMTQgJiYgb3B0aW9ucy5rZWVwTGluZXMpIHtcbiAgICAgICAgbnVtYmVyTGluZUJyZWFrcyArPSAxO1xuICAgICAgfSBlbHNlIGlmICh0b2tlbiA9PT0gMTQpIHtcbiAgICAgICAgbnVtYmVyTGluZUJyZWFrcyA9IDE7XG4gICAgICB9XG4gICAgICB0b2tlbiA9IHNjYW5uZXIuc2NhbigpO1xuICAgIH1cbiAgICBoYXNFcnJvciA9IHRva2VuID09PSAxNiB8fCBzY2FubmVyLmdldFRva2VuRXJyb3IoKSAhPT0gMDtcbiAgICByZXR1cm4gdG9rZW47XG4gIH1cbiAgY29uc3QgZWRpdE9wZXJhdGlvbnMgPSBbXTtcbiAgZnVuY3Rpb24gYWRkRWRpdCh0ZXh0LCBzdGFydE9mZnNldCwgZW5kT2Zmc2V0KSB7XG4gICAgaWYgKCFoYXNFcnJvciAmJiAoIXJhbmdlIHx8IHN0YXJ0T2Zmc2V0IDwgcmFuZ2VFbmQgJiYgZW5kT2Zmc2V0ID4gcmFuZ2VTdGFydCkgJiYgZG9jdW1lbnRUZXh0LnN1YnN0cmluZyhzdGFydE9mZnNldCwgZW5kT2Zmc2V0KSAhPT0gdGV4dCkge1xuICAgICAgZWRpdE9wZXJhdGlvbnMucHVzaCh7IG9mZnNldDogc3RhcnRPZmZzZXQsIGxlbmd0aDogZW5kT2Zmc2V0IC0gc3RhcnRPZmZzZXQsIGNvbnRlbnQ6IHRleHQgfSk7XG4gICAgfVxuICB9XG4gIGxldCBmaXJzdFRva2VuID0gc2Nhbk5leHQoKTtcbiAgaWYgKG9wdGlvbnMua2VlcExpbmVzICYmIG51bWJlckxpbmVCcmVha3MgPiAwKSB7XG4gICAgYWRkRWRpdChyZXBlYXQoZW9sLCBudW1iZXJMaW5lQnJlYWtzKSwgMCwgMCk7XG4gIH1cbiAgaWYgKGZpcnN0VG9rZW4gIT09IDE3KSB7XG4gICAgbGV0IGZpcnN0VG9rZW5TdGFydCA9IHNjYW5uZXIuZ2V0VG9rZW5PZmZzZXQoKSArIGZvcm1hdFRleHRTdGFydDtcbiAgICBsZXQgaW5pdGlhbEluZGVudCA9IGluZGVudFZhbHVlLmxlbmd0aCAqIGluaXRpYWxJbmRlbnRMZXZlbCA8IDIwICYmIG9wdGlvbnMuaW5zZXJ0U3BhY2VzID8gY2FjaGVkU3BhY2VzW2luZGVudFZhbHVlLmxlbmd0aCAqIGluaXRpYWxJbmRlbnRMZXZlbF0gOiByZXBlYXQoaW5kZW50VmFsdWUsIGluaXRpYWxJbmRlbnRMZXZlbCk7XG4gICAgYWRkRWRpdChpbml0aWFsSW5kZW50LCBmb3JtYXRUZXh0U3RhcnQsIGZpcnN0VG9rZW5TdGFydCk7XG4gIH1cbiAgd2hpbGUgKGZpcnN0VG9rZW4gIT09IDE3KSB7XG4gICAgbGV0IGZpcnN0VG9rZW5FbmQgPSBzY2FubmVyLmdldFRva2VuT2Zmc2V0KCkgKyBzY2FubmVyLmdldFRva2VuTGVuZ3RoKCkgKyBmb3JtYXRUZXh0U3RhcnQ7XG4gICAgbGV0IHNlY29uZFRva2VuID0gc2Nhbk5leHQoKTtcbiAgICBsZXQgcmVwbGFjZUNvbnRlbnQgPSBcIlwiO1xuICAgIGxldCBuZWVkc0xpbmVCcmVhayA9IGZhbHNlO1xuICAgIHdoaWxlIChudW1iZXJMaW5lQnJlYWtzID09PSAwICYmIChzZWNvbmRUb2tlbiA9PT0gMTIgfHwgc2Vjb25kVG9rZW4gPT09IDEzKSkge1xuICAgICAgbGV0IGNvbW1lbnRUb2tlblN0YXJ0ID0gc2Nhbm5lci5nZXRUb2tlbk9mZnNldCgpICsgZm9ybWF0VGV4dFN0YXJ0O1xuICAgICAgYWRkRWRpdChjYWNoZWRTcGFjZXNbMV0sIGZpcnN0VG9rZW5FbmQsIGNvbW1lbnRUb2tlblN0YXJ0KTtcbiAgICAgIGZpcnN0VG9rZW5FbmQgPSBzY2FubmVyLmdldFRva2VuT2Zmc2V0KCkgKyBzY2FubmVyLmdldFRva2VuTGVuZ3RoKCkgKyBmb3JtYXRUZXh0U3RhcnQ7XG4gICAgICBuZWVkc0xpbmVCcmVhayA9IHNlY29uZFRva2VuID09PSAxMjtcbiAgICAgIHJlcGxhY2VDb250ZW50ID0gbmVlZHNMaW5lQnJlYWsgPyBuZXdMaW5lc0FuZEluZGVudCgpIDogXCJcIjtcbiAgICAgIHNlY29uZFRva2VuID0gc2Nhbk5leHQoKTtcbiAgICB9XG4gICAgaWYgKHNlY29uZFRva2VuID09PSAyKSB7XG4gICAgICBpZiAoZmlyc3RUb2tlbiAhPT0gMSkge1xuICAgICAgICBpbmRlbnRMZXZlbC0tO1xuICAgICAgfVxuICAgICAgO1xuICAgICAgaWYgKG9wdGlvbnMua2VlcExpbmVzICYmIG51bWJlckxpbmVCcmVha3MgPiAwIHx8ICFvcHRpb25zLmtlZXBMaW5lcyAmJiBmaXJzdFRva2VuICE9PSAxKSB7XG4gICAgICAgIHJlcGxhY2VDb250ZW50ID0gbmV3TGluZXNBbmRJbmRlbnQoKTtcbiAgICAgIH0gZWxzZSBpZiAob3B0aW9ucy5rZWVwTGluZXMpIHtcbiAgICAgICAgcmVwbGFjZUNvbnRlbnQgPSBjYWNoZWRTcGFjZXNbMV07XG4gICAgICB9XG4gICAgfSBlbHNlIGlmIChzZWNvbmRUb2tlbiA9PT0gNCkge1xuICAgICAgaWYgKGZpcnN0VG9rZW4gIT09IDMpIHtcbiAgICAgICAgaW5kZW50TGV2ZWwtLTtcbiAgICAgIH1cbiAgICAgIDtcbiAgICAgIGlmIChvcHRpb25zLmtlZXBMaW5lcyAmJiBudW1iZXJMaW5lQnJlYWtzID4gMCB8fCAhb3B0aW9ucy5rZWVwTGluZXMgJiYgZmlyc3RUb2tlbiAhPT0gMykge1xuICAgICAgICByZXBsYWNlQ29udGVudCA9IG5ld0xpbmVzQW5kSW5kZW50KCk7XG4gICAgICB9IGVsc2UgaWYgKG9wdGlvbnMua2VlcExpbmVzKSB7XG4gICAgICAgIHJlcGxhY2VDb250ZW50ID0gY2FjaGVkU3BhY2VzWzFdO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBzd2l0Y2ggKGZpcnN0VG9rZW4pIHtcbiAgICAgICAgY2FzZSAzOlxuICAgICAgICBjYXNlIDE6XG4gICAgICAgICAgaW5kZW50TGV2ZWwrKztcbiAgICAgICAgICBpZiAob3B0aW9ucy5rZWVwTGluZXMgJiYgbnVtYmVyTGluZUJyZWFrcyA+IDAgfHwgIW9wdGlvbnMua2VlcExpbmVzKSB7XG4gICAgICAgICAgICByZXBsYWNlQ29udGVudCA9IG5ld0xpbmVzQW5kSW5kZW50KCk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJlcGxhY2VDb250ZW50ID0gY2FjaGVkU3BhY2VzWzFdO1xuICAgICAgICAgIH1cbiAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSA1OlxuICAgICAgICAgIGlmIChvcHRpb25zLmtlZXBMaW5lcyAmJiBudW1iZXJMaW5lQnJlYWtzID4gMCB8fCAhb3B0aW9ucy5rZWVwTGluZXMpIHtcbiAgICAgICAgICAgIHJlcGxhY2VDb250ZW50ID0gbmV3TGluZXNBbmRJbmRlbnQoKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmVwbGFjZUNvbnRlbnQgPSBjYWNoZWRTcGFjZXNbMV07XG4gICAgICAgICAgfVxuICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlIDEyOlxuICAgICAgICAgIHJlcGxhY2VDb250ZW50ID0gbmV3TGluZXNBbmRJbmRlbnQoKTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSAxMzpcbiAgICAgICAgICBpZiAobnVtYmVyTGluZUJyZWFrcyA+IDApIHtcbiAgICAgICAgICAgIHJlcGxhY2VDb250ZW50ID0gbmV3TGluZXNBbmRJbmRlbnQoKTtcbiAgICAgICAgICB9IGVsc2UgaWYgKCFuZWVkc0xpbmVCcmVhaykge1xuICAgICAgICAgICAgcmVwbGFjZUNvbnRlbnQgPSBjYWNoZWRTcGFjZXNbMV07XG4gICAgICAgICAgfVxuICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlIDY6XG4gICAgICAgICAgaWYgKG9wdGlvbnMua2VlcExpbmVzICYmIG51bWJlckxpbmVCcmVha3MgPiAwKSB7XG4gICAgICAgICAgICByZXBsYWNlQ29udGVudCA9IG5ld0xpbmVzQW5kSW5kZW50KCk7XG4gICAgICAgICAgfSBlbHNlIGlmICghbmVlZHNMaW5lQnJlYWspIHtcbiAgICAgICAgICAgIHJlcGxhY2VDb250ZW50ID0gY2FjaGVkU3BhY2VzWzFdO1xuICAgICAgICAgIH1cbiAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSAxMDpcbiAgICAgICAgICBpZiAob3B0aW9ucy5rZWVwTGluZXMgJiYgbnVtYmVyTGluZUJyZWFrcyA+IDApIHtcbiAgICAgICAgICAgIHJlcGxhY2VDb250ZW50ID0gbmV3TGluZXNBbmRJbmRlbnQoKTtcbiAgICAgICAgICB9IGVsc2UgaWYgKHNlY29uZFRva2VuID09PSA2ICYmICFuZWVkc0xpbmVCcmVhaykge1xuICAgICAgICAgICAgcmVwbGFjZUNvbnRlbnQgPSBcIlwiO1xuICAgICAgICAgIH1cbiAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSA3OlxuICAgICAgICBjYXNlIDg6XG4gICAgICAgIGNhc2UgOTpcbiAgICAgICAgY2FzZSAxMTpcbiAgICAgICAgY2FzZSAyOlxuICAgICAgICBjYXNlIDQ6XG4gICAgICAgICAgaWYgKG9wdGlvbnMua2VlcExpbmVzICYmIG51bWJlckxpbmVCcmVha3MgPiAwKSB7XG4gICAgICAgICAgICByZXBsYWNlQ29udGVudCA9IG5ld0xpbmVzQW5kSW5kZW50KCk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGlmICgoc2Vjb25kVG9rZW4gPT09IDEyIHx8IHNlY29uZFRva2VuID09PSAxMykgJiYgIW5lZWRzTGluZUJyZWFrKSB7XG4gICAgICAgICAgICAgIHJlcGxhY2VDb250ZW50ID0gY2FjaGVkU3BhY2VzWzFdO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChzZWNvbmRUb2tlbiAhPT0gNSAmJiBzZWNvbmRUb2tlbiAhPT0gMTcpIHtcbiAgICAgICAgICAgICAgaGFzRXJyb3IgPSB0cnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSAxNjpcbiAgICAgICAgICBoYXNFcnJvciA9IHRydWU7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgICBpZiAobnVtYmVyTGluZUJyZWFrcyA+IDAgJiYgKHNlY29uZFRva2VuID09PSAxMiB8fCBzZWNvbmRUb2tlbiA9PT0gMTMpKSB7XG4gICAgICAgIHJlcGxhY2VDb250ZW50ID0gbmV3TGluZXNBbmRJbmRlbnQoKTtcbiAgICAgIH1cbiAgICB9XG4gICAgaWYgKHNlY29uZFRva2VuID09PSAxNykge1xuICAgICAgaWYgKG9wdGlvbnMua2VlcExpbmVzICYmIG51bWJlckxpbmVCcmVha3MgPiAwKSB7XG4gICAgICAgIHJlcGxhY2VDb250ZW50ID0gbmV3TGluZXNBbmRJbmRlbnQoKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJlcGxhY2VDb250ZW50ID0gb3B0aW9ucy5pbnNlcnRGaW5hbE5ld2xpbmUgPyBlb2wgOiBcIlwiO1xuICAgICAgfVxuICAgIH1cbiAgICBjb25zdCBzZWNvbmRUb2tlblN0YXJ0ID0gc2Nhbm5lci5nZXRUb2tlbk9mZnNldCgpICsgZm9ybWF0VGV4dFN0YXJ0O1xuICAgIGFkZEVkaXQocmVwbGFjZUNvbnRlbnQsIGZpcnN0VG9rZW5FbmQsIHNlY29uZFRva2VuU3RhcnQpO1xuICAgIGZpcnN0VG9rZW4gPSBzZWNvbmRUb2tlbjtcbiAgfVxuICByZXR1cm4gZWRpdE9wZXJhdGlvbnM7XG59XG5mdW5jdGlvbiByZXBlYXQocywgY291bnQpIHtcbiAgbGV0IHJlc3VsdCA9IFwiXCI7XG4gIGZvciAobGV0IGkgPSAwOyBpIDwgY291bnQ7IGkrKykge1xuICAgIHJlc3VsdCArPSBzO1xuICB9XG4gIHJldHVybiByZXN1bHQ7XG59XG5mdW5jdGlvbiBjb21wdXRlSW5kZW50TGV2ZWwoY29udGVudCwgb3B0aW9ucykge1xuICBsZXQgaSA9IDA7XG4gIGxldCBuQ2hhcnMgPSAwO1xuICBjb25zdCB0YWJTaXplID0gb3B0aW9ucy50YWJTaXplIHx8IDQ7XG4gIHdoaWxlIChpIDwgY29udGVudC5sZW5ndGgpIHtcbiAgICBsZXQgY2ggPSBjb250ZW50LmNoYXJBdChpKTtcbiAgICBpZiAoY2ggPT09IGNhY2hlZFNwYWNlc1sxXSkge1xuICAgICAgbkNoYXJzKys7XG4gICAgfSBlbHNlIGlmIChjaCA9PT0gXCJcdFwiKSB7XG4gICAgICBuQ2hhcnMgKz0gdGFiU2l6ZTtcbiAgICB9IGVsc2Uge1xuICAgICAgYnJlYWs7XG4gICAgfVxuICAgIGkrKztcbiAgfVxuICByZXR1cm4gTWF0aC5mbG9vcihuQ2hhcnMgLyB0YWJTaXplKTtcbn1cbmZ1bmN0aW9uIGdldEVPTChvcHRpb25zLCB0ZXh0KSB7XG4gIGZvciAobGV0IGkgPSAwOyBpIDwgdGV4dC5sZW5ndGg7IGkrKykge1xuICAgIGNvbnN0IGNoID0gdGV4dC5jaGFyQXQoaSk7XG4gICAgaWYgKGNoID09PSBcIlxcclwiKSB7XG4gICAgICBpZiAoaSArIDEgPCB0ZXh0Lmxlbmd0aCAmJiB0ZXh0LmNoYXJBdChpICsgMSkgPT09IFwiXFxuXCIpIHtcbiAgICAgICAgcmV0dXJuIFwiXFxyXFxuXCI7XG4gICAgICB9XG4gICAgICByZXR1cm4gXCJcXHJcIjtcbiAgICB9IGVsc2UgaWYgKGNoID09PSBcIlxcblwiKSB7XG4gICAgICByZXR1cm4gXCJcXG5cIjtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIG9wdGlvbnMgJiYgb3B0aW9ucy5lb2wgfHwgXCJcXG5cIjtcbn1cbmZ1bmN0aW9uIGlzRU9MKHRleHQsIG9mZnNldCkge1xuICByZXR1cm4gXCJcXHJcXG5cIi5pbmRleE9mKHRleHQuY2hhckF0KG9mZnNldCkpICE9PSAtMTtcbn1cblxuLy8gbm9kZV9tb2R1bGVzL2pzb25jLXBhcnNlci9saWIvZXNtL2ltcGwvcGFyc2VyLmpzXG52YXIgUGFyc2VPcHRpb25zO1xuKGZ1bmN0aW9uKFBhcnNlT3B0aW9uczIpIHtcbiAgUGFyc2VPcHRpb25zMi5ERUZBVUxUID0ge1xuICAgIGFsbG93VHJhaWxpbmdDb21tYTogZmFsc2VcbiAgfTtcbn0pKFBhcnNlT3B0aW9ucyB8fCAoUGFyc2VPcHRpb25zID0ge30pKTtcbmZ1bmN0aW9uIHBhcnNlKHRleHQsIGVycm9ycyA9IFtdLCBvcHRpb25zID0gUGFyc2VPcHRpb25zLkRFRkFVTFQpIHtcbiAgbGV0IGN1cnJlbnRQcm9wZXJ0eSA9IG51bGw7XG4gIGxldCBjdXJyZW50UGFyZW50ID0gW107XG4gIGNvbnN0IHByZXZpb3VzUGFyZW50cyA9IFtdO1xuICBmdW5jdGlvbiBvblZhbHVlKHZhbHVlKSB7XG4gICAgaWYgKEFycmF5LmlzQXJyYXkoY3VycmVudFBhcmVudCkpIHtcbiAgICAgIGN1cnJlbnRQYXJlbnQucHVzaCh2YWx1ZSk7XG4gICAgfSBlbHNlIGlmIChjdXJyZW50UHJvcGVydHkgIT09IG51bGwpIHtcbiAgICAgIGN1cnJlbnRQYXJlbnRbY3VycmVudFByb3BlcnR5XSA9IHZhbHVlO1xuICAgIH1cbiAgfVxuICBjb25zdCB2aXNpdG9yID0ge1xuICAgIG9uT2JqZWN0QmVnaW46ICgpID0+IHtcbiAgICAgIGNvbnN0IG9iamVjdCA9IHt9O1xuICAgICAgb25WYWx1ZShvYmplY3QpO1xuICAgICAgcHJldmlvdXNQYXJlbnRzLnB1c2goY3VycmVudFBhcmVudCk7XG4gICAgICBjdXJyZW50UGFyZW50ID0gb2JqZWN0O1xuICAgICAgY3VycmVudFByb3BlcnR5ID0gbnVsbDtcbiAgICB9LFxuICAgIG9uT2JqZWN0UHJvcGVydHk6IChuYW1lKSA9PiB7XG4gICAgICBjdXJyZW50UHJvcGVydHkgPSBuYW1lO1xuICAgIH0sXG4gICAgb25PYmplY3RFbmQ6ICgpID0+IHtcbiAgICAgIGN1cnJlbnRQYXJlbnQgPSBwcmV2aW91c1BhcmVudHMucG9wKCk7XG4gICAgfSxcbiAgICBvbkFycmF5QmVnaW46ICgpID0+IHtcbiAgICAgIGNvbnN0IGFycmF5ID0gW107XG4gICAgICBvblZhbHVlKGFycmF5KTtcbiAgICAgIHByZXZpb3VzUGFyZW50cy5wdXNoKGN1cnJlbnRQYXJlbnQpO1xuICAgICAgY3VycmVudFBhcmVudCA9IGFycmF5O1xuICAgICAgY3VycmVudFByb3BlcnR5ID0gbnVsbDtcbiAgICB9LFxuICAgIG9uQXJyYXlFbmQ6ICgpID0+IHtcbiAgICAgIGN1cnJlbnRQYXJlbnQgPSBwcmV2aW91c1BhcmVudHMucG9wKCk7XG4gICAgfSxcbiAgICBvbkxpdGVyYWxWYWx1ZTogb25WYWx1ZSxcbiAgICBvbkVycm9yOiAoZXJyb3IsIG9mZnNldCwgbGVuZ3RoKSA9PiB7XG4gICAgICBlcnJvcnMucHVzaCh7IGVycm9yLCBvZmZzZXQsIGxlbmd0aCB9KTtcbiAgICB9XG4gIH07XG4gIHZpc2l0KHRleHQsIHZpc2l0b3IsIG9wdGlvbnMpO1xuICByZXR1cm4gY3VycmVudFBhcmVudFswXTtcbn1cbmZ1bmN0aW9uIGdldE5vZGVQYXRoKG5vZGUpIHtcbiAgaWYgKCFub2RlLnBhcmVudCB8fCAhbm9kZS5wYXJlbnQuY2hpbGRyZW4pIHtcbiAgICByZXR1cm4gW107XG4gIH1cbiAgY29uc3QgcGF0aCA9IGdldE5vZGVQYXRoKG5vZGUucGFyZW50KTtcbiAgaWYgKG5vZGUucGFyZW50LnR5cGUgPT09IFwicHJvcGVydHlcIikge1xuICAgIGNvbnN0IGtleSA9IG5vZGUucGFyZW50LmNoaWxkcmVuWzBdLnZhbHVlO1xuICAgIHBhdGgucHVzaChrZXkpO1xuICB9IGVsc2UgaWYgKG5vZGUucGFyZW50LnR5cGUgPT09IFwiYXJyYXlcIikge1xuICAgIGNvbnN0IGluZGV4ID0gbm9kZS5wYXJlbnQuY2hpbGRyZW4uaW5kZXhPZihub2RlKTtcbiAgICBpZiAoaW5kZXggIT09IC0xKSB7XG4gICAgICBwYXRoLnB1c2goaW5kZXgpO1xuICAgIH1cbiAgfVxuICByZXR1cm4gcGF0aDtcbn1cbmZ1bmN0aW9uIGdldE5vZGVWYWx1ZShub2RlKSB7XG4gIHN3aXRjaCAobm9kZS50eXBlKSB7XG4gICAgY2FzZSBcImFycmF5XCI6XG4gICAgICByZXR1cm4gbm9kZS5jaGlsZHJlbi5tYXAoZ2V0Tm9kZVZhbHVlKTtcbiAgICBjYXNlIFwib2JqZWN0XCI6XG4gICAgICBjb25zdCBvYmogPSAvKiBAX19QVVJFX18gKi8gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiAgICAgIGZvciAobGV0IHByb3Agb2Ygbm9kZS5jaGlsZHJlbikge1xuICAgICAgICBjb25zdCB2YWx1ZU5vZGUgPSBwcm9wLmNoaWxkcmVuWzFdO1xuICAgICAgICBpZiAodmFsdWVOb2RlKSB7XG4gICAgICAgICAgb2JqW3Byb3AuY2hpbGRyZW5bMF0udmFsdWVdID0gZ2V0Tm9kZVZhbHVlKHZhbHVlTm9kZSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiBvYmo7XG4gICAgY2FzZSBcIm51bGxcIjpcbiAgICBjYXNlIFwic3RyaW5nXCI6XG4gICAgY2FzZSBcIm51bWJlclwiOlxuICAgIGNhc2UgXCJib29sZWFuXCI6XG4gICAgICByZXR1cm4gbm9kZS52YWx1ZTtcbiAgICBkZWZhdWx0OlxuICAgICAgcmV0dXJuIHZvaWQgMDtcbiAgfVxufVxuZnVuY3Rpb24gY29udGFpbnMobm9kZSwgb2Zmc2V0LCBpbmNsdWRlUmlnaHRCb3VuZCA9IGZhbHNlKSB7XG4gIHJldHVybiBvZmZzZXQgPj0gbm9kZS5vZmZzZXQgJiYgb2Zmc2V0IDwgbm9kZS5vZmZzZXQgKyBub2RlLmxlbmd0aCB8fCBpbmNsdWRlUmlnaHRCb3VuZCAmJiBvZmZzZXQgPT09IG5vZGUub2Zmc2V0ICsgbm9kZS5sZW5ndGg7XG59XG5mdW5jdGlvbiBmaW5kTm9kZUF0T2Zmc2V0KG5vZGUsIG9mZnNldCwgaW5jbHVkZVJpZ2h0Qm91bmQgPSBmYWxzZSkge1xuICBpZiAoY29udGFpbnMobm9kZSwgb2Zmc2V0LCBpbmNsdWRlUmlnaHRCb3VuZCkpIHtcbiAgICBjb25zdCBjaGlsZHJlbiA9IG5vZGUuY2hpbGRyZW47XG4gICAgaWYgKEFycmF5LmlzQXJyYXkoY2hpbGRyZW4pKSB7XG4gICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGNoaWxkcmVuLmxlbmd0aCAmJiBjaGlsZHJlbltpXS5vZmZzZXQgPD0gb2Zmc2V0OyBpKyspIHtcbiAgICAgICAgY29uc3QgaXRlbSA9IGZpbmROb2RlQXRPZmZzZXQoY2hpbGRyZW5baV0sIG9mZnNldCwgaW5jbHVkZVJpZ2h0Qm91bmQpO1xuICAgICAgICBpZiAoaXRlbSkge1xuICAgICAgICAgIHJldHVybiBpdGVtO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBub2RlO1xuICB9XG4gIHJldHVybiB2b2lkIDA7XG59XG5mdW5jdGlvbiB2aXNpdCh0ZXh0LCB2aXNpdG9yLCBvcHRpb25zID0gUGFyc2VPcHRpb25zLkRFRkFVTFQpIHtcbiAgY29uc3QgX3NjYW5uZXIgPSBjcmVhdGVTY2FubmVyKHRleHQsIGZhbHNlKTtcbiAgY29uc3QgX2pzb25QYXRoID0gW107XG4gIGZ1bmN0aW9uIHRvTm9BcmdWaXNpdCh2aXNpdEZ1bmN0aW9uKSB7XG4gICAgcmV0dXJuIHZpc2l0RnVuY3Rpb24gPyAoKSA9PiB2aXNpdEZ1bmN0aW9uKF9zY2FubmVyLmdldFRva2VuT2Zmc2V0KCksIF9zY2FubmVyLmdldFRva2VuTGVuZ3RoKCksIF9zY2FubmVyLmdldFRva2VuU3RhcnRMaW5lKCksIF9zY2FubmVyLmdldFRva2VuU3RhcnRDaGFyYWN0ZXIoKSkgOiAoKSA9PiB0cnVlO1xuICB9XG4gIGZ1bmN0aW9uIHRvTm9BcmdWaXNpdFdpdGhQYXRoKHZpc2l0RnVuY3Rpb24pIHtcbiAgICByZXR1cm4gdmlzaXRGdW5jdGlvbiA/ICgpID0+IHZpc2l0RnVuY3Rpb24oX3NjYW5uZXIuZ2V0VG9rZW5PZmZzZXQoKSwgX3NjYW5uZXIuZ2V0VG9rZW5MZW5ndGgoKSwgX3NjYW5uZXIuZ2V0VG9rZW5TdGFydExpbmUoKSwgX3NjYW5uZXIuZ2V0VG9rZW5TdGFydENoYXJhY3RlcigpLCAoKSA9PiBfanNvblBhdGguc2xpY2UoKSkgOiAoKSA9PiB0cnVlO1xuICB9XG4gIGZ1bmN0aW9uIHRvT25lQXJnVmlzaXQodmlzaXRGdW5jdGlvbikge1xuICAgIHJldHVybiB2aXNpdEZ1bmN0aW9uID8gKGFyZykgPT4gdmlzaXRGdW5jdGlvbihhcmcsIF9zY2FubmVyLmdldFRva2VuT2Zmc2V0KCksIF9zY2FubmVyLmdldFRva2VuTGVuZ3RoKCksIF9zY2FubmVyLmdldFRva2VuU3RhcnRMaW5lKCksIF9zY2FubmVyLmdldFRva2VuU3RhcnRDaGFyYWN0ZXIoKSkgOiAoKSA9PiB0cnVlO1xuICB9XG4gIGZ1bmN0aW9uIHRvT25lQXJnVmlzaXRXaXRoUGF0aCh2aXNpdEZ1bmN0aW9uKSB7XG4gICAgcmV0dXJuIHZpc2l0RnVuY3Rpb24gPyAoYXJnKSA9PiB2aXNpdEZ1bmN0aW9uKGFyZywgX3NjYW5uZXIuZ2V0VG9rZW5PZmZzZXQoKSwgX3NjYW5uZXIuZ2V0VG9rZW5MZW5ndGgoKSwgX3NjYW5uZXIuZ2V0VG9rZW5TdGFydExpbmUoKSwgX3NjYW5uZXIuZ2V0VG9rZW5TdGFydENoYXJhY3RlcigpLCAoKSA9PiBfanNvblBhdGguc2xpY2UoKSkgOiAoKSA9PiB0cnVlO1xuICB9XG4gIGNvbnN0IG9uT2JqZWN0QmVnaW4gPSB0b05vQXJnVmlzaXRXaXRoUGF0aCh2aXNpdG9yLm9uT2JqZWN0QmVnaW4pLCBvbk9iamVjdFByb3BlcnR5ID0gdG9PbmVBcmdWaXNpdFdpdGhQYXRoKHZpc2l0b3Iub25PYmplY3RQcm9wZXJ0eSksIG9uT2JqZWN0RW5kID0gdG9Ob0FyZ1Zpc2l0KHZpc2l0b3Iub25PYmplY3RFbmQpLCBvbkFycmF5QmVnaW4gPSB0b05vQXJnVmlzaXRXaXRoUGF0aCh2aXNpdG9yLm9uQXJyYXlCZWdpbiksIG9uQXJyYXlFbmQgPSB0b05vQXJnVmlzaXQodmlzaXRvci5vbkFycmF5RW5kKSwgb25MaXRlcmFsVmFsdWUgPSB0b09uZUFyZ1Zpc2l0V2l0aFBhdGgodmlzaXRvci5vbkxpdGVyYWxWYWx1ZSksIG9uU2VwYXJhdG9yID0gdG9PbmVBcmdWaXNpdCh2aXNpdG9yLm9uU2VwYXJhdG9yKSwgb25Db21tZW50ID0gdG9Ob0FyZ1Zpc2l0KHZpc2l0b3Iub25Db21tZW50KSwgb25FcnJvciA9IHRvT25lQXJnVmlzaXQodmlzaXRvci5vbkVycm9yKTtcbiAgY29uc3QgZGlzYWxsb3dDb21tZW50cyA9IG9wdGlvbnMgJiYgb3B0aW9ucy5kaXNhbGxvd0NvbW1lbnRzO1xuICBjb25zdCBhbGxvd1RyYWlsaW5nQ29tbWEgPSBvcHRpb25zICYmIG9wdGlvbnMuYWxsb3dUcmFpbGluZ0NvbW1hO1xuICBmdW5jdGlvbiBzY2FuTmV4dCgpIHtcbiAgICB3aGlsZSAodHJ1ZSkge1xuICAgICAgY29uc3QgdG9rZW4gPSBfc2Nhbm5lci5zY2FuKCk7XG4gICAgICBzd2l0Y2ggKF9zY2FubmVyLmdldFRva2VuRXJyb3IoKSkge1xuICAgICAgICBjYXNlIDQ6XG4gICAgICAgICAgaGFuZGxlRXJyb3IoXG4gICAgICAgICAgICAxNFxuICAgICAgICAgICAgLyogUGFyc2VFcnJvckNvZGUuSW52YWxpZFVuaWNvZGUgKi9cbiAgICAgICAgICApO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlIDU6XG4gICAgICAgICAgaGFuZGxlRXJyb3IoXG4gICAgICAgICAgICAxNVxuICAgICAgICAgICAgLyogUGFyc2VFcnJvckNvZGUuSW52YWxpZEVzY2FwZUNoYXJhY3RlciAqL1xuICAgICAgICAgICk7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgMzpcbiAgICAgICAgICBoYW5kbGVFcnJvcihcbiAgICAgICAgICAgIDEzXG4gICAgICAgICAgICAvKiBQYXJzZUVycm9yQ29kZS5VbmV4cGVjdGVkRW5kT2ZOdW1iZXIgKi9cbiAgICAgICAgICApO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlIDE6XG4gICAgICAgICAgaWYgKCFkaXNhbGxvd0NvbW1lbnRzKSB7XG4gICAgICAgICAgICBoYW5kbGVFcnJvcihcbiAgICAgICAgICAgICAgMTFcbiAgICAgICAgICAgICAgLyogUGFyc2VFcnJvckNvZGUuVW5leHBlY3RlZEVuZE9mQ29tbWVudCAqL1xuICAgICAgICAgICAgKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgMjpcbiAgICAgICAgICBoYW5kbGVFcnJvcihcbiAgICAgICAgICAgIDEyXG4gICAgICAgICAgICAvKiBQYXJzZUVycm9yQ29kZS5VbmV4cGVjdGVkRW5kT2ZTdHJpbmcgKi9cbiAgICAgICAgICApO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlIDY6XG4gICAgICAgICAgaGFuZGxlRXJyb3IoXG4gICAgICAgICAgICAxNlxuICAgICAgICAgICAgLyogUGFyc2VFcnJvckNvZGUuSW52YWxpZENoYXJhY3RlciAqL1xuICAgICAgICAgICk7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgICBzd2l0Y2ggKHRva2VuKSB7XG4gICAgICAgIGNhc2UgMTI6XG4gICAgICAgIGNhc2UgMTM6XG4gICAgICAgICAgaWYgKGRpc2FsbG93Q29tbWVudHMpIHtcbiAgICAgICAgICAgIGhhbmRsZUVycm9yKFxuICAgICAgICAgICAgICAxMFxuICAgICAgICAgICAgICAvKiBQYXJzZUVycm9yQ29kZS5JbnZhbGlkQ29tbWVudFRva2VuICovXG4gICAgICAgICAgICApO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBvbkNvbW1lbnQoKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgMTY6XG4gICAgICAgICAgaGFuZGxlRXJyb3IoXG4gICAgICAgICAgICAxXG4gICAgICAgICAgICAvKiBQYXJzZUVycm9yQ29kZS5JbnZhbGlkU3ltYm9sICovXG4gICAgICAgICAgKTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSAxNTpcbiAgICAgICAgY2FzZSAxNDpcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICByZXR1cm4gdG9rZW47XG4gICAgICB9XG4gICAgfVxuICB9XG4gIGZ1bmN0aW9uIGhhbmRsZUVycm9yKGVycm9yLCBza2lwVW50aWxBZnRlciA9IFtdLCBza2lwVW50aWwgPSBbXSkge1xuICAgIG9uRXJyb3IoZXJyb3IpO1xuICAgIGlmIChza2lwVW50aWxBZnRlci5sZW5ndGggKyBza2lwVW50aWwubGVuZ3RoID4gMCkge1xuICAgICAgbGV0IHRva2VuID0gX3NjYW5uZXIuZ2V0VG9rZW4oKTtcbiAgICAgIHdoaWxlICh0b2tlbiAhPT0gMTcpIHtcbiAgICAgICAgaWYgKHNraXBVbnRpbEFmdGVyLmluZGV4T2YodG9rZW4pICE9PSAtMSkge1xuICAgICAgICAgIHNjYW5OZXh0KCk7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH0gZWxzZSBpZiAoc2tpcFVudGlsLmluZGV4T2YodG9rZW4pICE9PSAtMSkge1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICAgIHRva2VuID0gc2Nhbk5leHQoKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgZnVuY3Rpb24gcGFyc2VTdHJpbmcoaXNWYWx1ZSkge1xuICAgIGNvbnN0IHZhbHVlID0gX3NjYW5uZXIuZ2V0VG9rZW5WYWx1ZSgpO1xuICAgIGlmIChpc1ZhbHVlKSB7XG4gICAgICBvbkxpdGVyYWxWYWx1ZSh2YWx1ZSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIG9uT2JqZWN0UHJvcGVydHkodmFsdWUpO1xuICAgICAgX2pzb25QYXRoLnB1c2godmFsdWUpO1xuICAgIH1cbiAgICBzY2FuTmV4dCgpO1xuICAgIHJldHVybiB0cnVlO1xuICB9XG4gIGZ1bmN0aW9uIHBhcnNlTGl0ZXJhbCgpIHtcbiAgICBzd2l0Y2ggKF9zY2FubmVyLmdldFRva2VuKCkpIHtcbiAgICAgIGNhc2UgMTE6XG4gICAgICAgIGNvbnN0IHRva2VuVmFsdWUgPSBfc2Nhbm5lci5nZXRUb2tlblZhbHVlKCk7XG4gICAgICAgIGxldCB2YWx1ZSA9IE51bWJlcih0b2tlblZhbHVlKTtcbiAgICAgICAgaWYgKGlzTmFOKHZhbHVlKSkge1xuICAgICAgICAgIGhhbmRsZUVycm9yKFxuICAgICAgICAgICAgMlxuICAgICAgICAgICAgLyogUGFyc2VFcnJvckNvZGUuSW52YWxpZE51bWJlckZvcm1hdCAqL1xuICAgICAgICAgICk7XG4gICAgICAgICAgdmFsdWUgPSAwO1xuICAgICAgICB9XG4gICAgICAgIG9uTGl0ZXJhbFZhbHVlKHZhbHVlKTtcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlIDc6XG4gICAgICAgIG9uTGl0ZXJhbFZhbHVlKG51bGwpO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgODpcbiAgICAgICAgb25MaXRlcmFsVmFsdWUodHJ1ZSk7XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSA5OlxuICAgICAgICBvbkxpdGVyYWxWYWx1ZShmYWxzZSk7XG4gICAgICAgIGJyZWFrO1xuICAgICAgZGVmYXVsdDpcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICBzY2FuTmV4dCgpO1xuICAgIHJldHVybiB0cnVlO1xuICB9XG4gIGZ1bmN0aW9uIHBhcnNlUHJvcGVydHkoKSB7XG4gICAgaWYgKF9zY2FubmVyLmdldFRva2VuKCkgIT09IDEwKSB7XG4gICAgICBoYW5kbGVFcnJvcigzLCBbXSwgW1xuICAgICAgICAyLFxuICAgICAgICA1XG4gICAgICAgIC8qIFN5bnRheEtpbmQuQ29tbWFUb2tlbiAqL1xuICAgICAgXSk7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIHBhcnNlU3RyaW5nKGZhbHNlKTtcbiAgICBpZiAoX3NjYW5uZXIuZ2V0VG9rZW4oKSA9PT0gNikge1xuICAgICAgb25TZXBhcmF0b3IoXCI6XCIpO1xuICAgICAgc2Nhbk5leHQoKTtcbiAgICAgIGlmICghcGFyc2VWYWx1ZSgpKSB7XG4gICAgICAgIGhhbmRsZUVycm9yKDQsIFtdLCBbXG4gICAgICAgICAgMixcbiAgICAgICAgICA1XG4gICAgICAgICAgLyogU3ludGF4S2luZC5Db21tYVRva2VuICovXG4gICAgICAgIF0pO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBoYW5kbGVFcnJvcig1LCBbXSwgW1xuICAgICAgICAyLFxuICAgICAgICA1XG4gICAgICAgIC8qIFN5bnRheEtpbmQuQ29tbWFUb2tlbiAqL1xuICAgICAgXSk7XG4gICAgfVxuICAgIF9qc29uUGF0aC5wb3AoKTtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuICBmdW5jdGlvbiBwYXJzZU9iamVjdCgpIHtcbiAgICBvbk9iamVjdEJlZ2luKCk7XG4gICAgc2Nhbk5leHQoKTtcbiAgICBsZXQgbmVlZHNDb21tYSA9IGZhbHNlO1xuICAgIHdoaWxlIChfc2Nhbm5lci5nZXRUb2tlbigpICE9PSAyICYmIF9zY2FubmVyLmdldFRva2VuKCkgIT09IDE3KSB7XG4gICAgICBpZiAoX3NjYW5uZXIuZ2V0VG9rZW4oKSA9PT0gNSkge1xuICAgICAgICBpZiAoIW5lZWRzQ29tbWEpIHtcbiAgICAgICAgICBoYW5kbGVFcnJvcig0LCBbXSwgW10pO1xuICAgICAgICB9XG4gICAgICAgIG9uU2VwYXJhdG9yKFwiLFwiKTtcbiAgICAgICAgc2Nhbk5leHQoKTtcbiAgICAgICAgaWYgKF9zY2FubmVyLmdldFRva2VuKCkgPT09IDIgJiYgYWxsb3dUcmFpbGluZ0NvbW1hKSB7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSBpZiAobmVlZHNDb21tYSkge1xuICAgICAgICBoYW5kbGVFcnJvcig2LCBbXSwgW10pO1xuICAgICAgfVxuICAgICAgaWYgKCFwYXJzZVByb3BlcnR5KCkpIHtcbiAgICAgICAgaGFuZGxlRXJyb3IoNCwgW10sIFtcbiAgICAgICAgICAyLFxuICAgICAgICAgIDVcbiAgICAgICAgICAvKiBTeW50YXhLaW5kLkNvbW1hVG9rZW4gKi9cbiAgICAgICAgXSk7XG4gICAgICB9XG4gICAgICBuZWVkc0NvbW1hID0gdHJ1ZTtcbiAgICB9XG4gICAgb25PYmplY3RFbmQoKTtcbiAgICBpZiAoX3NjYW5uZXIuZ2V0VG9rZW4oKSAhPT0gMikge1xuICAgICAgaGFuZGxlRXJyb3IoNywgW1xuICAgICAgICAyXG4gICAgICAgIC8qIFN5bnRheEtpbmQuQ2xvc2VCcmFjZVRva2VuICovXG4gICAgICBdLCBbXSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHNjYW5OZXh0KCk7XG4gICAgfVxuICAgIHJldHVybiB0cnVlO1xuICB9XG4gIGZ1bmN0aW9uIHBhcnNlQXJyYXkoKSB7XG4gICAgb25BcnJheUJlZ2luKCk7XG4gICAgc2Nhbk5leHQoKTtcbiAgICBsZXQgaXNGaXJzdEVsZW1lbnQgPSB0cnVlO1xuICAgIGxldCBuZWVkc0NvbW1hID0gZmFsc2U7XG4gICAgd2hpbGUgKF9zY2FubmVyLmdldFRva2VuKCkgIT09IDQgJiYgX3NjYW5uZXIuZ2V0VG9rZW4oKSAhPT0gMTcpIHtcbiAgICAgIGlmIChfc2Nhbm5lci5nZXRUb2tlbigpID09PSA1KSB7XG4gICAgICAgIGlmICghbmVlZHNDb21tYSkge1xuICAgICAgICAgIGhhbmRsZUVycm9yKDQsIFtdLCBbXSk7XG4gICAgICAgIH1cbiAgICAgICAgb25TZXBhcmF0b3IoXCIsXCIpO1xuICAgICAgICBzY2FuTmV4dCgpO1xuICAgICAgICBpZiAoX3NjYW5uZXIuZ2V0VG9rZW4oKSA9PT0gNCAmJiBhbGxvd1RyYWlsaW5nQ29tbWEpIHtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIGlmIChuZWVkc0NvbW1hKSB7XG4gICAgICAgIGhhbmRsZUVycm9yKDYsIFtdLCBbXSk7XG4gICAgICB9XG4gICAgICBpZiAoaXNGaXJzdEVsZW1lbnQpIHtcbiAgICAgICAgX2pzb25QYXRoLnB1c2goMCk7XG4gICAgICAgIGlzRmlyc3RFbGVtZW50ID0gZmFsc2U7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBfanNvblBhdGhbX2pzb25QYXRoLmxlbmd0aCAtIDFdKys7XG4gICAgICB9XG4gICAgICBpZiAoIXBhcnNlVmFsdWUoKSkge1xuICAgICAgICBoYW5kbGVFcnJvcig0LCBbXSwgW1xuICAgICAgICAgIDQsXG4gICAgICAgICAgNVxuICAgICAgICAgIC8qIFN5bnRheEtpbmQuQ29tbWFUb2tlbiAqL1xuICAgICAgICBdKTtcbiAgICAgIH1cbiAgICAgIG5lZWRzQ29tbWEgPSB0cnVlO1xuICAgIH1cbiAgICBvbkFycmF5RW5kKCk7XG4gICAgaWYgKCFpc0ZpcnN0RWxlbWVudCkge1xuICAgICAgX2pzb25QYXRoLnBvcCgpO1xuICAgIH1cbiAgICBpZiAoX3NjYW5uZXIuZ2V0VG9rZW4oKSAhPT0gNCkge1xuICAgICAgaGFuZGxlRXJyb3IoOCwgW1xuICAgICAgICA0XG4gICAgICAgIC8qIFN5bnRheEtpbmQuQ2xvc2VCcmFja2V0VG9rZW4gKi9cbiAgICAgIF0sIFtdKTtcbiAgICB9IGVsc2Uge1xuICAgICAgc2Nhbk5leHQoKTtcbiAgICB9XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cbiAgZnVuY3Rpb24gcGFyc2VWYWx1ZSgpIHtcbiAgICBzd2l0Y2ggKF9zY2FubmVyLmdldFRva2VuKCkpIHtcbiAgICAgIGNhc2UgMzpcbiAgICAgICAgcmV0dXJuIHBhcnNlQXJyYXkoKTtcbiAgICAgIGNhc2UgMTpcbiAgICAgICAgcmV0dXJuIHBhcnNlT2JqZWN0KCk7XG4gICAgICBjYXNlIDEwOlxuICAgICAgICByZXR1cm4gcGFyc2VTdHJpbmcodHJ1ZSk7XG4gICAgICBkZWZhdWx0OlxuICAgICAgICByZXR1cm4gcGFyc2VMaXRlcmFsKCk7XG4gICAgfVxuICB9XG4gIHNjYW5OZXh0KCk7XG4gIGlmIChfc2Nhbm5lci5nZXRUb2tlbigpID09PSAxNykge1xuICAgIGlmIChvcHRpb25zLmFsbG93RW1wdHlDb250ZW50KSB7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gICAgaGFuZGxlRXJyb3IoNCwgW10sIFtdKTtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbiAgaWYgKCFwYXJzZVZhbHVlKCkpIHtcbiAgICBoYW5kbGVFcnJvcig0LCBbXSwgW10pO1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuICBpZiAoX3NjYW5uZXIuZ2V0VG9rZW4oKSAhPT0gMTcpIHtcbiAgICBoYW5kbGVFcnJvcig5LCBbXSwgW10pO1xuICB9XG4gIHJldHVybiB0cnVlO1xufVxuXG4vLyBub2RlX21vZHVsZXMvanNvbmMtcGFyc2VyL2xpYi9lc20vbWFpbi5qc1xudmFyIGNyZWF0ZVNjYW5uZXIyID0gY3JlYXRlU2Nhbm5lcjtcbnZhciBTY2FuRXJyb3I7XG4oZnVuY3Rpb24oU2NhbkVycm9yMikge1xuICBTY2FuRXJyb3IyW1NjYW5FcnJvcjJbXCJOb25lXCJdID0gMF0gPSBcIk5vbmVcIjtcbiAgU2NhbkVycm9yMltTY2FuRXJyb3IyW1wiVW5leHBlY3RlZEVuZE9mQ29tbWVudFwiXSA9IDFdID0gXCJVbmV4cGVjdGVkRW5kT2ZDb21tZW50XCI7XG4gIFNjYW5FcnJvcjJbU2NhbkVycm9yMltcIlVuZXhwZWN0ZWRFbmRPZlN0cmluZ1wiXSA9IDJdID0gXCJVbmV4cGVjdGVkRW5kT2ZTdHJpbmdcIjtcbiAgU2NhbkVycm9yMltTY2FuRXJyb3IyW1wiVW5leHBlY3RlZEVuZE9mTnVtYmVyXCJdID0gM10gPSBcIlVuZXhwZWN0ZWRFbmRPZk51bWJlclwiO1xuICBTY2FuRXJyb3IyW1NjYW5FcnJvcjJbXCJJbnZhbGlkVW5pY29kZVwiXSA9IDRdID0gXCJJbnZhbGlkVW5pY29kZVwiO1xuICBTY2FuRXJyb3IyW1NjYW5FcnJvcjJbXCJJbnZhbGlkRXNjYXBlQ2hhcmFjdGVyXCJdID0gNV0gPSBcIkludmFsaWRFc2NhcGVDaGFyYWN0ZXJcIjtcbiAgU2NhbkVycm9yMltTY2FuRXJyb3IyW1wiSW52YWxpZENoYXJhY3RlclwiXSA9IDZdID0gXCJJbnZhbGlkQ2hhcmFjdGVyXCI7XG59KShTY2FuRXJyb3IgfHwgKFNjYW5FcnJvciA9IHt9KSk7XG52YXIgU3ludGF4S2luZDtcbihmdW5jdGlvbihTeW50YXhLaW5kMikge1xuICBTeW50YXhLaW5kMltTeW50YXhLaW5kMltcIk9wZW5CcmFjZVRva2VuXCJdID0gMV0gPSBcIk9wZW5CcmFjZVRva2VuXCI7XG4gIFN5bnRheEtpbmQyW1N5bnRheEtpbmQyW1wiQ2xvc2VCcmFjZVRva2VuXCJdID0gMl0gPSBcIkNsb3NlQnJhY2VUb2tlblwiO1xuICBTeW50YXhLaW5kMltTeW50YXhLaW5kMltcIk9wZW5CcmFja2V0VG9rZW5cIl0gPSAzXSA9IFwiT3BlbkJyYWNrZXRUb2tlblwiO1xuICBTeW50YXhLaW5kMltTeW50YXhLaW5kMltcIkNsb3NlQnJhY2tldFRva2VuXCJdID0gNF0gPSBcIkNsb3NlQnJhY2tldFRva2VuXCI7XG4gIFN5bnRheEtpbmQyW1N5bnRheEtpbmQyW1wiQ29tbWFUb2tlblwiXSA9IDVdID0gXCJDb21tYVRva2VuXCI7XG4gIFN5bnRheEtpbmQyW1N5bnRheEtpbmQyW1wiQ29sb25Ub2tlblwiXSA9IDZdID0gXCJDb2xvblRva2VuXCI7XG4gIFN5bnRheEtpbmQyW1N5bnRheEtpbmQyW1wiTnVsbEtleXdvcmRcIl0gPSA3XSA9IFwiTnVsbEtleXdvcmRcIjtcbiAgU3ludGF4S2luZDJbU3ludGF4S2luZDJbXCJUcnVlS2V5d29yZFwiXSA9IDhdID0gXCJUcnVlS2V5d29yZFwiO1xuICBTeW50YXhLaW5kMltTeW50YXhLaW5kMltcIkZhbHNlS2V5d29yZFwiXSA9IDldID0gXCJGYWxzZUtleXdvcmRcIjtcbiAgU3ludGF4S2luZDJbU3ludGF4S2luZDJbXCJTdHJpbmdMaXRlcmFsXCJdID0gMTBdID0gXCJTdHJpbmdMaXRlcmFsXCI7XG4gIFN5bnRheEtpbmQyW1N5bnRheEtpbmQyW1wiTnVtZXJpY0xpdGVyYWxcIl0gPSAxMV0gPSBcIk51bWVyaWNMaXRlcmFsXCI7XG4gIFN5bnRheEtpbmQyW1N5bnRheEtpbmQyW1wiTGluZUNvbW1lbnRUcml2aWFcIl0gPSAxMl0gPSBcIkxpbmVDb21tZW50VHJpdmlhXCI7XG4gIFN5bnRheEtpbmQyW1N5bnRheEtpbmQyW1wiQmxvY2tDb21tZW50VHJpdmlhXCJdID0gMTNdID0gXCJCbG9ja0NvbW1lbnRUcml2aWFcIjtcbiAgU3ludGF4S2luZDJbU3ludGF4S2luZDJbXCJMaW5lQnJlYWtUcml2aWFcIl0gPSAxNF0gPSBcIkxpbmVCcmVha1RyaXZpYVwiO1xuICBTeW50YXhLaW5kMltTeW50YXhLaW5kMltcIlRyaXZpYVwiXSA9IDE1XSA9IFwiVHJpdmlhXCI7XG4gIFN5bnRheEtpbmQyW1N5bnRheEtpbmQyW1wiVW5rbm93blwiXSA9IDE2XSA9IFwiVW5rbm93blwiO1xuICBTeW50YXhLaW5kMltTeW50YXhLaW5kMltcIkVPRlwiXSA9IDE3XSA9IFwiRU9GXCI7XG59KShTeW50YXhLaW5kIHx8IChTeW50YXhLaW5kID0ge30pKTtcbnZhciBwYXJzZTIgPSBwYXJzZTtcbnZhciBmaW5kTm9kZUF0T2Zmc2V0MiA9IGZpbmROb2RlQXRPZmZzZXQ7XG52YXIgZ2V0Tm9kZVBhdGgyID0gZ2V0Tm9kZVBhdGg7XG52YXIgZ2V0Tm9kZVZhbHVlMiA9IGdldE5vZGVWYWx1ZTtcbnZhciBQYXJzZUVycm9yQ29kZTtcbihmdW5jdGlvbihQYXJzZUVycm9yQ29kZTIpIHtcbiAgUGFyc2VFcnJvckNvZGUyW1BhcnNlRXJyb3JDb2RlMltcIkludmFsaWRTeW1ib2xcIl0gPSAxXSA9IFwiSW52YWxpZFN5bWJvbFwiO1xuICBQYXJzZUVycm9yQ29kZTJbUGFyc2VFcnJvckNvZGUyW1wiSW52YWxpZE51bWJlckZvcm1hdFwiXSA9IDJdID0gXCJJbnZhbGlkTnVtYmVyRm9ybWF0XCI7XG4gIFBhcnNlRXJyb3JDb2RlMltQYXJzZUVycm9yQ29kZTJbXCJQcm9wZXJ0eU5hbWVFeHBlY3RlZFwiXSA9IDNdID0gXCJQcm9wZXJ0eU5hbWVFeHBlY3RlZFwiO1xuICBQYXJzZUVycm9yQ29kZTJbUGFyc2VFcnJvckNvZGUyW1wiVmFsdWVFeHBlY3RlZFwiXSA9IDRdID0gXCJWYWx1ZUV4cGVjdGVkXCI7XG4gIFBhcnNlRXJyb3JDb2RlMltQYXJzZUVycm9yQ29kZTJbXCJDb2xvbkV4cGVjdGVkXCJdID0gNV0gPSBcIkNvbG9uRXhwZWN0ZWRcIjtcbiAgUGFyc2VFcnJvckNvZGUyW1BhcnNlRXJyb3JDb2RlMltcIkNvbW1hRXhwZWN0ZWRcIl0gPSA2XSA9IFwiQ29tbWFFeHBlY3RlZFwiO1xuICBQYXJzZUVycm9yQ29kZTJbUGFyc2VFcnJvckNvZGUyW1wiQ2xvc2VCcmFjZUV4cGVjdGVkXCJdID0gN10gPSBcIkNsb3NlQnJhY2VFeHBlY3RlZFwiO1xuICBQYXJzZUVycm9yQ29kZTJbUGFyc2VFcnJvckNvZGUyW1wiQ2xvc2VCcmFja2V0RXhwZWN0ZWRcIl0gPSA4XSA9IFwiQ2xvc2VCcmFja2V0RXhwZWN0ZWRcIjtcbiAgUGFyc2VFcnJvckNvZGUyW1BhcnNlRXJyb3JDb2RlMltcIkVuZE9mRmlsZUV4cGVjdGVkXCJdID0gOV0gPSBcIkVuZE9mRmlsZUV4cGVjdGVkXCI7XG4gIFBhcnNlRXJyb3JDb2RlMltQYXJzZUVycm9yQ29kZTJbXCJJbnZhbGlkQ29tbWVudFRva2VuXCJdID0gMTBdID0gXCJJbnZhbGlkQ29tbWVudFRva2VuXCI7XG4gIFBhcnNlRXJyb3JDb2RlMltQYXJzZUVycm9yQ29kZTJbXCJVbmV4cGVjdGVkRW5kT2ZDb21tZW50XCJdID0gMTFdID0gXCJVbmV4cGVjdGVkRW5kT2ZDb21tZW50XCI7XG4gIFBhcnNlRXJyb3JDb2RlMltQYXJzZUVycm9yQ29kZTJbXCJVbmV4cGVjdGVkRW5kT2ZTdHJpbmdcIl0gPSAxMl0gPSBcIlVuZXhwZWN0ZWRFbmRPZlN0cmluZ1wiO1xuICBQYXJzZUVycm9yQ29kZTJbUGFyc2VFcnJvckNvZGUyW1wiVW5leHBlY3RlZEVuZE9mTnVtYmVyXCJdID0gMTNdID0gXCJVbmV4cGVjdGVkRW5kT2ZOdW1iZXJcIjtcbiAgUGFyc2VFcnJvckNvZGUyW1BhcnNlRXJyb3JDb2RlMltcIkludmFsaWRVbmljb2RlXCJdID0gMTRdID0gXCJJbnZhbGlkVW5pY29kZVwiO1xuICBQYXJzZUVycm9yQ29kZTJbUGFyc2VFcnJvckNvZGUyW1wiSW52YWxpZEVzY2FwZUNoYXJhY3RlclwiXSA9IDE1XSA9IFwiSW52YWxpZEVzY2FwZUNoYXJhY3RlclwiO1xuICBQYXJzZUVycm9yQ29kZTJbUGFyc2VFcnJvckNvZGUyW1wiSW52YWxpZENoYXJhY3RlclwiXSA9IDE2XSA9IFwiSW52YWxpZENoYXJhY3RlclwiO1xufSkoUGFyc2VFcnJvckNvZGUgfHwgKFBhcnNlRXJyb3JDb2RlID0ge30pKTtcbmZ1bmN0aW9uIGZvcm1hdDIoZG9jdW1lbnRUZXh0LCByYW5nZSwgb3B0aW9ucykge1xuICByZXR1cm4gZm9ybWF0KGRvY3VtZW50VGV4dCwgcmFuZ2UsIG9wdGlvbnMpO1xufVxuXG4vLyBub2RlX21vZHVsZXMvdnNjb2RlLWpzb24tbGFuZ3VhZ2VzZXJ2aWNlL2xpYi9lc20vdXRpbHMvb2JqZWN0cy5qc1xuZnVuY3Rpb24gZXF1YWxzKG9uZSwgb3RoZXIpIHtcbiAgaWYgKG9uZSA9PT0gb3RoZXIpIHtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuICBpZiAob25lID09PSBudWxsIHx8IG9uZSA9PT0gdm9pZCAwIHx8IG90aGVyID09PSBudWxsIHx8IG90aGVyID09PSB2b2lkIDApIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbiAgaWYgKHR5cGVvZiBvbmUgIT09IHR5cGVvZiBvdGhlcikge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuICBpZiAodHlwZW9mIG9uZSAhPT0gXCJvYmplY3RcIikge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuICBpZiAoQXJyYXkuaXNBcnJheShvbmUpICE9PSBBcnJheS5pc0FycmF5KG90aGVyKSkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuICBsZXQgaSwga2V5O1xuICBpZiAoQXJyYXkuaXNBcnJheShvbmUpKSB7XG4gICAgaWYgKG9uZS5sZW5ndGggIT09IG90aGVyLmxlbmd0aCkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICBmb3IgKGkgPSAwOyBpIDwgb25lLmxlbmd0aDsgaSsrKSB7XG4gICAgICBpZiAoIWVxdWFscyhvbmVbaV0sIG90aGVyW2ldKSkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIGNvbnN0IG9uZUtleXMgPSBbXTtcbiAgICBmb3IgKGtleSBpbiBvbmUpIHtcbiAgICAgIG9uZUtleXMucHVzaChrZXkpO1xuICAgIH1cbiAgICBvbmVLZXlzLnNvcnQoKTtcbiAgICBjb25zdCBvdGhlcktleXMgPSBbXTtcbiAgICBmb3IgKGtleSBpbiBvdGhlcikge1xuICAgICAgb3RoZXJLZXlzLnB1c2goa2V5KTtcbiAgICB9XG4gICAgb3RoZXJLZXlzLnNvcnQoKTtcbiAgICBpZiAoIWVxdWFscyhvbmVLZXlzLCBvdGhlcktleXMpKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIGZvciAoaSA9IDA7IGkgPCBvbmVLZXlzLmxlbmd0aDsgaSsrKSB7XG4gICAgICBpZiAoIWVxdWFscyhvbmVbb25lS2V5c1tpXV0sIG90aGVyW29uZUtleXNbaV1dKSkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG4gICAgfVxuICB9XG4gIHJldHVybiB0cnVlO1xufVxuZnVuY3Rpb24gaXNOdW1iZXIodmFsKSB7XG4gIHJldHVybiB0eXBlb2YgdmFsID09PSBcIm51bWJlclwiO1xufVxuZnVuY3Rpb24gaXNEZWZpbmVkKHZhbCkge1xuICByZXR1cm4gdHlwZW9mIHZhbCAhPT0gXCJ1bmRlZmluZWRcIjtcbn1cbmZ1bmN0aW9uIGlzQm9vbGVhbih2YWwpIHtcbiAgcmV0dXJuIHR5cGVvZiB2YWwgPT09IFwiYm9vbGVhblwiO1xufVxuZnVuY3Rpb24gaXNTdHJpbmcodmFsKSB7XG4gIHJldHVybiB0eXBlb2YgdmFsID09PSBcInN0cmluZ1wiO1xufVxuZnVuY3Rpb24gaXNPYmplY3QodmFsKSB7XG4gIHJldHVybiB0eXBlb2YgdmFsID09PSBcIm9iamVjdFwiICYmIHZhbCAhPT0gbnVsbCAmJiAhQXJyYXkuaXNBcnJheSh2YWwpO1xufVxuXG4vLyBub2RlX21vZHVsZXMvdnNjb2RlLWpzb24tbGFuZ3VhZ2VzZXJ2aWNlL2xpYi9lc20vdXRpbHMvc3RyaW5ncy5qc1xuZnVuY3Rpb24gc3RhcnRzV2l0aChoYXlzdGFjaywgbmVlZGxlKSB7XG4gIGlmIChoYXlzdGFjay5sZW5ndGggPCBuZWVkbGUubGVuZ3RoKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG4gIGZvciAobGV0IGkgPSAwOyBpIDwgbmVlZGxlLmxlbmd0aDsgaSsrKSB7XG4gICAgaWYgKGhheXN0YWNrW2ldICE9PSBuZWVkbGVbaV0pIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHRydWU7XG59XG5mdW5jdGlvbiBlbmRzV2l0aChoYXlzdGFjaywgbmVlZGxlKSB7XG4gIGNvbnN0IGRpZmYgPSBoYXlzdGFjay5sZW5ndGggLSBuZWVkbGUubGVuZ3RoO1xuICBpZiAoZGlmZiA+IDApIHtcbiAgICByZXR1cm4gaGF5c3RhY2subGFzdEluZGV4T2YobmVlZGxlKSA9PT0gZGlmZjtcbiAgfSBlbHNlIGlmIChkaWZmID09PSAwKSB7XG4gICAgcmV0dXJuIGhheXN0YWNrID09PSBuZWVkbGU7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG59XG5mdW5jdGlvbiBleHRlbmRlZFJlZ0V4cChwYXR0ZXJuKSB7XG4gIGxldCBmbGFncyA9IFwiXCI7XG4gIGlmIChzdGFydHNXaXRoKHBhdHRlcm4sIFwiKD9pKVwiKSkge1xuICAgIHBhdHRlcm4gPSBwYXR0ZXJuLnN1YnN0cmluZyg0KTtcbiAgICBmbGFncyA9IFwiaVwiO1xuICB9XG4gIHRyeSB7XG4gICAgcmV0dXJuIG5ldyBSZWdFeHAocGF0dGVybiwgZmxhZ3MgKyBcInVcIik7XG4gIH0gY2F0Y2ggKGUpIHtcbiAgICB0cnkge1xuICAgICAgcmV0dXJuIG5ldyBSZWdFeHAocGF0dGVybiwgZmxhZ3MpO1xuICAgIH0gY2F0Y2ggKGUyKSB7XG4gICAgICByZXR1cm4gdm9pZCAwO1xuICAgIH1cbiAgfVxufVxuZnVuY3Rpb24gc3RyaW5nTGVuZ3RoKHN0cikge1xuICBsZXQgY291bnQgPSAwO1xuICBmb3IgKGxldCBpID0gMDsgaSA8IHN0ci5sZW5ndGg7IGkrKykge1xuICAgIGNvdW50Kys7XG4gICAgY29uc3QgY29kZSA9IHN0ci5jaGFyQ29kZUF0KGkpO1xuICAgIGlmICg1NTI5NiA8PSBjb2RlICYmIGNvZGUgPD0gNTYzMTkpIHtcbiAgICAgIGkrKztcbiAgICB9XG4gIH1cbiAgcmV0dXJuIGNvdW50O1xufVxuXG4vLyBub2RlX21vZHVsZXMvdnNjb2RlLWxhbmd1YWdlc2VydmVyLXR5cGVzL2xpYi9lc20vbWFpbi5qc1xudmFyIERvY3VtZW50VXJpO1xuKGZ1bmN0aW9uKERvY3VtZW50VXJpMikge1xuICBmdW5jdGlvbiBpcyh2YWx1ZSkge1xuICAgIHJldHVybiB0eXBlb2YgdmFsdWUgPT09IFwic3RyaW5nXCI7XG4gIH1cbiAgRG9jdW1lbnRVcmkyLmlzID0gaXM7XG59KShEb2N1bWVudFVyaSB8fCAoRG9jdW1lbnRVcmkgPSB7fSkpO1xudmFyIFVSSTtcbihmdW5jdGlvbihVUkkzKSB7XG4gIGZ1bmN0aW9uIGlzKHZhbHVlKSB7XG4gICAgcmV0dXJuIHR5cGVvZiB2YWx1ZSA9PT0gXCJzdHJpbmdcIjtcbiAgfVxuICBVUkkzLmlzID0gaXM7XG59KShVUkkgfHwgKFVSSSA9IHt9KSk7XG52YXIgaW50ZWdlcjtcbihmdW5jdGlvbihpbnRlZ2VyMikge1xuICBpbnRlZ2VyMi5NSU5fVkFMVUUgPSAtMjE0NzQ4MzY0ODtcbiAgaW50ZWdlcjIuTUFYX1ZBTFVFID0gMjE0NzQ4MzY0NztcbiAgZnVuY3Rpb24gaXModmFsdWUpIHtcbiAgICByZXR1cm4gdHlwZW9mIHZhbHVlID09PSBcIm51bWJlclwiICYmIGludGVnZXIyLk1JTl9WQUxVRSA8PSB2YWx1ZSAmJiB2YWx1ZSA8PSBpbnRlZ2VyMi5NQVhfVkFMVUU7XG4gIH1cbiAgaW50ZWdlcjIuaXMgPSBpcztcbn0pKGludGVnZXIgfHwgKGludGVnZXIgPSB7fSkpO1xudmFyIHVpbnRlZ2VyO1xuKGZ1bmN0aW9uKHVpbnRlZ2VyMikge1xuICB1aW50ZWdlcjIuTUlOX1ZBTFVFID0gMDtcbiAgdWludGVnZXIyLk1BWF9WQUxVRSA9IDIxNDc0ODM2NDc7XG4gIGZ1bmN0aW9uIGlzKHZhbHVlKSB7XG4gICAgcmV0dXJuIHR5cGVvZiB2YWx1ZSA9PT0gXCJudW1iZXJcIiAmJiB1aW50ZWdlcjIuTUlOX1ZBTFVFIDw9IHZhbHVlICYmIHZhbHVlIDw9IHVpbnRlZ2VyMi5NQVhfVkFMVUU7XG4gIH1cbiAgdWludGVnZXIyLmlzID0gaXM7XG59KSh1aW50ZWdlciB8fCAodWludGVnZXIgPSB7fSkpO1xudmFyIFBvc2l0aW9uO1xuKGZ1bmN0aW9uKFBvc2l0aW9uMikge1xuICBmdW5jdGlvbiBjcmVhdGUobGluZSwgY2hhcmFjdGVyKSB7XG4gICAgaWYgKGxpbmUgPT09IE51bWJlci5NQVhfVkFMVUUpIHtcbiAgICAgIGxpbmUgPSB1aW50ZWdlci5NQVhfVkFMVUU7XG4gICAgfVxuICAgIGlmIChjaGFyYWN0ZXIgPT09IE51bWJlci5NQVhfVkFMVUUpIHtcbiAgICAgIGNoYXJhY3RlciA9IHVpbnRlZ2VyLk1BWF9WQUxVRTtcbiAgICB9XG4gICAgcmV0dXJuIHsgbGluZSwgY2hhcmFjdGVyIH07XG4gIH1cbiAgUG9zaXRpb24yLmNyZWF0ZSA9IGNyZWF0ZTtcbiAgZnVuY3Rpb24gaXModmFsdWUpIHtcbiAgICBsZXQgY2FuZGlkYXRlID0gdmFsdWU7XG4gICAgcmV0dXJuIElzLm9iamVjdExpdGVyYWwoY2FuZGlkYXRlKSAmJiBJcy51aW50ZWdlcihjYW5kaWRhdGUubGluZSkgJiYgSXMudWludGVnZXIoY2FuZGlkYXRlLmNoYXJhY3Rlcik7XG4gIH1cbiAgUG9zaXRpb24yLmlzID0gaXM7XG59KShQb3NpdGlvbiB8fCAoUG9zaXRpb24gPSB7fSkpO1xudmFyIFJhbmdlO1xuKGZ1bmN0aW9uKFJhbmdlMikge1xuICBmdW5jdGlvbiBjcmVhdGUob25lLCB0d28sIHRocmVlLCBmb3VyKSB7XG4gICAgaWYgKElzLnVpbnRlZ2VyKG9uZSkgJiYgSXMudWludGVnZXIodHdvKSAmJiBJcy51aW50ZWdlcih0aHJlZSkgJiYgSXMudWludGVnZXIoZm91cikpIHtcbiAgICAgIHJldHVybiB7IHN0YXJ0OiBQb3NpdGlvbi5jcmVhdGUob25lLCB0d28pLCBlbmQ6IFBvc2l0aW9uLmNyZWF0ZSh0aHJlZSwgZm91cikgfTtcbiAgICB9IGVsc2UgaWYgKFBvc2l0aW9uLmlzKG9uZSkgJiYgUG9zaXRpb24uaXModHdvKSkge1xuICAgICAgcmV0dXJuIHsgc3RhcnQ6IG9uZSwgZW5kOiB0d28gfTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKGBSYW5nZSNjcmVhdGUgY2FsbGVkIHdpdGggaW52YWxpZCBhcmd1bWVudHNbJHtvbmV9LCAke3R3b30sICR7dGhyZWV9LCAke2ZvdXJ9XWApO1xuICAgIH1cbiAgfVxuICBSYW5nZTIuY3JlYXRlID0gY3JlYXRlO1xuICBmdW5jdGlvbiBpcyh2YWx1ZSkge1xuICAgIGxldCBjYW5kaWRhdGUgPSB2YWx1ZTtcbiAgICByZXR1cm4gSXMub2JqZWN0TGl0ZXJhbChjYW5kaWRhdGUpICYmIFBvc2l0aW9uLmlzKGNhbmRpZGF0ZS5zdGFydCkgJiYgUG9zaXRpb24uaXMoY2FuZGlkYXRlLmVuZCk7XG4gIH1cbiAgUmFuZ2UyLmlzID0gaXM7XG59KShSYW5nZSB8fCAoUmFuZ2UgPSB7fSkpO1xudmFyIExvY2F0aW9uO1xuKGZ1bmN0aW9uKExvY2F0aW9uMikge1xuICBmdW5jdGlvbiBjcmVhdGUodXJpLCByYW5nZSkge1xuICAgIHJldHVybiB7IHVyaSwgcmFuZ2UgfTtcbiAgfVxuICBMb2NhdGlvbjIuY3JlYXRlID0gY3JlYXRlO1xuICBmdW5jdGlvbiBpcyh2YWx1ZSkge1xuICAgIGxldCBjYW5kaWRhdGUgPSB2YWx1ZTtcbiAgICByZXR1cm4gSXMub2JqZWN0TGl0ZXJhbChjYW5kaWRhdGUpICYmIFJhbmdlLmlzKGNhbmRpZGF0ZS5yYW5nZSkgJiYgKElzLnN0cmluZyhjYW5kaWRhdGUudXJpKSB8fCBJcy51bmRlZmluZWQoY2FuZGlkYXRlLnVyaSkpO1xuICB9XG4gIExvY2F0aW9uMi5pcyA9IGlzO1xufSkoTG9jYXRpb24gfHwgKExvY2F0aW9uID0ge30pKTtcbnZhciBMb2NhdGlvbkxpbms7XG4oZnVuY3Rpb24oTG9jYXRpb25MaW5rMikge1xuICBmdW5jdGlvbiBjcmVhdGUodGFyZ2V0VXJpLCB0YXJnZXRSYW5nZSwgdGFyZ2V0U2VsZWN0aW9uUmFuZ2UsIG9yaWdpblNlbGVjdGlvblJhbmdlKSB7XG4gICAgcmV0dXJuIHsgdGFyZ2V0VXJpLCB0YXJnZXRSYW5nZSwgdGFyZ2V0U2VsZWN0aW9uUmFuZ2UsIG9yaWdpblNlbGVjdGlvblJhbmdlIH07XG4gIH1cbiAgTG9jYXRpb25MaW5rMi5jcmVhdGUgPSBjcmVhdGU7XG4gIGZ1bmN0aW9uIGlzKHZhbHVlKSB7XG4gICAgbGV0IGNhbmRpZGF0ZSA9IHZhbHVlO1xuICAgIHJldHVybiBJcy5vYmplY3RMaXRlcmFsKGNhbmRpZGF0ZSkgJiYgUmFuZ2UuaXMoY2FuZGlkYXRlLnRhcmdldFJhbmdlKSAmJiBJcy5zdHJpbmcoY2FuZGlkYXRlLnRhcmdldFVyaSkgJiYgUmFuZ2UuaXMoY2FuZGlkYXRlLnRhcmdldFNlbGVjdGlvblJhbmdlKSAmJiAoUmFuZ2UuaXMoY2FuZGlkYXRlLm9yaWdpblNlbGVjdGlvblJhbmdlKSB8fCBJcy51bmRlZmluZWQoY2FuZGlkYXRlLm9yaWdpblNlbGVjdGlvblJhbmdlKSk7XG4gIH1cbiAgTG9jYXRpb25MaW5rMi5pcyA9IGlzO1xufSkoTG9jYXRpb25MaW5rIHx8IChMb2NhdGlvbkxpbmsgPSB7fSkpO1xudmFyIENvbG9yO1xuKGZ1bmN0aW9uKENvbG9yMikge1xuICBmdW5jdGlvbiBjcmVhdGUocmVkLCBncmVlbiwgYmx1ZSwgYWxwaGEpIHtcbiAgICByZXR1cm4ge1xuICAgICAgcmVkLFxuICAgICAgZ3JlZW4sXG4gICAgICBibHVlLFxuICAgICAgYWxwaGFcbiAgICB9O1xuICB9XG4gIENvbG9yMi5jcmVhdGUgPSBjcmVhdGU7XG4gIGZ1bmN0aW9uIGlzKHZhbHVlKSB7XG4gICAgY29uc3QgY2FuZGlkYXRlID0gdmFsdWU7XG4gICAgcmV0dXJuIElzLm9iamVjdExpdGVyYWwoY2FuZGlkYXRlKSAmJiBJcy5udW1iZXJSYW5nZShjYW5kaWRhdGUucmVkLCAwLCAxKSAmJiBJcy5udW1iZXJSYW5nZShjYW5kaWRhdGUuZ3JlZW4sIDAsIDEpICYmIElzLm51bWJlclJhbmdlKGNhbmRpZGF0ZS5ibHVlLCAwLCAxKSAmJiBJcy5udW1iZXJSYW5nZShjYW5kaWRhdGUuYWxwaGEsIDAsIDEpO1xuICB9XG4gIENvbG9yMi5pcyA9IGlzO1xufSkoQ29sb3IgfHwgKENvbG9yID0ge30pKTtcbnZhciBDb2xvckluZm9ybWF0aW9uO1xuKGZ1bmN0aW9uKENvbG9ySW5mb3JtYXRpb24yKSB7XG4gIGZ1bmN0aW9uIGNyZWF0ZShyYW5nZSwgY29sb3IpIHtcbiAgICByZXR1cm4ge1xuICAgICAgcmFuZ2UsXG4gICAgICBjb2xvclxuICAgIH07XG4gIH1cbiAgQ29sb3JJbmZvcm1hdGlvbjIuY3JlYXRlID0gY3JlYXRlO1xuICBmdW5jdGlvbiBpcyh2YWx1ZSkge1xuICAgIGNvbnN0IGNhbmRpZGF0ZSA9IHZhbHVlO1xuICAgIHJldHVybiBJcy5vYmplY3RMaXRlcmFsKGNhbmRpZGF0ZSkgJiYgUmFuZ2UuaXMoY2FuZGlkYXRlLnJhbmdlKSAmJiBDb2xvci5pcyhjYW5kaWRhdGUuY29sb3IpO1xuICB9XG4gIENvbG9ySW5mb3JtYXRpb24yLmlzID0gaXM7XG59KShDb2xvckluZm9ybWF0aW9uIHx8IChDb2xvckluZm9ybWF0aW9uID0ge30pKTtcbnZhciBDb2xvclByZXNlbnRhdGlvbjtcbihmdW5jdGlvbihDb2xvclByZXNlbnRhdGlvbjIpIHtcbiAgZnVuY3Rpb24gY3JlYXRlKGxhYmVsLCB0ZXh0RWRpdCwgYWRkaXRpb25hbFRleHRFZGl0cykge1xuICAgIHJldHVybiB7XG4gICAgICBsYWJlbCxcbiAgICAgIHRleHRFZGl0LFxuICAgICAgYWRkaXRpb25hbFRleHRFZGl0c1xuICAgIH07XG4gIH1cbiAgQ29sb3JQcmVzZW50YXRpb24yLmNyZWF0ZSA9IGNyZWF0ZTtcbiAgZnVuY3Rpb24gaXModmFsdWUpIHtcbiAgICBjb25zdCBjYW5kaWRhdGUgPSB2YWx1ZTtcbiAgICByZXR1cm4gSXMub2JqZWN0TGl0ZXJhbChjYW5kaWRhdGUpICYmIElzLnN0cmluZyhjYW5kaWRhdGUubGFiZWwpICYmIChJcy51bmRlZmluZWQoY2FuZGlkYXRlLnRleHRFZGl0KSB8fCBUZXh0RWRpdC5pcyhjYW5kaWRhdGUpKSAmJiAoSXMudW5kZWZpbmVkKGNhbmRpZGF0ZS5hZGRpdGlvbmFsVGV4dEVkaXRzKSB8fCBJcy50eXBlZEFycmF5KGNhbmRpZGF0ZS5hZGRpdGlvbmFsVGV4dEVkaXRzLCBUZXh0RWRpdC5pcykpO1xuICB9XG4gIENvbG9yUHJlc2VudGF0aW9uMi5pcyA9IGlzO1xufSkoQ29sb3JQcmVzZW50YXRpb24gfHwgKENvbG9yUHJlc2VudGF0aW9uID0ge30pKTtcbnZhciBGb2xkaW5nUmFuZ2VLaW5kO1xuKGZ1bmN0aW9uKEZvbGRpbmdSYW5nZUtpbmQyKSB7XG4gIEZvbGRpbmdSYW5nZUtpbmQyLkNvbW1lbnQgPSBcImNvbW1lbnRcIjtcbiAgRm9sZGluZ1JhbmdlS2luZDIuSW1wb3J0cyA9IFwiaW1wb3J0c1wiO1xuICBGb2xkaW5nUmFuZ2VLaW5kMi5SZWdpb24gPSBcInJlZ2lvblwiO1xufSkoRm9sZGluZ1JhbmdlS2luZCB8fCAoRm9sZGluZ1JhbmdlS2luZCA9IHt9KSk7XG52YXIgRm9sZGluZ1JhbmdlO1xuKGZ1bmN0aW9uKEZvbGRpbmdSYW5nZTIpIHtcbiAgZnVuY3Rpb24gY3JlYXRlKHN0YXJ0TGluZSwgZW5kTGluZSwgc3RhcnRDaGFyYWN0ZXIsIGVuZENoYXJhY3Rlciwga2luZCwgY29sbGFwc2VkVGV4dCkge1xuICAgIGNvbnN0IHJlc3VsdCA9IHtcbiAgICAgIHN0YXJ0TGluZSxcbiAgICAgIGVuZExpbmVcbiAgICB9O1xuICAgIGlmIChJcy5kZWZpbmVkKHN0YXJ0Q2hhcmFjdGVyKSkge1xuICAgICAgcmVzdWx0LnN0YXJ0Q2hhcmFjdGVyID0gc3RhcnRDaGFyYWN0ZXI7XG4gICAgfVxuICAgIGlmIChJcy5kZWZpbmVkKGVuZENoYXJhY3RlcikpIHtcbiAgICAgIHJlc3VsdC5lbmRDaGFyYWN0ZXIgPSBlbmRDaGFyYWN0ZXI7XG4gICAgfVxuICAgIGlmIChJcy5kZWZpbmVkKGtpbmQpKSB7XG4gICAgICByZXN1bHQua2luZCA9IGtpbmQ7XG4gICAgfVxuICAgIGlmIChJcy5kZWZpbmVkKGNvbGxhcHNlZFRleHQpKSB7XG4gICAgICByZXN1bHQuY29sbGFwc2VkVGV4dCA9IGNvbGxhcHNlZFRleHQ7XG4gICAgfVxuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cbiAgRm9sZGluZ1JhbmdlMi5jcmVhdGUgPSBjcmVhdGU7XG4gIGZ1bmN0aW9uIGlzKHZhbHVlKSB7XG4gICAgY29uc3QgY2FuZGlkYXRlID0gdmFsdWU7XG4gICAgcmV0dXJuIElzLm9iamVjdExpdGVyYWwoY2FuZGlkYXRlKSAmJiBJcy51aW50ZWdlcihjYW5kaWRhdGUuc3RhcnRMaW5lKSAmJiBJcy51aW50ZWdlcihjYW5kaWRhdGUuc3RhcnRMaW5lKSAmJiAoSXMudW5kZWZpbmVkKGNhbmRpZGF0ZS5zdGFydENoYXJhY3RlcikgfHwgSXMudWludGVnZXIoY2FuZGlkYXRlLnN0YXJ0Q2hhcmFjdGVyKSkgJiYgKElzLnVuZGVmaW5lZChjYW5kaWRhdGUuZW5kQ2hhcmFjdGVyKSB8fCBJcy51aW50ZWdlcihjYW5kaWRhdGUuZW5kQ2hhcmFjdGVyKSkgJiYgKElzLnVuZGVmaW5lZChjYW5kaWRhdGUua2luZCkgfHwgSXMuc3RyaW5nKGNhbmRpZGF0ZS5raW5kKSk7XG4gIH1cbiAgRm9sZGluZ1JhbmdlMi5pcyA9IGlzO1xufSkoRm9sZGluZ1JhbmdlIHx8IChGb2xkaW5nUmFuZ2UgPSB7fSkpO1xudmFyIERpYWdub3N0aWNSZWxhdGVkSW5mb3JtYXRpb247XG4oZnVuY3Rpb24oRGlhZ25vc3RpY1JlbGF0ZWRJbmZvcm1hdGlvbjIpIHtcbiAgZnVuY3Rpb24gY3JlYXRlKGxvY2F0aW9uLCBtZXNzYWdlKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIGxvY2F0aW9uLFxuICAgICAgbWVzc2FnZVxuICAgIH07XG4gIH1cbiAgRGlhZ25vc3RpY1JlbGF0ZWRJbmZvcm1hdGlvbjIuY3JlYXRlID0gY3JlYXRlO1xuICBmdW5jdGlvbiBpcyh2YWx1ZSkge1xuICAgIGxldCBjYW5kaWRhdGUgPSB2YWx1ZTtcbiAgICByZXR1cm4gSXMuZGVmaW5lZChjYW5kaWRhdGUpICYmIExvY2F0aW9uLmlzKGNhbmRpZGF0ZS5sb2NhdGlvbikgJiYgSXMuc3RyaW5nKGNhbmRpZGF0ZS5tZXNzYWdlKTtcbiAgfVxuICBEaWFnbm9zdGljUmVsYXRlZEluZm9ybWF0aW9uMi5pcyA9IGlzO1xufSkoRGlhZ25vc3RpY1JlbGF0ZWRJbmZvcm1hdGlvbiB8fCAoRGlhZ25vc3RpY1JlbGF0ZWRJbmZvcm1hdGlvbiA9IHt9KSk7XG52YXIgRGlhZ25vc3RpY1NldmVyaXR5O1xuKGZ1bmN0aW9uKERpYWdub3N0aWNTZXZlcml0eTIpIHtcbiAgRGlhZ25vc3RpY1NldmVyaXR5Mi5FcnJvciA9IDE7XG4gIERpYWdub3N0aWNTZXZlcml0eTIuV2FybmluZyA9IDI7XG4gIERpYWdub3N0aWNTZXZlcml0eTIuSW5mb3JtYXRpb24gPSAzO1xuICBEaWFnbm9zdGljU2V2ZXJpdHkyLkhpbnQgPSA0O1xufSkoRGlhZ25vc3RpY1NldmVyaXR5IHx8IChEaWFnbm9zdGljU2V2ZXJpdHkgPSB7fSkpO1xudmFyIERpYWdub3N0aWNUYWc7XG4oZnVuY3Rpb24oRGlhZ25vc3RpY1RhZzIpIHtcbiAgRGlhZ25vc3RpY1RhZzIuVW5uZWNlc3NhcnkgPSAxO1xuICBEaWFnbm9zdGljVGFnMi5EZXByZWNhdGVkID0gMjtcbn0pKERpYWdub3N0aWNUYWcgfHwgKERpYWdub3N0aWNUYWcgPSB7fSkpO1xudmFyIENvZGVEZXNjcmlwdGlvbjtcbihmdW5jdGlvbihDb2RlRGVzY3JpcHRpb24yKSB7XG4gIGZ1bmN0aW9uIGlzKHZhbHVlKSB7XG4gICAgY29uc3QgY2FuZGlkYXRlID0gdmFsdWU7XG4gICAgcmV0dXJuIElzLm9iamVjdExpdGVyYWwoY2FuZGlkYXRlKSAmJiBJcy5zdHJpbmcoY2FuZGlkYXRlLmhyZWYpO1xuICB9XG4gIENvZGVEZXNjcmlwdGlvbjIuaXMgPSBpcztcbn0pKENvZGVEZXNjcmlwdGlvbiB8fCAoQ29kZURlc2NyaXB0aW9uID0ge30pKTtcbnZhciBEaWFnbm9zdGljO1xuKGZ1bmN0aW9uKERpYWdub3N0aWMyKSB7XG4gIGZ1bmN0aW9uIGNyZWF0ZShyYW5nZSwgbWVzc2FnZSwgc2V2ZXJpdHksIGNvZGUsIHNvdXJjZSwgcmVsYXRlZEluZm9ybWF0aW9uKSB7XG4gICAgbGV0IHJlc3VsdCA9IHsgcmFuZ2UsIG1lc3NhZ2UgfTtcbiAgICBpZiAoSXMuZGVmaW5lZChzZXZlcml0eSkpIHtcbiAgICAgIHJlc3VsdC5zZXZlcml0eSA9IHNldmVyaXR5O1xuICAgIH1cbiAgICBpZiAoSXMuZGVmaW5lZChjb2RlKSkge1xuICAgICAgcmVzdWx0LmNvZGUgPSBjb2RlO1xuICAgIH1cbiAgICBpZiAoSXMuZGVmaW5lZChzb3VyY2UpKSB7XG4gICAgICByZXN1bHQuc291cmNlID0gc291cmNlO1xuICAgIH1cbiAgICBpZiAoSXMuZGVmaW5lZChyZWxhdGVkSW5mb3JtYXRpb24pKSB7XG4gICAgICByZXN1bHQucmVsYXRlZEluZm9ybWF0aW9uID0gcmVsYXRlZEluZm9ybWF0aW9uO1xuICAgIH1cbiAgICByZXR1cm4gcmVzdWx0O1xuICB9XG4gIERpYWdub3N0aWMyLmNyZWF0ZSA9IGNyZWF0ZTtcbiAgZnVuY3Rpb24gaXModmFsdWUpIHtcbiAgICB2YXIgX2E7XG4gICAgbGV0IGNhbmRpZGF0ZSA9IHZhbHVlO1xuICAgIHJldHVybiBJcy5kZWZpbmVkKGNhbmRpZGF0ZSkgJiYgUmFuZ2UuaXMoY2FuZGlkYXRlLnJhbmdlKSAmJiBJcy5zdHJpbmcoY2FuZGlkYXRlLm1lc3NhZ2UpICYmIChJcy5udW1iZXIoY2FuZGlkYXRlLnNldmVyaXR5KSB8fCBJcy51bmRlZmluZWQoY2FuZGlkYXRlLnNldmVyaXR5KSkgJiYgKElzLmludGVnZXIoY2FuZGlkYXRlLmNvZGUpIHx8IElzLnN0cmluZyhjYW5kaWRhdGUuY29kZSkgfHwgSXMudW5kZWZpbmVkKGNhbmRpZGF0ZS5jb2RlKSkgJiYgKElzLnVuZGVmaW5lZChjYW5kaWRhdGUuY29kZURlc2NyaXB0aW9uKSB8fCBJcy5zdHJpbmcoKF9hID0gY2FuZGlkYXRlLmNvZGVEZXNjcmlwdGlvbikgPT09IG51bGwgfHwgX2EgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9hLmhyZWYpKSAmJiAoSXMuc3RyaW5nKGNhbmRpZGF0ZS5zb3VyY2UpIHx8IElzLnVuZGVmaW5lZChjYW5kaWRhdGUuc291cmNlKSkgJiYgKElzLnVuZGVmaW5lZChjYW5kaWRhdGUucmVsYXRlZEluZm9ybWF0aW9uKSB8fCBJcy50eXBlZEFycmF5KGNhbmRpZGF0ZS5yZWxhdGVkSW5mb3JtYXRpb24sIERpYWdub3N0aWNSZWxhdGVkSW5mb3JtYXRpb24uaXMpKTtcbiAgfVxuICBEaWFnbm9zdGljMi5pcyA9IGlzO1xufSkoRGlhZ25vc3RpYyB8fCAoRGlhZ25vc3RpYyA9IHt9KSk7XG52YXIgQ29tbWFuZDtcbihmdW5jdGlvbihDb21tYW5kMikge1xuICBmdW5jdGlvbiBjcmVhdGUodGl0bGUsIGNvbW1hbmQsIC4uLmFyZ3MpIHtcbiAgICBsZXQgcmVzdWx0ID0geyB0aXRsZSwgY29tbWFuZCB9O1xuICAgIGlmIChJcy5kZWZpbmVkKGFyZ3MpICYmIGFyZ3MubGVuZ3RoID4gMCkge1xuICAgICAgcmVzdWx0LmFyZ3VtZW50cyA9IGFyZ3M7XG4gICAgfVxuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cbiAgQ29tbWFuZDIuY3JlYXRlID0gY3JlYXRlO1xuICBmdW5jdGlvbiBpcyh2YWx1ZSkge1xuICAgIGxldCBjYW5kaWRhdGUgPSB2YWx1ZTtcbiAgICByZXR1cm4gSXMuZGVmaW5lZChjYW5kaWRhdGUpICYmIElzLnN0cmluZyhjYW5kaWRhdGUudGl0bGUpICYmIElzLnN0cmluZyhjYW5kaWRhdGUuY29tbWFuZCk7XG4gIH1cbiAgQ29tbWFuZDIuaXMgPSBpcztcbn0pKENvbW1hbmQgfHwgKENvbW1hbmQgPSB7fSkpO1xudmFyIFRleHRFZGl0O1xuKGZ1bmN0aW9uKFRleHRFZGl0Mikge1xuICBmdW5jdGlvbiByZXBsYWNlKHJhbmdlLCBuZXdUZXh0KSB7XG4gICAgcmV0dXJuIHsgcmFuZ2UsIG5ld1RleHQgfTtcbiAgfVxuICBUZXh0RWRpdDIucmVwbGFjZSA9IHJlcGxhY2U7XG4gIGZ1bmN0aW9uIGluc2VydChwb3NpdGlvbiwgbmV3VGV4dCkge1xuICAgIHJldHVybiB7IHJhbmdlOiB7IHN0YXJ0OiBwb3NpdGlvbiwgZW5kOiBwb3NpdGlvbiB9LCBuZXdUZXh0IH07XG4gIH1cbiAgVGV4dEVkaXQyLmluc2VydCA9IGluc2VydDtcbiAgZnVuY3Rpb24gZGVsKHJhbmdlKSB7XG4gICAgcmV0dXJuIHsgcmFuZ2UsIG5ld1RleHQ6IFwiXCIgfTtcbiAgfVxuICBUZXh0RWRpdDIuZGVsID0gZGVsO1xuICBmdW5jdGlvbiBpcyh2YWx1ZSkge1xuICAgIGNvbnN0IGNhbmRpZGF0ZSA9IHZhbHVlO1xuICAgIHJldHVybiBJcy5vYmplY3RMaXRlcmFsKGNhbmRpZGF0ZSkgJiYgSXMuc3RyaW5nKGNhbmRpZGF0ZS5uZXdUZXh0KSAmJiBSYW5nZS5pcyhjYW5kaWRhdGUucmFuZ2UpO1xuICB9XG4gIFRleHRFZGl0Mi5pcyA9IGlzO1xufSkoVGV4dEVkaXQgfHwgKFRleHRFZGl0ID0ge30pKTtcbnZhciBDaGFuZ2VBbm5vdGF0aW9uO1xuKGZ1bmN0aW9uKENoYW5nZUFubm90YXRpb24yKSB7XG4gIGZ1bmN0aW9uIGNyZWF0ZShsYWJlbCwgbmVlZHNDb25maXJtYXRpb24sIGRlc2NyaXB0aW9uKSB7XG4gICAgY29uc3QgcmVzdWx0ID0geyBsYWJlbCB9O1xuICAgIGlmIChuZWVkc0NvbmZpcm1hdGlvbiAhPT0gdm9pZCAwKSB7XG4gICAgICByZXN1bHQubmVlZHNDb25maXJtYXRpb24gPSBuZWVkc0NvbmZpcm1hdGlvbjtcbiAgICB9XG4gICAgaWYgKGRlc2NyaXB0aW9uICE9PSB2b2lkIDApIHtcbiAgICAgIHJlc3VsdC5kZXNjcmlwdGlvbiA9IGRlc2NyaXB0aW9uO1xuICAgIH1cbiAgICByZXR1cm4gcmVzdWx0O1xuICB9XG4gIENoYW5nZUFubm90YXRpb24yLmNyZWF0ZSA9IGNyZWF0ZTtcbiAgZnVuY3Rpb24gaXModmFsdWUpIHtcbiAgICBjb25zdCBjYW5kaWRhdGUgPSB2YWx1ZTtcbiAgICByZXR1cm4gSXMub2JqZWN0TGl0ZXJhbChjYW5kaWRhdGUpICYmIElzLnN0cmluZyhjYW5kaWRhdGUubGFiZWwpICYmIChJcy5ib29sZWFuKGNhbmRpZGF0ZS5uZWVkc0NvbmZpcm1hdGlvbikgfHwgY2FuZGlkYXRlLm5lZWRzQ29uZmlybWF0aW9uID09PSB2b2lkIDApICYmIChJcy5zdHJpbmcoY2FuZGlkYXRlLmRlc2NyaXB0aW9uKSB8fCBjYW5kaWRhdGUuZGVzY3JpcHRpb24gPT09IHZvaWQgMCk7XG4gIH1cbiAgQ2hhbmdlQW5ub3RhdGlvbjIuaXMgPSBpcztcbn0pKENoYW5nZUFubm90YXRpb24gfHwgKENoYW5nZUFubm90YXRpb24gPSB7fSkpO1xudmFyIENoYW5nZUFubm90YXRpb25JZGVudGlmaWVyO1xuKGZ1bmN0aW9uKENoYW5nZUFubm90YXRpb25JZGVudGlmaWVyMikge1xuICBmdW5jdGlvbiBpcyh2YWx1ZSkge1xuICAgIGNvbnN0IGNhbmRpZGF0ZSA9IHZhbHVlO1xuICAgIHJldHVybiBJcy5zdHJpbmcoY2FuZGlkYXRlKTtcbiAgfVxuICBDaGFuZ2VBbm5vdGF0aW9uSWRlbnRpZmllcjIuaXMgPSBpcztcbn0pKENoYW5nZUFubm90YXRpb25JZGVudGlmaWVyIHx8IChDaGFuZ2VBbm5vdGF0aW9uSWRlbnRpZmllciA9IHt9KSk7XG52YXIgQW5ub3RhdGVkVGV4dEVkaXQ7XG4oZnVuY3Rpb24oQW5ub3RhdGVkVGV4dEVkaXQyKSB7XG4gIGZ1bmN0aW9uIHJlcGxhY2UocmFuZ2UsIG5ld1RleHQsIGFubm90YXRpb24pIHtcbiAgICByZXR1cm4geyByYW5nZSwgbmV3VGV4dCwgYW5ub3RhdGlvbklkOiBhbm5vdGF0aW9uIH07XG4gIH1cbiAgQW5ub3RhdGVkVGV4dEVkaXQyLnJlcGxhY2UgPSByZXBsYWNlO1xuICBmdW5jdGlvbiBpbnNlcnQocG9zaXRpb24sIG5ld1RleHQsIGFubm90YXRpb24pIHtcbiAgICByZXR1cm4geyByYW5nZTogeyBzdGFydDogcG9zaXRpb24sIGVuZDogcG9zaXRpb24gfSwgbmV3VGV4dCwgYW5ub3RhdGlvbklkOiBhbm5vdGF0aW9uIH07XG4gIH1cbiAgQW5ub3RhdGVkVGV4dEVkaXQyLmluc2VydCA9IGluc2VydDtcbiAgZnVuY3Rpb24gZGVsKHJhbmdlLCBhbm5vdGF0aW9uKSB7XG4gICAgcmV0dXJuIHsgcmFuZ2UsIG5ld1RleHQ6IFwiXCIsIGFubm90YXRpb25JZDogYW5ub3RhdGlvbiB9O1xuICB9XG4gIEFubm90YXRlZFRleHRFZGl0Mi5kZWwgPSBkZWw7XG4gIGZ1bmN0aW9uIGlzKHZhbHVlKSB7XG4gICAgY29uc3QgY2FuZGlkYXRlID0gdmFsdWU7XG4gICAgcmV0dXJuIFRleHRFZGl0LmlzKGNhbmRpZGF0ZSkgJiYgKENoYW5nZUFubm90YXRpb24uaXMoY2FuZGlkYXRlLmFubm90YXRpb25JZCkgfHwgQ2hhbmdlQW5ub3RhdGlvbklkZW50aWZpZXIuaXMoY2FuZGlkYXRlLmFubm90YXRpb25JZCkpO1xuICB9XG4gIEFubm90YXRlZFRleHRFZGl0Mi5pcyA9IGlzO1xufSkoQW5ub3RhdGVkVGV4dEVkaXQgfHwgKEFubm90YXRlZFRleHRFZGl0ID0ge30pKTtcbnZhciBUZXh0RG9jdW1lbnRFZGl0O1xuKGZ1bmN0aW9uKFRleHREb2N1bWVudEVkaXQyKSB7XG4gIGZ1bmN0aW9uIGNyZWF0ZSh0ZXh0RG9jdW1lbnQsIGVkaXRzKSB7XG4gICAgcmV0dXJuIHsgdGV4dERvY3VtZW50LCBlZGl0cyB9O1xuICB9XG4gIFRleHREb2N1bWVudEVkaXQyLmNyZWF0ZSA9IGNyZWF0ZTtcbiAgZnVuY3Rpb24gaXModmFsdWUpIHtcbiAgICBsZXQgY2FuZGlkYXRlID0gdmFsdWU7XG4gICAgcmV0dXJuIElzLmRlZmluZWQoY2FuZGlkYXRlKSAmJiBPcHRpb25hbFZlcnNpb25lZFRleHREb2N1bWVudElkZW50aWZpZXIuaXMoY2FuZGlkYXRlLnRleHREb2N1bWVudCkgJiYgQXJyYXkuaXNBcnJheShjYW5kaWRhdGUuZWRpdHMpO1xuICB9XG4gIFRleHREb2N1bWVudEVkaXQyLmlzID0gaXM7XG59KShUZXh0RG9jdW1lbnRFZGl0IHx8IChUZXh0RG9jdW1lbnRFZGl0ID0ge30pKTtcbnZhciBDcmVhdGVGaWxlO1xuKGZ1bmN0aW9uKENyZWF0ZUZpbGUyKSB7XG4gIGZ1bmN0aW9uIGNyZWF0ZSh1cmksIG9wdGlvbnMsIGFubm90YXRpb24pIHtcbiAgICBsZXQgcmVzdWx0ID0ge1xuICAgICAga2luZDogXCJjcmVhdGVcIixcbiAgICAgIHVyaVxuICAgIH07XG4gICAgaWYgKG9wdGlvbnMgIT09IHZvaWQgMCAmJiAob3B0aW9ucy5vdmVyd3JpdGUgIT09IHZvaWQgMCB8fCBvcHRpb25zLmlnbm9yZUlmRXhpc3RzICE9PSB2b2lkIDApKSB7XG4gICAgICByZXN1bHQub3B0aW9ucyA9IG9wdGlvbnM7XG4gICAgfVxuICAgIGlmIChhbm5vdGF0aW9uICE9PSB2b2lkIDApIHtcbiAgICAgIHJlc3VsdC5hbm5vdGF0aW9uSWQgPSBhbm5vdGF0aW9uO1xuICAgIH1cbiAgICByZXR1cm4gcmVzdWx0O1xuICB9XG4gIENyZWF0ZUZpbGUyLmNyZWF0ZSA9IGNyZWF0ZTtcbiAgZnVuY3Rpb24gaXModmFsdWUpIHtcbiAgICBsZXQgY2FuZGlkYXRlID0gdmFsdWU7XG4gICAgcmV0dXJuIGNhbmRpZGF0ZSAmJiBjYW5kaWRhdGUua2luZCA9PT0gXCJjcmVhdGVcIiAmJiBJcy5zdHJpbmcoY2FuZGlkYXRlLnVyaSkgJiYgKGNhbmRpZGF0ZS5vcHRpb25zID09PSB2b2lkIDAgfHwgKGNhbmRpZGF0ZS5vcHRpb25zLm92ZXJ3cml0ZSA9PT0gdm9pZCAwIHx8IElzLmJvb2xlYW4oY2FuZGlkYXRlLm9wdGlvbnMub3ZlcndyaXRlKSkgJiYgKGNhbmRpZGF0ZS5vcHRpb25zLmlnbm9yZUlmRXhpc3RzID09PSB2b2lkIDAgfHwgSXMuYm9vbGVhbihjYW5kaWRhdGUub3B0aW9ucy5pZ25vcmVJZkV4aXN0cykpKSAmJiAoY2FuZGlkYXRlLmFubm90YXRpb25JZCA9PT0gdm9pZCAwIHx8IENoYW5nZUFubm90YXRpb25JZGVudGlmaWVyLmlzKGNhbmRpZGF0ZS5hbm5vdGF0aW9uSWQpKTtcbiAgfVxuICBDcmVhdGVGaWxlMi5pcyA9IGlzO1xufSkoQ3JlYXRlRmlsZSB8fCAoQ3JlYXRlRmlsZSA9IHt9KSk7XG52YXIgUmVuYW1lRmlsZTtcbihmdW5jdGlvbihSZW5hbWVGaWxlMikge1xuICBmdW5jdGlvbiBjcmVhdGUob2xkVXJpLCBuZXdVcmksIG9wdGlvbnMsIGFubm90YXRpb24pIHtcbiAgICBsZXQgcmVzdWx0ID0ge1xuICAgICAga2luZDogXCJyZW5hbWVcIixcbiAgICAgIG9sZFVyaSxcbiAgICAgIG5ld1VyaVxuICAgIH07XG4gICAgaWYgKG9wdGlvbnMgIT09IHZvaWQgMCAmJiAob3B0aW9ucy5vdmVyd3JpdGUgIT09IHZvaWQgMCB8fCBvcHRpb25zLmlnbm9yZUlmRXhpc3RzICE9PSB2b2lkIDApKSB7XG4gICAgICByZXN1bHQub3B0aW9ucyA9IG9wdGlvbnM7XG4gICAgfVxuICAgIGlmIChhbm5vdGF0aW9uICE9PSB2b2lkIDApIHtcbiAgICAgIHJlc3VsdC5hbm5vdGF0aW9uSWQgPSBhbm5vdGF0aW9uO1xuICAgIH1cbiAgICByZXR1cm4gcmVzdWx0O1xuICB9XG4gIFJlbmFtZUZpbGUyLmNyZWF0ZSA9IGNyZWF0ZTtcbiAgZnVuY3Rpb24gaXModmFsdWUpIHtcbiAgICBsZXQgY2FuZGlkYXRlID0gdmFsdWU7XG4gICAgcmV0dXJuIGNhbmRpZGF0ZSAmJiBjYW5kaWRhdGUua2luZCA9PT0gXCJyZW5hbWVcIiAmJiBJcy5zdHJpbmcoY2FuZGlkYXRlLm9sZFVyaSkgJiYgSXMuc3RyaW5nKGNhbmRpZGF0ZS5uZXdVcmkpICYmIChjYW5kaWRhdGUub3B0aW9ucyA9PT0gdm9pZCAwIHx8IChjYW5kaWRhdGUub3B0aW9ucy5vdmVyd3JpdGUgPT09IHZvaWQgMCB8fCBJcy5ib29sZWFuKGNhbmRpZGF0ZS5vcHRpb25zLm92ZXJ3cml0ZSkpICYmIChjYW5kaWRhdGUub3B0aW9ucy5pZ25vcmVJZkV4aXN0cyA9PT0gdm9pZCAwIHx8IElzLmJvb2xlYW4oY2FuZGlkYXRlLm9wdGlvbnMuaWdub3JlSWZFeGlzdHMpKSkgJiYgKGNhbmRpZGF0ZS5hbm5vdGF0aW9uSWQgPT09IHZvaWQgMCB8fCBDaGFuZ2VBbm5vdGF0aW9uSWRlbnRpZmllci5pcyhjYW5kaWRhdGUuYW5ub3RhdGlvbklkKSk7XG4gIH1cbiAgUmVuYW1lRmlsZTIuaXMgPSBpcztcbn0pKFJlbmFtZUZpbGUgfHwgKFJlbmFtZUZpbGUgPSB7fSkpO1xudmFyIERlbGV0ZUZpbGU7XG4oZnVuY3Rpb24oRGVsZXRlRmlsZTIpIHtcbiAgZnVuY3Rpb24gY3JlYXRlKHVyaSwgb3B0aW9ucywgYW5ub3RhdGlvbikge1xuICAgIGxldCByZXN1bHQgPSB7XG4gICAgICBraW5kOiBcImRlbGV0ZVwiLFxuICAgICAgdXJpXG4gICAgfTtcbiAgICBpZiAob3B0aW9ucyAhPT0gdm9pZCAwICYmIChvcHRpb25zLnJlY3Vyc2l2ZSAhPT0gdm9pZCAwIHx8IG9wdGlvbnMuaWdub3JlSWZOb3RFeGlzdHMgIT09IHZvaWQgMCkpIHtcbiAgICAgIHJlc3VsdC5vcHRpb25zID0gb3B0aW9ucztcbiAgICB9XG4gICAgaWYgKGFubm90YXRpb24gIT09IHZvaWQgMCkge1xuICAgICAgcmVzdWx0LmFubm90YXRpb25JZCA9IGFubm90YXRpb247XG4gICAgfVxuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cbiAgRGVsZXRlRmlsZTIuY3JlYXRlID0gY3JlYXRlO1xuICBmdW5jdGlvbiBpcyh2YWx1ZSkge1xuICAgIGxldCBjYW5kaWRhdGUgPSB2YWx1ZTtcbiAgICByZXR1cm4gY2FuZGlkYXRlICYmIGNhbmRpZGF0ZS5raW5kID09PSBcImRlbGV0ZVwiICYmIElzLnN0cmluZyhjYW5kaWRhdGUudXJpKSAmJiAoY2FuZGlkYXRlLm9wdGlvbnMgPT09IHZvaWQgMCB8fCAoY2FuZGlkYXRlLm9wdGlvbnMucmVjdXJzaXZlID09PSB2b2lkIDAgfHwgSXMuYm9vbGVhbihjYW5kaWRhdGUub3B0aW9ucy5yZWN1cnNpdmUpKSAmJiAoY2FuZGlkYXRlLm9wdGlvbnMuaWdub3JlSWZOb3RFeGlzdHMgPT09IHZvaWQgMCB8fCBJcy5ib29sZWFuKGNhbmRpZGF0ZS5vcHRpb25zLmlnbm9yZUlmTm90RXhpc3RzKSkpICYmIChjYW5kaWRhdGUuYW5ub3RhdGlvbklkID09PSB2b2lkIDAgfHwgQ2hhbmdlQW5ub3RhdGlvbklkZW50aWZpZXIuaXMoY2FuZGlkYXRlLmFubm90YXRpb25JZCkpO1xuICB9XG4gIERlbGV0ZUZpbGUyLmlzID0gaXM7XG59KShEZWxldGVGaWxlIHx8IChEZWxldGVGaWxlID0ge30pKTtcbnZhciBXb3Jrc3BhY2VFZGl0O1xuKGZ1bmN0aW9uKFdvcmtzcGFjZUVkaXQyKSB7XG4gIGZ1bmN0aW9uIGlzKHZhbHVlKSB7XG4gICAgbGV0IGNhbmRpZGF0ZSA9IHZhbHVlO1xuICAgIHJldHVybiBjYW5kaWRhdGUgJiYgKGNhbmRpZGF0ZS5jaGFuZ2VzICE9PSB2b2lkIDAgfHwgY2FuZGlkYXRlLmRvY3VtZW50Q2hhbmdlcyAhPT0gdm9pZCAwKSAmJiAoY2FuZGlkYXRlLmRvY3VtZW50Q2hhbmdlcyA9PT0gdm9pZCAwIHx8IGNhbmRpZGF0ZS5kb2N1bWVudENoYW5nZXMuZXZlcnkoKGNoYW5nZSkgPT4ge1xuICAgICAgaWYgKElzLnN0cmluZyhjaGFuZ2Uua2luZCkpIHtcbiAgICAgICAgcmV0dXJuIENyZWF0ZUZpbGUuaXMoY2hhbmdlKSB8fCBSZW5hbWVGaWxlLmlzKGNoYW5nZSkgfHwgRGVsZXRlRmlsZS5pcyhjaGFuZ2UpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIFRleHREb2N1bWVudEVkaXQuaXMoY2hhbmdlKTtcbiAgICAgIH1cbiAgICB9KSk7XG4gIH1cbiAgV29ya3NwYWNlRWRpdDIuaXMgPSBpcztcbn0pKFdvcmtzcGFjZUVkaXQgfHwgKFdvcmtzcGFjZUVkaXQgPSB7fSkpO1xudmFyIFRleHREb2N1bWVudElkZW50aWZpZXI7XG4oZnVuY3Rpb24oVGV4dERvY3VtZW50SWRlbnRpZmllcjIpIHtcbiAgZnVuY3Rpb24gY3JlYXRlKHVyaSkge1xuICAgIHJldHVybiB7IHVyaSB9O1xuICB9XG4gIFRleHREb2N1bWVudElkZW50aWZpZXIyLmNyZWF0ZSA9IGNyZWF0ZTtcbiAgZnVuY3Rpb24gaXModmFsdWUpIHtcbiAgICBsZXQgY2FuZGlkYXRlID0gdmFsdWU7XG4gICAgcmV0dXJuIElzLmRlZmluZWQoY2FuZGlkYXRlKSAmJiBJcy5zdHJpbmcoY2FuZGlkYXRlLnVyaSk7XG4gIH1cbiAgVGV4dERvY3VtZW50SWRlbnRpZmllcjIuaXMgPSBpcztcbn0pKFRleHREb2N1bWVudElkZW50aWZpZXIgfHwgKFRleHREb2N1bWVudElkZW50aWZpZXIgPSB7fSkpO1xudmFyIFZlcnNpb25lZFRleHREb2N1bWVudElkZW50aWZpZXI7XG4oZnVuY3Rpb24oVmVyc2lvbmVkVGV4dERvY3VtZW50SWRlbnRpZmllcjIpIHtcbiAgZnVuY3Rpb24gY3JlYXRlKHVyaSwgdmVyc2lvbikge1xuICAgIHJldHVybiB7IHVyaSwgdmVyc2lvbiB9O1xuICB9XG4gIFZlcnNpb25lZFRleHREb2N1bWVudElkZW50aWZpZXIyLmNyZWF0ZSA9IGNyZWF0ZTtcbiAgZnVuY3Rpb24gaXModmFsdWUpIHtcbiAgICBsZXQgY2FuZGlkYXRlID0gdmFsdWU7XG4gICAgcmV0dXJuIElzLmRlZmluZWQoY2FuZGlkYXRlKSAmJiBJcy5zdHJpbmcoY2FuZGlkYXRlLnVyaSkgJiYgSXMuaW50ZWdlcihjYW5kaWRhdGUudmVyc2lvbik7XG4gIH1cbiAgVmVyc2lvbmVkVGV4dERvY3VtZW50SWRlbnRpZmllcjIuaXMgPSBpcztcbn0pKFZlcnNpb25lZFRleHREb2N1bWVudElkZW50aWZpZXIgfHwgKFZlcnNpb25lZFRleHREb2N1bWVudElkZW50aWZpZXIgPSB7fSkpO1xudmFyIE9wdGlvbmFsVmVyc2lvbmVkVGV4dERvY3VtZW50SWRlbnRpZmllcjtcbihmdW5jdGlvbihPcHRpb25hbFZlcnNpb25lZFRleHREb2N1bWVudElkZW50aWZpZXIyKSB7XG4gIGZ1bmN0aW9uIGNyZWF0ZSh1cmksIHZlcnNpb24pIHtcbiAgICByZXR1cm4geyB1cmksIHZlcnNpb24gfTtcbiAgfVxuICBPcHRpb25hbFZlcnNpb25lZFRleHREb2N1bWVudElkZW50aWZpZXIyLmNyZWF0ZSA9IGNyZWF0ZTtcbiAgZnVuY3Rpb24gaXModmFsdWUpIHtcbiAgICBsZXQgY2FuZGlkYXRlID0gdmFsdWU7XG4gICAgcmV0dXJuIElzLmRlZmluZWQoY2FuZGlkYXRlKSAmJiBJcy5zdHJpbmcoY2FuZGlkYXRlLnVyaSkgJiYgKGNhbmRpZGF0ZS52ZXJzaW9uID09PSBudWxsIHx8IElzLmludGVnZXIoY2FuZGlkYXRlLnZlcnNpb24pKTtcbiAgfVxuICBPcHRpb25hbFZlcnNpb25lZFRleHREb2N1bWVudElkZW50aWZpZXIyLmlzID0gaXM7XG59KShPcHRpb25hbFZlcnNpb25lZFRleHREb2N1bWVudElkZW50aWZpZXIgfHwgKE9wdGlvbmFsVmVyc2lvbmVkVGV4dERvY3VtZW50SWRlbnRpZmllciA9IHt9KSk7XG52YXIgVGV4dERvY3VtZW50SXRlbTtcbihmdW5jdGlvbihUZXh0RG9jdW1lbnRJdGVtMikge1xuICBmdW5jdGlvbiBjcmVhdGUodXJpLCBsYW5ndWFnZUlkLCB2ZXJzaW9uLCB0ZXh0KSB7XG4gICAgcmV0dXJuIHsgdXJpLCBsYW5ndWFnZUlkLCB2ZXJzaW9uLCB0ZXh0IH07XG4gIH1cbiAgVGV4dERvY3VtZW50SXRlbTIuY3JlYXRlID0gY3JlYXRlO1xuICBmdW5jdGlvbiBpcyh2YWx1ZSkge1xuICAgIGxldCBjYW5kaWRhdGUgPSB2YWx1ZTtcbiAgICByZXR1cm4gSXMuZGVmaW5lZChjYW5kaWRhdGUpICYmIElzLnN0cmluZyhjYW5kaWRhdGUudXJpKSAmJiBJcy5zdHJpbmcoY2FuZGlkYXRlLmxhbmd1YWdlSWQpICYmIElzLmludGVnZXIoY2FuZGlkYXRlLnZlcnNpb24pICYmIElzLnN0cmluZyhjYW5kaWRhdGUudGV4dCk7XG4gIH1cbiAgVGV4dERvY3VtZW50SXRlbTIuaXMgPSBpcztcbn0pKFRleHREb2N1bWVudEl0ZW0gfHwgKFRleHREb2N1bWVudEl0ZW0gPSB7fSkpO1xudmFyIE1hcmt1cEtpbmQ7XG4oZnVuY3Rpb24oTWFya3VwS2luZDIpIHtcbiAgTWFya3VwS2luZDIuUGxhaW5UZXh0ID0gXCJwbGFpbnRleHRcIjtcbiAgTWFya3VwS2luZDIuTWFya2Rvd24gPSBcIm1hcmtkb3duXCI7XG4gIGZ1bmN0aW9uIGlzKHZhbHVlKSB7XG4gICAgY29uc3QgY2FuZGlkYXRlID0gdmFsdWU7XG4gICAgcmV0dXJuIGNhbmRpZGF0ZSA9PT0gTWFya3VwS2luZDIuUGxhaW5UZXh0IHx8IGNhbmRpZGF0ZSA9PT0gTWFya3VwS2luZDIuTWFya2Rvd247XG4gIH1cbiAgTWFya3VwS2luZDIuaXMgPSBpcztcbn0pKE1hcmt1cEtpbmQgfHwgKE1hcmt1cEtpbmQgPSB7fSkpO1xudmFyIE1hcmt1cENvbnRlbnQ7XG4oZnVuY3Rpb24oTWFya3VwQ29udGVudDIpIHtcbiAgZnVuY3Rpb24gaXModmFsdWUpIHtcbiAgICBjb25zdCBjYW5kaWRhdGUgPSB2YWx1ZTtcbiAgICByZXR1cm4gSXMub2JqZWN0TGl0ZXJhbCh2YWx1ZSkgJiYgTWFya3VwS2luZC5pcyhjYW5kaWRhdGUua2luZCkgJiYgSXMuc3RyaW5nKGNhbmRpZGF0ZS52YWx1ZSk7XG4gIH1cbiAgTWFya3VwQ29udGVudDIuaXMgPSBpcztcbn0pKE1hcmt1cENvbnRlbnQgfHwgKE1hcmt1cENvbnRlbnQgPSB7fSkpO1xudmFyIENvbXBsZXRpb25JdGVtS2luZDtcbihmdW5jdGlvbihDb21wbGV0aW9uSXRlbUtpbmQyKSB7XG4gIENvbXBsZXRpb25JdGVtS2luZDIuVGV4dCA9IDE7XG4gIENvbXBsZXRpb25JdGVtS2luZDIuTWV0aG9kID0gMjtcbiAgQ29tcGxldGlvbkl0ZW1LaW5kMi5GdW5jdGlvbiA9IDM7XG4gIENvbXBsZXRpb25JdGVtS2luZDIuQ29uc3RydWN0b3IgPSA0O1xuICBDb21wbGV0aW9uSXRlbUtpbmQyLkZpZWxkID0gNTtcbiAgQ29tcGxldGlvbkl0ZW1LaW5kMi5WYXJpYWJsZSA9IDY7XG4gIENvbXBsZXRpb25JdGVtS2luZDIuQ2xhc3MgPSA3O1xuICBDb21wbGV0aW9uSXRlbUtpbmQyLkludGVyZmFjZSA9IDg7XG4gIENvbXBsZXRpb25JdGVtS2luZDIuTW9kdWxlID0gOTtcbiAgQ29tcGxldGlvbkl0ZW1LaW5kMi5Qcm9wZXJ0eSA9IDEwO1xuICBDb21wbGV0aW9uSXRlbUtpbmQyLlVuaXQgPSAxMTtcbiAgQ29tcGxldGlvbkl0ZW1LaW5kMi5WYWx1ZSA9IDEyO1xuICBDb21wbGV0aW9uSXRlbUtpbmQyLkVudW0gPSAxMztcbiAgQ29tcGxldGlvbkl0ZW1LaW5kMi5LZXl3b3JkID0gMTQ7XG4gIENvbXBsZXRpb25JdGVtS2luZDIuU25pcHBldCA9IDE1O1xuICBDb21wbGV0aW9uSXRlbUtpbmQyLkNvbG9yID0gMTY7XG4gIENvbXBsZXRpb25JdGVtS2luZDIuRmlsZSA9IDE3O1xuICBDb21wbGV0aW9uSXRlbUtpbmQyLlJlZmVyZW5jZSA9IDE4O1xuICBDb21wbGV0aW9uSXRlbUtpbmQyLkZvbGRlciA9IDE5O1xuICBDb21wbGV0aW9uSXRlbUtpbmQyLkVudW1NZW1iZXIgPSAyMDtcbiAgQ29tcGxldGlvbkl0ZW1LaW5kMi5Db25zdGFudCA9IDIxO1xuICBDb21wbGV0aW9uSXRlbUtpbmQyLlN0cnVjdCA9IDIyO1xuICBDb21wbGV0aW9uSXRlbUtpbmQyLkV2ZW50ID0gMjM7XG4gIENvbXBsZXRpb25JdGVtS2luZDIuT3BlcmF0b3IgPSAyNDtcbiAgQ29tcGxldGlvbkl0ZW1LaW5kMi5UeXBlUGFyYW1ldGVyID0gMjU7XG59KShDb21wbGV0aW9uSXRlbUtpbmQgfHwgKENvbXBsZXRpb25JdGVtS2luZCA9IHt9KSk7XG52YXIgSW5zZXJ0VGV4dEZvcm1hdDtcbihmdW5jdGlvbihJbnNlcnRUZXh0Rm9ybWF0Mikge1xuICBJbnNlcnRUZXh0Rm9ybWF0Mi5QbGFpblRleHQgPSAxO1xuICBJbnNlcnRUZXh0Rm9ybWF0Mi5TbmlwcGV0ID0gMjtcbn0pKEluc2VydFRleHRGb3JtYXQgfHwgKEluc2VydFRleHRGb3JtYXQgPSB7fSkpO1xudmFyIENvbXBsZXRpb25JdGVtVGFnO1xuKGZ1bmN0aW9uKENvbXBsZXRpb25JdGVtVGFnMikge1xuICBDb21wbGV0aW9uSXRlbVRhZzIuRGVwcmVjYXRlZCA9IDE7XG59KShDb21wbGV0aW9uSXRlbVRhZyB8fCAoQ29tcGxldGlvbkl0ZW1UYWcgPSB7fSkpO1xudmFyIEluc2VydFJlcGxhY2VFZGl0O1xuKGZ1bmN0aW9uKEluc2VydFJlcGxhY2VFZGl0Mikge1xuICBmdW5jdGlvbiBjcmVhdGUobmV3VGV4dCwgaW5zZXJ0LCByZXBsYWNlKSB7XG4gICAgcmV0dXJuIHsgbmV3VGV4dCwgaW5zZXJ0LCByZXBsYWNlIH07XG4gIH1cbiAgSW5zZXJ0UmVwbGFjZUVkaXQyLmNyZWF0ZSA9IGNyZWF0ZTtcbiAgZnVuY3Rpb24gaXModmFsdWUpIHtcbiAgICBjb25zdCBjYW5kaWRhdGUgPSB2YWx1ZTtcbiAgICByZXR1cm4gY2FuZGlkYXRlICYmIElzLnN0cmluZyhjYW5kaWRhdGUubmV3VGV4dCkgJiYgUmFuZ2UuaXMoY2FuZGlkYXRlLmluc2VydCkgJiYgUmFuZ2UuaXMoY2FuZGlkYXRlLnJlcGxhY2UpO1xuICB9XG4gIEluc2VydFJlcGxhY2VFZGl0Mi5pcyA9IGlzO1xufSkoSW5zZXJ0UmVwbGFjZUVkaXQgfHwgKEluc2VydFJlcGxhY2VFZGl0ID0ge30pKTtcbnZhciBJbnNlcnRUZXh0TW9kZTtcbihmdW5jdGlvbihJbnNlcnRUZXh0TW9kZTIpIHtcbiAgSW5zZXJ0VGV4dE1vZGUyLmFzSXMgPSAxO1xuICBJbnNlcnRUZXh0TW9kZTIuYWRqdXN0SW5kZW50YXRpb24gPSAyO1xufSkoSW5zZXJ0VGV4dE1vZGUgfHwgKEluc2VydFRleHRNb2RlID0ge30pKTtcbnZhciBDb21wbGV0aW9uSXRlbUxhYmVsRGV0YWlscztcbihmdW5jdGlvbihDb21wbGV0aW9uSXRlbUxhYmVsRGV0YWlsczIpIHtcbiAgZnVuY3Rpb24gaXModmFsdWUpIHtcbiAgICBjb25zdCBjYW5kaWRhdGUgPSB2YWx1ZTtcbiAgICByZXR1cm4gY2FuZGlkYXRlICYmIChJcy5zdHJpbmcoY2FuZGlkYXRlLmRldGFpbCkgfHwgY2FuZGlkYXRlLmRldGFpbCA9PT0gdm9pZCAwKSAmJiAoSXMuc3RyaW5nKGNhbmRpZGF0ZS5kZXNjcmlwdGlvbikgfHwgY2FuZGlkYXRlLmRlc2NyaXB0aW9uID09PSB2b2lkIDApO1xuICB9XG4gIENvbXBsZXRpb25JdGVtTGFiZWxEZXRhaWxzMi5pcyA9IGlzO1xufSkoQ29tcGxldGlvbkl0ZW1MYWJlbERldGFpbHMgfHwgKENvbXBsZXRpb25JdGVtTGFiZWxEZXRhaWxzID0ge30pKTtcbnZhciBDb21wbGV0aW9uSXRlbTtcbihmdW5jdGlvbihDb21wbGV0aW9uSXRlbTIpIHtcbiAgZnVuY3Rpb24gY3JlYXRlKGxhYmVsKSB7XG4gICAgcmV0dXJuIHsgbGFiZWwgfTtcbiAgfVxuICBDb21wbGV0aW9uSXRlbTIuY3JlYXRlID0gY3JlYXRlO1xufSkoQ29tcGxldGlvbkl0ZW0gfHwgKENvbXBsZXRpb25JdGVtID0ge30pKTtcbnZhciBDb21wbGV0aW9uTGlzdDtcbihmdW5jdGlvbihDb21wbGV0aW9uTGlzdDIpIHtcbiAgZnVuY3Rpb24gY3JlYXRlKGl0ZW1zLCBpc0luY29tcGxldGUpIHtcbiAgICByZXR1cm4geyBpdGVtczogaXRlbXMgPyBpdGVtcyA6IFtdLCBpc0luY29tcGxldGU6ICEhaXNJbmNvbXBsZXRlIH07XG4gIH1cbiAgQ29tcGxldGlvbkxpc3QyLmNyZWF0ZSA9IGNyZWF0ZTtcbn0pKENvbXBsZXRpb25MaXN0IHx8IChDb21wbGV0aW9uTGlzdCA9IHt9KSk7XG52YXIgTWFya2VkU3RyaW5nO1xuKGZ1bmN0aW9uKE1hcmtlZFN0cmluZzIpIHtcbiAgZnVuY3Rpb24gZnJvbVBsYWluVGV4dChwbGFpblRleHQpIHtcbiAgICByZXR1cm4gcGxhaW5UZXh0LnJlcGxhY2UoL1tcXFxcYCpfe31bXFxdKCkjK1xcLS4hXS9nLCBcIlxcXFwkJlwiKTtcbiAgfVxuICBNYXJrZWRTdHJpbmcyLmZyb21QbGFpblRleHQgPSBmcm9tUGxhaW5UZXh0O1xuICBmdW5jdGlvbiBpcyh2YWx1ZSkge1xuICAgIGNvbnN0IGNhbmRpZGF0ZSA9IHZhbHVlO1xuICAgIHJldHVybiBJcy5zdHJpbmcoY2FuZGlkYXRlKSB8fCBJcy5vYmplY3RMaXRlcmFsKGNhbmRpZGF0ZSkgJiYgSXMuc3RyaW5nKGNhbmRpZGF0ZS5sYW5ndWFnZSkgJiYgSXMuc3RyaW5nKGNhbmRpZGF0ZS52YWx1ZSk7XG4gIH1cbiAgTWFya2VkU3RyaW5nMi5pcyA9IGlzO1xufSkoTWFya2VkU3RyaW5nIHx8IChNYXJrZWRTdHJpbmcgPSB7fSkpO1xudmFyIEhvdmVyO1xuKGZ1bmN0aW9uKEhvdmVyMikge1xuICBmdW5jdGlvbiBpcyh2YWx1ZSkge1xuICAgIGxldCBjYW5kaWRhdGUgPSB2YWx1ZTtcbiAgICByZXR1cm4gISFjYW5kaWRhdGUgJiYgSXMub2JqZWN0TGl0ZXJhbChjYW5kaWRhdGUpICYmIChNYXJrdXBDb250ZW50LmlzKGNhbmRpZGF0ZS5jb250ZW50cykgfHwgTWFya2VkU3RyaW5nLmlzKGNhbmRpZGF0ZS5jb250ZW50cykgfHwgSXMudHlwZWRBcnJheShjYW5kaWRhdGUuY29udGVudHMsIE1hcmtlZFN0cmluZy5pcykpICYmICh2YWx1ZS5yYW5nZSA9PT0gdm9pZCAwIHx8IFJhbmdlLmlzKHZhbHVlLnJhbmdlKSk7XG4gIH1cbiAgSG92ZXIyLmlzID0gaXM7XG59KShIb3ZlciB8fCAoSG92ZXIgPSB7fSkpO1xudmFyIFBhcmFtZXRlckluZm9ybWF0aW9uO1xuKGZ1bmN0aW9uKFBhcmFtZXRlckluZm9ybWF0aW9uMikge1xuICBmdW5jdGlvbiBjcmVhdGUobGFiZWwsIGRvY3VtZW50YXRpb24pIHtcbiAgICByZXR1cm4gZG9jdW1lbnRhdGlvbiA/IHsgbGFiZWwsIGRvY3VtZW50YXRpb24gfSA6IHsgbGFiZWwgfTtcbiAgfVxuICBQYXJhbWV0ZXJJbmZvcm1hdGlvbjIuY3JlYXRlID0gY3JlYXRlO1xufSkoUGFyYW1ldGVySW5mb3JtYXRpb24gfHwgKFBhcmFtZXRlckluZm9ybWF0aW9uID0ge30pKTtcbnZhciBTaWduYXR1cmVJbmZvcm1hdGlvbjtcbihmdW5jdGlvbihTaWduYXR1cmVJbmZvcm1hdGlvbjIpIHtcbiAgZnVuY3Rpb24gY3JlYXRlKGxhYmVsLCBkb2N1bWVudGF0aW9uLCAuLi5wYXJhbWV0ZXJzKSB7XG4gICAgbGV0IHJlc3VsdCA9IHsgbGFiZWwgfTtcbiAgICBpZiAoSXMuZGVmaW5lZChkb2N1bWVudGF0aW9uKSkge1xuICAgICAgcmVzdWx0LmRvY3VtZW50YXRpb24gPSBkb2N1bWVudGF0aW9uO1xuICAgIH1cbiAgICBpZiAoSXMuZGVmaW5lZChwYXJhbWV0ZXJzKSkge1xuICAgICAgcmVzdWx0LnBhcmFtZXRlcnMgPSBwYXJhbWV0ZXJzO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXN1bHQucGFyYW1ldGVycyA9IFtdO1xuICAgIH1cbiAgICByZXR1cm4gcmVzdWx0O1xuICB9XG4gIFNpZ25hdHVyZUluZm9ybWF0aW9uMi5jcmVhdGUgPSBjcmVhdGU7XG59KShTaWduYXR1cmVJbmZvcm1hdGlvbiB8fCAoU2lnbmF0dXJlSW5mb3JtYXRpb24gPSB7fSkpO1xudmFyIERvY3VtZW50SGlnaGxpZ2h0S2luZDtcbihmdW5jdGlvbihEb2N1bWVudEhpZ2hsaWdodEtpbmQyKSB7XG4gIERvY3VtZW50SGlnaGxpZ2h0S2luZDIuVGV4dCA9IDE7XG4gIERvY3VtZW50SGlnaGxpZ2h0S2luZDIuUmVhZCA9IDI7XG4gIERvY3VtZW50SGlnaGxpZ2h0S2luZDIuV3JpdGUgPSAzO1xufSkoRG9jdW1lbnRIaWdobGlnaHRLaW5kIHx8IChEb2N1bWVudEhpZ2hsaWdodEtpbmQgPSB7fSkpO1xudmFyIERvY3VtZW50SGlnaGxpZ2h0O1xuKGZ1bmN0aW9uKERvY3VtZW50SGlnaGxpZ2h0Mikge1xuICBmdW5jdGlvbiBjcmVhdGUocmFuZ2UsIGtpbmQpIHtcbiAgICBsZXQgcmVzdWx0ID0geyByYW5nZSB9O1xuICAgIGlmIChJcy5udW1iZXIoa2luZCkpIHtcbiAgICAgIHJlc3VsdC5raW5kID0ga2luZDtcbiAgICB9XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfVxuICBEb2N1bWVudEhpZ2hsaWdodDIuY3JlYXRlID0gY3JlYXRlO1xufSkoRG9jdW1lbnRIaWdobGlnaHQgfHwgKERvY3VtZW50SGlnaGxpZ2h0ID0ge30pKTtcbnZhciBTeW1ib2xLaW5kO1xuKGZ1bmN0aW9uKFN5bWJvbEtpbmQyKSB7XG4gIFN5bWJvbEtpbmQyLkZpbGUgPSAxO1xuICBTeW1ib2xLaW5kMi5Nb2R1bGUgPSAyO1xuICBTeW1ib2xLaW5kMi5OYW1lc3BhY2UgPSAzO1xuICBTeW1ib2xLaW5kMi5QYWNrYWdlID0gNDtcbiAgU3ltYm9sS2luZDIuQ2xhc3MgPSA1O1xuICBTeW1ib2xLaW5kMi5NZXRob2QgPSA2O1xuICBTeW1ib2xLaW5kMi5Qcm9wZXJ0eSA9IDc7XG4gIFN5bWJvbEtpbmQyLkZpZWxkID0gODtcbiAgU3ltYm9sS2luZDIuQ29uc3RydWN0b3IgPSA5O1xuICBTeW1ib2xLaW5kMi5FbnVtID0gMTA7XG4gIFN5bWJvbEtpbmQyLkludGVyZmFjZSA9IDExO1xuICBTeW1ib2xLaW5kMi5GdW5jdGlvbiA9IDEyO1xuICBTeW1ib2xLaW5kMi5WYXJpYWJsZSA9IDEzO1xuICBTeW1ib2xLaW5kMi5Db25zdGFudCA9IDE0O1xuICBTeW1ib2xLaW5kMi5TdHJpbmcgPSAxNTtcbiAgU3ltYm9sS2luZDIuTnVtYmVyID0gMTY7XG4gIFN5bWJvbEtpbmQyLkJvb2xlYW4gPSAxNztcbiAgU3ltYm9sS2luZDIuQXJyYXkgPSAxODtcbiAgU3ltYm9sS2luZDIuT2JqZWN0ID0gMTk7XG4gIFN5bWJvbEtpbmQyLktleSA9IDIwO1xuICBTeW1ib2xLaW5kMi5OdWxsID0gMjE7XG4gIFN5bWJvbEtpbmQyLkVudW1NZW1iZXIgPSAyMjtcbiAgU3ltYm9sS2luZDIuU3RydWN0ID0gMjM7XG4gIFN5bWJvbEtpbmQyLkV2ZW50ID0gMjQ7XG4gIFN5bWJvbEtpbmQyLk9wZXJhdG9yID0gMjU7XG4gIFN5bWJvbEtpbmQyLlR5cGVQYXJhbWV0ZXIgPSAyNjtcbn0pKFN5bWJvbEtpbmQgfHwgKFN5bWJvbEtpbmQgPSB7fSkpO1xudmFyIFN5bWJvbFRhZztcbihmdW5jdGlvbihTeW1ib2xUYWcyKSB7XG4gIFN5bWJvbFRhZzIuRGVwcmVjYXRlZCA9IDE7XG59KShTeW1ib2xUYWcgfHwgKFN5bWJvbFRhZyA9IHt9KSk7XG52YXIgU3ltYm9sSW5mb3JtYXRpb247XG4oZnVuY3Rpb24oU3ltYm9sSW5mb3JtYXRpb24yKSB7XG4gIGZ1bmN0aW9uIGNyZWF0ZShuYW1lLCBraW5kLCByYW5nZSwgdXJpLCBjb250YWluZXJOYW1lKSB7XG4gICAgbGV0IHJlc3VsdCA9IHtcbiAgICAgIG5hbWUsXG4gICAgICBraW5kLFxuICAgICAgbG9jYXRpb246IHsgdXJpLCByYW5nZSB9XG4gICAgfTtcbiAgICBpZiAoY29udGFpbmVyTmFtZSkge1xuICAgICAgcmVzdWx0LmNvbnRhaW5lck5hbWUgPSBjb250YWluZXJOYW1lO1xuICAgIH1cbiAgICByZXR1cm4gcmVzdWx0O1xuICB9XG4gIFN5bWJvbEluZm9ybWF0aW9uMi5jcmVhdGUgPSBjcmVhdGU7XG59KShTeW1ib2xJbmZvcm1hdGlvbiB8fCAoU3ltYm9sSW5mb3JtYXRpb24gPSB7fSkpO1xudmFyIFdvcmtzcGFjZVN5bWJvbDtcbihmdW5jdGlvbihXb3Jrc3BhY2VTeW1ib2wyKSB7XG4gIGZ1bmN0aW9uIGNyZWF0ZShuYW1lLCBraW5kLCB1cmksIHJhbmdlKSB7XG4gICAgcmV0dXJuIHJhbmdlICE9PSB2b2lkIDAgPyB7IG5hbWUsIGtpbmQsIGxvY2F0aW9uOiB7IHVyaSwgcmFuZ2UgfSB9IDogeyBuYW1lLCBraW5kLCBsb2NhdGlvbjogeyB1cmkgfSB9O1xuICB9XG4gIFdvcmtzcGFjZVN5bWJvbDIuY3JlYXRlID0gY3JlYXRlO1xufSkoV29ya3NwYWNlU3ltYm9sIHx8IChXb3Jrc3BhY2VTeW1ib2wgPSB7fSkpO1xudmFyIERvY3VtZW50U3ltYm9sO1xuKGZ1bmN0aW9uKERvY3VtZW50U3ltYm9sMikge1xuICBmdW5jdGlvbiBjcmVhdGUobmFtZSwgZGV0YWlsLCBraW5kLCByYW5nZSwgc2VsZWN0aW9uUmFuZ2UsIGNoaWxkcmVuKSB7XG4gICAgbGV0IHJlc3VsdCA9IHtcbiAgICAgIG5hbWUsXG4gICAgICBkZXRhaWwsXG4gICAgICBraW5kLFxuICAgICAgcmFuZ2UsXG4gICAgICBzZWxlY3Rpb25SYW5nZVxuICAgIH07XG4gICAgaWYgKGNoaWxkcmVuICE9PSB2b2lkIDApIHtcbiAgICAgIHJlc3VsdC5jaGlsZHJlbiA9IGNoaWxkcmVuO1xuICAgIH1cbiAgICByZXR1cm4gcmVzdWx0O1xuICB9XG4gIERvY3VtZW50U3ltYm9sMi5jcmVhdGUgPSBjcmVhdGU7XG4gIGZ1bmN0aW9uIGlzKHZhbHVlKSB7XG4gICAgbGV0IGNhbmRpZGF0ZSA9IHZhbHVlO1xuICAgIHJldHVybiBjYW5kaWRhdGUgJiYgSXMuc3RyaW5nKGNhbmRpZGF0ZS5uYW1lKSAmJiBJcy5udW1iZXIoY2FuZGlkYXRlLmtpbmQpICYmIFJhbmdlLmlzKGNhbmRpZGF0ZS5yYW5nZSkgJiYgUmFuZ2UuaXMoY2FuZGlkYXRlLnNlbGVjdGlvblJhbmdlKSAmJiAoY2FuZGlkYXRlLmRldGFpbCA9PT0gdm9pZCAwIHx8IElzLnN0cmluZyhjYW5kaWRhdGUuZGV0YWlsKSkgJiYgKGNhbmRpZGF0ZS5kZXByZWNhdGVkID09PSB2b2lkIDAgfHwgSXMuYm9vbGVhbihjYW5kaWRhdGUuZGVwcmVjYXRlZCkpICYmIChjYW5kaWRhdGUuY2hpbGRyZW4gPT09IHZvaWQgMCB8fCBBcnJheS5pc0FycmF5KGNhbmRpZGF0ZS5jaGlsZHJlbikpICYmIChjYW5kaWRhdGUudGFncyA9PT0gdm9pZCAwIHx8IEFycmF5LmlzQXJyYXkoY2FuZGlkYXRlLnRhZ3MpKTtcbiAgfVxuICBEb2N1bWVudFN5bWJvbDIuaXMgPSBpcztcbn0pKERvY3VtZW50U3ltYm9sIHx8IChEb2N1bWVudFN5bWJvbCA9IHt9KSk7XG52YXIgQ29kZUFjdGlvbktpbmQ7XG4oZnVuY3Rpb24oQ29kZUFjdGlvbktpbmQyKSB7XG4gIENvZGVBY3Rpb25LaW5kMi5FbXB0eSA9IFwiXCI7XG4gIENvZGVBY3Rpb25LaW5kMi5RdWlja0ZpeCA9IFwicXVpY2tmaXhcIjtcbiAgQ29kZUFjdGlvbktpbmQyLlJlZmFjdG9yID0gXCJyZWZhY3RvclwiO1xuICBDb2RlQWN0aW9uS2luZDIuUmVmYWN0b3JFeHRyYWN0ID0gXCJyZWZhY3Rvci5leHRyYWN0XCI7XG4gIENvZGVBY3Rpb25LaW5kMi5SZWZhY3RvcklubGluZSA9IFwicmVmYWN0b3IuaW5saW5lXCI7XG4gIENvZGVBY3Rpb25LaW5kMi5SZWZhY3RvclJld3JpdGUgPSBcInJlZmFjdG9yLnJld3JpdGVcIjtcbiAgQ29kZUFjdGlvbktpbmQyLlNvdXJjZSA9IFwic291cmNlXCI7XG4gIENvZGVBY3Rpb25LaW5kMi5Tb3VyY2VPcmdhbml6ZUltcG9ydHMgPSBcInNvdXJjZS5vcmdhbml6ZUltcG9ydHNcIjtcbiAgQ29kZUFjdGlvbktpbmQyLlNvdXJjZUZpeEFsbCA9IFwic291cmNlLmZpeEFsbFwiO1xufSkoQ29kZUFjdGlvbktpbmQgfHwgKENvZGVBY3Rpb25LaW5kID0ge30pKTtcbnZhciBDb2RlQWN0aW9uVHJpZ2dlcktpbmQ7XG4oZnVuY3Rpb24oQ29kZUFjdGlvblRyaWdnZXJLaW5kMikge1xuICBDb2RlQWN0aW9uVHJpZ2dlcktpbmQyLkludm9rZWQgPSAxO1xuICBDb2RlQWN0aW9uVHJpZ2dlcktpbmQyLkF1dG9tYXRpYyA9IDI7XG59KShDb2RlQWN0aW9uVHJpZ2dlcktpbmQgfHwgKENvZGVBY3Rpb25UcmlnZ2VyS2luZCA9IHt9KSk7XG52YXIgQ29kZUFjdGlvbkNvbnRleHQ7XG4oZnVuY3Rpb24oQ29kZUFjdGlvbkNvbnRleHQyKSB7XG4gIGZ1bmN0aW9uIGNyZWF0ZShkaWFnbm9zdGljcywgb25seSwgdHJpZ2dlcktpbmQpIHtcbiAgICBsZXQgcmVzdWx0ID0geyBkaWFnbm9zdGljcyB9O1xuICAgIGlmIChvbmx5ICE9PSB2b2lkIDAgJiYgb25seSAhPT0gbnVsbCkge1xuICAgICAgcmVzdWx0Lm9ubHkgPSBvbmx5O1xuICAgIH1cbiAgICBpZiAodHJpZ2dlcktpbmQgIT09IHZvaWQgMCAmJiB0cmlnZ2VyS2luZCAhPT0gbnVsbCkge1xuICAgICAgcmVzdWx0LnRyaWdnZXJLaW5kID0gdHJpZ2dlcktpbmQ7XG4gICAgfVxuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cbiAgQ29kZUFjdGlvbkNvbnRleHQyLmNyZWF0ZSA9IGNyZWF0ZTtcbiAgZnVuY3Rpb24gaXModmFsdWUpIHtcbiAgICBsZXQgY2FuZGlkYXRlID0gdmFsdWU7XG4gICAgcmV0dXJuIElzLmRlZmluZWQoY2FuZGlkYXRlKSAmJiBJcy50eXBlZEFycmF5KGNhbmRpZGF0ZS5kaWFnbm9zdGljcywgRGlhZ25vc3RpYy5pcykgJiYgKGNhbmRpZGF0ZS5vbmx5ID09PSB2b2lkIDAgfHwgSXMudHlwZWRBcnJheShjYW5kaWRhdGUub25seSwgSXMuc3RyaW5nKSkgJiYgKGNhbmRpZGF0ZS50cmlnZ2VyS2luZCA9PT0gdm9pZCAwIHx8IGNhbmRpZGF0ZS50cmlnZ2VyS2luZCA9PT0gQ29kZUFjdGlvblRyaWdnZXJLaW5kLkludm9rZWQgfHwgY2FuZGlkYXRlLnRyaWdnZXJLaW5kID09PSBDb2RlQWN0aW9uVHJpZ2dlcktpbmQuQXV0b21hdGljKTtcbiAgfVxuICBDb2RlQWN0aW9uQ29udGV4dDIuaXMgPSBpcztcbn0pKENvZGVBY3Rpb25Db250ZXh0IHx8IChDb2RlQWN0aW9uQ29udGV4dCA9IHt9KSk7XG52YXIgQ29kZUFjdGlvbjtcbihmdW5jdGlvbihDb2RlQWN0aW9uMikge1xuICBmdW5jdGlvbiBjcmVhdGUodGl0bGUsIGtpbmRPckNvbW1hbmRPckVkaXQsIGtpbmQpIHtcbiAgICBsZXQgcmVzdWx0ID0geyB0aXRsZSB9O1xuICAgIGxldCBjaGVja0tpbmQgPSB0cnVlO1xuICAgIGlmICh0eXBlb2Yga2luZE9yQ29tbWFuZE9yRWRpdCA9PT0gXCJzdHJpbmdcIikge1xuICAgICAgY2hlY2tLaW5kID0gZmFsc2U7XG4gICAgICByZXN1bHQua2luZCA9IGtpbmRPckNvbW1hbmRPckVkaXQ7XG4gICAgfSBlbHNlIGlmIChDb21tYW5kLmlzKGtpbmRPckNvbW1hbmRPckVkaXQpKSB7XG4gICAgICByZXN1bHQuY29tbWFuZCA9IGtpbmRPckNvbW1hbmRPckVkaXQ7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJlc3VsdC5lZGl0ID0ga2luZE9yQ29tbWFuZE9yRWRpdDtcbiAgICB9XG4gICAgaWYgKGNoZWNrS2luZCAmJiBraW5kICE9PSB2b2lkIDApIHtcbiAgICAgIHJlc3VsdC5raW5kID0ga2luZDtcbiAgICB9XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfVxuICBDb2RlQWN0aW9uMi5jcmVhdGUgPSBjcmVhdGU7XG4gIGZ1bmN0aW9uIGlzKHZhbHVlKSB7XG4gICAgbGV0IGNhbmRpZGF0ZSA9IHZhbHVlO1xuICAgIHJldHVybiBjYW5kaWRhdGUgJiYgSXMuc3RyaW5nKGNhbmRpZGF0ZS50aXRsZSkgJiYgKGNhbmRpZGF0ZS5kaWFnbm9zdGljcyA9PT0gdm9pZCAwIHx8IElzLnR5cGVkQXJyYXkoY2FuZGlkYXRlLmRpYWdub3N0aWNzLCBEaWFnbm9zdGljLmlzKSkgJiYgKGNhbmRpZGF0ZS5raW5kID09PSB2b2lkIDAgfHwgSXMuc3RyaW5nKGNhbmRpZGF0ZS5raW5kKSkgJiYgKGNhbmRpZGF0ZS5lZGl0ICE9PSB2b2lkIDAgfHwgY2FuZGlkYXRlLmNvbW1hbmQgIT09IHZvaWQgMCkgJiYgKGNhbmRpZGF0ZS5jb21tYW5kID09PSB2b2lkIDAgfHwgQ29tbWFuZC5pcyhjYW5kaWRhdGUuY29tbWFuZCkpICYmIChjYW5kaWRhdGUuaXNQcmVmZXJyZWQgPT09IHZvaWQgMCB8fCBJcy5ib29sZWFuKGNhbmRpZGF0ZS5pc1ByZWZlcnJlZCkpICYmIChjYW5kaWRhdGUuZWRpdCA9PT0gdm9pZCAwIHx8IFdvcmtzcGFjZUVkaXQuaXMoY2FuZGlkYXRlLmVkaXQpKTtcbiAgfVxuICBDb2RlQWN0aW9uMi5pcyA9IGlzO1xufSkoQ29kZUFjdGlvbiB8fCAoQ29kZUFjdGlvbiA9IHt9KSk7XG52YXIgQ29kZUxlbnM7XG4oZnVuY3Rpb24oQ29kZUxlbnMyKSB7XG4gIGZ1bmN0aW9uIGNyZWF0ZShyYW5nZSwgZGF0YSkge1xuICAgIGxldCByZXN1bHQgPSB7IHJhbmdlIH07XG4gICAgaWYgKElzLmRlZmluZWQoZGF0YSkpIHtcbiAgICAgIHJlc3VsdC5kYXRhID0gZGF0YTtcbiAgICB9XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfVxuICBDb2RlTGVuczIuY3JlYXRlID0gY3JlYXRlO1xuICBmdW5jdGlvbiBpcyh2YWx1ZSkge1xuICAgIGxldCBjYW5kaWRhdGUgPSB2YWx1ZTtcbiAgICByZXR1cm4gSXMuZGVmaW5lZChjYW5kaWRhdGUpICYmIFJhbmdlLmlzKGNhbmRpZGF0ZS5yYW5nZSkgJiYgKElzLnVuZGVmaW5lZChjYW5kaWRhdGUuY29tbWFuZCkgfHwgQ29tbWFuZC5pcyhjYW5kaWRhdGUuY29tbWFuZCkpO1xuICB9XG4gIENvZGVMZW5zMi5pcyA9IGlzO1xufSkoQ29kZUxlbnMgfHwgKENvZGVMZW5zID0ge30pKTtcbnZhciBGb3JtYXR0aW5nT3B0aW9ucztcbihmdW5jdGlvbihGb3JtYXR0aW5nT3B0aW9uczIpIHtcbiAgZnVuY3Rpb24gY3JlYXRlKHRhYlNpemUsIGluc2VydFNwYWNlcykge1xuICAgIHJldHVybiB7IHRhYlNpemUsIGluc2VydFNwYWNlcyB9O1xuICB9XG4gIEZvcm1hdHRpbmdPcHRpb25zMi5jcmVhdGUgPSBjcmVhdGU7XG4gIGZ1bmN0aW9uIGlzKHZhbHVlKSB7XG4gICAgbGV0IGNhbmRpZGF0ZSA9IHZhbHVlO1xuICAgIHJldHVybiBJcy5kZWZpbmVkKGNhbmRpZGF0ZSkgJiYgSXMudWludGVnZXIoY2FuZGlkYXRlLnRhYlNpemUpICYmIElzLmJvb2xlYW4oY2FuZGlkYXRlLmluc2VydFNwYWNlcyk7XG4gIH1cbiAgRm9ybWF0dGluZ09wdGlvbnMyLmlzID0gaXM7XG59KShGb3JtYXR0aW5nT3B0aW9ucyB8fCAoRm9ybWF0dGluZ09wdGlvbnMgPSB7fSkpO1xudmFyIERvY3VtZW50TGluaztcbihmdW5jdGlvbihEb2N1bWVudExpbmsyKSB7XG4gIGZ1bmN0aW9uIGNyZWF0ZShyYW5nZSwgdGFyZ2V0LCBkYXRhKSB7XG4gICAgcmV0dXJuIHsgcmFuZ2UsIHRhcmdldCwgZGF0YSB9O1xuICB9XG4gIERvY3VtZW50TGluazIuY3JlYXRlID0gY3JlYXRlO1xuICBmdW5jdGlvbiBpcyh2YWx1ZSkge1xuICAgIGxldCBjYW5kaWRhdGUgPSB2YWx1ZTtcbiAgICByZXR1cm4gSXMuZGVmaW5lZChjYW5kaWRhdGUpICYmIFJhbmdlLmlzKGNhbmRpZGF0ZS5yYW5nZSkgJiYgKElzLnVuZGVmaW5lZChjYW5kaWRhdGUudGFyZ2V0KSB8fCBJcy5zdHJpbmcoY2FuZGlkYXRlLnRhcmdldCkpO1xuICB9XG4gIERvY3VtZW50TGluazIuaXMgPSBpcztcbn0pKERvY3VtZW50TGluayB8fCAoRG9jdW1lbnRMaW5rID0ge30pKTtcbnZhciBTZWxlY3Rpb25SYW5nZTtcbihmdW5jdGlvbihTZWxlY3Rpb25SYW5nZTIpIHtcbiAgZnVuY3Rpb24gY3JlYXRlKHJhbmdlLCBwYXJlbnQpIHtcbiAgICByZXR1cm4geyByYW5nZSwgcGFyZW50IH07XG4gIH1cbiAgU2VsZWN0aW9uUmFuZ2UyLmNyZWF0ZSA9IGNyZWF0ZTtcbiAgZnVuY3Rpb24gaXModmFsdWUpIHtcbiAgICBsZXQgY2FuZGlkYXRlID0gdmFsdWU7XG4gICAgcmV0dXJuIElzLm9iamVjdExpdGVyYWwoY2FuZGlkYXRlKSAmJiBSYW5nZS5pcyhjYW5kaWRhdGUucmFuZ2UpICYmIChjYW5kaWRhdGUucGFyZW50ID09PSB2b2lkIDAgfHwgU2VsZWN0aW9uUmFuZ2UyLmlzKGNhbmRpZGF0ZS5wYXJlbnQpKTtcbiAgfVxuICBTZWxlY3Rpb25SYW5nZTIuaXMgPSBpcztcbn0pKFNlbGVjdGlvblJhbmdlIHx8IChTZWxlY3Rpb25SYW5nZSA9IHt9KSk7XG52YXIgU2VtYW50aWNUb2tlblR5cGVzO1xuKGZ1bmN0aW9uKFNlbWFudGljVG9rZW5UeXBlczIpIHtcbiAgU2VtYW50aWNUb2tlblR5cGVzMltcIm5hbWVzcGFjZVwiXSA9IFwibmFtZXNwYWNlXCI7XG4gIFNlbWFudGljVG9rZW5UeXBlczJbXCJ0eXBlXCJdID0gXCJ0eXBlXCI7XG4gIFNlbWFudGljVG9rZW5UeXBlczJbXCJjbGFzc1wiXSA9IFwiY2xhc3NcIjtcbiAgU2VtYW50aWNUb2tlblR5cGVzMltcImVudW1cIl0gPSBcImVudW1cIjtcbiAgU2VtYW50aWNUb2tlblR5cGVzMltcImludGVyZmFjZVwiXSA9IFwiaW50ZXJmYWNlXCI7XG4gIFNlbWFudGljVG9rZW5UeXBlczJbXCJzdHJ1Y3RcIl0gPSBcInN0cnVjdFwiO1xuICBTZW1hbnRpY1Rva2VuVHlwZXMyW1widHlwZVBhcmFtZXRlclwiXSA9IFwidHlwZVBhcmFtZXRlclwiO1xuICBTZW1hbnRpY1Rva2VuVHlwZXMyW1wicGFyYW1ldGVyXCJdID0gXCJwYXJhbWV0ZXJcIjtcbiAgU2VtYW50aWNUb2tlblR5cGVzMltcInZhcmlhYmxlXCJdID0gXCJ2YXJpYWJsZVwiO1xuICBTZW1hbnRpY1Rva2VuVHlwZXMyW1wicHJvcGVydHlcIl0gPSBcInByb3BlcnR5XCI7XG4gIFNlbWFudGljVG9rZW5UeXBlczJbXCJlbnVtTWVtYmVyXCJdID0gXCJlbnVtTWVtYmVyXCI7XG4gIFNlbWFudGljVG9rZW5UeXBlczJbXCJldmVudFwiXSA9IFwiZXZlbnRcIjtcbiAgU2VtYW50aWNUb2tlblR5cGVzMltcImZ1bmN0aW9uXCJdID0gXCJmdW5jdGlvblwiO1xuICBTZW1hbnRpY1Rva2VuVHlwZXMyW1wibWV0aG9kXCJdID0gXCJtZXRob2RcIjtcbiAgU2VtYW50aWNUb2tlblR5cGVzMltcIm1hY3JvXCJdID0gXCJtYWNyb1wiO1xuICBTZW1hbnRpY1Rva2VuVHlwZXMyW1wia2V5d29yZFwiXSA9IFwia2V5d29yZFwiO1xuICBTZW1hbnRpY1Rva2VuVHlwZXMyW1wibW9kaWZpZXJcIl0gPSBcIm1vZGlmaWVyXCI7XG4gIFNlbWFudGljVG9rZW5UeXBlczJbXCJjb21tZW50XCJdID0gXCJjb21tZW50XCI7XG4gIFNlbWFudGljVG9rZW5UeXBlczJbXCJzdHJpbmdcIl0gPSBcInN0cmluZ1wiO1xuICBTZW1hbnRpY1Rva2VuVHlwZXMyW1wibnVtYmVyXCJdID0gXCJudW1iZXJcIjtcbiAgU2VtYW50aWNUb2tlblR5cGVzMltcInJlZ2V4cFwiXSA9IFwicmVnZXhwXCI7XG4gIFNlbWFudGljVG9rZW5UeXBlczJbXCJvcGVyYXRvclwiXSA9IFwib3BlcmF0b3JcIjtcbiAgU2VtYW50aWNUb2tlblR5cGVzMltcImRlY29yYXRvclwiXSA9IFwiZGVjb3JhdG9yXCI7XG59KShTZW1hbnRpY1Rva2VuVHlwZXMgfHwgKFNlbWFudGljVG9rZW5UeXBlcyA9IHt9KSk7XG52YXIgU2VtYW50aWNUb2tlbk1vZGlmaWVycztcbihmdW5jdGlvbihTZW1hbnRpY1Rva2VuTW9kaWZpZXJzMikge1xuICBTZW1hbnRpY1Rva2VuTW9kaWZpZXJzMltcImRlY2xhcmF0aW9uXCJdID0gXCJkZWNsYXJhdGlvblwiO1xuICBTZW1hbnRpY1Rva2VuTW9kaWZpZXJzMltcImRlZmluaXRpb25cIl0gPSBcImRlZmluaXRpb25cIjtcbiAgU2VtYW50aWNUb2tlbk1vZGlmaWVyczJbXCJyZWFkb25seVwiXSA9IFwicmVhZG9ubHlcIjtcbiAgU2VtYW50aWNUb2tlbk1vZGlmaWVyczJbXCJzdGF0aWNcIl0gPSBcInN0YXRpY1wiO1xuICBTZW1hbnRpY1Rva2VuTW9kaWZpZXJzMltcImRlcHJlY2F0ZWRcIl0gPSBcImRlcHJlY2F0ZWRcIjtcbiAgU2VtYW50aWNUb2tlbk1vZGlmaWVyczJbXCJhYnN0cmFjdFwiXSA9IFwiYWJzdHJhY3RcIjtcbiAgU2VtYW50aWNUb2tlbk1vZGlmaWVyczJbXCJhc3luY1wiXSA9IFwiYXN5bmNcIjtcbiAgU2VtYW50aWNUb2tlbk1vZGlmaWVyczJbXCJtb2RpZmljYXRpb25cIl0gPSBcIm1vZGlmaWNhdGlvblwiO1xuICBTZW1hbnRpY1Rva2VuTW9kaWZpZXJzMltcImRvY3VtZW50YXRpb25cIl0gPSBcImRvY3VtZW50YXRpb25cIjtcbiAgU2VtYW50aWNUb2tlbk1vZGlmaWVyczJbXCJkZWZhdWx0TGlicmFyeVwiXSA9IFwiZGVmYXVsdExpYnJhcnlcIjtcbn0pKFNlbWFudGljVG9rZW5Nb2RpZmllcnMgfHwgKFNlbWFudGljVG9rZW5Nb2RpZmllcnMgPSB7fSkpO1xudmFyIFNlbWFudGljVG9rZW5zO1xuKGZ1bmN0aW9uKFNlbWFudGljVG9rZW5zMikge1xuICBmdW5jdGlvbiBpcyh2YWx1ZSkge1xuICAgIGNvbnN0IGNhbmRpZGF0ZSA9IHZhbHVlO1xuICAgIHJldHVybiBJcy5vYmplY3RMaXRlcmFsKGNhbmRpZGF0ZSkgJiYgKGNhbmRpZGF0ZS5yZXN1bHRJZCA9PT0gdm9pZCAwIHx8IHR5cGVvZiBjYW5kaWRhdGUucmVzdWx0SWQgPT09IFwic3RyaW5nXCIpICYmIEFycmF5LmlzQXJyYXkoY2FuZGlkYXRlLmRhdGEpICYmIChjYW5kaWRhdGUuZGF0YS5sZW5ndGggPT09IDAgfHwgdHlwZW9mIGNhbmRpZGF0ZS5kYXRhWzBdID09PSBcIm51bWJlclwiKTtcbiAgfVxuICBTZW1hbnRpY1Rva2VuczIuaXMgPSBpcztcbn0pKFNlbWFudGljVG9rZW5zIHx8IChTZW1hbnRpY1Rva2VucyA9IHt9KSk7XG52YXIgSW5saW5lVmFsdWVUZXh0O1xuKGZ1bmN0aW9uKElubGluZVZhbHVlVGV4dDIpIHtcbiAgZnVuY3Rpb24gY3JlYXRlKHJhbmdlLCB0ZXh0KSB7XG4gICAgcmV0dXJuIHsgcmFuZ2UsIHRleHQgfTtcbiAgfVxuICBJbmxpbmVWYWx1ZVRleHQyLmNyZWF0ZSA9IGNyZWF0ZTtcbiAgZnVuY3Rpb24gaXModmFsdWUpIHtcbiAgICBjb25zdCBjYW5kaWRhdGUgPSB2YWx1ZTtcbiAgICByZXR1cm4gY2FuZGlkYXRlICE9PSB2b2lkIDAgJiYgY2FuZGlkYXRlICE9PSBudWxsICYmIFJhbmdlLmlzKGNhbmRpZGF0ZS5yYW5nZSkgJiYgSXMuc3RyaW5nKGNhbmRpZGF0ZS50ZXh0KTtcbiAgfVxuICBJbmxpbmVWYWx1ZVRleHQyLmlzID0gaXM7XG59KShJbmxpbmVWYWx1ZVRleHQgfHwgKElubGluZVZhbHVlVGV4dCA9IHt9KSk7XG52YXIgSW5saW5lVmFsdWVWYXJpYWJsZUxvb2t1cDtcbihmdW5jdGlvbihJbmxpbmVWYWx1ZVZhcmlhYmxlTG9va3VwMikge1xuICBmdW5jdGlvbiBjcmVhdGUocmFuZ2UsIHZhcmlhYmxlTmFtZSwgY2FzZVNlbnNpdGl2ZUxvb2t1cCkge1xuICAgIHJldHVybiB7IHJhbmdlLCB2YXJpYWJsZU5hbWUsIGNhc2VTZW5zaXRpdmVMb29rdXAgfTtcbiAgfVxuICBJbmxpbmVWYWx1ZVZhcmlhYmxlTG9va3VwMi5jcmVhdGUgPSBjcmVhdGU7XG4gIGZ1bmN0aW9uIGlzKHZhbHVlKSB7XG4gICAgY29uc3QgY2FuZGlkYXRlID0gdmFsdWU7XG4gICAgcmV0dXJuIGNhbmRpZGF0ZSAhPT0gdm9pZCAwICYmIGNhbmRpZGF0ZSAhPT0gbnVsbCAmJiBSYW5nZS5pcyhjYW5kaWRhdGUucmFuZ2UpICYmIElzLmJvb2xlYW4oY2FuZGlkYXRlLmNhc2VTZW5zaXRpdmVMb29rdXApICYmIChJcy5zdHJpbmcoY2FuZGlkYXRlLnZhcmlhYmxlTmFtZSkgfHwgY2FuZGlkYXRlLnZhcmlhYmxlTmFtZSA9PT0gdm9pZCAwKTtcbiAgfVxuICBJbmxpbmVWYWx1ZVZhcmlhYmxlTG9va3VwMi5pcyA9IGlzO1xufSkoSW5saW5lVmFsdWVWYXJpYWJsZUxvb2t1cCB8fCAoSW5saW5lVmFsdWVWYXJpYWJsZUxvb2t1cCA9IHt9KSk7XG52YXIgSW5saW5lVmFsdWVFdmFsdWF0YWJsZUV4cHJlc3Npb247XG4oZnVuY3Rpb24oSW5saW5lVmFsdWVFdmFsdWF0YWJsZUV4cHJlc3Npb24yKSB7XG4gIGZ1bmN0aW9uIGNyZWF0ZShyYW5nZSwgZXhwcmVzc2lvbikge1xuICAgIHJldHVybiB7IHJhbmdlLCBleHByZXNzaW9uIH07XG4gIH1cbiAgSW5saW5lVmFsdWVFdmFsdWF0YWJsZUV4cHJlc3Npb24yLmNyZWF0ZSA9IGNyZWF0ZTtcbiAgZnVuY3Rpb24gaXModmFsdWUpIHtcbiAgICBjb25zdCBjYW5kaWRhdGUgPSB2YWx1ZTtcbiAgICByZXR1cm4gY2FuZGlkYXRlICE9PSB2b2lkIDAgJiYgY2FuZGlkYXRlICE9PSBudWxsICYmIFJhbmdlLmlzKGNhbmRpZGF0ZS5yYW5nZSkgJiYgKElzLnN0cmluZyhjYW5kaWRhdGUuZXhwcmVzc2lvbikgfHwgY2FuZGlkYXRlLmV4cHJlc3Npb24gPT09IHZvaWQgMCk7XG4gIH1cbiAgSW5saW5lVmFsdWVFdmFsdWF0YWJsZUV4cHJlc3Npb24yLmlzID0gaXM7XG59KShJbmxpbmVWYWx1ZUV2YWx1YXRhYmxlRXhwcmVzc2lvbiB8fCAoSW5saW5lVmFsdWVFdmFsdWF0YWJsZUV4cHJlc3Npb24gPSB7fSkpO1xudmFyIElubGluZVZhbHVlQ29udGV4dDtcbihmdW5jdGlvbihJbmxpbmVWYWx1ZUNvbnRleHQyKSB7XG4gIGZ1bmN0aW9uIGNyZWF0ZShmcmFtZUlkLCBzdG9wcGVkTG9jYXRpb24pIHtcbiAgICByZXR1cm4geyBmcmFtZUlkLCBzdG9wcGVkTG9jYXRpb24gfTtcbiAgfVxuICBJbmxpbmVWYWx1ZUNvbnRleHQyLmNyZWF0ZSA9IGNyZWF0ZTtcbiAgZnVuY3Rpb24gaXModmFsdWUpIHtcbiAgICBjb25zdCBjYW5kaWRhdGUgPSB2YWx1ZTtcbiAgICByZXR1cm4gSXMuZGVmaW5lZChjYW5kaWRhdGUpICYmIFJhbmdlLmlzKHZhbHVlLnN0b3BwZWRMb2NhdGlvbik7XG4gIH1cbiAgSW5saW5lVmFsdWVDb250ZXh0Mi5pcyA9IGlzO1xufSkoSW5saW5lVmFsdWVDb250ZXh0IHx8IChJbmxpbmVWYWx1ZUNvbnRleHQgPSB7fSkpO1xudmFyIElubGF5SGludEtpbmQ7XG4oZnVuY3Rpb24oSW5sYXlIaW50S2luZDIpIHtcbiAgSW5sYXlIaW50S2luZDIuVHlwZSA9IDE7XG4gIElubGF5SGludEtpbmQyLlBhcmFtZXRlciA9IDI7XG4gIGZ1bmN0aW9uIGlzKHZhbHVlKSB7XG4gICAgcmV0dXJuIHZhbHVlID09PSAxIHx8IHZhbHVlID09PSAyO1xuICB9XG4gIElubGF5SGludEtpbmQyLmlzID0gaXM7XG59KShJbmxheUhpbnRLaW5kIHx8IChJbmxheUhpbnRLaW5kID0ge30pKTtcbnZhciBJbmxheUhpbnRMYWJlbFBhcnQ7XG4oZnVuY3Rpb24oSW5sYXlIaW50TGFiZWxQYXJ0Mikge1xuICBmdW5jdGlvbiBjcmVhdGUodmFsdWUpIHtcbiAgICByZXR1cm4geyB2YWx1ZSB9O1xuICB9XG4gIElubGF5SGludExhYmVsUGFydDIuY3JlYXRlID0gY3JlYXRlO1xuICBmdW5jdGlvbiBpcyh2YWx1ZSkge1xuICAgIGNvbnN0IGNhbmRpZGF0ZSA9IHZhbHVlO1xuICAgIHJldHVybiBJcy5vYmplY3RMaXRlcmFsKGNhbmRpZGF0ZSkgJiYgKGNhbmRpZGF0ZS50b29sdGlwID09PSB2b2lkIDAgfHwgSXMuc3RyaW5nKGNhbmRpZGF0ZS50b29sdGlwKSB8fCBNYXJrdXBDb250ZW50LmlzKGNhbmRpZGF0ZS50b29sdGlwKSkgJiYgKGNhbmRpZGF0ZS5sb2NhdGlvbiA9PT0gdm9pZCAwIHx8IExvY2F0aW9uLmlzKGNhbmRpZGF0ZS5sb2NhdGlvbikpICYmIChjYW5kaWRhdGUuY29tbWFuZCA9PT0gdm9pZCAwIHx8IENvbW1hbmQuaXMoY2FuZGlkYXRlLmNvbW1hbmQpKTtcbiAgfVxuICBJbmxheUhpbnRMYWJlbFBhcnQyLmlzID0gaXM7XG59KShJbmxheUhpbnRMYWJlbFBhcnQgfHwgKElubGF5SGludExhYmVsUGFydCA9IHt9KSk7XG52YXIgSW5sYXlIaW50O1xuKGZ1bmN0aW9uKElubGF5SGludDIpIHtcbiAgZnVuY3Rpb24gY3JlYXRlKHBvc2l0aW9uLCBsYWJlbCwga2luZCkge1xuICAgIGNvbnN0IHJlc3VsdCA9IHsgcG9zaXRpb24sIGxhYmVsIH07XG4gICAgaWYgKGtpbmQgIT09IHZvaWQgMCkge1xuICAgICAgcmVzdWx0LmtpbmQgPSBraW5kO1xuICAgIH1cbiAgICByZXR1cm4gcmVzdWx0O1xuICB9XG4gIElubGF5SGludDIuY3JlYXRlID0gY3JlYXRlO1xuICBmdW5jdGlvbiBpcyh2YWx1ZSkge1xuICAgIGNvbnN0IGNhbmRpZGF0ZSA9IHZhbHVlO1xuICAgIHJldHVybiBJcy5vYmplY3RMaXRlcmFsKGNhbmRpZGF0ZSkgJiYgUG9zaXRpb24uaXMoY2FuZGlkYXRlLnBvc2l0aW9uKSAmJiAoSXMuc3RyaW5nKGNhbmRpZGF0ZS5sYWJlbCkgfHwgSXMudHlwZWRBcnJheShjYW5kaWRhdGUubGFiZWwsIElubGF5SGludExhYmVsUGFydC5pcykpICYmIChjYW5kaWRhdGUua2luZCA9PT0gdm9pZCAwIHx8IElubGF5SGludEtpbmQuaXMoY2FuZGlkYXRlLmtpbmQpKSAmJiBjYW5kaWRhdGUudGV4dEVkaXRzID09PSB2b2lkIDAgfHwgSXMudHlwZWRBcnJheShjYW5kaWRhdGUudGV4dEVkaXRzLCBUZXh0RWRpdC5pcykgJiYgKGNhbmRpZGF0ZS50b29sdGlwID09PSB2b2lkIDAgfHwgSXMuc3RyaW5nKGNhbmRpZGF0ZS50b29sdGlwKSB8fCBNYXJrdXBDb250ZW50LmlzKGNhbmRpZGF0ZS50b29sdGlwKSkgJiYgKGNhbmRpZGF0ZS5wYWRkaW5nTGVmdCA9PT0gdm9pZCAwIHx8IElzLmJvb2xlYW4oY2FuZGlkYXRlLnBhZGRpbmdMZWZ0KSkgJiYgKGNhbmRpZGF0ZS5wYWRkaW5nUmlnaHQgPT09IHZvaWQgMCB8fCBJcy5ib29sZWFuKGNhbmRpZGF0ZS5wYWRkaW5nUmlnaHQpKTtcbiAgfVxuICBJbmxheUhpbnQyLmlzID0gaXM7XG59KShJbmxheUhpbnQgfHwgKElubGF5SGludCA9IHt9KSk7XG52YXIgU3RyaW5nVmFsdWU7XG4oZnVuY3Rpb24oU3RyaW5nVmFsdWUyKSB7XG4gIGZ1bmN0aW9uIGNyZWF0ZVNuaXBwZXQodmFsdWUpIHtcbiAgICByZXR1cm4geyBraW5kOiBcInNuaXBwZXRcIiwgdmFsdWUgfTtcbiAgfVxuICBTdHJpbmdWYWx1ZTIuY3JlYXRlU25pcHBldCA9IGNyZWF0ZVNuaXBwZXQ7XG59KShTdHJpbmdWYWx1ZSB8fCAoU3RyaW5nVmFsdWUgPSB7fSkpO1xudmFyIElubGluZUNvbXBsZXRpb25JdGVtO1xuKGZ1bmN0aW9uKElubGluZUNvbXBsZXRpb25JdGVtMikge1xuICBmdW5jdGlvbiBjcmVhdGUoaW5zZXJ0VGV4dCwgZmlsdGVyVGV4dCwgcmFuZ2UsIGNvbW1hbmQpIHtcbiAgICByZXR1cm4geyBpbnNlcnRUZXh0LCBmaWx0ZXJUZXh0LCByYW5nZSwgY29tbWFuZCB9O1xuICB9XG4gIElubGluZUNvbXBsZXRpb25JdGVtMi5jcmVhdGUgPSBjcmVhdGU7XG59KShJbmxpbmVDb21wbGV0aW9uSXRlbSB8fCAoSW5saW5lQ29tcGxldGlvbkl0ZW0gPSB7fSkpO1xudmFyIElubGluZUNvbXBsZXRpb25MaXN0O1xuKGZ1bmN0aW9uKElubGluZUNvbXBsZXRpb25MaXN0Mikge1xuICBmdW5jdGlvbiBjcmVhdGUoaXRlbXMpIHtcbiAgICByZXR1cm4geyBpdGVtcyB9O1xuICB9XG4gIElubGluZUNvbXBsZXRpb25MaXN0Mi5jcmVhdGUgPSBjcmVhdGU7XG59KShJbmxpbmVDb21wbGV0aW9uTGlzdCB8fCAoSW5saW5lQ29tcGxldGlvbkxpc3QgPSB7fSkpO1xudmFyIElubGluZUNvbXBsZXRpb25UcmlnZ2VyS2luZDtcbihmdW5jdGlvbihJbmxpbmVDb21wbGV0aW9uVHJpZ2dlcktpbmQyKSB7XG4gIElubGluZUNvbXBsZXRpb25UcmlnZ2VyS2luZDIuSW52b2tlZCA9IDA7XG4gIElubGluZUNvbXBsZXRpb25UcmlnZ2VyS2luZDIuQXV0b21hdGljID0gMTtcbn0pKElubGluZUNvbXBsZXRpb25UcmlnZ2VyS2luZCB8fCAoSW5saW5lQ29tcGxldGlvblRyaWdnZXJLaW5kID0ge30pKTtcbnZhciBTZWxlY3RlZENvbXBsZXRpb25JbmZvO1xuKGZ1bmN0aW9uKFNlbGVjdGVkQ29tcGxldGlvbkluZm8yKSB7XG4gIGZ1bmN0aW9uIGNyZWF0ZShyYW5nZSwgdGV4dCkge1xuICAgIHJldHVybiB7IHJhbmdlLCB0ZXh0IH07XG4gIH1cbiAgU2VsZWN0ZWRDb21wbGV0aW9uSW5mbzIuY3JlYXRlID0gY3JlYXRlO1xufSkoU2VsZWN0ZWRDb21wbGV0aW9uSW5mbyB8fCAoU2VsZWN0ZWRDb21wbGV0aW9uSW5mbyA9IHt9KSk7XG52YXIgSW5saW5lQ29tcGxldGlvbkNvbnRleHQ7XG4oZnVuY3Rpb24oSW5saW5lQ29tcGxldGlvbkNvbnRleHQyKSB7XG4gIGZ1bmN0aW9uIGNyZWF0ZSh0cmlnZ2VyS2luZCwgc2VsZWN0ZWRDb21wbGV0aW9uSW5mbykge1xuICAgIHJldHVybiB7IHRyaWdnZXJLaW5kLCBzZWxlY3RlZENvbXBsZXRpb25JbmZvIH07XG4gIH1cbiAgSW5saW5lQ29tcGxldGlvbkNvbnRleHQyLmNyZWF0ZSA9IGNyZWF0ZTtcbn0pKElubGluZUNvbXBsZXRpb25Db250ZXh0IHx8IChJbmxpbmVDb21wbGV0aW9uQ29udGV4dCA9IHt9KSk7XG52YXIgV29ya3NwYWNlRm9sZGVyO1xuKGZ1bmN0aW9uKFdvcmtzcGFjZUZvbGRlcjIpIHtcbiAgZnVuY3Rpb24gaXModmFsdWUpIHtcbiAgICBjb25zdCBjYW5kaWRhdGUgPSB2YWx1ZTtcbiAgICByZXR1cm4gSXMub2JqZWN0TGl0ZXJhbChjYW5kaWRhdGUpICYmIFVSSS5pcyhjYW5kaWRhdGUudXJpKSAmJiBJcy5zdHJpbmcoY2FuZGlkYXRlLm5hbWUpO1xuICB9XG4gIFdvcmtzcGFjZUZvbGRlcjIuaXMgPSBpcztcbn0pKFdvcmtzcGFjZUZvbGRlciB8fCAoV29ya3NwYWNlRm9sZGVyID0ge30pKTtcbnZhciBUZXh0RG9jdW1lbnQ7XG4oZnVuY3Rpb24oVGV4dERvY3VtZW50Mykge1xuICBmdW5jdGlvbiBjcmVhdGUodXJpLCBsYW5ndWFnZUlkLCB2ZXJzaW9uLCBjb250ZW50KSB7XG4gICAgcmV0dXJuIG5ldyBGdWxsVGV4dERvY3VtZW50KHVyaSwgbGFuZ3VhZ2VJZCwgdmVyc2lvbiwgY29udGVudCk7XG4gIH1cbiAgVGV4dERvY3VtZW50My5jcmVhdGUgPSBjcmVhdGU7XG4gIGZ1bmN0aW9uIGlzKHZhbHVlKSB7XG4gICAgbGV0IGNhbmRpZGF0ZSA9IHZhbHVlO1xuICAgIHJldHVybiBJcy5kZWZpbmVkKGNhbmRpZGF0ZSkgJiYgSXMuc3RyaW5nKGNhbmRpZGF0ZS51cmkpICYmIChJcy51bmRlZmluZWQoY2FuZGlkYXRlLmxhbmd1YWdlSWQpIHx8IElzLnN0cmluZyhjYW5kaWRhdGUubGFuZ3VhZ2VJZCkpICYmIElzLnVpbnRlZ2VyKGNhbmRpZGF0ZS5saW5lQ291bnQpICYmIElzLmZ1bmMoY2FuZGlkYXRlLmdldFRleHQpICYmIElzLmZ1bmMoY2FuZGlkYXRlLnBvc2l0aW9uQXQpICYmIElzLmZ1bmMoY2FuZGlkYXRlLm9mZnNldEF0KSA/IHRydWUgOiBmYWxzZTtcbiAgfVxuICBUZXh0RG9jdW1lbnQzLmlzID0gaXM7XG4gIGZ1bmN0aW9uIGFwcGx5RWRpdHMoZG9jdW1lbnQsIGVkaXRzKSB7XG4gICAgbGV0IHRleHQgPSBkb2N1bWVudC5nZXRUZXh0KCk7XG4gICAgbGV0IHNvcnRlZEVkaXRzID0gbWVyZ2VTb3J0MihlZGl0cywgKGEyLCBiKSA9PiB7XG4gICAgICBsZXQgZGlmZiA9IGEyLnJhbmdlLnN0YXJ0LmxpbmUgLSBiLnJhbmdlLnN0YXJ0LmxpbmU7XG4gICAgICBpZiAoZGlmZiA9PT0gMCkge1xuICAgICAgICByZXR1cm4gYTIucmFuZ2Uuc3RhcnQuY2hhcmFjdGVyIC0gYi5yYW5nZS5zdGFydC5jaGFyYWN0ZXI7XG4gICAgICB9XG4gICAgICByZXR1cm4gZGlmZjtcbiAgICB9KTtcbiAgICBsZXQgbGFzdE1vZGlmaWVkT2Zmc2V0ID0gdGV4dC5sZW5ndGg7XG4gICAgZm9yIChsZXQgaSA9IHNvcnRlZEVkaXRzLmxlbmd0aCAtIDE7IGkgPj0gMDsgaS0tKSB7XG4gICAgICBsZXQgZSA9IHNvcnRlZEVkaXRzW2ldO1xuICAgICAgbGV0IHN0YXJ0T2Zmc2V0ID0gZG9jdW1lbnQub2Zmc2V0QXQoZS5yYW5nZS5zdGFydCk7XG4gICAgICBsZXQgZW5kT2Zmc2V0ID0gZG9jdW1lbnQub2Zmc2V0QXQoZS5yYW5nZS5lbmQpO1xuICAgICAgaWYgKGVuZE9mZnNldCA8PSBsYXN0TW9kaWZpZWRPZmZzZXQpIHtcbiAgICAgICAgdGV4dCA9IHRleHQuc3Vic3RyaW5nKDAsIHN0YXJ0T2Zmc2V0KSArIGUubmV3VGV4dCArIHRleHQuc3Vic3RyaW5nKGVuZE9mZnNldCwgdGV4dC5sZW5ndGgpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiT3ZlcmxhcHBpbmcgZWRpdFwiKTtcbiAgICAgIH1cbiAgICAgIGxhc3RNb2RpZmllZE9mZnNldCA9IHN0YXJ0T2Zmc2V0O1xuICAgIH1cbiAgICByZXR1cm4gdGV4dDtcbiAgfVxuICBUZXh0RG9jdW1lbnQzLmFwcGx5RWRpdHMgPSBhcHBseUVkaXRzO1xuICBmdW5jdGlvbiBtZXJnZVNvcnQyKGRhdGEsIGNvbXBhcmUpIHtcbiAgICBpZiAoZGF0YS5sZW5ndGggPD0gMSkge1xuICAgICAgcmV0dXJuIGRhdGE7XG4gICAgfVxuICAgIGNvbnN0IHAgPSBkYXRhLmxlbmd0aCAvIDIgfCAwO1xuICAgIGNvbnN0IGxlZnQgPSBkYXRhLnNsaWNlKDAsIHApO1xuICAgIGNvbnN0IHJpZ2h0ID0gZGF0YS5zbGljZShwKTtcbiAgICBtZXJnZVNvcnQyKGxlZnQsIGNvbXBhcmUpO1xuICAgIG1lcmdlU29ydDIocmlnaHQsIGNvbXBhcmUpO1xuICAgIGxldCBsZWZ0SWR4ID0gMDtcbiAgICBsZXQgcmlnaHRJZHggPSAwO1xuICAgIGxldCBpID0gMDtcbiAgICB3aGlsZSAobGVmdElkeCA8IGxlZnQubGVuZ3RoICYmIHJpZ2h0SWR4IDwgcmlnaHQubGVuZ3RoKSB7XG4gICAgICBsZXQgcmV0ID0gY29tcGFyZShsZWZ0W2xlZnRJZHhdLCByaWdodFtyaWdodElkeF0pO1xuICAgICAgaWYgKHJldCA8PSAwKSB7XG4gICAgICAgIGRhdGFbaSsrXSA9IGxlZnRbbGVmdElkeCsrXTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGRhdGFbaSsrXSA9IHJpZ2h0W3JpZ2h0SWR4KytdO1xuICAgICAgfVxuICAgIH1cbiAgICB3aGlsZSAobGVmdElkeCA8IGxlZnQubGVuZ3RoKSB7XG4gICAgICBkYXRhW2krK10gPSBsZWZ0W2xlZnRJZHgrK107XG4gICAgfVxuICAgIHdoaWxlIChyaWdodElkeCA8IHJpZ2h0Lmxlbmd0aCkge1xuICAgICAgZGF0YVtpKytdID0gcmlnaHRbcmlnaHRJZHgrK107XG4gICAgfVxuICAgIHJldHVybiBkYXRhO1xuICB9XG59KShUZXh0RG9jdW1lbnQgfHwgKFRleHREb2N1bWVudCA9IHt9KSk7XG52YXIgRnVsbFRleHREb2N1bWVudCA9IGNsYXNzIHtcbiAgY29uc3RydWN0b3IodXJpLCBsYW5ndWFnZUlkLCB2ZXJzaW9uLCBjb250ZW50KSB7XG4gICAgdGhpcy5fdXJpID0gdXJpO1xuICAgIHRoaXMuX2xhbmd1YWdlSWQgPSBsYW5ndWFnZUlkO1xuICAgIHRoaXMuX3ZlcnNpb24gPSB2ZXJzaW9uO1xuICAgIHRoaXMuX2NvbnRlbnQgPSBjb250ZW50O1xuICAgIHRoaXMuX2xpbmVPZmZzZXRzID0gdm9pZCAwO1xuICB9XG4gIGdldCB1cmkoKSB7XG4gICAgcmV0dXJuIHRoaXMuX3VyaTtcbiAgfVxuICBnZXQgbGFuZ3VhZ2VJZCgpIHtcbiAgICByZXR1cm4gdGhpcy5fbGFuZ3VhZ2VJZDtcbiAgfVxuICBnZXQgdmVyc2lvbigpIHtcbiAgICByZXR1cm4gdGhpcy5fdmVyc2lvbjtcbiAgfVxuICBnZXRUZXh0KHJhbmdlKSB7XG4gICAgaWYgKHJhbmdlKSB7XG4gICAgICBsZXQgc3RhcnQgPSB0aGlzLm9mZnNldEF0KHJhbmdlLnN0YXJ0KTtcbiAgICAgIGxldCBlbmQgPSB0aGlzLm9mZnNldEF0KHJhbmdlLmVuZCk7XG4gICAgICByZXR1cm4gdGhpcy5fY29udGVudC5zdWJzdHJpbmcoc3RhcnQsIGVuZCk7XG4gICAgfVxuICAgIHJldHVybiB0aGlzLl9jb250ZW50O1xuICB9XG4gIHVwZGF0ZShldmVudCwgdmVyc2lvbikge1xuICAgIHRoaXMuX2NvbnRlbnQgPSBldmVudC50ZXh0O1xuICAgIHRoaXMuX3ZlcnNpb24gPSB2ZXJzaW9uO1xuICAgIHRoaXMuX2xpbmVPZmZzZXRzID0gdm9pZCAwO1xuICB9XG4gIGdldExpbmVPZmZzZXRzKCkge1xuICAgIGlmICh0aGlzLl9saW5lT2Zmc2V0cyA9PT0gdm9pZCAwKSB7XG4gICAgICBsZXQgbGluZU9mZnNldHMgPSBbXTtcbiAgICAgIGxldCB0ZXh0ID0gdGhpcy5fY29udGVudDtcbiAgICAgIGxldCBpc0xpbmVTdGFydCA9IHRydWU7XG4gICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRleHQubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgaWYgKGlzTGluZVN0YXJ0KSB7XG4gICAgICAgICAgbGluZU9mZnNldHMucHVzaChpKTtcbiAgICAgICAgICBpc0xpbmVTdGFydCA9IGZhbHNlO1xuICAgICAgICB9XG4gICAgICAgIGxldCBjaCA9IHRleHQuY2hhckF0KGkpO1xuICAgICAgICBpc0xpbmVTdGFydCA9IGNoID09PSBcIlxcclwiIHx8IGNoID09PSBcIlxcblwiO1xuICAgICAgICBpZiAoY2ggPT09IFwiXFxyXCIgJiYgaSArIDEgPCB0ZXh0Lmxlbmd0aCAmJiB0ZXh0LmNoYXJBdChpICsgMSkgPT09IFwiXFxuXCIpIHtcbiAgICAgICAgICBpKys7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGlmIChpc0xpbmVTdGFydCAmJiB0ZXh0Lmxlbmd0aCA+IDApIHtcbiAgICAgICAgbGluZU9mZnNldHMucHVzaCh0ZXh0Lmxlbmd0aCk7XG4gICAgICB9XG4gICAgICB0aGlzLl9saW5lT2Zmc2V0cyA9IGxpbmVPZmZzZXRzO1xuICAgIH1cbiAgICByZXR1cm4gdGhpcy5fbGluZU9mZnNldHM7XG4gIH1cbiAgcG9zaXRpb25BdChvZmZzZXQpIHtcbiAgICBvZmZzZXQgPSBNYXRoLm1heChNYXRoLm1pbihvZmZzZXQsIHRoaXMuX2NvbnRlbnQubGVuZ3RoKSwgMCk7XG4gICAgbGV0IGxpbmVPZmZzZXRzID0gdGhpcy5nZXRMaW5lT2Zmc2V0cygpO1xuICAgIGxldCBsb3cgPSAwLCBoaWdoID0gbGluZU9mZnNldHMubGVuZ3RoO1xuICAgIGlmIChoaWdoID09PSAwKSB7XG4gICAgICByZXR1cm4gUG9zaXRpb24uY3JlYXRlKDAsIG9mZnNldCk7XG4gICAgfVxuICAgIHdoaWxlIChsb3cgPCBoaWdoKSB7XG4gICAgICBsZXQgbWlkID0gTWF0aC5mbG9vcigobG93ICsgaGlnaCkgLyAyKTtcbiAgICAgIGlmIChsaW5lT2Zmc2V0c1ttaWRdID4gb2Zmc2V0KSB7XG4gICAgICAgIGhpZ2ggPSBtaWQ7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBsb3cgPSBtaWQgKyAxO1xuICAgICAgfVxuICAgIH1cbiAgICBsZXQgbGluZSA9IGxvdyAtIDE7XG4gICAgcmV0dXJuIFBvc2l0aW9uLmNyZWF0ZShsaW5lLCBvZmZzZXQgLSBsaW5lT2Zmc2V0c1tsaW5lXSk7XG4gIH1cbiAgb2Zmc2V0QXQocG9zaXRpb24pIHtcbiAgICBsZXQgbGluZU9mZnNldHMgPSB0aGlzLmdldExpbmVPZmZzZXRzKCk7XG4gICAgaWYgKHBvc2l0aW9uLmxpbmUgPj0gbGluZU9mZnNldHMubGVuZ3RoKSB7XG4gICAgICByZXR1cm4gdGhpcy5fY29udGVudC5sZW5ndGg7XG4gICAgfSBlbHNlIGlmIChwb3NpdGlvbi5saW5lIDwgMCkge1xuICAgICAgcmV0dXJuIDA7XG4gICAgfVxuICAgIGxldCBsaW5lT2Zmc2V0ID0gbGluZU9mZnNldHNbcG9zaXRpb24ubGluZV07XG4gICAgbGV0IG5leHRMaW5lT2Zmc2V0ID0gcG9zaXRpb24ubGluZSArIDEgPCBsaW5lT2Zmc2V0cy5sZW5ndGggPyBsaW5lT2Zmc2V0c1twb3NpdGlvbi5saW5lICsgMV0gOiB0aGlzLl9jb250ZW50Lmxlbmd0aDtcbiAgICByZXR1cm4gTWF0aC5tYXgoTWF0aC5taW4obGluZU9mZnNldCArIHBvc2l0aW9uLmNoYXJhY3RlciwgbmV4dExpbmVPZmZzZXQpLCBsaW5lT2Zmc2V0KTtcbiAgfVxuICBnZXQgbGluZUNvdW50KCkge1xuICAgIHJldHVybiB0aGlzLmdldExpbmVPZmZzZXRzKCkubGVuZ3RoO1xuICB9XG59O1xudmFyIElzO1xuKGZ1bmN0aW9uKElzMikge1xuICBjb25zdCB0b1N0cmluZyA9IE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmc7XG4gIGZ1bmN0aW9uIGRlZmluZWQodmFsdWUpIHtcbiAgICByZXR1cm4gdHlwZW9mIHZhbHVlICE9PSBcInVuZGVmaW5lZFwiO1xuICB9XG4gIElzMi5kZWZpbmVkID0gZGVmaW5lZDtcbiAgZnVuY3Rpb24gdW5kZWZpbmVkMih2YWx1ZSkge1xuICAgIHJldHVybiB0eXBlb2YgdmFsdWUgPT09IFwidW5kZWZpbmVkXCI7XG4gIH1cbiAgSXMyLnVuZGVmaW5lZCA9IHVuZGVmaW5lZDI7XG4gIGZ1bmN0aW9uIGJvb2xlYW4odmFsdWUpIHtcbiAgICByZXR1cm4gdmFsdWUgPT09IHRydWUgfHwgdmFsdWUgPT09IGZhbHNlO1xuICB9XG4gIElzMi5ib29sZWFuID0gYm9vbGVhbjtcbiAgZnVuY3Rpb24gc3RyaW5nKHZhbHVlKSB7XG4gICAgcmV0dXJuIHRvU3RyaW5nLmNhbGwodmFsdWUpID09PSBcIltvYmplY3QgU3RyaW5nXVwiO1xuICB9XG4gIElzMi5zdHJpbmcgPSBzdHJpbmc7XG4gIGZ1bmN0aW9uIG51bWJlcih2YWx1ZSkge1xuICAgIHJldHVybiB0b1N0cmluZy5jYWxsKHZhbHVlKSA9PT0gXCJbb2JqZWN0IE51bWJlcl1cIjtcbiAgfVxuICBJczIubnVtYmVyID0gbnVtYmVyO1xuICBmdW5jdGlvbiBudW1iZXJSYW5nZSh2YWx1ZSwgbWluLCBtYXgpIHtcbiAgICByZXR1cm4gdG9TdHJpbmcuY2FsbCh2YWx1ZSkgPT09IFwiW29iamVjdCBOdW1iZXJdXCIgJiYgbWluIDw9IHZhbHVlICYmIHZhbHVlIDw9IG1heDtcbiAgfVxuICBJczIubnVtYmVyUmFuZ2UgPSBudW1iZXJSYW5nZTtcbiAgZnVuY3Rpb24gaW50ZWdlcjIodmFsdWUpIHtcbiAgICByZXR1cm4gdG9TdHJpbmcuY2FsbCh2YWx1ZSkgPT09IFwiW29iamVjdCBOdW1iZXJdXCIgJiYgLTIxNDc0ODM2NDggPD0gdmFsdWUgJiYgdmFsdWUgPD0gMjE0NzQ4MzY0NztcbiAgfVxuICBJczIuaW50ZWdlciA9IGludGVnZXIyO1xuICBmdW5jdGlvbiB1aW50ZWdlcjIodmFsdWUpIHtcbiAgICByZXR1cm4gdG9TdHJpbmcuY2FsbCh2YWx1ZSkgPT09IFwiW29iamVjdCBOdW1iZXJdXCIgJiYgMCA8PSB2YWx1ZSAmJiB2YWx1ZSA8PSAyMTQ3NDgzNjQ3O1xuICB9XG4gIElzMi51aW50ZWdlciA9IHVpbnRlZ2VyMjtcbiAgZnVuY3Rpb24gZnVuYyh2YWx1ZSkge1xuICAgIHJldHVybiB0b1N0cmluZy5jYWxsKHZhbHVlKSA9PT0gXCJbb2JqZWN0IEZ1bmN0aW9uXVwiO1xuICB9XG4gIElzMi5mdW5jID0gZnVuYztcbiAgZnVuY3Rpb24gb2JqZWN0TGl0ZXJhbCh2YWx1ZSkge1xuICAgIHJldHVybiB2YWx1ZSAhPT0gbnVsbCAmJiB0eXBlb2YgdmFsdWUgPT09IFwib2JqZWN0XCI7XG4gIH1cbiAgSXMyLm9iamVjdExpdGVyYWwgPSBvYmplY3RMaXRlcmFsO1xuICBmdW5jdGlvbiB0eXBlZEFycmF5KHZhbHVlLCBjaGVjaykge1xuICAgIHJldHVybiBBcnJheS5pc0FycmF5KHZhbHVlKSAmJiB2YWx1ZS5ldmVyeShjaGVjayk7XG4gIH1cbiAgSXMyLnR5cGVkQXJyYXkgPSB0eXBlZEFycmF5O1xufSkoSXMgfHwgKElzID0ge30pKTtcblxuLy8gbm9kZV9tb2R1bGVzL3ZzY29kZS1sYW5ndWFnZXNlcnZlci10ZXh0ZG9jdW1lbnQvbGliL2VzbS9tYWluLmpzXG52YXIgRnVsbFRleHREb2N1bWVudDIgPSBjbGFzcyBfRnVsbFRleHREb2N1bWVudCB7XG4gIGNvbnN0cnVjdG9yKHVyaSwgbGFuZ3VhZ2VJZCwgdmVyc2lvbiwgY29udGVudCkge1xuICAgIHRoaXMuX3VyaSA9IHVyaTtcbiAgICB0aGlzLl9sYW5ndWFnZUlkID0gbGFuZ3VhZ2VJZDtcbiAgICB0aGlzLl92ZXJzaW9uID0gdmVyc2lvbjtcbiAgICB0aGlzLl9jb250ZW50ID0gY29udGVudDtcbiAgICB0aGlzLl9saW5lT2Zmc2V0cyA9IHZvaWQgMDtcbiAgfVxuICBnZXQgdXJpKCkge1xuICAgIHJldHVybiB0aGlzLl91cmk7XG4gIH1cbiAgZ2V0IGxhbmd1YWdlSWQoKSB7XG4gICAgcmV0dXJuIHRoaXMuX2xhbmd1YWdlSWQ7XG4gIH1cbiAgZ2V0IHZlcnNpb24oKSB7XG4gICAgcmV0dXJuIHRoaXMuX3ZlcnNpb247XG4gIH1cbiAgZ2V0VGV4dChyYW5nZSkge1xuICAgIGlmIChyYW5nZSkge1xuICAgICAgY29uc3Qgc3RhcnQgPSB0aGlzLm9mZnNldEF0KHJhbmdlLnN0YXJ0KTtcbiAgICAgIGNvbnN0IGVuZCA9IHRoaXMub2Zmc2V0QXQocmFuZ2UuZW5kKTtcbiAgICAgIHJldHVybiB0aGlzLl9jb250ZW50LnN1YnN0cmluZyhzdGFydCwgZW5kKTtcbiAgICB9XG4gICAgcmV0dXJuIHRoaXMuX2NvbnRlbnQ7XG4gIH1cbiAgdXBkYXRlKGNoYW5nZXMsIHZlcnNpb24pIHtcbiAgICBmb3IgKGxldCBjaGFuZ2Ugb2YgY2hhbmdlcykge1xuICAgICAgaWYgKF9GdWxsVGV4dERvY3VtZW50LmlzSW5jcmVtZW50YWwoY2hhbmdlKSkge1xuICAgICAgICBjb25zdCByYW5nZSA9IGdldFdlbGxmb3JtZWRSYW5nZShjaGFuZ2UucmFuZ2UpO1xuICAgICAgICBjb25zdCBzdGFydE9mZnNldCA9IHRoaXMub2Zmc2V0QXQocmFuZ2Uuc3RhcnQpO1xuICAgICAgICBjb25zdCBlbmRPZmZzZXQgPSB0aGlzLm9mZnNldEF0KHJhbmdlLmVuZCk7XG4gICAgICAgIHRoaXMuX2NvbnRlbnQgPSB0aGlzLl9jb250ZW50LnN1YnN0cmluZygwLCBzdGFydE9mZnNldCkgKyBjaGFuZ2UudGV4dCArIHRoaXMuX2NvbnRlbnQuc3Vic3RyaW5nKGVuZE9mZnNldCwgdGhpcy5fY29udGVudC5sZW5ndGgpO1xuICAgICAgICBjb25zdCBzdGFydExpbmUgPSBNYXRoLm1heChyYW5nZS5zdGFydC5saW5lLCAwKTtcbiAgICAgICAgY29uc3QgZW5kTGluZSA9IE1hdGgubWF4KHJhbmdlLmVuZC5saW5lLCAwKTtcbiAgICAgICAgbGV0IGxpbmVPZmZzZXRzID0gdGhpcy5fbGluZU9mZnNldHM7XG4gICAgICAgIGNvbnN0IGFkZGVkTGluZU9mZnNldHMgPSBjb21wdXRlTGluZU9mZnNldHMoY2hhbmdlLnRleHQsIGZhbHNlLCBzdGFydE9mZnNldCk7XG4gICAgICAgIGlmIChlbmRMaW5lIC0gc3RhcnRMaW5lID09PSBhZGRlZExpbmVPZmZzZXRzLmxlbmd0aCkge1xuICAgICAgICAgIGZvciAobGV0IGkgPSAwLCBsZW4gPSBhZGRlZExpbmVPZmZzZXRzLmxlbmd0aDsgaSA8IGxlbjsgaSsrKSB7XG4gICAgICAgICAgICBsaW5lT2Zmc2V0c1tpICsgc3RhcnRMaW5lICsgMV0gPSBhZGRlZExpbmVPZmZzZXRzW2ldO1xuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBpZiAoYWRkZWRMaW5lT2Zmc2V0cy5sZW5ndGggPCAxZTQpIHtcbiAgICAgICAgICAgIGxpbmVPZmZzZXRzLnNwbGljZShzdGFydExpbmUgKyAxLCBlbmRMaW5lIC0gc3RhcnRMaW5lLCAuLi5hZGRlZExpbmVPZmZzZXRzKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5fbGluZU9mZnNldHMgPSBsaW5lT2Zmc2V0cyA9IGxpbmVPZmZzZXRzLnNsaWNlKDAsIHN0YXJ0TGluZSArIDEpLmNvbmNhdChhZGRlZExpbmVPZmZzZXRzLCBsaW5lT2Zmc2V0cy5zbGljZShlbmRMaW5lICsgMSkpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBjb25zdCBkaWZmID0gY2hhbmdlLnRleHQubGVuZ3RoIC0gKGVuZE9mZnNldCAtIHN0YXJ0T2Zmc2V0KTtcbiAgICAgICAgaWYgKGRpZmYgIT09IDApIHtcbiAgICAgICAgICBmb3IgKGxldCBpID0gc3RhcnRMaW5lICsgMSArIGFkZGVkTGluZU9mZnNldHMubGVuZ3RoLCBsZW4gPSBsaW5lT2Zmc2V0cy5sZW5ndGg7IGkgPCBsZW47IGkrKykge1xuICAgICAgICAgICAgbGluZU9mZnNldHNbaV0gPSBsaW5lT2Zmc2V0c1tpXSArIGRpZmY7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9IGVsc2UgaWYgKF9GdWxsVGV4dERvY3VtZW50LmlzRnVsbChjaGFuZ2UpKSB7XG4gICAgICAgIHRoaXMuX2NvbnRlbnQgPSBjaGFuZ2UudGV4dDtcbiAgICAgICAgdGhpcy5fbGluZU9mZnNldHMgPSB2b2lkIDA7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJVbmtub3duIGNoYW5nZSBldmVudCByZWNlaXZlZFwiKTtcbiAgICAgIH1cbiAgICB9XG4gICAgdGhpcy5fdmVyc2lvbiA9IHZlcnNpb247XG4gIH1cbiAgZ2V0TGluZU9mZnNldHMoKSB7XG4gICAgaWYgKHRoaXMuX2xpbmVPZmZzZXRzID09PSB2b2lkIDApIHtcbiAgICAgIHRoaXMuX2xpbmVPZmZzZXRzID0gY29tcHV0ZUxpbmVPZmZzZXRzKHRoaXMuX2NvbnRlbnQsIHRydWUpO1xuICAgIH1cbiAgICByZXR1cm4gdGhpcy5fbGluZU9mZnNldHM7XG4gIH1cbiAgcG9zaXRpb25BdChvZmZzZXQpIHtcbiAgICBvZmZzZXQgPSBNYXRoLm1heChNYXRoLm1pbihvZmZzZXQsIHRoaXMuX2NvbnRlbnQubGVuZ3RoKSwgMCk7XG4gICAgbGV0IGxpbmVPZmZzZXRzID0gdGhpcy5nZXRMaW5lT2Zmc2V0cygpO1xuICAgIGxldCBsb3cgPSAwLCBoaWdoID0gbGluZU9mZnNldHMubGVuZ3RoO1xuICAgIGlmIChoaWdoID09PSAwKSB7XG4gICAgICByZXR1cm4geyBsaW5lOiAwLCBjaGFyYWN0ZXI6IG9mZnNldCB9O1xuICAgIH1cbiAgICB3aGlsZSAobG93IDwgaGlnaCkge1xuICAgICAgbGV0IG1pZCA9IE1hdGguZmxvb3IoKGxvdyArIGhpZ2gpIC8gMik7XG4gICAgICBpZiAobGluZU9mZnNldHNbbWlkXSA+IG9mZnNldCkge1xuICAgICAgICBoaWdoID0gbWlkO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgbG93ID0gbWlkICsgMTtcbiAgICAgIH1cbiAgICB9XG4gICAgbGV0IGxpbmUgPSBsb3cgLSAxO1xuICAgIHJldHVybiB7IGxpbmUsIGNoYXJhY3Rlcjogb2Zmc2V0IC0gbGluZU9mZnNldHNbbGluZV0gfTtcbiAgfVxuICBvZmZzZXRBdChwb3NpdGlvbikge1xuICAgIGxldCBsaW5lT2Zmc2V0cyA9IHRoaXMuZ2V0TGluZU9mZnNldHMoKTtcbiAgICBpZiAocG9zaXRpb24ubGluZSA+PSBsaW5lT2Zmc2V0cy5sZW5ndGgpIHtcbiAgICAgIHJldHVybiB0aGlzLl9jb250ZW50Lmxlbmd0aDtcbiAgICB9IGVsc2UgaWYgKHBvc2l0aW9uLmxpbmUgPCAwKSB7XG4gICAgICByZXR1cm4gMDtcbiAgICB9XG4gICAgbGV0IGxpbmVPZmZzZXQgPSBsaW5lT2Zmc2V0c1twb3NpdGlvbi5saW5lXTtcbiAgICBsZXQgbmV4dExpbmVPZmZzZXQgPSBwb3NpdGlvbi5saW5lICsgMSA8IGxpbmVPZmZzZXRzLmxlbmd0aCA/IGxpbmVPZmZzZXRzW3Bvc2l0aW9uLmxpbmUgKyAxXSA6IHRoaXMuX2NvbnRlbnQubGVuZ3RoO1xuICAgIHJldHVybiBNYXRoLm1heChNYXRoLm1pbihsaW5lT2Zmc2V0ICsgcG9zaXRpb24uY2hhcmFjdGVyLCBuZXh0TGluZU9mZnNldCksIGxpbmVPZmZzZXQpO1xuICB9XG4gIGdldCBsaW5lQ291bnQoKSB7XG4gICAgcmV0dXJuIHRoaXMuZ2V0TGluZU9mZnNldHMoKS5sZW5ndGg7XG4gIH1cbiAgc3RhdGljIGlzSW5jcmVtZW50YWwoZXZlbnQpIHtcbiAgICBsZXQgY2FuZGlkYXRlID0gZXZlbnQ7XG4gICAgcmV0dXJuIGNhbmRpZGF0ZSAhPT0gdm9pZCAwICYmIGNhbmRpZGF0ZSAhPT0gbnVsbCAmJiB0eXBlb2YgY2FuZGlkYXRlLnRleHQgPT09IFwic3RyaW5nXCIgJiYgY2FuZGlkYXRlLnJhbmdlICE9PSB2b2lkIDAgJiYgKGNhbmRpZGF0ZS5yYW5nZUxlbmd0aCA9PT0gdm9pZCAwIHx8IHR5cGVvZiBjYW5kaWRhdGUucmFuZ2VMZW5ndGggPT09IFwibnVtYmVyXCIpO1xuICB9XG4gIHN0YXRpYyBpc0Z1bGwoZXZlbnQpIHtcbiAgICBsZXQgY2FuZGlkYXRlID0gZXZlbnQ7XG4gICAgcmV0dXJuIGNhbmRpZGF0ZSAhPT0gdm9pZCAwICYmIGNhbmRpZGF0ZSAhPT0gbnVsbCAmJiB0eXBlb2YgY2FuZGlkYXRlLnRleHQgPT09IFwic3RyaW5nXCIgJiYgY2FuZGlkYXRlLnJhbmdlID09PSB2b2lkIDAgJiYgY2FuZGlkYXRlLnJhbmdlTGVuZ3RoID09PSB2b2lkIDA7XG4gIH1cbn07XG52YXIgVGV4dERvY3VtZW50MjtcbihmdW5jdGlvbihUZXh0RG9jdW1lbnQzKSB7XG4gIGZ1bmN0aW9uIGNyZWF0ZSh1cmksIGxhbmd1YWdlSWQsIHZlcnNpb24sIGNvbnRlbnQpIHtcbiAgICByZXR1cm4gbmV3IEZ1bGxUZXh0RG9jdW1lbnQyKHVyaSwgbGFuZ3VhZ2VJZCwgdmVyc2lvbiwgY29udGVudCk7XG4gIH1cbiAgVGV4dERvY3VtZW50My5jcmVhdGUgPSBjcmVhdGU7XG4gIGZ1bmN0aW9uIHVwZGF0ZShkb2N1bWVudCwgY2hhbmdlcywgdmVyc2lvbikge1xuICAgIGlmIChkb2N1bWVudCBpbnN0YW5jZW9mIEZ1bGxUZXh0RG9jdW1lbnQyKSB7XG4gICAgICBkb2N1bWVudC51cGRhdGUoY2hhbmdlcywgdmVyc2lvbik7XG4gICAgICByZXR1cm4gZG9jdW1lbnQ7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihcIlRleHREb2N1bWVudC51cGRhdGU6IGRvY3VtZW50IG11c3QgYmUgY3JlYXRlZCBieSBUZXh0RG9jdW1lbnQuY3JlYXRlXCIpO1xuICAgIH1cbiAgfVxuICBUZXh0RG9jdW1lbnQzLnVwZGF0ZSA9IHVwZGF0ZTtcbiAgZnVuY3Rpb24gYXBwbHlFZGl0cyhkb2N1bWVudCwgZWRpdHMpIHtcbiAgICBsZXQgdGV4dCA9IGRvY3VtZW50LmdldFRleHQoKTtcbiAgICBsZXQgc29ydGVkRWRpdHMgPSBtZXJnZVNvcnQoZWRpdHMubWFwKGdldFdlbGxmb3JtZWRFZGl0KSwgKGEyLCBiKSA9PiB7XG4gICAgICBsZXQgZGlmZiA9IGEyLnJhbmdlLnN0YXJ0LmxpbmUgLSBiLnJhbmdlLnN0YXJ0LmxpbmU7XG4gICAgICBpZiAoZGlmZiA9PT0gMCkge1xuICAgICAgICByZXR1cm4gYTIucmFuZ2Uuc3RhcnQuY2hhcmFjdGVyIC0gYi5yYW5nZS5zdGFydC5jaGFyYWN0ZXI7XG4gICAgICB9XG4gICAgICByZXR1cm4gZGlmZjtcbiAgICB9KTtcbiAgICBsZXQgbGFzdE1vZGlmaWVkT2Zmc2V0ID0gMDtcbiAgICBjb25zdCBzcGFucyA9IFtdO1xuICAgIGZvciAoY29uc3QgZSBvZiBzb3J0ZWRFZGl0cykge1xuICAgICAgbGV0IHN0YXJ0T2Zmc2V0ID0gZG9jdW1lbnQub2Zmc2V0QXQoZS5yYW5nZS5zdGFydCk7XG4gICAgICBpZiAoc3RhcnRPZmZzZXQgPCBsYXN0TW9kaWZpZWRPZmZzZXQpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiT3ZlcmxhcHBpbmcgZWRpdFwiKTtcbiAgICAgIH0gZWxzZSBpZiAoc3RhcnRPZmZzZXQgPiBsYXN0TW9kaWZpZWRPZmZzZXQpIHtcbiAgICAgICAgc3BhbnMucHVzaCh0ZXh0LnN1YnN0cmluZyhsYXN0TW9kaWZpZWRPZmZzZXQsIHN0YXJ0T2Zmc2V0KSk7XG4gICAgICB9XG4gICAgICBpZiAoZS5uZXdUZXh0Lmxlbmd0aCkge1xuICAgICAgICBzcGFucy5wdXNoKGUubmV3VGV4dCk7XG4gICAgICB9XG4gICAgICBsYXN0TW9kaWZpZWRPZmZzZXQgPSBkb2N1bWVudC5vZmZzZXRBdChlLnJhbmdlLmVuZCk7XG4gICAgfVxuICAgIHNwYW5zLnB1c2godGV4dC5zdWJzdHIobGFzdE1vZGlmaWVkT2Zmc2V0KSk7XG4gICAgcmV0dXJuIHNwYW5zLmpvaW4oXCJcIik7XG4gIH1cbiAgVGV4dERvY3VtZW50My5hcHBseUVkaXRzID0gYXBwbHlFZGl0cztcbn0pKFRleHREb2N1bWVudDIgfHwgKFRleHREb2N1bWVudDIgPSB7fSkpO1xuZnVuY3Rpb24gbWVyZ2VTb3J0KGRhdGEsIGNvbXBhcmUpIHtcbiAgaWYgKGRhdGEubGVuZ3RoIDw9IDEpIHtcbiAgICByZXR1cm4gZGF0YTtcbiAgfVxuICBjb25zdCBwID0gZGF0YS5sZW5ndGggLyAyIHwgMDtcbiAgY29uc3QgbGVmdCA9IGRhdGEuc2xpY2UoMCwgcCk7XG4gIGNvbnN0IHJpZ2h0ID0gZGF0YS5zbGljZShwKTtcbiAgbWVyZ2VTb3J0KGxlZnQsIGNvbXBhcmUpO1xuICBtZXJnZVNvcnQocmlnaHQsIGNvbXBhcmUpO1xuICBsZXQgbGVmdElkeCA9IDA7XG4gIGxldCByaWdodElkeCA9IDA7XG4gIGxldCBpID0gMDtcbiAgd2hpbGUgKGxlZnRJZHggPCBsZWZ0Lmxlbmd0aCAmJiByaWdodElkeCA8IHJpZ2h0Lmxlbmd0aCkge1xuICAgIGxldCByZXQgPSBjb21wYXJlKGxlZnRbbGVmdElkeF0sIHJpZ2h0W3JpZ2h0SWR4XSk7XG4gICAgaWYgKHJldCA8PSAwKSB7XG4gICAgICBkYXRhW2krK10gPSBsZWZ0W2xlZnRJZHgrK107XG4gICAgfSBlbHNlIHtcbiAgICAgIGRhdGFbaSsrXSA9IHJpZ2h0W3JpZ2h0SWR4KytdO1xuICAgIH1cbiAgfVxuICB3aGlsZSAobGVmdElkeCA8IGxlZnQubGVuZ3RoKSB7XG4gICAgZGF0YVtpKytdID0gbGVmdFtsZWZ0SWR4KytdO1xuICB9XG4gIHdoaWxlIChyaWdodElkeCA8IHJpZ2h0Lmxlbmd0aCkge1xuICAgIGRhdGFbaSsrXSA9IHJpZ2h0W3JpZ2h0SWR4KytdO1xuICB9XG4gIHJldHVybiBkYXRhO1xufVxuZnVuY3Rpb24gY29tcHV0ZUxpbmVPZmZzZXRzKHRleHQsIGlzQXRMaW5lU3RhcnQsIHRleHRPZmZzZXQgPSAwKSB7XG4gIGNvbnN0IHJlc3VsdCA9IGlzQXRMaW5lU3RhcnQgPyBbdGV4dE9mZnNldF0gOiBbXTtcbiAgZm9yIChsZXQgaSA9IDA7IGkgPCB0ZXh0Lmxlbmd0aDsgaSsrKSB7XG4gICAgbGV0IGNoID0gdGV4dC5jaGFyQ29kZUF0KGkpO1xuICAgIGlmIChjaCA9PT0gMTMgfHwgY2ggPT09IDEwKSB7XG4gICAgICBpZiAoY2ggPT09IDEzICYmIGkgKyAxIDwgdGV4dC5sZW5ndGggJiYgdGV4dC5jaGFyQ29kZUF0KGkgKyAxKSA9PT0gMTApIHtcbiAgICAgICAgaSsrO1xuICAgICAgfVxuICAgICAgcmVzdWx0LnB1c2godGV4dE9mZnNldCArIGkgKyAxKTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHJlc3VsdDtcbn1cbmZ1bmN0aW9uIGdldFdlbGxmb3JtZWRSYW5nZShyYW5nZSkge1xuICBjb25zdCBzdGFydCA9IHJhbmdlLnN0YXJ0O1xuICBjb25zdCBlbmQgPSByYW5nZS5lbmQ7XG4gIGlmIChzdGFydC5saW5lID4gZW5kLmxpbmUgfHwgc3RhcnQubGluZSA9PT0gZW5kLmxpbmUgJiYgc3RhcnQuY2hhcmFjdGVyID4gZW5kLmNoYXJhY3Rlcikge1xuICAgIHJldHVybiB7IHN0YXJ0OiBlbmQsIGVuZDogc3RhcnQgfTtcbiAgfVxuICByZXR1cm4gcmFuZ2U7XG59XG5mdW5jdGlvbiBnZXRXZWxsZm9ybWVkRWRpdCh0ZXh0RWRpdCkge1xuICBjb25zdCByYW5nZSA9IGdldFdlbGxmb3JtZWRSYW5nZSh0ZXh0RWRpdC5yYW5nZSk7XG4gIGlmIChyYW5nZSAhPT0gdGV4dEVkaXQucmFuZ2UpIHtcbiAgICByZXR1cm4geyBuZXdUZXh0OiB0ZXh0RWRpdC5uZXdUZXh0LCByYW5nZSB9O1xuICB9XG4gIHJldHVybiB0ZXh0RWRpdDtcbn1cblxuLy8gbm9kZV9tb2R1bGVzL3ZzY29kZS1qc29uLWxhbmd1YWdlc2VydmljZS9saWIvZXNtL2pzb25MYW5ndWFnZVR5cGVzLmpzXG52YXIgRXJyb3JDb2RlO1xuKGZ1bmN0aW9uKEVycm9yQ29kZTIpIHtcbiAgRXJyb3JDb2RlMltFcnJvckNvZGUyW1wiVW5kZWZpbmVkXCJdID0gMF0gPSBcIlVuZGVmaW5lZFwiO1xuICBFcnJvckNvZGUyW0Vycm9yQ29kZTJbXCJFbnVtVmFsdWVNaXNtYXRjaFwiXSA9IDFdID0gXCJFbnVtVmFsdWVNaXNtYXRjaFwiO1xuICBFcnJvckNvZGUyW0Vycm9yQ29kZTJbXCJEZXByZWNhdGVkXCJdID0gMl0gPSBcIkRlcHJlY2F0ZWRcIjtcbiAgRXJyb3JDb2RlMltFcnJvckNvZGUyW1wiVW5leHBlY3RlZEVuZE9mQ29tbWVudFwiXSA9IDI1N10gPSBcIlVuZXhwZWN0ZWRFbmRPZkNvbW1lbnRcIjtcbiAgRXJyb3JDb2RlMltFcnJvckNvZGUyW1wiVW5leHBlY3RlZEVuZE9mU3RyaW5nXCJdID0gMjU4XSA9IFwiVW5leHBlY3RlZEVuZE9mU3RyaW5nXCI7XG4gIEVycm9yQ29kZTJbRXJyb3JDb2RlMltcIlVuZXhwZWN0ZWRFbmRPZk51bWJlclwiXSA9IDI1OV0gPSBcIlVuZXhwZWN0ZWRFbmRPZk51bWJlclwiO1xuICBFcnJvckNvZGUyW0Vycm9yQ29kZTJbXCJJbnZhbGlkVW5pY29kZVwiXSA9IDI2MF0gPSBcIkludmFsaWRVbmljb2RlXCI7XG4gIEVycm9yQ29kZTJbRXJyb3JDb2RlMltcIkludmFsaWRFc2NhcGVDaGFyYWN0ZXJcIl0gPSAyNjFdID0gXCJJbnZhbGlkRXNjYXBlQ2hhcmFjdGVyXCI7XG4gIEVycm9yQ29kZTJbRXJyb3JDb2RlMltcIkludmFsaWRDaGFyYWN0ZXJcIl0gPSAyNjJdID0gXCJJbnZhbGlkQ2hhcmFjdGVyXCI7XG4gIEVycm9yQ29kZTJbRXJyb3JDb2RlMltcIlByb3BlcnR5RXhwZWN0ZWRcIl0gPSA1MTNdID0gXCJQcm9wZXJ0eUV4cGVjdGVkXCI7XG4gIEVycm9yQ29kZTJbRXJyb3JDb2RlMltcIkNvbW1hRXhwZWN0ZWRcIl0gPSA1MTRdID0gXCJDb21tYUV4cGVjdGVkXCI7XG4gIEVycm9yQ29kZTJbRXJyb3JDb2RlMltcIkNvbG9uRXhwZWN0ZWRcIl0gPSA1MTVdID0gXCJDb2xvbkV4cGVjdGVkXCI7XG4gIEVycm9yQ29kZTJbRXJyb3JDb2RlMltcIlZhbHVlRXhwZWN0ZWRcIl0gPSA1MTZdID0gXCJWYWx1ZUV4cGVjdGVkXCI7XG4gIEVycm9yQ29kZTJbRXJyb3JDb2RlMltcIkNvbW1hT3JDbG9zZUJhY2tldEV4cGVjdGVkXCJdID0gNTE3XSA9IFwiQ29tbWFPckNsb3NlQmFja2V0RXhwZWN0ZWRcIjtcbiAgRXJyb3JDb2RlMltFcnJvckNvZGUyW1wiQ29tbWFPckNsb3NlQnJhY2VFeHBlY3RlZFwiXSA9IDUxOF0gPSBcIkNvbW1hT3JDbG9zZUJyYWNlRXhwZWN0ZWRcIjtcbiAgRXJyb3JDb2RlMltFcnJvckNvZGUyW1wiVHJhaWxpbmdDb21tYVwiXSA9IDUxOV0gPSBcIlRyYWlsaW5nQ29tbWFcIjtcbiAgRXJyb3JDb2RlMltFcnJvckNvZGUyW1wiRHVwbGljYXRlS2V5XCJdID0gNTIwXSA9IFwiRHVwbGljYXRlS2V5XCI7XG4gIEVycm9yQ29kZTJbRXJyb3JDb2RlMltcIkNvbW1lbnROb3RQZXJtaXR0ZWRcIl0gPSA1MjFdID0gXCJDb21tZW50Tm90UGVybWl0dGVkXCI7XG4gIEVycm9yQ29kZTJbRXJyb3JDb2RlMltcIlByb3BlcnR5S2V5c011c3RCZURvdWJsZXF1b3RlZFwiXSA9IDUyOF0gPSBcIlByb3BlcnR5S2V5c011c3RCZURvdWJsZXF1b3RlZFwiO1xuICBFcnJvckNvZGUyW0Vycm9yQ29kZTJbXCJTY2hlbWFSZXNvbHZlRXJyb3JcIl0gPSA3NjhdID0gXCJTY2hlbWFSZXNvbHZlRXJyb3JcIjtcbiAgRXJyb3JDb2RlMltFcnJvckNvZGUyW1wiU2NoZW1hVW5zdXBwb3J0ZWRGZWF0dXJlXCJdID0gNzY5XSA9IFwiU2NoZW1hVW5zdXBwb3J0ZWRGZWF0dXJlXCI7XG59KShFcnJvckNvZGUgfHwgKEVycm9yQ29kZSA9IHt9KSk7XG52YXIgU2NoZW1hRHJhZnQ7XG4oZnVuY3Rpb24oU2NoZW1hRHJhZnQyKSB7XG4gIFNjaGVtYURyYWZ0MltTY2hlbWFEcmFmdDJbXCJ2M1wiXSA9IDNdID0gXCJ2M1wiO1xuICBTY2hlbWFEcmFmdDJbU2NoZW1hRHJhZnQyW1widjRcIl0gPSA0XSA9IFwidjRcIjtcbiAgU2NoZW1hRHJhZnQyW1NjaGVtYURyYWZ0MltcInY2XCJdID0gNl0gPSBcInY2XCI7XG4gIFNjaGVtYURyYWZ0MltTY2hlbWFEcmFmdDJbXCJ2N1wiXSA9IDddID0gXCJ2N1wiO1xuICBTY2hlbWFEcmFmdDJbU2NoZW1hRHJhZnQyW1widjIwMTlfMDlcIl0gPSAxOV0gPSBcInYyMDE5XzA5XCI7XG4gIFNjaGVtYURyYWZ0MltTY2hlbWFEcmFmdDJbXCJ2MjAyMF8xMlwiXSA9IDIwXSA9IFwidjIwMjBfMTJcIjtcbn0pKFNjaGVtYURyYWZ0IHx8IChTY2hlbWFEcmFmdCA9IHt9KSk7XG52YXIgQ2xpZW50Q2FwYWJpbGl0aWVzO1xuKGZ1bmN0aW9uKENsaWVudENhcGFiaWxpdGllczIpIHtcbiAgQ2xpZW50Q2FwYWJpbGl0aWVzMi5MQVRFU1QgPSB7XG4gICAgdGV4dERvY3VtZW50OiB7XG4gICAgICBjb21wbGV0aW9uOiB7XG4gICAgICAgIGNvbXBsZXRpb25JdGVtOiB7XG4gICAgICAgICAgZG9jdW1lbnRhdGlvbkZvcm1hdDogW01hcmt1cEtpbmQuTWFya2Rvd24sIE1hcmt1cEtpbmQuUGxhaW5UZXh0XSxcbiAgICAgICAgICBjb21taXRDaGFyYWN0ZXJzU3VwcG9ydDogdHJ1ZSxcbiAgICAgICAgICBsYWJlbERldGFpbHNTdXBwb3J0OiB0cnVlXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH07XG59KShDbGllbnRDYXBhYmlsaXRpZXMgfHwgKENsaWVudENhcGFiaWxpdGllcyA9IHt9KSk7XG5cbi8vIG5vZGVfbW9kdWxlcy9AdnNjb2RlL2wxMG4vZGlzdC9icm93c2VyLmpzXG52YXIgYnVuZGxlO1xuZnVuY3Rpb24gdCguLi5hcmdzKSB7XG4gIGNvbnN0IGZpcnN0QXJnID0gYXJnc1swXTtcbiAgbGV0IGtleTtcbiAgbGV0IG1lc3NhZ2U7XG4gIGxldCBmb3JtYXRBcmdzO1xuICBpZiAodHlwZW9mIGZpcnN0QXJnID09PSBcInN0cmluZ1wiKSB7XG4gICAga2V5ID0gZmlyc3RBcmc7XG4gICAgbWVzc2FnZSA9IGZpcnN0QXJnO1xuICAgIGFyZ3Muc3BsaWNlKDAsIDEpO1xuICAgIGZvcm1hdEFyZ3MgPSAhYXJncyB8fCB0eXBlb2YgYXJnc1swXSAhPT0gXCJvYmplY3RcIiA/IGFyZ3MgOiBhcmdzWzBdO1xuICB9IGVsc2UgaWYgKGZpcnN0QXJnIGluc3RhbmNlb2YgQXJyYXkpIHtcbiAgICBjb25zdCByZXBsYWNlbWVudHMgPSBhcmdzLnNsaWNlKDEpO1xuICAgIGlmIChmaXJzdEFyZy5sZW5ndGggIT09IHJlcGxhY2VtZW50cy5sZW5ndGggKyAxKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXCJleHBlY3RlZCBhIHN0cmluZyBhcyB0aGUgZmlyc3QgYXJndW1lbnQgdG8gbDEwbi50XCIpO1xuICAgIH1cbiAgICBsZXQgc3RyID0gZmlyc3RBcmdbMF07XG4gICAgZm9yIChsZXQgaSA9IDE7IGkgPCBmaXJzdEFyZy5sZW5ndGg7IGkrKykge1xuICAgICAgc3RyICs9IGB7JHtpIC0gMX19YCArIGZpcnN0QXJnW2ldO1xuICAgIH1cbiAgICByZXR1cm4gdChzdHIsIC4uLnJlcGxhY2VtZW50cyk7XG4gIH0gZWxzZSB7XG4gICAgbWVzc2FnZSA9IGZpcnN0QXJnLm1lc3NhZ2U7XG4gICAga2V5ID0gbWVzc2FnZTtcbiAgICBpZiAoZmlyc3RBcmcuY29tbWVudCAmJiBmaXJzdEFyZy5jb21tZW50Lmxlbmd0aCA+IDApIHtcbiAgICAgIGtleSArPSBgLyR7QXJyYXkuaXNBcnJheShmaXJzdEFyZy5jb21tZW50KSA/IGZpcnN0QXJnLmNvbW1lbnQuam9pbihcIlwiKSA6IGZpcnN0QXJnLmNvbW1lbnR9YDtcbiAgICB9XG4gICAgZm9ybWF0QXJncyA9IGZpcnN0QXJnLmFyZ3MgPz8ge307XG4gIH1cbiAgY29uc3QgbWVzc2FnZUZyb21CdW5kbGUgPSBidW5kbGU/LltrZXldO1xuICBpZiAoIW1lc3NhZ2VGcm9tQnVuZGxlKSB7XG4gICAgcmV0dXJuIGZvcm1hdDMobWVzc2FnZSwgZm9ybWF0QXJncyk7XG4gIH1cbiAgaWYgKHR5cGVvZiBtZXNzYWdlRnJvbUJ1bmRsZSA9PT0gXCJzdHJpbmdcIikge1xuICAgIHJldHVybiBmb3JtYXQzKG1lc3NhZ2VGcm9tQnVuZGxlLCBmb3JtYXRBcmdzKTtcbiAgfVxuICBpZiAobWVzc2FnZUZyb21CdW5kbGUuY29tbWVudCkge1xuICAgIHJldHVybiBmb3JtYXQzKG1lc3NhZ2VGcm9tQnVuZGxlLm1lc3NhZ2UsIGZvcm1hdEFyZ3MpO1xuICB9XG4gIHJldHVybiBmb3JtYXQzKG1lc3NhZ2UsIGZvcm1hdEFyZ3MpO1xufVxudmFyIF9mb3JtYXQyUmVnZXhwID0gL3soW159XSspfS9nO1xuZnVuY3Rpb24gZm9ybWF0Myh0ZW1wbGF0ZSwgdmFsdWVzKSB7XG4gIGlmIChPYmplY3Qua2V5cyh2YWx1ZXMpLmxlbmd0aCA9PT0gMCkge1xuICAgIHJldHVybiB0ZW1wbGF0ZTtcbiAgfVxuICByZXR1cm4gdGVtcGxhdGUucmVwbGFjZShfZm9ybWF0MlJlZ2V4cCwgKG1hdGNoLCBncm91cCkgPT4gdmFsdWVzW2dyb3VwXSA/PyBtYXRjaCk7XG59XG5cbi8vIG5vZGVfbW9kdWxlcy92c2NvZGUtanNvbi1sYW5ndWFnZXNlcnZpY2UvbGliL2VzbS9wYXJzZXIvanNvblBhcnNlci5qc1xudmFyIGZvcm1hdHMgPSB7XG4gIFwiY29sb3ItaGV4XCI6IHsgZXJyb3JNZXNzYWdlOiB0KFwiSW52YWxpZCBjb2xvciBmb3JtYXQuIFVzZSAjUkdCLCAjUkdCQSwgI1JSR0dCQiBvciAjUlJHR0JCQUEuXCIpLCBwYXR0ZXJuOiAvXiMoWzAtOUEtRmEtZl17Myw0fXwoWzAtOUEtRmEtZl17Mn0pezMsNH0pJC8gfSxcbiAgXCJkYXRlLXRpbWVcIjogeyBlcnJvck1lc3NhZ2U6IHQoXCJTdHJpbmcgaXMgbm90IGEgUkZDMzMzOSBkYXRlLXRpbWUuXCIpLCBwYXR0ZXJuOiAvXihcXGR7NH0pLSgwWzEtOV18MVswLTJdKS0oMFsxLTldfFsxMl1bMC05XXwzWzAxXSlUKFswMV1bMC05XXwyWzAtM10pOihbMC01XVswLTldKTooWzAtNV1bMC05XXw2MCkoXFwuWzAtOV0rKT8oWnwoXFwrfC0pKFswMV1bMC05XXwyWzAtM10pOihbMC01XVswLTldKSkkL2kgfSxcbiAgXCJkYXRlXCI6IHsgZXJyb3JNZXNzYWdlOiB0KFwiU3RyaW5nIGlzIG5vdCBhIFJGQzMzMzkgZGF0ZS5cIiksIHBhdHRlcm46IC9eKFxcZHs0fSktKDBbMS05XXwxWzAtMl0pLSgwWzEtOV18WzEyXVswLTldfDNbMDFdKSQvaSB9LFxuICBcInRpbWVcIjogeyBlcnJvck1lc3NhZ2U6IHQoXCJTdHJpbmcgaXMgbm90IGEgUkZDMzMzOSB0aW1lLlwiKSwgcGF0dGVybjogL14oWzAxXVswLTldfDJbMC0zXSk6KFswLTVdWzAtOV0pOihbMC01XVswLTldfDYwKShcXC5bMC05XSspPyhafChcXCt8LSkoWzAxXVswLTldfDJbMC0zXSk6KFswLTVdWzAtOV0pKSQvaSB9LFxuICBcImVtYWlsXCI6IHsgZXJyb3JNZXNzYWdlOiB0KFwiU3RyaW5nIGlzIG5vdCBhbiBlLW1haWwgYWRkcmVzcy5cIiksIHBhdHRlcm46IC9eKChbXjw+KClcXFtcXF1cXFxcLiw7Olxcc0BcIl0rKFxcLltePD4oKVxcW1xcXVxcXFwuLDs6XFxzQFwiXSspKil8KFwiLitcIikpQCgoXFxbWzAtOV17MSwzfVxcLlswLTldezEsM31cXC5bMC05XXsxLDN9XFwuWzAtOV17MSwzfV0pfCgoW2EtekEtWjAtOS1dK1xcLikrW2EtekEtWl17Mix9KSkkLyB9LFxuICBcImhvc3RuYW1lXCI6IHsgZXJyb3JNZXNzYWdlOiB0KFwiU3RyaW5nIGlzIG5vdCBhIGhvc3RuYW1lLlwiKSwgcGF0dGVybjogL14oPz0uezEsMjUzfVxcLj8kKVthLXowLTldKD86W2EtejAtOS1dezAsNjF9W2EtejAtOV0pPyg/OlxcLlthLXowLTldKD86Wy0wLTlhLXpdezAsNjF9WzAtOWEtel0pPykqXFwuPyQvaSB9LFxuICBcImlwdjRcIjogeyBlcnJvck1lc3NhZ2U6IHQoXCJTdHJpbmcgaXMgbm90IGFuIElQdjQgYWRkcmVzcy5cIiksIHBhdHRlcm46IC9eKD86KD86MjVbMC01XXwyWzAtNF1cXGR8MVxcZFxcZHxbMS05XT9cXGQpXFwuKXszfSg/OjI1WzAtNV18MlswLTRdXFxkfDFcXGRcXGR8WzEtOV0/XFxkKSQvIH0sXG4gIFwiaXB2NlwiOiB7IGVycm9yTWVzc2FnZTogdChcIlN0cmluZyBpcyBub3QgYW4gSVB2NiBhZGRyZXNzLlwiKSwgcGF0dGVybjogL14oKChbMC05YS1mXXsxLDR9Oil7N30oWzAtOWEtZl17MSw0fXw6KSl8KChbMC05YS1mXXsxLDR9Oil7Nn0oOlswLTlhLWZdezEsNH18KCgyNVswLTVdfDJbMC00XVxcZHwxXFxkXFxkfFsxLTldP1xcZCkoXFwuKDI1WzAtNV18MlswLTRdXFxkfDFcXGRcXGR8WzEtOV0/XFxkKSl7M30pfDopKXwoKFswLTlhLWZdezEsNH06KXs1fSgoKDpbMC05YS1mXXsxLDR9KXsxLDJ9KXw6KCgyNVswLTVdfDJbMC00XVxcZHwxXFxkXFxkfFsxLTldP1xcZCkoXFwuKDI1WzAtNV18MlswLTRdXFxkfDFcXGRcXGR8WzEtOV0/XFxkKSl7M30pfDopKXwoKFswLTlhLWZdezEsNH06KXs0fSgoKDpbMC05YS1mXXsxLDR9KXsxLDN9KXwoKDpbMC05YS1mXXsxLDR9KT86KCgyNVswLTVdfDJbMC00XVxcZHwxXFxkXFxkfFsxLTldP1xcZCkoXFwuKDI1WzAtNV18MlswLTRdXFxkfDFcXGRcXGR8WzEtOV0/XFxkKSl7M30pKXw6KSl8KChbMC05YS1mXXsxLDR9Oil7M30oKCg6WzAtOWEtZl17MSw0fSl7MSw0fSl8KCg6WzAtOWEtZl17MSw0fSl7MCwyfTooKDI1WzAtNV18MlswLTRdXFxkfDFcXGRcXGR8WzEtOV0/XFxkKShcXC4oMjVbMC01XXwyWzAtNF1cXGR8MVxcZFxcZHxbMS05XT9cXGQpKXszfSkpfDopKXwoKFswLTlhLWZdezEsNH06KXsyfSgoKDpbMC05YS1mXXsxLDR9KXsxLDV9KXwoKDpbMC05YS1mXXsxLDR9KXswLDN9OigoMjVbMC01XXwyWzAtNF1cXGR8MVxcZFxcZHxbMS05XT9cXGQpKFxcLigyNVswLTVdfDJbMC00XVxcZHwxXFxkXFxkfFsxLTldP1xcZCkpezN9KSl8OikpfCgoWzAtOWEtZl17MSw0fTopezF9KCgoOlswLTlhLWZdezEsNH0pezEsNn0pfCgoOlswLTlhLWZdezEsNH0pezAsNH06KCgyNVswLTVdfDJbMC00XVxcZHwxXFxkXFxkfFsxLTldP1xcZCkoXFwuKDI1WzAtNV18MlswLTRdXFxkfDFcXGRcXGR8WzEtOV0/XFxkKSl7M30pKXw6KSl8KDooKCg6WzAtOWEtZl17MSw0fSl7MSw3fSl8KCg6WzAtOWEtZl17MSw0fSl7MCw1fTooKDI1WzAtNV18MlswLTRdXFxkfDFcXGRcXGR8WzEtOV0/XFxkKShcXC4oMjVbMC01XXwyWzAtNF1cXGR8MVxcZFxcZHxbMS05XT9cXGQpKXszfSkpfDopKSkkL2kgfVxufTtcbnZhciBBU1ROb2RlSW1wbCA9IGNsYXNzIHtcbiAgY29uc3RydWN0b3IocGFyZW50LCBvZmZzZXQsIGxlbmd0aCA9IDApIHtcbiAgICB0aGlzLm9mZnNldCA9IG9mZnNldDtcbiAgICB0aGlzLmxlbmd0aCA9IGxlbmd0aDtcbiAgICB0aGlzLnBhcmVudCA9IHBhcmVudDtcbiAgfVxuICBnZXQgY2hpbGRyZW4oKSB7XG4gICAgcmV0dXJuIFtdO1xuICB9XG4gIHRvU3RyaW5nKCkge1xuICAgIHJldHVybiBcInR5cGU6IFwiICsgdGhpcy50eXBlICsgXCIgKFwiICsgdGhpcy5vZmZzZXQgKyBcIi9cIiArIHRoaXMubGVuZ3RoICsgXCIpXCIgKyAodGhpcy5wYXJlbnQgPyBcIiBwYXJlbnQ6IHtcIiArIHRoaXMucGFyZW50LnRvU3RyaW5nKCkgKyBcIn1cIiA6IFwiXCIpO1xuICB9XG59O1xudmFyIE51bGxBU1ROb2RlSW1wbCA9IGNsYXNzIGV4dGVuZHMgQVNUTm9kZUltcGwge1xuICBjb25zdHJ1Y3RvcihwYXJlbnQsIG9mZnNldCkge1xuICAgIHN1cGVyKHBhcmVudCwgb2Zmc2V0KTtcbiAgICB0aGlzLnR5cGUgPSBcIm51bGxcIjtcbiAgICB0aGlzLnZhbHVlID0gbnVsbDtcbiAgfVxufTtcbnZhciBCb29sZWFuQVNUTm9kZUltcGwgPSBjbGFzcyBleHRlbmRzIEFTVE5vZGVJbXBsIHtcbiAgY29uc3RydWN0b3IocGFyZW50LCBib29sVmFsdWUsIG9mZnNldCkge1xuICAgIHN1cGVyKHBhcmVudCwgb2Zmc2V0KTtcbiAgICB0aGlzLnR5cGUgPSBcImJvb2xlYW5cIjtcbiAgICB0aGlzLnZhbHVlID0gYm9vbFZhbHVlO1xuICB9XG59O1xudmFyIEFycmF5QVNUTm9kZUltcGwgPSBjbGFzcyBleHRlbmRzIEFTVE5vZGVJbXBsIHtcbiAgY29uc3RydWN0b3IocGFyZW50LCBvZmZzZXQpIHtcbiAgICBzdXBlcihwYXJlbnQsIG9mZnNldCk7XG4gICAgdGhpcy50eXBlID0gXCJhcnJheVwiO1xuICAgIHRoaXMuaXRlbXMgPSBbXTtcbiAgfVxuICBnZXQgY2hpbGRyZW4oKSB7XG4gICAgcmV0dXJuIHRoaXMuaXRlbXM7XG4gIH1cbn07XG52YXIgTnVtYmVyQVNUTm9kZUltcGwgPSBjbGFzcyBleHRlbmRzIEFTVE5vZGVJbXBsIHtcbiAgY29uc3RydWN0b3IocGFyZW50LCBvZmZzZXQpIHtcbiAgICBzdXBlcihwYXJlbnQsIG9mZnNldCk7XG4gICAgdGhpcy50eXBlID0gXCJudW1iZXJcIjtcbiAgICB0aGlzLmlzSW50ZWdlciA9IHRydWU7XG4gICAgdGhpcy52YWx1ZSA9IE51bWJlci5OYU47XG4gIH1cbn07XG52YXIgU3RyaW5nQVNUTm9kZUltcGwgPSBjbGFzcyBleHRlbmRzIEFTVE5vZGVJbXBsIHtcbiAgY29uc3RydWN0b3IocGFyZW50LCBvZmZzZXQsIGxlbmd0aCkge1xuICAgIHN1cGVyKHBhcmVudCwgb2Zmc2V0LCBsZW5ndGgpO1xuICAgIHRoaXMudHlwZSA9IFwic3RyaW5nXCI7XG4gICAgdGhpcy52YWx1ZSA9IFwiXCI7XG4gIH1cbn07XG52YXIgUHJvcGVydHlBU1ROb2RlSW1wbCA9IGNsYXNzIGV4dGVuZHMgQVNUTm9kZUltcGwge1xuICBjb25zdHJ1Y3RvcihwYXJlbnQsIG9mZnNldCwga2V5Tm9kZSkge1xuICAgIHN1cGVyKHBhcmVudCwgb2Zmc2V0KTtcbiAgICB0aGlzLnR5cGUgPSBcInByb3BlcnR5XCI7XG4gICAgdGhpcy5jb2xvbk9mZnNldCA9IC0xO1xuICAgIHRoaXMua2V5Tm9kZSA9IGtleU5vZGU7XG4gIH1cbiAgZ2V0IGNoaWxkcmVuKCkge1xuICAgIHJldHVybiB0aGlzLnZhbHVlTm9kZSA/IFt0aGlzLmtleU5vZGUsIHRoaXMudmFsdWVOb2RlXSA6IFt0aGlzLmtleU5vZGVdO1xuICB9XG59O1xudmFyIE9iamVjdEFTVE5vZGVJbXBsID0gY2xhc3MgZXh0ZW5kcyBBU1ROb2RlSW1wbCB7XG4gIGNvbnN0cnVjdG9yKHBhcmVudCwgb2Zmc2V0KSB7XG4gICAgc3VwZXIocGFyZW50LCBvZmZzZXQpO1xuICAgIHRoaXMudHlwZSA9IFwib2JqZWN0XCI7XG4gICAgdGhpcy5wcm9wZXJ0aWVzID0gW107XG4gIH1cbiAgZ2V0IGNoaWxkcmVuKCkge1xuICAgIHJldHVybiB0aGlzLnByb3BlcnRpZXM7XG4gIH1cbn07XG5mdW5jdGlvbiBhc1NjaGVtYShzY2hlbWEpIHtcbiAgaWYgKGlzQm9vbGVhbihzY2hlbWEpKSB7XG4gICAgcmV0dXJuIHNjaGVtYSA/IHt9IDogeyBcIm5vdFwiOiB7fSB9O1xuICB9XG4gIHJldHVybiBzY2hlbWE7XG59XG52YXIgRW51bU1hdGNoO1xuKGZ1bmN0aW9uKEVudW1NYXRjaDIpIHtcbiAgRW51bU1hdGNoMltFbnVtTWF0Y2gyW1wiS2V5XCJdID0gMF0gPSBcIktleVwiO1xuICBFbnVtTWF0Y2gyW0VudW1NYXRjaDJbXCJFbnVtXCJdID0gMV0gPSBcIkVudW1cIjtcbn0pKEVudW1NYXRjaCB8fCAoRW51bU1hdGNoID0ge30pKTtcbnZhciBzY2hlbWFEcmFmdEZyb21JZCA9IHtcbiAgXCJodHRwOi8vanNvbi1zY2hlbWEub3JnL2RyYWZ0LTAzL3NjaGVtYSNcIjogU2NoZW1hRHJhZnQudjMsXG4gIFwiaHR0cDovL2pzb24tc2NoZW1hLm9yZy9kcmFmdC0wNC9zY2hlbWEjXCI6IFNjaGVtYURyYWZ0LnY0LFxuICBcImh0dHA6Ly9qc29uLXNjaGVtYS5vcmcvZHJhZnQtMDYvc2NoZW1hI1wiOiBTY2hlbWFEcmFmdC52NixcbiAgXCJodHRwOi8vanNvbi1zY2hlbWEub3JnL2RyYWZ0LTA3L3NjaGVtYSNcIjogU2NoZW1hRHJhZnQudjcsXG4gIFwiaHR0cHM6Ly9qc29uLXNjaGVtYS5vcmcvZHJhZnQvMjAxOS0wOS9zY2hlbWFcIjogU2NoZW1hRHJhZnQudjIwMTlfMDksXG4gIFwiaHR0cHM6Ly9qc29uLXNjaGVtYS5vcmcvZHJhZnQvMjAyMC0xMi9zY2hlbWFcIjogU2NoZW1hRHJhZnQudjIwMjBfMTJcbn07XG52YXIgRXZhbHVhdGlvbkNvbnRleHQgPSBjbGFzcyB7XG4gIGNvbnN0cnVjdG9yKHNjaGVtYURyYWZ0KSB7XG4gICAgdGhpcy5zY2hlbWFEcmFmdCA9IHNjaGVtYURyYWZ0O1xuICB9XG59O1xudmFyIFNjaGVtYUNvbGxlY3RvciA9IGNsYXNzIF9TY2hlbWFDb2xsZWN0b3Ige1xuICBjb25zdHJ1Y3Rvcihmb2N1c09mZnNldCA9IC0xLCBleGNsdWRlKSB7XG4gICAgdGhpcy5mb2N1c09mZnNldCA9IGZvY3VzT2Zmc2V0O1xuICAgIHRoaXMuZXhjbHVkZSA9IGV4Y2x1ZGU7XG4gICAgdGhpcy5zY2hlbWFzID0gW107XG4gIH1cbiAgYWRkKHNjaGVtYSkge1xuICAgIHRoaXMuc2NoZW1hcy5wdXNoKHNjaGVtYSk7XG4gIH1cbiAgbWVyZ2Uob3RoZXIpIHtcbiAgICBBcnJheS5wcm90b3R5cGUucHVzaC5hcHBseSh0aGlzLnNjaGVtYXMsIG90aGVyLnNjaGVtYXMpO1xuICB9XG4gIGluY2x1ZGUobm9kZSkge1xuICAgIHJldHVybiAodGhpcy5mb2N1c09mZnNldCA9PT0gLTEgfHwgY29udGFpbnMyKG5vZGUsIHRoaXMuZm9jdXNPZmZzZXQpKSAmJiBub2RlICE9PSB0aGlzLmV4Y2x1ZGU7XG4gIH1cbiAgbmV3U3ViKCkge1xuICAgIHJldHVybiBuZXcgX1NjaGVtYUNvbGxlY3RvcigtMSwgdGhpcy5leGNsdWRlKTtcbiAgfVxufTtcbnZhciBOb09wU2NoZW1hQ29sbGVjdG9yID0gY2xhc3Mge1xuICBjb25zdHJ1Y3RvcigpIHtcbiAgfVxuICBnZXQgc2NoZW1hcygpIHtcbiAgICByZXR1cm4gW107XG4gIH1cbiAgYWRkKF9zY2hlbWEpIHtcbiAgfVxuICBtZXJnZShfb3RoZXIpIHtcbiAgfVxuICBpbmNsdWRlKF9ub2RlKSB7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cbiAgbmV3U3ViKCkge1xuICAgIHJldHVybiB0aGlzO1xuICB9XG59O1xuTm9PcFNjaGVtYUNvbGxlY3Rvci5pbnN0YW5jZSA9IG5ldyBOb09wU2NoZW1hQ29sbGVjdG9yKCk7XG52YXIgVmFsaWRhdGlvblJlc3VsdCA9IGNsYXNzIHtcbiAgY29uc3RydWN0b3IoKSB7XG4gICAgdGhpcy5wcm9ibGVtcyA9IFtdO1xuICAgIHRoaXMucHJvcGVydGllc01hdGNoZXMgPSAwO1xuICAgIHRoaXMucHJvY2Vzc2VkUHJvcGVydGllcyA9IC8qIEBfX1BVUkVfXyAqLyBuZXcgU2V0KCk7XG4gICAgdGhpcy5wcm9wZXJ0aWVzVmFsdWVNYXRjaGVzID0gMDtcbiAgICB0aGlzLnByaW1hcnlWYWx1ZU1hdGNoZXMgPSAwO1xuICAgIHRoaXMuZW51bVZhbHVlTWF0Y2ggPSBmYWxzZTtcbiAgICB0aGlzLmVudW1WYWx1ZXMgPSB2b2lkIDA7XG4gIH1cbiAgaGFzUHJvYmxlbXMoKSB7XG4gICAgcmV0dXJuICEhdGhpcy5wcm9ibGVtcy5sZW5ndGg7XG4gIH1cbiAgbWVyZ2UodmFsaWRhdGlvblJlc3VsdCkge1xuICAgIHRoaXMucHJvYmxlbXMgPSB0aGlzLnByb2JsZW1zLmNvbmNhdCh2YWxpZGF0aW9uUmVzdWx0LnByb2JsZW1zKTtcbiAgICB0aGlzLnByb3BlcnRpZXNNYXRjaGVzICs9IHZhbGlkYXRpb25SZXN1bHQucHJvcGVydGllc01hdGNoZXM7XG4gICAgdGhpcy5wcm9wZXJ0aWVzVmFsdWVNYXRjaGVzICs9IHZhbGlkYXRpb25SZXN1bHQucHJvcGVydGllc1ZhbHVlTWF0Y2hlcztcbiAgICB0aGlzLm1lcmdlUHJvY2Vzc2VkUHJvcGVydGllcyh2YWxpZGF0aW9uUmVzdWx0KTtcbiAgfVxuICBtZXJnZUVudW1WYWx1ZXModmFsaWRhdGlvblJlc3VsdCkge1xuICAgIGlmICghdGhpcy5lbnVtVmFsdWVNYXRjaCAmJiAhdmFsaWRhdGlvblJlc3VsdC5lbnVtVmFsdWVNYXRjaCAmJiB0aGlzLmVudW1WYWx1ZXMgJiYgdmFsaWRhdGlvblJlc3VsdC5lbnVtVmFsdWVzKSB7XG4gICAgICB0aGlzLmVudW1WYWx1ZXMgPSB0aGlzLmVudW1WYWx1ZXMuY29uY2F0KHZhbGlkYXRpb25SZXN1bHQuZW51bVZhbHVlcyk7XG4gICAgICBmb3IgKGNvbnN0IGVycm9yIG9mIHRoaXMucHJvYmxlbXMpIHtcbiAgICAgICAgaWYgKGVycm9yLmNvZGUgPT09IEVycm9yQ29kZS5FbnVtVmFsdWVNaXNtYXRjaCkge1xuICAgICAgICAgIGVycm9yLm1lc3NhZ2UgPSB0KFwiVmFsdWUgaXMgbm90IGFjY2VwdGVkLiBWYWxpZCB2YWx1ZXM6IHswfS5cIiwgdGhpcy5lbnVtVmFsdWVzLm1hcCgodikgPT4gSlNPTi5zdHJpbmdpZnkodikpLmpvaW4oXCIsIFwiKSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgbWVyZ2VQcm9wZXJ0eU1hdGNoKHByb3BlcnR5VmFsaWRhdGlvblJlc3VsdCkge1xuICAgIHRoaXMucHJvYmxlbXMgPSB0aGlzLnByb2JsZW1zLmNvbmNhdChwcm9wZXJ0eVZhbGlkYXRpb25SZXN1bHQucHJvYmxlbXMpO1xuICAgIHRoaXMucHJvcGVydGllc01hdGNoZXMrKztcbiAgICBpZiAocHJvcGVydHlWYWxpZGF0aW9uUmVzdWx0LmVudW1WYWx1ZU1hdGNoIHx8ICFwcm9wZXJ0eVZhbGlkYXRpb25SZXN1bHQuaGFzUHJvYmxlbXMoKSAmJiBwcm9wZXJ0eVZhbGlkYXRpb25SZXN1bHQucHJvcGVydGllc01hdGNoZXMpIHtcbiAgICAgIHRoaXMucHJvcGVydGllc1ZhbHVlTWF0Y2hlcysrO1xuICAgIH1cbiAgICBpZiAocHJvcGVydHlWYWxpZGF0aW9uUmVzdWx0LmVudW1WYWx1ZU1hdGNoICYmIHByb3BlcnR5VmFsaWRhdGlvblJlc3VsdC5lbnVtVmFsdWVzICYmIHByb3BlcnR5VmFsaWRhdGlvblJlc3VsdC5lbnVtVmFsdWVzLmxlbmd0aCA9PT0gMSkge1xuICAgICAgdGhpcy5wcmltYXJ5VmFsdWVNYXRjaGVzKys7XG4gICAgfVxuICB9XG4gIG1lcmdlUHJvY2Vzc2VkUHJvcGVydGllcyh2YWxpZGF0aW9uUmVzdWx0KSB7XG4gICAgdmFsaWRhdGlvblJlc3VsdC5wcm9jZXNzZWRQcm9wZXJ0aWVzLmZvckVhY2goKHApID0+IHRoaXMucHJvY2Vzc2VkUHJvcGVydGllcy5hZGQocCkpO1xuICB9XG4gIGNvbXBhcmUob3RoZXIpIHtcbiAgICBjb25zdCBoYXNQcm9ibGVtcyA9IHRoaXMuaGFzUHJvYmxlbXMoKTtcbiAgICBpZiAoaGFzUHJvYmxlbXMgIT09IG90aGVyLmhhc1Byb2JsZW1zKCkpIHtcbiAgICAgIHJldHVybiBoYXNQcm9ibGVtcyA/IC0xIDogMTtcbiAgICB9XG4gICAgaWYgKHRoaXMuZW51bVZhbHVlTWF0Y2ggIT09IG90aGVyLmVudW1WYWx1ZU1hdGNoKSB7XG4gICAgICByZXR1cm4gb3RoZXIuZW51bVZhbHVlTWF0Y2ggPyAtMSA6IDE7XG4gICAgfVxuICAgIGlmICh0aGlzLnByaW1hcnlWYWx1ZU1hdGNoZXMgIT09IG90aGVyLnByaW1hcnlWYWx1ZU1hdGNoZXMpIHtcbiAgICAgIHJldHVybiB0aGlzLnByaW1hcnlWYWx1ZU1hdGNoZXMgLSBvdGhlci5wcmltYXJ5VmFsdWVNYXRjaGVzO1xuICAgIH1cbiAgICBpZiAodGhpcy5wcm9wZXJ0aWVzVmFsdWVNYXRjaGVzICE9PSBvdGhlci5wcm9wZXJ0aWVzVmFsdWVNYXRjaGVzKSB7XG4gICAgICByZXR1cm4gdGhpcy5wcm9wZXJ0aWVzVmFsdWVNYXRjaGVzIC0gb3RoZXIucHJvcGVydGllc1ZhbHVlTWF0Y2hlcztcbiAgICB9XG4gICAgcmV0dXJuIHRoaXMucHJvcGVydGllc01hdGNoZXMgLSBvdGhlci5wcm9wZXJ0aWVzTWF0Y2hlcztcbiAgfVxufTtcbmZ1bmN0aW9uIG5ld0pTT05Eb2N1bWVudChyb290LCBkaWFnbm9zdGljcyA9IFtdKSB7XG4gIHJldHVybiBuZXcgSlNPTkRvY3VtZW50KHJvb3QsIGRpYWdub3N0aWNzLCBbXSk7XG59XG5mdW5jdGlvbiBnZXROb2RlVmFsdWUzKG5vZGUpIHtcbiAgcmV0dXJuIGdldE5vZGVWYWx1ZTIobm9kZSk7XG59XG5mdW5jdGlvbiBnZXROb2RlUGF0aDMobm9kZSkge1xuICByZXR1cm4gZ2V0Tm9kZVBhdGgyKG5vZGUpO1xufVxuZnVuY3Rpb24gY29udGFpbnMyKG5vZGUsIG9mZnNldCwgaW5jbHVkZVJpZ2h0Qm91bmQgPSBmYWxzZSkge1xuICByZXR1cm4gb2Zmc2V0ID49IG5vZGUub2Zmc2V0ICYmIG9mZnNldCA8IG5vZGUub2Zmc2V0ICsgbm9kZS5sZW5ndGggfHwgaW5jbHVkZVJpZ2h0Qm91bmQgJiYgb2Zmc2V0ID09PSBub2RlLm9mZnNldCArIG5vZGUubGVuZ3RoO1xufVxudmFyIEpTT05Eb2N1bWVudCA9IGNsYXNzIHtcbiAgY29uc3RydWN0b3Iocm9vdCwgc3ludGF4RXJyb3JzID0gW10sIGNvbW1lbnRzID0gW10pIHtcbiAgICB0aGlzLnJvb3QgPSByb290O1xuICAgIHRoaXMuc3ludGF4RXJyb3JzID0gc3ludGF4RXJyb3JzO1xuICAgIHRoaXMuY29tbWVudHMgPSBjb21tZW50cztcbiAgfVxuICBnZXROb2RlRnJvbU9mZnNldChvZmZzZXQsIGluY2x1ZGVSaWdodEJvdW5kID0gZmFsc2UpIHtcbiAgICBpZiAodGhpcy5yb290KSB7XG4gICAgICByZXR1cm4gZmluZE5vZGVBdE9mZnNldDIodGhpcy5yb290LCBvZmZzZXQsIGluY2x1ZGVSaWdodEJvdW5kKTtcbiAgICB9XG4gICAgcmV0dXJuIHZvaWQgMDtcbiAgfVxuICB2aXNpdCh2aXNpdG9yKSB7XG4gICAgaWYgKHRoaXMucm9vdCkge1xuICAgICAgY29uc3QgZG9WaXNpdCA9IChub2RlKSA9PiB7XG4gICAgICAgIGxldCBjdG4gPSB2aXNpdG9yKG5vZGUpO1xuICAgICAgICBjb25zdCBjaGlsZHJlbiA9IG5vZGUuY2hpbGRyZW47XG4gICAgICAgIGlmIChBcnJheS5pc0FycmF5KGNoaWxkcmVuKSkge1xuICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgY2hpbGRyZW4ubGVuZ3RoICYmIGN0bjsgaSsrKSB7XG4gICAgICAgICAgICBjdG4gPSBkb1Zpc2l0KGNoaWxkcmVuW2ldKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGN0bjtcbiAgICAgIH07XG4gICAgICBkb1Zpc2l0KHRoaXMucm9vdCk7XG4gICAgfVxuICB9XG4gIHZhbGlkYXRlKHRleHREb2N1bWVudCwgc2NoZW1hLCBzZXZlcml0eSA9IERpYWdub3N0aWNTZXZlcml0eS5XYXJuaW5nLCBzY2hlbWFEcmFmdCkge1xuICAgIGlmICh0aGlzLnJvb3QgJiYgc2NoZW1hKSB7XG4gICAgICBjb25zdCB2YWxpZGF0aW9uUmVzdWx0ID0gbmV3IFZhbGlkYXRpb25SZXN1bHQoKTtcbiAgICAgIHZhbGlkYXRlKHRoaXMucm9vdCwgc2NoZW1hLCB2YWxpZGF0aW9uUmVzdWx0LCBOb09wU2NoZW1hQ29sbGVjdG9yLmluc3RhbmNlLCBuZXcgRXZhbHVhdGlvbkNvbnRleHQoc2NoZW1hRHJhZnQgPz8gZ2V0U2NoZW1hRHJhZnQoc2NoZW1hKSkpO1xuICAgICAgcmV0dXJuIHZhbGlkYXRpb25SZXN1bHQucHJvYmxlbXMubWFwKChwKSA9PiB7XG4gICAgICAgIGNvbnN0IHJhbmdlID0gUmFuZ2UuY3JlYXRlKHRleHREb2N1bWVudC5wb3NpdGlvbkF0KHAubG9jYXRpb24ub2Zmc2V0KSwgdGV4dERvY3VtZW50LnBvc2l0aW9uQXQocC5sb2NhdGlvbi5vZmZzZXQgKyBwLmxvY2F0aW9uLmxlbmd0aCkpO1xuICAgICAgICByZXR1cm4gRGlhZ25vc3RpYy5jcmVhdGUocmFuZ2UsIHAubWVzc2FnZSwgcC5zZXZlcml0eSA/PyBzZXZlcml0eSwgcC5jb2RlKTtcbiAgICAgIH0pO1xuICAgIH1cbiAgICByZXR1cm4gdm9pZCAwO1xuICB9XG4gIGdldE1hdGNoaW5nU2NoZW1hcyhzY2hlbWEsIGZvY3VzT2Zmc2V0ID0gLTEsIGV4Y2x1ZGUpIHtcbiAgICBpZiAodGhpcy5yb290ICYmIHNjaGVtYSkge1xuICAgICAgY29uc3QgbWF0Y2hpbmdTY2hlbWFzID0gbmV3IFNjaGVtYUNvbGxlY3Rvcihmb2N1c09mZnNldCwgZXhjbHVkZSk7XG4gICAgICBjb25zdCBzY2hlbWFEcmFmdCA9IGdldFNjaGVtYURyYWZ0KHNjaGVtYSk7XG4gICAgICBjb25zdCBjb250ZXh0ID0gbmV3IEV2YWx1YXRpb25Db250ZXh0KHNjaGVtYURyYWZ0KTtcbiAgICAgIHZhbGlkYXRlKHRoaXMucm9vdCwgc2NoZW1hLCBuZXcgVmFsaWRhdGlvblJlc3VsdCgpLCBtYXRjaGluZ1NjaGVtYXMsIGNvbnRleHQpO1xuICAgICAgcmV0dXJuIG1hdGNoaW5nU2NoZW1hcy5zY2hlbWFzO1xuICAgIH1cbiAgICByZXR1cm4gW107XG4gIH1cbn07XG5mdW5jdGlvbiBnZXRTY2hlbWFEcmFmdChzY2hlbWEsIGZhbGxCYWNrID0gU2NoZW1hRHJhZnQudjIwMjBfMTIpIHtcbiAgbGV0IHNjaGVtYUlkID0gc2NoZW1hLiRzY2hlbWE7XG4gIGlmIChzY2hlbWFJZCkge1xuICAgIHJldHVybiBzY2hlbWFEcmFmdEZyb21JZFtzY2hlbWFJZF0gPz8gZmFsbEJhY2s7XG4gIH1cbiAgcmV0dXJuIGZhbGxCYWNrO1xufVxuZnVuY3Rpb24gdmFsaWRhdGUobiwgc2NoZW1hLCB2YWxpZGF0aW9uUmVzdWx0LCBtYXRjaGluZ1NjaGVtYXMsIGNvbnRleHQpIHtcbiAgaWYgKCFuIHx8ICFtYXRjaGluZ1NjaGVtYXMuaW5jbHVkZShuKSkge1xuICAgIHJldHVybjtcbiAgfVxuICBpZiAobi50eXBlID09PSBcInByb3BlcnR5XCIpIHtcbiAgICByZXR1cm4gdmFsaWRhdGUobi52YWx1ZU5vZGUsIHNjaGVtYSwgdmFsaWRhdGlvblJlc3VsdCwgbWF0Y2hpbmdTY2hlbWFzLCBjb250ZXh0KTtcbiAgfVxuICBjb25zdCBub2RlID0gbjtcbiAgX3ZhbGlkYXRlTm9kZSgpO1xuICBzd2l0Y2ggKG5vZGUudHlwZSkge1xuICAgIGNhc2UgXCJvYmplY3RcIjpcbiAgICAgIF92YWxpZGF0ZU9iamVjdE5vZGUobm9kZSk7XG4gICAgICBicmVhaztcbiAgICBjYXNlIFwiYXJyYXlcIjpcbiAgICAgIF92YWxpZGF0ZUFycmF5Tm9kZShub2RlKTtcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgXCJzdHJpbmdcIjpcbiAgICAgIF92YWxpZGF0ZVN0cmluZ05vZGUobm9kZSk7XG4gICAgICBicmVhaztcbiAgICBjYXNlIFwibnVtYmVyXCI6XG4gICAgICBfdmFsaWRhdGVOdW1iZXJOb2RlKG5vZGUpO1xuICAgICAgYnJlYWs7XG4gIH1cbiAgbWF0Y2hpbmdTY2hlbWFzLmFkZCh7IG5vZGUsIHNjaGVtYSB9KTtcbiAgZnVuY3Rpb24gX3ZhbGlkYXRlTm9kZSgpIHtcbiAgICBmdW5jdGlvbiBtYXRjaGVzVHlwZSh0eXBlKSB7XG4gICAgICByZXR1cm4gbm9kZS50eXBlID09PSB0eXBlIHx8IHR5cGUgPT09IFwiaW50ZWdlclwiICYmIG5vZGUudHlwZSA9PT0gXCJudW1iZXJcIiAmJiBub2RlLmlzSW50ZWdlcjtcbiAgICB9XG4gICAgaWYgKEFycmF5LmlzQXJyYXkoc2NoZW1hLnR5cGUpKSB7XG4gICAgICBpZiAoIXNjaGVtYS50eXBlLnNvbWUobWF0Y2hlc1R5cGUpKSB7XG4gICAgICAgIHZhbGlkYXRpb25SZXN1bHQucHJvYmxlbXMucHVzaCh7XG4gICAgICAgICAgbG9jYXRpb246IHsgb2Zmc2V0OiBub2RlLm9mZnNldCwgbGVuZ3RoOiBub2RlLmxlbmd0aCB9LFxuICAgICAgICAgIG1lc3NhZ2U6IHNjaGVtYS5lcnJvck1lc3NhZ2UgfHwgdChcIkluY29ycmVjdCB0eXBlLiBFeHBlY3RlZCBvbmUgb2YgezB9LlwiLCBzY2hlbWEudHlwZS5qb2luKFwiLCBcIikpXG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH0gZWxzZSBpZiAoc2NoZW1hLnR5cGUpIHtcbiAgICAgIGlmICghbWF0Y2hlc1R5cGUoc2NoZW1hLnR5cGUpKSB7XG4gICAgICAgIHZhbGlkYXRpb25SZXN1bHQucHJvYmxlbXMucHVzaCh7XG4gICAgICAgICAgbG9jYXRpb246IHsgb2Zmc2V0OiBub2RlLm9mZnNldCwgbGVuZ3RoOiBub2RlLmxlbmd0aCB9LFxuICAgICAgICAgIG1lc3NhZ2U6IHNjaGVtYS5lcnJvck1lc3NhZ2UgfHwgdCgnSW5jb3JyZWN0IHR5cGUuIEV4cGVjdGVkIFwiezB9XCIuJywgc2NoZW1hLnR5cGUpXG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH1cbiAgICBpZiAoQXJyYXkuaXNBcnJheShzY2hlbWEuYWxsT2YpKSB7XG4gICAgICBmb3IgKGNvbnN0IHN1YlNjaGVtYVJlZiBvZiBzY2hlbWEuYWxsT2YpIHtcbiAgICAgICAgY29uc3Qgc3ViVmFsaWRhdGlvblJlc3VsdCA9IG5ldyBWYWxpZGF0aW9uUmVzdWx0KCk7XG4gICAgICAgIGNvbnN0IHN1Yk1hdGNoaW5nU2NoZW1hcyA9IG1hdGNoaW5nU2NoZW1hcy5uZXdTdWIoKTtcbiAgICAgICAgdmFsaWRhdGUobm9kZSwgYXNTY2hlbWEoc3ViU2NoZW1hUmVmKSwgc3ViVmFsaWRhdGlvblJlc3VsdCwgc3ViTWF0Y2hpbmdTY2hlbWFzLCBjb250ZXh0KTtcbiAgICAgICAgdmFsaWRhdGlvblJlc3VsdC5tZXJnZShzdWJWYWxpZGF0aW9uUmVzdWx0KTtcbiAgICAgICAgbWF0Y2hpbmdTY2hlbWFzLm1lcmdlKHN1Yk1hdGNoaW5nU2NoZW1hcyk7XG4gICAgICB9XG4gICAgfVxuICAgIGNvbnN0IG5vdFNjaGVtYSA9IGFzU2NoZW1hKHNjaGVtYS5ub3QpO1xuICAgIGlmIChub3RTY2hlbWEpIHtcbiAgICAgIGNvbnN0IHN1YlZhbGlkYXRpb25SZXN1bHQgPSBuZXcgVmFsaWRhdGlvblJlc3VsdCgpO1xuICAgICAgY29uc3Qgc3ViTWF0Y2hpbmdTY2hlbWFzID0gbWF0Y2hpbmdTY2hlbWFzLm5ld1N1YigpO1xuICAgICAgdmFsaWRhdGUobm9kZSwgbm90U2NoZW1hLCBzdWJWYWxpZGF0aW9uUmVzdWx0LCBzdWJNYXRjaGluZ1NjaGVtYXMsIGNvbnRleHQpO1xuICAgICAgaWYgKCFzdWJWYWxpZGF0aW9uUmVzdWx0Lmhhc1Byb2JsZW1zKCkpIHtcbiAgICAgICAgdmFsaWRhdGlvblJlc3VsdC5wcm9ibGVtcy5wdXNoKHtcbiAgICAgICAgICBsb2NhdGlvbjogeyBvZmZzZXQ6IG5vZGUub2Zmc2V0LCBsZW5ndGg6IG5vZGUubGVuZ3RoIH0sXG4gICAgICAgICAgbWVzc2FnZTogc2NoZW1hLmVycm9yTWVzc2FnZSB8fCB0KFwiTWF0Y2hlcyBhIHNjaGVtYSB0aGF0IGlzIG5vdCBhbGxvd2VkLlwiKVxuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICAgIGZvciAoY29uc3QgbXMgb2Ygc3ViTWF0Y2hpbmdTY2hlbWFzLnNjaGVtYXMpIHtcbiAgICAgICAgbXMuaW52ZXJ0ZWQgPSAhbXMuaW52ZXJ0ZWQ7XG4gICAgICAgIG1hdGNoaW5nU2NoZW1hcy5hZGQobXMpO1xuICAgICAgfVxuICAgIH1cbiAgICBjb25zdCB0ZXN0QWx0ZXJuYXRpdmVzID0gKGFsdGVybmF0aXZlcywgbWF4T25lTWF0Y2gpID0+IHtcbiAgICAgIGNvbnN0IG1hdGNoZXMgPSBbXTtcbiAgICAgIGxldCBiZXN0TWF0Y2ggPSB2b2lkIDA7XG4gICAgICBmb3IgKGNvbnN0IHN1YlNjaGVtYVJlZiBvZiBhbHRlcm5hdGl2ZXMpIHtcbiAgICAgICAgY29uc3Qgc3ViU2NoZW1hID0gYXNTY2hlbWEoc3ViU2NoZW1hUmVmKTtcbiAgICAgICAgY29uc3Qgc3ViVmFsaWRhdGlvblJlc3VsdCA9IG5ldyBWYWxpZGF0aW9uUmVzdWx0KCk7XG4gICAgICAgIGNvbnN0IHN1Yk1hdGNoaW5nU2NoZW1hcyA9IG1hdGNoaW5nU2NoZW1hcy5uZXdTdWIoKTtcbiAgICAgICAgdmFsaWRhdGUobm9kZSwgc3ViU2NoZW1hLCBzdWJWYWxpZGF0aW9uUmVzdWx0LCBzdWJNYXRjaGluZ1NjaGVtYXMsIGNvbnRleHQpO1xuICAgICAgICBpZiAoIXN1YlZhbGlkYXRpb25SZXN1bHQuaGFzUHJvYmxlbXMoKSkge1xuICAgICAgICAgIG1hdGNoZXMucHVzaChzdWJTY2hlbWEpO1xuICAgICAgICB9XG4gICAgICAgIGlmICghYmVzdE1hdGNoKSB7XG4gICAgICAgICAgYmVzdE1hdGNoID0geyBzY2hlbWE6IHN1YlNjaGVtYSwgdmFsaWRhdGlvblJlc3VsdDogc3ViVmFsaWRhdGlvblJlc3VsdCwgbWF0Y2hpbmdTY2hlbWFzOiBzdWJNYXRjaGluZ1NjaGVtYXMgfTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBpZiAoIW1heE9uZU1hdGNoICYmICFzdWJWYWxpZGF0aW9uUmVzdWx0Lmhhc1Byb2JsZW1zKCkgJiYgIWJlc3RNYXRjaC52YWxpZGF0aW9uUmVzdWx0Lmhhc1Byb2JsZW1zKCkpIHtcbiAgICAgICAgICAgIGJlc3RNYXRjaC5tYXRjaGluZ1NjaGVtYXMubWVyZ2Uoc3ViTWF0Y2hpbmdTY2hlbWFzKTtcbiAgICAgICAgICAgIGJlc3RNYXRjaC52YWxpZGF0aW9uUmVzdWx0LnByb3BlcnRpZXNNYXRjaGVzICs9IHN1YlZhbGlkYXRpb25SZXN1bHQucHJvcGVydGllc01hdGNoZXM7XG4gICAgICAgICAgICBiZXN0TWF0Y2gudmFsaWRhdGlvblJlc3VsdC5wcm9wZXJ0aWVzVmFsdWVNYXRjaGVzICs9IHN1YlZhbGlkYXRpb25SZXN1bHQucHJvcGVydGllc1ZhbHVlTWF0Y2hlcztcbiAgICAgICAgICAgIGJlc3RNYXRjaC52YWxpZGF0aW9uUmVzdWx0Lm1lcmdlUHJvY2Vzc2VkUHJvcGVydGllcyhzdWJWYWxpZGF0aW9uUmVzdWx0KTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgY29uc3QgY29tcGFyZVJlc3VsdCA9IHN1YlZhbGlkYXRpb25SZXN1bHQuY29tcGFyZShiZXN0TWF0Y2gudmFsaWRhdGlvblJlc3VsdCk7XG4gICAgICAgICAgICBpZiAoY29tcGFyZVJlc3VsdCA+IDApIHtcbiAgICAgICAgICAgICAgYmVzdE1hdGNoID0geyBzY2hlbWE6IHN1YlNjaGVtYSwgdmFsaWRhdGlvblJlc3VsdDogc3ViVmFsaWRhdGlvblJlc3VsdCwgbWF0Y2hpbmdTY2hlbWFzOiBzdWJNYXRjaGluZ1NjaGVtYXMgfTtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoY29tcGFyZVJlc3VsdCA9PT0gMCkge1xuICAgICAgICAgICAgICBiZXN0TWF0Y2gubWF0Y2hpbmdTY2hlbWFzLm1lcmdlKHN1Yk1hdGNoaW5nU2NoZW1hcyk7XG4gICAgICAgICAgICAgIGJlc3RNYXRjaC52YWxpZGF0aW9uUmVzdWx0Lm1lcmdlRW51bVZhbHVlcyhzdWJWYWxpZGF0aW9uUmVzdWx0KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGlmIChtYXRjaGVzLmxlbmd0aCA+IDEgJiYgbWF4T25lTWF0Y2gpIHtcbiAgICAgICAgdmFsaWRhdGlvblJlc3VsdC5wcm9ibGVtcy5wdXNoKHtcbiAgICAgICAgICBsb2NhdGlvbjogeyBvZmZzZXQ6IG5vZGUub2Zmc2V0LCBsZW5ndGg6IDEgfSxcbiAgICAgICAgICBtZXNzYWdlOiB0KFwiTWF0Y2hlcyBtdWx0aXBsZSBzY2hlbWFzIHdoZW4gb25seSBvbmUgbXVzdCB2YWxpZGF0ZS5cIilcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgICBpZiAoYmVzdE1hdGNoKSB7XG4gICAgICAgIHZhbGlkYXRpb25SZXN1bHQubWVyZ2UoYmVzdE1hdGNoLnZhbGlkYXRpb25SZXN1bHQpO1xuICAgICAgICBtYXRjaGluZ1NjaGVtYXMubWVyZ2UoYmVzdE1hdGNoLm1hdGNoaW5nU2NoZW1hcyk7XG4gICAgICB9XG4gICAgICByZXR1cm4gbWF0Y2hlcy5sZW5ndGg7XG4gICAgfTtcbiAgICBpZiAoQXJyYXkuaXNBcnJheShzY2hlbWEuYW55T2YpKSB7XG4gICAgICB0ZXN0QWx0ZXJuYXRpdmVzKHNjaGVtYS5hbnlPZiwgZmFsc2UpO1xuICAgIH1cbiAgICBpZiAoQXJyYXkuaXNBcnJheShzY2hlbWEub25lT2YpKSB7XG4gICAgICB0ZXN0QWx0ZXJuYXRpdmVzKHNjaGVtYS5vbmVPZiwgdHJ1ZSk7XG4gICAgfVxuICAgIGNvbnN0IHRlc3RCcmFuY2ggPSAoc2NoZW1hMikgPT4ge1xuICAgICAgY29uc3Qgc3ViVmFsaWRhdGlvblJlc3VsdCA9IG5ldyBWYWxpZGF0aW9uUmVzdWx0KCk7XG4gICAgICBjb25zdCBzdWJNYXRjaGluZ1NjaGVtYXMgPSBtYXRjaGluZ1NjaGVtYXMubmV3U3ViKCk7XG4gICAgICB2YWxpZGF0ZShub2RlLCBhc1NjaGVtYShzY2hlbWEyKSwgc3ViVmFsaWRhdGlvblJlc3VsdCwgc3ViTWF0Y2hpbmdTY2hlbWFzLCBjb250ZXh0KTtcbiAgICAgIHZhbGlkYXRpb25SZXN1bHQubWVyZ2Uoc3ViVmFsaWRhdGlvblJlc3VsdCk7XG4gICAgICBtYXRjaGluZ1NjaGVtYXMubWVyZ2Uoc3ViTWF0Y2hpbmdTY2hlbWFzKTtcbiAgICB9O1xuICAgIGNvbnN0IHRlc3RDb25kaXRpb24gPSAoaWZTY2hlbWEyLCB0aGVuU2NoZW1hLCBlbHNlU2NoZW1hKSA9PiB7XG4gICAgICBjb25zdCBzdWJTY2hlbWEgPSBhc1NjaGVtYShpZlNjaGVtYTIpO1xuICAgICAgY29uc3Qgc3ViVmFsaWRhdGlvblJlc3VsdCA9IG5ldyBWYWxpZGF0aW9uUmVzdWx0KCk7XG4gICAgICBjb25zdCBzdWJNYXRjaGluZ1NjaGVtYXMgPSBtYXRjaGluZ1NjaGVtYXMubmV3U3ViKCk7XG4gICAgICB2YWxpZGF0ZShub2RlLCBzdWJTY2hlbWEsIHN1YlZhbGlkYXRpb25SZXN1bHQsIHN1Yk1hdGNoaW5nU2NoZW1hcywgY29udGV4dCk7XG4gICAgICBtYXRjaGluZ1NjaGVtYXMubWVyZ2Uoc3ViTWF0Y2hpbmdTY2hlbWFzKTtcbiAgICAgIHZhbGlkYXRpb25SZXN1bHQubWVyZ2VQcm9jZXNzZWRQcm9wZXJ0aWVzKHN1YlZhbGlkYXRpb25SZXN1bHQpO1xuICAgICAgaWYgKCFzdWJWYWxpZGF0aW9uUmVzdWx0Lmhhc1Byb2JsZW1zKCkpIHtcbiAgICAgICAgaWYgKHRoZW5TY2hlbWEpIHtcbiAgICAgICAgICB0ZXN0QnJhbmNoKHRoZW5TY2hlbWEpO1xuICAgICAgICB9XG4gICAgICB9IGVsc2UgaWYgKGVsc2VTY2hlbWEpIHtcbiAgICAgICAgdGVzdEJyYW5jaChlbHNlU2NoZW1hKTtcbiAgICAgIH1cbiAgICB9O1xuICAgIGNvbnN0IGlmU2NoZW1hID0gYXNTY2hlbWEoc2NoZW1hLmlmKTtcbiAgICBpZiAoaWZTY2hlbWEpIHtcbiAgICAgIHRlc3RDb25kaXRpb24oaWZTY2hlbWEsIGFzU2NoZW1hKHNjaGVtYS50aGVuKSwgYXNTY2hlbWEoc2NoZW1hLmVsc2UpKTtcbiAgICB9XG4gICAgaWYgKEFycmF5LmlzQXJyYXkoc2NoZW1hLmVudW0pKSB7XG4gICAgICBjb25zdCB2YWwgPSBnZXROb2RlVmFsdWUzKG5vZGUpO1xuICAgICAgbGV0IGVudW1WYWx1ZU1hdGNoID0gZmFsc2U7XG4gICAgICBmb3IgKGNvbnN0IGUgb2Ygc2NoZW1hLmVudW0pIHtcbiAgICAgICAgaWYgKGVxdWFscyh2YWwsIGUpKSB7XG4gICAgICAgICAgZW51bVZhbHVlTWF0Y2ggPSB0cnVlO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICB2YWxpZGF0aW9uUmVzdWx0LmVudW1WYWx1ZXMgPSBzY2hlbWEuZW51bTtcbiAgICAgIHZhbGlkYXRpb25SZXN1bHQuZW51bVZhbHVlTWF0Y2ggPSBlbnVtVmFsdWVNYXRjaDtcbiAgICAgIGlmICghZW51bVZhbHVlTWF0Y2gpIHtcbiAgICAgICAgdmFsaWRhdGlvblJlc3VsdC5wcm9ibGVtcy5wdXNoKHtcbiAgICAgICAgICBsb2NhdGlvbjogeyBvZmZzZXQ6IG5vZGUub2Zmc2V0LCBsZW5ndGg6IG5vZGUubGVuZ3RoIH0sXG4gICAgICAgICAgY29kZTogRXJyb3JDb2RlLkVudW1WYWx1ZU1pc21hdGNoLFxuICAgICAgICAgIG1lc3NhZ2U6IHNjaGVtYS5lcnJvck1lc3NhZ2UgfHwgdChcIlZhbHVlIGlzIG5vdCBhY2NlcHRlZC4gVmFsaWQgdmFsdWVzOiB7MH0uXCIsIHNjaGVtYS5lbnVtLm1hcCgodikgPT4gSlNPTi5zdHJpbmdpZnkodikpLmpvaW4oXCIsIFwiKSlcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfVxuICAgIGlmIChpc0RlZmluZWQoc2NoZW1hLmNvbnN0KSkge1xuICAgICAgY29uc3QgdmFsID0gZ2V0Tm9kZVZhbHVlMyhub2RlKTtcbiAgICAgIGlmICghZXF1YWxzKHZhbCwgc2NoZW1hLmNvbnN0KSkge1xuICAgICAgICB2YWxpZGF0aW9uUmVzdWx0LnByb2JsZW1zLnB1c2goe1xuICAgICAgICAgIGxvY2F0aW9uOiB7IG9mZnNldDogbm9kZS5vZmZzZXQsIGxlbmd0aDogbm9kZS5sZW5ndGggfSxcbiAgICAgICAgICBjb2RlOiBFcnJvckNvZGUuRW51bVZhbHVlTWlzbWF0Y2gsXG4gICAgICAgICAgbWVzc2FnZTogc2NoZW1hLmVycm9yTWVzc2FnZSB8fCB0KFwiVmFsdWUgbXVzdCBiZSB7MH0uXCIsIEpTT04uc3RyaW5naWZ5KHNjaGVtYS5jb25zdCkpXG4gICAgICAgIH0pO1xuICAgICAgICB2YWxpZGF0aW9uUmVzdWx0LmVudW1WYWx1ZU1hdGNoID0gZmFsc2U7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB2YWxpZGF0aW9uUmVzdWx0LmVudW1WYWx1ZU1hdGNoID0gdHJ1ZTtcbiAgICAgIH1cbiAgICAgIHZhbGlkYXRpb25SZXN1bHQuZW51bVZhbHVlcyA9IFtzY2hlbWEuY29uc3RdO1xuICAgIH1cbiAgICBsZXQgZGVwcmVjYXRpb25NZXNzYWdlID0gc2NoZW1hLmRlcHJlY2F0aW9uTWVzc2FnZTtcbiAgICBpZiAoZGVwcmVjYXRpb25NZXNzYWdlIHx8IHNjaGVtYS5kZXByZWNhdGVkKSB7XG4gICAgICBkZXByZWNhdGlvbk1lc3NhZ2UgPSBkZXByZWNhdGlvbk1lc3NhZ2UgfHwgdChcIlZhbHVlIGlzIGRlcHJlY2F0ZWRcIik7XG4gICAgICBsZXQgdGFyZ2V0Tm9kZSA9IG5vZGUucGFyZW50Py50eXBlID09PSBcInByb3BlcnR5XCIgPyBub2RlLnBhcmVudCA6IG5vZGU7XG4gICAgICB2YWxpZGF0aW9uUmVzdWx0LnByb2JsZW1zLnB1c2goe1xuICAgICAgICBsb2NhdGlvbjogeyBvZmZzZXQ6IHRhcmdldE5vZGUub2Zmc2V0LCBsZW5ndGg6IHRhcmdldE5vZGUubGVuZ3RoIH0sXG4gICAgICAgIHNldmVyaXR5OiBEaWFnbm9zdGljU2V2ZXJpdHkuV2FybmluZyxcbiAgICAgICAgbWVzc2FnZTogZGVwcmVjYXRpb25NZXNzYWdlLFxuICAgICAgICBjb2RlOiBFcnJvckNvZGUuRGVwcmVjYXRlZFxuICAgICAgfSk7XG4gICAgfVxuICB9XG4gIGZ1bmN0aW9uIF92YWxpZGF0ZU51bWJlck5vZGUobm9kZTIpIHtcbiAgICBjb25zdCB2YWwgPSBub2RlMi52YWx1ZTtcbiAgICBmdW5jdGlvbiBub3JtYWxpemVGbG9hdHMoZmxvYXQpIHtcbiAgICAgIGNvbnN0IHBhcnRzID0gL14oLT9cXGQrKSg/OlxcLihcXGQrKSk/KD86ZShbLStdXFxkKykpPyQvLmV4ZWMoZmxvYXQudG9TdHJpbmcoKSk7XG4gICAgICByZXR1cm4gcGFydHMgJiYge1xuICAgICAgICB2YWx1ZTogTnVtYmVyKHBhcnRzWzFdICsgKHBhcnRzWzJdIHx8IFwiXCIpKSxcbiAgICAgICAgbXVsdGlwbGllcjogKHBhcnRzWzJdPy5sZW5ndGggfHwgMCkgLSAocGFyc2VJbnQocGFydHNbM10pIHx8IDApXG4gICAgICB9O1xuICAgIH1cbiAgICA7XG4gICAgaWYgKGlzTnVtYmVyKHNjaGVtYS5tdWx0aXBsZU9mKSkge1xuICAgICAgbGV0IHJlbWFpbmRlciA9IC0xO1xuICAgICAgaWYgKE51bWJlci5pc0ludGVnZXIoc2NoZW1hLm11bHRpcGxlT2YpKSB7XG4gICAgICAgIHJlbWFpbmRlciA9IHZhbCAlIHNjaGVtYS5tdWx0aXBsZU9mO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgbGV0IG5vcm1NdWx0aXBsZU9mID0gbm9ybWFsaXplRmxvYXRzKHNjaGVtYS5tdWx0aXBsZU9mKTtcbiAgICAgICAgbGV0IG5vcm1WYWx1ZSA9IG5vcm1hbGl6ZUZsb2F0cyh2YWwpO1xuICAgICAgICBpZiAobm9ybU11bHRpcGxlT2YgJiYgbm9ybVZhbHVlKSB7XG4gICAgICAgICAgY29uc3QgbXVsdGlwbGllciA9IDEwICoqIE1hdGguYWJzKG5vcm1WYWx1ZS5tdWx0aXBsaWVyIC0gbm9ybU11bHRpcGxlT2YubXVsdGlwbGllcik7XG4gICAgICAgICAgaWYgKG5vcm1WYWx1ZS5tdWx0aXBsaWVyIDwgbm9ybU11bHRpcGxlT2YubXVsdGlwbGllcikge1xuICAgICAgICAgICAgbm9ybVZhbHVlLnZhbHVlICo9IG11bHRpcGxpZXI7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIG5vcm1NdWx0aXBsZU9mLnZhbHVlICo9IG11bHRpcGxpZXI7XG4gICAgICAgICAgfVxuICAgICAgICAgIHJlbWFpbmRlciA9IG5vcm1WYWx1ZS52YWx1ZSAlIG5vcm1NdWx0aXBsZU9mLnZhbHVlO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBpZiAocmVtYWluZGVyICE9PSAwKSB7XG4gICAgICAgIHZhbGlkYXRpb25SZXN1bHQucHJvYmxlbXMucHVzaCh7XG4gICAgICAgICAgbG9jYXRpb246IHsgb2Zmc2V0OiBub2RlMi5vZmZzZXQsIGxlbmd0aDogbm9kZTIubGVuZ3RoIH0sXG4gICAgICAgICAgbWVzc2FnZTogdChcIlZhbHVlIGlzIG5vdCBkaXZpc2libGUgYnkgezB9LlwiLCBzY2hlbWEubXVsdGlwbGVPZilcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfVxuICAgIGZ1bmN0aW9uIGdldEV4Y2x1c2l2ZUxpbWl0KGxpbWl0LCBleGNsdXNpdmUpIHtcbiAgICAgIGlmIChpc051bWJlcihleGNsdXNpdmUpKSB7XG4gICAgICAgIHJldHVybiBleGNsdXNpdmU7XG4gICAgICB9XG4gICAgICBpZiAoaXNCb29sZWFuKGV4Y2x1c2l2ZSkgJiYgZXhjbHVzaXZlKSB7XG4gICAgICAgIHJldHVybiBsaW1pdDtcbiAgICAgIH1cbiAgICAgIHJldHVybiB2b2lkIDA7XG4gICAgfVxuICAgIGZ1bmN0aW9uIGdldExpbWl0KGxpbWl0LCBleGNsdXNpdmUpIHtcbiAgICAgIGlmICghaXNCb29sZWFuKGV4Y2x1c2l2ZSkgfHwgIWV4Y2x1c2l2ZSkge1xuICAgICAgICByZXR1cm4gbGltaXQ7XG4gICAgICB9XG4gICAgICByZXR1cm4gdm9pZCAwO1xuICAgIH1cbiAgICBjb25zdCBleGNsdXNpdmVNaW5pbXVtID0gZ2V0RXhjbHVzaXZlTGltaXQoc2NoZW1hLm1pbmltdW0sIHNjaGVtYS5leGNsdXNpdmVNaW5pbXVtKTtcbiAgICBpZiAoaXNOdW1iZXIoZXhjbHVzaXZlTWluaW11bSkgJiYgdmFsIDw9IGV4Y2x1c2l2ZU1pbmltdW0pIHtcbiAgICAgIHZhbGlkYXRpb25SZXN1bHQucHJvYmxlbXMucHVzaCh7XG4gICAgICAgIGxvY2F0aW9uOiB7IG9mZnNldDogbm9kZTIub2Zmc2V0LCBsZW5ndGg6IG5vZGUyLmxlbmd0aCB9LFxuICAgICAgICBtZXNzYWdlOiB0KFwiVmFsdWUgaXMgYmVsb3cgdGhlIGV4Y2x1c2l2ZSBtaW5pbXVtIG9mIHswfS5cIiwgZXhjbHVzaXZlTWluaW11bSlcbiAgICAgIH0pO1xuICAgIH1cbiAgICBjb25zdCBleGNsdXNpdmVNYXhpbXVtID0gZ2V0RXhjbHVzaXZlTGltaXQoc2NoZW1hLm1heGltdW0sIHNjaGVtYS5leGNsdXNpdmVNYXhpbXVtKTtcbiAgICBpZiAoaXNOdW1iZXIoZXhjbHVzaXZlTWF4aW11bSkgJiYgdmFsID49IGV4Y2x1c2l2ZU1heGltdW0pIHtcbiAgICAgIHZhbGlkYXRpb25SZXN1bHQucHJvYmxlbXMucHVzaCh7XG4gICAgICAgIGxvY2F0aW9uOiB7IG9mZnNldDogbm9kZTIub2Zmc2V0LCBsZW5ndGg6IG5vZGUyLmxlbmd0aCB9LFxuICAgICAgICBtZXNzYWdlOiB0KFwiVmFsdWUgaXMgYWJvdmUgdGhlIGV4Y2x1c2l2ZSBtYXhpbXVtIG9mIHswfS5cIiwgZXhjbHVzaXZlTWF4aW11bSlcbiAgICAgIH0pO1xuICAgIH1cbiAgICBjb25zdCBtaW5pbXVtID0gZ2V0TGltaXQoc2NoZW1hLm1pbmltdW0sIHNjaGVtYS5leGNsdXNpdmVNaW5pbXVtKTtcbiAgICBpZiAoaXNOdW1iZXIobWluaW11bSkgJiYgdmFsIDwgbWluaW11bSkge1xuICAgICAgdmFsaWRhdGlvblJlc3VsdC5wcm9ibGVtcy5wdXNoKHtcbiAgICAgICAgbG9jYXRpb246IHsgb2Zmc2V0OiBub2RlMi5vZmZzZXQsIGxlbmd0aDogbm9kZTIubGVuZ3RoIH0sXG4gICAgICAgIG1lc3NhZ2U6IHQoXCJWYWx1ZSBpcyBiZWxvdyB0aGUgbWluaW11bSBvZiB7MH0uXCIsIG1pbmltdW0pXG4gICAgICB9KTtcbiAgICB9XG4gICAgY29uc3QgbWF4aW11bSA9IGdldExpbWl0KHNjaGVtYS5tYXhpbXVtLCBzY2hlbWEuZXhjbHVzaXZlTWF4aW11bSk7XG4gICAgaWYgKGlzTnVtYmVyKG1heGltdW0pICYmIHZhbCA+IG1heGltdW0pIHtcbiAgICAgIHZhbGlkYXRpb25SZXN1bHQucHJvYmxlbXMucHVzaCh7XG4gICAgICAgIGxvY2F0aW9uOiB7IG9mZnNldDogbm9kZTIub2Zmc2V0LCBsZW5ndGg6IG5vZGUyLmxlbmd0aCB9LFxuICAgICAgICBtZXNzYWdlOiB0KFwiVmFsdWUgaXMgYWJvdmUgdGhlIG1heGltdW0gb2YgezB9LlwiLCBtYXhpbXVtKVxuICAgICAgfSk7XG4gICAgfVxuICB9XG4gIGZ1bmN0aW9uIF92YWxpZGF0ZVN0cmluZ05vZGUobm9kZTIpIHtcbiAgICBpZiAoaXNOdW1iZXIoc2NoZW1hLm1pbkxlbmd0aCkgJiYgc3RyaW5nTGVuZ3RoKG5vZGUyLnZhbHVlKSA8IHNjaGVtYS5taW5MZW5ndGgpIHtcbiAgICAgIHZhbGlkYXRpb25SZXN1bHQucHJvYmxlbXMucHVzaCh7XG4gICAgICAgIGxvY2F0aW9uOiB7IG9mZnNldDogbm9kZTIub2Zmc2V0LCBsZW5ndGg6IG5vZGUyLmxlbmd0aCB9LFxuICAgICAgICBtZXNzYWdlOiB0KFwiU3RyaW5nIGlzIHNob3J0ZXIgdGhhbiB0aGUgbWluaW11bSBsZW5ndGggb2YgezB9LlwiLCBzY2hlbWEubWluTGVuZ3RoKVxuICAgICAgfSk7XG4gICAgfVxuICAgIGlmIChpc051bWJlcihzY2hlbWEubWF4TGVuZ3RoKSAmJiBzdHJpbmdMZW5ndGgobm9kZTIudmFsdWUpID4gc2NoZW1hLm1heExlbmd0aCkge1xuICAgICAgdmFsaWRhdGlvblJlc3VsdC5wcm9ibGVtcy5wdXNoKHtcbiAgICAgICAgbG9jYXRpb246IHsgb2Zmc2V0OiBub2RlMi5vZmZzZXQsIGxlbmd0aDogbm9kZTIubGVuZ3RoIH0sXG4gICAgICAgIG1lc3NhZ2U6IHQoXCJTdHJpbmcgaXMgbG9uZ2VyIHRoYW4gdGhlIG1heGltdW0gbGVuZ3RoIG9mIHswfS5cIiwgc2NoZW1hLm1heExlbmd0aClcbiAgICAgIH0pO1xuICAgIH1cbiAgICBpZiAoaXNTdHJpbmcoc2NoZW1hLnBhdHRlcm4pKSB7XG4gICAgICBjb25zdCByZWdleCA9IGV4dGVuZGVkUmVnRXhwKHNjaGVtYS5wYXR0ZXJuKTtcbiAgICAgIGlmICghcmVnZXg/LnRlc3Qobm9kZTIudmFsdWUpKSB7XG4gICAgICAgIHZhbGlkYXRpb25SZXN1bHQucHJvYmxlbXMucHVzaCh7XG4gICAgICAgICAgbG9jYXRpb246IHsgb2Zmc2V0OiBub2RlMi5vZmZzZXQsIGxlbmd0aDogbm9kZTIubGVuZ3RoIH0sXG4gICAgICAgICAgbWVzc2FnZTogc2NoZW1hLnBhdHRlcm5FcnJvck1lc3NhZ2UgfHwgc2NoZW1hLmVycm9yTWVzc2FnZSB8fCB0KCdTdHJpbmcgZG9lcyBub3QgbWF0Y2ggdGhlIHBhdHRlcm4gb2YgXCJ7MH1cIi4nLCBzY2hlbWEucGF0dGVybilcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfVxuICAgIGlmIChzY2hlbWEuZm9ybWF0KSB7XG4gICAgICBzd2l0Y2ggKHNjaGVtYS5mb3JtYXQpIHtcbiAgICAgICAgY2FzZSBcInVyaVwiOlxuICAgICAgICBjYXNlIFwidXJpLXJlZmVyZW5jZVwiOlxuICAgICAgICAgIHtcbiAgICAgICAgICAgIGxldCBlcnJvck1lc3NhZ2U7XG4gICAgICAgICAgICBpZiAoIW5vZGUyLnZhbHVlKSB7XG4gICAgICAgICAgICAgIGVycm9yTWVzc2FnZSA9IHQoXCJVUkkgZXhwZWN0ZWQuXCIpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgY29uc3QgbWF0Y2ggPSAvXigoW146Lz8jXSs/KTopPyhcXC9cXC8oW14vPyNdKikpPyhbXj8jXSopKFxcPyhbXiNdKikpPygjKC4qKSk/Ly5leGVjKG5vZGUyLnZhbHVlKTtcbiAgICAgICAgICAgICAgaWYgKCFtYXRjaCkge1xuICAgICAgICAgICAgICAgIGVycm9yTWVzc2FnZSA9IHQoXCJVUkkgaXMgZXhwZWN0ZWQuXCIpO1xuICAgICAgICAgICAgICB9IGVsc2UgaWYgKCFtYXRjaFsyXSAmJiBzY2hlbWEuZm9ybWF0ID09PSBcInVyaVwiKSB7XG4gICAgICAgICAgICAgICAgZXJyb3JNZXNzYWdlID0gdChcIlVSSSB3aXRoIGEgc2NoZW1lIGlzIGV4cGVjdGVkLlwiKTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGVycm9yTWVzc2FnZSkge1xuICAgICAgICAgICAgICB2YWxpZGF0aW9uUmVzdWx0LnByb2JsZW1zLnB1c2goe1xuICAgICAgICAgICAgICAgIGxvY2F0aW9uOiB7IG9mZnNldDogbm9kZTIub2Zmc2V0LCBsZW5ndGg6IG5vZGUyLmxlbmd0aCB9LFxuICAgICAgICAgICAgICAgIG1lc3NhZ2U6IHNjaGVtYS5wYXR0ZXJuRXJyb3JNZXNzYWdlIHx8IHNjaGVtYS5lcnJvck1lc3NhZ2UgfHwgdChcIlN0cmluZyBpcyBub3QgYSBVUkk6IHswfVwiLCBlcnJvck1lc3NhZ2UpXG4gICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSBcImNvbG9yLWhleFwiOlxuICAgICAgICBjYXNlIFwiZGF0ZS10aW1lXCI6XG4gICAgICAgIGNhc2UgXCJkYXRlXCI6XG4gICAgICAgIGNhc2UgXCJ0aW1lXCI6XG4gICAgICAgIGNhc2UgXCJlbWFpbFwiOlxuICAgICAgICBjYXNlIFwiaG9zdG5hbWVcIjpcbiAgICAgICAgY2FzZSBcImlwdjRcIjpcbiAgICAgICAgY2FzZSBcImlwdjZcIjpcbiAgICAgICAgICBjb25zdCBmb3JtYXQ1ID0gZm9ybWF0c1tzY2hlbWEuZm9ybWF0XTtcbiAgICAgICAgICBpZiAoIW5vZGUyLnZhbHVlIHx8ICFmb3JtYXQ1LnBhdHRlcm4uZXhlYyhub2RlMi52YWx1ZSkpIHtcbiAgICAgICAgICAgIHZhbGlkYXRpb25SZXN1bHQucHJvYmxlbXMucHVzaCh7XG4gICAgICAgICAgICAgIGxvY2F0aW9uOiB7IG9mZnNldDogbm9kZTIub2Zmc2V0LCBsZW5ndGg6IG5vZGUyLmxlbmd0aCB9LFxuICAgICAgICAgICAgICBtZXNzYWdlOiBzY2hlbWEucGF0dGVybkVycm9yTWVzc2FnZSB8fCBzY2hlbWEuZXJyb3JNZXNzYWdlIHx8IGZvcm1hdDUuZXJyb3JNZXNzYWdlXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICB9XG4gICAgICAgIGRlZmF1bHQ6XG4gICAgICB9XG4gICAgfVxuICB9XG4gIGZ1bmN0aW9uIF92YWxpZGF0ZUFycmF5Tm9kZShub2RlMikge1xuICAgIGxldCBwcmVmaXhJdGVtc1NjaGVtYXM7XG4gICAgbGV0IGFkZGl0aW9uYWxJdGVtU2NoZW1hO1xuICAgIGlmIChjb250ZXh0LnNjaGVtYURyYWZ0ID49IFNjaGVtYURyYWZ0LnYyMDIwXzEyKSB7XG4gICAgICBwcmVmaXhJdGVtc1NjaGVtYXMgPSBzY2hlbWEucHJlZml4SXRlbXM7XG4gICAgICBhZGRpdGlvbmFsSXRlbVNjaGVtYSA9ICFBcnJheS5pc0FycmF5KHNjaGVtYS5pdGVtcykgPyBzY2hlbWEuaXRlbXMgOiB2b2lkIDA7XG4gICAgfSBlbHNlIHtcbiAgICAgIHByZWZpeEl0ZW1zU2NoZW1hcyA9IEFycmF5LmlzQXJyYXkoc2NoZW1hLml0ZW1zKSA/IHNjaGVtYS5pdGVtcyA6IHZvaWQgMDtcbiAgICAgIGFkZGl0aW9uYWxJdGVtU2NoZW1hID0gIUFycmF5LmlzQXJyYXkoc2NoZW1hLml0ZW1zKSA/IHNjaGVtYS5pdGVtcyA6IHNjaGVtYS5hZGRpdGlvbmFsSXRlbXM7XG4gICAgfVxuICAgIGxldCBpbmRleCA9IDA7XG4gICAgaWYgKHByZWZpeEl0ZW1zU2NoZW1hcyAhPT0gdm9pZCAwKSB7XG4gICAgICBjb25zdCBtYXggPSBNYXRoLm1pbihwcmVmaXhJdGVtc1NjaGVtYXMubGVuZ3RoLCBub2RlMi5pdGVtcy5sZW5ndGgpO1xuICAgICAgZm9yICg7IGluZGV4IDwgbWF4OyBpbmRleCsrKSB7XG4gICAgICAgIGNvbnN0IHN1YlNjaGVtYVJlZiA9IHByZWZpeEl0ZW1zU2NoZW1hc1tpbmRleF07XG4gICAgICAgIGNvbnN0IHN1YlNjaGVtYSA9IGFzU2NoZW1hKHN1YlNjaGVtYVJlZik7XG4gICAgICAgIGNvbnN0IGl0ZW1WYWxpZGF0aW9uUmVzdWx0ID0gbmV3IFZhbGlkYXRpb25SZXN1bHQoKTtcbiAgICAgICAgY29uc3QgaXRlbSA9IG5vZGUyLml0ZW1zW2luZGV4XTtcbiAgICAgICAgaWYgKGl0ZW0pIHtcbiAgICAgICAgICB2YWxpZGF0ZShpdGVtLCBzdWJTY2hlbWEsIGl0ZW1WYWxpZGF0aW9uUmVzdWx0LCBtYXRjaGluZ1NjaGVtYXMsIGNvbnRleHQpO1xuICAgICAgICAgIHZhbGlkYXRpb25SZXN1bHQubWVyZ2VQcm9wZXJ0eU1hdGNoKGl0ZW1WYWxpZGF0aW9uUmVzdWx0KTtcbiAgICAgICAgfVxuICAgICAgICB2YWxpZGF0aW9uUmVzdWx0LnByb2Nlc3NlZFByb3BlcnRpZXMuYWRkKFN0cmluZyhpbmRleCkpO1xuICAgICAgfVxuICAgIH1cbiAgICBpZiAoYWRkaXRpb25hbEl0ZW1TY2hlbWEgIT09IHZvaWQgMCAmJiBpbmRleCA8IG5vZGUyLml0ZW1zLmxlbmd0aCkge1xuICAgICAgaWYgKHR5cGVvZiBhZGRpdGlvbmFsSXRlbVNjaGVtYSA9PT0gXCJib29sZWFuXCIpIHtcbiAgICAgICAgaWYgKGFkZGl0aW9uYWxJdGVtU2NoZW1hID09PSBmYWxzZSkge1xuICAgICAgICAgIHZhbGlkYXRpb25SZXN1bHQucHJvYmxlbXMucHVzaCh7XG4gICAgICAgICAgICBsb2NhdGlvbjogeyBvZmZzZXQ6IG5vZGUyLm9mZnNldCwgbGVuZ3RoOiBub2RlMi5sZW5ndGggfSxcbiAgICAgICAgICAgIG1lc3NhZ2U6IHQoXCJBcnJheSBoYXMgdG9vIG1hbnkgaXRlbXMgYWNjb3JkaW5nIHRvIHNjaGVtYS4gRXhwZWN0ZWQgezB9IG9yIGZld2VyLlwiLCBpbmRleClcbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgICBmb3IgKDsgaW5kZXggPCBub2RlMi5pdGVtcy5sZW5ndGg7IGluZGV4KyspIHtcbiAgICAgICAgICB2YWxpZGF0aW9uUmVzdWx0LnByb2Nlc3NlZFByb3BlcnRpZXMuYWRkKFN0cmluZyhpbmRleCkpO1xuICAgICAgICAgIHZhbGlkYXRpb25SZXN1bHQucHJvcGVydGllc1ZhbHVlTWF0Y2hlcysrO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBmb3IgKDsgaW5kZXggPCBub2RlMi5pdGVtcy5sZW5ndGg7IGluZGV4KyspIHtcbiAgICAgICAgICBjb25zdCBpdGVtVmFsaWRhdGlvblJlc3VsdCA9IG5ldyBWYWxpZGF0aW9uUmVzdWx0KCk7XG4gICAgICAgICAgdmFsaWRhdGUobm9kZTIuaXRlbXNbaW5kZXhdLCBhZGRpdGlvbmFsSXRlbVNjaGVtYSwgaXRlbVZhbGlkYXRpb25SZXN1bHQsIG1hdGNoaW5nU2NoZW1hcywgY29udGV4dCk7XG4gICAgICAgICAgdmFsaWRhdGlvblJlc3VsdC5tZXJnZVByb3BlcnR5TWF0Y2goaXRlbVZhbGlkYXRpb25SZXN1bHQpO1xuICAgICAgICAgIHZhbGlkYXRpb25SZXN1bHQucHJvY2Vzc2VkUHJvcGVydGllcy5hZGQoU3RyaW5nKGluZGV4KSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gICAgY29uc3QgY29udGFpbnNTY2hlbWEgPSBhc1NjaGVtYShzY2hlbWEuY29udGFpbnMpO1xuICAgIGlmIChjb250YWluc1NjaGVtYSkge1xuICAgICAgbGV0IGNvbnRhaW5zQ291bnQgPSAwO1xuICAgICAgZm9yIChsZXQgaW5kZXgyID0gMDsgaW5kZXgyIDwgbm9kZTIuaXRlbXMubGVuZ3RoOyBpbmRleDIrKykge1xuICAgICAgICBjb25zdCBpdGVtID0gbm9kZTIuaXRlbXNbaW5kZXgyXTtcbiAgICAgICAgY29uc3QgaXRlbVZhbGlkYXRpb25SZXN1bHQgPSBuZXcgVmFsaWRhdGlvblJlc3VsdCgpO1xuICAgICAgICB2YWxpZGF0ZShpdGVtLCBjb250YWluc1NjaGVtYSwgaXRlbVZhbGlkYXRpb25SZXN1bHQsIE5vT3BTY2hlbWFDb2xsZWN0b3IuaW5zdGFuY2UsIGNvbnRleHQpO1xuICAgICAgICBpZiAoIWl0ZW1WYWxpZGF0aW9uUmVzdWx0Lmhhc1Byb2JsZW1zKCkpIHtcbiAgICAgICAgICBjb250YWluc0NvdW50Kys7XG4gICAgICAgICAgaWYgKGNvbnRleHQuc2NoZW1hRHJhZnQgPj0gU2NoZW1hRHJhZnQudjIwMjBfMTIpIHtcbiAgICAgICAgICAgIHZhbGlkYXRpb25SZXN1bHQucHJvY2Vzc2VkUHJvcGVydGllcy5hZGQoU3RyaW5nKGluZGV4MikpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgaWYgKGNvbnRhaW5zQ291bnQgPT09IDAgJiYgIWlzTnVtYmVyKHNjaGVtYS5taW5Db250YWlucykpIHtcbiAgICAgICAgdmFsaWRhdGlvblJlc3VsdC5wcm9ibGVtcy5wdXNoKHtcbiAgICAgICAgICBsb2NhdGlvbjogeyBvZmZzZXQ6IG5vZGUyLm9mZnNldCwgbGVuZ3RoOiBub2RlMi5sZW5ndGggfSxcbiAgICAgICAgICBtZXNzYWdlOiBzY2hlbWEuZXJyb3JNZXNzYWdlIHx8IHQoXCJBcnJheSBkb2VzIG5vdCBjb250YWluIHJlcXVpcmVkIGl0ZW0uXCIpXG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgICAgaWYgKGlzTnVtYmVyKHNjaGVtYS5taW5Db250YWlucykgJiYgY29udGFpbnNDb3VudCA8IHNjaGVtYS5taW5Db250YWlucykge1xuICAgICAgICB2YWxpZGF0aW9uUmVzdWx0LnByb2JsZW1zLnB1c2goe1xuICAgICAgICAgIGxvY2F0aW9uOiB7IG9mZnNldDogbm9kZTIub2Zmc2V0LCBsZW5ndGg6IG5vZGUyLmxlbmd0aCB9LFxuICAgICAgICAgIG1lc3NhZ2U6IHNjaGVtYS5lcnJvck1lc3NhZ2UgfHwgdChcIkFycmF5IGhhcyB0b28gZmV3IGl0ZW1zIHRoYXQgbWF0Y2ggdGhlIGNvbnRhaW5zIGNvbnRyYWludC4gRXhwZWN0ZWQgezB9IG9yIG1vcmUuXCIsIHNjaGVtYS5taW5Db250YWlucylcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgICBpZiAoaXNOdW1iZXIoc2NoZW1hLm1heENvbnRhaW5zKSAmJiBjb250YWluc0NvdW50ID4gc2NoZW1hLm1heENvbnRhaW5zKSB7XG4gICAgICAgIHZhbGlkYXRpb25SZXN1bHQucHJvYmxlbXMucHVzaCh7XG4gICAgICAgICAgbG9jYXRpb246IHsgb2Zmc2V0OiBub2RlMi5vZmZzZXQsIGxlbmd0aDogbm9kZTIubGVuZ3RoIH0sXG4gICAgICAgICAgbWVzc2FnZTogc2NoZW1hLmVycm9yTWVzc2FnZSB8fCB0KFwiQXJyYXkgaGFzIHRvbyBtYW55IGl0ZW1zIHRoYXQgbWF0Y2ggdGhlIGNvbnRhaW5zIGNvbnRyYWludC4gRXhwZWN0ZWQgezB9IG9yIGxlc3MuXCIsIHNjaGVtYS5tYXhDb250YWlucylcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfVxuICAgIGNvbnN0IHVuZXZhbHVhdGVkSXRlbXMgPSBzY2hlbWEudW5ldmFsdWF0ZWRJdGVtcztcbiAgICBpZiAodW5ldmFsdWF0ZWRJdGVtcyAhPT0gdm9pZCAwKSB7XG4gICAgICBmb3IgKGxldCBpID0gMDsgaSA8IG5vZGUyLml0ZW1zLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGlmICghdmFsaWRhdGlvblJlc3VsdC5wcm9jZXNzZWRQcm9wZXJ0aWVzLmhhcyhTdHJpbmcoaSkpKSB7XG4gICAgICAgICAgaWYgKHVuZXZhbHVhdGVkSXRlbXMgPT09IGZhbHNlKSB7XG4gICAgICAgICAgICB2YWxpZGF0aW9uUmVzdWx0LnByb2JsZW1zLnB1c2goe1xuICAgICAgICAgICAgICBsb2NhdGlvbjogeyBvZmZzZXQ6IG5vZGUyLm9mZnNldCwgbGVuZ3RoOiBub2RlMi5sZW5ndGggfSxcbiAgICAgICAgICAgICAgbWVzc2FnZTogdChcIkl0ZW0gZG9lcyBub3QgbWF0Y2ggYW55IHZhbGlkYXRpb24gcnVsZSBmcm9tIHRoZSBhcnJheS5cIilcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBjb25zdCBpdGVtVmFsaWRhdGlvblJlc3VsdCA9IG5ldyBWYWxpZGF0aW9uUmVzdWx0KCk7XG4gICAgICAgICAgICB2YWxpZGF0ZShub2RlMi5pdGVtc1tpXSwgc2NoZW1hLnVuZXZhbHVhdGVkSXRlbXMsIGl0ZW1WYWxpZGF0aW9uUmVzdWx0LCBtYXRjaGluZ1NjaGVtYXMsIGNvbnRleHQpO1xuICAgICAgICAgICAgdmFsaWRhdGlvblJlc3VsdC5tZXJnZVByb3BlcnR5TWF0Y2goaXRlbVZhbGlkYXRpb25SZXN1bHQpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICB2YWxpZGF0aW9uUmVzdWx0LnByb2Nlc3NlZFByb3BlcnRpZXMuYWRkKFN0cmluZyhpKSk7XG4gICAgICAgIHZhbGlkYXRpb25SZXN1bHQucHJvcGVydGllc1ZhbHVlTWF0Y2hlcysrO1xuICAgICAgfVxuICAgIH1cbiAgICBpZiAoaXNOdW1iZXIoc2NoZW1hLm1pbkl0ZW1zKSAmJiBub2RlMi5pdGVtcy5sZW5ndGggPCBzY2hlbWEubWluSXRlbXMpIHtcbiAgICAgIHZhbGlkYXRpb25SZXN1bHQucHJvYmxlbXMucHVzaCh7XG4gICAgICAgIGxvY2F0aW9uOiB7IG9mZnNldDogbm9kZTIub2Zmc2V0LCBsZW5ndGg6IG5vZGUyLmxlbmd0aCB9LFxuICAgICAgICBtZXNzYWdlOiB0KFwiQXJyYXkgaGFzIHRvbyBmZXcgaXRlbXMuIEV4cGVjdGVkIHswfSBvciBtb3JlLlwiLCBzY2hlbWEubWluSXRlbXMpXG4gICAgICB9KTtcbiAgICB9XG4gICAgaWYgKGlzTnVtYmVyKHNjaGVtYS5tYXhJdGVtcykgJiYgbm9kZTIuaXRlbXMubGVuZ3RoID4gc2NoZW1hLm1heEl0ZW1zKSB7XG4gICAgICB2YWxpZGF0aW9uUmVzdWx0LnByb2JsZW1zLnB1c2goe1xuICAgICAgICBsb2NhdGlvbjogeyBvZmZzZXQ6IG5vZGUyLm9mZnNldCwgbGVuZ3RoOiBub2RlMi5sZW5ndGggfSxcbiAgICAgICAgbWVzc2FnZTogdChcIkFycmF5IGhhcyB0b28gbWFueSBpdGVtcy4gRXhwZWN0ZWQgezB9IG9yIGZld2VyLlwiLCBzY2hlbWEubWF4SXRlbXMpXG4gICAgICB9KTtcbiAgICB9XG4gICAgaWYgKHNjaGVtYS51bmlxdWVJdGVtcyA9PT0gdHJ1ZSkge1xuICAgICAgbGV0IGhhc0R1cGxpY2F0ZXMgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCB2YWx1ZXMubGVuZ3RoIC0gMTsgaSsrKSB7XG4gICAgICAgICAgY29uc3QgdmFsdWUgPSB2YWx1ZXNbaV07XG4gICAgICAgICAgZm9yIChsZXQgaiA9IGkgKyAxOyBqIDwgdmFsdWVzLmxlbmd0aDsgaisrKSB7XG4gICAgICAgICAgICBpZiAoZXF1YWxzKHZhbHVlLCB2YWx1ZXNbal0pKSB7XG4gICAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9O1xuICAgICAgY29uc3QgdmFsdWVzID0gZ2V0Tm9kZVZhbHVlMyhub2RlMik7XG4gICAgICBpZiAoaGFzRHVwbGljYXRlcygpKSB7XG4gICAgICAgIHZhbGlkYXRpb25SZXN1bHQucHJvYmxlbXMucHVzaCh7XG4gICAgICAgICAgbG9jYXRpb246IHsgb2Zmc2V0OiBub2RlMi5vZmZzZXQsIGxlbmd0aDogbm9kZTIubGVuZ3RoIH0sXG4gICAgICAgICAgbWVzc2FnZTogdChcIkFycmF5IGhhcyBkdXBsaWNhdGUgaXRlbXMuXCIpXG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH1cbiAgfVxuICBmdW5jdGlvbiBfdmFsaWRhdGVPYmplY3ROb2RlKG5vZGUyKSB7XG4gICAgY29uc3Qgc2VlbktleXMgPSAvKiBAX19QVVJFX18gKi8gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiAgICBjb25zdCB1bnByb2Nlc3NlZFByb3BlcnRpZXMgPSAvKiBAX19QVVJFX18gKi8gbmV3IFNldCgpO1xuICAgIGZvciAoY29uc3QgcHJvcGVydHlOb2RlIG9mIG5vZGUyLnByb3BlcnRpZXMpIHtcbiAgICAgIGNvbnN0IGtleSA9IHByb3BlcnR5Tm9kZS5rZXlOb2RlLnZhbHVlO1xuICAgICAgc2VlbktleXNba2V5XSA9IHByb3BlcnR5Tm9kZS52YWx1ZU5vZGU7XG4gICAgICB1bnByb2Nlc3NlZFByb3BlcnRpZXMuYWRkKGtleSk7XG4gICAgfVxuICAgIGlmIChBcnJheS5pc0FycmF5KHNjaGVtYS5yZXF1aXJlZCkpIHtcbiAgICAgIGZvciAoY29uc3QgcHJvcGVydHlOYW1lIG9mIHNjaGVtYS5yZXF1aXJlZCkge1xuICAgICAgICBpZiAoIXNlZW5LZXlzW3Byb3BlcnR5TmFtZV0pIHtcbiAgICAgICAgICBjb25zdCBrZXlOb2RlID0gbm9kZTIucGFyZW50ICYmIG5vZGUyLnBhcmVudC50eXBlID09PSBcInByb3BlcnR5XCIgJiYgbm9kZTIucGFyZW50LmtleU5vZGU7XG4gICAgICAgICAgY29uc3QgbG9jYXRpb24gPSBrZXlOb2RlID8geyBvZmZzZXQ6IGtleU5vZGUub2Zmc2V0LCBsZW5ndGg6IGtleU5vZGUubGVuZ3RoIH0gOiB7IG9mZnNldDogbm9kZTIub2Zmc2V0LCBsZW5ndGg6IDEgfTtcbiAgICAgICAgICB2YWxpZGF0aW9uUmVzdWx0LnByb2JsZW1zLnB1c2goe1xuICAgICAgICAgICAgbG9jYXRpb24sXG4gICAgICAgICAgICBtZXNzYWdlOiB0KCdNaXNzaW5nIHByb3BlcnR5IFwiezB9XCIuJywgcHJvcGVydHlOYW1lKVxuICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICAgIGNvbnN0IHByb3BlcnR5UHJvY2Vzc2VkID0gKHByb3ApID0+IHtcbiAgICAgIHVucHJvY2Vzc2VkUHJvcGVydGllcy5kZWxldGUocHJvcCk7XG4gICAgICB2YWxpZGF0aW9uUmVzdWx0LnByb2Nlc3NlZFByb3BlcnRpZXMuYWRkKHByb3ApO1xuICAgIH07XG4gICAgaWYgKHNjaGVtYS5wcm9wZXJ0aWVzKSB7XG4gICAgICBmb3IgKGNvbnN0IHByb3BlcnR5TmFtZSBvZiBPYmplY3Qua2V5cyhzY2hlbWEucHJvcGVydGllcykpIHtcbiAgICAgICAgcHJvcGVydHlQcm9jZXNzZWQocHJvcGVydHlOYW1lKTtcbiAgICAgICAgY29uc3QgcHJvcGVydHlTY2hlbWEgPSBzY2hlbWEucHJvcGVydGllc1twcm9wZXJ0eU5hbWVdO1xuICAgICAgICBjb25zdCBjaGlsZCA9IHNlZW5LZXlzW3Byb3BlcnR5TmFtZV07XG4gICAgICAgIGlmIChjaGlsZCkge1xuICAgICAgICAgIGlmIChpc0Jvb2xlYW4ocHJvcGVydHlTY2hlbWEpKSB7XG4gICAgICAgICAgICBpZiAoIXByb3BlcnR5U2NoZW1hKSB7XG4gICAgICAgICAgICAgIGNvbnN0IHByb3BlcnR5Tm9kZSA9IGNoaWxkLnBhcmVudDtcbiAgICAgICAgICAgICAgdmFsaWRhdGlvblJlc3VsdC5wcm9ibGVtcy5wdXNoKHtcbiAgICAgICAgICAgICAgICBsb2NhdGlvbjogeyBvZmZzZXQ6IHByb3BlcnR5Tm9kZS5rZXlOb2RlLm9mZnNldCwgbGVuZ3RoOiBwcm9wZXJ0eU5vZGUua2V5Tm9kZS5sZW5ndGggfSxcbiAgICAgICAgICAgICAgICBtZXNzYWdlOiBzY2hlbWEuZXJyb3JNZXNzYWdlIHx8IHQoXCJQcm9wZXJ0eSB7MH0gaXMgbm90IGFsbG93ZWQuXCIsIHByb3BlcnR5TmFtZSlcbiAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICB2YWxpZGF0aW9uUmVzdWx0LnByb3BlcnRpZXNNYXRjaGVzKys7XG4gICAgICAgICAgICAgIHZhbGlkYXRpb25SZXN1bHQucHJvcGVydGllc1ZhbHVlTWF0Y2hlcysrO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBjb25zdCBwcm9wZXJ0eVZhbGlkYXRpb25SZXN1bHQgPSBuZXcgVmFsaWRhdGlvblJlc3VsdCgpO1xuICAgICAgICAgICAgdmFsaWRhdGUoY2hpbGQsIHByb3BlcnR5U2NoZW1hLCBwcm9wZXJ0eVZhbGlkYXRpb25SZXN1bHQsIG1hdGNoaW5nU2NoZW1hcywgY29udGV4dCk7XG4gICAgICAgICAgICB2YWxpZGF0aW9uUmVzdWx0Lm1lcmdlUHJvcGVydHlNYXRjaChwcm9wZXJ0eVZhbGlkYXRpb25SZXN1bHQpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgICBpZiAoc2NoZW1hLnBhdHRlcm5Qcm9wZXJ0aWVzKSB7XG4gICAgICBmb3IgKGNvbnN0IHByb3BlcnR5UGF0dGVybiBvZiBPYmplY3Qua2V5cyhzY2hlbWEucGF0dGVyblByb3BlcnRpZXMpKSB7XG4gICAgICAgIGNvbnN0IHJlZ2V4ID0gZXh0ZW5kZWRSZWdFeHAocHJvcGVydHlQYXR0ZXJuKTtcbiAgICAgICAgaWYgKHJlZ2V4KSB7XG4gICAgICAgICAgY29uc3QgcHJvY2Vzc2VkID0gW107XG4gICAgICAgICAgZm9yIChjb25zdCBwcm9wZXJ0eU5hbWUgb2YgdW5wcm9jZXNzZWRQcm9wZXJ0aWVzKSB7XG4gICAgICAgICAgICBpZiAocmVnZXgudGVzdChwcm9wZXJ0eU5hbWUpKSB7XG4gICAgICAgICAgICAgIHByb2Nlc3NlZC5wdXNoKHByb3BlcnR5TmFtZSk7XG4gICAgICAgICAgICAgIGNvbnN0IGNoaWxkID0gc2VlbktleXNbcHJvcGVydHlOYW1lXTtcbiAgICAgICAgICAgICAgaWYgKGNoaWxkKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgcHJvcGVydHlTY2hlbWEgPSBzY2hlbWEucGF0dGVyblByb3BlcnRpZXNbcHJvcGVydHlQYXR0ZXJuXTtcbiAgICAgICAgICAgICAgICBpZiAoaXNCb29sZWFuKHByb3BlcnR5U2NoZW1hKSkge1xuICAgICAgICAgICAgICAgICAgaWYgKCFwcm9wZXJ0eVNjaGVtYSkge1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBwcm9wZXJ0eU5vZGUgPSBjaGlsZC5wYXJlbnQ7XG4gICAgICAgICAgICAgICAgICAgIHZhbGlkYXRpb25SZXN1bHQucHJvYmxlbXMucHVzaCh7XG4gICAgICAgICAgICAgICAgICAgICAgbG9jYXRpb246IHsgb2Zmc2V0OiBwcm9wZXJ0eU5vZGUua2V5Tm9kZS5vZmZzZXQsIGxlbmd0aDogcHJvcGVydHlOb2RlLmtleU5vZGUubGVuZ3RoIH0sXG4gICAgICAgICAgICAgICAgICAgICAgbWVzc2FnZTogc2NoZW1hLmVycm9yTWVzc2FnZSB8fCB0KFwiUHJvcGVydHkgezB9IGlzIG5vdCBhbGxvd2VkLlwiLCBwcm9wZXJ0eU5hbWUpXG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgdmFsaWRhdGlvblJlc3VsdC5wcm9wZXJ0aWVzTWF0Y2hlcysrO1xuICAgICAgICAgICAgICAgICAgICB2YWxpZGF0aW9uUmVzdWx0LnByb3BlcnRpZXNWYWx1ZU1hdGNoZXMrKztcbiAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgY29uc3QgcHJvcGVydHlWYWxpZGF0aW9uUmVzdWx0ID0gbmV3IFZhbGlkYXRpb25SZXN1bHQoKTtcbiAgICAgICAgICAgICAgICAgIHZhbGlkYXRlKGNoaWxkLCBwcm9wZXJ0eVNjaGVtYSwgcHJvcGVydHlWYWxpZGF0aW9uUmVzdWx0LCBtYXRjaGluZ1NjaGVtYXMsIGNvbnRleHQpO1xuICAgICAgICAgICAgICAgICAgdmFsaWRhdGlvblJlc3VsdC5tZXJnZVByb3BlcnR5TWF0Y2gocHJvcGVydHlWYWxpZGF0aW9uUmVzdWx0KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgICAgcHJvY2Vzc2VkLmZvckVhY2gocHJvcGVydHlQcm9jZXNzZWQpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICAgIGNvbnN0IGFkZGl0aW9uYWxQcm9wZXJ0aWVzID0gc2NoZW1hLmFkZGl0aW9uYWxQcm9wZXJ0aWVzO1xuICAgIGlmIChhZGRpdGlvbmFsUHJvcGVydGllcyAhPT0gdm9pZCAwKSB7XG4gICAgICBmb3IgKGNvbnN0IHByb3BlcnR5TmFtZSBvZiB1bnByb2Nlc3NlZFByb3BlcnRpZXMpIHtcbiAgICAgICAgcHJvcGVydHlQcm9jZXNzZWQocHJvcGVydHlOYW1lKTtcbiAgICAgICAgY29uc3QgY2hpbGQgPSBzZWVuS2V5c1twcm9wZXJ0eU5hbWVdO1xuICAgICAgICBpZiAoY2hpbGQpIHtcbiAgICAgICAgICBpZiAoYWRkaXRpb25hbFByb3BlcnRpZXMgPT09IGZhbHNlKSB7XG4gICAgICAgICAgICBjb25zdCBwcm9wZXJ0eU5vZGUgPSBjaGlsZC5wYXJlbnQ7XG4gICAgICAgICAgICB2YWxpZGF0aW9uUmVzdWx0LnByb2JsZW1zLnB1c2goe1xuICAgICAgICAgICAgICBsb2NhdGlvbjogeyBvZmZzZXQ6IHByb3BlcnR5Tm9kZS5rZXlOb2RlLm9mZnNldCwgbGVuZ3RoOiBwcm9wZXJ0eU5vZGUua2V5Tm9kZS5sZW5ndGggfSxcbiAgICAgICAgICAgICAgbWVzc2FnZTogc2NoZW1hLmVycm9yTWVzc2FnZSB8fCB0KFwiUHJvcGVydHkgezB9IGlzIG5vdCBhbGxvd2VkLlwiLCBwcm9wZXJ0eU5hbWUpXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICB9IGVsc2UgaWYgKGFkZGl0aW9uYWxQcm9wZXJ0aWVzICE9PSB0cnVlKSB7XG4gICAgICAgICAgICBjb25zdCBwcm9wZXJ0eVZhbGlkYXRpb25SZXN1bHQgPSBuZXcgVmFsaWRhdGlvblJlc3VsdCgpO1xuICAgICAgICAgICAgdmFsaWRhdGUoY2hpbGQsIGFkZGl0aW9uYWxQcm9wZXJ0aWVzLCBwcm9wZXJ0eVZhbGlkYXRpb25SZXN1bHQsIG1hdGNoaW5nU2NoZW1hcywgY29udGV4dCk7XG4gICAgICAgICAgICB2YWxpZGF0aW9uUmVzdWx0Lm1lcmdlUHJvcGVydHlNYXRjaChwcm9wZXJ0eVZhbGlkYXRpb25SZXN1bHQpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgICBjb25zdCB1bmV2YWx1YXRlZFByb3BlcnRpZXMgPSBzY2hlbWEudW5ldmFsdWF0ZWRQcm9wZXJ0aWVzO1xuICAgIGlmICh1bmV2YWx1YXRlZFByb3BlcnRpZXMgIT09IHZvaWQgMCkge1xuICAgICAgY29uc3QgcHJvY2Vzc2VkID0gW107XG4gICAgICBmb3IgKGNvbnN0IHByb3BlcnR5TmFtZSBvZiB1bnByb2Nlc3NlZFByb3BlcnRpZXMpIHtcbiAgICAgICAgaWYgKCF2YWxpZGF0aW9uUmVzdWx0LnByb2Nlc3NlZFByb3BlcnRpZXMuaGFzKHByb3BlcnR5TmFtZSkpIHtcbiAgICAgICAgICBwcm9jZXNzZWQucHVzaChwcm9wZXJ0eU5hbWUpO1xuICAgICAgICAgIGNvbnN0IGNoaWxkID0gc2VlbktleXNbcHJvcGVydHlOYW1lXTtcbiAgICAgICAgICBpZiAoY2hpbGQpIHtcbiAgICAgICAgICAgIGlmICh1bmV2YWx1YXRlZFByb3BlcnRpZXMgPT09IGZhbHNlKSB7XG4gICAgICAgICAgICAgIGNvbnN0IHByb3BlcnR5Tm9kZSA9IGNoaWxkLnBhcmVudDtcbiAgICAgICAgICAgICAgdmFsaWRhdGlvblJlc3VsdC5wcm9ibGVtcy5wdXNoKHtcbiAgICAgICAgICAgICAgICBsb2NhdGlvbjogeyBvZmZzZXQ6IHByb3BlcnR5Tm9kZS5rZXlOb2RlLm9mZnNldCwgbGVuZ3RoOiBwcm9wZXJ0eU5vZGUua2V5Tm9kZS5sZW5ndGggfSxcbiAgICAgICAgICAgICAgICBtZXNzYWdlOiBzY2hlbWEuZXJyb3JNZXNzYWdlIHx8IHQoXCJQcm9wZXJ0eSB7MH0gaXMgbm90IGFsbG93ZWQuXCIsIHByb3BlcnR5TmFtZSlcbiAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKHVuZXZhbHVhdGVkUHJvcGVydGllcyAhPT0gdHJ1ZSkge1xuICAgICAgICAgICAgICBjb25zdCBwcm9wZXJ0eVZhbGlkYXRpb25SZXN1bHQgPSBuZXcgVmFsaWRhdGlvblJlc3VsdCgpO1xuICAgICAgICAgICAgICB2YWxpZGF0ZShjaGlsZCwgdW5ldmFsdWF0ZWRQcm9wZXJ0aWVzLCBwcm9wZXJ0eVZhbGlkYXRpb25SZXN1bHQsIG1hdGNoaW5nU2NoZW1hcywgY29udGV4dCk7XG4gICAgICAgICAgICAgIHZhbGlkYXRpb25SZXN1bHQubWVyZ2VQcm9wZXJ0eU1hdGNoKHByb3BlcnR5VmFsaWRhdGlvblJlc3VsdCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgICBwcm9jZXNzZWQuZm9yRWFjaChwcm9wZXJ0eVByb2Nlc3NlZCk7XG4gICAgfVxuICAgIGlmIChpc051bWJlcihzY2hlbWEubWF4UHJvcGVydGllcykpIHtcbiAgICAgIGlmIChub2RlMi5wcm9wZXJ0aWVzLmxlbmd0aCA+IHNjaGVtYS5tYXhQcm9wZXJ0aWVzKSB7XG4gICAgICAgIHZhbGlkYXRpb25SZXN1bHQucHJvYmxlbXMucHVzaCh7XG4gICAgICAgICAgbG9jYXRpb246IHsgb2Zmc2V0OiBub2RlMi5vZmZzZXQsIGxlbmd0aDogbm9kZTIubGVuZ3RoIH0sXG4gICAgICAgICAgbWVzc2FnZTogdChcIk9iamVjdCBoYXMgbW9yZSBwcm9wZXJ0aWVzIHRoYW4gbGltaXQgb2YgezB9LlwiLCBzY2hlbWEubWF4UHJvcGVydGllcylcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfVxuICAgIGlmIChpc051bWJlcihzY2hlbWEubWluUHJvcGVydGllcykpIHtcbiAgICAgIGlmIChub2RlMi5wcm9wZXJ0aWVzLmxlbmd0aCA8IHNjaGVtYS5taW5Qcm9wZXJ0aWVzKSB7XG4gICAgICAgIHZhbGlkYXRpb25SZXN1bHQucHJvYmxlbXMucHVzaCh7XG4gICAgICAgICAgbG9jYXRpb246IHsgb2Zmc2V0OiBub2RlMi5vZmZzZXQsIGxlbmd0aDogbm9kZTIubGVuZ3RoIH0sXG4gICAgICAgICAgbWVzc2FnZTogdChcIk9iamVjdCBoYXMgZmV3ZXIgcHJvcGVydGllcyB0aGFuIHRoZSByZXF1aXJlZCBudW1iZXIgb2YgezB9XCIsIHNjaGVtYS5taW5Qcm9wZXJ0aWVzKVxuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9XG4gICAgaWYgKHNjaGVtYS5kZXBlbmRlbnRSZXF1aXJlZCkge1xuICAgICAgZm9yIChjb25zdCBrZXkgaW4gc2NoZW1hLmRlcGVuZGVudFJlcXVpcmVkKSB7XG4gICAgICAgIGNvbnN0IHByb3AgPSBzZWVuS2V5c1trZXldO1xuICAgICAgICBjb25zdCBwcm9wZXJ0eURlcHMgPSBzY2hlbWEuZGVwZW5kZW50UmVxdWlyZWRba2V5XTtcbiAgICAgICAgaWYgKHByb3AgJiYgQXJyYXkuaXNBcnJheShwcm9wZXJ0eURlcHMpKSB7XG4gICAgICAgICAgX3ZhbGlkYXRlUHJvcGVydHlEZXBlbmRlbmNpZXMoa2V5LCBwcm9wZXJ0eURlcHMpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICAgIGlmIChzY2hlbWEuZGVwZW5kZW50U2NoZW1hcykge1xuICAgICAgZm9yIChjb25zdCBrZXkgaW4gc2NoZW1hLmRlcGVuZGVudFNjaGVtYXMpIHtcbiAgICAgICAgY29uc3QgcHJvcCA9IHNlZW5LZXlzW2tleV07XG4gICAgICAgIGNvbnN0IHByb3BlcnR5RGVwcyA9IHNjaGVtYS5kZXBlbmRlbnRTY2hlbWFzW2tleV07XG4gICAgICAgIGlmIChwcm9wICYmIGlzT2JqZWN0KHByb3BlcnR5RGVwcykpIHtcbiAgICAgICAgICBfdmFsaWRhdGVQcm9wZXJ0eURlcGVuZGVuY2llcyhrZXksIHByb3BlcnR5RGVwcyk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gICAgaWYgKHNjaGVtYS5kZXBlbmRlbmNpZXMpIHtcbiAgICAgIGZvciAoY29uc3Qga2V5IGluIHNjaGVtYS5kZXBlbmRlbmNpZXMpIHtcbiAgICAgICAgY29uc3QgcHJvcCA9IHNlZW5LZXlzW2tleV07XG4gICAgICAgIGlmIChwcm9wKSB7XG4gICAgICAgICAgX3ZhbGlkYXRlUHJvcGVydHlEZXBlbmRlbmNpZXMoa2V5LCBzY2hlbWEuZGVwZW5kZW5jaWVzW2tleV0pO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICAgIGNvbnN0IHByb3BlcnR5TmFtZXMgPSBhc1NjaGVtYShzY2hlbWEucHJvcGVydHlOYW1lcyk7XG4gICAgaWYgKHByb3BlcnR5TmFtZXMpIHtcbiAgICAgIGZvciAoY29uc3QgZjIgb2Ygbm9kZTIucHJvcGVydGllcykge1xuICAgICAgICBjb25zdCBrZXkgPSBmMi5rZXlOb2RlO1xuICAgICAgICBpZiAoa2V5KSB7XG4gICAgICAgICAgdmFsaWRhdGUoa2V5LCBwcm9wZXJ0eU5hbWVzLCB2YWxpZGF0aW9uUmVzdWx0LCBOb09wU2NoZW1hQ29sbGVjdG9yLmluc3RhbmNlLCBjb250ZXh0KTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgICBmdW5jdGlvbiBfdmFsaWRhdGVQcm9wZXJ0eURlcGVuZGVuY2llcyhrZXksIHByb3BlcnR5RGVwKSB7XG4gICAgICBpZiAoQXJyYXkuaXNBcnJheShwcm9wZXJ0eURlcCkpIHtcbiAgICAgICAgZm9yIChjb25zdCByZXF1aXJlZFByb3Agb2YgcHJvcGVydHlEZXApIHtcbiAgICAgICAgICBpZiAoIXNlZW5LZXlzW3JlcXVpcmVkUHJvcF0pIHtcbiAgICAgICAgICAgIHZhbGlkYXRpb25SZXN1bHQucHJvYmxlbXMucHVzaCh7XG4gICAgICAgICAgICAgIGxvY2F0aW9uOiB7IG9mZnNldDogbm9kZTIub2Zmc2V0LCBsZW5ndGg6IG5vZGUyLmxlbmd0aCB9LFxuICAgICAgICAgICAgICBtZXNzYWdlOiB0KFwiT2JqZWN0IGlzIG1pc3NpbmcgcHJvcGVydHkgezB9IHJlcXVpcmVkIGJ5IHByb3BlcnR5IHsxfS5cIiwgcmVxdWlyZWRQcm9wLCBrZXkpXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdmFsaWRhdGlvblJlc3VsdC5wcm9wZXJ0aWVzVmFsdWVNYXRjaGVzKys7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBjb25zdCBwcm9wZXJ0eVNjaGVtYSA9IGFzU2NoZW1hKHByb3BlcnR5RGVwKTtcbiAgICAgICAgaWYgKHByb3BlcnR5U2NoZW1hKSB7XG4gICAgICAgICAgY29uc3QgcHJvcGVydHlWYWxpZGF0aW9uUmVzdWx0ID0gbmV3IFZhbGlkYXRpb25SZXN1bHQoKTtcbiAgICAgICAgICB2YWxpZGF0ZShub2RlMiwgcHJvcGVydHlTY2hlbWEsIHByb3BlcnR5VmFsaWRhdGlvblJlc3VsdCwgbWF0Y2hpbmdTY2hlbWFzLCBjb250ZXh0KTtcbiAgICAgICAgICB2YWxpZGF0aW9uUmVzdWx0Lm1lcmdlUHJvcGVydHlNYXRjaChwcm9wZXJ0eVZhbGlkYXRpb25SZXN1bHQpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9XG59XG5mdW5jdGlvbiBwYXJzZTModGV4dERvY3VtZW50LCBjb25maWcpIHtcbiAgY29uc3QgcHJvYmxlbXMgPSBbXTtcbiAgbGV0IGxhc3RQcm9ibGVtT2Zmc2V0ID0gLTE7XG4gIGNvbnN0IHRleHQgPSB0ZXh0RG9jdW1lbnQuZ2V0VGV4dCgpO1xuICBjb25zdCBzY2FubmVyID0gY3JlYXRlU2Nhbm5lcjIodGV4dCwgZmFsc2UpO1xuICBjb25zdCBjb21tZW50UmFuZ2VzID0gY29uZmlnICYmIGNvbmZpZy5jb2xsZWN0Q29tbWVudHMgPyBbXSA6IHZvaWQgMDtcbiAgZnVuY3Rpb24gX3NjYW5OZXh0KCkge1xuICAgIHdoaWxlICh0cnVlKSB7XG4gICAgICBjb25zdCB0b2tlbjIgPSBzY2FubmVyLnNjYW4oKTtcbiAgICAgIF9jaGVja1NjYW5FcnJvcigpO1xuICAgICAgc3dpdGNoICh0b2tlbjIpIHtcbiAgICAgICAgY2FzZSAxMjpcbiAgICAgICAgY2FzZSAxMzpcbiAgICAgICAgICBpZiAoQXJyYXkuaXNBcnJheShjb21tZW50UmFuZ2VzKSkge1xuICAgICAgICAgICAgY29tbWVudFJhbmdlcy5wdXNoKFJhbmdlLmNyZWF0ZSh0ZXh0RG9jdW1lbnQucG9zaXRpb25BdChzY2FubmVyLmdldFRva2VuT2Zmc2V0KCkpLCB0ZXh0RG9jdW1lbnQucG9zaXRpb25BdChzY2FubmVyLmdldFRva2VuT2Zmc2V0KCkgKyBzY2FubmVyLmdldFRva2VuTGVuZ3RoKCkpKSk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlIDE1OlxuICAgICAgICBjYXNlIDE0OlxuICAgICAgICAgIGJyZWFrO1xuICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgIHJldHVybiB0b2tlbjI7XG4gICAgICB9XG4gICAgfVxuICB9XG4gIGZ1bmN0aW9uIF9hY2NlcHQodG9rZW4yKSB7XG4gICAgaWYgKHNjYW5uZXIuZ2V0VG9rZW4oKSA9PT0gdG9rZW4yKSB7XG4gICAgICBfc2Nhbk5leHQoKTtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbiAgZnVuY3Rpb24gX2Vycm9yQXRSYW5nZShtZXNzYWdlLCBjb2RlLCBzdGFydE9mZnNldCwgZW5kT2Zmc2V0LCBzZXZlcml0eSA9IERpYWdub3N0aWNTZXZlcml0eS5FcnJvcikge1xuICAgIGlmIChwcm9ibGVtcy5sZW5ndGggPT09IDAgfHwgc3RhcnRPZmZzZXQgIT09IGxhc3RQcm9ibGVtT2Zmc2V0KSB7XG4gICAgICBjb25zdCByYW5nZSA9IFJhbmdlLmNyZWF0ZSh0ZXh0RG9jdW1lbnQucG9zaXRpb25BdChzdGFydE9mZnNldCksIHRleHREb2N1bWVudC5wb3NpdGlvbkF0KGVuZE9mZnNldCkpO1xuICAgICAgcHJvYmxlbXMucHVzaChEaWFnbm9zdGljLmNyZWF0ZShyYW5nZSwgbWVzc2FnZSwgc2V2ZXJpdHksIGNvZGUsIHRleHREb2N1bWVudC5sYW5ndWFnZUlkKSk7XG4gICAgICBsYXN0UHJvYmxlbU9mZnNldCA9IHN0YXJ0T2Zmc2V0O1xuICAgIH1cbiAgfVxuICBmdW5jdGlvbiBfZXJyb3IobWVzc2FnZSwgY29kZSwgbm9kZSA9IHZvaWQgMCwgc2tpcFVudGlsQWZ0ZXIgPSBbXSwgc2tpcFVudGlsID0gW10pIHtcbiAgICBsZXQgc3RhcnQgPSBzY2FubmVyLmdldFRva2VuT2Zmc2V0KCk7XG4gICAgbGV0IGVuZCA9IHNjYW5uZXIuZ2V0VG9rZW5PZmZzZXQoKSArIHNjYW5uZXIuZ2V0VG9rZW5MZW5ndGgoKTtcbiAgICBpZiAoc3RhcnQgPT09IGVuZCAmJiBzdGFydCA+IDApIHtcbiAgICAgIHN0YXJ0LS07XG4gICAgICB3aGlsZSAoc3RhcnQgPiAwICYmIC9cXHMvLnRlc3QodGV4dC5jaGFyQXQoc3RhcnQpKSkge1xuICAgICAgICBzdGFydC0tO1xuICAgICAgfVxuICAgICAgZW5kID0gc3RhcnQgKyAxO1xuICAgIH1cbiAgICBfZXJyb3JBdFJhbmdlKG1lc3NhZ2UsIGNvZGUsIHN0YXJ0LCBlbmQpO1xuICAgIGlmIChub2RlKSB7XG4gICAgICBfZmluYWxpemUobm9kZSwgZmFsc2UpO1xuICAgIH1cbiAgICBpZiAoc2tpcFVudGlsQWZ0ZXIubGVuZ3RoICsgc2tpcFVudGlsLmxlbmd0aCA+IDApIHtcbiAgICAgIGxldCB0b2tlbjIgPSBzY2FubmVyLmdldFRva2VuKCk7XG4gICAgICB3aGlsZSAodG9rZW4yICE9PSAxNykge1xuICAgICAgICBpZiAoc2tpcFVudGlsQWZ0ZXIuaW5kZXhPZih0b2tlbjIpICE9PSAtMSkge1xuICAgICAgICAgIF9zY2FuTmV4dCgpO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9IGVsc2UgaWYgKHNraXBVbnRpbC5pbmRleE9mKHRva2VuMikgIT09IC0xKSB7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgICAgdG9rZW4yID0gX3NjYW5OZXh0KCk7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBub2RlO1xuICB9XG4gIGZ1bmN0aW9uIF9jaGVja1NjYW5FcnJvcigpIHtcbiAgICBzd2l0Y2ggKHNjYW5uZXIuZ2V0VG9rZW5FcnJvcigpKSB7XG4gICAgICBjYXNlIDQ6XG4gICAgICAgIF9lcnJvcih0KFwiSW52YWxpZCB1bmljb2RlIHNlcXVlbmNlIGluIHN0cmluZy5cIiksIEVycm9yQ29kZS5JbnZhbGlkVW5pY29kZSk7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgY2FzZSA1OlxuICAgICAgICBfZXJyb3IodChcIkludmFsaWQgZXNjYXBlIGNoYXJhY3RlciBpbiBzdHJpbmcuXCIpLCBFcnJvckNvZGUuSW52YWxpZEVzY2FwZUNoYXJhY3Rlcik7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgY2FzZSAzOlxuICAgICAgICBfZXJyb3IodChcIlVuZXhwZWN0ZWQgZW5kIG9mIG51bWJlci5cIiksIEVycm9yQ29kZS5VbmV4cGVjdGVkRW5kT2ZOdW1iZXIpO1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgIGNhc2UgMTpcbiAgICAgICAgX2Vycm9yKHQoXCJVbmV4cGVjdGVkIGVuZCBvZiBjb21tZW50LlwiKSwgRXJyb3JDb2RlLlVuZXhwZWN0ZWRFbmRPZkNvbW1lbnQpO1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgIGNhc2UgMjpcbiAgICAgICAgX2Vycm9yKHQoXCJVbmV4cGVjdGVkIGVuZCBvZiBzdHJpbmcuXCIpLCBFcnJvckNvZGUuVW5leHBlY3RlZEVuZE9mU3RyaW5nKTtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICBjYXNlIDY6XG4gICAgICAgIF9lcnJvcih0KFwiSW52YWxpZCBjaGFyYWN0ZXJzIGluIHN0cmluZy4gQ29udHJvbCBjaGFyYWN0ZXJzIG11c3QgYmUgZXNjYXBlZC5cIiksIEVycm9yQ29kZS5JbnZhbGlkQ2hhcmFjdGVyKTtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuICBmdW5jdGlvbiBfZmluYWxpemUobm9kZSwgc2Nhbk5leHQpIHtcbiAgICBub2RlLmxlbmd0aCA9IHNjYW5uZXIuZ2V0VG9rZW5PZmZzZXQoKSArIHNjYW5uZXIuZ2V0VG9rZW5MZW5ndGgoKSAtIG5vZGUub2Zmc2V0O1xuICAgIGlmIChzY2FuTmV4dCkge1xuICAgICAgX3NjYW5OZXh0KCk7XG4gICAgfVxuICAgIHJldHVybiBub2RlO1xuICB9XG4gIGZ1bmN0aW9uIF9wYXJzZUFycmF5KHBhcmVudCkge1xuICAgIGlmIChzY2FubmVyLmdldFRva2VuKCkgIT09IDMpIHtcbiAgICAgIHJldHVybiB2b2lkIDA7XG4gICAgfVxuICAgIGNvbnN0IG5vZGUgPSBuZXcgQXJyYXlBU1ROb2RlSW1wbChwYXJlbnQsIHNjYW5uZXIuZ2V0VG9rZW5PZmZzZXQoKSk7XG4gICAgX3NjYW5OZXh0KCk7XG4gICAgY29uc3QgY291bnQgPSAwO1xuICAgIGxldCBuZWVkc0NvbW1hID0gZmFsc2U7XG4gICAgd2hpbGUgKHNjYW5uZXIuZ2V0VG9rZW4oKSAhPT0gNCAmJiBzY2FubmVyLmdldFRva2VuKCkgIT09IDE3KSB7XG4gICAgICBpZiAoc2Nhbm5lci5nZXRUb2tlbigpID09PSA1KSB7XG4gICAgICAgIGlmICghbmVlZHNDb21tYSkge1xuICAgICAgICAgIF9lcnJvcih0KFwiVmFsdWUgZXhwZWN0ZWRcIiksIEVycm9yQ29kZS5WYWx1ZUV4cGVjdGVkKTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBjb21tYU9mZnNldCA9IHNjYW5uZXIuZ2V0VG9rZW5PZmZzZXQoKTtcbiAgICAgICAgX3NjYW5OZXh0KCk7XG4gICAgICAgIGlmIChzY2FubmVyLmdldFRva2VuKCkgPT09IDQpIHtcbiAgICAgICAgICBpZiAobmVlZHNDb21tYSkge1xuICAgICAgICAgICAgX2Vycm9yQXRSYW5nZSh0KFwiVHJhaWxpbmcgY29tbWFcIiksIEVycm9yQ29kZS5UcmFpbGluZ0NvbW1hLCBjb21tYU9mZnNldCwgY29tbWFPZmZzZXQgKyAxKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgY29udGludWU7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSBpZiAobmVlZHNDb21tYSkge1xuICAgICAgICBfZXJyb3IodChcIkV4cGVjdGVkIGNvbW1hXCIpLCBFcnJvckNvZGUuQ29tbWFFeHBlY3RlZCk7XG4gICAgICB9XG4gICAgICBjb25zdCBpdGVtID0gX3BhcnNlVmFsdWUobm9kZSk7XG4gICAgICBpZiAoIWl0ZW0pIHtcbiAgICAgICAgX2Vycm9yKHQoXCJWYWx1ZSBleHBlY3RlZFwiKSwgRXJyb3JDb2RlLlZhbHVlRXhwZWN0ZWQsIHZvaWQgMCwgW10sIFtcbiAgICAgICAgICA0LFxuICAgICAgICAgIDVcbiAgICAgICAgICAvKiBKc29uLlN5bnRheEtpbmQuQ29tbWFUb2tlbiAqL1xuICAgICAgICBdKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIG5vZGUuaXRlbXMucHVzaChpdGVtKTtcbiAgICAgIH1cbiAgICAgIG5lZWRzQ29tbWEgPSB0cnVlO1xuICAgIH1cbiAgICBpZiAoc2Nhbm5lci5nZXRUb2tlbigpICE9PSA0KSB7XG4gICAgICByZXR1cm4gX2Vycm9yKHQoXCJFeHBlY3RlZCBjb21tYSBvciBjbG9zaW5nIGJyYWNrZXRcIiksIEVycm9yQ29kZS5Db21tYU9yQ2xvc2VCYWNrZXRFeHBlY3RlZCwgbm9kZSk7XG4gICAgfVxuICAgIHJldHVybiBfZmluYWxpemUobm9kZSwgdHJ1ZSk7XG4gIH1cbiAgY29uc3Qga2V5UGxhY2Vob2xkZXIgPSBuZXcgU3RyaW5nQVNUTm9kZUltcGwodm9pZCAwLCAwLCAwKTtcbiAgZnVuY3Rpb24gX3BhcnNlUHJvcGVydHkocGFyZW50LCBrZXlzU2Vlbikge1xuICAgIGNvbnN0IG5vZGUgPSBuZXcgUHJvcGVydHlBU1ROb2RlSW1wbChwYXJlbnQsIHNjYW5uZXIuZ2V0VG9rZW5PZmZzZXQoKSwga2V5UGxhY2Vob2xkZXIpO1xuICAgIGxldCBrZXkgPSBfcGFyc2VTdHJpbmcobm9kZSk7XG4gICAgaWYgKCFrZXkpIHtcbiAgICAgIGlmIChzY2FubmVyLmdldFRva2VuKCkgPT09IDE2KSB7XG4gICAgICAgIF9lcnJvcih0KFwiUHJvcGVydHkga2V5cyBtdXN0IGJlIGRvdWJsZXF1b3RlZFwiKSwgRXJyb3JDb2RlLlByb3BlcnR5S2V5c011c3RCZURvdWJsZXF1b3RlZCk7XG4gICAgICAgIGNvbnN0IGtleU5vZGUgPSBuZXcgU3RyaW5nQVNUTm9kZUltcGwobm9kZSwgc2Nhbm5lci5nZXRUb2tlbk9mZnNldCgpLCBzY2FubmVyLmdldFRva2VuTGVuZ3RoKCkpO1xuICAgICAgICBrZXlOb2RlLnZhbHVlID0gc2Nhbm5lci5nZXRUb2tlblZhbHVlKCk7XG4gICAgICAgIGtleSA9IGtleU5vZGU7XG4gICAgICAgIF9zY2FuTmV4dCgpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIHZvaWQgMDtcbiAgICAgIH1cbiAgICB9XG4gICAgbm9kZS5rZXlOb2RlID0ga2V5O1xuICAgIGlmIChrZXkudmFsdWUgIT09IFwiLy9cIikge1xuICAgICAgY29uc3Qgc2VlbiA9IGtleXNTZWVuW2tleS52YWx1ZV07XG4gICAgICBpZiAoc2Vlbikge1xuICAgICAgICBfZXJyb3JBdFJhbmdlKHQoXCJEdXBsaWNhdGUgb2JqZWN0IGtleVwiKSwgRXJyb3JDb2RlLkR1cGxpY2F0ZUtleSwgbm9kZS5rZXlOb2RlLm9mZnNldCwgbm9kZS5rZXlOb2RlLm9mZnNldCArIG5vZGUua2V5Tm9kZS5sZW5ndGgsIERpYWdub3N0aWNTZXZlcml0eS5XYXJuaW5nKTtcbiAgICAgICAgaWYgKGlzT2JqZWN0KHNlZW4pKSB7XG4gICAgICAgICAgX2Vycm9yQXRSYW5nZSh0KFwiRHVwbGljYXRlIG9iamVjdCBrZXlcIiksIEVycm9yQ29kZS5EdXBsaWNhdGVLZXksIHNlZW4ua2V5Tm9kZS5vZmZzZXQsIHNlZW4ua2V5Tm9kZS5vZmZzZXQgKyBzZWVuLmtleU5vZGUubGVuZ3RoLCBEaWFnbm9zdGljU2V2ZXJpdHkuV2FybmluZyk7XG4gICAgICAgIH1cbiAgICAgICAga2V5c1NlZW5ba2V5LnZhbHVlXSA9IHRydWU7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBrZXlzU2VlbltrZXkudmFsdWVdID0gbm9kZTtcbiAgICAgIH1cbiAgICB9XG4gICAgaWYgKHNjYW5uZXIuZ2V0VG9rZW4oKSA9PT0gNikge1xuICAgICAgbm9kZS5jb2xvbk9mZnNldCA9IHNjYW5uZXIuZ2V0VG9rZW5PZmZzZXQoKTtcbiAgICAgIF9zY2FuTmV4dCgpO1xuICAgIH0gZWxzZSB7XG4gICAgICBfZXJyb3IodChcIkNvbG9uIGV4cGVjdGVkXCIpLCBFcnJvckNvZGUuQ29sb25FeHBlY3RlZCk7XG4gICAgICBpZiAoc2Nhbm5lci5nZXRUb2tlbigpID09PSAxMCAmJiB0ZXh0RG9jdW1lbnQucG9zaXRpb25BdChrZXkub2Zmc2V0ICsga2V5Lmxlbmd0aCkubGluZSA8IHRleHREb2N1bWVudC5wb3NpdGlvbkF0KHNjYW5uZXIuZ2V0VG9rZW5PZmZzZXQoKSkubGluZSkge1xuICAgICAgICBub2RlLmxlbmd0aCA9IGtleS5sZW5ndGg7XG4gICAgICAgIHJldHVybiBub2RlO1xuICAgICAgfVxuICAgIH1cbiAgICBjb25zdCB2YWx1ZSA9IF9wYXJzZVZhbHVlKG5vZGUpO1xuICAgIGlmICghdmFsdWUpIHtcbiAgICAgIHJldHVybiBfZXJyb3IodChcIlZhbHVlIGV4cGVjdGVkXCIpLCBFcnJvckNvZGUuVmFsdWVFeHBlY3RlZCwgbm9kZSwgW10sIFtcbiAgICAgICAgMixcbiAgICAgICAgNVxuICAgICAgICAvKiBKc29uLlN5bnRheEtpbmQuQ29tbWFUb2tlbiAqL1xuICAgICAgXSk7XG4gICAgfVxuICAgIG5vZGUudmFsdWVOb2RlID0gdmFsdWU7XG4gICAgbm9kZS5sZW5ndGggPSB2YWx1ZS5vZmZzZXQgKyB2YWx1ZS5sZW5ndGggLSBub2RlLm9mZnNldDtcbiAgICByZXR1cm4gbm9kZTtcbiAgfVxuICBmdW5jdGlvbiBfcGFyc2VPYmplY3QocGFyZW50KSB7XG4gICAgaWYgKHNjYW5uZXIuZ2V0VG9rZW4oKSAhPT0gMSkge1xuICAgICAgcmV0dXJuIHZvaWQgMDtcbiAgICB9XG4gICAgY29uc3Qgbm9kZSA9IG5ldyBPYmplY3RBU1ROb2RlSW1wbChwYXJlbnQsIHNjYW5uZXIuZ2V0VG9rZW5PZmZzZXQoKSk7XG4gICAgY29uc3Qga2V5c1NlZW4gPSAvKiBAX19QVVJFX18gKi8gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiAgICBfc2Nhbk5leHQoKTtcbiAgICBsZXQgbmVlZHNDb21tYSA9IGZhbHNlO1xuICAgIHdoaWxlIChzY2FubmVyLmdldFRva2VuKCkgIT09IDIgJiYgc2Nhbm5lci5nZXRUb2tlbigpICE9PSAxNykge1xuICAgICAgaWYgKHNjYW5uZXIuZ2V0VG9rZW4oKSA9PT0gNSkge1xuICAgICAgICBpZiAoIW5lZWRzQ29tbWEpIHtcbiAgICAgICAgICBfZXJyb3IodChcIlByb3BlcnR5IGV4cGVjdGVkXCIpLCBFcnJvckNvZGUuUHJvcGVydHlFeHBlY3RlZCk7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgY29tbWFPZmZzZXQgPSBzY2FubmVyLmdldFRva2VuT2Zmc2V0KCk7XG4gICAgICAgIF9zY2FuTmV4dCgpO1xuICAgICAgICBpZiAoc2Nhbm5lci5nZXRUb2tlbigpID09PSAyKSB7XG4gICAgICAgICAgaWYgKG5lZWRzQ29tbWEpIHtcbiAgICAgICAgICAgIF9lcnJvckF0UmFuZ2UodChcIlRyYWlsaW5nIGNvbW1hXCIpLCBFcnJvckNvZGUuVHJhaWxpbmdDb21tYSwgY29tbWFPZmZzZXQsIGNvbW1hT2Zmc2V0ICsgMSk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICB9XG4gICAgICB9IGVsc2UgaWYgKG5lZWRzQ29tbWEpIHtcbiAgICAgICAgX2Vycm9yKHQoXCJFeHBlY3RlZCBjb21tYVwiKSwgRXJyb3JDb2RlLkNvbW1hRXhwZWN0ZWQpO1xuICAgICAgfVxuICAgICAgY29uc3QgcHJvcGVydHkgPSBfcGFyc2VQcm9wZXJ0eShub2RlLCBrZXlzU2Vlbik7XG4gICAgICBpZiAoIXByb3BlcnR5KSB7XG4gICAgICAgIF9lcnJvcih0KFwiUHJvcGVydHkgZXhwZWN0ZWRcIiksIEVycm9yQ29kZS5Qcm9wZXJ0eUV4cGVjdGVkLCB2b2lkIDAsIFtdLCBbXG4gICAgICAgICAgMixcbiAgICAgICAgICA1XG4gICAgICAgICAgLyogSnNvbi5TeW50YXhLaW5kLkNvbW1hVG9rZW4gKi9cbiAgICAgICAgXSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBub2RlLnByb3BlcnRpZXMucHVzaChwcm9wZXJ0eSk7XG4gICAgICB9XG4gICAgICBuZWVkc0NvbW1hID0gdHJ1ZTtcbiAgICB9XG4gICAgaWYgKHNjYW5uZXIuZ2V0VG9rZW4oKSAhPT0gMikge1xuICAgICAgcmV0dXJuIF9lcnJvcih0KFwiRXhwZWN0ZWQgY29tbWEgb3IgY2xvc2luZyBicmFjZVwiKSwgRXJyb3JDb2RlLkNvbW1hT3JDbG9zZUJyYWNlRXhwZWN0ZWQsIG5vZGUpO1xuICAgIH1cbiAgICByZXR1cm4gX2ZpbmFsaXplKG5vZGUsIHRydWUpO1xuICB9XG4gIGZ1bmN0aW9uIF9wYXJzZVN0cmluZyhwYXJlbnQpIHtcbiAgICBpZiAoc2Nhbm5lci5nZXRUb2tlbigpICE9PSAxMCkge1xuICAgICAgcmV0dXJuIHZvaWQgMDtcbiAgICB9XG4gICAgY29uc3Qgbm9kZSA9IG5ldyBTdHJpbmdBU1ROb2RlSW1wbChwYXJlbnQsIHNjYW5uZXIuZ2V0VG9rZW5PZmZzZXQoKSk7XG4gICAgbm9kZS52YWx1ZSA9IHNjYW5uZXIuZ2V0VG9rZW5WYWx1ZSgpO1xuICAgIHJldHVybiBfZmluYWxpemUobm9kZSwgdHJ1ZSk7XG4gIH1cbiAgZnVuY3Rpb24gX3BhcnNlTnVtYmVyKHBhcmVudCkge1xuICAgIGlmIChzY2FubmVyLmdldFRva2VuKCkgIT09IDExKSB7XG4gICAgICByZXR1cm4gdm9pZCAwO1xuICAgIH1cbiAgICBjb25zdCBub2RlID0gbmV3IE51bWJlckFTVE5vZGVJbXBsKHBhcmVudCwgc2Nhbm5lci5nZXRUb2tlbk9mZnNldCgpKTtcbiAgICBpZiAoc2Nhbm5lci5nZXRUb2tlbkVycm9yKCkgPT09IDApIHtcbiAgICAgIGNvbnN0IHRva2VuVmFsdWUgPSBzY2FubmVyLmdldFRva2VuVmFsdWUoKTtcbiAgICAgIHRyeSB7XG4gICAgICAgIGNvbnN0IG51bWJlclZhbHVlID0gSlNPTi5wYXJzZSh0b2tlblZhbHVlKTtcbiAgICAgICAgaWYgKCFpc051bWJlcihudW1iZXJWYWx1ZSkpIHtcbiAgICAgICAgICByZXR1cm4gX2Vycm9yKHQoXCJJbnZhbGlkIG51bWJlciBmb3JtYXQuXCIpLCBFcnJvckNvZGUuVW5kZWZpbmVkLCBub2RlKTtcbiAgICAgICAgfVxuICAgICAgICBub2RlLnZhbHVlID0gbnVtYmVyVmFsdWU7XG4gICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgIHJldHVybiBfZXJyb3IodChcIkludmFsaWQgbnVtYmVyIGZvcm1hdC5cIiksIEVycm9yQ29kZS5VbmRlZmluZWQsIG5vZGUpO1xuICAgICAgfVxuICAgICAgbm9kZS5pc0ludGVnZXIgPSB0b2tlblZhbHVlLmluZGV4T2YoXCIuXCIpID09PSAtMTtcbiAgICB9XG4gICAgcmV0dXJuIF9maW5hbGl6ZShub2RlLCB0cnVlKTtcbiAgfVxuICBmdW5jdGlvbiBfcGFyc2VMaXRlcmFsKHBhcmVudCkge1xuICAgIGxldCBub2RlO1xuICAgIHN3aXRjaCAoc2Nhbm5lci5nZXRUb2tlbigpKSB7XG4gICAgICBjYXNlIDc6XG4gICAgICAgIHJldHVybiBfZmluYWxpemUobmV3IE51bGxBU1ROb2RlSW1wbChwYXJlbnQsIHNjYW5uZXIuZ2V0VG9rZW5PZmZzZXQoKSksIHRydWUpO1xuICAgICAgY2FzZSA4OlxuICAgICAgICByZXR1cm4gX2ZpbmFsaXplKG5ldyBCb29sZWFuQVNUTm9kZUltcGwocGFyZW50LCB0cnVlLCBzY2FubmVyLmdldFRva2VuT2Zmc2V0KCkpLCB0cnVlKTtcbiAgICAgIGNhc2UgOTpcbiAgICAgICAgcmV0dXJuIF9maW5hbGl6ZShuZXcgQm9vbGVhbkFTVE5vZGVJbXBsKHBhcmVudCwgZmFsc2UsIHNjYW5uZXIuZ2V0VG9rZW5PZmZzZXQoKSksIHRydWUpO1xuICAgICAgZGVmYXVsdDpcbiAgICAgICAgcmV0dXJuIHZvaWQgMDtcbiAgICB9XG4gIH1cbiAgZnVuY3Rpb24gX3BhcnNlVmFsdWUocGFyZW50KSB7XG4gICAgcmV0dXJuIF9wYXJzZUFycmF5KHBhcmVudCkgfHwgX3BhcnNlT2JqZWN0KHBhcmVudCkgfHwgX3BhcnNlU3RyaW5nKHBhcmVudCkgfHwgX3BhcnNlTnVtYmVyKHBhcmVudCkgfHwgX3BhcnNlTGl0ZXJhbChwYXJlbnQpO1xuICB9XG4gIGxldCBfcm9vdCA9IHZvaWQgMDtcbiAgY29uc3QgdG9rZW4gPSBfc2Nhbk5leHQoKTtcbiAgaWYgKHRva2VuICE9PSAxNykge1xuICAgIF9yb290ID0gX3BhcnNlVmFsdWUoX3Jvb3QpO1xuICAgIGlmICghX3Jvb3QpIHtcbiAgICAgIF9lcnJvcih0KFwiRXhwZWN0ZWQgYSBKU09OIG9iamVjdCwgYXJyYXkgb3IgbGl0ZXJhbC5cIiksIEVycm9yQ29kZS5VbmRlZmluZWQpO1xuICAgIH0gZWxzZSBpZiAoc2Nhbm5lci5nZXRUb2tlbigpICE9PSAxNykge1xuICAgICAgX2Vycm9yKHQoXCJFbmQgb2YgZmlsZSBleHBlY3RlZC5cIiksIEVycm9yQ29kZS5VbmRlZmluZWQpO1xuICAgIH1cbiAgfVxuICByZXR1cm4gbmV3IEpTT05Eb2N1bWVudChfcm9vdCwgcHJvYmxlbXMsIGNvbW1lbnRSYW5nZXMpO1xufVxuXG4vLyBub2RlX21vZHVsZXMvdnNjb2RlLWpzb24tbGFuZ3VhZ2VzZXJ2aWNlL2xpYi9lc20vdXRpbHMvanNvbi5qc1xuZnVuY3Rpb24gc3RyaW5naWZ5T2JqZWN0KG9iaiwgaW5kZW50LCBzdHJpbmdpZnlMaXRlcmFsKSB7XG4gIGlmIChvYmogIT09IG51bGwgJiYgdHlwZW9mIG9iaiA9PT0gXCJvYmplY3RcIikge1xuICAgIGNvbnN0IG5ld0luZGVudCA9IGluZGVudCArIFwiXHRcIjtcbiAgICBpZiAoQXJyYXkuaXNBcnJheShvYmopKSB7XG4gICAgICBpZiAob2JqLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICByZXR1cm4gXCJbXVwiO1xuICAgICAgfVxuICAgICAgbGV0IHJlc3VsdCA9IFwiW1xcblwiO1xuICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBvYmoubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgcmVzdWx0ICs9IG5ld0luZGVudCArIHN0cmluZ2lmeU9iamVjdChvYmpbaV0sIG5ld0luZGVudCwgc3RyaW5naWZ5TGl0ZXJhbCk7XG4gICAgICAgIGlmIChpIDwgb2JqLmxlbmd0aCAtIDEpIHtcbiAgICAgICAgICByZXN1bHQgKz0gXCIsXCI7XG4gICAgICAgIH1cbiAgICAgICAgcmVzdWx0ICs9IFwiXFxuXCI7XG4gICAgICB9XG4gICAgICByZXN1bHQgKz0gaW5kZW50ICsgXCJdXCI7XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH0gZWxzZSB7XG4gICAgICBjb25zdCBrZXlzID0gT2JqZWN0LmtleXMob2JqKTtcbiAgICAgIGlmIChrZXlzLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICByZXR1cm4gXCJ7fVwiO1xuICAgICAgfVxuICAgICAgbGV0IHJlc3VsdCA9IFwie1xcblwiO1xuICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBrZXlzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGNvbnN0IGtleSA9IGtleXNbaV07XG4gICAgICAgIHJlc3VsdCArPSBuZXdJbmRlbnQgKyBKU09OLnN0cmluZ2lmeShrZXkpICsgXCI6IFwiICsgc3RyaW5naWZ5T2JqZWN0KG9ialtrZXldLCBuZXdJbmRlbnQsIHN0cmluZ2lmeUxpdGVyYWwpO1xuICAgICAgICBpZiAoaSA8IGtleXMubGVuZ3RoIC0gMSkge1xuICAgICAgICAgIHJlc3VsdCArPSBcIixcIjtcbiAgICAgICAgfVxuICAgICAgICByZXN1bHQgKz0gXCJcXG5cIjtcbiAgICAgIH1cbiAgICAgIHJlc3VsdCArPSBpbmRlbnQgKyBcIn1cIjtcbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuICB9XG4gIHJldHVybiBzdHJpbmdpZnlMaXRlcmFsKG9iaik7XG59XG5cbi8vIG5vZGVfbW9kdWxlcy92c2NvZGUtanNvbi1sYW5ndWFnZXNlcnZpY2UvbGliL2VzbS9zZXJ2aWNlcy9qc29uQ29tcGxldGlvbi5qc1xudmFyIHZhbHVlQ29tbWl0Q2hhcmFjdGVycyA9IFtcIixcIiwgXCJ9XCIsIFwiXVwiXTtcbnZhciBwcm9wZXJ0eUNvbW1pdENoYXJhY3RlcnMgPSBbXCI6XCJdO1xudmFyIEpTT05Db21wbGV0aW9uID0gY2xhc3Mge1xuICBjb25zdHJ1Y3RvcihzY2hlbWFTZXJ2aWNlLCBjb250cmlidXRpb25zID0gW10sIHByb21pc2VDb25zdHJ1Y3RvciA9IFByb21pc2UsIGNsaWVudENhcGFiaWxpdGllcyA9IHt9KSB7XG4gICAgdGhpcy5zY2hlbWFTZXJ2aWNlID0gc2NoZW1hU2VydmljZTtcbiAgICB0aGlzLmNvbnRyaWJ1dGlvbnMgPSBjb250cmlidXRpb25zO1xuICAgIHRoaXMucHJvbWlzZUNvbnN0cnVjdG9yID0gcHJvbWlzZUNvbnN0cnVjdG9yO1xuICAgIHRoaXMuY2xpZW50Q2FwYWJpbGl0aWVzID0gY2xpZW50Q2FwYWJpbGl0aWVzO1xuICB9XG4gIGRvUmVzb2x2ZShpdGVtKSB7XG4gICAgZm9yIChsZXQgaSA9IHRoaXMuY29udHJpYnV0aW9ucy5sZW5ndGggLSAxOyBpID49IDA7IGktLSkge1xuICAgICAgY29uc3QgcmVzb2x2ZUNvbXBsZXRpb24gPSB0aGlzLmNvbnRyaWJ1dGlvbnNbaV0ucmVzb2x2ZUNvbXBsZXRpb247XG4gICAgICBpZiAocmVzb2x2ZUNvbXBsZXRpb24pIHtcbiAgICAgICAgY29uc3QgcmVzb2x2ZXIgPSByZXNvbHZlQ29tcGxldGlvbihpdGVtKTtcbiAgICAgICAgaWYgKHJlc29sdmVyKSB7XG4gICAgICAgICAgcmV0dXJuIHJlc29sdmVyO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiB0aGlzLnByb21pc2VDb25zdHJ1Y3Rvci5yZXNvbHZlKGl0ZW0pO1xuICB9XG4gIGRvQ29tcGxldGUoZG9jdW1lbnQsIHBvc2l0aW9uLCBkb2MpIHtcbiAgICBjb25zdCByZXN1bHQgPSB7XG4gICAgICBpdGVtczogW10sXG4gICAgICBpc0luY29tcGxldGU6IGZhbHNlXG4gICAgfTtcbiAgICBjb25zdCB0ZXh0ID0gZG9jdW1lbnQuZ2V0VGV4dCgpO1xuICAgIGNvbnN0IG9mZnNldCA9IGRvY3VtZW50Lm9mZnNldEF0KHBvc2l0aW9uKTtcbiAgICBsZXQgbm9kZSA9IGRvYy5nZXROb2RlRnJvbU9mZnNldChvZmZzZXQsIHRydWUpO1xuICAgIGlmICh0aGlzLmlzSW5Db21tZW50KGRvY3VtZW50LCBub2RlID8gbm9kZS5vZmZzZXQgOiAwLCBvZmZzZXQpKSB7XG4gICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKHJlc3VsdCk7XG4gICAgfVxuICAgIGlmIChub2RlICYmIG9mZnNldCA9PT0gbm9kZS5vZmZzZXQgKyBub2RlLmxlbmd0aCAmJiBvZmZzZXQgPiAwKSB7XG4gICAgICBjb25zdCBjaCA9IHRleHRbb2Zmc2V0IC0gMV07XG4gICAgICBpZiAobm9kZS50eXBlID09PSBcIm9iamVjdFwiICYmIGNoID09PSBcIn1cIiB8fCBub2RlLnR5cGUgPT09IFwiYXJyYXlcIiAmJiBjaCA9PT0gXCJdXCIpIHtcbiAgICAgICAgbm9kZSA9IG5vZGUucGFyZW50O1xuICAgICAgfVxuICAgIH1cbiAgICBjb25zdCBjdXJyZW50V29yZCA9IHRoaXMuZ2V0Q3VycmVudFdvcmQoZG9jdW1lbnQsIG9mZnNldCk7XG4gICAgbGV0IG92ZXJ3cml0ZVJhbmdlO1xuICAgIGlmIChub2RlICYmIChub2RlLnR5cGUgPT09IFwic3RyaW5nXCIgfHwgbm9kZS50eXBlID09PSBcIm51bWJlclwiIHx8IG5vZGUudHlwZSA9PT0gXCJib29sZWFuXCIgfHwgbm9kZS50eXBlID09PSBcIm51bGxcIikpIHtcbiAgICAgIG92ZXJ3cml0ZVJhbmdlID0gUmFuZ2UuY3JlYXRlKGRvY3VtZW50LnBvc2l0aW9uQXQobm9kZS5vZmZzZXQpLCBkb2N1bWVudC5wb3NpdGlvbkF0KG5vZGUub2Zmc2V0ICsgbm9kZS5sZW5ndGgpKTtcbiAgICB9IGVsc2Uge1xuICAgICAgbGV0IG92ZXJ3cml0ZVN0YXJ0ID0gb2Zmc2V0IC0gY3VycmVudFdvcmQubGVuZ3RoO1xuICAgICAgaWYgKG92ZXJ3cml0ZVN0YXJ0ID4gMCAmJiB0ZXh0W292ZXJ3cml0ZVN0YXJ0IC0gMV0gPT09ICdcIicpIHtcbiAgICAgICAgb3ZlcndyaXRlU3RhcnQtLTtcbiAgICAgIH1cbiAgICAgIG92ZXJ3cml0ZVJhbmdlID0gUmFuZ2UuY3JlYXRlKGRvY3VtZW50LnBvc2l0aW9uQXQob3ZlcndyaXRlU3RhcnQpLCBwb3NpdGlvbik7XG4gICAgfVxuICAgIGNvbnN0IHN1cHBvcnRzQ29tbWl0Q2hhcmFjdGVycyA9IGZhbHNlO1xuICAgIGNvbnN0IHByb3Bvc2VkID0gLyogQF9fUFVSRV9fICovIG5ldyBNYXAoKTtcbiAgICBjb25zdCBjb2xsZWN0b3IgPSB7XG4gICAgICBhZGQ6IChzdWdnZXN0aW9uKSA9PiB7XG4gICAgICAgIGxldCBsYWJlbCA9IHN1Z2dlc3Rpb24ubGFiZWw7XG4gICAgICAgIGNvbnN0IGV4aXN0aW5nID0gcHJvcG9zZWQuZ2V0KGxhYmVsKTtcbiAgICAgICAgaWYgKCFleGlzdGluZykge1xuICAgICAgICAgIGxhYmVsID0gbGFiZWwucmVwbGFjZSgvW1xcbl0vZywgXCJcXHUyMUI1XCIpO1xuICAgICAgICAgIGlmIChsYWJlbC5sZW5ndGggPiA2MCkge1xuICAgICAgICAgICAgY29uc3Qgc2hvcnRlbmRlZExhYmVsID0gbGFiZWwuc3Vic3RyKDAsIDU3KS50cmltKCkgKyBcIi4uLlwiO1xuICAgICAgICAgICAgaWYgKCFwcm9wb3NlZC5oYXMoc2hvcnRlbmRlZExhYmVsKSkge1xuICAgICAgICAgICAgICBsYWJlbCA9IHNob3J0ZW5kZWRMYWJlbDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgICAgc3VnZ2VzdGlvbi50ZXh0RWRpdCA9IFRleHRFZGl0LnJlcGxhY2Uob3ZlcndyaXRlUmFuZ2UsIHN1Z2dlc3Rpb24uaW5zZXJ0VGV4dCk7XG4gICAgICAgICAgaWYgKHN1cHBvcnRzQ29tbWl0Q2hhcmFjdGVycykge1xuICAgICAgICAgICAgc3VnZ2VzdGlvbi5jb21taXRDaGFyYWN0ZXJzID0gc3VnZ2VzdGlvbi5raW5kID09PSBDb21wbGV0aW9uSXRlbUtpbmQuUHJvcGVydHkgPyBwcm9wZXJ0eUNvbW1pdENoYXJhY3RlcnMgOiB2YWx1ZUNvbW1pdENoYXJhY3RlcnM7XG4gICAgICAgICAgfVxuICAgICAgICAgIHN1Z2dlc3Rpb24ubGFiZWwgPSBsYWJlbDtcbiAgICAgICAgICBwcm9wb3NlZC5zZXQobGFiZWwsIHN1Z2dlc3Rpb24pO1xuICAgICAgICAgIHJlc3VsdC5pdGVtcy5wdXNoKHN1Z2dlc3Rpb24pO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGlmICghZXhpc3RpbmcuZG9jdW1lbnRhdGlvbikge1xuICAgICAgICAgICAgZXhpc3RpbmcuZG9jdW1lbnRhdGlvbiA9IHN1Z2dlc3Rpb24uZG9jdW1lbnRhdGlvbjtcbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKCFleGlzdGluZy5kZXRhaWwpIHtcbiAgICAgICAgICAgIGV4aXN0aW5nLmRldGFpbCA9IHN1Z2dlc3Rpb24uZGV0YWlsO1xuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAoIWV4aXN0aW5nLmxhYmVsRGV0YWlscykge1xuICAgICAgICAgICAgZXhpc3RpbmcubGFiZWxEZXRhaWxzID0gc3VnZ2VzdGlvbi5sYWJlbERldGFpbHM7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9LFxuICAgICAgc2V0QXNJbmNvbXBsZXRlOiAoKSA9PiB7XG4gICAgICAgIHJlc3VsdC5pc0luY29tcGxldGUgPSB0cnVlO1xuICAgICAgfSxcbiAgICAgIGVycm9yOiAobWVzc2FnZSkgPT4ge1xuICAgICAgICBjb25zb2xlLmVycm9yKG1lc3NhZ2UpO1xuICAgICAgfSxcbiAgICAgIGdldE51bWJlck9mUHJvcG9zYWxzOiAoKSA9PiB7XG4gICAgICAgIHJldHVybiByZXN1bHQuaXRlbXMubGVuZ3RoO1xuICAgICAgfVxuICAgIH07XG4gICAgcmV0dXJuIHRoaXMuc2NoZW1hU2VydmljZS5nZXRTY2hlbWFGb3JSZXNvdXJjZShkb2N1bWVudC51cmksIGRvYykudGhlbigoc2NoZW1hKSA9PiB7XG4gICAgICBjb25zdCBjb2xsZWN0aW9uUHJvbWlzZXMgPSBbXTtcbiAgICAgIGxldCBhZGRWYWx1ZSA9IHRydWU7XG4gICAgICBsZXQgY3VycmVudEtleSA9IFwiXCI7XG4gICAgICBsZXQgY3VycmVudFByb3BlcnR5ID0gdm9pZCAwO1xuICAgICAgaWYgKG5vZGUpIHtcbiAgICAgICAgaWYgKG5vZGUudHlwZSA9PT0gXCJzdHJpbmdcIikge1xuICAgICAgICAgIGNvbnN0IHBhcmVudCA9IG5vZGUucGFyZW50O1xuICAgICAgICAgIGlmIChwYXJlbnQgJiYgcGFyZW50LnR5cGUgPT09IFwicHJvcGVydHlcIiAmJiBwYXJlbnQua2V5Tm9kZSA9PT0gbm9kZSkge1xuICAgICAgICAgICAgYWRkVmFsdWUgPSAhcGFyZW50LnZhbHVlTm9kZTtcbiAgICAgICAgICAgIGN1cnJlbnRQcm9wZXJ0eSA9IHBhcmVudDtcbiAgICAgICAgICAgIGN1cnJlbnRLZXkgPSB0ZXh0LnN1YnN0cihub2RlLm9mZnNldCArIDEsIG5vZGUubGVuZ3RoIC0gMik7XG4gICAgICAgICAgICBpZiAocGFyZW50KSB7XG4gICAgICAgICAgICAgIG5vZGUgPSBwYXJlbnQucGFyZW50O1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgaWYgKG5vZGUgJiYgbm9kZS50eXBlID09PSBcIm9iamVjdFwiKSB7XG4gICAgICAgIGlmIChub2RlLm9mZnNldCA9PT0gb2Zmc2V0KSB7XG4gICAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBwcm9wZXJ0aWVzID0gbm9kZS5wcm9wZXJ0aWVzO1xuICAgICAgICBwcm9wZXJ0aWVzLmZvckVhY2goKHApID0+IHtcbiAgICAgICAgICBpZiAoIWN1cnJlbnRQcm9wZXJ0eSB8fCBjdXJyZW50UHJvcGVydHkgIT09IHApIHtcbiAgICAgICAgICAgIHByb3Bvc2VkLnNldChwLmtleU5vZGUudmFsdWUsIENvbXBsZXRpb25JdGVtLmNyZWF0ZShcIl9fXCIpKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgICBsZXQgc2VwYXJhdG9yQWZ0ZXIgPSBcIlwiO1xuICAgICAgICBpZiAoYWRkVmFsdWUpIHtcbiAgICAgICAgICBzZXBhcmF0b3JBZnRlciA9IHRoaXMuZXZhbHVhdGVTZXBhcmF0b3JBZnRlcihkb2N1bWVudCwgZG9jdW1lbnQub2Zmc2V0QXQob3ZlcndyaXRlUmFuZ2UuZW5kKSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHNjaGVtYSkge1xuICAgICAgICAgIHRoaXMuZ2V0UHJvcGVydHlDb21wbGV0aW9ucyhzY2hlbWEsIGRvYywgbm9kZSwgYWRkVmFsdWUsIHNlcGFyYXRvckFmdGVyLCBjb2xsZWN0b3IpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHRoaXMuZ2V0U2NoZW1hTGVzc1Byb3BlcnR5Q29tcGxldGlvbnMoZG9jLCBub2RlLCBjdXJyZW50S2V5LCBjb2xsZWN0b3IpO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IGxvY2F0aW9uID0gZ2V0Tm9kZVBhdGgzKG5vZGUpO1xuICAgICAgICB0aGlzLmNvbnRyaWJ1dGlvbnMuZm9yRWFjaCgoY29udHJpYnV0aW9uKSA9PiB7XG4gICAgICAgICAgY29uc3QgY29sbGVjdFByb21pc2UgPSBjb250cmlidXRpb24uY29sbGVjdFByb3BlcnR5Q29tcGxldGlvbnMoZG9jdW1lbnQudXJpLCBsb2NhdGlvbiwgY3VycmVudFdvcmQsIGFkZFZhbHVlLCBzZXBhcmF0b3JBZnRlciA9PT0gXCJcIiwgY29sbGVjdG9yKTtcbiAgICAgICAgICBpZiAoY29sbGVjdFByb21pc2UpIHtcbiAgICAgICAgICAgIGNvbGxlY3Rpb25Qcm9taXNlcy5wdXNoKGNvbGxlY3RQcm9taXNlKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgICBpZiAoIXNjaGVtYSAmJiBjdXJyZW50V29yZC5sZW5ndGggPiAwICYmIHRleHQuY2hhckF0KG9mZnNldCAtIGN1cnJlbnRXb3JkLmxlbmd0aCAtIDEpICE9PSAnXCInKSB7XG4gICAgICAgICAgY29sbGVjdG9yLmFkZCh7XG4gICAgICAgICAgICBraW5kOiBDb21wbGV0aW9uSXRlbUtpbmQuUHJvcGVydHksXG4gICAgICAgICAgICBsYWJlbDogdGhpcy5nZXRMYWJlbEZvclZhbHVlKGN1cnJlbnRXb3JkKSxcbiAgICAgICAgICAgIGluc2VydFRleHQ6IHRoaXMuZ2V0SW5zZXJ0VGV4dEZvclByb3BlcnR5KGN1cnJlbnRXb3JkLCB2b2lkIDAsIGZhbHNlLCBzZXBhcmF0b3JBZnRlciksXG4gICAgICAgICAgICBpbnNlcnRUZXh0Rm9ybWF0OiBJbnNlcnRUZXh0Rm9ybWF0LlNuaXBwZXQsXG4gICAgICAgICAgICBkb2N1bWVudGF0aW9uOiBcIlwiXG4gICAgICAgICAgfSk7XG4gICAgICAgICAgY29sbGVjdG9yLnNldEFzSW5jb21wbGV0ZSgpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBjb25zdCB0eXBlcyA9IHt9O1xuICAgICAgaWYgKHNjaGVtYSkge1xuICAgICAgICB0aGlzLmdldFZhbHVlQ29tcGxldGlvbnMoc2NoZW1hLCBkb2MsIG5vZGUsIG9mZnNldCwgZG9jdW1lbnQsIGNvbGxlY3RvciwgdHlwZXMpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhpcy5nZXRTY2hlbWFMZXNzVmFsdWVDb21wbGV0aW9ucyhkb2MsIG5vZGUsIG9mZnNldCwgZG9jdW1lbnQsIGNvbGxlY3Rvcik7XG4gICAgICB9XG4gICAgICBpZiAodGhpcy5jb250cmlidXRpb25zLmxlbmd0aCA+IDApIHtcbiAgICAgICAgdGhpcy5nZXRDb250cmlidXRlZFZhbHVlQ29tcGxldGlvbnMoZG9jLCBub2RlLCBvZmZzZXQsIGRvY3VtZW50LCBjb2xsZWN0b3IsIGNvbGxlY3Rpb25Qcm9taXNlcyk7XG4gICAgICB9XG4gICAgICByZXR1cm4gdGhpcy5wcm9taXNlQ29uc3RydWN0b3IuYWxsKGNvbGxlY3Rpb25Qcm9taXNlcykudGhlbigoKSA9PiB7XG4gICAgICAgIGlmIChjb2xsZWN0b3IuZ2V0TnVtYmVyT2ZQcm9wb3NhbHMoKSA9PT0gMCkge1xuICAgICAgICAgIGxldCBvZmZzZXRGb3JTZXBhcmF0b3IgPSBvZmZzZXQ7XG4gICAgICAgICAgaWYgKG5vZGUgJiYgKG5vZGUudHlwZSA9PT0gXCJzdHJpbmdcIiB8fCBub2RlLnR5cGUgPT09IFwibnVtYmVyXCIgfHwgbm9kZS50eXBlID09PSBcImJvb2xlYW5cIiB8fCBub2RlLnR5cGUgPT09IFwibnVsbFwiKSkge1xuICAgICAgICAgICAgb2Zmc2V0Rm9yU2VwYXJhdG9yID0gbm9kZS5vZmZzZXQgKyBub2RlLmxlbmd0aDtcbiAgICAgICAgICB9XG4gICAgICAgICAgY29uc3Qgc2VwYXJhdG9yQWZ0ZXIgPSB0aGlzLmV2YWx1YXRlU2VwYXJhdG9yQWZ0ZXIoZG9jdW1lbnQsIG9mZnNldEZvclNlcGFyYXRvcik7XG4gICAgICAgICAgdGhpcy5hZGRGaWxsZXJWYWx1ZUNvbXBsZXRpb25zKHR5cGVzLCBzZXBhcmF0b3JBZnRlciwgY29sbGVjdG9yKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgICAgfSk7XG4gICAgfSk7XG4gIH1cbiAgZ2V0UHJvcGVydHlDb21wbGV0aW9ucyhzY2hlbWEsIGRvYywgbm9kZSwgYWRkVmFsdWUsIHNlcGFyYXRvckFmdGVyLCBjb2xsZWN0b3IpIHtcbiAgICBjb25zdCBtYXRjaGluZ1NjaGVtYXMgPSBkb2MuZ2V0TWF0Y2hpbmdTY2hlbWFzKHNjaGVtYS5zY2hlbWEsIG5vZGUub2Zmc2V0KTtcbiAgICBtYXRjaGluZ1NjaGVtYXMuZm9yRWFjaCgocykgPT4ge1xuICAgICAgaWYgKHMubm9kZSA9PT0gbm9kZSAmJiAhcy5pbnZlcnRlZCkge1xuICAgICAgICBjb25zdCBzY2hlbWFQcm9wZXJ0aWVzID0gcy5zY2hlbWEucHJvcGVydGllcztcbiAgICAgICAgaWYgKHNjaGVtYVByb3BlcnRpZXMpIHtcbiAgICAgICAgICBPYmplY3Qua2V5cyhzY2hlbWFQcm9wZXJ0aWVzKS5mb3JFYWNoKChrZXkpID0+IHtcbiAgICAgICAgICAgIGNvbnN0IHByb3BlcnR5U2NoZW1hID0gc2NoZW1hUHJvcGVydGllc1trZXldO1xuICAgICAgICAgICAgaWYgKHR5cGVvZiBwcm9wZXJ0eVNjaGVtYSA9PT0gXCJvYmplY3RcIiAmJiAhcHJvcGVydHlTY2hlbWEuZGVwcmVjYXRpb25NZXNzYWdlICYmICFwcm9wZXJ0eVNjaGVtYS5kb05vdFN1Z2dlc3QpIHtcbiAgICAgICAgICAgICAgY29uc3QgcHJvcG9zYWwgPSB7XG4gICAgICAgICAgICAgICAga2luZDogQ29tcGxldGlvbkl0ZW1LaW5kLlByb3BlcnR5LFxuICAgICAgICAgICAgICAgIGxhYmVsOiBrZXksXG4gICAgICAgICAgICAgICAgaW5zZXJ0VGV4dDogdGhpcy5nZXRJbnNlcnRUZXh0Rm9yUHJvcGVydHkoa2V5LCBwcm9wZXJ0eVNjaGVtYSwgYWRkVmFsdWUsIHNlcGFyYXRvckFmdGVyKSxcbiAgICAgICAgICAgICAgICBpbnNlcnRUZXh0Rm9ybWF0OiBJbnNlcnRUZXh0Rm9ybWF0LlNuaXBwZXQsXG4gICAgICAgICAgICAgICAgZmlsdGVyVGV4dDogdGhpcy5nZXRGaWx0ZXJUZXh0Rm9yVmFsdWUoa2V5KSxcbiAgICAgICAgICAgICAgICBkb2N1bWVudGF0aW9uOiB0aGlzLmZyb21NYXJrdXAocHJvcGVydHlTY2hlbWEubWFya2Rvd25EZXNjcmlwdGlvbikgfHwgcHJvcGVydHlTY2hlbWEuZGVzY3JpcHRpb24gfHwgXCJcIlxuICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICBpZiAocHJvcGVydHlTY2hlbWEuc3VnZ2VzdFNvcnRUZXh0ICE9PSB2b2lkIDApIHtcbiAgICAgICAgICAgICAgICBwcm9wb3NhbC5zb3J0VGV4dCA9IHByb3BlcnR5U2NoZW1hLnN1Z2dlc3RTb3J0VGV4dDtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICBpZiAocHJvcG9zYWwuaW5zZXJ0VGV4dCAmJiBlbmRzV2l0aChwcm9wb3NhbC5pbnNlcnRUZXh0LCBgJDEke3NlcGFyYXRvckFmdGVyfWApKSB7XG4gICAgICAgICAgICAgICAgcHJvcG9zYWwuY29tbWFuZCA9IHtcbiAgICAgICAgICAgICAgICAgIHRpdGxlOiBcIlN1Z2dlc3RcIixcbiAgICAgICAgICAgICAgICAgIGNvbW1hbmQ6IFwiZWRpdG9yLmFjdGlvbi50cmlnZ2VyU3VnZ2VzdFwiXG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICBjb2xsZWN0b3IuYWRkKHByb3Bvc2FsKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBzY2hlbWFQcm9wZXJ0eU5hbWVzID0gcy5zY2hlbWEucHJvcGVydHlOYW1lcztcbiAgICAgICAgaWYgKHR5cGVvZiBzY2hlbWFQcm9wZXJ0eU5hbWVzID09PSBcIm9iamVjdFwiICYmICFzY2hlbWFQcm9wZXJ0eU5hbWVzLmRlcHJlY2F0aW9uTWVzc2FnZSAmJiAhc2NoZW1hUHJvcGVydHlOYW1lcy5kb05vdFN1Z2dlc3QpIHtcbiAgICAgICAgICBjb25zdCBwcm9wZXJ0eU5hbWVDb21wbGV0aW9uSXRlbSA9IChuYW1lLCBlbnVtRGVzY3JpcHRpb24gPSB2b2lkIDApID0+IHtcbiAgICAgICAgICAgIGNvbnN0IHByb3Bvc2FsID0ge1xuICAgICAgICAgICAgICBraW5kOiBDb21wbGV0aW9uSXRlbUtpbmQuUHJvcGVydHksXG4gICAgICAgICAgICAgIGxhYmVsOiBuYW1lLFxuICAgICAgICAgICAgICBpbnNlcnRUZXh0OiB0aGlzLmdldEluc2VydFRleHRGb3JQcm9wZXJ0eShuYW1lLCB2b2lkIDAsIGFkZFZhbHVlLCBzZXBhcmF0b3JBZnRlciksXG4gICAgICAgICAgICAgIGluc2VydFRleHRGb3JtYXQ6IEluc2VydFRleHRGb3JtYXQuU25pcHBldCxcbiAgICAgICAgICAgICAgZmlsdGVyVGV4dDogdGhpcy5nZXRGaWx0ZXJUZXh0Rm9yVmFsdWUobmFtZSksXG4gICAgICAgICAgICAgIGRvY3VtZW50YXRpb246IGVudW1EZXNjcmlwdGlvbiB8fCB0aGlzLmZyb21NYXJrdXAoc2NoZW1hUHJvcGVydHlOYW1lcy5tYXJrZG93bkRlc2NyaXB0aW9uKSB8fCBzY2hlbWFQcm9wZXJ0eU5hbWVzLmRlc2NyaXB0aW9uIHx8IFwiXCJcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICBpZiAoc2NoZW1hUHJvcGVydHlOYW1lcy5zdWdnZXN0U29ydFRleHQgIT09IHZvaWQgMCkge1xuICAgICAgICAgICAgICBwcm9wb3NhbC5zb3J0VGV4dCA9IHNjaGVtYVByb3BlcnR5TmFtZXMuc3VnZ2VzdFNvcnRUZXh0O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKHByb3Bvc2FsLmluc2VydFRleHQgJiYgZW5kc1dpdGgocHJvcG9zYWwuaW5zZXJ0VGV4dCwgYCQxJHtzZXBhcmF0b3JBZnRlcn1gKSkge1xuICAgICAgICAgICAgICBwcm9wb3NhbC5jb21tYW5kID0ge1xuICAgICAgICAgICAgICAgIHRpdGxlOiBcIlN1Z2dlc3RcIixcbiAgICAgICAgICAgICAgICBjb21tYW5kOiBcImVkaXRvci5hY3Rpb24udHJpZ2dlclN1Z2dlc3RcIlxuICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY29sbGVjdG9yLmFkZChwcm9wb3NhbCk7XG4gICAgICAgICAgfTtcbiAgICAgICAgICBpZiAoc2NoZW1hUHJvcGVydHlOYW1lcy5lbnVtKSB7XG4gICAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHNjaGVtYVByb3BlcnR5TmFtZXMuZW51bS5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgICBsZXQgZW51bURlc2NyaXB0aW9uID0gdm9pZCAwO1xuICAgICAgICAgICAgICBpZiAoc2NoZW1hUHJvcGVydHlOYW1lcy5tYXJrZG93bkVudW1EZXNjcmlwdGlvbnMgJiYgaSA8IHNjaGVtYVByb3BlcnR5TmFtZXMubWFya2Rvd25FbnVtRGVzY3JpcHRpb25zLmxlbmd0aCkge1xuICAgICAgICAgICAgICAgIGVudW1EZXNjcmlwdGlvbiA9IHRoaXMuZnJvbU1hcmt1cChzY2hlbWFQcm9wZXJ0eU5hbWVzLm1hcmtkb3duRW51bURlc2NyaXB0aW9uc1tpXSk7XG4gICAgICAgICAgICAgIH0gZWxzZSBpZiAoc2NoZW1hUHJvcGVydHlOYW1lcy5lbnVtRGVzY3JpcHRpb25zICYmIGkgPCBzY2hlbWFQcm9wZXJ0eU5hbWVzLmVudW1EZXNjcmlwdGlvbnMubGVuZ3RoKSB7XG4gICAgICAgICAgICAgICAgZW51bURlc2NyaXB0aW9uID0gc2NoZW1hUHJvcGVydHlOYW1lcy5lbnVtRGVzY3JpcHRpb25zW2ldO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIHByb3BlcnR5TmFtZUNvbXBsZXRpb25JdGVtKHNjaGVtYVByb3BlcnR5TmFtZXMuZW51bVtpXSwgZW51bURlc2NyaXB0aW9uKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKHNjaGVtYVByb3BlcnR5TmFtZXMuY29uc3QpIHtcbiAgICAgICAgICAgIHByb3BlcnR5TmFtZUNvbXBsZXRpb25JdGVtKHNjaGVtYVByb3BlcnR5TmFtZXMuY29uc3QpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0pO1xuICB9XG4gIGdldFNjaGVtYUxlc3NQcm9wZXJ0eUNvbXBsZXRpb25zKGRvYywgbm9kZSwgY3VycmVudEtleSwgY29sbGVjdG9yKSB7XG4gICAgY29uc3QgY29sbGVjdENvbXBsZXRpb25zRm9yU2ltaWxhck9iamVjdCA9IChvYmopID0+IHtcbiAgICAgIG9iai5wcm9wZXJ0aWVzLmZvckVhY2goKHApID0+IHtcbiAgICAgICAgY29uc3Qga2V5ID0gcC5rZXlOb2RlLnZhbHVlO1xuICAgICAgICBjb2xsZWN0b3IuYWRkKHtcbiAgICAgICAgICBraW5kOiBDb21wbGV0aW9uSXRlbUtpbmQuUHJvcGVydHksXG4gICAgICAgICAgbGFiZWw6IGtleSxcbiAgICAgICAgICBpbnNlcnRUZXh0OiB0aGlzLmdldEluc2VydFRleHRGb3JWYWx1ZShrZXksIFwiXCIpLFxuICAgICAgICAgIGluc2VydFRleHRGb3JtYXQ6IEluc2VydFRleHRGb3JtYXQuU25pcHBldCxcbiAgICAgICAgICBmaWx0ZXJUZXh0OiB0aGlzLmdldEZpbHRlclRleHRGb3JWYWx1ZShrZXkpLFxuICAgICAgICAgIGRvY3VtZW50YXRpb246IFwiXCJcbiAgICAgICAgfSk7XG4gICAgICB9KTtcbiAgICB9O1xuICAgIGlmIChub2RlLnBhcmVudCkge1xuICAgICAgaWYgKG5vZGUucGFyZW50LnR5cGUgPT09IFwicHJvcGVydHlcIikge1xuICAgICAgICBjb25zdCBwYXJlbnRLZXkgPSBub2RlLnBhcmVudC5rZXlOb2RlLnZhbHVlO1xuICAgICAgICBkb2MudmlzaXQoKG4pID0+IHtcbiAgICAgICAgICBpZiAobi50eXBlID09PSBcInByb3BlcnR5XCIgJiYgbiAhPT0gbm9kZS5wYXJlbnQgJiYgbi5rZXlOb2RlLnZhbHVlID09PSBwYXJlbnRLZXkgJiYgbi52YWx1ZU5vZGUgJiYgbi52YWx1ZU5vZGUudHlwZSA9PT0gXCJvYmplY3RcIikge1xuICAgICAgICAgICAgY29sbGVjdENvbXBsZXRpb25zRm9yU2ltaWxhck9iamVjdChuLnZhbHVlTm9kZSk7XG4gICAgICAgICAgfVxuICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9KTtcbiAgICAgIH0gZWxzZSBpZiAobm9kZS5wYXJlbnQudHlwZSA9PT0gXCJhcnJheVwiKSB7XG4gICAgICAgIG5vZGUucGFyZW50Lml0ZW1zLmZvckVhY2goKG4pID0+IHtcbiAgICAgICAgICBpZiAobi50eXBlID09PSBcIm9iamVjdFwiICYmIG4gIT09IG5vZGUpIHtcbiAgICAgICAgICAgIGNvbGxlY3RDb21wbGV0aW9uc0ZvclNpbWlsYXJPYmplY3Qobik7XG4gICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKG5vZGUudHlwZSA9PT0gXCJvYmplY3RcIikge1xuICAgICAgY29sbGVjdG9yLmFkZCh7XG4gICAgICAgIGtpbmQ6IENvbXBsZXRpb25JdGVtS2luZC5Qcm9wZXJ0eSxcbiAgICAgICAgbGFiZWw6IFwiJHNjaGVtYVwiLFxuICAgICAgICBpbnNlcnRUZXh0OiB0aGlzLmdldEluc2VydFRleHRGb3JQcm9wZXJ0eShcIiRzY2hlbWFcIiwgdm9pZCAwLCB0cnVlLCBcIlwiKSxcbiAgICAgICAgaW5zZXJ0VGV4dEZvcm1hdDogSW5zZXJ0VGV4dEZvcm1hdC5TbmlwcGV0LFxuICAgICAgICBkb2N1bWVudGF0aW9uOiBcIlwiLFxuICAgICAgICBmaWx0ZXJUZXh0OiB0aGlzLmdldEZpbHRlclRleHRGb3JWYWx1ZShcIiRzY2hlbWFcIilcbiAgICAgIH0pO1xuICAgIH1cbiAgfVxuICBnZXRTY2hlbWFMZXNzVmFsdWVDb21wbGV0aW9ucyhkb2MsIG5vZGUsIG9mZnNldCwgZG9jdW1lbnQsIGNvbGxlY3Rvcikge1xuICAgIGxldCBvZmZzZXRGb3JTZXBhcmF0b3IgPSBvZmZzZXQ7XG4gICAgaWYgKG5vZGUgJiYgKG5vZGUudHlwZSA9PT0gXCJzdHJpbmdcIiB8fCBub2RlLnR5cGUgPT09IFwibnVtYmVyXCIgfHwgbm9kZS50eXBlID09PSBcImJvb2xlYW5cIiB8fCBub2RlLnR5cGUgPT09IFwibnVsbFwiKSkge1xuICAgICAgb2Zmc2V0Rm9yU2VwYXJhdG9yID0gbm9kZS5vZmZzZXQgKyBub2RlLmxlbmd0aDtcbiAgICAgIG5vZGUgPSBub2RlLnBhcmVudDtcbiAgICB9XG4gICAgaWYgKCFub2RlKSB7XG4gICAgICBjb2xsZWN0b3IuYWRkKHtcbiAgICAgICAga2luZDogdGhpcy5nZXRTdWdnZXN0aW9uS2luZChcIm9iamVjdFwiKSxcbiAgICAgICAgbGFiZWw6IFwiRW1wdHkgb2JqZWN0XCIsXG4gICAgICAgIGluc2VydFRleHQ6IHRoaXMuZ2V0SW5zZXJ0VGV4dEZvclZhbHVlKHt9LCBcIlwiKSxcbiAgICAgICAgaW5zZXJ0VGV4dEZvcm1hdDogSW5zZXJ0VGV4dEZvcm1hdC5TbmlwcGV0LFxuICAgICAgICBkb2N1bWVudGF0aW9uOiBcIlwiXG4gICAgICB9KTtcbiAgICAgIGNvbGxlY3Rvci5hZGQoe1xuICAgICAgICBraW5kOiB0aGlzLmdldFN1Z2dlc3Rpb25LaW5kKFwiYXJyYXlcIiksXG4gICAgICAgIGxhYmVsOiBcIkVtcHR5IGFycmF5XCIsXG4gICAgICAgIGluc2VydFRleHQ6IHRoaXMuZ2V0SW5zZXJ0VGV4dEZvclZhbHVlKFtdLCBcIlwiKSxcbiAgICAgICAgaW5zZXJ0VGV4dEZvcm1hdDogSW5zZXJ0VGV4dEZvcm1hdC5TbmlwcGV0LFxuICAgICAgICBkb2N1bWVudGF0aW9uOiBcIlwiXG4gICAgICB9KTtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgY29uc3Qgc2VwYXJhdG9yQWZ0ZXIgPSB0aGlzLmV2YWx1YXRlU2VwYXJhdG9yQWZ0ZXIoZG9jdW1lbnQsIG9mZnNldEZvclNlcGFyYXRvcik7XG4gICAgY29uc3QgY29sbGVjdFN1Z2dlc3Rpb25zRm9yVmFsdWVzID0gKHZhbHVlKSA9PiB7XG4gICAgICBpZiAodmFsdWUucGFyZW50ICYmICFjb250YWluczIodmFsdWUucGFyZW50LCBvZmZzZXQsIHRydWUpKSB7XG4gICAgICAgIGNvbGxlY3Rvci5hZGQoe1xuICAgICAgICAgIGtpbmQ6IHRoaXMuZ2V0U3VnZ2VzdGlvbktpbmQodmFsdWUudHlwZSksXG4gICAgICAgICAgbGFiZWw6IHRoaXMuZ2V0TGFiZWxUZXh0Rm9yTWF0Y2hpbmdOb2RlKHZhbHVlLCBkb2N1bWVudCksXG4gICAgICAgICAgaW5zZXJ0VGV4dDogdGhpcy5nZXRJbnNlcnRUZXh0Rm9yTWF0Y2hpbmdOb2RlKHZhbHVlLCBkb2N1bWVudCwgc2VwYXJhdG9yQWZ0ZXIpLFxuICAgICAgICAgIGluc2VydFRleHRGb3JtYXQ6IEluc2VydFRleHRGb3JtYXQuU25pcHBldCxcbiAgICAgICAgICBkb2N1bWVudGF0aW9uOiBcIlwiXG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgICAgaWYgKHZhbHVlLnR5cGUgPT09IFwiYm9vbGVhblwiKSB7XG4gICAgICAgIHRoaXMuYWRkQm9vbGVhblZhbHVlQ29tcGxldGlvbighdmFsdWUudmFsdWUsIHNlcGFyYXRvckFmdGVyLCBjb2xsZWN0b3IpO1xuICAgICAgfVxuICAgIH07XG4gICAgaWYgKG5vZGUudHlwZSA9PT0gXCJwcm9wZXJ0eVwiKSB7XG4gICAgICBpZiAob2Zmc2V0ID4gKG5vZGUuY29sb25PZmZzZXQgfHwgMCkpIHtcbiAgICAgICAgY29uc3QgdmFsdWVOb2RlID0gbm9kZS52YWx1ZU5vZGU7XG4gICAgICAgIGlmICh2YWx1ZU5vZGUgJiYgKG9mZnNldCA+IHZhbHVlTm9kZS5vZmZzZXQgKyB2YWx1ZU5vZGUubGVuZ3RoIHx8IHZhbHVlTm9kZS50eXBlID09PSBcIm9iamVjdFwiIHx8IHZhbHVlTm9kZS50eXBlID09PSBcImFycmF5XCIpKSB7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IHBhcmVudEtleSA9IG5vZGUua2V5Tm9kZS52YWx1ZTtcbiAgICAgICAgZG9jLnZpc2l0KChuKSA9PiB7XG4gICAgICAgICAgaWYgKG4udHlwZSA9PT0gXCJwcm9wZXJ0eVwiICYmIG4ua2V5Tm9kZS52YWx1ZSA9PT0gcGFyZW50S2V5ICYmIG4udmFsdWVOb2RlKSB7XG4gICAgICAgICAgICBjb2xsZWN0U3VnZ2VzdGlvbnNGb3JWYWx1ZXMobi52YWx1ZU5vZGUpO1xuICAgICAgICAgIH1cbiAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfSk7XG4gICAgICAgIGlmIChwYXJlbnRLZXkgPT09IFwiJHNjaGVtYVwiICYmIG5vZGUucGFyZW50ICYmICFub2RlLnBhcmVudC5wYXJlbnQpIHtcbiAgICAgICAgICB0aGlzLmFkZERvbGxhclNjaGVtYUNvbXBsZXRpb25zKHNlcGFyYXRvckFmdGVyLCBjb2xsZWN0b3IpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICAgIGlmIChub2RlLnR5cGUgPT09IFwiYXJyYXlcIikge1xuICAgICAgaWYgKG5vZGUucGFyZW50ICYmIG5vZGUucGFyZW50LnR5cGUgPT09IFwicHJvcGVydHlcIikge1xuICAgICAgICBjb25zdCBwYXJlbnRLZXkgPSBub2RlLnBhcmVudC5rZXlOb2RlLnZhbHVlO1xuICAgICAgICBkb2MudmlzaXQoKG4pID0+IHtcbiAgICAgICAgICBpZiAobi50eXBlID09PSBcInByb3BlcnR5XCIgJiYgbi5rZXlOb2RlLnZhbHVlID09PSBwYXJlbnRLZXkgJiYgbi52YWx1ZU5vZGUgJiYgbi52YWx1ZU5vZGUudHlwZSA9PT0gXCJhcnJheVwiKSB7XG4gICAgICAgICAgICBuLnZhbHVlTm9kZS5pdGVtcy5mb3JFYWNoKGNvbGxlY3RTdWdnZXN0aW9uc0ZvclZhbHVlcyk7XG4gICAgICAgICAgfVxuICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9KTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIG5vZGUuaXRlbXMuZm9yRWFjaChjb2xsZWN0U3VnZ2VzdGlvbnNGb3JWYWx1ZXMpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuICBnZXRWYWx1ZUNvbXBsZXRpb25zKHNjaGVtYSwgZG9jLCBub2RlLCBvZmZzZXQsIGRvY3VtZW50LCBjb2xsZWN0b3IsIHR5cGVzKSB7XG4gICAgbGV0IG9mZnNldEZvclNlcGFyYXRvciA9IG9mZnNldDtcbiAgICBsZXQgcGFyZW50S2V5ID0gdm9pZCAwO1xuICAgIGxldCB2YWx1ZU5vZGUgPSB2b2lkIDA7XG4gICAgaWYgKG5vZGUgJiYgKG5vZGUudHlwZSA9PT0gXCJzdHJpbmdcIiB8fCBub2RlLnR5cGUgPT09IFwibnVtYmVyXCIgfHwgbm9kZS50eXBlID09PSBcImJvb2xlYW5cIiB8fCBub2RlLnR5cGUgPT09IFwibnVsbFwiKSkge1xuICAgICAgb2Zmc2V0Rm9yU2VwYXJhdG9yID0gbm9kZS5vZmZzZXQgKyBub2RlLmxlbmd0aDtcbiAgICAgIHZhbHVlTm9kZSA9IG5vZGU7XG4gICAgICBub2RlID0gbm9kZS5wYXJlbnQ7XG4gICAgfVxuICAgIGlmICghbm9kZSkge1xuICAgICAgdGhpcy5hZGRTY2hlbWFWYWx1ZUNvbXBsZXRpb25zKHNjaGVtYS5zY2hlbWEsIFwiXCIsIGNvbGxlY3RvciwgdHlwZXMpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBpZiAobm9kZS50eXBlID09PSBcInByb3BlcnR5XCIgJiYgb2Zmc2V0ID4gKG5vZGUuY29sb25PZmZzZXQgfHwgMCkpIHtcbiAgICAgIGNvbnN0IHZhbHVlTm9kZTIgPSBub2RlLnZhbHVlTm9kZTtcbiAgICAgIGlmICh2YWx1ZU5vZGUyICYmIG9mZnNldCA+IHZhbHVlTm9kZTIub2Zmc2V0ICsgdmFsdWVOb2RlMi5sZW5ndGgpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgcGFyZW50S2V5ID0gbm9kZS5rZXlOb2RlLnZhbHVlO1xuICAgICAgbm9kZSA9IG5vZGUucGFyZW50O1xuICAgIH1cbiAgICBpZiAobm9kZSAmJiAocGFyZW50S2V5ICE9PSB2b2lkIDAgfHwgbm9kZS50eXBlID09PSBcImFycmF5XCIpKSB7XG4gICAgICBjb25zdCBzZXBhcmF0b3JBZnRlciA9IHRoaXMuZXZhbHVhdGVTZXBhcmF0b3JBZnRlcihkb2N1bWVudCwgb2Zmc2V0Rm9yU2VwYXJhdG9yKTtcbiAgICAgIGNvbnN0IG1hdGNoaW5nU2NoZW1hcyA9IGRvYy5nZXRNYXRjaGluZ1NjaGVtYXMoc2NoZW1hLnNjaGVtYSwgbm9kZS5vZmZzZXQsIHZhbHVlTm9kZSk7XG4gICAgICBmb3IgKGNvbnN0IHMgb2YgbWF0Y2hpbmdTY2hlbWFzKSB7XG4gICAgICAgIGlmIChzLm5vZGUgPT09IG5vZGUgJiYgIXMuaW52ZXJ0ZWQgJiYgcy5zY2hlbWEpIHtcbiAgICAgICAgICBpZiAobm9kZS50eXBlID09PSBcImFycmF5XCIgJiYgcy5zY2hlbWEuaXRlbXMpIHtcbiAgICAgICAgICAgIGxldCBjID0gY29sbGVjdG9yO1xuICAgICAgICAgICAgaWYgKHMuc2NoZW1hLnVuaXF1ZUl0ZW1zKSB7XG4gICAgICAgICAgICAgIGNvbnN0IGV4aXN0aW5nVmFsdWVzID0gLyogQF9fUFVSRV9fICovIG5ldyBTZXQoKTtcbiAgICAgICAgICAgICAgbm9kZS5jaGlsZHJlbi5mb3JFYWNoKChuKSA9PiB7XG4gICAgICAgICAgICAgICAgaWYgKG4udHlwZSAhPT0gXCJhcnJheVwiICYmIG4udHlwZSAhPT0gXCJvYmplY3RcIikge1xuICAgICAgICAgICAgICAgICAgZXhpc3RpbmdWYWx1ZXMuYWRkKHRoaXMuZ2V0TGFiZWxGb3JWYWx1ZShnZXROb2RlVmFsdWUzKG4pKSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgYyA9IHtcbiAgICAgICAgICAgICAgICAuLi5jb2xsZWN0b3IsXG4gICAgICAgICAgICAgICAgYWRkKHN1Z2dlc3Rpb24pIHtcbiAgICAgICAgICAgICAgICAgIGlmICghZXhpc3RpbmdWYWx1ZXMuaGFzKHN1Z2dlc3Rpb24ubGFiZWwpKSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbGxlY3Rvci5hZGQoc3VnZ2VzdGlvbik7XG4gICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKEFycmF5LmlzQXJyYXkocy5zY2hlbWEuaXRlbXMpKSB7XG4gICAgICAgICAgICAgIGNvbnN0IGluZGV4ID0gdGhpcy5maW5kSXRlbUF0T2Zmc2V0KG5vZGUsIGRvY3VtZW50LCBvZmZzZXQpO1xuICAgICAgICAgICAgICBpZiAoaW5kZXggPCBzLnNjaGVtYS5pdGVtcy5sZW5ndGgpIHtcbiAgICAgICAgICAgICAgICB0aGlzLmFkZFNjaGVtYVZhbHVlQ29tcGxldGlvbnMocy5zY2hlbWEuaXRlbXNbaW5kZXhdLCBzZXBhcmF0b3JBZnRlciwgYywgdHlwZXMpO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICB0aGlzLmFkZFNjaGVtYVZhbHVlQ29tcGxldGlvbnMocy5zY2hlbWEuaXRlbXMsIHNlcGFyYXRvckFmdGVyLCBjLCB0eXBlcyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmIChwYXJlbnRLZXkgIT09IHZvaWQgMCkge1xuICAgICAgICAgICAgbGV0IHByb3BlcnR5TWF0Y2hlZCA9IGZhbHNlO1xuICAgICAgICAgICAgaWYgKHMuc2NoZW1hLnByb3BlcnRpZXMpIHtcbiAgICAgICAgICAgICAgY29uc3QgcHJvcGVydHlTY2hlbWEgPSBzLnNjaGVtYS5wcm9wZXJ0aWVzW3BhcmVudEtleV07XG4gICAgICAgICAgICAgIGlmIChwcm9wZXJ0eVNjaGVtYSkge1xuICAgICAgICAgICAgICAgIHByb3BlcnR5TWF0Y2hlZCA9IHRydWU7XG4gICAgICAgICAgICAgICAgdGhpcy5hZGRTY2hlbWFWYWx1ZUNvbXBsZXRpb25zKHByb3BlcnR5U2NoZW1hLCBzZXBhcmF0b3JBZnRlciwgY29sbGVjdG9yLCB0eXBlcyk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChzLnNjaGVtYS5wYXR0ZXJuUHJvcGVydGllcyAmJiAhcHJvcGVydHlNYXRjaGVkKSB7XG4gICAgICAgICAgICAgIGZvciAoY29uc3QgcGF0dGVybiBvZiBPYmplY3Qua2V5cyhzLnNjaGVtYS5wYXR0ZXJuUHJvcGVydGllcykpIHtcbiAgICAgICAgICAgICAgICBjb25zdCByZWdleCA9IGV4dGVuZGVkUmVnRXhwKHBhdHRlcm4pO1xuICAgICAgICAgICAgICAgIGlmIChyZWdleD8udGVzdChwYXJlbnRLZXkpKSB7XG4gICAgICAgICAgICAgICAgICBwcm9wZXJ0eU1hdGNoZWQgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgY29uc3QgcHJvcGVydHlTY2hlbWEgPSBzLnNjaGVtYS5wYXR0ZXJuUHJvcGVydGllc1twYXR0ZXJuXTtcbiAgICAgICAgICAgICAgICAgIHRoaXMuYWRkU2NoZW1hVmFsdWVDb21wbGV0aW9ucyhwcm9wZXJ0eVNjaGVtYSwgc2VwYXJhdG9yQWZ0ZXIsIGNvbGxlY3RvciwgdHlwZXMpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKHMuc2NoZW1hLmFkZGl0aW9uYWxQcm9wZXJ0aWVzICYmICFwcm9wZXJ0eU1hdGNoZWQpIHtcbiAgICAgICAgICAgICAgY29uc3QgcHJvcGVydHlTY2hlbWEgPSBzLnNjaGVtYS5hZGRpdGlvbmFsUHJvcGVydGllcztcbiAgICAgICAgICAgICAgdGhpcy5hZGRTY2hlbWFWYWx1ZUNvbXBsZXRpb25zKHByb3BlcnR5U2NoZW1hLCBzZXBhcmF0b3JBZnRlciwgY29sbGVjdG9yLCB0eXBlcyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgICBpZiAocGFyZW50S2V5ID09PSBcIiRzY2hlbWFcIiAmJiAhbm9kZS5wYXJlbnQpIHtcbiAgICAgICAgdGhpcy5hZGREb2xsYXJTY2hlbWFDb21wbGV0aW9ucyhzZXBhcmF0b3JBZnRlciwgY29sbGVjdG9yKTtcbiAgICAgIH1cbiAgICAgIGlmICh0eXBlc1tcImJvb2xlYW5cIl0pIHtcbiAgICAgICAgdGhpcy5hZGRCb29sZWFuVmFsdWVDb21wbGV0aW9uKHRydWUsIHNlcGFyYXRvckFmdGVyLCBjb2xsZWN0b3IpO1xuICAgICAgICB0aGlzLmFkZEJvb2xlYW5WYWx1ZUNvbXBsZXRpb24oZmFsc2UsIHNlcGFyYXRvckFmdGVyLCBjb2xsZWN0b3IpO1xuICAgICAgfVxuICAgICAgaWYgKHR5cGVzW1wibnVsbFwiXSkge1xuICAgICAgICB0aGlzLmFkZE51bGxWYWx1ZUNvbXBsZXRpb24oc2VwYXJhdG9yQWZ0ZXIsIGNvbGxlY3Rvcik7XG4gICAgICB9XG4gICAgfVxuICB9XG4gIGdldENvbnRyaWJ1dGVkVmFsdWVDb21wbGV0aW9ucyhkb2MsIG5vZGUsIG9mZnNldCwgZG9jdW1lbnQsIGNvbGxlY3RvciwgY29sbGVjdGlvblByb21pc2VzKSB7XG4gICAgaWYgKCFub2RlKSB7XG4gICAgICB0aGlzLmNvbnRyaWJ1dGlvbnMuZm9yRWFjaCgoY29udHJpYnV0aW9uKSA9PiB7XG4gICAgICAgIGNvbnN0IGNvbGxlY3RQcm9taXNlID0gY29udHJpYnV0aW9uLmNvbGxlY3REZWZhdWx0Q29tcGxldGlvbnMoZG9jdW1lbnQudXJpLCBjb2xsZWN0b3IpO1xuICAgICAgICBpZiAoY29sbGVjdFByb21pc2UpIHtcbiAgICAgICAgICBjb2xsZWN0aW9uUHJvbWlzZXMucHVzaChjb2xsZWN0UHJvbWlzZSk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH0gZWxzZSB7XG4gICAgICBpZiAobm9kZS50eXBlID09PSBcInN0cmluZ1wiIHx8IG5vZGUudHlwZSA9PT0gXCJudW1iZXJcIiB8fCBub2RlLnR5cGUgPT09IFwiYm9vbGVhblwiIHx8IG5vZGUudHlwZSA9PT0gXCJudWxsXCIpIHtcbiAgICAgICAgbm9kZSA9IG5vZGUucGFyZW50O1xuICAgICAgfVxuICAgICAgaWYgKG5vZGUgJiYgbm9kZS50eXBlID09PSBcInByb3BlcnR5XCIgJiYgb2Zmc2V0ID4gKG5vZGUuY29sb25PZmZzZXQgfHwgMCkpIHtcbiAgICAgICAgY29uc3QgcGFyZW50S2V5ID0gbm9kZS5rZXlOb2RlLnZhbHVlO1xuICAgICAgICBjb25zdCB2YWx1ZU5vZGUgPSBub2RlLnZhbHVlTm9kZTtcbiAgICAgICAgaWYgKCghdmFsdWVOb2RlIHx8IG9mZnNldCA8PSB2YWx1ZU5vZGUub2Zmc2V0ICsgdmFsdWVOb2RlLmxlbmd0aCkgJiYgbm9kZS5wYXJlbnQpIHtcbiAgICAgICAgICBjb25zdCBsb2NhdGlvbiA9IGdldE5vZGVQYXRoMyhub2RlLnBhcmVudCk7XG4gICAgICAgICAgdGhpcy5jb250cmlidXRpb25zLmZvckVhY2goKGNvbnRyaWJ1dGlvbikgPT4ge1xuICAgICAgICAgICAgY29uc3QgY29sbGVjdFByb21pc2UgPSBjb250cmlidXRpb24uY29sbGVjdFZhbHVlQ29tcGxldGlvbnMoZG9jdW1lbnQudXJpLCBsb2NhdGlvbiwgcGFyZW50S2V5LCBjb2xsZWN0b3IpO1xuICAgICAgICAgICAgaWYgKGNvbGxlY3RQcm9taXNlKSB7XG4gICAgICAgICAgICAgIGNvbGxlY3Rpb25Qcm9taXNlcy5wdXNoKGNvbGxlY3RQcm9taXNlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfVxuICBhZGRTY2hlbWFWYWx1ZUNvbXBsZXRpb25zKHNjaGVtYSwgc2VwYXJhdG9yQWZ0ZXIsIGNvbGxlY3RvciwgdHlwZXMpIHtcbiAgICBpZiAodHlwZW9mIHNjaGVtYSA9PT0gXCJvYmplY3RcIikge1xuICAgICAgdGhpcy5hZGRFbnVtVmFsdWVDb21wbGV0aW9ucyhzY2hlbWEsIHNlcGFyYXRvckFmdGVyLCBjb2xsZWN0b3IpO1xuICAgICAgdGhpcy5hZGREZWZhdWx0VmFsdWVDb21wbGV0aW9ucyhzY2hlbWEsIHNlcGFyYXRvckFmdGVyLCBjb2xsZWN0b3IpO1xuICAgICAgdGhpcy5jb2xsZWN0VHlwZXMoc2NoZW1hLCB0eXBlcyk7XG4gICAgICBpZiAoQXJyYXkuaXNBcnJheShzY2hlbWEuYWxsT2YpKSB7XG4gICAgICAgIHNjaGVtYS5hbGxPZi5mb3JFYWNoKChzKSA9PiB0aGlzLmFkZFNjaGVtYVZhbHVlQ29tcGxldGlvbnMocywgc2VwYXJhdG9yQWZ0ZXIsIGNvbGxlY3RvciwgdHlwZXMpKTtcbiAgICAgIH1cbiAgICAgIGlmIChBcnJheS5pc0FycmF5KHNjaGVtYS5hbnlPZikpIHtcbiAgICAgICAgc2NoZW1hLmFueU9mLmZvckVhY2goKHMpID0+IHRoaXMuYWRkU2NoZW1hVmFsdWVDb21wbGV0aW9ucyhzLCBzZXBhcmF0b3JBZnRlciwgY29sbGVjdG9yLCB0eXBlcykpO1xuICAgICAgfVxuICAgICAgaWYgKEFycmF5LmlzQXJyYXkoc2NoZW1hLm9uZU9mKSkge1xuICAgICAgICBzY2hlbWEub25lT2YuZm9yRWFjaCgocykgPT4gdGhpcy5hZGRTY2hlbWFWYWx1ZUNvbXBsZXRpb25zKHMsIHNlcGFyYXRvckFmdGVyLCBjb2xsZWN0b3IsIHR5cGVzKSk7XG4gICAgICB9XG4gICAgfVxuICB9XG4gIGFkZERlZmF1bHRWYWx1ZUNvbXBsZXRpb25zKHNjaGVtYSwgc2VwYXJhdG9yQWZ0ZXIsIGNvbGxlY3RvciwgYXJyYXlEZXB0aCA9IDApIHtcbiAgICBsZXQgaGFzUHJvcG9zYWxzID0gZmFsc2U7XG4gICAgaWYgKGlzRGVmaW5lZChzY2hlbWEuZGVmYXVsdCkpIHtcbiAgICAgIGxldCB0eXBlID0gc2NoZW1hLnR5cGU7XG4gICAgICBsZXQgdmFsdWUgPSBzY2hlbWEuZGVmYXVsdDtcbiAgICAgIGZvciAobGV0IGkgPSBhcnJheURlcHRoOyBpID4gMDsgaS0tKSB7XG4gICAgICAgIHZhbHVlID0gW3ZhbHVlXTtcbiAgICAgICAgdHlwZSA9IFwiYXJyYXlcIjtcbiAgICAgIH1cbiAgICAgIGNvbnN0IGNvbXBsZXRpb25JdGVtID0ge1xuICAgICAgICBraW5kOiB0aGlzLmdldFN1Z2dlc3Rpb25LaW5kKHR5cGUpLFxuICAgICAgICBsYWJlbDogdGhpcy5nZXRMYWJlbEZvclZhbHVlKHZhbHVlKSxcbiAgICAgICAgaW5zZXJ0VGV4dDogdGhpcy5nZXRJbnNlcnRUZXh0Rm9yVmFsdWUodmFsdWUsIHNlcGFyYXRvckFmdGVyKSxcbiAgICAgICAgaW5zZXJ0VGV4dEZvcm1hdDogSW5zZXJ0VGV4dEZvcm1hdC5TbmlwcGV0XG4gICAgICB9O1xuICAgICAgaWYgKHRoaXMuZG9lc1N1cHBvcnRzTGFiZWxEZXRhaWxzKCkpIHtcbiAgICAgICAgY29tcGxldGlvbkl0ZW0ubGFiZWxEZXRhaWxzID0geyBkZXNjcmlwdGlvbjogdChcIkRlZmF1bHQgdmFsdWVcIikgfTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGNvbXBsZXRpb25JdGVtLmRldGFpbCA9IHQoXCJEZWZhdWx0IHZhbHVlXCIpO1xuICAgICAgfVxuICAgICAgY29sbGVjdG9yLmFkZChjb21wbGV0aW9uSXRlbSk7XG4gICAgICBoYXNQcm9wb3NhbHMgPSB0cnVlO1xuICAgIH1cbiAgICBpZiAoQXJyYXkuaXNBcnJheShzY2hlbWEuZXhhbXBsZXMpKSB7XG4gICAgICBzY2hlbWEuZXhhbXBsZXMuZm9yRWFjaCgoZXhhbXBsZSkgPT4ge1xuICAgICAgICBsZXQgdHlwZSA9IHNjaGVtYS50eXBlO1xuICAgICAgICBsZXQgdmFsdWUgPSBleGFtcGxlO1xuICAgICAgICBmb3IgKGxldCBpID0gYXJyYXlEZXB0aDsgaSA+IDA7IGktLSkge1xuICAgICAgICAgIHZhbHVlID0gW3ZhbHVlXTtcbiAgICAgICAgICB0eXBlID0gXCJhcnJheVwiO1xuICAgICAgICB9XG4gICAgICAgIGNvbGxlY3Rvci5hZGQoe1xuICAgICAgICAgIGtpbmQ6IHRoaXMuZ2V0U3VnZ2VzdGlvbktpbmQodHlwZSksXG4gICAgICAgICAgbGFiZWw6IHRoaXMuZ2V0TGFiZWxGb3JWYWx1ZSh2YWx1ZSksXG4gICAgICAgICAgaW5zZXJ0VGV4dDogdGhpcy5nZXRJbnNlcnRUZXh0Rm9yVmFsdWUodmFsdWUsIHNlcGFyYXRvckFmdGVyKSxcbiAgICAgICAgICBpbnNlcnRUZXh0Rm9ybWF0OiBJbnNlcnRUZXh0Rm9ybWF0LlNuaXBwZXRcbiAgICAgICAgfSk7XG4gICAgICAgIGhhc1Byb3Bvc2FscyA9IHRydWU7XG4gICAgICB9KTtcbiAgICB9XG4gICAgaWYgKEFycmF5LmlzQXJyYXkoc2NoZW1hLmRlZmF1bHRTbmlwcGV0cykpIHtcbiAgICAgIHNjaGVtYS5kZWZhdWx0U25pcHBldHMuZm9yRWFjaCgocykgPT4ge1xuICAgICAgICBsZXQgdHlwZSA9IHNjaGVtYS50eXBlO1xuICAgICAgICBsZXQgdmFsdWUgPSBzLmJvZHk7XG4gICAgICAgIGxldCBsYWJlbCA9IHMubGFiZWw7XG4gICAgICAgIGxldCBpbnNlcnRUZXh0O1xuICAgICAgICBsZXQgZmlsdGVyVGV4dDtcbiAgICAgICAgaWYgKGlzRGVmaW5lZCh2YWx1ZSkpIHtcbiAgICAgICAgICBsZXQgdHlwZTIgPSBzY2hlbWEudHlwZTtcbiAgICAgICAgICBmb3IgKGxldCBpID0gYXJyYXlEZXB0aDsgaSA+IDA7IGktLSkge1xuICAgICAgICAgICAgdmFsdWUgPSBbdmFsdWVdO1xuICAgICAgICAgICAgdHlwZTIgPSBcImFycmF5XCI7XG4gICAgICAgICAgfVxuICAgICAgICAgIGluc2VydFRleHQgPSB0aGlzLmdldEluc2VydFRleHRGb3JTbmlwcGV0VmFsdWUodmFsdWUsIHNlcGFyYXRvckFmdGVyKTtcbiAgICAgICAgICBmaWx0ZXJUZXh0ID0gdGhpcy5nZXRGaWx0ZXJUZXh0Rm9yU25pcHBldFZhbHVlKHZhbHVlKTtcbiAgICAgICAgICBsYWJlbCA9IGxhYmVsIHx8IHRoaXMuZ2V0TGFiZWxGb3JTbmlwcGV0VmFsdWUodmFsdWUpO1xuICAgICAgICB9IGVsc2UgaWYgKHR5cGVvZiBzLmJvZHlUZXh0ID09PSBcInN0cmluZ1wiKSB7XG4gICAgICAgICAgbGV0IHByZWZpeCA9IFwiXCIsIHN1ZmZpeCA9IFwiXCIsIGluZGVudCA9IFwiXCI7XG4gICAgICAgICAgZm9yIChsZXQgaSA9IGFycmF5RGVwdGg7IGkgPiAwOyBpLS0pIHtcbiAgICAgICAgICAgIHByZWZpeCA9IHByZWZpeCArIGluZGVudCArIFwiW1xcblwiO1xuICAgICAgICAgICAgc3VmZml4ID0gc3VmZml4ICsgXCJcXG5cIiArIGluZGVudCArIFwiXVwiO1xuICAgICAgICAgICAgaW5kZW50ICs9IFwiXHRcIjtcbiAgICAgICAgICAgIHR5cGUgPSBcImFycmF5XCI7XG4gICAgICAgICAgfVxuICAgICAgICAgIGluc2VydFRleHQgPSBwcmVmaXggKyBpbmRlbnQgKyBzLmJvZHlUZXh0LnNwbGl0KFwiXFxuXCIpLmpvaW4oXCJcXG5cIiArIGluZGVudCkgKyBzdWZmaXggKyBzZXBhcmF0b3JBZnRlcjtcbiAgICAgICAgICBsYWJlbCA9IGxhYmVsIHx8IGluc2VydFRleHQsIGZpbHRlclRleHQgPSBpbnNlcnRUZXh0LnJlcGxhY2UoL1tcXG5dL2csIFwiXCIpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBjb2xsZWN0b3IuYWRkKHtcbiAgICAgICAgICBraW5kOiB0aGlzLmdldFN1Z2dlc3Rpb25LaW5kKHR5cGUpLFxuICAgICAgICAgIGxhYmVsLFxuICAgICAgICAgIGRvY3VtZW50YXRpb246IHRoaXMuZnJvbU1hcmt1cChzLm1hcmtkb3duRGVzY3JpcHRpb24pIHx8IHMuZGVzY3JpcHRpb24sXG4gICAgICAgICAgaW5zZXJ0VGV4dCxcbiAgICAgICAgICBpbnNlcnRUZXh0Rm9ybWF0OiBJbnNlcnRUZXh0Rm9ybWF0LlNuaXBwZXQsXG4gICAgICAgICAgZmlsdGVyVGV4dFxuICAgICAgICB9KTtcbiAgICAgICAgaGFzUHJvcG9zYWxzID0gdHJ1ZTtcbiAgICAgIH0pO1xuICAgIH1cbiAgICBpZiAoIWhhc1Byb3Bvc2FscyAmJiB0eXBlb2Ygc2NoZW1hLml0ZW1zID09PSBcIm9iamVjdFwiICYmICFBcnJheS5pc0FycmF5KHNjaGVtYS5pdGVtcykgJiYgYXJyYXlEZXB0aCA8IDUpIHtcbiAgICAgIHRoaXMuYWRkRGVmYXVsdFZhbHVlQ29tcGxldGlvbnMoc2NoZW1hLml0ZW1zLCBzZXBhcmF0b3JBZnRlciwgY29sbGVjdG9yLCBhcnJheURlcHRoICsgMSk7XG4gICAgfVxuICB9XG4gIGFkZEVudW1WYWx1ZUNvbXBsZXRpb25zKHNjaGVtYSwgc2VwYXJhdG9yQWZ0ZXIsIGNvbGxlY3Rvcikge1xuICAgIGlmIChpc0RlZmluZWQoc2NoZW1hLmNvbnN0KSkge1xuICAgICAgY29sbGVjdG9yLmFkZCh7XG4gICAgICAgIGtpbmQ6IHRoaXMuZ2V0U3VnZ2VzdGlvbktpbmQoc2NoZW1hLnR5cGUpLFxuICAgICAgICBsYWJlbDogdGhpcy5nZXRMYWJlbEZvclZhbHVlKHNjaGVtYS5jb25zdCksXG4gICAgICAgIGluc2VydFRleHQ6IHRoaXMuZ2V0SW5zZXJ0VGV4dEZvclZhbHVlKHNjaGVtYS5jb25zdCwgc2VwYXJhdG9yQWZ0ZXIpLFxuICAgICAgICBpbnNlcnRUZXh0Rm9ybWF0OiBJbnNlcnRUZXh0Rm9ybWF0LlNuaXBwZXQsXG4gICAgICAgIGRvY3VtZW50YXRpb246IHRoaXMuZnJvbU1hcmt1cChzY2hlbWEubWFya2Rvd25EZXNjcmlwdGlvbikgfHwgc2NoZW1hLmRlc2NyaXB0aW9uXG4gICAgICB9KTtcbiAgICB9XG4gICAgaWYgKEFycmF5LmlzQXJyYXkoc2NoZW1hLmVudW0pKSB7XG4gICAgICBmb3IgKGxldCBpID0gMCwgbGVuZ3RoID0gc2NoZW1hLmVudW0ubGVuZ3RoOyBpIDwgbGVuZ3RoOyBpKyspIHtcbiAgICAgICAgY29uc3QgZW5tID0gc2NoZW1hLmVudW1baV07XG4gICAgICAgIGxldCBkb2N1bWVudGF0aW9uID0gdGhpcy5mcm9tTWFya3VwKHNjaGVtYS5tYXJrZG93bkRlc2NyaXB0aW9uKSB8fCBzY2hlbWEuZGVzY3JpcHRpb247XG4gICAgICAgIGlmIChzY2hlbWEubWFya2Rvd25FbnVtRGVzY3JpcHRpb25zICYmIGkgPCBzY2hlbWEubWFya2Rvd25FbnVtRGVzY3JpcHRpb25zLmxlbmd0aCAmJiB0aGlzLmRvZXNTdXBwb3J0TWFya2Rvd24oKSkge1xuICAgICAgICAgIGRvY3VtZW50YXRpb24gPSB0aGlzLmZyb21NYXJrdXAoc2NoZW1hLm1hcmtkb3duRW51bURlc2NyaXB0aW9uc1tpXSk7XG4gICAgICAgIH0gZWxzZSBpZiAoc2NoZW1hLmVudW1EZXNjcmlwdGlvbnMgJiYgaSA8IHNjaGVtYS5lbnVtRGVzY3JpcHRpb25zLmxlbmd0aCkge1xuICAgICAgICAgIGRvY3VtZW50YXRpb24gPSBzY2hlbWEuZW51bURlc2NyaXB0aW9uc1tpXTtcbiAgICAgICAgfVxuICAgICAgICBjb2xsZWN0b3IuYWRkKHtcbiAgICAgICAgICBraW5kOiB0aGlzLmdldFN1Z2dlc3Rpb25LaW5kKHNjaGVtYS50eXBlKSxcbiAgICAgICAgICBsYWJlbDogdGhpcy5nZXRMYWJlbEZvclZhbHVlKGVubSksXG4gICAgICAgICAgaW5zZXJ0VGV4dDogdGhpcy5nZXRJbnNlcnRUZXh0Rm9yVmFsdWUoZW5tLCBzZXBhcmF0b3JBZnRlciksXG4gICAgICAgICAgaW5zZXJ0VGV4dEZvcm1hdDogSW5zZXJ0VGV4dEZvcm1hdC5TbmlwcGV0LFxuICAgICAgICAgIGRvY3VtZW50YXRpb25cbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfVxuICB9XG4gIGNvbGxlY3RUeXBlcyhzY2hlbWEsIHR5cGVzKSB7XG4gICAgaWYgKEFycmF5LmlzQXJyYXkoc2NoZW1hLmVudW0pIHx8IGlzRGVmaW5lZChzY2hlbWEuY29uc3QpKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGNvbnN0IHR5cGUgPSBzY2hlbWEudHlwZTtcbiAgICBpZiAoQXJyYXkuaXNBcnJheSh0eXBlKSkge1xuICAgICAgdHlwZS5mb3JFYWNoKCh0MikgPT4gdHlwZXNbdDJdID0gdHJ1ZSk7XG4gICAgfSBlbHNlIGlmICh0eXBlKSB7XG4gICAgICB0eXBlc1t0eXBlXSA9IHRydWU7XG4gICAgfVxuICB9XG4gIGFkZEZpbGxlclZhbHVlQ29tcGxldGlvbnModHlwZXMsIHNlcGFyYXRvckFmdGVyLCBjb2xsZWN0b3IpIHtcbiAgICBpZiAodHlwZXNbXCJvYmplY3RcIl0pIHtcbiAgICAgIGNvbGxlY3Rvci5hZGQoe1xuICAgICAgICBraW5kOiB0aGlzLmdldFN1Z2dlc3Rpb25LaW5kKFwib2JqZWN0XCIpLFxuICAgICAgICBsYWJlbDogXCJ7fVwiLFxuICAgICAgICBpbnNlcnRUZXh0OiB0aGlzLmdldEluc2VydFRleHRGb3JHdWVzc2VkVmFsdWUoe30sIHNlcGFyYXRvckFmdGVyKSxcbiAgICAgICAgaW5zZXJ0VGV4dEZvcm1hdDogSW5zZXJ0VGV4dEZvcm1hdC5TbmlwcGV0LFxuICAgICAgICBkZXRhaWw6IHQoXCJOZXcgb2JqZWN0XCIpLFxuICAgICAgICBkb2N1bWVudGF0aW9uOiBcIlwiXG4gICAgICB9KTtcbiAgICB9XG4gICAgaWYgKHR5cGVzW1wiYXJyYXlcIl0pIHtcbiAgICAgIGNvbGxlY3Rvci5hZGQoe1xuICAgICAgICBraW5kOiB0aGlzLmdldFN1Z2dlc3Rpb25LaW5kKFwiYXJyYXlcIiksXG4gICAgICAgIGxhYmVsOiBcIltdXCIsXG4gICAgICAgIGluc2VydFRleHQ6IHRoaXMuZ2V0SW5zZXJ0VGV4dEZvckd1ZXNzZWRWYWx1ZShbXSwgc2VwYXJhdG9yQWZ0ZXIpLFxuICAgICAgICBpbnNlcnRUZXh0Rm9ybWF0OiBJbnNlcnRUZXh0Rm9ybWF0LlNuaXBwZXQsXG4gICAgICAgIGRldGFpbDogdChcIk5ldyBhcnJheVwiKSxcbiAgICAgICAgZG9jdW1lbnRhdGlvbjogXCJcIlxuICAgICAgfSk7XG4gICAgfVxuICB9XG4gIGFkZEJvb2xlYW5WYWx1ZUNvbXBsZXRpb24odmFsdWUsIHNlcGFyYXRvckFmdGVyLCBjb2xsZWN0b3IpIHtcbiAgICBjb2xsZWN0b3IuYWRkKHtcbiAgICAgIGtpbmQ6IHRoaXMuZ2V0U3VnZ2VzdGlvbktpbmQoXCJib29sZWFuXCIpLFxuICAgICAgbGFiZWw6IHZhbHVlID8gXCJ0cnVlXCIgOiBcImZhbHNlXCIsXG4gICAgICBpbnNlcnRUZXh0OiB0aGlzLmdldEluc2VydFRleHRGb3JWYWx1ZSh2YWx1ZSwgc2VwYXJhdG9yQWZ0ZXIpLFxuICAgICAgaW5zZXJ0VGV4dEZvcm1hdDogSW5zZXJ0VGV4dEZvcm1hdC5TbmlwcGV0LFxuICAgICAgZG9jdW1lbnRhdGlvbjogXCJcIlxuICAgIH0pO1xuICB9XG4gIGFkZE51bGxWYWx1ZUNvbXBsZXRpb24oc2VwYXJhdG9yQWZ0ZXIsIGNvbGxlY3Rvcikge1xuICAgIGNvbGxlY3Rvci5hZGQoe1xuICAgICAga2luZDogdGhpcy5nZXRTdWdnZXN0aW9uS2luZChcIm51bGxcIiksXG4gICAgICBsYWJlbDogXCJudWxsXCIsXG4gICAgICBpbnNlcnRUZXh0OiBcIm51bGxcIiArIHNlcGFyYXRvckFmdGVyLFxuICAgICAgaW5zZXJ0VGV4dEZvcm1hdDogSW5zZXJ0VGV4dEZvcm1hdC5TbmlwcGV0LFxuICAgICAgZG9jdW1lbnRhdGlvbjogXCJcIlxuICAgIH0pO1xuICB9XG4gIGFkZERvbGxhclNjaGVtYUNvbXBsZXRpb25zKHNlcGFyYXRvckFmdGVyLCBjb2xsZWN0b3IpIHtcbiAgICBjb25zdCBzY2hlbWFJZHMgPSB0aGlzLnNjaGVtYVNlcnZpY2UuZ2V0UmVnaXN0ZXJlZFNjaGVtYUlkcygoc2NoZW1hKSA9PiBzY2hlbWEgPT09IFwiaHR0cFwiIHx8IHNjaGVtYSA9PT0gXCJodHRwc1wiKTtcbiAgICBzY2hlbWFJZHMuZm9yRWFjaCgoc2NoZW1hSWQpID0+IHtcbiAgICAgIGlmIChzY2hlbWFJZC5zdGFydHNXaXRoKFwiaHR0cDovL2pzb24tc2NoZW1hLm9yZy9kcmFmdC1cIikpIHtcbiAgICAgICAgc2NoZW1hSWQgPSBzY2hlbWFJZCArIFwiI1wiO1xuICAgICAgfVxuICAgICAgY29sbGVjdG9yLmFkZCh7XG4gICAgICAgIGtpbmQ6IENvbXBsZXRpb25JdGVtS2luZC5Nb2R1bGUsXG4gICAgICAgIGxhYmVsOiB0aGlzLmdldExhYmVsRm9yVmFsdWUoc2NoZW1hSWQpLFxuICAgICAgICBmaWx0ZXJUZXh0OiB0aGlzLmdldEZpbHRlclRleHRGb3JWYWx1ZShzY2hlbWFJZCksXG4gICAgICAgIGluc2VydFRleHQ6IHRoaXMuZ2V0SW5zZXJ0VGV4dEZvclZhbHVlKHNjaGVtYUlkLCBzZXBhcmF0b3JBZnRlciksXG4gICAgICAgIGluc2VydFRleHRGb3JtYXQ6IEluc2VydFRleHRGb3JtYXQuU25pcHBldCxcbiAgICAgICAgZG9jdW1lbnRhdGlvbjogXCJcIlxuICAgICAgfSk7XG4gICAgfSk7XG4gIH1cbiAgZ2V0TGFiZWxGb3JWYWx1ZSh2YWx1ZSkge1xuICAgIHJldHVybiBKU09OLnN0cmluZ2lmeSh2YWx1ZSk7XG4gIH1cbiAgZ2V0VmFsdWVGcm9tTGFiZWwodmFsdWUpIHtcbiAgICByZXR1cm4gSlNPTi5wYXJzZSh2YWx1ZSk7XG4gIH1cbiAgZ2V0RmlsdGVyVGV4dEZvclZhbHVlKHZhbHVlKSB7XG4gICAgcmV0dXJuIEpTT04uc3RyaW5naWZ5KHZhbHVlKTtcbiAgfVxuICBnZXRGaWx0ZXJUZXh0Rm9yU25pcHBldFZhbHVlKHZhbHVlKSB7XG4gICAgcmV0dXJuIEpTT04uc3RyaW5naWZ5KHZhbHVlKS5yZXBsYWNlKC9cXCRcXHtcXGQrOihbXn1dKylcXH18XFwkXFxkKy9nLCBcIiQxXCIpO1xuICB9XG4gIGdldExhYmVsRm9yU25pcHBldFZhbHVlKHZhbHVlKSB7XG4gICAgY29uc3QgbGFiZWwgPSBKU09OLnN0cmluZ2lmeSh2YWx1ZSk7XG4gICAgcmV0dXJuIGxhYmVsLnJlcGxhY2UoL1xcJFxce1xcZCs6KFtefV0rKVxcfXxcXCRcXGQrL2csIFwiJDFcIik7XG4gIH1cbiAgZ2V0SW5zZXJ0VGV4dEZvclBsYWluVGV4dCh0ZXh0KSB7XG4gICAgcmV0dXJuIHRleHQucmVwbGFjZSgvW1xcXFxcXCRcXH1dL2csIFwiXFxcXCQmXCIpO1xuICB9XG4gIGdldEluc2VydFRleHRGb3JWYWx1ZSh2YWx1ZSwgc2VwYXJhdG9yQWZ0ZXIpIHtcbiAgICBjb25zdCB0ZXh0ID0gSlNPTi5zdHJpbmdpZnkodmFsdWUsIG51bGwsIFwiXHRcIik7XG4gICAgaWYgKHRleHQgPT09IFwie31cIikge1xuICAgICAgcmV0dXJuIFwieyQxfVwiICsgc2VwYXJhdG9yQWZ0ZXI7XG4gICAgfSBlbHNlIGlmICh0ZXh0ID09PSBcIltdXCIpIHtcbiAgICAgIHJldHVybiBcIlskMV1cIiArIHNlcGFyYXRvckFmdGVyO1xuICAgIH1cbiAgICByZXR1cm4gdGhpcy5nZXRJbnNlcnRUZXh0Rm9yUGxhaW5UZXh0KHRleHQgKyBzZXBhcmF0b3JBZnRlcik7XG4gIH1cbiAgZ2V0SW5zZXJ0VGV4dEZvclNuaXBwZXRWYWx1ZSh2YWx1ZSwgc2VwYXJhdG9yQWZ0ZXIpIHtcbiAgICBjb25zdCByZXBsYWNlciA9ICh2YWx1ZTIpID0+IHtcbiAgICAgIGlmICh0eXBlb2YgdmFsdWUyID09PSBcInN0cmluZ1wiKSB7XG4gICAgICAgIGlmICh2YWx1ZTJbMF0gPT09IFwiXlwiKSB7XG4gICAgICAgICAgcmV0dXJuIHZhbHVlMi5zdWJzdHIoMSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiBKU09OLnN0cmluZ2lmeSh2YWx1ZTIpO1xuICAgIH07XG4gICAgcmV0dXJuIHN0cmluZ2lmeU9iamVjdCh2YWx1ZSwgXCJcIiwgcmVwbGFjZXIpICsgc2VwYXJhdG9yQWZ0ZXI7XG4gIH1cbiAgZ2V0SW5zZXJ0VGV4dEZvckd1ZXNzZWRWYWx1ZSh2YWx1ZSwgc2VwYXJhdG9yQWZ0ZXIpIHtcbiAgICBzd2l0Y2ggKHR5cGVvZiB2YWx1ZSkge1xuICAgICAgY2FzZSBcIm9iamVjdFwiOlxuICAgICAgICBpZiAodmFsdWUgPT09IG51bGwpIHtcbiAgICAgICAgICByZXR1cm4gXCIkezE6bnVsbH1cIiArIHNlcGFyYXRvckFmdGVyO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0aGlzLmdldEluc2VydFRleHRGb3JWYWx1ZSh2YWx1ZSwgc2VwYXJhdG9yQWZ0ZXIpO1xuICAgICAgY2FzZSBcInN0cmluZ1wiOlxuICAgICAgICBsZXQgc25pcHBldFZhbHVlID0gSlNPTi5zdHJpbmdpZnkodmFsdWUpO1xuICAgICAgICBzbmlwcGV0VmFsdWUgPSBzbmlwcGV0VmFsdWUuc3Vic3RyKDEsIHNuaXBwZXRWYWx1ZS5sZW5ndGggLSAyKTtcbiAgICAgICAgc25pcHBldFZhbHVlID0gdGhpcy5nZXRJbnNlcnRUZXh0Rm9yUGxhaW5UZXh0KHNuaXBwZXRWYWx1ZSk7XG4gICAgICAgIHJldHVybiAnXCIkezE6JyArIHNuaXBwZXRWYWx1ZSArICd9XCInICsgc2VwYXJhdG9yQWZ0ZXI7XG4gICAgICBjYXNlIFwibnVtYmVyXCI6XG4gICAgICBjYXNlIFwiYm9vbGVhblwiOlxuICAgICAgICByZXR1cm4gXCIkezE6XCIgKyBKU09OLnN0cmluZ2lmeSh2YWx1ZSkgKyBcIn1cIiArIHNlcGFyYXRvckFmdGVyO1xuICAgIH1cbiAgICByZXR1cm4gdGhpcy5nZXRJbnNlcnRUZXh0Rm9yVmFsdWUodmFsdWUsIHNlcGFyYXRvckFmdGVyKTtcbiAgfVxuICBnZXRTdWdnZXN0aW9uS2luZCh0eXBlKSB7XG4gICAgaWYgKEFycmF5LmlzQXJyYXkodHlwZSkpIHtcbiAgICAgIGNvbnN0IGFycmF5ID0gdHlwZTtcbiAgICAgIHR5cGUgPSBhcnJheS5sZW5ndGggPiAwID8gYXJyYXlbMF0gOiB2b2lkIDA7XG4gICAgfVxuICAgIGlmICghdHlwZSkge1xuICAgICAgcmV0dXJuIENvbXBsZXRpb25JdGVtS2luZC5WYWx1ZTtcbiAgICB9XG4gICAgc3dpdGNoICh0eXBlKSB7XG4gICAgICBjYXNlIFwic3RyaW5nXCI6XG4gICAgICAgIHJldHVybiBDb21wbGV0aW9uSXRlbUtpbmQuVmFsdWU7XG4gICAgICBjYXNlIFwib2JqZWN0XCI6XG4gICAgICAgIHJldHVybiBDb21wbGV0aW9uSXRlbUtpbmQuTW9kdWxlO1xuICAgICAgY2FzZSBcInByb3BlcnR5XCI6XG4gICAgICAgIHJldHVybiBDb21wbGV0aW9uSXRlbUtpbmQuUHJvcGVydHk7XG4gICAgICBkZWZhdWx0OlxuICAgICAgICByZXR1cm4gQ29tcGxldGlvbkl0ZW1LaW5kLlZhbHVlO1xuICAgIH1cbiAgfVxuICBnZXRMYWJlbFRleHRGb3JNYXRjaGluZ05vZGUobm9kZSwgZG9jdW1lbnQpIHtcbiAgICBzd2l0Y2ggKG5vZGUudHlwZSkge1xuICAgICAgY2FzZSBcImFycmF5XCI6XG4gICAgICAgIHJldHVybiBcIltdXCI7XG4gICAgICBjYXNlIFwib2JqZWN0XCI6XG4gICAgICAgIHJldHVybiBcInt9XCI7XG4gICAgICBkZWZhdWx0OlxuICAgICAgICBjb25zdCBjb250ZW50ID0gZG9jdW1lbnQuZ2V0VGV4dCgpLnN1YnN0cihub2RlLm9mZnNldCwgbm9kZS5sZW5ndGgpO1xuICAgICAgICByZXR1cm4gY29udGVudDtcbiAgICB9XG4gIH1cbiAgZ2V0SW5zZXJ0VGV4dEZvck1hdGNoaW5nTm9kZShub2RlLCBkb2N1bWVudCwgc2VwYXJhdG9yQWZ0ZXIpIHtcbiAgICBzd2l0Y2ggKG5vZGUudHlwZSkge1xuICAgICAgY2FzZSBcImFycmF5XCI6XG4gICAgICAgIHJldHVybiB0aGlzLmdldEluc2VydFRleHRGb3JWYWx1ZShbXSwgc2VwYXJhdG9yQWZ0ZXIpO1xuICAgICAgY2FzZSBcIm9iamVjdFwiOlxuICAgICAgICByZXR1cm4gdGhpcy5nZXRJbnNlcnRUZXh0Rm9yVmFsdWUoe30sIHNlcGFyYXRvckFmdGVyKTtcbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIGNvbnN0IGNvbnRlbnQgPSBkb2N1bWVudC5nZXRUZXh0KCkuc3Vic3RyKG5vZGUub2Zmc2V0LCBub2RlLmxlbmd0aCkgKyBzZXBhcmF0b3JBZnRlcjtcbiAgICAgICAgcmV0dXJuIHRoaXMuZ2V0SW5zZXJ0VGV4dEZvclBsYWluVGV4dChjb250ZW50KTtcbiAgICB9XG4gIH1cbiAgZ2V0SW5zZXJ0VGV4dEZvclByb3BlcnR5KGtleSwgcHJvcGVydHlTY2hlbWEsIGFkZFZhbHVlLCBzZXBhcmF0b3JBZnRlcikge1xuICAgIGNvbnN0IHByb3BlcnR5VGV4dCA9IHRoaXMuZ2V0SW5zZXJ0VGV4dEZvclZhbHVlKGtleSwgXCJcIik7XG4gICAgaWYgKCFhZGRWYWx1ZSkge1xuICAgICAgcmV0dXJuIHByb3BlcnR5VGV4dDtcbiAgICB9XG4gICAgY29uc3QgcmVzdWx0VGV4dCA9IHByb3BlcnR5VGV4dCArIFwiOiBcIjtcbiAgICBsZXQgdmFsdWU7XG4gICAgbGV0IG5WYWx1ZVByb3Bvc2FscyA9IDA7XG4gICAgaWYgKHByb3BlcnR5U2NoZW1hKSB7XG4gICAgICBpZiAoQXJyYXkuaXNBcnJheShwcm9wZXJ0eVNjaGVtYS5kZWZhdWx0U25pcHBldHMpKSB7XG4gICAgICAgIGlmIChwcm9wZXJ0eVNjaGVtYS5kZWZhdWx0U25pcHBldHMubGVuZ3RoID09PSAxKSB7XG4gICAgICAgICAgY29uc3QgYm9keSA9IHByb3BlcnR5U2NoZW1hLmRlZmF1bHRTbmlwcGV0c1swXS5ib2R5O1xuICAgICAgICAgIGlmIChpc0RlZmluZWQoYm9keSkpIHtcbiAgICAgICAgICAgIHZhbHVlID0gdGhpcy5nZXRJbnNlcnRUZXh0Rm9yU25pcHBldFZhbHVlKGJvZHksIFwiXCIpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBuVmFsdWVQcm9wb3NhbHMgKz0gcHJvcGVydHlTY2hlbWEuZGVmYXVsdFNuaXBwZXRzLmxlbmd0aDtcbiAgICAgIH1cbiAgICAgIGlmIChwcm9wZXJ0eVNjaGVtYS5lbnVtKSB7XG4gICAgICAgIGlmICghdmFsdWUgJiYgcHJvcGVydHlTY2hlbWEuZW51bS5sZW5ndGggPT09IDEpIHtcbiAgICAgICAgICB2YWx1ZSA9IHRoaXMuZ2V0SW5zZXJ0VGV4dEZvckd1ZXNzZWRWYWx1ZShwcm9wZXJ0eVNjaGVtYS5lbnVtWzBdLCBcIlwiKTtcbiAgICAgICAgfVxuICAgICAgICBuVmFsdWVQcm9wb3NhbHMgKz0gcHJvcGVydHlTY2hlbWEuZW51bS5sZW5ndGg7XG4gICAgICB9XG4gICAgICBpZiAoaXNEZWZpbmVkKHByb3BlcnR5U2NoZW1hLmNvbnN0KSkge1xuICAgICAgICBpZiAoIXZhbHVlKSB7XG4gICAgICAgICAgdmFsdWUgPSB0aGlzLmdldEluc2VydFRleHRGb3JHdWVzc2VkVmFsdWUocHJvcGVydHlTY2hlbWEuY29uc3QsIFwiXCIpO1xuICAgICAgICB9XG4gICAgICAgIG5WYWx1ZVByb3Bvc2FscysrO1xuICAgICAgfVxuICAgICAgaWYgKGlzRGVmaW5lZChwcm9wZXJ0eVNjaGVtYS5kZWZhdWx0KSkge1xuICAgICAgICBpZiAoIXZhbHVlKSB7XG4gICAgICAgICAgdmFsdWUgPSB0aGlzLmdldEluc2VydFRleHRGb3JHdWVzc2VkVmFsdWUocHJvcGVydHlTY2hlbWEuZGVmYXVsdCwgXCJcIik7XG4gICAgICAgIH1cbiAgICAgICAgblZhbHVlUHJvcG9zYWxzKys7XG4gICAgICB9XG4gICAgICBpZiAoQXJyYXkuaXNBcnJheShwcm9wZXJ0eVNjaGVtYS5leGFtcGxlcykgJiYgcHJvcGVydHlTY2hlbWEuZXhhbXBsZXMubGVuZ3RoKSB7XG4gICAgICAgIGlmICghdmFsdWUpIHtcbiAgICAgICAgICB2YWx1ZSA9IHRoaXMuZ2V0SW5zZXJ0VGV4dEZvckd1ZXNzZWRWYWx1ZShwcm9wZXJ0eVNjaGVtYS5leGFtcGxlc1swXSwgXCJcIik7XG4gICAgICAgIH1cbiAgICAgICAgblZhbHVlUHJvcG9zYWxzICs9IHByb3BlcnR5U2NoZW1hLmV4YW1wbGVzLmxlbmd0aDtcbiAgICAgIH1cbiAgICAgIGlmIChuVmFsdWVQcm9wb3NhbHMgPT09IDApIHtcbiAgICAgICAgbGV0IHR5cGUgPSBBcnJheS5pc0FycmF5KHByb3BlcnR5U2NoZW1hLnR5cGUpID8gcHJvcGVydHlTY2hlbWEudHlwZVswXSA6IHByb3BlcnR5U2NoZW1hLnR5cGU7XG4gICAgICAgIGlmICghdHlwZSkge1xuICAgICAgICAgIGlmIChwcm9wZXJ0eVNjaGVtYS5wcm9wZXJ0aWVzKSB7XG4gICAgICAgICAgICB0eXBlID0gXCJvYmplY3RcIjtcbiAgICAgICAgICB9IGVsc2UgaWYgKHByb3BlcnR5U2NoZW1hLml0ZW1zKSB7XG4gICAgICAgICAgICB0eXBlID0gXCJhcnJheVwiO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBzd2l0Y2ggKHR5cGUpIHtcbiAgICAgICAgICBjYXNlIFwiYm9vbGVhblwiOlxuICAgICAgICAgICAgdmFsdWUgPSBcIiQxXCI7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICBjYXNlIFwic3RyaW5nXCI6XG4gICAgICAgICAgICB2YWx1ZSA9ICdcIiQxXCInO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgY2FzZSBcIm9iamVjdFwiOlxuICAgICAgICAgICAgdmFsdWUgPSBcInskMX1cIjtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIGNhc2UgXCJhcnJheVwiOlxuICAgICAgICAgICAgdmFsdWUgPSBcIlskMV1cIjtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIGNhc2UgXCJudW1iZXJcIjpcbiAgICAgICAgICBjYXNlIFwiaW50ZWdlclwiOlxuICAgICAgICAgICAgdmFsdWUgPSBcIiR7MTowfVwiO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgY2FzZSBcIm51bGxcIjpcbiAgICAgICAgICAgIHZhbHVlID0gXCIkezE6bnVsbH1cIjtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICByZXR1cm4gcHJvcGVydHlUZXh0O1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICAgIGlmICghdmFsdWUgfHwgblZhbHVlUHJvcG9zYWxzID4gMSkge1xuICAgICAgdmFsdWUgPSBcIiQxXCI7XG4gICAgfVxuICAgIHJldHVybiByZXN1bHRUZXh0ICsgdmFsdWUgKyBzZXBhcmF0b3JBZnRlcjtcbiAgfVxuICBnZXRDdXJyZW50V29yZChkb2N1bWVudCwgb2Zmc2V0KSB7XG4gICAgbGV0IGkgPSBvZmZzZXQgLSAxO1xuICAgIGNvbnN0IHRleHQgPSBkb2N1bWVudC5nZXRUZXh0KCk7XG4gICAgd2hpbGUgKGkgPj0gMCAmJiAnIFx0XFxuXFxyXFx2XCI6e1ssXX0nLmluZGV4T2YodGV4dC5jaGFyQXQoaSkpID09PSAtMSkge1xuICAgICAgaS0tO1xuICAgIH1cbiAgICByZXR1cm4gdGV4dC5zdWJzdHJpbmcoaSArIDEsIG9mZnNldCk7XG4gIH1cbiAgZXZhbHVhdGVTZXBhcmF0b3JBZnRlcihkb2N1bWVudCwgb2Zmc2V0KSB7XG4gICAgY29uc3Qgc2Nhbm5lciA9IGNyZWF0ZVNjYW5uZXIyKGRvY3VtZW50LmdldFRleHQoKSwgdHJ1ZSk7XG4gICAgc2Nhbm5lci5zZXRQb3NpdGlvbihvZmZzZXQpO1xuICAgIGNvbnN0IHRva2VuID0gc2Nhbm5lci5zY2FuKCk7XG4gICAgc3dpdGNoICh0b2tlbikge1xuICAgICAgY2FzZSA1OlxuICAgICAgY2FzZSAyOlxuICAgICAgY2FzZSA0OlxuICAgICAgY2FzZSAxNzpcbiAgICAgICAgcmV0dXJuIFwiXCI7XG4gICAgICBkZWZhdWx0OlxuICAgICAgICByZXR1cm4gXCIsXCI7XG4gICAgfVxuICB9XG4gIGZpbmRJdGVtQXRPZmZzZXQobm9kZSwgZG9jdW1lbnQsIG9mZnNldCkge1xuICAgIGNvbnN0IHNjYW5uZXIgPSBjcmVhdGVTY2FubmVyMihkb2N1bWVudC5nZXRUZXh0KCksIHRydWUpO1xuICAgIGNvbnN0IGNoaWxkcmVuID0gbm9kZS5pdGVtcztcbiAgICBmb3IgKGxldCBpID0gY2hpbGRyZW4ubGVuZ3RoIC0gMTsgaSA+PSAwOyBpLS0pIHtcbiAgICAgIGNvbnN0IGNoaWxkID0gY2hpbGRyZW5baV07XG4gICAgICBpZiAob2Zmc2V0ID4gY2hpbGQub2Zmc2V0ICsgY2hpbGQubGVuZ3RoKSB7XG4gICAgICAgIHNjYW5uZXIuc2V0UG9zaXRpb24oY2hpbGQub2Zmc2V0ICsgY2hpbGQubGVuZ3RoKTtcbiAgICAgICAgY29uc3QgdG9rZW4gPSBzY2FubmVyLnNjYW4oKTtcbiAgICAgICAgaWYgKHRva2VuID09PSA1ICYmIG9mZnNldCA+PSBzY2FubmVyLmdldFRva2VuT2Zmc2V0KCkgKyBzY2FubmVyLmdldFRva2VuTGVuZ3RoKCkpIHtcbiAgICAgICAgICByZXR1cm4gaSArIDE7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGk7XG4gICAgICB9IGVsc2UgaWYgKG9mZnNldCA+PSBjaGlsZC5vZmZzZXQpIHtcbiAgICAgICAgcmV0dXJuIGk7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiAwO1xuICB9XG4gIGlzSW5Db21tZW50KGRvY3VtZW50LCBzdGFydCwgb2Zmc2V0KSB7XG4gICAgY29uc3Qgc2Nhbm5lciA9IGNyZWF0ZVNjYW5uZXIyKGRvY3VtZW50LmdldFRleHQoKSwgZmFsc2UpO1xuICAgIHNjYW5uZXIuc2V0UG9zaXRpb24oc3RhcnQpO1xuICAgIGxldCB0b2tlbiA9IHNjYW5uZXIuc2NhbigpO1xuICAgIHdoaWxlICh0b2tlbiAhPT0gMTcgJiYgc2Nhbm5lci5nZXRUb2tlbk9mZnNldCgpICsgc2Nhbm5lci5nZXRUb2tlbkxlbmd0aCgpIDwgb2Zmc2V0KSB7XG4gICAgICB0b2tlbiA9IHNjYW5uZXIuc2NhbigpO1xuICAgIH1cbiAgICByZXR1cm4gKHRva2VuID09PSAxMiB8fCB0b2tlbiA9PT0gMTMpICYmIHNjYW5uZXIuZ2V0VG9rZW5PZmZzZXQoKSA8PSBvZmZzZXQ7XG4gIH1cbiAgZnJvbU1hcmt1cChtYXJrdXBTdHJpbmcpIHtcbiAgICBpZiAobWFya3VwU3RyaW5nICYmIHRoaXMuZG9lc1N1cHBvcnRNYXJrZG93bigpKSB7XG4gICAgICByZXR1cm4ge1xuICAgICAgICBraW5kOiBNYXJrdXBLaW5kLk1hcmtkb3duLFxuICAgICAgICB2YWx1ZTogbWFya3VwU3RyaW5nXG4gICAgICB9O1xuICAgIH1cbiAgICByZXR1cm4gdm9pZCAwO1xuICB9XG4gIGRvZXNTdXBwb3J0TWFya2Rvd24oKSB7XG4gICAgaWYgKCFpc0RlZmluZWQodGhpcy5zdXBwb3J0c01hcmtkb3duKSkge1xuICAgICAgY29uc3QgZG9jdW1lbnRhdGlvbkZvcm1hdCA9IHRoaXMuY2xpZW50Q2FwYWJpbGl0aWVzLnRleHREb2N1bWVudD8uY29tcGxldGlvbj8uY29tcGxldGlvbkl0ZW0/LmRvY3VtZW50YXRpb25Gb3JtYXQ7XG4gICAgICB0aGlzLnN1cHBvcnRzTWFya2Rvd24gPSBBcnJheS5pc0FycmF5KGRvY3VtZW50YXRpb25Gb3JtYXQpICYmIGRvY3VtZW50YXRpb25Gb3JtYXQuaW5kZXhPZihNYXJrdXBLaW5kLk1hcmtkb3duKSAhPT0gLTE7XG4gICAgfVxuICAgIHJldHVybiB0aGlzLnN1cHBvcnRzTWFya2Rvd247XG4gIH1cbiAgZG9lc1N1cHBvcnRzQ29tbWl0Q2hhcmFjdGVycygpIHtcbiAgICBpZiAoIWlzRGVmaW5lZCh0aGlzLnN1cHBvcnRzQ29tbWl0Q2hhcmFjdGVycykpIHtcbiAgICAgIHRoaXMubGFiZWxEZXRhaWxzU3VwcG9ydCA9IHRoaXMuY2xpZW50Q2FwYWJpbGl0aWVzLnRleHREb2N1bWVudD8uY29tcGxldGlvbj8uY29tcGxldGlvbkl0ZW0/LmNvbW1pdENoYXJhY3RlcnNTdXBwb3J0O1xuICAgIH1cbiAgICByZXR1cm4gdGhpcy5zdXBwb3J0c0NvbW1pdENoYXJhY3RlcnM7XG4gIH1cbiAgZG9lc1N1cHBvcnRzTGFiZWxEZXRhaWxzKCkge1xuICAgIGlmICghaXNEZWZpbmVkKHRoaXMubGFiZWxEZXRhaWxzU3VwcG9ydCkpIHtcbiAgICAgIHRoaXMubGFiZWxEZXRhaWxzU3VwcG9ydCA9IHRoaXMuY2xpZW50Q2FwYWJpbGl0aWVzLnRleHREb2N1bWVudD8uY29tcGxldGlvbj8uY29tcGxldGlvbkl0ZW0/LmxhYmVsRGV0YWlsc1N1cHBvcnQ7XG4gICAgfVxuICAgIHJldHVybiB0aGlzLmxhYmVsRGV0YWlsc1N1cHBvcnQ7XG4gIH1cbn07XG5cbi8vIG5vZGVfbW9kdWxlcy92c2NvZGUtanNvbi1sYW5ndWFnZXNlcnZpY2UvbGliL2VzbS9zZXJ2aWNlcy9qc29uSG92ZXIuanNcbnZhciBKU09OSG92ZXIgPSBjbGFzcyB7XG4gIGNvbnN0cnVjdG9yKHNjaGVtYVNlcnZpY2UsIGNvbnRyaWJ1dGlvbnMgPSBbXSwgcHJvbWlzZUNvbnN0cnVjdG9yKSB7XG4gICAgdGhpcy5zY2hlbWFTZXJ2aWNlID0gc2NoZW1hU2VydmljZTtcbiAgICB0aGlzLmNvbnRyaWJ1dGlvbnMgPSBjb250cmlidXRpb25zO1xuICAgIHRoaXMucHJvbWlzZSA9IHByb21pc2VDb25zdHJ1Y3RvciB8fCBQcm9taXNlO1xuICB9XG4gIGRvSG92ZXIoZG9jdW1lbnQsIHBvc2l0aW9uLCBkb2MpIHtcbiAgICBjb25zdCBvZmZzZXQgPSBkb2N1bWVudC5vZmZzZXRBdChwb3NpdGlvbik7XG4gICAgbGV0IG5vZGUgPSBkb2MuZ2V0Tm9kZUZyb21PZmZzZXQob2Zmc2V0KTtcbiAgICBpZiAoIW5vZGUgfHwgKG5vZGUudHlwZSA9PT0gXCJvYmplY3RcIiB8fCBub2RlLnR5cGUgPT09IFwiYXJyYXlcIikgJiYgb2Zmc2V0ID4gbm9kZS5vZmZzZXQgKyAxICYmIG9mZnNldCA8IG5vZGUub2Zmc2V0ICsgbm9kZS5sZW5ndGggLSAxKSB7XG4gICAgICByZXR1cm4gdGhpcy5wcm9taXNlLnJlc29sdmUobnVsbCk7XG4gICAgfVxuICAgIGNvbnN0IGhvdmVyUmFuZ2VOb2RlID0gbm9kZTtcbiAgICBpZiAobm9kZS50eXBlID09PSBcInN0cmluZ1wiKSB7XG4gICAgICBjb25zdCBwYXJlbnQgPSBub2RlLnBhcmVudDtcbiAgICAgIGlmIChwYXJlbnQgJiYgcGFyZW50LnR5cGUgPT09IFwicHJvcGVydHlcIiAmJiBwYXJlbnQua2V5Tm9kZSA9PT0gbm9kZSkge1xuICAgICAgICBub2RlID0gcGFyZW50LnZhbHVlTm9kZTtcbiAgICAgICAgaWYgKCFub2RlKSB7XG4gICAgICAgICAgcmV0dXJuIHRoaXMucHJvbWlzZS5yZXNvbHZlKG51bGwpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICAgIGNvbnN0IGhvdmVyUmFuZ2UgPSBSYW5nZS5jcmVhdGUoZG9jdW1lbnQucG9zaXRpb25BdChob3ZlclJhbmdlTm9kZS5vZmZzZXQpLCBkb2N1bWVudC5wb3NpdGlvbkF0KGhvdmVyUmFuZ2VOb2RlLm9mZnNldCArIGhvdmVyUmFuZ2VOb2RlLmxlbmd0aCkpO1xuICAgIGNvbnN0IGNyZWF0ZUhvdmVyID0gKGNvbnRlbnRzKSA9PiB7XG4gICAgICBjb25zdCByZXN1bHQgPSB7XG4gICAgICAgIGNvbnRlbnRzLFxuICAgICAgICByYW5nZTogaG92ZXJSYW5nZVxuICAgICAgfTtcbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfTtcbiAgICBjb25zdCBsb2NhdGlvbiA9IGdldE5vZGVQYXRoMyhub2RlKTtcbiAgICBmb3IgKGxldCBpID0gdGhpcy5jb250cmlidXRpb25zLmxlbmd0aCAtIDE7IGkgPj0gMDsgaS0tKSB7XG4gICAgICBjb25zdCBjb250cmlidXRpb24gPSB0aGlzLmNvbnRyaWJ1dGlvbnNbaV07XG4gICAgICBjb25zdCBwcm9taXNlID0gY29udHJpYnV0aW9uLmdldEluZm9Db250cmlidXRpb24oZG9jdW1lbnQudXJpLCBsb2NhdGlvbik7XG4gICAgICBpZiAocHJvbWlzZSkge1xuICAgICAgICByZXR1cm4gcHJvbWlzZS50aGVuKChodG1sQ29udGVudCkgPT4gY3JlYXRlSG92ZXIoaHRtbENvbnRlbnQpKTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHRoaXMuc2NoZW1hU2VydmljZS5nZXRTY2hlbWFGb3JSZXNvdXJjZShkb2N1bWVudC51cmksIGRvYykudGhlbigoc2NoZW1hKSA9PiB7XG4gICAgICBpZiAoc2NoZW1hICYmIG5vZGUpIHtcbiAgICAgICAgY29uc3QgbWF0Y2hpbmdTY2hlbWFzID0gZG9jLmdldE1hdGNoaW5nU2NoZW1hcyhzY2hlbWEuc2NoZW1hLCBub2RlLm9mZnNldCk7XG4gICAgICAgIGxldCB0aXRsZSA9IHZvaWQgMDtcbiAgICAgICAgbGV0IG1hcmtkb3duRGVzY3JpcHRpb24gPSB2b2lkIDA7XG4gICAgICAgIGxldCBtYXJrZG93bkVudW1WYWx1ZURlc2NyaXB0aW9uID0gdm9pZCAwLCBlbnVtVmFsdWUgPSB2b2lkIDA7XG4gICAgICAgIG1hdGNoaW5nU2NoZW1hcy5ldmVyeSgocykgPT4ge1xuICAgICAgICAgIGlmIChzLm5vZGUgPT09IG5vZGUgJiYgIXMuaW52ZXJ0ZWQgJiYgcy5zY2hlbWEpIHtcbiAgICAgICAgICAgIHRpdGxlID0gdGl0bGUgfHwgcy5zY2hlbWEudGl0bGU7XG4gICAgICAgICAgICBtYXJrZG93bkRlc2NyaXB0aW9uID0gbWFya2Rvd25EZXNjcmlwdGlvbiB8fCBzLnNjaGVtYS5tYXJrZG93bkRlc2NyaXB0aW9uIHx8IHRvTWFya2Rvd24ocy5zY2hlbWEuZGVzY3JpcHRpb24pO1xuICAgICAgICAgICAgaWYgKHMuc2NoZW1hLmVudW0pIHtcbiAgICAgICAgICAgICAgY29uc3QgaWR4ID0gcy5zY2hlbWEuZW51bS5pbmRleE9mKGdldE5vZGVWYWx1ZTMobm9kZSkpO1xuICAgICAgICAgICAgICBpZiAocy5zY2hlbWEubWFya2Rvd25FbnVtRGVzY3JpcHRpb25zKSB7XG4gICAgICAgICAgICAgICAgbWFya2Rvd25FbnVtVmFsdWVEZXNjcmlwdGlvbiA9IHMuc2NoZW1hLm1hcmtkb3duRW51bURlc2NyaXB0aW9uc1tpZHhdO1xuICAgICAgICAgICAgICB9IGVsc2UgaWYgKHMuc2NoZW1hLmVudW1EZXNjcmlwdGlvbnMpIHtcbiAgICAgICAgICAgICAgICBtYXJrZG93bkVudW1WYWx1ZURlc2NyaXB0aW9uID0gdG9NYXJrZG93bihzLnNjaGVtYS5lbnVtRGVzY3JpcHRpb25zW2lkeF0pO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIGlmIChtYXJrZG93bkVudW1WYWx1ZURlc2NyaXB0aW9uKSB7XG4gICAgICAgICAgICAgICAgZW51bVZhbHVlID0gcy5zY2hlbWEuZW51bVtpZHhdO1xuICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgZW51bVZhbHVlICE9PSBcInN0cmluZ1wiKSB7XG4gICAgICAgICAgICAgICAgICBlbnVtVmFsdWUgPSBKU09OLnN0cmluZ2lmeShlbnVtVmFsdWUpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfSk7XG4gICAgICAgIGxldCByZXN1bHQgPSBcIlwiO1xuICAgICAgICBpZiAodGl0bGUpIHtcbiAgICAgICAgICByZXN1bHQgPSB0b01hcmtkb3duKHRpdGxlKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAobWFya2Rvd25EZXNjcmlwdGlvbikge1xuICAgICAgICAgIGlmIChyZXN1bHQubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgcmVzdWx0ICs9IFwiXFxuXFxuXCI7XG4gICAgICAgICAgfVxuICAgICAgICAgIHJlc3VsdCArPSBtYXJrZG93bkRlc2NyaXB0aW9uO1xuICAgICAgICB9XG4gICAgICAgIGlmIChtYXJrZG93bkVudW1WYWx1ZURlc2NyaXB0aW9uKSB7XG4gICAgICAgICAgaWYgKHJlc3VsdC5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICByZXN1bHQgKz0gXCJcXG5cXG5cIjtcbiAgICAgICAgICB9XG4gICAgICAgICAgcmVzdWx0ICs9IGBcXGAke3RvTWFya2Rvd25Db2RlQmxvY2soZW51bVZhbHVlKX1cXGA6ICR7bWFya2Rvd25FbnVtVmFsdWVEZXNjcmlwdGlvbn1gO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBjcmVhdGVIb3ZlcihbcmVzdWx0XSk7XG4gICAgICB9XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9KTtcbiAgfVxufTtcbmZ1bmN0aW9uIHRvTWFya2Rvd24ocGxhaW4pIHtcbiAgaWYgKHBsYWluKSB7XG4gICAgY29uc3QgcmVzID0gcGxhaW4ucmVwbGFjZSgvKFteXFxuXFxyXSkoXFxyP1xcbikoW15cXG5cXHJdKS9nbSwgXCIkMVxcblxcbiQzXCIpO1xuICAgIHJldHVybiByZXMucmVwbGFjZSgvW1xcXFxgKl97fVtcXF0oKSMrXFwtLiFdL2csIFwiXFxcXCQmXCIpO1xuICB9XG4gIHJldHVybiB2b2lkIDA7XG59XG5mdW5jdGlvbiB0b01hcmtkb3duQ29kZUJsb2NrKGNvbnRlbnQpIHtcbiAgaWYgKGNvbnRlbnQuaW5kZXhPZihcImBcIikgIT09IC0xKSB7XG4gICAgcmV0dXJuIFwiYGAgXCIgKyBjb250ZW50ICsgXCIgYGBcIjtcbiAgfVxuICByZXR1cm4gY29udGVudDtcbn1cblxuLy8gbm9kZV9tb2R1bGVzL3ZzY29kZS1qc29uLWxhbmd1YWdlc2VydmljZS9saWIvZXNtL3NlcnZpY2VzL2pzb25WYWxpZGF0aW9uLmpzXG52YXIgSlNPTlZhbGlkYXRpb24gPSBjbGFzcyB7XG4gIGNvbnN0cnVjdG9yKGpzb25TY2hlbWFTZXJ2aWNlLCBwcm9taXNlQ29uc3RydWN0b3IpIHtcbiAgICB0aGlzLmpzb25TY2hlbWFTZXJ2aWNlID0ganNvblNjaGVtYVNlcnZpY2U7XG4gICAgdGhpcy5wcm9taXNlID0gcHJvbWlzZUNvbnN0cnVjdG9yO1xuICAgIHRoaXMudmFsaWRhdGlvbkVuYWJsZWQgPSB0cnVlO1xuICB9XG4gIGNvbmZpZ3VyZShyYXcpIHtcbiAgICBpZiAocmF3KSB7XG4gICAgICB0aGlzLnZhbGlkYXRpb25FbmFibGVkID0gcmF3LnZhbGlkYXRlICE9PSBmYWxzZTtcbiAgICAgIHRoaXMuY29tbWVudFNldmVyaXR5ID0gcmF3LmFsbG93Q29tbWVudHMgPyB2b2lkIDAgOiBEaWFnbm9zdGljU2V2ZXJpdHkuRXJyb3I7XG4gICAgfVxuICB9XG4gIGRvVmFsaWRhdGlvbih0ZXh0RG9jdW1lbnQsIGpzb25Eb2N1bWVudCwgZG9jdW1lbnRTZXR0aW5ncywgc2NoZW1hKSB7XG4gICAgaWYgKCF0aGlzLnZhbGlkYXRpb25FbmFibGVkKSB7XG4gICAgICByZXR1cm4gdGhpcy5wcm9taXNlLnJlc29sdmUoW10pO1xuICAgIH1cbiAgICBjb25zdCBkaWFnbm9zdGljcyA9IFtdO1xuICAgIGNvbnN0IGFkZGVkID0ge307XG4gICAgY29uc3QgYWRkUHJvYmxlbSA9IChwcm9ibGVtKSA9PiB7XG4gICAgICBjb25zdCBzaWduYXR1cmUgPSBwcm9ibGVtLnJhbmdlLnN0YXJ0LmxpbmUgKyBcIiBcIiArIHByb2JsZW0ucmFuZ2Uuc3RhcnQuY2hhcmFjdGVyICsgXCIgXCIgKyBwcm9ibGVtLm1lc3NhZ2U7XG4gICAgICBpZiAoIWFkZGVkW3NpZ25hdHVyZV0pIHtcbiAgICAgICAgYWRkZWRbc2lnbmF0dXJlXSA9IHRydWU7XG4gICAgICAgIGRpYWdub3N0aWNzLnB1c2gocHJvYmxlbSk7XG4gICAgICB9XG4gICAgfTtcbiAgICBjb25zdCBnZXREaWFnbm9zdGljcyA9IChzY2hlbWEyKSA9PiB7XG4gICAgICBsZXQgdHJhaWxpbmdDb21tYVNldmVyaXR5ID0gZG9jdW1lbnRTZXR0aW5ncz8udHJhaWxpbmdDb21tYXMgPyB0b0RpYWdub3N0aWNTZXZlcml0eShkb2N1bWVudFNldHRpbmdzLnRyYWlsaW5nQ29tbWFzKSA6IERpYWdub3N0aWNTZXZlcml0eS5FcnJvcjtcbiAgICAgIGxldCBjb21tZW50U2V2ZXJpdHkgPSBkb2N1bWVudFNldHRpbmdzPy5jb21tZW50cyA/IHRvRGlhZ25vc3RpY1NldmVyaXR5KGRvY3VtZW50U2V0dGluZ3MuY29tbWVudHMpIDogdGhpcy5jb21tZW50U2V2ZXJpdHk7XG4gICAgICBsZXQgc2NoZW1hVmFsaWRhdGlvbiA9IGRvY3VtZW50U2V0dGluZ3M/LnNjaGVtYVZhbGlkYXRpb24gPyB0b0RpYWdub3N0aWNTZXZlcml0eShkb2N1bWVudFNldHRpbmdzLnNjaGVtYVZhbGlkYXRpb24pIDogRGlhZ25vc3RpY1NldmVyaXR5Lldhcm5pbmc7XG4gICAgICBsZXQgc2NoZW1hUmVxdWVzdCA9IGRvY3VtZW50U2V0dGluZ3M/LnNjaGVtYVJlcXVlc3QgPyB0b0RpYWdub3N0aWNTZXZlcml0eShkb2N1bWVudFNldHRpbmdzLnNjaGVtYVJlcXVlc3QpIDogRGlhZ25vc3RpY1NldmVyaXR5Lldhcm5pbmc7XG4gICAgICBpZiAoc2NoZW1hMikge1xuICAgICAgICBjb25zdCBhZGRTY2hlbWFQcm9ibGVtID0gKGVycm9yTWVzc2FnZSwgZXJyb3JDb2RlKSA9PiB7XG4gICAgICAgICAgaWYgKGpzb25Eb2N1bWVudC5yb290ICYmIHNjaGVtYVJlcXVlc3QpIHtcbiAgICAgICAgICAgIGNvbnN0IGFzdFJvb3QgPSBqc29uRG9jdW1lbnQucm9vdDtcbiAgICAgICAgICAgIGNvbnN0IHByb3BlcnR5ID0gYXN0Um9vdC50eXBlID09PSBcIm9iamVjdFwiID8gYXN0Um9vdC5wcm9wZXJ0aWVzWzBdIDogdm9pZCAwO1xuICAgICAgICAgICAgaWYgKHByb3BlcnR5ICYmIHByb3BlcnR5LmtleU5vZGUudmFsdWUgPT09IFwiJHNjaGVtYVwiKSB7XG4gICAgICAgICAgICAgIGNvbnN0IG5vZGUgPSBwcm9wZXJ0eS52YWx1ZU5vZGUgfHwgcHJvcGVydHk7XG4gICAgICAgICAgICAgIGNvbnN0IHJhbmdlID0gUmFuZ2UuY3JlYXRlKHRleHREb2N1bWVudC5wb3NpdGlvbkF0KG5vZGUub2Zmc2V0KSwgdGV4dERvY3VtZW50LnBvc2l0aW9uQXQobm9kZS5vZmZzZXQgKyBub2RlLmxlbmd0aCkpO1xuICAgICAgICAgICAgICBhZGRQcm9ibGVtKERpYWdub3N0aWMuY3JlYXRlKHJhbmdlLCBlcnJvck1lc3NhZ2UsIHNjaGVtYVJlcXVlc3QsIGVycm9yQ29kZSkpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgY29uc3QgcmFuZ2UgPSBSYW5nZS5jcmVhdGUodGV4dERvY3VtZW50LnBvc2l0aW9uQXQoYXN0Um9vdC5vZmZzZXQpLCB0ZXh0RG9jdW1lbnQucG9zaXRpb25BdChhc3RSb290Lm9mZnNldCArIDEpKTtcbiAgICAgICAgICAgICAgYWRkUHJvYmxlbShEaWFnbm9zdGljLmNyZWF0ZShyYW5nZSwgZXJyb3JNZXNzYWdlLCBzY2hlbWFSZXF1ZXN0LCBlcnJvckNvZGUpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgICAgIGlmIChzY2hlbWEyLmVycm9ycy5sZW5ndGgpIHtcbiAgICAgICAgICBhZGRTY2hlbWFQcm9ibGVtKHNjaGVtYTIuZXJyb3JzWzBdLCBFcnJvckNvZGUuU2NoZW1hUmVzb2x2ZUVycm9yKTtcbiAgICAgICAgfSBlbHNlIGlmIChzY2hlbWFWYWxpZGF0aW9uKSB7XG4gICAgICAgICAgZm9yIChjb25zdCB3YXJuaW5nIG9mIHNjaGVtYTIud2FybmluZ3MpIHtcbiAgICAgICAgICAgIGFkZFNjaGVtYVByb2JsZW0od2FybmluZywgRXJyb3JDb2RlLlNjaGVtYVVuc3VwcG9ydGVkRmVhdHVyZSk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGNvbnN0IHNlbWFudGljRXJyb3JzID0ganNvbkRvY3VtZW50LnZhbGlkYXRlKHRleHREb2N1bWVudCwgc2NoZW1hMi5zY2hlbWEsIHNjaGVtYVZhbGlkYXRpb24sIGRvY3VtZW50U2V0dGluZ3M/LnNjaGVtYURyYWZ0KTtcbiAgICAgICAgICBpZiAoc2VtYW50aWNFcnJvcnMpIHtcbiAgICAgICAgICAgIHNlbWFudGljRXJyb3JzLmZvckVhY2goYWRkUHJvYmxlbSk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGlmIChzY2hlbWFBbGxvd3NDb21tZW50cyhzY2hlbWEyLnNjaGVtYSkpIHtcbiAgICAgICAgICBjb21tZW50U2V2ZXJpdHkgPSB2b2lkIDA7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHNjaGVtYUFsbG93c1RyYWlsaW5nQ29tbWFzKHNjaGVtYTIuc2NoZW1hKSkge1xuICAgICAgICAgIHRyYWlsaW5nQ29tbWFTZXZlcml0eSA9IHZvaWQgMDtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgZm9yIChjb25zdCBwIG9mIGpzb25Eb2N1bWVudC5zeW50YXhFcnJvcnMpIHtcbiAgICAgICAgaWYgKHAuY29kZSA9PT0gRXJyb3JDb2RlLlRyYWlsaW5nQ29tbWEpIHtcbiAgICAgICAgICBpZiAodHlwZW9mIHRyYWlsaW5nQ29tbWFTZXZlcml0eSAhPT0gXCJudW1iZXJcIikge1xuICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgfVxuICAgICAgICAgIHAuc2V2ZXJpdHkgPSB0cmFpbGluZ0NvbW1hU2V2ZXJpdHk7XG4gICAgICAgIH1cbiAgICAgICAgYWRkUHJvYmxlbShwKTtcbiAgICAgIH1cbiAgICAgIGlmICh0eXBlb2YgY29tbWVudFNldmVyaXR5ID09PSBcIm51bWJlclwiKSB7XG4gICAgICAgIGNvbnN0IG1lc3NhZ2UgPSB0KFwiQ29tbWVudHMgYXJlIG5vdCBwZXJtaXR0ZWQgaW4gSlNPTi5cIik7XG4gICAgICAgIGpzb25Eb2N1bWVudC5jb21tZW50cy5mb3JFYWNoKChjKSA9PiB7XG4gICAgICAgICAgYWRkUHJvYmxlbShEaWFnbm9zdGljLmNyZWF0ZShjLCBtZXNzYWdlLCBjb21tZW50U2V2ZXJpdHksIEVycm9yQ29kZS5Db21tZW50Tm90UGVybWl0dGVkKSk7XG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGRpYWdub3N0aWNzO1xuICAgIH07XG4gICAgaWYgKHNjaGVtYSkge1xuICAgICAgY29uc3QgdXJpID0gc2NoZW1hLmlkIHx8IFwic2NoZW1hc2VydmljZTovL3VudGl0bGVkL1wiICsgaWRDb3VudGVyKys7XG4gICAgICBjb25zdCBoYW5kbGUgPSB0aGlzLmpzb25TY2hlbWFTZXJ2aWNlLnJlZ2lzdGVyRXh0ZXJuYWxTY2hlbWEoeyB1cmksIHNjaGVtYSB9KTtcbiAgICAgIHJldHVybiBoYW5kbGUuZ2V0UmVzb2x2ZWRTY2hlbWEoKS50aGVuKChyZXNvbHZlZFNjaGVtYSkgPT4ge1xuICAgICAgICByZXR1cm4gZ2V0RGlhZ25vc3RpY3MocmVzb2x2ZWRTY2hlbWEpO1xuICAgICAgfSk7XG4gICAgfVxuICAgIHJldHVybiB0aGlzLmpzb25TY2hlbWFTZXJ2aWNlLmdldFNjaGVtYUZvclJlc291cmNlKHRleHREb2N1bWVudC51cmksIGpzb25Eb2N1bWVudCkudGhlbigoc2NoZW1hMikgPT4ge1xuICAgICAgcmV0dXJuIGdldERpYWdub3N0aWNzKHNjaGVtYTIpO1xuICAgIH0pO1xuICB9XG4gIGdldExhbmd1YWdlU3RhdHVzKHRleHREb2N1bWVudCwganNvbkRvY3VtZW50KSB7XG4gICAgcmV0dXJuIHsgc2NoZW1hczogdGhpcy5qc29uU2NoZW1hU2VydmljZS5nZXRTY2hlbWFVUklzRm9yUmVzb3VyY2UodGV4dERvY3VtZW50LnVyaSwganNvbkRvY3VtZW50KSB9O1xuICB9XG59O1xudmFyIGlkQ291bnRlciA9IDA7XG5mdW5jdGlvbiBzY2hlbWFBbGxvd3NDb21tZW50cyhzY2hlbWFSZWYpIHtcbiAgaWYgKHNjaGVtYVJlZiAmJiB0eXBlb2Ygc2NoZW1hUmVmID09PSBcIm9iamVjdFwiKSB7XG4gICAgaWYgKGlzQm9vbGVhbihzY2hlbWFSZWYuYWxsb3dDb21tZW50cykpIHtcbiAgICAgIHJldHVybiBzY2hlbWFSZWYuYWxsb3dDb21tZW50cztcbiAgICB9XG4gICAgaWYgKHNjaGVtYVJlZi5hbGxPZikge1xuICAgICAgZm9yIChjb25zdCBzY2hlbWEgb2Ygc2NoZW1hUmVmLmFsbE9mKSB7XG4gICAgICAgIGNvbnN0IGFsbG93ID0gc2NoZW1hQWxsb3dzQ29tbWVudHMoc2NoZW1hKTtcbiAgICAgICAgaWYgKGlzQm9vbGVhbihhbGxvdykpIHtcbiAgICAgICAgICByZXR1cm4gYWxsb3c7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgcmV0dXJuIHZvaWQgMDtcbn1cbmZ1bmN0aW9uIHNjaGVtYUFsbG93c1RyYWlsaW5nQ29tbWFzKHNjaGVtYVJlZikge1xuICBpZiAoc2NoZW1hUmVmICYmIHR5cGVvZiBzY2hlbWFSZWYgPT09IFwib2JqZWN0XCIpIHtcbiAgICBpZiAoaXNCb29sZWFuKHNjaGVtYVJlZi5hbGxvd1RyYWlsaW5nQ29tbWFzKSkge1xuICAgICAgcmV0dXJuIHNjaGVtYVJlZi5hbGxvd1RyYWlsaW5nQ29tbWFzO1xuICAgIH1cbiAgICBjb25zdCBkZXByU2NoZW1hUmVmID0gc2NoZW1hUmVmO1xuICAgIGlmIChpc0Jvb2xlYW4oZGVwclNjaGVtYVJlZltcImFsbG93c1RyYWlsaW5nQ29tbWFzXCJdKSkge1xuICAgICAgcmV0dXJuIGRlcHJTY2hlbWFSZWZbXCJhbGxvd3NUcmFpbGluZ0NvbW1hc1wiXTtcbiAgICB9XG4gICAgaWYgKHNjaGVtYVJlZi5hbGxPZikge1xuICAgICAgZm9yIChjb25zdCBzY2hlbWEgb2Ygc2NoZW1hUmVmLmFsbE9mKSB7XG4gICAgICAgIGNvbnN0IGFsbG93ID0gc2NoZW1hQWxsb3dzVHJhaWxpbmdDb21tYXMoc2NoZW1hKTtcbiAgICAgICAgaWYgKGlzQm9vbGVhbihhbGxvdykpIHtcbiAgICAgICAgICByZXR1cm4gYWxsb3c7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgcmV0dXJuIHZvaWQgMDtcbn1cbmZ1bmN0aW9uIHRvRGlhZ25vc3RpY1NldmVyaXR5KHNldmVyaXR5TGV2ZWwpIHtcbiAgc3dpdGNoIChzZXZlcml0eUxldmVsKSB7XG4gICAgY2FzZSBcImVycm9yXCI6XG4gICAgICByZXR1cm4gRGlhZ25vc3RpY1NldmVyaXR5LkVycm9yO1xuICAgIGNhc2UgXCJ3YXJuaW5nXCI6XG4gICAgICByZXR1cm4gRGlhZ25vc3RpY1NldmVyaXR5Lldhcm5pbmc7XG4gICAgY2FzZSBcImlnbm9yZVwiOlxuICAgICAgcmV0dXJuIHZvaWQgMDtcbiAgfVxuICByZXR1cm4gdm9pZCAwO1xufVxuXG4vLyBub2RlX21vZHVsZXMvdnNjb2RlLWpzb24tbGFuZ3VhZ2VzZXJ2aWNlL2xpYi9lc20vdXRpbHMvY29sb3JzLmpzXG52YXIgRGlnaXQwID0gNDg7XG52YXIgRGlnaXQ5ID0gNTc7XG52YXIgQSA9IDY1O1xudmFyIGEgPSA5NztcbnZhciBmID0gMTAyO1xuZnVuY3Rpb24gaGV4RGlnaXQoY2hhckNvZGUpIHtcbiAgaWYgKGNoYXJDb2RlIDwgRGlnaXQwKSB7XG4gICAgcmV0dXJuIDA7XG4gIH1cbiAgaWYgKGNoYXJDb2RlIDw9IERpZ2l0OSkge1xuICAgIHJldHVybiBjaGFyQ29kZSAtIERpZ2l0MDtcbiAgfVxuICBpZiAoY2hhckNvZGUgPCBhKSB7XG4gICAgY2hhckNvZGUgKz0gYSAtIEE7XG4gIH1cbiAgaWYgKGNoYXJDb2RlID49IGEgJiYgY2hhckNvZGUgPD0gZikge1xuICAgIHJldHVybiBjaGFyQ29kZSAtIGEgKyAxMDtcbiAgfVxuICByZXR1cm4gMDtcbn1cbmZ1bmN0aW9uIGNvbG9yRnJvbUhleCh0ZXh0KSB7XG4gIGlmICh0ZXh0WzBdICE9PSBcIiNcIikge1xuICAgIHJldHVybiB2b2lkIDA7XG4gIH1cbiAgc3dpdGNoICh0ZXh0Lmxlbmd0aCkge1xuICAgIGNhc2UgNDpcbiAgICAgIHJldHVybiB7XG4gICAgICAgIHJlZDogaGV4RGlnaXQodGV4dC5jaGFyQ29kZUF0KDEpKSAqIDE3IC8gMjU1LFxuICAgICAgICBncmVlbjogaGV4RGlnaXQodGV4dC5jaGFyQ29kZUF0KDIpKSAqIDE3IC8gMjU1LFxuICAgICAgICBibHVlOiBoZXhEaWdpdCh0ZXh0LmNoYXJDb2RlQXQoMykpICogMTcgLyAyNTUsXG4gICAgICAgIGFscGhhOiAxXG4gICAgICB9O1xuICAgIGNhc2UgNTpcbiAgICAgIHJldHVybiB7XG4gICAgICAgIHJlZDogaGV4RGlnaXQodGV4dC5jaGFyQ29kZUF0KDEpKSAqIDE3IC8gMjU1LFxuICAgICAgICBncmVlbjogaGV4RGlnaXQodGV4dC5jaGFyQ29kZUF0KDIpKSAqIDE3IC8gMjU1LFxuICAgICAgICBibHVlOiBoZXhEaWdpdCh0ZXh0LmNoYXJDb2RlQXQoMykpICogMTcgLyAyNTUsXG4gICAgICAgIGFscGhhOiBoZXhEaWdpdCh0ZXh0LmNoYXJDb2RlQXQoNCkpICogMTcgLyAyNTVcbiAgICAgIH07XG4gICAgY2FzZSA3OlxuICAgICAgcmV0dXJuIHtcbiAgICAgICAgcmVkOiAoaGV4RGlnaXQodGV4dC5jaGFyQ29kZUF0KDEpKSAqIDE2ICsgaGV4RGlnaXQodGV4dC5jaGFyQ29kZUF0KDIpKSkgLyAyNTUsXG4gICAgICAgIGdyZWVuOiAoaGV4RGlnaXQodGV4dC5jaGFyQ29kZUF0KDMpKSAqIDE2ICsgaGV4RGlnaXQodGV4dC5jaGFyQ29kZUF0KDQpKSkgLyAyNTUsXG4gICAgICAgIGJsdWU6IChoZXhEaWdpdCh0ZXh0LmNoYXJDb2RlQXQoNSkpICogMTYgKyBoZXhEaWdpdCh0ZXh0LmNoYXJDb2RlQXQoNikpKSAvIDI1NSxcbiAgICAgICAgYWxwaGE6IDFcbiAgICAgIH07XG4gICAgY2FzZSA5OlxuICAgICAgcmV0dXJuIHtcbiAgICAgICAgcmVkOiAoaGV4RGlnaXQodGV4dC5jaGFyQ29kZUF0KDEpKSAqIDE2ICsgaGV4RGlnaXQodGV4dC5jaGFyQ29kZUF0KDIpKSkgLyAyNTUsXG4gICAgICAgIGdyZWVuOiAoaGV4RGlnaXQodGV4dC5jaGFyQ29kZUF0KDMpKSAqIDE2ICsgaGV4RGlnaXQodGV4dC5jaGFyQ29kZUF0KDQpKSkgLyAyNTUsXG4gICAgICAgIGJsdWU6IChoZXhEaWdpdCh0ZXh0LmNoYXJDb2RlQXQoNSkpICogMTYgKyBoZXhEaWdpdCh0ZXh0LmNoYXJDb2RlQXQoNikpKSAvIDI1NSxcbiAgICAgICAgYWxwaGE6IChoZXhEaWdpdCh0ZXh0LmNoYXJDb2RlQXQoNykpICogMTYgKyBoZXhEaWdpdCh0ZXh0LmNoYXJDb2RlQXQoOCkpKSAvIDI1NVxuICAgICAgfTtcbiAgfVxuICByZXR1cm4gdm9pZCAwO1xufVxuXG4vLyBub2RlX21vZHVsZXMvdnNjb2RlLWpzb24tbGFuZ3VhZ2VzZXJ2aWNlL2xpYi9lc20vc2VydmljZXMvanNvbkRvY3VtZW50U3ltYm9scy5qc1xudmFyIEpTT05Eb2N1bWVudFN5bWJvbHMgPSBjbGFzcyB7XG4gIGNvbnN0cnVjdG9yKHNjaGVtYVNlcnZpY2UpIHtcbiAgICB0aGlzLnNjaGVtYVNlcnZpY2UgPSBzY2hlbWFTZXJ2aWNlO1xuICB9XG4gIGZpbmREb2N1bWVudFN5bWJvbHMoZG9jdW1lbnQsIGRvYywgY29udGV4dCA9IHsgcmVzdWx0TGltaXQ6IE51bWJlci5NQVhfVkFMVUUgfSkge1xuICAgIGNvbnN0IHJvb3QgPSBkb2Mucm9vdDtcbiAgICBpZiAoIXJvb3QpIHtcbiAgICAgIHJldHVybiBbXTtcbiAgICB9XG4gICAgbGV0IGxpbWl0ID0gY29udGV4dC5yZXN1bHRMaW1pdCB8fCBOdW1iZXIuTUFYX1ZBTFVFO1xuICAgIGNvbnN0IHJlc291cmNlU3RyaW5nID0gZG9jdW1lbnQudXJpO1xuICAgIGlmIChyZXNvdXJjZVN0cmluZyA9PT0gXCJ2c2NvZGU6Ly9kZWZhdWx0c2V0dGluZ3Mva2V5YmluZGluZ3MuanNvblwiIHx8IGVuZHNXaXRoKHJlc291cmNlU3RyaW5nLnRvTG93ZXJDYXNlKCksIFwiL3VzZXIva2V5YmluZGluZ3MuanNvblwiKSkge1xuICAgICAgaWYgKHJvb3QudHlwZSA9PT0gXCJhcnJheVwiKSB7XG4gICAgICAgIGNvbnN0IHJlc3VsdDIgPSBbXTtcbiAgICAgICAgZm9yIChjb25zdCBpdGVtIG9mIHJvb3QuaXRlbXMpIHtcbiAgICAgICAgICBpZiAoaXRlbS50eXBlID09PSBcIm9iamVjdFwiKSB7XG4gICAgICAgICAgICBmb3IgKGNvbnN0IHByb3BlcnR5IG9mIGl0ZW0ucHJvcGVydGllcykge1xuICAgICAgICAgICAgICBpZiAocHJvcGVydHkua2V5Tm9kZS52YWx1ZSA9PT0gXCJrZXlcIiAmJiBwcm9wZXJ0eS52YWx1ZU5vZGUpIHtcbiAgICAgICAgICAgICAgICBjb25zdCBsb2NhdGlvbiA9IExvY2F0aW9uLmNyZWF0ZShkb2N1bWVudC51cmksIGdldFJhbmdlKGRvY3VtZW50LCBpdGVtKSk7XG4gICAgICAgICAgICAgICAgcmVzdWx0Mi5wdXNoKHsgbmFtZTogZ2V0TmFtZShwcm9wZXJ0eS52YWx1ZU5vZGUpLCBraW5kOiBTeW1ib2xLaW5kLkZ1bmN0aW9uLCBsb2NhdGlvbiB9KTtcbiAgICAgICAgICAgICAgICBsaW1pdC0tO1xuICAgICAgICAgICAgICAgIGlmIChsaW1pdCA8PSAwKSB7XG4gICAgICAgICAgICAgICAgICBpZiAoY29udGV4dCAmJiBjb250ZXh0Lm9uUmVzdWx0TGltaXRFeGNlZWRlZCkge1xuICAgICAgICAgICAgICAgICAgICBjb250ZXh0Lm9uUmVzdWx0TGltaXRFeGNlZWRlZChyZXNvdXJjZVN0cmluZyk7XG4gICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICByZXR1cm4gcmVzdWx0MjtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHJlc3VsdDI7XG4gICAgICB9XG4gICAgfVxuICAgIGNvbnN0IHRvVmlzaXQgPSBbXG4gICAgICB7IG5vZGU6IHJvb3QsIGNvbnRhaW5lck5hbWU6IFwiXCIgfVxuICAgIF07XG4gICAgbGV0IG5leHRUb1Zpc2l0ID0gMDtcbiAgICBsZXQgbGltaXRFeGNlZWRlZCA9IGZhbHNlO1xuICAgIGNvbnN0IHJlc3VsdCA9IFtdO1xuICAgIGNvbnN0IGNvbGxlY3RPdXRsaW5lRW50cmllcyA9IChub2RlLCBjb250YWluZXJOYW1lKSA9PiB7XG4gICAgICBpZiAobm9kZS50eXBlID09PSBcImFycmF5XCIpIHtcbiAgICAgICAgbm9kZS5pdGVtcy5mb3JFYWNoKChub2RlMikgPT4ge1xuICAgICAgICAgIGlmIChub2RlMikge1xuICAgICAgICAgICAgdG9WaXNpdC5wdXNoKHsgbm9kZTogbm9kZTIsIGNvbnRhaW5lck5hbWUgfSk7XG4gICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgIH0gZWxzZSBpZiAobm9kZS50eXBlID09PSBcIm9iamVjdFwiKSB7XG4gICAgICAgIG5vZGUucHJvcGVydGllcy5mb3JFYWNoKChwcm9wZXJ0eSkgPT4ge1xuICAgICAgICAgIGNvbnN0IHZhbHVlTm9kZSA9IHByb3BlcnR5LnZhbHVlTm9kZTtcbiAgICAgICAgICBpZiAodmFsdWVOb2RlKSB7XG4gICAgICAgICAgICBpZiAobGltaXQgPiAwKSB7XG4gICAgICAgICAgICAgIGxpbWl0LS07XG4gICAgICAgICAgICAgIGNvbnN0IGxvY2F0aW9uID0gTG9jYXRpb24uY3JlYXRlKGRvY3VtZW50LnVyaSwgZ2V0UmFuZ2UoZG9jdW1lbnQsIHByb3BlcnR5KSk7XG4gICAgICAgICAgICAgIGNvbnN0IGNoaWxkQ29udGFpbmVyTmFtZSA9IGNvbnRhaW5lck5hbWUgPyBjb250YWluZXJOYW1lICsgXCIuXCIgKyBwcm9wZXJ0eS5rZXlOb2RlLnZhbHVlIDogcHJvcGVydHkua2V5Tm9kZS52YWx1ZTtcbiAgICAgICAgICAgICAgcmVzdWx0LnB1c2goeyBuYW1lOiB0aGlzLmdldEtleUxhYmVsKHByb3BlcnR5KSwga2luZDogdGhpcy5nZXRTeW1ib2xLaW5kKHZhbHVlTm9kZS50eXBlKSwgbG9jYXRpb24sIGNvbnRhaW5lck5hbWUgfSk7XG4gICAgICAgICAgICAgIHRvVmlzaXQucHVzaCh7IG5vZGU6IHZhbHVlTm9kZSwgY29udGFpbmVyTmFtZTogY2hpbGRDb250YWluZXJOYW1lIH0pO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgbGltaXRFeGNlZWRlZCA9IHRydWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9O1xuICAgIHdoaWxlIChuZXh0VG9WaXNpdCA8IHRvVmlzaXQubGVuZ3RoKSB7XG4gICAgICBjb25zdCBuZXh0ID0gdG9WaXNpdFtuZXh0VG9WaXNpdCsrXTtcbiAgICAgIGNvbGxlY3RPdXRsaW5lRW50cmllcyhuZXh0Lm5vZGUsIG5leHQuY29udGFpbmVyTmFtZSk7XG4gICAgfVxuICAgIGlmIChsaW1pdEV4Y2VlZGVkICYmIGNvbnRleHQgJiYgY29udGV4dC5vblJlc3VsdExpbWl0RXhjZWVkZWQpIHtcbiAgICAgIGNvbnRleHQub25SZXN1bHRMaW1pdEV4Y2VlZGVkKHJlc291cmNlU3RyaW5nKTtcbiAgICB9XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfVxuICBmaW5kRG9jdW1lbnRTeW1ib2xzMihkb2N1bWVudCwgZG9jLCBjb250ZXh0ID0geyByZXN1bHRMaW1pdDogTnVtYmVyLk1BWF9WQUxVRSB9KSB7XG4gICAgY29uc3Qgcm9vdCA9IGRvYy5yb290O1xuICAgIGlmICghcm9vdCkge1xuICAgICAgcmV0dXJuIFtdO1xuICAgIH1cbiAgICBsZXQgbGltaXQgPSBjb250ZXh0LnJlc3VsdExpbWl0IHx8IE51bWJlci5NQVhfVkFMVUU7XG4gICAgY29uc3QgcmVzb3VyY2VTdHJpbmcgPSBkb2N1bWVudC51cmk7XG4gICAgaWYgKHJlc291cmNlU3RyaW5nID09PSBcInZzY29kZTovL2RlZmF1bHRzZXR0aW5ncy9rZXliaW5kaW5ncy5qc29uXCIgfHwgZW5kc1dpdGgocmVzb3VyY2VTdHJpbmcudG9Mb3dlckNhc2UoKSwgXCIvdXNlci9rZXliaW5kaW5ncy5qc29uXCIpKSB7XG4gICAgICBpZiAocm9vdC50eXBlID09PSBcImFycmF5XCIpIHtcbiAgICAgICAgY29uc3QgcmVzdWx0MiA9IFtdO1xuICAgICAgICBmb3IgKGNvbnN0IGl0ZW0gb2Ygcm9vdC5pdGVtcykge1xuICAgICAgICAgIGlmIChpdGVtLnR5cGUgPT09IFwib2JqZWN0XCIpIHtcbiAgICAgICAgICAgIGZvciAoY29uc3QgcHJvcGVydHkgb2YgaXRlbS5wcm9wZXJ0aWVzKSB7XG4gICAgICAgICAgICAgIGlmIChwcm9wZXJ0eS5rZXlOb2RlLnZhbHVlID09PSBcImtleVwiICYmIHByb3BlcnR5LnZhbHVlTm9kZSkge1xuICAgICAgICAgICAgICAgIGNvbnN0IHJhbmdlID0gZ2V0UmFuZ2UoZG9jdW1lbnQsIGl0ZW0pO1xuICAgICAgICAgICAgICAgIGNvbnN0IHNlbGVjdGlvblJhbmdlID0gZ2V0UmFuZ2UoZG9jdW1lbnQsIHByb3BlcnR5LmtleU5vZGUpO1xuICAgICAgICAgICAgICAgIHJlc3VsdDIucHVzaCh7IG5hbWU6IGdldE5hbWUocHJvcGVydHkudmFsdWVOb2RlKSwga2luZDogU3ltYm9sS2luZC5GdW5jdGlvbiwgcmFuZ2UsIHNlbGVjdGlvblJhbmdlIH0pO1xuICAgICAgICAgICAgICAgIGxpbWl0LS07XG4gICAgICAgICAgICAgICAgaWYgKGxpbWl0IDw9IDApIHtcbiAgICAgICAgICAgICAgICAgIGlmIChjb250ZXh0ICYmIGNvbnRleHQub25SZXN1bHRMaW1pdEV4Y2VlZGVkKSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnRleHQub25SZXN1bHRMaW1pdEV4Y2VlZGVkKHJlc291cmNlU3RyaW5nKTtcbiAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgIHJldHVybiByZXN1bHQyO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gcmVzdWx0MjtcbiAgICAgIH1cbiAgICB9XG4gICAgY29uc3QgcmVzdWx0ID0gW107XG4gICAgY29uc3QgdG9WaXNpdCA9IFtcbiAgICAgIHsgbm9kZTogcm9vdCwgcmVzdWx0IH1cbiAgICBdO1xuICAgIGxldCBuZXh0VG9WaXNpdCA9IDA7XG4gICAgbGV0IGxpbWl0RXhjZWVkZWQgPSBmYWxzZTtcbiAgICBjb25zdCBjb2xsZWN0T3V0bGluZUVudHJpZXMgPSAobm9kZSwgcmVzdWx0MikgPT4ge1xuICAgICAgaWYgKG5vZGUudHlwZSA9PT0gXCJhcnJheVwiKSB7XG4gICAgICAgIG5vZGUuaXRlbXMuZm9yRWFjaCgobm9kZTIsIGluZGV4KSA9PiB7XG4gICAgICAgICAgaWYgKG5vZGUyKSB7XG4gICAgICAgICAgICBpZiAobGltaXQgPiAwKSB7XG4gICAgICAgICAgICAgIGxpbWl0LS07XG4gICAgICAgICAgICAgIGNvbnN0IHJhbmdlID0gZ2V0UmFuZ2UoZG9jdW1lbnQsIG5vZGUyKTtcbiAgICAgICAgICAgICAgY29uc3Qgc2VsZWN0aW9uUmFuZ2UgPSByYW5nZTtcbiAgICAgICAgICAgICAgY29uc3QgbmFtZSA9IFN0cmluZyhpbmRleCk7XG4gICAgICAgICAgICAgIGNvbnN0IHN5bWJvbCA9IHsgbmFtZSwga2luZDogdGhpcy5nZXRTeW1ib2xLaW5kKG5vZGUyLnR5cGUpLCByYW5nZSwgc2VsZWN0aW9uUmFuZ2UsIGNoaWxkcmVuOiBbXSB9O1xuICAgICAgICAgICAgICByZXN1bHQyLnB1c2goc3ltYm9sKTtcbiAgICAgICAgICAgICAgdG9WaXNpdC5wdXNoKHsgcmVzdWx0OiBzeW1ib2wuY2hpbGRyZW4sIG5vZGU6IG5vZGUyIH0pO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgbGltaXRFeGNlZWRlZCA9IHRydWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgIH0gZWxzZSBpZiAobm9kZS50eXBlID09PSBcIm9iamVjdFwiKSB7XG4gICAgICAgIG5vZGUucHJvcGVydGllcy5mb3JFYWNoKChwcm9wZXJ0eSkgPT4ge1xuICAgICAgICAgIGNvbnN0IHZhbHVlTm9kZSA9IHByb3BlcnR5LnZhbHVlTm9kZTtcbiAgICAgICAgICBpZiAodmFsdWVOb2RlKSB7XG4gICAgICAgICAgICBpZiAobGltaXQgPiAwKSB7XG4gICAgICAgICAgICAgIGxpbWl0LS07XG4gICAgICAgICAgICAgIGNvbnN0IHJhbmdlID0gZ2V0UmFuZ2UoZG9jdW1lbnQsIHByb3BlcnR5KTtcbiAgICAgICAgICAgICAgY29uc3Qgc2VsZWN0aW9uUmFuZ2UgPSBnZXRSYW5nZShkb2N1bWVudCwgcHJvcGVydHkua2V5Tm9kZSk7XG4gICAgICAgICAgICAgIGNvbnN0IGNoaWxkcmVuID0gW107XG4gICAgICAgICAgICAgIGNvbnN0IHN5bWJvbCA9IHsgbmFtZTogdGhpcy5nZXRLZXlMYWJlbChwcm9wZXJ0eSksIGtpbmQ6IHRoaXMuZ2V0U3ltYm9sS2luZCh2YWx1ZU5vZGUudHlwZSksIHJhbmdlLCBzZWxlY3Rpb25SYW5nZSwgY2hpbGRyZW4sIGRldGFpbDogdGhpcy5nZXREZXRhaWwodmFsdWVOb2RlKSB9O1xuICAgICAgICAgICAgICByZXN1bHQyLnB1c2goc3ltYm9sKTtcbiAgICAgICAgICAgICAgdG9WaXNpdC5wdXNoKHsgcmVzdWx0OiBjaGlsZHJlbiwgbm9kZTogdmFsdWVOb2RlIH0pO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgbGltaXRFeGNlZWRlZCA9IHRydWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9O1xuICAgIHdoaWxlIChuZXh0VG9WaXNpdCA8IHRvVmlzaXQubGVuZ3RoKSB7XG4gICAgICBjb25zdCBuZXh0ID0gdG9WaXNpdFtuZXh0VG9WaXNpdCsrXTtcbiAgICAgIGNvbGxlY3RPdXRsaW5lRW50cmllcyhuZXh0Lm5vZGUsIG5leHQucmVzdWx0KTtcbiAgICB9XG4gICAgaWYgKGxpbWl0RXhjZWVkZWQgJiYgY29udGV4dCAmJiBjb250ZXh0Lm9uUmVzdWx0TGltaXRFeGNlZWRlZCkge1xuICAgICAgY29udGV4dC5vblJlc3VsdExpbWl0RXhjZWVkZWQocmVzb3VyY2VTdHJpbmcpO1xuICAgIH1cbiAgICByZXR1cm4gcmVzdWx0O1xuICB9XG4gIGdldFN5bWJvbEtpbmQobm9kZVR5cGUpIHtcbiAgICBzd2l0Y2ggKG5vZGVUeXBlKSB7XG4gICAgICBjYXNlIFwib2JqZWN0XCI6XG4gICAgICAgIHJldHVybiBTeW1ib2xLaW5kLk1vZHVsZTtcbiAgICAgIGNhc2UgXCJzdHJpbmdcIjpcbiAgICAgICAgcmV0dXJuIFN5bWJvbEtpbmQuU3RyaW5nO1xuICAgICAgY2FzZSBcIm51bWJlclwiOlxuICAgICAgICByZXR1cm4gU3ltYm9sS2luZC5OdW1iZXI7XG4gICAgICBjYXNlIFwiYXJyYXlcIjpcbiAgICAgICAgcmV0dXJuIFN5bWJvbEtpbmQuQXJyYXk7XG4gICAgICBjYXNlIFwiYm9vbGVhblwiOlxuICAgICAgICByZXR1cm4gU3ltYm9sS2luZC5Cb29sZWFuO1xuICAgICAgZGVmYXVsdDpcbiAgICAgICAgcmV0dXJuIFN5bWJvbEtpbmQuVmFyaWFibGU7XG4gICAgfVxuICB9XG4gIGdldEtleUxhYmVsKHByb3BlcnR5KSB7XG4gICAgbGV0IG5hbWUgPSBwcm9wZXJ0eS5rZXlOb2RlLnZhbHVlO1xuICAgIGlmIChuYW1lKSB7XG4gICAgICBuYW1lID0gbmFtZS5yZXBsYWNlKC9bXFxuXS9nLCBcIlxcdTIxQjVcIik7XG4gICAgfVxuICAgIGlmIChuYW1lICYmIG5hbWUudHJpbSgpKSB7XG4gICAgICByZXR1cm4gbmFtZTtcbiAgICB9XG4gICAgcmV0dXJuIGBcIiR7bmFtZX1cImA7XG4gIH1cbiAgZ2V0RGV0YWlsKG5vZGUpIHtcbiAgICBpZiAoIW5vZGUpIHtcbiAgICAgIHJldHVybiB2b2lkIDA7XG4gICAgfVxuICAgIGlmIChub2RlLnR5cGUgPT09IFwiYm9vbGVhblwiIHx8IG5vZGUudHlwZSA9PT0gXCJudW1iZXJcIiB8fCBub2RlLnR5cGUgPT09IFwibnVsbFwiIHx8IG5vZGUudHlwZSA9PT0gXCJzdHJpbmdcIikge1xuICAgICAgcmV0dXJuIFN0cmluZyhub2RlLnZhbHVlKTtcbiAgICB9IGVsc2Uge1xuICAgICAgaWYgKG5vZGUudHlwZSA9PT0gXCJhcnJheVwiKSB7XG4gICAgICAgIHJldHVybiBub2RlLmNoaWxkcmVuLmxlbmd0aCA/IHZvaWQgMCA6IFwiW11cIjtcbiAgICAgIH0gZWxzZSBpZiAobm9kZS50eXBlID09PSBcIm9iamVjdFwiKSB7XG4gICAgICAgIHJldHVybiBub2RlLmNoaWxkcmVuLmxlbmd0aCA/IHZvaWQgMCA6IFwie31cIjtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHZvaWQgMDtcbiAgfVxuICBmaW5kRG9jdW1lbnRDb2xvcnMoZG9jdW1lbnQsIGRvYywgY29udGV4dCkge1xuICAgIHJldHVybiB0aGlzLnNjaGVtYVNlcnZpY2UuZ2V0U2NoZW1hRm9yUmVzb3VyY2UoZG9jdW1lbnQudXJpLCBkb2MpLnRoZW4oKHNjaGVtYSkgPT4ge1xuICAgICAgY29uc3QgcmVzdWx0ID0gW107XG4gICAgICBpZiAoc2NoZW1hKSB7XG4gICAgICAgIGxldCBsaW1pdCA9IGNvbnRleHQgJiYgdHlwZW9mIGNvbnRleHQucmVzdWx0TGltaXQgPT09IFwibnVtYmVyXCIgPyBjb250ZXh0LnJlc3VsdExpbWl0IDogTnVtYmVyLk1BWF9WQUxVRTtcbiAgICAgICAgY29uc3QgbWF0Y2hpbmdTY2hlbWFzID0gZG9jLmdldE1hdGNoaW5nU2NoZW1hcyhzY2hlbWEuc2NoZW1hKTtcbiAgICAgICAgY29uc3QgdmlzaXRlZE5vZGUgPSB7fTtcbiAgICAgICAgZm9yIChjb25zdCBzIG9mIG1hdGNoaW5nU2NoZW1hcykge1xuICAgICAgICAgIGlmICghcy5pbnZlcnRlZCAmJiBzLnNjaGVtYSAmJiAocy5zY2hlbWEuZm9ybWF0ID09PSBcImNvbG9yXCIgfHwgcy5zY2hlbWEuZm9ybWF0ID09PSBcImNvbG9yLWhleFwiKSAmJiBzLm5vZGUgJiYgcy5ub2RlLnR5cGUgPT09IFwic3RyaW5nXCIpIHtcbiAgICAgICAgICAgIGNvbnN0IG5vZGVJZCA9IFN0cmluZyhzLm5vZGUub2Zmc2V0KTtcbiAgICAgICAgICAgIGlmICghdmlzaXRlZE5vZGVbbm9kZUlkXSkge1xuICAgICAgICAgICAgICBjb25zdCBjb2xvciA9IGNvbG9yRnJvbUhleChnZXROb2RlVmFsdWUzKHMubm9kZSkpO1xuICAgICAgICAgICAgICBpZiAoY29sb3IpIHtcbiAgICAgICAgICAgICAgICBjb25zdCByYW5nZSA9IGdldFJhbmdlKGRvY3VtZW50LCBzLm5vZGUpO1xuICAgICAgICAgICAgICAgIHJlc3VsdC5wdXNoKHsgY29sb3IsIHJhbmdlIH0pO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIHZpc2l0ZWROb2RlW25vZGVJZF0gPSB0cnVlO1xuICAgICAgICAgICAgICBsaW1pdC0tO1xuICAgICAgICAgICAgICBpZiAobGltaXQgPD0gMCkge1xuICAgICAgICAgICAgICAgIGlmIChjb250ZXh0ICYmIGNvbnRleHQub25SZXN1bHRMaW1pdEV4Y2VlZGVkKSB7XG4gICAgICAgICAgICAgICAgICBjb250ZXh0Lm9uUmVzdWx0TGltaXRFeGNlZWRlZChkb2N1bWVudC51cmkpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH0pO1xuICB9XG4gIGdldENvbG9yUHJlc2VudGF0aW9ucyhkb2N1bWVudCwgZG9jLCBjb2xvciwgcmFuZ2UpIHtcbiAgICBjb25zdCByZXN1bHQgPSBbXTtcbiAgICBjb25zdCByZWQyNTYgPSBNYXRoLnJvdW5kKGNvbG9yLnJlZCAqIDI1NSksIGdyZWVuMjU2ID0gTWF0aC5yb3VuZChjb2xvci5ncmVlbiAqIDI1NSksIGJsdWUyNTYgPSBNYXRoLnJvdW5kKGNvbG9yLmJsdWUgKiAyNTUpO1xuICAgIGZ1bmN0aW9uIHRvVHdvRGlnaXRIZXgobikge1xuICAgICAgY29uc3QgciA9IG4udG9TdHJpbmcoMTYpO1xuICAgICAgcmV0dXJuIHIubGVuZ3RoICE9PSAyID8gXCIwXCIgKyByIDogcjtcbiAgICB9XG4gICAgbGV0IGxhYmVsO1xuICAgIGlmIChjb2xvci5hbHBoYSA9PT0gMSkge1xuICAgICAgbGFiZWwgPSBgIyR7dG9Ud29EaWdpdEhleChyZWQyNTYpfSR7dG9Ud29EaWdpdEhleChncmVlbjI1Nil9JHt0b1R3b0RpZ2l0SGV4KGJsdWUyNTYpfWA7XG4gICAgfSBlbHNlIHtcbiAgICAgIGxhYmVsID0gYCMke3RvVHdvRGlnaXRIZXgocmVkMjU2KX0ke3RvVHdvRGlnaXRIZXgoZ3JlZW4yNTYpfSR7dG9Ud29EaWdpdEhleChibHVlMjU2KX0ke3RvVHdvRGlnaXRIZXgoTWF0aC5yb3VuZChjb2xvci5hbHBoYSAqIDI1NSkpfWA7XG4gICAgfVxuICAgIHJlc3VsdC5wdXNoKHsgbGFiZWwsIHRleHRFZGl0OiBUZXh0RWRpdC5yZXBsYWNlKHJhbmdlLCBKU09OLnN0cmluZ2lmeShsYWJlbCkpIH0pO1xuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cbn07XG5mdW5jdGlvbiBnZXRSYW5nZShkb2N1bWVudCwgbm9kZSkge1xuICByZXR1cm4gUmFuZ2UuY3JlYXRlKGRvY3VtZW50LnBvc2l0aW9uQXQobm9kZS5vZmZzZXQpLCBkb2N1bWVudC5wb3NpdGlvbkF0KG5vZGUub2Zmc2V0ICsgbm9kZS5sZW5ndGgpKTtcbn1cbmZ1bmN0aW9uIGdldE5hbWUobm9kZSkge1xuICByZXR1cm4gZ2V0Tm9kZVZhbHVlMyhub2RlKSB8fCB0KFwiPGVtcHR5PlwiKTtcbn1cblxuLy8gbm9kZV9tb2R1bGVzL3ZzY29kZS1qc29uLWxhbmd1YWdlc2VydmljZS9saWIvZXNtL3NlcnZpY2VzL2NvbmZpZ3VyYXRpb24uanNcbnZhciBzY2hlbWFDb250cmlidXRpb25zID0ge1xuICBzY2hlbWFBc3NvY2lhdGlvbnM6IFtdLFxuICBzY2hlbWFzOiB7XG4gICAgLy8gYnVuZGxlIHRoZSBzY2hlbWEtc2NoZW1hIHRvIGluY2x1ZGUgKGxvY2FsaXplZCkgZGVzY3JpcHRpb25zXG4gICAgXCJodHRwOi8vanNvbi1zY2hlbWEub3JnL2RyYWZ0LTA0L3NjaGVtYSNcIjoge1xuICAgICAgXCIkc2NoZW1hXCI6IFwiaHR0cDovL2pzb24tc2NoZW1hLm9yZy9kcmFmdC0wNC9zY2hlbWEjXCIsXG4gICAgICBcImRlZmluaXRpb25zXCI6IHtcbiAgICAgICAgXCJzY2hlbWFBcnJheVwiOiB7XG4gICAgICAgICAgXCJ0eXBlXCI6IFwiYXJyYXlcIixcbiAgICAgICAgICBcIm1pbkl0ZW1zXCI6IDEsXG4gICAgICAgICAgXCJpdGVtc1wiOiB7XG4gICAgICAgICAgICBcIiRyZWZcIjogXCIjXCJcbiAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIFwicG9zaXRpdmVJbnRlZ2VyXCI6IHtcbiAgICAgICAgICBcInR5cGVcIjogXCJpbnRlZ2VyXCIsXG4gICAgICAgICAgXCJtaW5pbXVtXCI6IDBcbiAgICAgICAgfSxcbiAgICAgICAgXCJwb3NpdGl2ZUludGVnZXJEZWZhdWx0MFwiOiB7XG4gICAgICAgICAgXCJhbGxPZlwiOiBbXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgIFwiJHJlZlwiOiBcIiMvZGVmaW5pdGlvbnMvcG9zaXRpdmVJbnRlZ2VyXCJcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgIFwiZGVmYXVsdFwiOiAwXG4gICAgICAgICAgICB9XG4gICAgICAgICAgXVxuICAgICAgICB9LFxuICAgICAgICBcInNpbXBsZVR5cGVzXCI6IHtcbiAgICAgICAgICBcInR5cGVcIjogXCJzdHJpbmdcIixcbiAgICAgICAgICBcImVudW1cIjogW1xuICAgICAgICAgICAgXCJhcnJheVwiLFxuICAgICAgICAgICAgXCJib29sZWFuXCIsXG4gICAgICAgICAgICBcImludGVnZXJcIixcbiAgICAgICAgICAgIFwibnVsbFwiLFxuICAgICAgICAgICAgXCJudW1iZXJcIixcbiAgICAgICAgICAgIFwib2JqZWN0XCIsXG4gICAgICAgICAgICBcInN0cmluZ1wiXG4gICAgICAgICAgXVxuICAgICAgICB9LFxuICAgICAgICBcInN0cmluZ0FycmF5XCI6IHtcbiAgICAgICAgICBcInR5cGVcIjogXCJhcnJheVwiLFxuICAgICAgICAgIFwiaXRlbXNcIjoge1xuICAgICAgICAgICAgXCJ0eXBlXCI6IFwic3RyaW5nXCJcbiAgICAgICAgICB9LFxuICAgICAgICAgIFwibWluSXRlbXNcIjogMSxcbiAgICAgICAgICBcInVuaXF1ZUl0ZW1zXCI6IHRydWVcbiAgICAgICAgfVxuICAgICAgfSxcbiAgICAgIFwidHlwZVwiOiBcIm9iamVjdFwiLFxuICAgICAgXCJwcm9wZXJ0aWVzXCI6IHtcbiAgICAgICAgXCJpZFwiOiB7XG4gICAgICAgICAgXCJ0eXBlXCI6IFwic3RyaW5nXCIsXG4gICAgICAgICAgXCJmb3JtYXRcIjogXCJ1cmlcIlxuICAgICAgICB9LFxuICAgICAgICBcIiRzY2hlbWFcIjoge1xuICAgICAgICAgIFwidHlwZVwiOiBcInN0cmluZ1wiLFxuICAgICAgICAgIFwiZm9ybWF0XCI6IFwidXJpXCJcbiAgICAgICAgfSxcbiAgICAgICAgXCJ0aXRsZVwiOiB7XG4gICAgICAgICAgXCJ0eXBlXCI6IFwic3RyaW5nXCJcbiAgICAgICAgfSxcbiAgICAgICAgXCJkZXNjcmlwdGlvblwiOiB7XG4gICAgICAgICAgXCJ0eXBlXCI6IFwic3RyaW5nXCJcbiAgICAgICAgfSxcbiAgICAgICAgXCJkZWZhdWx0XCI6IHt9LFxuICAgICAgICBcIm11bHRpcGxlT2ZcIjoge1xuICAgICAgICAgIFwidHlwZVwiOiBcIm51bWJlclwiLFxuICAgICAgICAgIFwibWluaW11bVwiOiAwLFxuICAgICAgICAgIFwiZXhjbHVzaXZlTWluaW11bVwiOiB0cnVlXG4gICAgICAgIH0sXG4gICAgICAgIFwibWF4aW11bVwiOiB7XG4gICAgICAgICAgXCJ0eXBlXCI6IFwibnVtYmVyXCJcbiAgICAgICAgfSxcbiAgICAgICAgXCJleGNsdXNpdmVNYXhpbXVtXCI6IHtcbiAgICAgICAgICBcInR5cGVcIjogXCJib29sZWFuXCIsXG4gICAgICAgICAgXCJkZWZhdWx0XCI6IGZhbHNlXG4gICAgICAgIH0sXG4gICAgICAgIFwibWluaW11bVwiOiB7XG4gICAgICAgICAgXCJ0eXBlXCI6IFwibnVtYmVyXCJcbiAgICAgICAgfSxcbiAgICAgICAgXCJleGNsdXNpdmVNaW5pbXVtXCI6IHtcbiAgICAgICAgICBcInR5cGVcIjogXCJib29sZWFuXCIsXG4gICAgICAgICAgXCJkZWZhdWx0XCI6IGZhbHNlXG4gICAgICAgIH0sXG4gICAgICAgIFwibWF4TGVuZ3RoXCI6IHtcbiAgICAgICAgICBcImFsbE9mXCI6IFtcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgXCIkcmVmXCI6IFwiIy9kZWZpbml0aW9ucy9wb3NpdGl2ZUludGVnZXJcIlxuICAgICAgICAgICAgfVxuICAgICAgICAgIF1cbiAgICAgICAgfSxcbiAgICAgICAgXCJtaW5MZW5ndGhcIjoge1xuICAgICAgICAgIFwiYWxsT2ZcIjogW1xuICAgICAgICAgICAge1xuICAgICAgICAgICAgICBcIiRyZWZcIjogXCIjL2RlZmluaXRpb25zL3Bvc2l0aXZlSW50ZWdlckRlZmF1bHQwXCJcbiAgICAgICAgICAgIH1cbiAgICAgICAgICBdXG4gICAgICAgIH0sXG4gICAgICAgIFwicGF0dGVyblwiOiB7XG4gICAgICAgICAgXCJ0eXBlXCI6IFwic3RyaW5nXCIsXG4gICAgICAgICAgXCJmb3JtYXRcIjogXCJyZWdleFwiXG4gICAgICAgIH0sXG4gICAgICAgIFwiYWRkaXRpb25hbEl0ZW1zXCI6IHtcbiAgICAgICAgICBcImFueU9mXCI6IFtcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgXCJ0eXBlXCI6IFwiYm9vbGVhblwiXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICBcIiRyZWZcIjogXCIjXCJcbiAgICAgICAgICAgIH1cbiAgICAgICAgICBdLFxuICAgICAgICAgIFwiZGVmYXVsdFwiOiB7fVxuICAgICAgICB9LFxuICAgICAgICBcIml0ZW1zXCI6IHtcbiAgICAgICAgICBcImFueU9mXCI6IFtcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgXCIkcmVmXCI6IFwiI1wiXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICBcIiRyZWZcIjogXCIjL2RlZmluaXRpb25zL3NjaGVtYUFycmF5XCJcbiAgICAgICAgICAgIH1cbiAgICAgICAgICBdLFxuICAgICAgICAgIFwiZGVmYXVsdFwiOiB7fVxuICAgICAgICB9LFxuICAgICAgICBcIm1heEl0ZW1zXCI6IHtcbiAgICAgICAgICBcImFsbE9mXCI6IFtcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgXCIkcmVmXCI6IFwiIy9kZWZpbml0aW9ucy9wb3NpdGl2ZUludGVnZXJcIlxuICAgICAgICAgICAgfVxuICAgICAgICAgIF1cbiAgICAgICAgfSxcbiAgICAgICAgXCJtaW5JdGVtc1wiOiB7XG4gICAgICAgICAgXCJhbGxPZlwiOiBbXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgIFwiJHJlZlwiOiBcIiMvZGVmaW5pdGlvbnMvcG9zaXRpdmVJbnRlZ2VyRGVmYXVsdDBcIlxuICAgICAgICAgICAgfVxuICAgICAgICAgIF1cbiAgICAgICAgfSxcbiAgICAgICAgXCJ1bmlxdWVJdGVtc1wiOiB7XG4gICAgICAgICAgXCJ0eXBlXCI6IFwiYm9vbGVhblwiLFxuICAgICAgICAgIFwiZGVmYXVsdFwiOiBmYWxzZVxuICAgICAgICB9LFxuICAgICAgICBcIm1heFByb3BlcnRpZXNcIjoge1xuICAgICAgICAgIFwiYWxsT2ZcIjogW1xuICAgICAgICAgICAge1xuICAgICAgICAgICAgICBcIiRyZWZcIjogXCIjL2RlZmluaXRpb25zL3Bvc2l0aXZlSW50ZWdlclwiXG4gICAgICAgICAgICB9XG4gICAgICAgICAgXVxuICAgICAgICB9LFxuICAgICAgICBcIm1pblByb3BlcnRpZXNcIjoge1xuICAgICAgICAgIFwiYWxsT2ZcIjogW1xuICAgICAgICAgICAge1xuICAgICAgICAgICAgICBcIiRyZWZcIjogXCIjL2RlZmluaXRpb25zL3Bvc2l0aXZlSW50ZWdlckRlZmF1bHQwXCJcbiAgICAgICAgICAgIH1cbiAgICAgICAgICBdXG4gICAgICAgIH0sXG4gICAgICAgIFwicmVxdWlyZWRcIjoge1xuICAgICAgICAgIFwiYWxsT2ZcIjogW1xuICAgICAgICAgICAge1xuICAgICAgICAgICAgICBcIiRyZWZcIjogXCIjL2RlZmluaXRpb25zL3N0cmluZ0FycmF5XCJcbiAgICAgICAgICAgIH1cbiAgICAgICAgICBdXG4gICAgICAgIH0sXG4gICAgICAgIFwiYWRkaXRpb25hbFByb3BlcnRpZXNcIjoge1xuICAgICAgICAgIFwiYW55T2ZcIjogW1xuICAgICAgICAgICAge1xuICAgICAgICAgICAgICBcInR5cGVcIjogXCJib29sZWFuXCJcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgIFwiJHJlZlwiOiBcIiNcIlxuICAgICAgICAgICAgfVxuICAgICAgICAgIF0sXG4gICAgICAgICAgXCJkZWZhdWx0XCI6IHt9XG4gICAgICAgIH0sXG4gICAgICAgIFwiZGVmaW5pdGlvbnNcIjoge1xuICAgICAgICAgIFwidHlwZVwiOiBcIm9iamVjdFwiLFxuICAgICAgICAgIFwiYWRkaXRpb25hbFByb3BlcnRpZXNcIjoge1xuICAgICAgICAgICAgXCIkcmVmXCI6IFwiI1wiXG4gICAgICAgICAgfSxcbiAgICAgICAgICBcImRlZmF1bHRcIjoge31cbiAgICAgICAgfSxcbiAgICAgICAgXCJwcm9wZXJ0aWVzXCI6IHtcbiAgICAgICAgICBcInR5cGVcIjogXCJvYmplY3RcIixcbiAgICAgICAgICBcImFkZGl0aW9uYWxQcm9wZXJ0aWVzXCI6IHtcbiAgICAgICAgICAgIFwiJHJlZlwiOiBcIiNcIlxuICAgICAgICAgIH0sXG4gICAgICAgICAgXCJkZWZhdWx0XCI6IHt9XG4gICAgICAgIH0sXG4gICAgICAgIFwicGF0dGVyblByb3BlcnRpZXNcIjoge1xuICAgICAgICAgIFwidHlwZVwiOiBcIm9iamVjdFwiLFxuICAgICAgICAgIFwiYWRkaXRpb25hbFByb3BlcnRpZXNcIjoge1xuICAgICAgICAgICAgXCIkcmVmXCI6IFwiI1wiXG4gICAgICAgICAgfSxcbiAgICAgICAgICBcImRlZmF1bHRcIjoge31cbiAgICAgICAgfSxcbiAgICAgICAgXCJkZXBlbmRlbmNpZXNcIjoge1xuICAgICAgICAgIFwidHlwZVwiOiBcIm9iamVjdFwiLFxuICAgICAgICAgIFwiYWRkaXRpb25hbFByb3BlcnRpZXNcIjoge1xuICAgICAgICAgICAgXCJhbnlPZlwiOiBbXG4gICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIiRyZWZcIjogXCIjXCJcbiAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwiJHJlZlwiOiBcIiMvZGVmaW5pdGlvbnMvc3RyaW5nQXJyYXlcIlxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICBdXG4gICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICBcImVudW1cIjoge1xuICAgICAgICAgIFwidHlwZVwiOiBcImFycmF5XCIsXG4gICAgICAgICAgXCJtaW5JdGVtc1wiOiAxLFxuICAgICAgICAgIFwidW5pcXVlSXRlbXNcIjogdHJ1ZVxuICAgICAgICB9LFxuICAgICAgICBcInR5cGVcIjoge1xuICAgICAgICAgIFwiYW55T2ZcIjogW1xuICAgICAgICAgICAge1xuICAgICAgICAgICAgICBcIiRyZWZcIjogXCIjL2RlZmluaXRpb25zL3NpbXBsZVR5cGVzXCJcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgIFwidHlwZVwiOiBcImFycmF5XCIsXG4gICAgICAgICAgICAgIFwiaXRlbXNcIjoge1xuICAgICAgICAgICAgICAgIFwiJHJlZlwiOiBcIiMvZGVmaW5pdGlvbnMvc2ltcGxlVHlwZXNcIlxuICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICBcIm1pbkl0ZW1zXCI6IDEsXG4gICAgICAgICAgICAgIFwidW5pcXVlSXRlbXNcIjogdHJ1ZVxuICAgICAgICAgICAgfVxuICAgICAgICAgIF1cbiAgICAgICAgfSxcbiAgICAgICAgXCJmb3JtYXRcIjoge1xuICAgICAgICAgIFwiYW55T2ZcIjogW1xuICAgICAgICAgICAge1xuICAgICAgICAgICAgICBcInR5cGVcIjogXCJzdHJpbmdcIixcbiAgICAgICAgICAgICAgXCJlbnVtXCI6IFtcbiAgICAgICAgICAgICAgICBcImRhdGUtdGltZVwiLFxuICAgICAgICAgICAgICAgIFwidXJpXCIsXG4gICAgICAgICAgICAgICAgXCJlbWFpbFwiLFxuICAgICAgICAgICAgICAgIFwiaG9zdG5hbWVcIixcbiAgICAgICAgICAgICAgICBcImlwdjRcIixcbiAgICAgICAgICAgICAgICBcImlwdjZcIixcbiAgICAgICAgICAgICAgICBcInJlZ2V4XCJcbiAgICAgICAgICAgICAgXVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgXCJ0eXBlXCI6IFwic3RyaW5nXCJcbiAgICAgICAgICAgIH1cbiAgICAgICAgICBdXG4gICAgICAgIH0sXG4gICAgICAgIFwiYWxsT2ZcIjoge1xuICAgICAgICAgIFwiYWxsT2ZcIjogW1xuICAgICAgICAgICAge1xuICAgICAgICAgICAgICBcIiRyZWZcIjogXCIjL2RlZmluaXRpb25zL3NjaGVtYUFycmF5XCJcbiAgICAgICAgICAgIH1cbiAgICAgICAgICBdXG4gICAgICAgIH0sXG4gICAgICAgIFwiYW55T2ZcIjoge1xuICAgICAgICAgIFwiYWxsT2ZcIjogW1xuICAgICAgICAgICAge1xuICAgICAgICAgICAgICBcIiRyZWZcIjogXCIjL2RlZmluaXRpb25zL3NjaGVtYUFycmF5XCJcbiAgICAgICAgICAgIH1cbiAgICAgICAgICBdXG4gICAgICAgIH0sXG4gICAgICAgIFwib25lT2ZcIjoge1xuICAgICAgICAgIFwiYWxsT2ZcIjogW1xuICAgICAgICAgICAge1xuICAgICAgICAgICAgICBcIiRyZWZcIjogXCIjL2RlZmluaXRpb25zL3NjaGVtYUFycmF5XCJcbiAgICAgICAgICAgIH1cbiAgICAgICAgICBdXG4gICAgICAgIH0sXG4gICAgICAgIFwibm90XCI6IHtcbiAgICAgICAgICBcImFsbE9mXCI6IFtcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgXCIkcmVmXCI6IFwiI1wiXG4gICAgICAgICAgICB9XG4gICAgICAgICAgXVxuICAgICAgICB9XG4gICAgICB9LFxuICAgICAgXCJkZXBlbmRlbmNpZXNcIjoge1xuICAgICAgICBcImV4Y2x1c2l2ZU1heGltdW1cIjogW1xuICAgICAgICAgIFwibWF4aW11bVwiXG4gICAgICAgIF0sXG4gICAgICAgIFwiZXhjbHVzaXZlTWluaW11bVwiOiBbXG4gICAgICAgICAgXCJtaW5pbXVtXCJcbiAgICAgICAgXVxuICAgICAgfSxcbiAgICAgIFwiZGVmYXVsdFwiOiB7fVxuICAgIH0sXG4gICAgXCJodHRwOi8vanNvbi1zY2hlbWEub3JnL2RyYWZ0LTA3L3NjaGVtYSNcIjoge1xuICAgICAgXCJkZWZpbml0aW9uc1wiOiB7XG4gICAgICAgIFwic2NoZW1hQXJyYXlcIjoge1xuICAgICAgICAgIFwidHlwZVwiOiBcImFycmF5XCIsXG4gICAgICAgICAgXCJtaW5JdGVtc1wiOiAxLFxuICAgICAgICAgIFwiaXRlbXNcIjogeyBcIiRyZWZcIjogXCIjXCIgfVxuICAgICAgICB9LFxuICAgICAgICBcIm5vbk5lZ2F0aXZlSW50ZWdlclwiOiB7XG4gICAgICAgICAgXCJ0eXBlXCI6IFwiaW50ZWdlclwiLFxuICAgICAgICAgIFwibWluaW11bVwiOiAwXG4gICAgICAgIH0sXG4gICAgICAgIFwibm9uTmVnYXRpdmVJbnRlZ2VyRGVmYXVsdDBcIjoge1xuICAgICAgICAgIFwiYWxsT2ZcIjogW1xuICAgICAgICAgICAgeyBcIiRyZWZcIjogXCIjL2RlZmluaXRpb25zL25vbk5lZ2F0aXZlSW50ZWdlclwiIH0sXG4gICAgICAgICAgICB7IFwiZGVmYXVsdFwiOiAwIH1cbiAgICAgICAgICBdXG4gICAgICAgIH0sXG4gICAgICAgIFwic2ltcGxlVHlwZXNcIjoge1xuICAgICAgICAgIFwiZW51bVwiOiBbXG4gICAgICAgICAgICBcImFycmF5XCIsXG4gICAgICAgICAgICBcImJvb2xlYW5cIixcbiAgICAgICAgICAgIFwiaW50ZWdlclwiLFxuICAgICAgICAgICAgXCJudWxsXCIsXG4gICAgICAgICAgICBcIm51bWJlclwiLFxuICAgICAgICAgICAgXCJvYmplY3RcIixcbiAgICAgICAgICAgIFwic3RyaW5nXCJcbiAgICAgICAgICBdXG4gICAgICAgIH0sXG4gICAgICAgIFwic3RyaW5nQXJyYXlcIjoge1xuICAgICAgICAgIFwidHlwZVwiOiBcImFycmF5XCIsXG4gICAgICAgICAgXCJpdGVtc1wiOiB7IFwidHlwZVwiOiBcInN0cmluZ1wiIH0sXG4gICAgICAgICAgXCJ1bmlxdWVJdGVtc1wiOiB0cnVlLFxuICAgICAgICAgIFwiZGVmYXVsdFwiOiBbXVxuICAgICAgICB9XG4gICAgICB9LFxuICAgICAgXCJ0eXBlXCI6IFtcIm9iamVjdFwiLCBcImJvb2xlYW5cIl0sXG4gICAgICBcInByb3BlcnRpZXNcIjoge1xuICAgICAgICBcIiRpZFwiOiB7XG4gICAgICAgICAgXCJ0eXBlXCI6IFwic3RyaW5nXCIsXG4gICAgICAgICAgXCJmb3JtYXRcIjogXCJ1cmktcmVmZXJlbmNlXCJcbiAgICAgICAgfSxcbiAgICAgICAgXCIkc2NoZW1hXCI6IHtcbiAgICAgICAgICBcInR5cGVcIjogXCJzdHJpbmdcIixcbiAgICAgICAgICBcImZvcm1hdFwiOiBcInVyaVwiXG4gICAgICAgIH0sXG4gICAgICAgIFwiJHJlZlwiOiB7XG4gICAgICAgICAgXCJ0eXBlXCI6IFwic3RyaW5nXCIsXG4gICAgICAgICAgXCJmb3JtYXRcIjogXCJ1cmktcmVmZXJlbmNlXCJcbiAgICAgICAgfSxcbiAgICAgICAgXCIkY29tbWVudFwiOiB7XG4gICAgICAgICAgXCJ0eXBlXCI6IFwic3RyaW5nXCJcbiAgICAgICAgfSxcbiAgICAgICAgXCJ0aXRsZVwiOiB7XG4gICAgICAgICAgXCJ0eXBlXCI6IFwic3RyaW5nXCJcbiAgICAgICAgfSxcbiAgICAgICAgXCJkZXNjcmlwdGlvblwiOiB7XG4gICAgICAgICAgXCJ0eXBlXCI6IFwic3RyaW5nXCJcbiAgICAgICAgfSxcbiAgICAgICAgXCJkZWZhdWx0XCI6IHRydWUsXG4gICAgICAgIFwicmVhZE9ubHlcIjoge1xuICAgICAgICAgIFwidHlwZVwiOiBcImJvb2xlYW5cIixcbiAgICAgICAgICBcImRlZmF1bHRcIjogZmFsc2VcbiAgICAgICAgfSxcbiAgICAgICAgXCJleGFtcGxlc1wiOiB7XG4gICAgICAgICAgXCJ0eXBlXCI6IFwiYXJyYXlcIixcbiAgICAgICAgICBcIml0ZW1zXCI6IHRydWVcbiAgICAgICAgfSxcbiAgICAgICAgXCJtdWx0aXBsZU9mXCI6IHtcbiAgICAgICAgICBcInR5cGVcIjogXCJudW1iZXJcIixcbiAgICAgICAgICBcImV4Y2x1c2l2ZU1pbmltdW1cIjogMFxuICAgICAgICB9LFxuICAgICAgICBcIm1heGltdW1cIjoge1xuICAgICAgICAgIFwidHlwZVwiOiBcIm51bWJlclwiXG4gICAgICAgIH0sXG4gICAgICAgIFwiZXhjbHVzaXZlTWF4aW11bVwiOiB7XG4gICAgICAgICAgXCJ0eXBlXCI6IFwibnVtYmVyXCJcbiAgICAgICAgfSxcbiAgICAgICAgXCJtaW5pbXVtXCI6IHtcbiAgICAgICAgICBcInR5cGVcIjogXCJudW1iZXJcIlxuICAgICAgICB9LFxuICAgICAgICBcImV4Y2x1c2l2ZU1pbmltdW1cIjoge1xuICAgICAgICAgIFwidHlwZVwiOiBcIm51bWJlclwiXG4gICAgICAgIH0sXG4gICAgICAgIFwibWF4TGVuZ3RoXCI6IHsgXCIkcmVmXCI6IFwiIy9kZWZpbml0aW9ucy9ub25OZWdhdGl2ZUludGVnZXJcIiB9LFxuICAgICAgICBcIm1pbkxlbmd0aFwiOiB7IFwiJHJlZlwiOiBcIiMvZGVmaW5pdGlvbnMvbm9uTmVnYXRpdmVJbnRlZ2VyRGVmYXVsdDBcIiB9LFxuICAgICAgICBcInBhdHRlcm5cIjoge1xuICAgICAgICAgIFwidHlwZVwiOiBcInN0cmluZ1wiLFxuICAgICAgICAgIFwiZm9ybWF0XCI6IFwicmVnZXhcIlxuICAgICAgICB9LFxuICAgICAgICBcImFkZGl0aW9uYWxJdGVtc1wiOiB7IFwiJHJlZlwiOiBcIiNcIiB9LFxuICAgICAgICBcIml0ZW1zXCI6IHtcbiAgICAgICAgICBcImFueU9mXCI6IFtcbiAgICAgICAgICAgIHsgXCIkcmVmXCI6IFwiI1wiIH0sXG4gICAgICAgICAgICB7IFwiJHJlZlwiOiBcIiMvZGVmaW5pdGlvbnMvc2NoZW1hQXJyYXlcIiB9XG4gICAgICAgICAgXSxcbiAgICAgICAgICBcImRlZmF1bHRcIjogdHJ1ZVxuICAgICAgICB9LFxuICAgICAgICBcIm1heEl0ZW1zXCI6IHsgXCIkcmVmXCI6IFwiIy9kZWZpbml0aW9ucy9ub25OZWdhdGl2ZUludGVnZXJcIiB9LFxuICAgICAgICBcIm1pbkl0ZW1zXCI6IHsgXCIkcmVmXCI6IFwiIy9kZWZpbml0aW9ucy9ub25OZWdhdGl2ZUludGVnZXJEZWZhdWx0MFwiIH0sXG4gICAgICAgIFwidW5pcXVlSXRlbXNcIjoge1xuICAgICAgICAgIFwidHlwZVwiOiBcImJvb2xlYW5cIixcbiAgICAgICAgICBcImRlZmF1bHRcIjogZmFsc2VcbiAgICAgICAgfSxcbiAgICAgICAgXCJjb250YWluc1wiOiB7IFwiJHJlZlwiOiBcIiNcIiB9LFxuICAgICAgICBcIm1heFByb3BlcnRpZXNcIjogeyBcIiRyZWZcIjogXCIjL2RlZmluaXRpb25zL25vbk5lZ2F0aXZlSW50ZWdlclwiIH0sXG4gICAgICAgIFwibWluUHJvcGVydGllc1wiOiB7IFwiJHJlZlwiOiBcIiMvZGVmaW5pdGlvbnMvbm9uTmVnYXRpdmVJbnRlZ2VyRGVmYXVsdDBcIiB9LFxuICAgICAgICBcInJlcXVpcmVkXCI6IHsgXCIkcmVmXCI6IFwiIy9kZWZpbml0aW9ucy9zdHJpbmdBcnJheVwiIH0sXG4gICAgICAgIFwiYWRkaXRpb25hbFByb3BlcnRpZXNcIjogeyBcIiRyZWZcIjogXCIjXCIgfSxcbiAgICAgICAgXCJkZWZpbml0aW9uc1wiOiB7XG4gICAgICAgICAgXCJ0eXBlXCI6IFwib2JqZWN0XCIsXG4gICAgICAgICAgXCJhZGRpdGlvbmFsUHJvcGVydGllc1wiOiB7IFwiJHJlZlwiOiBcIiNcIiB9LFxuICAgICAgICAgIFwiZGVmYXVsdFwiOiB7fVxuICAgICAgICB9LFxuICAgICAgICBcInByb3BlcnRpZXNcIjoge1xuICAgICAgICAgIFwidHlwZVwiOiBcIm9iamVjdFwiLFxuICAgICAgICAgIFwiYWRkaXRpb25hbFByb3BlcnRpZXNcIjogeyBcIiRyZWZcIjogXCIjXCIgfSxcbiAgICAgICAgICBcImRlZmF1bHRcIjoge31cbiAgICAgICAgfSxcbiAgICAgICAgXCJwYXR0ZXJuUHJvcGVydGllc1wiOiB7XG4gICAgICAgICAgXCJ0eXBlXCI6IFwib2JqZWN0XCIsXG4gICAgICAgICAgXCJhZGRpdGlvbmFsUHJvcGVydGllc1wiOiB7IFwiJHJlZlwiOiBcIiNcIiB9LFxuICAgICAgICAgIFwicHJvcGVydHlOYW1lc1wiOiB7IFwiZm9ybWF0XCI6IFwicmVnZXhcIiB9LFxuICAgICAgICAgIFwiZGVmYXVsdFwiOiB7fVxuICAgICAgICB9LFxuICAgICAgICBcImRlcGVuZGVuY2llc1wiOiB7XG4gICAgICAgICAgXCJ0eXBlXCI6IFwib2JqZWN0XCIsXG4gICAgICAgICAgXCJhZGRpdGlvbmFsUHJvcGVydGllc1wiOiB7XG4gICAgICAgICAgICBcImFueU9mXCI6IFtcbiAgICAgICAgICAgICAgeyBcIiRyZWZcIjogXCIjXCIgfSxcbiAgICAgICAgICAgICAgeyBcIiRyZWZcIjogXCIjL2RlZmluaXRpb25zL3N0cmluZ0FycmF5XCIgfVxuICAgICAgICAgICAgXVxuICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgXCJwcm9wZXJ0eU5hbWVzXCI6IHsgXCIkcmVmXCI6IFwiI1wiIH0sXG4gICAgICAgIFwiY29uc3RcIjogdHJ1ZSxcbiAgICAgICAgXCJlbnVtXCI6IHtcbiAgICAgICAgICBcInR5cGVcIjogXCJhcnJheVwiLFxuICAgICAgICAgIFwiaXRlbXNcIjogdHJ1ZSxcbiAgICAgICAgICBcIm1pbkl0ZW1zXCI6IDEsXG4gICAgICAgICAgXCJ1bmlxdWVJdGVtc1wiOiB0cnVlXG4gICAgICAgIH0sXG4gICAgICAgIFwidHlwZVwiOiB7XG4gICAgICAgICAgXCJhbnlPZlwiOiBbXG4gICAgICAgICAgICB7IFwiJHJlZlwiOiBcIiMvZGVmaW5pdGlvbnMvc2ltcGxlVHlwZXNcIiB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICBcInR5cGVcIjogXCJhcnJheVwiLFxuICAgICAgICAgICAgICBcIml0ZW1zXCI6IHsgXCIkcmVmXCI6IFwiIy9kZWZpbml0aW9ucy9zaW1wbGVUeXBlc1wiIH0sXG4gICAgICAgICAgICAgIFwibWluSXRlbXNcIjogMSxcbiAgICAgICAgICAgICAgXCJ1bmlxdWVJdGVtc1wiOiB0cnVlXG4gICAgICAgICAgICB9XG4gICAgICAgICAgXVxuICAgICAgICB9LFxuICAgICAgICBcImZvcm1hdFwiOiB7IFwidHlwZVwiOiBcInN0cmluZ1wiIH0sXG4gICAgICAgIFwiY29udGVudE1lZGlhVHlwZVwiOiB7IFwidHlwZVwiOiBcInN0cmluZ1wiIH0sXG4gICAgICAgIFwiY29udGVudEVuY29kaW5nXCI6IHsgXCJ0eXBlXCI6IFwic3RyaW5nXCIgfSxcbiAgICAgICAgXCJpZlwiOiB7IFwiJHJlZlwiOiBcIiNcIiB9LFxuICAgICAgICBcInRoZW5cIjogeyBcIiRyZWZcIjogXCIjXCIgfSxcbiAgICAgICAgXCJlbHNlXCI6IHsgXCIkcmVmXCI6IFwiI1wiIH0sXG4gICAgICAgIFwiYWxsT2ZcIjogeyBcIiRyZWZcIjogXCIjL2RlZmluaXRpb25zL3NjaGVtYUFycmF5XCIgfSxcbiAgICAgICAgXCJhbnlPZlwiOiB7IFwiJHJlZlwiOiBcIiMvZGVmaW5pdGlvbnMvc2NoZW1hQXJyYXlcIiB9LFxuICAgICAgICBcIm9uZU9mXCI6IHsgXCIkcmVmXCI6IFwiIy9kZWZpbml0aW9ucy9zY2hlbWFBcnJheVwiIH0sXG4gICAgICAgIFwibm90XCI6IHsgXCIkcmVmXCI6IFwiI1wiIH1cbiAgICAgIH0sXG4gICAgICBcImRlZmF1bHRcIjogdHJ1ZVxuICAgIH1cbiAgfVxufTtcbnZhciBkZXNjcmlwdGlvbnMgPSB7XG4gIGlkOiB0KFwiQSB1bmlxdWUgaWRlbnRpZmllciBmb3IgdGhlIHNjaGVtYS5cIiksXG4gICRzY2hlbWE6IHQoXCJUaGUgc2NoZW1hIHRvIHZlcmlmeSB0aGlzIGRvY3VtZW50IGFnYWluc3QuXCIpLFxuICB0aXRsZTogdChcIkEgZGVzY3JpcHRpdmUgdGl0bGUgb2YgdGhlIGVsZW1lbnQuXCIpLFxuICBkZXNjcmlwdGlvbjogdChcIkEgbG9uZyBkZXNjcmlwdGlvbiBvZiB0aGUgZWxlbWVudC4gVXNlZCBpbiBob3ZlciBtZW51cyBhbmQgc3VnZ2VzdGlvbnMuXCIpLFxuICBkZWZhdWx0OiB0KFwiQSBkZWZhdWx0IHZhbHVlLiBVc2VkIGJ5IHN1Z2dlc3Rpb25zLlwiKSxcbiAgbXVsdGlwbGVPZjogdChcIkEgbnVtYmVyIHRoYXQgc2hvdWxkIGNsZWFubHkgZGl2aWRlIHRoZSBjdXJyZW50IHZhbHVlIChpLmUuIGhhdmUgbm8gcmVtYWluZGVyKS5cIiksXG4gIG1heGltdW06IHQoXCJUaGUgbWF4aW11bSBudW1lcmljYWwgdmFsdWUsIGluY2x1c2l2ZSBieSBkZWZhdWx0LlwiKSxcbiAgZXhjbHVzaXZlTWF4aW11bTogdChcIk1ha2VzIHRoZSBtYXhpbXVtIHByb3BlcnR5IGV4Y2x1c2l2ZS5cIiksXG4gIG1pbmltdW06IHQoXCJUaGUgbWluaW11bSBudW1lcmljYWwgdmFsdWUsIGluY2x1c2l2ZSBieSBkZWZhdWx0LlwiKSxcbiAgZXhjbHVzaXZlTWluaW11bTogdChcIk1ha2VzIHRoZSBtaW5pbXVtIHByb3BlcnR5IGV4Y2x1c2l2ZS5cIiksXG4gIG1heExlbmd0aDogdChcIlRoZSBtYXhpbXVtIGxlbmd0aCBvZiBhIHN0cmluZy5cIiksXG4gIG1pbkxlbmd0aDogdChcIlRoZSBtaW5pbXVtIGxlbmd0aCBvZiBhIHN0cmluZy5cIiksXG4gIHBhdHRlcm46IHQoXCJBIHJlZ3VsYXIgZXhwcmVzc2lvbiB0byBtYXRjaCB0aGUgc3RyaW5nIGFnYWluc3QuIEl0IGlzIG5vdCBpbXBsaWNpdGx5IGFuY2hvcmVkLlwiKSxcbiAgYWRkaXRpb25hbEl0ZW1zOiB0KFwiRm9yIGFycmF5cywgb25seSB3aGVuIGl0ZW1zIGlzIHNldCBhcyBhbiBhcnJheS4gSWYgaXQgaXMgYSBzY2hlbWEsIHRoZW4gdGhpcyBzY2hlbWEgdmFsaWRhdGVzIGl0ZW1zIGFmdGVyIHRoZSBvbmVzIHNwZWNpZmllZCBieSB0aGUgaXRlbXMgYXJyYXkuIElmIGl0IGlzIGZhbHNlLCB0aGVuIGFkZGl0aW9uYWwgaXRlbXMgd2lsbCBjYXVzZSB2YWxpZGF0aW9uIHRvIGZhaWwuXCIpLFxuICBpdGVtczogdChcIkZvciBhcnJheXMuIENhbiBlaXRoZXIgYmUgYSBzY2hlbWEgdG8gdmFsaWRhdGUgZXZlcnkgZWxlbWVudCBhZ2FpbnN0IG9yIGFuIGFycmF5IG9mIHNjaGVtYXMgdG8gdmFsaWRhdGUgZWFjaCBpdGVtIGFnYWluc3QgaW4gb3JkZXIgKHRoZSBmaXJzdCBzY2hlbWEgd2lsbCB2YWxpZGF0ZSB0aGUgZmlyc3QgZWxlbWVudCwgdGhlIHNlY29uZCBzY2hlbWEgd2lsbCB2YWxpZGF0ZSB0aGUgc2Vjb25kIGVsZW1lbnQsIGFuZCBzbyBvbi5cIiksXG4gIG1heEl0ZW1zOiB0KFwiVGhlIG1heGltdW0gbnVtYmVyIG9mIGl0ZW1zIHRoYXQgY2FuIGJlIGluc2lkZSBhbiBhcnJheS4gSW5jbHVzaXZlLlwiKSxcbiAgbWluSXRlbXM6IHQoXCJUaGUgbWluaW11bSBudW1iZXIgb2YgaXRlbXMgdGhhdCBjYW4gYmUgaW5zaWRlIGFuIGFycmF5LiBJbmNsdXNpdmUuXCIpLFxuICB1bmlxdWVJdGVtczogdChcIklmIGFsbCBvZiB0aGUgaXRlbXMgaW4gdGhlIGFycmF5IG11c3QgYmUgdW5pcXVlLiBEZWZhdWx0cyB0byBmYWxzZS5cIiksXG4gIG1heFByb3BlcnRpZXM6IHQoXCJUaGUgbWF4aW11bSBudW1iZXIgb2YgcHJvcGVydGllcyBhbiBvYmplY3QgY2FuIGhhdmUuIEluY2x1c2l2ZS5cIiksXG4gIG1pblByb3BlcnRpZXM6IHQoXCJUaGUgbWluaW11bSBudW1iZXIgb2YgcHJvcGVydGllcyBhbiBvYmplY3QgY2FuIGhhdmUuIEluY2x1c2l2ZS5cIiksXG4gIHJlcXVpcmVkOiB0KFwiQW4gYXJyYXkgb2Ygc3RyaW5ncyB0aGF0IGxpc3RzIHRoZSBuYW1lcyBvZiBhbGwgcHJvcGVydGllcyByZXF1aXJlZCBvbiB0aGlzIG9iamVjdC5cIiksXG4gIGFkZGl0aW9uYWxQcm9wZXJ0aWVzOiB0KFwiRWl0aGVyIGEgc2NoZW1hIG9yIGEgYm9vbGVhbi4gSWYgYSBzY2hlbWEsIHRoZW4gdXNlZCB0byB2YWxpZGF0ZSBhbGwgcHJvcGVydGllcyBub3QgbWF0Y2hlZCBieSAncHJvcGVydGllcycgb3IgJ3BhdHRlcm5Qcm9wZXJ0aWVzJy4gSWYgZmFsc2UsIHRoZW4gYW55IHByb3BlcnRpZXMgbm90IG1hdGNoZWQgYnkgZWl0aGVyIHdpbGwgY2F1c2UgdGhpcyBzY2hlbWEgdG8gZmFpbC5cIiksXG4gIGRlZmluaXRpb25zOiB0KFwiTm90IHVzZWQgZm9yIHZhbGlkYXRpb24uIFBsYWNlIHN1YnNjaGVtYXMgaGVyZSB0aGF0IHlvdSB3aXNoIHRvIHJlZmVyZW5jZSBpbmxpbmUgd2l0aCAkcmVmLlwiKSxcbiAgcHJvcGVydGllczogdChcIkEgbWFwIG9mIHByb3BlcnR5IG5hbWVzIHRvIHNjaGVtYXMgZm9yIGVhY2ggcHJvcGVydHkuXCIpLFxuICBwYXR0ZXJuUHJvcGVydGllczogdChcIkEgbWFwIG9mIHJlZ3VsYXIgZXhwcmVzc2lvbnMgb24gcHJvcGVydHkgbmFtZXMgdG8gc2NoZW1hcyBmb3IgbWF0Y2hpbmcgcHJvcGVydGllcy5cIiksXG4gIGRlcGVuZGVuY2llczogdChcIkEgbWFwIG9mIHByb3BlcnR5IG5hbWVzIHRvIGVpdGhlciBhbiBhcnJheSBvZiBwcm9wZXJ0eSBuYW1lcyBvciBhIHNjaGVtYS4gQW4gYXJyYXkgb2YgcHJvcGVydHkgbmFtZXMgbWVhbnMgdGhlIHByb3BlcnR5IG5hbWVkIGluIHRoZSBrZXkgZGVwZW5kcyBvbiB0aGUgcHJvcGVydGllcyBpbiB0aGUgYXJyYXkgYmVpbmcgcHJlc2VudCBpbiB0aGUgb2JqZWN0IGluIG9yZGVyIHRvIGJlIHZhbGlkLiBJZiB0aGUgdmFsdWUgaXMgYSBzY2hlbWEsIHRoZW4gdGhlIHNjaGVtYSBpcyBvbmx5IGFwcGxpZWQgdG8gdGhlIG9iamVjdCBpZiB0aGUgcHJvcGVydHkgaW4gdGhlIGtleSBleGlzdHMgb24gdGhlIG9iamVjdC5cIiksXG4gIGVudW06IHQoXCJUaGUgc2V0IG9mIGxpdGVyYWwgdmFsdWVzIHRoYXQgYXJlIHZhbGlkLlwiKSxcbiAgdHlwZTogdChcIkVpdGhlciBhIHN0cmluZyBvZiBvbmUgb2YgdGhlIGJhc2ljIHNjaGVtYSB0eXBlcyAobnVtYmVyLCBpbnRlZ2VyLCBudWxsLCBhcnJheSwgb2JqZWN0LCBib29sZWFuLCBzdHJpbmcpIG9yIGFuIGFycmF5IG9mIHN0cmluZ3Mgc3BlY2lmeWluZyBhIHN1YnNldCBvZiB0aG9zZSB0eXBlcy5cIiksXG4gIGZvcm1hdDogdChcIkRlc2NyaWJlcyB0aGUgZm9ybWF0IGV4cGVjdGVkIGZvciB0aGUgdmFsdWUuXCIpLFxuICBhbGxPZjogdChcIkFuIGFycmF5IG9mIHNjaGVtYXMsIGFsbCBvZiB3aGljaCBtdXN0IG1hdGNoLlwiKSxcbiAgYW55T2Y6IHQoXCJBbiBhcnJheSBvZiBzY2hlbWFzLCB3aGVyZSBhdCBsZWFzdCBvbmUgbXVzdCBtYXRjaC5cIiksXG4gIG9uZU9mOiB0KFwiQW4gYXJyYXkgb2Ygc2NoZW1hcywgZXhhY3RseSBvbmUgb2Ygd2hpY2ggbXVzdCBtYXRjaC5cIiksXG4gIG5vdDogdChcIkEgc2NoZW1hIHdoaWNoIG11c3Qgbm90IG1hdGNoLlwiKSxcbiAgJGlkOiB0KFwiQSB1bmlxdWUgaWRlbnRpZmllciBmb3IgdGhlIHNjaGVtYS5cIiksXG4gICRyZWY6IHQoXCJSZWZlcmVuY2UgYSBkZWZpbml0aW9uIGhvc3RlZCBvbiBhbnkgbG9jYXRpb24uXCIpLFxuICAkY29tbWVudDogdChcIkNvbW1lbnRzIGZyb20gc2NoZW1hIGF1dGhvcnMgdG8gcmVhZGVycyBvciBtYWludGFpbmVycyBvZiB0aGUgc2NoZW1hLlwiKSxcbiAgcmVhZE9ubHk6IHQoXCJJbmRpY2F0ZXMgdGhhdCB0aGUgdmFsdWUgb2YgdGhlIGluc3RhbmNlIGlzIG1hbmFnZWQgZXhjbHVzaXZlbHkgYnkgdGhlIG93bmluZyBhdXRob3JpdHkuXCIpLFxuICBleGFtcGxlczogdChcIlNhbXBsZSBKU09OIHZhbHVlcyBhc3NvY2lhdGVkIHdpdGggYSBwYXJ0aWN1bGFyIHNjaGVtYSwgZm9yIHRoZSBwdXJwb3NlIG9mIGlsbHVzdHJhdGluZyB1c2FnZS5cIiksXG4gIGNvbnRhaW5zOiB0KCdBbiBhcnJheSBpbnN0YW5jZSBpcyB2YWxpZCBhZ2FpbnN0IFwiY29udGFpbnNcIiBpZiBhdCBsZWFzdCBvbmUgb2YgaXRzIGVsZW1lbnRzIGlzIHZhbGlkIGFnYWluc3QgdGhlIGdpdmVuIHNjaGVtYS4nKSxcbiAgcHJvcGVydHlOYW1lczogdChcIklmIHRoZSBpbnN0YW5jZSBpcyBhbiBvYmplY3QsIHRoaXMga2V5d29yZCB2YWxpZGF0ZXMgaWYgZXZlcnkgcHJvcGVydHkgbmFtZSBpbiB0aGUgaW5zdGFuY2UgdmFsaWRhdGVzIGFnYWluc3QgdGhlIHByb3ZpZGVkIHNjaGVtYS5cIiksXG4gIGNvbnN0OiB0KFwiQW4gaW5zdGFuY2UgdmFsaWRhdGVzIHN1Y2Nlc3NmdWxseSBhZ2FpbnN0IHRoaXMga2V5d29yZCBpZiBpdHMgdmFsdWUgaXMgZXF1YWwgdG8gdGhlIHZhbHVlIG9mIHRoZSBrZXl3b3JkLlwiKSxcbiAgY29udGVudE1lZGlhVHlwZTogdChcIkRlc2NyaWJlcyB0aGUgbWVkaWEgdHlwZSBvZiBhIHN0cmluZyBwcm9wZXJ0eS5cIiksXG4gIGNvbnRlbnRFbmNvZGluZzogdChcIkRlc2NyaWJlcyB0aGUgY29udGVudCBlbmNvZGluZyBvZiBhIHN0cmluZyBwcm9wZXJ0eS5cIiksXG4gIGlmOiB0KCdUaGUgdmFsaWRhdGlvbiBvdXRjb21lIG9mIHRoZSBcImlmXCIgc3Vic2NoZW1hIGNvbnRyb2xzIHdoaWNoIG9mIHRoZSBcInRoZW5cIiBvciBcImVsc2VcIiBrZXl3b3JkcyBhcmUgZXZhbHVhdGVkLicpLFxuICB0aGVuOiB0KCdUaGUgXCJpZlwiIHN1YnNjaGVtYSBpcyB1c2VkIGZvciB2YWxpZGF0aW9uIHdoZW4gdGhlIFwiaWZcIiBzdWJzY2hlbWEgc3VjY2VlZHMuJyksXG4gIGVsc2U6IHQoJ1RoZSBcImVsc2VcIiBzdWJzY2hlbWEgaXMgdXNlZCBmb3IgdmFsaWRhdGlvbiB3aGVuIHRoZSBcImlmXCIgc3Vic2NoZW1hIGZhaWxzLicpXG59O1xuZm9yIChjb25zdCBzY2hlbWFOYW1lIGluIHNjaGVtYUNvbnRyaWJ1dGlvbnMuc2NoZW1hcykge1xuICBjb25zdCBzY2hlbWEgPSBzY2hlbWFDb250cmlidXRpb25zLnNjaGVtYXNbc2NoZW1hTmFtZV07XG4gIGZvciAoY29uc3QgcHJvcGVydHkgaW4gc2NoZW1hLnByb3BlcnRpZXMpIHtcbiAgICBsZXQgcHJvcGVydHlPYmplY3QgPSBzY2hlbWEucHJvcGVydGllc1twcm9wZXJ0eV07XG4gICAgaWYgKHR5cGVvZiBwcm9wZXJ0eU9iamVjdCA9PT0gXCJib29sZWFuXCIpIHtcbiAgICAgIHByb3BlcnR5T2JqZWN0ID0gc2NoZW1hLnByb3BlcnRpZXNbcHJvcGVydHldID0ge307XG4gICAgfVxuICAgIGNvbnN0IGRlc2NyaXB0aW9uID0gZGVzY3JpcHRpb25zW3Byb3BlcnR5XTtcbiAgICBpZiAoZGVzY3JpcHRpb24pIHtcbiAgICAgIHByb3BlcnR5T2JqZWN0W1wiZGVzY3JpcHRpb25cIl0gPSBkZXNjcmlwdGlvbjtcbiAgICB9XG4gIH1cbn1cblxuLy8gbm9kZV9tb2R1bGVzL3ZzY29kZS11cmkvbGliL2VzbS9pbmRleC5tanNcbnZhciBMSUI7XG4oKCkgPT4ge1xuICBcInVzZSBzdHJpY3RcIjtcbiAgdmFyIHQyID0geyA0NzA6ICh0MykgPT4ge1xuICAgIGZ1bmN0aW9uIGUyKHQ0KSB7XG4gICAgICBpZiAoXCJzdHJpbmdcIiAhPSB0eXBlb2YgdDQpXG4gICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoXCJQYXRoIG11c3QgYmUgYSBzdHJpbmcuIFJlY2VpdmVkIFwiICsgSlNPTi5zdHJpbmdpZnkodDQpKTtcbiAgICB9XG4gICAgZnVuY3Rpb24gcjIodDQsIGUzKSB7XG4gICAgICBmb3IgKHZhciByMywgbjMgPSBcIlwiLCBpID0gMCwgbyA9IC0xLCBzID0gMCwgaCA9IDA7IGggPD0gdDQubGVuZ3RoOyArK2gpIHtcbiAgICAgICAgaWYgKGggPCB0NC5sZW5ndGgpXG4gICAgICAgICAgcjMgPSB0NC5jaGFyQ29kZUF0KGgpO1xuICAgICAgICBlbHNlIHtcbiAgICAgICAgICBpZiAoNDcgPT09IHIzKVxuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgcjMgPSA0NztcbiAgICAgICAgfVxuICAgICAgICBpZiAoNDcgPT09IHIzKSB7XG4gICAgICAgICAgaWYgKG8gPT09IGggLSAxIHx8IDEgPT09IHMpXG4gICAgICAgICAgICA7XG4gICAgICAgICAgZWxzZSBpZiAobyAhPT0gaCAtIDEgJiYgMiA9PT0gcykge1xuICAgICAgICAgICAgaWYgKG4zLmxlbmd0aCA8IDIgfHwgMiAhPT0gaSB8fCA0NiAhPT0gbjMuY2hhckNvZGVBdChuMy5sZW5ndGggLSAxKSB8fCA0NiAhPT0gbjMuY2hhckNvZGVBdChuMy5sZW5ndGggLSAyKSkge1xuICAgICAgICAgICAgICBpZiAobjMubGVuZ3RoID4gMikge1xuICAgICAgICAgICAgICAgIHZhciBhMiA9IG4zLmxhc3RJbmRleE9mKFwiL1wiKTtcbiAgICAgICAgICAgICAgICBpZiAoYTIgIT09IG4zLmxlbmd0aCAtIDEpIHtcbiAgICAgICAgICAgICAgICAgIC0xID09PSBhMiA/IChuMyA9IFwiXCIsIGkgPSAwKSA6IGkgPSAobjMgPSBuMy5zbGljZSgwLCBhMikpLmxlbmd0aCAtIDEgLSBuMy5sYXN0SW5kZXhPZihcIi9cIiksIG8gPSBoLCBzID0gMDtcbiAgICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgfSBlbHNlIGlmICgyID09PSBuMy5sZW5ndGggfHwgMSA9PT0gbjMubGVuZ3RoKSB7XG4gICAgICAgICAgICAgICAgbjMgPSBcIlwiLCBpID0gMCwgbyA9IGgsIHMgPSAwO1xuICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlMyAmJiAobjMubGVuZ3RoID4gMCA/IG4zICs9IFwiLy4uXCIgOiBuMyA9IFwiLi5cIiwgaSA9IDIpO1xuICAgICAgICAgIH0gZWxzZVxuICAgICAgICAgICAgbjMubGVuZ3RoID4gMCA/IG4zICs9IFwiL1wiICsgdDQuc2xpY2UobyArIDEsIGgpIDogbjMgPSB0NC5zbGljZShvICsgMSwgaCksIGkgPSBoIC0gbyAtIDE7XG4gICAgICAgICAgbyA9IGgsIHMgPSAwO1xuICAgICAgICB9IGVsc2VcbiAgICAgICAgICA0NiA9PT0gcjMgJiYgLTEgIT09IHMgPyArK3MgOiBzID0gLTE7XG4gICAgICB9XG4gICAgICByZXR1cm4gbjM7XG4gICAgfVxuICAgIHZhciBuMiA9IHsgcmVzb2x2ZTogZnVuY3Rpb24oKSB7XG4gICAgICBmb3IgKHZhciB0NCwgbjMgPSBcIlwiLCBpID0gZmFsc2UsIG8gPSBhcmd1bWVudHMubGVuZ3RoIC0gMTsgbyA+PSAtMSAmJiAhaTsgby0tKSB7XG4gICAgICAgIHZhciBzO1xuICAgICAgICBvID49IDAgPyBzID0gYXJndW1lbnRzW29dIDogKHZvaWQgMCA9PT0gdDQgJiYgKHQ0ID0gcHJvY2Vzcy5jd2QoKSksIHMgPSB0NCksIGUyKHMpLCAwICE9PSBzLmxlbmd0aCAmJiAobjMgPSBzICsgXCIvXCIgKyBuMywgaSA9IDQ3ID09PSBzLmNoYXJDb2RlQXQoMCkpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIG4zID0gcjIobjMsICFpKSwgaSA/IG4zLmxlbmd0aCA+IDAgPyBcIi9cIiArIG4zIDogXCIvXCIgOiBuMy5sZW5ndGggPiAwID8gbjMgOiBcIi5cIjtcbiAgICB9LCBub3JtYWxpemU6IGZ1bmN0aW9uKHQ0KSB7XG4gICAgICBpZiAoZTIodDQpLCAwID09PSB0NC5sZW5ndGgpXG4gICAgICAgIHJldHVybiBcIi5cIjtcbiAgICAgIHZhciBuMyA9IDQ3ID09PSB0NC5jaGFyQ29kZUF0KDApLCBpID0gNDcgPT09IHQ0LmNoYXJDb2RlQXQodDQubGVuZ3RoIC0gMSk7XG4gICAgICByZXR1cm4gMCAhPT0gKHQ0ID0gcjIodDQsICFuMykpLmxlbmd0aCB8fCBuMyB8fCAodDQgPSBcIi5cIiksIHQ0Lmxlbmd0aCA+IDAgJiYgaSAmJiAodDQgKz0gXCIvXCIpLCBuMyA/IFwiL1wiICsgdDQgOiB0NDtcbiAgICB9LCBpc0Fic29sdXRlOiBmdW5jdGlvbih0NCkge1xuICAgICAgcmV0dXJuIGUyKHQ0KSwgdDQubGVuZ3RoID4gMCAmJiA0NyA9PT0gdDQuY2hhckNvZGVBdCgwKTtcbiAgICB9LCBqb2luOiBmdW5jdGlvbigpIHtcbiAgICAgIGlmICgwID09PSBhcmd1bWVudHMubGVuZ3RoKVxuICAgICAgICByZXR1cm4gXCIuXCI7XG4gICAgICBmb3IgKHZhciB0NCwgcjMgPSAwOyByMyA8IGFyZ3VtZW50cy5sZW5ndGg7ICsrcjMpIHtcbiAgICAgICAgdmFyIGkgPSBhcmd1bWVudHNbcjNdO1xuICAgICAgICBlMihpKSwgaS5sZW5ndGggPiAwICYmICh2b2lkIDAgPT09IHQ0ID8gdDQgPSBpIDogdDQgKz0gXCIvXCIgKyBpKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiB2b2lkIDAgPT09IHQ0ID8gXCIuXCIgOiBuMi5ub3JtYWxpemUodDQpO1xuICAgIH0sIHJlbGF0aXZlOiBmdW5jdGlvbih0NCwgcjMpIHtcbiAgICAgIGlmIChlMih0NCksIGUyKHIzKSwgdDQgPT09IHIzKVxuICAgICAgICByZXR1cm4gXCJcIjtcbiAgICAgIGlmICgodDQgPSBuMi5yZXNvbHZlKHQ0KSkgPT09IChyMyA9IG4yLnJlc29sdmUocjMpKSlcbiAgICAgICAgcmV0dXJuIFwiXCI7XG4gICAgICBmb3IgKHZhciBpID0gMTsgaSA8IHQ0Lmxlbmd0aCAmJiA0NyA9PT0gdDQuY2hhckNvZGVBdChpKTsgKytpKVxuICAgICAgICA7XG4gICAgICBmb3IgKHZhciBvID0gdDQubGVuZ3RoLCBzID0gbyAtIGksIGggPSAxOyBoIDwgcjMubGVuZ3RoICYmIDQ3ID09PSByMy5jaGFyQ29kZUF0KGgpOyArK2gpXG4gICAgICAgIDtcbiAgICAgIGZvciAodmFyIGEyID0gcjMubGVuZ3RoIC0gaCwgYyA9IHMgPCBhMiA/IHMgOiBhMiwgZjIgPSAtMSwgdSA9IDA7IHUgPD0gYzsgKyt1KSB7XG4gICAgICAgIGlmICh1ID09PSBjKSB7XG4gICAgICAgICAgaWYgKGEyID4gYykge1xuICAgICAgICAgICAgaWYgKDQ3ID09PSByMy5jaGFyQ29kZUF0KGggKyB1KSlcbiAgICAgICAgICAgICAgcmV0dXJuIHIzLnNsaWNlKGggKyB1ICsgMSk7XG4gICAgICAgICAgICBpZiAoMCA9PT0gdSlcbiAgICAgICAgICAgICAgcmV0dXJuIHIzLnNsaWNlKGggKyB1KTtcbiAgICAgICAgICB9IGVsc2VcbiAgICAgICAgICAgIHMgPiBjICYmICg0NyA9PT0gdDQuY2hhckNvZGVBdChpICsgdSkgPyBmMiA9IHUgOiAwID09PSB1ICYmIChmMiA9IDApKTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgICB2YXIgbCA9IHQ0LmNoYXJDb2RlQXQoaSArIHUpO1xuICAgICAgICBpZiAobCAhPT0gcjMuY2hhckNvZGVBdChoICsgdSkpXG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIDQ3ID09PSBsICYmIChmMiA9IHUpO1xuICAgICAgfVxuICAgICAgdmFyIGcgPSBcIlwiO1xuICAgICAgZm9yICh1ID0gaSArIGYyICsgMTsgdSA8PSBvOyArK3UpXG4gICAgICAgIHUgIT09IG8gJiYgNDcgIT09IHQ0LmNoYXJDb2RlQXQodSkgfHwgKDAgPT09IGcubGVuZ3RoID8gZyArPSBcIi4uXCIgOiBnICs9IFwiLy4uXCIpO1xuICAgICAgcmV0dXJuIGcubGVuZ3RoID4gMCA/IGcgKyByMy5zbGljZShoICsgZjIpIDogKGggKz0gZjIsIDQ3ID09PSByMy5jaGFyQ29kZUF0KGgpICYmICsraCwgcjMuc2xpY2UoaCkpO1xuICAgIH0sIF9tYWtlTG9uZzogZnVuY3Rpb24odDQpIHtcbiAgICAgIHJldHVybiB0NDtcbiAgICB9LCBkaXJuYW1lOiBmdW5jdGlvbih0NCkge1xuICAgICAgaWYgKGUyKHQ0KSwgMCA9PT0gdDQubGVuZ3RoKVxuICAgICAgICByZXR1cm4gXCIuXCI7XG4gICAgICBmb3IgKHZhciByMyA9IHQ0LmNoYXJDb2RlQXQoMCksIG4zID0gNDcgPT09IHIzLCBpID0gLTEsIG8gPSB0cnVlLCBzID0gdDQubGVuZ3RoIC0gMTsgcyA+PSAxOyAtLXMpXG4gICAgICAgIGlmICg0NyA9PT0gKHIzID0gdDQuY2hhckNvZGVBdChzKSkpIHtcbiAgICAgICAgICBpZiAoIW8pIHtcbiAgICAgICAgICAgIGkgPSBzO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2VcbiAgICAgICAgICBvID0gZmFsc2U7XG4gICAgICByZXR1cm4gLTEgPT09IGkgPyBuMyA/IFwiL1wiIDogXCIuXCIgOiBuMyAmJiAxID09PSBpID8gXCIvL1wiIDogdDQuc2xpY2UoMCwgaSk7XG4gICAgfSwgYmFzZW5hbWU6IGZ1bmN0aW9uKHQ0LCByMykge1xuICAgICAgaWYgKHZvaWQgMCAhPT0gcjMgJiYgXCJzdHJpbmdcIiAhPSB0eXBlb2YgcjMpXG4gICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ1wiZXh0XCIgYXJndW1lbnQgbXVzdCBiZSBhIHN0cmluZycpO1xuICAgICAgZTIodDQpO1xuICAgICAgdmFyIG4zLCBpID0gMCwgbyA9IC0xLCBzID0gdHJ1ZTtcbiAgICAgIGlmICh2b2lkIDAgIT09IHIzICYmIHIzLmxlbmd0aCA+IDAgJiYgcjMubGVuZ3RoIDw9IHQ0Lmxlbmd0aCkge1xuICAgICAgICBpZiAocjMubGVuZ3RoID09PSB0NC5sZW5ndGggJiYgcjMgPT09IHQ0KVxuICAgICAgICAgIHJldHVybiBcIlwiO1xuICAgICAgICB2YXIgaCA9IHIzLmxlbmd0aCAtIDEsIGEyID0gLTE7XG4gICAgICAgIGZvciAobjMgPSB0NC5sZW5ndGggLSAxOyBuMyA+PSAwOyAtLW4zKSB7XG4gICAgICAgICAgdmFyIGMgPSB0NC5jaGFyQ29kZUF0KG4zKTtcbiAgICAgICAgICBpZiAoNDcgPT09IGMpIHtcbiAgICAgICAgICAgIGlmICghcykge1xuICAgICAgICAgICAgICBpID0gbjMgKyAxO1xuICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9IGVsc2VcbiAgICAgICAgICAgIC0xID09PSBhMiAmJiAocyA9IGZhbHNlLCBhMiA9IG4zICsgMSksIGggPj0gMCAmJiAoYyA9PT0gcjMuY2hhckNvZGVBdChoKSA/IC0xID09IC0taCAmJiAobyA9IG4zKSA6IChoID0gLTEsIG8gPSBhMikpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBpID09PSBvID8gbyA9IGEyIDogLTEgPT09IG8gJiYgKG8gPSB0NC5sZW5ndGgpLCB0NC5zbGljZShpLCBvKTtcbiAgICAgIH1cbiAgICAgIGZvciAobjMgPSB0NC5sZW5ndGggLSAxOyBuMyA+PSAwOyAtLW4zKVxuICAgICAgICBpZiAoNDcgPT09IHQ0LmNoYXJDb2RlQXQobjMpKSB7XG4gICAgICAgICAgaWYgKCFzKSB7XG4gICAgICAgICAgICBpID0gbjMgKyAxO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2VcbiAgICAgICAgICAtMSA9PT0gbyAmJiAocyA9IGZhbHNlLCBvID0gbjMgKyAxKTtcbiAgICAgIHJldHVybiAtMSA9PT0gbyA/IFwiXCIgOiB0NC5zbGljZShpLCBvKTtcbiAgICB9LCBleHRuYW1lOiBmdW5jdGlvbih0NCkge1xuICAgICAgZTIodDQpO1xuICAgICAgZm9yICh2YXIgcjMgPSAtMSwgbjMgPSAwLCBpID0gLTEsIG8gPSB0cnVlLCBzID0gMCwgaCA9IHQ0Lmxlbmd0aCAtIDE7IGggPj0gMDsgLS1oKSB7XG4gICAgICAgIHZhciBhMiA9IHQ0LmNoYXJDb2RlQXQoaCk7XG4gICAgICAgIGlmICg0NyAhPT0gYTIpXG4gICAgICAgICAgLTEgPT09IGkgJiYgKG8gPSBmYWxzZSwgaSA9IGggKyAxKSwgNDYgPT09IGEyID8gLTEgPT09IHIzID8gcjMgPSBoIDogMSAhPT0gcyAmJiAocyA9IDEpIDogLTEgIT09IHIzICYmIChzID0gLTEpO1xuICAgICAgICBlbHNlIGlmICghbykge1xuICAgICAgICAgIG4zID0gaCArIDE7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiAtMSA9PT0gcjMgfHwgLTEgPT09IGkgfHwgMCA9PT0gcyB8fCAxID09PSBzICYmIHIzID09PSBpIC0gMSAmJiByMyA9PT0gbjMgKyAxID8gXCJcIiA6IHQ0LnNsaWNlKHIzLCBpKTtcbiAgICB9LCBmb3JtYXQ6IGZ1bmN0aW9uKHQ0KSB7XG4gICAgICBpZiAobnVsbCA9PT0gdDQgfHwgXCJvYmplY3RcIiAhPSB0eXBlb2YgdDQpXG4gICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ1RoZSBcInBhdGhPYmplY3RcIiBhcmd1bWVudCBtdXN0IGJlIG9mIHR5cGUgT2JqZWN0LiBSZWNlaXZlZCB0eXBlICcgKyB0eXBlb2YgdDQpO1xuICAgICAgcmV0dXJuIGZ1bmN0aW9uKHQ1LCBlMykge1xuICAgICAgICB2YXIgcjMgPSBlMy5kaXIgfHwgZTMucm9vdCwgbjMgPSBlMy5iYXNlIHx8IChlMy5uYW1lIHx8IFwiXCIpICsgKGUzLmV4dCB8fCBcIlwiKTtcbiAgICAgICAgcmV0dXJuIHIzID8gcjMgPT09IGUzLnJvb3QgPyByMyArIG4zIDogcjMgKyBcIi9cIiArIG4zIDogbjM7XG4gICAgICB9KDAsIHQ0KTtcbiAgICB9LCBwYXJzZTogZnVuY3Rpb24odDQpIHtcbiAgICAgIGUyKHQ0KTtcbiAgICAgIHZhciByMyA9IHsgcm9vdDogXCJcIiwgZGlyOiBcIlwiLCBiYXNlOiBcIlwiLCBleHQ6IFwiXCIsIG5hbWU6IFwiXCIgfTtcbiAgICAgIGlmICgwID09PSB0NC5sZW5ndGgpXG4gICAgICAgIHJldHVybiByMztcbiAgICAgIHZhciBuMywgaSA9IHQ0LmNoYXJDb2RlQXQoMCksIG8gPSA0NyA9PT0gaTtcbiAgICAgIG8gPyAocjMucm9vdCA9IFwiL1wiLCBuMyA9IDEpIDogbjMgPSAwO1xuICAgICAgZm9yICh2YXIgcyA9IC0xLCBoID0gMCwgYTIgPSAtMSwgYyA9IHRydWUsIGYyID0gdDQubGVuZ3RoIC0gMSwgdSA9IDA7IGYyID49IG4zOyAtLWYyKVxuICAgICAgICBpZiAoNDcgIT09IChpID0gdDQuY2hhckNvZGVBdChmMikpKVxuICAgICAgICAgIC0xID09PSBhMiAmJiAoYyA9IGZhbHNlLCBhMiA9IGYyICsgMSksIDQ2ID09PSBpID8gLTEgPT09IHMgPyBzID0gZjIgOiAxICE9PSB1ICYmICh1ID0gMSkgOiAtMSAhPT0gcyAmJiAodSA9IC0xKTtcbiAgICAgICAgZWxzZSBpZiAoIWMpIHtcbiAgICAgICAgICBoID0gZjIgKyAxO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICByZXR1cm4gLTEgPT09IHMgfHwgLTEgPT09IGEyIHx8IDAgPT09IHUgfHwgMSA9PT0gdSAmJiBzID09PSBhMiAtIDEgJiYgcyA9PT0gaCArIDEgPyAtMSAhPT0gYTIgJiYgKHIzLmJhc2UgPSByMy5uYW1lID0gMCA9PT0gaCAmJiBvID8gdDQuc2xpY2UoMSwgYTIpIDogdDQuc2xpY2UoaCwgYTIpKSA6ICgwID09PSBoICYmIG8gPyAocjMubmFtZSA9IHQ0LnNsaWNlKDEsIHMpLCByMy5iYXNlID0gdDQuc2xpY2UoMSwgYTIpKSA6IChyMy5uYW1lID0gdDQuc2xpY2UoaCwgcyksIHIzLmJhc2UgPSB0NC5zbGljZShoLCBhMikpLCByMy5leHQgPSB0NC5zbGljZShzLCBhMikpLCBoID4gMCA/IHIzLmRpciA9IHQ0LnNsaWNlKDAsIGggLSAxKSA6IG8gJiYgKHIzLmRpciA9IFwiL1wiKSwgcjM7XG4gICAgfSwgc2VwOiBcIi9cIiwgZGVsaW1pdGVyOiBcIjpcIiwgd2luMzI6IG51bGwsIHBvc2l4OiBudWxsIH07XG4gICAgbjIucG9zaXggPSBuMiwgdDMuZXhwb3J0cyA9IG4yO1xuICB9IH0sIGUgPSB7fTtcbiAgZnVuY3Rpb24gcihuMikge1xuICAgIHZhciBpID0gZVtuMl07XG4gICAgaWYgKHZvaWQgMCAhPT0gaSlcbiAgICAgIHJldHVybiBpLmV4cG9ydHM7XG4gICAgdmFyIG8gPSBlW24yXSA9IHsgZXhwb3J0czoge30gfTtcbiAgICByZXR1cm4gdDJbbjJdKG8sIG8uZXhwb3J0cywgciksIG8uZXhwb3J0cztcbiAgfVxuICByLmQgPSAodDMsIGUyKSA9PiB7XG4gICAgZm9yICh2YXIgbjIgaW4gZTIpXG4gICAgICByLm8oZTIsIG4yKSAmJiAhci5vKHQzLCBuMikgJiYgT2JqZWN0LmRlZmluZVByb3BlcnR5KHQzLCBuMiwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGUyW24yXSB9KTtcbiAgfSwgci5vID0gKHQzLCBlMikgPT4gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHQzLCBlMiksIHIuciA9ICh0MykgPT4ge1xuICAgIFwidW5kZWZpbmVkXCIgIT0gdHlwZW9mIFN5bWJvbCAmJiBTeW1ib2wudG9TdHJpbmdUYWcgJiYgT2JqZWN0LmRlZmluZVByb3BlcnR5KHQzLCBTeW1ib2wudG9TdHJpbmdUYWcsIHsgdmFsdWU6IFwiTW9kdWxlXCIgfSksIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0MywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG4gIH07XG4gIHZhciBuID0ge307XG4gICgoKSA9PiB7XG4gICAgbGV0IHQzO1xuICAgIGlmIChyLnIobiksIHIuZChuLCB7IFVSSTogKCkgPT4gZjIsIFV0aWxzOiAoKSA9PiBQIH0pLCBcIm9iamVjdFwiID09IHR5cGVvZiBwcm9jZXNzKVxuICAgICAgdDMgPSBcIndpbjMyXCIgPT09IHByb2Nlc3MucGxhdGZvcm07XG4gICAgZWxzZSBpZiAoXCJvYmplY3RcIiA9PSB0eXBlb2YgbmF2aWdhdG9yKSB7XG4gICAgICBsZXQgZTMgPSBuYXZpZ2F0b3IudXNlckFnZW50O1xuICAgICAgdDMgPSBlMy5pbmRleE9mKFwiV2luZG93c1wiKSA+PSAwO1xuICAgIH1cbiAgICBjb25zdCBlMiA9IC9eXFx3W1xcd1xcZCsuLV0qJC8sIGkgPSAvXlxcLy8sIG8gPSAvXlxcL1xcLy87XG4gICAgZnVuY3Rpb24gcyh0NCwgcjIpIHtcbiAgICAgIGlmICghdDQuc2NoZW1lICYmIHIyKVxuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYFtVcmlFcnJvcl06IFNjaGVtZSBpcyBtaXNzaW5nOiB7c2NoZW1lOiBcIlwiLCBhdXRob3JpdHk6IFwiJHt0NC5hdXRob3JpdHl9XCIsIHBhdGg6IFwiJHt0NC5wYXRofVwiLCBxdWVyeTogXCIke3Q0LnF1ZXJ5fVwiLCBmcmFnbWVudDogXCIke3Q0LmZyYWdtZW50fVwifWApO1xuICAgICAgaWYgKHQ0LnNjaGVtZSAmJiAhZTIudGVzdCh0NC5zY2hlbWUpKVxuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJbVXJpRXJyb3JdOiBTY2hlbWUgY29udGFpbnMgaWxsZWdhbCBjaGFyYWN0ZXJzLlwiKTtcbiAgICAgIGlmICh0NC5wYXRoKSB7XG4gICAgICAgIGlmICh0NC5hdXRob3JpdHkpIHtcbiAgICAgICAgICBpZiAoIWkudGVzdCh0NC5wYXRoKSlcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignW1VyaUVycm9yXTogSWYgYSBVUkkgY29udGFpbnMgYW4gYXV0aG9yaXR5IGNvbXBvbmVudCwgdGhlbiB0aGUgcGF0aCBjb21wb25lbnQgbXVzdCBlaXRoZXIgYmUgZW1wdHkgb3IgYmVnaW4gd2l0aCBhIHNsYXNoIChcIi9cIikgY2hhcmFjdGVyJyk7XG4gICAgICAgIH0gZWxzZSBpZiAoby50ZXN0KHQ0LnBhdGgpKVxuICAgICAgICAgIHRocm93IG5ldyBFcnJvcignW1VyaUVycm9yXTogSWYgYSBVUkkgZG9lcyBub3QgY29udGFpbiBhbiBhdXRob3JpdHkgY29tcG9uZW50LCB0aGVuIHRoZSBwYXRoIGNhbm5vdCBiZWdpbiB3aXRoIHR3byBzbGFzaCBjaGFyYWN0ZXJzIChcIi8vXCIpJyk7XG4gICAgICB9XG4gICAgfVxuICAgIGNvbnN0IGggPSBcIlwiLCBhMiA9IFwiL1wiLCBjID0gL14oKFteOi8/I10rPyk6KT8oXFwvXFwvKFteLz8jXSopKT8oW14/I10qKShcXD8oW14jXSopKT8oIyguKikpPy87XG4gICAgY2xhc3MgZjIge1xuICAgICAgc3RhdGljIGlzVXJpKHQ0KSB7XG4gICAgICAgIHJldHVybiB0NCBpbnN0YW5jZW9mIGYyIHx8ICEhdDQgJiYgXCJzdHJpbmdcIiA9PSB0eXBlb2YgdDQuYXV0aG9yaXR5ICYmIFwic3RyaW5nXCIgPT0gdHlwZW9mIHQ0LmZyYWdtZW50ICYmIFwic3RyaW5nXCIgPT0gdHlwZW9mIHQ0LnBhdGggJiYgXCJzdHJpbmdcIiA9PSB0eXBlb2YgdDQucXVlcnkgJiYgXCJzdHJpbmdcIiA9PSB0eXBlb2YgdDQuc2NoZW1lICYmIFwic3RyaW5nXCIgPT0gdHlwZW9mIHQ0LmZzUGF0aCAmJiBcImZ1bmN0aW9uXCIgPT0gdHlwZW9mIHQ0LndpdGggJiYgXCJmdW5jdGlvblwiID09IHR5cGVvZiB0NC50b1N0cmluZztcbiAgICAgIH1cbiAgICAgIHNjaGVtZTtcbiAgICAgIGF1dGhvcml0eTtcbiAgICAgIHBhdGg7XG4gICAgICBxdWVyeTtcbiAgICAgIGZyYWdtZW50O1xuICAgICAgY29uc3RydWN0b3IodDQsIGUzLCByMiwgbjIsIGkyLCBvMiA9IGZhbHNlKSB7XG4gICAgICAgIFwib2JqZWN0XCIgPT0gdHlwZW9mIHQ0ID8gKHRoaXMuc2NoZW1lID0gdDQuc2NoZW1lIHx8IGgsIHRoaXMuYXV0aG9yaXR5ID0gdDQuYXV0aG9yaXR5IHx8IGgsIHRoaXMucGF0aCA9IHQ0LnBhdGggfHwgaCwgdGhpcy5xdWVyeSA9IHQ0LnF1ZXJ5IHx8IGgsIHRoaXMuZnJhZ21lbnQgPSB0NC5mcmFnbWVudCB8fCBoKSA6ICh0aGlzLnNjaGVtZSA9IC8qIEBfX1BVUkVfXyAqLyBmdW5jdGlvbih0NSwgZTQpIHtcbiAgICAgICAgICByZXR1cm4gdDUgfHwgZTQgPyB0NSA6IFwiZmlsZVwiO1xuICAgICAgICB9KHQ0LCBvMiksIHRoaXMuYXV0aG9yaXR5ID0gZTMgfHwgaCwgdGhpcy5wYXRoID0gZnVuY3Rpb24odDUsIGU0KSB7XG4gICAgICAgICAgc3dpdGNoICh0NSkge1xuICAgICAgICAgICAgY2FzZSBcImh0dHBzXCI6XG4gICAgICAgICAgICBjYXNlIFwiaHR0cFwiOlxuICAgICAgICAgICAgY2FzZSBcImZpbGVcIjpcbiAgICAgICAgICAgICAgZTQgPyBlNFswXSAhPT0gYTIgJiYgKGU0ID0gYTIgKyBlNCkgOiBlNCA9IGEyO1xuICAgICAgICAgIH1cbiAgICAgICAgICByZXR1cm4gZTQ7XG4gICAgICAgIH0odGhpcy5zY2hlbWUsIHIyIHx8IGgpLCB0aGlzLnF1ZXJ5ID0gbjIgfHwgaCwgdGhpcy5mcmFnbWVudCA9IGkyIHx8IGgsIHModGhpcywgbzIpKTtcbiAgICAgIH1cbiAgICAgIGdldCBmc1BhdGgoKSB7XG4gICAgICAgIHJldHVybiBtKHRoaXMsIGZhbHNlKTtcbiAgICAgIH1cbiAgICAgIHdpdGgodDQpIHtcbiAgICAgICAgaWYgKCF0NClcbiAgICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgICAgbGV0IHsgc2NoZW1lOiBlMywgYXV0aG9yaXR5OiByMiwgcGF0aDogbjIsIHF1ZXJ5OiBpMiwgZnJhZ21lbnQ6IG8yIH0gPSB0NDtcbiAgICAgICAgcmV0dXJuIHZvaWQgMCA9PT0gZTMgPyBlMyA9IHRoaXMuc2NoZW1lIDogbnVsbCA9PT0gZTMgJiYgKGUzID0gaCksIHZvaWQgMCA9PT0gcjIgPyByMiA9IHRoaXMuYXV0aG9yaXR5IDogbnVsbCA9PT0gcjIgJiYgKHIyID0gaCksIHZvaWQgMCA9PT0gbjIgPyBuMiA9IHRoaXMucGF0aCA6IG51bGwgPT09IG4yICYmIChuMiA9IGgpLCB2b2lkIDAgPT09IGkyID8gaTIgPSB0aGlzLnF1ZXJ5IDogbnVsbCA9PT0gaTIgJiYgKGkyID0gaCksIHZvaWQgMCA9PT0gbzIgPyBvMiA9IHRoaXMuZnJhZ21lbnQgOiBudWxsID09PSBvMiAmJiAobzIgPSBoKSwgZTMgPT09IHRoaXMuc2NoZW1lICYmIHIyID09PSB0aGlzLmF1dGhvcml0eSAmJiBuMiA9PT0gdGhpcy5wYXRoICYmIGkyID09PSB0aGlzLnF1ZXJ5ICYmIG8yID09PSB0aGlzLmZyYWdtZW50ID8gdGhpcyA6IG5ldyBsKGUzLCByMiwgbjIsIGkyLCBvMik7XG4gICAgICB9XG4gICAgICBzdGF0aWMgcGFyc2UodDQsIGUzID0gZmFsc2UpIHtcbiAgICAgICAgY29uc3QgcjIgPSBjLmV4ZWModDQpO1xuICAgICAgICByZXR1cm4gcjIgPyBuZXcgbChyMlsyXSB8fCBoLCBDKHIyWzRdIHx8IGgpLCBDKHIyWzVdIHx8IGgpLCBDKHIyWzddIHx8IGgpLCBDKHIyWzldIHx8IGgpLCBlMykgOiBuZXcgbChoLCBoLCBoLCBoLCBoKTtcbiAgICAgIH1cbiAgICAgIHN0YXRpYyBmaWxlKGUzKSB7XG4gICAgICAgIGxldCByMiA9IGg7XG4gICAgICAgIGlmICh0MyAmJiAoZTMgPSBlMy5yZXBsYWNlKC9cXFxcL2csIGEyKSksIGUzWzBdID09PSBhMiAmJiBlM1sxXSA9PT0gYTIpIHtcbiAgICAgICAgICBjb25zdCB0NCA9IGUzLmluZGV4T2YoYTIsIDIpO1xuICAgICAgICAgIC0xID09PSB0NCA/IChyMiA9IGUzLnN1YnN0cmluZygyKSwgZTMgPSBhMikgOiAocjIgPSBlMy5zdWJzdHJpbmcoMiwgdDQpLCBlMyA9IGUzLnN1YnN0cmluZyh0NCkgfHwgYTIpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBuZXcgbChcImZpbGVcIiwgcjIsIGUzLCBoLCBoKTtcbiAgICAgIH1cbiAgICAgIHN0YXRpYyBmcm9tKHQ0KSB7XG4gICAgICAgIGNvbnN0IGUzID0gbmV3IGwodDQuc2NoZW1lLCB0NC5hdXRob3JpdHksIHQ0LnBhdGgsIHQ0LnF1ZXJ5LCB0NC5mcmFnbWVudCk7XG4gICAgICAgIHJldHVybiBzKGUzLCB0cnVlKSwgZTM7XG4gICAgICB9XG4gICAgICB0b1N0cmluZyh0NCA9IGZhbHNlKSB7XG4gICAgICAgIHJldHVybiB5KHRoaXMsIHQ0KTtcbiAgICAgIH1cbiAgICAgIHRvSlNPTigpIHtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICB9XG4gICAgICBzdGF0aWMgcmV2aXZlKHQ0KSB7XG4gICAgICAgIGlmICh0NCkge1xuICAgICAgICAgIGlmICh0NCBpbnN0YW5jZW9mIGYyKVxuICAgICAgICAgICAgcmV0dXJuIHQ0O1xuICAgICAgICAgIHtcbiAgICAgICAgICAgIGNvbnN0IGUzID0gbmV3IGwodDQpO1xuICAgICAgICAgICAgcmV0dXJuIGUzLl9mb3JtYXR0ZWQgPSB0NC5leHRlcm5hbCwgZTMuX2ZzUGF0aCA9IHQ0Ll9zZXAgPT09IHUgPyB0NC5mc1BhdGggOiBudWxsLCBlMztcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHQ0O1xuICAgICAgfVxuICAgIH1cbiAgICBjb25zdCB1ID0gdDMgPyAxIDogdm9pZCAwO1xuICAgIGNsYXNzIGwgZXh0ZW5kcyBmMiB7XG4gICAgICBfZm9ybWF0dGVkID0gbnVsbDtcbiAgICAgIF9mc1BhdGggPSBudWxsO1xuICAgICAgZ2V0IGZzUGF0aCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2ZzUGF0aCB8fCAodGhpcy5fZnNQYXRoID0gbSh0aGlzLCBmYWxzZSkpLCB0aGlzLl9mc1BhdGg7XG4gICAgICB9XG4gICAgICB0b1N0cmluZyh0NCA9IGZhbHNlKSB7XG4gICAgICAgIHJldHVybiB0NCA/IHkodGhpcywgdHJ1ZSkgOiAodGhpcy5fZm9ybWF0dGVkIHx8ICh0aGlzLl9mb3JtYXR0ZWQgPSB5KHRoaXMsIGZhbHNlKSksIHRoaXMuX2Zvcm1hdHRlZCk7XG4gICAgICB9XG4gICAgICB0b0pTT04oKSB7XG4gICAgICAgIGNvbnN0IHQ0ID0geyAkbWlkOiAxIH07XG4gICAgICAgIHJldHVybiB0aGlzLl9mc1BhdGggJiYgKHQ0LmZzUGF0aCA9IHRoaXMuX2ZzUGF0aCwgdDQuX3NlcCA9IHUpLCB0aGlzLl9mb3JtYXR0ZWQgJiYgKHQ0LmV4dGVybmFsID0gdGhpcy5fZm9ybWF0dGVkKSwgdGhpcy5wYXRoICYmICh0NC5wYXRoID0gdGhpcy5wYXRoKSwgdGhpcy5zY2hlbWUgJiYgKHQ0LnNjaGVtZSA9IHRoaXMuc2NoZW1lKSwgdGhpcy5hdXRob3JpdHkgJiYgKHQ0LmF1dGhvcml0eSA9IHRoaXMuYXV0aG9yaXR5KSwgdGhpcy5xdWVyeSAmJiAodDQucXVlcnkgPSB0aGlzLnF1ZXJ5KSwgdGhpcy5mcmFnbWVudCAmJiAodDQuZnJhZ21lbnQgPSB0aGlzLmZyYWdtZW50KSwgdDQ7XG4gICAgICB9XG4gICAgfVxuICAgIGNvbnN0IGcgPSB7IDU4OiBcIiUzQVwiLCA0NzogXCIlMkZcIiwgNjM6IFwiJTNGXCIsIDM1OiBcIiUyM1wiLCA5MTogXCIlNUJcIiwgOTM6IFwiJTVEXCIsIDY0OiBcIiU0MFwiLCAzMzogXCIlMjFcIiwgMzY6IFwiJTI0XCIsIDM4OiBcIiUyNlwiLCAzOTogXCIlMjdcIiwgNDA6IFwiJTI4XCIsIDQxOiBcIiUyOVwiLCA0MjogXCIlMkFcIiwgNDM6IFwiJTJCXCIsIDQ0OiBcIiUyQ1wiLCA1OTogXCIlM0JcIiwgNjE6IFwiJTNEXCIsIDMyOiBcIiUyMFwiIH07XG4gICAgZnVuY3Rpb24gZCh0NCwgZTMsIHIyKSB7XG4gICAgICBsZXQgbjIsIGkyID0gLTE7XG4gICAgICBmb3IgKGxldCBvMiA9IDA7IG8yIDwgdDQubGVuZ3RoOyBvMisrKSB7XG4gICAgICAgIGNvbnN0IHMyID0gdDQuY2hhckNvZGVBdChvMik7XG4gICAgICAgIGlmIChzMiA+PSA5NyAmJiBzMiA8PSAxMjIgfHwgczIgPj0gNjUgJiYgczIgPD0gOTAgfHwgczIgPj0gNDggJiYgczIgPD0gNTcgfHwgNDUgPT09IHMyIHx8IDQ2ID09PSBzMiB8fCA5NSA9PT0gczIgfHwgMTI2ID09PSBzMiB8fCBlMyAmJiA0NyA9PT0gczIgfHwgcjIgJiYgOTEgPT09IHMyIHx8IHIyICYmIDkzID09PSBzMiB8fCByMiAmJiA1OCA9PT0gczIpXG4gICAgICAgICAgLTEgIT09IGkyICYmIChuMiArPSBlbmNvZGVVUklDb21wb25lbnQodDQuc3Vic3RyaW5nKGkyLCBvMikpLCBpMiA9IC0xKSwgdm9pZCAwICE9PSBuMiAmJiAobjIgKz0gdDQuY2hhckF0KG8yKSk7XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgIHZvaWQgMCA9PT0gbjIgJiYgKG4yID0gdDQuc3Vic3RyKDAsIG8yKSk7XG4gICAgICAgICAgY29uc3QgZTQgPSBnW3MyXTtcbiAgICAgICAgICB2b2lkIDAgIT09IGU0ID8gKC0xICE9PSBpMiAmJiAobjIgKz0gZW5jb2RlVVJJQ29tcG9uZW50KHQ0LnN1YnN0cmluZyhpMiwgbzIpKSwgaTIgPSAtMSksIG4yICs9IGU0KSA6IC0xID09PSBpMiAmJiAoaTIgPSBvMik7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiAtMSAhPT0gaTIgJiYgKG4yICs9IGVuY29kZVVSSUNvbXBvbmVudCh0NC5zdWJzdHJpbmcoaTIpKSksIHZvaWQgMCAhPT0gbjIgPyBuMiA6IHQ0O1xuICAgIH1cbiAgICBmdW5jdGlvbiBwKHQ0KSB7XG4gICAgICBsZXQgZTM7XG4gICAgICBmb3IgKGxldCByMiA9IDA7IHIyIDwgdDQubGVuZ3RoOyByMisrKSB7XG4gICAgICAgIGNvbnN0IG4yID0gdDQuY2hhckNvZGVBdChyMik7XG4gICAgICAgIDM1ID09PSBuMiB8fCA2MyA9PT0gbjIgPyAodm9pZCAwID09PSBlMyAmJiAoZTMgPSB0NC5zdWJzdHIoMCwgcjIpKSwgZTMgKz0gZ1tuMl0pIDogdm9pZCAwICE9PSBlMyAmJiAoZTMgKz0gdDRbcjJdKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiB2b2lkIDAgIT09IGUzID8gZTMgOiB0NDtcbiAgICB9XG4gICAgZnVuY3Rpb24gbShlMywgcjIpIHtcbiAgICAgIGxldCBuMjtcbiAgICAgIHJldHVybiBuMiA9IGUzLmF1dGhvcml0eSAmJiBlMy5wYXRoLmxlbmd0aCA+IDEgJiYgXCJmaWxlXCIgPT09IGUzLnNjaGVtZSA/IGAvLyR7ZTMuYXV0aG9yaXR5fSR7ZTMucGF0aH1gIDogNDcgPT09IGUzLnBhdGguY2hhckNvZGVBdCgwKSAmJiAoZTMucGF0aC5jaGFyQ29kZUF0KDEpID49IDY1ICYmIGUzLnBhdGguY2hhckNvZGVBdCgxKSA8PSA5MCB8fCBlMy5wYXRoLmNoYXJDb2RlQXQoMSkgPj0gOTcgJiYgZTMucGF0aC5jaGFyQ29kZUF0KDEpIDw9IDEyMikgJiYgNTggPT09IGUzLnBhdGguY2hhckNvZGVBdCgyKSA/IHIyID8gZTMucGF0aC5zdWJzdHIoMSkgOiBlMy5wYXRoWzFdLnRvTG93ZXJDYXNlKCkgKyBlMy5wYXRoLnN1YnN0cigyKSA6IGUzLnBhdGgsIHQzICYmIChuMiA9IG4yLnJlcGxhY2UoL1xcLy9nLCBcIlxcXFxcIikpLCBuMjtcbiAgICB9XG4gICAgZnVuY3Rpb24geSh0NCwgZTMpIHtcbiAgICAgIGNvbnN0IHIyID0gZTMgPyBwIDogZDtcbiAgICAgIGxldCBuMiA9IFwiXCIsIHsgc2NoZW1lOiBpMiwgYXV0aG9yaXR5OiBvMiwgcGF0aDogczIsIHF1ZXJ5OiBoMiwgZnJhZ21lbnQ6IGMyIH0gPSB0NDtcbiAgICAgIGlmIChpMiAmJiAobjIgKz0gaTIsIG4yICs9IFwiOlwiKSwgKG8yIHx8IFwiZmlsZVwiID09PSBpMikgJiYgKG4yICs9IGEyLCBuMiArPSBhMiksIG8yKSB7XG4gICAgICAgIGxldCB0NSA9IG8yLmluZGV4T2YoXCJAXCIpO1xuICAgICAgICBpZiAoLTEgIT09IHQ1KSB7XG4gICAgICAgICAgY29uc3QgZTQgPSBvMi5zdWJzdHIoMCwgdDUpO1xuICAgICAgICAgIG8yID0gbzIuc3Vic3RyKHQ1ICsgMSksIHQ1ID0gZTQubGFzdEluZGV4T2YoXCI6XCIpLCAtMSA9PT0gdDUgPyBuMiArPSByMihlNCwgZmFsc2UsIGZhbHNlKSA6IChuMiArPSByMihlNC5zdWJzdHIoMCwgdDUpLCBmYWxzZSwgZmFsc2UpLCBuMiArPSBcIjpcIiwgbjIgKz0gcjIoZTQuc3Vic3RyKHQ1ICsgMSksIGZhbHNlLCB0cnVlKSksIG4yICs9IFwiQFwiO1xuICAgICAgICB9XG4gICAgICAgIG8yID0gbzIudG9Mb3dlckNhc2UoKSwgdDUgPSBvMi5sYXN0SW5kZXhPZihcIjpcIiksIC0xID09PSB0NSA/IG4yICs9IHIyKG8yLCBmYWxzZSwgdHJ1ZSkgOiAobjIgKz0gcjIobzIuc3Vic3RyKDAsIHQ1KSwgZmFsc2UsIHRydWUpLCBuMiArPSBvMi5zdWJzdHIodDUpKTtcbiAgICAgIH1cbiAgICAgIGlmIChzMikge1xuICAgICAgICBpZiAoczIubGVuZ3RoID49IDMgJiYgNDcgPT09IHMyLmNoYXJDb2RlQXQoMCkgJiYgNTggPT09IHMyLmNoYXJDb2RlQXQoMikpIHtcbiAgICAgICAgICBjb25zdCB0NSA9IHMyLmNoYXJDb2RlQXQoMSk7XG4gICAgICAgICAgdDUgPj0gNjUgJiYgdDUgPD0gOTAgJiYgKHMyID0gYC8ke1N0cmluZy5mcm9tQ2hhckNvZGUodDUgKyAzMil9OiR7czIuc3Vic3RyKDMpfWApO1xuICAgICAgICB9IGVsc2UgaWYgKHMyLmxlbmd0aCA+PSAyICYmIDU4ID09PSBzMi5jaGFyQ29kZUF0KDEpKSB7XG4gICAgICAgICAgY29uc3QgdDUgPSBzMi5jaGFyQ29kZUF0KDApO1xuICAgICAgICAgIHQ1ID49IDY1ICYmIHQ1IDw9IDkwICYmIChzMiA9IGAke1N0cmluZy5mcm9tQ2hhckNvZGUodDUgKyAzMil9OiR7czIuc3Vic3RyKDIpfWApO1xuICAgICAgICB9XG4gICAgICAgIG4yICs9IHIyKHMyLCB0cnVlLCBmYWxzZSk7XG4gICAgICB9XG4gICAgICByZXR1cm4gaDIgJiYgKG4yICs9IFwiP1wiLCBuMiArPSByMihoMiwgZmFsc2UsIGZhbHNlKSksIGMyICYmIChuMiArPSBcIiNcIiwgbjIgKz0gZTMgPyBjMiA6IGQoYzIsIGZhbHNlLCBmYWxzZSkpLCBuMjtcbiAgICB9XG4gICAgZnVuY3Rpb24gdih0NCkge1xuICAgICAgdHJ5IHtcbiAgICAgICAgcmV0dXJuIGRlY29kZVVSSUNvbXBvbmVudCh0NCk7XG4gICAgICB9IGNhdGNoIHtcbiAgICAgICAgcmV0dXJuIHQ0Lmxlbmd0aCA+IDMgPyB0NC5zdWJzdHIoMCwgMykgKyB2KHQ0LnN1YnN0cigzKSkgOiB0NDtcbiAgICAgIH1cbiAgICB9XG4gICAgY29uc3QgYiA9IC8oJVswLTlBLVphLXpdWzAtOUEtWmEtel0pKy9nO1xuICAgIGZ1bmN0aW9uIEModDQpIHtcbiAgICAgIHJldHVybiB0NC5tYXRjaChiKSA/IHQ0LnJlcGxhY2UoYiwgKHQ1KSA9PiB2KHQ1KSkgOiB0NDtcbiAgICB9XG4gICAgdmFyIEEyID0gcig0NzApO1xuICAgIGNvbnN0IHcgPSBBMi5wb3NpeCB8fCBBMiwgeCA9IFwiL1wiO1xuICAgIHZhciBQO1xuICAgICFmdW5jdGlvbih0NCkge1xuICAgICAgdDQuam9pblBhdGggPSBmdW5jdGlvbih0NSwgLi4uZTMpIHtcbiAgICAgICAgcmV0dXJuIHQ1LndpdGgoeyBwYXRoOiB3LmpvaW4odDUucGF0aCwgLi4uZTMpIH0pO1xuICAgICAgfSwgdDQucmVzb2x2ZVBhdGggPSBmdW5jdGlvbih0NSwgLi4uZTMpIHtcbiAgICAgICAgbGV0IHIyID0gdDUucGF0aCwgbjIgPSBmYWxzZTtcbiAgICAgICAgcjJbMF0gIT09IHggJiYgKHIyID0geCArIHIyLCBuMiA9IHRydWUpO1xuICAgICAgICBsZXQgaTIgPSB3LnJlc29sdmUocjIsIC4uLmUzKTtcbiAgICAgICAgcmV0dXJuIG4yICYmIGkyWzBdID09PSB4ICYmICF0NS5hdXRob3JpdHkgJiYgKGkyID0gaTIuc3Vic3RyaW5nKDEpKSwgdDUud2l0aCh7IHBhdGg6IGkyIH0pO1xuICAgICAgfSwgdDQuZGlybmFtZSA9IGZ1bmN0aW9uKHQ1KSB7XG4gICAgICAgIGlmICgwID09PSB0NS5wYXRoLmxlbmd0aCB8fCB0NS5wYXRoID09PSB4KVxuICAgICAgICAgIHJldHVybiB0NTtcbiAgICAgICAgbGV0IGUzID0gdy5kaXJuYW1lKHQ1LnBhdGgpO1xuICAgICAgICByZXR1cm4gMSA9PT0gZTMubGVuZ3RoICYmIDQ2ID09PSBlMy5jaGFyQ29kZUF0KDApICYmIChlMyA9IFwiXCIpLCB0NS53aXRoKHsgcGF0aDogZTMgfSk7XG4gICAgICB9LCB0NC5iYXNlbmFtZSA9IGZ1bmN0aW9uKHQ1KSB7XG4gICAgICAgIHJldHVybiB3LmJhc2VuYW1lKHQ1LnBhdGgpO1xuICAgICAgfSwgdDQuZXh0bmFtZSA9IGZ1bmN0aW9uKHQ1KSB7XG4gICAgICAgIHJldHVybiB3LmV4dG5hbWUodDUucGF0aCk7XG4gICAgICB9O1xuICAgIH0oUCB8fCAoUCA9IHt9KSk7XG4gIH0pKCksIExJQiA9IG47XG59KSgpO1xudmFyIHsgVVJJOiBVUkkyLCBVdGlscyB9ID0gTElCO1xuXG4vLyBub2RlX21vZHVsZXMvdnNjb2RlLWpzb24tbGFuZ3VhZ2VzZXJ2aWNlL2xpYi9lc20vdXRpbHMvZ2xvYi5qc1xuZnVuY3Rpb24gY3JlYXRlUmVnZXgoZ2xvYiwgb3B0cykge1xuICBpZiAodHlwZW9mIGdsb2IgIT09IFwic3RyaW5nXCIpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKFwiRXhwZWN0ZWQgYSBzdHJpbmdcIik7XG4gIH1cbiAgY29uc3Qgc3RyID0gU3RyaW5nKGdsb2IpO1xuICBsZXQgcmVTdHIgPSBcIlwiO1xuICBjb25zdCBleHRlbmRlZCA9IG9wdHMgPyAhIW9wdHMuZXh0ZW5kZWQgOiBmYWxzZTtcbiAgY29uc3QgZ2xvYnN0YXIgPSBvcHRzID8gISFvcHRzLmdsb2JzdGFyIDogZmFsc2U7XG4gIGxldCBpbkdyb3VwID0gZmFsc2U7XG4gIGNvbnN0IGZsYWdzID0gb3B0cyAmJiB0eXBlb2Ygb3B0cy5mbGFncyA9PT0gXCJzdHJpbmdcIiA/IG9wdHMuZmxhZ3MgOiBcIlwiO1xuICBsZXQgYztcbiAgZm9yIChsZXQgaSA9IDAsIGxlbiA9IHN0ci5sZW5ndGg7IGkgPCBsZW47IGkrKykge1xuICAgIGMgPSBzdHJbaV07XG4gICAgc3dpdGNoIChjKSB7XG4gICAgICBjYXNlIFwiL1wiOlxuICAgICAgY2FzZSBcIiRcIjpcbiAgICAgIGNhc2UgXCJeXCI6XG4gICAgICBjYXNlIFwiK1wiOlxuICAgICAgY2FzZSBcIi5cIjpcbiAgICAgIGNhc2UgXCIoXCI6XG4gICAgICBjYXNlIFwiKVwiOlxuICAgICAgY2FzZSBcIj1cIjpcbiAgICAgIGNhc2UgXCIhXCI6XG4gICAgICBjYXNlIFwifFwiOlxuICAgICAgICByZVN0ciArPSBcIlxcXFxcIiArIGM7XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSBcIj9cIjpcbiAgICAgICAgaWYgKGV4dGVuZGVkKSB7XG4gICAgICAgICAgcmVTdHIgKz0gXCIuXCI7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgIGNhc2UgXCJbXCI6XG4gICAgICBjYXNlIFwiXVwiOlxuICAgICAgICBpZiAoZXh0ZW5kZWQpIHtcbiAgICAgICAgICByZVN0ciArPSBjO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICBjYXNlIFwie1wiOlxuICAgICAgICBpZiAoZXh0ZW5kZWQpIHtcbiAgICAgICAgICBpbkdyb3VwID0gdHJ1ZTtcbiAgICAgICAgICByZVN0ciArPSBcIihcIjtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgY2FzZSBcIn1cIjpcbiAgICAgICAgaWYgKGV4dGVuZGVkKSB7XG4gICAgICAgICAgaW5Hcm91cCA9IGZhbHNlO1xuICAgICAgICAgIHJlU3RyICs9IFwiKVwiO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICBjYXNlIFwiLFwiOlxuICAgICAgICBpZiAoaW5Hcm91cCkge1xuICAgICAgICAgIHJlU3RyICs9IFwifFwiO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICAgIHJlU3RyICs9IFwiXFxcXFwiICsgYztcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlIFwiKlwiOlxuICAgICAgICBjb25zdCBwcmV2Q2hhciA9IHN0cltpIC0gMV07XG4gICAgICAgIGxldCBzdGFyQ291bnQgPSAxO1xuICAgICAgICB3aGlsZSAoc3RyW2kgKyAxXSA9PT0gXCIqXCIpIHtcbiAgICAgICAgICBzdGFyQ291bnQrKztcbiAgICAgICAgICBpKys7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgbmV4dENoYXIgPSBzdHJbaSArIDFdO1xuICAgICAgICBpZiAoIWdsb2JzdGFyKSB7XG4gICAgICAgICAgcmVTdHIgKz0gXCIuKlwiO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGNvbnN0IGlzR2xvYnN0YXIgPSBzdGFyQ291bnQgPiAxICYmIChwcmV2Q2hhciA9PT0gXCIvXCIgfHwgcHJldkNoYXIgPT09IHZvaWQgMCB8fCBwcmV2Q2hhciA9PT0gXCJ7XCIgfHwgcHJldkNoYXIgPT09IFwiLFwiKSAmJiAobmV4dENoYXIgPT09IFwiL1wiIHx8IG5leHRDaGFyID09PSB2b2lkIDAgfHwgbmV4dENoYXIgPT09IFwiLFwiIHx8IG5leHRDaGFyID09PSBcIn1cIik7XG4gICAgICAgICAgaWYgKGlzR2xvYnN0YXIpIHtcbiAgICAgICAgICAgIGlmIChuZXh0Q2hhciA9PT0gXCIvXCIpIHtcbiAgICAgICAgICAgICAgaSsrO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChwcmV2Q2hhciA9PT0gXCIvXCIgJiYgcmVTdHIuZW5kc1dpdGgoXCJcXFxcL1wiKSkge1xuICAgICAgICAgICAgICByZVN0ciA9IHJlU3RyLnN1YnN0cigwLCByZVN0ci5sZW5ndGggLSAyKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJlU3RyICs9IFwiKCg/OlteL10qKD86L3wkKSkqKVwiO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZVN0ciArPSBcIihbXi9dKilcIjtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgYnJlYWs7XG4gICAgICBkZWZhdWx0OlxuICAgICAgICByZVN0ciArPSBjO1xuICAgIH1cbiAgfVxuICBpZiAoIWZsYWdzIHx8ICF+ZmxhZ3MuaW5kZXhPZihcImdcIikpIHtcbiAgICByZVN0ciA9IFwiXlwiICsgcmVTdHIgKyBcIiRcIjtcbiAgfVxuICByZXR1cm4gbmV3IFJlZ0V4cChyZVN0ciwgZmxhZ3MpO1xufVxuXG4vLyBub2RlX21vZHVsZXMvdnNjb2RlLWpzb24tbGFuZ3VhZ2VzZXJ2aWNlL2xpYi9lc20vc2VydmljZXMvanNvblNjaGVtYVNlcnZpY2UuanNcbnZhciBCQU5HID0gXCIhXCI7XG52YXIgUEFUSF9TRVAgPSBcIi9cIjtcbnZhciBGaWxlUGF0dGVybkFzc29jaWF0aW9uID0gY2xhc3Mge1xuICBjb25zdHJ1Y3RvcihwYXR0ZXJuLCBmb2xkZXJVcmksIHVyaXMpIHtcbiAgICB0aGlzLmZvbGRlclVyaSA9IGZvbGRlclVyaTtcbiAgICB0aGlzLnVyaXMgPSB1cmlzO1xuICAgIHRoaXMuZ2xvYldyYXBwZXJzID0gW107XG4gICAgdHJ5IHtcbiAgICAgIGZvciAobGV0IHBhdHRlcm5TdHJpbmcgb2YgcGF0dGVybikge1xuICAgICAgICBjb25zdCBpbmNsdWRlID0gcGF0dGVyblN0cmluZ1swXSAhPT0gQkFORztcbiAgICAgICAgaWYgKCFpbmNsdWRlKSB7XG4gICAgICAgICAgcGF0dGVyblN0cmluZyA9IHBhdHRlcm5TdHJpbmcuc3Vic3RyaW5nKDEpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChwYXR0ZXJuU3RyaW5nLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICBpZiAocGF0dGVyblN0cmluZ1swXSA9PT0gUEFUSF9TRVApIHtcbiAgICAgICAgICAgIHBhdHRlcm5TdHJpbmcgPSBwYXR0ZXJuU3RyaW5nLnN1YnN0cmluZygxKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgdGhpcy5nbG9iV3JhcHBlcnMucHVzaCh7XG4gICAgICAgICAgICByZWdleHA6IGNyZWF0ZVJlZ2V4KFwiKiovXCIgKyBwYXR0ZXJuU3RyaW5nLCB7IGV4dGVuZGVkOiB0cnVlLCBnbG9ic3RhcjogdHJ1ZSB9KSxcbiAgICAgICAgICAgIGluY2x1ZGVcbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgO1xuICAgICAgaWYgKGZvbGRlclVyaSkge1xuICAgICAgICBmb2xkZXJVcmkgPSBub3JtYWxpemVSZXNvdXJjZUZvck1hdGNoaW5nKGZvbGRlclVyaSk7XG4gICAgICAgIGlmICghZm9sZGVyVXJpLmVuZHNXaXRoKFwiL1wiKSkge1xuICAgICAgICAgIGZvbGRlclVyaSA9IGZvbGRlclVyaSArIFwiL1wiO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuZm9sZGVyVXJpID0gZm9sZGVyVXJpO1xuICAgICAgfVxuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgIHRoaXMuZ2xvYldyYXBwZXJzLmxlbmd0aCA9IDA7XG4gICAgICB0aGlzLnVyaXMgPSBbXTtcbiAgICB9XG4gIH1cbiAgbWF0Y2hlc1BhdHRlcm4oZmlsZU5hbWUpIHtcbiAgICBpZiAodGhpcy5mb2xkZXJVcmkgJiYgIWZpbGVOYW1lLnN0YXJ0c1dpdGgodGhpcy5mb2xkZXJVcmkpKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIGxldCBtYXRjaCA9IGZhbHNlO1xuICAgIGZvciAoY29uc3QgeyByZWdleHAsIGluY2x1ZGUgfSBvZiB0aGlzLmdsb2JXcmFwcGVycykge1xuICAgICAgaWYgKHJlZ2V4cC50ZXN0KGZpbGVOYW1lKSkge1xuICAgICAgICBtYXRjaCA9IGluY2x1ZGU7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBtYXRjaDtcbiAgfVxuICBnZXRVUklzKCkge1xuICAgIHJldHVybiB0aGlzLnVyaXM7XG4gIH1cbn07XG52YXIgU2NoZW1hSGFuZGxlID0gY2xhc3Mge1xuICBjb25zdHJ1Y3RvcihzZXJ2aWNlLCB1cmksIHVucmVzb2x2ZWRTY2hlbWFDb250ZW50KSB7XG4gICAgdGhpcy5zZXJ2aWNlID0gc2VydmljZTtcbiAgICB0aGlzLnVyaSA9IHVyaTtcbiAgICB0aGlzLmRlcGVuZGVuY2llcyA9IC8qIEBfX1BVUkVfXyAqLyBuZXcgU2V0KCk7XG4gICAgdGhpcy5hbmNob3JzID0gdm9pZCAwO1xuICAgIGlmICh1bnJlc29sdmVkU2NoZW1hQ29udGVudCkge1xuICAgICAgdGhpcy51bnJlc29sdmVkU2NoZW1hID0gdGhpcy5zZXJ2aWNlLnByb21pc2UucmVzb2x2ZShuZXcgVW5yZXNvbHZlZFNjaGVtYSh1bnJlc29sdmVkU2NoZW1hQ29udGVudCkpO1xuICAgIH1cbiAgfVxuICBnZXRVbnJlc29sdmVkU2NoZW1hKCkge1xuICAgIGlmICghdGhpcy51bnJlc29sdmVkU2NoZW1hKSB7XG4gICAgICB0aGlzLnVucmVzb2x2ZWRTY2hlbWEgPSB0aGlzLnNlcnZpY2UubG9hZFNjaGVtYSh0aGlzLnVyaSk7XG4gICAgfVxuICAgIHJldHVybiB0aGlzLnVucmVzb2x2ZWRTY2hlbWE7XG4gIH1cbiAgZ2V0UmVzb2x2ZWRTY2hlbWEoKSB7XG4gICAgaWYgKCF0aGlzLnJlc29sdmVkU2NoZW1hKSB7XG4gICAgICB0aGlzLnJlc29sdmVkU2NoZW1hID0gdGhpcy5nZXRVbnJlc29sdmVkU2NoZW1hKCkudGhlbigodW5yZXNvbHZlZCkgPT4ge1xuICAgICAgICByZXR1cm4gdGhpcy5zZXJ2aWNlLnJlc29sdmVTY2hlbWFDb250ZW50KHVucmVzb2x2ZWQsIHRoaXMpO1xuICAgICAgfSk7XG4gICAgfVxuICAgIHJldHVybiB0aGlzLnJlc29sdmVkU2NoZW1hO1xuICB9XG4gIGNsZWFyU2NoZW1hKCkge1xuICAgIGNvbnN0IGhhc0NoYW5nZXMgPSAhIXRoaXMudW5yZXNvbHZlZFNjaGVtYTtcbiAgICB0aGlzLnJlc29sdmVkU2NoZW1hID0gdm9pZCAwO1xuICAgIHRoaXMudW5yZXNvbHZlZFNjaGVtYSA9IHZvaWQgMDtcbiAgICB0aGlzLmRlcGVuZGVuY2llcy5jbGVhcigpO1xuICAgIHRoaXMuYW5jaG9ycyA9IHZvaWQgMDtcbiAgICByZXR1cm4gaGFzQ2hhbmdlcztcbiAgfVxufTtcbnZhciBVbnJlc29sdmVkU2NoZW1hID0gY2xhc3Mge1xuICBjb25zdHJ1Y3RvcihzY2hlbWEsIGVycm9ycyA9IFtdKSB7XG4gICAgdGhpcy5zY2hlbWEgPSBzY2hlbWE7XG4gICAgdGhpcy5lcnJvcnMgPSBlcnJvcnM7XG4gIH1cbn07XG52YXIgUmVzb2x2ZWRTY2hlbWEgPSBjbGFzcyB7XG4gIGNvbnN0cnVjdG9yKHNjaGVtYSwgZXJyb3JzID0gW10sIHdhcm5pbmdzID0gW10sIHNjaGVtYURyYWZ0KSB7XG4gICAgdGhpcy5zY2hlbWEgPSBzY2hlbWE7XG4gICAgdGhpcy5lcnJvcnMgPSBlcnJvcnM7XG4gICAgdGhpcy53YXJuaW5ncyA9IHdhcm5pbmdzO1xuICAgIHRoaXMuc2NoZW1hRHJhZnQgPSBzY2hlbWFEcmFmdDtcbiAgfVxuICBnZXRTZWN0aW9uKHBhdGgpIHtcbiAgICBjb25zdCBzY2hlbWFSZWYgPSB0aGlzLmdldFNlY3Rpb25SZWN1cnNpdmUocGF0aCwgdGhpcy5zY2hlbWEpO1xuICAgIGlmIChzY2hlbWFSZWYpIHtcbiAgICAgIHJldHVybiBhc1NjaGVtYShzY2hlbWFSZWYpO1xuICAgIH1cbiAgICByZXR1cm4gdm9pZCAwO1xuICB9XG4gIGdldFNlY3Rpb25SZWN1cnNpdmUocGF0aCwgc2NoZW1hKSB7XG4gICAgaWYgKCFzY2hlbWEgfHwgdHlwZW9mIHNjaGVtYSA9PT0gXCJib29sZWFuXCIgfHwgcGF0aC5sZW5ndGggPT09IDApIHtcbiAgICAgIHJldHVybiBzY2hlbWE7XG4gICAgfVxuICAgIGNvbnN0IG5leHQgPSBwYXRoLnNoaWZ0KCk7XG4gICAgaWYgKHNjaGVtYS5wcm9wZXJ0aWVzICYmIHR5cGVvZiBzY2hlbWEucHJvcGVydGllc1tuZXh0XSkge1xuICAgICAgcmV0dXJuIHRoaXMuZ2V0U2VjdGlvblJlY3Vyc2l2ZShwYXRoLCBzY2hlbWEucHJvcGVydGllc1tuZXh0XSk7XG4gICAgfSBlbHNlIGlmIChzY2hlbWEucGF0dGVyblByb3BlcnRpZXMpIHtcbiAgICAgIGZvciAoY29uc3QgcGF0dGVybiBvZiBPYmplY3Qua2V5cyhzY2hlbWEucGF0dGVyblByb3BlcnRpZXMpKSB7XG4gICAgICAgIGNvbnN0IHJlZ2V4ID0gZXh0ZW5kZWRSZWdFeHAocGF0dGVybik7XG4gICAgICAgIGlmIChyZWdleD8udGVzdChuZXh0KSkge1xuICAgICAgICAgIHJldHVybiB0aGlzLmdldFNlY3Rpb25SZWN1cnNpdmUocGF0aCwgc2NoZW1hLnBhdHRlcm5Qcm9wZXJ0aWVzW3BhdHRlcm5dKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0gZWxzZSBpZiAodHlwZW9mIHNjaGVtYS5hZGRpdGlvbmFsUHJvcGVydGllcyA9PT0gXCJvYmplY3RcIikge1xuICAgICAgcmV0dXJuIHRoaXMuZ2V0U2VjdGlvblJlY3Vyc2l2ZShwYXRoLCBzY2hlbWEuYWRkaXRpb25hbFByb3BlcnRpZXMpO1xuICAgIH0gZWxzZSBpZiAobmV4dC5tYXRjaChcIlswLTldK1wiKSkge1xuICAgICAgaWYgKEFycmF5LmlzQXJyYXkoc2NoZW1hLml0ZW1zKSkge1xuICAgICAgICBjb25zdCBpbmRleCA9IHBhcnNlSW50KG5leHQsIDEwKTtcbiAgICAgICAgaWYgKCFpc05hTihpbmRleCkgJiYgc2NoZW1hLml0ZW1zW2luZGV4XSkge1xuICAgICAgICAgIHJldHVybiB0aGlzLmdldFNlY3Rpb25SZWN1cnNpdmUocGF0aCwgc2NoZW1hLml0ZW1zW2luZGV4XSk7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSBpZiAoc2NoZW1hLml0ZW1zKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmdldFNlY3Rpb25SZWN1cnNpdmUocGF0aCwgc2NoZW1hLml0ZW1zKTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHZvaWQgMDtcbiAgfVxufTtcbnZhciBKU09OU2NoZW1hU2VydmljZSA9IGNsYXNzIHtcbiAgY29uc3RydWN0b3IocmVxdWVzdFNlcnZpY2UsIGNvbnRleHRTZXJ2aWNlLCBwcm9taXNlQ29uc3RydWN0b3IpIHtcbiAgICB0aGlzLmNvbnRleHRTZXJ2aWNlID0gY29udGV4dFNlcnZpY2U7XG4gICAgdGhpcy5yZXF1ZXN0U2VydmljZSA9IHJlcXVlc3RTZXJ2aWNlO1xuICAgIHRoaXMucHJvbWlzZUNvbnN0cnVjdG9yID0gcHJvbWlzZUNvbnN0cnVjdG9yIHx8IFByb21pc2U7XG4gICAgdGhpcy5jYWxsT25EaXNwb3NlID0gW107XG4gICAgdGhpcy5jb250cmlidXRpb25TY2hlbWFzID0ge307XG4gICAgdGhpcy5jb250cmlidXRpb25Bc3NvY2lhdGlvbnMgPSBbXTtcbiAgICB0aGlzLnNjaGVtYXNCeUlkID0ge307XG4gICAgdGhpcy5maWxlUGF0dGVybkFzc29jaWF0aW9ucyA9IFtdO1xuICAgIHRoaXMucmVnaXN0ZXJlZFNjaGVtYXNJZHMgPSB7fTtcbiAgfVxuICBnZXRSZWdpc3RlcmVkU2NoZW1hSWRzKGZpbHRlcikge1xuICAgIHJldHVybiBPYmplY3Qua2V5cyh0aGlzLnJlZ2lzdGVyZWRTY2hlbWFzSWRzKS5maWx0ZXIoKGlkKSA9PiB7XG4gICAgICBjb25zdCBzY2hlbWUgPSBVUkkyLnBhcnNlKGlkKS5zY2hlbWU7XG4gICAgICByZXR1cm4gc2NoZW1lICE9PSBcInNjaGVtYXNlcnZpY2VcIiAmJiAoIWZpbHRlciB8fCBmaWx0ZXIoc2NoZW1lKSk7XG4gICAgfSk7XG4gIH1cbiAgZ2V0IHByb21pc2UoKSB7XG4gICAgcmV0dXJuIHRoaXMucHJvbWlzZUNvbnN0cnVjdG9yO1xuICB9XG4gIGRpc3Bvc2UoKSB7XG4gICAgd2hpbGUgKHRoaXMuY2FsbE9uRGlzcG9zZS5sZW5ndGggPiAwKSB7XG4gICAgICB0aGlzLmNhbGxPbkRpc3Bvc2UucG9wKCkoKTtcbiAgICB9XG4gIH1cbiAgb25SZXNvdXJjZUNoYW5nZSh1cmkpIHtcbiAgICB0aGlzLmNhY2hlZFNjaGVtYUZvclJlc291cmNlID0gdm9pZCAwO1xuICAgIGxldCBoYXNDaGFuZ2VzID0gZmFsc2U7XG4gICAgdXJpID0gbm9ybWFsaXplSWQodXJpKTtcbiAgICBjb25zdCB0b1dhbGsgPSBbdXJpXTtcbiAgICBjb25zdCBhbGwgPSBPYmplY3Qua2V5cyh0aGlzLnNjaGVtYXNCeUlkKS5tYXAoKGtleSkgPT4gdGhpcy5zY2hlbWFzQnlJZFtrZXldKTtcbiAgICB3aGlsZSAodG9XYWxrLmxlbmd0aCkge1xuICAgICAgY29uc3QgY3VyciA9IHRvV2Fsay5wb3AoKTtcbiAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgYWxsLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGNvbnN0IGhhbmRsZSA9IGFsbFtpXTtcbiAgICAgICAgaWYgKGhhbmRsZSAmJiAoaGFuZGxlLnVyaSA9PT0gY3VyciB8fCBoYW5kbGUuZGVwZW5kZW5jaWVzLmhhcyhjdXJyKSkpIHtcbiAgICAgICAgICBpZiAoaGFuZGxlLnVyaSAhPT0gY3Vycikge1xuICAgICAgICAgICAgdG9XYWxrLnB1c2goaGFuZGxlLnVyaSk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmIChoYW5kbGUuY2xlYXJTY2hlbWEoKSkge1xuICAgICAgICAgICAgaGFzQ2hhbmdlcyA9IHRydWU7XG4gICAgICAgICAgfVxuICAgICAgICAgIGFsbFtpXSA9IHZvaWQgMDtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gaGFzQ2hhbmdlcztcbiAgfVxuICBzZXRTY2hlbWFDb250cmlidXRpb25zKHNjaGVtYUNvbnRyaWJ1dGlvbnMyKSB7XG4gICAgaWYgKHNjaGVtYUNvbnRyaWJ1dGlvbnMyLnNjaGVtYXMpIHtcbiAgICAgIGNvbnN0IHNjaGVtYXMgPSBzY2hlbWFDb250cmlidXRpb25zMi5zY2hlbWFzO1xuICAgICAgZm9yIChjb25zdCBpZCBpbiBzY2hlbWFzKSB7XG4gICAgICAgIGNvbnN0IG5vcm1hbGl6ZWRJZCA9IG5vcm1hbGl6ZUlkKGlkKTtcbiAgICAgICAgdGhpcy5jb250cmlidXRpb25TY2hlbWFzW25vcm1hbGl6ZWRJZF0gPSB0aGlzLmFkZFNjaGVtYUhhbmRsZShub3JtYWxpemVkSWQsIHNjaGVtYXNbaWRdKTtcbiAgICAgIH1cbiAgICB9XG4gICAgaWYgKEFycmF5LmlzQXJyYXkoc2NoZW1hQ29udHJpYnV0aW9uczIuc2NoZW1hQXNzb2NpYXRpb25zKSkge1xuICAgICAgY29uc3Qgc2NoZW1hQXNzb2NpYXRpb25zID0gc2NoZW1hQ29udHJpYnV0aW9uczIuc2NoZW1hQXNzb2NpYXRpb25zO1xuICAgICAgZm9yIChsZXQgc2NoZW1hQXNzb2NpYXRpb24gb2Ygc2NoZW1hQXNzb2NpYXRpb25zKSB7XG4gICAgICAgIGNvbnN0IHVyaXMgPSBzY2hlbWFBc3NvY2lhdGlvbi51cmlzLm1hcChub3JtYWxpemVJZCk7XG4gICAgICAgIGNvbnN0IGFzc29jaWF0aW9uID0gdGhpcy5hZGRGaWxlUGF0dGVybkFzc29jaWF0aW9uKHNjaGVtYUFzc29jaWF0aW9uLnBhdHRlcm4sIHNjaGVtYUFzc29jaWF0aW9uLmZvbGRlclVyaSwgdXJpcyk7XG4gICAgICAgIHRoaXMuY29udHJpYnV0aW9uQXNzb2NpYXRpb25zLnB1c2goYXNzb2NpYXRpb24pO1xuICAgICAgfVxuICAgIH1cbiAgfVxuICBhZGRTY2hlbWFIYW5kbGUoaWQsIHVucmVzb2x2ZWRTY2hlbWFDb250ZW50KSB7XG4gICAgY29uc3Qgc2NoZW1hSGFuZGxlID0gbmV3IFNjaGVtYUhhbmRsZSh0aGlzLCBpZCwgdW5yZXNvbHZlZFNjaGVtYUNvbnRlbnQpO1xuICAgIHRoaXMuc2NoZW1hc0J5SWRbaWRdID0gc2NoZW1hSGFuZGxlO1xuICAgIHJldHVybiBzY2hlbWFIYW5kbGU7XG4gIH1cbiAgZ2V0T3JBZGRTY2hlbWFIYW5kbGUoaWQsIHVucmVzb2x2ZWRTY2hlbWFDb250ZW50KSB7XG4gICAgcmV0dXJuIHRoaXMuc2NoZW1hc0J5SWRbaWRdIHx8IHRoaXMuYWRkU2NoZW1hSGFuZGxlKGlkLCB1bnJlc29sdmVkU2NoZW1hQ29udGVudCk7XG4gIH1cbiAgYWRkRmlsZVBhdHRlcm5Bc3NvY2lhdGlvbihwYXR0ZXJuLCBmb2xkZXJVcmksIHVyaXMpIHtcbiAgICBjb25zdCBmcGEgPSBuZXcgRmlsZVBhdHRlcm5Bc3NvY2lhdGlvbihwYXR0ZXJuLCBmb2xkZXJVcmksIHVyaXMpO1xuICAgIHRoaXMuZmlsZVBhdHRlcm5Bc3NvY2lhdGlvbnMucHVzaChmcGEpO1xuICAgIHJldHVybiBmcGE7XG4gIH1cbiAgcmVnaXN0ZXJFeHRlcm5hbFNjaGVtYShjb25maWcpIHtcbiAgICBjb25zdCBpZCA9IG5vcm1hbGl6ZUlkKGNvbmZpZy51cmkpO1xuICAgIHRoaXMucmVnaXN0ZXJlZFNjaGVtYXNJZHNbaWRdID0gdHJ1ZTtcbiAgICB0aGlzLmNhY2hlZFNjaGVtYUZvclJlc291cmNlID0gdm9pZCAwO1xuICAgIGlmIChjb25maWcuZmlsZU1hdGNoICYmIGNvbmZpZy5maWxlTWF0Y2gubGVuZ3RoKSB7XG4gICAgICB0aGlzLmFkZEZpbGVQYXR0ZXJuQXNzb2NpYXRpb24oY29uZmlnLmZpbGVNYXRjaCwgY29uZmlnLmZvbGRlclVyaSwgW2lkXSk7XG4gICAgfVxuICAgIHJldHVybiBjb25maWcuc2NoZW1hID8gdGhpcy5hZGRTY2hlbWFIYW5kbGUoaWQsIGNvbmZpZy5zY2hlbWEpIDogdGhpcy5nZXRPckFkZFNjaGVtYUhhbmRsZShpZCk7XG4gIH1cbiAgY2xlYXJFeHRlcm5hbFNjaGVtYXMoKSB7XG4gICAgdGhpcy5zY2hlbWFzQnlJZCA9IHt9O1xuICAgIHRoaXMuZmlsZVBhdHRlcm5Bc3NvY2lhdGlvbnMgPSBbXTtcbiAgICB0aGlzLnJlZ2lzdGVyZWRTY2hlbWFzSWRzID0ge307XG4gICAgdGhpcy5jYWNoZWRTY2hlbWFGb3JSZXNvdXJjZSA9IHZvaWQgMDtcbiAgICBmb3IgKGNvbnN0IGlkIGluIHRoaXMuY29udHJpYnV0aW9uU2NoZW1hcykge1xuICAgICAgdGhpcy5zY2hlbWFzQnlJZFtpZF0gPSB0aGlzLmNvbnRyaWJ1dGlvblNjaGVtYXNbaWRdO1xuICAgICAgdGhpcy5yZWdpc3RlcmVkU2NoZW1hc0lkc1tpZF0gPSB0cnVlO1xuICAgIH1cbiAgICBmb3IgKGNvbnN0IGNvbnRyaWJ1dGlvbkFzc29jaWF0aW9uIG9mIHRoaXMuY29udHJpYnV0aW9uQXNzb2NpYXRpb25zKSB7XG4gICAgICB0aGlzLmZpbGVQYXR0ZXJuQXNzb2NpYXRpb25zLnB1c2goY29udHJpYnV0aW9uQXNzb2NpYXRpb24pO1xuICAgIH1cbiAgfVxuICBnZXRSZXNvbHZlZFNjaGVtYShzY2hlbWFJZCkge1xuICAgIGNvbnN0IGlkID0gbm9ybWFsaXplSWQoc2NoZW1hSWQpO1xuICAgIGNvbnN0IHNjaGVtYUhhbmRsZSA9IHRoaXMuc2NoZW1hc0J5SWRbaWRdO1xuICAgIGlmIChzY2hlbWFIYW5kbGUpIHtcbiAgICAgIHJldHVybiBzY2hlbWFIYW5kbGUuZ2V0UmVzb2x2ZWRTY2hlbWEoKTtcbiAgICB9XG4gICAgcmV0dXJuIHRoaXMucHJvbWlzZS5yZXNvbHZlKHZvaWQgMCk7XG4gIH1cbiAgbG9hZFNjaGVtYSh1cmwpIHtcbiAgICBpZiAoIXRoaXMucmVxdWVzdFNlcnZpY2UpIHtcbiAgICAgIGNvbnN0IGVycm9yTWVzc2FnZSA9IHQoXCJVbmFibGUgdG8gbG9hZCBzY2hlbWEgZnJvbSAnezB9Jy4gTm8gc2NoZW1hIHJlcXVlc3Qgc2VydmljZSBhdmFpbGFibGVcIiwgdG9EaXNwbGF5U3RyaW5nKHVybCkpO1xuICAgICAgcmV0dXJuIHRoaXMucHJvbWlzZS5yZXNvbHZlKG5ldyBVbnJlc29sdmVkU2NoZW1hKHt9LCBbZXJyb3JNZXNzYWdlXSkpO1xuICAgIH1cbiAgICBpZiAodXJsLnN0YXJ0c1dpdGgoXCJodHRwOi8vanNvbi1zY2hlbWEub3JnL1wiKSkge1xuICAgICAgdXJsID0gXCJodHRwc1wiICsgdXJsLnN1YnN0cmluZyg0KTtcbiAgICB9XG4gICAgcmV0dXJuIHRoaXMucmVxdWVzdFNlcnZpY2UodXJsKS50aGVuKChjb250ZW50KSA9PiB7XG4gICAgICBpZiAoIWNvbnRlbnQpIHtcbiAgICAgICAgY29uc3QgZXJyb3JNZXNzYWdlID0gdChcIlVuYWJsZSB0byBsb2FkIHNjaGVtYSBmcm9tICd7MH0nOiBObyBjb250ZW50LlwiLCB0b0Rpc3BsYXlTdHJpbmcodXJsKSk7XG4gICAgICAgIHJldHVybiBuZXcgVW5yZXNvbHZlZFNjaGVtYSh7fSwgW2Vycm9yTWVzc2FnZV0pO1xuICAgICAgfVxuICAgICAgY29uc3QgZXJyb3JzID0gW107XG4gICAgICBpZiAoY29udGVudC5jaGFyQ29kZUF0KDApID09PSA2NTI3OSkge1xuICAgICAgICBlcnJvcnMucHVzaCh0KFwiUHJvYmxlbSByZWFkaW5nIGNvbnRlbnQgZnJvbSAnezB9JzogVVRGLTggd2l0aCBCT00gZGV0ZWN0ZWQsIG9ubHkgVVRGIDggaXMgYWxsb3dlZC5cIiwgdG9EaXNwbGF5U3RyaW5nKHVybCkpKTtcbiAgICAgICAgY29udGVudCA9IGNvbnRlbnQudHJpbVN0YXJ0KCk7XG4gICAgICB9XG4gICAgICBsZXQgc2NoZW1hQ29udGVudCA9IHt9O1xuICAgICAgY29uc3QganNvbkVycm9ycyA9IFtdO1xuICAgICAgc2NoZW1hQ29udGVudCA9IHBhcnNlMihjb250ZW50LCBqc29uRXJyb3JzKTtcbiAgICAgIGlmIChqc29uRXJyb3JzLmxlbmd0aCkge1xuICAgICAgICBlcnJvcnMucHVzaCh0KFwiVW5hYmxlIHRvIHBhcnNlIGNvbnRlbnQgZnJvbSAnezB9JzogUGFyc2UgZXJyb3IgYXQgb2Zmc2V0IHsxfS5cIiwgdG9EaXNwbGF5U3RyaW5nKHVybCksIGpzb25FcnJvcnNbMF0ub2Zmc2V0KSk7XG4gICAgICB9XG4gICAgICByZXR1cm4gbmV3IFVucmVzb2x2ZWRTY2hlbWEoc2NoZW1hQ29udGVudCwgZXJyb3JzKTtcbiAgICB9LCAoZXJyb3IpID0+IHtcbiAgICAgIGxldCBlcnJvck1lc3NhZ2UgPSBlcnJvci50b1N0cmluZygpO1xuICAgICAgY29uc3QgZXJyb3JTcGxpdCA9IGVycm9yLnRvU3RyaW5nKCkuc3BsaXQoXCJFcnJvcjogXCIpO1xuICAgICAgaWYgKGVycm9yU3BsaXQubGVuZ3RoID4gMSkge1xuICAgICAgICBlcnJvck1lc3NhZ2UgPSBlcnJvclNwbGl0WzFdO1xuICAgICAgfVxuICAgICAgaWYgKGVuZHNXaXRoKGVycm9yTWVzc2FnZSwgXCIuXCIpKSB7XG4gICAgICAgIGVycm9yTWVzc2FnZSA9IGVycm9yTWVzc2FnZS5zdWJzdHIoMCwgZXJyb3JNZXNzYWdlLmxlbmd0aCAtIDEpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIG5ldyBVbnJlc29sdmVkU2NoZW1hKHt9LCBbdChcIlVuYWJsZSB0byBsb2FkIHNjaGVtYSBmcm9tICd7MH0nOiB7MX0uXCIsIHRvRGlzcGxheVN0cmluZyh1cmwpLCBlcnJvck1lc3NhZ2UpXSk7XG4gICAgfSk7XG4gIH1cbiAgcmVzb2x2ZVNjaGVtYUNvbnRlbnQoc2NoZW1hVG9SZXNvbHZlLCBoYW5kbGUpIHtcbiAgICBjb25zdCByZXNvbHZlRXJyb3JzID0gc2NoZW1hVG9SZXNvbHZlLmVycm9ycy5zbGljZSgwKTtcbiAgICBjb25zdCBzY2hlbWEgPSBzY2hlbWFUb1Jlc29sdmUuc2NoZW1hO1xuICAgIGxldCBzY2hlbWFEcmFmdCA9IHNjaGVtYS4kc2NoZW1hID8gbm9ybWFsaXplSWQoc2NoZW1hLiRzY2hlbWEpIDogdm9pZCAwO1xuICAgIGlmIChzY2hlbWFEcmFmdCA9PT0gXCJodHRwOi8vanNvbi1zY2hlbWEub3JnL2RyYWZ0LTAzL3NjaGVtYVwiKSB7XG4gICAgICByZXR1cm4gdGhpcy5wcm9taXNlLnJlc29sdmUobmV3IFJlc29sdmVkU2NoZW1hKHt9LCBbdChcIkRyYWZ0LTAzIHNjaGVtYXMgYXJlIG5vdCBzdXBwb3J0ZWQuXCIpXSwgW10sIHNjaGVtYURyYWZ0KSk7XG4gICAgfVxuICAgIGxldCB1c2VzVW5zdXBwb3J0ZWRGZWF0dXJlcyA9IC8qIEBfX1BVUkVfXyAqLyBuZXcgU2V0KCk7XG4gICAgY29uc3QgY29udGV4dFNlcnZpY2UgPSB0aGlzLmNvbnRleHRTZXJ2aWNlO1xuICAgIGNvbnN0IGZpbmRTZWN0aW9uQnlKU09OUG9pbnRlciA9IChzY2hlbWEyLCBwYXRoKSA9PiB7XG4gICAgICBwYXRoID0gZGVjb2RlVVJJQ29tcG9uZW50KHBhdGgpO1xuICAgICAgbGV0IGN1cnJlbnQgPSBzY2hlbWEyO1xuICAgICAgaWYgKHBhdGhbMF0gPT09IFwiL1wiKSB7XG4gICAgICAgIHBhdGggPSBwYXRoLnN1YnN0cmluZygxKTtcbiAgICAgIH1cbiAgICAgIHBhdGguc3BsaXQoXCIvXCIpLnNvbWUoKHBhcnQpID0+IHtcbiAgICAgICAgcGFydCA9IHBhcnQucmVwbGFjZSgvfjEvZywgXCIvXCIpLnJlcGxhY2UoL34wL2csIFwiflwiKTtcbiAgICAgICAgY3VycmVudCA9IGN1cnJlbnRbcGFydF07XG4gICAgICAgIHJldHVybiAhY3VycmVudDtcbiAgICAgIH0pO1xuICAgICAgcmV0dXJuIGN1cnJlbnQ7XG4gICAgfTtcbiAgICBjb25zdCBmaW5kU2NoZW1hQnlJZCA9IChzY2hlbWEyLCBoYW5kbGUyLCBpZCkgPT4ge1xuICAgICAgaWYgKCFoYW5kbGUyLmFuY2hvcnMpIHtcbiAgICAgICAgaGFuZGxlMi5hbmNob3JzID0gY29sbGVjdEFuY2hvcnMoc2NoZW1hMik7XG4gICAgICB9XG4gICAgICByZXR1cm4gaGFuZGxlMi5hbmNob3JzLmdldChpZCk7XG4gICAgfTtcbiAgICBjb25zdCBtZXJnZSA9ICh0YXJnZXQsIHNlY3Rpb24pID0+IHtcbiAgICAgIGZvciAoY29uc3Qga2V5IGluIHNlY3Rpb24pIHtcbiAgICAgICAgaWYgKHNlY3Rpb24uaGFzT3duUHJvcGVydHkoa2V5KSAmJiBrZXkgIT09IFwiaWRcIiAmJiBrZXkgIT09IFwiJGlkXCIpIHtcbiAgICAgICAgICB0YXJnZXRba2V5XSA9IHNlY3Rpb25ba2V5XTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH07XG4gICAgY29uc3QgbWVyZ2VSZWYgPSAodGFyZ2V0LCBzb3VyY2VSb290LCBzb3VyY2VIYW5kbGUsIHJlZlNlZ21lbnQpID0+IHtcbiAgICAgIGxldCBzZWN0aW9uO1xuICAgICAgaWYgKHJlZlNlZ21lbnQgPT09IHZvaWQgMCB8fCByZWZTZWdtZW50Lmxlbmd0aCA9PT0gMCkge1xuICAgICAgICBzZWN0aW9uID0gc291cmNlUm9vdDtcbiAgICAgIH0gZWxzZSBpZiAocmVmU2VnbWVudC5jaGFyQXQoMCkgPT09IFwiL1wiKSB7XG4gICAgICAgIHNlY3Rpb24gPSBmaW5kU2VjdGlvbkJ5SlNPTlBvaW50ZXIoc291cmNlUm9vdCwgcmVmU2VnbWVudCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBzZWN0aW9uID0gZmluZFNjaGVtYUJ5SWQoc291cmNlUm9vdCwgc291cmNlSGFuZGxlLCByZWZTZWdtZW50KTtcbiAgICAgIH1cbiAgICAgIGlmIChzZWN0aW9uKSB7XG4gICAgICAgIG1lcmdlKHRhcmdldCwgc2VjdGlvbik7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXNvbHZlRXJyb3JzLnB1c2godChcIiRyZWYgJ3swfScgaW4gJ3sxfScgY2FuIG5vdCBiZSByZXNvbHZlZC5cIiwgcmVmU2VnbWVudCB8fCBcIlwiLCBzb3VyY2VIYW5kbGUudXJpKSk7XG4gICAgICB9XG4gICAgfTtcbiAgICBjb25zdCByZXNvbHZlRXh0ZXJuYWxMaW5rID0gKG5vZGUsIHVyaSwgcmVmU2VnbWVudCwgcGFyZW50SGFuZGxlKSA9PiB7XG4gICAgICBpZiAoY29udGV4dFNlcnZpY2UgJiYgIS9eW0EtWmEtel1bQS1aYS16MC05K1xcLS4rXSo6XFwvXFwvLiovLnRlc3QodXJpKSkge1xuICAgICAgICB1cmkgPSBjb250ZXh0U2VydmljZS5yZXNvbHZlUmVsYXRpdmVQYXRoKHVyaSwgcGFyZW50SGFuZGxlLnVyaSk7XG4gICAgICB9XG4gICAgICB1cmkgPSBub3JtYWxpemVJZCh1cmkpO1xuICAgICAgY29uc3QgcmVmZXJlbmNlZEhhbmRsZSA9IHRoaXMuZ2V0T3JBZGRTY2hlbWFIYW5kbGUodXJpKTtcbiAgICAgIHJldHVybiByZWZlcmVuY2VkSGFuZGxlLmdldFVucmVzb2x2ZWRTY2hlbWEoKS50aGVuKCh1bnJlc29sdmVkU2NoZW1hKSA9PiB7XG4gICAgICAgIHBhcmVudEhhbmRsZS5kZXBlbmRlbmNpZXMuYWRkKHVyaSk7XG4gICAgICAgIGlmICh1bnJlc29sdmVkU2NoZW1hLmVycm9ycy5sZW5ndGgpIHtcbiAgICAgICAgICBjb25zdCBsb2MgPSByZWZTZWdtZW50ID8gdXJpICsgXCIjXCIgKyByZWZTZWdtZW50IDogdXJpO1xuICAgICAgICAgIHJlc29sdmVFcnJvcnMucHVzaCh0KFwiUHJvYmxlbXMgbG9hZGluZyByZWZlcmVuY2UgJ3swfSc6IHsxfVwiLCBsb2MsIHVucmVzb2x2ZWRTY2hlbWEuZXJyb3JzWzBdKSk7XG4gICAgICAgIH1cbiAgICAgICAgbWVyZ2VSZWYobm9kZSwgdW5yZXNvbHZlZFNjaGVtYS5zY2hlbWEsIHJlZmVyZW5jZWRIYW5kbGUsIHJlZlNlZ21lbnQpO1xuICAgICAgICByZXR1cm4gcmVzb2x2ZVJlZnMobm9kZSwgdW5yZXNvbHZlZFNjaGVtYS5zY2hlbWEsIHJlZmVyZW5jZWRIYW5kbGUpO1xuICAgICAgfSk7XG4gICAgfTtcbiAgICBjb25zdCByZXNvbHZlUmVmcyA9IChub2RlLCBwYXJlbnRTY2hlbWEsIHBhcmVudEhhbmRsZSkgPT4ge1xuICAgICAgY29uc3Qgb3BlblByb21pc2VzID0gW107XG4gICAgICB0aGlzLnRyYXZlcnNlTm9kZXMobm9kZSwgKG5leHQpID0+IHtcbiAgICAgICAgY29uc3Qgc2VlblJlZnMgPSAvKiBAX19QVVJFX18gKi8gbmV3IFNldCgpO1xuICAgICAgICB3aGlsZSAobmV4dC4kcmVmKSB7XG4gICAgICAgICAgY29uc3QgcmVmID0gbmV4dC4kcmVmO1xuICAgICAgICAgIGNvbnN0IHNlZ21lbnRzID0gcmVmLnNwbGl0KFwiI1wiLCAyKTtcbiAgICAgICAgICBkZWxldGUgbmV4dC4kcmVmO1xuICAgICAgICAgIGlmIChzZWdtZW50c1swXS5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICBvcGVuUHJvbWlzZXMucHVzaChyZXNvbHZlRXh0ZXJuYWxMaW5rKG5leHQsIHNlZ21lbnRzWzBdLCBzZWdtZW50c1sxXSwgcGFyZW50SGFuZGxlKSk7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGlmICghc2VlblJlZnMuaGFzKHJlZikpIHtcbiAgICAgICAgICAgICAgY29uc3QgaWQgPSBzZWdtZW50c1sxXTtcbiAgICAgICAgICAgICAgbWVyZ2VSZWYobmV4dCwgcGFyZW50U2NoZW1hLCBwYXJlbnRIYW5kbGUsIGlkKTtcbiAgICAgICAgICAgICAgc2VlblJlZnMuYWRkKHJlZik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGlmIChuZXh0LiRyZWN1cnNpdmVSZWYpIHtcbiAgICAgICAgICB1c2VzVW5zdXBwb3J0ZWRGZWF0dXJlcy5hZGQoXCIkcmVjdXJzaXZlUmVmXCIpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChuZXh0LiRkeW5hbWljUmVmKSB7XG4gICAgICAgICAgdXNlc1Vuc3VwcG9ydGVkRmVhdHVyZXMuYWRkKFwiJGR5bmFtaWNSZWZcIik7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgICAgcmV0dXJuIHRoaXMucHJvbWlzZS5hbGwob3BlblByb21pc2VzKTtcbiAgICB9O1xuICAgIGNvbnN0IGNvbGxlY3RBbmNob3JzID0gKHJvb3QpID0+IHtcbiAgICAgIGNvbnN0IHJlc3VsdCA9IC8qIEBfX1BVUkVfXyAqLyBuZXcgTWFwKCk7XG4gICAgICB0aGlzLnRyYXZlcnNlTm9kZXMocm9vdCwgKG5leHQpID0+IHtcbiAgICAgICAgY29uc3QgaWQgPSBuZXh0LiRpZCB8fCBuZXh0LmlkO1xuICAgICAgICBjb25zdCBhbmNob3IgPSBpc1N0cmluZyhpZCkgJiYgaWQuY2hhckF0KDApID09PSBcIiNcIiA/IGlkLnN1YnN0cmluZygxKSA6IG5leHQuJGFuY2hvcjtcbiAgICAgICAgaWYgKGFuY2hvcikge1xuICAgICAgICAgIGlmIChyZXN1bHQuaGFzKGFuY2hvcikpIHtcbiAgICAgICAgICAgIHJlc29sdmVFcnJvcnMucHVzaCh0KFwiRHVwbGljYXRlIGFuY2hvciBkZWNsYXJhdGlvbjogJ3swfSdcIiwgYW5jaG9yKSk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJlc3VsdC5zZXQoYW5jaG9yLCBuZXh0KTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgaWYgKG5leHQuJHJlY3Vyc2l2ZUFuY2hvcikge1xuICAgICAgICAgIHVzZXNVbnN1cHBvcnRlZEZlYXR1cmVzLmFkZChcIiRyZWN1cnNpdmVBbmNob3JcIik7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKG5leHQuJGR5bmFtaWNBbmNob3IpIHtcbiAgICAgICAgICB1c2VzVW5zdXBwb3J0ZWRGZWF0dXJlcy5hZGQoXCIkZHluYW1pY0FuY2hvclwiKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH07XG4gICAgcmV0dXJuIHJlc29sdmVSZWZzKHNjaGVtYSwgc2NoZW1hLCBoYW5kbGUpLnRoZW4oKF8pID0+IHtcbiAgICAgIGxldCByZXNvbHZlV2FybmluZ3MgPSBbXTtcbiAgICAgIGlmICh1c2VzVW5zdXBwb3J0ZWRGZWF0dXJlcy5zaXplKSB7XG4gICAgICAgIHJlc29sdmVXYXJuaW5ncy5wdXNoKHQoXCJUaGUgc2NoZW1hIHVzZXMgbWV0YS1zY2hlbWEgZmVhdHVyZXMgKHswfSkgdGhhdCBhcmUgbm90IHlldCBzdXBwb3J0ZWQgYnkgdGhlIHZhbGlkYXRvci5cIiwgQXJyYXkuZnJvbSh1c2VzVW5zdXBwb3J0ZWRGZWF0dXJlcy5rZXlzKCkpLmpvaW4oXCIsIFwiKSkpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIG5ldyBSZXNvbHZlZFNjaGVtYShzY2hlbWEsIHJlc29sdmVFcnJvcnMsIHJlc29sdmVXYXJuaW5ncywgc2NoZW1hRHJhZnQpO1xuICAgIH0pO1xuICB9XG4gIHRyYXZlcnNlTm9kZXMocm9vdCwgaGFuZGxlKSB7XG4gICAgaWYgKCFyb290IHx8IHR5cGVvZiByb290ICE9PSBcIm9iamVjdFwiKSB7XG4gICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKG51bGwpO1xuICAgIH1cbiAgICBjb25zdCBzZWVuID0gLyogQF9fUFVSRV9fICovIG5ldyBTZXQoKTtcbiAgICBjb25zdCBjb2xsZWN0RW50cmllcyA9ICguLi5lbnRyaWVzKSA9PiB7XG4gICAgICBmb3IgKGNvbnN0IGVudHJ5IG9mIGVudHJpZXMpIHtcbiAgICAgICAgaWYgKGlzT2JqZWN0KGVudHJ5KSkge1xuICAgICAgICAgIHRvV2Fsay5wdXNoKGVudHJ5KTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH07XG4gICAgY29uc3QgY29sbGVjdE1hcEVudHJpZXMgPSAoLi4ubWFwcykgPT4ge1xuICAgICAgZm9yIChjb25zdCBtYXAgb2YgbWFwcykge1xuICAgICAgICBpZiAoaXNPYmplY3QobWFwKSkge1xuICAgICAgICAgIGZvciAoY29uc3QgayBpbiBtYXApIHtcbiAgICAgICAgICAgIGNvbnN0IGtleSA9IGs7XG4gICAgICAgICAgICBjb25zdCBlbnRyeSA9IG1hcFtrZXldO1xuICAgICAgICAgICAgaWYgKGlzT2JqZWN0KGVudHJ5KSkge1xuICAgICAgICAgICAgICB0b1dhbGsucHVzaChlbnRyeSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfTtcbiAgICBjb25zdCBjb2xsZWN0QXJyYXlFbnRyaWVzID0gKC4uLmFycmF5cykgPT4ge1xuICAgICAgZm9yIChjb25zdCBhcnJheSBvZiBhcnJheXMpIHtcbiAgICAgICAgaWYgKEFycmF5LmlzQXJyYXkoYXJyYXkpKSB7XG4gICAgICAgICAgZm9yIChjb25zdCBlbnRyeSBvZiBhcnJheSkge1xuICAgICAgICAgICAgaWYgKGlzT2JqZWN0KGVudHJ5KSkge1xuICAgICAgICAgICAgICB0b1dhbGsucHVzaChlbnRyeSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfTtcbiAgICBjb25zdCBjb2xsZWN0RW50cnlPckFycmF5RW50cmllcyA9IChpdGVtcykgPT4ge1xuICAgICAgaWYgKEFycmF5LmlzQXJyYXkoaXRlbXMpKSB7XG4gICAgICAgIGZvciAoY29uc3QgZW50cnkgb2YgaXRlbXMpIHtcbiAgICAgICAgICBpZiAoaXNPYmplY3QoZW50cnkpKSB7XG4gICAgICAgICAgICB0b1dhbGsucHVzaChlbnRyeSk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9IGVsc2UgaWYgKGlzT2JqZWN0KGl0ZW1zKSkge1xuICAgICAgICB0b1dhbGsucHVzaChpdGVtcyk7XG4gICAgICB9XG4gICAgfTtcbiAgICBjb25zdCB0b1dhbGsgPSBbcm9vdF07XG4gICAgbGV0IG5leHQgPSB0b1dhbGsucG9wKCk7XG4gICAgd2hpbGUgKG5leHQpIHtcbiAgICAgIGlmICghc2Vlbi5oYXMobmV4dCkpIHtcbiAgICAgICAgc2Vlbi5hZGQobmV4dCk7XG4gICAgICAgIGhhbmRsZShuZXh0KTtcbiAgICAgICAgY29sbGVjdEVudHJpZXMobmV4dC5hZGRpdGlvbmFsSXRlbXMsIG5leHQuYWRkaXRpb25hbFByb3BlcnRpZXMsIG5leHQubm90LCBuZXh0LmNvbnRhaW5zLCBuZXh0LnByb3BlcnR5TmFtZXMsIG5leHQuaWYsIG5leHQudGhlbiwgbmV4dC5lbHNlLCBuZXh0LnVuZXZhbHVhdGVkSXRlbXMsIG5leHQudW5ldmFsdWF0ZWRQcm9wZXJ0aWVzKTtcbiAgICAgICAgY29sbGVjdE1hcEVudHJpZXMobmV4dC5kZWZpbml0aW9ucywgbmV4dC4kZGVmcywgbmV4dC5wcm9wZXJ0aWVzLCBuZXh0LnBhdHRlcm5Qcm9wZXJ0aWVzLCBuZXh0LmRlcGVuZGVuY2llcywgbmV4dC5kZXBlbmRlbnRTY2hlbWFzKTtcbiAgICAgICAgY29sbGVjdEFycmF5RW50cmllcyhuZXh0LmFueU9mLCBuZXh0LmFsbE9mLCBuZXh0Lm9uZU9mLCBuZXh0LnByZWZpeEl0ZW1zKTtcbiAgICAgICAgY29sbGVjdEVudHJ5T3JBcnJheUVudHJpZXMobmV4dC5pdGVtcyk7XG4gICAgICB9XG4gICAgICBuZXh0ID0gdG9XYWxrLnBvcCgpO1xuICAgIH1cbiAgfVxuICBnZXRTY2hlbWFGcm9tUHJvcGVydHkocmVzb3VyY2UsIGRvY3VtZW50KSB7XG4gICAgaWYgKGRvY3VtZW50LnJvb3Q/LnR5cGUgPT09IFwib2JqZWN0XCIpIHtcbiAgICAgIGZvciAoY29uc3QgcCBvZiBkb2N1bWVudC5yb290LnByb3BlcnRpZXMpIHtcbiAgICAgICAgaWYgKHAua2V5Tm9kZS52YWx1ZSA9PT0gXCIkc2NoZW1hXCIgJiYgcC52YWx1ZU5vZGU/LnR5cGUgPT09IFwic3RyaW5nXCIpIHtcbiAgICAgICAgICBsZXQgc2NoZW1hSWQgPSBwLnZhbHVlTm9kZS52YWx1ZTtcbiAgICAgICAgICBpZiAodGhpcy5jb250ZXh0U2VydmljZSAmJiAhL15cXHdbXFx3XFxkKy4tXSo6Ly50ZXN0KHNjaGVtYUlkKSkge1xuICAgICAgICAgICAgc2NoZW1hSWQgPSB0aGlzLmNvbnRleHRTZXJ2aWNlLnJlc29sdmVSZWxhdGl2ZVBhdGgoc2NoZW1hSWQsIHJlc291cmNlKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgcmV0dXJuIHNjaGVtYUlkO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiB2b2lkIDA7XG4gIH1cbiAgZ2V0QXNzb2NpYXRlZFNjaGVtYXMocmVzb3VyY2UpIHtcbiAgICBjb25zdCBzZWVuID0gLyogQF9fUFVSRV9fICovIE9iamVjdC5jcmVhdGUobnVsbCk7XG4gICAgY29uc3Qgc2NoZW1hcyA9IFtdO1xuICAgIGNvbnN0IG5vcm1hbGl6ZWRSZXNvdXJjZSA9IG5vcm1hbGl6ZVJlc291cmNlRm9yTWF0Y2hpbmcocmVzb3VyY2UpO1xuICAgIGZvciAoY29uc3QgZW50cnkgb2YgdGhpcy5maWxlUGF0dGVybkFzc29jaWF0aW9ucykge1xuICAgICAgaWYgKGVudHJ5Lm1hdGNoZXNQYXR0ZXJuKG5vcm1hbGl6ZWRSZXNvdXJjZSkpIHtcbiAgICAgICAgZm9yIChjb25zdCBzY2hlbWFJZCBvZiBlbnRyeS5nZXRVUklzKCkpIHtcbiAgICAgICAgICBpZiAoIXNlZW5bc2NoZW1hSWRdKSB7XG4gICAgICAgICAgICBzY2hlbWFzLnB1c2goc2NoZW1hSWQpO1xuICAgICAgICAgICAgc2VlbltzY2hlbWFJZF0gPSB0cnVlO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gc2NoZW1hcztcbiAgfVxuICBnZXRTY2hlbWFVUklzRm9yUmVzb3VyY2UocmVzb3VyY2UsIGRvY3VtZW50KSB7XG4gICAgbGV0IHNjaGVtZUlkID0gZG9jdW1lbnQgJiYgdGhpcy5nZXRTY2hlbWFGcm9tUHJvcGVydHkocmVzb3VyY2UsIGRvY3VtZW50KTtcbiAgICBpZiAoc2NoZW1lSWQpIHtcbiAgICAgIHJldHVybiBbc2NoZW1lSWRdO1xuICAgIH1cbiAgICByZXR1cm4gdGhpcy5nZXRBc3NvY2lhdGVkU2NoZW1hcyhyZXNvdXJjZSk7XG4gIH1cbiAgZ2V0U2NoZW1hRm9yUmVzb3VyY2UocmVzb3VyY2UsIGRvY3VtZW50KSB7XG4gICAgaWYgKGRvY3VtZW50KSB7XG4gICAgICBsZXQgc2NoZW1lSWQgPSB0aGlzLmdldFNjaGVtYUZyb21Qcm9wZXJ0eShyZXNvdXJjZSwgZG9jdW1lbnQpO1xuICAgICAgaWYgKHNjaGVtZUlkKSB7XG4gICAgICAgIGNvbnN0IGlkID0gbm9ybWFsaXplSWQoc2NoZW1lSWQpO1xuICAgICAgICByZXR1cm4gdGhpcy5nZXRPckFkZFNjaGVtYUhhbmRsZShpZCkuZ2V0UmVzb2x2ZWRTY2hlbWEoKTtcbiAgICAgIH1cbiAgICB9XG4gICAgaWYgKHRoaXMuY2FjaGVkU2NoZW1hRm9yUmVzb3VyY2UgJiYgdGhpcy5jYWNoZWRTY2hlbWFGb3JSZXNvdXJjZS5yZXNvdXJjZSA9PT0gcmVzb3VyY2UpIHtcbiAgICAgIHJldHVybiB0aGlzLmNhY2hlZFNjaGVtYUZvclJlc291cmNlLnJlc29sdmVkU2NoZW1hO1xuICAgIH1cbiAgICBjb25zdCBzY2hlbWFzID0gdGhpcy5nZXRBc3NvY2lhdGVkU2NoZW1hcyhyZXNvdXJjZSk7XG4gICAgY29uc3QgcmVzb2x2ZWRTY2hlbWEgPSBzY2hlbWFzLmxlbmd0aCA+IDAgPyB0aGlzLmNyZWF0ZUNvbWJpbmVkU2NoZW1hKHJlc291cmNlLCBzY2hlbWFzKS5nZXRSZXNvbHZlZFNjaGVtYSgpIDogdGhpcy5wcm9taXNlLnJlc29sdmUodm9pZCAwKTtcbiAgICB0aGlzLmNhY2hlZFNjaGVtYUZvclJlc291cmNlID0geyByZXNvdXJjZSwgcmVzb2x2ZWRTY2hlbWEgfTtcbiAgICByZXR1cm4gcmVzb2x2ZWRTY2hlbWE7XG4gIH1cbiAgY3JlYXRlQ29tYmluZWRTY2hlbWEocmVzb3VyY2UsIHNjaGVtYUlkcykge1xuICAgIGlmIChzY2hlbWFJZHMubGVuZ3RoID09PSAxKSB7XG4gICAgICByZXR1cm4gdGhpcy5nZXRPckFkZFNjaGVtYUhhbmRsZShzY2hlbWFJZHNbMF0pO1xuICAgIH0gZWxzZSB7XG4gICAgICBjb25zdCBjb21iaW5lZFNjaGVtYUlkID0gXCJzY2hlbWFzZXJ2aWNlOi8vY29tYmluZWRTY2hlbWEvXCIgKyBlbmNvZGVVUklDb21wb25lbnQocmVzb3VyY2UpO1xuICAgICAgY29uc3QgY29tYmluZWRTY2hlbWEgPSB7XG4gICAgICAgIGFsbE9mOiBzY2hlbWFJZHMubWFwKChzY2hlbWFJZCkgPT4gKHsgJHJlZjogc2NoZW1hSWQgfSkpXG4gICAgICB9O1xuICAgICAgcmV0dXJuIHRoaXMuYWRkU2NoZW1hSGFuZGxlKGNvbWJpbmVkU2NoZW1hSWQsIGNvbWJpbmVkU2NoZW1hKTtcbiAgICB9XG4gIH1cbiAgZ2V0TWF0Y2hpbmdTY2hlbWFzKGRvY3VtZW50LCBqc29uRG9jdW1lbnQsIHNjaGVtYSkge1xuICAgIGlmIChzY2hlbWEpIHtcbiAgICAgIGNvbnN0IGlkID0gc2NoZW1hLmlkIHx8IFwic2NoZW1hc2VydmljZTovL3VudGl0bGVkL21hdGNoaW5nU2NoZW1hcy9cIiArIGlkQ291bnRlcjIrKztcbiAgICAgIGNvbnN0IGhhbmRsZSA9IHRoaXMuYWRkU2NoZW1hSGFuZGxlKGlkLCBzY2hlbWEpO1xuICAgICAgcmV0dXJuIGhhbmRsZS5nZXRSZXNvbHZlZFNjaGVtYSgpLnRoZW4oKHJlc29sdmVkU2NoZW1hKSA9PiB7XG4gICAgICAgIHJldHVybiBqc29uRG9jdW1lbnQuZ2V0TWF0Y2hpbmdTY2hlbWFzKHJlc29sdmVkU2NoZW1hLnNjaGVtYSkuZmlsdGVyKChzKSA9PiAhcy5pbnZlcnRlZCk7XG4gICAgICB9KTtcbiAgICB9XG4gICAgcmV0dXJuIHRoaXMuZ2V0U2NoZW1hRm9yUmVzb3VyY2UoZG9jdW1lbnQudXJpLCBqc29uRG9jdW1lbnQpLnRoZW4oKHNjaGVtYTIpID0+IHtcbiAgICAgIGlmIChzY2hlbWEyKSB7XG4gICAgICAgIHJldHVybiBqc29uRG9jdW1lbnQuZ2V0TWF0Y2hpbmdTY2hlbWFzKHNjaGVtYTIuc2NoZW1hKS5maWx0ZXIoKHMpID0+ICFzLmludmVydGVkKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBbXTtcbiAgICB9KTtcbiAgfVxufTtcbnZhciBpZENvdW50ZXIyID0gMDtcbmZ1bmN0aW9uIG5vcm1hbGl6ZUlkKGlkKSB7XG4gIHRyeSB7XG4gICAgcmV0dXJuIFVSSTIucGFyc2UoaWQpLnRvU3RyaW5nKHRydWUpO1xuICB9IGNhdGNoIChlKSB7XG4gICAgcmV0dXJuIGlkO1xuICB9XG59XG5mdW5jdGlvbiBub3JtYWxpemVSZXNvdXJjZUZvck1hdGNoaW5nKHJlc291cmNlKSB7XG4gIHRyeSB7XG4gICAgcmV0dXJuIFVSSTIucGFyc2UocmVzb3VyY2UpLndpdGgoeyBmcmFnbWVudDogbnVsbCwgcXVlcnk6IG51bGwgfSkudG9TdHJpbmcodHJ1ZSk7XG4gIH0gY2F0Y2ggKGUpIHtcbiAgICByZXR1cm4gcmVzb3VyY2U7XG4gIH1cbn1cbmZ1bmN0aW9uIHRvRGlzcGxheVN0cmluZyh1cmwpIHtcbiAgdHJ5IHtcbiAgICBjb25zdCB1cmkgPSBVUkkyLnBhcnNlKHVybCk7XG4gICAgaWYgKHVyaS5zY2hlbWUgPT09IFwiZmlsZVwiKSB7XG4gICAgICByZXR1cm4gdXJpLmZzUGF0aDtcbiAgICB9XG4gIH0gY2F0Y2ggKGUpIHtcbiAgfVxuICByZXR1cm4gdXJsO1xufVxuXG4vLyBub2RlX21vZHVsZXMvdnNjb2RlLWpzb24tbGFuZ3VhZ2VzZXJ2aWNlL2xpYi9lc20vc2VydmljZXMvanNvbkZvbGRpbmcuanNcbmZ1bmN0aW9uIGdldEZvbGRpbmdSYW5nZXMoZG9jdW1lbnQsIGNvbnRleHQpIHtcbiAgY29uc3QgcmFuZ2VzID0gW107XG4gIGNvbnN0IG5lc3RpbmdMZXZlbHMgPSBbXTtcbiAgY29uc3Qgc3RhY2sgPSBbXTtcbiAgbGV0IHByZXZTdGFydCA9IC0xO1xuICBjb25zdCBzY2FubmVyID0gY3JlYXRlU2Nhbm5lcjIoZG9jdW1lbnQuZ2V0VGV4dCgpLCBmYWxzZSk7XG4gIGxldCB0b2tlbiA9IHNjYW5uZXIuc2NhbigpO1xuICBmdW5jdGlvbiBhZGRSYW5nZShyYW5nZSkge1xuICAgIHJhbmdlcy5wdXNoKHJhbmdlKTtcbiAgICBuZXN0aW5nTGV2ZWxzLnB1c2goc3RhY2subGVuZ3RoKTtcbiAgfVxuICB3aGlsZSAodG9rZW4gIT09IDE3KSB7XG4gICAgc3dpdGNoICh0b2tlbikge1xuICAgICAgY2FzZSAxOlxuICAgICAgY2FzZSAzOiB7XG4gICAgICAgIGNvbnN0IHN0YXJ0TGluZSA9IGRvY3VtZW50LnBvc2l0aW9uQXQoc2Nhbm5lci5nZXRUb2tlbk9mZnNldCgpKS5saW5lO1xuICAgICAgICBjb25zdCByYW5nZSA9IHsgc3RhcnRMaW5lLCBlbmRMaW5lOiBzdGFydExpbmUsIGtpbmQ6IHRva2VuID09PSAxID8gXCJvYmplY3RcIiA6IFwiYXJyYXlcIiB9O1xuICAgICAgICBzdGFjay5wdXNoKHJhbmdlKTtcbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgICBjYXNlIDI6XG4gICAgICBjYXNlIDQ6IHtcbiAgICAgICAgY29uc3Qga2luZCA9IHRva2VuID09PSAyID8gXCJvYmplY3RcIiA6IFwiYXJyYXlcIjtcbiAgICAgICAgaWYgKHN0YWNrLmxlbmd0aCA+IDAgJiYgc3RhY2tbc3RhY2subGVuZ3RoIC0gMV0ua2luZCA9PT0ga2luZCkge1xuICAgICAgICAgIGNvbnN0IHJhbmdlID0gc3RhY2sucG9wKCk7XG4gICAgICAgICAgY29uc3QgbGluZSA9IGRvY3VtZW50LnBvc2l0aW9uQXQoc2Nhbm5lci5nZXRUb2tlbk9mZnNldCgpKS5saW5lO1xuICAgICAgICAgIGlmIChyYW5nZSAmJiBsaW5lID4gcmFuZ2Uuc3RhcnRMaW5lICsgMSAmJiBwcmV2U3RhcnQgIT09IHJhbmdlLnN0YXJ0TGluZSkge1xuICAgICAgICAgICAgcmFuZ2UuZW5kTGluZSA9IGxpbmUgLSAxO1xuICAgICAgICAgICAgYWRkUmFuZ2UocmFuZ2UpO1xuICAgICAgICAgICAgcHJldlN0YXJ0ID0gcmFuZ2Uuc3RhcnRMaW5lO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICAgIGNhc2UgMTM6IHtcbiAgICAgICAgY29uc3Qgc3RhcnRMaW5lID0gZG9jdW1lbnQucG9zaXRpb25BdChzY2FubmVyLmdldFRva2VuT2Zmc2V0KCkpLmxpbmU7XG4gICAgICAgIGNvbnN0IGVuZExpbmUgPSBkb2N1bWVudC5wb3NpdGlvbkF0KHNjYW5uZXIuZ2V0VG9rZW5PZmZzZXQoKSArIHNjYW5uZXIuZ2V0VG9rZW5MZW5ndGgoKSkubGluZTtcbiAgICAgICAgaWYgKHNjYW5uZXIuZ2V0VG9rZW5FcnJvcigpID09PSAxICYmIHN0YXJ0TGluZSArIDEgPCBkb2N1bWVudC5saW5lQ291bnQpIHtcbiAgICAgICAgICBzY2FubmVyLnNldFBvc2l0aW9uKGRvY3VtZW50Lm9mZnNldEF0KFBvc2l0aW9uLmNyZWF0ZShzdGFydExpbmUgKyAxLCAwKSkpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGlmIChzdGFydExpbmUgPCBlbmRMaW5lKSB7XG4gICAgICAgICAgICBhZGRSYW5nZSh7IHN0YXJ0TGluZSwgZW5kTGluZSwga2luZDogRm9sZGluZ1JhbmdlS2luZC5Db21tZW50IH0pO1xuICAgICAgICAgICAgcHJldlN0YXJ0ID0gc3RhcnRMaW5lO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICAgIGNhc2UgMTI6IHtcbiAgICAgICAgY29uc3QgdGV4dCA9IGRvY3VtZW50LmdldFRleHQoKS5zdWJzdHIoc2Nhbm5lci5nZXRUb2tlbk9mZnNldCgpLCBzY2FubmVyLmdldFRva2VuTGVuZ3RoKCkpO1xuICAgICAgICBjb25zdCBtID0gdGV4dC5tYXRjaCgvXlxcL1xcL1xccyojKHJlZ2lvblxcYil8KGVuZHJlZ2lvblxcYikvKTtcbiAgICAgICAgaWYgKG0pIHtcbiAgICAgICAgICBjb25zdCBsaW5lID0gZG9jdW1lbnQucG9zaXRpb25BdChzY2FubmVyLmdldFRva2VuT2Zmc2V0KCkpLmxpbmU7XG4gICAgICAgICAgaWYgKG1bMV0pIHtcbiAgICAgICAgICAgIGNvbnN0IHJhbmdlID0geyBzdGFydExpbmU6IGxpbmUsIGVuZExpbmU6IGxpbmUsIGtpbmQ6IEZvbGRpbmdSYW5nZUtpbmQuUmVnaW9uIH07XG4gICAgICAgICAgICBzdGFjay5wdXNoKHJhbmdlKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgbGV0IGkgPSBzdGFjay5sZW5ndGggLSAxO1xuICAgICAgICAgICAgd2hpbGUgKGkgPj0gMCAmJiBzdGFja1tpXS5raW5kICE9PSBGb2xkaW5nUmFuZ2VLaW5kLlJlZ2lvbikge1xuICAgICAgICAgICAgICBpLS07XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoaSA+PSAwKSB7XG4gICAgICAgICAgICAgIGNvbnN0IHJhbmdlID0gc3RhY2tbaV07XG4gICAgICAgICAgICAgIHN0YWNrLmxlbmd0aCA9IGk7XG4gICAgICAgICAgICAgIGlmIChsaW5lID4gcmFuZ2Uuc3RhcnRMaW5lICYmIHByZXZTdGFydCAhPT0gcmFuZ2Uuc3RhcnRMaW5lKSB7XG4gICAgICAgICAgICAgICAgcmFuZ2UuZW5kTGluZSA9IGxpbmU7XG4gICAgICAgICAgICAgICAgYWRkUmFuZ2UocmFuZ2UpO1xuICAgICAgICAgICAgICAgIHByZXZTdGFydCA9IHJhbmdlLnN0YXJ0TGluZTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICB9XG4gICAgdG9rZW4gPSBzY2FubmVyLnNjYW4oKTtcbiAgfVxuICBjb25zdCByYW5nZUxpbWl0ID0gY29udGV4dCAmJiBjb250ZXh0LnJhbmdlTGltaXQ7XG4gIGlmICh0eXBlb2YgcmFuZ2VMaW1pdCAhPT0gXCJudW1iZXJcIiB8fCByYW5nZXMubGVuZ3RoIDw9IHJhbmdlTGltaXQpIHtcbiAgICByZXR1cm4gcmFuZ2VzO1xuICB9XG4gIGlmIChjb250ZXh0ICYmIGNvbnRleHQub25SYW5nZUxpbWl0RXhjZWVkZWQpIHtcbiAgICBjb250ZXh0Lm9uUmFuZ2VMaW1pdEV4Y2VlZGVkKGRvY3VtZW50LnVyaSk7XG4gIH1cbiAgY29uc3QgY291bnRzID0gW107XG4gIGZvciAobGV0IGxldmVsIG9mIG5lc3RpbmdMZXZlbHMpIHtcbiAgICBpZiAobGV2ZWwgPCAzMCkge1xuICAgICAgY291bnRzW2xldmVsXSA9IChjb3VudHNbbGV2ZWxdIHx8IDApICsgMTtcbiAgICB9XG4gIH1cbiAgbGV0IGVudHJpZXMgPSAwO1xuICBsZXQgbWF4TGV2ZWwgPSAwO1xuICBmb3IgKGxldCBpID0gMDsgaSA8IGNvdW50cy5sZW5ndGg7IGkrKykge1xuICAgIGNvbnN0IG4gPSBjb3VudHNbaV07XG4gICAgaWYgKG4pIHtcbiAgICAgIGlmIChuICsgZW50cmllcyA+IHJhbmdlTGltaXQpIHtcbiAgICAgICAgbWF4TGV2ZWwgPSBpO1xuICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICAgIGVudHJpZXMgKz0gbjtcbiAgICB9XG4gIH1cbiAgY29uc3QgcmVzdWx0ID0gW107XG4gIGZvciAobGV0IGkgPSAwOyBpIDwgcmFuZ2VzLmxlbmd0aDsgaSsrKSB7XG4gICAgY29uc3QgbGV2ZWwgPSBuZXN0aW5nTGV2ZWxzW2ldO1xuICAgIGlmICh0eXBlb2YgbGV2ZWwgPT09IFwibnVtYmVyXCIpIHtcbiAgICAgIGlmIChsZXZlbCA8IG1heExldmVsIHx8IGxldmVsID09PSBtYXhMZXZlbCAmJiBlbnRyaWVzKysgPCByYW5nZUxpbWl0KSB7XG4gICAgICAgIHJlc3VsdC5wdXNoKHJhbmdlc1tpXSk7XG4gICAgICB9XG4gICAgfVxuICB9XG4gIHJldHVybiByZXN1bHQ7XG59XG5cbi8vIG5vZGVfbW9kdWxlcy92c2NvZGUtanNvbi1sYW5ndWFnZXNlcnZpY2UvbGliL2VzbS9zZXJ2aWNlcy9qc29uU2VsZWN0aW9uUmFuZ2VzLmpzXG5mdW5jdGlvbiBnZXRTZWxlY3Rpb25SYW5nZXMoZG9jdW1lbnQsIHBvc2l0aW9ucywgZG9jKSB7XG4gIGZ1bmN0aW9uIGdldFNlbGVjdGlvblJhbmdlKHBvc2l0aW9uKSB7XG4gICAgbGV0IG9mZnNldCA9IGRvY3VtZW50Lm9mZnNldEF0KHBvc2l0aW9uKTtcbiAgICBsZXQgbm9kZSA9IGRvYy5nZXROb2RlRnJvbU9mZnNldChvZmZzZXQsIHRydWUpO1xuICAgIGNvbnN0IHJlc3VsdCA9IFtdO1xuICAgIHdoaWxlIChub2RlKSB7XG4gICAgICBzd2l0Y2ggKG5vZGUudHlwZSkge1xuICAgICAgICBjYXNlIFwic3RyaW5nXCI6XG4gICAgICAgIGNhc2UgXCJvYmplY3RcIjpcbiAgICAgICAgY2FzZSBcImFycmF5XCI6XG4gICAgICAgICAgY29uc3QgY1N0YXJ0ID0gbm9kZS5vZmZzZXQgKyAxLCBjRW5kID0gbm9kZS5vZmZzZXQgKyBub2RlLmxlbmd0aCAtIDE7XG4gICAgICAgICAgaWYgKGNTdGFydCA8IGNFbmQgJiYgb2Zmc2V0ID49IGNTdGFydCAmJiBvZmZzZXQgPD0gY0VuZCkge1xuICAgICAgICAgICAgcmVzdWx0LnB1c2gobmV3UmFuZ2UoY1N0YXJ0LCBjRW5kKSk7XG4gICAgICAgICAgfVxuICAgICAgICAgIHJlc3VsdC5wdXNoKG5ld1JhbmdlKG5vZGUub2Zmc2V0LCBub2RlLm9mZnNldCArIG5vZGUubGVuZ3RoKSk7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgXCJudW1iZXJcIjpcbiAgICAgICAgY2FzZSBcImJvb2xlYW5cIjpcbiAgICAgICAgY2FzZSBcIm51bGxcIjpcbiAgICAgICAgY2FzZSBcInByb3BlcnR5XCI6XG4gICAgICAgICAgcmVzdWx0LnB1c2gobmV3UmFuZ2Uobm9kZS5vZmZzZXQsIG5vZGUub2Zmc2V0ICsgbm9kZS5sZW5ndGgpKTtcbiAgICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICAgIGlmIChub2RlLnR5cGUgPT09IFwicHJvcGVydHlcIiB8fCBub2RlLnBhcmVudCAmJiBub2RlLnBhcmVudC50eXBlID09PSBcImFycmF5XCIpIHtcbiAgICAgICAgY29uc3QgYWZ0ZXJDb21tYU9mZnNldCA9IGdldE9mZnNldEFmdGVyTmV4dFRva2VuKFxuICAgICAgICAgIG5vZGUub2Zmc2V0ICsgbm9kZS5sZW5ndGgsXG4gICAgICAgICAgNVxuICAgICAgICAgIC8qIFN5bnRheEtpbmQuQ29tbWFUb2tlbiAqL1xuICAgICAgICApO1xuICAgICAgICBpZiAoYWZ0ZXJDb21tYU9mZnNldCAhPT0gLTEpIHtcbiAgICAgICAgICByZXN1bHQucHVzaChuZXdSYW5nZShub2RlLm9mZnNldCwgYWZ0ZXJDb21tYU9mZnNldCkpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBub2RlID0gbm9kZS5wYXJlbnQ7XG4gICAgfVxuICAgIGxldCBjdXJyZW50ID0gdm9pZCAwO1xuICAgIGZvciAobGV0IGluZGV4ID0gcmVzdWx0Lmxlbmd0aCAtIDE7IGluZGV4ID49IDA7IGluZGV4LS0pIHtcbiAgICAgIGN1cnJlbnQgPSBTZWxlY3Rpb25SYW5nZS5jcmVhdGUocmVzdWx0W2luZGV4XSwgY3VycmVudCk7XG4gICAgfVxuICAgIGlmICghY3VycmVudCkge1xuICAgICAgY3VycmVudCA9IFNlbGVjdGlvblJhbmdlLmNyZWF0ZShSYW5nZS5jcmVhdGUocG9zaXRpb24sIHBvc2l0aW9uKSk7XG4gICAgfVxuICAgIHJldHVybiBjdXJyZW50O1xuICB9XG4gIGZ1bmN0aW9uIG5ld1JhbmdlKHN0YXJ0LCBlbmQpIHtcbiAgICByZXR1cm4gUmFuZ2UuY3JlYXRlKGRvY3VtZW50LnBvc2l0aW9uQXQoc3RhcnQpLCBkb2N1bWVudC5wb3NpdGlvbkF0KGVuZCkpO1xuICB9XG4gIGNvbnN0IHNjYW5uZXIgPSBjcmVhdGVTY2FubmVyMihkb2N1bWVudC5nZXRUZXh0KCksIHRydWUpO1xuICBmdW5jdGlvbiBnZXRPZmZzZXRBZnRlck5leHRUb2tlbihvZmZzZXQsIGV4cGVjdGVkVG9rZW4pIHtcbiAgICBzY2FubmVyLnNldFBvc2l0aW9uKG9mZnNldCk7XG4gICAgbGV0IHRva2VuID0gc2Nhbm5lci5zY2FuKCk7XG4gICAgaWYgKHRva2VuID09PSBleHBlY3RlZFRva2VuKSB7XG4gICAgICByZXR1cm4gc2Nhbm5lci5nZXRUb2tlbk9mZnNldCgpICsgc2Nhbm5lci5nZXRUb2tlbkxlbmd0aCgpO1xuICAgIH1cbiAgICByZXR1cm4gLTE7XG4gIH1cbiAgcmV0dXJuIHBvc2l0aW9ucy5tYXAoZ2V0U2VsZWN0aW9uUmFuZ2UpO1xufVxuXG4vLyBub2RlX21vZHVsZXMvdnNjb2RlLWpzb24tbGFuZ3VhZ2VzZXJ2aWNlL2xpYi9lc20vdXRpbHMvZm9ybWF0LmpzXG5mdW5jdGlvbiBmb3JtYXQ0KGRvY3VtZW50VG9Gb3JtYXQsIGZvcm1hdHRpbmdPcHRpb25zLCBmb3JtYXR0aW5nUmFuZ2UpIHtcbiAgbGV0IHJhbmdlID0gdm9pZCAwO1xuICBpZiAoZm9ybWF0dGluZ1JhbmdlKSB7XG4gICAgY29uc3Qgb2Zmc2V0ID0gZG9jdW1lbnRUb0Zvcm1hdC5vZmZzZXRBdChmb3JtYXR0aW5nUmFuZ2Uuc3RhcnQpO1xuICAgIGNvbnN0IGxlbmd0aCA9IGRvY3VtZW50VG9Gb3JtYXQub2Zmc2V0QXQoZm9ybWF0dGluZ1JhbmdlLmVuZCkgLSBvZmZzZXQ7XG4gICAgcmFuZ2UgPSB7IG9mZnNldCwgbGVuZ3RoIH07XG4gIH1cbiAgY29uc3Qgb3B0aW9ucyA9IHtcbiAgICB0YWJTaXplOiBmb3JtYXR0aW5nT3B0aW9ucyA/IGZvcm1hdHRpbmdPcHRpb25zLnRhYlNpemUgOiA0LFxuICAgIGluc2VydFNwYWNlczogZm9ybWF0dGluZ09wdGlvbnM/Lmluc2VydFNwYWNlcyA9PT0gdHJ1ZSxcbiAgICBpbnNlcnRGaW5hbE5ld2xpbmU6IGZvcm1hdHRpbmdPcHRpb25zPy5pbnNlcnRGaW5hbE5ld2xpbmUgPT09IHRydWUsXG4gICAgZW9sOiBcIlxcblwiLFxuICAgIGtlZXBMaW5lczogZm9ybWF0dGluZ09wdGlvbnM/LmtlZXBMaW5lcyA9PT0gdHJ1ZVxuICB9O1xuICByZXR1cm4gZm9ybWF0Mihkb2N1bWVudFRvRm9ybWF0LmdldFRleHQoKSwgcmFuZ2UsIG9wdGlvbnMpLm1hcCgoZWRpdCkgPT4ge1xuICAgIHJldHVybiBUZXh0RWRpdC5yZXBsYWNlKFJhbmdlLmNyZWF0ZShkb2N1bWVudFRvRm9ybWF0LnBvc2l0aW9uQXQoZWRpdC5vZmZzZXQpLCBkb2N1bWVudFRvRm9ybWF0LnBvc2l0aW9uQXQoZWRpdC5vZmZzZXQgKyBlZGl0Lmxlbmd0aCkpLCBlZGl0LmNvbnRlbnQpO1xuICB9KTtcbn1cblxuLy8gbm9kZV9tb2R1bGVzL3ZzY29kZS1qc29uLWxhbmd1YWdlc2VydmljZS9saWIvZXNtL3V0aWxzL3Byb3BlcnR5VHJlZS5qc1xudmFyIENvbnRhaW5lcjtcbihmdW5jdGlvbihDb250YWluZXIyKSB7XG4gIENvbnRhaW5lcjJbQ29udGFpbmVyMltcIk9iamVjdFwiXSA9IDBdID0gXCJPYmplY3RcIjtcbiAgQ29udGFpbmVyMltDb250YWluZXIyW1wiQXJyYXlcIl0gPSAxXSA9IFwiQXJyYXlcIjtcbn0pKENvbnRhaW5lciB8fCAoQ29udGFpbmVyID0ge30pKTtcbnZhciBQcm9wZXJ0eVRyZWUgPSBjbGFzcyB7XG4gIGNvbnN0cnVjdG9yKHByb3BlcnR5TmFtZSwgYmVnaW5uaW5nTGluZU51bWJlcikge1xuICAgIHRoaXMucHJvcGVydHlOYW1lID0gcHJvcGVydHlOYW1lID8/IFwiXCI7XG4gICAgdGhpcy5iZWdpbm5pbmdMaW5lTnVtYmVyID0gYmVnaW5uaW5nTGluZU51bWJlcjtcbiAgICB0aGlzLmNoaWxkcmVuUHJvcGVydGllcyA9IFtdO1xuICAgIHRoaXMubGFzdFByb3BlcnR5ID0gZmFsc2U7XG4gICAgdGhpcy5ub0tleU5hbWUgPSBmYWxzZTtcbiAgfVxuICBhZGRDaGlsZFByb3BlcnR5KGNoaWxkUHJvcGVydHkpIHtcbiAgICBjaGlsZFByb3BlcnR5LnBhcmVudCA9IHRoaXM7XG4gICAgaWYgKHRoaXMuY2hpbGRyZW5Qcm9wZXJ0aWVzLmxlbmd0aCA+IDApIHtcbiAgICAgIGxldCBpbnNlcnRpb25JbmRleCA9IDA7XG4gICAgICBpZiAoY2hpbGRQcm9wZXJ0eS5ub0tleU5hbWUpIHtcbiAgICAgICAgaW5zZXJ0aW9uSW5kZXggPSB0aGlzLmNoaWxkcmVuUHJvcGVydGllcy5sZW5ndGg7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBpbnNlcnRpb25JbmRleCA9IGJpbmFyeVNlYXJjaE9uUHJvcGVydHlBcnJheSh0aGlzLmNoaWxkcmVuUHJvcGVydGllcywgY2hpbGRQcm9wZXJ0eSwgY29tcGFyZVByb3BlcnRpZXMpO1xuICAgICAgfVxuICAgICAgaWYgKGluc2VydGlvbkluZGV4IDwgMCkge1xuICAgICAgICBpbnNlcnRpb25JbmRleCA9IGluc2VydGlvbkluZGV4ICogLTEgLSAxO1xuICAgICAgfVxuICAgICAgdGhpcy5jaGlsZHJlblByb3BlcnRpZXMuc3BsaWNlKGluc2VydGlvbkluZGV4LCAwLCBjaGlsZFByb3BlcnR5KTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5jaGlsZHJlblByb3BlcnRpZXMucHVzaChjaGlsZFByb3BlcnR5KTtcbiAgICB9XG4gICAgcmV0dXJuIGNoaWxkUHJvcGVydHk7XG4gIH1cbn07XG5mdW5jdGlvbiBjb21wYXJlUHJvcGVydGllcyhwcm9wZXJ0eVRyZWUxLCBwcm9wZXJ0eVRyZWUyKSB7XG4gIGNvbnN0IHByb3BlcnR5TmFtZTEgPSBwcm9wZXJ0eVRyZWUxLnByb3BlcnR5TmFtZS50b0xvd2VyQ2FzZSgpO1xuICBjb25zdCBwcm9wZXJ0eU5hbWUyID0gcHJvcGVydHlUcmVlMi5wcm9wZXJ0eU5hbWUudG9Mb3dlckNhc2UoKTtcbiAgaWYgKHByb3BlcnR5TmFtZTEgPCBwcm9wZXJ0eU5hbWUyKSB7XG4gICAgcmV0dXJuIC0xO1xuICB9IGVsc2UgaWYgKHByb3BlcnR5TmFtZTEgPiBwcm9wZXJ0eU5hbWUyKSB7XG4gICAgcmV0dXJuIDE7XG4gIH1cbiAgcmV0dXJuIDA7XG59XG5mdW5jdGlvbiBiaW5hcnlTZWFyY2hPblByb3BlcnR5QXJyYXkocHJvcGVydHlUcmVlQXJyYXksIHByb3BlcnR5VHJlZSwgY29tcGFyZV9mbikge1xuICBjb25zdCBwcm9wZXJ0eU5hbWUgPSBwcm9wZXJ0eVRyZWUucHJvcGVydHlOYW1lLnRvTG93ZXJDYXNlKCk7XG4gIGNvbnN0IGZpcnN0UHJvcGVydHlJbkFycmF5TmFtZSA9IHByb3BlcnR5VHJlZUFycmF5WzBdLnByb3BlcnR5TmFtZS50b0xvd2VyQ2FzZSgpO1xuICBjb25zdCBsYXN0UHJvcGVydHlJbkFycmF5TmFtZSA9IHByb3BlcnR5VHJlZUFycmF5W3Byb3BlcnR5VHJlZUFycmF5Lmxlbmd0aCAtIDFdLnByb3BlcnR5TmFtZS50b0xvd2VyQ2FzZSgpO1xuICBpZiAocHJvcGVydHlOYW1lIDwgZmlyc3RQcm9wZXJ0eUluQXJyYXlOYW1lKSB7XG4gICAgcmV0dXJuIDA7XG4gIH1cbiAgaWYgKHByb3BlcnR5TmFtZSA+IGxhc3RQcm9wZXJ0eUluQXJyYXlOYW1lKSB7XG4gICAgcmV0dXJuIHByb3BlcnR5VHJlZUFycmF5Lmxlbmd0aDtcbiAgfVxuICBsZXQgbSA9IDA7XG4gIGxldCBuID0gcHJvcGVydHlUcmVlQXJyYXkubGVuZ3RoIC0gMTtcbiAgd2hpbGUgKG0gPD0gbikge1xuICAgIGxldCBrID0gbiArIG0gPj4gMTtcbiAgICBsZXQgY21wID0gY29tcGFyZV9mbihwcm9wZXJ0eVRyZWUsIHByb3BlcnR5VHJlZUFycmF5W2tdKTtcbiAgICBpZiAoY21wID4gMCkge1xuICAgICAgbSA9IGsgKyAxO1xuICAgIH0gZWxzZSBpZiAoY21wIDwgMCkge1xuICAgICAgbiA9IGsgLSAxO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gaztcbiAgICB9XG4gIH1cbiAgcmV0dXJuIC1tIC0gMTtcbn1cblxuLy8gbm9kZV9tb2R1bGVzL3ZzY29kZS1qc29uLWxhbmd1YWdlc2VydmljZS9saWIvZXNtL3V0aWxzL3NvcnQuanNcbmZ1bmN0aW9uIHNvcnQoZG9jdW1lbnRUb1NvcnQsIGZvcm1hdHRpbmdPcHRpb25zKSB7XG4gIGNvbnN0IG9wdGlvbnMgPSB7XG4gICAgLi4uZm9ybWF0dGluZ09wdGlvbnMsXG4gICAga2VlcExpbmVzOiBmYWxzZVxuICAgIC8vIGtlZXBMaW5lcyBtdXN0IGJlIGZhbHNlIHNvIHRoYXQgdGhlIHByb3BlcnRpZXMgYXJlIG9uIHNlcGFyYXRlIGxpbmVzIGZvciB0aGUgc29ydGluZ1xuICB9O1xuICBjb25zdCBmb3JtYXR0ZWRKc29uU3RyaW5nID0gVGV4dERvY3VtZW50Mi5hcHBseUVkaXRzKGRvY3VtZW50VG9Tb3J0LCBmb3JtYXQ0KGRvY3VtZW50VG9Tb3J0LCBvcHRpb25zLCB2b2lkIDApKTtcbiAgY29uc3QgZm9ybWF0dGVkSnNvbkRvY3VtZW50ID0gVGV4dERvY3VtZW50Mi5jcmVhdGUoXCJ0ZXN0Oi8vdGVzdC5qc29uXCIsIFwianNvblwiLCAwLCBmb3JtYXR0ZWRKc29uU3RyaW5nKTtcbiAgY29uc3QganNvblByb3BlcnR5VHJlZSA9IGZpbmRKc29uY1Byb3BlcnR5VHJlZShmb3JtYXR0ZWRKc29uRG9jdW1lbnQpO1xuICBjb25zdCBzb3J0ZWRKc29uRG9jdW1lbnQgPSBzb3J0SnNvbmNEb2N1bWVudChmb3JtYXR0ZWRKc29uRG9jdW1lbnQsIGpzb25Qcm9wZXJ0eVRyZWUpO1xuICBjb25zdCBlZGl0cyA9IGZvcm1hdDQoc29ydGVkSnNvbkRvY3VtZW50LCBvcHRpb25zLCB2b2lkIDApO1xuICBjb25zdCBzb3J0ZWRBbmRGb3JtYXR0ZWRKc29uRG9jdW1lbnQgPSBUZXh0RG9jdW1lbnQyLmFwcGx5RWRpdHMoc29ydGVkSnNvbkRvY3VtZW50LCBlZGl0cyk7XG4gIHJldHVybiBbVGV4dEVkaXQucmVwbGFjZShSYW5nZS5jcmVhdGUoUG9zaXRpb24uY3JlYXRlKDAsIDApLCBkb2N1bWVudFRvU29ydC5wb3NpdGlvbkF0KGRvY3VtZW50VG9Tb3J0LmdldFRleHQoKS5sZW5ndGgpKSwgc29ydGVkQW5kRm9ybWF0dGVkSnNvbkRvY3VtZW50KV07XG59XG5mdW5jdGlvbiBmaW5kSnNvbmNQcm9wZXJ0eVRyZWUoZm9ybWF0dGVkRG9jdW1lbnQpIHtcbiAgY29uc3QgZm9ybWF0dGVkU3RyaW5nID0gZm9ybWF0dGVkRG9jdW1lbnQuZ2V0VGV4dCgpO1xuICBjb25zdCBzY2FubmVyID0gY3JlYXRlU2Nhbm5lcjIoZm9ybWF0dGVkU3RyaW5nLCBmYWxzZSk7XG4gIGxldCByb290VHJlZSA9IG5ldyBQcm9wZXJ0eVRyZWUoKTtcbiAgbGV0IGN1cnJlbnRUcmVlID0gcm9vdFRyZWU7XG4gIGxldCBjdXJyZW50UHJvcGVydHkgPSByb290VHJlZTtcbiAgbGV0IGxhc3RQcm9wZXJ0eSA9IHJvb3RUcmVlO1xuICBsZXQgdG9rZW4gPSB2b2lkIDA7XG4gIGxldCBsYXN0VG9rZW5MaW5lID0gMDtcbiAgbGV0IG51bWJlck9mQ2hhcmFjdGVyc09uUHJldmlvdXNMaW5lcyA9IDA7XG4gIGxldCBsYXN0Tm9uVHJpdmlhTm9uQ29tbWVudFRva2VuID0gdm9pZCAwO1xuICBsZXQgc2Vjb25kVG9MYXN0Tm9uVHJpdmlhTm9uQ29tbWVudFRva2VuID0gdm9pZCAwO1xuICBsZXQgbGluZU9mTGFzdE5vblRyaXZpYU5vbkNvbW1lbnRUb2tlbiA9IC0xO1xuICBsZXQgZW5kSW5kZXhPZkxhc3ROb25Ucml2aWFOb25Db21tZW50VG9rZW4gPSAtMTtcbiAgbGV0IGJlZ2lubmluZ0xpbmVOdW1iZXIgPSAwO1xuICBsZXQgZW5kTGluZU51bWJlciA9IDA7XG4gIGxldCBjdXJyZW50Q29udGFpbmVyU3RhY2sgPSBbXTtcbiAgbGV0IHVwZGF0ZUxhc3RQcm9wZXJ0eUVuZExpbmVOdW1iZXIgPSBmYWxzZTtcbiAgbGV0IHVwZGF0ZUJlZ2lubmluZ0xpbmVOdW1iZXIgPSBmYWxzZTtcbiAgd2hpbGUgKCh0b2tlbiA9IHNjYW5uZXIuc2NhbigpKSAhPT0gMTcpIHtcbiAgICBpZiAodXBkYXRlTGFzdFByb3BlcnR5RW5kTGluZU51bWJlciA9PT0gdHJ1ZSAmJiB0b2tlbiAhPT0gMTQgJiYgdG9rZW4gIT09IDE1ICYmIHRva2VuICE9PSAxMiAmJiB0b2tlbiAhPT0gMTMgJiYgY3VycmVudFByb3BlcnR5LmVuZExpbmVOdW1iZXIgPT09IHZvaWQgMCkge1xuICAgICAgbGV0IGVuZExpbmVOdW1iZXIyID0gc2Nhbm5lci5nZXRUb2tlblN0YXJ0TGluZSgpO1xuICAgICAgaWYgKHNlY29uZFRvTGFzdE5vblRyaXZpYU5vbkNvbW1lbnRUb2tlbiA9PT0gMiB8fCBzZWNvbmRUb0xhc3ROb25Ucml2aWFOb25Db21tZW50VG9rZW4gPT09IDQpIHtcbiAgICAgICAgbGFzdFByb3BlcnR5LmVuZExpbmVOdW1iZXIgPSBlbmRMaW5lTnVtYmVyMiAtIDE7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBjdXJyZW50UHJvcGVydHkuZW5kTGluZU51bWJlciA9IGVuZExpbmVOdW1iZXIyIC0gMTtcbiAgICAgIH1cbiAgICAgIGJlZ2lubmluZ0xpbmVOdW1iZXIgPSBlbmRMaW5lTnVtYmVyMjtcbiAgICAgIHVwZGF0ZUxhc3RQcm9wZXJ0eUVuZExpbmVOdW1iZXIgPSBmYWxzZTtcbiAgICB9XG4gICAgaWYgKHVwZGF0ZUJlZ2lubmluZ0xpbmVOdW1iZXIgPT09IHRydWUgJiYgdG9rZW4gIT09IDE0ICYmIHRva2VuICE9PSAxNSAmJiB0b2tlbiAhPT0gMTIgJiYgdG9rZW4gIT09IDEzKSB7XG4gICAgICBiZWdpbm5pbmdMaW5lTnVtYmVyID0gc2Nhbm5lci5nZXRUb2tlblN0YXJ0TGluZSgpO1xuICAgICAgdXBkYXRlQmVnaW5uaW5nTGluZU51bWJlciA9IGZhbHNlO1xuICAgIH1cbiAgICBpZiAoc2Nhbm5lci5nZXRUb2tlblN0YXJ0TGluZSgpICE9PSBsYXN0VG9rZW5MaW5lKSB7XG4gICAgICBmb3IgKGxldCBpID0gbGFzdFRva2VuTGluZTsgaSA8IHNjYW5uZXIuZ2V0VG9rZW5TdGFydExpbmUoKTsgaSsrKSB7XG4gICAgICAgIGNvbnN0IGxlbmd0aE9mTGluZSA9IGZvcm1hdHRlZERvY3VtZW50LmdldFRleHQoUmFuZ2UuY3JlYXRlKFBvc2l0aW9uLmNyZWF0ZShpLCAwKSwgUG9zaXRpb24uY3JlYXRlKGkgKyAxLCAwKSkpLmxlbmd0aDtcbiAgICAgICAgbnVtYmVyT2ZDaGFyYWN0ZXJzT25QcmV2aW91c0xpbmVzID0gbnVtYmVyT2ZDaGFyYWN0ZXJzT25QcmV2aW91c0xpbmVzICsgbGVuZ3RoT2ZMaW5lO1xuICAgICAgfVxuICAgICAgbGFzdFRva2VuTGluZSA9IHNjYW5uZXIuZ2V0VG9rZW5TdGFydExpbmUoKTtcbiAgICB9XG4gICAgc3dpdGNoICh0b2tlbikge1xuICAgICAgY2FzZSAxMDoge1xuICAgICAgICBpZiAobGFzdE5vblRyaXZpYU5vbkNvbW1lbnRUb2tlbiA9PT0gdm9pZCAwIHx8IGxhc3ROb25Ucml2aWFOb25Db21tZW50VG9rZW4gPT09IDEgfHwgbGFzdE5vblRyaXZpYU5vbkNvbW1lbnRUb2tlbiA9PT0gNSAmJiBjdXJyZW50Q29udGFpbmVyU3RhY2tbY3VycmVudENvbnRhaW5lclN0YWNrLmxlbmd0aCAtIDFdID09PSBDb250YWluZXIuT2JqZWN0KSB7XG4gICAgICAgICAgY29uc3QgY2hpbGRQcm9wZXJ0eSA9IG5ldyBQcm9wZXJ0eVRyZWUoc2Nhbm5lci5nZXRUb2tlblZhbHVlKCksIGJlZ2lubmluZ0xpbmVOdW1iZXIpO1xuICAgICAgICAgIGxhc3RQcm9wZXJ0eSA9IGN1cnJlbnRQcm9wZXJ0eTtcbiAgICAgICAgICBjdXJyZW50UHJvcGVydHkgPSBjdXJyZW50VHJlZS5hZGRDaGlsZFByb3BlcnR5KGNoaWxkUHJvcGVydHkpO1xuICAgICAgICB9XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgICAgY2FzZSAzOiB7XG4gICAgICAgIGlmIChyb290VHJlZS5iZWdpbm5pbmdMaW5lTnVtYmVyID09PSB2b2lkIDApIHtcbiAgICAgICAgICByb290VHJlZS5iZWdpbm5pbmdMaW5lTnVtYmVyID0gc2Nhbm5lci5nZXRUb2tlblN0YXJ0TGluZSgpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChjdXJyZW50Q29udGFpbmVyU3RhY2tbY3VycmVudENvbnRhaW5lclN0YWNrLmxlbmd0aCAtIDFdID09PSBDb250YWluZXIuT2JqZWN0KSB7XG4gICAgICAgICAgY3VycmVudFRyZWUgPSBjdXJyZW50UHJvcGVydHk7XG4gICAgICAgIH0gZWxzZSBpZiAoY3VycmVudENvbnRhaW5lclN0YWNrW2N1cnJlbnRDb250YWluZXJTdGFjay5sZW5ndGggLSAxXSA9PT0gQ29udGFpbmVyLkFycmF5KSB7XG4gICAgICAgICAgY29uc3QgY2hpbGRQcm9wZXJ0eSA9IG5ldyBQcm9wZXJ0eVRyZWUoc2Nhbm5lci5nZXRUb2tlblZhbHVlKCksIGJlZ2lubmluZ0xpbmVOdW1iZXIpO1xuICAgICAgICAgIGNoaWxkUHJvcGVydHkubm9LZXlOYW1lID0gdHJ1ZTtcbiAgICAgICAgICBsYXN0UHJvcGVydHkgPSBjdXJyZW50UHJvcGVydHk7XG4gICAgICAgICAgY3VycmVudFByb3BlcnR5ID0gY3VycmVudFRyZWUuYWRkQ2hpbGRQcm9wZXJ0eShjaGlsZFByb3BlcnR5KTtcbiAgICAgICAgICBjdXJyZW50VHJlZSA9IGN1cnJlbnRQcm9wZXJ0eTtcbiAgICAgICAgfVxuICAgICAgICBjdXJyZW50Q29udGFpbmVyU3RhY2sucHVzaChDb250YWluZXIuQXJyYXkpO1xuICAgICAgICBjdXJyZW50UHJvcGVydHkudHlwZSA9IENvbnRhaW5lci5BcnJheTtcbiAgICAgICAgYmVnaW5uaW5nTGluZU51bWJlciA9IHNjYW5uZXIuZ2V0VG9rZW5TdGFydExpbmUoKTtcbiAgICAgICAgYmVnaW5uaW5nTGluZU51bWJlcisrO1xuICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICAgIGNhc2UgMToge1xuICAgICAgICBpZiAocm9vdFRyZWUuYmVnaW5uaW5nTGluZU51bWJlciA9PT0gdm9pZCAwKSB7XG4gICAgICAgICAgcm9vdFRyZWUuYmVnaW5uaW5nTGluZU51bWJlciA9IHNjYW5uZXIuZ2V0VG9rZW5TdGFydExpbmUoKTtcbiAgICAgICAgfSBlbHNlIGlmIChjdXJyZW50Q29udGFpbmVyU3RhY2tbY3VycmVudENvbnRhaW5lclN0YWNrLmxlbmd0aCAtIDFdID09PSBDb250YWluZXIuQXJyYXkpIHtcbiAgICAgICAgICBjb25zdCBjaGlsZFByb3BlcnR5ID0gbmV3IFByb3BlcnR5VHJlZShzY2FubmVyLmdldFRva2VuVmFsdWUoKSwgYmVnaW5uaW5nTGluZU51bWJlcik7XG4gICAgICAgICAgY2hpbGRQcm9wZXJ0eS5ub0tleU5hbWUgPSB0cnVlO1xuICAgICAgICAgIGxhc3RQcm9wZXJ0eSA9IGN1cnJlbnRQcm9wZXJ0eTtcbiAgICAgICAgICBjdXJyZW50UHJvcGVydHkgPSBjdXJyZW50VHJlZS5hZGRDaGlsZFByb3BlcnR5KGNoaWxkUHJvcGVydHkpO1xuICAgICAgICB9XG4gICAgICAgIGN1cnJlbnRQcm9wZXJ0eS50eXBlID0gQ29udGFpbmVyLk9iamVjdDtcbiAgICAgICAgY3VycmVudENvbnRhaW5lclN0YWNrLnB1c2goQ29udGFpbmVyLk9iamVjdCk7XG4gICAgICAgIGN1cnJlbnRUcmVlID0gY3VycmVudFByb3BlcnR5O1xuICAgICAgICBiZWdpbm5pbmdMaW5lTnVtYmVyID0gc2Nhbm5lci5nZXRUb2tlblN0YXJ0TGluZSgpO1xuICAgICAgICBiZWdpbm5pbmdMaW5lTnVtYmVyKys7XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgICAgY2FzZSA0OiB7XG4gICAgICAgIGVuZExpbmVOdW1iZXIgPSBzY2FubmVyLmdldFRva2VuU3RhcnRMaW5lKCk7XG4gICAgICAgIGN1cnJlbnRDb250YWluZXJTdGFjay5wb3AoKTtcbiAgICAgICAgaWYgKGN1cnJlbnRQcm9wZXJ0eS5lbmRMaW5lTnVtYmVyID09PSB2b2lkIDAgJiYgKGxhc3ROb25Ucml2aWFOb25Db21tZW50VG9rZW4gPT09IDIgfHwgbGFzdE5vblRyaXZpYU5vbkNvbW1lbnRUb2tlbiA9PT0gNCkpIHtcbiAgICAgICAgICBjdXJyZW50UHJvcGVydHkuZW5kTGluZU51bWJlciA9IGVuZExpbmVOdW1iZXIgLSAxO1xuICAgICAgICAgIGN1cnJlbnRQcm9wZXJ0eS5sYXN0UHJvcGVydHkgPSB0cnVlO1xuICAgICAgICAgIGN1cnJlbnRQcm9wZXJ0eS5saW5lV2hlcmVUb0FkZENvbW1hID0gbGluZU9mTGFzdE5vblRyaXZpYU5vbkNvbW1lbnRUb2tlbjtcbiAgICAgICAgICBjdXJyZW50UHJvcGVydHkuaW5kZXhXaGVyZVRvQWRkQ29tYSA9IGVuZEluZGV4T2ZMYXN0Tm9uVHJpdmlhTm9uQ29tbWVudFRva2VuO1xuICAgICAgICAgIGxhc3RQcm9wZXJ0eSA9IGN1cnJlbnRQcm9wZXJ0eTtcbiAgICAgICAgICBjdXJyZW50UHJvcGVydHkgPSBjdXJyZW50UHJvcGVydHkgPyBjdXJyZW50UHJvcGVydHkucGFyZW50IDogdm9pZCAwO1xuICAgICAgICAgIGN1cnJlbnRUcmVlID0gY3VycmVudFByb3BlcnR5O1xuICAgICAgICB9XG4gICAgICAgIHJvb3RUcmVlLmVuZExpbmVOdW1iZXIgPSBlbmRMaW5lTnVtYmVyO1xuICAgICAgICBiZWdpbm5pbmdMaW5lTnVtYmVyID0gZW5kTGluZU51bWJlciArIDE7XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgICAgY2FzZSAyOiB7XG4gICAgICAgIGVuZExpbmVOdW1iZXIgPSBzY2FubmVyLmdldFRva2VuU3RhcnRMaW5lKCk7XG4gICAgICAgIGN1cnJlbnRDb250YWluZXJTdGFjay5wb3AoKTtcbiAgICAgICAgaWYgKGxhc3ROb25Ucml2aWFOb25Db21tZW50VG9rZW4gIT09IDEpIHtcbiAgICAgICAgICBpZiAoY3VycmVudFByb3BlcnR5LmVuZExpbmVOdW1iZXIgPT09IHZvaWQgMCkge1xuICAgICAgICAgICAgY3VycmVudFByb3BlcnR5LmVuZExpbmVOdW1iZXIgPSBlbmRMaW5lTnVtYmVyIC0gMTtcbiAgICAgICAgICAgIGN1cnJlbnRQcm9wZXJ0eS5sYXN0UHJvcGVydHkgPSB0cnVlO1xuICAgICAgICAgICAgY3VycmVudFByb3BlcnR5LmxpbmVXaGVyZVRvQWRkQ29tbWEgPSBsaW5lT2ZMYXN0Tm9uVHJpdmlhTm9uQ29tbWVudFRva2VuO1xuICAgICAgICAgICAgY3VycmVudFByb3BlcnR5LmluZGV4V2hlcmVUb0FkZENvbWEgPSBlbmRJbmRleE9mTGFzdE5vblRyaXZpYU5vbkNvbW1lbnRUb2tlbjtcbiAgICAgICAgICB9XG4gICAgICAgICAgbGFzdFByb3BlcnR5ID0gY3VycmVudFByb3BlcnR5O1xuICAgICAgICAgIGN1cnJlbnRQcm9wZXJ0eSA9IGN1cnJlbnRQcm9wZXJ0eSA/IGN1cnJlbnRQcm9wZXJ0eS5wYXJlbnQgOiB2b2lkIDA7XG4gICAgICAgICAgY3VycmVudFRyZWUgPSBjdXJyZW50UHJvcGVydHk7XG4gICAgICAgIH1cbiAgICAgICAgcm9vdFRyZWUuZW5kTGluZU51bWJlciA9IHNjYW5uZXIuZ2V0VG9rZW5TdGFydExpbmUoKTtcbiAgICAgICAgYmVnaW5uaW5nTGluZU51bWJlciA9IGVuZExpbmVOdW1iZXIgKyAxO1xuICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICAgIGNhc2UgNToge1xuICAgICAgICBlbmRMaW5lTnVtYmVyID0gc2Nhbm5lci5nZXRUb2tlblN0YXJ0TGluZSgpO1xuICAgICAgICBpZiAoY3VycmVudFByb3BlcnR5LmVuZExpbmVOdW1iZXIgPT09IHZvaWQgMCAmJiAoY3VycmVudENvbnRhaW5lclN0YWNrW2N1cnJlbnRDb250YWluZXJTdGFjay5sZW5ndGggLSAxXSA9PT0gQ29udGFpbmVyLk9iamVjdCB8fCBjdXJyZW50Q29udGFpbmVyU3RhY2tbY3VycmVudENvbnRhaW5lclN0YWNrLmxlbmd0aCAtIDFdID09PSBDb250YWluZXIuQXJyYXkgJiYgKGxhc3ROb25Ucml2aWFOb25Db21tZW50VG9rZW4gPT09IDIgfHwgbGFzdE5vblRyaXZpYU5vbkNvbW1lbnRUb2tlbiA9PT0gNCkpKSB7XG4gICAgICAgICAgY3VycmVudFByb3BlcnR5LmVuZExpbmVOdW1iZXIgPSBlbmRMaW5lTnVtYmVyO1xuICAgICAgICAgIGN1cnJlbnRQcm9wZXJ0eS5jb21tYUluZGV4ID0gc2Nhbm5lci5nZXRUb2tlbk9mZnNldCgpIC0gbnVtYmVyT2ZDaGFyYWN0ZXJzT25QcmV2aW91c0xpbmVzO1xuICAgICAgICAgIGN1cnJlbnRQcm9wZXJ0eS5jb21tYUxpbmUgPSBlbmRMaW5lTnVtYmVyO1xuICAgICAgICB9XG4gICAgICAgIGlmIChsYXN0Tm9uVHJpdmlhTm9uQ29tbWVudFRva2VuID09PSAyIHx8IGxhc3ROb25Ucml2aWFOb25Db21tZW50VG9rZW4gPT09IDQpIHtcbiAgICAgICAgICBsYXN0UHJvcGVydHkgPSBjdXJyZW50UHJvcGVydHk7XG4gICAgICAgICAgY3VycmVudFByb3BlcnR5ID0gY3VycmVudFByb3BlcnR5ID8gY3VycmVudFByb3BlcnR5LnBhcmVudCA6IHZvaWQgMDtcbiAgICAgICAgICBjdXJyZW50VHJlZSA9IGN1cnJlbnRQcm9wZXJ0eTtcbiAgICAgICAgfVxuICAgICAgICBiZWdpbm5pbmdMaW5lTnVtYmVyID0gZW5kTGluZU51bWJlciArIDE7XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgICAgY2FzZSAxMzoge1xuICAgICAgICBpZiAobGFzdE5vblRyaXZpYU5vbkNvbW1lbnRUb2tlbiA9PT0gNSAmJiBsaW5lT2ZMYXN0Tm9uVHJpdmlhTm9uQ29tbWVudFRva2VuID09PSBzY2FubmVyLmdldFRva2VuU3RhcnRMaW5lKCkgJiYgKGN1cnJlbnRDb250YWluZXJTdGFja1tjdXJyZW50Q29udGFpbmVyU3RhY2subGVuZ3RoIC0gMV0gPT09IENvbnRhaW5lci5BcnJheSAmJiAoc2Vjb25kVG9MYXN0Tm9uVHJpdmlhTm9uQ29tbWVudFRva2VuID09PSAyIHx8IHNlY29uZFRvTGFzdE5vblRyaXZpYU5vbkNvbW1lbnRUb2tlbiA9PT0gNCkgfHwgY3VycmVudENvbnRhaW5lclN0YWNrW2N1cnJlbnRDb250YWluZXJTdGFjay5sZW5ndGggLSAxXSA9PT0gQ29udGFpbmVyLk9iamVjdCkpIHtcbiAgICAgICAgICBpZiAoY3VycmVudENvbnRhaW5lclN0YWNrW2N1cnJlbnRDb250YWluZXJTdGFjay5sZW5ndGggLSAxXSA9PT0gQ29udGFpbmVyLkFycmF5ICYmIChzZWNvbmRUb0xhc3ROb25Ucml2aWFOb25Db21tZW50VG9rZW4gPT09IDIgfHwgc2Vjb25kVG9MYXN0Tm9uVHJpdmlhTm9uQ29tbWVudFRva2VuID09PSA0KSB8fCBjdXJyZW50Q29udGFpbmVyU3RhY2tbY3VycmVudENvbnRhaW5lclN0YWNrLmxlbmd0aCAtIDFdID09PSBDb250YWluZXIuT2JqZWN0KSB7XG4gICAgICAgICAgICBjdXJyZW50UHJvcGVydHkuZW5kTGluZU51bWJlciA9IHZvaWQgMDtcbiAgICAgICAgICAgIHVwZGF0ZUxhc3RQcm9wZXJ0eUVuZExpbmVOdW1iZXIgPSB0cnVlO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBpZiAoKGxhc3ROb25Ucml2aWFOb25Db21tZW50VG9rZW4gPT09IDEgfHwgbGFzdE5vblRyaXZpYU5vbkNvbW1lbnRUb2tlbiA9PT0gMykgJiYgbGluZU9mTGFzdE5vblRyaXZpYU5vbkNvbW1lbnRUb2tlbiA9PT0gc2Nhbm5lci5nZXRUb2tlblN0YXJ0TGluZSgpKSB7XG4gICAgICAgICAgdXBkYXRlQmVnaW5uaW5nTGluZU51bWJlciA9IHRydWU7XG4gICAgICAgIH1cbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgfVxuICAgIGlmICh0b2tlbiAhPT0gMTQgJiYgdG9rZW4gIT09IDEzICYmIHRva2VuICE9PSAxMiAmJiB0b2tlbiAhPT0gMTUpIHtcbiAgICAgIHNlY29uZFRvTGFzdE5vblRyaXZpYU5vbkNvbW1lbnRUb2tlbiA9IGxhc3ROb25Ucml2aWFOb25Db21tZW50VG9rZW47XG4gICAgICBsYXN0Tm9uVHJpdmlhTm9uQ29tbWVudFRva2VuID0gdG9rZW47XG4gICAgICBsaW5lT2ZMYXN0Tm9uVHJpdmlhTm9uQ29tbWVudFRva2VuID0gc2Nhbm5lci5nZXRUb2tlblN0YXJ0TGluZSgpO1xuICAgICAgZW5kSW5kZXhPZkxhc3ROb25Ucml2aWFOb25Db21tZW50VG9rZW4gPSBzY2FubmVyLmdldFRva2VuT2Zmc2V0KCkgKyBzY2FubmVyLmdldFRva2VuTGVuZ3RoKCkgLSBudW1iZXJPZkNoYXJhY3RlcnNPblByZXZpb3VzTGluZXM7XG4gICAgfVxuICB9XG4gIHJldHVybiByb290VHJlZTtcbn1cbmZ1bmN0aW9uIHNvcnRKc29uY0RvY3VtZW50KGpzb25Eb2N1bWVudCwgcHJvcGVydHlUcmVlKSB7XG4gIGlmIChwcm9wZXJ0eVRyZWUuY2hpbGRyZW5Qcm9wZXJ0aWVzLmxlbmd0aCA9PT0gMCkge1xuICAgIHJldHVybiBqc29uRG9jdW1lbnQ7XG4gIH1cbiAgY29uc3Qgc29ydGVkSnNvbkRvY3VtZW50ID0gVGV4dERvY3VtZW50Mi5jcmVhdGUoXCJ0ZXN0Oi8vdGVzdC5qc29uXCIsIFwianNvblwiLCAwLCBqc29uRG9jdW1lbnQuZ2V0VGV4dCgpKTtcbiAgY29uc3QgcXVldWVUb1NvcnQgPSBbXTtcbiAgdXBkYXRlU29ydGluZ1F1ZXVlKHF1ZXVlVG9Tb3J0LCBwcm9wZXJ0eVRyZWUsIHByb3BlcnR5VHJlZS5iZWdpbm5pbmdMaW5lTnVtYmVyKTtcbiAgd2hpbGUgKHF1ZXVlVG9Tb3J0Lmxlbmd0aCA+IDApIHtcbiAgICBjb25zdCBkYXRhVG9Tb3J0ID0gcXVldWVUb1NvcnQuc2hpZnQoKTtcbiAgICBjb25zdCBwcm9wZXJ0eVRyZWVBcnJheSA9IGRhdGFUb1NvcnQucHJvcGVydHlUcmVlQXJyYXk7XG4gICAgbGV0IGJlZ2lubmluZ0xpbmVOdW1iZXIgPSBkYXRhVG9Tb3J0LmJlZ2lubmluZ0xpbmVOdW1iZXI7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBwcm9wZXJ0eVRyZWVBcnJheS5sZW5ndGg7IGkrKykge1xuICAgICAgY29uc3QgcHJvcGVydHlUcmVlMiA9IHByb3BlcnR5VHJlZUFycmF5W2ldO1xuICAgICAgY29uc3QgcmFuZ2UgPSBSYW5nZS5jcmVhdGUoUG9zaXRpb24uY3JlYXRlKHByb3BlcnR5VHJlZTIuYmVnaW5uaW5nTGluZU51bWJlciwgMCksIFBvc2l0aW9uLmNyZWF0ZShwcm9wZXJ0eVRyZWUyLmVuZExpbmVOdW1iZXIgKyAxLCAwKSk7XG4gICAgICBjb25zdCBqc29uQ29udGVudFRvUmVwbGFjZSA9IGpzb25Eb2N1bWVudC5nZXRUZXh0KHJhbmdlKTtcbiAgICAgIGNvbnN0IGpzb25Eb2N1bWVudFRvUmVwbGFjZSA9IFRleHREb2N1bWVudDIuY3JlYXRlKFwidGVzdDovL3Rlc3QuanNvblwiLCBcImpzb25cIiwgMCwganNvbkNvbnRlbnRUb1JlcGxhY2UpO1xuICAgICAgaWYgKHByb3BlcnR5VHJlZTIubGFzdFByb3BlcnR5ID09PSB0cnVlICYmIGkgIT09IHByb3BlcnR5VHJlZUFycmF5Lmxlbmd0aCAtIDEpIHtcbiAgICAgICAgY29uc3QgbGluZVdoZXJlVG9BZGRDb21tYSA9IHByb3BlcnR5VHJlZTIubGluZVdoZXJlVG9BZGRDb21tYSAtIHByb3BlcnR5VHJlZTIuYmVnaW5uaW5nTGluZU51bWJlcjtcbiAgICAgICAgY29uc3QgaW5kZXhXaGVyZVRvQWRkQ29tbWEgPSBwcm9wZXJ0eVRyZWUyLmluZGV4V2hlcmVUb0FkZENvbWE7XG4gICAgICAgIGNvbnN0IGVkaXQyID0ge1xuICAgICAgICAgIHJhbmdlOiBSYW5nZS5jcmVhdGUoUG9zaXRpb24uY3JlYXRlKGxpbmVXaGVyZVRvQWRkQ29tbWEsIGluZGV4V2hlcmVUb0FkZENvbW1hKSwgUG9zaXRpb24uY3JlYXRlKGxpbmVXaGVyZVRvQWRkQ29tbWEsIGluZGV4V2hlcmVUb0FkZENvbW1hKSksXG4gICAgICAgICAgdGV4dDogXCIsXCJcbiAgICAgICAgfTtcbiAgICAgICAgVGV4dERvY3VtZW50Mi51cGRhdGUoanNvbkRvY3VtZW50VG9SZXBsYWNlLCBbZWRpdDJdLCAxKTtcbiAgICAgIH0gZWxzZSBpZiAocHJvcGVydHlUcmVlMi5sYXN0UHJvcGVydHkgPT09IGZhbHNlICYmIGkgPT09IHByb3BlcnR5VHJlZUFycmF5Lmxlbmd0aCAtIDEpIHtcbiAgICAgICAgY29uc3QgY29tbWFJbmRleCA9IHByb3BlcnR5VHJlZTIuY29tbWFJbmRleDtcbiAgICAgICAgY29uc3QgY29tbWFMaW5lID0gcHJvcGVydHlUcmVlMi5jb21tYUxpbmU7XG4gICAgICAgIGNvbnN0IGxpbmVXaGVyZVRvUmVtb3ZlQ29tbWEgPSBjb21tYUxpbmUgLSBwcm9wZXJ0eVRyZWUyLmJlZ2lubmluZ0xpbmVOdW1iZXI7XG4gICAgICAgIGNvbnN0IGVkaXQyID0ge1xuICAgICAgICAgIHJhbmdlOiBSYW5nZS5jcmVhdGUoUG9zaXRpb24uY3JlYXRlKGxpbmVXaGVyZVRvUmVtb3ZlQ29tbWEsIGNvbW1hSW5kZXgpLCBQb3NpdGlvbi5jcmVhdGUobGluZVdoZXJlVG9SZW1vdmVDb21tYSwgY29tbWFJbmRleCArIDEpKSxcbiAgICAgICAgICB0ZXh0OiBcIlwiXG4gICAgICAgIH07XG4gICAgICAgIFRleHREb2N1bWVudDIudXBkYXRlKGpzb25Eb2N1bWVudFRvUmVwbGFjZSwgW2VkaXQyXSwgMSk7XG4gICAgICB9XG4gICAgICBjb25zdCBsZW5ndGggPSBwcm9wZXJ0eVRyZWUyLmVuZExpbmVOdW1iZXIgLSBwcm9wZXJ0eVRyZWUyLmJlZ2lubmluZ0xpbmVOdW1iZXIgKyAxO1xuICAgICAgY29uc3QgZWRpdCA9IHtcbiAgICAgICAgcmFuZ2U6IFJhbmdlLmNyZWF0ZShQb3NpdGlvbi5jcmVhdGUoYmVnaW5uaW5nTGluZU51bWJlciwgMCksIFBvc2l0aW9uLmNyZWF0ZShiZWdpbm5pbmdMaW5lTnVtYmVyICsgbGVuZ3RoLCAwKSksXG4gICAgICAgIHRleHQ6IGpzb25Eb2N1bWVudFRvUmVwbGFjZS5nZXRUZXh0KClcbiAgICAgIH07XG4gICAgICBUZXh0RG9jdW1lbnQyLnVwZGF0ZShzb3J0ZWRKc29uRG9jdW1lbnQsIFtlZGl0XSwgMSk7XG4gICAgICB1cGRhdGVTb3J0aW5nUXVldWUocXVldWVUb1NvcnQsIHByb3BlcnR5VHJlZTIsIGJlZ2lubmluZ0xpbmVOdW1iZXIpO1xuICAgICAgYmVnaW5uaW5nTGluZU51bWJlciA9IGJlZ2lubmluZ0xpbmVOdW1iZXIgKyBsZW5ndGg7XG4gICAgfVxuICB9XG4gIHJldHVybiBzb3J0ZWRKc29uRG9jdW1lbnQ7XG59XG5mdW5jdGlvbiB1cGRhdGVTb3J0aW5nUXVldWUocXVldWUsIHByb3BlcnR5VHJlZSwgYmVnaW5uaW5nTGluZU51bWJlcikge1xuICBpZiAocHJvcGVydHlUcmVlLmNoaWxkcmVuUHJvcGVydGllcy5sZW5ndGggPT09IDApIHtcbiAgICByZXR1cm47XG4gIH1cbiAgaWYgKHByb3BlcnR5VHJlZS50eXBlID09PSBDb250YWluZXIuT2JqZWN0KSB7XG4gICAgbGV0IG1pbmltdW1CZWdpbm5pbmdMaW5lTnVtYmVyID0gSW5maW5pdHk7XG4gICAgZm9yIChjb25zdCBjaGlsZFByb3BlcnR5IG9mIHByb3BlcnR5VHJlZS5jaGlsZHJlblByb3BlcnRpZXMpIHtcbiAgICAgIGlmIChjaGlsZFByb3BlcnR5LmJlZ2lubmluZ0xpbmVOdW1iZXIgPCBtaW5pbXVtQmVnaW5uaW5nTGluZU51bWJlcikge1xuICAgICAgICBtaW5pbXVtQmVnaW5uaW5nTGluZU51bWJlciA9IGNoaWxkUHJvcGVydHkuYmVnaW5uaW5nTGluZU51bWJlcjtcbiAgICAgIH1cbiAgICB9XG4gICAgY29uc3QgZGlmZiA9IG1pbmltdW1CZWdpbm5pbmdMaW5lTnVtYmVyIC0gcHJvcGVydHlUcmVlLmJlZ2lubmluZ0xpbmVOdW1iZXI7XG4gICAgYmVnaW5uaW5nTGluZU51bWJlciA9IGJlZ2lubmluZ0xpbmVOdW1iZXIgKyBkaWZmO1xuICAgIHF1ZXVlLnB1c2gobmV3IFNvcnRpbmdSYW5nZShiZWdpbm5pbmdMaW5lTnVtYmVyLCBwcm9wZXJ0eVRyZWUuY2hpbGRyZW5Qcm9wZXJ0aWVzKSk7XG4gIH0gZWxzZSBpZiAocHJvcGVydHlUcmVlLnR5cGUgPT09IENvbnRhaW5lci5BcnJheSkge1xuICAgIHVwZGF0ZVNvcnRpbmdRdWV1ZUZvckFycmF5UHJvcGVydGllcyhxdWV1ZSwgcHJvcGVydHlUcmVlLCBiZWdpbm5pbmdMaW5lTnVtYmVyKTtcbiAgfVxufVxuZnVuY3Rpb24gdXBkYXRlU29ydGluZ1F1ZXVlRm9yQXJyYXlQcm9wZXJ0aWVzKHF1ZXVlLCBwcm9wZXJ0eVRyZWUsIGJlZ2lubmluZ0xpbmVOdW1iZXIpIHtcbiAgZm9yIChjb25zdCBzdWJPYmplY3Qgb2YgcHJvcGVydHlUcmVlLmNoaWxkcmVuUHJvcGVydGllcykge1xuICAgIGlmIChzdWJPYmplY3QudHlwZSA9PT0gQ29udGFpbmVyLk9iamVjdCkge1xuICAgICAgbGV0IG1pbmltdW1CZWdpbm5pbmdMaW5lTnVtYmVyID0gSW5maW5pdHk7XG4gICAgICBmb3IgKGNvbnN0IGNoaWxkUHJvcGVydHkgb2Ygc3ViT2JqZWN0LmNoaWxkcmVuUHJvcGVydGllcykge1xuICAgICAgICBpZiAoY2hpbGRQcm9wZXJ0eS5iZWdpbm5pbmdMaW5lTnVtYmVyIDwgbWluaW11bUJlZ2lubmluZ0xpbmVOdW1iZXIpIHtcbiAgICAgICAgICBtaW5pbXVtQmVnaW5uaW5nTGluZU51bWJlciA9IGNoaWxkUHJvcGVydHkuYmVnaW5uaW5nTGluZU51bWJlcjtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgY29uc3QgZGlmZiA9IG1pbmltdW1CZWdpbm5pbmdMaW5lTnVtYmVyIC0gc3ViT2JqZWN0LmJlZ2lubmluZ0xpbmVOdW1iZXI7XG4gICAgICBxdWV1ZS5wdXNoKG5ldyBTb3J0aW5nUmFuZ2UoYmVnaW5uaW5nTGluZU51bWJlciArIHN1Yk9iamVjdC5iZWdpbm5pbmdMaW5lTnVtYmVyIC0gcHJvcGVydHlUcmVlLmJlZ2lubmluZ0xpbmVOdW1iZXIgKyBkaWZmLCBzdWJPYmplY3QuY2hpbGRyZW5Qcm9wZXJ0aWVzKSk7XG4gICAgfVxuICAgIGlmIChzdWJPYmplY3QudHlwZSA9PT0gQ29udGFpbmVyLkFycmF5KSB7XG4gICAgICB1cGRhdGVTb3J0aW5nUXVldWVGb3JBcnJheVByb3BlcnRpZXMocXVldWUsIHN1Yk9iamVjdCwgYmVnaW5uaW5nTGluZU51bWJlciArIHN1Yk9iamVjdC5iZWdpbm5pbmdMaW5lTnVtYmVyIC0gcHJvcGVydHlUcmVlLmJlZ2lubmluZ0xpbmVOdW1iZXIpO1xuICAgIH1cbiAgfVxufVxudmFyIFNvcnRpbmdSYW5nZSA9IGNsYXNzIHtcbiAgY29uc3RydWN0b3IoYmVnaW5uaW5nTGluZU51bWJlciwgcHJvcGVydHlUcmVlQXJyYXkpIHtcbiAgICB0aGlzLmJlZ2lubmluZ0xpbmVOdW1iZXIgPSBiZWdpbm5pbmdMaW5lTnVtYmVyO1xuICAgIHRoaXMucHJvcGVydHlUcmVlQXJyYXkgPSBwcm9wZXJ0eVRyZWVBcnJheTtcbiAgfVxufTtcblxuLy8gbm9kZV9tb2R1bGVzL3ZzY29kZS1qc29uLWxhbmd1YWdlc2VydmljZS9saWIvZXNtL3NlcnZpY2VzL2pzb25MaW5rcy5qc1xuZnVuY3Rpb24gZmluZExpbmtzKGRvY3VtZW50LCBkb2MpIHtcbiAgY29uc3QgbGlua3MgPSBbXTtcbiAgZG9jLnZpc2l0KChub2RlKSA9PiB7XG4gICAgaWYgKG5vZGUudHlwZSA9PT0gXCJwcm9wZXJ0eVwiICYmIG5vZGUua2V5Tm9kZS52YWx1ZSA9PT0gXCIkcmVmXCIgJiYgbm9kZS52YWx1ZU5vZGU/LnR5cGUgPT09IFwic3RyaW5nXCIpIHtcbiAgICAgIGNvbnN0IHBhdGggPSBub2RlLnZhbHVlTm9kZS52YWx1ZTtcbiAgICAgIGNvbnN0IHRhcmdldE5vZGUgPSBmaW5kVGFyZ2V0Tm9kZShkb2MsIHBhdGgpO1xuICAgICAgaWYgKHRhcmdldE5vZGUpIHtcbiAgICAgICAgY29uc3QgdGFyZ2V0UG9zID0gZG9jdW1lbnQucG9zaXRpb25BdCh0YXJnZXROb2RlLm9mZnNldCk7XG4gICAgICAgIGxpbmtzLnB1c2goe1xuICAgICAgICAgIHRhcmdldDogYCR7ZG9jdW1lbnQudXJpfSMke3RhcmdldFBvcy5saW5lICsgMX0sJHt0YXJnZXRQb3MuY2hhcmFjdGVyICsgMX1gLFxuICAgICAgICAgIHJhbmdlOiBjcmVhdGVSYW5nZShkb2N1bWVudCwgbm9kZS52YWx1ZU5vZGUpXG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gdHJ1ZTtcbiAgfSk7XG4gIHJldHVybiBQcm9taXNlLnJlc29sdmUobGlua3MpO1xufVxuZnVuY3Rpb24gY3JlYXRlUmFuZ2UoZG9jdW1lbnQsIG5vZGUpIHtcbiAgcmV0dXJuIFJhbmdlLmNyZWF0ZShkb2N1bWVudC5wb3NpdGlvbkF0KG5vZGUub2Zmc2V0ICsgMSksIGRvY3VtZW50LnBvc2l0aW9uQXQobm9kZS5vZmZzZXQgKyBub2RlLmxlbmd0aCAtIDEpKTtcbn1cbmZ1bmN0aW9uIGZpbmRUYXJnZXROb2RlKGRvYywgcGF0aCkge1xuICBjb25zdCB0b2tlbnMgPSBwYXJzZUpTT05Qb2ludGVyKHBhdGgpO1xuICBpZiAoIXRva2Vucykge1xuICAgIHJldHVybiBudWxsO1xuICB9XG4gIHJldHVybiBmaW5kTm9kZSh0b2tlbnMsIGRvYy5yb290KTtcbn1cbmZ1bmN0aW9uIGZpbmROb2RlKHBvaW50ZXIsIG5vZGUpIHtcbiAgaWYgKCFub2RlKSB7XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cbiAgaWYgKHBvaW50ZXIubGVuZ3RoID09PSAwKSB7XG4gICAgcmV0dXJuIG5vZGU7XG4gIH1cbiAgY29uc3QgdG9rZW4gPSBwb2ludGVyLnNoaWZ0KCk7XG4gIGlmIChub2RlICYmIG5vZGUudHlwZSA9PT0gXCJvYmplY3RcIikge1xuICAgIGNvbnN0IHByb3BlcnR5Tm9kZSA9IG5vZGUucHJvcGVydGllcy5maW5kKChwcm9wZXJ0eU5vZGUyKSA9PiBwcm9wZXJ0eU5vZGUyLmtleU5vZGUudmFsdWUgPT09IHRva2VuKTtcbiAgICBpZiAoIXByb3BlcnR5Tm9kZSkge1xuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuICAgIHJldHVybiBmaW5kTm9kZShwb2ludGVyLCBwcm9wZXJ0eU5vZGUudmFsdWVOb2RlKTtcbiAgfSBlbHNlIGlmIChub2RlICYmIG5vZGUudHlwZSA9PT0gXCJhcnJheVwiKSB7XG4gICAgaWYgKHRva2VuLm1hdGNoKC9eKDB8WzEtOV1bMC05XSopJC8pKSB7XG4gICAgICBjb25zdCBpbmRleCA9IE51bWJlci5wYXJzZUludCh0b2tlbik7XG4gICAgICBjb25zdCBhcnJheUl0ZW0gPSBub2RlLml0ZW1zW2luZGV4XTtcbiAgICAgIGlmICghYXJyYXlJdGVtKSB7XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGZpbmROb2RlKHBvaW50ZXIsIGFycmF5SXRlbSk7XG4gICAgfVxuICB9XG4gIHJldHVybiBudWxsO1xufVxuZnVuY3Rpb24gcGFyc2VKU09OUG9pbnRlcihwYXRoKSB7XG4gIGlmIChwYXRoID09PSBcIiNcIikge1xuICAgIHJldHVybiBbXTtcbiAgfVxuICBpZiAocGF0aFswXSAhPT0gXCIjXCIgfHwgcGF0aFsxXSAhPT0gXCIvXCIpIHtcbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuICByZXR1cm4gcGF0aC5zdWJzdHJpbmcoMikuc3BsaXQoL1xcLy8pLm1hcCh1bmVzY2FwZSk7XG59XG5mdW5jdGlvbiB1bmVzY2FwZShzdHIpIHtcbiAgcmV0dXJuIHN0ci5yZXBsYWNlKC9+MS9nLCBcIi9cIikucmVwbGFjZSgvfjAvZywgXCJ+XCIpO1xufVxuXG4vLyBub2RlX21vZHVsZXMvdnNjb2RlLWpzb24tbGFuZ3VhZ2VzZXJ2aWNlL2xpYi9lc20vanNvbkxhbmd1YWdlU2VydmljZS5qc1xuZnVuY3Rpb24gZ2V0TGFuZ3VhZ2VTZXJ2aWNlKHBhcmFtcykge1xuICBjb25zdCBwcm9taXNlID0gcGFyYW1zLnByb21pc2VDb25zdHJ1Y3RvciB8fCBQcm9taXNlO1xuICBjb25zdCBqc29uU2NoZW1hU2VydmljZSA9IG5ldyBKU09OU2NoZW1hU2VydmljZShwYXJhbXMuc2NoZW1hUmVxdWVzdFNlcnZpY2UsIHBhcmFtcy53b3Jrc3BhY2VDb250ZXh0LCBwcm9taXNlKTtcbiAganNvblNjaGVtYVNlcnZpY2Uuc2V0U2NoZW1hQ29udHJpYnV0aW9ucyhzY2hlbWFDb250cmlidXRpb25zKTtcbiAgY29uc3QganNvbkNvbXBsZXRpb24gPSBuZXcgSlNPTkNvbXBsZXRpb24oanNvblNjaGVtYVNlcnZpY2UsIHBhcmFtcy5jb250cmlidXRpb25zLCBwcm9taXNlLCBwYXJhbXMuY2xpZW50Q2FwYWJpbGl0aWVzKTtcbiAgY29uc3QganNvbkhvdmVyID0gbmV3IEpTT05Ib3Zlcihqc29uU2NoZW1hU2VydmljZSwgcGFyYW1zLmNvbnRyaWJ1dGlvbnMsIHByb21pc2UpO1xuICBjb25zdCBqc29uRG9jdW1lbnRTeW1ib2xzID0gbmV3IEpTT05Eb2N1bWVudFN5bWJvbHMoanNvblNjaGVtYVNlcnZpY2UpO1xuICBjb25zdCBqc29uVmFsaWRhdGlvbiA9IG5ldyBKU09OVmFsaWRhdGlvbihqc29uU2NoZW1hU2VydmljZSwgcHJvbWlzZSk7XG4gIHJldHVybiB7XG4gICAgY29uZmlndXJlOiAoc2V0dGluZ3MpID0+IHtcbiAgICAgIGpzb25TY2hlbWFTZXJ2aWNlLmNsZWFyRXh0ZXJuYWxTY2hlbWFzKCk7XG4gICAgICBzZXR0aW5ncy5zY2hlbWFzPy5mb3JFYWNoKGpzb25TY2hlbWFTZXJ2aWNlLnJlZ2lzdGVyRXh0ZXJuYWxTY2hlbWEuYmluZChqc29uU2NoZW1hU2VydmljZSkpO1xuICAgICAganNvblZhbGlkYXRpb24uY29uZmlndXJlKHNldHRpbmdzKTtcbiAgICB9LFxuICAgIHJlc2V0U2NoZW1hOiAodXJpKSA9PiBqc29uU2NoZW1hU2VydmljZS5vblJlc291cmNlQ2hhbmdlKHVyaSksXG4gICAgZG9WYWxpZGF0aW9uOiBqc29uVmFsaWRhdGlvbi5kb1ZhbGlkYXRpb24uYmluZChqc29uVmFsaWRhdGlvbiksXG4gICAgZ2V0TGFuZ3VhZ2VTdGF0dXM6IGpzb25WYWxpZGF0aW9uLmdldExhbmd1YWdlU3RhdHVzLmJpbmQoanNvblZhbGlkYXRpb24pLFxuICAgIHBhcnNlSlNPTkRvY3VtZW50OiAoZG9jdW1lbnQpID0+IHBhcnNlMyhkb2N1bWVudCwgeyBjb2xsZWN0Q29tbWVudHM6IHRydWUgfSksXG4gICAgbmV3SlNPTkRvY3VtZW50OiAocm9vdCwgZGlhZ25vc3RpY3MpID0+IG5ld0pTT05Eb2N1bWVudChyb290LCBkaWFnbm9zdGljcyksXG4gICAgZ2V0TWF0Y2hpbmdTY2hlbWFzOiBqc29uU2NoZW1hU2VydmljZS5nZXRNYXRjaGluZ1NjaGVtYXMuYmluZChqc29uU2NoZW1hU2VydmljZSksXG4gICAgZG9SZXNvbHZlOiBqc29uQ29tcGxldGlvbi5kb1Jlc29sdmUuYmluZChqc29uQ29tcGxldGlvbiksXG4gICAgZG9Db21wbGV0ZToganNvbkNvbXBsZXRpb24uZG9Db21wbGV0ZS5iaW5kKGpzb25Db21wbGV0aW9uKSxcbiAgICBmaW5kRG9jdW1lbnRTeW1ib2xzOiBqc29uRG9jdW1lbnRTeW1ib2xzLmZpbmREb2N1bWVudFN5bWJvbHMuYmluZChqc29uRG9jdW1lbnRTeW1ib2xzKSxcbiAgICBmaW5kRG9jdW1lbnRTeW1ib2xzMjoganNvbkRvY3VtZW50U3ltYm9scy5maW5kRG9jdW1lbnRTeW1ib2xzMi5iaW5kKGpzb25Eb2N1bWVudFN5bWJvbHMpLFxuICAgIGZpbmREb2N1bWVudENvbG9yczoganNvbkRvY3VtZW50U3ltYm9scy5maW5kRG9jdW1lbnRDb2xvcnMuYmluZChqc29uRG9jdW1lbnRTeW1ib2xzKSxcbiAgICBnZXRDb2xvclByZXNlbnRhdGlvbnM6IGpzb25Eb2N1bWVudFN5bWJvbHMuZ2V0Q29sb3JQcmVzZW50YXRpb25zLmJpbmQoanNvbkRvY3VtZW50U3ltYm9scyksXG4gICAgZG9Ib3ZlcjoganNvbkhvdmVyLmRvSG92ZXIuYmluZChqc29uSG92ZXIpLFxuICAgIGdldEZvbGRpbmdSYW5nZXMsXG4gICAgZ2V0U2VsZWN0aW9uUmFuZ2VzLFxuICAgIGZpbmREZWZpbml0aW9uOiAoKSA9PiBQcm9taXNlLnJlc29sdmUoW10pLFxuICAgIGZpbmRMaW5rcyxcbiAgICBmb3JtYXQ6IChkb2N1bWVudCwgcmFuZ2UsIG9wdGlvbnMpID0+IGZvcm1hdDQoZG9jdW1lbnQsIG9wdGlvbnMsIHJhbmdlKSxcbiAgICBzb3J0OiAoZG9jdW1lbnQsIG9wdGlvbnMpID0+IHNvcnQoZG9jdW1lbnQsIG9wdGlvbnMpXG4gIH07XG59XG5cbi8vIHNyYy9sYW5ndWFnZS9qc29uL2pzb25Xb3JrZXIudHNcbnZhciBkZWZhdWx0U2NoZW1hUmVxdWVzdFNlcnZpY2U7XG5pZiAodHlwZW9mIGZldGNoICE9PSBcInVuZGVmaW5lZFwiKSB7XG4gIGRlZmF1bHRTY2hlbWFSZXF1ZXN0U2VydmljZSA9IGZ1bmN0aW9uKHVybCkge1xuICAgIHJldHVybiBmZXRjaCh1cmwpLnRoZW4oKHJlc3BvbnNlKSA9PiByZXNwb25zZS50ZXh0KCkpO1xuICB9O1xufVxudmFyIEpTT05Xb3JrZXIgPSBjbGFzcyB7XG4gIGNvbnN0cnVjdG9yKGN0eCwgY3JlYXRlRGF0YSkge1xuICAgIHRoaXMuX2N0eCA9IGN0eDtcbiAgICB0aGlzLl9sYW5ndWFnZVNldHRpbmdzID0gY3JlYXRlRGF0YS5sYW5ndWFnZVNldHRpbmdzO1xuICAgIHRoaXMuX2xhbmd1YWdlSWQgPSBjcmVhdGVEYXRhLmxhbmd1YWdlSWQ7XG4gICAgdGhpcy5fbGFuZ3VhZ2VTZXJ2aWNlID0gZ2V0TGFuZ3VhZ2VTZXJ2aWNlKHtcbiAgICAgIHdvcmtzcGFjZUNvbnRleHQ6IHtcbiAgICAgICAgcmVzb2x2ZVJlbGF0aXZlUGF0aDogKHJlbGF0aXZlUGF0aCwgcmVzb3VyY2UpID0+IHtcbiAgICAgICAgICBjb25zdCBiYXNlID0gcmVzb3VyY2Uuc3Vic3RyKDAsIHJlc291cmNlLmxhc3RJbmRleE9mKFwiL1wiKSArIDEpO1xuICAgICAgICAgIHJldHVybiByZXNvbHZlUGF0aChiYXNlLCByZWxhdGl2ZVBhdGgpO1xuICAgICAgICB9XG4gICAgICB9LFxuICAgICAgc2NoZW1hUmVxdWVzdFNlcnZpY2U6IGNyZWF0ZURhdGEuZW5hYmxlU2NoZW1hUmVxdWVzdCA/IGRlZmF1bHRTY2hlbWFSZXF1ZXN0U2VydmljZSA6IHZvaWQgMCxcbiAgICAgIGNsaWVudENhcGFiaWxpdGllczogQ2xpZW50Q2FwYWJpbGl0aWVzLkxBVEVTVFxuICAgIH0pO1xuICAgIHRoaXMuX2xhbmd1YWdlU2VydmljZS5jb25maWd1cmUodGhpcy5fbGFuZ3VhZ2VTZXR0aW5ncyk7XG4gIH1cbiAgYXN5bmMgZG9WYWxpZGF0aW9uKHVyaSkge1xuICAgIGxldCBkb2N1bWVudCA9IHRoaXMuX2dldFRleHREb2N1bWVudCh1cmkpO1xuICAgIGlmIChkb2N1bWVudCkge1xuICAgICAgbGV0IGpzb25Eb2N1bWVudCA9IHRoaXMuX2xhbmd1YWdlU2VydmljZS5wYXJzZUpTT05Eb2N1bWVudChkb2N1bWVudCk7XG4gICAgICByZXR1cm4gdGhpcy5fbGFuZ3VhZ2VTZXJ2aWNlLmRvVmFsaWRhdGlvbihkb2N1bWVudCwganNvbkRvY3VtZW50LCB0aGlzLl9sYW5ndWFnZVNldHRpbmdzKTtcbiAgICB9XG4gICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZShbXSk7XG4gIH1cbiAgYXN5bmMgZG9Db21wbGV0ZSh1cmksIHBvc2l0aW9uKSB7XG4gICAgbGV0IGRvY3VtZW50ID0gdGhpcy5fZ2V0VGV4dERvY3VtZW50KHVyaSk7XG4gICAgaWYgKCFkb2N1bWVudCkge1xuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuICAgIGxldCBqc29uRG9jdW1lbnQgPSB0aGlzLl9sYW5ndWFnZVNlcnZpY2UucGFyc2VKU09ORG9jdW1lbnQoZG9jdW1lbnQpO1xuICAgIHJldHVybiB0aGlzLl9sYW5ndWFnZVNlcnZpY2UuZG9Db21wbGV0ZShkb2N1bWVudCwgcG9zaXRpb24sIGpzb25Eb2N1bWVudCk7XG4gIH1cbiAgYXN5bmMgZG9SZXNvbHZlKGl0ZW0pIHtcbiAgICByZXR1cm4gdGhpcy5fbGFuZ3VhZ2VTZXJ2aWNlLmRvUmVzb2x2ZShpdGVtKTtcbiAgfVxuICBhc3luYyBkb0hvdmVyKHVyaSwgcG9zaXRpb24pIHtcbiAgICBsZXQgZG9jdW1lbnQgPSB0aGlzLl9nZXRUZXh0RG9jdW1lbnQodXJpKTtcbiAgICBpZiAoIWRvY3VtZW50KSB7XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG4gICAgbGV0IGpzb25Eb2N1bWVudCA9IHRoaXMuX2xhbmd1YWdlU2VydmljZS5wYXJzZUpTT05Eb2N1bWVudChkb2N1bWVudCk7XG4gICAgcmV0dXJuIHRoaXMuX2xhbmd1YWdlU2VydmljZS5kb0hvdmVyKGRvY3VtZW50LCBwb3NpdGlvbiwganNvbkRvY3VtZW50KTtcbiAgfVxuICBhc3luYyBmb3JtYXQodXJpLCByYW5nZSwgb3B0aW9ucykge1xuICAgIGxldCBkb2N1bWVudCA9IHRoaXMuX2dldFRleHREb2N1bWVudCh1cmkpO1xuICAgIGlmICghZG9jdW1lbnQpIHtcbiAgICAgIHJldHVybiBbXTtcbiAgICB9XG4gICAgbGV0IHRleHRFZGl0cyA9IHRoaXMuX2xhbmd1YWdlU2VydmljZS5mb3JtYXQoZG9jdW1lbnQsIHJhbmdlLCBvcHRpb25zKTtcbiAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKHRleHRFZGl0cyk7XG4gIH1cbiAgYXN5bmMgcmVzZXRTY2hlbWEodXJpKSB7XG4gICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZSh0aGlzLl9sYW5ndWFnZVNlcnZpY2UucmVzZXRTY2hlbWEodXJpKSk7XG4gIH1cbiAgYXN5bmMgZmluZERvY3VtZW50U3ltYm9scyh1cmkpIHtcbiAgICBsZXQgZG9jdW1lbnQgPSB0aGlzLl9nZXRUZXh0RG9jdW1lbnQodXJpKTtcbiAgICBpZiAoIWRvY3VtZW50KSB7XG4gICAgICByZXR1cm4gW107XG4gICAgfVxuICAgIGxldCBqc29uRG9jdW1lbnQgPSB0aGlzLl9sYW5ndWFnZVNlcnZpY2UucGFyc2VKU09ORG9jdW1lbnQoZG9jdW1lbnQpO1xuICAgIGxldCBzeW1ib2xzID0gdGhpcy5fbGFuZ3VhZ2VTZXJ2aWNlLmZpbmREb2N1bWVudFN5bWJvbHMyKGRvY3VtZW50LCBqc29uRG9jdW1lbnQpO1xuICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUoc3ltYm9scyk7XG4gIH1cbiAgYXN5bmMgZmluZERvY3VtZW50Q29sb3JzKHVyaSkge1xuICAgIGxldCBkb2N1bWVudCA9IHRoaXMuX2dldFRleHREb2N1bWVudCh1cmkpO1xuICAgIGlmICghZG9jdW1lbnQpIHtcbiAgICAgIHJldHVybiBbXTtcbiAgICB9XG4gICAgbGV0IGpzb25Eb2N1bWVudCA9IHRoaXMuX2xhbmd1YWdlU2VydmljZS5wYXJzZUpTT05Eb2N1bWVudChkb2N1bWVudCk7XG4gICAgbGV0IGNvbG9yU3ltYm9scyA9IHRoaXMuX2xhbmd1YWdlU2VydmljZS5maW5kRG9jdW1lbnRDb2xvcnMoZG9jdW1lbnQsIGpzb25Eb2N1bWVudCk7XG4gICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZShjb2xvclN5bWJvbHMpO1xuICB9XG4gIGFzeW5jIGdldENvbG9yUHJlc2VudGF0aW9ucyh1cmksIGNvbG9yLCByYW5nZSkge1xuICAgIGxldCBkb2N1bWVudCA9IHRoaXMuX2dldFRleHREb2N1bWVudCh1cmkpO1xuICAgIGlmICghZG9jdW1lbnQpIHtcbiAgICAgIHJldHVybiBbXTtcbiAgICB9XG4gICAgbGV0IGpzb25Eb2N1bWVudCA9IHRoaXMuX2xhbmd1YWdlU2VydmljZS5wYXJzZUpTT05Eb2N1bWVudChkb2N1bWVudCk7XG4gICAgbGV0IGNvbG9yUHJlc2VudGF0aW9ucyA9IHRoaXMuX2xhbmd1YWdlU2VydmljZS5nZXRDb2xvclByZXNlbnRhdGlvbnMoXG4gICAgICBkb2N1bWVudCxcbiAgICAgIGpzb25Eb2N1bWVudCxcbiAgICAgIGNvbG9yLFxuICAgICAgcmFuZ2VcbiAgICApO1xuICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUoY29sb3JQcmVzZW50YXRpb25zKTtcbiAgfVxuICBhc3luYyBnZXRGb2xkaW5nUmFuZ2VzKHVyaSwgY29udGV4dCkge1xuICAgIGxldCBkb2N1bWVudCA9IHRoaXMuX2dldFRleHREb2N1bWVudCh1cmkpO1xuICAgIGlmICghZG9jdW1lbnQpIHtcbiAgICAgIHJldHVybiBbXTtcbiAgICB9XG4gICAgbGV0IHJhbmdlcyA9IHRoaXMuX2xhbmd1YWdlU2VydmljZS5nZXRGb2xkaW5nUmFuZ2VzKGRvY3VtZW50LCBjb250ZXh0KTtcbiAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKHJhbmdlcyk7XG4gIH1cbiAgYXN5bmMgZ2V0U2VsZWN0aW9uUmFuZ2VzKHVyaSwgcG9zaXRpb25zKSB7XG4gICAgbGV0IGRvY3VtZW50ID0gdGhpcy5fZ2V0VGV4dERvY3VtZW50KHVyaSk7XG4gICAgaWYgKCFkb2N1bWVudCkge1xuICAgICAgcmV0dXJuIFtdO1xuICAgIH1cbiAgICBsZXQganNvbkRvY3VtZW50ID0gdGhpcy5fbGFuZ3VhZ2VTZXJ2aWNlLnBhcnNlSlNPTkRvY3VtZW50KGRvY3VtZW50KTtcbiAgICBsZXQgcmFuZ2VzID0gdGhpcy5fbGFuZ3VhZ2VTZXJ2aWNlLmdldFNlbGVjdGlvblJhbmdlcyhkb2N1bWVudCwgcG9zaXRpb25zLCBqc29uRG9jdW1lbnQpO1xuICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUocmFuZ2VzKTtcbiAgfVxuICBhc3luYyBwYXJzZUpTT05Eb2N1bWVudCh1cmkpIHtcbiAgICBsZXQgZG9jdW1lbnQgPSB0aGlzLl9nZXRUZXh0RG9jdW1lbnQodXJpKTtcbiAgICBpZiAoIWRvY3VtZW50KSB7XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG4gICAgbGV0IGpzb25Eb2N1bWVudCA9IHRoaXMuX2xhbmd1YWdlU2VydmljZS5wYXJzZUpTT05Eb2N1bWVudChkb2N1bWVudCk7XG4gICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZShqc29uRG9jdW1lbnQpO1xuICB9XG4gIGFzeW5jIGdldE1hdGNoaW5nU2NoZW1hcyh1cmkpIHtcbiAgICBsZXQgZG9jdW1lbnQgPSB0aGlzLl9nZXRUZXh0RG9jdW1lbnQodXJpKTtcbiAgICBpZiAoIWRvY3VtZW50KSB7XG4gICAgICByZXR1cm4gW107XG4gICAgfVxuICAgIGxldCBqc29uRG9jdW1lbnQgPSB0aGlzLl9sYW5ndWFnZVNlcnZpY2UucGFyc2VKU09ORG9jdW1lbnQoZG9jdW1lbnQpO1xuICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUodGhpcy5fbGFuZ3VhZ2VTZXJ2aWNlLmdldE1hdGNoaW5nU2NoZW1hcyhkb2N1bWVudCwganNvbkRvY3VtZW50KSk7XG4gIH1cbiAgX2dldFRleHREb2N1bWVudCh1cmkpIHtcbiAgICBsZXQgbW9kZWxzID0gdGhpcy5fY3R4LmdldE1pcnJvck1vZGVscygpO1xuICAgIGZvciAobGV0IG1vZGVsIG9mIG1vZGVscykge1xuICAgICAgaWYgKG1vZGVsLnVyaS50b1N0cmluZygpID09PSB1cmkpIHtcbiAgICAgICAgcmV0dXJuIFRleHREb2N1bWVudDIuY3JlYXRlKFxuICAgICAgICAgIHVyaSxcbiAgICAgICAgICB0aGlzLl9sYW5ndWFnZUlkLFxuICAgICAgICAgIG1vZGVsLnZlcnNpb24sXG4gICAgICAgICAgbW9kZWwuZ2V0VmFsdWUoKVxuICAgICAgICApO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gbnVsbDtcbiAgfVxufTtcbnZhciBTbGFzaCA9IFwiL1wiLmNoYXJDb2RlQXQoMCk7XG52YXIgRG90ID0gXCIuXCIuY2hhckNvZGVBdCgwKTtcbmZ1bmN0aW9uIGlzQWJzb2x1dGVQYXRoKHBhdGgpIHtcbiAgcmV0dXJuIHBhdGguY2hhckNvZGVBdCgwKSA9PT0gU2xhc2g7XG59XG5mdW5jdGlvbiByZXNvbHZlUGF0aCh1cmlTdHJpbmcsIHBhdGgpIHtcbiAgaWYgKGlzQWJzb2x1dGVQYXRoKHBhdGgpKSB7XG4gICAgY29uc3QgdXJpID0gVVJJMi5wYXJzZSh1cmlTdHJpbmcpO1xuICAgIGNvbnN0IHBhcnRzID0gcGF0aC5zcGxpdChcIi9cIik7XG4gICAgcmV0dXJuIHVyaS53aXRoKHsgcGF0aDogbm9ybWFsaXplUGF0aChwYXJ0cykgfSkudG9TdHJpbmcoKTtcbiAgfVxuICByZXR1cm4gam9pblBhdGgodXJpU3RyaW5nLCBwYXRoKTtcbn1cbmZ1bmN0aW9uIG5vcm1hbGl6ZVBhdGgocGFydHMpIHtcbiAgY29uc3QgbmV3UGFydHMgPSBbXTtcbiAgZm9yIChjb25zdCBwYXJ0IG9mIHBhcnRzKSB7XG4gICAgaWYgKHBhcnQubGVuZ3RoID09PSAwIHx8IHBhcnQubGVuZ3RoID09PSAxICYmIHBhcnQuY2hhckNvZGVBdCgwKSA9PT0gRG90KSB7XG4gICAgfSBlbHNlIGlmIChwYXJ0Lmxlbmd0aCA9PT0gMiAmJiBwYXJ0LmNoYXJDb2RlQXQoMCkgPT09IERvdCAmJiBwYXJ0LmNoYXJDb2RlQXQoMSkgPT09IERvdCkge1xuICAgICAgbmV3UGFydHMucG9wKCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIG5ld1BhcnRzLnB1c2gocGFydCk7XG4gICAgfVxuICB9XG4gIGlmIChwYXJ0cy5sZW5ndGggPiAxICYmIHBhcnRzW3BhcnRzLmxlbmd0aCAtIDFdLmxlbmd0aCA9PT0gMCkge1xuICAgIG5ld1BhcnRzLnB1c2goXCJcIik7XG4gIH1cbiAgbGV0IHJlcyA9IG5ld1BhcnRzLmpvaW4oXCIvXCIpO1xuICBpZiAocGFydHNbMF0ubGVuZ3RoID09PSAwKSB7XG4gICAgcmVzID0gXCIvXCIgKyByZXM7XG4gIH1cbiAgcmV0dXJuIHJlcztcbn1cbmZ1bmN0aW9uIGpvaW5QYXRoKHVyaVN0cmluZywgLi4ucGF0aHMpIHtcbiAgY29uc3QgdXJpID0gVVJJMi5wYXJzZSh1cmlTdHJpbmcpO1xuICBjb25zdCBwYXJ0cyA9IHVyaS5wYXRoLnNwbGl0KFwiL1wiKTtcbiAgZm9yIChsZXQgcGF0aCBvZiBwYXRocykge1xuICAgIHBhcnRzLnB1c2goLi4ucGF0aC5zcGxpdChcIi9cIikpO1xuICB9XG4gIHJldHVybiB1cmkud2l0aCh7IHBhdGg6IG5vcm1hbGl6ZVBhdGgocGFydHMpIH0pLnRvU3RyaW5nKCk7XG59XG5cbi8vIHNyYy9sYW5ndWFnZS9qc29uL2pzb24ud29ya2VyLnRzXG5zZWxmLm9ubWVzc2FnZSA9ICgpID0+IHtcbiAgd29ya2VyLmluaXRpYWxpemUoKGN0eCwgY3JlYXRlRGF0YSkgPT4ge1xuICAgIHJldHVybiBuZXcgSlNPTldvcmtlcihjdHgsIGNyZWF0ZURhdGEpO1xuICB9KTtcbn07XG4iXSwKICAibWFwcGluZ3MiOiAiOztBQUtPLE1BQU0sZUFBTixNQUFtQjtBQUFBLElBQ3RCLGNBQWM7QUFDVixXQUFLLFlBQVksQ0FBQztBQUNsQixXQUFLLHlCQUF5QixTQUFVLEdBQUc7QUFDdkMsbUJBQVcsTUFBTTtBQUNiLGNBQUksRUFBRSxPQUFPO0FBQ1QsZ0JBQUksaUJBQWlCLG1CQUFtQixDQUFDLEdBQUc7QUFDeEMsb0JBQU0sSUFBSSxpQkFBaUIsRUFBRSxVQUFVLFNBQVMsRUFBRSxLQUFLO0FBQUEsWUFDM0Q7QUFDQSxrQkFBTSxJQUFJLE1BQU0sRUFBRSxVQUFVLFNBQVMsRUFBRSxLQUFLO0FBQUEsVUFDaEQ7QUFDQSxnQkFBTTtBQUFBLFFBQ1YsR0FBRyxDQUFDO0FBQUEsTUFDUjtBQUFBLElBQ0o7QUFBQSxJQUNBLEtBQUssR0FBRztBQUNKLFdBQUssVUFBVSxRQUFRLENBQUMsYUFBYTtBQUNqQyxpQkFBUyxDQUFDO0FBQUEsTUFDZCxDQUFDO0FBQUEsSUFDTDtBQUFBLElBQ0Esa0JB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QU8sS0FBSztBQUFBLE1BQ2hHLENBQUMsR0FBRyxHQUF5QixVQUFVLEdBQXlCLE9BQU8sR0FBRyxPQUFPLE9BQU8sS0FBSztBQUFBLE1BQzdGLENBQUMsR0FBRyxJQUF3QixRQUFRLElBQXVCLEtBQUssSUFBSSxRQUFRLE9BQU8sS0FBSztBQUFBLE1BQ3hGLENBQUMsR0FBRyxJQUF3QixRQUFRLElBQXVCLEtBQUssSUFBSSxRQUFRLE9BQU8sS0FBSztBQUFBLE1BQ3hGLENBQUMsR0FBRyxJQUF3QixRQUFRLElBQXVCLEtBQUssSUFBSSxRQUFRLE9BQU8sS0FBSztBQUFBLE1BQ3hGLENBQUMsR0FBRyxJQUF3QixRQUFRLElBQXVCLEtBQUssSUFBSSxRQUFRLE9BQU8sS0FBSztBQUFBLE1BQ3hGLENBQUMsR0FBRyxJQUF3QixRQUFRLElBQXVCLEtBQUssSUFBSSxRQUFRLE9BQU8sS0FBSztBQUFBLE1BQ3hGLENBQUMsR0FBRyxJQUF3QixRQUFRLElBQXVCLEtBQUssSUFBSSxRQUFRLE9BQU8sS0FBSztBQUFBLE1BQ3hGLENBQUMsR0FBRyxJQUF3QixRQUFRLElBQXVCLEtBQUssSUFBSSxRQUFRLE9BQU8sS0FBSztBQUFBLE1BQ3hGLENBQUMsR0FBRyxJQUF3QixRQUFRLElBQXVCLEtBQUssSUFBSSxRQUFRLE9BQU8sS0FBSztBQUFBLE1BQ3hGLENBQUMsR0FBRyxJQUF3QixRQUFRLElBQXVCLEtBQUssSUFBSSxRQUFRLE9BQU8sS0FBSztBQUFBLE1BQ3hGLENBQUMsR0FBRyxJQUF3QixRQUFRLElBQXVCLEtBQUssSUFBSSxRQUFRLE9BQU8sS0FBSztBQUFBLE1BQ3hGLENBQUMsR0FBRyxJQUF3QixRQUFRLElBQXVCLEtBQUssSUFBSSxRQUFRLE9BQU8sS0FBSztBQUFBLE1BQ3hGLENBQUMsR0FBRyxJQUF3QixRQUFRLElBQXVCLEtBQUssSUFBSSxRQUFRLE9BQU8sS0FBSztBQUFBLE1BQ3hGLENBQUMsR0FBRyxJQUF3QixRQUFRLElBQXVCLEtBQUssSUFBSSxRQUFRLE9BQU8sS0FBSztBQUFBLE1BQ3hGLENBQUMsR0FBRyxJQUF3QixRQUFRLElBQXVCLEtBQUssSUFBSSxRQUFRLE9BQU8sS0FBSztBQUFBLE1BQ3hGLENBQUMsR0FBRyxJQUF3QixRQUFRLElBQXVCLEtBQUssSUFBSSxRQUFRLE9BQU8sS0FBSztBQUFBLE1BQ3hGLENBQUMsR0FBRyxJQUF3QixRQUFRLElBQXVCLEtBQUssSUFBSSxRQUFRLE9BQU8sS0FBSztBQUFBLE1BQ3hGLENBQUMsR0FBRyxJQUF3QixRQUFRLElBQXVCLEtBQUssSUFBSSxRQUFRLE9BQU8sS0FBSztBQUFBLE1BQ3hGLENBQUMsR0FBRyxJQUF3QixRQUFRLElBQXVCLEtBQUssSUFBSSxRQUFRLE9BQU8sS0FBSztBQUFBLE1BQ3hGLENBQUMsR0FBRyxJQUF3QixRQUFRLElBQXVCLEtBQUssSUFBSSxRQUFRLE9BQU8sS0FBSztBQUFBLE1BQ3hGLENBQUMsR0FBRyxJQUF3QixRQUFRLElBQXVCLEtBQUssSUFBSSxRQUFRLE9BQU8sS0FBSztBQUFBLE1BQ3hGLENBQUMsR0FBRyxJQUF3QixRQUFRLElBQXVCLEtBQUssSUFBSSxRQUFRLE9BQU8sS0FBSztBQUFBLE1BQ3hGLENBQUMsR0FBRyxJQUF3QixRQUFRLElBQXVCLEtBQUssSUFBSSxRQUFRLE9BQU8sS0FBSztBQUFBLE1BQ3hGLENBQUMsR0FBRyxJQUF3QixRQUFRLElBQXVCLEtBQUssSUFBSSxRQUFRLE9BQU8sS0FBSztBQUFBLE1BQ3hGLENBQUMsR0FBRyxJQUF3QixRQUFRLElBQXVCLEtBQUssSUFBSSxRQUFRLE9BQU8sS0FBSztBQUFBLE1BQ3hGLENBQUMsR0FBRyxJQUF3QixRQUFRLElBQXVCLEtBQUssSUFBSSxRQUFRLE9BQU8sS0FBSztBQUFBLE1BQ3hGLENBQUMsR0FBRyxJQUF3QixRQUFRLElBQXVCLEtBQUssSUFBSSxRQUFRLE9BQU8sS0FBSztBQUFBLE1BQ3hGLENBQUMsR0FBRyxJQUEwQixVQUFVLElBQXlCLEtBQUssSUFBSSxRQUFRLE9BQU8sS0FBSztBQUFBLE1BQzlGLENBQUMsR0FBRyxJQUEwQixVQUFVLElBQXlCLEtBQUssSUFBSSxRQUFRLE9BQU8sS0FBSztBQUFBLE1BQzlGLENBQUMsR0FBRyxJQUEwQixVQUFVLElBQXlCLEtBQUssSUFBSSxRQUFRLE9BQU8sS0FBSztBQUFBLE1BQzlGLENBQUMsR0FBRyxJQUEwQixVQUFVLElBQXlCLEtBQUssSUFBSSxRQUFRLE9BQU8sS0FBSztBQUFBLE1BQzlGLENBQUMsR0FBRyxJQUEwQixVQUFVLElBQXlCLEtBQUssSUFBSSxRQUFRLE9BQU8sS0FBSztBQUFBLE1BQzlGLENBQUMsR0FBRyxJQUEwQixVQUFVLElBQXlCLEtBQUssSUFBSSxRQUFRLE9BQU8sS0FBSztBQUFBLE1BQzlGLENBQUMsR0FBRyxJQUEwQixVQUFVLElBQXlCLEtBQUssSUFBSSxRQUFRLE9BQU8sS0FBSztBQUFBLE1BQzlGLENBQUMsR0FBRyxJQUEwQixVQUFVLElBQXlCLEtBQUssSUFBSSxRQUFRLE9BQU8sS0FBSztBQUFBLE1BQzlGLENBQUMsR0FBRyxJQUEwQixVQUFVLElBQXlCLEtBQUssSUFBSSxRQUFRLE9BQU8sS0FBSztBQUFBLE1BQzlGLENBQUMsR0FBRyxJQUEwQixVQUFVLElBQXlCLEtBQUssSUFBSSxRQUFRLE9BQU8sS0FBSztBQUFBLE1BQzlGLENBQUMsR0FBRyxJQUF5QixTQUFTLEdBQXVCLFNBQVMsSUFBSSxhQUFhLE9BQU8sS0FBSztBQUFBLE1BQ25HLENBQUMsR0FBRyxJQUEwQixVQUFVLEdBQXdCLFVBQVUsSUFBSSxhQUFhLE9BQU8sS0FBSztBQUFBLE1BQ3ZHLENBQUMsR0FBRyxJQUE2QixhQUFhLEdBQTJCLGFBQWEsR0FBRyxXQUFXLE9BQU8sS0FBSztBQUFBLE1BQ2hILENBQUMsR0FBRyxJQUF1QixPQUFPLEdBQXFCLE9BQU8sR0FBRyxVQUFVLE9BQU8sS0FBSztBQUFBLE1BQ3ZGLENBQUMsR0FBRyxJQUF5QixTQUFTLElBQXdCLFNBQVMsSUFBSSxZQUFZLE9BQU8sS0FBSztBQUFBLE1BQ25HLENBQUMsR0FBRyxJQUF5QixTQUFTLElBQXdCLEtBQUssS0FB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MEIsU0FBUyxHQUF5QixPQUFPLEdBQUcsT0FBTyxPQUFPLEtBQUs7QUFBQSxNQUM3RixDQUFDLEdBQUcsS0FBZ0MsZUFBZSxHQUF5QixPQUFPLEdBQUcsT0FBTyxPQUFPLEtBQUs7QUFBQSxNQUN6RyxDQUFDLEdBQUcsS0FBd0IsT0FBTyxJQUFzQixPQUFPLEtBQUssVUFBVSxPQUFPLEtBQUs7QUFBQSxNQUMzRixDQUFDLEdBQUcsS0FBd0IsT0FBTyxJQUFzQixPQUFPLEtBQUssVUFBVSxPQUFPLEtBQUs7QUFBQSxNQUMzRixDQUFDLEdBQUcsS0FBd0IsT0FBTyxJQUFzQixPQUFPLEtBQUssVUFBVSxPQUFPLEtBQUs7QUFBQSxNQUMzRixDQUFDLEdBQUcsS0FBd0IsT0FBTyxJQUFzQixPQUFPLEtBQUssVUFBVSxPQUFPLEtBQUs7QUFBQSxNQUMzRixDQUFDLEdBQUcsS0FBd0IsT0FBTyxJQUFzQixPQUFPLEtBQUssVUFBVSxPQUFPLEtBQUs7QUFBQSxNQUMzRixDQUFDLEdBQUcsS0FBd0IsT0FBTyxJQUFzQixPQUFPLEtBQUssVUFBVSxPQUFPLEtBQUs7QUFBQSxNQUMzRixDQUFDLEdBQUcsS0FBd0IsT0FBTyxJQUFzQixPQUFPLEtBQUssVUFBVSxPQUFPLEtBQUs7QUFBQSxNQUMzRixDQUFDLEdBQUcsS0FBd0IsT0FBTyxJQUFzQixPQUFPLEtBQUssVUFBVSxPQUFPLEtBQUs7QUFBQSxNQUMzRixDQUFDLEdBQUcsS0FBd0IsT0FBTyxJQUFzQixPQUFPLEtBQUssVUFBVSxPQUFPLEtBQUs7QUFBQSxNQUMzRixDQUFDLEdBQUcsS0FBd0IsT0FBTyxJQUFzQixPQUFPLEtBQUssVUFBVSxPQUFPLEtBQUs7QUFBQSxNQUMzRixDQUFDLEdBQUcsS0FBd0IsT0FBTyxJQUFzQixPQUFPLEtBQUssVUFBVSxPQUFPLEtBQUs7QUFBQSxNQUMzRixDQUFDLEdBQUcsS0FBd0IsT0FBTyxJQUFzQixPQUFPLEtBQUssVUFBVSxPQUFPLEtBQUs7QUFBQSxNQUMzRixDQUFDLEdBQUcsS0FBeUIsUUFBUSxHQUF5QixPQUFP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UUFBUSxJQUFJLEVBQUUsSUFBSTtBQUNsQyxJQUFBQSxTQUFRQSxTQUFRLFFBQVEsSUFBSSxFQUFFLElBQUk7QUFDbEMsSUFBQUEsU0FBUUEsU0FBUSxRQUFRLElBQUksRUFBRSxJQUFJO0FBQ2xDLElBQUFBLFNBQVFBLFNBQVEsUUFBUSxJQUFJLEVBQUUsSUFBSTtBQUNsQyxJQUFBQSxTQUFRQSxTQUFRLFFBQVEsSUFBSSxFQUFFLElBQUk7QUFDbEMsSUFBQUEsU0FBUUEsU0FBUSxRQUFRLElBQUksRUFBRSxJQUFJO0FBQ2xDLElBQUFBLFNBQVFBLFNBQVEsUUFBUSxJQUFJLEVBQUUsSUFBSTtBQUNsQyxJQUFBQSxTQUFRQSxTQUFRLFFBQVEsSUFBSSxFQUFFLElBQUk7QUFDbEMsSUFBQUEsU0FBUUEsU0FBUSxRQUFRLElBQUksRUFBRSxJQUFJO0FBQ2xDLElBQUFBLFNBQVFBLFNBQVEsUUFBUSxJQUFJLEVBQUUsSUFBSTtBQUNsQyxJQUFBQSxTQUFRQSxTQUFRLFFBQVEsSUFBSSxFQUFFLElBQUk7QUFDbEMsSUFBQUEsU0FBUUEsU0FBUSxRQUFRLElBQUksRUFBRSxJQUFJO0FBQ2xDLElBQUFBLFNBQVFBLFNBQVEsTUFBTSxJQUFJLEVBQUUsSUFBSTtBQUNoQyxJQUFBQSxTQUFRQSxTQUFRLE1BQU0sSUFBSSxFQUFFLElBQUk7QUFDaEMsSUFBQUEsU0FBUUEsU0FBUSxNQUFNLElBQUksRUFBRSxJQUFJO0FBQ2hDLElBQUFBLFNBQVFBLFNBQVEsTUFBTSxJQUFJLEVBQUUsSUFBSTtBQUNoQyxJQUFBQSxTQUFRQSxTQUFRLE1BQU0sSUFBSSxFQUFFLElBQUk7QUFDaEMsSUFBQUEsU0FBUUEsU0FBUSxNQUFNLElBQUksRUFBRSxJQUFJO0FBQ2hDLElBQUFBLFNBQVFBLFNBQVEsTUFBTSxJQUFJLEVBQUUsSUFBSTtBQUNoQyxJQUFBQSxTQUFRQSxTQUFRLE1BQU0sSUFBSSxFQUFFLElBQUk7QUFDaEMsSUFBQUEsU0FBUUEsU0FBUSxNQUFNLElBQUksRUFBRSxJQUFJO0FBQ2hDLElBQUFBLFNBQVFBLFNBQVEsTUFBTSxJQUFJLEVBQUUsSUFBSTtBQUNoQyxJQUFBQSxTQUFRQSxTQUFRLE1BQU0sSUFBSSxFQUFFLElBQUk7QUFDaEMsSUFBQUEsU0FBUUEsU0FBUSxNQUFNLElBQUksRUFBRSxJQUFJO0FBQ2hDLElBQUFBLFNBQVFBLFNBQVEsTUFBTSxJQUFJLEVBQUUsSUFBSTtBQUNoQyxJQUFBQSxTQUFRQSxTQUFRLE1BQU0sSUFBSSxFQUFFLElBQUk7QUFDaEMsSUFBQUEsU0FBUUEsU0FBUSxNQUFNLElBQUksRUFBRSxJQUFJO0FBQ2hDLElBQUFBLFNBQVFBLFNBQVEsTUFBTSxJQUFJLEVBQUUsSUFBSTtBQUNoQyxJQUFBQSxTQUFRQSxTQUFRLE1BQU0sSUFBSSxFQUFFLElBQUk7QUFDaEMsSUFBQUEsU0FBUUEsU0FBUSxNQUFNLElBQUksRUFBRSxJQUFJO0FBQ2hDLElBQUFBLFNBQVFBLFNBQVEsTUFBTSxJQUFJLEVBQUUsSUFBSTtBQUNoQyxJQUFBQSxTQUFRQSxTQUFRLE1BQU0sSUFBSSxFQUFFLElBQUk7QUFDaEMsSUFBQUEsU0FBUUEsU0FBUSxNQUFNLElBQUksRUFBRSxJQUFJO0FBQ2hDLElBQUFBLFNBQVFBLFNBQVEsTUFBTSxJQUFJLEVBQUUsSUFBSTtBQUNoQyxJQUFBQSxTQUFRQSxTQUFRLE1BQU0sSUFBSSxFQUFFLElBQUk7QUFDaEMsSUFBQUEsU0FBUUEsU0FBUSxNQUFNLElBQUksRUFBRSxJQUFJO0FBQ2hDLElBQUFBLFNBQVFBLFNBQVEsTUFBTSxJQUFJLEVBQUUsSUFBSTtBQUNoQyxJQUFBQSxTQUFRQSxTQUFRLE1BQU0sSUFBSSxFQUFFLElBQUk7QUFDaEMsSUFBQUEsU0FBUUEsU0FBUSxNQUFNLElBQUksRUFBRSxJQUFJO0FBQ2hDLElBQUFBLFNBQVFBLFNBQVEsYUFBYSxJQUFJLEVBQUUsSUFBSTtBQUN2QyxJQUFBQSxTQUFRQSxTQUFRLElBQUksSUFBSSxFQUFFLElBQUk7QUFDOUIsSUFBQUEsU0FBUUEsU0FBUSxJQUFJLElBQUksRUFBRSxJQUFJO0FBQzlCLElBQUFBLFNBQVFBLFNBQVEsSUFBSSxJQUFJLEVBQUUsSUFBSTtBQUM5QixJQUFBQSxTQUFRQSxTQUFRLElBQUksSUFBSSxFQUFFLElBQUk7QUFDOUIsSUFBQUEsU0FBUUEsU0FBUSxJQUFJLElBQUksRUFBRSxJQUFJO0FBQzlCLElBQUFBLFNBQVFBLFNBQVEsSUFBSSxJQUFJLEVBQUUsSUFBSTtBQUM5QixJQUFBQSxTQUFRQSxTQUFRLElBQUksSUFBSSxFQUFFLElBQUk7QUFDOUIsSUFBQUEsU0FBUUEsU0FBUSxJQUFJLElBQUksRUFBRSxJQUFJO0FBQzlCLElBQUFBLFNBQVFBLFNBQVEsSUFBSSxJQUFJLEVBQUUsSUFBSTtBQUM5QixJQUFBQSxTQUFRQSxTQUFRLEtBQUssSUFBSSxFQUFFLElBQUk7QUFDL0IsSUFBQUEsU0FBUUEsU0FBUSxLQUFLLElBQUksRUFBRSxJQUFJO0FBQy9CLElBQUFBLFNBQVFBLFNBQVEsS0FBSyxJQUFJLEVBQUUsSUFBSTtBQUMvQixJQUFBQSxTQUFRQSxTQUFRLEtBQUssSUFBSSxFQUFFLElBQUk7QUFDL0IsSUFBQUEsU0FBUUEsU0FBUSxLQUFLLElBQUksRUFBRSxJQUFJO0FBQy9CLElBQUFBLFNBQVFBLFNBQVEsS0FBSyxJQUFJLEVBQUUsSUFBSTtBQUMvQixJQUFBQSxTQUFRQSxTQUFRLEtBQUssSUFBSSxFQUFFLElBQUk7QUFDL0IsSUFBQUEsU0FBUUEsU0FBUSxLQUFLLElBQUksRUFBRSxJQUFJO0FBQy9CLElBQUFBLFNBQVFBLFNBQVEsS0FBSyxJQUFJLEVBQUUsSUFBSTtBQUMvQixJQUFBQSxTQUFRQSxTQUFRLEtBQUssSUFBSSxFQUFFLElBQUk7QUFDL0IsSUFBQUEsU0FBUUEsU0FBUSxLQUFLLElBQUksRUFBRSxJQUFJO0FBQy9CLElBQUFBLFNBQVFBLFNBQVEsS0FBSyxJQUFJLEVBQUUsSUFBSTtBQUMvQixJQUFBQSxTQUFRQSxTQUFRLEtBQUssSUFBSSxFQUFFLElBQUk7QUFDL0IsSUFBQUEsU0FBUUEsU0FBUSxLQUFLLElBQUksRUFBRSxJQUFJO0FBQy9CLElBQUFBLFNB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QUksSUFBSSxFQUFFLElBQUk7QUFDOUMsb0JBQWdCLGdCQUFnQixJQUFJLElBQUksRUFBRSxJQUFJO0FBQzlDLG9CQUFnQixnQkFBZ0IsSUFBSSxJQUFJLEVBQUUsSUFBSTtBQUM5QyxvQkFBZ0IsZ0JBQWdCLEdBQUcsSUFBSSxFQUFFLElBQUk7QUFDN0Msb0JBQWdCLGdCQUFnQixHQUFHLElBQUksRUFBRSxJQUFJO0FBQzdDLG9CQUFnQixnQkFBZ0IsR0FBRyxJQUFJLEVBQUUsSUFBSTtBQUM3QyxvQkFBZ0IsZ0JBQWdCLEdBQUcsSUFBSSxHQUFHLElBQUk7QUFDOUMsb0JBQWdCLGdCQUFnQixHQUFHLElBQUksR0FBRyxJQUFJO0FBQzlDLG9CQUFnQixnQkFBZ0IsR0FBRyxJQUFJLEdBQUcsSUFBSTtBQUM5QyxvQkFBZ0IsZ0JBQWdCLEdBQUcsSUFBSSxHQUFHLElBQUk7QUFDOUMsb0JBQWdCLGdCQUFnQixHQUFHLElBQUksR0FBRyxJQUFJO0FBQzlDLG9CQUFnQixnQkFBZ0IsR0FBRyxJQUFJLEdBQUcsSUFBSTtBQUM5QyxvQkFBZ0IsZ0JBQWdCLEdBQUcsSUFBSSxHQUFHLElBQUk7QUFDOUMsb0JBQWdCLGdCQUFnQixHQUFHLElBQUksR0FBRyxJQUFJO0FBQzlDLG9CQUFnQixnQkFBZ0IsR0FBRyxJQUFJLEdBQUcsSUFBSTtBQUM5QyxvQkFBZ0IsZ0JBQWdCLEdBQUcsSUFBSSxHQUFHLElBQUk7QUFDOUMsb0JBQWdCLGdCQUFnQixHQUFHLElBQUksR0FBRyxJQUFJO0FBQzlDLG9CQUFnQixnQkFBZ0IsR0FBRyxJQUFJLEdBQUcsSUFBSTtBQUM5QyxvQkFBZ0IsZ0JBQWdCLEdBQUcsSUFBSSxHQUFHLElBQUk7QUFDOUMsb0JBQWdCLGdCQUFnQixHQUFHLElBQUksR0FBRyxJQUFJO0FBQzlDLG9CQUFnQixnQkFBZ0IsR0FBRyxJQUFJLEdBQUcsSUFBSTtBQUM5QyxvQkFBZ0IsZ0JBQWdCLEdBQUcsSUFBSSxHQUFHLElBQUk7QUFDOUMsb0JBQWdCLGdCQUFnQixHQUFHLElBQUksR0FBRyxJQUFJO0FBQzlDLG9CQUFnQixnQkFBZ0IsR0FBRyxJQUFJLEdBQUcsSUFBSTtBQUM5QyxvQkFBZ0IsZ0JBQWdCLEdBQUcsSUFBSSxHQUFHLElBQUk7QUFDOUMsb0JBQWdCLGdCQUFnQixHQUFHLElBQUksR0FBRyxJQUFJO0FBQzlDLG9CQUFnQixnQkFBZ0IsR0FBRyxJQUFJLEdBQUcsSUFBSTtBQUM5QyxvQkFBZ0IsZ0JBQWdCLEdBQUcsSUFBSSxHQUFHLElBQUk7QUFDOUMsb0JBQWdCLGdCQUFnQixHQUFHLElBQUksR0FBRyxJQUFJO0FBQzlDLG9CQUFnQixnQkFBZ0IsR0FBRyxJQUFJLEVBQUUsSUFBSTtBQUM3QyxvQkFBZ0IsZ0JBQWdCLEdBQUcsSUFBSSxFQUFFLElBQUk7QUFDN0Msb0JBQWdCLGdCQUFnQixHQUFHLElBQUksRUFBRSxJQUFJO0FBQzdDLG9CQUFnQixnQkFBZ0IsR0FBRyxJQUFJLEVBQUUsSUFBSTtBQUM3QyxvQkFBZ0IsZ0JBQWdCLEdBQUcsSUFBSSxFQUFFLElBQUk7QUFDN0Msb0JBQWdCLGdCQUFnQixHQUFHLElBQUksRUFBRSxJQUFJO0FBQzdDLG9CQUFnQixnQkFBZ0IsR0FBRyxJQUFJLEVBQUUsSUFBSTtBQUM3QyxvQkFBZ0IsZ0JBQWdCLEdBQUcsSUFBSSxFQUFFLElBQUk7QUFDN0Msb0JBQWdCLGdCQUFnQixHQUFHLElBQUksRUFBRSxJQUFJO0FBQzdDLG9CQUFnQixnQkFBZ0IsR0FBRyxJQUFJLEVBQUUsSUFBSTtBQUM3QyxvQkFBZ0IsZ0JBQWdCLEdBQUcsSUFBSSxFQUFFLElBQUk7QUFDN0Msb0JBQWdCLGdCQUFnQixHQUFHLElBQUksRUFBRSxJQUFJO0FBQzdDLG9CQUFnQixnQkFBZ0IsR0FBRyxJQUFJLEVBQUUsSUFBSTtBQUM3QyxvQkFBZ0IsZ0JBQWdCLEdBQUcsSUFBSSxFQUFFLElBQUk7QUFDN0Msb0JBQWdCLGdCQUFnQixHQUFHLElBQUksRUFBRSxJQUFJO0FBQzdDLG9CQUFnQixnQkFBZ0IsR0FBRyxJQUFJLEVBQUUsSUFBSTtBQUM3QyxvQkFBZ0IsZ0JBQWdCLEdB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O0FBQ2xCLGVBQVcsUUFBUSxPQUFPO0FBQ3hCLFVBQUksS0FBSyxXQUFXLEtBQUssS0FBSyxXQUFXLEtBQUssS0FBSyxXQUFXLENBQUMsTUFBTSxLQUFLO0FBQUEsTUFDMUUsV0FBVyxLQUFLLFdBQVcsS0FBSyxLQUFLLFdBQVcsQ0FBQyxNQUFNLE9BQU8sS0FBSyxXQUFXLENBQUMsTUFBTSxLQUFLO0FBQ3hGLGlCQUFTLElBQUk7QUFBQSxNQUNmLE9BQU87QUFDTCxpQkFBUyxLQUFLLElBQUk7QUFBQSxNQUNwQjtBQUFBLElBQ0Y7QUFDQSxRQUFJLE1BQU0sU0FBUyxLQUFLLE1BQU0sTUFBTSxTQUFTLENBQUMsRUFBRSxXQUFXLEdBQUc7QUFDNUQsZUFBUyxLQUFLLEVBQUU7QUFBQSxJQUNsQjtBQUNBLFFBQUksTUFBTSxTQUFTLEtBQUssR0FBRztBQUMzQixRQUFJLE1BQU0sQ0FBQyxFQUFFLFdBQVcsR0FBRztBQUN6QixZQUFNLE1BQU07QUFBQSxJQUNkO0FBQ0EsV0FBTztBQUFBLEVBQ1Q7QUFDQSxXQUFTLFNBQVMsY0FBYyxPQUFPO0FBQ3JDLFVBQU0sTUFBTUEsTUFBSyxNQUFNLFNBQVM7QUFDaEMsVUFBTSxRQUFRLElBQUksS0FBSyxNQUFNLEdBQUc7QUFDaEMsYUFBUyxRQUFRLE9BQU87QUFDdEIsWUFBTSxLQUFLLEdBQUcsS0FBSyxNQUFNLEdBQUcsQ0FBQztBQUFBLElBQy9CO0FBQ0EsV0FBTyxJQUFJLEtBQUssRUFBRSxNQUFNLGNBQWMsS0FBSyxFQUFFLENBQUMsRUFBRSxTQUFTO0FBQUEsRUFDM0Q7QUFHQSxPQUFLLFlBQVksTUFBTTtBQUNyQixJQUFPLFdBQVcsQ0FBQyxLQUFLLGVBQWU7QUFDckMsYUFBTyxJQUFJLFdBQVcsS0FBSyxVQUFVO0FBQUEsSUFDdkMsQ0FBQztBQUFBLEVBQ0g7IiwKICAibmFtZXMiOiBbIkl0ZXJhYmxlIiwgIl9lbXB0eSIsICJmcm9tIiwgIl9hIiwgInNlbGYiLCAiRXZlbnQiLCAibWFwIiwgImZpbHRlciIsICJlcXVhbHMiLCAiYSIsICJidWZmZXIiLCAicmVzb2x2ZSIsICJfYSIsICJjb3VudCIsICJfYiIsICJlcnJvckhhbmRsZXIiLCAic3RhY2siLCAicmVzdWx0IiwgInQiLCAiX2EiLCAiX2EiLCAibWFwIiwgInJlc29sdmUiLCAiY3JlYXRlUHJveHlPYmplY3QiLCAicmVzb2x2ZSIsICJhIiwgImYiLCAic2NvcmUiLCAidCIsICJpc1BhdGhTZXBhcmF0b3IiLCAiX2Zvcm1hdCIsICJzZXAiLCAiY3dkIiwgInN0YXJ0IiwgIl9hIiwgIl9iIiwgImEiLCAiYSIsICJhIiwgImYiLCAiQ29tcGFyZVJlc3VsdCIsICJhIiwgImEiLCAiYSIsICJzZXAiLCAiQ2FuY2VsbGF0aW9uVG9rZW4iLCAiX2EiLCAiS2V5Q29kZVV0aWxzIiwgImEiLCAiX2EiLCAiSG92ZXJWZXJib3NpdHlBY3Rpb24iLCAiQ29tcGxldGlvbkl0ZW1LaW5kcyIsICJJbmxpbmVDb21wbGV0aW9uVHJpZ2dlcktpbmQiLCAiRG9jdW1lbnRQYXN0ZVRyaWdnZXJLaW5kIiwgIlNpZ25hdHVyZUhlbHBUcmlnZ2VyS2luZCIsICJEb2N1bWVudEhpZ2hsaWdodEtpbmQiLCAiU3ltYm9sS2luZHMiLCAiTmV3U3ltYm9sTmFtZVRhZyIsICJOZXdTeW1ib2xOYW1lVHJpZ2dlcktpbmQiLCAiQ29tbWFuZCIsICJJbmxheUhpbnRLaW5kIiwgIlRva2VuaXphdGlvblJlZ2lzdHJ5IiwgIklubGluZUVkaXRUcmlnZ2VyS2luZCIsICJBY2Nlc3NpYmlsaXR5U3VwcG9ydCIsICJDb2RlQWN0aW9uVHJpZ2dlclR5cGUiLCAiQ29tcGxldGlvbkl0ZW1JbnNlcnRUZXh0UnVsZSIsICJDb21wbGV0aW9uSXRlbUtpbmQiLCAiQ29tcGxldGlvbkl0ZW1UYWciLCAiQ29tcGxldGlvblRyaWdnZXJLaW5kIiwgIkNvbnRlbnRXaWRnZXRQb3NpdGlvblByZWZlcmVuY2UiLCAiQ3Vyc29yQ2hhbmdlUmVhc29uIiwgIkRlZmF1bHRFbmRPZkxpbmUiLCAiRG9jdW1lbnRIaWdobGlnaHRLaW5kIiwgIkVkaXRvckF1dG9JbmRlbnRTdHJhdGVneSIsICJFZGl0b3JPcHRpb24iLCAiRW5kT2ZMaW5lUHJlZmVyZW5jZSIsICJFbmRPZkxpbmVTZXF1ZW5jZSIsICJHbHlwaE1hcmdpbkxhbmUiLCAiSG92ZXJWZXJib3NpdHlBY3Rpb24iLCAiSW5kZW50QWN0aW9uIiwgIkluamVjdGVkVGV4dEN1cnNvclN0b3BzIiwgIklubGF5SGludEtpbmQiLCAiSW5saW5lQ29tcGxldGlvblRyaWdnZXJLaW5kIiwgIklubGluZUVkaXRUcmlnZ2VyS2luZCIsICJLZXlDb2RlIiwgIk1hcmtlclNldmVyaXR5IiwgIk1hcmtlclRhZyIsICJNaW5pbWFwUG9zaXRpb24iLCAiTWluaW1hcFNlY3Rpb25IZWFkZXJTdHlsZSIsICJNb3VzZVRhcmdldFR5cGUiLCAiTmV3U3ltYm9sTmFtZVRhZyIsICJOZXdTeW1ib2xOYW1lVHJpZ2dlcktpbmQiLCAiT3ZlcmxheVdpZGdldFBvc2l0aW9uUHJlZmVyZW5jZSIsICJPdmVydmlld1J1bGVyTGFuZSIsICJQYXJ0aWFsQWNjZXB0VHJpZ2dlcktpbmQiLCAiUG9zaXRpb25BZmZpbml0eSIsICJSZW5kZXJMaW5lTnVtYmVyc1R5cGUiLCAiUmVuZGVyTWluaW1hcCIsICJTY3JvbGxUeXBlIiwgIlNjcm9sbGJhclZpc2liaWxpdHkiLCAiU2VsZWN0aW9uRGlyZWN0aW9uIiwgIlNob3dMaWdodGJ1bGJJY29uTW9kZSIsICJTaWduYXR1cmVIZWxwVHJpZ2dlcktpbmQiLCAiU3ltYm9sS2luZCIsICJTeW1ib2xUYWciLCAiVGV4dEVkaXRvckN1cnNvckJsaW5raW5nU3R5bGUiLCAiVGV4dEVkaXRvckN1cnNvclN0eWxlIiwgIlRyYWNrZWRSYW5nZVN0aWNraW5lc3MiLCAiV3JhcHBpbmdJbmRlbnQiLCAiX2EiLCAiX2IiLCAiT3ZlcnZpZXdSdWxlckxhbmUiLCAiR2x5cGhNYXJnaW5MYW5lIiwgIkluamVjdGVkVGV4dEN1cnNvclN0b3BzIiwgImEiLCAiY29kZVBvaW50IiwgImlzQmFzaWNBU0NJSSIsICJmIiwgImYiLCAiciIsICJfYSIsICJfYSIsICJjIiwgImEiLCAia2V5IiwgIl9hIiwgIl9iIiwgInMxIiwgInMyIiwgImkiLCAic2NvcmUiLCAiX2EiLCAiX2IiLCAidCIsICJzY29yZSIsICJlcXVhbFBhcnQiLCAiTGluZVNlcXVlbmNlIiwgImEiLCAiTGluZVNlcXVlbmNlIiwgImEiLCAidCIsICJyZWxhdGl2ZSIsICJDb2xvciIsICJGb3JtYXQiLCAiQ1NTIiwgImZvcm1hdCIsICJhIiwgIl9hIiwgIl9hIiwgIm0iLCAiYSIsICJlcXVhbHMiLCAiaXNTdHJpbmciLCAiaXNPYmplY3QiLCAiVVJJIiwgIlBvc2l0aW9uIiwgIlBvc2l0aW9uMiIsICJSYW5nZSIsICJSYW5nZTIiLCAiQ29sb3IiLCAiQ29sb3IyIiwgIkZvbGRpbmdSYW5nZUtpbmQiLCAiRm9sZGluZ1JhbmdlS2luZDIiLCAiX2EiLCAiQ29tbWFuZCIsICJDb21tYW5kMiIsICJDb21wbGV0aW9uSXRlbUtpbmQiLCAiQ29tcGxldGlvbkl0ZW1LaW5kMiIsICJDb21wbGV0aW9uSXRlbVRhZyIsICJDb21wbGV0aW9uSXRlbVRhZzIiLCAiRG9jdW1lbnRIaWdobGlnaHRLaW5kIiwgIkRvY3VtZW50SGlnaGxpZ2h0S2luZDIiLCAiU3ltYm9sS2luZCIsICJTeW1ib2xLaW5kMiIsICJTeW1ib2xUYWciLCAiU3ltYm9sVGFnMiIsICJJbmxheUhpbnRLaW5kIiwgIklubGF5SGludEtpbmQyIiwgIklubGluZUNvbXBsZXRpb25UcmlnZ2VyS2luZCIsICJJbmxpbmVDb21wbGV0aW9uVHJpZ2dlcktpbmQyIiwgImRvY3VtZW50IiwgIlVSSTIiXQp9Cg==
