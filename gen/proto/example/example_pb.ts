// @generated by protoc-gen-es v1.10.1 with parameter "target=ts"
// @generated from file proto/example/example.proto (package example, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3, Timestamp } from "@bufbuild/protobuf";

/**
 * @generated from message example.CreateItemRequest
 */
export class CreateItemRequest extends Message<CreateItemRequest> {
  /**
   * @generated from field: string name = 1;
   */
  name = "";

  /**
   * @generated from field: string description = 2;
   */
  description = "";

  /**
   * @generated from field: map<string, string> metadata = 3;
   */
  metadata: { [key: string]: string } = {};

  constructor(data?: PartialMessage<CreateItemRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "example.CreateItemRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "description", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "metadata", kind: "map", K: 9 /* ScalarType.STRING */, V: {kind: "scalar", T: 9 /* ScalarType.STRING */} },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CreateItemRequest {
    return new CreateItemRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CreateItemRequest {
    return new CreateItemRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CreateItemRequest {
    return new CreateItemRequest().fromJsonString(jsonString, options);
  }

  static equals(a: CreateItemRequest | PlainMessage<CreateItemRequest> | undefined, b: CreateItemRequest | PlainMessage<CreateItemRequest> | undefined): boolean {
    return proto3.util.equals(CreateItemRequest, a, b);
  }
}

/**
 * @generated from message example.CreateItemResponse
 */
export class CreateItemResponse extends Message<CreateItemResponse> {
  /**
   * @generated from field: example.Item item = 1;
   */
  item?: Item;

  constructor(data?: PartialMessage<CreateItemResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "example.CreateItemResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "item", kind: "message", T: Item },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CreateItemResponse {
    return new CreateItemResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CreateItemResponse {
    return new CreateItemResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CreateItemResponse {
    return new CreateItemResponse().fromJsonString(jsonString, options);
  }

  static equals(a: CreateItemResponse | PlainMessage<CreateItemResponse> | undefined, b: CreateItemResponse | PlainMessage<CreateItemResponse> | undefined): boolean {
    return proto3.util.equals(CreateItemResponse, a, b);
  }
}

/**
 * @generated from message example.GetItemRequest
 */
export class GetItemRequest extends Message<GetItemRequest> {
  /**
   * @generated from field: string id = 1;
   */
  id = "";

  constructor(data?: PartialMessage<GetItemRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "example.GetItemRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetItemRequest {
    return new GetItemRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetItemRequest {
    return new GetItemRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetItemRequest {
    return new GetItemRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetItemRequest | PlainMessage<GetItemRequest> | undefined, b: GetItemRequest | PlainMessage<GetItemRequest> | undefined): boolean {
    return proto3.util.equals(GetItemRequest, a, b);
  }
}

/**
 * @generated from message example.GetItemResponse
 */
export class GetItemResponse extends Message<GetItemResponse> {
  /**
   * @generated from field: example.Item item = 1;
   */
  item?: Item;

  /**
   * @generated from field: bool found = 2;
   */
  found = false;

  constructor(data?: PartialMessage<GetItemResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "example.GetItemResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "item", kind: "message", T: Item },
    { no: 2, name: "found", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetItemResponse {
    return new GetItemResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetItemResponse {
    return new GetItemResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetItemResponse {
    return new GetItemResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetItemResponse | PlainMessage<GetItemResponse> | undefined, b: GetItemResponse | PlainMessage<GetItemResponse> | undefined): boolean {
    return proto3.util.equals(GetItemResponse, a, b);
  }
}

/**
 * @generated from message example.UpdateItemRequest
 */
export class UpdateItemRequest extends Message<UpdateItemRequest> {
  /**
   * @generated from field: string id = 1;
   */
  id = "";

  /**
   * @generated from field: string name = 2;
   */
  name = "";

  /**
   * @generated from field: string description = 3;
   */
  description = "";

  /**
   * @generated from field: map<string, string> metadata = 4;
   */
  metadata: { [key: string]: string } = {};

  constructor(data?: PartialMessage<UpdateItemRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "example.UpdateItemRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "description", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "metadata", kind: "map", K: 9 /* ScalarType.STRING */, V: {kind: "scalar", T: 9 /* ScalarType.STRING */} },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UpdateItemRequest {
    return new UpdateItemRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UpdateItemRequest {
    return new UpdateItemRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UpdateItemRequest {
    return new UpdateItemRequest().fromJsonString(jsonString, options);
  }

  static equals(a: UpdateItemRequest | PlainMessage<UpdateItemRequest> | undefined, b: UpdateItemRequest | PlainMessage<UpdateItemRequest> | undefined): boolean {
    return proto3.util.equals(UpdateItemRequest, a, b);
  }
}

/**
 * @generated from message example.UpdateItemResponse
 */
export class UpdateItemResponse extends Message<UpdateItemResponse> {
  /**
   * @generated from field: example.Item item = 1;
   */
  item?: Item;

  constructor(data?: PartialMessage<UpdateItemResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "example.UpdateItemResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "item", kind: "message", T: Item },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UpdateItemResponse {
    return new UpdateItemResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UpdateItemResponse {
    return new UpdateItemResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UpdateItemResponse {
    return new UpdateItemResponse().fromJsonString(jsonString, options);
  }

  static equals(a: UpdateItemResponse | PlainMessage<UpdateItemResponse> | undefined, b: UpdateItemResponse | PlainMessage<UpdateItemResponse> | undefined): boolean {
    return proto3.util.equals(UpdateItemResponse, a, b);
  }
}

/**
 * @generated from message example.DeleteItemRequest
 */
export class DeleteItemRequest extends Message<DeleteItemRequest> {
  /**
   * @generated from field: string id = 1;
   */
  id = "";

  constructor(data?: PartialMessage<DeleteItemRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "example.DeleteItemRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DeleteItemRequest {
    return new DeleteItemRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DeleteItemRequest {
    return new DeleteItemRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DeleteItemRequest {
    return new DeleteItemRequest().fromJsonString(jsonString, options);
  }

  static equals(a: DeleteItemRequest | PlainMessage<DeleteItemRequest> | undefined, b: DeleteItemRequest | PlainMessage<DeleteItemRequest> | undefined): boolean {
    return proto3.util.equals(DeleteItemRequest, a, b);
  }
}

/**
 * @generated from message example.ListItemsRequest
 */
export class ListItemsRequest extends Message<ListItemsRequest> {
  /**
   * @generated from field: int32 page_size = 1;
   */
  pageSize = 0;

  /**
   * @generated from field: string page_token = 2;
   */
  pageToken = "";

  /**
   * @generated from field: string filter = 3;
   */
  filter = "";

  constructor(data?: PartialMessage<ListItemsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "example.ListItemsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "page_size", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 2, name: "page_token", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "filter", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListItemsRequest {
    return new ListItemsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListItemsRequest {
    return new ListItemsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListItemsRequest {
    return new ListItemsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: ListItemsRequest | PlainMessage<ListItemsRequest> | undefined, b: ListItemsRequest | PlainMessage<ListItemsRequest> | undefined): boolean {
    return proto3.util.equals(ListItemsRequest, a, b);
  }
}

/**
 * @generated from message example.ListItemsResponse
 */
export class ListItemsResponse extends Message<ListItemsResponse> {
  /**
   * @generated from field: repeated example.Item items = 1;
   */
  items: Item[] = [];

  /**
   * @generated from field: string next_page_token = 2;
   */
  nextPageToken = "";

  /**
   * @generated from field: int32 total_count = 3;
   */
  totalCount = 0;

  constructor(data?: PartialMessage<ListItemsResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "example.ListItemsResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "items", kind: "message", T: Item, repeated: true },
    { no: 2, name: "next_page_token", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "total_count", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListItemsResponse {
    return new ListItemsResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListItemsResponse {
    return new ListItemsResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListItemsResponse {
    return new ListItemsResponse().fromJsonString(jsonString, options);
  }

  static equals(a: ListItemsResponse | PlainMessage<ListItemsResponse> | undefined, b: ListItemsResponse | PlainMessage<ListItemsResponse> | undefined): boolean {
    return proto3.util.equals(ListItemsResponse, a, b);
  }
}

/**
 * @generated from message example.Item
 */
export class Item extends Message<Item> {
  /**
   * @generated from field: string id = 1;
   */
  id = "";

  /**
   * @generated from field: string name = 2;
   */
  name = "";

  /**
   * @generated from field: string description = 3;
   */
  description = "";

  /**
   * @generated from field: map<string, string> metadata = 4;
   */
  metadata: { [key: string]: string } = {};

  /**
   * @generated from field: google.protobuf.Timestamp created_at = 5;
   */
  createdAt?: Timestamp;

  /**
   * @generated from field: google.protobuf.Timestamp updated_at = 6;
   */
  updatedAt?: Timestamp;

  constructor(data?: PartialMessage<Item>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "example.Item";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "description", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "metadata", kind: "map", K: 9 /* ScalarType.STRING */, V: {kind: "scalar", T: 9 /* ScalarType.STRING */} },
    { no: 5, name: "created_at", kind: "message", T: Timestamp },
    { no: 6, name: "updated_at", kind: "message", T: Timestamp },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Item {
    return new Item().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Item {
    return new Item().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Item {
    return new Item().fromJsonString(jsonString, options);
  }

  static equals(a: Item | PlainMessage<Item> | undefined, b: Item | PlainMessage<Item> | undefined): boolean {
    return proto3.util.equals(Item, a, b);
  }
}

