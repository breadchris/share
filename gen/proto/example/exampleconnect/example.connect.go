// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: proto/example/example.proto

package exampleconnect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	example "github.com/breadchris/share/gen/proto/example"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// ExampleServiceName is the fully-qualified name of the ExampleService service.
	ExampleServiceName = "example.ExampleService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// ExampleServiceCreateItemProcedure is the fully-qualified name of the ExampleService's CreateItem
	// RPC.
	ExampleServiceCreateItemProcedure = "/example.ExampleService/CreateItem"
	// ExampleServiceGetItemProcedure is the fully-qualified name of the ExampleService's GetItem RPC.
	ExampleServiceGetItemProcedure = "/example.ExampleService/GetItem"
	// ExampleServiceUpdateItemProcedure is the fully-qualified name of the ExampleService's UpdateItem
	// RPC.
	ExampleServiceUpdateItemProcedure = "/example.ExampleService/UpdateItem"
	// ExampleServiceDeleteItemProcedure is the fully-qualified name of the ExampleService's DeleteItem
	// RPC.
	ExampleServiceDeleteItemProcedure = "/example.ExampleService/DeleteItem"
	// ExampleServiceListItemsProcedure is the fully-qualified name of the ExampleService's ListItems
	// RPC.
	ExampleServiceListItemsProcedure = "/example.ExampleService/ListItems"
)

// These variables are the protoreflect.Descriptor objects for the RPCs defined in this package.
var (
	exampleServiceServiceDescriptor          = example.File_proto_example_example_proto.Services().ByName("ExampleService")
	exampleServiceCreateItemMethodDescriptor = exampleServiceServiceDescriptor.Methods().ByName("CreateItem")
	exampleServiceGetItemMethodDescriptor    = exampleServiceServiceDescriptor.Methods().ByName("GetItem")
	exampleServiceUpdateItemMethodDescriptor = exampleServiceServiceDescriptor.Methods().ByName("UpdateItem")
	exampleServiceDeleteItemMethodDescriptor = exampleServiceServiceDescriptor.Methods().ByName("DeleteItem")
	exampleServiceListItemsMethodDescriptor  = exampleServiceServiceDescriptor.Methods().ByName("ListItems")
)

// ExampleServiceClient is a client for the example.ExampleService service.
type ExampleServiceClient interface {
	CreateItem(context.Context, *connect.Request[example.CreateItemRequest]) (*connect.Response[example.CreateItemResponse], error)
	GetItem(context.Context, *connect.Request[example.GetItemRequest]) (*connect.Response[example.GetItemResponse], error)
	UpdateItem(context.Context, *connect.Request[example.UpdateItemRequest]) (*connect.Response[example.UpdateItemResponse], error)
	DeleteItem(context.Context, *connect.Request[example.DeleteItemRequest]) (*connect.Response[emptypb.Empty], error)
	ListItems(context.Context, *connect.Request[example.ListItemsRequest]) (*connect.Response[example.ListItemsResponse], error)
}

// NewExampleServiceClient constructs a client for the example.ExampleService service. By default,
// it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and
// sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC()
// or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewExampleServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) ExampleServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &exampleServiceClient{
		createItem: connect.NewClient[example.CreateItemRequest, example.CreateItemResponse](
			httpClient,
			baseURL+ExampleServiceCreateItemProcedure,
			connect.WithSchema(exampleServiceCreateItemMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		getItem: connect.NewClient[example.GetItemRequest, example.GetItemResponse](
			httpClient,
			baseURL+ExampleServiceGetItemProcedure,
			connect.WithSchema(exampleServiceGetItemMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		updateItem: connect.NewClient[example.UpdateItemRequest, example.UpdateItemResponse](
			httpClient,
			baseURL+ExampleServiceUpdateItemProcedure,
			connect.WithSchema(exampleServiceUpdateItemMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		deleteItem: connect.NewClient[example.DeleteItemRequest, emptypb.Empty](
			httpClient,
			baseURL+ExampleServiceDeleteItemProcedure,
			connect.WithSchema(exampleServiceDeleteItemMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		listItems: connect.NewClient[example.ListItemsRequest, example.ListItemsResponse](
			httpClient,
			baseURL+ExampleServiceListItemsProcedure,
			connect.WithSchema(exampleServiceListItemsMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
	}
}

// exampleServiceClient implements ExampleServiceClient.
type exampleServiceClient struct {
	createItem *connect.Client[example.CreateItemRequest, example.CreateItemResponse]
	getItem    *connect.Client[example.GetItemRequest, example.GetItemResponse]
	updateItem *connect.Client[example.UpdateItemRequest, example.UpdateItemResponse]
	deleteItem *connect.Client[example.DeleteItemRequest, emptypb.Empty]
	listItems  *connect.Client[example.ListItemsRequest, example.ListItemsResponse]
}

// CreateItem calls example.ExampleService.CreateItem.
func (c *exampleServiceClient) CreateItem(ctx context.Context, req *connect.Request[example.CreateItemRequest]) (*connect.Response[example.CreateItemResponse], error) {
	return c.createItem.CallUnary(ctx, req)
}

// GetItem calls example.ExampleService.GetItem.
func (c *exampleServiceClient) GetItem(ctx context.Context, req *connect.Request[example.GetItemRequest]) (*connect.Response[example.GetItemResponse], error) {
	return c.getItem.CallUnary(ctx, req)
}

// UpdateItem calls example.ExampleService.UpdateItem.
func (c *exampleServiceClient) UpdateItem(ctx context.Context, req *connect.Request[example.UpdateItemRequest]) (*connect.Response[example.UpdateItemResponse], error) {
	return c.updateItem.CallUnary(ctx, req)
}

// DeleteItem calls example.ExampleService.DeleteItem.
func (c *exampleServiceClient) DeleteItem(ctx context.Context, req *connect.Request[example.DeleteItemRequest]) (*connect.Response[emptypb.Empty], error) {
	return c.deleteItem.CallUnary(ctx, req)
}

// ListItems calls example.ExampleService.ListItems.
func (c *exampleServiceClient) ListItems(ctx context.Context, req *connect.Request[example.ListItemsRequest]) (*connect.Response[example.ListItemsResponse], error) {
	return c.listItems.CallUnary(ctx, req)
}

// ExampleServiceHandler is an implementation of the example.ExampleService service.
type ExampleServiceHandler interface {
	CreateItem(context.Context, *connect.Request[example.CreateItemRequest]) (*connect.Response[example.CreateItemResponse], error)
	GetItem(context.Context, *connect.Request[example.GetItemRequest]) (*connect.Response[example.GetItemResponse], error)
	UpdateItem(context.Context, *connect.Request[example.UpdateItemRequest]) (*connect.Response[example.UpdateItemResponse], error)
	DeleteItem(context.Context, *connect.Request[example.DeleteItemRequest]) (*connect.Response[emptypb.Empty], error)
	ListItems(context.Context, *connect.Request[example.ListItemsRequest]) (*connect.Response[example.ListItemsResponse], error)
}

// NewExampleServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewExampleServiceHandler(svc ExampleServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	exampleServiceCreateItemHandler := connect.NewUnaryHandler(
		ExampleServiceCreateItemProcedure,
		svc.CreateItem,
		connect.WithSchema(exampleServiceCreateItemMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	exampleServiceGetItemHandler := connect.NewUnaryHandler(
		ExampleServiceGetItemProcedure,
		svc.GetItem,
		connect.WithSchema(exampleServiceGetItemMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	exampleServiceUpdateItemHandler := connect.NewUnaryHandler(
		ExampleServiceUpdateItemProcedure,
		svc.UpdateItem,
		connect.WithSchema(exampleServiceUpdateItemMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	exampleServiceDeleteItemHandler := connect.NewUnaryHandler(
		ExampleServiceDeleteItemProcedure,
		svc.DeleteItem,
		connect.WithSchema(exampleServiceDeleteItemMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	exampleServiceListItemsHandler := connect.NewUnaryHandler(
		ExampleServiceListItemsProcedure,
		svc.ListItems,
		connect.WithSchema(exampleServiceListItemsMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	return "/example.ExampleService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case ExampleServiceCreateItemProcedure:
			exampleServiceCreateItemHandler.ServeHTTP(w, r)
		case ExampleServiceGetItemProcedure:
			exampleServiceGetItemHandler.ServeHTTP(w, r)
		case ExampleServiceUpdateItemProcedure:
			exampleServiceUpdateItemHandler.ServeHTTP(w, r)
		case ExampleServiceDeleteItemProcedure:
			exampleServiceDeleteItemHandler.ServeHTTP(w, r)
		case ExampleServiceListItemsProcedure:
			exampleServiceListItemsHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedExampleServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedExampleServiceHandler struct{}

func (UnimplementedExampleServiceHandler) CreateItem(context.Context, *connect.Request[example.CreateItemRequest]) (*connect.Response[example.CreateItemResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("example.ExampleService.CreateItem is not implemented"))
}

func (UnimplementedExampleServiceHandler) GetItem(context.Context, *connect.Request[example.GetItemRequest]) (*connect.Response[example.GetItemResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("example.ExampleService.GetItem is not implemented"))
}

func (UnimplementedExampleServiceHandler) UpdateItem(context.Context, *connect.Request[example.UpdateItemRequest]) (*connect.Response[example.UpdateItemResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("example.ExampleService.UpdateItem is not implemented"))
}

func (UnimplementedExampleServiceHandler) DeleteItem(context.Context, *connect.Request[example.DeleteItemRequest]) (*connect.Response[emptypb.Empty], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("example.ExampleService.DeleteItem is not implemented"))
}

func (UnimplementedExampleServiceHandler) ListItems(context.Context, *connect.Request[example.ListItemsRequest]) (*connect.Response[example.ListItemsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("example.ExampleService.ListItems is not implemented"))
}
