// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: proto/vibekanban/vibekanban.proto

package vibekanbanconnect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	vibekanban "github.com/breadchris/share/gen/proto/vibekanban"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// VibeKanbanServiceName is the fully-qualified name of the VibeKanbanService service.
	VibeKanbanServiceName = "vibekanban.VibeKanbanService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// VibeKanbanServiceGetProjectProcedure is the fully-qualified name of the VibeKanbanService's
	// GetProject RPC.
	VibeKanbanServiceGetProjectProcedure = "/vibekanban.VibeKanbanService/GetProject"
	// VibeKanbanServiceListProjectsProcedure is the fully-qualified name of the VibeKanbanService's
	// ListProjects RPC.
	VibeKanbanServiceListProjectsProcedure = "/vibekanban.VibeKanbanService/ListProjects"
	// VibeKanbanServiceCreateProjectProcedure is the fully-qualified name of the VibeKanbanService's
	// CreateProject RPC.
	VibeKanbanServiceCreateProjectProcedure = "/vibekanban.VibeKanbanService/CreateProject"
	// VibeKanbanServiceUpdateProjectProcedure is the fully-qualified name of the VibeKanbanService's
	// UpdateProject RPC.
	VibeKanbanServiceUpdateProjectProcedure = "/vibekanban.VibeKanbanService/UpdateProject"
	// VibeKanbanServiceDeleteProjectProcedure is the fully-qualified name of the VibeKanbanService's
	// DeleteProject RPC.
	VibeKanbanServiceDeleteProjectProcedure = "/vibekanban.VibeKanbanService/DeleteProject"
	// VibeKanbanServiceGetTasksProcedure is the fully-qualified name of the VibeKanbanService's
	// GetTasks RPC.
	VibeKanbanServiceGetTasksProcedure = "/vibekanban.VibeKanbanService/GetTasks"
	// VibeKanbanServiceCreateTaskProcedure is the fully-qualified name of the VibeKanbanService's
	// CreateTask RPC.
	VibeKanbanServiceCreateTaskProcedure = "/vibekanban.VibeKanbanService/CreateTask"
	// VibeKanbanServiceUpdateTaskProcedure is the fully-qualified name of the VibeKanbanService's
	// UpdateTask RPC.
	VibeKanbanServiceUpdateTaskProcedure = "/vibekanban.VibeKanbanService/UpdateTask"
	// VibeKanbanServiceDeleteTaskProcedure is the fully-qualified name of the VibeKanbanService's
	// DeleteTask RPC.
	VibeKanbanServiceDeleteTaskProcedure = "/vibekanban.VibeKanbanService/DeleteTask"
	// VibeKanbanServiceGetTaskAttemptsProcedure is the fully-qualified name of the VibeKanbanService's
	// GetTaskAttempts RPC.
	VibeKanbanServiceGetTaskAttemptsProcedure = "/vibekanban.VibeKanbanService/GetTaskAttempts"
	// VibeKanbanServiceCreateTaskAttemptProcedure is the fully-qualified name of the
	// VibeKanbanService's CreateTaskAttempt RPC.
	VibeKanbanServiceCreateTaskAttemptProcedure = "/vibekanban.VibeKanbanService/CreateTaskAttempt"
	// VibeKanbanServiceStartTaskAttemptProcedure is the fully-qualified name of the VibeKanbanService's
	// StartTaskAttempt RPC.
	VibeKanbanServiceStartTaskAttemptProcedure = "/vibekanban.VibeKanbanService/StartTaskAttempt"
	// VibeKanbanServiceGetAttemptDiffProcedure is the fully-qualified name of the VibeKanbanService's
	// GetAttemptDiff RPC.
	VibeKanbanServiceGetAttemptDiffProcedure = "/vibekanban.VibeKanbanService/GetAttemptDiff"
	// VibeKanbanServiceMergeAttemptProcedure is the fully-qualified name of the VibeKanbanService's
	// MergeAttempt RPC.
	VibeKanbanServiceMergeAttemptProcedure = "/vibekanban.VibeKanbanService/MergeAttempt"
	// VibeKanbanServiceGetProjectBranchesProcedure is the fully-qualified name of the
	// VibeKanbanService's GetProjectBranches RPC.
	VibeKanbanServiceGetProjectBranchesProcedure = "/vibekanban.VibeKanbanService/GetProjectBranches"
	// VibeKanbanServiceCreateProjectBranchProcedure is the fully-qualified name of the
	// VibeKanbanService's CreateProjectBranch RPC.
	VibeKanbanServiceCreateProjectBranchProcedure = "/vibekanban.VibeKanbanService/CreateProjectBranch"
	// VibeKanbanServiceGetProcessesProcedure is the fully-qualified name of the VibeKanbanService's
	// GetProcesses RPC.
	VibeKanbanServiceGetProcessesProcedure = "/vibekanban.VibeKanbanService/GetProcesses"
	// VibeKanbanServiceKillProcessProcedure is the fully-qualified name of the VibeKanbanService's
	// KillProcess RPC.
	VibeKanbanServiceKillProcessProcedure = "/vibekanban.VibeKanbanService/KillProcess"
	// VibeKanbanServiceGetAttemptStatusProcedure is the fully-qualified name of the VibeKanbanService's
	// GetAttemptStatus RPC.
	VibeKanbanServiceGetAttemptStatusProcedure = "/vibekanban.VibeKanbanService/GetAttemptStatus"
	// VibeKanbanServiceGetDebugProcessesProcedure is the fully-qualified name of the
	// VibeKanbanService's GetDebugProcesses RPC.
	VibeKanbanServiceGetDebugProcessesProcedure = "/vibekanban.VibeKanbanService/GetDebugProcesses"
)

// These variables are the protoreflect.Descriptor objects for the RPCs defined in this package.
var (
	vibeKanbanServiceServiceDescriptor                   = vibekanban.File_proto_vibekanban_vibekanban_proto.Services().ByName("VibeKanbanService")
	vibeKanbanServiceGetProjectMethodDescriptor          = vibeKanbanServiceServiceDescriptor.Methods().ByName("GetProject")
	vibeKanbanServiceListProjectsMethodDescriptor        = vibeKanbanServiceServiceDescriptor.Methods().ByName("ListProjects")
	vibeKanbanServiceCreateProjectMethodDescriptor       = vibeKanbanServiceServiceDescriptor.Methods().ByName("CreateProject")
	vibeKanbanServiceUpdateProjectMethodDescriptor       = vibeKanbanServiceServiceDescriptor.Methods().ByName("UpdateProject")
	vibeKanbanServiceDeleteProjectMethodDescriptor       = vibeKanbanServiceServiceDescriptor.Methods().ByName("DeleteProject")
	vibeKanbanServiceGetTasksMethodDescriptor            = vibeKanbanServiceServiceDescriptor.Methods().ByName("GetTasks")
	vibeKanbanServiceCreateTaskMethodDescriptor          = vibeKanbanServiceServiceDescriptor.Methods().ByName("CreateTask")
	vibeKanbanServiceUpdateTaskMethodDescriptor          = vibeKanbanServiceServiceDescriptor.Methods().ByName("UpdateTask")
	vibeKanbanServiceDeleteTaskMethodDescriptor          = vibeKanbanServiceServiceDescriptor.Methods().ByName("DeleteTask")
	vibeKanbanServiceGetTaskAttemptsMethodDescriptor     = vibeKanbanServiceServiceDescriptor.Methods().ByName("GetTaskAttempts")
	vibeKanbanServiceCreateTaskAttemptMethodDescriptor   = vibeKanbanServiceServiceDescriptor.Methods().ByName("CreateTaskAttempt")
	vibeKanbanServiceStartTaskAttemptMethodDescriptor    = vibeKanbanServiceServiceDescriptor.Methods().ByName("StartTaskAttempt")
	vibeKanbanServiceGetAttemptDiffMethodDescriptor      = vibeKanbanServiceServiceDescriptor.Methods().ByName("GetAttemptDiff")
	vibeKanbanServiceMergeAttemptMethodDescriptor        = vibeKanbanServiceServiceDescriptor.Methods().ByName("MergeAttempt")
	vibeKanbanServiceGetProjectBranchesMethodDescriptor  = vibeKanbanServiceServiceDescriptor.Methods().ByName("GetProjectBranches")
	vibeKanbanServiceCreateProjectBranchMethodDescriptor = vibeKanbanServiceServiceDescriptor.Methods().ByName("CreateProjectBranch")
	vibeKanbanServiceGetProcessesMethodDescriptor        = vibeKanbanServiceServiceDescriptor.Methods().ByName("GetProcesses")
	vibeKanbanServiceKillProcessMethodDescriptor         = vibeKanbanServiceServiceDescriptor.Methods().ByName("KillProcess")
	vibeKanbanServiceGetAttemptStatusMethodDescriptor    = vibeKanbanServiceServiceDescriptor.Methods().ByName("GetAttemptStatus")
	vibeKanbanServiceGetDebugProcessesMethodDescriptor   = vibeKanbanServiceServiceDescriptor.Methods().ByName("GetDebugProcesses")
)

// VibeKanbanServiceClient is a client for the vibekanban.VibeKanbanService service.
type VibeKanbanServiceClient interface {
	// Project operations
	GetProject(context.Context, *connect.Request[vibekanban.GetProjectRequest]) (*connect.Response[vibekanban.GetProjectResponse], error)
	ListProjects(context.Context, *connect.Request[vibekanban.ListProjectsRequest]) (*connect.Response[vibekanban.ListProjectsResponse], error)
	CreateProject(context.Context, *connect.Request[vibekanban.CreateProjectRequest]) (*connect.Response[vibekanban.CreateProjectResponse], error)
	UpdateProject(context.Context, *connect.Request[vibekanban.UpdateProjectRequest]) (*connect.Response[vibekanban.UpdateProjectResponse], error)
	DeleteProject(context.Context, *connect.Request[vibekanban.DeleteProjectRequest]) (*connect.Response[emptypb.Empty], error)
	// Task operations
	GetTasks(context.Context, *connect.Request[vibekanban.GetTasksRequest]) (*connect.Response[vibekanban.GetTasksResponse], error)
	CreateTask(context.Context, *connect.Request[vibekanban.CreateTaskRequest]) (*connect.Response[vibekanban.CreateTaskResponse], error)
	UpdateTask(context.Context, *connect.Request[vibekanban.UpdateTaskRequest]) (*connect.Response[vibekanban.UpdateTaskResponse], error)
	DeleteTask(context.Context, *connect.Request[vibekanban.DeleteTaskRequest]) (*connect.Response[emptypb.Empty], error)
	// Task attempt operations
	GetTaskAttempts(context.Context, *connect.Request[vibekanban.GetTaskAttemptsRequest]) (*connect.Response[vibekanban.GetTaskAttemptsResponse], error)
	CreateTaskAttempt(context.Context, *connect.Request[vibekanban.CreateTaskAttemptRequest]) (*connect.Response[vibekanban.CreateTaskAttemptResponse], error)
	StartTaskAttempt(context.Context, *connect.Request[vibekanban.StartTaskAttemptRequest]) (*connect.Response[vibekanban.StartTaskAttemptResponse], error)
	GetAttemptDiff(context.Context, *connect.Request[vibekanban.GetAttemptDiffRequest]) (*connect.Response[vibekanban.GetAttemptDiffResponse], error)
	MergeAttempt(context.Context, *connect.Request[vibekanban.MergeAttemptRequest]) (*connect.Response[vibekanban.MergeAttemptResponse], error)
	// Git operations
	GetProjectBranches(context.Context, *connect.Request[vibekanban.GetProjectBranchesRequest]) (*connect.Response[vibekanban.GetProjectBranchesResponse], error)
	CreateProjectBranch(context.Context, *connect.Request[vibekanban.CreateProjectBranchRequest]) (*connect.Response[vibekanban.CreateProjectBranchResponse], error)
	// Process operations
	GetProcesses(context.Context, *connect.Request[vibekanban.GetProcessesRequest]) (*connect.Response[vibekanban.GetProcessesResponse], error)
	KillProcess(context.Context, *connect.Request[vibekanban.KillProcessRequest]) (*connect.Response[emptypb.Empty], error)
	// Debug operations
	GetAttemptStatus(context.Context, *connect.Request[vibekanban.GetAttemptStatusRequest]) (*connect.Response[vibekanban.GetAttemptStatusResponse], error)
	GetDebugProcesses(context.Context, *connect.Request[vibekanban.GetDebugProcessesRequest]) (*connect.Response[vibekanban.GetDebugProcessesResponse], error)
}

// NewVibeKanbanServiceClient constructs a client for the vibekanban.VibeKanbanService service. By
// default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses,
// and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewVibeKanbanServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) VibeKanbanServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &vibeKanbanServiceClient{
		getProject: connect.NewClient[vibekanban.GetProjectRequest, vibekanban.GetProjectResponse](
			httpClient,
			baseURL+VibeKanbanServiceGetProjectProcedure,
			connect.WithSchema(vibeKanbanServiceGetProjectMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		listProjects: connect.NewClient[vibekanban.ListProjectsRequest, vibekanban.ListProjectsResponse](
			httpClient,
			baseURL+VibeKanbanServiceListProjectsProcedure,
			connect.WithSchema(vibeKanbanServiceListProjectsMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		createProject: connect.NewClient[vibekanban.CreateProjectRequest, vibekanban.CreateProjectResponse](
			httpClient,
			baseURL+VibeKanbanServiceCreateProjectProcedure,
			connect.WithSchema(vibeKanbanServiceCreateProjectMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		updateProject: connect.NewClient[vibekanban.UpdateProjectRequest, vibekanban.UpdateProjectResponse](
			httpClient,
			baseURL+VibeKanbanServiceUpdateProjectProcedure,
			connect.WithSchema(vibeKanbanServiceUpdateProjectMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		deleteProject: connect.NewClient[vibekanban.DeleteProjectRequest, emptypb.Empty](
			httpClient,
			baseURL+VibeKanbanServiceDeleteProjectProcedure,
			connect.WithSchema(vibeKanbanServiceDeleteProjectMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		getTasks: connect.NewClient[vibekanban.GetTasksRequest, vibekanban.GetTasksResponse](
			httpClient,
			baseURL+VibeKanbanServiceGetTasksProcedure,
			connect.WithSchema(vibeKanbanServiceGetTasksMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		createTask: connect.NewClient[vibekanban.CreateTaskRequest, vibekanban.CreateTaskResponse](
			httpClient,
			baseURL+VibeKanbanServiceCreateTaskProcedure,
			connect.WithSchema(vibeKanbanServiceCreateTaskMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		updateTask: connect.NewClient[vibekanban.UpdateTaskRequest, vibekanban.UpdateTaskResponse](
			httpClient,
			baseURL+VibeKanbanServiceUpdateTaskProcedure,
			connect.WithSchema(vibeKanbanServiceUpdateTaskMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		deleteTask: connect.NewClient[vibekanban.DeleteTaskRequest, emptypb.Empty](
			httpClient,
			baseURL+VibeKanbanServiceDeleteTaskProcedure,
			connect.WithSchema(vibeKanbanServiceDeleteTaskMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		getTaskAttempts: connect.NewClient[vibekanban.GetTaskAttemptsRequest, vibekanban.GetTaskAttemptsResponse](
			httpClient,
			baseURL+VibeKanbanServiceGetTaskAttemptsProcedure,
			connect.WithSchema(vibeKanbanServiceGetTaskAttemptsMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		createTaskAttempt: connect.NewClient[vibekanban.CreateTaskAttemptRequest, vibekanban.CreateTaskAttemptResponse](
			httpClient,
			baseURL+VibeKanbanServiceCreateTaskAttemptProcedure,
			connect.WithSchema(vibeKanbanServiceCreateTaskAttemptMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		startTaskAttempt: connect.NewClient[vibekanban.StartTaskAttemptRequest, vibekanban.StartTaskAttemptResponse](
			httpClient,
			baseURL+VibeKanbanServiceStartTaskAttemptProcedure,
			connect.WithSchema(vibeKanbanServiceStartTaskAttemptMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		getAttemptDiff: connect.NewClient[vibekanban.GetAttemptDiffRequest, vibekanban.GetAttemptDiffResponse](
			httpClient,
			baseURL+VibeKanbanServiceGetAttemptDiffProcedure,
			connect.WithSchema(vibeKanbanServiceGetAttemptDiffMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		mergeAttempt: connect.NewClient[vibekanban.MergeAttemptRequest, vibekanban.MergeAttemptResponse](
			httpClient,
			baseURL+VibeKanbanServiceMergeAttemptProcedure,
			connect.WithSchema(vibeKanbanServiceMergeAttemptMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		getProjectBranches: connect.NewClient[vibekanban.GetProjectBranchesRequest, vibekanban.GetProjectBranchesResponse](
			httpClient,
			baseURL+VibeKanbanServiceGetProjectBranchesProcedure,
			connect.WithSchema(vibeKanbanServiceGetProjectBranchesMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		createProjectBranch: connect.NewClient[vibekanban.CreateProjectBranchRequest, vibekanban.CreateProjectBranchResponse](
			httpClient,
			baseURL+VibeKanbanServiceCreateProjectBranchProcedure,
			connect.WithSchema(vibeKanbanServiceCreateProjectBranchMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		getProcesses: connect.NewClient[vibekanban.GetProcessesRequest, vibekanban.GetProcessesResponse](
			httpClient,
			baseURL+VibeKanbanServiceGetProcessesProcedure,
			connect.WithSchema(vibeKanbanServiceGetProcessesMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		killProcess: connect.NewClient[vibekanban.KillProcessRequest, emptypb.Empty](
			httpClient,
			baseURL+VibeKanbanServiceKillProcessProcedure,
			connect.WithSchema(vibeKanbanServiceKillProcessMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		getAttemptStatus: connect.NewClient[vibekanban.GetAttemptStatusRequest, vibekanban.GetAttemptStatusResponse](
			httpClient,
			baseURL+VibeKanbanServiceGetAttemptStatusProcedure,
			connect.WithSchema(vibeKanbanServiceGetAttemptStatusMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		getDebugProcesses: connect.NewClient[vibekanban.GetDebugProcessesRequest, vibekanban.GetDebugProcessesResponse](
			httpClient,
			baseURL+VibeKanbanServiceGetDebugProcessesProcedure,
			connect.WithSchema(vibeKanbanServiceGetDebugProcessesMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
	}
}

// vibeKanbanServiceClient implements VibeKanbanServiceClient.
type vibeKanbanServiceClient struct {
	getProject          *connect.Client[vibekanban.GetProjectRequest, vibekanban.GetProjectResponse]
	listProjects        *connect.Client[vibekanban.ListProjectsRequest, vibekanban.ListProjectsResponse]
	createProject       *connect.Client[vibekanban.CreateProjectRequest, vibekanban.CreateProjectResponse]
	updateProject       *connect.Client[vibekanban.UpdateProjectRequest, vibekanban.UpdateProjectResponse]
	deleteProject       *connect.Client[vibekanban.DeleteProjectRequest, emptypb.Empty]
	getTasks            *connect.Client[vibekanban.GetTasksRequest, vibekanban.GetTasksResponse]
	createTask          *connect.Client[vibekanban.CreateTaskRequest, vibekanban.CreateTaskResponse]
	updateTask          *connect.Client[vibekanban.UpdateTaskRequest, vibekanban.UpdateTaskResponse]
	deleteTask          *connect.Client[vibekanban.DeleteTaskRequest, emptypb.Empty]
	getTaskAttempts     *connect.Client[vibekanban.GetTaskAttemptsRequest, vibekanban.GetTaskAttemptsResponse]
	createTaskAttempt   *connect.Client[vibekanban.CreateTaskAttemptRequest, vibekanban.CreateTaskAttemptResponse]
	startTaskAttempt    *connect.Client[vibekanban.StartTaskAttemptRequest, vibekanban.StartTaskAttemptResponse]
	getAttemptDiff      *connect.Client[vibekanban.GetAttemptDiffRequest, vibekanban.GetAttemptDiffResponse]
	mergeAttempt        *connect.Client[vibekanban.MergeAttemptRequest, vibekanban.MergeAttemptResponse]
	getProjectBranches  *connect.Client[vibekanban.GetProjectBranchesRequest, vibekanban.GetProjectBranchesResponse]
	createProjectBranch *connect.Client[vibekanban.CreateProjectBranchRequest, vibekanban.CreateProjectBranchResponse]
	getProcesses        *connect.Client[vibekanban.GetProcessesRequest, vibekanban.GetProcessesResponse]
	killProcess         *connect.Client[vibekanban.KillProcessRequest, emptypb.Empty]
	getAttemptStatus    *connect.Client[vibekanban.GetAttemptStatusRequest, vibekanban.GetAttemptStatusResponse]
	getDebugProcesses   *connect.Client[vibekanban.GetDebugProcessesRequest, vibekanban.GetDebugProcessesResponse]
}

// GetProject calls vibekanban.VibeKanbanService.GetProject.
func (c *vibeKanbanServiceClient) GetProject(ctx context.Context, req *connect.Request[vibekanban.GetProjectRequest]) (*connect.Response[vibekanban.GetProjectResponse], error) {
	return c.getProject.CallUnary(ctx, req)
}

// ListProjects calls vibekanban.VibeKanbanService.ListProjects.
func (c *vibeKanbanServiceClient) ListProjects(ctx context.Context, req *connect.Request[vibekanban.ListProjectsRequest]) (*connect.Response[vibekanban.ListProjectsResponse], error) {
	return c.listProjects.CallUnary(ctx, req)
}

// CreateProject calls vibekanban.VibeKanbanService.CreateProject.
func (c *vibeKanbanServiceClient) CreateProject(ctx context.Context, req *connect.Request[vibekanban.CreateProjectRequest]) (*connect.Response[vibekanban.CreateProjectResponse], error) {
	return c.createProject.CallUnary(ctx, req)
}

// UpdateProject calls vibekanban.VibeKanbanService.UpdateProject.
func (c *vibeKanbanServiceClient) UpdateProject(ctx context.Context, req *connect.Request[vibekanban.UpdateProjectRequest]) (*connect.Response[vibekanban.UpdateProjectResponse], error) {
	return c.updateProject.CallUnary(ctx, req)
}

// DeleteProject calls vibekanban.VibeKanbanService.DeleteProject.
func (c *vibeKanbanServiceClient) DeleteProject(ctx context.Context, req *connect.Request[vibekanban.DeleteProjectRequest]) (*connect.Response[emptypb.Empty], error) {
	return c.deleteProject.CallUnary(ctx, req)
}

// GetTasks calls vibekanban.VibeKanbanService.GetTasks.
func (c *vibeKanbanServiceClient) GetTasks(ctx context.Context, req *connect.Request[vibekanban.GetTasksRequest]) (*connect.Response[vibekanban.GetTasksResponse], error) {
	return c.getTasks.CallUnary(ctx, req)
}

// CreateTask calls vibekanban.VibeKanbanService.CreateTask.
func (c *vibeKanbanServiceClient) CreateTask(ctx context.Context, req *connect.Request[vibekanban.CreateTaskRequest]) (*connect.Response[vibekanban.CreateTaskResponse], error) {
	return c.createTask.CallUnary(ctx, req)
}

// UpdateTask calls vibekanban.VibeKanbanService.UpdateTask.
func (c *vibeKanbanServiceClient) UpdateTask(ctx context.Context, req *connect.Request[vibekanban.UpdateTaskRequest]) (*connect.Response[vibekanban.UpdateTaskResponse], error) {
	return c.updateTask.CallUnary(ctx, req)
}

// DeleteTask calls vibekanban.VibeKanbanService.DeleteTask.
func (c *vibeKanbanServiceClient) DeleteTask(ctx context.Context, req *connect.Request[vibekanban.DeleteTaskRequest]) (*connect.Response[emptypb.Empty], error) {
	return c.deleteTask.CallUnary(ctx, req)
}

// GetTaskAttempts calls vibekanban.VibeKanbanService.GetTaskAttempts.
func (c *vibeKanbanServiceClient) GetTaskAttempts(ctx context.Context, req *connect.Request[vibekanban.GetTaskAttemptsRequest]) (*connect.Response[vibekanban.GetTaskAttemptsResponse], error) {
	return c.getTaskAttempts.CallUnary(ctx, req)
}

// CreateTaskAttempt calls vibekanban.VibeKanbanService.CreateTaskAttempt.
func (c *vibeKanbanServiceClient) CreateTaskAttempt(ctx context.Context, req *connect.Request[vibekanban.CreateTaskAttemptRequest]) (*connect.Response[vibekanban.CreateTaskAttemptResponse], error) {
	return c.createTaskAttempt.CallUnary(ctx, req)
}

// StartTaskAttempt calls vibekanban.VibeKanbanService.StartTaskAttempt.
func (c *vibeKanbanServiceClient) StartTaskAttempt(ctx context.Context, req *connect.Request[vibekanban.StartTaskAttemptRequest]) (*connect.Response[vibekanban.StartTaskAttemptResponse], error) {
	return c.startTaskAttempt.CallUnary(ctx, req)
}

// GetAttemptDiff calls vibekanban.VibeKanbanService.GetAttemptDiff.
func (c *vibeKanbanServiceClient) GetAttemptDiff(ctx context.Context, req *connect.Request[vibekanban.GetAttemptDiffRequest]) (*connect.Response[vibekanban.GetAttemptDiffResponse], error) {
	return c.getAttemptDiff.CallUnary(ctx, req)
}

// MergeAttempt calls vibekanban.VibeKanbanService.MergeAttempt.
func (c *vibeKanbanServiceClient) MergeAttempt(ctx context.Context, req *connect.Request[vibekanban.MergeAttemptRequest]) (*connect.Response[vibekanban.MergeAttemptResponse], error) {
	return c.mergeAttempt.CallUnary(ctx, req)
}

// GetProjectBranches calls vibekanban.VibeKanbanService.GetProjectBranches.
func (c *vibeKanbanServiceClient) GetProjectBranches(ctx context.Context, req *connect.Request[vibekanban.GetProjectBranchesRequest]) (*connect.Response[vibekanban.GetProjectBranchesResponse], error) {
	return c.getProjectBranches.CallUnary(ctx, req)
}

// CreateProjectBranch calls vibekanban.VibeKanbanService.CreateProjectBranch.
func (c *vibeKanbanServiceClient) CreateProjectBranch(ctx context.Context, req *connect.Request[vibekanban.CreateProjectBranchRequest]) (*connect.Response[vibekanban.CreateProjectBranchResponse], error) {
	return c.createProjectBranch.CallUnary(ctx, req)
}

// GetProcesses calls vibekanban.VibeKanbanService.GetProcesses.
func (c *vibeKanbanServiceClient) GetProcesses(ctx context.Context, req *connect.Request[vibekanban.GetProcessesRequest]) (*connect.Response[vibekanban.GetProcessesResponse], error) {
	return c.getProcesses.CallUnary(ctx, req)
}

// KillProcess calls vibekanban.VibeKanbanService.KillProcess.
func (c *vibeKanbanServiceClient) KillProcess(ctx context.Context, req *connect.Request[vibekanban.KillProcessRequest]) (*connect.Response[emptypb.Empty], error) {
	return c.killProcess.CallUnary(ctx, req)
}

// GetAttemptStatus calls vibekanban.VibeKanbanService.GetAttemptStatus.
func (c *vibeKanbanServiceClient) GetAttemptStatus(ctx context.Context, req *connect.Request[vibekanban.GetAttemptStatusRequest]) (*connect.Response[vibekanban.GetAttemptStatusResponse], error) {
	return c.getAttemptStatus.CallUnary(ctx, req)
}

// GetDebugProcesses calls vibekanban.VibeKanbanService.GetDebugProcesses.
func (c *vibeKanbanServiceClient) GetDebugProcesses(ctx context.Context, req *connect.Request[vibekanban.GetDebugProcessesRequest]) (*connect.Response[vibekanban.GetDebugProcessesResponse], error) {
	return c.getDebugProcesses.CallUnary(ctx, req)
}

// VibeKanbanServiceHandler is an implementation of the vibekanban.VibeKanbanService service.
type VibeKanbanServiceHandler interface {
	// Project operations
	GetProject(context.Context, *connect.Request[vibekanban.GetProjectRequest]) (*connect.Response[vibekanban.GetProjectResponse], error)
	ListProjects(context.Context, *connect.Request[vibekanban.ListProjectsRequest]) (*connect.Response[vibekanban.ListProjectsResponse], error)
	CreateProject(context.Context, *connect.Request[vibekanban.CreateProjectRequest]) (*connect.Response[vibekanban.CreateProjectResponse], error)
	UpdateProject(context.Context, *connect.Request[vibekanban.UpdateProjectRequest]) (*connect.Response[vibekanban.UpdateProjectResponse], error)
	DeleteProject(context.Context, *connect.Request[vibekanban.DeleteProjectRequest]) (*connect.Response[emptypb.Empty], error)
	// Task operations
	GetTasks(context.Context, *connect.Request[vibekanban.GetTasksRequest]) (*connect.Response[vibekanban.GetTasksResponse], error)
	CreateTask(context.Context, *connect.Request[vibekanban.CreateTaskRequest]) (*connect.Response[vibekanban.CreateTaskResponse], error)
	UpdateTask(context.Context, *connect.Request[vibekanban.UpdateTaskRequest]) (*connect.Response[vibekanban.UpdateTaskResponse], error)
	DeleteTask(context.Context, *connect.Request[vibekanban.DeleteTaskRequest]) (*connect.Response[emptypb.Empty], error)
	// Task attempt operations
	GetTaskAttempts(context.Context, *connect.Request[vibekanban.GetTaskAttemptsRequest]) (*connect.Response[vibekanban.GetTaskAttemptsResponse], error)
	CreateTaskAttempt(context.Context, *connect.Request[vibekanban.CreateTaskAttemptRequest]) (*connect.Response[vibekanban.CreateTaskAttemptResponse], error)
	StartTaskAttempt(context.Context, *connect.Request[vibekanban.StartTaskAttemptRequest]) (*connect.Response[vibekanban.StartTaskAttemptResponse], error)
	GetAttemptDiff(context.Context, *connect.Request[vibekanban.GetAttemptDiffRequest]) (*connect.Response[vibekanban.GetAttemptDiffResponse], error)
	MergeAttempt(context.Context, *connect.Request[vibekanban.MergeAttemptRequest]) (*connect.Response[vibekanban.MergeAttemptResponse], error)
	// Git operations
	GetProjectBranches(context.Context, *connect.Request[vibekanban.GetProjectBranchesRequest]) (*connect.Response[vibekanban.GetProjectBranchesResponse], error)
	CreateProjectBranch(context.Context, *connect.Request[vibekanban.CreateProjectBranchRequest]) (*connect.Response[vibekanban.CreateProjectBranchResponse], error)
	// Process operations
	GetProcesses(context.Context, *connect.Request[vibekanban.GetProcessesRequest]) (*connect.Response[vibekanban.GetProcessesResponse], error)
	KillProcess(context.Context, *connect.Request[vibekanban.KillProcessRequest]) (*connect.Response[emptypb.Empty], error)
	// Debug operations
	GetAttemptStatus(context.Context, *connect.Request[vibekanban.GetAttemptStatusRequest]) (*connect.Response[vibekanban.GetAttemptStatusResponse], error)
	GetDebugProcesses(context.Context, *connect.Request[vibekanban.GetDebugProcessesRequest]) (*connect.Response[vibekanban.GetDebugProcessesResponse], error)
}

// NewVibeKanbanServiceHandler builds an HTTP handler from the service implementation. It returns
// the path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewVibeKanbanServiceHandler(svc VibeKanbanServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	vibeKanbanServiceGetProjectHandler := connect.NewUnaryHandler(
		VibeKanbanServiceGetProjectProcedure,
		svc.GetProject,
		connect.WithSchema(vibeKanbanServiceGetProjectMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	vibeKanbanServiceListProjectsHandler := connect.NewUnaryHandler(
		VibeKanbanServiceListProjectsProcedure,
		svc.ListProjects,
		connect.WithSchema(vibeKanbanServiceListProjectsMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	vibeKanbanServiceCreateProjectHandler := connect.NewUnaryHandler(
		VibeKanbanServiceCreateProjectProcedure,
		svc.CreateProject,
		connect.WithSchema(vibeKanbanServiceCreateProjectMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	vibeKanbanServiceUpdateProjectHandler := connect.NewUnaryHandler(
		VibeKanbanServiceUpdateProjectProcedure,
		svc.UpdateProject,
		connect.WithSchema(vibeKanbanServiceUpdateProjectMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	vibeKanbanServiceDeleteProjectHandler := connect.NewUnaryHandler(
		VibeKanbanServiceDeleteProjectProcedure,
		svc.DeleteProject,
		connect.WithSchema(vibeKanbanServiceDeleteProjectMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	vibeKanbanServiceGetTasksHandler := connect.NewUnaryHandler(
		VibeKanbanServiceGetTasksProcedure,
		svc.GetTasks,
		connect.WithSchema(vibeKanbanServiceGetTasksMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	vibeKanbanServiceCreateTaskHandler := connect.NewUnaryHandler(
		VibeKanbanServiceCreateTaskProcedure,
		svc.CreateTask,
		connect.WithSchema(vibeKanbanServiceCreateTaskMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	vibeKanbanServiceUpdateTaskHandler := connect.NewUnaryHandler(
		VibeKanbanServiceUpdateTaskProcedure,
		svc.UpdateTask,
		connect.WithSchema(vibeKanbanServiceUpdateTaskMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	vibeKanbanServiceDeleteTaskHandler := connect.NewUnaryHandler(
		VibeKanbanServiceDeleteTaskProcedure,
		svc.DeleteTask,
		connect.WithSchema(vibeKanbanServiceDeleteTaskMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	vibeKanbanServiceGetTaskAttemptsHandler := connect.NewUnaryHandler(
		VibeKanbanServiceGetTaskAttemptsProcedure,
		svc.GetTaskAttempts,
		connect.WithSchema(vibeKanbanServiceGetTaskAttemptsMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	vibeKanbanServiceCreateTaskAttemptHandler := connect.NewUnaryHandler(
		VibeKanbanServiceCreateTaskAttemptProcedure,
		svc.CreateTaskAttempt,
		connect.WithSchema(vibeKanbanServiceCreateTaskAttemptMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	vibeKanbanServiceStartTaskAttemptHandler := connect.NewUnaryHandler(
		VibeKanbanServiceStartTaskAttemptProcedure,
		svc.StartTaskAttempt,
		connect.WithSchema(vibeKanbanServiceStartTaskAttemptMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	vibeKanbanServiceGetAttemptDiffHandler := connect.NewUnaryHandler(
		VibeKanbanServiceGetAttemptDiffProcedure,
		svc.GetAttemptDiff,
		connect.WithSchema(vibeKanbanServiceGetAttemptDiffMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	vibeKanbanServiceMergeAttemptHandler := connect.NewUnaryHandler(
		VibeKanbanServiceMergeAttemptProcedure,
		svc.MergeAttempt,
		connect.WithSchema(vibeKanbanServiceMergeAttemptMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	vibeKanbanServiceGetProjectBranchesHandler := connect.NewUnaryHandler(
		VibeKanbanServiceGetProjectBranchesProcedure,
		svc.GetProjectBranches,
		connect.WithSchema(vibeKanbanServiceGetProjectBranchesMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	vibeKanbanServiceCreateProjectBranchHandler := connect.NewUnaryHandler(
		VibeKanbanServiceCreateProjectBranchProcedure,
		svc.CreateProjectBranch,
		connect.WithSchema(vibeKanbanServiceCreateProjectBranchMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	vibeKanbanServiceGetProcessesHandler := connect.NewUnaryHandler(
		VibeKanbanServiceGetProcessesProcedure,
		svc.GetProcesses,
		connect.WithSchema(vibeKanbanServiceGetProcessesMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	vibeKanbanServiceKillProcessHandler := connect.NewUnaryHandler(
		VibeKanbanServiceKillProcessProcedure,
		svc.KillProcess,
		connect.WithSchema(vibeKanbanServiceKillProcessMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	vibeKanbanServiceGetAttemptStatusHandler := connect.NewUnaryHandler(
		VibeKanbanServiceGetAttemptStatusProcedure,
		svc.GetAttemptStatus,
		connect.WithSchema(vibeKanbanServiceGetAttemptStatusMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	vibeKanbanServiceGetDebugProcessesHandler := connect.NewUnaryHandler(
		VibeKanbanServiceGetDebugProcessesProcedure,
		svc.GetDebugProcesses,
		connect.WithSchema(vibeKanbanServiceGetDebugProcessesMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	return "/vibekanban.VibeKanbanService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case VibeKanbanServiceGetProjectProcedure:
			vibeKanbanServiceGetProjectHandler.ServeHTTP(w, r)
		case VibeKanbanServiceListProjectsProcedure:
			vibeKanbanServiceListProjectsHandler.ServeHTTP(w, r)
		case VibeKanbanServiceCreateProjectProcedure:
			vibeKanbanServiceCreateProjectHandler.ServeHTTP(w, r)
		case VibeKanbanServiceUpdateProjectProcedure:
			vibeKanbanServiceUpdateProjectHandler.ServeHTTP(w, r)
		case VibeKanbanServiceDeleteProjectProcedure:
			vibeKanbanServiceDeleteProjectHandler.ServeHTTP(w, r)
		case VibeKanbanServiceGetTasksProcedure:
			vibeKanbanServiceGetTasksHandler.ServeHTTP(w, r)
		case VibeKanbanServiceCreateTaskProcedure:
			vibeKanbanServiceCreateTaskHandler.ServeHTTP(w, r)
		case VibeKanbanServiceUpdateTaskProcedure:
			vibeKanbanServiceUpdateTaskHandler.ServeHTTP(w, r)
		case VibeKanbanServiceDeleteTaskProcedure:
			vibeKanbanServiceDeleteTaskHandler.ServeHTTP(w, r)
		case VibeKanbanServiceGetTaskAttemptsProcedure:
			vibeKanbanServiceGetTaskAttemptsHandler.ServeHTTP(w, r)
		case VibeKanbanServiceCreateTaskAttemptProcedure:
			vibeKanbanServiceCreateTaskAttemptHandler.ServeHTTP(w, r)
		case VibeKanbanServiceStartTaskAttemptProcedure:
			vibeKanbanServiceStartTaskAttemptHandler.ServeHTTP(w, r)
		case VibeKanbanServiceGetAttemptDiffProcedure:
			vibeKanbanServiceGetAttemptDiffHandler.ServeHTTP(w, r)
		case VibeKanbanServiceMergeAttemptProcedure:
			vibeKanbanServiceMergeAttemptHandler.ServeHTTP(w, r)
		case VibeKanbanServiceGetProjectBranchesProcedure:
			vibeKanbanServiceGetProjectBranchesHandler.ServeHTTP(w, r)
		case VibeKanbanServiceCreateProjectBranchProcedure:
			vibeKanbanServiceCreateProjectBranchHandler.ServeHTTP(w, r)
		case VibeKanbanServiceGetProcessesProcedure:
			vibeKanbanServiceGetProcessesHandler.ServeHTTP(w, r)
		case VibeKanbanServiceKillProcessProcedure:
			vibeKanbanServiceKillProcessHandler.ServeHTTP(w, r)
		case VibeKanbanServiceGetAttemptStatusProcedure:
			vibeKanbanServiceGetAttemptStatusHandler.ServeHTTP(w, r)
		case VibeKanbanServiceGetDebugProcessesProcedure:
			vibeKanbanServiceGetDebugProcessesHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedVibeKanbanServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedVibeKanbanServiceHandler struct{}

func (UnimplementedVibeKanbanServiceHandler) GetProject(context.Context, *connect.Request[vibekanban.GetProjectRequest]) (*connect.Response[vibekanban.GetProjectResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("vibekanban.VibeKanbanService.GetProject is not implemented"))
}

func (UnimplementedVibeKanbanServiceHandler) ListProjects(context.Context, *connect.Request[vibekanban.ListProjectsRequest]) (*connect.Response[vibekanban.ListProjectsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("vibekanban.VibeKanbanService.ListProjects is not implemented"))
}

func (UnimplementedVibeKanbanServiceHandler) CreateProject(context.Context, *connect.Request[vibekanban.CreateProjectRequest]) (*connect.Response[vibekanban.CreateProjectResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("vibekanban.VibeKanbanService.CreateProject is not implemented"))
}

func (UnimplementedVibeKanbanServiceHandler) UpdateProject(context.Context, *connect.Request[vibekanban.UpdateProjectRequest]) (*connect.Response[vibekanban.UpdateProjectResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("vibekanban.VibeKanbanService.UpdateProject is not implemented"))
}

func (UnimplementedVibeKanbanServiceHandler) DeleteProject(context.Context, *connect.Request[vibekanban.DeleteProjectRequest]) (*connect.Response[emptypb.Empty], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("vibekanban.VibeKanbanService.DeleteProject is not implemented"))
}

func (UnimplementedVibeKanbanServiceHandler) GetTasks(context.Context, *connect.Request[vibekanban.GetTasksRequest]) (*connect.Response[vibekanban.GetTasksResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("vibekanban.VibeKanbanService.GetTasks is not implemented"))
}

func (UnimplementedVibeKanbanServiceHandler) CreateTask(context.Context, *connect.Request[vibekanban.CreateTaskRequest]) (*connect.Response[vibekanban.CreateTaskResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("vibekanban.VibeKanbanService.CreateTask is not implemented"))
}

func (UnimplementedVibeKanbanServiceHandler) UpdateTask(context.Context, *connect.Request[vibekanban.UpdateTaskRequest]) (*connect.Response[vibekanban.UpdateTaskResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("vibekanban.VibeKanbanService.UpdateTask is not implemented"))
}

func (UnimplementedVibeKanbanServiceHandler) DeleteTask(context.Context, *connect.Request[vibekanban.DeleteTaskRequest]) (*connect.Response[emptypb.Empty], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("vibekanban.VibeKanbanService.DeleteTask is not implemented"))
}

func (UnimplementedVibeKanbanServiceHandler) GetTaskAttempts(context.Context, *connect.Request[vibekanban.GetTaskAttemptsRequest]) (*connect.Response[vibekanban.GetTaskAttemptsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("vibekanban.VibeKanbanService.GetTaskAttempts is not implemented"))
}

func (UnimplementedVibeKanbanServiceHandler) CreateTaskAttempt(context.Context, *connect.Request[vibekanban.CreateTaskAttemptRequest]) (*connect.Response[vibekanban.CreateTaskAttemptResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("vibekanban.VibeKanbanService.CreateTaskAttempt is not implemented"))
}

func (UnimplementedVibeKanbanServiceHandler) StartTaskAttempt(context.Context, *connect.Request[vibekanban.StartTaskAttemptRequest]) (*connect.Response[vibekanban.StartTaskAttemptResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("vibekanban.VibeKanbanService.StartTaskAttempt is not implemented"))
}

func (UnimplementedVibeKanbanServiceHandler) GetAttemptDiff(context.Context, *connect.Request[vibekanban.GetAttemptDiffRequest]) (*connect.Response[vibekanban.GetAttemptDiffResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("vibekanban.VibeKanbanService.GetAttemptDiff is not implemented"))
}

func (UnimplementedVibeKanbanServiceHandler) MergeAttempt(context.Context, *connect.Request[vibekanban.MergeAttemptRequest]) (*connect.Response[vibekanban.MergeAttemptResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("vibekanban.VibeKanbanService.MergeAttempt is not implemented"))
}

func (UnimplementedVibeKanbanServiceHandler) GetProjectBranches(context.Context, *connect.Request[vibekanban.GetProjectBranchesRequest]) (*connect.Response[vibekanban.GetProjectBranchesResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("vibekanban.VibeKanbanService.GetProjectBranches is not implemented"))
}

func (UnimplementedVibeKanbanServiceHandler) CreateProjectBranch(context.Context, *connect.Request[vibekanban.CreateProjectBranchRequest]) (*connect.Response[vibekanban.CreateProjectBranchResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("vibekanban.VibeKanbanService.CreateProjectBranch is not implemented"))
}

func (UnimplementedVibeKanbanServiceHandler) GetProcesses(context.Context, *connect.Request[vibekanban.GetProcessesRequest]) (*connect.Response[vibekanban.GetProcessesResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("vibekanban.VibeKanbanService.GetProcesses is not implemented"))
}

func (UnimplementedVibeKanbanServiceHandler) KillProcess(context.Context, *connect.Request[vibekanban.KillProcessRequest]) (*connect.Response[emptypb.Empty], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("vibekanban.VibeKanbanService.KillProcess is not implemented"))
}

func (UnimplementedVibeKanbanServiceHandler) GetAttemptStatus(context.Context, *connect.Request[vibekanban.GetAttemptStatusRequest]) (*connect.Response[vibekanban.GetAttemptStatusResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("vibekanban.VibeKanbanService.GetAttemptStatus is not implemented"))
}

func (UnimplementedVibeKanbanServiceHandler) GetDebugProcesses(context.Context, *connect.Request[vibekanban.GetDebugProcessesRequest]) (*connect.Response[vibekanban.GetDebugProcessesResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("vibekanban.VibeKanbanService.GetDebugProcesses is not implemented"))
}
