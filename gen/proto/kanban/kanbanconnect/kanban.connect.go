// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: proto/kanban/kanban.proto

package kanbanconnect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	kanban "github.com/breadchris/share/gen/proto/kanban"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// KanbanServiceName is the fully-qualified name of the KanbanService service.
	KanbanServiceName = "kanban.KanbanService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// KanbanServiceCreateBoardProcedure is the fully-qualified name of the KanbanService's CreateBoard
	// RPC.
	KanbanServiceCreateBoardProcedure = "/kanban.KanbanService/CreateBoard"
	// KanbanServiceGetBoardProcedure is the fully-qualified name of the KanbanService's GetBoard RPC.
	KanbanServiceGetBoardProcedure = "/kanban.KanbanService/GetBoard"
	// KanbanServiceListBoardsProcedure is the fully-qualified name of the KanbanService's ListBoards
	// RPC.
	KanbanServiceListBoardsProcedure = "/kanban.KanbanService/ListBoards"
	// KanbanServiceUpdateBoardProcedure is the fully-qualified name of the KanbanService's UpdateBoard
	// RPC.
	KanbanServiceUpdateBoardProcedure = "/kanban.KanbanService/UpdateBoard"
	// KanbanServiceDeleteBoardProcedure is the fully-qualified name of the KanbanService's DeleteBoard
	// RPC.
	KanbanServiceDeleteBoardProcedure = "/kanban.KanbanService/DeleteBoard"
	// KanbanServiceCreateColumnProcedure is the fully-qualified name of the KanbanService's
	// CreateColumn RPC.
	KanbanServiceCreateColumnProcedure = "/kanban.KanbanService/CreateColumn"
	// KanbanServiceUpdateColumnProcedure is the fully-qualified name of the KanbanService's
	// UpdateColumn RPC.
	KanbanServiceUpdateColumnProcedure = "/kanban.KanbanService/UpdateColumn"
	// KanbanServiceDeleteColumnProcedure is the fully-qualified name of the KanbanService's
	// DeleteColumn RPC.
	KanbanServiceDeleteColumnProcedure = "/kanban.KanbanService/DeleteColumn"
	// KanbanServiceMoveColumnProcedure is the fully-qualified name of the KanbanService's MoveColumn
	// RPC.
	KanbanServiceMoveColumnProcedure = "/kanban.KanbanService/MoveColumn"
	// KanbanServiceCreateCardProcedure is the fully-qualified name of the KanbanService's CreateCard
	// RPC.
	KanbanServiceCreateCardProcedure = "/kanban.KanbanService/CreateCard"
	// KanbanServiceUpdateCardProcedure is the fully-qualified name of the KanbanService's UpdateCard
	// RPC.
	KanbanServiceUpdateCardProcedure = "/kanban.KanbanService/UpdateCard"
	// KanbanServiceDeleteCardProcedure is the fully-qualified name of the KanbanService's DeleteCard
	// RPC.
	KanbanServiceDeleteCardProcedure = "/kanban.KanbanService/DeleteCard"
	// KanbanServiceMoveCardProcedure is the fully-qualified name of the KanbanService's MoveCard RPC.
	KanbanServiceMoveCardProcedure = "/kanban.KanbanService/MoveCard"
)

// These variables are the protoreflect.Descriptor objects for the RPCs defined in this package.
var (
	kanbanServiceServiceDescriptor            = kanban.File_proto_kanban_kanban_proto.Services().ByName("KanbanService")
	kanbanServiceCreateBoardMethodDescriptor  = kanbanServiceServiceDescriptor.Methods().ByName("CreateBoard")
	kanbanServiceGetBoardMethodDescriptor     = kanbanServiceServiceDescriptor.Methods().ByName("GetBoard")
	kanbanServiceListBoardsMethodDescriptor   = kanbanServiceServiceDescriptor.Methods().ByName("ListBoards")
	kanbanServiceUpdateBoardMethodDescriptor  = kanbanServiceServiceDescriptor.Methods().ByName("UpdateBoard")
	kanbanServiceDeleteBoardMethodDescriptor  = kanbanServiceServiceDescriptor.Methods().ByName("DeleteBoard")
	kanbanServiceCreateColumnMethodDescriptor = kanbanServiceServiceDescriptor.Methods().ByName("CreateColumn")
	kanbanServiceUpdateColumnMethodDescriptor = kanbanServiceServiceDescriptor.Methods().ByName("UpdateColumn")
	kanbanServiceDeleteColumnMethodDescriptor = kanbanServiceServiceDescriptor.Methods().ByName("DeleteColumn")
	kanbanServiceMoveColumnMethodDescriptor   = kanbanServiceServiceDescriptor.Methods().ByName("MoveColumn")
	kanbanServiceCreateCardMethodDescriptor   = kanbanServiceServiceDescriptor.Methods().ByName("CreateCard")
	kanbanServiceUpdateCardMethodDescriptor   = kanbanServiceServiceDescriptor.Methods().ByName("UpdateCard")
	kanbanServiceDeleteCardMethodDescriptor   = kanbanServiceServiceDescriptor.Methods().ByName("DeleteCard")
	kanbanServiceMoveCardMethodDescriptor     = kanbanServiceServiceDescriptor.Methods().ByName("MoveCard")
)

// KanbanServiceClient is a client for the kanban.KanbanService service.
type KanbanServiceClient interface {
	// Board operations
	CreateBoard(context.Context, *connect.Request[kanban.CreateBoardRequest]) (*connect.Response[kanban.CreateBoardResponse], error)
	GetBoard(context.Context, *connect.Request[kanban.GetBoardRequest]) (*connect.Response[kanban.GetBoardResponse], error)
	ListBoards(context.Context, *connect.Request[kanban.ListBoardsRequest]) (*connect.Response[kanban.ListBoardsResponse], error)
	UpdateBoard(context.Context, *connect.Request[kanban.UpdateBoardRequest]) (*connect.Response[kanban.UpdateBoardResponse], error)
	DeleteBoard(context.Context, *connect.Request[kanban.DeleteBoardRequest]) (*connect.Response[kanban.DeleteBoardResponse], error)
	// Column operations
	CreateColumn(context.Context, *connect.Request[kanban.CreateColumnRequest]) (*connect.Response[kanban.CreateColumnResponse], error)
	UpdateColumn(context.Context, *connect.Request[kanban.UpdateColumnRequest]) (*connect.Response[kanban.UpdateColumnResponse], error)
	DeleteColumn(context.Context, *connect.Request[kanban.DeleteColumnRequest]) (*connect.Response[kanban.DeleteColumnResponse], error)
	MoveColumn(context.Context, *connect.Request[kanban.MoveColumnRequest]) (*connect.Response[kanban.MoveColumnResponse], error)
	// Card operations
	CreateCard(context.Context, *connect.Request[kanban.CreateCardRequest]) (*connect.Response[kanban.CreateCardResponse], error)
	UpdateCard(context.Context, *connect.Request[kanban.UpdateCardRequest]) (*connect.Response[kanban.UpdateCardResponse], error)
	DeleteCard(context.Context, *connect.Request[kanban.DeleteCardRequest]) (*connect.Response[kanban.DeleteCardResponse], error)
	MoveCard(context.Context, *connect.Request[kanban.MoveCardRequest]) (*connect.Response[kanban.MoveCardResponse], error)
}

// NewKanbanServiceClient constructs a client for the kanban.KanbanService service. By default, it
// uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and sends
// uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewKanbanServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) KanbanServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &kanbanServiceClient{
		createBoard: connect.NewClient[kanban.CreateBoardRequest, kanban.CreateBoardResponse](
			httpClient,
			baseURL+KanbanServiceCreateBoardProcedure,
			connect.WithSchema(kanbanServiceCreateBoardMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		getBoard: connect.NewClient[kanban.GetBoardRequest, kanban.GetBoardResponse](
			httpClient,
			baseURL+KanbanServiceGetBoardProcedure,
			connect.WithSchema(kanbanServiceGetBoardMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		listBoards: connect.NewClient[kanban.ListBoardsRequest, kanban.ListBoardsResponse](
			httpClient,
			baseURL+KanbanServiceListBoardsProcedure,
			connect.WithSchema(kanbanServiceListBoardsMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		updateBoard: connect.NewClient[kanban.UpdateBoardRequest, kanban.UpdateBoardResponse](
			httpClient,
			baseURL+KanbanServiceUpdateBoardProcedure,
			connect.WithSchema(kanbanServiceUpdateBoardMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		deleteBoard: connect.NewClient[kanban.DeleteBoardRequest, kanban.DeleteBoardResponse](
			httpClient,
			baseURL+KanbanServiceDeleteBoardProcedure,
			connect.WithSchema(kanbanServiceDeleteBoardMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		createColumn: connect.NewClient[kanban.CreateColumnRequest, kanban.CreateColumnResponse](
			httpClient,
			baseURL+KanbanServiceCreateColumnProcedure,
			connect.WithSchema(kanbanServiceCreateColumnMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		updateColumn: connect.NewClient[kanban.UpdateColumnRequest, kanban.UpdateColumnResponse](
			httpClient,
			baseURL+KanbanServiceUpdateColumnProcedure,
			connect.WithSchema(kanbanServiceUpdateColumnMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		deleteColumn: connect.NewClient[kanban.DeleteColumnRequest, kanban.DeleteColumnResponse](
			httpClient,
			baseURL+KanbanServiceDeleteColumnProcedure,
			connect.WithSchema(kanbanServiceDeleteColumnMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		moveColumn: connect.NewClient[kanban.MoveColumnRequest, kanban.MoveColumnResponse](
			httpClient,
			baseURL+KanbanServiceMoveColumnProcedure,
			connect.WithSchema(kanbanServiceMoveColumnMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		createCard: connect.NewClient[kanban.CreateCardRequest, kanban.CreateCardResponse](
			httpClient,
			baseURL+KanbanServiceCreateCardProcedure,
			connect.WithSchema(kanbanServiceCreateCardMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		updateCard: connect.NewClient[kanban.UpdateCardRequest, kanban.UpdateCardResponse](
			httpClient,
			baseURL+KanbanServiceUpdateCardProcedure,
			connect.WithSchema(kanbanServiceUpdateCardMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		deleteCard: connect.NewClient[kanban.DeleteCardRequest, kanban.DeleteCardResponse](
			httpClient,
			baseURL+KanbanServiceDeleteCardProcedure,
			connect.WithSchema(kanbanServiceDeleteCardMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		moveCard: connect.NewClient[kanban.MoveCardRequest, kanban.MoveCardResponse](
			httpClient,
			baseURL+KanbanServiceMoveCardProcedure,
			connect.WithSchema(kanbanServiceMoveCardMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
	}
}

// kanbanServiceClient implements KanbanServiceClient.
type kanbanServiceClient struct {
	createBoard  *connect.Client[kanban.CreateBoardRequest, kanban.CreateBoardResponse]
	getBoard     *connect.Client[kanban.GetBoardRequest, kanban.GetBoardResponse]
	listBoards   *connect.Client[kanban.ListBoardsRequest, kanban.ListBoardsResponse]
	updateBoard  *connect.Client[kanban.UpdateBoardRequest, kanban.UpdateBoardResponse]
	deleteBoard  *connect.Client[kanban.DeleteBoardRequest, kanban.DeleteBoardResponse]
	createColumn *connect.Client[kanban.CreateColumnRequest, kanban.CreateColumnResponse]
	updateColumn *connect.Client[kanban.UpdateColumnRequest, kanban.UpdateColumnResponse]
	deleteColumn *connect.Client[kanban.DeleteColumnRequest, kanban.DeleteColumnResponse]
	moveColumn   *connect.Client[kanban.MoveColumnRequest, kanban.MoveColumnResponse]
	createCard   *connect.Client[kanban.CreateCardRequest, kanban.CreateCardResponse]
	updateCard   *connect.Client[kanban.UpdateCardRequest, kanban.UpdateCardResponse]
	deleteCard   *connect.Client[kanban.DeleteCardRequest, kanban.DeleteCardResponse]
	moveCard     *connect.Client[kanban.MoveCardRequest, kanban.MoveCardResponse]
}

// CreateBoard calls kanban.KanbanService.CreateBoard.
func (c *kanbanServiceClient) CreateBoard(ctx context.Context, req *connect.Request[kanban.CreateBoardRequest]) (*connect.Response[kanban.CreateBoardResponse], error) {
	return c.createBoard.CallUnary(ctx, req)
}

// GetBoard calls kanban.KanbanService.GetBoard.
func (c *kanbanServiceClient) GetBoard(ctx context.Context, req *connect.Request[kanban.GetBoardRequest]) (*connect.Response[kanban.GetBoardResponse], error) {
	return c.getBoard.CallUnary(ctx, req)
}

// ListBoards calls kanban.KanbanService.ListBoards.
func (c *kanbanServiceClient) ListBoards(ctx context.Context, req *connect.Request[kanban.ListBoardsRequest]) (*connect.Response[kanban.ListBoardsResponse], error) {
	return c.listBoards.CallUnary(ctx, req)
}

// UpdateBoard calls kanban.KanbanService.UpdateBoard.
func (c *kanbanServiceClient) UpdateBoard(ctx context.Context, req *connect.Request[kanban.UpdateBoardRequest]) (*connect.Response[kanban.UpdateBoardResponse], error) {
	return c.updateBoard.CallUnary(ctx, req)
}

// DeleteBoard calls kanban.KanbanService.DeleteBoard.
func (c *kanbanServiceClient) DeleteBoard(ctx context.Context, req *connect.Request[kanban.DeleteBoardRequest]) (*connect.Response[kanban.DeleteBoardResponse], error) {
	return c.deleteBoard.CallUnary(ctx, req)
}

// CreateColumn calls kanban.KanbanService.CreateColumn.
func (c *kanbanServiceClient) CreateColumn(ctx context.Context, req *connect.Request[kanban.CreateColumnRequest]) (*connect.Response[kanban.CreateColumnResponse], error) {
	return c.createColumn.CallUnary(ctx, req)
}

// UpdateColumn calls kanban.KanbanService.UpdateColumn.
func (c *kanbanServiceClient) UpdateColumn(ctx context.Context, req *connect.Request[kanban.UpdateColumnRequest]) (*connect.Response[kanban.UpdateColumnResponse], error) {
	return c.updateColumn.CallUnary(ctx, req)
}

// DeleteColumn calls kanban.KanbanService.DeleteColumn.
func (c *kanbanServiceClient) DeleteColumn(ctx context.Context, req *connect.Request[kanban.DeleteColumnRequest]) (*connect.Response[kanban.DeleteColumnResponse], error) {
	return c.deleteColumn.CallUnary(ctx, req)
}

// MoveColumn calls kanban.KanbanService.MoveColumn.
func (c *kanbanServiceClient) MoveColumn(ctx context.Context, req *connect.Request[kanban.MoveColumnRequest]) (*connect.Response[kanban.MoveColumnResponse], error) {
	return c.moveColumn.CallUnary(ctx, req)
}

// CreateCard calls kanban.KanbanService.CreateCard.
func (c *kanbanServiceClient) CreateCard(ctx context.Context, req *connect.Request[kanban.CreateCardRequest]) (*connect.Response[kanban.CreateCardResponse], error) {
	return c.createCard.CallUnary(ctx, req)
}

// UpdateCard calls kanban.KanbanService.UpdateCard.
func (c *kanbanServiceClient) UpdateCard(ctx context.Context, req *connect.Request[kanban.UpdateCardRequest]) (*connect.Response[kanban.UpdateCardResponse], error) {
	return c.updateCard.CallUnary(ctx, req)
}

// DeleteCard calls kanban.KanbanService.DeleteCard.
func (c *kanbanServiceClient) DeleteCard(ctx context.Context, req *connect.Request[kanban.DeleteCardRequest]) (*connect.Response[kanban.DeleteCardResponse], error) {
	return c.deleteCard.CallUnary(ctx, req)
}

// MoveCard calls kanban.KanbanService.MoveCard.
func (c *kanbanServiceClient) MoveCard(ctx context.Context, req *connect.Request[kanban.MoveCardRequest]) (*connect.Response[kanban.MoveCardResponse], error) {
	return c.moveCard.CallUnary(ctx, req)
}

// KanbanServiceHandler is an implementation of the kanban.KanbanService service.
type KanbanServiceHandler interface {
	// Board operations
	CreateBoard(context.Context, *connect.Request[kanban.CreateBoardRequest]) (*connect.Response[kanban.CreateBoardResponse], error)
	GetBoard(context.Context, *connect.Request[kanban.GetBoardRequest]) (*connect.Response[kanban.GetBoardResponse], error)
	ListBoards(context.Context, *connect.Request[kanban.ListBoardsRequest]) (*connect.Response[kanban.ListBoardsResponse], error)
	UpdateBoard(context.Context, *connect.Request[kanban.UpdateBoardRequest]) (*connect.Response[kanban.UpdateBoardResponse], error)
	DeleteBoard(context.Context, *connect.Request[kanban.DeleteBoardRequest]) (*connect.Response[kanban.DeleteBoardResponse], error)
	// Column operations
	CreateColumn(context.Context, *connect.Request[kanban.CreateColumnRequest]) (*connect.Response[kanban.CreateColumnResponse], error)
	UpdateColumn(context.Context, *connect.Request[kanban.UpdateColumnRequest]) (*connect.Response[kanban.UpdateColumnResponse], error)
	DeleteColumn(context.Context, *connect.Request[kanban.DeleteColumnRequest]) (*connect.Response[kanban.DeleteColumnResponse], error)
	MoveColumn(context.Context, *connect.Request[kanban.MoveColumnRequest]) (*connect.Response[kanban.MoveColumnResponse], error)
	// Card operations
	CreateCard(context.Context, *connect.Request[kanban.CreateCardRequest]) (*connect.Response[kanban.CreateCardResponse], error)
	UpdateCard(context.Context, *connect.Request[kanban.UpdateCardRequest]) (*connect.Response[kanban.UpdateCardResponse], error)
	DeleteCard(context.Context, *connect.Request[kanban.DeleteCardRequest]) (*connect.Response[kanban.DeleteCardResponse], error)
	MoveCard(context.Context, *connect.Request[kanban.MoveCardRequest]) (*connect.Response[kanban.MoveCardResponse], error)
}

// NewKanbanServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewKanbanServiceHandler(svc KanbanServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	kanbanServiceCreateBoardHandler := connect.NewUnaryHandler(
		KanbanServiceCreateBoardProcedure,
		svc.CreateBoard,
		connect.WithSchema(kanbanServiceCreateBoardMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	kanbanServiceGetBoardHandler := connect.NewUnaryHandler(
		KanbanServiceGetBoardProcedure,
		svc.GetBoard,
		connect.WithSchema(kanbanServiceGetBoardMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	kanbanServiceListBoardsHandler := connect.NewUnaryHandler(
		KanbanServiceListBoardsProcedure,
		svc.ListBoards,
		connect.WithSchema(kanbanServiceListBoardsMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	kanbanServiceUpdateBoardHandler := connect.NewUnaryHandler(
		KanbanServiceUpdateBoardProcedure,
		svc.UpdateBoard,
		connect.WithSchema(kanbanServiceUpdateBoardMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	kanbanServiceDeleteBoardHandler := connect.NewUnaryHandler(
		KanbanServiceDeleteBoardProcedure,
		svc.DeleteBoard,
		connect.WithSchema(kanbanServiceDeleteBoardMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	kanbanServiceCreateColumnHandler := connect.NewUnaryHandler(
		KanbanServiceCreateColumnProcedure,
		svc.CreateColumn,
		connect.WithSchema(kanbanServiceCreateColumnMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	kanbanServiceUpdateColumnHandler := connect.NewUnaryHandler(
		KanbanServiceUpdateColumnProcedure,
		svc.UpdateColumn,
		connect.WithSchema(kanbanServiceUpdateColumnMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	kanbanServiceDeleteColumnHandler := connect.NewUnaryHandler(
		KanbanServiceDeleteColumnProcedure,
		svc.DeleteColumn,
		connect.WithSchema(kanbanServiceDeleteColumnMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	kanbanServiceMoveColumnHandler := connect.NewUnaryHandler(
		KanbanServiceMoveColumnProcedure,
		svc.MoveColumn,
		connect.WithSchema(kanbanServiceMoveColumnMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	kanbanServiceCreateCardHandler := connect.NewUnaryHandler(
		KanbanServiceCreateCardProcedure,
		svc.CreateCard,
		connect.WithSchema(kanbanServiceCreateCardMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	kanbanServiceUpdateCardHandler := connect.NewUnaryHandler(
		KanbanServiceUpdateCardProcedure,
		svc.UpdateCard,
		connect.WithSchema(kanbanServiceUpdateCardMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	kanbanServiceDeleteCardHandler := connect.NewUnaryHandler(
		KanbanServiceDeleteCardProcedure,
		svc.DeleteCard,
		connect.WithSchema(kanbanServiceDeleteCardMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	kanbanServiceMoveCardHandler := connect.NewUnaryHandler(
		KanbanServiceMoveCardProcedure,
		svc.MoveCard,
		connect.WithSchema(kanbanServiceMoveCardMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	return "/kanban.KanbanService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case KanbanServiceCreateBoardProcedure:
			kanbanServiceCreateBoardHandler.ServeHTTP(w, r)
		case KanbanServiceGetBoardProcedure:
			kanbanServiceGetBoardHandler.ServeHTTP(w, r)
		case KanbanServiceListBoardsProcedure:
			kanbanServiceListBoardsHandler.ServeHTTP(w, r)
		case KanbanServiceUpdateBoardProcedure:
			kanbanServiceUpdateBoardHandler.ServeHTTP(w, r)
		case KanbanServiceDeleteBoardProcedure:
			kanbanServiceDeleteBoardHandler.ServeHTTP(w, r)
		case KanbanServiceCreateColumnProcedure:
			kanbanServiceCreateColumnHandler.ServeHTTP(w, r)
		case KanbanServiceUpdateColumnProcedure:
			kanbanServiceUpdateColumnHandler.ServeHTTP(w, r)
		case KanbanServiceDeleteColumnProcedure:
			kanbanServiceDeleteColumnHandler.ServeHTTP(w, r)
		case KanbanServiceMoveColumnProcedure:
			kanbanServiceMoveColumnHandler.ServeHTTP(w, r)
		case KanbanServiceCreateCardProcedure:
			kanbanServiceCreateCardHandler.ServeHTTP(w, r)
		case KanbanServiceUpdateCardProcedure:
			kanbanServiceUpdateCardHandler.ServeHTTP(w, r)
		case KanbanServiceDeleteCardProcedure:
			kanbanServiceDeleteCardHandler.ServeHTTP(w, r)
		case KanbanServiceMoveCardProcedure:
			kanbanServiceMoveCardHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedKanbanServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedKanbanServiceHandler struct{}

func (UnimplementedKanbanServiceHandler) CreateBoard(context.Context, *connect.Request[kanban.CreateBoardRequest]) (*connect.Response[kanban.CreateBoardResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("kanban.KanbanService.CreateBoard is not implemented"))
}

func (UnimplementedKanbanServiceHandler) GetBoard(context.Context, *connect.Request[kanban.GetBoardRequest]) (*connect.Response[kanban.GetBoardResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("kanban.KanbanService.GetBoard is not implemented"))
}

func (UnimplementedKanbanServiceHandler) ListBoards(context.Context, *connect.Request[kanban.ListBoardsRequest]) (*connect.Response[kanban.ListBoardsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("kanban.KanbanService.ListBoards is not implemented"))
}

func (UnimplementedKanbanServiceHandler) UpdateBoard(context.Context, *connect.Request[kanban.UpdateBoardRequest]) (*connect.Response[kanban.UpdateBoardResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("kanban.KanbanService.UpdateBoard is not implemented"))
}

func (UnimplementedKanbanServiceHandler) DeleteBoard(context.Context, *connect.Request[kanban.DeleteBoardRequest]) (*connect.Response[kanban.DeleteBoardResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("kanban.KanbanService.DeleteBoard is not implemented"))
}

func (UnimplementedKanbanServiceHandler) CreateColumn(context.Context, *connect.Request[kanban.CreateColumnRequest]) (*connect.Response[kanban.CreateColumnResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("kanban.KanbanService.CreateColumn is not implemented"))
}

func (UnimplementedKanbanServiceHandler) UpdateColumn(context.Context, *connect.Request[kanban.UpdateColumnRequest]) (*connect.Response[kanban.UpdateColumnResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("kanban.KanbanService.UpdateColumn is not implemented"))
}

func (UnimplementedKanbanServiceHandler) DeleteColumn(context.Context, *connect.Request[kanban.DeleteColumnRequest]) (*connect.Response[kanban.DeleteColumnResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("kanban.KanbanService.DeleteColumn is not implemented"))
}

func (UnimplementedKanbanServiceHandler) MoveColumn(context.Context, *connect.Request[kanban.MoveColumnRequest]) (*connect.Response[kanban.MoveColumnResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("kanban.KanbanService.MoveColumn is not implemented"))
}

func (UnimplementedKanbanServiceHandler) CreateCard(context.Context, *connect.Request[kanban.CreateCardRequest]) (*connect.Response[kanban.CreateCardResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("kanban.KanbanService.CreateCard is not implemented"))
}

func (UnimplementedKanbanServiceHandler) UpdateCard(context.Context, *connect.Request[kanban.UpdateCardRequest]) (*connect.Response[kanban.UpdateCardResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("kanban.KanbanService.UpdateCard is not implemented"))
}

func (UnimplementedKanbanServiceHandler) DeleteCard(context.Context, *connect.Request[kanban.DeleteCardRequest]) (*connect.Response[kanban.DeleteCardResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("kanban.KanbanService.DeleteCard is not implemented"))
}

func (UnimplementedKanbanServiceHandler) MoveCard(context.Context, *connect.Request[kanban.MoveCardRequest]) (*connect.Response[kanban.MoveCardResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("kanban.KanbanService.MoveCard is not implemented"))
}
