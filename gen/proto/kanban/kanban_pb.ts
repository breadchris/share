// @generated by protoc-gen-es v1.10.1 with parameter "target=ts"
// @generated from file proto/kanban/kanban.proto (package kanban, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3, Timestamp } from "@bufbuild/protobuf";

/**
 * Core data models
 *
 * @generated from message kanban.Board
 */
export class Board extends Message<Board> {
  /**
   * @generated from field: string id = 1;
   */
  id = "";

  /**
   * @generated from field: string name = 2;
   */
  name = "";

  /**
   * @generated from field: string description = 3;
   */
  description = "";

  /**
   * @generated from field: string user_id = 4;
   */
  userId = "";

  /**
   * @generated from field: repeated kanban.Column columns = 5;
   */
  columns: Column[] = [];

  /**
   * @generated from field: google.protobuf.Timestamp created_at = 6;
   */
  createdAt?: Timestamp;

  /**
   * @generated from field: google.protobuf.Timestamp updated_at = 7;
   */
  updatedAt?: Timestamp;

  constructor(data?: PartialMessage<Board>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "kanban.Board";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "description", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "user_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "columns", kind: "message", T: Column, repeated: true },
    { no: 6, name: "created_at", kind: "message", T: Timestamp },
    { no: 7, name: "updated_at", kind: "message", T: Timestamp },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Board {
    return new Board().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Board {
    return new Board().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Board {
    return new Board().fromJsonString(jsonString, options);
  }

  static equals(a: Board | PlainMessage<Board> | undefined, b: Board | PlainMessage<Board> | undefined): boolean {
    return proto3.util.equals(Board, a, b);
  }
}

/**
 * @generated from message kanban.Column
 */
export class Column extends Message<Column> {
  /**
   * @generated from field: string id = 1;
   */
  id = "";

  /**
   * @generated from field: string title = 2;
   */
  title = "";

  /**
   * @generated from field: int32 position = 3;
   */
  position = 0;

  /**
   * @generated from field: string board_id = 4;
   */
  boardId = "";

  /**
   * @generated from field: repeated kanban.Card cards = 5;
   */
  cards: Card[] = [];

  /**
   * @generated from field: google.protobuf.Timestamp created_at = 6;
   */
  createdAt?: Timestamp;

  /**
   * @generated from field: google.protobuf.Timestamp updated_at = 7;
   */
  updatedAt?: Timestamp;

  constructor(data?: PartialMessage<Column>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "kanban.Column";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "title", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "position", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 4, name: "board_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "cards", kind: "message", T: Card, repeated: true },
    { no: 6, name: "created_at", kind: "message", T: Timestamp },
    { no: 7, name: "updated_at", kind: "message", T: Timestamp },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Column {
    return new Column().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Column {
    return new Column().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Column {
    return new Column().fromJsonString(jsonString, options);
  }

  static equals(a: Column | PlainMessage<Column> | undefined, b: Column | PlainMessage<Column> | undefined): boolean {
    return proto3.util.equals(Column, a, b);
  }
}

/**
 * @generated from message kanban.Card
 */
export class Card extends Message<Card> {
  /**
   * @generated from field: string id = 1;
   */
  id = "";

  /**
   * @generated from field: string title = 2;
   */
  title = "";

  /**
   * @generated from field: string description = 3;
   */
  description = "";

  /**
   * @generated from field: int32 position = 4;
   */
  position = 0;

  /**
   * @generated from field: string column_id = 5;
   */
  columnId = "";

  /**
   * @generated from field: string assignee_id = 6;
   */
  assigneeId = "";

  /**
   * @generated from field: repeated string labels = 7;
   */
  labels: string[] = [];

  /**
   * @generated from field: google.protobuf.Timestamp due_date = 8;
   */
  dueDate?: Timestamp;

  /**
   * @generated from field: google.protobuf.Timestamp created_at = 9;
   */
  createdAt?: Timestamp;

  /**
   * @generated from field: google.protobuf.Timestamp updated_at = 10;
   */
  updatedAt?: Timestamp;

  constructor(data?: PartialMessage<Card>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "kanban.Card";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "title", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "description", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "position", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 5, name: "column_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 6, name: "assignee_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 7, name: "labels", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 8, name: "due_date", kind: "message", T: Timestamp },
    { no: 9, name: "created_at", kind: "message", T: Timestamp },
    { no: 10, name: "updated_at", kind: "message", T: Timestamp },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Card {
    return new Card().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Card {
    return new Card().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Card {
    return new Card().fromJsonString(jsonString, options);
  }

  static equals(a: Card | PlainMessage<Card> | undefined, b: Card | PlainMessage<Card> | undefined): boolean {
    return proto3.util.equals(Card, a, b);
  }
}

/**
 * Board operations
 *
 * @generated from message kanban.CreateBoardRequest
 */
export class CreateBoardRequest extends Message<CreateBoardRequest> {
  /**
   * @generated from field: string name = 1;
   */
  name = "";

  /**
   * @generated from field: string description = 2;
   */
  description = "";

  constructor(data?: PartialMessage<CreateBoardRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "kanban.CreateBoardRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "description", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CreateBoardRequest {
    return new CreateBoardRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CreateBoardRequest {
    return new CreateBoardRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CreateBoardRequest {
    return new CreateBoardRequest().fromJsonString(jsonString, options);
  }

  static equals(a: CreateBoardRequest | PlainMessage<CreateBoardRequest> | undefined, b: CreateBoardRequest | PlainMessage<CreateBoardRequest> | undefined): boolean {
    return proto3.util.equals(CreateBoardRequest, a, b);
  }
}

/**
 * @generated from message kanban.CreateBoardResponse
 */
export class CreateBoardResponse extends Message<CreateBoardResponse> {
  /**
   * @generated from field: kanban.Board board = 1;
   */
  board?: Board;

  constructor(data?: PartialMessage<CreateBoardResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "kanban.CreateBoardResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "board", kind: "message", T: Board },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CreateBoardResponse {
    return new CreateBoardResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CreateBoardResponse {
    return new CreateBoardResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CreateBoardResponse {
    return new CreateBoardResponse().fromJsonString(jsonString, options);
  }

  static equals(a: CreateBoardResponse | PlainMessage<CreateBoardResponse> | undefined, b: CreateBoardResponse | PlainMessage<CreateBoardResponse> | undefined): boolean {
    return proto3.util.equals(CreateBoardResponse, a, b);
  }
}

/**
 * @generated from message kanban.GetBoardRequest
 */
export class GetBoardRequest extends Message<GetBoardRequest> {
  /**
   * @generated from field: string id = 1;
   */
  id = "";

  constructor(data?: PartialMessage<GetBoardRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "kanban.GetBoardRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetBoardRequest {
    return new GetBoardRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetBoardRequest {
    return new GetBoardRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetBoardRequest {
    return new GetBoardRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetBoardRequest | PlainMessage<GetBoardRequest> | undefined, b: GetBoardRequest | PlainMessage<GetBoardRequest> | undefined): boolean {
    return proto3.util.equals(GetBoardRequest, a, b);
  }
}

/**
 * @generated from message kanban.GetBoardResponse
 */
export class GetBoardResponse extends Message<GetBoardResponse> {
  /**
   * @generated from field: kanban.Board board = 1;
   */
  board?: Board;

  constructor(data?: PartialMessage<GetBoardResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "kanban.GetBoardResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "board", kind: "message", T: Board },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetBoardResponse {
    return new GetBoardResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetBoardResponse {
    return new GetBoardResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetBoardResponse {
    return new GetBoardResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetBoardResponse | PlainMessage<GetBoardResponse> | undefined, b: GetBoardResponse | PlainMessage<GetBoardResponse> | undefined): boolean {
    return proto3.util.equals(GetBoardResponse, a, b);
  }
}

/**
 * @generated from message kanban.ListBoardsRequest
 */
export class ListBoardsRequest extends Message<ListBoardsRequest> {
  /**
   * @generated from field: int32 page_size = 1;
   */
  pageSize = 0;

  /**
   * @generated from field: string page_token = 2;
   */
  pageToken = "";

  constructor(data?: PartialMessage<ListBoardsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "kanban.ListBoardsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "page_size", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 2, name: "page_token", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListBoardsRequest {
    return new ListBoardsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListBoardsRequest {
    return new ListBoardsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListBoardsRequest {
    return new ListBoardsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: ListBoardsRequest | PlainMessage<ListBoardsRequest> | undefined, b: ListBoardsRequest | PlainMessage<ListBoardsRequest> | undefined): boolean {
    return proto3.util.equals(ListBoardsRequest, a, b);
  }
}

/**
 * @generated from message kanban.ListBoardsResponse
 */
export class ListBoardsResponse extends Message<ListBoardsResponse> {
  /**
   * @generated from field: repeated kanban.Board boards = 1;
   */
  boards: Board[] = [];

  /**
   * @generated from field: string next_page_token = 2;
   */
  nextPageToken = "";

  constructor(data?: PartialMessage<ListBoardsResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "kanban.ListBoardsResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "boards", kind: "message", T: Board, repeated: true },
    { no: 2, name: "next_page_token", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListBoardsResponse {
    return new ListBoardsResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListBoardsResponse {
    return new ListBoardsResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListBoardsResponse {
    return new ListBoardsResponse().fromJsonString(jsonString, options);
  }

  static equals(a: ListBoardsResponse | PlainMessage<ListBoardsResponse> | undefined, b: ListBoardsResponse | PlainMessage<ListBoardsResponse> | undefined): boolean {
    return proto3.util.equals(ListBoardsResponse, a, b);
  }
}

/**
 * @generated from message kanban.UpdateBoardRequest
 */
export class UpdateBoardRequest extends Message<UpdateBoardRequest> {
  /**
   * @generated from field: string id = 1;
   */
  id = "";

  /**
   * @generated from field: string name = 2;
   */
  name = "";

  /**
   * @generated from field: string description = 3;
   */
  description = "";

  constructor(data?: PartialMessage<UpdateBoardRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "kanban.UpdateBoardRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "description", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UpdateBoardRequest {
    return new UpdateBoardRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UpdateBoardRequest {
    return new UpdateBoardRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UpdateBoardRequest {
    return new UpdateBoardRequest().fromJsonString(jsonString, options);
  }

  static equals(a: UpdateBoardRequest | PlainMessage<UpdateBoardRequest> | undefined, b: UpdateBoardRequest | PlainMessage<UpdateBoardRequest> | undefined): boolean {
    return proto3.util.equals(UpdateBoardRequest, a, b);
  }
}

/**
 * @generated from message kanban.UpdateBoardResponse
 */
export class UpdateBoardResponse extends Message<UpdateBoardResponse> {
  /**
   * @generated from field: kanban.Board board = 1;
   */
  board?: Board;

  constructor(data?: PartialMessage<UpdateBoardResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "kanban.UpdateBoardResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "board", kind: "message", T: Board },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UpdateBoardResponse {
    return new UpdateBoardResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UpdateBoardResponse {
    return new UpdateBoardResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UpdateBoardResponse {
    return new UpdateBoardResponse().fromJsonString(jsonString, options);
  }

  static equals(a: UpdateBoardResponse | PlainMessage<UpdateBoardResponse> | undefined, b: UpdateBoardResponse | PlainMessage<UpdateBoardResponse> | undefined): boolean {
    return proto3.util.equals(UpdateBoardResponse, a, b);
  }
}

/**
 * @generated from message kanban.DeleteBoardRequest
 */
export class DeleteBoardRequest extends Message<DeleteBoardRequest> {
  /**
   * @generated from field: string id = 1;
   */
  id = "";

  constructor(data?: PartialMessage<DeleteBoardRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "kanban.DeleteBoardRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DeleteBoardRequest {
    return new DeleteBoardRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DeleteBoardRequest {
    return new DeleteBoardRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DeleteBoardRequest {
    return new DeleteBoardRequest().fromJsonString(jsonString, options);
  }

  static equals(a: DeleteBoardRequest | PlainMessage<DeleteBoardRequest> | undefined, b: DeleteBoardRequest | PlainMessage<DeleteBoardRequest> | undefined): boolean {
    return proto3.util.equals(DeleteBoardRequest, a, b);
  }
}

/**
 * @generated from message kanban.DeleteBoardResponse
 */
export class DeleteBoardResponse extends Message<DeleteBoardResponse> {
  /**
   * @generated from field: bool success = 1;
   */
  success = false;

  constructor(data?: PartialMessage<DeleteBoardResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "kanban.DeleteBoardResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "success", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DeleteBoardResponse {
    return new DeleteBoardResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DeleteBoardResponse {
    return new DeleteBoardResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DeleteBoardResponse {
    return new DeleteBoardResponse().fromJsonString(jsonString, options);
  }

  static equals(a: DeleteBoardResponse | PlainMessage<DeleteBoardResponse> | undefined, b: DeleteBoardResponse | PlainMessage<DeleteBoardResponse> | undefined): boolean {
    return proto3.util.equals(DeleteBoardResponse, a, b);
  }
}

/**
 * Column operations
 *
 * @generated from message kanban.CreateColumnRequest
 */
export class CreateColumnRequest extends Message<CreateColumnRequest> {
  /**
   * @generated from field: string board_id = 1;
   */
  boardId = "";

  /**
   * @generated from field: string title = 2;
   */
  title = "";

  /**
   * @generated from field: int32 position = 3;
   */
  position = 0;

  constructor(data?: PartialMessage<CreateColumnRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "kanban.CreateColumnRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "board_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "title", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "position", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CreateColumnRequest {
    return new CreateColumnRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CreateColumnRequest {
    return new CreateColumnRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CreateColumnRequest {
    return new CreateColumnRequest().fromJsonString(jsonString, options);
  }

  static equals(a: CreateColumnRequest | PlainMessage<CreateColumnRequest> | undefined, b: CreateColumnRequest | PlainMessage<CreateColumnRequest> | undefined): boolean {
    return proto3.util.equals(CreateColumnRequest, a, b);
  }
}

/**
 * @generated from message kanban.CreateColumnResponse
 */
export class CreateColumnResponse extends Message<CreateColumnResponse> {
  /**
   * @generated from field: kanban.Column column = 1;
   */
  column?: Column;

  constructor(data?: PartialMessage<CreateColumnResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "kanban.CreateColumnResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "column", kind: "message", T: Column },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CreateColumnResponse {
    return new CreateColumnResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CreateColumnResponse {
    return new CreateColumnResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CreateColumnResponse {
    return new CreateColumnResponse().fromJsonString(jsonString, options);
  }

  static equals(a: CreateColumnResponse | PlainMessage<CreateColumnResponse> | undefined, b: CreateColumnResponse | PlainMessage<CreateColumnResponse> | undefined): boolean {
    return proto3.util.equals(CreateColumnResponse, a, b);
  }
}

/**
 * @generated from message kanban.UpdateColumnRequest
 */
export class UpdateColumnRequest extends Message<UpdateColumnRequest> {
  /**
   * @generated from field: string id = 1;
   */
  id = "";

  /**
   * @generated from field: string title = 2;
   */
  title = "";

  constructor(data?: PartialMessage<UpdateColumnRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "kanban.UpdateColumnRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "title", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UpdateColumnRequest {
    return new UpdateColumnRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UpdateColumnRequest {
    return new UpdateColumnRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UpdateColumnRequest {
    return new UpdateColumnRequest().fromJsonString(jsonString, options);
  }

  static equals(a: UpdateColumnRequest | PlainMessage<UpdateColumnRequest> | undefined, b: UpdateColumnRequest | PlainMessage<UpdateColumnRequest> | undefined): boolean {
    return proto3.util.equals(UpdateColumnRequest, a, b);
  }
}

/**
 * @generated from message kanban.UpdateColumnResponse
 */
export class UpdateColumnResponse extends Message<UpdateColumnResponse> {
  /**
   * @generated from field: kanban.Column column = 1;
   */
  column?: Column;

  constructor(data?: PartialMessage<UpdateColumnResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "kanban.UpdateColumnResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "column", kind: "message", T: Column },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UpdateColumnResponse {
    return new UpdateColumnResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UpdateColumnResponse {
    return new UpdateColumnResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UpdateColumnResponse {
    return new UpdateColumnResponse().fromJsonString(jsonString, options);
  }

  static equals(a: UpdateColumnResponse | PlainMessage<UpdateColumnResponse> | undefined, b: UpdateColumnResponse | PlainMessage<UpdateColumnResponse> | undefined): boolean {
    return proto3.util.equals(UpdateColumnResponse, a, b);
  }
}

/**
 * @generated from message kanban.DeleteColumnRequest
 */
export class DeleteColumnRequest extends Message<DeleteColumnRequest> {
  /**
   * @generated from field: string id = 1;
   */
  id = "";

  constructor(data?: PartialMessage<DeleteColumnRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "kanban.DeleteColumnRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DeleteColumnRequest {
    return new DeleteColumnRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DeleteColumnRequest {
    return new DeleteColumnRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DeleteColumnRequest {
    return new DeleteColumnRequest().fromJsonString(jsonString, options);
  }

  static equals(a: DeleteColumnRequest | PlainMessage<DeleteColumnRequest> | undefined, b: DeleteColumnRequest | PlainMessage<DeleteColumnRequest> | undefined): boolean {
    return proto3.util.equals(DeleteColumnRequest, a, b);
  }
}

/**
 * @generated from message kanban.DeleteColumnResponse
 */
export class DeleteColumnResponse extends Message<DeleteColumnResponse> {
  /**
   * @generated from field: bool success = 1;
   */
  success = false;

  constructor(data?: PartialMessage<DeleteColumnResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "kanban.DeleteColumnResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "success", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DeleteColumnResponse {
    return new DeleteColumnResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DeleteColumnResponse {
    return new DeleteColumnResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DeleteColumnResponse {
    return new DeleteColumnResponse().fromJsonString(jsonString, options);
  }

  static equals(a: DeleteColumnResponse | PlainMessage<DeleteColumnResponse> | undefined, b: DeleteColumnResponse | PlainMessage<DeleteColumnResponse> | undefined): boolean {
    return proto3.util.equals(DeleteColumnResponse, a, b);
  }
}

/**
 * @generated from message kanban.MoveColumnRequest
 */
export class MoveColumnRequest extends Message<MoveColumnRequest> {
  /**
   * @generated from field: string id = 1;
   */
  id = "";

  /**
   * @generated from field: int32 new_position = 2;
   */
  newPosition = 0;

  constructor(data?: PartialMessage<MoveColumnRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "kanban.MoveColumnRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "new_position", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MoveColumnRequest {
    return new MoveColumnRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MoveColumnRequest {
    return new MoveColumnRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MoveColumnRequest {
    return new MoveColumnRequest().fromJsonString(jsonString, options);
  }

  static equals(a: MoveColumnRequest | PlainMessage<MoveColumnRequest> | undefined, b: MoveColumnRequest | PlainMessage<MoveColumnRequest> | undefined): boolean {
    return proto3.util.equals(MoveColumnRequest, a, b);
  }
}

/**
 * @generated from message kanban.MoveColumnResponse
 */
export class MoveColumnResponse extends Message<MoveColumnResponse> {
  /**
   * @generated from field: kanban.Column column = 1;
   */
  column?: Column;

  constructor(data?: PartialMessage<MoveColumnResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "kanban.MoveColumnResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "column", kind: "message", T: Column },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MoveColumnResponse {
    return new MoveColumnResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MoveColumnResponse {
    return new MoveColumnResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MoveColumnResponse {
    return new MoveColumnResponse().fromJsonString(jsonString, options);
  }

  static equals(a: MoveColumnResponse | PlainMessage<MoveColumnResponse> | undefined, b: MoveColumnResponse | PlainMessage<MoveColumnResponse> | undefined): boolean {
    return proto3.util.equals(MoveColumnResponse, a, b);
  }
}

/**
 * Card operations
 *
 * @generated from message kanban.CreateCardRequest
 */
export class CreateCardRequest extends Message<CreateCardRequest> {
  /**
   * @generated from field: string column_id = 1;
   */
  columnId = "";

  /**
   * @generated from field: string title = 2;
   */
  title = "";

  /**
   * @generated from field: string description = 3;
   */
  description = "";

  /**
   * @generated from field: int32 position = 4;
   */
  position = 0;

  /**
   * @generated from field: string assignee_id = 5;
   */
  assigneeId = "";

  /**
   * @generated from field: repeated string labels = 6;
   */
  labels: string[] = [];

  /**
   * @generated from field: google.protobuf.Timestamp due_date = 7;
   */
  dueDate?: Timestamp;

  constructor(data?: PartialMessage<CreateCardRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "kanban.CreateCardRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "column_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "title", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "description", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "position", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 5, name: "assignee_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 6, name: "labels", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 7, name: "due_date", kind: "message", T: Timestamp },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CreateCardRequest {
    return new CreateCardRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CreateCardRequest {
    return new CreateCardRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CreateCardRequest {
    return new CreateCardRequest().fromJsonString(jsonString, options);
  }

  static equals(a: CreateCardRequest | PlainMessage<CreateCardRequest> | undefined, b: CreateCardRequest | PlainMessage<CreateCardRequest> | undefined): boolean {
    return proto3.util.equals(CreateCardRequest, a, b);
  }
}

/**
 * @generated from message kanban.CreateCardResponse
 */
export class CreateCardResponse extends Message<CreateCardResponse> {
  /**
   * @generated from field: kanban.Card card = 1;
   */
  card?: Card;

  constructor(data?: PartialMessage<CreateCardResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "kanban.CreateCardResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "card", kind: "message", T: Card },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CreateCardResponse {
    return new CreateCardResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CreateCardResponse {
    return new CreateCardResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CreateCardResponse {
    return new CreateCardResponse().fromJsonString(jsonString, options);
  }

  static equals(a: CreateCardResponse | PlainMessage<CreateCardResponse> | undefined, b: CreateCardResponse | PlainMessage<CreateCardResponse> | undefined): boolean {
    return proto3.util.equals(CreateCardResponse, a, b);
  }
}

/**
 * @generated from message kanban.UpdateCardRequest
 */
export class UpdateCardRequest extends Message<UpdateCardRequest> {
  /**
   * @generated from field: string id = 1;
   */
  id = "";

  /**
   * @generated from field: string title = 2;
   */
  title = "";

  /**
   * @generated from field: string description = 3;
   */
  description = "";

  /**
   * @generated from field: string assignee_id = 4;
   */
  assigneeId = "";

  /**
   * @generated from field: repeated string labels = 5;
   */
  labels: string[] = [];

  /**
   * @generated from field: google.protobuf.Timestamp due_date = 6;
   */
  dueDate?: Timestamp;

  constructor(data?: PartialMessage<UpdateCardRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "kanban.UpdateCardRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "title", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "description", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "assignee_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "labels", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 6, name: "due_date", kind: "message", T: Timestamp },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UpdateCardRequest {
    return new UpdateCardRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UpdateCardRequest {
    return new UpdateCardRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UpdateCardRequest {
    return new UpdateCardRequest().fromJsonString(jsonString, options);
  }

  static equals(a: UpdateCardRequest | PlainMessage<UpdateCardRequest> | undefined, b: UpdateCardRequest | PlainMessage<UpdateCardRequest> | undefined): boolean {
    return proto3.util.equals(UpdateCardRequest, a, b);
  }
}

/**
 * @generated from message kanban.UpdateCardResponse
 */
export class UpdateCardResponse extends Message<UpdateCardResponse> {
  /**
   * @generated from field: kanban.Card card = 1;
   */
  card?: Card;

  constructor(data?: PartialMessage<UpdateCardResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "kanban.UpdateCardResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "card", kind: "message", T: Card },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UpdateCardResponse {
    return new UpdateCardResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UpdateCardResponse {
    return new UpdateCardResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UpdateCardResponse {
    return new UpdateCardResponse().fromJsonString(jsonString, options);
  }

  static equals(a: UpdateCardResponse | PlainMessage<UpdateCardResponse> | undefined, b: UpdateCardResponse | PlainMessage<UpdateCardResponse> | undefined): boolean {
    return proto3.util.equals(UpdateCardResponse, a, b);
  }
}

/**
 * @generated from message kanban.DeleteCardRequest
 */
export class DeleteCardRequest extends Message<DeleteCardRequest> {
  /**
   * @generated from field: string id = 1;
   */
  id = "";

  constructor(data?: PartialMessage<DeleteCardRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "kanban.DeleteCardRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DeleteCardRequest {
    return new DeleteCardRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DeleteCardRequest {
    return new DeleteCardRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DeleteCardRequest {
    return new DeleteCardRequest().fromJsonString(jsonString, options);
  }

  static equals(a: DeleteCardRequest | PlainMessage<DeleteCardRequest> | undefined, b: DeleteCardRequest | PlainMessage<DeleteCardRequest> | undefined): boolean {
    return proto3.util.equals(DeleteCardRequest, a, b);
  }
}

/**
 * @generated from message kanban.DeleteCardResponse
 */
export class DeleteCardResponse extends Message<DeleteCardResponse> {
  /**
   * @generated from field: bool success = 1;
   */
  success = false;

  constructor(data?: PartialMessage<DeleteCardResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "kanban.DeleteCardResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "success", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DeleteCardResponse {
    return new DeleteCardResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DeleteCardResponse {
    return new DeleteCardResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DeleteCardResponse {
    return new DeleteCardResponse().fromJsonString(jsonString, options);
  }

  static equals(a: DeleteCardResponse | PlainMessage<DeleteCardResponse> | undefined, b: DeleteCardResponse | PlainMessage<DeleteCardResponse> | undefined): boolean {
    return proto3.util.equals(DeleteCardResponse, a, b);
  }
}

/**
 * @generated from message kanban.MoveCardRequest
 */
export class MoveCardRequest extends Message<MoveCardRequest> {
  /**
   * @generated from field: string id = 1;
   */
  id = "";

  /**
   * @generated from field: string target_column_id = 2;
   */
  targetColumnId = "";

  /**
   * @generated from field: int32 new_position = 3;
   */
  newPosition = 0;

  constructor(data?: PartialMessage<MoveCardRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "kanban.MoveCardRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "target_column_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "new_position", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MoveCardRequest {
    return new MoveCardRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MoveCardRequest {
    return new MoveCardRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MoveCardRequest {
    return new MoveCardRequest().fromJsonString(jsonString, options);
  }

  static equals(a: MoveCardRequest | PlainMessage<MoveCardRequest> | undefined, b: MoveCardRequest | PlainMessage<MoveCardRequest> | undefined): boolean {
    return proto3.util.equals(MoveCardRequest, a, b);
  }
}

/**
 * @generated from message kanban.MoveCardResponse
 */
export class MoveCardResponse extends Message<MoveCardResponse> {
  /**
   * @generated from field: kanban.Card card = 1;
   */
  card?: Card;

  constructor(data?: PartialMessage<MoveCardResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "kanban.MoveCardResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "card", kind: "message", T: Card },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MoveCardResponse {
    return new MoveCardResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MoveCardResponse {
    return new MoveCardResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MoveCardResponse {
    return new MoveCardResponse().fromJsonString(jsonString, options);
  }

  static equals(a: MoveCardResponse | PlainMessage<MoveCardResponse> | undefined, b: MoveCardResponse | PlainMessage<MoveCardResponse> | undefined): boolean {
    return proto3.util.equals(MoveCardResponse, a, b);
  }
}

