// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             (unknown)
// source: proto/kanban/kanban.proto

package kanban

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// KanbanServiceClient is the client API for KanbanService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type KanbanServiceClient interface {
	// Board operations
	CreateBoard(ctx context.Context, in *CreateBoardRequest, opts ...grpc.CallOption) (*CreateBoardResponse, error)
	GetBoard(ctx context.Context, in *GetBoardRequest, opts ...grpc.CallOption) (*GetBoardResponse, error)
	ListBoards(ctx context.Context, in *ListBoardsRequest, opts ...grpc.CallOption) (*ListBoardsResponse, error)
	UpdateBoard(ctx context.Context, in *UpdateBoardRequest, opts ...grpc.CallOption) (*UpdateBoardResponse, error)
	DeleteBoard(ctx context.Context, in *DeleteBoardRequest, opts ...grpc.CallOption) (*DeleteBoardResponse, error)
	// Column operations
	CreateColumn(ctx context.Context, in *CreateColumnRequest, opts ...grpc.CallOption) (*CreateColumnResponse, error)
	UpdateColumn(ctx context.Context, in *UpdateColumnRequest, opts ...grpc.CallOption) (*UpdateColumnResponse, error)
	DeleteColumn(ctx context.Context, in *DeleteColumnRequest, opts ...grpc.CallOption) (*DeleteColumnResponse, error)
	MoveColumn(ctx context.Context, in *MoveColumnRequest, opts ...grpc.CallOption) (*MoveColumnResponse, error)
	// Card operations
	CreateCard(ctx context.Context, in *CreateCardRequest, opts ...grpc.CallOption) (*CreateCardResponse, error)
	UpdateCard(ctx context.Context, in *UpdateCardRequest, opts ...grpc.CallOption) (*UpdateCardResponse, error)
	DeleteCard(ctx context.Context, in *DeleteCardRequest, opts ...grpc.CallOption) (*DeleteCardResponse, error)
	MoveCard(ctx context.Context, in *MoveCardRequest, opts ...grpc.CallOption) (*MoveCardResponse, error)
}

type kanbanServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewKanbanServiceClient(cc grpc.ClientConnInterface) KanbanServiceClient {
	return &kanbanServiceClient{cc}
}

func (c *kanbanServiceClient) CreateBoard(ctx context.Context, in *CreateBoardRequest, opts ...grpc.CallOption) (*CreateBoardResponse, error) {
	out := new(CreateBoardResponse)
	err := c.cc.Invoke(ctx, "/kanban.KanbanService/CreateBoard", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kanbanServiceClient) GetBoard(ctx context.Context, in *GetBoardRequest, opts ...grpc.CallOption) (*GetBoardResponse, error) {
	out := new(GetBoardResponse)
	err := c.cc.Invoke(ctx, "/kanban.KanbanService/GetBoard", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kanbanServiceClient) ListBoards(ctx context.Context, in *ListBoardsRequest, opts ...grpc.CallOption) (*ListBoardsResponse, error) {
	out := new(ListBoardsResponse)
	err := c.cc.Invoke(ctx, "/kanban.KanbanService/ListBoards", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kanbanServiceClient) UpdateBoard(ctx context.Context, in *UpdateBoardRequest, opts ...grpc.CallOption) (*UpdateBoardResponse, error) {
	out := new(UpdateBoardResponse)
	err := c.cc.Invoke(ctx, "/kanban.KanbanService/UpdateBoard", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kanbanServiceClient) DeleteBoard(ctx context.Context, in *DeleteBoardRequest, opts ...grpc.CallOption) (*DeleteBoardResponse, error) {
	out := new(DeleteBoardResponse)
	err := c.cc.Invoke(ctx, "/kanban.KanbanService/DeleteBoard", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kanbanServiceClient) CreateColumn(ctx context.Context, in *CreateColumnRequest, opts ...grpc.CallOption) (*CreateColumnResponse, error) {
	out := new(CreateColumnResponse)
	err := c.cc.Invoke(ctx, "/kanban.KanbanService/CreateColumn", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kanbanServiceClient) UpdateColumn(ctx context.Context, in *UpdateColumnRequest, opts ...grpc.CallOption) (*UpdateColumnResponse, error) {
	out := new(UpdateColumnResponse)
	err := c.cc.Invoke(ctx, "/kanban.KanbanService/UpdateColumn", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kanbanServiceClient) DeleteColumn(ctx context.Context, in *DeleteColumnRequest, opts ...grpc.CallOption) (*DeleteColumnResponse, error) {
	out := new(DeleteColumnResponse)
	err := c.cc.Invoke(ctx, "/kanban.KanbanService/DeleteColumn", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kanbanServiceClient) MoveColumn(ctx context.Context, in *MoveColumnRequest, opts ...grpc.CallOption) (*MoveColumnResponse, error) {
	out := new(MoveColumnResponse)
	err := c.cc.Invoke(ctx, "/kanban.KanbanService/MoveColumn", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kanbanServiceClient) CreateCard(ctx context.Context, in *CreateCardRequest, opts ...grpc.CallOption) (*CreateCardResponse, error) {
	out := new(CreateCardResponse)
	err := c.cc.Invoke(ctx, "/kanban.KanbanService/CreateCard", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kanbanServiceClient) UpdateCard(ctx context.Context, in *UpdateCardRequest, opts ...grpc.CallOption) (*UpdateCardResponse, error) {
	out := new(UpdateCardResponse)
	err := c.cc.Invoke(ctx, "/kanban.KanbanService/UpdateCard", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kanbanServiceClient) DeleteCard(ctx context.Context, in *DeleteCardRequest, opts ...grpc.CallOption) (*DeleteCardResponse, error) {
	out := new(DeleteCardResponse)
	err := c.cc.Invoke(ctx, "/kanban.KanbanService/DeleteCard", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kanbanServiceClient) MoveCard(ctx context.Context, in *MoveCardRequest, opts ...grpc.CallOption) (*MoveCardResponse, error) {
	out := new(MoveCardResponse)
	err := c.cc.Invoke(ctx, "/kanban.KanbanService/MoveCard", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// KanbanServiceServer is the server API for KanbanService service.
// All implementations should embed UnimplementedKanbanServiceServer
// for forward compatibility
type KanbanServiceServer interface {
	// Board operations
	CreateBoard(context.Context, *CreateBoardRequest) (*CreateBoardResponse, error)
	GetBoard(context.Context, *GetBoardRequest) (*GetBoardResponse, error)
	ListBoards(context.Context, *ListBoardsRequest) (*ListBoardsResponse, error)
	UpdateBoard(context.Context, *UpdateBoardRequest) (*UpdateBoardResponse, error)
	DeleteBoard(context.Context, *DeleteBoardRequest) (*DeleteBoardResponse, error)
	// Column operations
	CreateColumn(context.Context, *CreateColumnRequest) (*CreateColumnResponse, error)
	UpdateColumn(context.Context, *UpdateColumnRequest) (*UpdateColumnResponse, error)
	DeleteColumn(context.Context, *DeleteColumnRequest) (*DeleteColumnResponse, error)
	MoveColumn(context.Context, *MoveColumnRequest) (*MoveColumnResponse, error)
	// Card operations
	CreateCard(context.Context, *CreateCardRequest) (*CreateCardResponse, error)
	UpdateCard(context.Context, *UpdateCardRequest) (*UpdateCardResponse, error)
	DeleteCard(context.Context, *DeleteCardRequest) (*DeleteCardResponse, error)
	MoveCard(context.Context, *MoveCardRequest) (*MoveCardResponse, error)
}

// UnimplementedKanbanServiceServer should be embedded to have forward compatible implementations.
type UnimplementedKanbanServiceServer struct {
}

func (UnimplementedKanbanServiceServer) CreateBoard(context.Context, *CreateBoardRequest) (*CreateBoardResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateBoard not implemented")
}
func (UnimplementedKanbanServiceServer) GetBoard(context.Context, *GetBoardRequest) (*GetBoardResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBoard not implemented")
}
func (UnimplementedKanbanServiceServer) ListBoards(context.Context, *ListBoardsRequest) (*ListBoardsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListBoards not implemented")
}
func (UnimplementedKanbanServiceServer) UpdateBoard(context.Context, *UpdateBoardRequest) (*UpdateBoardResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateBoard not implemented")
}
func (UnimplementedKanbanServiceServer) DeleteBoard(context.Context, *DeleteBoardRequest) (*DeleteBoardResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteBoard not implemented")
}
func (UnimplementedKanbanServiceServer) CreateColumn(context.Context, *CreateColumnRequest) (*CreateColumnResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateColumn not implemented")
}
func (UnimplementedKanbanServiceServer) UpdateColumn(context.Context, *UpdateColumnRequest) (*UpdateColumnResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateColumn not implemented")
}
func (UnimplementedKanbanServiceServer) DeleteColumn(context.Context, *DeleteColumnRequest) (*DeleteColumnResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteColumn not implemented")
}
func (UnimplementedKanbanServiceServer) MoveColumn(context.Context, *MoveColumnRequest) (*MoveColumnResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MoveColumn not implemented")
}
func (UnimplementedKanbanServiceServer) CreateCard(context.Context, *CreateCardRequest) (*CreateCardResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateCard not implemented")
}
func (UnimplementedKanbanServiceServer) UpdateCard(context.Context, *UpdateCardRequest) (*UpdateCardResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateCard not implemented")
}
func (UnimplementedKanbanServiceServer) DeleteCard(context.Context, *DeleteCardRequest) (*DeleteCardResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteCard not implemented")
}
func (UnimplementedKanbanServiceServer) MoveCard(context.Context, *MoveCardRequest) (*MoveCardResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MoveCard not implemented")
}

// UnsafeKanbanServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to KanbanServiceServer will
// result in compilation errors.
type UnsafeKanbanServiceServer interface {
	mustEmbedUnimplementedKanbanServiceServer()
}

func RegisterKanbanServiceServer(s grpc.ServiceRegistrar, srv KanbanServiceServer) {
	s.RegisterService(&KanbanService_ServiceDesc, srv)
}

func _KanbanService_CreateBoard_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateBoardRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KanbanServiceServer).CreateBoard(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kanban.KanbanService/CreateBoard",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KanbanServiceServer).CreateBoard(ctx, req.(*CreateBoardRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KanbanService_GetBoard_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBoardRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KanbanServiceServer).GetBoard(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kanban.KanbanService/GetBoard",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KanbanServiceServer).GetBoard(ctx, req.(*GetBoardRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KanbanService_ListBoards_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListBoardsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KanbanServiceServer).ListBoards(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kanban.KanbanService/ListBoards",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KanbanServiceServer).ListBoards(ctx, req.(*ListBoardsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KanbanService_UpdateBoard_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateBoardRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KanbanServiceServer).UpdateBoard(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kanban.KanbanService/UpdateBoard",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KanbanServiceServer).UpdateBoard(ctx, req.(*UpdateBoardRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KanbanService_DeleteBoard_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteBoardRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KanbanServiceServer).DeleteBoard(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kanban.KanbanService/DeleteBoard",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KanbanServiceServer).DeleteBoard(ctx, req.(*DeleteBoardRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KanbanService_CreateColumn_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateColumnRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KanbanServiceServer).CreateColumn(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kanban.KanbanService/CreateColumn",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KanbanServiceServer).CreateColumn(ctx, req.(*CreateColumnRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KanbanService_UpdateColumn_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateColumnRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KanbanServiceServer).UpdateColumn(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kanban.KanbanService/UpdateColumn",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KanbanServiceServer).UpdateColumn(ctx, req.(*UpdateColumnRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KanbanService_DeleteColumn_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteColumnRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KanbanServiceServer).DeleteColumn(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kanban.KanbanService/DeleteColumn",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KanbanServiceServer).DeleteColumn(ctx, req.(*DeleteColumnRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KanbanService_MoveColumn_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MoveColumnRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KanbanServiceServer).MoveColumn(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kanban.KanbanService/MoveColumn",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KanbanServiceServer).MoveColumn(ctx, req.(*MoveColumnRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KanbanService_CreateCard_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateCardRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KanbanServiceServer).CreateCard(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kanban.KanbanService/CreateCard",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KanbanServiceServer).CreateCard(ctx, req.(*CreateCardRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KanbanService_UpdateCard_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateCardRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KanbanServiceServer).UpdateCard(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kanban.KanbanService/UpdateCard",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KanbanServiceServer).UpdateCard(ctx, req.(*UpdateCardRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KanbanService_DeleteCard_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteCardRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KanbanServiceServer).DeleteCard(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kanban.KanbanService/DeleteCard",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KanbanServiceServer).DeleteCard(ctx, req.(*DeleteCardRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KanbanService_MoveCard_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MoveCardRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KanbanServiceServer).MoveCard(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kanban.KanbanService/MoveCard",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KanbanServiceServer).MoveCard(ctx, req.(*MoveCardRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// KanbanService_ServiceDesc is the grpc.ServiceDesc for KanbanService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var KanbanService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "kanban.KanbanService",
	HandlerType: (*KanbanServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateBoard",
			Handler:    _KanbanService_CreateBoard_Handler,
		},
		{
			MethodName: "GetBoard",
			Handler:    _KanbanService_GetBoard_Handler,
		},
		{
			MethodName: "ListBoards",
			Handler:    _KanbanService_ListBoards_Handler,
		},
		{
			MethodName: "UpdateBoard",
			Handler:    _KanbanService_UpdateBoard_Handler,
		},
		{
			MethodName: "DeleteBoard",
			Handler:    _KanbanService_DeleteBoard_Handler,
		},
		{
			MethodName: "CreateColumn",
			Handler:    _KanbanService_CreateColumn_Handler,
		},
		{
			MethodName: "UpdateColumn",
			Handler:    _KanbanService_UpdateColumn_Handler,
		},
		{
			MethodName: "DeleteColumn",
			Handler:    _KanbanService_DeleteColumn_Handler,
		},
		{
			MethodName: "MoveColumn",
			Handler:    _KanbanService_MoveColumn_Handler,
		},
		{
			MethodName: "CreateCard",
			Handler:    _KanbanService_CreateCard_Handler,
		},
		{
			MethodName: "UpdateCard",
			Handler:    _KanbanService_UpdateCard_Handler,
		},
		{
			MethodName: "DeleteCard",
			Handler:    _KanbanService_DeleteCard_Handler,
		},
		{
			MethodName: "MoveCard",
			Handler:    _KanbanService_MoveCard_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/kanban/kanban.proto",
}
