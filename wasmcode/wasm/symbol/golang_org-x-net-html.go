// Code generated by 'yaegi extract golang.org/x/net/html'. DO NOT EDIT.

package symbol

import (
	"golang.org/x/net/html"
	"reflect"
)

func init() {
	Symbols["golang.org/x/net/html/html"] = map[string]reflect.Value{
		// function, constant and variable definitions
		"CommentNode":                reflect.ValueOf(html.CommentNode),
		"CommentToken":               reflect.ValueOf(html.CommentToken),
		"DoctypeNode":                reflect.ValueOf(html.DoctypeNode),
		"DoctypeToken":               reflect.ValueOf(html.DoctypeToken),
		"DocumentNode":               reflect.ValueOf(html.DocumentNode),
		"ElementNode":                reflect.ValueOf(html.ElementNode),
		"EndTagToken":                reflect.ValueOf(html.EndTagToken),
		"ErrBufferExceeded":          reflect.ValueOf(&html.ErrBufferExceeded).Elem(),
		"ErrorNode":                  reflect.ValueOf(html.ErrorNode),
		"ErrorToken":                 reflect.ValueOf(html.ErrorToken),
		"EscapeString":               reflect.ValueOf(html.EscapeString),
		"NewTokenizer":               reflect.ValueOf(html.NewTokenizer),
		"NewTokenizerFragment":       reflect.ValueOf(html.NewTokenizerFragment),
		"Parse":                      reflect.ValueOf(html.Parse),
		"ParseFragment":              reflect.ValueOf(html.ParseFragment),
		"ParseFragmentWithOptions":   reflect.ValueOf(html.ParseFragmentWithOptions),
		"ParseOptionEnableScripting": reflect.ValueOf(html.ParseOptionEnableScripting),
		"ParseWithOptions":           reflect.ValueOf(html.ParseWithOptions),
		"RawNode":                    reflect.ValueOf(html.RawNode),
		"Render":                     reflect.ValueOf(html.Render),
		"SelfClosingTagToken":        reflect.ValueOf(html.SelfClosingTagToken),
		"StartTagToken":              reflect.ValueOf(html.StartTagToken),
		"TextNode":                   reflect.ValueOf(html.TextNode),
		"TextToken":                  reflect.ValueOf(html.TextToken),
		"UnescapeString":             reflect.ValueOf(html.UnescapeString),

		// type definitions
		"Attribute":   reflect.ValueOf((*html.Attribute)(nil)),
		"Node":        reflect.ValueOf((*html.Node)(nil)),
		"NodeType":    reflect.ValueOf((*html.NodeType)(nil)),
		"ParseOption": reflect.ValueOf((*html.ParseOption)(nil)),
		"Token":       reflect.ValueOf((*html.Token)(nil)),
		"TokenType":   reflect.ValueOf((*html.TokenType)(nil)),
		"Tokenizer":   reflect.ValueOf((*html.Tokenizer)(nil)),
	}
}
